
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/helloThingsBoard/target/4.0.0/bsom/helloThingsBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000069a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba9c0  000ba9c0  0000a9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba9e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000224  2003e184  000ba9e8  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000448  2003e3a8  2003e3a8  0002e3a8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bac0c  000bac0c  0002ac0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bac34  000bac34  0002ac34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014097a  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015efd  00000000  00000000  0016b5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003110  00000000  00000000  001814af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0003c090  00000000  00000000  001845bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00045e8d  00000000  00000000  001c064f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0013baa3  00000000  00000000  002064dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0003f35e  00000000  00000000  00341f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b810  00000000  00000000  003812dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009470  00000000  00000000  0038caf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fed0 	bl	b7dd6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fed8 	bl	b7df2 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e184 	.word	0x2003e184
   b404c:	000ba9e8 	.word	0x000ba9e8
   b4050:	2003e3a8 	.word	0x2003e3a8
   b4054:	2003e3a8 	.word	0x2003e3a8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fcf7 	bl	b6a54 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba99c 	.word	0x000ba99c
   b4080:	000ba9c0 	.word	0x000ba9c0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bd84 	b.w	b4b90 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fc01 	bl	b4890 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bc97 	b.w	b69c4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bb6f 	b.w	b5778 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bb6d 	b.w	b5778 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bb73 	b.w	b5788 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	b40e      	push	{r1, r2, r3}
   b40b4:	b503      	push	{r0, r1, lr}
   b40b6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ba:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40c0:	f002 fe41 	bl	b6d46 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c4:	b002      	add	sp, #8
   b40c6:	f85d eb04 	ldr.w	lr, [sp], #4
   b40ca:	b003      	add	sp, #12
   b40cc:	4770      	bx	lr
	...

000b40d0 <_Z12plumeConnectv>:
    goOffline();
    onlineNow = false;
}

void plumeConnect()
{
   b40d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (!plume.connected())
   b40d2:	4d13      	ldr	r5, [pc, #76]	; (b4120 <_Z12plumeConnectv+0x50>)
    {
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b40d4:	4e13      	ldr	r6, [pc, #76]	; (b4124 <_Z12plumeConnectv+0x54>)
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b40d6:	4f14      	ldr	r7, [pc, #80]	; (b4128 <_Z12plumeConnectv+0x58>)
    while (!plume.connected())
   b40d8:	4811      	ldr	r0, [pc, #68]	; (b4120 <_Z12plumeConnectv+0x50>)
   b40da:	f000 fed2 	bl	b4e82 <_ZN12PubSubClient9connectedEv>
   b40de:	4604      	mov	r4, r0
   b40e0:	b9e0      	cbnz	r0, b411c <_Z12plumeConnectv+0x4c>
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b40e2:	f002 f8b5 	bl	b6250 <_Z16_fetch_usbserialv>
   b40e6:	4631      	mov	r1, r6
   b40e8:	f002 fe05 	bl	b6cf6 <_ZN5Print7printlnEPKc>
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b40ec:	490f      	ldr	r1, [pc, #60]	; (b412c <_Z12plumeConnectv+0x5c>)
   b40ee:	4623      	mov	r3, r4
   b40f0:	463a      	mov	r2, r7
   b40f2:	4628      	mov	r0, r5
   b40f4:	f000 ffa4 	bl	b5040 <_ZN12PubSubClient7connectEPKcS1_S1_>
   b40f8:	b130      	cbz	r0, b4108 <_Z12plumeConnectv+0x38>
        {
            Serial.println("plumeConnect(): Connected");
   b40fa:	f002 f8a9 	bl	b6250 <_Z16_fetch_usbserialv>
        }
        else
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
        delay(3000);
    }
}
   b40fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            Serial.println("plumeConnect(): Connected");
   b4102:	490b      	ldr	r1, [pc, #44]	; (b4130 <_Z12plumeConnectv+0x60>)
   b4104:	f002 bdf7 	b.w	b6cf6 <_ZN5Print7printlnEPKc>
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   b4108:	f002 f8a2 	bl	b6250 <_Z16_fetch_usbserialv>
   b410c:	4909      	ldr	r1, [pc, #36]	; (b4134 <_Z12plumeConnectv+0x64>)
   b410e:	f002 fdf2 	bl	b6cf6 <_ZN5Print7printlnEPKc>
        delay(3000);
   b4112:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4116:	f002 fce3 	bl	b6ae0 <delay>
    while (!plume.connected())
   b411a:	e7dd      	b.n	b40d8 <_Z12plumeConnectv+0x8>
}
   b411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b411e:	bf00      	nop
   b4120:	2003e4a0 	.word	0x2003e4a0
   b4124:	000b9e78 	.word	0x000b9e78
   b4128:	000b9eb4 	.word	0x000b9eb4
   b412c:	000b9ec9 	.word	0x000b9ec9
   b4130:	000b9ecf 	.word	0x000b9ecf
   b4134:	000b9ee9 	.word	0x000b9ee9

000b4138 <_Z10reyaxSetupv>:

void reyaxSetup()
{
   b4138:	b500      	push	{lr}
   b413a:	b093      	sub	sp, #76	; 0x4c
    String password = "BA4104032968BA1114299079021594AA";
   b413c:	4984      	ldr	r1, [pc, #528]	; (b4350 <_Z10reyaxSetupv+0x218>)
   b413e:	4668      	mov	r0, sp
   b4140:	f002 fe85 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
    String reply;
   b4144:	4983      	ldr	r1, [pc, #524]	; (b4354 <_Z10reyaxSetupv+0x21c>)
   b4146:	a804      	add	r0, sp, #16
   b4148:	f002 fe81 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
    int addr = 23;
    int net = 6;
    byte buf[40];

    Serial1.printf("AT+CPIN=%s\r\n", password.c_str()); // correct
   b414c:	f002 ffc8 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4150:	9a00      	ldr	r2, [sp, #0]
   b4152:	4981      	ldr	r1, [pc, #516]	; (b4358 <_Z10reyaxSetupv+0x220>)
   b4154:	f7ff ffad 	bl	b40b2 <_ZN5Print6printfEPKcz>
    delay(200);
   b4158:	20c8      	movs	r0, #200	; 0xc8
   b415a:	f002 fcc1 	bl	b6ae0 <delay>
    if (Serial1.available() > 0)
   b415e:	f002 ffbf 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4162:	6803      	ldr	r3, [r0, #0]
   b4164:	691b      	ldr	r3, [r3, #16]
   b4166:	4798      	blx	r3
   b4168:	2800      	cmp	r0, #0
   b416a:	dd18      	ble.n	b419e <_Z10reyaxSetupv+0x66>
    {
        Serial.printf("Awaiting Reply from password\n");
   b416c:	f002 f870 	bl	b6250 <_Z16_fetch_usbserialv>
   b4170:	497a      	ldr	r1, [pc, #488]	; (b435c <_Z10reyaxSetupv+0x224>)
   b4172:	f7ff ff9e 	bl	b40b2 <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b4176:	f002 ffb3 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b417a:	220a      	movs	r2, #10
   b417c:	4601      	mov	r1, r0
   b417e:	a808      	add	r0, sp, #32
   b4180:	f002 fd6a 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b4184:	a908      	add	r1, sp, #32
   b4186:	a804      	add	r0, sp, #16
   b4188:	f002 fe92 	bl	b6eb0 <_ZN6StringaSEOS_>
   b418c:	a808      	add	r0, sp, #32
   b418e:	f002 fe13 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("Reply: %s\n", reply.c_str());
   b4192:	f002 f85d 	bl	b6250 <_Z16_fetch_usbserialv>
   b4196:	9a04      	ldr	r2, [sp, #16]
   b4198:	4971      	ldr	r1, [pc, #452]	; (b4360 <_Z10reyaxSetupv+0x228>)
   b419a:	f7ff ff8a 	bl	b40b2 <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+ADDRESS=%i\r\n", addr); // correct
   b419e:	f002 ff9f 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b41a2:	4970      	ldr	r1, [pc, #448]	; (b4364 <_Z10reyaxSetupv+0x22c>)
   b41a4:	2217      	movs	r2, #23
   b41a6:	f7ff ff84 	bl	b40b2 <_ZN5Print6printfEPKcz>
    delay(200);
   b41aa:	20c8      	movs	r0, #200	; 0xc8
   b41ac:	f002 fc98 	bl	b6ae0 <delay>
    if (Serial1.available() > 0)
   b41b0:	f002 ff96 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b41b4:	6803      	ldr	r3, [r0, #0]
   b41b6:	691b      	ldr	r3, [r3, #16]
   b41b8:	4798      	blx	r3
   b41ba:	2800      	cmp	r0, #0
   b41bc:	dd18      	ble.n	b41f0 <_Z10reyaxSetupv+0xb8>
    {
        Serial.printf("Awaiting Reply from address\n");
   b41be:	f002 f847 	bl	b6250 <_Z16_fetch_usbserialv>
   b41c2:	4969      	ldr	r1, [pc, #420]	; (b4368 <_Z10reyaxSetupv+0x230>)
   b41c4:	f7ff ff75 	bl	b40b2 <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b41c8:	f002 ff8a 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b41cc:	220a      	movs	r2, #10
   b41ce:	4601      	mov	r1, r0
   b41d0:	a808      	add	r0, sp, #32
   b41d2:	f002 fd41 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b41d6:	a908      	add	r1, sp, #32
   b41d8:	a804      	add	r0, sp, #16
   b41da:	f002 fe69 	bl	b6eb0 <_ZN6StringaSEOS_>
   b41de:	a808      	add	r0, sp, #32
   b41e0:	f002 fdea 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("Reply address: %s\n", reply.c_str());
   b41e4:	f002 f834 	bl	b6250 <_Z16_fetch_usbserialv>
   b41e8:	9a04      	ldr	r2, [sp, #16]
   b41ea:	4960      	ldr	r1, [pc, #384]	; (b436c <_Z10reyaxSetupv+0x234>)
   b41ec:	f7ff ff61 	bl	b40b2 <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+NETWORKID=%i\r\n", net); // correct
   b41f0:	f002 ff76 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b41f4:	495e      	ldr	r1, [pc, #376]	; (b4370 <_Z10reyaxSetupv+0x238>)
   b41f6:	2206      	movs	r2, #6
   b41f8:	f7ff ff5b 	bl	b40b2 <_ZN5Print6printfEPKcz>
    delay(200);
   b41fc:	20c8      	movs	r0, #200	; 0xc8
   b41fe:	f002 fc6f 	bl	b6ae0 <delay>
    if (Serial1.available() > 0)
   b4202:	f002 ff6d 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4206:	6803      	ldr	r3, [r0, #0]
   b4208:	691b      	ldr	r3, [r3, #16]
   b420a:	4798      	blx	r3
   b420c:	2800      	cmp	r0, #0
   b420e:	dd18      	ble.n	b4242 <_Z10reyaxSetupv+0x10a>
    {
        Serial.printf("Awaiting Reply from networkid\n");
   b4210:	f002 f81e 	bl	b6250 <_Z16_fetch_usbserialv>
   b4214:	4957      	ldr	r1, [pc, #348]	; (b4374 <_Z10reyaxSetupv+0x23c>)
   b4216:	f7ff ff4c 	bl	b40b2 <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b421a:	f002 ff61 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b421e:	220a      	movs	r2, #10
   b4220:	4601      	mov	r1, r0
   b4222:	a808      	add	r0, sp, #32
   b4224:	f002 fd18 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b4228:	a908      	add	r1, sp, #32
   b422a:	a804      	add	r0, sp, #16
   b422c:	f002 fe40 	bl	b6eb0 <_ZN6StringaSEOS_>
   b4230:	a808      	add	r0, sp, #32
   b4232:	f002 fdc1 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("Reply network: %s\n", reply.c_str());
   b4236:	f002 f80b 	bl	b6250 <_Z16_fetch_usbserialv>
   b423a:	9a04      	ldr	r2, [sp, #16]
   b423c:	494e      	ldr	r1, [pc, #312]	; (b4378 <_Z10reyaxSetupv+0x240>)
   b423e:	f7ff ff38 	bl	b40b2 <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b4242:	f002 ff4d 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4246:	494d      	ldr	r1, [pc, #308]	; (b437c <_Z10reyaxSetupv+0x244>)
   b4248:	f7ff ff33 	bl	b40b2 <_ZN5Print6printfEPKcz>
    delay(200);
   b424c:	20c8      	movs	r0, #200	; 0xc8
   b424e:	f002 fc47 	bl	b6ae0 <delay>
    if (Serial1.available() > 0)
   b4252:	f002 ff45 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4256:	6803      	ldr	r3, [r0, #0]
   b4258:	691b      	ldr	r3, [r3, #16]
   b425a:	4798      	blx	r3
   b425c:	2800      	cmp	r0, #0
   b425e:	dd18      	ble.n	b4292 <_Z10reyaxSetupv+0x15a>
    {
        Serial.printf("Awaiting Reply\n");
   b4260:	f001 fff6 	bl	b6250 <_Z16_fetch_usbserialv>
   b4264:	4946      	ldr	r1, [pc, #280]	; (b4380 <_Z10reyaxSetupv+0x248>)
   b4266:	f7ff ff24 	bl	b40b2 <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b426a:	f002 ff39 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b426e:	220a      	movs	r2, #10
   b4270:	4601      	mov	r1, r0
   b4272:	a808      	add	r0, sp, #32
   b4274:	f002 fcf0 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b4278:	a908      	add	r1, sp, #32
   b427a:	a804      	add	r0, sp, #16
   b427c:	f002 fe18 	bl	b6eb0 <_ZN6StringaSEOS_>
   b4280:	a808      	add	r0, sp, #32
   b4282:	f002 fd99 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("Reply get address: %s\n", reply.c_str());
   b4286:	f001 ffe3 	bl	b6250 <_Z16_fetch_usbserialv>
   b428a:	9a04      	ldr	r2, [sp, #16]
   b428c:	493d      	ldr	r1, [pc, #244]	; (b4384 <_Z10reyaxSetupv+0x24c>)
   b428e:	f7ff ff10 	bl	b40b2 <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+NETWORKID?\r\n"); // correct
   b4292:	f002 ff25 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4296:	493c      	ldr	r1, [pc, #240]	; (b4388 <_Z10reyaxSetupv+0x250>)
   b4298:	f7ff ff0b 	bl	b40b2 <_ZN5Print6printfEPKcz>
    delay(200);
   b429c:	20c8      	movs	r0, #200	; 0xc8
   b429e:	f002 fc1f 	bl	b6ae0 <delay>
    if (Serial1.available() > 0)
   b42a2:	f002 ff1d 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b42a6:	6803      	ldr	r3, [r0, #0]
   b42a8:	691b      	ldr	r3, [r3, #16]
   b42aa:	4798      	blx	r3
   b42ac:	2800      	cmp	r0, #0
   b42ae:	dd18      	ble.n	b42e2 <_Z10reyaxSetupv+0x1aa>
    {
        Serial.printf("Awaiting Reply\n");
   b42b0:	f001 ffce 	bl	b6250 <_Z16_fetch_usbserialv>
   b42b4:	4932      	ldr	r1, [pc, #200]	; (b4380 <_Z10reyaxSetupv+0x248>)
   b42b6:	f7ff fefc 	bl	b40b2 <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b42ba:	f002 ff11 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b42be:	220a      	movs	r2, #10
   b42c0:	4601      	mov	r1, r0
   b42c2:	a808      	add	r0, sp, #32
   b42c4:	f002 fcc8 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b42c8:	a908      	add	r1, sp, #32
   b42ca:	a804      	add	r0, sp, #16
   b42cc:	f002 fdf0 	bl	b6eb0 <_ZN6StringaSEOS_>
   b42d0:	a808      	add	r0, sp, #32
   b42d2:	f002 fd71 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("Reply get network: %s\n", reply.c_str());
   b42d6:	f001 ffbb 	bl	b6250 <_Z16_fetch_usbserialv>
   b42da:	9a04      	ldr	r2, [sp, #16]
   b42dc:	492b      	ldr	r1, [pc, #172]	; (b438c <_Z10reyaxSetupv+0x254>)
   b42de:	f7ff fee8 	bl	b40b2 <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+CPIN?\r\n"); // correct
   b42e2:	f002 fefd 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b42e6:	492a      	ldr	r1, [pc, #168]	; (b4390 <_Z10reyaxSetupv+0x258>)
   b42e8:	f7ff fee3 	bl	b40b2 <_ZN5Print6printfEPKcz>
    delay(200);
   b42ec:	20c8      	movs	r0, #200	; 0xc8
   b42ee:	f002 fbf7 	bl	b6ae0 <delay>
    if (Serial1.available() > 0)
   b42f2:	f002 fef5 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b42f6:	6803      	ldr	r3, [r0, #0]
   b42f8:	691b      	ldr	r3, [r3, #16]
   b42fa:	4798      	blx	r3
   b42fc:	2800      	cmp	r0, #0
   b42fe:	dd1e      	ble.n	b433e <_Z10reyaxSetupv+0x206>
    {
        Serial.printf("Awaiting Reply\n");
   b4300:	f001 ffa6 	bl	b6250 <_Z16_fetch_usbserialv>
   b4304:	491e      	ldr	r1, [pc, #120]	; (b4380 <_Z10reyaxSetupv+0x248>)
   b4306:	f7ff fed4 	bl	b40b2 <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b430a:	f002 fee9 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b430e:	220a      	movs	r2, #10
   b4310:	4601      	mov	r1, r0
   b4312:	a808      	add	r0, sp, #32
   b4314:	f002 fca0 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b4318:	a908      	add	r1, sp, #32
   b431a:	a804      	add	r0, sp, #16
   b431c:	f002 fdc8 	bl	b6eb0 <_ZN6StringaSEOS_>
   b4320:	a808      	add	r0, sp, #32
   b4322:	f002 fd49 	bl	b6db8 <_ZN6StringD1Ev>
        reply.getBytes(buf, 40);
   b4326:	2228      	movs	r2, #40	; 0x28
   b4328:	a908      	add	r1, sp, #32
   b432a:	2300      	movs	r3, #0
   b432c:	a804      	add	r0, sp, #16
   b432e:	f002 fdeb 	bl	b6f08 <_ZNK6String8getBytesEPhjj>
        Serial.printf("Reply get password: %s\n", (char *)buf);
   b4332:	f001 ff8d 	bl	b6250 <_Z16_fetch_usbserialv>
   b4336:	4917      	ldr	r1, [pc, #92]	; (b4394 <_Z10reyaxSetupv+0x25c>)
   b4338:	aa08      	add	r2, sp, #32
   b433a:	f7ff feba 	bl	b40b2 <_ZN5Print6printfEPKcz>
    String reply;
   b433e:	a804      	add	r0, sp, #16
   b4340:	f002 fd3a 	bl	b6db8 <_ZN6StringD1Ev>
    String password = "BA4104032968BA1114299079021594AA";
   b4344:	4668      	mov	r0, sp
   b4346:	f002 fd37 	bl	b6db8 <_ZN6StringD1Ev>
    }
}
   b434a:	b013      	add	sp, #76	; 0x4c
   b434c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4350:	000b9f1f 	.word	0x000b9f1f
   b4354:	000ba03e 	.word	0x000ba03e
   b4358:	000b9f40 	.word	0x000b9f40
   b435c:	000b9f4d 	.word	0x000b9f4d
   b4360:	000b9f6b 	.word	0x000b9f6b
   b4364:	000b9f76 	.word	0x000b9f76
   b4368:	000b9f86 	.word	0x000b9f86
   b436c:	000b9fa3 	.word	0x000b9fa3
   b4370:	000b9fb6 	.word	0x000b9fb6
   b4374:	000b9fc8 	.word	0x000b9fc8
   b4378:	000b9fe7 	.word	0x000b9fe7
   b437c:	000b9ffa 	.word	0x000b9ffa
   b4380:	000ba008 	.word	0x000ba008
   b4384:	000ba018 	.word	0x000ba018
   b4388:	000ba02f 	.word	0x000ba02f
   b438c:	000ba03f 	.word	0x000ba03f
   b4390:	000ba056 	.word	0x000ba056
   b4394:	000ba061 	.word	0x000ba061

000b4398 <_Z8goOnlinev>:

void goOnline()
{
   b4398:	b570      	push	{r4, r5, r6, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b439a:	f001 f8f7 	bl	b558c <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b439e:	2000      	movs	r0, #0
   b43a0:	f001 f88a 	bl	b54b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b43a4:	4d1e      	ldr	r5, [pc, #120]	; (b4420 <_Z8goOnlinev+0x88>)
        return hal_timer_millis(nullptr);
   b43a6:	4604      	mov	r4, r0
   b43a8:	2600      	movs	r6, #0
   b43aa:	2000      	movs	r0, #0
   b43ac:	f001 f884 	bl	b54b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b43b0:	1b00      	subs	r0, r0, r4
   b43b2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b43b6:	4285      	cmp	r5, r0
   b43b8:	eb76 0301 	sbcs.w	r3, r6, r1
   b43bc:	d305      	bcc.n	b43ca <_Z8goOnlinev+0x32>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b43be:	f001 f8ed 	bl	b559c <spark_cloud_flag_connected>
   b43c2:	b910      	cbnz	r0, b43ca <_Z8goOnlinev+0x32>
            spark_process();
   b43c4:	f001 f8da 	bl	b557c <spark_process>
        while (_while() && !_condition()) {
   b43c8:	e7ef      	b.n	b43aa <_Z8goOnlinev+0x12>
   b43ca:	f001 f8e7 	bl	b559c <spark_cloud_flag_connected>
   b43ce:	f001 f8e5 	bl	b559c <spark_cloud_flag_connected>
        if (!connected()) {
   b43d2:	b110      	cbz	r0, b43da <_Z8goOnlinev+0x42>
        return spark_sync_time(NULL);
   b43d4:	2000      	movs	r0, #0
   b43d6:	f001 f8f1 	bl	b55bc <spark_sync_time>
        return hal_timer_millis(nullptr);
   b43da:	2000      	movs	r0, #0
   b43dc:	f001 f86c 	bl	b54b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b43e0:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b43e4:	4604      	mov	r4, r0
   b43e6:	2000      	movs	r0, #0
   b43e8:	f001 f866 	bl	b54b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b43ec:	1b00      	subs	r0, r0, r4
   b43ee:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b43f2:	42a8      	cmp	r0, r5
   b43f4:	f171 0300 	sbcs.w	r3, r1, #0
   b43f8:	d209      	bcs.n	b440e <_Z8goOnlinev+0x76>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b43fa:	2000      	movs	r0, #0
   b43fc:	f001 f8e6 	bl	b55cc <spark_sync_time_pending>
   b4400:	b128      	cbz	r0, b440e <_Z8goOnlinev+0x76>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4402:	f001 f8cb 	bl	b559c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4406:	b110      	cbz	r0, b440e <_Z8goOnlinev+0x76>
            spark_process();
   b4408:	f001 f8b8 	bl	b557c <spark_process>
        while (_while() && !_condition()) {
   b440c:	e7eb      	b.n	b43e6 <_Z8goOnlinev+0x4e>
   b440e:	2000      	movs	r0, #0
   b4410:	f001 f8dc 	bl	b55cc <spark_sync_time_pending>
   b4414:	b118      	cbz	r0, b441e <_Z8goOnlinev+0x86>
    // Particle.publish("connected");
    // delay(1200);
    Particle.syncTime();
    waitFor(Particle.syncTimeDone, 30000);
    // Serial.printf("Time synced...\n");
}
   b4416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b441a:	f001 b8bf 	b.w	b559c <spark_cloud_flag_connected>
   b441e:	bd70      	pop	{r4, r5, r6, pc}
   b4420:	0003a97f 	.word	0x0003a97f

000b4424 <_Z10reyaxResetv>:
    waitUntil(Cellular.isOff);
    // Serial.printf("Particle disconnected and cellular off...\n");
}

void reyaxReset()
{
   b4424:	b500      	push	{lr}
   b4426:	b089      	sub	sp, #36	; 0x24
    String reply;
   b4428:	491a      	ldr	r1, [pc, #104]	; (b4494 <_Z10reyaxResetv+0x70>)
   b442a:	4668      	mov	r0, sp
   b442c:	f002 fd0f 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
    Serial1.printf("AT+RESET\r\n");
   b4430:	f002 fe56 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4434:	4918      	ldr	r1, [pc, #96]	; (b4498 <_Z10reyaxResetv+0x74>)
   b4436:	f7ff fe3c 	bl	b40b2 <_ZN5Print6printfEPKcz>
    delay(10000);
   b443a:	f242 7010 	movw	r0, #10000	; 0x2710
   b443e:	f002 fb4f 	bl	b6ae0 <delay>
    if (Serial1.available() > 0)
   b4442:	f002 fe4d 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4446:	6803      	ldr	r3, [r0, #0]
   b4448:	691b      	ldr	r3, [r3, #16]
   b444a:	4798      	blx	r3
   b444c:	2800      	cmp	r0, #0
   b444e:	dd18      	ble.n	b4482 <_Z10reyaxResetv+0x5e>
    {
        Serial.printf("Awaiting Reply from address\n");
   b4450:	f001 fefe 	bl	b6250 <_Z16_fetch_usbserialv>
   b4454:	4911      	ldr	r1, [pc, #68]	; (b449c <_Z10reyaxResetv+0x78>)
   b4456:	f7ff fe2c 	bl	b40b2 <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b445a:	f002 fe41 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b445e:	220a      	movs	r2, #10
   b4460:	4601      	mov	r1, r0
   b4462:	a804      	add	r0, sp, #16
   b4464:	f002 fbf8 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b4468:	a904      	add	r1, sp, #16
   b446a:	4668      	mov	r0, sp
   b446c:	f002 fd20 	bl	b6eb0 <_ZN6StringaSEOS_>
   b4470:	a804      	add	r0, sp, #16
   b4472:	f002 fca1 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("Reply address: %s\n", reply.c_str());
   b4476:	f001 feeb 	bl	b6250 <_Z16_fetch_usbserialv>
   b447a:	9a00      	ldr	r2, [sp, #0]
   b447c:	4908      	ldr	r1, [pc, #32]	; (b44a0 <_Z10reyaxResetv+0x7c>)
   b447e:	f7ff fe18 	bl	b40b2 <_ZN5Print6printfEPKcz>
    }
    System.reset();
   b4482:	f002 fd81 	bl	b6f88 <_ZN11SystemClass5resetEv>
    String reply;
   b4486:	4668      	mov	r0, sp
   b4488:	f002 fc96 	bl	b6db8 <_ZN6StringD1Ev>
   b448c:	b009      	add	sp, #36	; 0x24
   b448e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4492:	bf00      	nop
   b4494:	000ba03e 	.word	0x000ba03e
   b4498:	000ba079 	.word	0x000ba079
   b449c:	000b9f86 	.word	0x000b9f86
   b44a0:	000b9fa3 	.word	0x000b9fa3

000b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b44a4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b44a6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b44a8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b44aa:	b17c      	cbz	r4, b44cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b44ac:	6863      	ldr	r3, [r4, #4]
   b44ae:	3b01      	subs	r3, #1
   b44b0:	6063      	str	r3, [r4, #4]
   b44b2:	b95b      	cbnz	r3, b44cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b44b4:	6823      	ldr	r3, [r4, #0]
   b44b6:	4620      	mov	r0, r4
   b44b8:	689b      	ldr	r3, [r3, #8]
   b44ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b44bc:	68a3      	ldr	r3, [r4, #8]
   b44be:	3b01      	subs	r3, #1
   b44c0:	60a3      	str	r3, [r4, #8]
   b44c2:	b91b      	cbnz	r3, b44cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b44c4:	6823      	ldr	r3, [r4, #0]
   b44c6:	4620      	mov	r0, r4
   b44c8:	68db      	ldr	r3, [r3, #12]
   b44ca:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b44cc:	4628      	mov	r0, r5
   b44ce:	bd38      	pop	{r3, r4, r5, pc}

000b44d0 <_GLOBAL__sub_I_thingsboardServer>:
   b44d0:	b508      	push	{r3, lr}
TCPClient pubsub;
   b44d2:	4914      	ldr	r1, [pc, #80]	; (b4524 <_GLOBAL__sub_I_thingsboardServer+0x54>)
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b44d4:	4b14      	ldr	r3, [pc, #80]	; (b4528 <_GLOBAL__sub_I_thingsboardServer+0x58>)
   b44d6:	2200      	movs	r2, #0
   b44d8:	701a      	strb	r2, [r3, #0]
   b44da:	4608      	mov	r0, r1
   b44dc:	f001 fd44 	bl	b5f68 <_ZN9TCPClientC1Ev>
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   b44e0:	4910      	ldr	r1, [pc, #64]	; (b4524 <_GLOBAL__sub_I_thingsboardServer+0x54>)
   b44e2:	4812      	ldr	r0, [pc, #72]	; (b452c <_GLOBAL__sub_I_thingsboardServer+0x5c>)
   b44e4:	f000 fbae 	bl	b4c44 <_ZN12PubSubClientC1ER6Client>
String parse0, parse1, parse2, parse3, parse4;
   b44e8:	4911      	ldr	r1, [pc, #68]	; (b4530 <_GLOBAL__sub_I_thingsboardServer+0x60>)
   b44ea:	4812      	ldr	r0, [pc, #72]	; (b4534 <_GLOBAL__sub_I_thingsboardServer+0x64>)
   b44ec:	f002 fcaf 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
   b44f0:	490f      	ldr	r1, [pc, #60]	; (b4530 <_GLOBAL__sub_I_thingsboardServer+0x60>)
   b44f2:	4811      	ldr	r0, [pc, #68]	; (b4538 <_GLOBAL__sub_I_thingsboardServer+0x68>)
   b44f4:	f002 fcab 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
   b44f8:	490d      	ldr	r1, [pc, #52]	; (b4530 <_GLOBAL__sub_I_thingsboardServer+0x60>)
   b44fa:	4810      	ldr	r0, [pc, #64]	; (b453c <_GLOBAL__sub_I_thingsboardServer+0x6c>)
   b44fc:	f002 fca7 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
   b4500:	490b      	ldr	r1, [pc, #44]	; (b4530 <_GLOBAL__sub_I_thingsboardServer+0x60>)
   b4502:	480f      	ldr	r0, [pc, #60]	; (b4540 <_GLOBAL__sub_I_thingsboardServer+0x70>)
   b4504:	f002 fca3 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
   b4508:	4909      	ldr	r1, [pc, #36]	; (b4530 <_GLOBAL__sub_I_thingsboardServer+0x60>)
   b450a:	480e      	ldr	r0, [pc, #56]	; (b4544 <_GLOBAL__sub_I_thingsboardServer+0x74>)
   b450c:	f002 fc9f 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
String incomingString;
   b4510:	4907      	ldr	r1, [pc, #28]	; (b4530 <_GLOBAL__sub_I_thingsboardServer+0x60>)
   b4512:	480d      	ldr	r0, [pc, #52]	; (b4548 <_GLOBAL__sub_I_thingsboardServer+0x78>)
   b4514:	f002 fc9b 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
   b4518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String incomingString2;
   b451c:	4904      	ldr	r1, [pc, #16]	; (b4530 <_GLOBAL__sub_I_thingsboardServer+0x60>)
   b451e:	480b      	ldr	r0, [pc, #44]	; (b454c <_GLOBAL__sub_I_thingsboardServer+0x7c>)
   b4520:	f002 bc95 	b.w	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
   b4524:	2003e564 	.word	0x2003e564
   b4528:	2003e3a8 	.word	0x2003e3a8
   b452c:	2003e4a0 	.word	0x2003e4a0
   b4530:	000ba03e 	.word	0x000ba03e
   b4534:	2003e450 	.word	0x2003e450
   b4538:	2003e460 	.word	0x2003e460
   b453c:	2003e470 	.word	0x2003e470
   b4540:	2003e480 	.word	0x2003e480
   b4544:	2003e490 	.word	0x2003e490
   b4548:	2003e3ac 	.word	0x2003e3ac
   b454c:	2003e3bc 	.word	0x2003e3bc

000b4550 <_Z9goOfflinev>:
{
   b4550:	b530      	push	{r4, r5, lr}
   b4552:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4554:	2300      	movs	r3, #0
    Particle.disconnect();
   b4556:	a801      	add	r0, sp, #4
   b4558:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b455c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4560:	f001 ff73 	bl	b644a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4564:	f001 f81a 	bl	b559c <spark_cloud_flag_connected>
   b4568:	4604      	mov	r4, r0
   b456a:	b110      	cbz	r0, b4572 <_Z9goOfflinev+0x22>
            spark_process();
   b456c:	f001 f806 	bl	b557c <spark_process>
        while (_while() && !_condition()) {
   b4570:	e7f8      	b.n	b4564 <_Z9goOfflinev+0x14>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4572:	4d0b      	ldr	r5, [pc, #44]	; (b45a0 <_Z9goOfflinev+0x50>)
   b4574:	f001 f812 	bl	b559c <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b4578:	6868      	ldr	r0, [r5, #4]
   b457a:	4623      	mov	r3, r4
   b457c:	4622      	mov	r2, r4
   b457e:	4621      	mov	r1, r4
   b4580:	f001 f874 	bl	b566c <network_off>
    waitUntil(Cellular.isOff);
   b4584:	4628      	mov	r0, r5
   b4586:	f001 f984 	bl	b5892 <_ZN5spark12NetworkClass5isOffEv>
   b458a:	b910      	cbnz	r0, b4592 <_Z9goOfflinev+0x42>
            spark_process();
   b458c:	f000 fff6 	bl	b557c <spark_process>
        while (_while() && !_condition()) {
   b4590:	e7f8      	b.n	b4584 <_Z9goOfflinev+0x34>
   b4592:	4803      	ldr	r0, [pc, #12]	; (b45a0 <_Z9goOfflinev+0x50>)
}
   b4594:	b005      	add	sp, #20
   b4596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    waitUntil(Cellular.isOff);
   b459a:	f001 b97a 	b.w	b5892 <_ZN5spark12NetworkClass5isOffEv>
   b459e:	bf00      	nop
   b45a0:	2003e654 	.word	0x2003e654

000b45a4 <_Z12plumePublishv>:
{
   b45a4:	b530      	push	{r4, r5, lr}
   b45a6:	ed2d 8b02 	vpush	{d8}
   b45aa:	b08b      	sub	sp, #44	; 0x2c
    uint64_t timeNow = Time.now();
   b45ac:	f002 fafc 	bl	b6ba8 <_ZN9TimeClass3nowEv>
   b45b0:	4604      	mov	r4, r0
    sprintf(timeBuf, "%i000", Time.now());
   b45b2:	f002 faf9 	bl	b6ba8 <_ZN9TimeClass3nowEv>
   b45b6:	4994      	ldr	r1, [pc, #592]	; (b4808 <_Z12plumePublishv+0x264>)
   b45b8:	4602      	mov	r2, r0
   b45ba:	4894      	ldr	r0, [pc, #592]	; (b480c <_Z12plumePublishv+0x268>)
   b45bc:	f001 f8f4 	bl	b57a8 <sprintf>
    Serial.printf("timeBuf: %s\n", timeBuf);
   b45c0:	f001 fe46 	bl	b6250 <_Z16_fetch_usbserialv>
   b45c4:	4a91      	ldr	r2, [pc, #580]	; (b480c <_Z12plumePublishv+0x268>)
   b45c6:	4992      	ldr	r1, [pc, #584]	; (b4810 <_Z12plumePublishv+0x26c>)
   b45c8:	f7ff fd73 	bl	b40b2 <_ZN5Print6printfEPKcz>
    Serial.printf("timeNow: %i000\n", timeNow);
   b45cc:	f001 fe40 	bl	b6250 <_Z16_fetch_usbserialv>
   b45d0:	4622      	mov	r2, r4
   b45d2:	17e3      	asrs	r3, r4, #31
   b45d4:	498f      	ldr	r1, [pc, #572]	; (b4814 <_Z12plumePublishv+0x270>)
   b45d6:	f7ff fd6c 	bl	b40b2 <_ZN5Print6printfEPKcz>
    Serial.println(Time.now());
   b45da:	f001 fe39 	bl	b6250 <_Z16_fetch_usbserialv>
   b45de:	4605      	mov	r5, r0
   b45e0:	f002 fae2 	bl	b6ba8 <_ZN9TimeClass3nowEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b45e4:	1e04      	subs	r4, r0, #0
   b45e6:	f280 8108 	bge.w	b47fa <_Z12plumePublishv+0x256>
            t = print('-');
   b45ea:	212d      	movs	r1, #45	; 0x2d
   b45ec:	4628      	mov	r0, r5
   b45ee:	f002 fb73 	bl	b6cd8 <_ZN5Print5printEc>
            val = -n;
   b45f2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b45f4:	220a      	movs	r2, #10
   b45f6:	4628      	mov	r0, r5
   b45f8:	f002 fb87 	bl	b6d0a <_ZN5Print11printNumberEmh>
        n += println();
   b45fc:	4628      	mov	r0, r5
   b45fe:	f002 fb6e 	bl	b6cde <_ZN5Print7printlnEv>
    Serial.println(Time.now() * 1000);
   b4602:	f001 fe25 	bl	b6250 <_Z16_fetch_usbserialv>
   b4606:	4605      	mov	r5, r0
   b4608:	f002 face 	bl	b6ba8 <_ZN9TimeClass3nowEv>
   b460c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
        if (n < 0 && base == 10) {
   b4610:	4344      	muls	r4, r0
   b4612:	f140 80f4 	bpl.w	b47fe <_Z12plumePublishv+0x25a>
            t = print('-');
   b4616:	212d      	movs	r1, #45	; 0x2d
   b4618:	4628      	mov	r0, r5
   b461a:	f002 fb5d 	bl	b6cd8 <_ZN5Print5printEc>
            val = -n;
   b461e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4620:	220a      	movs	r2, #10
   b4622:	4628      	mov	r0, r5
   b4624:	f002 fb71 	bl	b6d0a <_ZN5Print11printNumberEmh>
        n += println();
   b4628:	4628      	mov	r0, r5
   b462a:	f002 fb58 	bl	b6cde <_ZN5Print7printlnEv>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b462e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b4630:	a906      	add	r1, sp, #24
   b4632:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b4634:	9206      	str	r2, [sp, #24]
    const int ret = diag_get_source(id, &src, nullptr);
   b4636:	f000 ff97 	bl	b5568 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b463a:	2800      	cmp	r0, #0
   b463c:	f040 80e1 	bne.w	b4802 <_Z12plumePublishv+0x25e>
        return ret;
    }
    return get(src, val);
   b4640:	9c06      	ldr	r4, [sp, #24]
    SPARK_ASSERT(src && src->callback);
   b4642:	b10c      	cbz	r4, b4648 <_Z12plumePublishv+0xa4>
   b4644:	6923      	ldr	r3, [r4, #16]
   b4646:	b923      	cbnz	r3, b4652 <_Z12plumePublishv+0xae>
   b4648:	4a73      	ldr	r2, [pc, #460]	; (b4818 <_Z12plumePublishv+0x274>)
   b464a:	4974      	ldr	r1, [pc, #464]	; (b481c <_Z12plumePublishv+0x278>)
   b464c:	200a      	movs	r0, #10
   b464e:	f000 ff7b 	bl	b5548 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b4652:	230c      	movs	r3, #12
   b4654:	9307      	str	r3, [sp, #28]
   b4656:	ab05      	add	r3, sp, #20
   b4658:	9308      	str	r3, [sp, #32]
   b465a:	2304      	movs	r3, #4
   b465c:	9309      	str	r3, [sp, #36]	; 0x24
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b465e:	6923      	ldr	r3, [r4, #16]
   b4660:	aa07      	add	r2, sp, #28
   b4662:	2101      	movs	r1, #1
   b4664:	4620      	mov	r0, r4
   b4666:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b4668:	2800      	cmp	r0, #0
   b466a:	f040 80ca 	bne.w	b4802 <_Z12plumePublishv+0x25e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b466e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   b4672:	ee08 3a10 	vmov	s16, r3
   b4676:	eebb 8acc 	vcvt.f32.u32	s16, s16, #8
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"battery1\":{\"b1\":%.2f,\"v1\":%.2f}}", timeBuf, batterySoc, v1);
   b467a:	4d69      	ldr	r5, [pc, #420]	; (b4820 <_Z12plumePublishv+0x27c>)
    if (x1)
   b467c:	4c69      	ldr	r4, [pc, #420]	; (b4824 <_Z12plumePublishv+0x280>)
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"battery1\":{\"b1\":%.2f,\"v1\":%.2f}}", timeBuf, batterySoc, v1);
   b467e:	6828      	ldr	r0, [r5, #0]
   b4680:	f003 f81c 	bl	b76bc <__aeabi_f2d>
   b4684:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4688:	ee18 0a10 	vmov	r0, s16
   b468c:	f003 f816 	bl	b76bc <__aeabi_f2d>
   b4690:	4b5e      	ldr	r3, [pc, #376]	; (b480c <_Z12plumePublishv+0x268>)
   b4692:	4a65      	ldr	r2, [pc, #404]	; (b4828 <_Z12plumePublishv+0x284>)
   b4694:	e9cd 0100 	strd	r0, r1, [sp]
   b4698:	4864      	ldr	r0, [pc, #400]	; (b482c <_Z12plumePublishv+0x288>)
   b469a:	2180      	movs	r1, #128	; 0x80
   b469c:	f001 f88c 	bl	b57b8 <snprintf>
    if (x1)
   b46a0:	7823      	ldrb	r3, [r4, #0]
   b46a2:	b1bb      	cbz	r3, b46d4 <_Z12plumePublishv+0x130>
        snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values1\":{\"t1\":%.2f,\"v1\":%.2f}}", timeBuf, t1, v1);
   b46a4:	6828      	ldr	r0, [r5, #0]
   b46a6:	f003 f809 	bl	b76bc <__aeabi_f2d>
   b46aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b46ae:	4b60      	ldr	r3, [pc, #384]	; (b4830 <_Z12plumePublishv+0x28c>)
   b46b0:	6818      	ldr	r0, [r3, #0]
   b46b2:	f003 f803 	bl	b76bc <__aeabi_f2d>
   b46b6:	4b55      	ldr	r3, [pc, #340]	; (b480c <_Z12plumePublishv+0x268>)
   b46b8:	4a5e      	ldr	r2, [pc, #376]	; (b4834 <_Z12plumePublishv+0x290>)
   b46ba:	e9cd 0100 	strd	r0, r1, [sp]
   b46be:	2180      	movs	r1, #128	; 0x80
   b46c0:	485a      	ldr	r0, [pc, #360]	; (b482c <_Z12plumePublishv+0x288>)
   b46c2:	f001 f879 	bl	b57b8 <snprintf>
        plume.publish("v1/devices/me/telemetry", mqttBuf);
   b46c6:	4a59      	ldr	r2, [pc, #356]	; (b482c <_Z12plumePublishv+0x288>)
   b46c8:	495b      	ldr	r1, [pc, #364]	; (b4838 <_Z12plumePublishv+0x294>)
   b46ca:	485c      	ldr	r0, [pc, #368]	; (b483c <_Z12plumePublishv+0x298>)
   b46cc:	f000 fda6 	bl	b521c <_ZN12PubSubClient7publishEPKcS1_>
        x1 = false;
   b46d0:	2300      	movs	r3, #0
   b46d2:	7023      	strb	r3, [r4, #0]
    if (x2)
   b46d4:	4c5a      	ldr	r4, [pc, #360]	; (b4840 <_Z12plumePublishv+0x29c>)
   b46d6:	7823      	ldrb	r3, [r4, #0]
   b46d8:	b1c3      	cbz	r3, b470c <_Z12plumePublishv+0x168>
        snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values2\":{\"t2\":%.2f,\"v2\":%.2f}}", timeBuf, t2, v2);
   b46da:	4b5a      	ldr	r3, [pc, #360]	; (b4844 <_Z12plumePublishv+0x2a0>)
   b46dc:	6818      	ldr	r0, [r3, #0]
   b46de:	f002 ffed 	bl	b76bc <__aeabi_f2d>
   b46e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b46e6:	4b58      	ldr	r3, [pc, #352]	; (b4848 <_Z12plumePublishv+0x2a4>)
   b46e8:	6818      	ldr	r0, [r3, #0]
   b46ea:	f002 ffe7 	bl	b76bc <__aeabi_f2d>
   b46ee:	4b47      	ldr	r3, [pc, #284]	; (b480c <_Z12plumePublishv+0x268>)
   b46f0:	4a56      	ldr	r2, [pc, #344]	; (b484c <_Z12plumePublishv+0x2a8>)
   b46f2:	e9cd 0100 	strd	r0, r1, [sp]
   b46f6:	2180      	movs	r1, #128	; 0x80
   b46f8:	484c      	ldr	r0, [pc, #304]	; (b482c <_Z12plumePublishv+0x288>)
   b46fa:	f001 f85d 	bl	b57b8 <snprintf>
        plume.publish("v1/devices/me/telemetry", mqttBuf);
   b46fe:	4a4b      	ldr	r2, [pc, #300]	; (b482c <_Z12plumePublishv+0x288>)
   b4700:	494d      	ldr	r1, [pc, #308]	; (b4838 <_Z12plumePublishv+0x294>)
   b4702:	484e      	ldr	r0, [pc, #312]	; (b483c <_Z12plumePublishv+0x298>)
   b4704:	f000 fd8a 	bl	b521c <_ZN12PubSubClient7publishEPKcS1_>
        x2 = false;
   b4708:	2300      	movs	r3, #0
   b470a:	7023      	strb	r3, [r4, #0]
    if (x3)
   b470c:	4c50      	ldr	r4, [pc, #320]	; (b4850 <_Z12plumePublishv+0x2ac>)
   b470e:	7823      	ldrb	r3, [r4, #0]
   b4710:	b1c3      	cbz	r3, b4744 <_Z12plumePublishv+0x1a0>
        snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values3\":{\"t3\":%.2f,\"v3\":%.2f}}", timeBuf, t3, v3);
   b4712:	4b50      	ldr	r3, [pc, #320]	; (b4854 <_Z12plumePublishv+0x2b0>)
   b4714:	6818      	ldr	r0, [r3, #0]
   b4716:	f002 ffd1 	bl	b76bc <__aeabi_f2d>
   b471a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b471e:	4b4e      	ldr	r3, [pc, #312]	; (b4858 <_Z12plumePublishv+0x2b4>)
   b4720:	6818      	ldr	r0, [r3, #0]
   b4722:	f002 ffcb 	bl	b76bc <__aeabi_f2d>
   b4726:	4b39      	ldr	r3, [pc, #228]	; (b480c <_Z12plumePublishv+0x268>)
   b4728:	4a4c      	ldr	r2, [pc, #304]	; (b485c <_Z12plumePublishv+0x2b8>)
   b472a:	e9cd 0100 	strd	r0, r1, [sp]
   b472e:	2180      	movs	r1, #128	; 0x80
   b4730:	483e      	ldr	r0, [pc, #248]	; (b482c <_Z12plumePublishv+0x288>)
   b4732:	f001 f841 	bl	b57b8 <snprintf>
        plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4736:	4a3d      	ldr	r2, [pc, #244]	; (b482c <_Z12plumePublishv+0x288>)
   b4738:	493f      	ldr	r1, [pc, #252]	; (b4838 <_Z12plumePublishv+0x294>)
   b473a:	4840      	ldr	r0, [pc, #256]	; (b483c <_Z12plumePublishv+0x298>)
   b473c:	f000 fd6e 	bl	b521c <_ZN12PubSubClient7publishEPKcS1_>
        x3 = false;
   b4740:	2300      	movs	r3, #0
   b4742:	7023      	strb	r3, [r4, #0]
    if (x4)
   b4744:	4c46      	ldr	r4, [pc, #280]	; (b4860 <_Z12plumePublishv+0x2bc>)
   b4746:	7823      	ldrb	r3, [r4, #0]
   b4748:	b1c3      	cbz	r3, b477c <_Z12plumePublishv+0x1d8>
        snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values4\":{\"t4\":%.2f,\"v4\":%.2f}}", timeBuf, t4, v4);
   b474a:	4b46      	ldr	r3, [pc, #280]	; (b4864 <_Z12plumePublishv+0x2c0>)
   b474c:	6818      	ldr	r0, [r3, #0]
   b474e:	f002 ffb5 	bl	b76bc <__aeabi_f2d>
   b4752:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4756:	4b44      	ldr	r3, [pc, #272]	; (b4868 <_Z12plumePublishv+0x2c4>)
   b4758:	6818      	ldr	r0, [r3, #0]
   b475a:	f002 ffaf 	bl	b76bc <__aeabi_f2d>
   b475e:	4b2b      	ldr	r3, [pc, #172]	; (b480c <_Z12plumePublishv+0x268>)
   b4760:	4a42      	ldr	r2, [pc, #264]	; (b486c <_Z12plumePublishv+0x2c8>)
   b4762:	e9cd 0100 	strd	r0, r1, [sp]
   b4766:	2180      	movs	r1, #128	; 0x80
   b4768:	4830      	ldr	r0, [pc, #192]	; (b482c <_Z12plumePublishv+0x288>)
   b476a:	f001 f825 	bl	b57b8 <snprintf>
        plume.publish("v1/devices/me/telemetry", mqttBuf);
   b476e:	4a2f      	ldr	r2, [pc, #188]	; (b482c <_Z12plumePublishv+0x288>)
   b4770:	4931      	ldr	r1, [pc, #196]	; (b4838 <_Z12plumePublishv+0x294>)
   b4772:	4832      	ldr	r0, [pc, #200]	; (b483c <_Z12plumePublishv+0x298>)
   b4774:	f000 fd52 	bl	b521c <_ZN12PubSubClient7publishEPKcS1_>
        x4 = false;
   b4778:	2300      	movs	r3, #0
   b477a:	7023      	strb	r3, [r4, #0]
    if (x5)
   b477c:	4c3c      	ldr	r4, [pc, #240]	; (b4870 <_Z12plumePublishv+0x2cc>)
   b477e:	7823      	ldrb	r3, [r4, #0]
   b4780:	b1c3      	cbz	r3, b47b4 <_Z12plumePublishv+0x210>
        snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values5\":{\"t5\":%.2f,\"v5\":%.2f}}", timeBuf, t5, v5);
   b4782:	4b3c      	ldr	r3, [pc, #240]	; (b4874 <_Z12plumePublishv+0x2d0>)
   b4784:	6818      	ldr	r0, [r3, #0]
   b4786:	f002 ff99 	bl	b76bc <__aeabi_f2d>
   b478a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b478e:	4b3a      	ldr	r3, [pc, #232]	; (b4878 <_Z12plumePublishv+0x2d4>)
   b4790:	6818      	ldr	r0, [r3, #0]
   b4792:	f002 ff93 	bl	b76bc <__aeabi_f2d>
   b4796:	4b1d      	ldr	r3, [pc, #116]	; (b480c <_Z12plumePublishv+0x268>)
   b4798:	4a38      	ldr	r2, [pc, #224]	; (b487c <_Z12plumePublishv+0x2d8>)
   b479a:	e9cd 0100 	strd	r0, r1, [sp]
   b479e:	2180      	movs	r1, #128	; 0x80
   b47a0:	4822      	ldr	r0, [pc, #136]	; (b482c <_Z12plumePublishv+0x288>)
   b47a2:	f001 f809 	bl	b57b8 <snprintf>
        plume.publish("v1/devices/me/telemetry", mqttBuf);
   b47a6:	4a21      	ldr	r2, [pc, #132]	; (b482c <_Z12plumePublishv+0x288>)
   b47a8:	4923      	ldr	r1, [pc, #140]	; (b4838 <_Z12plumePublishv+0x294>)
   b47aa:	4824      	ldr	r0, [pc, #144]	; (b483c <_Z12plumePublishv+0x298>)
   b47ac:	f000 fd36 	bl	b521c <_ZN12PubSubClient7publishEPKcS1_>
        x5 = false;
   b47b0:	2300      	movs	r3, #0
   b47b2:	7023      	strb	r3, [r4, #0]
    plume.loop();
   b47b4:	4821      	ldr	r0, [pc, #132]	; (b483c <_Z12plumePublishv+0x298>)
   b47b6:	f000 fc4d 	bl	b5054 <_ZN12PubSubClient4loopEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b47ba:	4b31      	ldr	r3, [pc, #196]	; (b4880 <_Z12plumePublishv+0x2dc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b47bc:	4931      	ldr	r1, [pc, #196]	; (b4884 <_Z12plumePublishv+0x2e0>)
   b47be:	781b      	ldrb	r3, [r3, #0]
   b47c0:	f88d 3000 	strb.w	r3, [sp]
   b47c4:	2200      	movs	r2, #0
   b47c6:	233c      	movs	r3, #60	; 0x3c
   b47c8:	a807      	add	r0, sp, #28
   b47ca:	f001 ff6d 	bl	b66a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b47ce:	a808      	add	r0, sp, #32
   b47d0:	f7ff fe68 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataSent = true;
   b47d4:	4b2c      	ldr	r3, [pc, #176]	; (b4888 <_Z12plumePublishv+0x2e4>)
    plume.loop();
   b47d6:	4819      	ldr	r0, [pc, #100]	; (b483c <_Z12plumePublishv+0x298>)
    dataSent = true;
   b47d8:	2201      	movs	r2, #1
   b47da:	701a      	strb	r2, [r3, #0]
    plume.loop();
   b47dc:	f000 fc3a 	bl	b5054 <_ZN12PubSubClient4loopEv>
    delay(1200);
   b47e0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b47e4:	f002 f97c 	bl	b6ae0 <delay>
    goOffline();
   b47e8:	f7ff feb2 	bl	b4550 <_Z9goOfflinev>
    onlineNow = false;
   b47ec:	4b27      	ldr	r3, [pc, #156]	; (b488c <_Z12plumePublishv+0x2e8>)
   b47ee:	2200      	movs	r2, #0
   b47f0:	701a      	strb	r2, [r3, #0]
}
   b47f2:	b00b      	add	sp, #44	; 0x2c
   b47f4:	ecbd 8b02 	vpop	{d8}
   b47f8:	bd30      	pop	{r4, r5, pc}
            val = n;
   b47fa:	4621      	mov	r1, r4
   b47fc:	e6fa      	b.n	b45f4 <_Z12plumePublishv+0x50>
   b47fe:	4621      	mov	r1, r4
   b4800:	e70e      	b.n	b4620 <_Z12plumePublishv+0x7c>
            return -1.0f;
   b4802:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   b4806:	e738      	b.n	b467a <_Z12plumePublishv+0xd6>
   b4808:	000ba084 	.word	0x000ba084
   b480c:	2003e5a4 	.word	0x2003e5a4
   b4810:	000ba08a 	.word	0x000ba08a
   b4814:	000ba097 	.word	0x000ba097
   b4818:	000b5489 	.word	0x000b5489
   b481c:	000ba0a7 	.word	0x000ba0a7
   b4820:	2003e624 	.word	0x2003e624
   b4824:	2003e644 	.word	0x2003e644
   b4828:	000ba0cd 	.word	0x000ba0cd
   b482c:	2003e3cc 	.word	0x2003e3cc
   b4830:	2003e584 	.word	0x2003e584
   b4834:	000ba0f9 	.word	0x000ba0f9
   b4838:	000ba124 	.word	0x000ba124
   b483c:	2003e4a0 	.word	0x2003e4a0
   b4840:	2003e645 	.word	0x2003e645
   b4844:	2003e628 	.word	0x2003e628
   b4848:	2003e588 	.word	0x2003e588
   b484c:	000ba13c 	.word	0x000ba13c
   b4850:	2003e646 	.word	0x2003e646
   b4854:	2003e62c 	.word	0x2003e62c
   b4858:	2003e58c 	.word	0x2003e58c
   b485c:	000ba167 	.word	0x000ba167
   b4860:	2003e647 	.word	0x2003e647
   b4864:	2003e630 	.word	0x2003e630
   b4868:	2003e590 	.word	0x2003e590
   b486c:	000ba192 	.word	0x000ba192
   b4870:	2003e648 	.word	0x2003e648
   b4874:	2003e634 	.word	0x2003e634
   b4878:	2003e594 	.word	0x2003e594
   b487c:	000ba1bd 	.word	0x000ba1bd
   b4880:	2003e3a8 	.word	0x2003e3a8
   b4884:	000ba1e8 	.word	0x000ba1e8
   b4888:	2003e3aa 	.word	0x2003e3aa
   b488c:	2003e44c 	.word	0x2003e44c

000b4890 <loop>:
{
   b4890:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (onlineNow)
   b4892:	4f99      	ldr	r7, [pc, #612]	; (b4af8 <loop+0x268>)
   b4894:	783b      	ldrb	r3, [r7, #0]
{
   b4896:	b087      	sub	sp, #28
    if (onlineNow)
   b4898:	b113      	cbz	r3, b48a0 <loop+0x10>
        plume.loop();
   b489a:	4898      	ldr	r0, [pc, #608]	; (b4afc <loop+0x26c>)
   b489c:	f000 fbda 	bl	b5054 <_ZN12PubSubClient4loopEv>
    if ((earlyBird == false) && (((Time.minute() == 22) || (Time.minute() == 29)) && !Particle.connected()))
   b48a0:	4d97      	ldr	r5, [pc, #604]	; (b4b00 <loop+0x270>)
   b48a2:	4c98      	ldr	r4, [pc, #608]	; (b4b04 <loop+0x274>)
   b48a4:	782b      	ldrb	r3, [r5, #0]
   b48a6:	bb1b      	cbnz	r3, b48f0 <loop+0x60>
   b48a8:	f002 f98e 	bl	b6bc8 <_ZN9TimeClass6minuteEv>
   b48ac:	2816      	cmp	r0, #22
   b48ae:	d11b      	bne.n	b48e8 <loop+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b48b0:	f000 fe74 	bl	b559c <spark_cloud_flag_connected>
   b48b4:	b9e0      	cbnz	r0, b48f0 <loop+0x60>
        startConnecting = true;
   b48b6:	2301      	movs	r3, #1
   b48b8:	7023      	strb	r3, [r4, #0]
        RGB.brightness(3);
   b48ba:	2101      	movs	r1, #1
   b48bc:	2003      	movs	r0, #3
        onlineNow = true;
   b48be:	2601      	movs	r6, #1
        RGB.brightness(3);
   b48c0:	f002 f8fa 	bl	b6ab8 <_ZN8RGBClass10brightnessEhb>
        onlineNow = true;
   b48c4:	703e      	strb	r6, [r7, #0]
        goOnline();
   b48c6:	f7ff fd67 	bl	b4398 <_Z8goOnlinev>
        Particle.publishVitals();
   b48ca:	488f      	ldr	r0, [pc, #572]	; (b4b08 <loop+0x278>)
   b48cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b48d0:	f001 fdb7 	bl	b6442 <_ZN10CloudClass13publishVitalsEm>
        if (!plume.connected())
   b48d4:	4889      	ldr	r0, [pc, #548]	; (b4afc <loop+0x26c>)
        earlyBird = true; // we are early
   b48d6:	702e      	strb	r6, [r5, #0]
        if (!plume.connected())
   b48d8:	f000 fad3 	bl	b4e82 <_ZN12PubSubClient9connectedEv>
   b48dc:	b908      	cbnz	r0, b48e2 <loop+0x52>
            plumeConnect();
   b48de:	f7ff fbf7 	bl	b40d0 <_Z12plumeConnectv>
        startConnecting = false;
   b48e2:	2300      	movs	r3, #0
   b48e4:	7023      	strb	r3, [r4, #0]
   b48e6:	e006      	b.n	b48f6 <loop+0x66>
    if ((earlyBird == false) && (((Time.minute() == 22) || (Time.minute() == 29)) && !Particle.connected()))
   b48e8:	f002 f96e 	bl	b6bc8 <_ZN9TimeClass6minuteEv>
   b48ec:	281d      	cmp	r0, #29
   b48ee:	d0df      	beq.n	b48b0 <loop+0x20>
    if (startConnecting)
   b48f0:	7823      	ldrb	r3, [r4, #0]
   b48f2:	2b00      	cmp	r3, #0
   b48f4:	d1e1      	bne.n	b48ba <loop+0x2a>
    if (((Time.minute() == 23) || (Time.minute() == 30)) && (dataSent == false))
   b48f6:	f002 f967 	bl	b6bc8 <_ZN9TimeClass6minuteEv>
   b48fa:	2817      	cmp	r0, #23
   b48fc:	4c83      	ldr	r4, [pc, #524]	; (b4b0c <loop+0x27c>)
   b48fe:	d117      	bne.n	b4930 <loop+0xa0>
   b4900:	4b83      	ldr	r3, [pc, #524]	; (b4b10 <loop+0x280>)
   b4902:	781b      	ldrb	r3, [r3, #0]
   b4904:	b9c3      	cbnz	r3, b4938 <loop+0xa8>
        connect = true;
   b4906:	2301      	movs	r3, #1
   b4908:	7023      	strb	r3, [r4, #0]
   b490a:	f000 fe47 	bl	b559c <spark_cloud_flag_connected>
        if (!connected()) {
   b490e:	b110      	cbz	r0, b4916 <loop+0x86>
        return spark_sync_time(NULL);
   b4910:	2000      	movs	r0, #0
   b4912:	f000 fe53 	bl	b55bc <spark_sync_time>
        sprintf(timeBuf, "%i000", Time.now());
   b4916:	f002 f947 	bl	b6ba8 <_ZN9TimeClass3nowEv>
   b491a:	497e      	ldr	r1, [pc, #504]	; (b4b14 <loop+0x284>)
   b491c:	4602      	mov	r2, r0
   b491e:	487e      	ldr	r0, [pc, #504]	; (b4b18 <loop+0x288>)
   b4920:	f000 ff42 	bl	b57a8 <sprintf>
        plumePublish();
   b4924:	f7ff fe3e 	bl	b45a4 <_Z12plumePublishv>
        earlyBird = false; // we are too early
   b4928:	2300      	movs	r3, #0
   b492a:	702b      	strb	r3, [r5, #0]
        connect = false;
   b492c:	7023      	strb	r3, [r4, #0]
   b492e:	e006      	b.n	b493e <loop+0xae>
    if (((Time.minute() == 23) || (Time.minute() == 30)) && (dataSent == false))
   b4930:	f002 f94a 	bl	b6bc8 <_ZN9TimeClass6minuteEv>
   b4934:	281e      	cmp	r0, #30
   b4936:	d0e3      	beq.n	b4900 <loop+0x70>
    if (connect)
   b4938:	7823      	ldrb	r3, [r4, #0]
   b493a:	2b00      	cmp	r3, #0
   b493c:	d1e5      	bne.n	b490a <loop+0x7a>
    if (Serial1.available())
   b493e:	f002 fbcf 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4942:	6803      	ldr	r3, [r0, #0]
   b4944:	691b      	ldr	r3, [r3, #16]
   b4946:	4798      	blx	r3
   b4948:	2800      	cmp	r0, #0
   b494a:	f000 8094 	beq.w	b4a76 <loop+0x1e6>
        parse0 = Serial1.readStringUntil(',');
   b494e:	f002 fbc7 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4952:	222c      	movs	r2, #44	; 0x2c
   b4954:	4601      	mov	r1, r0
   b4956:	a802      	add	r0, sp, #8
   b4958:	f002 f97e 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b495c:	a902      	add	r1, sp, #8
   b495e:	486f      	ldr	r0, [pc, #444]	; (b4b1c <loop+0x28c>)
        tempF = Serial1.readStringUntil(',').toFloat();
   b4960:	4c6f      	ldr	r4, [pc, #444]	; (b4b20 <loop+0x290>)
        voltage = Serial1.readStringUntil(',').toFloat();
   b4962:	4d70      	ldr	r5, [pc, #448]	; (b4b24 <loop+0x294>)
        probeNumber = Serial1.readStringUntil('\n').toInt();
   b4964:	4e70      	ldr	r6, [pc, #448]	; (b4b28 <loop+0x298>)
        incomingString = Serial1.readString();
   b4966:	4f71      	ldr	r7, [pc, #452]	; (b4b2c <loop+0x29c>)
        parse0 = Serial1.readStringUntil(',');
   b4968:	f002 faa2 	bl	b6eb0 <_ZN6StringaSEOS_>
   b496c:	a802      	add	r0, sp, #8
   b496e:	f002 fa23 	bl	b6db8 <_ZN6StringD1Ev>
        parse1 = Serial1.readStringUntil(',');
   b4972:	f002 fbb5 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4976:	222c      	movs	r2, #44	; 0x2c
   b4978:	4601      	mov	r1, r0
   b497a:	a802      	add	r0, sp, #8
   b497c:	f002 f96c 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b4980:	a902      	add	r1, sp, #8
   b4982:	486b      	ldr	r0, [pc, #428]	; (b4b30 <loop+0x2a0>)
   b4984:	f002 fa94 	bl	b6eb0 <_ZN6StringaSEOS_>
   b4988:	a802      	add	r0, sp, #8
   b498a:	f002 fa15 	bl	b6db8 <_ZN6StringD1Ev>
        tempF = Serial1.readStringUntil(',').toFloat();
   b498e:	f002 fba7 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4992:	222c      	movs	r2, #44	; 0x2c
   b4994:	4601      	mov	r1, r0
   b4996:	a802      	add	r0, sp, #8
   b4998:	f002 f95e 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b499c:	a802      	add	r0, sp, #8
   b499e:	f002 fad1 	bl	b6f44 <_ZNK6String7toFloatEv>
   b49a2:	a802      	add	r0, sp, #8
   b49a4:	ed84 0a00 	vstr	s0, [r4]
   b49a8:	f002 fa06 	bl	b6db8 <_ZN6StringD1Ev>
        voltage = Serial1.readStringUntil(',').toFloat();
   b49ac:	f002 fb98 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b49b0:	222c      	movs	r2, #44	; 0x2c
   b49b2:	4601      	mov	r1, r0
   b49b4:	a802      	add	r0, sp, #8
   b49b6:	f002 f94f 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b49ba:	a802      	add	r0, sp, #8
   b49bc:	f002 fac2 	bl	b6f44 <_ZNK6String7toFloatEv>
   b49c0:	a802      	add	r0, sp, #8
   b49c2:	ed85 0a00 	vstr	s0, [r5]
   b49c6:	f002 f9f7 	bl	b6db8 <_ZN6StringD1Ev>
        probeNumber = Serial1.readStringUntil('\n').toInt();
   b49ca:	f002 fb89 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b49ce:	220a      	movs	r2, #10
   b49d0:	4601      	mov	r1, r0
   b49d2:	a802      	add	r0, sp, #8
   b49d4:	f002 f940 	bl	b6c58 <_ZN6Stream15readStringUntilEc>
   b49d8:	a802      	add	r0, sp, #8
   b49da:	f002 faad 	bl	b6f38 <_ZNK6String5toIntEv>
   b49de:	6030      	str	r0, [r6, #0]
   b49e0:	a802      	add	r0, sp, #8
   b49e2:	f002 f9e9 	bl	b6db8 <_ZN6StringD1Ev>
        incomingString = Serial1.readString();
   b49e6:	f002 fb7b 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b49ea:	4601      	mov	r1, r0
   b49ec:	a802      	add	r0, sp, #8
   b49ee:	f002 f91f 	bl	b6c30 <_ZN6Stream10readStringEv>
   b49f2:	a902      	add	r1, sp, #8
   b49f4:	4638      	mov	r0, r7
   b49f6:	f002 fa5b 	bl	b6eb0 <_ZN6StringaSEOS_>
   b49fa:	a802      	add	r0, sp, #8
   b49fc:	f002 f9dc 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("incomingString: %s\n", incomingString.c_str());
   b4a00:	f001 fc26 	bl	b6250 <_Z16_fetch_usbserialv>
   b4a04:	683a      	ldr	r2, [r7, #0]
   b4a06:	494b      	ldr	r1, [pc, #300]	; (b4b34 <loop+0x2a4>)
   b4a08:	f7ff fb53 	bl	b40b2 <_ZN5Print6printfEPKcz>
        Serial.printf("tempF: %.02f, probeNumber: %i\n", tempF, probeNumber);
   b4a0c:	f001 fc20 	bl	b6250 <_Z16_fetch_usbserialv>
   b4a10:	4607      	mov	r7, r0
   b4a12:	6820      	ldr	r0, [r4, #0]
   b4a14:	f002 fe52 	bl	b76bc <__aeabi_f2d>
   b4a18:	460b      	mov	r3, r1
   b4a1a:	6831      	ldr	r1, [r6, #0]
   b4a1c:	9100      	str	r1, [sp, #0]
   b4a1e:	4602      	mov	r2, r0
   b4a20:	4945      	ldr	r1, [pc, #276]	; (b4b38 <loop+0x2a8>)
   b4a22:	4638      	mov	r0, r7
   b4a24:	f7ff fb45 	bl	b40b2 <_ZN5Print6printfEPKcz>
        if (probeNumber == 1)
   b4a28:	6833      	ldr	r3, [r6, #0]
   b4a2a:	2b01      	cmp	r3, #1
   b4a2c:	d125      	bne.n	b4a7a <loop+0x1ea>
            t1 = tempF;
   b4a2e:	4a43      	ldr	r2, [pc, #268]	; (b4b3c <loop+0x2ac>)
   b4a30:	6821      	ldr	r1, [r4, #0]
   b4a32:	6011      	str	r1, [r2, #0]
            v1 = voltage;
   b4a34:	4a42      	ldr	r2, [pc, #264]	; (b4b40 <loop+0x2b0>)
   b4a36:	6829      	ldr	r1, [r5, #0]
   b4a38:	6011      	str	r1, [r2, #0]
            x1 = true;
   b4a3a:	4a42      	ldr	r2, [pc, #264]	; (b4b44 <loop+0x2b4>)
   b4a3c:	7013      	strb	r3, [r2, #0]
        incomingString2 = Serial1.readString();
   b4a3e:	f002 fb4f 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4a42:	4c41      	ldr	r4, [pc, #260]	; (b4b48 <loop+0x2b8>)
   b4a44:	4601      	mov	r1, r0
   b4a46:	a802      	add	r0, sp, #8
   b4a48:	f002 f8f2 	bl	b6c30 <_ZN6Stream10readStringEv>
   b4a4c:	a902      	add	r1, sp, #8
   b4a4e:	4620      	mov	r0, r4
   b4a50:	f002 fa2e 	bl	b6eb0 <_ZN6StringaSEOS_>
   b4a54:	a802      	add	r0, sp, #8
   b4a56:	f002 f9af 	bl	b6db8 <_ZN6StringD1Ev>
        Serial.printf("incomingString2: %s\n", incomingString2.c_str());
   b4a5a:	f001 fbf9 	bl	b6250 <_Z16_fetch_usbserialv>
   b4a5e:	6822      	ldr	r2, [r4, #0]
   b4a60:	493a      	ldr	r1, [pc, #232]	; (b4b4c <loop+0x2bc>)
   b4a62:	f7ff fb26 	bl	b40b2 <_ZN5Print6printfEPKcz>
        Serial.flush();
   b4a66:	f001 fbf3 	bl	b6250 <_Z16_fetch_usbserialv>
   b4a6a:	6803      	ldr	r3, [r0, #0]
   b4a6c:	69db      	ldr	r3, [r3, #28]
   b4a6e:	4798      	blx	r3
        dataSent = false;
   b4a70:	4b27      	ldr	r3, [pc, #156]	; (b4b10 <loop+0x280>)
   b4a72:	2200      	movs	r2, #0
   b4a74:	701a      	strb	r2, [r3, #0]
}
   b4a76:	b007      	add	sp, #28
   b4a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (probeNumber == 2)
   b4a7a:	2b02      	cmp	r3, #2
   b4a7c:	d109      	bne.n	b4a92 <loop+0x202>
            t2 = tempF;
   b4a7e:	4b34      	ldr	r3, [pc, #208]	; (b4b50 <loop+0x2c0>)
   b4a80:	6822      	ldr	r2, [r4, #0]
   b4a82:	601a      	str	r2, [r3, #0]
            v2 = voltage;
   b4a84:	4b33      	ldr	r3, [pc, #204]	; (b4b54 <loop+0x2c4>)
   b4a86:	682a      	ldr	r2, [r5, #0]
   b4a88:	601a      	str	r2, [r3, #0]
            x2 = true;
   b4a8a:	4b33      	ldr	r3, [pc, #204]	; (b4b58 <loop+0x2c8>)
            x3 = true;
   b4a8c:	2201      	movs	r2, #1
   b4a8e:	701a      	strb	r2, [r3, #0]
   b4a90:	e7d5      	b.n	b4a3e <loop+0x1ae>
        else if (probeNumber == 3)
   b4a92:	2b03      	cmp	r3, #3
   b4a94:	d107      	bne.n	b4aa6 <loop+0x216>
            t3 = tempF;
   b4a96:	4b31      	ldr	r3, [pc, #196]	; (b4b5c <loop+0x2cc>)
   b4a98:	6822      	ldr	r2, [r4, #0]
   b4a9a:	601a      	str	r2, [r3, #0]
            v3 = voltage;
   b4a9c:	4b30      	ldr	r3, [pc, #192]	; (b4b60 <loop+0x2d0>)
   b4a9e:	682a      	ldr	r2, [r5, #0]
   b4aa0:	601a      	str	r2, [r3, #0]
            x3 = true;
   b4aa2:	4b30      	ldr	r3, [pc, #192]	; (b4b64 <loop+0x2d4>)
   b4aa4:	e7f2      	b.n	b4a8c <loop+0x1fc>
        else if (probeNumber == 4)
   b4aa6:	2b04      	cmp	r3, #4
   b4aa8:	d107      	bne.n	b4aba <loop+0x22a>
            t4 = tempF;
   b4aaa:	4b2f      	ldr	r3, [pc, #188]	; (b4b68 <loop+0x2d8>)
   b4aac:	6822      	ldr	r2, [r4, #0]
   b4aae:	601a      	str	r2, [r3, #0]
            v4 = voltage;
   b4ab0:	4b2e      	ldr	r3, [pc, #184]	; (b4b6c <loop+0x2dc>)
   b4ab2:	682a      	ldr	r2, [r5, #0]
   b4ab4:	601a      	str	r2, [r3, #0]
            x4 = true;
   b4ab6:	4b2e      	ldr	r3, [pc, #184]	; (b4b70 <loop+0x2e0>)
   b4ab8:	e7e8      	b.n	b4a8c <loop+0x1fc>
        else if (probeNumber == 5)
   b4aba:	2b05      	cmp	r3, #5
   b4abc:	d107      	bne.n	b4ace <loop+0x23e>
            t5 = tempF;
   b4abe:	4b2d      	ldr	r3, [pc, #180]	; (b4b74 <loop+0x2e4>)
   b4ac0:	6822      	ldr	r2, [r4, #0]
   b4ac2:	601a      	str	r2, [r3, #0]
            v5 = voltage;
   b4ac4:	4b2c      	ldr	r3, [pc, #176]	; (b4b78 <loop+0x2e8>)
   b4ac6:	682a      	ldr	r2, [r5, #0]
   b4ac8:	601a      	str	r2, [r3, #0]
            x5 = true;
   b4aca:	4b2c      	ldr	r3, [pc, #176]	; (b4b7c <loop+0x2ec>)
   b4acc:	e7de      	b.n	b4a8c <loop+0x1fc>
        else if (probeNumber == 6)
   b4ace:	2b06      	cmp	r3, #6
   b4ad0:	d106      	bne.n	b4ae0 <loop+0x250>
            t6 = tempF;
   b4ad2:	4b2b      	ldr	r3, [pc, #172]	; (b4b80 <loop+0x2f0>)
   b4ad4:	6822      	ldr	r2, [r4, #0]
   b4ad6:	601a      	str	r2, [r3, #0]
            v6 = voltage;
   b4ad8:	682a      	ldr	r2, [r5, #0]
   b4ada:	4b2a      	ldr	r3, [pc, #168]	; (b4b84 <loop+0x2f4>)
            v7 = voltage;
   b4adc:	601a      	str	r2, [r3, #0]
   b4ade:	e7ae      	b.n	b4a3e <loop+0x1ae>
        else if (probeNumber == 7)
   b4ae0:	2b07      	cmp	r3, #7
   b4ae2:	d105      	bne.n	b4af0 <loop+0x260>
            t7 = tempF;
   b4ae4:	4b28      	ldr	r3, [pc, #160]	; (b4b88 <loop+0x2f8>)
   b4ae6:	6822      	ldr	r2, [r4, #0]
   b4ae8:	601a      	str	r2, [r3, #0]
            v7 = voltage;
   b4aea:	682a      	ldr	r2, [r5, #0]
   b4aec:	4b27      	ldr	r3, [pc, #156]	; (b4b8c <loop+0x2fc>)
   b4aee:	e7f5      	b.n	b4adc <loop+0x24c>
            reyaxReset();
   b4af0:	f7ff fc98 	bl	b4424 <_Z10reyaxResetv>
   b4af4:	e7a3      	b.n	b4a3e <loop+0x1ae>
   b4af6:	bf00      	nop
   b4af8:	2003e44c 	.word	0x2003e44c
   b4afc:	2003e4a0 	.word	0x2003e4a0
   b4b00:	2003e3ab 	.word	0x2003e3ab
   b4b04:	2003e580 	.word	0x2003e580
   b4b08:	2003e730 	.word	0x2003e730
   b4b0c:	2003e3a9 	.word	0x2003e3a9
   b4b10:	2003e3aa 	.word	0x2003e3aa
   b4b14:	000ba084 	.word	0x000ba084
   b4b18:	2003e5a4 	.word	0x2003e5a4
   b4b1c:	2003e450 	.word	0x2003e450
   b4b20:	2003e5a0 	.word	0x2003e5a0
   b4b24:	2003e640 	.word	0x2003e640
   b4b28:	2003e560 	.word	0x2003e560
   b4b2c:	2003e3ac 	.word	0x2003e3ac
   b4b30:	2003e460 	.word	0x2003e460
   b4b34:	000ba1fb 	.word	0x000ba1fb
   b4b38:	000ba20f 	.word	0x000ba20f
   b4b3c:	2003e584 	.word	0x2003e584
   b4b40:	2003e624 	.word	0x2003e624
   b4b44:	2003e644 	.word	0x2003e644
   b4b48:	2003e3bc 	.word	0x2003e3bc
   b4b4c:	000ba22e 	.word	0x000ba22e
   b4b50:	2003e588 	.word	0x2003e588
   b4b54:	2003e628 	.word	0x2003e628
   b4b58:	2003e645 	.word	0x2003e645
   b4b5c:	2003e58c 	.word	0x2003e58c
   b4b60:	2003e62c 	.word	0x2003e62c
   b4b64:	2003e646 	.word	0x2003e646
   b4b68:	2003e590 	.word	0x2003e590
   b4b6c:	2003e630 	.word	0x2003e630
   b4b70:	2003e647 	.word	0x2003e647
   b4b74:	2003e594 	.word	0x2003e594
   b4b78:	2003e634 	.word	0x2003e634
   b4b7c:	2003e648 	.word	0x2003e648
   b4b80:	2003e598 	.word	0x2003e598
   b4b84:	2003e638 	.word	0x2003e638
   b4b88:	2003e59c 	.word	0x2003e59c
   b4b8c:	2003e63c 	.word	0x2003e63c

000b4b90 <setup>:
{
   b4b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.begin(9600);
   b4b92:	f001 fb5d 	bl	b6250 <_Z16_fetch_usbserialv>
   b4b96:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4b9a:	f001 fb4d 	bl	b6238 <_ZN9USBSerial5beginEl>
    Serial1.begin(115200);
   b4b9e:	f002 fa9f 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b4ba2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4ba6:	f001 faa5 	bl	b60f4 <_ZN11USARTSerial5beginEm>
    pinMode(D7, OUTPUT);
   b4baa:	2101      	movs	r1, #1
   b4bac:	2007      	movs	r0, #7
   b4bae:	f002 faf9 	bl	b71a4 <pinMode>
    reyaxSetup();
   b4bb2:	f7ff fac1 	bl	b4138 <_Z10reyaxSetupv>
    goOnline();
   b4bb6:	f7ff fbef 	bl	b4398 <_Z8goOnlinev>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b4bba:	4b13      	ldr	r3, [pc, #76]	; (b4c08 <setup+0x78>)
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   b4bbc:	4c13      	ldr	r4, [pc, #76]	; (b4c0c <setup+0x7c>)
   b4bbe:	2203      	movs	r2, #3
   b4bc0:	e9cd 2301 	strd	r2, r3, [sp, #4]
    Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(120000));
   b4bc4:	a801      	add	r0, sp, #4
        bool clearSession) :
   b4bc6:	2301      	movs	r3, #1
   b4bc8:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4bcc:	f001 fc57 	bl	b647e <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
    plume.setServer(thingsboardServer, MQTTPORT);
   b4bd0:	490f      	ldr	r1, [pc, #60]	; (b4c10 <setup+0x80>)
   b4bd2:	4810      	ldr	r0, [pc, #64]	; (b4c14 <setup+0x84>)
   b4bd4:	f240 725b 	movw	r2, #1883	; 0x75b
   b4bd8:	f000 fb31 	bl	b523e <_ZN12PubSubClient9setServerEPKct>
    plumeConnect();
   b4bdc:	f7ff fa78 	bl	b40d0 <_Z12plumeConnectv>
    plumePublish();
   b4be0:	f7ff fce0 	bl	b45a4 <_Z12plumePublishv>
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   b4be4:	4b0c      	ldr	r3, [pc, #48]	; (b4c18 <setup+0x88>)
   b4be6:	4a0d      	ldr	r2, [pc, #52]	; (b4c1c <setup+0x8c>)
   b4be8:	2180      	movs	r1, #128	; 0x80
   b4bea:	4620      	mov	r0, r4
   b4bec:	f000 fde4 	bl	b57b8 <snprintf>
    Serial.printf("mqttBuf: %s\nsizeOf(mqttBuf): %i/n", mqttBuf, sizeof(mqttBuf));
   b4bf0:	f001 fb2e 	bl	b6250 <_Z16_fetch_usbserialv>
   b4bf4:	490a      	ldr	r1, [pc, #40]	; (b4c20 <setup+0x90>)
   b4bf6:	2380      	movs	r3, #128	; 0x80
   b4bf8:	4622      	mov	r2, r4
   b4bfa:	f7ff fa5a 	bl	b40b2 <_ZN5Print6printfEPKcz>
}
   b4bfe:	b004      	add	sp, #16
   b4c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    goOffline();
   b4c04:	f7ff bca4 	b.w	b4550 <_Z9goOfflinev>
   b4c08:	0001d4c0 	.word	0x0001d4c0
   b4c0c:	2003e3cc 	.word	0x2003e3cc
   b4c10:	2003e184 	.word	0x2003e184
   b4c14:	2003e4a0 	.word	0x2003e4a0
   b4c18:	2003e196 	.word	0x2003e196
   b4c1c:	000ba243 	.word	0x000ba243
   b4c20:	000ba246 	.word	0x000ba246

000b4c24 <_ZN9IPAddressC1ERKS_>:

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4c24:	b570      	push	{r4, r5, r6, lr}
   b4c26:	4604      	mov	r4, r0
   b4c28:	4b05      	ldr	r3, [pc, #20]	; (b4c40 <_ZN9IPAddressC1ERKS_+0x1c>)
   b4c2a:	f844 3b04 	str.w	r3, [r4], #4
   b4c2e:	1d0d      	adds	r5, r1, #4
   b4c30:	4606      	mov	r6, r0
   b4c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c36:	682b      	ldr	r3, [r5, #0]
   b4c38:	7023      	strb	r3, [r4, #0]
   b4c3a:	4630      	mov	r0, r6
   b4c3c:	bd70      	pop	{r4, r5, r6, pc}
   b4c3e:	bf00      	nop
   b4c40:	000ba400 	.word	0x000ba400

000b4c44 <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   b4c44:	b538      	push	{r3, r4, r5, lr}
   b4c46:	4604      	mov	r4, r0
   b4c48:	3098      	adds	r0, #152	; 0x98
   b4c4a:	460d      	mov	r5, r1
   b4c4c:	f001 fb60 	bl	b6310 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   b4c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4c54:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   b4c58:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   b4c5a:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   b4c5c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   b4c60:	4620      	mov	r0, r4
   b4c62:	bd38      	pop	{r3, r4, r5, pc}

000b4c64 <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   b4c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c68:	4605      	mov	r5, r0
   b4c6a:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c6c:	f000 fc14 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b4c70:	f643 2897 	movw	r8, #14999	; 0x3a97
   b4c74:	4607      	mov	r7, r0
   while(!_client->available()) {
   b4c76:	6828      	ldr	r0, [r5, #0]
   b4c78:	6803      	ldr	r3, [r0, #0]
   b4c7a:	691b      	ldr	r3, [r3, #16]
   b4c7c:	4798      	blx	r3
   b4c7e:	4604      	mov	r4, r0
   b4c80:	b930      	cbnz	r0, b4c90 <_ZN12PubSubClient8readByteEPh+0x2c>
   b4c82:	f000 fc09 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b4c86:	1bc3      	subs	r3, r0, r7
   b4c88:	4543      	cmp	r3, r8
   b4c8a:	d9f4      	bls.n	b4c76 <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   b4c8c:	4620      	mov	r0, r4
   b4c8e:	e005      	b.n	b4c9c <_ZN12PubSubClient8readByteEPh+0x38>
   b4c90:	6828      	ldr	r0, [r5, #0]
   *result = _client->read();
   b4c92:	6803      	ldr	r3, [r0, #0]
   b4c94:	695b      	ldr	r3, [r3, #20]
   b4c96:	4798      	blx	r3
   b4c98:	7030      	strb	r0, [r6, #0]
   b4c9a:	2001      	movs	r0, #1
}
   b4c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4ca0 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b4ca0:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   b4ca2:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   b4ca4:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b4ca6:	4614      	mov	r4, r2
  if(readByte(write_address)){
   b4ca8:	f7ff ffdc 	bl	b4c64 <_ZN12PubSubClient8readByteEPh>
   b4cac:	b108      	cbz	r0, b4cb2 <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   b4cae:	3501      	adds	r5, #1
   b4cb0:	8025      	strh	r5, [r4, #0]
}
   b4cb2:	bd38      	pop	{r3, r4, r5, pc}

000b4cb4 <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b4cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   b4cb8:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b4cba:	4688      	mov	r8, r1
    uint16_t len = 0;
   b4cbc:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   b4cbe:	f10d 0206 	add.w	r2, sp, #6
   b4cc2:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b4cc4:	4604      	mov	r4, r0
    uint16_t len = 0;
   b4cc6:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   b4cca:	f7ff ffe9 	bl	b4ca0 <_ZN12PubSubClient8readByteEPhPt>
   b4cce:	b918      	cbnz	r0, b4cd8 <_ZN12PubSubClient10readPacketEPh+0x24>
   b4cd0:	2000      	movs	r0, #0
}
   b4cd2:	b003      	add	sp, #12
   b4cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4cd8:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   b4cdc:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   b4ce0:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   b4ce2:	f10d 0105 	add.w	r1, sp, #5
   b4ce6:	4620      	mov	r0, r4
   b4ce8:	f7ff ffbc 	bl	b4c64 <_ZN12PubSubClient8readByteEPh>
   b4cec:	2800      	cmp	r0, #0
   b4cee:	d0ef      	beq.n	b4cd0 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   b4cf0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b4cf4:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4cf8:	1c53      	adds	r3, r2, #1
   b4cfa:	4422      	add	r2, r4
   b4cfc:	b29b      	uxth	r3, r3
   b4cfe:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   b4d00:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   b4d04:	fb12 f206 	smulbb	r2, r2, r6
   b4d08:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   b4d0a:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   b4d0c:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   b4d10:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4d12:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   b4d16:	d4e4      	bmi.n	b4ce2 <_ZN12PubSubClient10readPacketEPh+0x2e>
   b4d18:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   b4d1c:	3b01      	subs	r3, #1
    if (isPublish) {
   b4d1e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   b4d22:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4d26:	d11e      	bne.n	b4d66 <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   b4d28:	f10d 0206 	add.w	r2, sp, #6
   b4d2c:	4629      	mov	r1, r5
   b4d2e:	4620      	mov	r0, r4
   b4d30:	f7ff ffb6 	bl	b4ca0 <_ZN12PubSubClient8readByteEPhPt>
   b4d34:	2800      	cmp	r0, #0
   b4d36:	d0cb      	beq.n	b4cd0 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   b4d38:	f10d 0206 	add.w	r2, sp, #6
   b4d3c:	4629      	mov	r1, r5
   b4d3e:	4620      	mov	r0, r4
   b4d40:	f7ff ffae 	bl	b4ca0 <_ZN12PubSubClient8readByteEPhPt>
   b4d44:	2800      	cmp	r0, #0
   b4d46:	d0c3      	beq.n	b4cd0 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b4d48:	f898 3000 	ldrb.w	r3, [r8]
   b4d4c:	4423      	add	r3, r4
   b4d4e:	795a      	ldrb	r2, [r3, #5]
   b4d50:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   b4d52:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b4d54:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   b4d58:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b4d5a:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   b4d5c:	d501      	bpl.n	b4d62 <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   b4d5e:	3602      	adds	r6, #2
   b4d60:	b2b6      	uxth	r6, r6
        start = 2;
   b4d62:	2502      	movs	r5, #2
   b4d64:	e001      	b.n	b4d6a <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   b4d66:	2500      	movs	r5, #0
    uint16_t skip = 0;
   b4d68:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   b4d6a:	b2ad      	uxth	r5, r5
   b4d6c:	42bd      	cmp	r5, r7
   b4d6e:	d226      	bcs.n	b4dbe <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   b4d70:	f10d 0105 	add.w	r1, sp, #5
   b4d74:	4620      	mov	r0, r4
   b4d76:	f7ff ff75 	bl	b4c64 <_ZN12PubSubClient8readByteEPh>
   b4d7a:	2800      	cmp	r0, #0
   b4d7c:	d0a8      	beq.n	b4cd0 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   b4d7e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b4d82:	b178      	cbz	r0, b4da4 <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   b4d84:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   b4d88:	d10c      	bne.n	b4da4 <_ZN12PubSubClient10readPacketEPh+0xf0>
   b4d8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4d8e:	f898 2000 	ldrb.w	r2, [r8]
   b4d92:	1a9b      	subs	r3, r3, r2
   b4d94:	3b02      	subs	r3, #2
   b4d96:	42b3      	cmp	r3, r6
   b4d98:	dd04      	ble.n	b4da4 <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   b4d9a:	6803      	ldr	r3, [r0, #0]
   b4d9c:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4da0:	689b      	ldr	r3, [r3, #8]
   b4da2:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   b4da4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4da8:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   b4daa:	bf9e      	ittt	ls
   b4dac:	18e2      	addls	r2, r4, r3
   b4dae:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   b4db2:	7111      	strbls	r1, [r2, #4]
        len++;
   b4db4:	3301      	adds	r3, #1
   b4db6:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   b4dba:	3501      	adds	r5, #1
   b4dbc:	e7d5      	b.n	b4d6a <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   b4dbe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b4dc2:	b92b      	cbnz	r3, b4dd0 <_ZN12PubSubClient10readPacketEPh+0x11c>
   b4dc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b4dc8:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   b4dca:	bf88      	it	hi
   b4dcc:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   b4dd0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b4dd4:	e77d      	b.n	b4cd2 <_ZN12PubSubClient10readPacketEPh+0x1e>

000b4dd6 <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4dd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4dda:	4615      	mov	r5, r2
   b4ddc:	461e      	mov	r6, r3
    uint16_t len = length;
   b4dde:	461a      	mov	r2, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4de0:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4de2:	2300      	movs	r3, #0
        digit = len % 128;
   b4de4:	4696      	mov	lr, r2
        lenBuf[pos++] = digit;
   b4de6:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4de8:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4dec:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4df0:	f103 0401 	add.w	r4, r3, #1
   b4df4:	4403      	add	r3, r0
            digit |= 0x80;
   b4df6:	bf88      	it	hi
   b4df8:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
    } while(len>0);
   b4dfc:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4e00:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4e04:	b2e4      	uxtb	r4, r4
   b4e06:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len>0);
   b4e0a:	d820      	bhi.n	b4e4e <_ZN12PubSubClient5writeEhPht+0x78>
    buf[4-llen] = header;
   b4e0c:	f1c4 0304 	rsb	r3, r4, #4
        buf[5-llen+i] = lenBuf[i];
   b4e10:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4e14:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4e16:	4622      	mov	r2, r4
   b4e18:	a901      	add	r1, sp, #4
   b4e1a:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4e1c:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4e20:	f002 ffd9 	bl	b7dd6 <memcpy>
    rc = _client->write(buf+(4-llen),length+1+llen);
   b4e24:	6838      	ldr	r0, [r7, #0]
   b4e26:	6803      	ldr	r3, [r0, #0]
   b4e28:	1c72      	adds	r2, r6, #1
   b4e2a:	4422      	add	r2, r4
   b4e2c:	68db      	ldr	r3, [r3, #12]
   b4e2e:	4641      	mov	r1, r8
   b4e30:	4798      	blx	r3
   b4e32:	4605      	mov	r5, r0
   b4e34:	f000 fb30 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   b4e38:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4e3a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   b4e3e:	4432      	add	r2, r6
   b4e40:	b2a8      	uxth	r0, r5
}
   b4e42:	1a13      	subs	r3, r2, r0
   b4e44:	4258      	negs	r0, r3
   b4e46:	4158      	adcs	r0, r3
   b4e48:	b002      	add	sp, #8
   b4e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4e4e:	4623      	mov	r3, r4
   b4e50:	e7c8      	b.n	b4de4 <_ZN12PubSubClient5writeEhPht+0xe>

000b4e52 <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   b4e52:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    while (*idp) {
   b4e56:	3901      	subs	r1, #1
    pos += 2;
   b4e58:	b29c      	uxth	r4, r3
   b4e5a:	2300      	movs	r3, #0
    while (*idp) {
   b4e5c:	1c5e      	adds	r6, r3, #1
   b4e5e:	fa14 f083 	uxtah	r0, r4, r3
   b4e62:	5d8f      	ldrb	r7, [r1, r6]
   b4e64:	b29d      	uxth	r5, r3
   b4e66:	b280      	uxth	r0, r0
   b4e68:	b117      	cbz	r7, b4e70 <_ZN12PubSubClient11writeStringEPKcPht+0x1e>
        buf[pos++] = *idp++;
   b4e6a:	5417      	strb	r7, [r2, r0]
    while (*idp) {
   b4e6c:	4633      	mov	r3, r6
   b4e6e:	e7f5      	b.n	b4e5c <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   b4e70:	b299      	uxth	r1, r3
   b4e72:	1a41      	subs	r1, r0, r1
   b4e74:	440a      	add	r2, r1
   b4e76:	0a29      	lsrs	r1, r5, #8
   b4e78:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4e7c:	f802 3c01 	strb.w	r3, [r2, #-1]
}
   b4e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4e82 <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   b4e82:	b538      	push	{r3, r4, r5, lr}
   b4e84:	4604      	mov	r4, r0
    if (_client == NULL ) {
   b4e86:	6800      	ldr	r0, [r0, #0]
   b4e88:	b908      	cbnz	r0, b4e8e <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   b4e8a:	2000      	movs	r0, #0
}
   b4e8c:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   b4e8e:	6803      	ldr	r3, [r0, #0]
   b4e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e92:	4798      	blx	r3
        if (!rc) {
   b4e94:	b980      	cbnz	r0, b4eb8 <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   b4e96:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   b4e9a:	2d00      	cmp	r5, #0
   b4e9c:	d1f5      	bne.n	b4e8a <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   b4e9e:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   b4ea0:	f06f 0302 	mvn.w	r3, #2
   b4ea4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   b4ea8:	6803      	ldr	r3, [r0, #0]
   b4eaa:	69db      	ldr	r3, [r3, #28]
   b4eac:	4798      	blx	r3
                _client->stop();
   b4eae:	6820      	ldr	r0, [r4, #0]
   b4eb0:	6803      	ldr	r3, [r0, #0]
   b4eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4eb4:	4798      	blx	r3
   b4eb6:	e7e8      	b.n	b4e8a <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   b4eb8:	2001      	movs	r0, #1
   b4eba:	e7e7      	b.n	b4e8c <_ZN12PubSubClient9connectedEv+0xa>

000b4ebc <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   b4ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ec0:	b08b      	sub	sp, #44	; 0x2c
   b4ec2:	4604      	mov	r4, r0
   b4ec4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   b4ec8:	4689      	mov	r9, r1
   b4eca:	4617      	mov	r7, r2
   b4ecc:	461e      	mov	r6, r3
    if (!connected()) {
   b4ece:	f7ff ffd8 	bl	b4e82 <_ZN12PubSubClient9connectedEv>
   b4ed2:	4605      	mov	r5, r0
   b4ed4:	2800      	cmp	r0, #0
   b4ed6:	f040 80a5 	bne.w	b5024 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->domain, this->port);
   b4eda:	f8d4 a000 	ldr.w	sl, [r4]
        if (domain != NULL) {
   b4ede:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
            result = _client->connect(this->domain, this->port);
   b4ee2:	f8da 3000 	ldr.w	r3, [sl]
        if (domain != NULL) {
   b4ee6:	2900      	cmp	r1, #0
   b4ee8:	d079      	beq.n	b4fde <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x122>
            result = _client->connect(this->domain, this->port);
   b4eea:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b4eee:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4ef2:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   b4ef4:	4650      	mov	r0, sl
   b4ef6:	47d8      	blx	fp
        if (result == 1) {
   b4ef8:	2801      	cmp	r0, #1
   b4efa:	f040 809a 	bne.w	b5032 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x176>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4efe:	4b4f      	ldr	r3, [pc, #316]	; (b503c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x180>)
            nextMsgId = 1;
   b4f00:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4f04:	889a      	ldrh	r2, [r3, #4]
   b4f06:	f8ad 2014 	strh.w	r2, [sp, #20]
   b4f0a:	6818      	ldr	r0, [r3, #0]
                buffer[length++] = d[j];
   b4f0c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4f10:	799b      	ldrb	r3, [r3, #6]
   b4f12:	9004      	str	r0, [sp, #16]
   b4f14:	f88d 3016 	strb.w	r3, [sp, #22]
                buffer[length++] = d[j];
   b4f18:	f8c4 0009 	str.w	r0, [r4, #9]
   b4f1c:	f8a4 200d 	strh.w	r2, [r4, #13]
   b4f20:	73e3      	strb	r3, [r4, #15]
            if (willTopic) {
   b4f22:	f1b8 0f00 	cmp.w	r8, #0
   b4f26:	d066      	beq.n	b4ff6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13a>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4f28:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b4f2c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b4f30:	015b      	lsls	r3, r3, #5
   b4f32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   b4f36:	f043 0306 	orr.w	r3, r3, #6
   b4f3a:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   b4f3c:	b11f      	cbz	r7, b4f46 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
                if(pass != NULL) {
   b4f3e:	2e00      	cmp	r6, #0
   b4f40:	d15b      	bne.n	b4ffa <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13e>
                v = v|0x80;
   b4f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   b4f46:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   b4f48:	2300      	movs	r3, #0
   b4f4a:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b4f4c:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   b4f4e:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b4f50:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   b4f52:	4649      	mov	r1, r9
   b4f54:	4620      	mov	r0, r4
   b4f56:	9201      	str	r2, [sp, #4]
   b4f58:	f7ff ff7b 	bl	b4e52 <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   b4f5c:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   b4f5e:	4603      	mov	r3, r0
            if (willTopic) {
   b4f60:	f1b8 0f00 	cmp.w	r8, #0
   b4f64:	d00b      	beq.n	b4f7e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xc2>
                length = writeString(willTopic,buffer,length);
   b4f66:	4641      	mov	r1, r8
   b4f68:	4620      	mov	r0, r4
   b4f6a:	f7ff ff72 	bl	b4e52 <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   b4f6e:	9a01      	ldr	r2, [sp, #4]
   b4f70:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   b4f72:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   b4f74:	4620      	mov	r0, r4
   b4f76:	f7ff ff6c 	bl	b4e52 <_ZN12PubSubClient11writeStringEPKcPht>
   b4f7a:	9a01      	ldr	r2, [sp, #4]
   b4f7c:	4603      	mov	r3, r0
            if(user != NULL) {
   b4f7e:	b16f      	cbz	r7, b4f9c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                length = writeString(user,buffer,length);
   b4f80:	4639      	mov	r1, r7
   b4f82:	4620      	mov	r0, r4
   b4f84:	9201      	str	r2, [sp, #4]
   b4f86:	f7ff ff64 	bl	b4e52 <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   b4f8a:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   b4f8c:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4f8e:	b12e      	cbz	r6, b4f9c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                    length = writeString(pass,buffer,length);
   b4f90:	4631      	mov	r1, r6
   b4f92:	4620      	mov	r0, r4
   b4f94:	f7ff ff5d 	bl	b4e52 <_ZN12PubSubClient11writeStringEPKcPht>
   b4f98:	9a01      	ldr	r2, [sp, #4]
   b4f9a:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   b4f9c:	3b05      	subs	r3, #5
   b4f9e:	b29b      	uxth	r3, r3
   b4fa0:	2110      	movs	r1, #16
   b4fa2:	4620      	mov	r0, r4
   b4fa4:	f7ff ff17 	bl	b4dd6 <_ZN12PubSubClient5writeEhPht>
   b4fa8:	f000 fa76 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4fac:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b4fb0:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   b4fb4:	6820      	ldr	r0, [r4, #0]
   b4fb6:	6803      	ldr	r3, [r0, #0]
   b4fb8:	691b      	ldr	r3, [r3, #16]
   b4fba:	4798      	blx	r3
   b4fbc:	bb00      	cbnz	r0, b5000 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x144>
   b4fbe:	f000 fa6b 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b4fc2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b4fc6:	1ac0      	subs	r0, r0, r3
   b4fc8:	42b0      	cmp	r0, r6
   b4fca:	d9f3      	bls.n	b4fb4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xf8>
                    _state = MQTT_CONNECTION_TIMEOUT;
   b4fcc:	f06f 0303 	mvn.w	r3, #3
   b4fd0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   b4fd4:	6820      	ldr	r0, [r4, #0]
   b4fd6:	6803      	ldr	r3, [r0, #0]
   b4fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fda:	4798      	blx	r3
   b4fdc:	e022      	b.n	b5024 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->ip, this->port);
   b4fde:	f104 0198 	add.w	r1, r4, #152	; 0x98
   b4fe2:	a804      	add	r0, sp, #16
   b4fe4:	f8d3 b020 	ldr.w	fp, [r3, #32]
   b4fe8:	f7ff fe1c 	bl	b4c24 <_ZN9IPAddressC1ERKS_>
   b4fec:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b4ff0:	462b      	mov	r3, r5
   b4ff2:	a904      	add	r1, sp, #16
   b4ff4:	e77e      	b.n	b4ef4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   b4ff6:	2302      	movs	r3, #2
   b4ff8:	e7a0      	b.n	b4f3c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x80>
                    v = v|(0x80>>1);
   b4ffa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   b4ffe:	e7a2      	b.n	b4f46 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
            uint16_t len = readPacket(&llen);
   b5000:	f10d 010f 	add.w	r1, sp, #15
   b5004:	4620      	mov	r0, r4
   b5006:	f7ff fe55 	bl	b4cb4 <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   b500a:	2804      	cmp	r0, #4
   b500c:	d1e2      	bne.n	b4fd4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
                if (buffer[3] == 0) {
   b500e:	79e6      	ldrb	r6, [r4, #7]
   b5010:	b966      	cbnz	r6, b502c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   b5012:	f000 fa41 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b5016:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5018:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   b501c:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   b5020:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   b5024:	4628      	mov	r0, r5
   b5026:	b00b      	add	sp, #44	; 0x2c
   b5028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   b502c:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   b5030:	e7d0      	b.n	b4fd4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
            _state = MQTT_CONNECT_FAILED;
   b5032:	f06f 0301 	mvn.w	r3, #1
   b5036:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   b503a:	e7f3      	b.n	b5024 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
   b503c:	000ba268 	.word	0x000ba268

000b5040 <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   b5040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   b5042:	2400      	movs	r4, #0
   b5044:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b5048:	e9cd 4400 	strd	r4, r4, [sp]
   b504c:	f7ff ff36 	bl	b4ebc <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   b5050:	b004      	add	sp, #16
   b5052:	bd10      	pop	{r4, pc}

000b5054 <_ZN12PubSubClient4loopEv>:
boolean PubSubClient::loop() {
   b5054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5058:	b085      	sub	sp, #20
   b505a:	af00      	add	r7, sp, #0
   b505c:	4604      	mov	r4, r0
    if (connected()) {
   b505e:	f7ff ff10 	bl	b4e82 <_ZN12PubSubClient9connectedEv>
   b5062:	4681      	mov	r9, r0
   b5064:	b1d8      	cbz	r0, b509e <_ZN12PubSubClient4loopEv+0x4a>
   b5066:	f000 fa17 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   b506a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b506e:	f643 2298 	movw	r2, #15000	; 0x3a98
   b5072:	1ac3      	subs	r3, r0, r3
   b5074:	4293      	cmp	r3, r2
   b5076:	4680      	mov	r8, r0
   b5078:	d804      	bhi.n	b5084 <_ZN12PubSubClient4loopEv+0x30>
   b507a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   b507e:	1ac3      	subs	r3, r0, r3
   b5080:	4293      	cmp	r3, r2
   b5082:	d91e      	bls.n	b50c2 <_ZN12PubSubClient4loopEv+0x6e>
            if (pingOutstanding) {
   b5084:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
                _client->stop();
   b5088:	6820      	ldr	r0, [r4, #0]
            if (pingOutstanding) {
   b508a:	b16b      	cbz	r3, b50a8 <_ZN12PubSubClient4loopEv+0x54>
                this->_state = MQTT_CONNECTION_TIMEOUT;
   b508c:	f06f 0303 	mvn.w	r3, #3
   b5090:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->stop();
   b5094:	6803      	ldr	r3, [r0, #0]
   b5096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5098:	4798      	blx	r3
                return false;
   b509a:	f04f 0900 	mov.w	r9, #0
}
   b509e:	4648      	mov	r0, r9
   b50a0:	3714      	adds	r7, #20
   b50a2:	46bd      	mov	sp, r7
   b50a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b50a8:	4621      	mov	r1, r4
   b50aa:	23c0      	movs	r3, #192	; 0xc0
   b50ac:	f821 3f04 	strh.w	r3, [r1, #4]!
                _client->write(buffer,2);
   b50b0:	6803      	ldr	r3, [r0, #0]
   b50b2:	2202      	movs	r2, #2
   b50b4:	68db      	ldr	r3, [r3, #12]
   b50b6:	4798      	blx	r3
                lastInActivity = t;
   b50b8:	e9c4 8822 	strd	r8, r8, [r4, #136]	; 0x88
                pingOutstanding = true;
   b50bc:	2301      	movs	r3, #1
   b50be:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        if (_client->available()) {
   b50c2:	6820      	ldr	r0, [r4, #0]
   b50c4:	6803      	ldr	r3, [r0, #0]
   b50c6:	691b      	ldr	r3, [r3, #16]
   b50c8:	4798      	blx	r3
   b50ca:	2800      	cmp	r0, #0
   b50cc:	d0e7      	beq.n	b509e <_ZN12PubSubClient4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
   b50ce:	f107 010f 	add.w	r1, r7, #15
   b50d2:	4620      	mov	r0, r4
   b50d4:	f7ff fdee 	bl	b4cb4 <_ZN12PubSubClient10readPacketEPh>
            if (len > 0) {
   b50d8:	4605      	mov	r5, r0
   b50da:	2800      	cmp	r0, #0
   b50dc:	d0df      	beq.n	b509e <_ZN12PubSubClient4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
   b50de:	7923      	ldrb	r3, [r4, #4]
   b50e0:	607b      	str	r3, [r7, #4]
   b50e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b50e6:	2b30      	cmp	r3, #48	; 0x30
                lastInActivity = t;
   b50e8:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                if (type == MQTTPUBLISH) {
   b50ec:	d14d      	bne.n	b518a <_ZN12PubSubClient4loopEv+0x136>
                    if (callback) {
   b50ee:	f8d4 a094 	ldr.w	sl, [r4, #148]	; 0x94
   b50f2:	f1ba 0f00 	cmp.w	sl, #0
   b50f6:	d0d2      	beq.n	b509e <_ZN12PubSubClient4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b50f8:	7bfe      	ldrb	r6, [r7, #15]
   b50fa:	19a3      	adds	r3, r4, r6
                        }
   b50fc:	46eb      	mov	fp, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b50fe:	7959      	ldrb	r1, [r3, #5]
   b5100:	799a      	ldrb	r2, [r3, #6]
   b5102:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   b5106:	b292      	uxth	r2, r2
                        char topic[tl+1];
   b5108:	f102 0308 	add.w	r3, r2, #8
   b510c:	08db      	lsrs	r3, r3, #3
   b510e:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
   b5112:	469d      	mov	sp, r3
                            topic[i] = buffer[llen+3+i];
   b5114:	1df1      	adds	r1, r6, #7
   b5116:	4421      	add	r1, r4
   b5118:	4668      	mov	r0, sp
   b511a:	603a      	str	r2, [r7, #0]
   b511c:	f002 fe5b 	bl	b7dd6 <memcpy>
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b5120:	6879      	ldr	r1, [r7, #4]
                        topic[tl] = 0;
   b5122:	683a      	ldr	r2, [r7, #0]
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b5124:	f001 0106 	and.w	r1, r1, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5128:	1ba8      	subs	r0, r5, r6
                        topic[tl] = 0;
   b512a:	2300      	movs	r3, #0
                            callback(topic,payload,len-llen-3-tl-2);
   b512c:	3803      	subs	r0, #3
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b512e:	2902      	cmp	r1, #2
   b5130:	f106 0103 	add.w	r1, r6, #3
                        topic[tl] = 0;
   b5134:	f80d 3002 	strb.w	r3, [sp, r2]
                            callback(topic,payload,len-llen-3-tl-2);
   b5138:	eba0 0002 	sub.w	r0, r0, r2
                _client->write(buffer,2);
   b513c:	f104 0304 	add.w	r3, r4, #4
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5140:	4411      	add	r1, r2
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b5142:	d11d      	bne.n	b5180 <_ZN12PubSubClient4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5144:	4421      	add	r1, r4
                            callback(topic,payload,len-llen-3-tl-2);
   b5146:	607b      	str	r3, [r7, #4]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5148:	f891 c004 	ldrb.w	ip, [r1, #4]
   b514c:	794d      	ldrb	r5, [r1, #5]
                            payload = buffer+llen+3+tl+2;
   b514e:	1d71      	adds	r1, r6, #5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5150:	eb05 250c 	add.w	r5, r5, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
   b5154:	4411      	add	r1, r2
                            callback(topic,payload,len-llen-3-tl-2);
   b5156:	4419      	add	r1, r3
   b5158:	1e82      	subs	r2, r0, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b515a:	b2ad      	uxth	r5, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b515c:	4668      	mov	r0, sp
   b515e:	47d0      	blx	sl
                            buffer[2] = (msgId >> 8);
   b5160:	ba6d      	rev16	r5, r5
                            _client->write(buffer,4);
   b5162:	6820      	ldr	r0, [r4, #0]
                            buffer[2] = (msgId >> 8);
   b5164:	80e5      	strh	r5, [r4, #6]
                            buffer[0] = MQTTPUBACK;
   b5166:	f44f 7210 	mov.w	r2, #576	; 0x240
   b516a:	80a2      	strh	r2, [r4, #4]
                            _client->write(buffer,4);
   b516c:	6802      	ldr	r2, [r0, #0]
   b516e:	687b      	ldr	r3, [r7, #4]
   b5170:	68d5      	ldr	r5, [r2, #12]
   b5172:	4619      	mov	r1, r3
   b5174:	2204      	movs	r2, #4
   b5176:	47a8      	blx	r5
                            lastOutActivity = t;
   b5178:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
   b517c:	46dd      	mov	sp, fp
   b517e:	e78e      	b.n	b509e <_ZN12PubSubClient4loopEv+0x4a>
                            callback(topic,payload,len-llen-3-tl);
   b5180:	4602      	mov	r2, r0
   b5182:	4419      	add	r1, r3
   b5184:	4668      	mov	r0, sp
   b5186:	47d0      	blx	sl
   b5188:	e7f8      	b.n	b517c <_ZN12PubSubClient4loopEv+0x128>
                } else if (type == MQTTPINGREQ) {
   b518a:	2bc0      	cmp	r3, #192	; 0xc0
   b518c:	d109      	bne.n	b51a2 <_ZN12PubSubClient4loopEv+0x14e>
                    buffer[0] = MQTTPINGRESP;
   b518e:	23d0      	movs	r3, #208	; 0xd0
                    _client->write(buffer,2);
   b5190:	4621      	mov	r1, r4
                    buffer[0] = MQTTPINGRESP;
   b5192:	80a3      	strh	r3, [r4, #4]
                    _client->write(buffer,2);
   b5194:	f851 0b04 	ldr.w	r0, [r1], #4
   b5198:	6803      	ldr	r3, [r0, #0]
   b519a:	2202      	movs	r2, #2
   b519c:	68db      	ldr	r3, [r3, #12]
   b519e:	4798      	blx	r3
   b51a0:	e77d      	b.n	b509e <_ZN12PubSubClient4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
   b51a2:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
   b51a4:	bf04      	itt	eq
   b51a6:	2300      	moveq	r3, #0
   b51a8:	f884 3090 	strbeq.w	r3, [r4, #144]	; 0x90
   b51ac:	e777      	b.n	b509e <_ZN12PubSubClient4loopEv+0x4a>

000b51ae <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   b51ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b51b2:	4604      	mov	r4, r0
   b51b4:	f89d 7020 	ldrb.w	r7, [sp, #32]
   b51b8:	4688      	mov	r8, r1
   b51ba:	4616      	mov	r6, r2
   b51bc:	461d      	mov	r5, r3
    if (connected()) {
   b51be:	f7ff fe60 	bl	b4e82 <_ZN12PubSubClient9connectedEv>
   b51c2:	b338      	cbz	r0, b5214 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   b51c4:	4640      	mov	r0, r8
   b51c6:	f002 fe7a 	bl	b7ebe <strlen>
   b51ca:	1deb      	adds	r3, r5, #7
   b51cc:	4418      	add	r0, r3
   b51ce:	2880      	cmp	r0, #128	; 0x80
   b51d0:	d820      	bhi.n	b5214 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   b51d2:	1d22      	adds	r2, r4, #4
   b51d4:	2305      	movs	r3, #5
   b51d6:	4641      	mov	r1, r8
   b51d8:	4620      	mov	r0, r4
   b51da:	9201      	str	r2, [sp, #4]
   b51dc:	f7ff fe39 	bl	b4e52 <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   b51e0:	9a01      	ldr	r2, [sp, #4]
   b51e2:	2300      	movs	r3, #0
   b51e4:	18c1      	adds	r1, r0, r3
   b51e6:	429d      	cmp	r5, r3
   b51e8:	b289      	uxth	r1, r1
   b51ea:	d907      	bls.n	b51fc <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   b51ec:	4421      	add	r1, r4
   b51ee:	f816 c003 	ldrb.w	ip, [r6, r3]
   b51f2:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   b51f6:	3301      	adds	r3, #1
   b51f8:	b29b      	uxth	r3, r3
   b51fa:	e7f3      	b.n	b51e4 <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   b51fc:	1f4b      	subs	r3, r1, #5
            header |= 1;
   b51fe:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   b5200:	b29b      	uxth	r3, r3
   b5202:	bf0c      	ite	eq
   b5204:	2130      	moveq	r1, #48	; 0x30
   b5206:	2131      	movne	r1, #49	; 0x31
   b5208:	4620      	mov	r0, r4
}
   b520a:	b002      	add	sp, #8
   b520c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   b5210:	f7ff bde1 	b.w	b4dd6 <_ZN12PubSubClient5writeEhPht>
}
   b5214:	2000      	movs	r0, #0
   b5216:	b002      	add	sp, #8
   b5218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b521c <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b521c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b521e:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b5220:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b5222:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b5224:	9202      	str	r2, [sp, #8]
   b5226:	f002 fe4a 	bl	b7ebe <strlen>
   b522a:	4603      	mov	r3, r0
   b522c:	2000      	movs	r0, #0
   b522e:	9000      	str	r0, [sp, #0]
   b5230:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b5234:	4620      	mov	r0, r4
   b5236:	f7ff ffba 	bl	b51ae <_ZN12PubSubClient7publishEPKcPKhjb>
}
   b523a:	b004      	add	sp, #16
   b523c:	bd10      	pop	{r4, pc}

000b523e <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   b523e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   b5242:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   b5246:	4770      	bx	lr

000b5248 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <HAL_USB_USART_Init+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	681b      	ldr	r3, [r3, #0]
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	0003024c 	.word	0x0003024c

000b5258 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <HAL_USB_USART_Begin+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	685b      	ldr	r3, [r3, #4]
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	0003024c 	.word	0x0003024c

000b5268 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <HAL_USB_USART_Available_Data+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	691b      	ldr	r3, [r3, #16]
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	0003024c 	.word	0x0003024c

000b5278 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	695b      	ldr	r3, [r3, #20]
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	0003024c 	.word	0x0003024c

000b5288 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <HAL_USB_USART_Receive_Data+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	699b      	ldr	r3, [r3, #24]
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	0003024c 	.word	0x0003024c

000b5298 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <HAL_USB_USART_Send_Data+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	69db      	ldr	r3, [r3, #28]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	0003024c 	.word	0x0003024c

000b52a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <HAL_USB_USART_Flush_Data+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	6a1b      	ldr	r3, [r3, #32]
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	0003024c 	.word	0x0003024c

000b52b8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <hal_i2c_write+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	6a1b      	ldr	r3, [r3, #32]
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	00030228 	.word	0x00030228

000b52c8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <hal_i2c_available+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	00030228 	.word	0x00030228

000b52d8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <hal_i2c_read+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	00030228 	.word	0x00030228

000b52e8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <hal_i2c_peek+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	00030228 	.word	0x00030228

000b52f8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <hal_i2c_flush+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030228 	.word	0x00030228

000b5308 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <hal_i2c_is_enabled+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	00030228 	.word	0x00030228

000b5318 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <hal_i2c_init+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	00030228 	.word	0x00030228

000b5328 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5328:	b508      	push	{r3, lr}
   b532a:	4b02      	ldr	r3, [pc, #8]	; (b5334 <hal_spi_init+0xc>)
   b532c:	681b      	ldr	r3, [r3, #0]
   b532e:	69db      	ldr	r3, [r3, #28]
   b5330:	9301      	str	r3, [sp, #4]
   b5332:	bd08      	pop	{r3, pc}
   b5334:	00030230 	.word	0x00030230

000b5338 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b02      	ldr	r3, [pc, #8]	; (b5344 <hal_spi_is_enabled+0xc>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	6a1b      	ldr	r3, [r3, #32]
   b5340:	9301      	str	r3, [sp, #4]
   b5342:	bd08      	pop	{r3, pc}
   b5344:	00030230 	.word	0x00030230

000b5348 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5348:	b508      	push	{r3, lr}
   b534a:	4b02      	ldr	r3, [pc, #8]	; (b5354 <sock_setsockopt+0xc>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	699b      	ldr	r3, [r3, #24]
   b5350:	9301      	str	r3, [sp, #4]
   b5352:	bd08      	pop	{r3, pc}
   b5354:	00030238 	.word	0x00030238

000b5358 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b02      	ldr	r3, [pc, #8]	; (b5364 <sock_close+0xc>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	69db      	ldr	r3, [r3, #28]
   b5360:	9301      	str	r3, [sp, #4]
   b5362:	bd08      	pop	{r3, pc}
   b5364:	00030238 	.word	0x00030238

000b5368 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5368:	b508      	push	{r3, lr}
   b536a:	4b02      	ldr	r3, [pc, #8]	; (b5374 <sock_connect+0xc>)
   b536c:	681b      	ldr	r3, [r3, #0]
   b536e:	6a1b      	ldr	r3, [r3, #32]
   b5370:	9301      	str	r3, [sp, #4]
   b5372:	bd08      	pop	{r3, pc}
   b5374:	00030238 	.word	0x00030238

000b5378 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5378:	b508      	push	{r3, lr}
   b537a:	4b02      	ldr	r3, [pc, #8]	; (b5384 <sock_recv+0xc>)
   b537c:	681b      	ldr	r3, [r3, #0]
   b537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5380:	9301      	str	r3, [sp, #4]
   b5382:	bd08      	pop	{r3, pc}
   b5384:	00030238 	.word	0x00030238

000b5388 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5388:	b508      	push	{r3, lr}
   b538a:	4b02      	ldr	r3, [pc, #8]	; (b5394 <sock_send+0xc>)
   b538c:	681b      	ldr	r3, [r3, #0]
   b538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5390:	9301      	str	r3, [sp, #4]
   b5392:	bd08      	pop	{r3, pc}
   b5394:	00030238 	.word	0x00030238

000b5398 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5398:	b508      	push	{r3, lr}
   b539a:	4b02      	ldr	r3, [pc, #8]	; (b53a4 <sock_socket+0xc>)
   b539c:	681b      	ldr	r3, [r3, #0]
   b539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b53a0:	9301      	str	r3, [sp, #4]
   b53a2:	bd08      	pop	{r3, pc}
   b53a4:	00030238 	.word	0x00030238

000b53a8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b53a8:	b508      	push	{r3, lr}
   b53aa:	4b02      	ldr	r3, [pc, #8]	; (b53b4 <hal_usart_write+0xc>)
   b53ac:	681b      	ldr	r3, [r3, #0]
   b53ae:	68db      	ldr	r3, [r3, #12]
   b53b0:	9301      	str	r3, [sp, #4]
   b53b2:	bd08      	pop	{r3, pc}
   b53b4:	0003023c 	.word	0x0003023c

000b53b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b53b8:	b508      	push	{r3, lr}
   b53ba:	4b02      	ldr	r3, [pc, #8]	; (b53c4 <hal_usart_available+0xc>)
   b53bc:	681b      	ldr	r3, [r3, #0]
   b53be:	691b      	ldr	r3, [r3, #16]
   b53c0:	9301      	str	r3, [sp, #4]
   b53c2:	bd08      	pop	{r3, pc}
   b53c4:	0003023c 	.word	0x0003023c

000b53c8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b53c8:	b508      	push	{r3, lr}
   b53ca:	4b02      	ldr	r3, [pc, #8]	; (b53d4 <hal_usart_read+0xc>)
   b53cc:	681b      	ldr	r3, [r3, #0]
   b53ce:	695b      	ldr	r3, [r3, #20]
   b53d0:	9301      	str	r3, [sp, #4]
   b53d2:	bd08      	pop	{r3, pc}
   b53d4:	0003023c 	.word	0x0003023c

000b53d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b53d8:	b508      	push	{r3, lr}
   b53da:	4b02      	ldr	r3, [pc, #8]	; (b53e4 <hal_usart_peek+0xc>)
   b53dc:	681b      	ldr	r3, [r3, #0]
   b53de:	699b      	ldr	r3, [r3, #24]
   b53e0:	9301      	str	r3, [sp, #4]
   b53e2:	bd08      	pop	{r3, pc}
   b53e4:	0003023c 	.word	0x0003023c

000b53e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b53e8:	b508      	push	{r3, lr}
   b53ea:	4b02      	ldr	r3, [pc, #8]	; (b53f4 <hal_usart_flush+0xc>)
   b53ec:	681b      	ldr	r3, [r3, #0]
   b53ee:	69db      	ldr	r3, [r3, #28]
   b53f0:	9301      	str	r3, [sp, #4]
   b53f2:	bd08      	pop	{r3, pc}
   b53f4:	0003023c 	.word	0x0003023c

000b53f8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b53f8:	b508      	push	{r3, lr}
   b53fa:	4b02      	ldr	r3, [pc, #8]	; (b5404 <hal_usart_is_enabled+0xc>)
   b53fc:	681b      	ldr	r3, [r3, #0]
   b53fe:	6a1b      	ldr	r3, [r3, #32]
   b5400:	9301      	str	r3, [sp, #4]
   b5402:	bd08      	pop	{r3, pc}
   b5404:	0003023c 	.word	0x0003023c

000b5408 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5408:	b508      	push	{r3, lr}
   b540a:	4b02      	ldr	r3, [pc, #8]	; (b5414 <hal_usart_available_data_for_write+0xc>)
   b540c:	681b      	ldr	r3, [r3, #0]
   b540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5410:	9301      	str	r3, [sp, #4]
   b5412:	bd08      	pop	{r3, pc}
   b5414:	0003023c 	.word	0x0003023c

000b5418 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5418:	b508      	push	{r3, lr}
   b541a:	4b02      	ldr	r3, [pc, #8]	; (b5424 <hal_usart_begin_config+0xc>)
   b541c:	681b      	ldr	r3, [r3, #0]
   b541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5420:	9301      	str	r3, [sp, #4]
   b5422:	bd08      	pop	{r3, pc}
   b5424:	0003023c 	.word	0x0003023c

000b5428 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5428:	b508      	push	{r3, lr}
   b542a:	4b02      	ldr	r3, [pc, #8]	; (b5434 <hal_usart_init_ex+0xc>)
   b542c:	681b      	ldr	r3, [r3, #0]
   b542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5430:	9301      	str	r3, [sp, #4]
   b5432:	bd08      	pop	{r3, pc}
   b5434:	0003023c 	.word	0x0003023c

000b5438 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5438:	b508      	push	{r3, lr}
   b543a:	4b02      	ldr	r3, [pc, #8]	; (b5444 <inet_inet_ntop+0xc>)
   b543c:	681b      	ldr	r3, [r3, #0]
   b543e:	695b      	ldr	r3, [r3, #20]
   b5440:	9301      	str	r3, [sp, #4]
   b5442:	bd08      	pop	{r3, pc}
   b5444:	00030264 	.word	0x00030264

000b5448 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5448:	b508      	push	{r3, lr}
   b544a:	4b02      	ldr	r3, [pc, #8]	; (b5454 <inet_htonl+0xc>)
   b544c:	681b      	ldr	r3, [r3, #0]
   b544e:	6a1b      	ldr	r3, [r3, #32]
   b5450:	9301      	str	r3, [sp, #4]
   b5452:	bd08      	pop	{r3, pc}
   b5454:	00030264 	.word	0x00030264

000b5458 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5458:	b508      	push	{r3, lr}
   b545a:	4b02      	ldr	r3, [pc, #8]	; (b5464 <inet_htons+0xc>)
   b545c:	681b      	ldr	r3, [r3, #0]
   b545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5460:	9301      	str	r3, [sp, #4]
   b5462:	bd08      	pop	{r3, pc}
   b5464:	00030264 	.word	0x00030264

000b5468 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5468:	b508      	push	{r3, lr}
   b546a:	4b02      	ldr	r3, [pc, #8]	; (b5474 <os_mutex_recursive_create+0xc>)
   b546c:	681b      	ldr	r3, [r3, #0]
   b546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5470:	9301      	str	r3, [sp, #4]
   b5472:	bd08      	pop	{r3, pc}
   b5474:	00030248 	.word	0x00030248

000b5478 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5478:	b508      	push	{r3, lr}
   b547a:	4b02      	ldr	r3, [pc, #8]	; (b5484 <HAL_RNG_GetRandomNumber+0xc>)
   b547c:	681b      	ldr	r3, [r3, #0]
   b547e:	685b      	ldr	r3, [r3, #4]
   b5480:	9301      	str	r3, [sp, #4]
   b5482:	bd08      	pop	{r3, pc}
   b5484:	00030218 	.word	0x00030218

000b5488 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5488:	b508      	push	{r3, lr}
   b548a:	4b02      	ldr	r3, [pc, #8]	; (b5494 <HAL_Delay_Microseconds+0xc>)
   b548c:	681b      	ldr	r3, [r3, #0]
   b548e:	68db      	ldr	r3, [r3, #12]
   b5490:	9301      	str	r3, [sp, #4]
   b5492:	bd08      	pop	{r3, pc}
   b5494:	00030218 	.word	0x00030218

000b5498 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5498:	b508      	push	{r3, lr}
   b549a:	4b02      	ldr	r3, [pc, #8]	; (b54a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b549c:	681b      	ldr	r3, [r3, #0]
   b549e:	695b      	ldr	r3, [r3, #20]
   b54a0:	9301      	str	r3, [sp, #4]
   b54a2:	bd08      	pop	{r3, pc}
   b54a4:	00030218 	.word	0x00030218

000b54a8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b54a8:	b508      	push	{r3, lr}
   b54aa:	4b02      	ldr	r3, [pc, #8]	; (b54b4 <hal_rtc_time_is_valid+0xc>)
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b54b0:	9301      	str	r3, [sp, #4]
   b54b2:	bd08      	pop	{r3, pc}
   b54b4:	00030218 	.word	0x00030218

000b54b8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b54b8:	b508      	push	{r3, lr}
   b54ba:	4b02      	ldr	r3, [pc, #8]	; (b54c4 <hal_timer_millis+0xc>)
   b54bc:	681b      	ldr	r3, [r3, #0]
   b54be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b54c0:	9301      	str	r3, [sp, #4]
   b54c2:	bd08      	pop	{r3, pc}
   b54c4:	00030218 	.word	0x00030218

000b54c8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b54c8:	b508      	push	{r3, lr}
   b54ca:	4b02      	ldr	r3, [pc, #8]	; (b54d4 <hal_rtc_get_time+0xc>)
   b54cc:	681b      	ldr	r3, [r3, #0]
   b54ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b54d0:	9301      	str	r3, [sp, #4]
   b54d2:	bd08      	pop	{r3, pc}
   b54d4:	00030218 	.word	0x00030218

000b54d8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b54d8:	b508      	push	{r3, lr}
   b54da:	4b02      	ldr	r3, [pc, #8]	; (b54e4 <if_index_to_name+0xc>)
   b54dc:	681b      	ldr	r3, [r3, #0]
   b54de:	695b      	ldr	r3, [r3, #20]
   b54e0:	9301      	str	r3, [sp, #4]
   b54e2:	bd08      	pop	{r3, pc}
   b54e4:	0003026c 	.word	0x0003026c

000b54e8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b54e8:	b508      	push	{r3, lr}
   b54ea:	4b02      	ldr	r3, [pc, #8]	; (b54f4 <HAL_Pin_Mode+0xc>)
   b54ec:	681b      	ldr	r3, [r3, #0]
   b54ee:	689b      	ldr	r3, [r3, #8]
   b54f0:	9301      	str	r3, [sp, #4]
   b54f2:	bd08      	pop	{r3, pc}
   b54f4:	0003022c 	.word	0x0003022c

000b54f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b54f8:	b508      	push	{r3, lr}
   b54fa:	4b02      	ldr	r3, [pc, #8]	; (b5504 <netdb_freeaddrinfo+0xc>)
   b54fc:	681b      	ldr	r3, [r3, #0]
   b54fe:	689b      	ldr	r3, [r3, #8]
   b5500:	9301      	str	r3, [sp, #4]
   b5502:	bd08      	pop	{r3, pc}
   b5504:	00030268 	.word	0x00030268

000b5508 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5508:	b508      	push	{r3, lr}
   b550a:	4b02      	ldr	r3, [pc, #8]	; (b5514 <netdb_getaddrinfo+0xc>)
   b550c:	681b      	ldr	r3, [r3, #0]
   b550e:	68db      	ldr	r3, [r3, #12]
   b5510:	9301      	str	r3, [sp, #4]
   b5512:	bd08      	pop	{r3, pc}
   b5514:	00030268 	.word	0x00030268

000b5518 <LED_SetBrightness>:

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   b5518:	b508      	push	{r3, lr}
   b551a:	4b02      	ldr	r3, [pc, #8]	; (b5524 <LED_SetBrightness+0xc>)
   b551c:	681b      	ldr	r3, [r3, #0]
   b551e:	691b      	ldr	r3, [r3, #16]
   b5520:	9301      	str	r3, [sp, #4]
   b5522:	bd08      	pop	{r3, pc}
   b5524:	00030260 	.word	0x00030260

000b5528 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b5528:	b508      	push	{r3, lr}
   b552a:	4b02      	ldr	r3, [pc, #8]	; (b5534 <LED_RGB_IsOverRidden+0xc>)
   b552c:	681b      	ldr	r3, [r3, #0]
   b552e:	699b      	ldr	r3, [r3, #24]
   b5530:	9301      	str	r3, [sp, #4]
   b5532:	bd08      	pop	{r3, pc}
   b5534:	00030260 	.word	0x00030260

000b5538 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5538:	b508      	push	{r3, lr}
   b553a:	4b02      	ldr	r3, [pc, #8]	; (b5544 <LED_On+0xc>)
   b553c:	681b      	ldr	r3, [r3, #0]
   b553e:	69db      	ldr	r3, [r3, #28]
   b5540:	9301      	str	r3, [sp, #4]
   b5542:	bd08      	pop	{r3, pc}
   b5544:	00030260 	.word	0x00030260

000b5548 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5548:	b508      	push	{r3, lr}
   b554a:	4b02      	ldr	r3, [pc, #8]	; (b5554 <panic_+0xc>)
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5550:	9301      	str	r3, [sp, #4]
   b5552:	bd08      	pop	{r3, pc}
   b5554:	00030260 	.word	0x00030260

000b5558 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5558:	b508      	push	{r3, lr}
   b555a:	4b02      	ldr	r3, [pc, #8]	; (b5564 <log_message+0xc>)
   b555c:	681b      	ldr	r3, [r3, #0]
   b555e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5560:	9301      	str	r3, [sp, #4]
   b5562:	bd08      	pop	{r3, pc}
   b5564:	00030260 	.word	0x00030260

000b5568 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b5568:	b508      	push	{r3, lr}
   b556a:	4b03      	ldr	r3, [pc, #12]	; (b5578 <diag_get_source+0x10>)
   b556c:	681b      	ldr	r3, [r3, #0]
   b556e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5572:	9301      	str	r3, [sp, #4]
   b5574:	bd08      	pop	{r3, pc}
   b5576:	0000      	.short	0x0000
   b5578:	00030260 	.word	0x00030260

000b557c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b557c:	b508      	push	{r3, lr}
   b557e:	4b02      	ldr	r3, [pc, #8]	; (b5588 <spark_process+0xc>)
   b5580:	681b      	ldr	r3, [r3, #0]
   b5582:	689b      	ldr	r3, [r3, #8]
   b5584:	9301      	str	r3, [sp, #4]
   b5586:	bd08      	pop	{r3, pc}
   b5588:	00030244 	.word	0x00030244

000b558c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b558c:	b508      	push	{r3, lr}
   b558e:	4b02      	ldr	r3, [pc, #8]	; (b5598 <spark_cloud_flag_connect+0xc>)
   b5590:	681b      	ldr	r3, [r3, #0]
   b5592:	68db      	ldr	r3, [r3, #12]
   b5594:	9301      	str	r3, [sp, #4]
   b5596:	bd08      	pop	{r3, pc}
   b5598:	00030244 	.word	0x00030244

000b559c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b559c:	b508      	push	{r3, lr}
   b559e:	4b02      	ldr	r3, [pc, #8]	; (b55a8 <spark_cloud_flag_connected+0xc>)
   b55a0:	681b      	ldr	r3, [r3, #0]
   b55a2:	695b      	ldr	r3, [r3, #20]
   b55a4:	9301      	str	r3, [sp, #4]
   b55a6:	bd08      	pop	{r3, pc}
   b55a8:	00030244 	.word	0x00030244

000b55ac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b55ac:	b508      	push	{r3, lr}
   b55ae:	4b02      	ldr	r3, [pc, #8]	; (b55b8 <spark_send_event+0xc>)
   b55b0:	681b      	ldr	r3, [r3, #0]
   b55b2:	6a1b      	ldr	r3, [r3, #32]
   b55b4:	9301      	str	r3, [sp, #4]
   b55b6:	bd08      	pop	{r3, pc}
   b55b8:	00030244 	.word	0x00030244

000b55bc <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b02      	ldr	r3, [pc, #8]	; (b55c8 <spark_sync_time+0xc>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55c4:	9301      	str	r3, [sp, #4]
   b55c6:	bd08      	pop	{r3, pc}
   b55c8:	00030244 	.word	0x00030244

000b55cc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b55cc:	b508      	push	{r3, lr}
   b55ce:	4b02      	ldr	r3, [pc, #8]	; (b55d8 <spark_sync_time_pending+0xc>)
   b55d0:	681b      	ldr	r3, [r3, #0]
   b55d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b55d4:	9301      	str	r3, [sp, #4]
   b55d6:	bd08      	pop	{r3, pc}
   b55d8:	00030244 	.word	0x00030244

000b55dc <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b02      	ldr	r3, [pc, #8]	; (b55e8 <spark_set_connection_property+0xc>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b55e4:	9301      	str	r3, [sp, #4]
   b55e6:	bd08      	pop	{r3, pc}
   b55e8:	00030244 	.word	0x00030244

000b55ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b55ec:	b508      	push	{r3, lr}
   b55ee:	4b02      	ldr	r3, [pc, #8]	; (b55f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b55f0:	681b      	ldr	r3, [r3, #0]
   b55f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b55f4:	9301      	str	r3, [sp, #4]
   b55f6:	bd08      	pop	{r3, pc}
   b55f8:	00030244 	.word	0x00030244

000b55fc <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   b55fc:	b508      	push	{r3, lr}
   b55fe:	4b02      	ldr	r3, [pc, #8]	; (b5608 <spark_publish_vitals+0xc>)
   b5600:	681b      	ldr	r3, [r3, #0]
   b5602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5604:	9301      	str	r3, [sp, #4]
   b5606:	bd08      	pop	{r3, pc}
   b5608:	00030244 	.word	0x00030244

000b560c <spark_cloud_disconnect>:
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b02      	ldr	r3, [pc, #8]	; (b5618 <spark_cloud_disconnect+0xc>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5614:	9301      	str	r3, [sp, #4]
   b5616:	bd08      	pop	{r3, pc}
   b5618:	00030244 	.word	0x00030244

000b561c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b561c:	b508      	push	{r3, lr}
   b561e:	4b02      	ldr	r3, [pc, #8]	; (b5628 <network_connect+0xc>)
   b5620:	681b      	ldr	r3, [r3, #0]
   b5622:	685b      	ldr	r3, [r3, #4]
   b5624:	9301      	str	r3, [sp, #4]
   b5626:	bd08      	pop	{r3, pc}
   b5628:	00030240 	.word	0x00030240

000b562c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b562c:	b508      	push	{r3, lr}
   b562e:	4b02      	ldr	r3, [pc, #8]	; (b5638 <network_connecting+0xc>)
   b5630:	681b      	ldr	r3, [r3, #0]
   b5632:	689b      	ldr	r3, [r3, #8]
   b5634:	9301      	str	r3, [sp, #4]
   b5636:	bd08      	pop	{r3, pc}
   b5638:	00030240 	.word	0x00030240

000b563c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b02      	ldr	r3, [pc, #8]	; (b5648 <network_disconnect+0xc>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	68db      	ldr	r3, [r3, #12]
   b5644:	9301      	str	r3, [sp, #4]
   b5646:	bd08      	pop	{r3, pc}
   b5648:	00030240 	.word	0x00030240

000b564c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b564c:	b508      	push	{r3, lr}
   b564e:	4b02      	ldr	r3, [pc, #8]	; (b5658 <network_ready+0xc>)
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	691b      	ldr	r3, [r3, #16]
   b5654:	9301      	str	r3, [sp, #4]
   b5656:	bd08      	pop	{r3, pc}
   b5658:	00030240 	.word	0x00030240

000b565c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <network_on+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	695b      	ldr	r3, [r3, #20]
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	00030240 	.word	0x00030240

000b566c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <network_off+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	699b      	ldr	r3, [r3, #24]
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	00030240 	.word	0x00030240

000b567c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <network_listen+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	69db      	ldr	r3, [r3, #28]
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	00030240 	.word	0x00030240

000b568c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b02      	ldr	r3, [pc, #8]	; (b5698 <network_listening+0xc>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	6a1b      	ldr	r3, [r3, #32]
   b5694:	9301      	str	r3, [sp, #4]
   b5696:	bd08      	pop	{r3, pc}
   b5698:	00030240 	.word	0x00030240

000b569c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b569c:	b508      	push	{r3, lr}
   b569e:	4b02      	ldr	r3, [pc, #8]	; (b56a8 <network_set_listen_timeout+0xc>)
   b56a0:	681b      	ldr	r3, [r3, #0]
   b56a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56a4:	9301      	str	r3, [sp, #4]
   b56a6:	bd08      	pop	{r3, pc}
   b56a8:	00030240 	.word	0x00030240

000b56ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b56ac:	b508      	push	{r3, lr}
   b56ae:	4b02      	ldr	r3, [pc, #8]	; (b56b8 <network_get_listen_timeout+0xc>)
   b56b0:	681b      	ldr	r3, [r3, #0]
   b56b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b56b4:	9301      	str	r3, [sp, #4]
   b56b6:	bd08      	pop	{r3, pc}
   b56b8:	00030240 	.word	0x00030240

000b56bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b02      	ldr	r3, [pc, #8]	; (b56c8 <network_is_on+0xc>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56c4:	9301      	str	r3, [sp, #4]
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	00030240 	.word	0x00030240

000b56cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b56cc:	b508      	push	{r3, lr}
   b56ce:	4b02      	ldr	r3, [pc, #8]	; (b56d8 <network_is_off+0xc>)
   b56d0:	681b      	ldr	r3, [r3, #0]
   b56d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	bd08      	pop	{r3, pc}
   b56d8:	00030240 	.word	0x00030240

000b56dc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b02      	ldr	r3, [pc, #8]	; (b56e8 <system_mode+0xc>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	681b      	ldr	r3, [r3, #0]
   b56e4:	9301      	str	r3, [sp, #4]
   b56e6:	bd08      	pop	{r3, pc}
   b56e8:	00030220 	.word	0x00030220

000b56ec <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b56ec:	b508      	push	{r3, lr}
   b56ee:	4b02      	ldr	r3, [pc, #8]	; (b56f8 <set_system_mode+0xc>)
   b56f0:	681b      	ldr	r3, [r3, #0]
   b56f2:	685b      	ldr	r3, [r3, #4]
   b56f4:	9301      	str	r3, [sp, #4]
   b56f6:	bd08      	pop	{r3, pc}
   b56f8:	00030220 	.word	0x00030220

000b56fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b56fc:	b508      	push	{r3, lr}
   b56fe:	4b02      	ldr	r3, [pc, #8]	; (b5708 <system_delay_ms+0xc>)
   b5700:	681b      	ldr	r3, [r3, #0]
   b5702:	695b      	ldr	r3, [r3, #20]
   b5704:	9301      	str	r3, [sp, #4]
   b5706:	bd08      	pop	{r3, pc}
   b5708:	00030220 	.word	0x00030220

000b570c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b570c:	b508      	push	{r3, lr}
   b570e:	4b02      	ldr	r3, [pc, #8]	; (b5718 <application_thread_current+0xc>)
   b5710:	681b      	ldr	r3, [r3, #0]
   b5712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5714:	9301      	str	r3, [sp, #4]
   b5716:	bd08      	pop	{r3, pc}
   b5718:	00030220 	.word	0x00030220

000b571c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b571c:	b508      	push	{r3, lr}
   b571e:	4b02      	ldr	r3, [pc, #8]	; (b5728 <application_thread_invoke+0xc>)
   b5720:	681b      	ldr	r3, [r3, #0]
   b5722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5724:	9301      	str	r3, [sp, #4]
   b5726:	bd08      	pop	{r3, pc}
   b5728:	00030220 	.word	0x00030220

000b572c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b572c:	b508      	push	{r3, lr}
   b572e:	4b02      	ldr	r3, [pc, #8]	; (b5738 <system_thread_get_state+0xc>)
   b5730:	681b      	ldr	r3, [r3, #0]
   b5732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5734:	9301      	str	r3, [sp, #4]
   b5736:	bd08      	pop	{r3, pc}
   b5738:	00030220 	.word	0x00030220

000b573c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b573c:	b508      	push	{r3, lr}
   b573e:	4b03      	ldr	r3, [pc, #12]	; (b574c <system_ctrl_set_app_request_handler+0x10>)
   b5740:	681b      	ldr	r3, [r3, #0]
   b5742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5746:	9301      	str	r3, [sp, #4]
   b5748:	bd08      	pop	{r3, pc}
   b574a:	0000      	.short	0x0000
   b574c:	00030220 	.word	0x00030220

000b5750 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b03      	ldr	r3, [pc, #12]	; (b5760 <system_ctrl_set_result+0x10>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b575a:	9301      	str	r3, [sp, #4]
   b575c:	bd08      	pop	{r3, pc}
   b575e:	0000      	.short	0x0000
   b5760:	00030220 	.word	0x00030220

000b5764 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b03      	ldr	r3, [pc, #12]	; (b5774 <system_reset+0x10>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b576e:	9301      	str	r3, [sp, #4]
   b5770:	bd08      	pop	{r3, pc}
   b5772:	0000      	.short	0x0000
   b5774:	00030220 	.word	0x00030220

000b5778 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <malloc+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	681b      	ldr	r3, [r3, #0]
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	0003021c 	.word	0x0003021c

000b5788 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <free+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	685b      	ldr	r3, [r3, #4]
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	0003021c 	.word	0x0003021c

000b5798 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <realloc+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	689b      	ldr	r3, [r3, #8]
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	0003021c 	.word	0x0003021c

000b57a8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <sprintf+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	68db      	ldr	r3, [r3, #12]
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	0003021c 	.word	0x0003021c

000b57b8 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <snprintf+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	69db      	ldr	r3, [r3, #28]
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	0003021c 	.word	0x0003021c

000b57c8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <vsnprintf+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	0003021c 	.word	0x0003021c

000b57d8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <abort+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	0003021c 	.word	0x0003021c

000b57e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <_malloc_r+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	0003021c 	.word	0x0003021c

000b57f8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <__errno+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	0003021c 	.word	0x0003021c

000b5808 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <__assert_func+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	0003021c 	.word	0x0003021c

000b5818 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <newlib_impure_ptr_callback+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	0003021c 	.word	0x0003021c

000b5828 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <localtime_r+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	0003021c 	.word	0x0003021c

000b5838 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5838:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b583a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b583c:	4604      	mov	r4, r0
      if (_M_manager)
   b583e:	b113      	cbz	r3, b5846 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5840:	2203      	movs	r2, #3
   b5842:	4601      	mov	r1, r0
   b5844:	4798      	blx	r3
    }
   b5846:	4620      	mov	r0, r4
   b5848:	bd10      	pop	{r4, pc}

000b584a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b584a:	2300      	movs	r3, #0
   b584c:	6840      	ldr	r0, [r0, #4]
   b584e:	461a      	mov	r2, r3
   b5850:	f7ff bee4 	b.w	b561c <network_connect>

000b5854 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5854:	6840      	ldr	r0, [r0, #4]
   b5856:	2200      	movs	r2, #0
   b5858:	2102      	movs	r1, #2
   b585a:	f7ff beef 	b.w	b563c <network_disconnect>

000b585e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b585e:	2200      	movs	r2, #0
   b5860:	6840      	ldr	r0, [r0, #4]
   b5862:	4611      	mov	r1, r2
   b5864:	f7ff bee2 	b.w	b562c <network_connecting>

000b5868 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5868:	2200      	movs	r2, #0
   b586a:	6840      	ldr	r0, [r0, #4]
   b586c:	4611      	mov	r1, r2
   b586e:	f7ff beed 	b.w	b564c <network_ready>

000b5872 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5872:	2300      	movs	r3, #0
   b5874:	6840      	ldr	r0, [r0, #4]
   b5876:	461a      	mov	r2, r3
   b5878:	4619      	mov	r1, r3
   b587a:	f7ff beef 	b.w	b565c <network_on>

000b587e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b587e:	2300      	movs	r3, #0
   b5880:	6840      	ldr	r0, [r0, #4]
   b5882:	461a      	mov	r2, r3
   b5884:	4619      	mov	r1, r3
   b5886:	f7ff bef1 	b.w	b566c <network_off>

000b588a <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b588a:	6840      	ldr	r0, [r0, #4]
   b588c:	2100      	movs	r1, #0
   b588e:	f7ff bf15 	b.w	b56bc <network_is_on>

000b5892 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5892:	6840      	ldr	r0, [r0, #4]
   b5894:	2100      	movs	r1, #0
   b5896:	f7ff bf19 	b.w	b56cc <network_is_off>

000b589a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b589a:	6840      	ldr	r0, [r0, #4]
   b589c:	2200      	movs	r2, #0
   b589e:	f081 0101 	eor.w	r1, r1, #1
   b58a2:	f7ff beeb 	b.w	b567c <network_listen>

000b58a6 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b58a6:	6840      	ldr	r0, [r0, #4]
   b58a8:	2200      	movs	r2, #0
   b58aa:	f7ff bef7 	b.w	b569c <network_set_listen_timeout>

000b58ae <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b58ae:	2200      	movs	r2, #0
   b58b0:	6840      	ldr	r0, [r0, #4]
   b58b2:	4611      	mov	r1, r2
   b58b4:	f7ff befa 	b.w	b56ac <network_get_listen_timeout>

000b58b8 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b58b8:	2200      	movs	r2, #0
   b58ba:	6840      	ldr	r0, [r0, #4]
   b58bc:	4611      	mov	r1, r2
   b58be:	f7ff bee5 	b.w	b568c <network_listening>

000b58c2 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b58c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b58c6:	b095      	sub	sp, #84	; 0x54
   b58c8:	4614      	mov	r4, r2
   b58ca:	460d      	mov	r5, r1
   b58cc:	4607      	mov	r7, r0
    IPAddress addr;
   b58ce:	f000 fd1f 	bl	b6310 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b58d2:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b58d4:	221c      	movs	r2, #28
   b58d6:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b58d8:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b58da:	f002 fa8a 	bl	b7df2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b58de:	2340      	movs	r3, #64	; 0x40
   b58e0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b58e2:	4620      	mov	r0, r4
   b58e4:	466b      	mov	r3, sp
   b58e6:	aa0c      	add	r2, sp, #48	; 0x30
   b58e8:	2100      	movs	r1, #0
   b58ea:	f7ff fe0d 	bl	b5508 <netdb_getaddrinfo>
    if (!r) {
   b58ee:	4604      	mov	r4, r0
   b58f0:	2800      	cmp	r0, #0
   b58f2:	d14b      	bne.n	b598c <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b58f4:	4602      	mov	r2, r0
   b58f6:	2101      	movs	r1, #1
   b58f8:	6868      	ldr	r0, [r5, #4]
   b58fa:	f7ff fea7 	bl	b564c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b58fe:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5900:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5902:	4622      	mov	r2, r4
   b5904:	6868      	ldr	r0, [r5, #4]
   b5906:	f7ff fea1 	bl	b564c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b590a:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b590c:	4681      	mov	r9, r0
        bool ok = false;
   b590e:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5910:	2e00      	cmp	r6, #0
   b5912:	d03b      	beq.n	b598c <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5914:	2900      	cmp	r1, #0
   b5916:	d139      	bne.n	b598c <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5918:	6873      	ldr	r3, [r6, #4]
   b591a:	2b02      	cmp	r3, #2
   b591c:	d003      	beq.n	b5926 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b591e:	2b0a      	cmp	r3, #10
   b5920:	d011      	beq.n	b5946 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5922:	69f6      	ldr	r6, [r6, #28]
   b5924:	e7f4      	b.n	b5910 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5926:	f1b8 0f00 	cmp.w	r8, #0
   b592a:	d0fa      	beq.n	b5922 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b592c:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b592e:	a806      	add	r0, sp, #24
   b5930:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5932:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5934:	f000 fd30 	bl	b6398 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b593a:	1d3c      	adds	r4, r7, #4
   b593c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b593e:	682b      	ldr	r3, [r5, #0]
   b5940:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5942:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5944:	e7ed      	b.n	b5922 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5946:	f1b9 0f00 	cmp.w	r9, #0
   b594a:	d0ea      	beq.n	b5922 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b594c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b594e:	2210      	movs	r2, #16
   b5950:	a801      	add	r0, sp, #4
   b5952:	f002 fa4e 	bl	b7df2 <memset>
                    a.v = 6;
   b5956:	2306      	movs	r3, #6
   b5958:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b595c:	ad01      	add	r5, sp, #4
   b595e:	f104 0308 	add.w	r3, r4, #8
   b5962:	3418      	adds	r4, #24
   b5964:	6818      	ldr	r0, [r3, #0]
   b5966:	6859      	ldr	r1, [r3, #4]
   b5968:	462a      	mov	r2, r5
   b596a:	c203      	stmia	r2!, {r0, r1}
   b596c:	3308      	adds	r3, #8
   b596e:	42a3      	cmp	r3, r4
   b5970:	4615      	mov	r5, r2
   b5972:	d1f7      	bne.n	b5964 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5974:	a901      	add	r1, sp, #4
   b5976:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5978:	ad07      	add	r5, sp, #28
   b597a:	f000 fcd7 	bl	b632c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b597e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5980:	1d3c      	adds	r4, r7, #4
   b5982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5984:	682b      	ldr	r3, [r5, #0]
   b5986:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5988:	4649      	mov	r1, r9
   b598a:	e7ca      	b.n	b5922 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b598c:	9800      	ldr	r0, [sp, #0]
   b598e:	f7ff fdb3 	bl	b54f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5992:	4638      	mov	r0, r7
   b5994:	b015      	add	sp, #84	; 0x54
   b5996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b599c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b599c:	4b02      	ldr	r3, [pc, #8]	; (b59a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b599e:	4a03      	ldr	r2, [pc, #12]	; (b59ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b59a0:	601a      	str	r2, [r3, #0]
   b59a2:	2200      	movs	r2, #0
   b59a4:	605a      	str	r2, [r3, #4]

} // spark
   b59a6:	4770      	bx	lr
   b59a8:	2003e64c 	.word	0x2003e64c
   b59ac:	000ba278 	.word	0x000ba278

000b59b0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b59b0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b59b2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b59b4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b59b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b59ba:	2201      	movs	r2, #1
   b59bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b59c0:	f10d 0107 	add.w	r1, sp, #7
   b59c4:	47a0      	blx	r4
}
   b59c6:	b002      	add	sp, #8
   b59c8:	bd10      	pop	{r4, pc}

000b59ca <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b59ca:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b59cc:	6803      	ldr	r3, [r0, #0]
   b59ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b59d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b59d4:	46a4      	mov	ip, r4
}
   b59d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b59da:	4760      	bx	ip

000b59dc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b59dc:	b513      	push	{r0, r1, r4, lr}
   b59de:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b59e0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b59e2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b59e6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b59e8:	f10d 0107 	add.w	r1, sp, #7
   b59ec:	2201      	movs	r2, #1
   b59ee:	47a0      	blx	r4
}
   b59f0:	b002      	add	sp, #8
   b59f2:	bd10      	pop	{r4, pc}

000b59f4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b59f4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b59f6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b59f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b59fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5a00:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5a02:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5a04:	d008      	beq.n	b5a18 <_ZN9TCPClient4readEv+0x24>
   b5a06:	6963      	ldr	r3, [r4, #20]
   b5a08:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5a0c:	1c51      	adds	r1, r2, #1
   b5a0e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5a12:	4413      	add	r3, r2
   b5a14:	7918      	ldrb	r0, [r3, #4]
}
   b5a16:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5a18:	6803      	ldr	r3, [r0, #0]
   b5a1a:	691b      	ldr	r3, [r3, #16]
   b5a1c:	4798      	blx	r3
   b5a1e:	2800      	cmp	r0, #0
   b5a20:	d1f1      	bne.n	b5a06 <_ZN9TCPClient4readEv+0x12>
   b5a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5a26:	e7f6      	b.n	b5a16 <_ZN9TCPClient4readEv+0x22>

000b5a28 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5a28:	4770      	bx	lr

000b5a2a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5a2a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5a2c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5a2e:	43c0      	mvns	r0, r0
   b5a30:	0fc0      	lsrs	r0, r0, #31
   b5a32:	4770      	bx	lr

000b5a34 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a34:	4770      	bx	lr
	...

000b5a38 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5a38:	4b06      	ldr	r3, [pc, #24]	; (b5a54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5a3a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5a3c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5a3e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5a42:	d005      	beq.n	b5a50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5a44:	4608      	mov	r0, r1
   b5a46:	f001 fbc3 	bl	b71d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5a4a:	2800      	cmp	r0, #0
   b5a4c:	bf08      	it	eq
   b5a4e:	2400      	moveq	r4, #0
      }
   b5a50:	4620      	mov	r0, r4
   b5a52:	bd10      	pop	{r4, pc}
   b5a54:	000ba2e0 	.word	0x000ba2e0

000b5a58 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a58:	b510      	push	{r4, lr}
   b5a5a:	21ac      	movs	r1, #172	; 0xac
   b5a5c:	4604      	mov	r4, r0
   b5a5e:	f7fe fb1e 	bl	b409e <_ZdlPvj>
   b5a62:	4620      	mov	r0, r4
   b5a64:	bd10      	pop	{r4, pc}

000b5a66 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5a66:	21ac      	movs	r1, #172	; 0xac
   b5a68:	f7fe bb19 	b.w	b409e <_ZdlPvj>

000b5a6c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b5a70:	f04f 0800 	mov.w	r8, #0
   b5a74:	b086      	sub	sp, #24
   b5a76:	461c      	mov	r4, r3
   b5a78:	f8c0 8004 	str.w	r8, [r0, #4]
   b5a7c:	4605      	mov	r5, r0
   b5a7e:	460e      	mov	r6, r1
   b5a80:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5a82:	4641      	mov	r1, r8
   b5a84:	2210      	movs	r2, #16
   b5a86:	a802      	add	r0, sp, #8
   b5a88:	f002 f9b3 	bl	b7df2 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5a8c:	1c63      	adds	r3, r4, #1
   b5a8e:	d009      	beq.n	b5aa4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a94:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5a98:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5a9c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5aa0:	435c      	muls	r4, r3
   b5aa2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5aa4:	6968      	ldr	r0, [r5, #20]
   b5aa6:	2310      	movs	r3, #16
   b5aa8:	9300      	str	r3, [sp, #0]
   b5aaa:	6800      	ldr	r0, [r0, #0]
   b5aac:	ab02      	add	r3, sp, #8
   b5aae:	f241 0205 	movw	r2, #4101	; 0x1005
   b5ab2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5ab6:	f7ff fc47 	bl	b5348 <sock_setsockopt>
    if (ret < 0) {
   b5aba:	2800      	cmp	r0, #0
   b5abc:	da07      	bge.n	b5ace <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5abe:	f7ff fe9b 	bl	b57f8 <__errno>
   b5ac2:	6803      	ldr	r3, [r0, #0]
   b5ac4:	606b      	str	r3, [r5, #4]
        return 0;
   b5ac6:	2000      	movs	r0, #0
}
   b5ac8:	b006      	add	sp, #24
   b5aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5ace:	6968      	ldr	r0, [r5, #20]
   b5ad0:	2300      	movs	r3, #0
   b5ad2:	6800      	ldr	r0, [r0, #0]
   b5ad4:	463a      	mov	r2, r7
   b5ad6:	4631      	mov	r1, r6
   b5ad8:	f7ff fc56 	bl	b5388 <sock_send>
    if (ret < 0) {
   b5adc:	1e03      	subs	r3, r0, #0
   b5ade:	dbee      	blt.n	b5abe <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5ae0:	4618      	mov	r0, r3
   b5ae2:	e7f1      	b.n	b5ac8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5ae4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5ae4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b5ae6:	6984      	ldr	r4, [r0, #24]
   b5ae8:	4b0a      	ldr	r3, [pc, #40]	; (b5b14 <_ZN9TCPClientD1Ev+0x30>)
   b5aea:	6003      	str	r3, [r0, #0]
   b5aec:	4605      	mov	r5, r0
   b5aee:	b17c      	cbz	r4, b5b10 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5af0:	6863      	ldr	r3, [r4, #4]
   b5af2:	3b01      	subs	r3, #1
   b5af4:	6063      	str	r3, [r4, #4]
   b5af6:	b95b      	cbnz	r3, b5b10 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5af8:	6823      	ldr	r3, [r4, #0]
   b5afa:	4620      	mov	r0, r4
   b5afc:	689b      	ldr	r3, [r3, #8]
   b5afe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5b00:	68a3      	ldr	r3, [r4, #8]
   b5b02:	3b01      	subs	r3, #1
   b5b04:	60a3      	str	r3, [r4, #8]
   b5b06:	b91b      	cbnz	r3, b5b10 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b5b08:	6823      	ldr	r3, [r4, #0]
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	68db      	ldr	r3, [r3, #12]
   b5b0e:	4798      	blx	r3
   b5b10:	4628      	mov	r0, r5
   b5b12:	bd38      	pop	{r3, r4, r5, pc}
   b5b14:	000ba2f0 	.word	0x000ba2f0

000b5b18 <_ZN9TCPClientD0Ev>:
   b5b18:	b510      	push	{r4, lr}
   b5b1a:	4604      	mov	r4, r0
   b5b1c:	f7ff ffe2 	bl	b5ae4 <_ZN9TCPClientD1Ev>
   b5b20:	4620      	mov	r0, r4
   b5b22:	211c      	movs	r1, #28
   b5b24:	f7fe fabb 	bl	b409e <_ZdlPvj>
   b5b28:	4620      	mov	r0, r4
   b5b2a:	bd10      	pop	{r4, pc}

000b5b2c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5b2c:	b530      	push	{r4, r5, lr}
   b5b2e:	b087      	sub	sp, #28
   b5b30:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5b32:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5b34:	4668      	mov	r0, sp
   b5b36:	f000 fc2f 	bl	b6398 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b3c:	3404      	adds	r4, #4
   b5b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b40:	682b      	ldr	r3, [r5, #0]
   b5b42:	7023      	strb	r3, [r4, #0]
    }
   b5b44:	b007      	add	sp, #28
   b5b46:	bd30      	pop	{r4, r5, pc}

000b5b48 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5b48:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5b4a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5b4c:	4b05      	ldr	r3, [pc, #20]	; (b5b64 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5b4e:	4604      	mov	r4, r0
   b5b50:	358c      	adds	r5, #140	; 0x8c
   b5b52:	f844 3b04 	str.w	r3, [r4], #4
   b5b56:	4606      	mov	r6, r0
   b5b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b5c:	682b      	ldr	r3, [r5, #0]
   b5b5e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5b60:	4630      	mov	r0, r6
   b5b62:	bd70      	pop	{r4, r5, r6, pc}
   b5b64:	000ba400 	.word	0x000ba400

000b5b68 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5b6c:	4698      	mov	r8, r3
    stop();
   b5b6e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5b70:	b093      	sub	sp, #76	; 0x4c
   b5b72:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5b74:	2400      	movs	r4, #0
    stop();
   b5b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5b78:	4606      	mov	r6, r0
   b5b7a:	4617      	mov	r7, r2
    stop();
   b5b7c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5b7e:	4628      	mov	r0, r5
   b5b80:	466b      	mov	r3, sp
   b5b82:	4622      	mov	r2, r4
   b5b84:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5b86:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5b88:	f7ff fcbe 	bl	b5508 <netdb_getaddrinfo>
   b5b8c:	4605      	mov	r5, r0
   b5b8e:	2800      	cmp	r0, #0
   b5b90:	d163      	bne.n	b5c5a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5b92:	9b00      	ldr	r3, [sp, #0]
   b5b94:	2b00      	cmp	r3, #0
   b5b96:	d04b      	beq.n	b5c30 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5b98:	695b      	ldr	r3, [r3, #20]
   b5b9a:	2b00      	cmp	r3, #0
   b5b9c:	d048      	beq.n	b5c30 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5b9e:	a806      	add	r0, sp, #24
   b5ba0:	f000 fbb6 	bl	b6310 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5ba4:	9b00      	ldr	r3, [sp, #0]
   b5ba6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5ba8:	7863      	ldrb	r3, [r4, #1]
   b5baa:	2b02      	cmp	r3, #2
   b5bac:	d104      	bne.n	b5bb8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5bae:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5bb0:	a806      	add	r0, sp, #24
   b5bb2:	f7ff ffbb 	bl	b5b2c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5bb6:	e026      	b.n	b5c06 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5bb8:	2b0a      	cmp	r3, #10
   b5bba:	d124      	bne.n	b5c06 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5bbc:	2211      	movs	r2, #17
   b5bbe:	4629      	mov	r1, r5
   b5bc0:	a801      	add	r0, sp, #4
   b5bc2:	f002 f916 	bl	b7df2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5bc6:	68a3      	ldr	r3, [r4, #8]
   b5bc8:	2b00      	cmp	r3, #0
   b5bca:	d038      	beq.n	b5c3e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5bcc:	f104 0308 	add.w	r3, r4, #8
   b5bd0:	f10d 0c04 	add.w	ip, sp, #4
   b5bd4:	3418      	adds	r4, #24
   b5bd6:	6818      	ldr	r0, [r3, #0]
   b5bd8:	6859      	ldr	r1, [r3, #4]
   b5bda:	4662      	mov	r2, ip
   b5bdc:	c203      	stmia	r2!, {r0, r1}
   b5bde:	3308      	adds	r3, #8
   b5be0:	42a3      	cmp	r3, r4
   b5be2:	4694      	mov	ip, r2
   b5be4:	d1f7      	bne.n	b5bd6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5be6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5be8:	a901      	add	r1, sp, #4
   b5bea:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5bec:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5bf0:	f000 fb9c 	bl	b632c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5bf4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5bf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5bfc:	ac07      	add	r4, sp, #28
   b5bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c00:	f8dc 3000 	ldr.w	r3, [ip]
   b5c04:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5c06:	a806      	add	r0, sp, #24
   b5c08:	f000 fba2 	bl	b6350 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5c0c:	b180      	cbz	r0, b5c30 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5c0e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5c10:	ad07      	add	r5, sp, #28
   b5c12:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5c16:	4b12      	ldr	r3, [pc, #72]	; (b5c60 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5c18:	930c      	str	r3, [sp, #48]	; 0x30
   b5c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c1c:	ac0d      	add	r4, sp, #52	; 0x34
   b5c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c20:	682b      	ldr	r3, [r5, #0]
   b5c22:	7023      	strb	r3, [r4, #0]
   b5c24:	463a      	mov	r2, r7
   b5c26:	4643      	mov	r3, r8
   b5c28:	a90c      	add	r1, sp, #48	; 0x30
   b5c2a:	4630      	mov	r0, r6
   b5c2c:	47c8      	blx	r9
   b5c2e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5c30:	9800      	ldr	r0, [sp, #0]
   b5c32:	f7ff fc61 	bl	b54f8 <netdb_freeaddrinfo>
}
   b5c36:	4628      	mov	r0, r5
   b5c38:	b013      	add	sp, #76	; 0x4c
   b5c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5c3e:	68e3      	ldr	r3, [r4, #12]
   b5c40:	2b00      	cmp	r3, #0
   b5c42:	d1c3      	bne.n	b5bcc <_ZN9TCPClient7connectEPKctm+0x64>
   b5c44:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5c48:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5c4c:	f7ff fbfc 	bl	b5448 <inet_htonl>
   b5c50:	4581      	cmp	r9, r0
   b5c52:	d1bb      	bne.n	b5bcc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5c54:	f104 0114 	add.w	r1, r4, #20
   b5c58:	e7aa      	b.n	b5bb0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5c5a:	4625      	mov	r5, r4
   b5c5c:	e7e8      	b.n	b5c30 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5c5e:	bf00      	nop
   b5c60:	000ba400 	.word	0x000ba400

000b5c64 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5c64:	b538      	push	{r3, r4, r5, lr}
   b5c66:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5c68:	681a      	ldr	r2, [r3, #0]
   b5c6a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5c6c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5c6e:	da10      	bge.n	b5c92 <_ZN9TCPClient9connectedEv+0x2e>
   b5c70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c78:	429a      	cmp	r2, r3
   b5c7a:	d10a      	bne.n	b5c92 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5c7c:	6803      	ldr	r3, [r0, #0]
   b5c7e:	691b      	ldr	r3, [r3, #16]
   b5c80:	4798      	blx	r3
        if (!rv) {
   b5c82:	4604      	mov	r4, r0
   b5c84:	b928      	cbnz	r0, b5c92 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5c86:	682b      	ldr	r3, [r5, #0]
   b5c88:	4628      	mov	r0, r5
   b5c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c8c:	4798      	blx	r3
        rv = available();
   b5c8e:	4620      	mov	r0, r4
}
   b5c90:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5c92:	2001      	movs	r0, #1
   b5c94:	e7fc      	b.n	b5c90 <_ZN9TCPClient9connectedEv+0x2c>

000b5c96 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5c96:	b510      	push	{r4, lr}
   b5c98:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5c9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5ca2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5ca4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5ca6:	d005      	beq.n	b5cb4 <_ZN9TCPClient4peekEv+0x1e>
   b5ca8:	6963      	ldr	r3, [r4, #20]
   b5caa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5cae:	4413      	add	r3, r2
   b5cb0:	7918      	ldrb	r0, [r3, #4]
}
   b5cb2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5cb4:	6803      	ldr	r3, [r0, #0]
   b5cb6:	691b      	ldr	r3, [r3, #16]
   b5cb8:	4798      	blx	r3
   b5cba:	2800      	cmp	r0, #0
   b5cbc:	d1f4      	bne.n	b5ca8 <_ZN9TCPClient4peekEv+0x12>
   b5cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5cc2:	e7f6      	b.n	b5cb2 <_ZN9TCPClient4peekEv+0x1c>

000b5cc4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cc6:	6943      	ldr	r3, [r0, #20]
   b5cc8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5cca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5cce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5cd2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5cd4:	4605      	mov	r5, r0
   b5cd6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5cd8:	d016      	beq.n	b5d08 <_ZN9TCPClient4readEPhj+0x44>
   b5cda:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5cdc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5ce0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5ce4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5ce6:	42bc      	cmp	r4, r7
   b5ce8:	bf28      	it	cs
   b5cea:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5cec:	3304      	adds	r3, #4
   b5cee:	4622      	mov	r2, r4
   b5cf0:	4419      	add	r1, r3
   b5cf2:	4630      	mov	r0, r6
   b5cf4:	f002 f86f 	bl	b7dd6 <memcpy>
   b5cf8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5cfa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5cfe:	4423      	add	r3, r4
   b5d00:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5d04:	4620      	mov	r0, r4
   b5d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5d08:	6803      	ldr	r3, [r0, #0]
   b5d0a:	691b      	ldr	r3, [r3, #16]
   b5d0c:	4798      	blx	r3
   b5d0e:	2800      	cmp	r0, #0
   b5d10:	d1e3      	bne.n	b5cda <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5d12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5d16:	e7f5      	b.n	b5d04 <_ZN9TCPClient4readEPhj+0x40>

000b5d18 <_ZN9TCPClient12flush_bufferEv>:
   b5d18:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5d1a:	2300      	movs	r3, #0
   b5d1c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5d20:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5d22:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5d26:	4770      	bx	lr

000b5d28 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d2c:	461f      	mov	r7, r3
    stop();
   b5d2e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5d30:	460c      	mov	r4, r1
    stop();
   b5d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5d34:	b08a      	sub	sp, #40	; 0x28
   b5d36:	4605      	mov	r5, r0
   b5d38:	4616      	mov	r6, r2
    stop();
   b5d3a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5d3c:	7d23      	ldrb	r3, [r4, #20]
   b5d3e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5d42:	2b04      	cmp	r3, #4
   b5d44:	bf0c      	ite	eq
   b5d46:	2002      	moveq	r0, #2
   b5d48:	200a      	movne	r0, #10
   b5d4a:	2206      	movs	r2, #6
   b5d4c:	2101      	movs	r1, #1
   b5d4e:	f7ff fb23 	bl	b5398 <sock_socket>
   b5d52:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5d56:	696b      	ldr	r3, [r5, #20]
   b5d58:	681b      	ldr	r3, [r3, #0]
   b5d5a:	2b00      	cmp	r3, #0
   b5d5c:	da08      	bge.n	b5d70 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5d5e:	682b      	ldr	r3, [r5, #0]
   b5d60:	4628      	mov	r0, r5
   b5d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5d64:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5d66:	4798      	blx	r3
}
   b5d68:	4620      	mov	r0, r4
   b5d6a:	b00a      	add	sp, #40	; 0x28
   b5d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5d70:	4628      	mov	r0, r5
   b5d72:	f7ff ffd1 	bl	b5d18 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5d76:	b1b7      	cbz	r7, b5da6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5d78:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5d7a:	a903      	add	r1, sp, #12
   b5d7c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5d7e:	9303      	str	r3, [sp, #12]
   b5d80:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5d84:	f7ff fba8 	bl	b54d8 <if_index_to_name>
   b5d88:	2800      	cmp	r0, #0
   b5d8a:	d1e8      	bne.n	b5d5e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5d8c:	6968      	ldr	r0, [r5, #20]
   b5d8e:	2306      	movs	r3, #6
   b5d90:	9300      	str	r3, [sp, #0]
   b5d92:	6800      	ldr	r0, [r0, #0]
   b5d94:	ab03      	add	r3, sp, #12
   b5d96:	f241 020b 	movw	r2, #4107	; 0x100b
   b5d9a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5d9e:	f7ff fad3 	bl	b5348 <sock_setsockopt>
   b5da2:	2800      	cmp	r0, #0
   b5da4:	d1db      	bne.n	b5d5e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5da6:	221c      	movs	r2, #28
   b5da8:	2100      	movs	r1, #0
   b5daa:	a803      	add	r0, sp, #12
   b5dac:	f002 f821 	bl	b7df2 <memset>
    if (ip.version() == 4) {
   b5db0:	7d23      	ldrb	r3, [r4, #20]
   b5db2:	2b04      	cmp	r3, #4
   b5db4:	d11d      	bne.n	b5df2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5db6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5dba:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5dbc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5dc0:	f7ff fb4a 	bl	b5458 <inet_htons>
   b5dc4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5dc8:	6860      	ldr	r0, [r4, #4]
   b5dca:	f7ff fb3d 	bl	b5448 <inet_htonl>
   b5dce:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5dd0:	696b      	ldr	r3, [r5, #20]
   b5dd2:	221c      	movs	r2, #28
   b5dd4:	6818      	ldr	r0, [r3, #0]
   b5dd6:	a903      	add	r1, sp, #12
   b5dd8:	f7ff fac6 	bl	b5368 <sock_connect>
   b5ddc:	2800      	cmp	r0, #0
   b5dde:	d1be      	bne.n	b5d5e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5de0:	3404      	adds	r4, #4
   b5de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5de4:	696d      	ldr	r5, [r5, #20]
   b5de6:	358c      	adds	r5, #140	; 0x8c
   b5de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5dea:	6823      	ldr	r3, [r4, #0]
   b5dec:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5dee:	2401      	movs	r4, #1
   b5df0:	e7ba      	b.n	b5d68 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5df2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5df6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5df8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5dfc:	f7ff fb2c 	bl	b5458 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e00:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5e02:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e06:	1d23      	adds	r3, r4, #4
   b5e08:	f104 0714 	add.w	r7, r4, #20
   b5e0c:	6818      	ldr	r0, [r3, #0]
   b5e0e:	6859      	ldr	r1, [r3, #4]
   b5e10:	4632      	mov	r2, r6
   b5e12:	c203      	stmia	r2!, {r0, r1}
   b5e14:	3308      	adds	r3, #8
   b5e16:	42bb      	cmp	r3, r7
   b5e18:	4616      	mov	r6, r2
   b5e1a:	d1f7      	bne.n	b5e0c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5e1c:	e7d8      	b.n	b5dd0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5e20 <_ZN9TCPClient9availableEv>:
{
   b5e20:	b530      	push	{r4, r5, lr}
   b5e22:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5e24:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5e28:	b08b      	sub	sp, #44	; 0x2c
   b5e2a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5e2c:	b12b      	cbz	r3, b5e3a <_ZN9TCPClient9availableEv+0x1a>
   b5e2e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5e32:	429a      	cmp	r2, r3
   b5e34:	d101      	bne.n	b5e3a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5e36:	f7ff ff6f 	bl	b5d18 <_ZN9TCPClient12flush_bufferEv>
   b5e3a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5e3c:	6808      	ldr	r0, [r1, #0]
   b5e3e:	2800      	cmp	r0, #0
   b5e40:	db18      	blt.n	b5e74 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5e42:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5e46:	2d7f      	cmp	r5, #127	; 0x7f
   b5e48:	d814      	bhi.n	b5e74 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5e4a:	3104      	adds	r1, #4
   b5e4c:	2308      	movs	r3, #8
   b5e4e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5e52:	4429      	add	r1, r5
   b5e54:	f7ff fa90 	bl	b5378 <sock_recv>
            if (ret > 0) {
   b5e58:	2800      	cmp	r0, #0
   b5e5a:	dd13      	ble.n	b5e84 <_ZN9TCPClient9availableEv+0x64>
   b5e5c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5e5e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5e62:	b90a      	cbnz	r2, b5e68 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5e64:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5e68:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5e6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5e6e:	4410      	add	r0, r2
   b5e70:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5e74:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5e76:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5e7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5e7e:	1ac0      	subs	r0, r0, r3
   b5e80:	b00b      	add	sp, #44	; 0x2c
   b5e82:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5e84:	f7ff fcb8 	bl	b57f8 <__errno>
   b5e88:	6803      	ldr	r3, [r0, #0]
   b5e8a:	2b0b      	cmp	r3, #11
   b5e8c:	d0f2      	beq.n	b5e74 <_ZN9TCPClient9availableEv+0x54>
   b5e8e:	f7ff fcb3 	bl	b57f8 <__errno>
   b5e92:	6803      	ldr	r3, [r0, #0]
   b5e94:	2b0b      	cmp	r3, #11
   b5e96:	d0ed      	beq.n	b5e74 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5e98:	2320      	movs	r3, #32
   b5e9a:	2500      	movs	r5, #0
   b5e9c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5ea0:	f7ff fcaa 	bl	b57f8 <__errno>
   b5ea4:	6803      	ldr	r3, [r0, #0]
   b5ea6:	9301      	str	r3, [sp, #4]
   b5ea8:	4b08      	ldr	r3, [pc, #32]	; (b5ecc <_ZN9TCPClient9availableEv+0xac>)
   b5eaa:	4909      	ldr	r1, [pc, #36]	; (b5ed0 <_ZN9TCPClient9availableEv+0xb0>)
   b5eac:	9300      	str	r3, [sp, #0]
   b5eae:	aa02      	add	r2, sp, #8
   b5eb0:	462b      	mov	r3, r5
   b5eb2:	2032      	movs	r0, #50	; 0x32
   b5eb4:	f7ff fb50 	bl	b5558 <log_message>
                    sock_close(d_->sock);
   b5eb8:	6963      	ldr	r3, [r4, #20]
   b5eba:	6818      	ldr	r0, [r3, #0]
   b5ebc:	f7ff fa4c 	bl	b5358 <sock_close>
   b5ec0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5ec6:	601a      	str	r2, [r3, #0]
   b5ec8:	e7d4      	b.n	b5e74 <_ZN9TCPClient9availableEv+0x54>
   b5eca:	bf00      	nop
   b5ecc:	000ba2b3 	.word	0x000ba2b3
   b5ed0:	000ba2ac 	.word	0x000ba2ac

000b5ed4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5ed4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5ed6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5ed8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5eda:	6818      	ldr	r0, [r3, #0]
   b5edc:	2800      	cmp	r0, #0
   b5ede:	db01      	blt.n	b5ee4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5ee0:	f7ff fa3a 	bl	b5358 <sock_close>
   b5ee4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5eea:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5eec:	6960      	ldr	r0, [r4, #20]
   b5eee:	2211      	movs	r2, #17
   b5ef0:	2100      	movs	r1, #0
   b5ef2:	308c      	adds	r0, #140	; 0x8c
   b5ef4:	f001 ff7d 	bl	b7df2 <memset>
    flush_buffer();
   b5ef8:	4620      	mov	r0, r4
}
   b5efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5efe:	f7ff bf0b 	b.w	b5d18 <_ZN9TCPClient12flush_bufferEv>

000b5f02 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5f02:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5f04:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5f06:	4604      	mov	r4, r0
          total(0) {
   b5f08:	6001      	str	r1, [r0, #0]
   b5f0a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5f0e:	3088      	adds	r0, #136	; 0x88
   b5f10:	f000 f9fe 	bl	b6310 <_ZN9IPAddressC1Ev>
}
   b5f14:	4620      	mov	r0, r4
   b5f16:	bd10      	pop	{r4, pc}

000b5f18 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5f1a:	2300      	movs	r3, #0
   b5f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5f20:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5f24:	4a0e      	ldr	r2, [pc, #56]	; (b5f60 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5f26:	6103      	str	r3, [r0, #16]
   b5f28:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5f2a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5f2c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5f2e:	20ac      	movs	r0, #172	; 0xac
   b5f30:	9101      	str	r1, [sp, #4]
   b5f32:	f7fe f8b0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b5f36:	1e05      	subs	r5, r0, #0
   b5f38:	f105 060c 	add.w	r6, r5, #12
   b5f3c:	d008      	beq.n	b5f50 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5f3e:	2301      	movs	r3, #1
   b5f40:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5f44:	4b07      	ldr	r3, [pc, #28]	; (b5f64 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5f46:	9901      	ldr	r1, [sp, #4]
   b5f48:	602b      	str	r3, [r5, #0]
   b5f4a:	4630      	mov	r0, r6
   b5f4c:	f7ff ffd9 	bl	b5f02 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5f50:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5f52:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5f56:	f7ff fedf 	bl	b5d18 <_ZN9TCPClient12flush_bufferEv>
}
   b5f5a:	b002      	add	sp, #8
   b5f5c:	bd70      	pop	{r4, r5, r6, pc}
   b5f5e:	bf00      	nop
   b5f60:	000ba2f0 	.word	0x000ba2f0
   b5f64:	000ba2cc 	.word	0x000ba2cc

000b5f68 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5f68:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5f6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5f6e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5f70:	f7ff ffd2 	bl	b5f18 <_ZN9TCPClientC1Ei>
}
   b5f74:	4620      	mov	r0, r4
   b5f76:	bd10      	pop	{r4, pc}

000b5f78 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5f78:	b510      	push	{r4, lr}
   b5f7a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5f7c:	6800      	ldr	r0, [r0, #0]
   b5f7e:	2800      	cmp	r0, #0
   b5f80:	db01      	blt.n	b5f86 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5f82:	f7ff f9e9 	bl	b5358 <sock_close>
    }
}
   b5f86:	4620      	mov	r0, r4
   b5f88:	bd10      	pop	{r4, pc}

000b5f8a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5f8a:	300c      	adds	r0, #12
   b5f8c:	f7ff bff4 	b.w	b5f78 <_ZN9TCPClient4DataD1Ev>

000b5f90 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5f90:	b510      	push	{r4, lr}
   b5f92:	4604      	mov	r4, r0
   b5f94:	4608      	mov	r0, r1
{
    _spi = spi;
   b5f96:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5f98:	f7ff f9c6 	bl	b5328 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5f9c:	2300      	movs	r3, #0
   b5f9e:	6063      	str	r3, [r4, #4]
}
   b5fa0:	4620      	mov	r0, r4
   b5fa2:	bd10      	pop	{r4, pc}

000b5fa4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5fa4:	4770      	bx	lr

000b5fa6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5fa8:	4606      	mov	r6, r0
   b5faa:	4615      	mov	r5, r2
   b5fac:	460c      	mov	r4, r1
   b5fae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5fb0:	42bc      	cmp	r4, r7
   b5fb2:	d006      	beq.n	b5fc2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5fb4:	6833      	ldr	r3, [r6, #0]
   b5fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5fba:	689b      	ldr	r3, [r3, #8]
   b5fbc:	4630      	mov	r0, r6
   b5fbe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5fc0:	e7f6      	b.n	b5fb0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5fc2:	4628      	mov	r0, r5
   b5fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fc6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5fc6:	7c00      	ldrb	r0, [r0, #16]
   b5fc8:	2200      	movs	r2, #0
   b5fca:	f7ff b975 	b.w	b52b8 <hal_i2c_write>

000b5fce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5fce:	7c00      	ldrb	r0, [r0, #16]
   b5fd0:	2100      	movs	r1, #0
   b5fd2:	f7ff b979 	b.w	b52c8 <hal_i2c_available>

000b5fd6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5fd6:	7c00      	ldrb	r0, [r0, #16]
   b5fd8:	2100      	movs	r1, #0
   b5fda:	f7ff b97d 	b.w	b52d8 <hal_i2c_read>

000b5fde <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5fde:	7c00      	ldrb	r0, [r0, #16]
   b5fe0:	2100      	movs	r1, #0
   b5fe2:	f7ff b981 	b.w	b52e8 <hal_i2c_peek>

000b5fe6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5fe6:	7c00      	ldrb	r0, [r0, #16]
   b5fe8:	2100      	movs	r1, #0
   b5fea:	f7ff b985 	b.w	b52f8 <hal_i2c_flush>

000b5fee <_ZN7TwoWireD0Ev>:
   b5fee:	b510      	push	{r4, lr}
   b5ff0:	2114      	movs	r1, #20
   b5ff2:	4604      	mov	r4, r0
   b5ff4:	f7fe f853 	bl	b409e <_ZdlPvj>
   b5ff8:	4620      	mov	r0, r4
   b5ffa:	bd10      	pop	{r4, pc}

000b5ffc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5ffc:	b510      	push	{r4, lr}
   b5ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6002:	4604      	mov	r4, r0
   b6004:	4608      	mov	r0, r1
   b6006:	2100      	movs	r1, #0
   b6008:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b600c:	4b03      	ldr	r3, [pc, #12]	; (b601c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b600e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6010:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6012:	4611      	mov	r1, r2
   b6014:	f7ff f980 	bl	b5318 <hal_i2c_init>
}
   b6018:	4620      	mov	r0, r4
   b601a:	bd10      	pop	{r4, pc}
   b601c:	000ba33c 	.word	0x000ba33c

000b6020 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6020:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6022:	6883      	ldr	r3, [r0, #8]
   b6024:	4604      	mov	r4, r0
   b6026:	b90b      	cbnz	r3, b602c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6028:	f001 f8cf 	bl	b71ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b602c:	68c3      	ldr	r3, [r0, #12]
   b602e:	4798      	blx	r3
      if (_M_manager)
   b6030:	68a3      	ldr	r3, [r4, #8]
   b6032:	b11b      	cbz	r3, b603c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6034:	2203      	movs	r2, #3
   b6036:	4621      	mov	r1, r4
   b6038:	4620      	mov	r0, r4
   b603a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b603c:	4620      	mov	r0, r4
   b603e:	2110      	movs	r1, #16
}
   b6040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6044:	f7fe b82b 	b.w	b409e <_ZdlPvj>

000b6048 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6048:	4770      	bx	lr

000b604a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b604a:	7441      	strb	r1, [r0, #17]
}
   b604c:	4770      	bx	lr

000b604e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b604e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6050:	7c00      	ldrb	r0, [r0, #16]
   b6052:	f7ff f9d9 	bl	b5408 <hal_usart_available_data_for_write>
}
   b6056:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b605a:	bd08      	pop	{r3, pc}

000b605c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b605c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b605e:	7c00      	ldrb	r0, [r0, #16]
   b6060:	f7ff f9aa 	bl	b53b8 <hal_usart_available>
}
   b6064:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6068:	bd08      	pop	{r3, pc}

000b606a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b606a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b606c:	7c00      	ldrb	r0, [r0, #16]
   b606e:	f7ff f9b3 	bl	b53d8 <hal_usart_peek>
}
   b6072:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6076:	bd08      	pop	{r3, pc}

000b6078 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6078:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b607a:	7c00      	ldrb	r0, [r0, #16]
   b607c:	f7ff f9a4 	bl	b53c8 <hal_usart_read>
}
   b6080:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6084:	bd08      	pop	{r3, pc}

000b6086 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6086:	7c00      	ldrb	r0, [r0, #16]
   b6088:	f7ff b9ae 	b.w	b53e8 <hal_usart_flush>

000b608c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b608c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b608e:	7c45      	ldrb	r5, [r0, #17]
{
   b6090:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6092:	b12d      	cbz	r5, b60a0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6094:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6096:	b003      	add	sp, #12
   b6098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b609c:	f7ff b984 	b.w	b53a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b60a0:	7c00      	ldrb	r0, [r0, #16]
   b60a2:	9101      	str	r1, [sp, #4]
   b60a4:	f7ff f9b0 	bl	b5408 <hal_usart_available_data_for_write>
   b60a8:	2800      	cmp	r0, #0
   b60aa:	9901      	ldr	r1, [sp, #4]
   b60ac:	dcf2      	bgt.n	b6094 <_ZN11USARTSerial5writeEh+0x8>
}
   b60ae:	4628      	mov	r0, r5
   b60b0:	b003      	add	sp, #12
   b60b2:	bd30      	pop	{r4, r5, pc}

000b60b4 <_ZN11USARTSerialD0Ev>:
   b60b4:	b510      	push	{r4, lr}
   b60b6:	2114      	movs	r1, #20
   b60b8:	4604      	mov	r4, r0
   b60ba:	f7fd fff0 	bl	b409e <_ZdlPvj>
   b60be:	4620      	mov	r0, r4
   b60c0:	bd10      	pop	{r4, pc}
	...

000b60c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b60c4:	b510      	push	{r4, lr}
   b60c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b60ca:	4604      	mov	r4, r0
   b60cc:	4608      	mov	r0, r1
   b60ce:	4611      	mov	r1, r2
   b60d0:	2200      	movs	r2, #0
   b60d2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b60d6:	4b04      	ldr	r3, [pc, #16]	; (b60e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b60d8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b60da:	2301      	movs	r3, #1
  _serial = serial;
   b60dc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b60de:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b60e0:	f7ff f9a2 	bl	b5428 <hal_usart_init_ex>
}
   b60e4:	4620      	mov	r0, r4
   b60e6:	bd10      	pop	{r4, pc}
   b60e8:	000ba364 	.word	0x000ba364

000b60ec <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b60ec:	7c00      	ldrb	r0, [r0, #16]
   b60ee:	2300      	movs	r3, #0
   b60f0:	f7ff b992 	b.w	b5418 <hal_usart_begin_config>

000b60f4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b60f4:	2200      	movs	r2, #0
   b60f6:	f7ff bff9 	b.w	b60ec <_ZN11USARTSerial5beginEmm>

000b60fa <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b60fa:	2200      	movs	r2, #0
   b60fc:	6840      	ldr	r0, [r0, #4]
   b60fe:	4611      	mov	r1, r2
   b6100:	f7ff baa4 	b.w	b564c <network_ready>

000b6104 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6104:	2200      	movs	r2, #0
   b6106:	6840      	ldr	r0, [r0, #4]
   b6108:	4611      	mov	r1, r2
   b610a:	f7ff babf 	b.w	b568c <network_listening>

000b610e <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b610e:	2200      	movs	r2, #0
   b6110:	6840      	ldr	r0, [r0, #4]
   b6112:	4611      	mov	r1, r2
   b6114:	f7ff baca 	b.w	b56ac <network_get_listen_timeout>

000b6118 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6118:	6840      	ldr	r0, [r0, #4]
   b611a:	2200      	movs	r2, #0
   b611c:	f7ff babe 	b.w	b569c <network_set_listen_timeout>

000b6120 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6120:	6840      	ldr	r0, [r0, #4]
   b6122:	2200      	movs	r2, #0
   b6124:	f081 0101 	eor.w	r1, r1, #1
   b6128:	f7ff baa8 	b.w	b567c <network_listen>

000b612c <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b612c:	2300      	movs	r3, #0
   b612e:	6840      	ldr	r0, [r0, #4]
   b6130:	461a      	mov	r2, r3
   b6132:	4619      	mov	r1, r3
   b6134:	f7ff ba9a 	b.w	b566c <network_off>

000b6138 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6138:	2300      	movs	r3, #0
   b613a:	6840      	ldr	r0, [r0, #4]
   b613c:	461a      	mov	r2, r3
   b613e:	4619      	mov	r1, r3
   b6140:	f7ff ba8c 	b.w	b565c <network_on>

000b6144 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6144:	2200      	movs	r2, #0
   b6146:	6840      	ldr	r0, [r0, #4]
   b6148:	4611      	mov	r1, r2
   b614a:	f7ff ba6f 	b.w	b562c <network_connecting>

000b614e <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b614e:	6840      	ldr	r0, [r0, #4]
   b6150:	2200      	movs	r2, #0
   b6152:	2102      	movs	r1, #2
   b6154:	f7ff ba72 	b.w	b563c <network_disconnect>

000b6158 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6158:	2300      	movs	r3, #0
   b615a:	6840      	ldr	r0, [r0, #4]
   b615c:	461a      	mov	r2, r3
   b615e:	f7ff ba5d 	b.w	b561c <network_connect>
	...

000b6164 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6164:	4b08      	ldr	r3, [pc, #32]	; (b6188 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6166:	b510      	push	{r4, lr}
   b6168:	2428      	movs	r4, #40	; 0x28
   b616a:	4622      	mov	r2, r4
   b616c:	4618      	mov	r0, r3
   b616e:	2100      	movs	r1, #0
   b6170:	f001 fe3f 	bl	b7df2 <memset>
   b6174:	4b05      	ldr	r3, [pc, #20]	; (b618c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6176:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b617c:	6042      	str	r2, [r0, #4]
   b617e:	2204      	movs	r2, #4
   b6180:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b6182:	4a03      	ldr	r2, [pc, #12]	; (b6190 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6184:	601a      	str	r2, [r3, #0]
   b6186:	bd10      	pop	{r4, pc}
   b6188:	2003e65c 	.word	0x2003e65c
   b618c:	2003e654 	.word	0x2003e654
   b6190:	000ba394 	.word	0x000ba394

000b6194 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6194:	7441      	strb	r1, [r0, #17]
}
   b6196:	4770      	bx	lr

000b6198 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6198:	4770      	bx	lr

000b619a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b619a:	4770      	bx	lr

000b619c <_ZN9USBSerial4readEv>:
{
   b619c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b619e:	2100      	movs	r1, #0
   b61a0:	7c00      	ldrb	r0, [r0, #16]
   b61a2:	f7ff f871 	bl	b5288 <HAL_USB_USART_Receive_Data>
}
   b61a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b61aa:	bd08      	pop	{r3, pc}

000b61ac <_ZN9USBSerial4peekEv>:
{
   b61ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b61ae:	2101      	movs	r1, #1
   b61b0:	7c00      	ldrb	r0, [r0, #16]
   b61b2:	f7ff f869 	bl	b5288 <HAL_USB_USART_Receive_Data>
}
   b61b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b61ba:	bd08      	pop	{r3, pc}

000b61bc <_ZN9USBSerial17availableForWriteEv>:
{
   b61bc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b61be:	7c00      	ldrb	r0, [r0, #16]
   b61c0:	f7ff f85a 	bl	b5278 <HAL_USB_USART_Available_Data_For_Write>
}
   b61c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b61c8:	bd08      	pop	{r3, pc}

000b61ca <_ZN9USBSerial9availableEv>:
{
   b61ca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b61cc:	7c00      	ldrb	r0, [r0, #16]
   b61ce:	f7ff f84b 	bl	b5268 <HAL_USB_USART_Available_Data>
}
   b61d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b61d6:	bd08      	pop	{r3, pc}

000b61d8 <_ZN9USBSerial5writeEh>:
{
   b61d8:	b513      	push	{r0, r1, r4, lr}
   b61da:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61dc:	7c00      	ldrb	r0, [r0, #16]
{
   b61de:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61e0:	f7ff f84a 	bl	b5278 <HAL_USB_USART_Available_Data_For_Write>
   b61e4:	2800      	cmp	r0, #0
   b61e6:	9901      	ldr	r1, [sp, #4]
   b61e8:	dc01      	bgt.n	b61ee <_ZN9USBSerial5writeEh+0x16>
   b61ea:	7c60      	ldrb	r0, [r4, #17]
   b61ec:	b120      	cbz	r0, b61f8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b61ee:	7c20      	ldrb	r0, [r4, #16]
   b61f0:	f7ff f852 	bl	b5298 <HAL_USB_USART_Send_Data>
   b61f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b61f8:	b002      	add	sp, #8
   b61fa:	bd10      	pop	{r4, pc}

000b61fc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b61fc:	7c00      	ldrb	r0, [r0, #16]
   b61fe:	f7ff b853 	b.w	b52a8 <HAL_USB_USART_Flush_Data>

000b6202 <_ZN9USBSerialD0Ev>:
   b6202:	b510      	push	{r4, lr}
   b6204:	2114      	movs	r1, #20
   b6206:	4604      	mov	r4, r0
   b6208:	f7fd ff49 	bl	b409e <_ZdlPvj>
   b620c:	4620      	mov	r0, r4
   b620e:	bd10      	pop	{r4, pc}

000b6210 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6210:	b510      	push	{r4, lr}
   b6212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6216:	4604      	mov	r4, r0
   b6218:	4608      	mov	r0, r1
   b621a:	2100      	movs	r1, #0
   b621c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6220:	4b04      	ldr	r3, [pc, #16]	; (b6234 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6222:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6224:	2301      	movs	r3, #1
  _serial = serial;
   b6226:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6228:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b622a:	4611      	mov	r1, r2
   b622c:	f7ff f80c 	bl	b5248 <HAL_USB_USART_Init>
}
   b6230:	4620      	mov	r0, r4
   b6232:	bd10      	pop	{r4, pc}
   b6234:	000ba3d0 	.word	0x000ba3d0

000b6238 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6238:	7c00      	ldrb	r0, [r0, #16]
   b623a:	2200      	movs	r2, #0
   b623c:	f7ff b80c 	b.w	b5258 <HAL_USB_USART_Begin>

000b6240 <_Z19acquireSerialBufferv>:
{
   b6240:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6242:	2214      	movs	r2, #20
{
   b6244:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6246:	2100      	movs	r1, #0
   b6248:	f001 fdd3 	bl	b7df2 <memset>
}
   b624c:	4620      	mov	r0, r4
   b624e:	bd10      	pop	{r4, pc}

000b6250 <_Z16_fetch_usbserialv>:
{
   b6250:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6252:	4c0f      	ldr	r4, [pc, #60]	; (b6290 <_Z16_fetch_usbserialv+0x40>)
{
   b6254:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6256:	a803      	add	r0, sp, #12
   b6258:	f7ff fff2 	bl	b6240 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b625c:	7821      	ldrb	r1, [r4, #0]
   b625e:	f3bf 8f5b 	dmb	ish
   b6262:	f011 0101 	ands.w	r1, r1, #1
   b6266:	d10f      	bne.n	b6288 <_Z16_fetch_usbserialv+0x38>
   b6268:	4620      	mov	r0, r4
   b626a:	9101      	str	r1, [sp, #4]
   b626c:	f7fd ff19 	bl	b40a2 <__cxa_guard_acquire>
   b6270:	9901      	ldr	r1, [sp, #4]
   b6272:	b148      	cbz	r0, b6288 <_Z16_fetch_usbserialv+0x38>
   b6274:	aa03      	add	r2, sp, #12
   b6276:	4807      	ldr	r0, [pc, #28]	; (b6294 <_Z16_fetch_usbserialv+0x44>)
   b6278:	f7ff ffca 	bl	b6210 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b627c:	4620      	mov	r0, r4
   b627e:	f7fd ff15 	bl	b40ac <__cxa_guard_release>
   b6282:	4805      	ldr	r0, [pc, #20]	; (b6298 <_Z16_fetch_usbserialv+0x48>)
   b6284:	f001 fd9a 	bl	b7dbc <atexit>
	return _usbserial;
}
   b6288:	4802      	ldr	r0, [pc, #8]	; (b6294 <_Z16_fetch_usbserialv+0x44>)
   b628a:	b008      	add	sp, #32
   b628c:	bd10      	pop	{r4, pc}
   b628e:	bf00      	nop
   b6290:	2003e684 	.word	0x2003e684
   b6294:	2003e688 	.word	0x2003e688
   b6298:	000b6199 	.word	0x000b6199

000b629c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b629c:	4770      	bx	lr

000b629e <_ZN9IPAddressD0Ev>:
   b629e:	b510      	push	{r4, lr}
   b62a0:	2118      	movs	r1, #24
   b62a2:	4604      	mov	r4, r0
   b62a4:	f7fd fefb 	bl	b409e <_ZdlPvj>
   b62a8:	4620      	mov	r0, r4
   b62aa:	bd10      	pop	{r4, pc}

000b62ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b62ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b62ae:	7d03      	ldrb	r3, [r0, #20]
   b62b0:	2b06      	cmp	r3, #6
{
   b62b2:	b08d      	sub	sp, #52	; 0x34
   b62b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62b6:	f100 0704 	add.w	r7, r0, #4
   b62ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b62be:	d012      	beq.n	b62e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b62c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b62c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b62c8:	220a      	movs	r2, #10
   b62ca:	4630      	mov	r0, r6
   b62cc:	f000 fd1d 	bl	b6d0a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b62d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b62d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b62d4:	d019      	beq.n	b630a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b62d6:	2c00      	cmp	r4, #0
   b62d8:	d0f4      	beq.n	b62c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b62da:	212e      	movs	r1, #46	; 0x2e
   b62dc:	4630      	mov	r0, r6
   b62de:	f000 fcfb 	bl	b6cd8 <_ZN5Print5printEc>
   b62e2:	4404      	add	r4, r0
   b62e4:	e7ee      	b.n	b62c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62e6:	232f      	movs	r3, #47	; 0x2f
   b62e8:	466a      	mov	r2, sp
   b62ea:	4639      	mov	r1, r7
   b62ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b62ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62f2:	f7ff f8a1 	bl	b5438 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b62f6:	4668      	mov	r0, sp
   b62f8:	f001 fde1 	bl	b7ebe <strlen>
   b62fc:	6833      	ldr	r3, [r6, #0]
   b62fe:	4602      	mov	r2, r0
   b6300:	68db      	ldr	r3, [r3, #12]
   b6302:	4669      	mov	r1, sp
   b6304:	4630      	mov	r0, r6
   b6306:	4798      	blx	r3
   b6308:	4604      	mov	r4, r0
    }
    return n;
}
   b630a:	4620      	mov	r0, r4
   b630c:	b00d      	add	sp, #52	; 0x34
   b630e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6310 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6310:	b510      	push	{r4, lr}
   b6312:	4b05      	ldr	r3, [pc, #20]	; (b6328 <_ZN9IPAddressC1Ev+0x18>)
   b6314:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b6316:	2211      	movs	r2, #17
   b6318:	f840 3b04 	str.w	r3, [r0], #4
   b631c:	2100      	movs	r1, #0
   b631e:	f001 fd68 	bl	b7df2 <memset>
}
   b6322:	4620      	mov	r0, r4
   b6324:	bd10      	pop	{r4, pc}
   b6326:	bf00      	nop
   b6328:	000ba400 	.word	0x000ba400

000b632c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b632c:	4603      	mov	r3, r0
   b632e:	4a07      	ldr	r2, [pc, #28]	; (b634c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6330:	b510      	push	{r4, lr}
   b6332:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6336:	f101 0210 	add.w	r2, r1, #16
   b633a:	f851 4b04 	ldr.w	r4, [r1], #4
   b633e:	f843 4b04 	str.w	r4, [r3], #4
   b6342:	4291      	cmp	r1, r2
   b6344:	d1f9      	bne.n	b633a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6346:	780a      	ldrb	r2, [r1, #0]
   b6348:	701a      	strb	r2, [r3, #0]
}
   b634a:	bd10      	pop	{r4, pc}
   b634c:	000ba400 	.word	0x000ba400

000b6350 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6350:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6352:	2b04      	cmp	r3, #4
   b6354:	d104      	bne.n	b6360 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6356:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6358:	3800      	subs	r0, #0
   b635a:	bf18      	it	ne
   b635c:	2001      	movne	r0, #1
   b635e:	4770      	bx	lr
    } else if (version() == 6) {
   b6360:	2b06      	cmp	r3, #6
   b6362:	d107      	bne.n	b6374 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6364:	6843      	ldr	r3, [r0, #4]
   b6366:	b93b      	cbnz	r3, b6378 <_ZNK9IPAddresscvbEv+0x28>
   b6368:	6883      	ldr	r3, [r0, #8]
   b636a:	b92b      	cbnz	r3, b6378 <_ZNK9IPAddresscvbEv+0x28>
   b636c:	68c3      	ldr	r3, [r0, #12]
   b636e:	b91b      	cbnz	r3, b6378 <_ZNK9IPAddresscvbEv+0x28>
   b6370:	6900      	ldr	r0, [r0, #16]
   b6372:	e7f1      	b.n	b6358 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6374:	2000      	movs	r0, #0
   b6376:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6378:	2001      	movs	r0, #1
}
   b637a:	4770      	bx	lr

000b637c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b637c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b637e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6382:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6386:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b638a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b638e:	2304      	movs	r3, #4
   b6390:	6041      	str	r1, [r0, #4]
   b6392:	7503      	strb	r3, [r0, #20]
}
   b6394:	bd10      	pop	{r4, pc}
	...

000b6398 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6398:	b507      	push	{r0, r1, r2, lr}
   b639a:	4b06      	ldr	r3, [pc, #24]	; (b63b4 <_ZN9IPAddressC1EPKh+0x1c>)
   b639c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b639e:	78cb      	ldrb	r3, [r1, #3]
   b63a0:	9300      	str	r3, [sp, #0]
   b63a2:	788b      	ldrb	r3, [r1, #2]
   b63a4:	784a      	ldrb	r2, [r1, #1]
   b63a6:	7809      	ldrb	r1, [r1, #0]
   b63a8:	f7ff ffe8 	bl	b637c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63ac:	b003      	add	sp, #12
   b63ae:	f85d fb04 	ldr.w	pc, [sp], #4
   b63b2:	bf00      	nop
   b63b4:	000ba400 	.word	0x000ba400

000b63b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b63b8:	4770      	bx	lr

000b63ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b63ba:	2000      	movs	r0, #0
   b63bc:	4770      	bx	lr

000b63be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b63be:	b510      	push	{r4, lr}
   b63c0:	2110      	movs	r1, #16
   b63c2:	4604      	mov	r4, r0
   b63c4:	f7fd fe6b 	bl	b409e <_ZdlPvj>
   b63c8:	4620      	mov	r0, r4
   b63ca:	bd10      	pop	{r4, pc}

000b63cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b63cc:	b508      	push	{r3, lr}
      { delete this; }
   b63ce:	f7ff fff6 	bl	b63be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b63d2:	bd08      	pop	{r3, pc}

000b63d4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b63d4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b63d6:	2200      	movs	r2, #0
   b63d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b63dc:	6002      	str	r2, [r0, #0]
   b63de:	8084      	strh	r4, [r0, #4]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b63e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b63e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b63e4:	680c      	ldr	r4, [r1, #0]
   b63e6:	8085      	strh	r5, [r0, #4]
   b63e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b63ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b63ec:	bd30      	pop	{r4, r5, pc}

000b63ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b63ee:	b510      	push	{r4, lr}
   b63f0:	4604      	mov	r4, r0
    free((void*)msg_);
   b63f2:	6800      	ldr	r0, [r0, #0]
   b63f4:	f7ff f9c8 	bl	b5788 <free>
}
   b63f8:	4620      	mov	r0, r4
   b63fa:	bd10      	pop	{r4, pc}

000b63fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b63fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b63fe:	68c4      	ldr	r4, [r0, #12]
   b6400:	b1f4      	cbz	r4, b6440 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6402:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6404:	2b02      	cmp	r3, #2
   b6406:	d103      	bne.n	b6410 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6408:	f104 000c 	add.w	r0, r4, #12
   b640c:	f7ff ffef 	bl	b63ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6410:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6412:	b135      	cbz	r5, b6422 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6414:	4628      	mov	r0, r5
   b6416:	f7ff fa0f 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
   b641a:	2110      	movs	r1, #16
   b641c:	4628      	mov	r0, r5
   b641e:	f7fd fe3e 	bl	b409e <_ZdlPvj>
   b6422:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6424:	b135      	cbz	r5, b6434 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6426:	4628      	mov	r0, r5
   b6428:	f7ff fa06 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
   b642c:	2110      	movs	r1, #16
   b642e:	4628      	mov	r0, r5
   b6430:	f7fd fe35 	bl	b409e <_ZdlPvj>
   b6434:	4620      	mov	r0, r4
   b6436:	2114      	movs	r1, #20
   b6438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b643c:	f7fd be2f 	b.w	b409e <_ZdlPvj>
   b6440:	bd38      	pop	{r3, r4, r5, pc}

000b6442 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   b6442:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   b6444:	2100      	movs	r1, #0
   b6446:	f7ff b8d9 	b.w	b55fc <spark_publish_vitals>

000b644a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b644a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b644c:	230c      	movs	r3, #12
   b644e:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b6452:	6803      	ldr	r3, [r0, #0]
   b6454:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b6458:	7a03      	ldrb	r3, [r0, #8]
   b645a:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b645e:	6843      	ldr	r3, [r0, #4]
   b6460:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b6462:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b6464:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b6466:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b646a:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b646c:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b6470:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b6474:	f7ff f8ca 	bl	b560c <spark_cloud_disconnect>
}
   b6478:	b005      	add	sp, #20
   b647a:	f85d fb04 	ldr.w	pc, [sp], #4

000b647e <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b647e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b6480:	220c      	movs	r2, #12
   b6482:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b6486:	6802      	ldr	r2, [r0, #0]
   b6488:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b648c:	7a02      	ldrb	r2, [r0, #8]
   b648e:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b6492:	6842      	ldr	r2, [r0, #4]
   b6494:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b6496:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b6498:	7a42      	ldrb	r2, [r0, #9]
   b649a:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b649e:	4619      	mov	r1, r3
   b64a0:	aa01      	add	r2, sp, #4
   b64a2:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b64a4:	f8ad 300d 	strh.w	r3, [sp, #13]
   b64a8:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b64ac:	f7ff f896 	bl	b55dc <spark_set_connection_property>
}
   b64b0:	b005      	add	sp, #20
   b64b2:	f85d fb04 	ldr.w	pc, [sp], #4

000b64b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b64b6:	680b      	ldr	r3, [r1, #0]
   b64b8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b64ba:	684b      	ldr	r3, [r1, #4]
   b64bc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b64be:	b113      	cbz	r3, b64c6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b64c0:	685a      	ldr	r2, [r3, #4]
   b64c2:	3201      	adds	r2, #1
   b64c4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b64c6:	4770      	bx	lr

000b64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b64c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64ca:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b64cc:	4668      	mov	r0, sp
   b64ce:	460d      	mov	r5, r1
   b64d0:	f7ff fff1 	bl	b64b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b64d4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b64d6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b64d8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b64da:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b64dc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b64de:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b64e0:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b64e2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b64e4:	f7fd ffde 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b64e8:	b135      	cbz	r5, b64f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b64ea:	1d28      	adds	r0, r5, #4
   b64ec:	f7fd ffda 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64f0:	2108      	movs	r1, #8
   b64f2:	4628      	mov	r0, r5
   b64f4:	f7fd fdd3 	bl	b409e <_ZdlPvj>
        return p;
    }
   b64f8:	4620      	mov	r0, r4
   b64fa:	b003      	add	sp, #12
   b64fc:	bd30      	pop	{r4, r5, pc}

000b64fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b64fe:	b513      	push	{r0, r1, r4, lr}
   b6500:	460b      	mov	r3, r1
   b6502:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6504:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6508:	466c      	mov	r4, sp
   b650a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b650e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6512:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6516:	e894 0003 	ldmia.w	r4, {r0, r1}
   b651a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b651e:	b002      	add	sp, #8
   b6520:	bd10      	pop	{r4, pc}

000b6522 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6522:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6524:	b510      	push	{r4, lr}
      if (_M_empty())
   b6526:	b90a      	cbnz	r2, b652c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6528:	f000 fe4f 	bl	b71ca <_ZSt25__throw_bad_function_callv>
    }
   b652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6530:	68c3      	ldr	r3, [r0, #12]
   b6532:	4718      	bx	r3

000b6534 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6534:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6536:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6538:	f100 0110 	add.w	r1, r0, #16
   b653c:	f7ff fff1 	bl	b6522 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6540:	bd08      	pop	{r3, pc}

000b6542 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6542:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6544:	b510      	push	{r4, lr}
      if (_M_empty())
   b6546:	b90a      	cbnz	r2, b654c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6548:	f000 fe3f 	bl	b71ca <_ZSt25__throw_bad_function_callv>
    }
   b654c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6550:	68c3      	ldr	r3, [r0, #12]
   b6552:	4718      	bx	r3

000b6554 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6554:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6556:	6800      	ldr	r0, [r0, #0]
   b6558:	f100 0110 	add.w	r1, r0, #16
   b655c:	f7ff fff1 	bl	b6542 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6560:	bd08      	pop	{r3, pc}
	...

000b6564 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6564:	b538      	push	{r3, r4, r5, lr}
   b6566:	2300      	movs	r3, #0
   b6568:	4604      	mov	r4, r0
   b656a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b656c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b656e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6570:	f7fd fd91 	bl	b4096 <_Znwj>
   b6574:	b128      	cbz	r0, b6582 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6576:	2301      	movs	r3, #1
   b6578:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b657c:	4b02      	ldr	r3, [pc, #8]	; (b6588 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b657e:	6003      	str	r3, [r0, #0]
   b6580:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6582:	6020      	str	r0, [r4, #0]
	}
   b6584:	4620      	mov	r0, r4
   b6586:	bd38      	pop	{r3, r4, r5, pc}
   b6588:	000ba414 	.word	0x000ba414

000b658c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b658c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b658e:	2300      	movs	r3, #0
   b6590:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6592:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6594:	4604      	mov	r4, r0
   b6596:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6598:	b12b      	cbz	r3, b65a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b659a:	2202      	movs	r2, #2
   b659c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b659e:	68eb      	ldr	r3, [r5, #12]
   b65a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b65a2:	68ab      	ldr	r3, [r5, #8]
   b65a4:	60a3      	str	r3, [r4, #8]
    }
   b65a6:	4620      	mov	r0, r4
   b65a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b65ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b65ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65ae:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b65b0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b65b2:	4668      	mov	r0, sp
   b65b4:	f7ff ff0e 	bl	b63d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b65b8:	f04f 0302 	mov.w	r3, #2
   b65bc:	e8d4 2f4f 	ldrexb	r2, [r4]
   b65c0:	2a00      	cmp	r2, #0
   b65c2:	d103      	bne.n	b65cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b65c4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b65c8:	2900      	cmp	r1, #0
   b65ca:	d1f7      	bne.n	b65bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b65cc:	d125      	bne.n	b661a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b65ce:	f104 050c 	add.w	r5, r4, #12
   b65d2:	4669      	mov	r1, sp
   b65d4:	4628      	mov	r0, r5
   b65d6:	f7ff fefd 	bl	b63d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b65da:	f3bf 8f5b 	dmb	ish
   b65de:	2301      	movs	r3, #1
   b65e0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b65e2:	2000      	movs	r0, #0
   b65e4:	f104 0308 	add.w	r3, r4, #8
   b65e8:	f3bf 8f5b 	dmb	ish
   b65ec:	e853 6f00 	ldrex	r6, [r3]
   b65f0:	e843 0200 	strex	r2, r0, [r3]
   b65f4:	2a00      	cmp	r2, #0
   b65f6:	d1f9      	bne.n	b65ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b65f8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b65fc:	b16e      	cbz	r6, b661a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b65fe:	f7ff f885 	bl	b570c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6602:	b178      	cbz	r0, b6624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6604:	4629      	mov	r1, r5
   b6606:	4630      	mov	r0, r6
   b6608:	f7ff ff8b 	bl	b6522 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b660c:	4630      	mov	r0, r6
   b660e:	f7ff f913 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6612:	2110      	movs	r1, #16
   b6614:	4630      	mov	r0, r6
   b6616:	f7fd fd42 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b661a:	4668      	mov	r0, sp
   b661c:	f7ff fee7 	bl	b63ee <_ZN8particle5ErrorD1Ev>
    }
   b6620:	b009      	add	sp, #36	; 0x24
   b6622:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6624:	4631      	mov	r1, r6
   b6626:	a802      	add	r0, sp, #8
   b6628:	f7ff ffb0 	bl	b658c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b662c:	68e0      	ldr	r0, [r4, #12]
   b662e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6632:	b108      	cbz	r0, b6638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6634:	f001 fc26 	bl	b7e84 <strdup>
        type_(type) {
   b6638:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b663a:	2010      	movs	r0, #16
   b663c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6640:	f7fd fd29 	bl	b4096 <_Znwj>
   b6644:	4605      	mov	r5, r0
   b6646:	b1e8      	cbz	r0, b6684 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6648:	2700      	movs	r7, #0
   b664a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b664c:	2018      	movs	r0, #24
   b664e:	f7fd fd22 	bl	b4096 <_Znwj>
   b6652:	4604      	mov	r4, r0
   b6654:	b188      	cbz	r0, b667a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6656:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6658:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b665a:	a802      	add	r0, sp, #8
   b665c:	f7ff ff4f 	bl	b64fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6660:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6662:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6664:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6666:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6668:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b666a:	a906      	add	r1, sp, #24
   b666c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b666e:	60e3      	str	r3, [r4, #12]
   b6670:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6674:	9205      	str	r2, [sp, #20]
   b6676:	f7ff fead 	bl	b63d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b667a:	4b08      	ldr	r3, [pc, #32]	; (b669c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b667c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b667e:	4b08      	ldr	r3, [pc, #32]	; (b66a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6680:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6682:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6684:	a806      	add	r0, sp, #24
   b6686:	f7ff feb2 	bl	b63ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b668a:	a802      	add	r0, sp, #8
   b668c:	f7ff f8d4 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6690:	2200      	movs	r2, #0
   b6692:	4629      	mov	r1, r5
   b6694:	4803      	ldr	r0, [pc, #12]	; (b66a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6696:	f7ff f841 	bl	b571c <application_thread_invoke>
   b669a:	e7b7      	b.n	b660c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b669c:	000b6535 	.word	0x000b6535
   b66a0:	000b67b9 	.word	0x000b67b9
   b66a4:	000b6021 	.word	0x000b6021

000b66a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b66a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b66ac:	b08b      	sub	sp, #44	; 0x2c
   b66ae:	4605      	mov	r5, r0
   b66b0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b66b4:	460f      	mov	r7, r1
   b66b6:	4690      	mov	r8, r2
   b66b8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b66ba:	f7fe ff6f 	bl	b559c <spark_cloud_flag_connected>
   b66be:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b66c0:	4683      	mov	fp, r0
   b66c2:	bb38      	cbnz	r0, b6714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b66c4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b66c8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b66ca:	a905      	add	r1, sp, #20
   b66cc:	4630      	mov	r0, r6
   b66ce:	f8ad 3018 	strh.w	r3, [sp, #24]
   b66d2:	f7ff fe7f 	bl	b63d4 <_ZN8particle5ErrorC1EOS0_>
   b66d6:	2014      	movs	r0, #20
   b66d8:	f7fd fcdd 	bl	b4096 <_Znwj>
   b66dc:	4604      	mov	r4, r0
   b66de:	b148      	cbz	r0, b66f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b66e0:	2302      	movs	r3, #2
   b66e2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b66e4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b66e6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b66ea:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b66ec:	4631      	mov	r1, r6
   b66ee:	300c      	adds	r0, #12
   b66f0:	f7ff fe70 	bl	b63d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b66f4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b66f6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b66f8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b66fc:	f7ff ff32 	bl	b6564 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6700:	4630      	mov	r0, r6
   b6702:	f7ff fe74 	bl	b63ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6706:	a805      	add	r0, sp, #20
   b6708:	f7ff fe71 	bl	b63ee <_ZN8particle5ErrorD1Ev>
}
   b670c:	4628      	mov	r0, r5
   b670e:	b00b      	add	sp, #44	; 0x2c
   b6710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6714:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6716:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6718:	2014      	movs	r0, #20
   b671a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b671e:	9307      	str	r3, [sp, #28]
   b6720:	f7fd fcb9 	bl	b4096 <_Znwj>
   b6724:	4601      	mov	r1, r0
   b6726:	b118      	cbz	r0, b6730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6728:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b672c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b672e:	7044      	strb	r4, [r0, #1]
   b6730:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6732:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6734:	f7ff ff16 	bl	b6564 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6738:	4b1e      	ldr	r3, [pc, #120]	; (b67b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b673a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b673c:	2008      	movs	r0, #8
   b673e:	f7fd fcaa 	bl	b4096 <_Znwj>
   b6742:	4604      	mov	r4, r0
   b6744:	b110      	cbz	r0, b674c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6746:	a903      	add	r1, sp, #12
   b6748:	f7ff feb5 	bl	b64b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b674c:	9600      	str	r6, [sp, #0]
   b674e:	fa5f f38a 	uxtb.w	r3, sl
   b6752:	464a      	mov	r2, r9
   b6754:	4641      	mov	r1, r8
   b6756:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6758:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b675a:	f7fe ff27 	bl	b55ac <spark_send_event>
   b675e:	b9b8      	cbnz	r0, b6790 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6760:	9b03      	ldr	r3, [sp, #12]
   b6762:	785b      	ldrb	r3, [r3, #1]
   b6764:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6768:	b993      	cbnz	r3, b6790 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b676a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b676e:	a905      	add	r1, sp, #20
   b6770:	a803      	add	r0, sp, #12
   b6772:	9205      	str	r2, [sp, #20]
   b6774:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6778:	f7ff ff18 	bl	b65ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b677c:	a805      	add	r0, sp, #20
   b677e:	f7ff fe36 	bl	b63ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6782:	a805      	add	r0, sp, #20
   b6784:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6786:	f7ff fe9f 	bl	b64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b678a:	a806      	add	r0, sp, #24
   b678c:	f7fd fe8a 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6790:	a903      	add	r1, sp, #12
   b6792:	a805      	add	r0, sp, #20
   b6794:	f7ff fe8f 	bl	b64b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6798:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b679a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b679c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b679e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b67a0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b67a2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b67a4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b67a6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b67a8:	f7fd fe7c 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67ac:	a804      	add	r0, sp, #16
   b67ae:	f7fd fe79 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b67b2:	e7ab      	b.n	b670c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b67b4:	000b6835 	.word	0x000b6835

000b67b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b67b8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b67ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67bc:	4605      	mov	r5, r0
	switch (__op)
   b67be:	d103      	bne.n	b67c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b67c0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b67c2:	6003      	str	r3, [r0, #0]
      }
   b67c4:	2000      	movs	r0, #0
   b67c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b67c8:	2a02      	cmp	r2, #2
   b67ca:	d010      	beq.n	b67ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b67cc:	2a03      	cmp	r2, #3
   b67ce:	d1f9      	bne.n	b67c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b67d0:	6804      	ldr	r4, [r0, #0]
   b67d2:	2c00      	cmp	r4, #0
   b67d4:	d0f6      	beq.n	b67c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b67d6:	f104 0010 	add.w	r0, r4, #16
   b67da:	f7ff fe08 	bl	b63ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b67de:	4620      	mov	r0, r4
   b67e0:	f7ff f82a 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b67e4:	2118      	movs	r1, #24
   b67e6:	4620      	mov	r0, r4
   b67e8:	f7fd fc59 	bl	b409e <_ZdlPvj>
   b67ec:	e7ea      	b.n	b67c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b67ee:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b67f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b67f2:	f7fd fc50 	bl	b4096 <_Znwj>
   b67f6:	4604      	mov	r4, r0
   b67f8:	b150      	cbz	r0, b6810 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b67fa:	4631      	mov	r1, r6
   b67fc:	f7ff fec6 	bl	b658c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6800:	6930      	ldr	r0, [r6, #16]
   b6802:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6806:	b108      	cbz	r0, b680c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6808:	f001 fb3c 	bl	b7e84 <strdup>
        type_(type) {
   b680c:	6120      	str	r0, [r4, #16]
   b680e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6810:	602c      	str	r4, [r5, #0]
	}
   b6812:	e7d7      	b.n	b67c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6814 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6814:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6816:	2300      	movs	r3, #0
   b6818:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b681a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b681c:	4604      	mov	r4, r0
   b681e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6820:	b12b      	cbz	r3, b682e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6822:	2202      	movs	r2, #2
   b6824:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6826:	68eb      	ldr	r3, [r5, #12]
   b6828:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b682a:	68ab      	ldr	r3, [r5, #8]
   b682c:	60a3      	str	r3, [r4, #8]
    }
   b682e:	4620      	mov	r0, r4
   b6830:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6834 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6834:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6836:	b089      	sub	sp, #36	; 0x24
   b6838:	4604      	mov	r4, r0
   b683a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b683c:	a801      	add	r0, sp, #4
   b683e:	4611      	mov	r1, r2
   b6840:	f7ff fe42 	bl	b64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6844:	b1a4      	cbz	r4, b6870 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6846:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6848:	b11d      	cbz	r5, b6852 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b684a:	4628      	mov	r0, r5
   b684c:	f001 fb1a 	bl	b7e84 <strdup>
   b6850:	4605      	mov	r5, r0
   b6852:	a801      	add	r0, sp, #4
   b6854:	a903      	add	r1, sp, #12
        type_(type) {
   b6856:	9503      	str	r5, [sp, #12]
   b6858:	f8ad 4010 	strh.w	r4, [sp, #16]
   b685c:	f7ff fea6 	bl	b65ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6860:	a803      	add	r0, sp, #12
   b6862:	f7ff fdc4 	bl	b63ee <_ZN8particle5ErrorD1Ev>
   b6866:	a802      	add	r0, sp, #8
   b6868:	f7fd fe1c 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b686c:	b009      	add	sp, #36	; 0x24
   b686e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6870:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6872:	2301      	movs	r3, #1
   b6874:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6878:	2a00      	cmp	r2, #0
   b687a:	d103      	bne.n	b6884 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b687c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6880:	2900      	cmp	r1, #0
   b6882:	d1f7      	bne.n	b6874 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6884:	d1ef      	bne.n	b6866 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6886:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6888:	f3bf 8f5b 	dmb	ish
   b688c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b688e:	1d2b      	adds	r3, r5, #4
   b6890:	f3bf 8f5b 	dmb	ish
   b6894:	e853 6f00 	ldrex	r6, [r3]
   b6898:	e843 4200 	strex	r2, r4, [r3]
   b689c:	2a00      	cmp	r2, #0
   b689e:	d1f9      	bne.n	b6894 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b68a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b68a4:	2e00      	cmp	r6, #0
   b68a6:	d0de      	beq.n	b6866 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b68a8:	4620      	mov	r0, r4
   b68aa:	f7fe ff2f 	bl	b570c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b68ae:	4607      	mov	r7, r0
   b68b0:	b160      	cbz	r0, b68cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b68b2:	f105 010c 	add.w	r1, r5, #12
   b68b6:	4630      	mov	r0, r6
   b68b8:	f7ff fe43 	bl	b6542 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b68bc:	4630      	mov	r0, r6
   b68be:	f7fe ffbb 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b68c2:	2110      	movs	r1, #16
   b68c4:	4630      	mov	r0, r6
   b68c6:	f7fd fbea 	bl	b409e <_ZdlPvj>
   b68ca:	e7cc      	b.n	b6866 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b68cc:	4631      	mov	r1, r6
   b68ce:	a803      	add	r0, sp, #12
   b68d0:	f7ff ffa0 	bl	b6814 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b68d4:	7b2b      	ldrb	r3, [r5, #12]
   b68d6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b68da:	2010      	movs	r0, #16
   b68dc:	f7fd fbdb 	bl	b4096 <_Znwj>
   b68e0:	4605      	mov	r5, r0
   b68e2:	b1d0      	cbz	r0, b691a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b68e4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68e6:	2014      	movs	r0, #20
   b68e8:	f7fd fbd5 	bl	b4096 <_Znwj>
   b68ec:	4604      	mov	r4, r0
   b68ee:	b178      	cbz	r0, b6910 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b68f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b68f2:	4601      	mov	r1, r0
   b68f4:	a803      	add	r0, sp, #12
   b68f6:	f7ff fe02 	bl	b64fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b68fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b68fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6900:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6902:	9205      	str	r2, [sp, #20]
   b6904:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6906:	60e3      	str	r3, [r4, #12]
   b6908:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b690c:	9206      	str	r2, [sp, #24]
   b690e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6910:	4b06      	ldr	r3, [pc, #24]	; (b692c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6912:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6914:	4b06      	ldr	r3, [pc, #24]	; (b6930 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6916:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6918:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b691a:	a803      	add	r0, sp, #12
   b691c:	f7fe ff8c 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6920:	2200      	movs	r2, #0
   b6922:	4629      	mov	r1, r5
   b6924:	4803      	ldr	r0, [pc, #12]	; (b6934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6926:	f7fe fef9 	bl	b571c <application_thread_invoke>
   b692a:	e7c7      	b.n	b68bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b692c:	000b6555 	.word	0x000b6555
   b6930:	000b6939 	.word	0x000b6939
   b6934:	000b6021 	.word	0x000b6021

000b6938 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6938:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b693a:	b570      	push	{r4, r5, r6, lr}
   b693c:	4604      	mov	r4, r0
	switch (__op)
   b693e:	d103      	bne.n	b6948 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6940:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6942:	6003      	str	r3, [r0, #0]
      }
   b6944:	2000      	movs	r0, #0
   b6946:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6948:	2a02      	cmp	r2, #2
   b694a:	d00c      	beq.n	b6966 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b694c:	2a03      	cmp	r2, #3
   b694e:	d1f9      	bne.n	b6944 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6950:	6804      	ldr	r4, [r0, #0]
   b6952:	2c00      	cmp	r4, #0
   b6954:	d0f6      	beq.n	b6944 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6956:	4620      	mov	r0, r4
   b6958:	f7fe ff6e 	bl	b5838 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b695c:	2114      	movs	r1, #20
   b695e:	4620      	mov	r0, r4
   b6960:	f7fd fb9d 	bl	b409e <_ZdlPvj>
   b6964:	e7ee      	b.n	b6944 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6966:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6968:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b696a:	f7fd fb94 	bl	b4096 <_Znwj>
   b696e:	4605      	mov	r5, r0
   b6970:	b120      	cbz	r0, b697c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6972:	4631      	mov	r1, r6
   b6974:	f7ff ff4e 	bl	b6814 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6978:	7c33      	ldrb	r3, [r6, #16]
   b697a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b697c:	6025      	str	r5, [r4, #0]
	}
   b697e:	e7e1      	b.n	b6944 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6980 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6980:	4b01      	ldr	r3, [pc, #4]	; (b6988 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6982:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6984:	4770      	bx	lr
   b6986:	bf00      	nop
   b6988:	2003e1d0 	.word	0x2003e1d0

000b698c <serialEventRun>:
{
   b698c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b698e:	4b0b      	ldr	r3, [pc, #44]	; (b69bc <serialEventRun+0x30>)
   b6990:	b143      	cbz	r3, b69a4 <serialEventRun+0x18>
   b6992:	f7ff fc5d 	bl	b6250 <_Z16_fetch_usbserialv>
   b6996:	6803      	ldr	r3, [r0, #0]
   b6998:	691b      	ldr	r3, [r3, #16]
   b699a:	4798      	blx	r3
   b699c:	2800      	cmp	r0, #0
   b699e:	dd01      	ble.n	b69a4 <serialEventRun+0x18>
        serialEvent();
   b69a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b69a4:	4b06      	ldr	r3, [pc, #24]	; (b69c0 <serialEventRun+0x34>)
   b69a6:	b143      	cbz	r3, b69ba <serialEventRun+0x2e>
   b69a8:	f000 fb9a 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b69ac:	6803      	ldr	r3, [r0, #0]
   b69ae:	691b      	ldr	r3, [r3, #16]
   b69b0:	4798      	blx	r3
   b69b2:	2800      	cmp	r0, #0
   b69b4:	dd01      	ble.n	b69ba <serialEventRun+0x2e>
        serialEvent1();
   b69b6:	f3af 8000 	nop.w
}
   b69ba:	bd08      	pop	{r3, pc}
	...

000b69c4 <_post_loop>:
{
   b69c4:	b508      	push	{r3, lr}
	serialEventRun();
   b69c6:	f7ff ffe1 	bl	b698c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b69ca:	f7fe fd65 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b69ce:	4b01      	ldr	r3, [pc, #4]	; (b69d4 <_post_loop+0x10>)
   b69d0:	6018      	str	r0, [r3, #0]
}
   b69d2:	bd08      	pop	{r3, pc}
   b69d4:	2003e734 	.word	0x2003e734

000b69d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b69d8:	4805      	ldr	r0, [pc, #20]	; (b69f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b69da:	4a06      	ldr	r2, [pc, #24]	; (b69f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b69dc:	4906      	ldr	r1, [pc, #24]	; (b69f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b69de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b69e0:	1a12      	subs	r2, r2, r0
   b69e2:	f001 f9f8 	bl	b7dd6 <memcpy>
    __backup_sram_signature = signature;
   b69e6:	4b05      	ldr	r3, [pc, #20]	; (b69fc <_Z33system_initialize_user_backup_ramv+0x24>)
   b69e8:	4a05      	ldr	r2, [pc, #20]	; (b6a00 <_Z33system_initialize_user_backup_ramv+0x28>)
   b69ea:	601a      	str	r2, [r3, #0]
}
   b69ec:	bd08      	pop	{r3, pc}
   b69ee:	bf00      	nop
   b69f0:	2003f400 	.word	0x2003f400
   b69f4:	2003f404 	.word	0x2003f404
   b69f8:	000ba9e4 	.word	0x000ba9e4
   b69fc:	2003f400 	.word	0x2003f400
   b6a00:	9a271c1e 	.word	0x9a271c1e

000b6a04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6a04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6a06:	2300      	movs	r3, #0
   b6a08:	9300      	str	r3, [sp, #0]
   b6a0a:	461a      	mov	r2, r3
   b6a0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6a10:	f7fe fe9e 	bl	b5750 <system_ctrl_set_result>
}
   b6a14:	b003      	add	sp, #12
   b6a16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6a1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6a1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6a1e:	8843      	ldrh	r3, [r0, #2]
   b6a20:	2b0a      	cmp	r3, #10
   b6a22:	d008      	beq.n	b6a36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6a24:	2b50      	cmp	r3, #80	; 0x50
   b6a26:	d10b      	bne.n	b6a40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6a28:	4b09      	ldr	r3, [pc, #36]	; (b6a50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6a2a:	681b      	ldr	r3, [r3, #0]
   b6a2c:	b14b      	cbz	r3, b6a42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6a2e:	b003      	add	sp, #12
   b6a30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6a34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6a36:	f7ff ffe5 	bl	b6a04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6a3a:	b003      	add	sp, #12
   b6a3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6a40:	2300      	movs	r3, #0
   b6a42:	9300      	str	r3, [sp, #0]
   b6a44:	461a      	mov	r2, r3
   b6a46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6a4a:	f7fe fe81 	bl	b5750 <system_ctrl_set_result>
}
   b6a4e:	e7f4      	b.n	b6a3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6a50:	2003e6a0 	.word	0x2003e6a0

000b6a54 <module_user_init_hook>:
{
   b6a54:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6a56:	4812      	ldr	r0, [pc, #72]	; (b6aa0 <module_user_init_hook+0x4c>)
   b6a58:	2100      	movs	r1, #0
   b6a5a:	f7fe fedd 	bl	b5818 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6a5e:	4b11      	ldr	r3, [pc, #68]	; (b6aa4 <module_user_init_hook+0x50>)
   b6a60:	681a      	ldr	r2, [r3, #0]
   b6a62:	4b11      	ldr	r3, [pc, #68]	; (b6aa8 <module_user_init_hook+0x54>)
   b6a64:	429a      	cmp	r2, r3
   b6a66:	4b11      	ldr	r3, [pc, #68]	; (b6aac <module_user_init_hook+0x58>)
   b6a68:	bf0c      	ite	eq
   b6a6a:	2201      	moveq	r2, #1
   b6a6c:	2200      	movne	r2, #0
   b6a6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6a70:	d001      	beq.n	b6a76 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6a72:	f7ff ffb1 	bl	b69d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6a76:	f7fe fcff 	bl	b5478 <HAL_RNG_GetRandomNumber>
   b6a7a:	4604      	mov	r4, r0
    srand(seed);
   b6a7c:	f001 f9c2 	bl	b7e04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6a80:	4b0b      	ldr	r3, [pc, #44]	; (b6ab0 <module_user_init_hook+0x5c>)
   b6a82:	b113      	cbz	r3, b6a8a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6a84:	4620      	mov	r0, r4
   b6a86:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6a8a:	2100      	movs	r1, #0
   b6a8c:	4808      	ldr	r0, [pc, #32]	; (b6ab0 <module_user_init_hook+0x5c>)
   b6a8e:	f7fe fdad 	bl	b55ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6a96:	4807      	ldr	r0, [pc, #28]	; (b6ab4 <module_user_init_hook+0x60>)
   b6a98:	2100      	movs	r1, #0
   b6a9a:	f7fe be4f 	b.w	b573c <system_ctrl_set_app_request_handler>
   b6a9e:	bf00      	nop
   b6aa0:	000b6981 	.word	0x000b6981
   b6aa4:	2003f400 	.word	0x2003f400
   b6aa8:	9a271c1e 	.word	0x9a271c1e
   b6aac:	2003e69c 	.word	0x2003e69c
   b6ab0:	00000000 	.word	0x00000000
   b6ab4:	000b6a1d 	.word	0x000b6a1d

000b6ab8 <_ZN8RGBClass10brightnessEhb>:
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(PARTICLE_LED_RGB);
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   b6ab8:	b510      	push	{r4, lr}
   b6aba:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   b6abc:	f7fe fd2c 	bl	b5518 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   b6ac0:	f7fe fd32 	bl	b5528 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   b6ac4:	b128      	cbz	r0, b6ad2 <_ZN8RGBClass10brightnessEhb+0x1a>
   b6ac6:	b124      	cbz	r4, b6ad2 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   b6ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   b6acc:	20e7      	movs	r0, #231	; 0xe7
   b6ace:	f7fe bd33 	b.w	b5538 <LED_On>
}
   b6ad2:	bd10      	pop	{r4, pc}

000b6ad4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6ad4:	4b01      	ldr	r3, [pc, #4]	; (b6adc <_GLOBAL__sub_I_RGB+0x8>)
   b6ad6:	2200      	movs	r2, #0
   b6ad8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6ada:	4770      	bx	lr
   b6adc:	2003e6a4 	.word	0x2003e6a4

000b6ae0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6ae0:	2100      	movs	r1, #0
   b6ae2:	f7fe be0b 	b.w	b56fc <system_delay_ms>
	...

000b6ae8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b6ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b6aec:	4a15      	ldr	r2, [pc, #84]	; (b6b44 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b6aee:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6b50 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b6af2:	e9d2 6300 	ldrd	r6, r3, [r2]
   b6af6:	1980      	adds	r0, r0, r6
   b6af8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b6afc:	4b12      	ldr	r3, [pc, #72]	; (b6b48 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b6afe:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b6b02:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b6b06:	1986      	adds	r6, r0, r6
   b6b08:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b6b0c:	42bb      	cmp	r3, r7
   b6b0e:	bf08      	it	eq
   b6b10:	42b2      	cmpeq	r2, r6
{
   b6b12:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b6b14:	d013      	beq.n	b6b3e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b6b16:	a903      	add	r1, sp, #12
   b6b18:	4668      	mov	r0, sp
   b6b1a:	e9cd 6700 	strd	r6, r7, [sp]
   b6b1e:	f7fe fe83 	bl	b5828 <localtime_r>
	calendar_time.tm_year += 1900;
   b6b22:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6b24:	4d09      	ldr	r5, [pc, #36]	; (b6b4c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b6b26:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6b2a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b6b2c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b6b36:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6b3a:	6823      	ldr	r3, [r4, #0]
   b6b3c:	602b      	str	r3, [r5, #0]
    }
}
   b6b3e:	b00c      	add	sp, #48	; 0x30
   b6b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b44:	2003e6e8 	.word	0x2003e6e8
   b6b48:	2003e6e0 	.word	0x2003e6e0
   b6b4c:	2003e6b8 	.word	0x2003e6b8
   b6b50:	2003e6f0 	.word	0x2003e6f0

000b6b54 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b6b54:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6b56:	2000      	movs	r0, #0
   b6b58:	f7fe fd38 	bl	b55cc <spark_sync_time_pending>
   b6b5c:	b128      	cbz	r0, b6b6a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6b5e:	f7fe fd1d 	bl	b559c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6b62:	f080 0001 	eor.w	r0, r0, #1
   b6b66:	b2c0      	uxtb	r0, r0
    }
   b6b68:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6b6a:	2001      	movs	r0, #1
   b6b6c:	e7fc      	b.n	b6b68 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b6b6e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b6b6e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6b70:	2000      	movs	r0, #0
   b6b72:	f7fe fc99 	bl	b54a8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6b76:	4604      	mov	r4, r0
   b6b78:	b9a0      	cbnz	r0, b6ba4 <_ZN9TimeClass7isValidEv+0x36>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6b7a:	f7fe fdaf 	bl	b56dc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6b7e:	2801      	cmp	r0, #1
   b6b80:	d110      	bne.n	b6ba4 <_ZN9TimeClass7isValidEv+0x36>
   b6b82:	4620      	mov	r0, r4
   b6b84:	f7fe fdd2 	bl	b572c <system_thread_get_state>
   b6b88:	b960      	cbnz	r0, b6ba4 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6b8a:	f7ff ffe3 	bl	b6b54 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6b8e:	b910      	cbnz	r0, b6b96 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6b90:	f7fe fcf4 	bl	b557c <spark_process>
        while (_while() && !_condition()) {
   b6b94:	e7f9      	b.n	b6b8a <_ZN9TimeClass7isValidEv+0x1c>
   b6b96:	f7ff ffdd 	bl	b6b54 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6b9e:	2000      	movs	r0, #0
   b6ba0:	f7fe bc82 	b.w	b54a8 <hal_rtc_time_is_valid>
}
   b6ba4:	4620      	mov	r0, r4
   b6ba6:	bd10      	pop	{r4, pc}

000b6ba8 <_ZN9TimeClass3nowEv>:
{
   b6ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6baa:	f7ff ffe0 	bl	b6b6e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6bae:	2210      	movs	r2, #16
   b6bb0:	2100      	movs	r1, #0
   b6bb2:	4668      	mov	r0, sp
   b6bb4:	f001 f91d 	bl	b7df2 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b6bb8:	2100      	movs	r1, #0
   b6bba:	4668      	mov	r0, sp
   b6bbc:	f7fe fc84 	bl	b54c8 <hal_rtc_get_time>
}
   b6bc0:	9800      	ldr	r0, [sp, #0]
   b6bc2:	b005      	add	sp, #20
   b6bc4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6bc8 <_ZN9TimeClass6minuteEv>:
{
   b6bc8:	b508      	push	{r3, lr}
	return minute(now());
   b6bca:	f7ff ffed 	bl	b6ba8 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6bce:	17c1      	asrs	r1, r0, #31
   b6bd0:	f7ff ff8a 	bl	b6ae8 <_ZL22Refresh_UnixTime_Cachex>
}
   b6bd4:	4b01      	ldr	r3, [pc, #4]	; (b6bdc <_ZN9TimeClass6minuteEv+0x14>)
   b6bd6:	6858      	ldr	r0, [r3, #4]
   b6bd8:	bd08      	pop	{r3, pc}
   b6bda:	bf00      	nop
   b6bdc:	2003e6b8 	.word	0x2003e6b8

000b6be0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6be0:	4b02      	ldr	r3, [pc, #8]	; (b6bec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6be2:	681a      	ldr	r2, [r3, #0]
   b6be4:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6be6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6be8:	4770      	bx	lr
   b6bea:	bf00      	nop
   b6bec:	2003e1cc 	.word	0x2003e1cc
   b6bf0:	2003e6b4 	.word	0x2003e6b4

000b6bf4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6bf4:	4b01      	ldr	r3, [pc, #4]	; (b6bfc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6bf6:	4a02      	ldr	r2, [pc, #8]	; (b6c00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6bf8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6bfa:	4770      	bx	lr
   b6bfc:	2003e6f8 	.word	0x2003e6f8
   b6c00:	000ba444 	.word	0x000ba444

000b6c04 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6c04:	b510      	push	{r4, lr}
   b6c06:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6c08:	f7fe fc46 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6c0c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6c0e:	6823      	ldr	r3, [r4, #0]
   b6c10:	4620      	mov	r0, r4
   b6c12:	695b      	ldr	r3, [r3, #20]
   b6c14:	4798      	blx	r3
    if (c >= 0) return c;
   b6c16:	2800      	cmp	r0, #0
   b6c18:	da08      	bge.n	b6c2c <_ZN6Stream9timedReadEv+0x28>
   b6c1a:	f7fe fc3d 	bl	b5498 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6c1e:	68e3      	ldr	r3, [r4, #12]
   b6c20:	1ac0      	subs	r0, r0, r3
   b6c22:	68a3      	ldr	r3, [r4, #8]
   b6c24:	4298      	cmp	r0, r3
   b6c26:	d3f2      	bcc.n	b6c0e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6c2c:	bd10      	pop	{r4, pc}
	...

000b6c30 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b6c30:	b538      	push	{r3, r4, r5, lr}
   b6c32:	460d      	mov	r5, r1
  String ret;
   b6c34:	4907      	ldr	r1, [pc, #28]	; (b6c54 <_ZN6Stream10readStringEv+0x24>)
{
   b6c36:	4604      	mov	r4, r0
  String ret;
   b6c38:	f000 f909 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6c3c:	4628      	mov	r0, r5
   b6c3e:	f7ff ffe1 	bl	b6c04 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b6c42:	2800      	cmp	r0, #0
   b6c44:	db04      	blt.n	b6c50 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6c46:	b2c1      	uxtb	r1, r0
   b6c48:	4620      	mov	r0, r4
   b6c4a:	f000 f950 	bl	b6eee <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6c4e:	e7f5      	b.n	b6c3c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b6c50:	4620      	mov	r0, r4
   b6c52:	bd38      	pop	{r3, r4, r5, pc}
   b6c54:	000ba03e 	.word	0x000ba03e

000b6c58 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
   b6c58:	b570      	push	{r4, r5, r6, lr}
   b6c5a:	460d      	mov	r5, r1
  String ret;
   b6c5c:	4909      	ldr	r1, [pc, #36]	; (b6c84 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b6c5e:	4604      	mov	r4, r0
   b6c60:	4616      	mov	r6, r2
  String ret;
   b6c62:	f000 f8f4 	bl	b6e4e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6c66:	4628      	mov	r0, r5
   b6c68:	f7ff ffcc 	bl	b6c04 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b6c6c:	2800      	cmp	r0, #0
   b6c6e:	db06      	blt.n	b6c7e <_ZN6Stream15readStringUntilEc+0x26>
   b6c70:	4286      	cmp	r6, r0
   b6c72:	d004      	beq.n	b6c7e <_ZN6Stream15readStringUntilEc+0x26>
   b6c74:	b2c1      	uxtb	r1, r0
   b6c76:	4620      	mov	r0, r4
   b6c78:	f000 f939 	bl	b6eee <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6c7c:	e7f3      	b.n	b6c66 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b6c7e:	4620      	mov	r0, r4
   b6c80:	bd70      	pop	{r4, r5, r6, pc}
   b6c82:	bf00      	nop
   b6c84:	000ba03e 	.word	0x000ba03e

000b6c88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c8a:	4606      	mov	r6, r0
   b6c8c:	460d      	mov	r5, r1
  size_t n = 0;
   b6c8e:	188f      	adds	r7, r1, r2
   b6c90:	2400      	movs	r4, #0
  while (size--) {
   b6c92:	42bd      	cmp	r5, r7
   b6c94:	d00c      	beq.n	b6cb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6c96:	6833      	ldr	r3, [r6, #0]
   b6c98:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6c9c:	689b      	ldr	r3, [r3, #8]
   b6c9e:	4630      	mov	r0, r6
   b6ca0:	4798      	blx	r3
     if (chunk>=0)
   b6ca2:	1e03      	subs	r3, r0, #0
   b6ca4:	db01      	blt.n	b6caa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6ca6:	441c      	add	r4, r3
  while (size--) {
   b6ca8:	e7f3      	b.n	b6c92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6caa:	2c00      	cmp	r4, #0
   b6cac:	bf08      	it	eq
   b6cae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6cb4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6cb4:	b513      	push	{r0, r1, r4, lr}
   b6cb6:	4604      	mov	r4, r0
    }
   b6cb8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6cba:	b159      	cbz	r1, b6cd4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6cbc:	9101      	str	r1, [sp, #4]
   b6cbe:	f001 f8fe 	bl	b7ebe <strlen>
   b6cc2:	6823      	ldr	r3, [r4, #0]
   b6cc4:	9901      	ldr	r1, [sp, #4]
   b6cc6:	68db      	ldr	r3, [r3, #12]
   b6cc8:	4602      	mov	r2, r0
   b6cca:	4620      	mov	r0, r4
    }
   b6ccc:	b002      	add	sp, #8
   b6cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6cd2:	4718      	bx	r3
    }
   b6cd4:	b002      	add	sp, #8
   b6cd6:	bd10      	pop	{r4, pc}

000b6cd8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6cd8:	6803      	ldr	r3, [r0, #0]
   b6cda:	689b      	ldr	r3, [r3, #8]
   b6cdc:	4718      	bx	r3

000b6cde <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6cde:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6ce0:	210d      	movs	r1, #13
{
   b6ce2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6ce4:	f7ff fff8 	bl	b6cd8 <_ZN5Print5printEc>
  n += print('\n');
   b6ce8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6cea:	4604      	mov	r4, r0
  n += print('\n');
   b6cec:	4628      	mov	r0, r5
   b6cee:	f7ff fff3 	bl	b6cd8 <_ZN5Print5printEc>
  return n;
}
   b6cf2:	4420      	add	r0, r4
   b6cf4:	bd38      	pop	{r3, r4, r5, pc}

000b6cf6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6cf6:	b538      	push	{r3, r4, r5, lr}
   b6cf8:	4605      	mov	r5, r0
  return write(str);
   b6cfa:	f7ff ffdb 	bl	b6cb4 <_ZN5Print5writeEPKc>
   b6cfe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6d00:	4628      	mov	r0, r5
   b6d02:	f7ff ffec 	bl	b6cde <_ZN5Print7printlnEv>
  return n;
}
   b6d06:	4420      	add	r0, r4
   b6d08:	bd38      	pop	{r3, r4, r5, pc}

000b6d0a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6d0a:	b530      	push	{r4, r5, lr}
   b6d0c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6d0e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6d10:	2a01      	cmp	r2, #1
  *str = '\0';
   b6d12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6d16:	bf98      	it	ls
   b6d18:	220a      	movls	r2, #10
   b6d1a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6d1c:	460d      	mov	r5, r1
   b6d1e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6d22:	fb01 5312 	mls	r3, r1, r2, r5
   b6d26:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6d2a:	2b09      	cmp	r3, #9
   b6d2c:	bf94      	ite	ls
   b6d2e:	3330      	addls	r3, #48	; 0x30
   b6d30:	3337      	addhi	r3, #55	; 0x37
   b6d32:	b2db      	uxtb	r3, r3
  } while(n);
   b6d34:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6d36:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6d3a:	d9ef      	bls.n	b6d1c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6d3c:	4621      	mov	r1, r4
   b6d3e:	f7ff ffb9 	bl	b6cb4 <_ZN5Print5writeEPKc>
}
   b6d42:	b00b      	add	sp, #44	; 0x2c
   b6d44:	bd30      	pop	{r4, r5, pc}

000b6d46 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d4a:	b086      	sub	sp, #24
   b6d4c:	af00      	add	r7, sp, #0
   b6d4e:	4605      	mov	r5, r0
   b6d50:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6d52:	1d38      	adds	r0, r7, #4
   b6d54:	2114      	movs	r1, #20
{
   b6d56:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6d58:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6d5a:	f7fe fd35 	bl	b57c8 <vsnprintf>

    if (n<bufsize)
   b6d5e:	2813      	cmp	r0, #19
   b6d60:	d80e      	bhi.n	b6d80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6d62:	1d39      	adds	r1, r7, #4
   b6d64:	4628      	mov	r0, r5
   b6d66:	f7ff ffa5 	bl	b6cb4 <_ZN5Print5writeEPKc>
   b6d6a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6d6c:	b11e      	cbz	r6, b6d76 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6d6e:	4628      	mov	r0, r5
   b6d70:	f7ff ffb5 	bl	b6cde <_ZN5Print7printlnEv>
   b6d74:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6d76:	4620      	mov	r0, r4
   b6d78:	3718      	adds	r7, #24
   b6d7a:	46bd      	mov	sp, r7
   b6d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6d80:	f100 0308 	add.w	r3, r0, #8
   b6d84:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6d88:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6d8a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6d8e:	4622      	mov	r2, r4
   b6d90:	1c41      	adds	r1, r0, #1
   b6d92:	683b      	ldr	r3, [r7, #0]
   b6d94:	4668      	mov	r0, sp
   b6d96:	f7fe fd17 	bl	b57c8 <vsnprintf>
  return write(str);
   b6d9a:	4669      	mov	r1, sp
   b6d9c:	4628      	mov	r0, r5
   b6d9e:	f7ff ff89 	bl	b6cb4 <_ZN5Print5writeEPKc>
   b6da2:	4604      	mov	r4, r0
   b6da4:	46c5      	mov	sp, r8
   b6da6:	e7e1      	b.n	b6d6c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6da8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6da8:	4802      	ldr	r0, [pc, #8]	; (b6db4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6daa:	2300      	movs	r3, #0
   b6dac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6dae:	f7fe bb5b 	b.w	b5468 <os_mutex_recursive_create>
   b6db2:	bf00      	nop
   b6db4:	2003e6fc 	.word	0x2003e6fc

000b6db8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6db8:	b510      	push	{r4, lr}
   b6dba:	4604      	mov	r4, r0
{
	free(buffer);
   b6dbc:	6800      	ldr	r0, [r0, #0]
   b6dbe:	f7fe fce3 	bl	b5788 <free>
}
   b6dc2:	4620      	mov	r0, r4
   b6dc4:	bd10      	pop	{r4, pc}

000b6dc6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6dc6:	b510      	push	{r4, lr}
   b6dc8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6dca:	6800      	ldr	r0, [r0, #0]
   b6dcc:	b108      	cbz	r0, b6dd2 <_ZN6String10invalidateEv+0xc>
   b6dce:	f7fe fcdb 	bl	b5788 <free>
	buffer = NULL;
   b6dd2:	2300      	movs	r3, #0
	capacity = len = 0;
   b6dd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6dd8:	6023      	str	r3, [r4, #0]
}
   b6dda:	bd10      	pop	{r4, pc}

000b6ddc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6ddc:	b538      	push	{r3, r4, r5, lr}
   b6dde:	4604      	mov	r4, r0
   b6de0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6de2:	6800      	ldr	r0, [r0, #0]
   b6de4:	3101      	adds	r1, #1
   b6de6:	f7fe fcd7 	bl	b5798 <realloc>
	if (newbuffer) {
   b6dea:	b110      	cbz	r0, b6df2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6dec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6df0:	2001      	movs	r0, #1
	}
	return 0;
}
   b6df2:	bd38      	pop	{r3, r4, r5, pc}

000b6df4 <_ZN6String7reserveEj>:
{
   b6df4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6df6:	6803      	ldr	r3, [r0, #0]
{
   b6df8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6dfa:	b123      	cbz	r3, b6e06 <_ZN6String7reserveEj+0x12>
   b6dfc:	6843      	ldr	r3, [r0, #4]
   b6dfe:	428b      	cmp	r3, r1
   b6e00:	d301      	bcc.n	b6e06 <_ZN6String7reserveEj+0x12>
   b6e02:	2001      	movs	r0, #1
}
   b6e04:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6e06:	4620      	mov	r0, r4
   b6e08:	f7ff ffe8 	bl	b6ddc <_ZN6String12changeBufferEj>
   b6e0c:	2800      	cmp	r0, #0
   b6e0e:	d0f9      	beq.n	b6e04 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6e10:	68a3      	ldr	r3, [r4, #8]
   b6e12:	2b00      	cmp	r3, #0
   b6e14:	d1f5      	bne.n	b6e02 <_ZN6String7reserveEj+0xe>
   b6e16:	6822      	ldr	r2, [r4, #0]
   b6e18:	7013      	strb	r3, [r2, #0]
   b6e1a:	e7f2      	b.n	b6e02 <_ZN6String7reserveEj+0xe>

000b6e1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e1e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6e20:	4611      	mov	r1, r2
   b6e22:	9201      	str	r2, [sp, #4]
{
   b6e24:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6e26:	f7ff ffe5 	bl	b6df4 <_ZN6String7reserveEj>
   b6e2a:	9a01      	ldr	r2, [sp, #4]
   b6e2c:	b928      	cbnz	r0, b6e3a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6e2e:	4620      	mov	r0, r4
   b6e30:	f7ff ffc9 	bl	b6dc6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6e34:	4620      	mov	r0, r4
   b6e36:	b003      	add	sp, #12
   b6e38:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6e3a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6e3c:	4629      	mov	r1, r5
   b6e3e:	6820      	ldr	r0, [r4, #0]
   b6e40:	f000 ffc9 	bl	b7dd6 <memcpy>
	buffer[len] = 0;
   b6e44:	6822      	ldr	r2, [r4, #0]
   b6e46:	68a3      	ldr	r3, [r4, #8]
   b6e48:	2100      	movs	r1, #0
   b6e4a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6e4c:	e7f2      	b.n	b6e34 <_ZN6String4copyEPKcj+0x18>

000b6e4e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6e4e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6e50:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6e52:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6e56:	4604      	mov	r4, r0
	len = 0;
   b6e58:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6e5a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6e5c:	b141      	cbz	r1, b6e70 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6e5e:	4608      	mov	r0, r1
   b6e60:	9101      	str	r1, [sp, #4]
   b6e62:	f001 f82c 	bl	b7ebe <strlen>
   b6e66:	9901      	ldr	r1, [sp, #4]
   b6e68:	4602      	mov	r2, r0
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f7ff ffd6 	bl	b6e1c <_ZN6String4copyEPKcj>
}
   b6e70:	4620      	mov	r0, r4
   b6e72:	b002      	add	sp, #8
   b6e74:	bd10      	pop	{r4, pc}

000b6e76 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6e76:	b538      	push	{r3, r4, r5, lr}
   b6e78:	4605      	mov	r5, r0
	if (buffer) {
   b6e7a:	6800      	ldr	r0, [r0, #0]
{
   b6e7c:	460c      	mov	r4, r1
	if (buffer) {
   b6e7e:	b168      	cbz	r0, b6e9c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6e80:	686a      	ldr	r2, [r5, #4]
   b6e82:	688b      	ldr	r3, [r1, #8]
   b6e84:	429a      	cmp	r2, r3
   b6e86:	d307      	bcc.n	b6e98 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6e88:	6809      	ldr	r1, [r1, #0]
   b6e8a:	f000 fff3 	bl	b7e74 <strcpy>
			len = rhs.len;
   b6e8e:	68a3      	ldr	r3, [r4, #8]
   b6e90:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6e92:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6e94:	60a3      	str	r3, [r4, #8]
}
   b6e96:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6e98:	f7fe fc76 	bl	b5788 <free>
	buffer = rhs.buffer;
   b6e9c:	6823      	ldr	r3, [r4, #0]
   b6e9e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6ea0:	6863      	ldr	r3, [r4, #4]
   b6ea2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6ea4:	68a3      	ldr	r3, [r4, #8]
   b6ea6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6ea8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6eaa:	e9c4 3300 	strd	r3, r3, [r4]
   b6eae:	e7f1      	b.n	b6e94 <_ZN6String4moveERS_+0x1e>

000b6eb0 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b6eb0:	4288      	cmp	r0, r1
{
   b6eb2:	b510      	push	{r4, lr}
   b6eb4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b6eb6:	d001      	beq.n	b6ebc <_ZN6StringaSEOS_+0xc>
   b6eb8:	f7ff ffdd 	bl	b6e76 <_ZN6String4moveERS_>
	return *this;
}
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	bd10      	pop	{r4, pc}

000b6ec0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6ec0:	b570      	push	{r4, r5, r6, lr}
   b6ec2:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6ec4:	460e      	mov	r6, r1
   b6ec6:	b909      	cbnz	r1, b6ecc <_ZN6String6concatEPKcj+0xc>
   b6ec8:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6eca:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6ecc:	b16a      	cbz	r2, b6eea <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6ece:	6884      	ldr	r4, [r0, #8]
   b6ed0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6ed2:	4621      	mov	r1, r4
   b6ed4:	f7ff ff8e 	bl	b6df4 <_ZN6String7reserveEj>
   b6ed8:	2800      	cmp	r0, #0
   b6eda:	d0f5      	beq.n	b6ec8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6edc:	6828      	ldr	r0, [r5, #0]
   b6ede:	68ab      	ldr	r3, [r5, #8]
   b6ee0:	4631      	mov	r1, r6
   b6ee2:	4418      	add	r0, r3
   b6ee4:	f000 ffc6 	bl	b7e74 <strcpy>
	len = newlen;
   b6ee8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6eea:	2001      	movs	r0, #1
   b6eec:	e7ed      	b.n	b6eca <_ZN6String6concatEPKcj+0xa>

000b6eee <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6eee:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6ef0:	2300      	movs	r3, #0
	buf[0] = c;
   b6ef2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6ef6:	2201      	movs	r2, #1
   b6ef8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6efa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6efe:	f7ff ffdf 	bl	b6ec0 <_ZN6String6concatEPKcj>
}
   b6f02:	b003      	add	sp, #12
   b6f04:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f08 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b6f08:	b558      	push	{r3, r4, r6, lr}
   b6f0a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b6f0c:	b12a      	cbz	r2, b6f1a <_ZNK6String8getBytesEPhjj+0x12>
   b6f0e:	b121      	cbz	r1, b6f1a <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b6f10:	6884      	ldr	r4, [r0, #8]
   b6f12:	42a3      	cmp	r3, r4
   b6f14:	d302      	bcc.n	b6f1c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b6f16:	2300      	movs	r3, #0
   b6f18:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b6f1a:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b6f1c:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b6f1e:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b6f20:	6801      	ldr	r1, [r0, #0]
   b6f22:	4294      	cmp	r4, r2
   b6f24:	bf28      	it	cs
   b6f26:	4614      	movcs	r4, r2
   b6f28:	4419      	add	r1, r3
   b6f2a:	4622      	mov	r2, r4
   b6f2c:	4630      	mov	r0, r6
   b6f2e:	f000 ffe2 	bl	b7ef6 <strncpy>
	buf[n] = 0;
   b6f32:	2300      	movs	r3, #0
   b6f34:	5533      	strb	r3, [r6, r4]
   b6f36:	e7f0      	b.n	b6f1a <_ZNK6String8getBytesEPhjj+0x12>

000b6f38 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b6f38:	6800      	ldr	r0, [r0, #0]
   b6f3a:	b108      	cbz	r0, b6f40 <_ZNK6String5toIntEv+0x8>
   b6f3c:	f000 bf47 	b.w	b7dce <atol>
	return 0;
}
   b6f40:	4770      	bx	lr
	...

000b6f44 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   b6f44:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b6f46:	6800      	ldr	r0, [r0, #0]
   b6f48:	b140      	cbz	r0, b6f5c <_ZNK6String7toFloatEv+0x18>
   b6f4a:	f000 ff3d 	bl	b7dc8 <atof>
   b6f4e:	ec51 0b10 	vmov	r0, r1, d0
   b6f52:	f000 fec5 	bl	b7ce0 <__aeabi_d2f>
   b6f56:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b6f5a:	bd08      	pop	{r3, pc}
	return 0;
   b6f5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6f64 <_ZNK6String7toFloatEv+0x20>
   b6f60:	e7fb      	b.n	b6f5a <_ZNK6String7toFloatEv+0x16>
   b6f62:	bf00      	nop
   b6f64:	00000000 	.word	0x00000000

000b6f68 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b6f68:	b507      	push	{r0, r1, r2, lr}
   b6f6a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b6f6c:	2100      	movs	r1, #0
{
   b6f6e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b6f70:	9100      	str	r1, [sp, #0]
   b6f72:	2001      	movs	r0, #1
   b6f74:	218c      	movs	r1, #140	; 0x8c
   b6f76:	f7fe fbf5 	bl	b5764 <system_reset>
}
   b6f7a:	b003      	add	sp, #12
   b6f7c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f80 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b6f80:	4601      	mov	r1, r0
    reset(0, flags);
   b6f82:	2000      	movs	r0, #0
   b6f84:	f7ff bff0 	b.w	b6f68 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b6f88 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b6f88:	2000      	movs	r0, #0
   b6f8a:	f7ff bff9 	b.w	b6f80 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b6f90 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6f90:	4b05      	ldr	r3, [pc, #20]	; (b6fa8 <_GLOBAL__sub_I_System+0x18>)
   b6f92:	2202      	movs	r2, #2
   b6f94:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b6f96:	4b05      	ldr	r3, [pc, #20]	; (b6fac <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6f98:	4a05      	ldr	r2, [pc, #20]	; (b6fb0 <_GLOBAL__sub_I_System+0x20>)
   b6f9a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6f9c:	2000      	movs	r0, #0
   b6f9e:	e9c3 0000 	strd	r0, r0, [r3]
        set_system_mode(mode);
   b6fa2:	f7fe bba3 	b.w	b56ec <set_system_mode>
   b6fa6:	bf00      	nop
   b6fa8:	2003e70c 	.word	0x2003e70c
   b6fac:	2003e700 	.word	0x2003e700
   b6fb0:	ffff0000 	.word	0xffff0000

000b6fb4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6fb4:	2200      	movs	r2, #0
   b6fb6:	6840      	ldr	r0, [r0, #4]
   b6fb8:	4611      	mov	r1, r2
   b6fba:	f7fe bb67 	b.w	b568c <network_listening>

000b6fbe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6fbe:	2200      	movs	r2, #0
   b6fc0:	6840      	ldr	r0, [r0, #4]
   b6fc2:	4611      	mov	r1, r2
   b6fc4:	f7fe bb72 	b.w	b56ac <network_get_listen_timeout>

000b6fc8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6fc8:	6840      	ldr	r0, [r0, #4]
   b6fca:	2200      	movs	r2, #0
   b6fcc:	f7fe bb66 	b.w	b569c <network_set_listen_timeout>

000b6fd0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6fd0:	6840      	ldr	r0, [r0, #4]
   b6fd2:	2200      	movs	r2, #0
   b6fd4:	f081 0101 	eor.w	r1, r1, #1
   b6fd8:	f7fe bb50 	b.w	b567c <network_listen>

000b6fdc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6fdc:	2300      	movs	r3, #0
   b6fde:	6840      	ldr	r0, [r0, #4]
   b6fe0:	461a      	mov	r2, r3
   b6fe2:	4619      	mov	r1, r3
   b6fe4:	f7fe bb42 	b.w	b566c <network_off>

000b6fe8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6fe8:	2300      	movs	r3, #0
   b6fea:	6840      	ldr	r0, [r0, #4]
   b6fec:	461a      	mov	r2, r3
   b6fee:	4619      	mov	r1, r3
   b6ff0:	f7fe bb34 	b.w	b565c <network_on>

000b6ff4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6ff4:	2200      	movs	r2, #0
   b6ff6:	6840      	ldr	r0, [r0, #4]
   b6ff8:	4611      	mov	r1, r2
   b6ffa:	f7fe bb27 	b.w	b564c <network_ready>

000b6ffe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6ffe:	2200      	movs	r2, #0
   b7000:	6840      	ldr	r0, [r0, #4]
   b7002:	4611      	mov	r1, r2
   b7004:	f7fe bb12 	b.w	b562c <network_connecting>

000b7008 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7008:	6840      	ldr	r0, [r0, #4]
   b700a:	2200      	movs	r2, #0
   b700c:	2102      	movs	r1, #2
   b700e:	f7fe bb15 	b.w	b563c <network_disconnect>

000b7012 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7012:	2300      	movs	r3, #0
   b7014:	6840      	ldr	r0, [r0, #4]
   b7016:	461a      	mov	r2, r3
   b7018:	f7fe bb00 	b.w	b561c <network_connect>

000b701c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b701c:	4b02      	ldr	r3, [pc, #8]	; (b7028 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b701e:	2203      	movs	r2, #3
   b7020:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7022:	4a02      	ldr	r2, [pc, #8]	; (b702c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7024:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7026:	4770      	bx	lr
   b7028:	2003e710 	.word	0x2003e710
   b702c:	000ba450 	.word	0x000ba450

000b7030 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7030:	4770      	bx	lr
	...

000b7034 <_Z17acquireWireBufferv>:
{
   b7034:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7036:	2520      	movs	r5, #32
   b7038:	2314      	movs	r3, #20
{
   b703a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b703c:	6003      	str	r3, [r0, #0]
   b703e:	6085      	str	r5, [r0, #8]
   b7040:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7042:	4906      	ldr	r1, [pc, #24]	; (b705c <_Z17acquireWireBufferv+0x28>)
   b7044:	4628      	mov	r0, r5
   b7046:	f000 f8be 	bl	b71c6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b704a:	4904      	ldr	r1, [pc, #16]	; (b705c <_Z17acquireWireBufferv+0x28>)
	};
   b704c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b704e:	4628      	mov	r0, r5
   b7050:	f000 f8b9 	bl	b71c6 <_ZnajRKSt9nothrow_t>
	};
   b7054:	60e0      	str	r0, [r4, #12]
}
   b7056:	4620      	mov	r0, r4
   b7058:	bd38      	pop	{r3, r4, r5, pc}
   b705a:	bf00      	nop
   b705c:	000ba484 	.word	0x000ba484

000b7060 <_Z19__fetch_global_Wirev>:
{
   b7060:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7062:	4d0e      	ldr	r5, [pc, #56]	; (b709c <_Z19__fetch_global_Wirev+0x3c>)
   b7064:	7829      	ldrb	r1, [r5, #0]
   b7066:	f3bf 8f5b 	dmb	ish
   b706a:	f011 0401 	ands.w	r4, r1, #1
{
   b706e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7070:	d111      	bne.n	b7096 <_Z19__fetch_global_Wirev+0x36>
   b7072:	4628      	mov	r0, r5
   b7074:	f7fd f815 	bl	b40a2 <__cxa_guard_acquire>
   b7078:	b168      	cbz	r0, b7096 <_Z19__fetch_global_Wirev+0x36>
   b707a:	a801      	add	r0, sp, #4
   b707c:	f7ff ffda 	bl	b7034 <_Z17acquireWireBufferv>
   b7080:	aa01      	add	r2, sp, #4
   b7082:	4621      	mov	r1, r4
   b7084:	4806      	ldr	r0, [pc, #24]	; (b70a0 <_Z19__fetch_global_Wirev+0x40>)
   b7086:	f7fe ffb9 	bl	b5ffc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b708a:	4628      	mov	r0, r5
   b708c:	f7fd f80e 	bl	b40ac <__cxa_guard_release>
   b7090:	4804      	ldr	r0, [pc, #16]	; (b70a4 <_Z19__fetch_global_Wirev+0x44>)
   b7092:	f000 fe93 	bl	b7dbc <atexit>
	return wire;
}
   b7096:	4802      	ldr	r0, [pc, #8]	; (b70a0 <_Z19__fetch_global_Wirev+0x40>)
   b7098:	b007      	add	sp, #28
   b709a:	bd30      	pop	{r4, r5, pc}
   b709c:	2003e718 	.word	0x2003e718
   b70a0:	2003e71c 	.word	0x2003e71c
   b70a4:	000b7031 	.word	0x000b7031

000b70a8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70a8:	4770      	bx	lr
	...

000b70ac <_Z20acquireSerial1Bufferv>:
{
   b70ac:	b538      	push	{r3, r4, r5, lr}
   b70ae:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b70b0:	2514      	movs	r5, #20
   b70b2:	462a      	mov	r2, r5
   b70b4:	2100      	movs	r1, #0
   b70b6:	f000 fe9c 	bl	b7df2 <memset>
   b70ba:	8025      	strh	r5, [r4, #0]
   b70bc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70be:	4907      	ldr	r1, [pc, #28]	; (b70dc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b70c0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70c2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b70c4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70c6:	f000 f87e 	bl	b71c6 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70ca:	4904      	ldr	r1, [pc, #16]	; (b70dc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b70cc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70ce:	4628      	mov	r0, r5
   b70d0:	f000 f879 	bl	b71c6 <_ZnajRKSt9nothrow_t>
    };
   b70d4:	60e0      	str	r0, [r4, #12]
}
   b70d6:	4620      	mov	r0, r4
   b70d8:	bd38      	pop	{r3, r4, r5, pc}
   b70da:	bf00      	nop
   b70dc:	000ba484 	.word	0x000ba484

000b70e0 <_Z22__fetch_global_Serial1v>:
{
   b70e0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70e2:	4d0e      	ldr	r5, [pc, #56]	; (b711c <_Z22__fetch_global_Serial1v+0x3c>)
   b70e4:	7829      	ldrb	r1, [r5, #0]
   b70e6:	f3bf 8f5b 	dmb	ish
   b70ea:	f011 0401 	ands.w	r4, r1, #1
{
   b70ee:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70f0:	d111      	bne.n	b7116 <_Z22__fetch_global_Serial1v+0x36>
   b70f2:	4628      	mov	r0, r5
   b70f4:	f7fc ffd5 	bl	b40a2 <__cxa_guard_acquire>
   b70f8:	b168      	cbz	r0, b7116 <_Z22__fetch_global_Serial1v+0x36>
   b70fa:	a801      	add	r0, sp, #4
   b70fc:	f7ff ffd6 	bl	b70ac <_Z20acquireSerial1Bufferv>
   b7100:	aa01      	add	r2, sp, #4
   b7102:	4621      	mov	r1, r4
   b7104:	4806      	ldr	r0, [pc, #24]	; (b7120 <_Z22__fetch_global_Serial1v+0x40>)
   b7106:	f7fe ffdd 	bl	b60c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b710a:	4628      	mov	r0, r5
   b710c:	f7fc ffce 	bl	b40ac <__cxa_guard_release>
   b7110:	4804      	ldr	r0, [pc, #16]	; (b7124 <_Z22__fetch_global_Serial1v+0x44>)
   b7112:	f000 fe53 	bl	b7dbc <atexit>
    return serial1;
}
   b7116:	4802      	ldr	r0, [pc, #8]	; (b7120 <_Z22__fetch_global_Serial1v+0x40>)
   b7118:	b007      	add	sp, #28
   b711a:	bd30      	pop	{r4, r5, pc}
   b711c:	2003e738 	.word	0x2003e738
   b7120:	2003e73c 	.word	0x2003e73c
   b7124:	000b70a9 	.word	0x000b70a9

000b7128 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7128:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b712a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b712c:	d902      	bls.n	b7134 <pinAvailable+0xc>
    return false;
   b712e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7130:	b002      	add	sp, #8
   b7132:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7134:	f1a0 030b 	sub.w	r3, r0, #11
   b7138:	2b02      	cmp	r3, #2
   b713a:	d81a      	bhi.n	b7172 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b713c:	4c17      	ldr	r4, [pc, #92]	; (b719c <pinAvailable+0x74>)
   b713e:	7821      	ldrb	r1, [r4, #0]
   b7140:	f3bf 8f5b 	dmb	ish
   b7144:	f011 0101 	ands.w	r1, r1, #1
   b7148:	d10b      	bne.n	b7162 <pinAvailable+0x3a>
   b714a:	4620      	mov	r0, r4
   b714c:	9101      	str	r1, [sp, #4]
   b714e:	f7fc ffa8 	bl	b40a2 <__cxa_guard_acquire>
   b7152:	9901      	ldr	r1, [sp, #4]
   b7154:	b128      	cbz	r0, b7162 <pinAvailable+0x3a>
   b7156:	4812      	ldr	r0, [pc, #72]	; (b71a0 <pinAvailable+0x78>)
   b7158:	f7fe ff1a 	bl	b5f90 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b715c:	4620      	mov	r0, r4
   b715e:	f7fc ffa5 	bl	b40ac <__cxa_guard_release>
   b7162:	4b0f      	ldr	r3, [pc, #60]	; (b71a0 <pinAvailable+0x78>)
   b7164:	7818      	ldrb	r0, [r3, #0]
   b7166:	f7fe f8e7 	bl	b5338 <hal_spi_is_enabled>
   b716a:	2800      	cmp	r0, #0
   b716c:	d1df      	bne.n	b712e <pinAvailable+0x6>
  return true; // 'pin' is available
   b716e:	2001      	movs	r0, #1
   b7170:	e7de      	b.n	b7130 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7172:	2801      	cmp	r0, #1
   b7174:	d809      	bhi.n	b718a <pinAvailable+0x62>
   b7176:	f7ff ff73 	bl	b7060 <_Z19__fetch_global_Wirev>
   b717a:	2100      	movs	r1, #0
   b717c:	7c00      	ldrb	r0, [r0, #16]
   b717e:	f7fe f8c3 	bl	b5308 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7182:	f080 0001 	eor.w	r0, r0, #1
   b7186:	b2c0      	uxtb	r0, r0
   b7188:	e7d2      	b.n	b7130 <pinAvailable+0x8>
   b718a:	3809      	subs	r0, #9
   b718c:	2801      	cmp	r0, #1
   b718e:	d8ee      	bhi.n	b716e <pinAvailable+0x46>
   b7190:	f7ff ffa6 	bl	b70e0 <_Z22__fetch_global_Serial1v>
   b7194:	7c00      	ldrb	r0, [r0, #16]
   b7196:	f7fe f92f 	bl	b53f8 <hal_usart_is_enabled>
   b719a:	e7f2      	b.n	b7182 <pinAvailable+0x5a>
   b719c:	2003e750 	.word	0x2003e750
   b71a0:	2003e754 	.word	0x2003e754

000b71a4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b71a4:	2825      	cmp	r0, #37	; 0x25
{
   b71a6:	b538      	push	{r3, r4, r5, lr}
   b71a8:	4604      	mov	r4, r0
   b71aa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b71ac:	d80a      	bhi.n	b71c4 <pinMode+0x20>
   b71ae:	29ff      	cmp	r1, #255	; 0xff
   b71b0:	d008      	beq.n	b71c4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b71b2:	f7ff ffb9 	bl	b7128 <pinAvailable>
   b71b6:	b128      	cbz	r0, b71c4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b71b8:	4629      	mov	r1, r5
   b71ba:	4620      	mov	r0, r4
}
   b71bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b71c0:	f7fe b992 	b.w	b54e8 <HAL_Pin_Mode>
}
   b71c4:	bd38      	pop	{r3, r4, r5, pc}

000b71c6 <_ZnajRKSt9nothrow_t>:
   b71c6:	f7fc bf68 	b.w	b409a <_Znaj>

000b71ca <_ZSt25__throw_bad_function_callv>:
   b71ca:	b508      	push	{r3, lr}
   b71cc:	f7fe fb04 	bl	b57d8 <abort>

000b71d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b71d0:	4901      	ldr	r1, [pc, #4]	; (b71d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b71d2:	f000 b8f9 	b.w	b73c8 <_ZNKSt9type_infoeqERKS_>
   b71d6:	bf00      	nop
   b71d8:	000ba4a0 	.word	0x000ba4a0

000b71dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b71dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b71de:	2400      	movs	r4, #0
   b71e0:	2310      	movs	r3, #16
   b71e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b71e6:	6803      	ldr	r3, [r0, #0]
   b71e8:	4615      	mov	r5, r2
   b71ea:	699e      	ldr	r6, [r3, #24]
   b71ec:	6812      	ldr	r2, [r2, #0]
   b71ee:	466b      	mov	r3, sp
   b71f0:	e9cd 4400 	strd	r4, r4, [sp]
   b71f4:	47b0      	blx	r6
   b71f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b71fa:	f003 0306 	and.w	r3, r3, #6
   b71fe:	2b06      	cmp	r3, #6
   b7200:	bf03      	ittte	eq
   b7202:	9b00      	ldreq	r3, [sp, #0]
   b7204:	602b      	streq	r3, [r5, #0]
   b7206:	2001      	moveq	r0, #1
   b7208:	4620      	movne	r0, r4
   b720a:	b004      	add	sp, #16
   b720c:	bd70      	pop	{r4, r5, r6, pc}

000b720e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b720e:	9800      	ldr	r0, [sp, #0]
   b7210:	4290      	cmp	r0, r2
   b7212:	bf14      	ite	ne
   b7214:	2001      	movne	r0, #1
   b7216:	2006      	moveq	r0, #6
   b7218:	4770      	bx	lr
	...

000b721c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b721c:	b510      	push	{r4, lr}
   b721e:	4b03      	ldr	r3, [pc, #12]	; (b722c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7220:	6003      	str	r3, [r0, #0]
   b7222:	4604      	mov	r4, r0
   b7224:	f000 f8cd 	bl	b73c2 <_ZNSt9type_infoD1Ev>
   b7228:	4620      	mov	r0, r4
   b722a:	bd10      	pop	{r4, pc}
   b722c:	000ba4e0 	.word	0x000ba4e0

000b7230 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7230:	b510      	push	{r4, lr}
   b7232:	4604      	mov	r4, r0
   b7234:	f7ff fff2 	bl	b721c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7238:	4620      	mov	r0, r4
   b723a:	2108      	movs	r1, #8
   b723c:	f7fc ff2f 	bl	b409e <_ZdlPvj>
   b7240:	4620      	mov	r0, r4
   b7242:	bd10      	pop	{r4, pc}

000b7244 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7248:	461f      	mov	r7, r3
   b724a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b724e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7252:	4598      	cmp	r8, r3
   b7254:	4606      	mov	r6, r0
   b7256:	4615      	mov	r5, r2
   b7258:	d107      	bne.n	b726a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b725a:	9907      	ldr	r1, [sp, #28]
   b725c:	f000 f8b4 	bl	b73c8 <_ZNKSt9type_infoeqERKS_>
   b7260:	b118      	cbz	r0, b726a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7262:	7165      	strb	r5, [r4, #5]
   b7264:	2000      	movs	r0, #0
   b7266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b726a:	4639      	mov	r1, r7
   b726c:	4630      	mov	r0, r6
   b726e:	f000 f8ab 	bl	b73c8 <_ZNKSt9type_infoeqERKS_>
   b7272:	2800      	cmp	r0, #0
   b7274:	d0f6      	beq.n	b7264 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7276:	2301      	movs	r3, #1
   b7278:	f8c4 8000 	str.w	r8, [r4]
   b727c:	7125      	strb	r5, [r4, #4]
   b727e:	71a3      	strb	r3, [r4, #6]
   b7280:	e7f0      	b.n	b7264 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7282 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7282:	b538      	push	{r3, r4, r5, lr}
   b7284:	4615      	mov	r5, r2
   b7286:	461c      	mov	r4, r3
   b7288:	f000 f89e 	bl	b73c8 <_ZNKSt9type_infoeqERKS_>
   b728c:	b120      	cbz	r0, b7298 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b728e:	2308      	movs	r3, #8
   b7290:	60e3      	str	r3, [r4, #12]
   b7292:	2306      	movs	r3, #6
   b7294:	6025      	str	r5, [r4, #0]
   b7296:	7123      	strb	r3, [r4, #4]
   b7298:	bd38      	pop	{r3, r4, r5, pc}

000b729a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b729a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b729c:	4605      	mov	r5, r0
   b729e:	460c      	mov	r4, r1
   b72a0:	9201      	str	r2, [sp, #4]
   b72a2:	461e      	mov	r6, r3
   b72a4:	f000 f890 	bl	b73c8 <_ZNKSt9type_infoeqERKS_>
   b72a8:	b950      	cbnz	r0, b72c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b72aa:	2e03      	cmp	r6, #3
   b72ac:	d808      	bhi.n	b72c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b72ae:	6823      	ldr	r3, [r4, #0]
   b72b0:	9a01      	ldr	r2, [sp, #4]
   b72b2:	695b      	ldr	r3, [r3, #20]
   b72b4:	4629      	mov	r1, r5
   b72b6:	4620      	mov	r0, r4
   b72b8:	b002      	add	sp, #8
   b72ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b72be:	4718      	bx	r3
   b72c0:	b002      	add	sp, #8
   b72c2:	bd70      	pop	{r4, r5, r6, pc}

000b72c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b72c4:	b510      	push	{r4, lr}
   b72c6:	4b03      	ldr	r3, [pc, #12]	; (b72d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b72c8:	6003      	str	r3, [r0, #0]
   b72ca:	4604      	mov	r4, r0
   b72cc:	f7ff ffa6 	bl	b721c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b72d0:	4620      	mov	r0, r4
   b72d2:	bd10      	pop	{r4, pc}
   b72d4:	000ba540 	.word	0x000ba540

000b72d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b72d8:	b510      	push	{r4, lr}
   b72da:	4604      	mov	r4, r0
   b72dc:	f7ff fff2 	bl	b72c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b72e0:	4620      	mov	r0, r4
   b72e2:	210c      	movs	r1, #12
   b72e4:	f7fc fedb 	bl	b409e <_ZdlPvj>
   b72e8:	4620      	mov	r0, r4
   b72ea:	bd10      	pop	{r4, pc}

000b72ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b72ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b72ee:	9f08      	ldr	r7, [sp, #32]
   b72f0:	4297      	cmp	r7, r2
   b72f2:	4605      	mov	r5, r0
   b72f4:	460e      	mov	r6, r1
   b72f6:	4614      	mov	r4, r2
   b72f8:	d00a      	beq.n	b7310 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b72fa:	68a8      	ldr	r0, [r5, #8]
   b72fc:	6802      	ldr	r2, [r0, #0]
   b72fe:	9708      	str	r7, [sp, #32]
   b7300:	6a15      	ldr	r5, [r2, #32]
   b7302:	4631      	mov	r1, r6
   b7304:	4622      	mov	r2, r4
   b7306:	46ac      	mov	ip, r5
   b7308:	b003      	add	sp, #12
   b730a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b730e:	4760      	bx	ip
   b7310:	4619      	mov	r1, r3
   b7312:	9301      	str	r3, [sp, #4]
   b7314:	f000 f858 	bl	b73c8 <_ZNKSt9type_infoeqERKS_>
   b7318:	9b01      	ldr	r3, [sp, #4]
   b731a:	2800      	cmp	r0, #0
   b731c:	d0ed      	beq.n	b72fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b731e:	2006      	movs	r0, #6
   b7320:	b003      	add	sp, #12
   b7322:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7324 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7324:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7328:	460d      	mov	r5, r1
   b732a:	4619      	mov	r1, r3
   b732c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7330:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7334:	4681      	mov	r9, r0
   b7336:	4617      	mov	r7, r2
   b7338:	4698      	mov	r8, r3
   b733a:	f000 f845 	bl	b73c8 <_ZNKSt9type_infoeqERKS_>
   b733e:	b190      	cbz	r0, b7366 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7340:	2d00      	cmp	r5, #0
   b7342:	6034      	str	r4, [r6, #0]
   b7344:	7137      	strb	r7, [r6, #4]
   b7346:	db09      	blt.n	b735c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7348:	1961      	adds	r1, r4, r5
   b734a:	458a      	cmp	sl, r1
   b734c:	bf0c      	ite	eq
   b734e:	2106      	moveq	r1, #6
   b7350:	2101      	movne	r1, #1
   b7352:	71b1      	strb	r1, [r6, #6]
   b7354:	2000      	movs	r0, #0
   b7356:	b001      	add	sp, #4
   b7358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b735c:	3502      	adds	r5, #2
   b735e:	d1f9      	bne.n	b7354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7360:	2301      	movs	r3, #1
   b7362:	71b3      	strb	r3, [r6, #6]
   b7364:	e7f6      	b.n	b7354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7366:	4554      	cmp	r4, sl
   b7368:	d106      	bne.n	b7378 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b736a:	4659      	mov	r1, fp
   b736c:	4648      	mov	r0, r9
   b736e:	f000 f82b 	bl	b73c8 <_ZNKSt9type_infoeqERKS_>
   b7372:	b108      	cbz	r0, b7378 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7374:	7177      	strb	r7, [r6, #5]
   b7376:	e7ed      	b.n	b7354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7378:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b737c:	6803      	ldr	r3, [r0, #0]
   b737e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7382:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7386:	69dc      	ldr	r4, [r3, #28]
   b7388:	463a      	mov	r2, r7
   b738a:	4643      	mov	r3, r8
   b738c:	4629      	mov	r1, r5
   b738e:	46a4      	mov	ip, r4
   b7390:	b001      	add	sp, #4
   b7392:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7396:	4760      	bx	ip

000b7398 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b739c:	4607      	mov	r7, r0
   b739e:	460c      	mov	r4, r1
   b73a0:	4615      	mov	r5, r2
   b73a2:	461e      	mov	r6, r3
   b73a4:	f7ff ff6d 	bl	b7282 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b73a8:	b948      	cbnz	r0, b73be <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b73aa:	68b8      	ldr	r0, [r7, #8]
   b73ac:	6803      	ldr	r3, [r0, #0]
   b73ae:	699f      	ldr	r7, [r3, #24]
   b73b0:	462a      	mov	r2, r5
   b73b2:	4633      	mov	r3, r6
   b73b4:	4621      	mov	r1, r4
   b73b6:	46bc      	mov	ip, r7
   b73b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b73bc:	4760      	bx	ip
   b73be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b73c2 <_ZNSt9type_infoD1Ev>:
   b73c2:	4770      	bx	lr

000b73c4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b73c4:	2000      	movs	r0, #0
   b73c6:	4770      	bx	lr

000b73c8 <_ZNKSt9type_infoeqERKS_>:
   b73c8:	4281      	cmp	r1, r0
   b73ca:	b508      	push	{r3, lr}
   b73cc:	d00e      	beq.n	b73ec <_ZNKSt9type_infoeqERKS_+0x24>
   b73ce:	6840      	ldr	r0, [r0, #4]
   b73d0:	7803      	ldrb	r3, [r0, #0]
   b73d2:	2b2a      	cmp	r3, #42	; 0x2a
   b73d4:	d00c      	beq.n	b73f0 <_ZNKSt9type_infoeqERKS_+0x28>
   b73d6:	6849      	ldr	r1, [r1, #4]
   b73d8:	780b      	ldrb	r3, [r1, #0]
   b73da:	2b2a      	cmp	r3, #42	; 0x2a
   b73dc:	bf08      	it	eq
   b73de:	3101      	addeq	r1, #1
   b73e0:	f000 fd3e 	bl	b7e60 <strcmp>
   b73e4:	fab0 f080 	clz	r0, r0
   b73e8:	0940      	lsrs	r0, r0, #5
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	2001      	movs	r0, #1
   b73ee:	e7fc      	b.n	b73ea <_ZNKSt9type_infoeqERKS_+0x22>
   b73f0:	2000      	movs	r0, #0
   b73f2:	e7fa      	b.n	b73ea <_ZNKSt9type_infoeqERKS_+0x22>

000b73f4 <__aeabi_drsub>:
   b73f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b73f8:	e002      	b.n	b7400 <__adddf3>
   b73fa:	bf00      	nop

000b73fc <__aeabi_dsub>:
   b73fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7400 <__adddf3>:
   b7400:	b530      	push	{r4, r5, lr}
   b7402:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7406:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b740a:	ea94 0f05 	teq	r4, r5
   b740e:	bf08      	it	eq
   b7410:	ea90 0f02 	teqeq	r0, r2
   b7414:	bf1f      	itttt	ne
   b7416:	ea54 0c00 	orrsne.w	ip, r4, r0
   b741a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b741e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7422:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7426:	f000 80e2 	beq.w	b75ee <__adddf3+0x1ee>
   b742a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b742e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7432:	bfb8      	it	lt
   b7434:	426d      	neglt	r5, r5
   b7436:	dd0c      	ble.n	b7452 <__adddf3+0x52>
   b7438:	442c      	add	r4, r5
   b743a:	ea80 0202 	eor.w	r2, r0, r2
   b743e:	ea81 0303 	eor.w	r3, r1, r3
   b7442:	ea82 0000 	eor.w	r0, r2, r0
   b7446:	ea83 0101 	eor.w	r1, r3, r1
   b744a:	ea80 0202 	eor.w	r2, r0, r2
   b744e:	ea81 0303 	eor.w	r3, r1, r3
   b7452:	2d36      	cmp	r5, #54	; 0x36
   b7454:	bf88      	it	hi
   b7456:	bd30      	pophi	{r4, r5, pc}
   b7458:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b745c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7460:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7464:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7468:	d002      	beq.n	b7470 <__adddf3+0x70>
   b746a:	4240      	negs	r0, r0
   b746c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7470:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7474:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7478:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b747c:	d002      	beq.n	b7484 <__adddf3+0x84>
   b747e:	4252      	negs	r2, r2
   b7480:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7484:	ea94 0f05 	teq	r4, r5
   b7488:	f000 80a7 	beq.w	b75da <__adddf3+0x1da>
   b748c:	f1a4 0401 	sub.w	r4, r4, #1
   b7490:	f1d5 0e20 	rsbs	lr, r5, #32
   b7494:	db0d      	blt.n	b74b2 <__adddf3+0xb2>
   b7496:	fa02 fc0e 	lsl.w	ip, r2, lr
   b749a:	fa22 f205 	lsr.w	r2, r2, r5
   b749e:	1880      	adds	r0, r0, r2
   b74a0:	f141 0100 	adc.w	r1, r1, #0
   b74a4:	fa03 f20e 	lsl.w	r2, r3, lr
   b74a8:	1880      	adds	r0, r0, r2
   b74aa:	fa43 f305 	asr.w	r3, r3, r5
   b74ae:	4159      	adcs	r1, r3
   b74b0:	e00e      	b.n	b74d0 <__adddf3+0xd0>
   b74b2:	f1a5 0520 	sub.w	r5, r5, #32
   b74b6:	f10e 0e20 	add.w	lr, lr, #32
   b74ba:	2a01      	cmp	r2, #1
   b74bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b74c0:	bf28      	it	cs
   b74c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b74c6:	fa43 f305 	asr.w	r3, r3, r5
   b74ca:	18c0      	adds	r0, r0, r3
   b74cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b74d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b74d4:	d507      	bpl.n	b74e6 <__adddf3+0xe6>
   b74d6:	f04f 0e00 	mov.w	lr, #0
   b74da:	f1dc 0c00 	rsbs	ip, ip, #0
   b74de:	eb7e 0000 	sbcs.w	r0, lr, r0
   b74e2:	eb6e 0101 	sbc.w	r1, lr, r1
   b74e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b74ea:	d31b      	bcc.n	b7524 <__adddf3+0x124>
   b74ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b74f0:	d30c      	bcc.n	b750c <__adddf3+0x10c>
   b74f2:	0849      	lsrs	r1, r1, #1
   b74f4:	ea5f 0030 	movs.w	r0, r0, rrx
   b74f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b74fc:	f104 0401 	add.w	r4, r4, #1
   b7500:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7504:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7508:	f080 809a 	bcs.w	b7640 <__adddf3+0x240>
   b750c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7510:	bf08      	it	eq
   b7512:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7516:	f150 0000 	adcs.w	r0, r0, #0
   b751a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b751e:	ea41 0105 	orr.w	r1, r1, r5
   b7522:	bd30      	pop	{r4, r5, pc}
   b7524:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7528:	4140      	adcs	r0, r0
   b752a:	eb41 0101 	adc.w	r1, r1, r1
   b752e:	3c01      	subs	r4, #1
   b7530:	bf28      	it	cs
   b7532:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7536:	d2e9      	bcs.n	b750c <__adddf3+0x10c>
   b7538:	f091 0f00 	teq	r1, #0
   b753c:	bf04      	itt	eq
   b753e:	4601      	moveq	r1, r0
   b7540:	2000      	moveq	r0, #0
   b7542:	fab1 f381 	clz	r3, r1
   b7546:	bf08      	it	eq
   b7548:	3320      	addeq	r3, #32
   b754a:	f1a3 030b 	sub.w	r3, r3, #11
   b754e:	f1b3 0220 	subs.w	r2, r3, #32
   b7552:	da0c      	bge.n	b756e <__adddf3+0x16e>
   b7554:	320c      	adds	r2, #12
   b7556:	dd08      	ble.n	b756a <__adddf3+0x16a>
   b7558:	f102 0c14 	add.w	ip, r2, #20
   b755c:	f1c2 020c 	rsb	r2, r2, #12
   b7560:	fa01 f00c 	lsl.w	r0, r1, ip
   b7564:	fa21 f102 	lsr.w	r1, r1, r2
   b7568:	e00c      	b.n	b7584 <__adddf3+0x184>
   b756a:	f102 0214 	add.w	r2, r2, #20
   b756e:	bfd8      	it	le
   b7570:	f1c2 0c20 	rsble	ip, r2, #32
   b7574:	fa01 f102 	lsl.w	r1, r1, r2
   b7578:	fa20 fc0c 	lsr.w	ip, r0, ip
   b757c:	bfdc      	itt	le
   b757e:	ea41 010c 	orrle.w	r1, r1, ip
   b7582:	4090      	lslle	r0, r2
   b7584:	1ae4      	subs	r4, r4, r3
   b7586:	bfa2      	ittt	ge
   b7588:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b758c:	4329      	orrge	r1, r5
   b758e:	bd30      	popge	{r4, r5, pc}
   b7590:	ea6f 0404 	mvn.w	r4, r4
   b7594:	3c1f      	subs	r4, #31
   b7596:	da1c      	bge.n	b75d2 <__adddf3+0x1d2>
   b7598:	340c      	adds	r4, #12
   b759a:	dc0e      	bgt.n	b75ba <__adddf3+0x1ba>
   b759c:	f104 0414 	add.w	r4, r4, #20
   b75a0:	f1c4 0220 	rsb	r2, r4, #32
   b75a4:	fa20 f004 	lsr.w	r0, r0, r4
   b75a8:	fa01 f302 	lsl.w	r3, r1, r2
   b75ac:	ea40 0003 	orr.w	r0, r0, r3
   b75b0:	fa21 f304 	lsr.w	r3, r1, r4
   b75b4:	ea45 0103 	orr.w	r1, r5, r3
   b75b8:	bd30      	pop	{r4, r5, pc}
   b75ba:	f1c4 040c 	rsb	r4, r4, #12
   b75be:	f1c4 0220 	rsb	r2, r4, #32
   b75c2:	fa20 f002 	lsr.w	r0, r0, r2
   b75c6:	fa01 f304 	lsl.w	r3, r1, r4
   b75ca:	ea40 0003 	orr.w	r0, r0, r3
   b75ce:	4629      	mov	r1, r5
   b75d0:	bd30      	pop	{r4, r5, pc}
   b75d2:	fa21 f004 	lsr.w	r0, r1, r4
   b75d6:	4629      	mov	r1, r5
   b75d8:	bd30      	pop	{r4, r5, pc}
   b75da:	f094 0f00 	teq	r4, #0
   b75de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b75e2:	bf06      	itte	eq
   b75e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b75e8:	3401      	addeq	r4, #1
   b75ea:	3d01      	subne	r5, #1
   b75ec:	e74e      	b.n	b748c <__adddf3+0x8c>
   b75ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b75f2:	bf18      	it	ne
   b75f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b75f8:	d029      	beq.n	b764e <__adddf3+0x24e>
   b75fa:	ea94 0f05 	teq	r4, r5
   b75fe:	bf08      	it	eq
   b7600:	ea90 0f02 	teqeq	r0, r2
   b7604:	d005      	beq.n	b7612 <__adddf3+0x212>
   b7606:	ea54 0c00 	orrs.w	ip, r4, r0
   b760a:	bf04      	itt	eq
   b760c:	4619      	moveq	r1, r3
   b760e:	4610      	moveq	r0, r2
   b7610:	bd30      	pop	{r4, r5, pc}
   b7612:	ea91 0f03 	teq	r1, r3
   b7616:	bf1e      	ittt	ne
   b7618:	2100      	movne	r1, #0
   b761a:	2000      	movne	r0, #0
   b761c:	bd30      	popne	{r4, r5, pc}
   b761e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7622:	d105      	bne.n	b7630 <__adddf3+0x230>
   b7624:	0040      	lsls	r0, r0, #1
   b7626:	4149      	adcs	r1, r1
   b7628:	bf28      	it	cs
   b762a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b762e:	bd30      	pop	{r4, r5, pc}
   b7630:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7634:	bf3c      	itt	cc
   b7636:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b763a:	bd30      	popcc	{r4, r5, pc}
   b763c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7640:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7648:	f04f 0000 	mov.w	r0, #0
   b764c:	bd30      	pop	{r4, r5, pc}
   b764e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7652:	bf1a      	itte	ne
   b7654:	4619      	movne	r1, r3
   b7656:	4610      	movne	r0, r2
   b7658:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b765c:	bf1c      	itt	ne
   b765e:	460b      	movne	r3, r1
   b7660:	4602      	movne	r2, r0
   b7662:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7666:	bf06      	itte	eq
   b7668:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b766c:	ea91 0f03 	teqeq	r1, r3
   b7670:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7674:	bd30      	pop	{r4, r5, pc}
   b7676:	bf00      	nop

000b7678 <__aeabi_ui2d>:
   b7678:	f090 0f00 	teq	r0, #0
   b767c:	bf04      	itt	eq
   b767e:	2100      	moveq	r1, #0
   b7680:	4770      	bxeq	lr
   b7682:	b530      	push	{r4, r5, lr}
   b7684:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7688:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b768c:	f04f 0500 	mov.w	r5, #0
   b7690:	f04f 0100 	mov.w	r1, #0
   b7694:	e750      	b.n	b7538 <__adddf3+0x138>
   b7696:	bf00      	nop

000b7698 <__aeabi_i2d>:
   b7698:	f090 0f00 	teq	r0, #0
   b769c:	bf04      	itt	eq
   b769e:	2100      	moveq	r1, #0
   b76a0:	4770      	bxeq	lr
   b76a2:	b530      	push	{r4, r5, lr}
   b76a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b76a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b76ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b76b0:	bf48      	it	mi
   b76b2:	4240      	negmi	r0, r0
   b76b4:	f04f 0100 	mov.w	r1, #0
   b76b8:	e73e      	b.n	b7538 <__adddf3+0x138>
   b76ba:	bf00      	nop

000b76bc <__aeabi_f2d>:
   b76bc:	0042      	lsls	r2, r0, #1
   b76be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b76c2:	ea4f 0131 	mov.w	r1, r1, rrx
   b76c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b76ca:	bf1f      	itttt	ne
   b76cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b76d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b76d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b76d8:	4770      	bxne	lr
   b76da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b76de:	bf08      	it	eq
   b76e0:	4770      	bxeq	lr
   b76e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b76e6:	bf04      	itt	eq
   b76e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b76ec:	4770      	bxeq	lr
   b76ee:	b530      	push	{r4, r5, lr}
   b76f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b76f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b76f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b76fc:	e71c      	b.n	b7538 <__adddf3+0x138>
   b76fe:	bf00      	nop

000b7700 <__aeabi_ul2d>:
   b7700:	ea50 0201 	orrs.w	r2, r0, r1
   b7704:	bf08      	it	eq
   b7706:	4770      	bxeq	lr
   b7708:	b530      	push	{r4, r5, lr}
   b770a:	f04f 0500 	mov.w	r5, #0
   b770e:	e00a      	b.n	b7726 <__aeabi_l2d+0x16>

000b7710 <__aeabi_l2d>:
   b7710:	ea50 0201 	orrs.w	r2, r0, r1
   b7714:	bf08      	it	eq
   b7716:	4770      	bxeq	lr
   b7718:	b530      	push	{r4, r5, lr}
   b771a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b771e:	d502      	bpl.n	b7726 <__aeabi_l2d+0x16>
   b7720:	4240      	negs	r0, r0
   b7722:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7726:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b772a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b772e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7732:	f43f aed8 	beq.w	b74e6 <__adddf3+0xe6>
   b7736:	f04f 0203 	mov.w	r2, #3
   b773a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b773e:	bf18      	it	ne
   b7740:	3203      	addne	r2, #3
   b7742:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7746:	bf18      	it	ne
   b7748:	3203      	addne	r2, #3
   b774a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b774e:	f1c2 0320 	rsb	r3, r2, #32
   b7752:	fa00 fc03 	lsl.w	ip, r0, r3
   b7756:	fa20 f002 	lsr.w	r0, r0, r2
   b775a:	fa01 fe03 	lsl.w	lr, r1, r3
   b775e:	ea40 000e 	orr.w	r0, r0, lr
   b7762:	fa21 f102 	lsr.w	r1, r1, r2
   b7766:	4414      	add	r4, r2
   b7768:	e6bd      	b.n	b74e6 <__adddf3+0xe6>
   b776a:	bf00      	nop

000b776c <__aeabi_dmul>:
   b776c:	b570      	push	{r4, r5, r6, lr}
   b776e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b777a:	bf1d      	ittte	ne
   b777c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7780:	ea94 0f0c 	teqne	r4, ip
   b7784:	ea95 0f0c 	teqne	r5, ip
   b7788:	f000 f8de 	bleq	b7948 <__aeabi_dmul+0x1dc>
   b778c:	442c      	add	r4, r5
   b778e:	ea81 0603 	eor.w	r6, r1, r3
   b7792:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7796:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b779a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b779e:	bf18      	it	ne
   b77a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b77a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b77a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b77ac:	d038      	beq.n	b7820 <__aeabi_dmul+0xb4>
   b77ae:	fba0 ce02 	umull	ip, lr, r0, r2
   b77b2:	f04f 0500 	mov.w	r5, #0
   b77b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b77ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b77be:	fbe0 e503 	umlal	lr, r5, r0, r3
   b77c2:	f04f 0600 	mov.w	r6, #0
   b77c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b77ca:	f09c 0f00 	teq	ip, #0
   b77ce:	bf18      	it	ne
   b77d0:	f04e 0e01 	orrne.w	lr, lr, #1
   b77d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b77d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b77dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b77e0:	d204      	bcs.n	b77ec <__aeabi_dmul+0x80>
   b77e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b77e6:	416d      	adcs	r5, r5
   b77e8:	eb46 0606 	adc.w	r6, r6, r6
   b77ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b77f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b77f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b77f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b77fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7800:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7804:	bf88      	it	hi
   b7806:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b780a:	d81e      	bhi.n	b784a <__aeabi_dmul+0xde>
   b780c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7810:	bf08      	it	eq
   b7812:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7816:	f150 0000 	adcs.w	r0, r0, #0
   b781a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b781e:	bd70      	pop	{r4, r5, r6, pc}
   b7820:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7824:	ea46 0101 	orr.w	r1, r6, r1
   b7828:	ea40 0002 	orr.w	r0, r0, r2
   b782c:	ea81 0103 	eor.w	r1, r1, r3
   b7830:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7834:	bfc2      	ittt	gt
   b7836:	ebd4 050c 	rsbsgt	r5, r4, ip
   b783a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b783e:	bd70      	popgt	{r4, r5, r6, pc}
   b7840:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7844:	f04f 0e00 	mov.w	lr, #0
   b7848:	3c01      	subs	r4, #1
   b784a:	f300 80ab 	bgt.w	b79a4 <__aeabi_dmul+0x238>
   b784e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7852:	bfde      	ittt	le
   b7854:	2000      	movle	r0, #0
   b7856:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b785a:	bd70      	pople	{r4, r5, r6, pc}
   b785c:	f1c4 0400 	rsb	r4, r4, #0
   b7860:	3c20      	subs	r4, #32
   b7862:	da35      	bge.n	b78d0 <__aeabi_dmul+0x164>
   b7864:	340c      	adds	r4, #12
   b7866:	dc1b      	bgt.n	b78a0 <__aeabi_dmul+0x134>
   b7868:	f104 0414 	add.w	r4, r4, #20
   b786c:	f1c4 0520 	rsb	r5, r4, #32
   b7870:	fa00 f305 	lsl.w	r3, r0, r5
   b7874:	fa20 f004 	lsr.w	r0, r0, r4
   b7878:	fa01 f205 	lsl.w	r2, r1, r5
   b787c:	ea40 0002 	orr.w	r0, r0, r2
   b7880:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7884:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7888:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b788c:	fa21 f604 	lsr.w	r6, r1, r4
   b7890:	eb42 0106 	adc.w	r1, r2, r6
   b7894:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7898:	bf08      	it	eq
   b789a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b789e:	bd70      	pop	{r4, r5, r6, pc}
   b78a0:	f1c4 040c 	rsb	r4, r4, #12
   b78a4:	f1c4 0520 	rsb	r5, r4, #32
   b78a8:	fa00 f304 	lsl.w	r3, r0, r4
   b78ac:	fa20 f005 	lsr.w	r0, r0, r5
   b78b0:	fa01 f204 	lsl.w	r2, r1, r4
   b78b4:	ea40 0002 	orr.w	r0, r0, r2
   b78b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b78bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b78c0:	f141 0100 	adc.w	r1, r1, #0
   b78c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b78c8:	bf08      	it	eq
   b78ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b78ce:	bd70      	pop	{r4, r5, r6, pc}
   b78d0:	f1c4 0520 	rsb	r5, r4, #32
   b78d4:	fa00 f205 	lsl.w	r2, r0, r5
   b78d8:	ea4e 0e02 	orr.w	lr, lr, r2
   b78dc:	fa20 f304 	lsr.w	r3, r0, r4
   b78e0:	fa01 f205 	lsl.w	r2, r1, r5
   b78e4:	ea43 0302 	orr.w	r3, r3, r2
   b78e8:	fa21 f004 	lsr.w	r0, r1, r4
   b78ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b78f0:	fa21 f204 	lsr.w	r2, r1, r4
   b78f4:	ea20 0002 	bic.w	r0, r0, r2
   b78f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b78fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7900:	bf08      	it	eq
   b7902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7906:	bd70      	pop	{r4, r5, r6, pc}
   b7908:	f094 0f00 	teq	r4, #0
   b790c:	d10f      	bne.n	b792e <__aeabi_dmul+0x1c2>
   b790e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7912:	0040      	lsls	r0, r0, #1
   b7914:	eb41 0101 	adc.w	r1, r1, r1
   b7918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b791c:	bf08      	it	eq
   b791e:	3c01      	subeq	r4, #1
   b7920:	d0f7      	beq.n	b7912 <__aeabi_dmul+0x1a6>
   b7922:	ea41 0106 	orr.w	r1, r1, r6
   b7926:	f095 0f00 	teq	r5, #0
   b792a:	bf18      	it	ne
   b792c:	4770      	bxne	lr
   b792e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7932:	0052      	lsls	r2, r2, #1
   b7934:	eb43 0303 	adc.w	r3, r3, r3
   b7938:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b793c:	bf08      	it	eq
   b793e:	3d01      	subeq	r5, #1
   b7940:	d0f7      	beq.n	b7932 <__aeabi_dmul+0x1c6>
   b7942:	ea43 0306 	orr.w	r3, r3, r6
   b7946:	4770      	bx	lr
   b7948:	ea94 0f0c 	teq	r4, ip
   b794c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7950:	bf18      	it	ne
   b7952:	ea95 0f0c 	teqne	r5, ip
   b7956:	d00c      	beq.n	b7972 <__aeabi_dmul+0x206>
   b7958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b795c:	bf18      	it	ne
   b795e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7962:	d1d1      	bne.n	b7908 <__aeabi_dmul+0x19c>
   b7964:	ea81 0103 	eor.w	r1, r1, r3
   b7968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b796c:	f04f 0000 	mov.w	r0, #0
   b7970:	bd70      	pop	{r4, r5, r6, pc}
   b7972:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7976:	bf06      	itte	eq
   b7978:	4610      	moveq	r0, r2
   b797a:	4619      	moveq	r1, r3
   b797c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7980:	d019      	beq.n	b79b6 <__aeabi_dmul+0x24a>
   b7982:	ea94 0f0c 	teq	r4, ip
   b7986:	d102      	bne.n	b798e <__aeabi_dmul+0x222>
   b7988:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b798c:	d113      	bne.n	b79b6 <__aeabi_dmul+0x24a>
   b798e:	ea95 0f0c 	teq	r5, ip
   b7992:	d105      	bne.n	b79a0 <__aeabi_dmul+0x234>
   b7994:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7998:	bf1c      	itt	ne
   b799a:	4610      	movne	r0, r2
   b799c:	4619      	movne	r1, r3
   b799e:	d10a      	bne.n	b79b6 <__aeabi_dmul+0x24a>
   b79a0:	ea81 0103 	eor.w	r1, r1, r3
   b79a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b79a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b79ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b79b0:	f04f 0000 	mov.w	r0, #0
   b79b4:	bd70      	pop	{r4, r5, r6, pc}
   b79b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b79ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b79be:	bd70      	pop	{r4, r5, r6, pc}

000b79c0 <__aeabi_ddiv>:
   b79c0:	b570      	push	{r4, r5, r6, lr}
   b79c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b79c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b79ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b79ce:	bf1d      	ittte	ne
   b79d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b79d4:	ea94 0f0c 	teqne	r4, ip
   b79d8:	ea95 0f0c 	teqne	r5, ip
   b79dc:	f000 f8a7 	bleq	b7b2e <__aeabi_ddiv+0x16e>
   b79e0:	eba4 0405 	sub.w	r4, r4, r5
   b79e4:	ea81 0e03 	eor.w	lr, r1, r3
   b79e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b79ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b79f0:	f000 8088 	beq.w	b7b04 <__aeabi_ddiv+0x144>
   b79f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b79f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b79fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7a00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7a04:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7a08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7a0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7a10:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7a14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7a18:	429d      	cmp	r5, r3
   b7a1a:	bf08      	it	eq
   b7a1c:	4296      	cmpeq	r6, r2
   b7a1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7a22:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7a26:	d202      	bcs.n	b7a2e <__aeabi_ddiv+0x6e>
   b7a28:	085b      	lsrs	r3, r3, #1
   b7a2a:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a2e:	1ab6      	subs	r6, r6, r2
   b7a30:	eb65 0503 	sbc.w	r5, r5, r3
   b7a34:	085b      	lsrs	r3, r3, #1
   b7a36:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7a3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7a42:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a46:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a4a:	bf22      	ittt	cs
   b7a4c:	1ab6      	subcs	r6, r6, r2
   b7a4e:	4675      	movcs	r5, lr
   b7a50:	ea40 000c 	orrcs.w	r0, r0, ip
   b7a54:	085b      	lsrs	r3, r3, #1
   b7a56:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a5a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a62:	bf22      	ittt	cs
   b7a64:	1ab6      	subcs	r6, r6, r2
   b7a66:	4675      	movcs	r5, lr
   b7a68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7a6c:	085b      	lsrs	r3, r3, #1
   b7a6e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a72:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a76:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a7a:	bf22      	ittt	cs
   b7a7c:	1ab6      	subcs	r6, r6, r2
   b7a7e:	4675      	movcs	r5, lr
   b7a80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7a84:	085b      	lsrs	r3, r3, #1
   b7a86:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a8a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a92:	bf22      	ittt	cs
   b7a94:	1ab6      	subcs	r6, r6, r2
   b7a96:	4675      	movcs	r5, lr
   b7a98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7a9c:	ea55 0e06 	orrs.w	lr, r5, r6
   b7aa0:	d018      	beq.n	b7ad4 <__aeabi_ddiv+0x114>
   b7aa2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7aa6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7aaa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7aae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7ab2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7ab6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7aba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7abe:	d1c0      	bne.n	b7a42 <__aeabi_ddiv+0x82>
   b7ac0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7ac4:	d10b      	bne.n	b7ade <__aeabi_ddiv+0x11e>
   b7ac6:	ea41 0100 	orr.w	r1, r1, r0
   b7aca:	f04f 0000 	mov.w	r0, #0
   b7ace:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7ad2:	e7b6      	b.n	b7a42 <__aeabi_ddiv+0x82>
   b7ad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7ad8:	bf04      	itt	eq
   b7ada:	4301      	orreq	r1, r0
   b7adc:	2000      	moveq	r0, #0
   b7ade:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7ae2:	bf88      	it	hi
   b7ae4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7ae8:	f63f aeaf 	bhi.w	b784a <__aeabi_dmul+0xde>
   b7aec:	ebb5 0c03 	subs.w	ip, r5, r3
   b7af0:	bf04      	itt	eq
   b7af2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7af6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7afa:	f150 0000 	adcs.w	r0, r0, #0
   b7afe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7b02:	bd70      	pop	{r4, r5, r6, pc}
   b7b04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7b08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7b0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7b10:	bfc2      	ittt	gt
   b7b12:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7b16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7b1a:	bd70      	popgt	{r4, r5, r6, pc}
   b7b1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7b20:	f04f 0e00 	mov.w	lr, #0
   b7b24:	3c01      	subs	r4, #1
   b7b26:	e690      	b.n	b784a <__aeabi_dmul+0xde>
   b7b28:	ea45 0e06 	orr.w	lr, r5, r6
   b7b2c:	e68d      	b.n	b784a <__aeabi_dmul+0xde>
   b7b2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7b32:	ea94 0f0c 	teq	r4, ip
   b7b36:	bf08      	it	eq
   b7b38:	ea95 0f0c 	teqeq	r5, ip
   b7b3c:	f43f af3b 	beq.w	b79b6 <__aeabi_dmul+0x24a>
   b7b40:	ea94 0f0c 	teq	r4, ip
   b7b44:	d10a      	bne.n	b7b5c <__aeabi_ddiv+0x19c>
   b7b46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7b4a:	f47f af34 	bne.w	b79b6 <__aeabi_dmul+0x24a>
   b7b4e:	ea95 0f0c 	teq	r5, ip
   b7b52:	f47f af25 	bne.w	b79a0 <__aeabi_dmul+0x234>
   b7b56:	4610      	mov	r0, r2
   b7b58:	4619      	mov	r1, r3
   b7b5a:	e72c      	b.n	b79b6 <__aeabi_dmul+0x24a>
   b7b5c:	ea95 0f0c 	teq	r5, ip
   b7b60:	d106      	bne.n	b7b70 <__aeabi_ddiv+0x1b0>
   b7b62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7b66:	f43f aefd 	beq.w	b7964 <__aeabi_dmul+0x1f8>
   b7b6a:	4610      	mov	r0, r2
   b7b6c:	4619      	mov	r1, r3
   b7b6e:	e722      	b.n	b79b6 <__aeabi_dmul+0x24a>
   b7b70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7b74:	bf18      	it	ne
   b7b76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7b7a:	f47f aec5 	bne.w	b7908 <__aeabi_dmul+0x19c>
   b7b7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7b82:	f47f af0d 	bne.w	b79a0 <__aeabi_dmul+0x234>
   b7b86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7b8a:	f47f aeeb 	bne.w	b7964 <__aeabi_dmul+0x1f8>
   b7b8e:	e712      	b.n	b79b6 <__aeabi_dmul+0x24a>

000b7b90 <__gedf2>:
   b7b90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7b94:	e006      	b.n	b7ba4 <__cmpdf2+0x4>
   b7b96:	bf00      	nop

000b7b98 <__ledf2>:
   b7b98:	f04f 0c01 	mov.w	ip, #1
   b7b9c:	e002      	b.n	b7ba4 <__cmpdf2+0x4>
   b7b9e:	bf00      	nop

000b7ba0 <__cmpdf2>:
   b7ba0:	f04f 0c01 	mov.w	ip, #1
   b7ba4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7ba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7bb4:	bf18      	it	ne
   b7bb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7bba:	d01b      	beq.n	b7bf4 <__cmpdf2+0x54>
   b7bbc:	b001      	add	sp, #4
   b7bbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7bc2:	bf0c      	ite	eq
   b7bc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7bc8:	ea91 0f03 	teqne	r1, r3
   b7bcc:	bf02      	ittt	eq
   b7bce:	ea90 0f02 	teqeq	r0, r2
   b7bd2:	2000      	moveq	r0, #0
   b7bd4:	4770      	bxeq	lr
   b7bd6:	f110 0f00 	cmn.w	r0, #0
   b7bda:	ea91 0f03 	teq	r1, r3
   b7bde:	bf58      	it	pl
   b7be0:	4299      	cmppl	r1, r3
   b7be2:	bf08      	it	eq
   b7be4:	4290      	cmpeq	r0, r2
   b7be6:	bf2c      	ite	cs
   b7be8:	17d8      	asrcs	r0, r3, #31
   b7bea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7bee:	f040 0001 	orr.w	r0, r0, #1
   b7bf2:	4770      	bx	lr
   b7bf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7bfc:	d102      	bne.n	b7c04 <__cmpdf2+0x64>
   b7bfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7c02:	d107      	bne.n	b7c14 <__cmpdf2+0x74>
   b7c04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7c08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7c0c:	d1d6      	bne.n	b7bbc <__cmpdf2+0x1c>
   b7c0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7c12:	d0d3      	beq.n	b7bbc <__cmpdf2+0x1c>
   b7c14:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7c18:	4770      	bx	lr
   b7c1a:	bf00      	nop

000b7c1c <__aeabi_cdrcmple>:
   b7c1c:	4684      	mov	ip, r0
   b7c1e:	4610      	mov	r0, r2
   b7c20:	4662      	mov	r2, ip
   b7c22:	468c      	mov	ip, r1
   b7c24:	4619      	mov	r1, r3
   b7c26:	4663      	mov	r3, ip
   b7c28:	e000      	b.n	b7c2c <__aeabi_cdcmpeq>
   b7c2a:	bf00      	nop

000b7c2c <__aeabi_cdcmpeq>:
   b7c2c:	b501      	push	{r0, lr}
   b7c2e:	f7ff ffb7 	bl	b7ba0 <__cmpdf2>
   b7c32:	2800      	cmp	r0, #0
   b7c34:	bf48      	it	mi
   b7c36:	f110 0f00 	cmnmi.w	r0, #0
   b7c3a:	bd01      	pop	{r0, pc}

000b7c3c <__aeabi_dcmpeq>:
   b7c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c40:	f7ff fff4 	bl	b7c2c <__aeabi_cdcmpeq>
   b7c44:	bf0c      	ite	eq
   b7c46:	2001      	moveq	r0, #1
   b7c48:	2000      	movne	r0, #0
   b7c4a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c4e:	bf00      	nop

000b7c50 <__aeabi_dcmplt>:
   b7c50:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c54:	f7ff ffea 	bl	b7c2c <__aeabi_cdcmpeq>
   b7c58:	bf34      	ite	cc
   b7c5a:	2001      	movcc	r0, #1
   b7c5c:	2000      	movcs	r0, #0
   b7c5e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c62:	bf00      	nop

000b7c64 <__aeabi_dcmple>:
   b7c64:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c68:	f7ff ffe0 	bl	b7c2c <__aeabi_cdcmpeq>
   b7c6c:	bf94      	ite	ls
   b7c6e:	2001      	movls	r0, #1
   b7c70:	2000      	movhi	r0, #0
   b7c72:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c76:	bf00      	nop

000b7c78 <__aeabi_dcmpge>:
   b7c78:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c7c:	f7ff ffce 	bl	b7c1c <__aeabi_cdrcmple>
   b7c80:	bf94      	ite	ls
   b7c82:	2001      	movls	r0, #1
   b7c84:	2000      	movhi	r0, #0
   b7c86:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c8a:	bf00      	nop

000b7c8c <__aeabi_dcmpgt>:
   b7c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c90:	f7ff ffc4 	bl	b7c1c <__aeabi_cdrcmple>
   b7c94:	bf34      	ite	cc
   b7c96:	2001      	movcc	r0, #1
   b7c98:	2000      	movcs	r0, #0
   b7c9a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c9e:	bf00      	nop

000b7ca0 <__aeabi_d2uiz>:
   b7ca0:	004a      	lsls	r2, r1, #1
   b7ca2:	d211      	bcs.n	b7cc8 <__aeabi_d2uiz+0x28>
   b7ca4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7ca8:	d211      	bcs.n	b7cce <__aeabi_d2uiz+0x2e>
   b7caa:	d50d      	bpl.n	b7cc8 <__aeabi_d2uiz+0x28>
   b7cac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7cb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7cb4:	d40e      	bmi.n	b7cd4 <__aeabi_d2uiz+0x34>
   b7cb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7cbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7cc2:	fa23 f002 	lsr.w	r0, r3, r2
   b7cc6:	4770      	bx	lr
   b7cc8:	f04f 0000 	mov.w	r0, #0
   b7ccc:	4770      	bx	lr
   b7cce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7cd2:	d102      	bne.n	b7cda <__aeabi_d2uiz+0x3a>
   b7cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7cd8:	4770      	bx	lr
   b7cda:	f04f 0000 	mov.w	r0, #0
   b7cde:	4770      	bx	lr

000b7ce0 <__aeabi_d2f>:
   b7ce0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7ce4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7ce8:	bf24      	itt	cs
   b7cea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7cee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7cf2:	d90d      	bls.n	b7d10 <__aeabi_d2f+0x30>
   b7cf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7cf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7cfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7d00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7d04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7d08:	bf08      	it	eq
   b7d0a:	f020 0001 	biceq.w	r0, r0, #1
   b7d0e:	4770      	bx	lr
   b7d10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7d14:	d121      	bne.n	b7d5a <__aeabi_d2f+0x7a>
   b7d16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7d1a:	bfbc      	itt	lt
   b7d1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7d20:	4770      	bxlt	lr
   b7d22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7d26:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7d2a:	f1c2 0218 	rsb	r2, r2, #24
   b7d2e:	f1c2 0c20 	rsb	ip, r2, #32
   b7d32:	fa10 f30c 	lsls.w	r3, r0, ip
   b7d36:	fa20 f002 	lsr.w	r0, r0, r2
   b7d3a:	bf18      	it	ne
   b7d3c:	f040 0001 	orrne.w	r0, r0, #1
   b7d40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7d44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7d48:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7d4c:	ea40 000c 	orr.w	r0, r0, ip
   b7d50:	fa23 f302 	lsr.w	r3, r3, r2
   b7d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7d58:	e7cc      	b.n	b7cf4 <__aeabi_d2f+0x14>
   b7d5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7d5e:	d107      	bne.n	b7d70 <__aeabi_d2f+0x90>
   b7d60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7d64:	bf1e      	ittt	ne
   b7d66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7d6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7d6e:	4770      	bxne	lr
   b7d70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7d74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7d78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7d7c:	4770      	bx	lr
   b7d7e:	bf00      	nop

000b7d80 <__aeabi_d2ulz>:
   b7d80:	b5d0      	push	{r4, r6, r7, lr}
   b7d82:	4b0c      	ldr	r3, [pc, #48]	; (b7db4 <__aeabi_d2ulz+0x34>)
   b7d84:	2200      	movs	r2, #0
   b7d86:	4606      	mov	r6, r0
   b7d88:	460f      	mov	r7, r1
   b7d8a:	f7ff fcef 	bl	b776c <__aeabi_dmul>
   b7d8e:	f7ff ff87 	bl	b7ca0 <__aeabi_d2uiz>
   b7d92:	4604      	mov	r4, r0
   b7d94:	f7ff fc70 	bl	b7678 <__aeabi_ui2d>
   b7d98:	4b07      	ldr	r3, [pc, #28]	; (b7db8 <__aeabi_d2ulz+0x38>)
   b7d9a:	2200      	movs	r2, #0
   b7d9c:	f7ff fce6 	bl	b776c <__aeabi_dmul>
   b7da0:	4602      	mov	r2, r0
   b7da2:	460b      	mov	r3, r1
   b7da4:	4630      	mov	r0, r6
   b7da6:	4639      	mov	r1, r7
   b7da8:	f7ff fb28 	bl	b73fc <__aeabi_dsub>
   b7dac:	f7ff ff78 	bl	b7ca0 <__aeabi_d2uiz>
   b7db0:	4621      	mov	r1, r4
   b7db2:	bdd0      	pop	{r4, r6, r7, pc}
   b7db4:	3df00000 	.word	0x3df00000
   b7db8:	41f00000 	.word	0x41f00000

000b7dbc <atexit>:
   b7dbc:	2300      	movs	r3, #0
   b7dbe:	4601      	mov	r1, r0
   b7dc0:	461a      	mov	r2, r3
   b7dc2:	4618      	mov	r0, r3
   b7dc4:	f000 bf66 	b.w	b8c94 <__register_exitproc>

000b7dc8 <atof>:
   b7dc8:	2100      	movs	r1, #0
   b7dca:	f000 becb 	b.w	b8b64 <strtod>

000b7dce <atol>:
   b7dce:	220a      	movs	r2, #10
   b7dd0:	2100      	movs	r1, #0
   b7dd2:	f000 bf55 	b.w	b8c80 <strtol>

000b7dd6 <memcpy>:
   b7dd6:	440a      	add	r2, r1
   b7dd8:	4291      	cmp	r1, r2
   b7dda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7dde:	d100      	bne.n	b7de2 <memcpy+0xc>
   b7de0:	4770      	bx	lr
   b7de2:	b510      	push	{r4, lr}
   b7de4:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7de8:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7dec:	4291      	cmp	r1, r2
   b7dee:	d1f9      	bne.n	b7de4 <memcpy+0xe>
   b7df0:	bd10      	pop	{r4, pc}

000b7df2 <memset>:
   b7df2:	4402      	add	r2, r0
   b7df4:	4603      	mov	r3, r0
   b7df6:	4293      	cmp	r3, r2
   b7df8:	d100      	bne.n	b7dfc <memset+0xa>
   b7dfa:	4770      	bx	lr
   b7dfc:	f803 1b01 	strb.w	r1, [r3], #1
   b7e00:	e7f9      	b.n	b7df6 <memset+0x4>
	...

000b7e04 <srand>:
   b7e04:	b538      	push	{r3, r4, r5, lr}
   b7e06:	4b10      	ldr	r3, [pc, #64]	; (b7e48 <srand+0x44>)
   b7e08:	681d      	ldr	r5, [r3, #0]
   b7e0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7e0c:	4604      	mov	r4, r0
   b7e0e:	b9b3      	cbnz	r3, b7e3e <srand+0x3a>
   b7e10:	2018      	movs	r0, #24
   b7e12:	f7fd fcb1 	bl	b5778 <malloc>
   b7e16:	4602      	mov	r2, r0
   b7e18:	63a8      	str	r0, [r5, #56]	; 0x38
   b7e1a:	b920      	cbnz	r0, b7e26 <srand+0x22>
   b7e1c:	4b0b      	ldr	r3, [pc, #44]	; (b7e4c <srand+0x48>)
   b7e1e:	480c      	ldr	r0, [pc, #48]	; (b7e50 <srand+0x4c>)
   b7e20:	2142      	movs	r1, #66	; 0x42
   b7e22:	f7fd fcf1 	bl	b5808 <__assert_func>
   b7e26:	490b      	ldr	r1, [pc, #44]	; (b7e54 <srand+0x50>)
   b7e28:	4b0b      	ldr	r3, [pc, #44]	; (b7e58 <srand+0x54>)
   b7e2a:	e9c0 1300 	strd	r1, r3, [r0]
   b7e2e:	4b0b      	ldr	r3, [pc, #44]	; (b7e5c <srand+0x58>)
   b7e30:	6083      	str	r3, [r0, #8]
   b7e32:	230b      	movs	r3, #11
   b7e34:	8183      	strh	r3, [r0, #12]
   b7e36:	2100      	movs	r1, #0
   b7e38:	2001      	movs	r0, #1
   b7e3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7e3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7e40:	2200      	movs	r2, #0
   b7e42:	611c      	str	r4, [r3, #16]
   b7e44:	615a      	str	r2, [r3, #20]
   b7e46:	bd38      	pop	{r3, r4, r5, pc}
   b7e48:	2003e1d0 	.word	0x2003e1d0
   b7e4c:	000ba579 	.word	0x000ba579
   b7e50:	000ba590 	.word	0x000ba590
   b7e54:	abcd330e 	.word	0xabcd330e
   b7e58:	e66d1234 	.word	0xe66d1234
   b7e5c:	0005deec 	.word	0x0005deec

000b7e60 <strcmp>:
   b7e60:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7e64:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7e68:	2a01      	cmp	r2, #1
   b7e6a:	bf28      	it	cs
   b7e6c:	429a      	cmpcs	r2, r3
   b7e6e:	d0f7      	beq.n	b7e60 <strcmp>
   b7e70:	1ad0      	subs	r0, r2, r3
   b7e72:	4770      	bx	lr

000b7e74 <strcpy>:
   b7e74:	4603      	mov	r3, r0
   b7e76:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7e7a:	f803 2b01 	strb.w	r2, [r3], #1
   b7e7e:	2a00      	cmp	r2, #0
   b7e80:	d1f9      	bne.n	b7e76 <strcpy+0x2>
   b7e82:	4770      	bx	lr

000b7e84 <strdup>:
   b7e84:	4b02      	ldr	r3, [pc, #8]	; (b7e90 <strdup+0xc>)
   b7e86:	4601      	mov	r1, r0
   b7e88:	6818      	ldr	r0, [r3, #0]
   b7e8a:	f000 b803 	b.w	b7e94 <_strdup_r>
   b7e8e:	bf00      	nop
   b7e90:	2003e1d0 	.word	0x2003e1d0

000b7e94 <_strdup_r>:
   b7e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e96:	4604      	mov	r4, r0
   b7e98:	4608      	mov	r0, r1
   b7e9a:	460d      	mov	r5, r1
   b7e9c:	f000 f80f 	bl	b7ebe <strlen>
   b7ea0:	1c42      	adds	r2, r0, #1
   b7ea2:	4611      	mov	r1, r2
   b7ea4:	4620      	mov	r0, r4
   b7ea6:	9201      	str	r2, [sp, #4]
   b7ea8:	f7fd fc9e 	bl	b57e8 <_malloc_r>
   b7eac:	4604      	mov	r4, r0
   b7eae:	b118      	cbz	r0, b7eb8 <_strdup_r+0x24>
   b7eb0:	9a01      	ldr	r2, [sp, #4]
   b7eb2:	4629      	mov	r1, r5
   b7eb4:	f7ff ff8f 	bl	b7dd6 <memcpy>
   b7eb8:	4620      	mov	r0, r4
   b7eba:	b003      	add	sp, #12
   b7ebc:	bd30      	pop	{r4, r5, pc}

000b7ebe <strlen>:
   b7ebe:	4603      	mov	r3, r0
   b7ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7ec4:	2a00      	cmp	r2, #0
   b7ec6:	d1fb      	bne.n	b7ec0 <strlen+0x2>
   b7ec8:	1a18      	subs	r0, r3, r0
   b7eca:	3801      	subs	r0, #1
   b7ecc:	4770      	bx	lr

000b7ece <strncmp>:
   b7ece:	b510      	push	{r4, lr}
   b7ed0:	b17a      	cbz	r2, b7ef2 <strncmp+0x24>
   b7ed2:	4603      	mov	r3, r0
   b7ed4:	3901      	subs	r1, #1
   b7ed6:	1884      	adds	r4, r0, r2
   b7ed8:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7edc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7ee0:	4290      	cmp	r0, r2
   b7ee2:	d101      	bne.n	b7ee8 <strncmp+0x1a>
   b7ee4:	42a3      	cmp	r3, r4
   b7ee6:	d101      	bne.n	b7eec <strncmp+0x1e>
   b7ee8:	1a80      	subs	r0, r0, r2
   b7eea:	bd10      	pop	{r4, pc}
   b7eec:	2800      	cmp	r0, #0
   b7eee:	d1f3      	bne.n	b7ed8 <strncmp+0xa>
   b7ef0:	e7fa      	b.n	b7ee8 <strncmp+0x1a>
   b7ef2:	4610      	mov	r0, r2
   b7ef4:	e7f9      	b.n	b7eea <strncmp+0x1c>

000b7ef6 <strncpy>:
   b7ef6:	b510      	push	{r4, lr}
   b7ef8:	3901      	subs	r1, #1
   b7efa:	4603      	mov	r3, r0
   b7efc:	b132      	cbz	r2, b7f0c <strncpy+0x16>
   b7efe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7f02:	f803 4b01 	strb.w	r4, [r3], #1
   b7f06:	3a01      	subs	r2, #1
   b7f08:	2c00      	cmp	r4, #0
   b7f0a:	d1f7      	bne.n	b7efc <strncpy+0x6>
   b7f0c:	441a      	add	r2, r3
   b7f0e:	2100      	movs	r1, #0
   b7f10:	4293      	cmp	r3, r2
   b7f12:	d100      	bne.n	b7f16 <strncpy+0x20>
   b7f14:	bd10      	pop	{r4, pc}
   b7f16:	f803 1b01 	strb.w	r1, [r3], #1
   b7f1a:	e7f9      	b.n	b7f10 <strncpy+0x1a>

000b7f1c <sulp>:
   b7f1c:	b570      	push	{r4, r5, r6, lr}
   b7f1e:	4604      	mov	r4, r0
   b7f20:	460d      	mov	r5, r1
   b7f22:	ec45 4b10 	vmov	d0, r4, r5
   b7f26:	4616      	mov	r6, r2
   b7f28:	f001 fe0e 	bl	b9b48 <__ulp>
   b7f2c:	ec51 0b10 	vmov	r0, r1, d0
   b7f30:	b17e      	cbz	r6, b7f52 <sulp+0x36>
   b7f32:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7f36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7f3a:	2b00      	cmp	r3, #0
   b7f3c:	dd09      	ble.n	b7f52 <sulp+0x36>
   b7f3e:	051b      	lsls	r3, r3, #20
   b7f40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7f44:	2400      	movs	r4, #0
   b7f46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7f4a:	4622      	mov	r2, r4
   b7f4c:	462b      	mov	r3, r5
   b7f4e:	f7ff fc0d 	bl	b776c <__aeabi_dmul>
   b7f52:	bd70      	pop	{r4, r5, r6, pc}
   b7f54:	0000      	movs	r0, r0
	...

000b7f58 <_strtod_l>:
   b7f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f5c:	ed2d 8b02 	vpush	{d8}
   b7f60:	b09d      	sub	sp, #116	; 0x74
   b7f62:	461f      	mov	r7, r3
   b7f64:	2300      	movs	r3, #0
   b7f66:	9318      	str	r3, [sp, #96]	; 0x60
   b7f68:	4ba2      	ldr	r3, [pc, #648]	; (b81f4 <_strtod_l+0x29c>)
   b7f6a:	9213      	str	r2, [sp, #76]	; 0x4c
   b7f6c:	681b      	ldr	r3, [r3, #0]
   b7f6e:	9305      	str	r3, [sp, #20]
   b7f70:	4604      	mov	r4, r0
   b7f72:	4618      	mov	r0, r3
   b7f74:	4688      	mov	r8, r1
   b7f76:	f7ff ffa2 	bl	b7ebe <strlen>
   b7f7a:	f04f 0a00 	mov.w	sl, #0
   b7f7e:	4605      	mov	r5, r0
   b7f80:	f04f 0b00 	mov.w	fp, #0
   b7f84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7f88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7f8a:	781a      	ldrb	r2, [r3, #0]
   b7f8c:	2a2b      	cmp	r2, #43	; 0x2b
   b7f8e:	d04e      	beq.n	b802e <_strtod_l+0xd6>
   b7f90:	d83b      	bhi.n	b800a <_strtod_l+0xb2>
   b7f92:	2a0d      	cmp	r2, #13
   b7f94:	d834      	bhi.n	b8000 <_strtod_l+0xa8>
   b7f96:	2a08      	cmp	r2, #8
   b7f98:	d834      	bhi.n	b8004 <_strtod_l+0xac>
   b7f9a:	2a00      	cmp	r2, #0
   b7f9c:	d03e      	beq.n	b801c <_strtod_l+0xc4>
   b7f9e:	2300      	movs	r3, #0
   b7fa0:	930a      	str	r3, [sp, #40]	; 0x28
   b7fa2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7fa4:	7833      	ldrb	r3, [r6, #0]
   b7fa6:	2b30      	cmp	r3, #48	; 0x30
   b7fa8:	f040 80b0 	bne.w	b810c <_strtod_l+0x1b4>
   b7fac:	7873      	ldrb	r3, [r6, #1]
   b7fae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7fb2:	2b58      	cmp	r3, #88	; 0x58
   b7fb4:	d168      	bne.n	b8088 <_strtod_l+0x130>
   b7fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7fb8:	9301      	str	r3, [sp, #4]
   b7fba:	ab18      	add	r3, sp, #96	; 0x60
   b7fbc:	9702      	str	r7, [sp, #8]
   b7fbe:	9300      	str	r3, [sp, #0]
   b7fc0:	4a8d      	ldr	r2, [pc, #564]	; (b81f8 <_strtod_l+0x2a0>)
   b7fc2:	ab19      	add	r3, sp, #100	; 0x64
   b7fc4:	a917      	add	r1, sp, #92	; 0x5c
   b7fc6:	4620      	mov	r0, r4
   b7fc8:	f000 ff2e 	bl	b8e28 <__gethex>
   b7fcc:	f010 0707 	ands.w	r7, r0, #7
   b7fd0:	4605      	mov	r5, r0
   b7fd2:	d005      	beq.n	b7fe0 <_strtod_l+0x88>
   b7fd4:	2f06      	cmp	r7, #6
   b7fd6:	d12c      	bne.n	b8032 <_strtod_l+0xda>
   b7fd8:	3601      	adds	r6, #1
   b7fda:	2300      	movs	r3, #0
   b7fdc:	9617      	str	r6, [sp, #92]	; 0x5c
   b7fde:	930a      	str	r3, [sp, #40]	; 0x28
   b7fe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7fe2:	2b00      	cmp	r3, #0
   b7fe4:	f040 8590 	bne.w	b8b08 <_strtod_l+0xbb0>
   b7fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7fea:	b1eb      	cbz	r3, b8028 <_strtod_l+0xd0>
   b7fec:	4652      	mov	r2, sl
   b7fee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7ff2:	ec43 2b10 	vmov	d0, r2, r3
   b7ff6:	b01d      	add	sp, #116	; 0x74
   b7ff8:	ecbd 8b02 	vpop	{d8}
   b7ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8000:	2a20      	cmp	r2, #32
   b8002:	d1cc      	bne.n	b7f9e <_strtod_l+0x46>
   b8004:	3301      	adds	r3, #1
   b8006:	9317      	str	r3, [sp, #92]	; 0x5c
   b8008:	e7be      	b.n	b7f88 <_strtod_l+0x30>
   b800a:	2a2d      	cmp	r2, #45	; 0x2d
   b800c:	d1c7      	bne.n	b7f9e <_strtod_l+0x46>
   b800e:	2201      	movs	r2, #1
   b8010:	920a      	str	r2, [sp, #40]	; 0x28
   b8012:	1c5a      	adds	r2, r3, #1
   b8014:	9217      	str	r2, [sp, #92]	; 0x5c
   b8016:	785b      	ldrb	r3, [r3, #1]
   b8018:	2b00      	cmp	r3, #0
   b801a:	d1c2      	bne.n	b7fa2 <_strtod_l+0x4a>
   b801c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b801e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8022:	2b00      	cmp	r3, #0
   b8024:	f040 856e 	bne.w	b8b04 <_strtod_l+0xbac>
   b8028:	4652      	mov	r2, sl
   b802a:	465b      	mov	r3, fp
   b802c:	e7e1      	b.n	b7ff2 <_strtod_l+0x9a>
   b802e:	2200      	movs	r2, #0
   b8030:	e7ee      	b.n	b8010 <_strtod_l+0xb8>
   b8032:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8034:	b13a      	cbz	r2, b8046 <_strtod_l+0xee>
   b8036:	2135      	movs	r1, #53	; 0x35
   b8038:	a81a      	add	r0, sp, #104	; 0x68
   b803a:	f001 fe90 	bl	b9d5e <__copybits>
   b803e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8040:	4620      	mov	r0, r4
   b8042:	f001 fa4f 	bl	b94e4 <_Bfree>
   b8046:	3f01      	subs	r7, #1
   b8048:	2f04      	cmp	r7, #4
   b804a:	d806      	bhi.n	b805a <_strtod_l+0x102>
   b804c:	e8df f007 	tbb	[pc, r7]
   b8050:	1714030a 	.word	0x1714030a
   b8054:	0a          	.byte	0x0a
   b8055:	00          	.byte	0x00
   b8056:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b805a:	0728      	lsls	r0, r5, #28
   b805c:	d5c0      	bpl.n	b7fe0 <_strtod_l+0x88>
   b805e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b8062:	e7bd      	b.n	b7fe0 <_strtod_l+0x88>
   b8064:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8068:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b806a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b806e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b8072:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b8076:	e7f0      	b.n	b805a <_strtod_l+0x102>
   b8078:	f8df b180 	ldr.w	fp, [pc, #384]	; b81fc <_strtod_l+0x2a4>
   b807c:	e7ed      	b.n	b805a <_strtod_l+0x102>
   b807e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b8082:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8086:	e7e8      	b.n	b805a <_strtod_l+0x102>
   b8088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b808a:	1c5a      	adds	r2, r3, #1
   b808c:	9217      	str	r2, [sp, #92]	; 0x5c
   b808e:	785b      	ldrb	r3, [r3, #1]
   b8090:	2b30      	cmp	r3, #48	; 0x30
   b8092:	d0f9      	beq.n	b8088 <_strtod_l+0x130>
   b8094:	2b00      	cmp	r3, #0
   b8096:	d0a3      	beq.n	b7fe0 <_strtod_l+0x88>
   b8098:	2301      	movs	r3, #1
   b809a:	f04f 0900 	mov.w	r9, #0
   b809e:	9304      	str	r3, [sp, #16]
   b80a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b80a2:	9308      	str	r3, [sp, #32]
   b80a4:	f8cd 901c 	str.w	r9, [sp, #28]
   b80a8:	464f      	mov	r7, r9
   b80aa:	220a      	movs	r2, #10
   b80ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b80ae:	7806      	ldrb	r6, [r0, #0]
   b80b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b80b4:	b2d9      	uxtb	r1, r3
   b80b6:	2909      	cmp	r1, #9
   b80b8:	d92a      	bls.n	b8110 <_strtod_l+0x1b8>
   b80ba:	9905      	ldr	r1, [sp, #20]
   b80bc:	462a      	mov	r2, r5
   b80be:	f7ff ff06 	bl	b7ece <strncmp>
   b80c2:	b398      	cbz	r0, b812c <_strtod_l+0x1d4>
   b80c4:	2000      	movs	r0, #0
   b80c6:	4632      	mov	r2, r6
   b80c8:	463d      	mov	r5, r7
   b80ca:	9005      	str	r0, [sp, #20]
   b80cc:	4603      	mov	r3, r0
   b80ce:	2a65      	cmp	r2, #101	; 0x65
   b80d0:	d001      	beq.n	b80d6 <_strtod_l+0x17e>
   b80d2:	2a45      	cmp	r2, #69	; 0x45
   b80d4:	d118      	bne.n	b8108 <_strtod_l+0x1b0>
   b80d6:	b91d      	cbnz	r5, b80e0 <_strtod_l+0x188>
   b80d8:	9a04      	ldr	r2, [sp, #16]
   b80da:	4302      	orrs	r2, r0
   b80dc:	d09e      	beq.n	b801c <_strtod_l+0xc4>
   b80de:	2500      	movs	r5, #0
   b80e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b80e4:	f108 0201 	add.w	r2, r8, #1
   b80e8:	9217      	str	r2, [sp, #92]	; 0x5c
   b80ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   b80ee:	2a2b      	cmp	r2, #43	; 0x2b
   b80f0:	d075      	beq.n	b81de <_strtod_l+0x286>
   b80f2:	2a2d      	cmp	r2, #45	; 0x2d
   b80f4:	d07b      	beq.n	b81ee <_strtod_l+0x296>
   b80f6:	f04f 0c00 	mov.w	ip, #0
   b80fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b80fe:	2909      	cmp	r1, #9
   b8100:	f240 8082 	bls.w	b8208 <_strtod_l+0x2b0>
   b8104:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8108:	2600      	movs	r6, #0
   b810a:	e09d      	b.n	b8248 <_strtod_l+0x2f0>
   b810c:	2300      	movs	r3, #0
   b810e:	e7c4      	b.n	b809a <_strtod_l+0x142>
   b8110:	2f08      	cmp	r7, #8
   b8112:	bfd8      	it	le
   b8114:	9907      	ldrle	r1, [sp, #28]
   b8116:	f100 0001 	add.w	r0, r0, #1
   b811a:	bfda      	itte	le
   b811c:	fb02 3301 	mlale	r3, r2, r1, r3
   b8120:	9307      	strle	r3, [sp, #28]
   b8122:	fb02 3909 	mlagt	r9, r2, r9, r3
   b8126:	3701      	adds	r7, #1
   b8128:	9017      	str	r0, [sp, #92]	; 0x5c
   b812a:	e7bf      	b.n	b80ac <_strtod_l+0x154>
   b812c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b812e:	195a      	adds	r2, r3, r5
   b8130:	9217      	str	r2, [sp, #92]	; 0x5c
   b8132:	5d5a      	ldrb	r2, [r3, r5]
   b8134:	2f00      	cmp	r7, #0
   b8136:	d037      	beq.n	b81a8 <_strtod_l+0x250>
   b8138:	9005      	str	r0, [sp, #20]
   b813a:	463d      	mov	r5, r7
   b813c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8140:	2b09      	cmp	r3, #9
   b8142:	d912      	bls.n	b816a <_strtod_l+0x212>
   b8144:	2301      	movs	r3, #1
   b8146:	e7c2      	b.n	b80ce <_strtod_l+0x176>
   b8148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b814a:	1c5a      	adds	r2, r3, #1
   b814c:	9217      	str	r2, [sp, #92]	; 0x5c
   b814e:	785a      	ldrb	r2, [r3, #1]
   b8150:	3001      	adds	r0, #1
   b8152:	2a30      	cmp	r2, #48	; 0x30
   b8154:	d0f8      	beq.n	b8148 <_strtod_l+0x1f0>
   b8156:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b815a:	2b08      	cmp	r3, #8
   b815c:	f200 84d9 	bhi.w	b8b12 <_strtod_l+0xbba>
   b8160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8162:	9005      	str	r0, [sp, #20]
   b8164:	2000      	movs	r0, #0
   b8166:	9308      	str	r3, [sp, #32]
   b8168:	4605      	mov	r5, r0
   b816a:	3a30      	subs	r2, #48	; 0x30
   b816c:	f100 0301 	add.w	r3, r0, #1
   b8170:	d014      	beq.n	b819c <_strtod_l+0x244>
   b8172:	9905      	ldr	r1, [sp, #20]
   b8174:	4419      	add	r1, r3
   b8176:	9105      	str	r1, [sp, #20]
   b8178:	462b      	mov	r3, r5
   b817a:	eb00 0e05 	add.w	lr, r0, r5
   b817e:	210a      	movs	r1, #10
   b8180:	4573      	cmp	r3, lr
   b8182:	d113      	bne.n	b81ac <_strtod_l+0x254>
   b8184:	182b      	adds	r3, r5, r0
   b8186:	2b08      	cmp	r3, #8
   b8188:	f105 0501 	add.w	r5, r5, #1
   b818c:	4405      	add	r5, r0
   b818e:	dc1c      	bgt.n	b81ca <_strtod_l+0x272>
   b8190:	9907      	ldr	r1, [sp, #28]
   b8192:	230a      	movs	r3, #10
   b8194:	fb03 2301 	mla	r3, r3, r1, r2
   b8198:	9307      	str	r3, [sp, #28]
   b819a:	2300      	movs	r3, #0
   b819c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b819e:	1c51      	adds	r1, r2, #1
   b81a0:	9117      	str	r1, [sp, #92]	; 0x5c
   b81a2:	7852      	ldrb	r2, [r2, #1]
   b81a4:	4618      	mov	r0, r3
   b81a6:	e7c9      	b.n	b813c <_strtod_l+0x1e4>
   b81a8:	4638      	mov	r0, r7
   b81aa:	e7d2      	b.n	b8152 <_strtod_l+0x1fa>
   b81ac:	2b08      	cmp	r3, #8
   b81ae:	dc04      	bgt.n	b81ba <_strtod_l+0x262>
   b81b0:	9e07      	ldr	r6, [sp, #28]
   b81b2:	434e      	muls	r6, r1
   b81b4:	9607      	str	r6, [sp, #28]
   b81b6:	3301      	adds	r3, #1
   b81b8:	e7e2      	b.n	b8180 <_strtod_l+0x228>
   b81ba:	f103 0c01 	add.w	ip, r3, #1
   b81be:	f1bc 0f10 	cmp.w	ip, #16
   b81c2:	bfd8      	it	le
   b81c4:	fb01 f909 	mulle.w	r9, r1, r9
   b81c8:	e7f5      	b.n	b81b6 <_strtod_l+0x25e>
   b81ca:	2d10      	cmp	r5, #16
   b81cc:	bfdc      	itt	le
   b81ce:	230a      	movle	r3, #10
   b81d0:	fb03 2909 	mlale	r9, r3, r9, r2
   b81d4:	e7e1      	b.n	b819a <_strtod_l+0x242>
   b81d6:	2300      	movs	r3, #0
   b81d8:	9305      	str	r3, [sp, #20]
   b81da:	2301      	movs	r3, #1
   b81dc:	e77c      	b.n	b80d8 <_strtod_l+0x180>
   b81de:	f04f 0c00 	mov.w	ip, #0
   b81e2:	f108 0202 	add.w	r2, r8, #2
   b81e6:	9217      	str	r2, [sp, #92]	; 0x5c
   b81e8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b81ec:	e785      	b.n	b80fa <_strtod_l+0x1a2>
   b81ee:	f04f 0c01 	mov.w	ip, #1
   b81f2:	e7f6      	b.n	b81e2 <_strtod_l+0x28a>
   b81f4:	000ba808 	.word	0x000ba808
   b81f8:	000ba61c 	.word	0x000ba61c
   b81fc:	7ff00000 	.word	0x7ff00000
   b8200:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8202:	1c51      	adds	r1, r2, #1
   b8204:	9117      	str	r1, [sp, #92]	; 0x5c
   b8206:	7852      	ldrb	r2, [r2, #1]
   b8208:	2a30      	cmp	r2, #48	; 0x30
   b820a:	d0f9      	beq.n	b8200 <_strtod_l+0x2a8>
   b820c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8210:	2908      	cmp	r1, #8
   b8212:	f63f af79 	bhi.w	b8108 <_strtod_l+0x1b0>
   b8216:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b821a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b821c:	9206      	str	r2, [sp, #24]
   b821e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8220:	1c51      	adds	r1, r2, #1
   b8222:	9117      	str	r1, [sp, #92]	; 0x5c
   b8224:	7852      	ldrb	r2, [r2, #1]
   b8226:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b822a:	2e09      	cmp	r6, #9
   b822c:	d937      	bls.n	b829e <_strtod_l+0x346>
   b822e:	9e06      	ldr	r6, [sp, #24]
   b8230:	1b89      	subs	r1, r1, r6
   b8232:	2908      	cmp	r1, #8
   b8234:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8238:	dc02      	bgt.n	b8240 <_strtod_l+0x2e8>
   b823a:	4576      	cmp	r6, lr
   b823c:	bfa8      	it	ge
   b823e:	4676      	movge	r6, lr
   b8240:	f1bc 0f00 	cmp.w	ip, #0
   b8244:	d000      	beq.n	b8248 <_strtod_l+0x2f0>
   b8246:	4276      	negs	r6, r6
   b8248:	2d00      	cmp	r5, #0
   b824a:	d14d      	bne.n	b82e8 <_strtod_l+0x390>
   b824c:	9904      	ldr	r1, [sp, #16]
   b824e:	4301      	orrs	r1, r0
   b8250:	f47f aec6 	bne.w	b7fe0 <_strtod_l+0x88>
   b8254:	2b00      	cmp	r3, #0
   b8256:	f47f aee1 	bne.w	b801c <_strtod_l+0xc4>
   b825a:	2a69      	cmp	r2, #105	; 0x69
   b825c:	d027      	beq.n	b82ae <_strtod_l+0x356>
   b825e:	dc24      	bgt.n	b82aa <_strtod_l+0x352>
   b8260:	2a49      	cmp	r2, #73	; 0x49
   b8262:	d024      	beq.n	b82ae <_strtod_l+0x356>
   b8264:	2a4e      	cmp	r2, #78	; 0x4e
   b8266:	f47f aed9 	bne.w	b801c <_strtod_l+0xc4>
   b826a:	499f      	ldr	r1, [pc, #636]	; (b84e8 <_strtod_l+0x590>)
   b826c:	a817      	add	r0, sp, #92	; 0x5c
   b826e:	f001 f833 	bl	b92d8 <__match>
   b8272:	2800      	cmp	r0, #0
   b8274:	f43f aed2 	beq.w	b801c <_strtod_l+0xc4>
   b8278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b827a:	781b      	ldrb	r3, [r3, #0]
   b827c:	2b28      	cmp	r3, #40	; 0x28
   b827e:	d12d      	bne.n	b82dc <_strtod_l+0x384>
   b8280:	499a      	ldr	r1, [pc, #616]	; (b84ec <_strtod_l+0x594>)
   b8282:	aa1a      	add	r2, sp, #104	; 0x68
   b8284:	a817      	add	r0, sp, #92	; 0x5c
   b8286:	f001 f83b 	bl	b9300 <__hexnan>
   b828a:	2805      	cmp	r0, #5
   b828c:	d126      	bne.n	b82dc <_strtod_l+0x384>
   b828e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b8290:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b8294:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b8298:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b829c:	e6a0      	b.n	b7fe0 <_strtod_l+0x88>
   b829e:	210a      	movs	r1, #10
   b82a0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b82a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b82a8:	e7b9      	b.n	b821e <_strtod_l+0x2c6>
   b82aa:	2a6e      	cmp	r2, #110	; 0x6e
   b82ac:	e7db      	b.n	b8266 <_strtod_l+0x30e>
   b82ae:	4990      	ldr	r1, [pc, #576]	; (b84f0 <_strtod_l+0x598>)
   b82b0:	a817      	add	r0, sp, #92	; 0x5c
   b82b2:	f001 f811 	bl	b92d8 <__match>
   b82b6:	2800      	cmp	r0, #0
   b82b8:	f43f aeb0 	beq.w	b801c <_strtod_l+0xc4>
   b82bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b82be:	498d      	ldr	r1, [pc, #564]	; (b84f4 <_strtod_l+0x59c>)
   b82c0:	3b01      	subs	r3, #1
   b82c2:	a817      	add	r0, sp, #92	; 0x5c
   b82c4:	9317      	str	r3, [sp, #92]	; 0x5c
   b82c6:	f001 f807 	bl	b92d8 <__match>
   b82ca:	b910      	cbnz	r0, b82d2 <_strtod_l+0x37a>
   b82cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b82ce:	3301      	adds	r3, #1
   b82d0:	9317      	str	r3, [sp, #92]	; 0x5c
   b82d2:	f8df b230 	ldr.w	fp, [pc, #560]	; b8504 <_strtod_l+0x5ac>
   b82d6:	f04f 0a00 	mov.w	sl, #0
   b82da:	e681      	b.n	b7fe0 <_strtod_l+0x88>
   b82dc:	4886      	ldr	r0, [pc, #536]	; (b84f8 <_strtod_l+0x5a0>)
   b82de:	f001 fd93 	bl	b9e08 <nan>
   b82e2:	ec5b ab10 	vmov	sl, fp, d0
   b82e6:	e67b      	b.n	b7fe0 <_strtod_l+0x88>
   b82e8:	9b05      	ldr	r3, [sp, #20]
   b82ea:	9807      	ldr	r0, [sp, #28]
   b82ec:	1af3      	subs	r3, r6, r3
   b82ee:	2f00      	cmp	r7, #0
   b82f0:	bf08      	it	eq
   b82f2:	462f      	moveq	r7, r5
   b82f4:	2d10      	cmp	r5, #16
   b82f6:	9306      	str	r3, [sp, #24]
   b82f8:	46a8      	mov	r8, r5
   b82fa:	bfa8      	it	ge
   b82fc:	f04f 0810 	movge.w	r8, #16
   b8300:	f7ff f9ba 	bl	b7678 <__aeabi_ui2d>
   b8304:	2d09      	cmp	r5, #9
   b8306:	4682      	mov	sl, r0
   b8308:	468b      	mov	fp, r1
   b830a:	dd13      	ble.n	b8334 <_strtod_l+0x3dc>
   b830c:	4b7b      	ldr	r3, [pc, #492]	; (b84fc <_strtod_l+0x5a4>)
   b830e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8312:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8316:	f7ff fa29 	bl	b776c <__aeabi_dmul>
   b831a:	4682      	mov	sl, r0
   b831c:	4648      	mov	r0, r9
   b831e:	468b      	mov	fp, r1
   b8320:	f7ff f9aa 	bl	b7678 <__aeabi_ui2d>
   b8324:	4602      	mov	r2, r0
   b8326:	460b      	mov	r3, r1
   b8328:	4650      	mov	r0, sl
   b832a:	4659      	mov	r1, fp
   b832c:	f7ff f868 	bl	b7400 <__adddf3>
   b8330:	4682      	mov	sl, r0
   b8332:	468b      	mov	fp, r1
   b8334:	2d0f      	cmp	r5, #15
   b8336:	dc38      	bgt.n	b83aa <_strtod_l+0x452>
   b8338:	9b06      	ldr	r3, [sp, #24]
   b833a:	2b00      	cmp	r3, #0
   b833c:	f43f ae50 	beq.w	b7fe0 <_strtod_l+0x88>
   b8340:	dd24      	ble.n	b838c <_strtod_l+0x434>
   b8342:	2b16      	cmp	r3, #22
   b8344:	dc0b      	bgt.n	b835e <_strtod_l+0x406>
   b8346:	496d      	ldr	r1, [pc, #436]	; (b84fc <_strtod_l+0x5a4>)
   b8348:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b834c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8350:	4652      	mov	r2, sl
   b8352:	465b      	mov	r3, fp
   b8354:	f7ff fa0a 	bl	b776c <__aeabi_dmul>
   b8358:	4682      	mov	sl, r0
   b835a:	468b      	mov	fp, r1
   b835c:	e640      	b.n	b7fe0 <_strtod_l+0x88>
   b835e:	9a06      	ldr	r2, [sp, #24]
   b8360:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b8364:	4293      	cmp	r3, r2
   b8366:	db20      	blt.n	b83aa <_strtod_l+0x452>
   b8368:	4c64      	ldr	r4, [pc, #400]	; (b84fc <_strtod_l+0x5a4>)
   b836a:	f1c5 050f 	rsb	r5, r5, #15
   b836e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b8372:	4652      	mov	r2, sl
   b8374:	465b      	mov	r3, fp
   b8376:	e9d1 0100 	ldrd	r0, r1, [r1]
   b837a:	f7ff f9f7 	bl	b776c <__aeabi_dmul>
   b837e:	9b06      	ldr	r3, [sp, #24]
   b8380:	1b5d      	subs	r5, r3, r5
   b8382:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b8386:	e9d4 2300 	ldrd	r2, r3, [r4]
   b838a:	e7e3      	b.n	b8354 <_strtod_l+0x3fc>
   b838c:	9b06      	ldr	r3, [sp, #24]
   b838e:	3316      	adds	r3, #22
   b8390:	db0b      	blt.n	b83aa <_strtod_l+0x452>
   b8392:	9b05      	ldr	r3, [sp, #20]
   b8394:	1b9e      	subs	r6, r3, r6
   b8396:	4b59      	ldr	r3, [pc, #356]	; (b84fc <_strtod_l+0x5a4>)
   b8398:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b839c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b83a0:	4650      	mov	r0, sl
   b83a2:	4659      	mov	r1, fp
   b83a4:	f7ff fb0c 	bl	b79c0 <__aeabi_ddiv>
   b83a8:	e7d6      	b.n	b8358 <_strtod_l+0x400>
   b83aa:	9b06      	ldr	r3, [sp, #24]
   b83ac:	eba5 0808 	sub.w	r8, r5, r8
   b83b0:	4498      	add	r8, r3
   b83b2:	f1b8 0f00 	cmp.w	r8, #0
   b83b6:	dd74      	ble.n	b84a2 <_strtod_l+0x54a>
   b83b8:	f018 030f 	ands.w	r3, r8, #15
   b83bc:	d00a      	beq.n	b83d4 <_strtod_l+0x47c>
   b83be:	494f      	ldr	r1, [pc, #316]	; (b84fc <_strtod_l+0x5a4>)
   b83c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b83c4:	4652      	mov	r2, sl
   b83c6:	465b      	mov	r3, fp
   b83c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b83cc:	f7ff f9ce 	bl	b776c <__aeabi_dmul>
   b83d0:	4682      	mov	sl, r0
   b83d2:	468b      	mov	fp, r1
   b83d4:	f038 080f 	bics.w	r8, r8, #15
   b83d8:	d04f      	beq.n	b847a <_strtod_l+0x522>
   b83da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b83de:	dd22      	ble.n	b8426 <_strtod_l+0x4ce>
   b83e0:	2500      	movs	r5, #0
   b83e2:	462e      	mov	r6, r5
   b83e4:	9507      	str	r5, [sp, #28]
   b83e6:	9505      	str	r5, [sp, #20]
   b83e8:	2322      	movs	r3, #34	; 0x22
   b83ea:	f8df b118 	ldr.w	fp, [pc, #280]	; b8504 <_strtod_l+0x5ac>
   b83ee:	6023      	str	r3, [r4, #0]
   b83f0:	f04f 0a00 	mov.w	sl, #0
   b83f4:	9b07      	ldr	r3, [sp, #28]
   b83f6:	2b00      	cmp	r3, #0
   b83f8:	f43f adf2 	beq.w	b7fe0 <_strtod_l+0x88>
   b83fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b83fe:	4620      	mov	r0, r4
   b8400:	f001 f870 	bl	b94e4 <_Bfree>
   b8404:	9905      	ldr	r1, [sp, #20]
   b8406:	4620      	mov	r0, r4
   b8408:	f001 f86c 	bl	b94e4 <_Bfree>
   b840c:	4631      	mov	r1, r6
   b840e:	4620      	mov	r0, r4
   b8410:	f001 f868 	bl	b94e4 <_Bfree>
   b8414:	9907      	ldr	r1, [sp, #28]
   b8416:	4620      	mov	r0, r4
   b8418:	f001 f864 	bl	b94e4 <_Bfree>
   b841c:	4629      	mov	r1, r5
   b841e:	4620      	mov	r0, r4
   b8420:	f001 f860 	bl	b94e4 <_Bfree>
   b8424:	e5dc      	b.n	b7fe0 <_strtod_l+0x88>
   b8426:	4b36      	ldr	r3, [pc, #216]	; (b8500 <_strtod_l+0x5a8>)
   b8428:	9304      	str	r3, [sp, #16]
   b842a:	2300      	movs	r3, #0
   b842c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8430:	4650      	mov	r0, sl
   b8432:	4659      	mov	r1, fp
   b8434:	4699      	mov	r9, r3
   b8436:	f1b8 0f01 	cmp.w	r8, #1
   b843a:	dc21      	bgt.n	b8480 <_strtod_l+0x528>
   b843c:	b10b      	cbz	r3, b8442 <_strtod_l+0x4ea>
   b843e:	4682      	mov	sl, r0
   b8440:	468b      	mov	fp, r1
   b8442:	4b2f      	ldr	r3, [pc, #188]	; (b8500 <_strtod_l+0x5a8>)
   b8444:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8448:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b844c:	4652      	mov	r2, sl
   b844e:	465b      	mov	r3, fp
   b8450:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8454:	f7ff f98a 	bl	b776c <__aeabi_dmul>
   b8458:	4b2a      	ldr	r3, [pc, #168]	; (b8504 <_strtod_l+0x5ac>)
   b845a:	460a      	mov	r2, r1
   b845c:	400b      	ands	r3, r1
   b845e:	492a      	ldr	r1, [pc, #168]	; (b8508 <_strtod_l+0x5b0>)
   b8460:	428b      	cmp	r3, r1
   b8462:	4682      	mov	sl, r0
   b8464:	d8bc      	bhi.n	b83e0 <_strtod_l+0x488>
   b8466:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b846a:	428b      	cmp	r3, r1
   b846c:	bf86      	itte	hi
   b846e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b850c <_strtod_l+0x5b4>
   b8472:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b8476:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b847a:	2300      	movs	r3, #0
   b847c:	9304      	str	r3, [sp, #16]
   b847e:	e084      	b.n	b858a <_strtod_l+0x632>
   b8480:	f018 0f01 	tst.w	r8, #1
   b8484:	d005      	beq.n	b8492 <_strtod_l+0x53a>
   b8486:	9b04      	ldr	r3, [sp, #16]
   b8488:	e9d3 2300 	ldrd	r2, r3, [r3]
   b848c:	f7ff f96e 	bl	b776c <__aeabi_dmul>
   b8490:	2301      	movs	r3, #1
   b8492:	9a04      	ldr	r2, [sp, #16]
   b8494:	3208      	adds	r2, #8
   b8496:	f109 0901 	add.w	r9, r9, #1
   b849a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b849e:	9204      	str	r2, [sp, #16]
   b84a0:	e7c9      	b.n	b8436 <_strtod_l+0x4de>
   b84a2:	d0ea      	beq.n	b847a <_strtod_l+0x522>
   b84a4:	f1c8 0800 	rsb	r8, r8, #0
   b84a8:	f018 020f 	ands.w	r2, r8, #15
   b84ac:	d00a      	beq.n	b84c4 <_strtod_l+0x56c>
   b84ae:	4b13      	ldr	r3, [pc, #76]	; (b84fc <_strtod_l+0x5a4>)
   b84b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b84b4:	4650      	mov	r0, sl
   b84b6:	4659      	mov	r1, fp
   b84b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b84bc:	f7ff fa80 	bl	b79c0 <__aeabi_ddiv>
   b84c0:	4682      	mov	sl, r0
   b84c2:	468b      	mov	fp, r1
   b84c4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b84c8:	d0d7      	beq.n	b847a <_strtod_l+0x522>
   b84ca:	f1b8 0f1f 	cmp.w	r8, #31
   b84ce:	dd1f      	ble.n	b8510 <_strtod_l+0x5b8>
   b84d0:	2500      	movs	r5, #0
   b84d2:	462e      	mov	r6, r5
   b84d4:	9507      	str	r5, [sp, #28]
   b84d6:	9505      	str	r5, [sp, #20]
   b84d8:	2322      	movs	r3, #34	; 0x22
   b84da:	f04f 0a00 	mov.w	sl, #0
   b84de:	f04f 0b00 	mov.w	fp, #0
   b84e2:	6023      	str	r3, [r4, #0]
   b84e4:	e786      	b.n	b83f4 <_strtod_l+0x49c>
   b84e6:	bf00      	nop
   b84e8:	000ba616 	.word	0x000ba616
   b84ec:	000ba630 	.word	0x000ba630
   b84f0:	000ba60d 	.word	0x000ba60d
   b84f4:	000ba610 	.word	0x000ba610
   b84f8:	000ba03e 	.word	0x000ba03e
   b84fc:	000ba8c8 	.word	0x000ba8c8
   b8500:	000ba8a0 	.word	0x000ba8a0
   b8504:	7ff00000 	.word	0x7ff00000
   b8508:	7ca00000 	.word	0x7ca00000
   b850c:	7fefffff 	.word	0x7fefffff
   b8510:	f018 0310 	ands.w	r3, r8, #16
   b8514:	bf18      	it	ne
   b8516:	236a      	movne	r3, #106	; 0x6a
   b8518:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b88c8 <_strtod_l+0x970>
   b851c:	9304      	str	r3, [sp, #16]
   b851e:	4650      	mov	r0, sl
   b8520:	4659      	mov	r1, fp
   b8522:	2300      	movs	r3, #0
   b8524:	f018 0f01 	tst.w	r8, #1
   b8528:	d004      	beq.n	b8534 <_strtod_l+0x5dc>
   b852a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b852e:	f7ff f91d 	bl	b776c <__aeabi_dmul>
   b8532:	2301      	movs	r3, #1
   b8534:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8538:	f109 0908 	add.w	r9, r9, #8
   b853c:	d1f2      	bne.n	b8524 <_strtod_l+0x5cc>
   b853e:	b10b      	cbz	r3, b8544 <_strtod_l+0x5ec>
   b8540:	4682      	mov	sl, r0
   b8542:	468b      	mov	fp, r1
   b8544:	9b04      	ldr	r3, [sp, #16]
   b8546:	b1c3      	cbz	r3, b857a <_strtod_l+0x622>
   b8548:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b854c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8550:	2b00      	cmp	r3, #0
   b8552:	4659      	mov	r1, fp
   b8554:	dd11      	ble.n	b857a <_strtod_l+0x622>
   b8556:	2b1f      	cmp	r3, #31
   b8558:	f340 8124 	ble.w	b87a4 <_strtod_l+0x84c>
   b855c:	2b34      	cmp	r3, #52	; 0x34
   b855e:	bfde      	ittt	le
   b8560:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8564:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b8568:	fa03 f202 	lslle.w	r2, r3, r2
   b856c:	f04f 0a00 	mov.w	sl, #0
   b8570:	bfcc      	ite	gt
   b8572:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8576:	ea02 0b01 	andle.w	fp, r2, r1
   b857a:	2200      	movs	r2, #0
   b857c:	2300      	movs	r3, #0
   b857e:	4650      	mov	r0, sl
   b8580:	4659      	mov	r1, fp
   b8582:	f7ff fb5b 	bl	b7c3c <__aeabi_dcmpeq>
   b8586:	2800      	cmp	r0, #0
   b8588:	d1a2      	bne.n	b84d0 <_strtod_l+0x578>
   b858a:	9b07      	ldr	r3, [sp, #28]
   b858c:	9300      	str	r3, [sp, #0]
   b858e:	9908      	ldr	r1, [sp, #32]
   b8590:	462b      	mov	r3, r5
   b8592:	463a      	mov	r2, r7
   b8594:	4620      	mov	r0, r4
   b8596:	f001 f80d 	bl	b95b4 <__s2b>
   b859a:	9007      	str	r0, [sp, #28]
   b859c:	2800      	cmp	r0, #0
   b859e:	f43f af1f 	beq.w	b83e0 <_strtod_l+0x488>
   b85a2:	9b05      	ldr	r3, [sp, #20]
   b85a4:	1b9e      	subs	r6, r3, r6
   b85a6:	9b06      	ldr	r3, [sp, #24]
   b85a8:	2b00      	cmp	r3, #0
   b85aa:	bfb4      	ite	lt
   b85ac:	4633      	movlt	r3, r6
   b85ae:	2300      	movge	r3, #0
   b85b0:	930c      	str	r3, [sp, #48]	; 0x30
   b85b2:	9b06      	ldr	r3, [sp, #24]
   b85b4:	2500      	movs	r5, #0
   b85b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b85ba:	9312      	str	r3, [sp, #72]	; 0x48
   b85bc:	462e      	mov	r6, r5
   b85be:	9b07      	ldr	r3, [sp, #28]
   b85c0:	4620      	mov	r0, r4
   b85c2:	6859      	ldr	r1, [r3, #4]
   b85c4:	f000 ff4e 	bl	b9464 <_Balloc>
   b85c8:	9005      	str	r0, [sp, #20]
   b85ca:	2800      	cmp	r0, #0
   b85cc:	f43f af0c 	beq.w	b83e8 <_strtod_l+0x490>
   b85d0:	9b07      	ldr	r3, [sp, #28]
   b85d2:	691a      	ldr	r2, [r3, #16]
   b85d4:	3202      	adds	r2, #2
   b85d6:	f103 010c 	add.w	r1, r3, #12
   b85da:	0092      	lsls	r2, r2, #2
   b85dc:	300c      	adds	r0, #12
   b85de:	f7ff fbfa 	bl	b7dd6 <memcpy>
   b85e2:	ec4b ab10 	vmov	d0, sl, fp
   b85e6:	aa1a      	add	r2, sp, #104	; 0x68
   b85e8:	a919      	add	r1, sp, #100	; 0x64
   b85ea:	4620      	mov	r0, r4
   b85ec:	f001 fb28 	bl	b9c40 <__d2b>
   b85f0:	ec4b ab18 	vmov	d8, sl, fp
   b85f4:	9018      	str	r0, [sp, #96]	; 0x60
   b85f6:	2800      	cmp	r0, #0
   b85f8:	f43f aef6 	beq.w	b83e8 <_strtod_l+0x490>
   b85fc:	2101      	movs	r1, #1
   b85fe:	4620      	mov	r0, r4
   b8600:	f001 f872 	bl	b96e8 <__i2b>
   b8604:	4606      	mov	r6, r0
   b8606:	2800      	cmp	r0, #0
   b8608:	f43f aeee 	beq.w	b83e8 <_strtod_l+0x490>
   b860c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b860e:	9904      	ldr	r1, [sp, #16]
   b8610:	2b00      	cmp	r3, #0
   b8612:	bfab      	itete	ge
   b8614:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8616:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8618:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b861a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b861e:	bfac      	ite	ge
   b8620:	eb03 0902 	addge.w	r9, r3, r2
   b8624:	1ad7      	sublt	r7, r2, r3
   b8626:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8628:	eba3 0801 	sub.w	r8, r3, r1
   b862c:	4490      	add	r8, r2
   b862e:	4ba1      	ldr	r3, [pc, #644]	; (b88b4 <_strtod_l+0x95c>)
   b8630:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8634:	4598      	cmp	r8, r3
   b8636:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b863a:	f280 80c7 	bge.w	b87cc <_strtod_l+0x874>
   b863e:	eba3 0308 	sub.w	r3, r3, r8
   b8642:	2b1f      	cmp	r3, #31
   b8644:	eba2 0203 	sub.w	r2, r2, r3
   b8648:	f04f 0101 	mov.w	r1, #1
   b864c:	f300 80b1 	bgt.w	b87b2 <_strtod_l+0x85a>
   b8650:	fa01 f303 	lsl.w	r3, r1, r3
   b8654:	930d      	str	r3, [sp, #52]	; 0x34
   b8656:	2300      	movs	r3, #0
   b8658:	9308      	str	r3, [sp, #32]
   b865a:	eb09 0802 	add.w	r8, r9, r2
   b865e:	9b04      	ldr	r3, [sp, #16]
   b8660:	45c1      	cmp	r9, r8
   b8662:	4417      	add	r7, r2
   b8664:	441f      	add	r7, r3
   b8666:	464b      	mov	r3, r9
   b8668:	bfa8      	it	ge
   b866a:	4643      	movge	r3, r8
   b866c:	42bb      	cmp	r3, r7
   b866e:	bfa8      	it	ge
   b8670:	463b      	movge	r3, r7
   b8672:	2b00      	cmp	r3, #0
   b8674:	bfc2      	ittt	gt
   b8676:	eba8 0803 	subgt.w	r8, r8, r3
   b867a:	1aff      	subgt	r7, r7, r3
   b867c:	eba9 0903 	subgt.w	r9, r9, r3
   b8680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8682:	2b00      	cmp	r3, #0
   b8684:	dd17      	ble.n	b86b6 <_strtod_l+0x75e>
   b8686:	4631      	mov	r1, r6
   b8688:	461a      	mov	r2, r3
   b868a:	4620      	mov	r0, r4
   b868c:	f001 f8ec 	bl	b9868 <__pow5mult>
   b8690:	4606      	mov	r6, r0
   b8692:	2800      	cmp	r0, #0
   b8694:	f43f aea8 	beq.w	b83e8 <_strtod_l+0x490>
   b8698:	4601      	mov	r1, r0
   b869a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b869c:	4620      	mov	r0, r4
   b869e:	f001 f839 	bl	b9714 <__multiply>
   b86a2:	900b      	str	r0, [sp, #44]	; 0x2c
   b86a4:	2800      	cmp	r0, #0
   b86a6:	f43f ae9f 	beq.w	b83e8 <_strtod_l+0x490>
   b86aa:	9918      	ldr	r1, [sp, #96]	; 0x60
   b86ac:	4620      	mov	r0, r4
   b86ae:	f000 ff19 	bl	b94e4 <_Bfree>
   b86b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b86b4:	9318      	str	r3, [sp, #96]	; 0x60
   b86b6:	f1b8 0f00 	cmp.w	r8, #0
   b86ba:	f300 808c 	bgt.w	b87d6 <_strtod_l+0x87e>
   b86be:	9b06      	ldr	r3, [sp, #24]
   b86c0:	2b00      	cmp	r3, #0
   b86c2:	dd08      	ble.n	b86d6 <_strtod_l+0x77e>
   b86c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b86c6:	9905      	ldr	r1, [sp, #20]
   b86c8:	4620      	mov	r0, r4
   b86ca:	f001 f8cd 	bl	b9868 <__pow5mult>
   b86ce:	9005      	str	r0, [sp, #20]
   b86d0:	2800      	cmp	r0, #0
   b86d2:	f43f ae89 	beq.w	b83e8 <_strtod_l+0x490>
   b86d6:	2f00      	cmp	r7, #0
   b86d8:	dd08      	ble.n	b86ec <_strtod_l+0x794>
   b86da:	9905      	ldr	r1, [sp, #20]
   b86dc:	463a      	mov	r2, r7
   b86de:	4620      	mov	r0, r4
   b86e0:	f001 f91c 	bl	b991c <__lshift>
   b86e4:	9005      	str	r0, [sp, #20]
   b86e6:	2800      	cmp	r0, #0
   b86e8:	f43f ae7e 	beq.w	b83e8 <_strtod_l+0x490>
   b86ec:	f1b9 0f00 	cmp.w	r9, #0
   b86f0:	dd08      	ble.n	b8704 <_strtod_l+0x7ac>
   b86f2:	4631      	mov	r1, r6
   b86f4:	464a      	mov	r2, r9
   b86f6:	4620      	mov	r0, r4
   b86f8:	f001 f910 	bl	b991c <__lshift>
   b86fc:	4606      	mov	r6, r0
   b86fe:	2800      	cmp	r0, #0
   b8700:	f43f ae72 	beq.w	b83e8 <_strtod_l+0x490>
   b8704:	9a05      	ldr	r2, [sp, #20]
   b8706:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8708:	4620      	mov	r0, r4
   b870a:	f001 f993 	bl	b9a34 <__mdiff>
   b870e:	4605      	mov	r5, r0
   b8710:	2800      	cmp	r0, #0
   b8712:	f43f ae69 	beq.w	b83e8 <_strtod_l+0x490>
   b8716:	68c3      	ldr	r3, [r0, #12]
   b8718:	930b      	str	r3, [sp, #44]	; 0x2c
   b871a:	2300      	movs	r3, #0
   b871c:	60c3      	str	r3, [r0, #12]
   b871e:	4631      	mov	r1, r6
   b8720:	f001 f96c 	bl	b99fc <__mcmp>
   b8724:	2800      	cmp	r0, #0
   b8726:	da60      	bge.n	b87ea <_strtod_l+0x892>
   b8728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b872a:	ea53 030a 	orrs.w	r3, r3, sl
   b872e:	f040 8082 	bne.w	b8836 <_strtod_l+0x8de>
   b8732:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8736:	2b00      	cmp	r3, #0
   b8738:	d17d      	bne.n	b8836 <_strtod_l+0x8de>
   b873a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b873e:	0d1b      	lsrs	r3, r3, #20
   b8740:	051b      	lsls	r3, r3, #20
   b8742:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8746:	d976      	bls.n	b8836 <_strtod_l+0x8de>
   b8748:	696b      	ldr	r3, [r5, #20]
   b874a:	b913      	cbnz	r3, b8752 <_strtod_l+0x7fa>
   b874c:	692b      	ldr	r3, [r5, #16]
   b874e:	2b01      	cmp	r3, #1
   b8750:	dd71      	ble.n	b8836 <_strtod_l+0x8de>
   b8752:	4629      	mov	r1, r5
   b8754:	2201      	movs	r2, #1
   b8756:	4620      	mov	r0, r4
   b8758:	f001 f8e0 	bl	b991c <__lshift>
   b875c:	4631      	mov	r1, r6
   b875e:	4605      	mov	r5, r0
   b8760:	f001 f94c 	bl	b99fc <__mcmp>
   b8764:	2800      	cmp	r0, #0
   b8766:	dd66      	ble.n	b8836 <_strtod_l+0x8de>
   b8768:	9904      	ldr	r1, [sp, #16]
   b876a:	4a53      	ldr	r2, [pc, #332]	; (b88b8 <_strtod_l+0x960>)
   b876c:	465b      	mov	r3, fp
   b876e:	2900      	cmp	r1, #0
   b8770:	f000 8081 	beq.w	b8876 <_strtod_l+0x91e>
   b8774:	ea02 010b 	and.w	r1, r2, fp
   b8778:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b877c:	dc7b      	bgt.n	b8876 <_strtod_l+0x91e>
   b877e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8782:	f77f aea9 	ble.w	b84d8 <_strtod_l+0x580>
   b8786:	4b4d      	ldr	r3, [pc, #308]	; (b88bc <_strtod_l+0x964>)
   b8788:	4650      	mov	r0, sl
   b878a:	4659      	mov	r1, fp
   b878c:	2200      	movs	r2, #0
   b878e:	f7fe ffed 	bl	b776c <__aeabi_dmul>
   b8792:	460b      	mov	r3, r1
   b8794:	4303      	orrs	r3, r0
   b8796:	bf08      	it	eq
   b8798:	2322      	moveq	r3, #34	; 0x22
   b879a:	4682      	mov	sl, r0
   b879c:	468b      	mov	fp, r1
   b879e:	bf08      	it	eq
   b87a0:	6023      	streq	r3, [r4, #0]
   b87a2:	e62b      	b.n	b83fc <_strtod_l+0x4a4>
   b87a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b87a8:	fa02 f303 	lsl.w	r3, r2, r3
   b87ac:	ea03 0a0a 	and.w	sl, r3, sl
   b87b0:	e6e3      	b.n	b857a <_strtod_l+0x622>
   b87b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b87b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b87ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b87be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b87c2:	fa01 f308 	lsl.w	r3, r1, r8
   b87c6:	9308      	str	r3, [sp, #32]
   b87c8:	910d      	str	r1, [sp, #52]	; 0x34
   b87ca:	e746      	b.n	b865a <_strtod_l+0x702>
   b87cc:	2300      	movs	r3, #0
   b87ce:	9308      	str	r3, [sp, #32]
   b87d0:	2301      	movs	r3, #1
   b87d2:	930d      	str	r3, [sp, #52]	; 0x34
   b87d4:	e741      	b.n	b865a <_strtod_l+0x702>
   b87d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b87d8:	4642      	mov	r2, r8
   b87da:	4620      	mov	r0, r4
   b87dc:	f001 f89e 	bl	b991c <__lshift>
   b87e0:	9018      	str	r0, [sp, #96]	; 0x60
   b87e2:	2800      	cmp	r0, #0
   b87e4:	f47f af6b 	bne.w	b86be <_strtod_l+0x766>
   b87e8:	e5fe      	b.n	b83e8 <_strtod_l+0x490>
   b87ea:	465f      	mov	r7, fp
   b87ec:	d16e      	bne.n	b88cc <_strtod_l+0x974>
   b87ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b87f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b87f4:	b342      	cbz	r2, b8848 <_strtod_l+0x8f0>
   b87f6:	4a32      	ldr	r2, [pc, #200]	; (b88c0 <_strtod_l+0x968>)
   b87f8:	4293      	cmp	r3, r2
   b87fa:	d128      	bne.n	b884e <_strtod_l+0x8f6>
   b87fc:	9b04      	ldr	r3, [sp, #16]
   b87fe:	4651      	mov	r1, sl
   b8800:	b1eb      	cbz	r3, b883e <_strtod_l+0x8e6>
   b8802:	4b2d      	ldr	r3, [pc, #180]	; (b88b8 <_strtod_l+0x960>)
   b8804:	403b      	ands	r3, r7
   b8806:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b880a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b880e:	d819      	bhi.n	b8844 <_strtod_l+0x8ec>
   b8810:	0d1b      	lsrs	r3, r3, #20
   b8812:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8816:	fa02 f303 	lsl.w	r3, r2, r3
   b881a:	4299      	cmp	r1, r3
   b881c:	d117      	bne.n	b884e <_strtod_l+0x8f6>
   b881e:	4b29      	ldr	r3, [pc, #164]	; (b88c4 <_strtod_l+0x96c>)
   b8820:	429f      	cmp	r7, r3
   b8822:	d102      	bne.n	b882a <_strtod_l+0x8d2>
   b8824:	3101      	adds	r1, #1
   b8826:	f43f addf 	beq.w	b83e8 <_strtod_l+0x490>
   b882a:	4b23      	ldr	r3, [pc, #140]	; (b88b8 <_strtod_l+0x960>)
   b882c:	403b      	ands	r3, r7
   b882e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8832:	f04f 0a00 	mov.w	sl, #0
   b8836:	9b04      	ldr	r3, [sp, #16]
   b8838:	2b00      	cmp	r3, #0
   b883a:	d1a4      	bne.n	b8786 <_strtod_l+0x82e>
   b883c:	e5de      	b.n	b83fc <_strtod_l+0x4a4>
   b883e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8842:	e7ea      	b.n	b881a <_strtod_l+0x8c2>
   b8844:	4613      	mov	r3, r2
   b8846:	e7e8      	b.n	b881a <_strtod_l+0x8c2>
   b8848:	ea53 030a 	orrs.w	r3, r3, sl
   b884c:	d08c      	beq.n	b8768 <_strtod_l+0x810>
   b884e:	9b08      	ldr	r3, [sp, #32]
   b8850:	b1db      	cbz	r3, b888a <_strtod_l+0x932>
   b8852:	423b      	tst	r3, r7
   b8854:	d0ef      	beq.n	b8836 <_strtod_l+0x8de>
   b8856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8858:	9a04      	ldr	r2, [sp, #16]
   b885a:	4650      	mov	r0, sl
   b885c:	4659      	mov	r1, fp
   b885e:	b1c3      	cbz	r3, b8892 <_strtod_l+0x93a>
   b8860:	f7ff fb5c 	bl	b7f1c <sulp>
   b8864:	4602      	mov	r2, r0
   b8866:	460b      	mov	r3, r1
   b8868:	ec51 0b18 	vmov	r0, r1, d8
   b886c:	f7fe fdc8 	bl	b7400 <__adddf3>
   b8870:	4682      	mov	sl, r0
   b8872:	468b      	mov	fp, r1
   b8874:	e7df      	b.n	b8836 <_strtod_l+0x8de>
   b8876:	4013      	ands	r3, r2
   b8878:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b887c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8880:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8884:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8888:	e7d5      	b.n	b8836 <_strtod_l+0x8de>
   b888a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b888c:	ea13 0f0a 	tst.w	r3, sl
   b8890:	e7e0      	b.n	b8854 <_strtod_l+0x8fc>
   b8892:	f7ff fb43 	bl	b7f1c <sulp>
   b8896:	4602      	mov	r2, r0
   b8898:	460b      	mov	r3, r1
   b889a:	ec51 0b18 	vmov	r0, r1, d8
   b889e:	f7fe fdad 	bl	b73fc <__aeabi_dsub>
   b88a2:	2200      	movs	r2, #0
   b88a4:	2300      	movs	r3, #0
   b88a6:	4682      	mov	sl, r0
   b88a8:	468b      	mov	fp, r1
   b88aa:	f7ff f9c7 	bl	b7c3c <__aeabi_dcmpeq>
   b88ae:	2800      	cmp	r0, #0
   b88b0:	d0c1      	beq.n	b8836 <_strtod_l+0x8de>
   b88b2:	e611      	b.n	b84d8 <_strtod_l+0x580>
   b88b4:	fffffc02 	.word	0xfffffc02
   b88b8:	7ff00000 	.word	0x7ff00000
   b88bc:	39500000 	.word	0x39500000
   b88c0:	000fffff 	.word	0x000fffff
   b88c4:	7fefffff 	.word	0x7fefffff
   b88c8:	000ba648 	.word	0x000ba648
   b88cc:	4631      	mov	r1, r6
   b88ce:	4628      	mov	r0, r5
   b88d0:	f001 fa12 	bl	b9cf8 <__ratio>
   b88d4:	ec59 8b10 	vmov	r8, r9, d0
   b88d8:	ee10 0a10 	vmov	r0, s0
   b88dc:	2200      	movs	r2, #0
   b88de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b88e2:	4649      	mov	r1, r9
   b88e4:	f7ff f9be 	bl	b7c64 <__aeabi_dcmple>
   b88e8:	2800      	cmp	r0, #0
   b88ea:	d07a      	beq.n	b89e2 <_strtod_l+0xa8a>
   b88ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b88ee:	2b00      	cmp	r3, #0
   b88f0:	d04a      	beq.n	b8988 <_strtod_l+0xa30>
   b88f2:	4b95      	ldr	r3, [pc, #596]	; (b8b48 <_strtod_l+0xbf0>)
   b88f4:	2200      	movs	r2, #0
   b88f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b88fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; b8b48 <_strtod_l+0xbf0>
   b88fe:	f04f 0800 	mov.w	r8, #0
   b8902:	4b92      	ldr	r3, [pc, #584]	; (b8b4c <_strtod_l+0xbf4>)
   b8904:	403b      	ands	r3, r7
   b8906:	930d      	str	r3, [sp, #52]	; 0x34
   b8908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b890a:	4b91      	ldr	r3, [pc, #580]	; (b8b50 <_strtod_l+0xbf8>)
   b890c:	429a      	cmp	r2, r3
   b890e:	f040 80b0 	bne.w	b8a72 <_strtod_l+0xb1a>
   b8912:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8916:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b891a:	ec4b ab10 	vmov	d0, sl, fp
   b891e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8922:	f001 f911 	bl	b9b48 <__ulp>
   b8926:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b892a:	ec53 2b10 	vmov	r2, r3, d0
   b892e:	f7fe ff1d 	bl	b776c <__aeabi_dmul>
   b8932:	4652      	mov	r2, sl
   b8934:	465b      	mov	r3, fp
   b8936:	f7fe fd63 	bl	b7400 <__adddf3>
   b893a:	460b      	mov	r3, r1
   b893c:	4983      	ldr	r1, [pc, #524]	; (b8b4c <_strtod_l+0xbf4>)
   b893e:	4a85      	ldr	r2, [pc, #532]	; (b8b54 <_strtod_l+0xbfc>)
   b8940:	4019      	ands	r1, r3
   b8942:	4291      	cmp	r1, r2
   b8944:	4682      	mov	sl, r0
   b8946:	d960      	bls.n	b8a0a <_strtod_l+0xab2>
   b8948:	ee18 3a90 	vmov	r3, s17
   b894c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8950:	4293      	cmp	r3, r2
   b8952:	d104      	bne.n	b895e <_strtod_l+0xa06>
   b8954:	ee18 3a10 	vmov	r3, s16
   b8958:	3301      	adds	r3, #1
   b895a:	f43f ad45 	beq.w	b83e8 <_strtod_l+0x490>
   b895e:	f8df b200 	ldr.w	fp, [pc, #512]	; b8b60 <_strtod_l+0xc08>
   b8962:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8966:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8968:	4620      	mov	r0, r4
   b896a:	f000 fdbb 	bl	b94e4 <_Bfree>
   b896e:	9905      	ldr	r1, [sp, #20]
   b8970:	4620      	mov	r0, r4
   b8972:	f000 fdb7 	bl	b94e4 <_Bfree>
   b8976:	4631      	mov	r1, r6
   b8978:	4620      	mov	r0, r4
   b897a:	f000 fdb3 	bl	b94e4 <_Bfree>
   b897e:	4629      	mov	r1, r5
   b8980:	4620      	mov	r0, r4
   b8982:	f000 fdaf 	bl	b94e4 <_Bfree>
   b8986:	e61a      	b.n	b85be <_strtod_l+0x666>
   b8988:	f1ba 0f00 	cmp.w	sl, #0
   b898c:	d11b      	bne.n	b89c6 <_strtod_l+0xa6e>
   b898e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8992:	b9f3      	cbnz	r3, b89d2 <_strtod_l+0xa7a>
   b8994:	4b6c      	ldr	r3, [pc, #432]	; (b8b48 <_strtod_l+0xbf0>)
   b8996:	2200      	movs	r2, #0
   b8998:	4640      	mov	r0, r8
   b899a:	4649      	mov	r1, r9
   b899c:	f7ff f958 	bl	b7c50 <__aeabi_dcmplt>
   b89a0:	b9d0      	cbnz	r0, b89d8 <_strtod_l+0xa80>
   b89a2:	4640      	mov	r0, r8
   b89a4:	4649      	mov	r1, r9
   b89a6:	4b6c      	ldr	r3, [pc, #432]	; (b8b58 <_strtod_l+0xc00>)
   b89a8:	2200      	movs	r2, #0
   b89aa:	f7fe fedf 	bl	b776c <__aeabi_dmul>
   b89ae:	4680      	mov	r8, r0
   b89b0:	4689      	mov	r9, r1
   b89b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b89b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b89ba:	9315      	str	r3, [sp, #84]	; 0x54
   b89bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b89c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b89c4:	e79d      	b.n	b8902 <_strtod_l+0x9aa>
   b89c6:	f1ba 0f01 	cmp.w	sl, #1
   b89ca:	d102      	bne.n	b89d2 <_strtod_l+0xa7a>
   b89cc:	2f00      	cmp	r7, #0
   b89ce:	f43f ad83 	beq.w	b84d8 <_strtod_l+0x580>
   b89d2:	4b62      	ldr	r3, [pc, #392]	; (b8b5c <_strtod_l+0xc04>)
   b89d4:	2200      	movs	r2, #0
   b89d6:	e78e      	b.n	b88f6 <_strtod_l+0x99e>
   b89d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b8b58 <_strtod_l+0xc00>
   b89dc:	f04f 0800 	mov.w	r8, #0
   b89e0:	e7e7      	b.n	b89b2 <_strtod_l+0xa5a>
   b89e2:	4b5d      	ldr	r3, [pc, #372]	; (b8b58 <_strtod_l+0xc00>)
   b89e4:	4640      	mov	r0, r8
   b89e6:	4649      	mov	r1, r9
   b89e8:	2200      	movs	r2, #0
   b89ea:	f7fe febf 	bl	b776c <__aeabi_dmul>
   b89ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b89f0:	4680      	mov	r8, r0
   b89f2:	4689      	mov	r9, r1
   b89f4:	b933      	cbnz	r3, b8a04 <_strtod_l+0xaac>
   b89f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b89fa:	900e      	str	r0, [sp, #56]	; 0x38
   b89fc:	930f      	str	r3, [sp, #60]	; 0x3c
   b89fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b8a02:	e7dd      	b.n	b89c0 <_strtod_l+0xa68>
   b8a04:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8a08:	e7f9      	b.n	b89fe <_strtod_l+0xaa6>
   b8a0a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b8a0e:	9b04      	ldr	r3, [sp, #16]
   b8a10:	2b00      	cmp	r3, #0
   b8a12:	d1a8      	bne.n	b8966 <_strtod_l+0xa0e>
   b8a14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8a18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8a1a:	0d1b      	lsrs	r3, r3, #20
   b8a1c:	051b      	lsls	r3, r3, #20
   b8a1e:	429a      	cmp	r2, r3
   b8a20:	d1a1      	bne.n	b8966 <_strtod_l+0xa0e>
   b8a22:	4640      	mov	r0, r8
   b8a24:	4649      	mov	r1, r9
   b8a26:	f001 fa05 	bl	b9e34 <__aeabi_d2lz>
   b8a2a:	f7fe fe71 	bl	b7710 <__aeabi_l2d>
   b8a2e:	4602      	mov	r2, r0
   b8a30:	460b      	mov	r3, r1
   b8a32:	4640      	mov	r0, r8
   b8a34:	4649      	mov	r1, r9
   b8a36:	f7fe fce1 	bl	b73fc <__aeabi_dsub>
   b8a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8a3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8a40:	ea43 030a 	orr.w	r3, r3, sl
   b8a44:	4313      	orrs	r3, r2
   b8a46:	4680      	mov	r8, r0
   b8a48:	4689      	mov	r9, r1
   b8a4a:	d055      	beq.n	b8af8 <_strtod_l+0xba0>
   b8a4c:	a336      	add	r3, pc, #216	; (adr r3, b8b28 <_strtod_l+0xbd0>)
   b8a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8a52:	f7ff f8fd 	bl	b7c50 <__aeabi_dcmplt>
   b8a56:	2800      	cmp	r0, #0
   b8a58:	f47f acd0 	bne.w	b83fc <_strtod_l+0x4a4>
   b8a5c:	a334      	add	r3, pc, #208	; (adr r3, b8b30 <_strtod_l+0xbd8>)
   b8a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8a62:	4640      	mov	r0, r8
   b8a64:	4649      	mov	r1, r9
   b8a66:	f7ff f911 	bl	b7c8c <__aeabi_dcmpgt>
   b8a6a:	2800      	cmp	r0, #0
   b8a6c:	f43f af7b 	beq.w	b8966 <_strtod_l+0xa0e>
   b8a70:	e4c4      	b.n	b83fc <_strtod_l+0x4a4>
   b8a72:	9b04      	ldr	r3, [sp, #16]
   b8a74:	b333      	cbz	r3, b8ac4 <_strtod_l+0xb6c>
   b8a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8a78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8a7c:	d822      	bhi.n	b8ac4 <_strtod_l+0xb6c>
   b8a7e:	a32e      	add	r3, pc, #184	; (adr r3, b8b38 <_strtod_l+0xbe0>)
   b8a80:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8a84:	4640      	mov	r0, r8
   b8a86:	4649      	mov	r1, r9
   b8a88:	f7ff f8ec 	bl	b7c64 <__aeabi_dcmple>
   b8a8c:	b1a0      	cbz	r0, b8ab8 <_strtod_l+0xb60>
   b8a8e:	4649      	mov	r1, r9
   b8a90:	4640      	mov	r0, r8
   b8a92:	f7ff f905 	bl	b7ca0 <__aeabi_d2uiz>
   b8a96:	2801      	cmp	r0, #1
   b8a98:	bf38      	it	cc
   b8a9a:	2001      	movcc	r0, #1
   b8a9c:	f7fe fdec 	bl	b7678 <__aeabi_ui2d>
   b8aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8aa2:	4680      	mov	r8, r0
   b8aa4:	4689      	mov	r9, r1
   b8aa6:	bb23      	cbnz	r3, b8af2 <_strtod_l+0xb9a>
   b8aa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8aac:	9010      	str	r0, [sp, #64]	; 0x40
   b8aae:	9311      	str	r3, [sp, #68]	; 0x44
   b8ab0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b8ab4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8aba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8abc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b8ac0:	1a9b      	subs	r3, r3, r2
   b8ac2:	9309      	str	r3, [sp, #36]	; 0x24
   b8ac4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8ac8:	eeb0 0a48 	vmov.f32	s0, s16
   b8acc:	eef0 0a68 	vmov.f32	s1, s17
   b8ad0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8ad4:	f001 f838 	bl	b9b48 <__ulp>
   b8ad8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8adc:	ec53 2b10 	vmov	r2, r3, d0
   b8ae0:	f7fe fe44 	bl	b776c <__aeabi_dmul>
   b8ae4:	ec53 2b18 	vmov	r2, r3, d8
   b8ae8:	f7fe fc8a 	bl	b7400 <__adddf3>
   b8aec:	4682      	mov	sl, r0
   b8aee:	468b      	mov	fp, r1
   b8af0:	e78d      	b.n	b8a0e <_strtod_l+0xab6>
   b8af2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b8af6:	e7db      	b.n	b8ab0 <_strtod_l+0xb58>
   b8af8:	a311      	add	r3, pc, #68	; (adr r3, b8b40 <_strtod_l+0xbe8>)
   b8afa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8afe:	f7ff f8a7 	bl	b7c50 <__aeabi_dcmplt>
   b8b02:	e7b2      	b.n	b8a6a <_strtod_l+0xb12>
   b8b04:	2300      	movs	r3, #0
   b8b06:	930a      	str	r3, [sp, #40]	; 0x28
   b8b08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b8b0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8b0c:	6013      	str	r3, [r2, #0]
   b8b0e:	f7ff ba6b 	b.w	b7fe8 <_strtod_l+0x90>
   b8b12:	2a65      	cmp	r2, #101	; 0x65
   b8b14:	f43f ab5f 	beq.w	b81d6 <_strtod_l+0x27e>
   b8b18:	2a45      	cmp	r2, #69	; 0x45
   b8b1a:	f43f ab5c 	beq.w	b81d6 <_strtod_l+0x27e>
   b8b1e:	2301      	movs	r3, #1
   b8b20:	f7ff bb94 	b.w	b824c <_strtod_l+0x2f4>
   b8b24:	f3af 8000 	nop.w
   b8b28:	94a03595 	.word	0x94a03595
   b8b2c:	3fdfffff 	.word	0x3fdfffff
   b8b30:	35afe535 	.word	0x35afe535
   b8b34:	3fe00000 	.word	0x3fe00000
   b8b38:	ffc00000 	.word	0xffc00000
   b8b3c:	41dfffff 	.word	0x41dfffff
   b8b40:	94a03595 	.word	0x94a03595
   b8b44:	3fcfffff 	.word	0x3fcfffff
   b8b48:	3ff00000 	.word	0x3ff00000
   b8b4c:	7ff00000 	.word	0x7ff00000
   b8b50:	7fe00000 	.word	0x7fe00000
   b8b54:	7c9fffff 	.word	0x7c9fffff
   b8b58:	3fe00000 	.word	0x3fe00000
   b8b5c:	bff00000 	.word	0xbff00000
   b8b60:	7fefffff 	.word	0x7fefffff

000b8b64 <strtod>:
   b8b64:	460a      	mov	r2, r1
   b8b66:	4601      	mov	r1, r0
   b8b68:	4802      	ldr	r0, [pc, #8]	; (b8b74 <strtod+0x10>)
   b8b6a:	4b03      	ldr	r3, [pc, #12]	; (b8b78 <strtod+0x14>)
   b8b6c:	6800      	ldr	r0, [r0, #0]
   b8b6e:	f7ff b9f3 	b.w	b7f58 <_strtod_l>
   b8b72:	bf00      	nop
   b8b74:	2003e1d0 	.word	0x2003e1d0
   b8b78:	2003e23c 	.word	0x2003e23c

000b8b7c <_strtol_l.constprop.0>:
   b8b7c:	2b01      	cmp	r3, #1
   b8b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b82:	d001      	beq.n	b8b88 <_strtol_l.constprop.0+0xc>
   b8b84:	2b24      	cmp	r3, #36	; 0x24
   b8b86:	d906      	bls.n	b8b96 <_strtol_l.constprop.0+0x1a>
   b8b88:	f7fc fe36 	bl	b57f8 <__errno>
   b8b8c:	2316      	movs	r3, #22
   b8b8e:	6003      	str	r3, [r0, #0]
   b8b90:	2000      	movs	r0, #0
   b8b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8b96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8c7c <_strtol_l.constprop.0+0x100>
   b8b9a:	460d      	mov	r5, r1
   b8b9c:	462e      	mov	r6, r5
   b8b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8ba2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8ba6:	f017 0708 	ands.w	r7, r7, #8
   b8baa:	d1f7      	bne.n	b8b9c <_strtol_l.constprop.0+0x20>
   b8bac:	2c2d      	cmp	r4, #45	; 0x2d
   b8bae:	d132      	bne.n	b8c16 <_strtol_l.constprop.0+0x9a>
   b8bb0:	782c      	ldrb	r4, [r5, #0]
   b8bb2:	2701      	movs	r7, #1
   b8bb4:	1cb5      	adds	r5, r6, #2
   b8bb6:	2b00      	cmp	r3, #0
   b8bb8:	d05b      	beq.n	b8c72 <_strtol_l.constprop.0+0xf6>
   b8bba:	2b10      	cmp	r3, #16
   b8bbc:	d109      	bne.n	b8bd2 <_strtol_l.constprop.0+0x56>
   b8bbe:	2c30      	cmp	r4, #48	; 0x30
   b8bc0:	d107      	bne.n	b8bd2 <_strtol_l.constprop.0+0x56>
   b8bc2:	782c      	ldrb	r4, [r5, #0]
   b8bc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8bc8:	2c58      	cmp	r4, #88	; 0x58
   b8bca:	d14d      	bne.n	b8c68 <_strtol_l.constprop.0+0xec>
   b8bcc:	786c      	ldrb	r4, [r5, #1]
   b8bce:	2310      	movs	r3, #16
   b8bd0:	3502      	adds	r5, #2
   b8bd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8bd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8bda:	f04f 0c00 	mov.w	ip, #0
   b8bde:	fbb8 f9f3 	udiv	r9, r8, r3
   b8be2:	4666      	mov	r6, ip
   b8be4:	fb03 8a19 	mls	sl, r3, r9, r8
   b8be8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8bec:	f1be 0f09 	cmp.w	lr, #9
   b8bf0:	d816      	bhi.n	b8c20 <_strtol_l.constprop.0+0xa4>
   b8bf2:	4674      	mov	r4, lr
   b8bf4:	42a3      	cmp	r3, r4
   b8bf6:	dd24      	ble.n	b8c42 <_strtol_l.constprop.0+0xc6>
   b8bf8:	f1bc 0f00 	cmp.w	ip, #0
   b8bfc:	db1e      	blt.n	b8c3c <_strtol_l.constprop.0+0xc0>
   b8bfe:	45b1      	cmp	r9, r6
   b8c00:	d31c      	bcc.n	b8c3c <_strtol_l.constprop.0+0xc0>
   b8c02:	d101      	bne.n	b8c08 <_strtol_l.constprop.0+0x8c>
   b8c04:	45a2      	cmp	sl, r4
   b8c06:	db19      	blt.n	b8c3c <_strtol_l.constprop.0+0xc0>
   b8c08:	fb06 4603 	mla	r6, r6, r3, r4
   b8c0c:	f04f 0c01 	mov.w	ip, #1
   b8c10:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8c14:	e7e8      	b.n	b8be8 <_strtol_l.constprop.0+0x6c>
   b8c16:	2c2b      	cmp	r4, #43	; 0x2b
   b8c18:	bf04      	itt	eq
   b8c1a:	782c      	ldrbeq	r4, [r5, #0]
   b8c1c:	1cb5      	addeq	r5, r6, #2
   b8c1e:	e7ca      	b.n	b8bb6 <_strtol_l.constprop.0+0x3a>
   b8c20:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8c24:	f1be 0f19 	cmp.w	lr, #25
   b8c28:	d801      	bhi.n	b8c2e <_strtol_l.constprop.0+0xb2>
   b8c2a:	3c37      	subs	r4, #55	; 0x37
   b8c2c:	e7e2      	b.n	b8bf4 <_strtol_l.constprop.0+0x78>
   b8c2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8c32:	f1be 0f19 	cmp.w	lr, #25
   b8c36:	d804      	bhi.n	b8c42 <_strtol_l.constprop.0+0xc6>
   b8c38:	3c57      	subs	r4, #87	; 0x57
   b8c3a:	e7db      	b.n	b8bf4 <_strtol_l.constprop.0+0x78>
   b8c3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8c40:	e7e6      	b.n	b8c10 <_strtol_l.constprop.0+0x94>
   b8c42:	f1bc 0f00 	cmp.w	ip, #0
   b8c46:	da05      	bge.n	b8c54 <_strtol_l.constprop.0+0xd8>
   b8c48:	2322      	movs	r3, #34	; 0x22
   b8c4a:	6003      	str	r3, [r0, #0]
   b8c4c:	4646      	mov	r6, r8
   b8c4e:	b942      	cbnz	r2, b8c62 <_strtol_l.constprop.0+0xe6>
   b8c50:	4630      	mov	r0, r6
   b8c52:	e79e      	b.n	b8b92 <_strtol_l.constprop.0+0x16>
   b8c54:	b107      	cbz	r7, b8c58 <_strtol_l.constprop.0+0xdc>
   b8c56:	4276      	negs	r6, r6
   b8c58:	2a00      	cmp	r2, #0
   b8c5a:	d0f9      	beq.n	b8c50 <_strtol_l.constprop.0+0xd4>
   b8c5c:	f1bc 0f00 	cmp.w	ip, #0
   b8c60:	d000      	beq.n	b8c64 <_strtol_l.constprop.0+0xe8>
   b8c62:	1e69      	subs	r1, r5, #1
   b8c64:	6011      	str	r1, [r2, #0]
   b8c66:	e7f3      	b.n	b8c50 <_strtol_l.constprop.0+0xd4>
   b8c68:	2430      	movs	r4, #48	; 0x30
   b8c6a:	2b00      	cmp	r3, #0
   b8c6c:	d1b1      	bne.n	b8bd2 <_strtol_l.constprop.0+0x56>
   b8c6e:	2308      	movs	r3, #8
   b8c70:	e7af      	b.n	b8bd2 <_strtol_l.constprop.0+0x56>
   b8c72:	2c30      	cmp	r4, #48	; 0x30
   b8c74:	d0a5      	beq.n	b8bc2 <_strtol_l.constprop.0+0x46>
   b8c76:	230a      	movs	r3, #10
   b8c78:	e7ab      	b.n	b8bd2 <_strtol_l.constprop.0+0x56>
   b8c7a:	bf00      	nop
   b8c7c:	000ba671 	.word	0x000ba671

000b8c80 <strtol>:
   b8c80:	4613      	mov	r3, r2
   b8c82:	460a      	mov	r2, r1
   b8c84:	4601      	mov	r1, r0
   b8c86:	4802      	ldr	r0, [pc, #8]	; (b8c90 <strtol+0x10>)
   b8c88:	6800      	ldr	r0, [r0, #0]
   b8c8a:	f7ff bf77 	b.w	b8b7c <_strtol_l.constprop.0>
   b8c8e:	bf00      	nop
   b8c90:	2003e1d0 	.word	0x2003e1d0

000b8c94 <__register_exitproc>:
   b8c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c98:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8d54 <__register_exitproc+0xc0>
   b8c9c:	4606      	mov	r6, r0
   b8c9e:	f8d8 0000 	ldr.w	r0, [r8]
   b8ca2:	461f      	mov	r7, r3
   b8ca4:	460d      	mov	r5, r1
   b8ca6:	4691      	mov	r9, r2
   b8ca8:	f000 fbc6 	bl	b9438 <__retarget_lock_acquire_recursive>
   b8cac:	4b25      	ldr	r3, [pc, #148]	; (b8d44 <__register_exitproc+0xb0>)
   b8cae:	681c      	ldr	r4, [r3, #0]
   b8cb0:	b934      	cbnz	r4, b8cc0 <__register_exitproc+0x2c>
   b8cb2:	4c25      	ldr	r4, [pc, #148]	; (b8d48 <__register_exitproc+0xb4>)
   b8cb4:	601c      	str	r4, [r3, #0]
   b8cb6:	4b25      	ldr	r3, [pc, #148]	; (b8d4c <__register_exitproc+0xb8>)
   b8cb8:	b113      	cbz	r3, b8cc0 <__register_exitproc+0x2c>
   b8cba:	681b      	ldr	r3, [r3, #0]
   b8cbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8cc0:	6863      	ldr	r3, [r4, #4]
   b8cc2:	2b1f      	cmp	r3, #31
   b8cc4:	dd07      	ble.n	b8cd6 <__register_exitproc+0x42>
   b8cc6:	f8d8 0000 	ldr.w	r0, [r8]
   b8cca:	f000 fbb7 	bl	b943c <__retarget_lock_release_recursive>
   b8cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8cd6:	b34e      	cbz	r6, b8d2c <__register_exitproc+0x98>
   b8cd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8cdc:	b988      	cbnz	r0, b8d02 <__register_exitproc+0x6e>
   b8cde:	4b1c      	ldr	r3, [pc, #112]	; (b8d50 <__register_exitproc+0xbc>)
   b8ce0:	b923      	cbnz	r3, b8cec <__register_exitproc+0x58>
   b8ce2:	f8d8 0000 	ldr.w	r0, [r8]
   b8ce6:	f000 fba8 	bl	b943a <__retarget_lock_release>
   b8cea:	e7f0      	b.n	b8cce <__register_exitproc+0x3a>
   b8cec:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8cf0:	f7fc fd42 	bl	b5778 <malloc>
   b8cf4:	2800      	cmp	r0, #0
   b8cf6:	d0f4      	beq.n	b8ce2 <__register_exitproc+0x4e>
   b8cf8:	2300      	movs	r3, #0
   b8cfa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8cfe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8d02:	6863      	ldr	r3, [r4, #4]
   b8d04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8d08:	2201      	movs	r2, #1
   b8d0a:	409a      	lsls	r2, r3
   b8d0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8d10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8d14:	4313      	orrs	r3, r2
   b8d16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8d1a:	2e02      	cmp	r6, #2
   b8d1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8d20:	bf02      	ittt	eq
   b8d22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8d26:	4313      	orreq	r3, r2
   b8d28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8d2c:	6863      	ldr	r3, [r4, #4]
   b8d2e:	f8d8 0000 	ldr.w	r0, [r8]
   b8d32:	1c5a      	adds	r2, r3, #1
   b8d34:	3302      	adds	r3, #2
   b8d36:	6062      	str	r2, [r4, #4]
   b8d38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8d3c:	f000 fb7e 	bl	b943c <__retarget_lock_release_recursive>
   b8d40:	2000      	movs	r0, #0
   b8d42:	e7c6      	b.n	b8cd2 <__register_exitproc+0x3e>
   b8d44:	2003e7e8 	.word	0x2003e7e8
   b8d48:	2003e75c 	.word	0x2003e75c
   b8d4c:	00000000 	.word	0x00000000
   b8d50:	000b5779 	.word	0x000b5779
   b8d54:	2003e234 	.word	0x2003e234

000b8d58 <rshift>:
   b8d58:	6903      	ldr	r3, [r0, #16]
   b8d5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8d62:	ea4f 1261 	mov.w	r2, r1, asr #5
   b8d66:	f100 0414 	add.w	r4, r0, #20
   b8d6a:	dd45      	ble.n	b8df8 <rshift+0xa0>
   b8d6c:	f011 011f 	ands.w	r1, r1, #31
   b8d70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b8d74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8d78:	d10c      	bne.n	b8d94 <rshift+0x3c>
   b8d7a:	f100 0710 	add.w	r7, r0, #16
   b8d7e:	4629      	mov	r1, r5
   b8d80:	42b1      	cmp	r1, r6
   b8d82:	d334      	bcc.n	b8dee <rshift+0x96>
   b8d84:	1a9b      	subs	r3, r3, r2
   b8d86:	009b      	lsls	r3, r3, #2
   b8d88:	1eea      	subs	r2, r5, #3
   b8d8a:	4296      	cmp	r6, r2
   b8d8c:	bf38      	it	cc
   b8d8e:	2300      	movcc	r3, #0
   b8d90:	4423      	add	r3, r4
   b8d92:	e015      	b.n	b8dc0 <rshift+0x68>
   b8d94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8d98:	f1c1 0820 	rsb	r8, r1, #32
   b8d9c:	40cf      	lsrs	r7, r1
   b8d9e:	f105 0e04 	add.w	lr, r5, #4
   b8da2:	46a1      	mov	r9, r4
   b8da4:	4576      	cmp	r6, lr
   b8da6:	46f4      	mov	ip, lr
   b8da8:	d815      	bhi.n	b8dd6 <rshift+0x7e>
   b8daa:	1a9a      	subs	r2, r3, r2
   b8dac:	0092      	lsls	r2, r2, #2
   b8dae:	3a04      	subs	r2, #4
   b8db0:	3501      	adds	r5, #1
   b8db2:	42ae      	cmp	r6, r5
   b8db4:	bf38      	it	cc
   b8db6:	2200      	movcc	r2, #0
   b8db8:	18a3      	adds	r3, r4, r2
   b8dba:	50a7      	str	r7, [r4, r2]
   b8dbc:	b107      	cbz	r7, b8dc0 <rshift+0x68>
   b8dbe:	3304      	adds	r3, #4
   b8dc0:	1b1a      	subs	r2, r3, r4
   b8dc2:	42a3      	cmp	r3, r4
   b8dc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b8dc8:	bf08      	it	eq
   b8dca:	2300      	moveq	r3, #0
   b8dcc:	6102      	str	r2, [r0, #16]
   b8dce:	bf08      	it	eq
   b8dd0:	6143      	streq	r3, [r0, #20]
   b8dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8dd6:	f8dc c000 	ldr.w	ip, [ip]
   b8dda:	fa0c fc08 	lsl.w	ip, ip, r8
   b8dde:	ea4c 0707 	orr.w	r7, ip, r7
   b8de2:	f849 7b04 	str.w	r7, [r9], #4
   b8de6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8dea:	40cf      	lsrs	r7, r1
   b8dec:	e7da      	b.n	b8da4 <rshift+0x4c>
   b8dee:	f851 cb04 	ldr.w	ip, [r1], #4
   b8df2:	f847 cf04 	str.w	ip, [r7, #4]!
   b8df6:	e7c3      	b.n	b8d80 <rshift+0x28>
   b8df8:	4623      	mov	r3, r4
   b8dfa:	e7e1      	b.n	b8dc0 <rshift+0x68>

000b8dfc <__hexdig_fun>:
   b8dfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8e00:	2b09      	cmp	r3, #9
   b8e02:	d802      	bhi.n	b8e0a <__hexdig_fun+0xe>
   b8e04:	3820      	subs	r0, #32
   b8e06:	b2c0      	uxtb	r0, r0
   b8e08:	4770      	bx	lr
   b8e0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8e0e:	2b05      	cmp	r3, #5
   b8e10:	d801      	bhi.n	b8e16 <__hexdig_fun+0x1a>
   b8e12:	3847      	subs	r0, #71	; 0x47
   b8e14:	e7f7      	b.n	b8e06 <__hexdig_fun+0xa>
   b8e16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8e1a:	2b05      	cmp	r3, #5
   b8e1c:	d801      	bhi.n	b8e22 <__hexdig_fun+0x26>
   b8e1e:	3827      	subs	r0, #39	; 0x27
   b8e20:	e7f1      	b.n	b8e06 <__hexdig_fun+0xa>
   b8e22:	2000      	movs	r0, #0
   b8e24:	4770      	bx	lr
	...

000b8e28 <__gethex>:
   b8e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e2c:	ed2d 8b02 	vpush	{d8}
   b8e30:	b089      	sub	sp, #36	; 0x24
   b8e32:	ee08 0a10 	vmov	s16, r0
   b8e36:	9304      	str	r3, [sp, #16]
   b8e38:	4bb4      	ldr	r3, [pc, #720]	; (b910c <__gethex+0x2e4>)
   b8e3a:	681b      	ldr	r3, [r3, #0]
   b8e3c:	9301      	str	r3, [sp, #4]
   b8e3e:	4618      	mov	r0, r3
   b8e40:	468b      	mov	fp, r1
   b8e42:	4690      	mov	r8, r2
   b8e44:	f7ff f83b 	bl	b7ebe <strlen>
   b8e48:	9b01      	ldr	r3, [sp, #4]
   b8e4a:	f8db 2000 	ldr.w	r2, [fp]
   b8e4e:	4403      	add	r3, r0
   b8e50:	4682      	mov	sl, r0
   b8e52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b8e56:	9305      	str	r3, [sp, #20]
   b8e58:	1c93      	adds	r3, r2, #2
   b8e5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8e5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b8e62:	32fe      	adds	r2, #254	; 0xfe
   b8e64:	18d1      	adds	r1, r2, r3
   b8e66:	461f      	mov	r7, r3
   b8e68:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8e6c:	9100      	str	r1, [sp, #0]
   b8e6e:	2830      	cmp	r0, #48	; 0x30
   b8e70:	d0f8      	beq.n	b8e64 <__gethex+0x3c>
   b8e72:	f7ff ffc3 	bl	b8dfc <__hexdig_fun>
   b8e76:	4604      	mov	r4, r0
   b8e78:	2800      	cmp	r0, #0
   b8e7a:	d13a      	bne.n	b8ef2 <__gethex+0xca>
   b8e7c:	9901      	ldr	r1, [sp, #4]
   b8e7e:	4652      	mov	r2, sl
   b8e80:	4638      	mov	r0, r7
   b8e82:	f7ff f824 	bl	b7ece <strncmp>
   b8e86:	4605      	mov	r5, r0
   b8e88:	2800      	cmp	r0, #0
   b8e8a:	d168      	bne.n	b8f5e <__gethex+0x136>
   b8e8c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8e90:	eb07 060a 	add.w	r6, r7, sl
   b8e94:	f7ff ffb2 	bl	b8dfc <__hexdig_fun>
   b8e98:	2800      	cmp	r0, #0
   b8e9a:	d062      	beq.n	b8f62 <__gethex+0x13a>
   b8e9c:	4633      	mov	r3, r6
   b8e9e:	7818      	ldrb	r0, [r3, #0]
   b8ea0:	2830      	cmp	r0, #48	; 0x30
   b8ea2:	461f      	mov	r7, r3
   b8ea4:	f103 0301 	add.w	r3, r3, #1
   b8ea8:	d0f9      	beq.n	b8e9e <__gethex+0x76>
   b8eaa:	f7ff ffa7 	bl	b8dfc <__hexdig_fun>
   b8eae:	2301      	movs	r3, #1
   b8eb0:	fab0 f480 	clz	r4, r0
   b8eb4:	0964      	lsrs	r4, r4, #5
   b8eb6:	4635      	mov	r5, r6
   b8eb8:	9300      	str	r3, [sp, #0]
   b8eba:	463a      	mov	r2, r7
   b8ebc:	4616      	mov	r6, r2
   b8ebe:	3201      	adds	r2, #1
   b8ec0:	7830      	ldrb	r0, [r6, #0]
   b8ec2:	f7ff ff9b 	bl	b8dfc <__hexdig_fun>
   b8ec6:	2800      	cmp	r0, #0
   b8ec8:	d1f8      	bne.n	b8ebc <__gethex+0x94>
   b8eca:	9901      	ldr	r1, [sp, #4]
   b8ecc:	4652      	mov	r2, sl
   b8ece:	4630      	mov	r0, r6
   b8ed0:	f7fe fffd 	bl	b7ece <strncmp>
   b8ed4:	b980      	cbnz	r0, b8ef8 <__gethex+0xd0>
   b8ed6:	b94d      	cbnz	r5, b8eec <__gethex+0xc4>
   b8ed8:	eb06 050a 	add.w	r5, r6, sl
   b8edc:	462a      	mov	r2, r5
   b8ede:	4616      	mov	r6, r2
   b8ee0:	3201      	adds	r2, #1
   b8ee2:	7830      	ldrb	r0, [r6, #0]
   b8ee4:	f7ff ff8a 	bl	b8dfc <__hexdig_fun>
   b8ee8:	2800      	cmp	r0, #0
   b8eea:	d1f8      	bne.n	b8ede <__gethex+0xb6>
   b8eec:	1bad      	subs	r5, r5, r6
   b8eee:	00ad      	lsls	r5, r5, #2
   b8ef0:	e004      	b.n	b8efc <__gethex+0xd4>
   b8ef2:	2400      	movs	r4, #0
   b8ef4:	4625      	mov	r5, r4
   b8ef6:	e7e0      	b.n	b8eba <__gethex+0x92>
   b8ef8:	2d00      	cmp	r5, #0
   b8efa:	d1f7      	bne.n	b8eec <__gethex+0xc4>
   b8efc:	7833      	ldrb	r3, [r6, #0]
   b8efe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8f02:	2b50      	cmp	r3, #80	; 0x50
   b8f04:	d13b      	bne.n	b8f7e <__gethex+0x156>
   b8f06:	7873      	ldrb	r3, [r6, #1]
   b8f08:	2b2b      	cmp	r3, #43	; 0x2b
   b8f0a:	d02c      	beq.n	b8f66 <__gethex+0x13e>
   b8f0c:	2b2d      	cmp	r3, #45	; 0x2d
   b8f0e:	d02e      	beq.n	b8f6e <__gethex+0x146>
   b8f10:	1c71      	adds	r1, r6, #1
   b8f12:	f04f 0900 	mov.w	r9, #0
   b8f16:	7808      	ldrb	r0, [r1, #0]
   b8f18:	f7ff ff70 	bl	b8dfc <__hexdig_fun>
   b8f1c:	1e43      	subs	r3, r0, #1
   b8f1e:	b2db      	uxtb	r3, r3
   b8f20:	2b18      	cmp	r3, #24
   b8f22:	d82c      	bhi.n	b8f7e <__gethex+0x156>
   b8f24:	f1a0 0210 	sub.w	r2, r0, #16
   b8f28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b8f2c:	f7ff ff66 	bl	b8dfc <__hexdig_fun>
   b8f30:	1e43      	subs	r3, r0, #1
   b8f32:	b2db      	uxtb	r3, r3
   b8f34:	2b18      	cmp	r3, #24
   b8f36:	d91d      	bls.n	b8f74 <__gethex+0x14c>
   b8f38:	f1b9 0f00 	cmp.w	r9, #0
   b8f3c:	d000      	beq.n	b8f40 <__gethex+0x118>
   b8f3e:	4252      	negs	r2, r2
   b8f40:	4415      	add	r5, r2
   b8f42:	f8cb 1000 	str.w	r1, [fp]
   b8f46:	b1e4      	cbz	r4, b8f82 <__gethex+0x15a>
   b8f48:	9b00      	ldr	r3, [sp, #0]
   b8f4a:	2b00      	cmp	r3, #0
   b8f4c:	bf14      	ite	ne
   b8f4e:	2700      	movne	r7, #0
   b8f50:	2706      	moveq	r7, #6
   b8f52:	4638      	mov	r0, r7
   b8f54:	b009      	add	sp, #36	; 0x24
   b8f56:	ecbd 8b02 	vpop	{d8}
   b8f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f5e:	463e      	mov	r6, r7
   b8f60:	4625      	mov	r5, r4
   b8f62:	2401      	movs	r4, #1
   b8f64:	e7ca      	b.n	b8efc <__gethex+0xd4>
   b8f66:	f04f 0900 	mov.w	r9, #0
   b8f6a:	1cb1      	adds	r1, r6, #2
   b8f6c:	e7d3      	b.n	b8f16 <__gethex+0xee>
   b8f6e:	f04f 0901 	mov.w	r9, #1
   b8f72:	e7fa      	b.n	b8f6a <__gethex+0x142>
   b8f74:	230a      	movs	r3, #10
   b8f76:	fb03 0202 	mla	r2, r3, r2, r0
   b8f7a:	3a10      	subs	r2, #16
   b8f7c:	e7d4      	b.n	b8f28 <__gethex+0x100>
   b8f7e:	4631      	mov	r1, r6
   b8f80:	e7df      	b.n	b8f42 <__gethex+0x11a>
   b8f82:	1bf3      	subs	r3, r6, r7
   b8f84:	3b01      	subs	r3, #1
   b8f86:	4621      	mov	r1, r4
   b8f88:	2b07      	cmp	r3, #7
   b8f8a:	dc0b      	bgt.n	b8fa4 <__gethex+0x17c>
   b8f8c:	ee18 0a10 	vmov	r0, s16
   b8f90:	f000 fa68 	bl	b9464 <_Balloc>
   b8f94:	4604      	mov	r4, r0
   b8f96:	b940      	cbnz	r0, b8faa <__gethex+0x182>
   b8f98:	4b5d      	ldr	r3, [pc, #372]	; (b9110 <__gethex+0x2e8>)
   b8f9a:	4602      	mov	r2, r0
   b8f9c:	21de      	movs	r1, #222	; 0xde
   b8f9e:	485d      	ldr	r0, [pc, #372]	; (b9114 <__gethex+0x2ec>)
   b8fa0:	f7fc fc32 	bl	b5808 <__assert_func>
   b8fa4:	3101      	adds	r1, #1
   b8fa6:	105b      	asrs	r3, r3, #1
   b8fa8:	e7ee      	b.n	b8f88 <__gethex+0x160>
   b8faa:	f100 0914 	add.w	r9, r0, #20
   b8fae:	f04f 0b00 	mov.w	fp, #0
   b8fb2:	f1ca 0301 	rsb	r3, sl, #1
   b8fb6:	f8cd 9008 	str.w	r9, [sp, #8]
   b8fba:	f8cd b000 	str.w	fp, [sp]
   b8fbe:	9306      	str	r3, [sp, #24]
   b8fc0:	42b7      	cmp	r7, r6
   b8fc2:	d340      	bcc.n	b9046 <__gethex+0x21e>
   b8fc4:	9802      	ldr	r0, [sp, #8]
   b8fc6:	9b00      	ldr	r3, [sp, #0]
   b8fc8:	f840 3b04 	str.w	r3, [r0], #4
   b8fcc:	eba0 0009 	sub.w	r0, r0, r9
   b8fd0:	1080      	asrs	r0, r0, #2
   b8fd2:	0146      	lsls	r6, r0, #5
   b8fd4:	6120      	str	r0, [r4, #16]
   b8fd6:	4618      	mov	r0, r3
   b8fd8:	f000 fb36 	bl	b9648 <__hi0bits>
   b8fdc:	1a30      	subs	r0, r6, r0
   b8fde:	f8d8 6000 	ldr.w	r6, [r8]
   b8fe2:	42b0      	cmp	r0, r6
   b8fe4:	dd63      	ble.n	b90ae <__gethex+0x286>
   b8fe6:	1b87      	subs	r7, r0, r6
   b8fe8:	4639      	mov	r1, r7
   b8fea:	4620      	mov	r0, r4
   b8fec:	f000 feda 	bl	b9da4 <__any_on>
   b8ff0:	4682      	mov	sl, r0
   b8ff2:	b1a8      	cbz	r0, b9020 <__gethex+0x1f8>
   b8ff4:	1e7b      	subs	r3, r7, #1
   b8ff6:	1159      	asrs	r1, r3, #5
   b8ff8:	f003 021f 	and.w	r2, r3, #31
   b8ffc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9000:	f04f 0a01 	mov.w	sl, #1
   b9004:	fa0a f202 	lsl.w	r2, sl, r2
   b9008:	420a      	tst	r2, r1
   b900a:	d009      	beq.n	b9020 <__gethex+0x1f8>
   b900c:	4553      	cmp	r3, sl
   b900e:	dd05      	ble.n	b901c <__gethex+0x1f4>
   b9010:	1eb9      	subs	r1, r7, #2
   b9012:	4620      	mov	r0, r4
   b9014:	f000 fec6 	bl	b9da4 <__any_on>
   b9018:	2800      	cmp	r0, #0
   b901a:	d145      	bne.n	b90a8 <__gethex+0x280>
   b901c:	f04f 0a02 	mov.w	sl, #2
   b9020:	4639      	mov	r1, r7
   b9022:	4620      	mov	r0, r4
   b9024:	f7ff fe98 	bl	b8d58 <rshift>
   b9028:	443d      	add	r5, r7
   b902a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b902e:	42ab      	cmp	r3, r5
   b9030:	da4c      	bge.n	b90cc <__gethex+0x2a4>
   b9032:	ee18 0a10 	vmov	r0, s16
   b9036:	4621      	mov	r1, r4
   b9038:	f000 fa54 	bl	b94e4 <_Bfree>
   b903c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b903e:	2300      	movs	r3, #0
   b9040:	6013      	str	r3, [r2, #0]
   b9042:	27a3      	movs	r7, #163	; 0xa3
   b9044:	e785      	b.n	b8f52 <__gethex+0x12a>
   b9046:	1e73      	subs	r3, r6, #1
   b9048:	9a05      	ldr	r2, [sp, #20]
   b904a:	9303      	str	r3, [sp, #12]
   b904c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9050:	4293      	cmp	r3, r2
   b9052:	d019      	beq.n	b9088 <__gethex+0x260>
   b9054:	f1bb 0f20 	cmp.w	fp, #32
   b9058:	d107      	bne.n	b906a <__gethex+0x242>
   b905a:	9b02      	ldr	r3, [sp, #8]
   b905c:	9a00      	ldr	r2, [sp, #0]
   b905e:	f843 2b04 	str.w	r2, [r3], #4
   b9062:	9302      	str	r3, [sp, #8]
   b9064:	2300      	movs	r3, #0
   b9066:	9300      	str	r3, [sp, #0]
   b9068:	469b      	mov	fp, r3
   b906a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b906e:	f7ff fec5 	bl	b8dfc <__hexdig_fun>
   b9072:	9b00      	ldr	r3, [sp, #0]
   b9074:	f000 000f 	and.w	r0, r0, #15
   b9078:	fa00 f00b 	lsl.w	r0, r0, fp
   b907c:	4303      	orrs	r3, r0
   b907e:	9300      	str	r3, [sp, #0]
   b9080:	f10b 0b04 	add.w	fp, fp, #4
   b9084:	9b03      	ldr	r3, [sp, #12]
   b9086:	e00d      	b.n	b90a4 <__gethex+0x27c>
   b9088:	9b03      	ldr	r3, [sp, #12]
   b908a:	9a06      	ldr	r2, [sp, #24]
   b908c:	4413      	add	r3, r2
   b908e:	42bb      	cmp	r3, r7
   b9090:	d3e0      	bcc.n	b9054 <__gethex+0x22c>
   b9092:	4618      	mov	r0, r3
   b9094:	9901      	ldr	r1, [sp, #4]
   b9096:	9307      	str	r3, [sp, #28]
   b9098:	4652      	mov	r2, sl
   b909a:	f7fe ff18 	bl	b7ece <strncmp>
   b909e:	9b07      	ldr	r3, [sp, #28]
   b90a0:	2800      	cmp	r0, #0
   b90a2:	d1d7      	bne.n	b9054 <__gethex+0x22c>
   b90a4:	461e      	mov	r6, r3
   b90a6:	e78b      	b.n	b8fc0 <__gethex+0x198>
   b90a8:	f04f 0a03 	mov.w	sl, #3
   b90ac:	e7b8      	b.n	b9020 <__gethex+0x1f8>
   b90ae:	da0a      	bge.n	b90c6 <__gethex+0x29e>
   b90b0:	1a37      	subs	r7, r6, r0
   b90b2:	4621      	mov	r1, r4
   b90b4:	ee18 0a10 	vmov	r0, s16
   b90b8:	463a      	mov	r2, r7
   b90ba:	f000 fc2f 	bl	b991c <__lshift>
   b90be:	1bed      	subs	r5, r5, r7
   b90c0:	4604      	mov	r4, r0
   b90c2:	f100 0914 	add.w	r9, r0, #20
   b90c6:	f04f 0a00 	mov.w	sl, #0
   b90ca:	e7ae      	b.n	b902a <__gethex+0x202>
   b90cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b90d0:	42a8      	cmp	r0, r5
   b90d2:	dd72      	ble.n	b91ba <__gethex+0x392>
   b90d4:	1b45      	subs	r5, r0, r5
   b90d6:	42ae      	cmp	r6, r5
   b90d8:	dc36      	bgt.n	b9148 <__gethex+0x320>
   b90da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b90de:	2b02      	cmp	r3, #2
   b90e0:	d02a      	beq.n	b9138 <__gethex+0x310>
   b90e2:	2b03      	cmp	r3, #3
   b90e4:	d02c      	beq.n	b9140 <__gethex+0x318>
   b90e6:	2b01      	cmp	r3, #1
   b90e8:	d11c      	bne.n	b9124 <__gethex+0x2fc>
   b90ea:	42ae      	cmp	r6, r5
   b90ec:	d11a      	bne.n	b9124 <__gethex+0x2fc>
   b90ee:	2e01      	cmp	r6, #1
   b90f0:	d112      	bne.n	b9118 <__gethex+0x2f0>
   b90f2:	9a04      	ldr	r2, [sp, #16]
   b90f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b90f8:	6013      	str	r3, [r2, #0]
   b90fa:	2301      	movs	r3, #1
   b90fc:	6123      	str	r3, [r4, #16]
   b90fe:	f8c9 3000 	str.w	r3, [r9]
   b9102:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9104:	2762      	movs	r7, #98	; 0x62
   b9106:	601c      	str	r4, [r3, #0]
   b9108:	e723      	b.n	b8f52 <__gethex+0x12a>
   b910a:	bf00      	nop
   b910c:	000ba808 	.word	0x000ba808
   b9110:	000ba771 	.word	0x000ba771
   b9114:	000ba782 	.word	0x000ba782
   b9118:	1e71      	subs	r1, r6, #1
   b911a:	4620      	mov	r0, r4
   b911c:	f000 fe42 	bl	b9da4 <__any_on>
   b9120:	2800      	cmp	r0, #0
   b9122:	d1e6      	bne.n	b90f2 <__gethex+0x2ca>
   b9124:	ee18 0a10 	vmov	r0, s16
   b9128:	4621      	mov	r1, r4
   b912a:	f000 f9db 	bl	b94e4 <_Bfree>
   b912e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9130:	2300      	movs	r3, #0
   b9132:	6013      	str	r3, [r2, #0]
   b9134:	2750      	movs	r7, #80	; 0x50
   b9136:	e70c      	b.n	b8f52 <__gethex+0x12a>
   b9138:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b913a:	2b00      	cmp	r3, #0
   b913c:	d1f2      	bne.n	b9124 <__gethex+0x2fc>
   b913e:	e7d8      	b.n	b90f2 <__gethex+0x2ca>
   b9140:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9142:	2b00      	cmp	r3, #0
   b9144:	d1d5      	bne.n	b90f2 <__gethex+0x2ca>
   b9146:	e7ed      	b.n	b9124 <__gethex+0x2fc>
   b9148:	1e6f      	subs	r7, r5, #1
   b914a:	f1ba 0f00 	cmp.w	sl, #0
   b914e:	d131      	bne.n	b91b4 <__gethex+0x38c>
   b9150:	b127      	cbz	r7, b915c <__gethex+0x334>
   b9152:	4639      	mov	r1, r7
   b9154:	4620      	mov	r0, r4
   b9156:	f000 fe25 	bl	b9da4 <__any_on>
   b915a:	4682      	mov	sl, r0
   b915c:	117b      	asrs	r3, r7, #5
   b915e:	2101      	movs	r1, #1
   b9160:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b9164:	f007 071f 	and.w	r7, r7, #31
   b9168:	fa01 f707 	lsl.w	r7, r1, r7
   b916c:	421f      	tst	r7, r3
   b916e:	4629      	mov	r1, r5
   b9170:	4620      	mov	r0, r4
   b9172:	bf18      	it	ne
   b9174:	f04a 0a02 	orrne.w	sl, sl, #2
   b9178:	1b76      	subs	r6, r6, r5
   b917a:	f7ff fded 	bl	b8d58 <rshift>
   b917e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b9182:	2702      	movs	r7, #2
   b9184:	f1ba 0f00 	cmp.w	sl, #0
   b9188:	d048      	beq.n	b921c <__gethex+0x3f4>
   b918a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b918e:	2b02      	cmp	r3, #2
   b9190:	d015      	beq.n	b91be <__gethex+0x396>
   b9192:	2b03      	cmp	r3, #3
   b9194:	d017      	beq.n	b91c6 <__gethex+0x39e>
   b9196:	2b01      	cmp	r3, #1
   b9198:	d109      	bne.n	b91ae <__gethex+0x386>
   b919a:	f01a 0f02 	tst.w	sl, #2
   b919e:	d006      	beq.n	b91ae <__gethex+0x386>
   b91a0:	f8d9 0000 	ldr.w	r0, [r9]
   b91a4:	ea4a 0a00 	orr.w	sl, sl, r0
   b91a8:	f01a 0f01 	tst.w	sl, #1
   b91ac:	d10e      	bne.n	b91cc <__gethex+0x3a4>
   b91ae:	f047 0710 	orr.w	r7, r7, #16
   b91b2:	e033      	b.n	b921c <__gethex+0x3f4>
   b91b4:	f04f 0a01 	mov.w	sl, #1
   b91b8:	e7d0      	b.n	b915c <__gethex+0x334>
   b91ba:	2701      	movs	r7, #1
   b91bc:	e7e2      	b.n	b9184 <__gethex+0x35c>
   b91be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b91c0:	f1c3 0301 	rsb	r3, r3, #1
   b91c4:	9315      	str	r3, [sp, #84]	; 0x54
   b91c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b91c8:	2b00      	cmp	r3, #0
   b91ca:	d0f0      	beq.n	b91ae <__gethex+0x386>
   b91cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b91d0:	f104 0314 	add.w	r3, r4, #20
   b91d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b91d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b91dc:	f04f 0c00 	mov.w	ip, #0
   b91e0:	4618      	mov	r0, r3
   b91e2:	f853 2b04 	ldr.w	r2, [r3], #4
   b91e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b91ea:	d01c      	beq.n	b9226 <__gethex+0x3fe>
   b91ec:	3201      	adds	r2, #1
   b91ee:	6002      	str	r2, [r0, #0]
   b91f0:	2f02      	cmp	r7, #2
   b91f2:	f104 0314 	add.w	r3, r4, #20
   b91f6:	d13f      	bne.n	b9278 <__gethex+0x450>
   b91f8:	f8d8 2000 	ldr.w	r2, [r8]
   b91fc:	3a01      	subs	r2, #1
   b91fe:	42b2      	cmp	r2, r6
   b9200:	d10a      	bne.n	b9218 <__gethex+0x3f0>
   b9202:	1171      	asrs	r1, r6, #5
   b9204:	2201      	movs	r2, #1
   b9206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b920a:	f006 061f 	and.w	r6, r6, #31
   b920e:	fa02 f606 	lsl.w	r6, r2, r6
   b9212:	421e      	tst	r6, r3
   b9214:	bf18      	it	ne
   b9216:	4617      	movne	r7, r2
   b9218:	f047 0720 	orr.w	r7, r7, #32
   b921c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b921e:	601c      	str	r4, [r3, #0]
   b9220:	9b04      	ldr	r3, [sp, #16]
   b9222:	601d      	str	r5, [r3, #0]
   b9224:	e695      	b.n	b8f52 <__gethex+0x12a>
   b9226:	4299      	cmp	r1, r3
   b9228:	f843 cc04 	str.w	ip, [r3, #-4]
   b922c:	d8d8      	bhi.n	b91e0 <__gethex+0x3b8>
   b922e:	68a3      	ldr	r3, [r4, #8]
   b9230:	459b      	cmp	fp, r3
   b9232:	db19      	blt.n	b9268 <__gethex+0x440>
   b9234:	6861      	ldr	r1, [r4, #4]
   b9236:	ee18 0a10 	vmov	r0, s16
   b923a:	3101      	adds	r1, #1
   b923c:	f000 f912 	bl	b9464 <_Balloc>
   b9240:	4681      	mov	r9, r0
   b9242:	b918      	cbnz	r0, b924c <__gethex+0x424>
   b9244:	4b1a      	ldr	r3, [pc, #104]	; (b92b0 <__gethex+0x488>)
   b9246:	4602      	mov	r2, r0
   b9248:	2184      	movs	r1, #132	; 0x84
   b924a:	e6a8      	b.n	b8f9e <__gethex+0x176>
   b924c:	6922      	ldr	r2, [r4, #16]
   b924e:	3202      	adds	r2, #2
   b9250:	f104 010c 	add.w	r1, r4, #12
   b9254:	0092      	lsls	r2, r2, #2
   b9256:	300c      	adds	r0, #12
   b9258:	f7fe fdbd 	bl	b7dd6 <memcpy>
   b925c:	4621      	mov	r1, r4
   b925e:	ee18 0a10 	vmov	r0, s16
   b9262:	f000 f93f 	bl	b94e4 <_Bfree>
   b9266:	464c      	mov	r4, r9
   b9268:	6923      	ldr	r3, [r4, #16]
   b926a:	1c5a      	adds	r2, r3, #1
   b926c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9270:	6122      	str	r2, [r4, #16]
   b9272:	2201      	movs	r2, #1
   b9274:	615a      	str	r2, [r3, #20]
   b9276:	e7bb      	b.n	b91f0 <__gethex+0x3c8>
   b9278:	6922      	ldr	r2, [r4, #16]
   b927a:	455a      	cmp	r2, fp
   b927c:	dd0b      	ble.n	b9296 <__gethex+0x46e>
   b927e:	2101      	movs	r1, #1
   b9280:	4620      	mov	r0, r4
   b9282:	f7ff fd69 	bl	b8d58 <rshift>
   b9286:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b928a:	3501      	adds	r5, #1
   b928c:	42ab      	cmp	r3, r5
   b928e:	f6ff aed0 	blt.w	b9032 <__gethex+0x20a>
   b9292:	2701      	movs	r7, #1
   b9294:	e7c0      	b.n	b9218 <__gethex+0x3f0>
   b9296:	f016 061f 	ands.w	r6, r6, #31
   b929a:	d0fa      	beq.n	b9292 <__gethex+0x46a>
   b929c:	4453      	add	r3, sl
   b929e:	f1c6 0620 	rsb	r6, r6, #32
   b92a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b92a6:	f000 f9cf 	bl	b9648 <__hi0bits>
   b92aa:	42b0      	cmp	r0, r6
   b92ac:	dbe7      	blt.n	b927e <__gethex+0x456>
   b92ae:	e7f0      	b.n	b9292 <__gethex+0x46a>
   b92b0:	000ba771 	.word	0x000ba771

000b92b4 <L_shift>:
   b92b4:	f1c2 0208 	rsb	r2, r2, #8
   b92b8:	0092      	lsls	r2, r2, #2
   b92ba:	b570      	push	{r4, r5, r6, lr}
   b92bc:	f1c2 0620 	rsb	r6, r2, #32
   b92c0:	6843      	ldr	r3, [r0, #4]
   b92c2:	6804      	ldr	r4, [r0, #0]
   b92c4:	fa03 f506 	lsl.w	r5, r3, r6
   b92c8:	432c      	orrs	r4, r5
   b92ca:	40d3      	lsrs	r3, r2
   b92cc:	6004      	str	r4, [r0, #0]
   b92ce:	f840 3f04 	str.w	r3, [r0, #4]!
   b92d2:	4288      	cmp	r0, r1
   b92d4:	d3f4      	bcc.n	b92c0 <L_shift+0xc>
   b92d6:	bd70      	pop	{r4, r5, r6, pc}

000b92d8 <__match>:
   b92d8:	b530      	push	{r4, r5, lr}
   b92da:	6803      	ldr	r3, [r0, #0]
   b92dc:	3301      	adds	r3, #1
   b92de:	f811 4b01 	ldrb.w	r4, [r1], #1
   b92e2:	b914      	cbnz	r4, b92ea <__match+0x12>
   b92e4:	6003      	str	r3, [r0, #0]
   b92e6:	2001      	movs	r0, #1
   b92e8:	bd30      	pop	{r4, r5, pc}
   b92ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   b92ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b92f2:	2d19      	cmp	r5, #25
   b92f4:	bf98      	it	ls
   b92f6:	3220      	addls	r2, #32
   b92f8:	42a2      	cmp	r2, r4
   b92fa:	d0f0      	beq.n	b92de <__match+0x6>
   b92fc:	2000      	movs	r0, #0
   b92fe:	e7f3      	b.n	b92e8 <__match+0x10>

000b9300 <__hexnan>:
   b9300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9304:	680b      	ldr	r3, [r1, #0]
   b9306:	115e      	asrs	r6, r3, #5
   b9308:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b930c:	f013 031f 	ands.w	r3, r3, #31
   b9310:	b087      	sub	sp, #28
   b9312:	bf18      	it	ne
   b9314:	3604      	addne	r6, #4
   b9316:	2500      	movs	r5, #0
   b9318:	1f37      	subs	r7, r6, #4
   b931a:	4690      	mov	r8, r2
   b931c:	6802      	ldr	r2, [r0, #0]
   b931e:	9301      	str	r3, [sp, #4]
   b9320:	4682      	mov	sl, r0
   b9322:	f846 5c04 	str.w	r5, [r6, #-4]
   b9326:	46b9      	mov	r9, r7
   b9328:	463c      	mov	r4, r7
   b932a:	9502      	str	r5, [sp, #8]
   b932c:	46ab      	mov	fp, r5
   b932e:	7851      	ldrb	r1, [r2, #1]
   b9330:	1c53      	adds	r3, r2, #1
   b9332:	9303      	str	r3, [sp, #12]
   b9334:	b341      	cbz	r1, b9388 <__hexnan+0x88>
   b9336:	4608      	mov	r0, r1
   b9338:	9205      	str	r2, [sp, #20]
   b933a:	9104      	str	r1, [sp, #16]
   b933c:	f7ff fd5e 	bl	b8dfc <__hexdig_fun>
   b9340:	2800      	cmp	r0, #0
   b9342:	d14f      	bne.n	b93e4 <__hexnan+0xe4>
   b9344:	9904      	ldr	r1, [sp, #16]
   b9346:	9a05      	ldr	r2, [sp, #20]
   b9348:	2920      	cmp	r1, #32
   b934a:	d818      	bhi.n	b937e <__hexnan+0x7e>
   b934c:	9b02      	ldr	r3, [sp, #8]
   b934e:	459b      	cmp	fp, r3
   b9350:	dd13      	ble.n	b937a <__hexnan+0x7a>
   b9352:	454c      	cmp	r4, r9
   b9354:	d206      	bcs.n	b9364 <__hexnan+0x64>
   b9356:	2d07      	cmp	r5, #7
   b9358:	dc04      	bgt.n	b9364 <__hexnan+0x64>
   b935a:	462a      	mov	r2, r5
   b935c:	4649      	mov	r1, r9
   b935e:	4620      	mov	r0, r4
   b9360:	f7ff ffa8 	bl	b92b4 <L_shift>
   b9364:	4544      	cmp	r4, r8
   b9366:	d950      	bls.n	b940a <__hexnan+0x10a>
   b9368:	2300      	movs	r3, #0
   b936a:	f1a4 0904 	sub.w	r9, r4, #4
   b936e:	f844 3c04 	str.w	r3, [r4, #-4]
   b9372:	f8cd b008 	str.w	fp, [sp, #8]
   b9376:	464c      	mov	r4, r9
   b9378:	461d      	mov	r5, r3
   b937a:	9a03      	ldr	r2, [sp, #12]
   b937c:	e7d7      	b.n	b932e <__hexnan+0x2e>
   b937e:	2929      	cmp	r1, #41	; 0x29
   b9380:	d156      	bne.n	b9430 <__hexnan+0x130>
   b9382:	3202      	adds	r2, #2
   b9384:	f8ca 2000 	str.w	r2, [sl]
   b9388:	f1bb 0f00 	cmp.w	fp, #0
   b938c:	d050      	beq.n	b9430 <__hexnan+0x130>
   b938e:	454c      	cmp	r4, r9
   b9390:	d206      	bcs.n	b93a0 <__hexnan+0xa0>
   b9392:	2d07      	cmp	r5, #7
   b9394:	dc04      	bgt.n	b93a0 <__hexnan+0xa0>
   b9396:	462a      	mov	r2, r5
   b9398:	4649      	mov	r1, r9
   b939a:	4620      	mov	r0, r4
   b939c:	f7ff ff8a 	bl	b92b4 <L_shift>
   b93a0:	4544      	cmp	r4, r8
   b93a2:	d934      	bls.n	b940e <__hexnan+0x10e>
   b93a4:	f1a8 0204 	sub.w	r2, r8, #4
   b93a8:	4623      	mov	r3, r4
   b93aa:	f853 1b04 	ldr.w	r1, [r3], #4
   b93ae:	f842 1f04 	str.w	r1, [r2, #4]!
   b93b2:	429f      	cmp	r7, r3
   b93b4:	d2f9      	bcs.n	b93aa <__hexnan+0xaa>
   b93b6:	1b3b      	subs	r3, r7, r4
   b93b8:	f023 0303 	bic.w	r3, r3, #3
   b93bc:	3304      	adds	r3, #4
   b93be:	3401      	adds	r4, #1
   b93c0:	3e03      	subs	r6, #3
   b93c2:	42b4      	cmp	r4, r6
   b93c4:	bf88      	it	hi
   b93c6:	2304      	movhi	r3, #4
   b93c8:	4443      	add	r3, r8
   b93ca:	2200      	movs	r2, #0
   b93cc:	f843 2b04 	str.w	r2, [r3], #4
   b93d0:	429f      	cmp	r7, r3
   b93d2:	d2fb      	bcs.n	b93cc <__hexnan+0xcc>
   b93d4:	683b      	ldr	r3, [r7, #0]
   b93d6:	b91b      	cbnz	r3, b93e0 <__hexnan+0xe0>
   b93d8:	4547      	cmp	r7, r8
   b93da:	d127      	bne.n	b942c <__hexnan+0x12c>
   b93dc:	2301      	movs	r3, #1
   b93de:	603b      	str	r3, [r7, #0]
   b93e0:	2005      	movs	r0, #5
   b93e2:	e026      	b.n	b9432 <__hexnan+0x132>
   b93e4:	3501      	adds	r5, #1
   b93e6:	2d08      	cmp	r5, #8
   b93e8:	f10b 0b01 	add.w	fp, fp, #1
   b93ec:	dd06      	ble.n	b93fc <__hexnan+0xfc>
   b93ee:	4544      	cmp	r4, r8
   b93f0:	d9c3      	bls.n	b937a <__hexnan+0x7a>
   b93f2:	2300      	movs	r3, #0
   b93f4:	f844 3c04 	str.w	r3, [r4, #-4]
   b93f8:	2501      	movs	r5, #1
   b93fa:	3c04      	subs	r4, #4
   b93fc:	6822      	ldr	r2, [r4, #0]
   b93fe:	f000 000f 	and.w	r0, r0, #15
   b9402:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b9406:	6022      	str	r2, [r4, #0]
   b9408:	e7b7      	b.n	b937a <__hexnan+0x7a>
   b940a:	2508      	movs	r5, #8
   b940c:	e7b5      	b.n	b937a <__hexnan+0x7a>
   b940e:	9b01      	ldr	r3, [sp, #4]
   b9410:	2b00      	cmp	r3, #0
   b9412:	d0df      	beq.n	b93d4 <__hexnan+0xd4>
   b9414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9418:	f1c3 0320 	rsb	r3, r3, #32
   b941c:	fa22 f303 	lsr.w	r3, r2, r3
   b9420:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9424:	401a      	ands	r2, r3
   b9426:	f846 2c04 	str.w	r2, [r6, #-4]
   b942a:	e7d3      	b.n	b93d4 <__hexnan+0xd4>
   b942c:	3f04      	subs	r7, #4
   b942e:	e7d1      	b.n	b93d4 <__hexnan+0xd4>
   b9430:	2004      	movs	r0, #4
   b9432:	b007      	add	sp, #28
   b9434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9438 <__retarget_lock_acquire_recursive>:
   b9438:	4770      	bx	lr

000b943a <__retarget_lock_release>:
   b943a:	4770      	bx	lr

000b943c <__retarget_lock_release_recursive>:
   b943c:	4770      	bx	lr

000b943e <__ascii_mbtowc>:
   b943e:	b082      	sub	sp, #8
   b9440:	b901      	cbnz	r1, b9444 <__ascii_mbtowc+0x6>
   b9442:	a901      	add	r1, sp, #4
   b9444:	b142      	cbz	r2, b9458 <__ascii_mbtowc+0x1a>
   b9446:	b14b      	cbz	r3, b945c <__ascii_mbtowc+0x1e>
   b9448:	7813      	ldrb	r3, [r2, #0]
   b944a:	600b      	str	r3, [r1, #0]
   b944c:	7812      	ldrb	r2, [r2, #0]
   b944e:	1e10      	subs	r0, r2, #0
   b9450:	bf18      	it	ne
   b9452:	2001      	movne	r0, #1
   b9454:	b002      	add	sp, #8
   b9456:	4770      	bx	lr
   b9458:	4610      	mov	r0, r2
   b945a:	e7fb      	b.n	b9454 <__ascii_mbtowc+0x16>
   b945c:	f06f 0001 	mvn.w	r0, #1
   b9460:	e7f8      	b.n	b9454 <__ascii_mbtowc+0x16>
	...

000b9464 <_Balloc>:
   b9464:	b570      	push	{r4, r5, r6, lr}
   b9466:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9468:	4604      	mov	r4, r0
   b946a:	460d      	mov	r5, r1
   b946c:	b976      	cbnz	r6, b948c <_Balloc+0x28>
   b946e:	2010      	movs	r0, #16
   b9470:	f7fc f982 	bl	b5778 <malloc>
   b9474:	4602      	mov	r2, r0
   b9476:	6260      	str	r0, [r4, #36]	; 0x24
   b9478:	b920      	cbnz	r0, b9484 <_Balloc+0x20>
   b947a:	4b18      	ldr	r3, [pc, #96]	; (b94dc <_Balloc+0x78>)
   b947c:	4818      	ldr	r0, [pc, #96]	; (b94e0 <_Balloc+0x7c>)
   b947e:	2166      	movs	r1, #102	; 0x66
   b9480:	f7fc f9c2 	bl	b5808 <__assert_func>
   b9484:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9488:	6006      	str	r6, [r0, #0]
   b948a:	60c6      	str	r6, [r0, #12]
   b948c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b948e:	68f3      	ldr	r3, [r6, #12]
   b9490:	b183      	cbz	r3, b94b4 <_Balloc+0x50>
   b9492:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9494:	68db      	ldr	r3, [r3, #12]
   b9496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b949a:	b9b8      	cbnz	r0, b94cc <_Balloc+0x68>
   b949c:	2101      	movs	r1, #1
   b949e:	fa01 f605 	lsl.w	r6, r1, r5
   b94a2:	1d72      	adds	r2, r6, #5
   b94a4:	0092      	lsls	r2, r2, #2
   b94a6:	4620      	mov	r0, r4
   b94a8:	f000 fc9d 	bl	b9de6 <_calloc_r>
   b94ac:	b160      	cbz	r0, b94c8 <_Balloc+0x64>
   b94ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b94b2:	e00e      	b.n	b94d2 <_Balloc+0x6e>
   b94b4:	2221      	movs	r2, #33	; 0x21
   b94b6:	2104      	movs	r1, #4
   b94b8:	4620      	mov	r0, r4
   b94ba:	f000 fc94 	bl	b9de6 <_calloc_r>
   b94be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b94c0:	60f0      	str	r0, [r6, #12]
   b94c2:	68db      	ldr	r3, [r3, #12]
   b94c4:	2b00      	cmp	r3, #0
   b94c6:	d1e4      	bne.n	b9492 <_Balloc+0x2e>
   b94c8:	2000      	movs	r0, #0
   b94ca:	bd70      	pop	{r4, r5, r6, pc}
   b94cc:	6802      	ldr	r2, [r0, #0]
   b94ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b94d2:	2300      	movs	r3, #0
   b94d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b94d8:	e7f7      	b.n	b94ca <_Balloc+0x66>
   b94da:	bf00      	nop
   b94dc:	000ba579 	.word	0x000ba579
   b94e0:	000ba81c 	.word	0x000ba81c

000b94e4 <_Bfree>:
   b94e4:	b570      	push	{r4, r5, r6, lr}
   b94e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b94e8:	4605      	mov	r5, r0
   b94ea:	460c      	mov	r4, r1
   b94ec:	b976      	cbnz	r6, b950c <_Bfree+0x28>
   b94ee:	2010      	movs	r0, #16
   b94f0:	f7fc f942 	bl	b5778 <malloc>
   b94f4:	4602      	mov	r2, r0
   b94f6:	6268      	str	r0, [r5, #36]	; 0x24
   b94f8:	b920      	cbnz	r0, b9504 <_Bfree+0x20>
   b94fa:	4b09      	ldr	r3, [pc, #36]	; (b9520 <_Bfree+0x3c>)
   b94fc:	4809      	ldr	r0, [pc, #36]	; (b9524 <_Bfree+0x40>)
   b94fe:	218a      	movs	r1, #138	; 0x8a
   b9500:	f7fc f982 	bl	b5808 <__assert_func>
   b9504:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9508:	6006      	str	r6, [r0, #0]
   b950a:	60c6      	str	r6, [r0, #12]
   b950c:	b13c      	cbz	r4, b951e <_Bfree+0x3a>
   b950e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9510:	6862      	ldr	r2, [r4, #4]
   b9512:	68db      	ldr	r3, [r3, #12]
   b9514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9518:	6021      	str	r1, [r4, #0]
   b951a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b951e:	bd70      	pop	{r4, r5, r6, pc}
   b9520:	000ba579 	.word	0x000ba579
   b9524:	000ba81c 	.word	0x000ba81c

000b9528 <__multadd>:
   b9528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b952c:	690d      	ldr	r5, [r1, #16]
   b952e:	4607      	mov	r7, r0
   b9530:	460c      	mov	r4, r1
   b9532:	461e      	mov	r6, r3
   b9534:	f101 0c14 	add.w	ip, r1, #20
   b9538:	2000      	movs	r0, #0
   b953a:	f8dc 3000 	ldr.w	r3, [ip]
   b953e:	b299      	uxth	r1, r3
   b9540:	fb02 6101 	mla	r1, r2, r1, r6
   b9544:	0c1e      	lsrs	r6, r3, #16
   b9546:	0c0b      	lsrs	r3, r1, #16
   b9548:	fb02 3306 	mla	r3, r2, r6, r3
   b954c:	b289      	uxth	r1, r1
   b954e:	3001      	adds	r0, #1
   b9550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9554:	4285      	cmp	r5, r0
   b9556:	f84c 1b04 	str.w	r1, [ip], #4
   b955a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b955e:	dcec      	bgt.n	b953a <__multadd+0x12>
   b9560:	b30e      	cbz	r6, b95a6 <__multadd+0x7e>
   b9562:	68a3      	ldr	r3, [r4, #8]
   b9564:	42ab      	cmp	r3, r5
   b9566:	dc19      	bgt.n	b959c <__multadd+0x74>
   b9568:	6861      	ldr	r1, [r4, #4]
   b956a:	4638      	mov	r0, r7
   b956c:	3101      	adds	r1, #1
   b956e:	f7ff ff79 	bl	b9464 <_Balloc>
   b9572:	4680      	mov	r8, r0
   b9574:	b928      	cbnz	r0, b9582 <__multadd+0x5a>
   b9576:	4602      	mov	r2, r0
   b9578:	4b0c      	ldr	r3, [pc, #48]	; (b95ac <__multadd+0x84>)
   b957a:	480d      	ldr	r0, [pc, #52]	; (b95b0 <__multadd+0x88>)
   b957c:	21b5      	movs	r1, #181	; 0xb5
   b957e:	f7fc f943 	bl	b5808 <__assert_func>
   b9582:	6922      	ldr	r2, [r4, #16]
   b9584:	3202      	adds	r2, #2
   b9586:	f104 010c 	add.w	r1, r4, #12
   b958a:	0092      	lsls	r2, r2, #2
   b958c:	300c      	adds	r0, #12
   b958e:	f7fe fc22 	bl	b7dd6 <memcpy>
   b9592:	4621      	mov	r1, r4
   b9594:	4638      	mov	r0, r7
   b9596:	f7ff ffa5 	bl	b94e4 <_Bfree>
   b959a:	4644      	mov	r4, r8
   b959c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b95a0:	3501      	adds	r5, #1
   b95a2:	615e      	str	r6, [r3, #20]
   b95a4:	6125      	str	r5, [r4, #16]
   b95a6:	4620      	mov	r0, r4
   b95a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b95ac:	000ba771 	.word	0x000ba771
   b95b0:	000ba81c 	.word	0x000ba81c

000b95b4 <__s2b>:
   b95b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b95b8:	460c      	mov	r4, r1
   b95ba:	4615      	mov	r5, r2
   b95bc:	461f      	mov	r7, r3
   b95be:	2209      	movs	r2, #9
   b95c0:	3308      	adds	r3, #8
   b95c2:	4606      	mov	r6, r0
   b95c4:	fb93 f3f2 	sdiv	r3, r3, r2
   b95c8:	2100      	movs	r1, #0
   b95ca:	2201      	movs	r2, #1
   b95cc:	429a      	cmp	r2, r3
   b95ce:	db09      	blt.n	b95e4 <__s2b+0x30>
   b95d0:	4630      	mov	r0, r6
   b95d2:	f7ff ff47 	bl	b9464 <_Balloc>
   b95d6:	b940      	cbnz	r0, b95ea <__s2b+0x36>
   b95d8:	4602      	mov	r2, r0
   b95da:	4b19      	ldr	r3, [pc, #100]	; (b9640 <__s2b+0x8c>)
   b95dc:	4819      	ldr	r0, [pc, #100]	; (b9644 <__s2b+0x90>)
   b95de:	21ce      	movs	r1, #206	; 0xce
   b95e0:	f7fc f912 	bl	b5808 <__assert_func>
   b95e4:	0052      	lsls	r2, r2, #1
   b95e6:	3101      	adds	r1, #1
   b95e8:	e7f0      	b.n	b95cc <__s2b+0x18>
   b95ea:	9b08      	ldr	r3, [sp, #32]
   b95ec:	6143      	str	r3, [r0, #20]
   b95ee:	2d09      	cmp	r5, #9
   b95f0:	f04f 0301 	mov.w	r3, #1
   b95f4:	6103      	str	r3, [r0, #16]
   b95f6:	dd16      	ble.n	b9626 <__s2b+0x72>
   b95f8:	f104 0909 	add.w	r9, r4, #9
   b95fc:	46c8      	mov	r8, r9
   b95fe:	442c      	add	r4, r5
   b9600:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9604:	4601      	mov	r1, r0
   b9606:	3b30      	subs	r3, #48	; 0x30
   b9608:	220a      	movs	r2, #10
   b960a:	4630      	mov	r0, r6
   b960c:	f7ff ff8c 	bl	b9528 <__multadd>
   b9610:	45a0      	cmp	r8, r4
   b9612:	d1f5      	bne.n	b9600 <__s2b+0x4c>
   b9614:	f1a5 0408 	sub.w	r4, r5, #8
   b9618:	444c      	add	r4, r9
   b961a:	1b2d      	subs	r5, r5, r4
   b961c:	1963      	adds	r3, r4, r5
   b961e:	42bb      	cmp	r3, r7
   b9620:	db04      	blt.n	b962c <__s2b+0x78>
   b9622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9626:	340a      	adds	r4, #10
   b9628:	2509      	movs	r5, #9
   b962a:	e7f6      	b.n	b961a <__s2b+0x66>
   b962c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9630:	4601      	mov	r1, r0
   b9632:	3b30      	subs	r3, #48	; 0x30
   b9634:	220a      	movs	r2, #10
   b9636:	4630      	mov	r0, r6
   b9638:	f7ff ff76 	bl	b9528 <__multadd>
   b963c:	e7ee      	b.n	b961c <__s2b+0x68>
   b963e:	bf00      	nop
   b9640:	000ba771 	.word	0x000ba771
   b9644:	000ba81c 	.word	0x000ba81c

000b9648 <__hi0bits>:
   b9648:	0c03      	lsrs	r3, r0, #16
   b964a:	041b      	lsls	r3, r3, #16
   b964c:	b9d3      	cbnz	r3, b9684 <__hi0bits+0x3c>
   b964e:	0400      	lsls	r0, r0, #16
   b9650:	2310      	movs	r3, #16
   b9652:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9656:	bf04      	itt	eq
   b9658:	0200      	lsleq	r0, r0, #8
   b965a:	3308      	addeq	r3, #8
   b965c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9660:	bf04      	itt	eq
   b9662:	0100      	lsleq	r0, r0, #4
   b9664:	3304      	addeq	r3, #4
   b9666:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b966a:	bf04      	itt	eq
   b966c:	0080      	lsleq	r0, r0, #2
   b966e:	3302      	addeq	r3, #2
   b9670:	2800      	cmp	r0, #0
   b9672:	db05      	blt.n	b9680 <__hi0bits+0x38>
   b9674:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9678:	f103 0301 	add.w	r3, r3, #1
   b967c:	bf08      	it	eq
   b967e:	2320      	moveq	r3, #32
   b9680:	4618      	mov	r0, r3
   b9682:	4770      	bx	lr
   b9684:	2300      	movs	r3, #0
   b9686:	e7e4      	b.n	b9652 <__hi0bits+0xa>

000b9688 <__lo0bits>:
   b9688:	6803      	ldr	r3, [r0, #0]
   b968a:	f013 0207 	ands.w	r2, r3, #7
   b968e:	4601      	mov	r1, r0
   b9690:	d00b      	beq.n	b96aa <__lo0bits+0x22>
   b9692:	07da      	lsls	r2, r3, #31
   b9694:	d423      	bmi.n	b96de <__lo0bits+0x56>
   b9696:	0798      	lsls	r0, r3, #30
   b9698:	bf49      	itett	mi
   b969a:	085b      	lsrmi	r3, r3, #1
   b969c:	089b      	lsrpl	r3, r3, #2
   b969e:	2001      	movmi	r0, #1
   b96a0:	600b      	strmi	r3, [r1, #0]
   b96a2:	bf5c      	itt	pl
   b96a4:	600b      	strpl	r3, [r1, #0]
   b96a6:	2002      	movpl	r0, #2
   b96a8:	4770      	bx	lr
   b96aa:	b298      	uxth	r0, r3
   b96ac:	b9a8      	cbnz	r0, b96da <__lo0bits+0x52>
   b96ae:	0c1b      	lsrs	r3, r3, #16
   b96b0:	2010      	movs	r0, #16
   b96b2:	b2da      	uxtb	r2, r3
   b96b4:	b90a      	cbnz	r2, b96ba <__lo0bits+0x32>
   b96b6:	3008      	adds	r0, #8
   b96b8:	0a1b      	lsrs	r3, r3, #8
   b96ba:	071a      	lsls	r2, r3, #28
   b96bc:	bf04      	itt	eq
   b96be:	091b      	lsreq	r3, r3, #4
   b96c0:	3004      	addeq	r0, #4
   b96c2:	079a      	lsls	r2, r3, #30
   b96c4:	bf04      	itt	eq
   b96c6:	089b      	lsreq	r3, r3, #2
   b96c8:	3002      	addeq	r0, #2
   b96ca:	07da      	lsls	r2, r3, #31
   b96cc:	d403      	bmi.n	b96d6 <__lo0bits+0x4e>
   b96ce:	085b      	lsrs	r3, r3, #1
   b96d0:	f100 0001 	add.w	r0, r0, #1
   b96d4:	d005      	beq.n	b96e2 <__lo0bits+0x5a>
   b96d6:	600b      	str	r3, [r1, #0]
   b96d8:	4770      	bx	lr
   b96da:	4610      	mov	r0, r2
   b96dc:	e7e9      	b.n	b96b2 <__lo0bits+0x2a>
   b96de:	2000      	movs	r0, #0
   b96e0:	4770      	bx	lr
   b96e2:	2020      	movs	r0, #32
   b96e4:	4770      	bx	lr
	...

000b96e8 <__i2b>:
   b96e8:	b510      	push	{r4, lr}
   b96ea:	460c      	mov	r4, r1
   b96ec:	2101      	movs	r1, #1
   b96ee:	f7ff feb9 	bl	b9464 <_Balloc>
   b96f2:	4602      	mov	r2, r0
   b96f4:	b928      	cbnz	r0, b9702 <__i2b+0x1a>
   b96f6:	4b05      	ldr	r3, [pc, #20]	; (b970c <__i2b+0x24>)
   b96f8:	4805      	ldr	r0, [pc, #20]	; (b9710 <__i2b+0x28>)
   b96fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b96fe:	f7fc f883 	bl	b5808 <__assert_func>
   b9702:	2301      	movs	r3, #1
   b9704:	6144      	str	r4, [r0, #20]
   b9706:	6103      	str	r3, [r0, #16]
   b9708:	bd10      	pop	{r4, pc}
   b970a:	bf00      	nop
   b970c:	000ba771 	.word	0x000ba771
   b9710:	000ba81c 	.word	0x000ba81c

000b9714 <__multiply>:
   b9714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9718:	4691      	mov	r9, r2
   b971a:	690a      	ldr	r2, [r1, #16]
   b971c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9720:	429a      	cmp	r2, r3
   b9722:	bfb8      	it	lt
   b9724:	460b      	movlt	r3, r1
   b9726:	460c      	mov	r4, r1
   b9728:	bfbc      	itt	lt
   b972a:	464c      	movlt	r4, r9
   b972c:	4699      	movlt	r9, r3
   b972e:	6927      	ldr	r7, [r4, #16]
   b9730:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9734:	68a3      	ldr	r3, [r4, #8]
   b9736:	6861      	ldr	r1, [r4, #4]
   b9738:	eb07 060a 	add.w	r6, r7, sl
   b973c:	42b3      	cmp	r3, r6
   b973e:	b085      	sub	sp, #20
   b9740:	bfb8      	it	lt
   b9742:	3101      	addlt	r1, #1
   b9744:	f7ff fe8e 	bl	b9464 <_Balloc>
   b9748:	b930      	cbnz	r0, b9758 <__multiply+0x44>
   b974a:	4602      	mov	r2, r0
   b974c:	4b44      	ldr	r3, [pc, #272]	; (b9860 <__multiply+0x14c>)
   b974e:	4845      	ldr	r0, [pc, #276]	; (b9864 <__multiply+0x150>)
   b9750:	f240 115d 	movw	r1, #349	; 0x15d
   b9754:	f7fc f858 	bl	b5808 <__assert_func>
   b9758:	f100 0514 	add.w	r5, r0, #20
   b975c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9760:	462b      	mov	r3, r5
   b9762:	2200      	movs	r2, #0
   b9764:	4543      	cmp	r3, r8
   b9766:	d321      	bcc.n	b97ac <__multiply+0x98>
   b9768:	f104 0314 	add.w	r3, r4, #20
   b976c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9770:	f109 0314 	add.w	r3, r9, #20
   b9774:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9778:	9202      	str	r2, [sp, #8]
   b977a:	1b3a      	subs	r2, r7, r4
   b977c:	3a15      	subs	r2, #21
   b977e:	f022 0203 	bic.w	r2, r2, #3
   b9782:	3204      	adds	r2, #4
   b9784:	f104 0115 	add.w	r1, r4, #21
   b9788:	428f      	cmp	r7, r1
   b978a:	bf38      	it	cc
   b978c:	2204      	movcc	r2, #4
   b978e:	9201      	str	r2, [sp, #4]
   b9790:	9a02      	ldr	r2, [sp, #8]
   b9792:	9303      	str	r3, [sp, #12]
   b9794:	429a      	cmp	r2, r3
   b9796:	d80c      	bhi.n	b97b2 <__multiply+0x9e>
   b9798:	2e00      	cmp	r6, #0
   b979a:	dd03      	ble.n	b97a4 <__multiply+0x90>
   b979c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b97a0:	2b00      	cmp	r3, #0
   b97a2:	d05a      	beq.n	b985a <__multiply+0x146>
   b97a4:	6106      	str	r6, [r0, #16]
   b97a6:	b005      	add	sp, #20
   b97a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b97ac:	f843 2b04 	str.w	r2, [r3], #4
   b97b0:	e7d8      	b.n	b9764 <__multiply+0x50>
   b97b2:	f8b3 a000 	ldrh.w	sl, [r3]
   b97b6:	f1ba 0f00 	cmp.w	sl, #0
   b97ba:	d024      	beq.n	b9806 <__multiply+0xf2>
   b97bc:	f104 0e14 	add.w	lr, r4, #20
   b97c0:	46a9      	mov	r9, r5
   b97c2:	f04f 0c00 	mov.w	ip, #0
   b97c6:	f85e 2b04 	ldr.w	r2, [lr], #4
   b97ca:	f8d9 1000 	ldr.w	r1, [r9]
   b97ce:	fa1f fb82 	uxth.w	fp, r2
   b97d2:	b289      	uxth	r1, r1
   b97d4:	fb0a 110b 	mla	r1, sl, fp, r1
   b97d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b97dc:	f8d9 2000 	ldr.w	r2, [r9]
   b97e0:	4461      	add	r1, ip
   b97e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b97e6:	fb0a c20b 	mla	r2, sl, fp, ip
   b97ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b97ee:	b289      	uxth	r1, r1
   b97f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b97f4:	4577      	cmp	r7, lr
   b97f6:	f849 1b04 	str.w	r1, [r9], #4
   b97fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b97fe:	d8e2      	bhi.n	b97c6 <__multiply+0xb2>
   b9800:	9a01      	ldr	r2, [sp, #4]
   b9802:	f845 c002 	str.w	ip, [r5, r2]
   b9806:	9a03      	ldr	r2, [sp, #12]
   b9808:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b980c:	3304      	adds	r3, #4
   b980e:	f1b9 0f00 	cmp.w	r9, #0
   b9812:	d020      	beq.n	b9856 <__multiply+0x142>
   b9814:	6829      	ldr	r1, [r5, #0]
   b9816:	f104 0c14 	add.w	ip, r4, #20
   b981a:	46ae      	mov	lr, r5
   b981c:	f04f 0a00 	mov.w	sl, #0
   b9820:	f8bc b000 	ldrh.w	fp, [ip]
   b9824:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9828:	fb09 220b 	mla	r2, r9, fp, r2
   b982c:	4492      	add	sl, r2
   b982e:	b289      	uxth	r1, r1
   b9830:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9834:	f84e 1b04 	str.w	r1, [lr], #4
   b9838:	f85c 2b04 	ldr.w	r2, [ip], #4
   b983c:	f8be 1000 	ldrh.w	r1, [lr]
   b9840:	0c12      	lsrs	r2, r2, #16
   b9842:	fb09 1102 	mla	r1, r9, r2, r1
   b9846:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b984a:	4567      	cmp	r7, ip
   b984c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9850:	d8e6      	bhi.n	b9820 <__multiply+0x10c>
   b9852:	9a01      	ldr	r2, [sp, #4]
   b9854:	50a9      	str	r1, [r5, r2]
   b9856:	3504      	adds	r5, #4
   b9858:	e79a      	b.n	b9790 <__multiply+0x7c>
   b985a:	3e01      	subs	r6, #1
   b985c:	e79c      	b.n	b9798 <__multiply+0x84>
   b985e:	bf00      	nop
   b9860:	000ba771 	.word	0x000ba771
   b9864:	000ba81c 	.word	0x000ba81c

000b9868 <__pow5mult>:
   b9868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b986c:	4615      	mov	r5, r2
   b986e:	f012 0203 	ands.w	r2, r2, #3
   b9872:	4606      	mov	r6, r0
   b9874:	460f      	mov	r7, r1
   b9876:	d007      	beq.n	b9888 <__pow5mult+0x20>
   b9878:	4c25      	ldr	r4, [pc, #148]	; (b9910 <__pow5mult+0xa8>)
   b987a:	3a01      	subs	r2, #1
   b987c:	2300      	movs	r3, #0
   b987e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9882:	f7ff fe51 	bl	b9528 <__multadd>
   b9886:	4607      	mov	r7, r0
   b9888:	10ad      	asrs	r5, r5, #2
   b988a:	d03d      	beq.n	b9908 <__pow5mult+0xa0>
   b988c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b988e:	b97c      	cbnz	r4, b98b0 <__pow5mult+0x48>
   b9890:	2010      	movs	r0, #16
   b9892:	f7fb ff71 	bl	b5778 <malloc>
   b9896:	4602      	mov	r2, r0
   b9898:	6270      	str	r0, [r6, #36]	; 0x24
   b989a:	b928      	cbnz	r0, b98a8 <__pow5mult+0x40>
   b989c:	4b1d      	ldr	r3, [pc, #116]	; (b9914 <__pow5mult+0xac>)
   b989e:	481e      	ldr	r0, [pc, #120]	; (b9918 <__pow5mult+0xb0>)
   b98a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b98a4:	f7fb ffb0 	bl	b5808 <__assert_func>
   b98a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b98ac:	6004      	str	r4, [r0, #0]
   b98ae:	60c4      	str	r4, [r0, #12]
   b98b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b98b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b98b8:	b94c      	cbnz	r4, b98ce <__pow5mult+0x66>
   b98ba:	f240 2171 	movw	r1, #625	; 0x271
   b98be:	4630      	mov	r0, r6
   b98c0:	f7ff ff12 	bl	b96e8 <__i2b>
   b98c4:	2300      	movs	r3, #0
   b98c6:	f8c8 0008 	str.w	r0, [r8, #8]
   b98ca:	4604      	mov	r4, r0
   b98cc:	6003      	str	r3, [r0, #0]
   b98ce:	f04f 0900 	mov.w	r9, #0
   b98d2:	07eb      	lsls	r3, r5, #31
   b98d4:	d50a      	bpl.n	b98ec <__pow5mult+0x84>
   b98d6:	4639      	mov	r1, r7
   b98d8:	4622      	mov	r2, r4
   b98da:	4630      	mov	r0, r6
   b98dc:	f7ff ff1a 	bl	b9714 <__multiply>
   b98e0:	4639      	mov	r1, r7
   b98e2:	4680      	mov	r8, r0
   b98e4:	4630      	mov	r0, r6
   b98e6:	f7ff fdfd 	bl	b94e4 <_Bfree>
   b98ea:	4647      	mov	r7, r8
   b98ec:	106d      	asrs	r5, r5, #1
   b98ee:	d00b      	beq.n	b9908 <__pow5mult+0xa0>
   b98f0:	6820      	ldr	r0, [r4, #0]
   b98f2:	b938      	cbnz	r0, b9904 <__pow5mult+0x9c>
   b98f4:	4622      	mov	r2, r4
   b98f6:	4621      	mov	r1, r4
   b98f8:	4630      	mov	r0, r6
   b98fa:	f7ff ff0b 	bl	b9714 <__multiply>
   b98fe:	6020      	str	r0, [r4, #0]
   b9900:	f8c0 9000 	str.w	r9, [r0]
   b9904:	4604      	mov	r4, r0
   b9906:	e7e4      	b.n	b98d2 <__pow5mult+0x6a>
   b9908:	4638      	mov	r0, r7
   b990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b990e:	bf00      	nop
   b9910:	000ba990 	.word	0x000ba990
   b9914:	000ba579 	.word	0x000ba579
   b9918:	000ba81c 	.word	0x000ba81c

000b991c <__lshift>:
   b991c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9920:	460c      	mov	r4, r1
   b9922:	6849      	ldr	r1, [r1, #4]
   b9924:	6923      	ldr	r3, [r4, #16]
   b9926:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b992a:	68a3      	ldr	r3, [r4, #8]
   b992c:	4607      	mov	r7, r0
   b992e:	4691      	mov	r9, r2
   b9930:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9934:	f108 0601 	add.w	r6, r8, #1
   b9938:	42b3      	cmp	r3, r6
   b993a:	db0b      	blt.n	b9954 <__lshift+0x38>
   b993c:	4638      	mov	r0, r7
   b993e:	f7ff fd91 	bl	b9464 <_Balloc>
   b9942:	4605      	mov	r5, r0
   b9944:	b948      	cbnz	r0, b995a <__lshift+0x3e>
   b9946:	4602      	mov	r2, r0
   b9948:	4b2a      	ldr	r3, [pc, #168]	; (b99f4 <__lshift+0xd8>)
   b994a:	482b      	ldr	r0, [pc, #172]	; (b99f8 <__lshift+0xdc>)
   b994c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9950:	f7fb ff5a 	bl	b5808 <__assert_func>
   b9954:	3101      	adds	r1, #1
   b9956:	005b      	lsls	r3, r3, #1
   b9958:	e7ee      	b.n	b9938 <__lshift+0x1c>
   b995a:	2300      	movs	r3, #0
   b995c:	f100 0114 	add.w	r1, r0, #20
   b9960:	f100 0210 	add.w	r2, r0, #16
   b9964:	4618      	mov	r0, r3
   b9966:	4553      	cmp	r3, sl
   b9968:	db37      	blt.n	b99da <__lshift+0xbe>
   b996a:	6920      	ldr	r0, [r4, #16]
   b996c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9970:	f104 0314 	add.w	r3, r4, #20
   b9974:	f019 091f 	ands.w	r9, r9, #31
   b9978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b997c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9980:	d02f      	beq.n	b99e2 <__lshift+0xc6>
   b9982:	f1c9 0e20 	rsb	lr, r9, #32
   b9986:	468a      	mov	sl, r1
   b9988:	f04f 0c00 	mov.w	ip, #0
   b998c:	681a      	ldr	r2, [r3, #0]
   b998e:	fa02 f209 	lsl.w	r2, r2, r9
   b9992:	ea42 020c 	orr.w	r2, r2, ip
   b9996:	f84a 2b04 	str.w	r2, [sl], #4
   b999a:	f853 2b04 	ldr.w	r2, [r3], #4
   b999e:	4298      	cmp	r0, r3
   b99a0:	fa22 fc0e 	lsr.w	ip, r2, lr
   b99a4:	d8f2      	bhi.n	b998c <__lshift+0x70>
   b99a6:	1b03      	subs	r3, r0, r4
   b99a8:	3b15      	subs	r3, #21
   b99aa:	f023 0303 	bic.w	r3, r3, #3
   b99ae:	3304      	adds	r3, #4
   b99b0:	f104 0215 	add.w	r2, r4, #21
   b99b4:	4290      	cmp	r0, r2
   b99b6:	bf38      	it	cc
   b99b8:	2304      	movcc	r3, #4
   b99ba:	f841 c003 	str.w	ip, [r1, r3]
   b99be:	f1bc 0f00 	cmp.w	ip, #0
   b99c2:	d001      	beq.n	b99c8 <__lshift+0xac>
   b99c4:	f108 0602 	add.w	r6, r8, #2
   b99c8:	3e01      	subs	r6, #1
   b99ca:	4638      	mov	r0, r7
   b99cc:	612e      	str	r6, [r5, #16]
   b99ce:	4621      	mov	r1, r4
   b99d0:	f7ff fd88 	bl	b94e4 <_Bfree>
   b99d4:	4628      	mov	r0, r5
   b99d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b99da:	f842 0f04 	str.w	r0, [r2, #4]!
   b99de:	3301      	adds	r3, #1
   b99e0:	e7c1      	b.n	b9966 <__lshift+0x4a>
   b99e2:	3904      	subs	r1, #4
   b99e4:	f853 2b04 	ldr.w	r2, [r3], #4
   b99e8:	f841 2f04 	str.w	r2, [r1, #4]!
   b99ec:	4298      	cmp	r0, r3
   b99ee:	d8f9      	bhi.n	b99e4 <__lshift+0xc8>
   b99f0:	e7ea      	b.n	b99c8 <__lshift+0xac>
   b99f2:	bf00      	nop
   b99f4:	000ba771 	.word	0x000ba771
   b99f8:	000ba81c 	.word	0x000ba81c

000b99fc <__mcmp>:
   b99fc:	b530      	push	{r4, r5, lr}
   b99fe:	6902      	ldr	r2, [r0, #16]
   b9a00:	690c      	ldr	r4, [r1, #16]
   b9a02:	1b12      	subs	r2, r2, r4
   b9a04:	d10e      	bne.n	b9a24 <__mcmp+0x28>
   b9a06:	f100 0314 	add.w	r3, r0, #20
   b9a0a:	3114      	adds	r1, #20
   b9a0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9a10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9a14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9a18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9a1c:	42a5      	cmp	r5, r4
   b9a1e:	d003      	beq.n	b9a28 <__mcmp+0x2c>
   b9a20:	d305      	bcc.n	b9a2e <__mcmp+0x32>
   b9a22:	2201      	movs	r2, #1
   b9a24:	4610      	mov	r0, r2
   b9a26:	bd30      	pop	{r4, r5, pc}
   b9a28:	4283      	cmp	r3, r0
   b9a2a:	d3f3      	bcc.n	b9a14 <__mcmp+0x18>
   b9a2c:	e7fa      	b.n	b9a24 <__mcmp+0x28>
   b9a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a32:	e7f7      	b.n	b9a24 <__mcmp+0x28>

000b9a34 <__mdiff>:
   b9a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a38:	460c      	mov	r4, r1
   b9a3a:	4606      	mov	r6, r0
   b9a3c:	4611      	mov	r1, r2
   b9a3e:	4620      	mov	r0, r4
   b9a40:	4690      	mov	r8, r2
   b9a42:	f7ff ffdb 	bl	b99fc <__mcmp>
   b9a46:	1e05      	subs	r5, r0, #0
   b9a48:	d110      	bne.n	b9a6c <__mdiff+0x38>
   b9a4a:	4629      	mov	r1, r5
   b9a4c:	4630      	mov	r0, r6
   b9a4e:	f7ff fd09 	bl	b9464 <_Balloc>
   b9a52:	b930      	cbnz	r0, b9a62 <__mdiff+0x2e>
   b9a54:	4b3a      	ldr	r3, [pc, #232]	; (b9b40 <__mdiff+0x10c>)
   b9a56:	4602      	mov	r2, r0
   b9a58:	f240 2132 	movw	r1, #562	; 0x232
   b9a5c:	4839      	ldr	r0, [pc, #228]	; (b9b44 <__mdiff+0x110>)
   b9a5e:	f7fb fed3 	bl	b5808 <__assert_func>
   b9a62:	2301      	movs	r3, #1
   b9a64:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9a6c:	bfa4      	itt	ge
   b9a6e:	4643      	movge	r3, r8
   b9a70:	46a0      	movge	r8, r4
   b9a72:	4630      	mov	r0, r6
   b9a74:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9a78:	bfa6      	itte	ge
   b9a7a:	461c      	movge	r4, r3
   b9a7c:	2500      	movge	r5, #0
   b9a7e:	2501      	movlt	r5, #1
   b9a80:	f7ff fcf0 	bl	b9464 <_Balloc>
   b9a84:	b920      	cbnz	r0, b9a90 <__mdiff+0x5c>
   b9a86:	4b2e      	ldr	r3, [pc, #184]	; (b9b40 <__mdiff+0x10c>)
   b9a88:	4602      	mov	r2, r0
   b9a8a:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9a8e:	e7e5      	b.n	b9a5c <__mdiff+0x28>
   b9a90:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b9a94:	6926      	ldr	r6, [r4, #16]
   b9a96:	60c5      	str	r5, [r0, #12]
   b9a98:	f104 0914 	add.w	r9, r4, #20
   b9a9c:	f108 0514 	add.w	r5, r8, #20
   b9aa0:	f100 0e14 	add.w	lr, r0, #20
   b9aa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9aa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9aac:	f108 0210 	add.w	r2, r8, #16
   b9ab0:	46f2      	mov	sl, lr
   b9ab2:	2100      	movs	r1, #0
   b9ab4:	f859 3b04 	ldr.w	r3, [r9], #4
   b9ab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b9abc:	fa1f f883 	uxth.w	r8, r3
   b9ac0:	fa11 f18b 	uxtah	r1, r1, fp
   b9ac4:	0c1b      	lsrs	r3, r3, #16
   b9ac6:	eba1 0808 	sub.w	r8, r1, r8
   b9aca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b9ace:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b9ad2:	fa1f f888 	uxth.w	r8, r8
   b9ad6:	1419      	asrs	r1, r3, #16
   b9ad8:	454e      	cmp	r6, r9
   b9ada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b9ade:	f84a 3b04 	str.w	r3, [sl], #4
   b9ae2:	d8e7      	bhi.n	b9ab4 <__mdiff+0x80>
   b9ae4:	1b33      	subs	r3, r6, r4
   b9ae6:	3b15      	subs	r3, #21
   b9ae8:	f023 0303 	bic.w	r3, r3, #3
   b9aec:	3304      	adds	r3, #4
   b9aee:	3415      	adds	r4, #21
   b9af0:	42a6      	cmp	r6, r4
   b9af2:	bf38      	it	cc
   b9af4:	2304      	movcc	r3, #4
   b9af6:	441d      	add	r5, r3
   b9af8:	4473      	add	r3, lr
   b9afa:	469e      	mov	lr, r3
   b9afc:	462e      	mov	r6, r5
   b9afe:	4566      	cmp	r6, ip
   b9b00:	d30e      	bcc.n	b9b20 <__mdiff+0xec>
   b9b02:	f10c 0203 	add.w	r2, ip, #3
   b9b06:	1b52      	subs	r2, r2, r5
   b9b08:	f022 0203 	bic.w	r2, r2, #3
   b9b0c:	3d03      	subs	r5, #3
   b9b0e:	45ac      	cmp	ip, r5
   b9b10:	bf38      	it	cc
   b9b12:	2200      	movcc	r2, #0
   b9b14:	441a      	add	r2, r3
   b9b16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b9b1a:	b17b      	cbz	r3, b9b3c <__mdiff+0x108>
   b9b1c:	6107      	str	r7, [r0, #16]
   b9b1e:	e7a3      	b.n	b9a68 <__mdiff+0x34>
   b9b20:	f856 8b04 	ldr.w	r8, [r6], #4
   b9b24:	fa11 f288 	uxtah	r2, r1, r8
   b9b28:	1414      	asrs	r4, r2, #16
   b9b2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b9b2e:	b292      	uxth	r2, r2
   b9b30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b9b34:	f84e 2b04 	str.w	r2, [lr], #4
   b9b38:	1421      	asrs	r1, r4, #16
   b9b3a:	e7e0      	b.n	b9afe <__mdiff+0xca>
   b9b3c:	3f01      	subs	r7, #1
   b9b3e:	e7ea      	b.n	b9b16 <__mdiff+0xe2>
   b9b40:	000ba771 	.word	0x000ba771
   b9b44:	000ba81c 	.word	0x000ba81c

000b9b48 <__ulp>:
   b9b48:	b082      	sub	sp, #8
   b9b4a:	ed8d 0b00 	vstr	d0, [sp]
   b9b4e:	9b01      	ldr	r3, [sp, #4]
   b9b50:	4912      	ldr	r1, [pc, #72]	; (b9b9c <__ulp+0x54>)
   b9b52:	4019      	ands	r1, r3
   b9b54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9b58:	2900      	cmp	r1, #0
   b9b5a:	dd05      	ble.n	b9b68 <__ulp+0x20>
   b9b5c:	2200      	movs	r2, #0
   b9b5e:	460b      	mov	r3, r1
   b9b60:	ec43 2b10 	vmov	d0, r2, r3
   b9b64:	b002      	add	sp, #8
   b9b66:	4770      	bx	lr
   b9b68:	4249      	negs	r1, r1
   b9b6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b9b6e:	ea4f 5021 	mov.w	r0, r1, asr #20
   b9b72:	f04f 0200 	mov.w	r2, #0
   b9b76:	f04f 0300 	mov.w	r3, #0
   b9b7a:	da04      	bge.n	b9b86 <__ulp+0x3e>
   b9b7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b9b80:	fa41 f300 	asr.w	r3, r1, r0
   b9b84:	e7ec      	b.n	b9b60 <__ulp+0x18>
   b9b86:	f1a0 0114 	sub.w	r1, r0, #20
   b9b8a:	291e      	cmp	r1, #30
   b9b8c:	bfda      	itte	le
   b9b8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b9b92:	fa20 f101 	lsrle.w	r1, r0, r1
   b9b96:	2101      	movgt	r1, #1
   b9b98:	460a      	mov	r2, r1
   b9b9a:	e7e1      	b.n	b9b60 <__ulp+0x18>
   b9b9c:	7ff00000 	.word	0x7ff00000

000b9ba0 <__b2d>:
   b9ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ba2:	6905      	ldr	r5, [r0, #16]
   b9ba4:	f100 0714 	add.w	r7, r0, #20
   b9ba8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b9bac:	1f2e      	subs	r6, r5, #4
   b9bae:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b9bb2:	4620      	mov	r0, r4
   b9bb4:	f7ff fd48 	bl	b9648 <__hi0bits>
   b9bb8:	f1c0 0320 	rsb	r3, r0, #32
   b9bbc:	280a      	cmp	r0, #10
   b9bbe:	f8df c07c 	ldr.w	ip, [pc, #124]	; b9c3c <__b2d+0x9c>
   b9bc2:	600b      	str	r3, [r1, #0]
   b9bc4:	dc14      	bgt.n	b9bf0 <__b2d+0x50>
   b9bc6:	f1c0 0e0b 	rsb	lr, r0, #11
   b9bca:	fa24 f10e 	lsr.w	r1, r4, lr
   b9bce:	42b7      	cmp	r7, r6
   b9bd0:	ea41 030c 	orr.w	r3, r1, ip
   b9bd4:	bf34      	ite	cc
   b9bd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9bda:	2100      	movcs	r1, #0
   b9bdc:	3015      	adds	r0, #21
   b9bde:	fa04 f000 	lsl.w	r0, r4, r0
   b9be2:	fa21 f10e 	lsr.w	r1, r1, lr
   b9be6:	ea40 0201 	orr.w	r2, r0, r1
   b9bea:	ec43 2b10 	vmov	d0, r2, r3
   b9bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9bf0:	42b7      	cmp	r7, r6
   b9bf2:	bf3a      	itte	cc
   b9bf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9bf8:	f1a5 0608 	subcc.w	r6, r5, #8
   b9bfc:	2100      	movcs	r1, #0
   b9bfe:	380b      	subs	r0, #11
   b9c00:	d017      	beq.n	b9c32 <__b2d+0x92>
   b9c02:	f1c0 0c20 	rsb	ip, r0, #32
   b9c06:	fa04 f500 	lsl.w	r5, r4, r0
   b9c0a:	42be      	cmp	r6, r7
   b9c0c:	fa21 f40c 	lsr.w	r4, r1, ip
   b9c10:	ea45 0504 	orr.w	r5, r5, r4
   b9c14:	bf8c      	ite	hi
   b9c16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b9c1a:	2400      	movls	r4, #0
   b9c1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9c20:	fa01 f000 	lsl.w	r0, r1, r0
   b9c24:	fa24 f40c 	lsr.w	r4, r4, ip
   b9c28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b9c2c:	ea40 0204 	orr.w	r2, r0, r4
   b9c30:	e7db      	b.n	b9bea <__b2d+0x4a>
   b9c32:	ea44 030c 	orr.w	r3, r4, ip
   b9c36:	460a      	mov	r2, r1
   b9c38:	e7d7      	b.n	b9bea <__b2d+0x4a>
   b9c3a:	bf00      	nop
   b9c3c:	3ff00000 	.word	0x3ff00000

000b9c40 <__d2b>:
   b9c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9c44:	4689      	mov	r9, r1
   b9c46:	2101      	movs	r1, #1
   b9c48:	ec57 6b10 	vmov	r6, r7, d0
   b9c4c:	4690      	mov	r8, r2
   b9c4e:	f7ff fc09 	bl	b9464 <_Balloc>
   b9c52:	4604      	mov	r4, r0
   b9c54:	b930      	cbnz	r0, b9c64 <__d2b+0x24>
   b9c56:	4602      	mov	r2, r0
   b9c58:	4b25      	ldr	r3, [pc, #148]	; (b9cf0 <__d2b+0xb0>)
   b9c5a:	4826      	ldr	r0, [pc, #152]	; (b9cf4 <__d2b+0xb4>)
   b9c5c:	f240 310a 	movw	r1, #778	; 0x30a
   b9c60:	f7fb fdd2 	bl	b5808 <__assert_func>
   b9c64:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9c68:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b9c6c:	bb35      	cbnz	r5, b9cbc <__d2b+0x7c>
   b9c6e:	2e00      	cmp	r6, #0
   b9c70:	9301      	str	r3, [sp, #4]
   b9c72:	d028      	beq.n	b9cc6 <__d2b+0x86>
   b9c74:	4668      	mov	r0, sp
   b9c76:	9600      	str	r6, [sp, #0]
   b9c78:	f7ff fd06 	bl	b9688 <__lo0bits>
   b9c7c:	9900      	ldr	r1, [sp, #0]
   b9c7e:	b300      	cbz	r0, b9cc2 <__d2b+0x82>
   b9c80:	9a01      	ldr	r2, [sp, #4]
   b9c82:	f1c0 0320 	rsb	r3, r0, #32
   b9c86:	fa02 f303 	lsl.w	r3, r2, r3
   b9c8a:	430b      	orrs	r3, r1
   b9c8c:	40c2      	lsrs	r2, r0
   b9c8e:	6163      	str	r3, [r4, #20]
   b9c90:	9201      	str	r2, [sp, #4]
   b9c92:	9b01      	ldr	r3, [sp, #4]
   b9c94:	61a3      	str	r3, [r4, #24]
   b9c96:	2b00      	cmp	r3, #0
   b9c98:	bf14      	ite	ne
   b9c9a:	2202      	movne	r2, #2
   b9c9c:	2201      	moveq	r2, #1
   b9c9e:	6122      	str	r2, [r4, #16]
   b9ca0:	b1d5      	cbz	r5, b9cd8 <__d2b+0x98>
   b9ca2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b9ca6:	4405      	add	r5, r0
   b9ca8:	f8c9 5000 	str.w	r5, [r9]
   b9cac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b9cb0:	f8c8 0000 	str.w	r0, [r8]
   b9cb4:	4620      	mov	r0, r4
   b9cb6:	b003      	add	sp, #12
   b9cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9cc0:	e7d5      	b.n	b9c6e <__d2b+0x2e>
   b9cc2:	6161      	str	r1, [r4, #20]
   b9cc4:	e7e5      	b.n	b9c92 <__d2b+0x52>
   b9cc6:	a801      	add	r0, sp, #4
   b9cc8:	f7ff fcde 	bl	b9688 <__lo0bits>
   b9ccc:	9b01      	ldr	r3, [sp, #4]
   b9cce:	6163      	str	r3, [r4, #20]
   b9cd0:	2201      	movs	r2, #1
   b9cd2:	6122      	str	r2, [r4, #16]
   b9cd4:	3020      	adds	r0, #32
   b9cd6:	e7e3      	b.n	b9ca0 <__d2b+0x60>
   b9cd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9cdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9ce0:	f8c9 0000 	str.w	r0, [r9]
   b9ce4:	6918      	ldr	r0, [r3, #16]
   b9ce6:	f7ff fcaf 	bl	b9648 <__hi0bits>
   b9cea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9cee:	e7df      	b.n	b9cb0 <__d2b+0x70>
   b9cf0:	000ba771 	.word	0x000ba771
   b9cf4:	000ba81c 	.word	0x000ba81c

000b9cf8 <__ratio>:
   b9cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9cfc:	4688      	mov	r8, r1
   b9cfe:	4669      	mov	r1, sp
   b9d00:	4681      	mov	r9, r0
   b9d02:	f7ff ff4d 	bl	b9ba0 <__b2d>
   b9d06:	a901      	add	r1, sp, #4
   b9d08:	4640      	mov	r0, r8
   b9d0a:	ec55 4b10 	vmov	r4, r5, d0
   b9d0e:	f7ff ff47 	bl	b9ba0 <__b2d>
   b9d12:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9d16:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b9d1a:	eba3 0c02 	sub.w	ip, r3, r2
   b9d1e:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9d22:	1a9b      	subs	r3, r3, r2
   b9d24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9d28:	ec51 0b10 	vmov	r0, r1, d0
   b9d2c:	2b00      	cmp	r3, #0
   b9d2e:	bfd6      	itet	le
   b9d30:	460a      	movle	r2, r1
   b9d32:	462a      	movgt	r2, r5
   b9d34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9d38:	468b      	mov	fp, r1
   b9d3a:	462f      	mov	r7, r5
   b9d3c:	bfd4      	ite	le
   b9d3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b9d42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b9d46:	4620      	mov	r0, r4
   b9d48:	ee10 2a10 	vmov	r2, s0
   b9d4c:	465b      	mov	r3, fp
   b9d4e:	4639      	mov	r1, r7
   b9d50:	f7fd fe36 	bl	b79c0 <__aeabi_ddiv>
   b9d54:	ec41 0b10 	vmov	d0, r0, r1
   b9d58:	b003      	add	sp, #12
   b9d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9d5e <__copybits>:
   b9d5e:	3901      	subs	r1, #1
   b9d60:	b570      	push	{r4, r5, r6, lr}
   b9d62:	1149      	asrs	r1, r1, #5
   b9d64:	6914      	ldr	r4, [r2, #16]
   b9d66:	3101      	adds	r1, #1
   b9d68:	f102 0314 	add.w	r3, r2, #20
   b9d6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9d70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b9d74:	1f05      	subs	r5, r0, #4
   b9d76:	42a3      	cmp	r3, r4
   b9d78:	d30c      	bcc.n	b9d94 <__copybits+0x36>
   b9d7a:	1aa3      	subs	r3, r4, r2
   b9d7c:	3b11      	subs	r3, #17
   b9d7e:	f023 0303 	bic.w	r3, r3, #3
   b9d82:	3211      	adds	r2, #17
   b9d84:	42a2      	cmp	r2, r4
   b9d86:	bf88      	it	hi
   b9d88:	2300      	movhi	r3, #0
   b9d8a:	4418      	add	r0, r3
   b9d8c:	2300      	movs	r3, #0
   b9d8e:	4288      	cmp	r0, r1
   b9d90:	d305      	bcc.n	b9d9e <__copybits+0x40>
   b9d92:	bd70      	pop	{r4, r5, r6, pc}
   b9d94:	f853 6b04 	ldr.w	r6, [r3], #4
   b9d98:	f845 6f04 	str.w	r6, [r5, #4]!
   b9d9c:	e7eb      	b.n	b9d76 <__copybits+0x18>
   b9d9e:	f840 3b04 	str.w	r3, [r0], #4
   b9da2:	e7f4      	b.n	b9d8e <__copybits+0x30>

000b9da4 <__any_on>:
   b9da4:	f100 0214 	add.w	r2, r0, #20
   b9da8:	6900      	ldr	r0, [r0, #16]
   b9daa:	114b      	asrs	r3, r1, #5
   b9dac:	4298      	cmp	r0, r3
   b9dae:	b510      	push	{r4, lr}
   b9db0:	db11      	blt.n	b9dd6 <__any_on+0x32>
   b9db2:	dd0a      	ble.n	b9dca <__any_on+0x26>
   b9db4:	f011 011f 	ands.w	r1, r1, #31
   b9db8:	d007      	beq.n	b9dca <__any_on+0x26>
   b9dba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b9dbe:	fa24 f001 	lsr.w	r0, r4, r1
   b9dc2:	fa00 f101 	lsl.w	r1, r0, r1
   b9dc6:	428c      	cmp	r4, r1
   b9dc8:	d10b      	bne.n	b9de2 <__any_on+0x3e>
   b9dca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9dce:	4293      	cmp	r3, r2
   b9dd0:	d803      	bhi.n	b9dda <__any_on+0x36>
   b9dd2:	2000      	movs	r0, #0
   b9dd4:	bd10      	pop	{r4, pc}
   b9dd6:	4603      	mov	r3, r0
   b9dd8:	e7f7      	b.n	b9dca <__any_on+0x26>
   b9dda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9dde:	2900      	cmp	r1, #0
   b9de0:	d0f5      	beq.n	b9dce <__any_on+0x2a>
   b9de2:	2001      	movs	r0, #1
   b9de4:	e7f6      	b.n	b9dd4 <__any_on+0x30>

000b9de6 <_calloc_r>:
   b9de6:	b513      	push	{r0, r1, r4, lr}
   b9de8:	434a      	muls	r2, r1
   b9dea:	4611      	mov	r1, r2
   b9dec:	9201      	str	r2, [sp, #4]
   b9dee:	f7fb fcfb 	bl	b57e8 <_malloc_r>
   b9df2:	4604      	mov	r4, r0
   b9df4:	b118      	cbz	r0, b9dfe <_calloc_r+0x18>
   b9df6:	9a01      	ldr	r2, [sp, #4]
   b9df8:	2100      	movs	r1, #0
   b9dfa:	f7fd fffa 	bl	b7df2 <memset>
   b9dfe:	4620      	mov	r0, r4
   b9e00:	b002      	add	sp, #8
   b9e02:	bd10      	pop	{r4, pc}
   b9e04:	0000      	movs	r0, r0
	...

000b9e08 <nan>:
   b9e08:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9e10 <nan+0x8>
   b9e0c:	4770      	bx	lr
   b9e0e:	bf00      	nop
   b9e10:	00000000 	.word	0x00000000
   b9e14:	7ff80000 	.word	0x7ff80000

000b9e18 <__ascii_wctomb>:
   b9e18:	b149      	cbz	r1, b9e2e <__ascii_wctomb+0x16>
   b9e1a:	2aff      	cmp	r2, #255	; 0xff
   b9e1c:	bf85      	ittet	hi
   b9e1e:	238a      	movhi	r3, #138	; 0x8a
   b9e20:	6003      	strhi	r3, [r0, #0]
   b9e22:	700a      	strbls	r2, [r1, #0]
   b9e24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   b9e28:	bf98      	it	ls
   b9e2a:	2001      	movls	r0, #1
   b9e2c:	4770      	bx	lr
   b9e2e:	4608      	mov	r0, r1
   b9e30:	4770      	bx	lr
	...

000b9e34 <__aeabi_d2lz>:
   b9e34:	b538      	push	{r3, r4, r5, lr}
   b9e36:	2200      	movs	r2, #0
   b9e38:	2300      	movs	r3, #0
   b9e3a:	4604      	mov	r4, r0
   b9e3c:	460d      	mov	r5, r1
   b9e3e:	f7fd ff07 	bl	b7c50 <__aeabi_dcmplt>
   b9e42:	b928      	cbnz	r0, b9e50 <__aeabi_d2lz+0x1c>
   b9e44:	4620      	mov	r0, r4
   b9e46:	4629      	mov	r1, r5
   b9e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9e4c:	f7fd bf98 	b.w	b7d80 <__aeabi_d2ulz>
   b9e50:	4620      	mov	r0, r4
   b9e52:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b9e56:	f7fd ff93 	bl	b7d80 <__aeabi_d2ulz>
   b9e5a:	4240      	negs	r0, r0
   b9e5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9e60:	bd38      	pop	{r3, r4, r5, pc}
   b9e62:	bf00      	nop

000b9e64 <dynalib_user>:
   b9e64:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9e74:	0000 0000 6c70 6d75 4365 6e6f 656e 7463     ....plumeConnect
   b9e84:	2928 203a 7441 6574 706d 6974 676e 7420     (): Attempting t
   b9e94:	206f 6f63 6e6e 6365 2074 6f74 5420 6968     o connect to Thi
   b9ea4:	676e 6273 616f 6472 7320 7265 6576 0072     ngsboard server.
   b9eb4:	5957 6141 4e72 4263 6a73 7136 6356 4e30     WYAarNcBsj6qVc0N
   b9ec4:	674b 6331 4100 6772 6e6f 7000 756c 656d     Kg1c.Argon.plume
   b9ed4:	6f43 6e6e 6365 2874 3a29 4320 6e6f 656e     Connect(): Conne
   b9ee4:	7463 6465 7000 756c 656d 6f43 6e6e 6365     cted.plumeConnec
   b9ef4:	2874 3a29 4320 6e6f 656e 7463 6f69 206e     t(): Connection 
   b9f04:	6166 6c69 6465 202c 6572 7274 2079 6e69     failed, retry in
   b9f14:	3320 7320 6365 6e6f 7364 4200 3441 3031      3 seconds.BA410
   b9f24:	3034 3233 3639 4238 3141 3131 3234 3939     4032968BA1114299
   b9f34:	3730 3039 3132 3935 4134 0041 5441 432b     079021594AA.AT+C
   b9f44:	4950 3d4e 7325 0a0d 4100 6177 7469 6e69     PIN=%s...Awaitin
   b9f54:	2067 6552 6c70 2079 7266 6d6f 7020 7361     g Reply from pas
   b9f64:	7773 726f 0a64 5200 7065 796c 203a 7325     sword..Reply: %s
   b9f74:	000a 5441 412b 4444 4552 5353 253d 0d69     ..AT+ADDRESS=%i.
   b9f84:	000a 7741 6961 6974 676e 5220 7065 796c     ..Awaiting Reply
   b9f94:	6620 6f72 206d 6461 7264 7365 0a73 5200      from address..R
   b9fa4:	7065 796c 6120 6464 6572 7373 203a 7325     eply address: %s
   b9fb4:	000a 5441 4e2b 5445 4f57 4b52 4449 253d     ..AT+NETWORKID=%
   b9fc4:	0d69 000a 7741 6961 6974 676e 5220 7065     i...Awaiting Rep
   b9fd4:	796c 6620 6f72 206d 656e 7774 726f 696b     ly from networki
   b9fe4:	0a64 5200 7065 796c 6e20 7465 6f77 6b72     d..Reply network
   b9ff4:	203a 7325 000a 5441 412b 4444 4552 5353     : %s..AT+ADDRESS
   ba004:	0d3f 000a 7741 6961 6974 676e 5220 7065     ?...Awaiting Rep
   ba014:	796c 000a 6552 6c70 2079 6567 2074 6461     ly..Reply get ad
   ba024:	7264 7365 3a73 2520 0a73 4100 2b54 454e     dress: %s..AT+NE
   ba034:	5754 524f 494b 3f44 0a0d 5200 7065 796c     TWORKID?...Reply
   ba044:	6720 7465 6e20 7465 6f77 6b72 203a 7325      get network: %s
   ba054:	000a 5441 432b 4950 3f4e 0a0d 5200 7065     ..AT+CPIN?...Rep
   ba064:	796c 6720 7465 7020 7361 7773 726f 3a64     ly get password:
   ba074:	2520 0a73 4100 2b54 4552 4553 0d54 000a      %s..AT+RESET...
   ba084:	6925 3030 0030 6974 656d 7542 3a66 2520     %i000.timeBuf: %
   ba094:	0a73 7400 6d69 4e65 776f 203a 6925 3030     s..timeNow: %i00
   ba0a4:	0a30 4100 7373 7265 6974 6e6f 6146 6c69     0..AssertionFail
   ba0b4:	7275 2065 7273 2063 2626 7320 6372 3e2d     ure src && src->
   ba0c4:	6163 6c6c 6162 6b63 7b00 7422 2273 253a     callback.{"ts":%
   ba0d4:	2c73 2220 6162 7474 7265 3179 3a22 227b     s, "battery1":{"
   ba0e4:	3162 3a22 2e25 6632 222c 3176 3a22 2e25     b1":%.2f,"v1":%.
   ba0f4:	6632 7d7d 7b00 7422 2273 253a 2c73 2220     2f}}.{"ts":%s, "
   ba104:	6176 756c 7365 2231 7b3a 7422 2231 253a     values1":{"t1":%
   ba114:	322e 2c66 7622 2231 253a 322e 7d66 007d     .2f,"v1":%.2f}}.
   ba124:	3176 642f 7665 6369 7365 6d2f 2f65 6574     v1/devices/me/te
   ba134:	656c 656d 7274 0079 227b 7374 3a22 7325     lemetry.{"ts":%s
   ba144:	202c 7622 6c61 6575 3273 3a22 227b 3274     , "values2":{"t2
   ba154:	3a22 2e25 6632 222c 3276 3a22 2e25 6632     ":%.2f,"v2":%.2f
   ba164:	7d7d 7b00 7422 2273 253a 2c73 2220 6176     }}.{"ts":%s, "va
   ba174:	756c 7365 2233 7b3a 7422 2233 253a 322e     lues3":{"t3":%.2
   ba184:	2c66 7622 2233 253a 322e 7d66 007d 227b     f,"v3":%.2f}}.{"
   ba194:	7374 3a22 7325 202c 7622 6c61 6575 3473     ts":%s, "values4
   ba1a4:	3a22 227b 3474 3a22 2e25 6632 222c 3476     ":{"t4":%.2f,"v4
   ba1b4:	3a22 2e25 6632 7d7d 7b00 7422 2273 253a     ":%.2f}}.{"ts":%
   ba1c4:	2c73 2220 6176 756c 7365 2235 7b3a 7422     s, "values5":{"t
   ba1d4:	2235 253a 322e 2c66 7622 2235 253a 322e     5":%.2f,"v5":%.2
   ba1e4:	7d66 007d 6c50 6d75 2065 6164 6174 7320     f}}.Plume data s
   ba1f4:	6e65 2e74 2e2e 6900 636e 6d6f 6e69 5367     ent....incomingS
   ba204:	7274 6e69 3a67 2520 0a73 7400 6d65 4670     tring: %s..tempF
   ba214:	203a 2e25 3230 2c66 7020 6f72 6562 754e     : %.02f, probeNu
   ba224:	626d 7265 203a 6925 000a 6e69 6f63 696d     mber: %i..incomi
   ba234:	676e 7453 6972 676e 3a32 2520 0a73 2500     ngString2: %s..%
   ba244:	0073 716d 7474 7542 3a66 2520 0a73 6973     s.mqttBuf: %s.si
   ba254:	657a 664f 6d28 7471 4274 6675 3a29 2520     zeOf(mqttBuf): %
   ba264:	2f69 006e 0400 514d 5454 0004               i/n...MQTT..

000ba270 <_ZTVN5spark12NetworkClassE>:
	...
   ba278:	584b 000b 5855 000b 585f 000b 5869 000b     KX..UX.._X..iX..
   ba288:	5873 000b 587f 000b 588b 000b 5893 000b     sX...X...X...X..
   ba298:	589b 000b 58a7 000b 58af 000b 58b9 000b     .X...X...X...X..
   ba2a8:	58c3 000b 6977 6972 676e 7200 6365 2076     .X..wiring.recv 
   ba2b8:	7265 6f72 2072 203d 6425 0000               error = %d..

000ba2c4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba2cc:	5a35 000b 5a59 000b 5f8b 000b 5a67 000b     5Z..YZ..._..gZ..
   ba2dc:	5a39 000b                                   9Z..

000ba2e0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000ba2e8 <_ZTV9TCPClient>:
	...
   ba2f0:	5ae5 000b 5b19 000b 59b1 000b 59cb 000b     .Z...[...Y...Y..
   ba300:	5e21 000b 59f5 000b 5c97 000b 5a29 000b     !^...Y...\..)Z..
   ba310:	5d29 000b 5b69 000b 5cc5 000b 5ed5 000b     )]..i[...\...^..
   ba320:	5c65 000b 5a2b 000b 59dd 000b 5a6d 000b     e\..+Z...Y..mZ..
   ba330:	5b49 000b                                   I[..

000ba334 <_ZTV7TwoWire>:
	...
   ba33c:	5fa5 000b 5fef 000b 5fc7 000b 5fa7 000b     ._..._..._..._..
   ba34c:	5fcf 000b 5fd7 000b 5fdf 000b 5fe7 000b     ._..._..._..._..

000ba35c <_ZTV11USARTSerial>:
	...
   ba364:	6049 000b 60b5 000b 608d 000b 6c89 000b     I`...`...`...l..
   ba374:	605d 000b 6079 000b 606b 000b 6087 000b     ]`..y`..k`...`..
   ba384:	604b 000b 604f 000b                         K`..O`..

000ba38c <_ZTVN5spark13CellularClassE>:
	...
   ba394:	6159 000b 614f 000b 6145 000b 60fb 000b     Ya..Oa..Ea...`..
   ba3a4:	6139 000b 612d 000b 588b 000b 5893 000b     9a..-a...X...X..
   ba3b4:	6121 000b 6119 000b 610f 000b 6105 000b     !a...a...a...a..
   ba3c4:	58c3 000b                                   .X..

000ba3c8 <_ZTV9USBSerial>:
	...
   ba3d0:	619b 000b 6203 000b 61d9 000b 6c89 000b     .a...b...a...l..
   ba3e0:	61cb 000b 619d 000b 61ad 000b 61fd 000b     .a...a...a...a..
   ba3f0:	61bd 000b 6195 000b                         .a...a..

000ba3f8 <_ZTV9IPAddress>:
	...
   ba400:	62ad 000b 629d 000b 629f 000b               .b...b...b..

000ba40c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba414:	63b9 000b 63bf 000b 63fd 000b 63cd 000b     .c...c...c...c..
   ba424:	63bb 000b 5925 252d 2d6d 6425 2554 3a48     .c..%Y-%m-%dT%H:
   ba434:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   ba444:	7061 0070                                   app.

000ba448 <_ZTVN5spark13EthernetClassE>:
	...
   ba450:	7013 000b 7009 000b 6fff 000b 6ff5 000b     .p...p...o...o..
   ba460:	6fe9 000b 6fdd 000b 588b 000b 5893 000b     .o...o...X...X..
   ba470:	6fd1 000b 6fc9 000b 6fbf 000b 6fb5 000b     .o...o...o...o..
   ba480:	58c3 000b                                   .X..

000ba484 <_ZSt7nothrow>:
	...

000ba485 <_ZTSSt19_Sp_make_shared_tag>:
   ba485:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ba495:	6572 5f64 6174 0067 0000                     red_tag....

000ba4a0 <_ZTISt19_Sp_make_shared_tag>:
   ba4a0:	a4e0 000b a485 000b                         ........

000ba4a8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba4a8:	a540 000b a4b4 000b a564 000b               @.......d...

000ba4b4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba4b4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba4c4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba4d4:	0045 0000                                   E...

000ba4d8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba4d8:	0000 0000 a4a8 000b 721d 000b 7231 000b     .........r..1r..
   ba4e8:	73c5 000b 73c5 000b 729b 000b 71dd 000b     .s...s...r...q..
   ba4f8:	7283 000b 7245 000b 720f 000b               .r..Er...r..

000ba504 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba504:	a540 000b a510 000b a4a8 000b               @...........

000ba510 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba510:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba520:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba530:	666e 456f 0000 0000                         nfoE....

000ba538 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba538:	0000 0000 a504 000b 72c5 000b 72d9 000b     .........r...r..
   ba548:	73c5 000b 73c5 000b 729b 000b 71dd 000b     .s...s...r...q..
   ba558:	7399 000b 7325 000b 72ed 000b               .s..%s...r..

000ba564 <_ZTISt9type_info>:
   ba564:	a4e0 000b a56c 000b                         ....l...

000ba56c <_ZTSSt9type_info>:
   ba56c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba57c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba58c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   ba59c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba5ac:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba5bc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba5cc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba5dc:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba5ec:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba5fc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   ba60c:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000ba61c <fpi.1>:
   ba61c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ba62c:	0000 0000                                   ....

000ba630 <fpinan.0>:
   ba630:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000ba648 <tinytens>:
   ba648:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ba658:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ba668:	6f43 64ac 0628 1168                         Co.d(.h.

000ba670 <_ctype_>:
   ba670:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba680:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba690:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba6a0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba6b0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba6c0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba6d0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba6e0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba6f0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   ba770:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   ba780:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   ba790:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   ba7a0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   ba7b0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   ba7c0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   ba7d0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   ba7e0:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   ba7f0:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   ba800:	6874 7865 632e 0000                         thex.c..

000ba808 <_C_numeric_locale>:
   ba808:	a1f9 000b a03e 000b e238 2003 0043 4f50     ....>...8.. C.PO
   ba818:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   ba828:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba838:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba848:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba858:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba868:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba878:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba888:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   ba898:	0063 0000 0000 0000                         c.......

000ba8a0 <__mprec_bigtens>:
   ba8a0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ba8b0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ba8c0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ba8c8 <__mprec_tens>:
   ba8c8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ba8d8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ba8e8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ba8f8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ba908:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ba918:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ba928:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ba938:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ba948:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ba958:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ba968:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ba978:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ba988:	9db4 79d9 7843 44ea                         ...yCx.D

000ba990 <p05.0>:
   ba990:	0005 0000 0019 0000 007d 0000               ........}...

000ba99c <link_const_variable_data_end>:
   ba99c:	000b44d1 	.word	0x000b44d1
   ba9a0:	000b599d 	.word	0x000b599d
   ba9a4:	000b6165 	.word	0x000b6165
   ba9a8:	000b6ad5 	.word	0x000b6ad5
   ba9ac:	000b6be1 	.word	0x000b6be1
   ba9b0:	000b6bf5 	.word	0x000b6bf5
   ba9b4:	000b6da9 	.word	0x000b6da9
   ba9b8:	000b6f91 	.word	0x000b6f91
   ba9bc:	000b701d 	.word	0x000b701d
