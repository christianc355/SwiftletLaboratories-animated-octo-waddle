
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/helloThingsBoard/target/2.3.0/argon/helloThingsBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002bd4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6bf0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  2003e390  000d6bf4  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003a8  2003e448  2003e448  0002e448  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6cac  000d6cac  00026cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6cd4  000d6cd4  00026cd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012ecbf  00000000  00000000  00026cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001491b  00000000  00000000  00155997  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000026e0  00000000  00000000  0016a2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00036040  00000000  00000000  0016c992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000331c4  00000000  00000000  001a29d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00106d1e  00000000  00000000  001d5b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00026707  00000000  00000000  002dc8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00007140  00000000  00000000  00302fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000069e8  00000000  00000000  0030a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fadf 	bl	d65f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fae7 	bl	d660c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e390 	.word	0x2003e390
   d4048:	000d6bf4 	.word	0x000d6bf4
   d404c:	2003e448 	.word	0x2003e448
   d4050:	2003e448 	.word	0x2003e448
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fbb1 	bl	d57c4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6bc4 	.word	0x000d6bc4
   d407c:	000d6be8 	.word	0x000d6be8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8ac 	b.w	d41dc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8d7 	bl	d4238 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bb51 	b.w	d5734 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bd49 	b.w	d4b28 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bd47 	b.w	d4b28 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bd4d 	b.w	d4b38 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ae:	b40e      	push	{r1, r2, r3}
   d40b0:	b503      	push	{r0, r1, lr}
   d40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40bc:	f001 fc2f 	bl	d591e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c0:	b002      	add	sp, #8
   d40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   d40c6:	b003      	add	sp, #12
   d40c8:	4770      	bx	lr
	...

000d40cc <_Z12plumePublishv>:
        lastTime = millis();
    }
}

void plumePublish()
{
   d40cc:	b530      	push	{r4, r5, lr}
    float t1 = random(80000, 170000) / 1000.0;
   d40ce:	4c20      	ldr	r4, [pc, #128]	; (d4150 <_Z12plumePublishv+0x84>)
   d40d0:	4920      	ldr	r1, [pc, #128]	; (d4154 <_Z12plumePublishv+0x88>)
{
   d40d2:	b085      	sub	sp, #20
    float t1 = random(80000, 170000) / 1000.0;
   d40d4:	4620      	mov	r0, r4
   d40d6:	f001 f93c 	bl	d5352 <_Z6randomii>
    float t2 = random(80000, 170000) / 1000.0;
   d40da:	491e      	ldr	r1, [pc, #120]	; (d4154 <_Z12plumePublishv+0x88>)
    float t1 = random(80000, 170000) / 1000.0;
   d40dc:	4605      	mov	r5, r0
    float t2 = random(80000, 170000) / 1000.0;
   d40de:	4620      	mov	r0, r4
   d40e0:	f001 f937 	bl	d5352 <_Z6randomii>
   d40e4:	f001 ffb2 	bl	d604c <__aeabi_i2d>
   d40e8:	4b1b      	ldr	r3, [pc, #108]	; (d4158 <_Z12plumePublishv+0x8c>)
    // float t6 = random(80000, 170000) / 1000.0;
    // float t7 = random(80000, 170000) / 1000.0;
    // float t8 = random(80000, 170000) / 1000.0;
    // float t9 = random(80000, 170000) / 1000.0;

    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   d40ea:	4c1c      	ldr	r4, [pc, #112]	; (d415c <_Z12plumePublishv+0x90>)
    float t2 = random(80000, 170000) / 1000.0;
   d40ec:	2200      	movs	r2, #0
   d40ee:	f002 f941 	bl	d6374 <__aeabi_ddiv>
   d40f2:	f002 fa27 	bl	d6544 <__aeabi_d2f>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   d40f6:	f001 ffbb 	bl	d6070 <__aeabi_f2d>
   d40fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    float t1 = random(80000, 170000) / 1000.0;
   d40fe:	4628      	mov	r0, r5
   d4100:	f001 ffa4 	bl	d604c <__aeabi_i2d>
   d4104:	4b14      	ldr	r3, [pc, #80]	; (d4158 <_Z12plumePublishv+0x8c>)
   d4106:	2200      	movs	r2, #0
   d4108:	f002 f934 	bl	d6374 <__aeabi_ddiv>
   d410c:	f002 fa1a 	bl	d6544 <__aeabi_d2f>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   d4110:	f001 ffae 	bl	d6070 <__aeabi_f2d>
   d4114:	4a12      	ldr	r2, [pc, #72]	; (d4160 <_Z12plumePublishv+0x94>)
   d4116:	e9cd 0100 	strd	r0, r1, [sp]
   d411a:	2180      	movs	r1, #128	; 0x80
   d411c:	4620      	mov	r0, r4
   d411e:	f000 fd13 	bl	d4b48 <snprintf>
    Serial.printf("mqttBuf: %s\nsizeOf(mqttBuf): %i/n", mqttBuf, sizeof(mqttBuf));
   d4122:	f001 fa37 	bl	d5594 <_Z16_fetch_usbserialv>
   d4126:	2380      	movs	r3, #128	; 0x80
   d4128:	4622      	mov	r2, r4
   d412a:	490e      	ldr	r1, [pc, #56]	; (d4164 <_Z12plumePublishv+0x98>)
   d412c:	f7ff ffbf 	bl	d40ae <_ZN5Print6printfEPKcz>
    plume.publish("v1/devices/me/telemetry",mqttBuf);
   d4130:	4622      	mov	r2, r4
    static bool onOff = true;
    digitalWrite(LEDPIN, onOff);
   d4132:	4c0d      	ldr	r4, [pc, #52]	; (d4168 <_Z12plumePublishv+0x9c>)
    plume.publish("v1/devices/me/telemetry",mqttBuf);
   d4134:	490d      	ldr	r1, [pc, #52]	; (d416c <_Z12plumePublishv+0xa0>)
   d4136:	480e      	ldr	r0, [pc, #56]	; (d4170 <_Z12plumePublishv+0xa4>)
   d4138:	f000 fafb 	bl	d4732 <_ZN12PubSubClient7publishEPKcS1_>
    digitalWrite(LEDPIN, onOff);
   d413c:	7821      	ldrb	r1, [r4, #0]
   d413e:	2007      	movs	r0, #7
   d4140:	f001 fd03 	bl	d5b4a <digitalWrite>
    onOff = !onOff;
   d4144:	7823      	ldrb	r3, [r4, #0]
   d4146:	f083 0301 	eor.w	r3, r3, #1
   d414a:	7023      	strb	r3, [r4, #0]
}
   d414c:	b005      	add	sp, #20
   d414e:	bd30      	pop	{r4, r5, pc}
   d4150:	00013880 	.word	0x00013880
   d4154:	00029810 	.word	0x00029810
   d4158:	408f4000 	.word	0x408f4000
   d415c:	2003e44c 	.word	0x2003e44c
   d4160:	000d67d0 	.word	0x000d67d0
   d4164:	000d67e6 	.word	0x000d67e6
   d4168:	2003e390 	.word	0x2003e390
   d416c:	000d6808 	.word	0x000d6808
   d4170:	2003e4cc 	.word	0x2003e4cc

000d4174 <_Z12plumeConnectv>:

void plumeConnect()
{
   d4174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (!plume.connected())
   d4176:	4d13      	ldr	r5, [pc, #76]	; (d41c4 <_Z12plumeConnectv+0x50>)
    {
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   d4178:	4e13      	ldr	r6, [pc, #76]	; (d41c8 <_Z12plumeConnectv+0x54>)
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   d417a:	4f14      	ldr	r7, [pc, #80]	; (d41cc <_Z12plumeConnectv+0x58>)
    while (!plume.connected())
   d417c:	4811      	ldr	r0, [pc, #68]	; (d41c4 <_Z12plumeConnectv+0x50>)
   d417e:	f000 f9b4 	bl	d44ea <_ZN12PubSubClient9connectedEv>
   d4182:	4604      	mov	r4, r0
   d4184:	b9e0      	cbnz	r0, d41c0 <_Z12plumeConnectv+0x4c>
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   d4186:	f001 fa05 	bl	d5594 <_Z16_fetch_usbserialv>
   d418a:	4631      	mov	r1, r6
   d418c:	f001 fb9f 	bl	d58ce <_ZN5Print7printlnEPKc>
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   d4190:	490f      	ldr	r1, [pc, #60]	; (d41d0 <_Z12plumeConnectv+0x5c>)
   d4192:	4623      	mov	r3, r4
   d4194:	463a      	mov	r2, r7
   d4196:	4628      	mov	r0, r5
   d4198:	f000 fa8a 	bl	d46b0 <_ZN12PubSubClient7connectEPKcS1_S1_>
   d419c:	b130      	cbz	r0, d41ac <_Z12plumeConnectv+0x38>
        {
            Serial.println("plumeConnect(): Connected");
   d419e:	f001 f9f9 	bl	d5594 <_Z16_fetch_usbserialv>
        }
        else
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
        delay(3000);
    }
   d41a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            Serial.println("plumeConnect(): Connected");
   d41a6:	490b      	ldr	r1, [pc, #44]	; (d41d4 <_Z12plumeConnectv+0x60>)
   d41a8:	f001 bb91 	b.w	d58ce <_ZN5Print7printlnEPKc>
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   d41ac:	f001 f9f2 	bl	d5594 <_Z16_fetch_usbserialv>
   d41b0:	4909      	ldr	r1, [pc, #36]	; (d41d8 <_Z12plumeConnectv+0x64>)
   d41b2:	f001 fb8c 	bl	d58ce <_ZN5Print7printlnEPKc>
        delay(3000);
   d41b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d41ba:	f001 fb3b 	bl	d5834 <delay>
    while (!plume.connected())
   d41be:	e7dd      	b.n	d417c <_Z12plumeConnectv+0x8>
   d41c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d41c2:	bf00      	nop
   d41c4:	2003e4cc 	.word	0x2003e4cc
   d41c8:	000d6820 	.word	0x000d6820
   d41cc:	000d685c 	.word	0x000d685c
   d41d0:	000d6871 	.word	0x000d6871
   d41d4:	000d6877 	.word	0x000d6877
   d41d8:	000d6891 	.word	0x000d6891

000d41dc <setup>:
{
   d41dc:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d41de:	f001 f9d9 	bl	d5594 <_Z16_fetch_usbserialv>
   d41e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41e6:	f001 f9c9 	bl	d557c <_ZN9USBSerial5beginEl>
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   d41ea:	4c0d      	ldr	r4, [pc, #52]	; (d4220 <setup+0x44>)
    pinMode(D7, OUTPUT);
   d41ec:	2101      	movs	r1, #1
   d41ee:	2007      	movs	r0, #7
   d41f0:	f001 fc9a 	bl	d5b28 <pinMode>
    plume.setServer(thingsboardServer, MQTTPORT);
   d41f4:	490b      	ldr	r1, [pc, #44]	; (d4224 <setup+0x48>)
   d41f6:	480c      	ldr	r0, [pc, #48]	; (d4228 <setup+0x4c>)
   d41f8:	f240 725b 	movw	r2, #1883	; 0x75b
   d41fc:	f000 faaa 	bl	d4754 <_ZN12PubSubClient9setServerEPKct>
    plumeConnect();
   d4200:	f7ff ffb8 	bl	d4174 <_Z12plumeConnectv>
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   d4204:	4b09      	ldr	r3, [pc, #36]	; (d422c <setup+0x50>)
   d4206:	4a0a      	ldr	r2, [pc, #40]	; (d4230 <setup+0x54>)
   d4208:	2180      	movs	r1, #128	; 0x80
   d420a:	4620      	mov	r0, r4
   d420c:	f000 fc9c 	bl	d4b48 <snprintf>
    Serial.printf("mqttBuf: %s\nsizeOf(mqttBuf): %i/n", mqttBuf, sizeof(mqttBuf));
   d4210:	f001 f9c0 	bl	d5594 <_Z16_fetch_usbserialv>
   d4214:	4907      	ldr	r1, [pc, #28]	; (d4234 <setup+0x58>)
   d4216:	2380      	movs	r3, #128	; 0x80
   d4218:	4622      	mov	r2, r4
   d421a:	f7ff ff48 	bl	d40ae <_ZN5Print6printfEPKcz>
}
   d421e:	bd10      	pop	{r4, pc}
   d4220:	2003e44c 	.word	0x2003e44c
   d4224:	2003e391 	.word	0x2003e391
   d4228:	2003e4cc 	.word	0x2003e4cc
   d422c:	2003e3a3 	.word	0x2003e3a3
   d4230:	000d68c7 	.word	0x000d68c7
   d4234:	000d67e6 	.word	0x000d67e6

000d4238 <loop>:
{
   d4238:	b510      	push	{r4, lr}
    if (!plume.connected())
   d423a:	480a      	ldr	r0, [pc, #40]	; (d4264 <loop+0x2c>)
   d423c:	f000 f955 	bl	d44ea <_ZN12PubSubClient9connectedEv>
   d4240:	b908      	cbnz	r0, d4246 <loop+0xe>
        plumeConnect();
   d4242:	f7ff ff97 	bl	d4174 <_Z12plumeConnectv>
    if (millis() - lastTime > 5000)
   d4246:	4c08      	ldr	r4, [pc, #32]	; (d4268 <loop+0x30>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4248:	f000 fba2 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
   d424c:	6823      	ldr	r3, [r4, #0]
   d424e:	1ac0      	subs	r0, r0, r3
   d4250:	f241 3388 	movw	r3, #5000	; 0x1388
   d4254:	4298      	cmp	r0, r3
   d4256:	d904      	bls.n	d4262 <loop+0x2a>
        plumePublish();
   d4258:	f7ff ff38 	bl	d40cc <_Z12plumePublishv>
   d425c:	f000 fb98 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
        lastTime = millis();
   d4260:	6020      	str	r0, [r4, #0]
}
   d4262:	bd10      	pop	{r4, pc}
   d4264:	2003e4cc 	.word	0x2003e4cc
   d4268:	2003e448 	.word	0x2003e448

000d426c <_GLOBAL__sub_I_thingsboardServer>:
   d426c:	b508      	push	{r3, lr}
TCPClient pubsub;
   d426e:	4905      	ldr	r1, [pc, #20]	; (d4284 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   d4270:	4608      	mov	r0, r1
   d4272:	f001 f845 	bl	d5300 <_ZN9TCPClientC1Ev>
   d4276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   d427a:	4902      	ldr	r1, [pc, #8]	; (d4284 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   d427c:	4802      	ldr	r0, [pc, #8]	; (d4288 <_GLOBAL__sub_I_thingsboardServer+0x1c>)
   d427e:	f000 b815 	b.w	d42ac <_ZN12PubSubClientC1ER6Client>
   d4282:	bf00      	nop
   d4284:	2003e58c 	.word	0x2003e58c
   d4288:	2003e4cc 	.word	0x2003e4cc

000d428c <_ZN9IPAddressC1ERKS_>:

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d428c:	b570      	push	{r4, r5, r6, lr}
   d428e:	4604      	mov	r4, r0
   d4290:	4b05      	ldr	r3, [pc, #20]	; (d42a8 <_ZN9IPAddressC1ERKS_+0x1c>)
   d4292:	f844 3b04 	str.w	r3, [r4], #4
   d4296:	1d0d      	adds	r5, r1, #4
   d4298:	4606      	mov	r6, r0
   d429a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d429c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d429e:	682b      	ldr	r3, [r5, #0]
   d42a0:	7023      	strb	r3, [r4, #0]
   d42a2:	4630      	mov	r0, r6
   d42a4:	bd70      	pop	{r4, r5, r6, pc}
   d42a6:	bf00      	nop
   d42a8:	000d6a64 	.word	0x000d6a64

000d42ac <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   d42ac:	b538      	push	{r3, r4, r5, lr}
   d42ae:	4604      	mov	r4, r0
   d42b0:	3098      	adds	r0, #152	; 0x98
   d42b2:	460d      	mov	r5, r1
   d42b4:	f001 f9ce 	bl	d5654 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   d42b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d42bc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   d42c0:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   d42c2:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   d42c4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   d42c8:	4620      	mov	r0, r4
   d42ca:	bd38      	pop	{r3, r4, r5, pc}

000d42cc <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   d42cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d42d0:	4605      	mov	r5, r0
   d42d2:	460e      	mov	r6, r1
   d42d4:	f000 fb5c 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   d42d8:	f643 2897 	movw	r8, #14999	; 0x3a97
   d42dc:	4607      	mov	r7, r0
   while(!_client->available()) {
   d42de:	6828      	ldr	r0, [r5, #0]
   d42e0:	6803      	ldr	r3, [r0, #0]
   d42e2:	691b      	ldr	r3, [r3, #16]
   d42e4:	4798      	blx	r3
   d42e6:	4604      	mov	r4, r0
   d42e8:	b930      	cbnz	r0, d42f8 <_ZN12PubSubClient8readByteEPh+0x2c>
   d42ea:	f000 fb51 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   d42ee:	1bc3      	subs	r3, r0, r7
   d42f0:	4543      	cmp	r3, r8
   d42f2:	d9f4      	bls.n	d42de <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   d42f4:	4620      	mov	r0, r4
   d42f6:	e005      	b.n	d4304 <_ZN12PubSubClient8readByteEPh+0x38>
   *result = _client->read();
   d42f8:	6828      	ldr	r0, [r5, #0]
   d42fa:	6803      	ldr	r3, [r0, #0]
   d42fc:	695b      	ldr	r3, [r3, #20]
   d42fe:	4798      	blx	r3
   d4300:	7030      	strb	r0, [r6, #0]
   d4302:	2001      	movs	r0, #1
}
   d4304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4308 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   d4308:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   d430a:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   d430c:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   d430e:	4614      	mov	r4, r2
  if(readByte(write_address)){
   d4310:	f7ff ffdc 	bl	d42cc <_ZN12PubSubClient8readByteEPh>
   d4314:	b108      	cbz	r0, d431a <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   d4316:	3501      	adds	r5, #1
   d4318:	8025      	strh	r5, [r4, #0]
}
   d431a:	bd38      	pop	{r3, r4, r5, pc}

000d431c <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d431c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   d4320:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d4322:	4688      	mov	r8, r1
    uint16_t len = 0;
   d4324:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   d4326:	f10d 0206 	add.w	r2, sp, #6
   d432a:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d432c:	4604      	mov	r4, r0
    uint16_t len = 0;
   d432e:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   d4332:	f7ff ffe9 	bl	d4308 <_ZN12PubSubClient8readByteEPhPt>
   d4336:	b918      	cbnz	r0, d4340 <_ZN12PubSubClient10readPacketEPh+0x24>
   d4338:	2000      	movs	r0, #0
}
   d433a:	b003      	add	sp, #12
   d433c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4340:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   d4344:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   d4348:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   d434a:	f10d 0105 	add.w	r1, sp, #5
   d434e:	4620      	mov	r0, r4
   d4350:	f7ff ffbc 	bl	d42cc <_ZN12PubSubClient8readByteEPh>
   d4354:	2800      	cmp	r0, #0
   d4356:	d0ef      	beq.n	d4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   d4358:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d435c:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4360:	1c53      	adds	r3, r2, #1
   d4362:	4422      	add	r2, r4
   d4364:	b29b      	uxth	r3, r3
   d4366:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   d4368:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   d436c:	fb12 f206 	smulbb	r2, r2, r6
   d4370:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   d4372:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   d4374:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   d4378:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d437a:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   d437e:	d4e4      	bmi.n	d434a <_ZN12PubSubClient10readPacketEPh+0x2e>
   d4380:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   d4384:	3b01      	subs	r3, #1
    if (isPublish) {
   d4386:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   d438a:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   d438e:	d11e      	bne.n	d43ce <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   d4390:	f10d 0206 	add.w	r2, sp, #6
   d4394:	4629      	mov	r1, r5
   d4396:	4620      	mov	r0, r4
   d4398:	f7ff ffb6 	bl	d4308 <_ZN12PubSubClient8readByteEPhPt>
   d439c:	2800      	cmp	r0, #0
   d439e:	d0cb      	beq.n	d4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   d43a0:	f10d 0206 	add.w	r2, sp, #6
   d43a4:	4629      	mov	r1, r5
   d43a6:	4620      	mov	r0, r4
   d43a8:	f7ff ffae 	bl	d4308 <_ZN12PubSubClient8readByteEPhPt>
   d43ac:	2800      	cmp	r0, #0
   d43ae:	d0c3      	beq.n	d4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d43b0:	f898 3000 	ldrb.w	r3, [r8]
   d43b4:	4423      	add	r3, r4
   d43b6:	795a      	ldrb	r2, [r3, #5]
   d43b8:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   d43ba:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d43bc:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   d43c0:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d43c2:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   d43c4:	d501      	bpl.n	d43ca <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   d43c6:	3602      	adds	r6, #2
   d43c8:	b2b6      	uxth	r6, r6
        start = 2;
   d43ca:	2502      	movs	r5, #2
   d43cc:	e001      	b.n	d43d2 <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   d43ce:	2500      	movs	r5, #0
    uint16_t skip = 0;
   d43d0:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   d43d2:	b2ad      	uxth	r5, r5
   d43d4:	42bd      	cmp	r5, r7
   d43d6:	d226      	bcs.n	d4426 <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   d43d8:	f10d 0105 	add.w	r1, sp, #5
   d43dc:	4620      	mov	r0, r4
   d43de:	f7ff ff75 	bl	d42cc <_ZN12PubSubClient8readByteEPh>
   d43e2:	2800      	cmp	r0, #0
   d43e4:	d0a8      	beq.n	d4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   d43e6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   d43ea:	b178      	cbz	r0, d440c <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   d43ec:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   d43f0:	d10c      	bne.n	d440c <_ZN12PubSubClient10readPacketEPh+0xf0>
   d43f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d43f6:	f898 2000 	ldrb.w	r2, [r8]
   d43fa:	1a9b      	subs	r3, r3, r2
   d43fc:	3b02      	subs	r3, #2
   d43fe:	42b3      	cmp	r3, r6
   d4400:	dd04      	ble.n	d440c <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   d4402:	6803      	ldr	r3, [r0, #0]
   d4404:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4408:	689b      	ldr	r3, [r3, #8]
   d440a:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   d440c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4410:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   d4412:	bf9e      	ittt	ls
   d4414:	18e2      	addls	r2, r4, r3
   d4416:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   d441a:	7111      	strbls	r1, [r2, #4]
        len++;
   d441c:	3301      	adds	r3, #1
   d441e:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   d4422:	3501      	adds	r5, #1
   d4424:	e7d5      	b.n	d43d2 <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   d4426:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d442a:	b92b      	cbnz	r3, d4438 <_ZN12PubSubClient10readPacketEPh+0x11c>
   d442c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4430:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   d4432:	bf88      	it	hi
   d4434:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   d4438:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d443c:	e77d      	b.n	d433a <_ZN12PubSubClient10readPacketEPh+0x1e>

000d443e <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d443e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4440:	468c      	mov	ip, r1
   d4442:	461e      	mov	r6, r3
    uint16_t len = length;
   d4444:	461d      	mov	r5, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4446:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d4448:	2300      	movs	r3, #0
        digit = len % 128;
   d444a:	46ae      	mov	lr, r5
        lenBuf[pos++] = digit;
   d444c:	a802      	add	r0, sp, #8
        digit = len % 128;
   d444e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d4452:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d4456:	f103 0401 	add.w	r4, r3, #1
   d445a:	4403      	add	r3, r0
            digit |= 0x80;
   d445c:	bf88      	it	hi
   d445e:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
    } while(len>0);
   d4462:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d4466:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d446a:	b2e4      	uxtb	r4, r4
   d446c:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len>0);
   d4470:	d810      	bhi.n	d4494 <_ZN12PubSubClient5writeEhPht+0x56>
    buf[4-llen] = header;
   d4472:	f1c4 0304 	rsb	r3, r4, #4
   d4476:	18d1      	adds	r1, r2, r3
   d4478:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i=0;i<llen;i++) {
   d447c:	f1c4 0305 	rsb	r3, r4, #5
   d4480:	4413      	add	r3, r2
   d4482:	a801      	add	r0, sp, #4
   d4484:	3205      	adds	r2, #5
   d4486:	429a      	cmp	r2, r3
   d4488:	d006      	beq.n	d4498 <_ZN12PubSubClient5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d448a:	f810 5b01 	ldrb.w	r5, [r0], #1
   d448e:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i=0;i<llen;i++) {
   d4492:	e7f8      	b.n	d4486 <_ZN12PubSubClient5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d4494:	4623      	mov	r3, r4
   d4496:	e7d8      	b.n	d444a <_ZN12PubSubClient5writeEhPht+0xc>
    rc = _client->write(buf+(4-llen),length+1+llen);
   d4498:	6838      	ldr	r0, [r7, #0]
   d449a:	6803      	ldr	r3, [r0, #0]
   d449c:	1c72      	adds	r2, r6, #1
   d449e:	4422      	add	r2, r4
   d44a0:	68db      	ldr	r3, [r3, #12]
   d44a2:	4798      	blx	r3
   d44a4:	4605      	mov	r5, r0
   d44a6:	f000 fa73 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   d44aa:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d44ac:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   d44b0:	4432      	add	r2, r6
   d44b2:	b2a8      	uxth	r0, r5
}
   d44b4:	1a13      	subs	r3, r2, r0
   d44b6:	4258      	negs	r0, r3
   d44b8:	4158      	adcs	r0, r3
   d44ba:	b003      	add	sp, #12
   d44bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d44be <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   d44be:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d44c0:	b570      	push	{r4, r5, r6, lr}
    pos += 2;
   d44c2:	b29b      	uxth	r3, r3
   d44c4:	2400      	movs	r4, #0
    while (*idp) {
   d44c6:	3901      	subs	r1, #1
   d44c8:	1c65      	adds	r5, r4, #1
   d44ca:	1918      	adds	r0, r3, r4
   d44cc:	5d4e      	ldrb	r6, [r1, r5]
   d44ce:	b280      	uxth	r0, r0
   d44d0:	b116      	cbz	r6, d44d8 <_ZN12PubSubClient11writeStringEPKcPht+0x1a>
        buf[pos++] = *idp++;
   d44d2:	5416      	strb	r6, [r2, r0]
    while (*idp) {
   d44d4:	462c      	mov	r4, r5
   d44d6:	e7f7      	b.n	d44c8 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   d44d8:	b2a3      	uxth	r3, r4
   d44da:	1ac1      	subs	r1, r0, r3
   d44dc:	440a      	add	r2, r1
   d44de:	121b      	asrs	r3, r3, #8
   d44e0:	f802 3c02 	strb.w	r3, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d44e4:	f802 4c01 	strb.w	r4, [r2, #-1]
}
   d44e8:	bd70      	pop	{r4, r5, r6, pc}

000d44ea <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   d44ea:	b538      	push	{r3, r4, r5, lr}
   d44ec:	4604      	mov	r4, r0
    if (_client == NULL ) {
   d44ee:	6800      	ldr	r0, [r0, #0]
   d44f0:	b908      	cbnz	r0, d44f6 <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   d44f2:	2000      	movs	r0, #0
}
   d44f4:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   d44f6:	6803      	ldr	r3, [r0, #0]
   d44f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44fa:	4798      	blx	r3
        if (!rc) {
   d44fc:	b980      	cbnz	r0, d4520 <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   d44fe:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   d4502:	2d00      	cmp	r5, #0
   d4504:	d1f5      	bne.n	d44f2 <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   d4506:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   d4508:	f06f 0302 	mvn.w	r3, #2
   d450c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   d4510:	6803      	ldr	r3, [r0, #0]
   d4512:	69db      	ldr	r3, [r3, #28]
   d4514:	4798      	blx	r3
                _client->stop();
   d4516:	6820      	ldr	r0, [r4, #0]
   d4518:	6803      	ldr	r3, [r0, #0]
   d451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d451c:	4798      	blx	r3
   d451e:	e7e8      	b.n	d44f2 <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   d4520:	2001      	movs	r0, #1
   d4522:	e7e7      	b.n	d44f4 <_ZN12PubSubClient9connectedEv+0xa>

000d4524 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   d4524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4528:	b08b      	sub	sp, #44	; 0x2c
   d452a:	4604      	mov	r4, r0
   d452c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   d4530:	4689      	mov	r9, r1
   d4532:	4617      	mov	r7, r2
   d4534:	461e      	mov	r6, r3
    if (!connected()) {
   d4536:	f7ff ffd8 	bl	d44ea <_ZN12PubSubClient9connectedEv>
   d453a:	4605      	mov	r5, r0
   d453c:	2800      	cmp	r0, #0
   d453e:	f040 80a9 	bne.w	d4694 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
        if (domain != NULL) {
   d4542:	f8d4 a000 	ldr.w	sl, [r4]
   d4546:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
   d454a:	f8da 3000 	ldr.w	r3, [sl]
   d454e:	2900      	cmp	r1, #0
   d4550:	d07d      	beq.n	d464e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x12a>
            result = _client->connect(this->domain, this->port);
   d4552:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   d4556:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d455a:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   d455c:	4650      	mov	r0, sl
   d455e:	47d8      	blx	fp
        if (result == 1) {
   d4560:	2801      	cmp	r0, #1
   d4562:	f040 809e 	bne.w	d46a2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x17e>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   d4566:	4b51      	ldr	r3, [pc, #324]	; (d46ac <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x188>)
            nextMsgId = 1;
   d4568:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   d456c:	889a      	ldrh	r2, [r3, #4]
   d456e:	6818      	ldr	r0, [r3, #0]
   d4570:	799b      	ldrb	r3, [r3, #6]
   d4572:	f8ad 2014 	strh.w	r2, [sp, #20]
   d4576:	f88d 3016 	strb.w	r3, [sp, #22]
   d457a:	9004      	str	r0, [sp, #16]
   d457c:	ab04      	add	r3, sp, #16
   d457e:	f104 0209 	add.w	r2, r4, #9
   d4582:	f104 0110 	add.w	r1, r4, #16
                buffer[length++] = d[j];
   d4586:	f813 0b01 	ldrb.w	r0, [r3], #1
   d458a:	f802 0b01 	strb.w	r0, [r2], #1
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
   d458e:	428a      	cmp	r2, r1
   d4590:	d1f9      	bne.n	d4586 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x62>
            if (willTopic) {
   d4592:	f1b8 0f00 	cmp.w	r8, #0
   d4596:	d066      	beq.n	d4666 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x142>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4598:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   d459c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   d45a0:	015b      	lsls	r3, r3, #5
   d45a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   d45a6:	f043 0306 	orr.w	r3, r3, #6
   d45aa:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   d45ac:	b11f      	cbz	r7, d45b6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x92>
                if(pass != NULL) {
   d45ae:	2e00      	cmp	r6, #0
   d45b0:	d15b      	bne.n	d466a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x146>
                v = v|0x80;
   d45b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   d45b6:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   d45b8:	2300      	movs	r3, #0
   d45ba:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   d45bc:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   d45be:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   d45c0:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   d45c2:	4649      	mov	r1, r9
   d45c4:	4620      	mov	r0, r4
   d45c6:	9201      	str	r2, [sp, #4]
   d45c8:	f7ff ff79 	bl	d44be <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   d45cc:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   d45ce:	4603      	mov	r3, r0
            if (willTopic) {
   d45d0:	f1b8 0f00 	cmp.w	r8, #0
   d45d4:	d00b      	beq.n	d45ee <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xca>
                length = writeString(willTopic,buffer,length);
   d45d6:	4641      	mov	r1, r8
   d45d8:	4620      	mov	r0, r4
   d45da:	f7ff ff70 	bl	d44be <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   d45de:	9a01      	ldr	r2, [sp, #4]
   d45e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   d45e2:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   d45e4:	4620      	mov	r0, r4
   d45e6:	f7ff ff6a 	bl	d44be <_ZN12PubSubClient11writeStringEPKcPht>
   d45ea:	9a01      	ldr	r2, [sp, #4]
   d45ec:	4603      	mov	r3, r0
            if(user != NULL) {
   d45ee:	b16f      	cbz	r7, d460c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe8>
                length = writeString(user,buffer,length);
   d45f0:	4639      	mov	r1, r7
   d45f2:	4620      	mov	r0, r4
   d45f4:	9201      	str	r2, [sp, #4]
   d45f6:	f7ff ff62 	bl	d44be <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   d45fa:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   d45fc:	4603      	mov	r3, r0
                if(pass != NULL) {
   d45fe:	b12e      	cbz	r6, d460c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe8>
                    length = writeString(pass,buffer,length);
   d4600:	4631      	mov	r1, r6
   d4602:	4620      	mov	r0, r4
   d4604:	f7ff ff5b 	bl	d44be <_ZN12PubSubClient11writeStringEPKcPht>
   d4608:	9a01      	ldr	r2, [sp, #4]
   d460a:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   d460c:	3b05      	subs	r3, #5
   d460e:	b29b      	uxth	r3, r3
   d4610:	2110      	movs	r1, #16
   d4612:	4620      	mov	r0, r4
   d4614:	f7ff ff13 	bl	d443e <_ZN12PubSubClient5writeEhPht>
   d4618:	f000 f9ba 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d461c:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   d4620:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   d4624:	6820      	ldr	r0, [r4, #0]
   d4626:	6803      	ldr	r3, [r0, #0]
   d4628:	691b      	ldr	r3, [r3, #16]
   d462a:	4798      	blx	r3
   d462c:	bb00      	cbnz	r0, d4670 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x14c>
   d462e:	f000 f9af 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   d4632:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d4636:	1ac0      	subs	r0, r0, r3
   d4638:	42b0      	cmp	r0, r6
   d463a:	d9f3      	bls.n	d4624 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x100>
                    _state = MQTT_CONNECTION_TIMEOUT;
   d463c:	f06f 0303 	mvn.w	r3, #3
   d4640:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   d4644:	6820      	ldr	r0, [r4, #0]
   d4646:	6803      	ldr	r3, [r0, #0]
   d4648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d464a:	4798      	blx	r3
   d464c:	e022      	b.n	d4694 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
            result = _client->connect(this->ip, this->port);
   d464e:	f104 0198 	add.w	r1, r4, #152	; 0x98
   d4652:	a804      	add	r0, sp, #16
   d4654:	f8d3 b020 	ldr.w	fp, [r3, #32]
   d4658:	f7ff fe18 	bl	d428c <_ZN9IPAddressC1ERKS_>
   d465c:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   d4660:	462b      	mov	r3, r5
   d4662:	a904      	add	r1, sp, #16
   d4664:	e77a      	b.n	d455c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   d4666:	2302      	movs	r3, #2
   d4668:	e7a0      	b.n	d45ac <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x88>
                    v = v|(0x80>>1);
   d466a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   d466e:	e7a2      	b.n	d45b6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x92>
            uint16_t len = readPacket(&llen);
   d4670:	f10d 010f 	add.w	r1, sp, #15
   d4674:	4620      	mov	r0, r4
   d4676:	f7ff fe51 	bl	d431c <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   d467a:	2804      	cmp	r0, #4
   d467c:	d1e2      	bne.n	d4644 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x120>
                if (buffer[3] == 0) {
   d467e:	79e6      	ldrb	r6, [r4, #7]
   d4680:	b966      	cbnz	r6, d469c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x178>
   d4682:	f000 f985 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d4686:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d4688:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   d468c:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   d4690:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   d4694:	4628      	mov	r0, r5
   d4696:	b00b      	add	sp, #44	; 0x2c
   d4698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   d469c:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   d46a0:	e7d0      	b.n	d4644 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x120>
            _state = MQTT_CONNECT_FAILED;
   d46a2:	f06f 0301 	mvn.w	r3, #1
   d46a6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   d46aa:	e7f3      	b.n	d4694 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   d46ac:	000d68ca 	.word	0x000d68ca

000d46b0 <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   d46b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   d46b2:	2400      	movs	r4, #0
   d46b4:	e9cd 4402 	strd	r4, r4, [sp, #8]
   d46b8:	e9cd 4400 	strd	r4, r4, [sp]
   d46bc:	f7ff ff32 	bl	d4524 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   d46c0:	b004      	add	sp, #16
   d46c2:	bd10      	pop	{r4, pc}

000d46c4 <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   d46c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d46c8:	4604      	mov	r4, r0
   d46ca:	f89d 7020 	ldrb.w	r7, [sp, #32]
   d46ce:	4688      	mov	r8, r1
   d46d0:	4616      	mov	r6, r2
   d46d2:	461d      	mov	r5, r3
    if (connected()) {
   d46d4:	f7ff ff09 	bl	d44ea <_ZN12PubSubClient9connectedEv>
   d46d8:	b338      	cbz	r0, d472a <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   d46da:	4640      	mov	r0, r8
   d46dc:	f002 f800 	bl	d66e0 <strlen>
   d46e0:	1deb      	adds	r3, r5, #7
   d46e2:	4418      	add	r0, r3
   d46e4:	2880      	cmp	r0, #128	; 0x80
   d46e6:	d820      	bhi.n	d472a <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   d46e8:	1d22      	adds	r2, r4, #4
   d46ea:	2305      	movs	r3, #5
   d46ec:	4641      	mov	r1, r8
   d46ee:	4620      	mov	r0, r4
   d46f0:	9201      	str	r2, [sp, #4]
   d46f2:	f7ff fee4 	bl	d44be <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   d46f6:	9a01      	ldr	r2, [sp, #4]
   d46f8:	2300      	movs	r3, #0
   d46fa:	18c1      	adds	r1, r0, r3
   d46fc:	429d      	cmp	r5, r3
   d46fe:	b289      	uxth	r1, r1
   d4700:	d907      	bls.n	d4712 <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   d4702:	4421      	add	r1, r4
   d4704:	f816 c003 	ldrb.w	ip, [r6, r3]
   d4708:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   d470c:	3301      	adds	r3, #1
   d470e:	b29b      	uxth	r3, r3
   d4710:	e7f3      	b.n	d46fa <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   d4712:	1f4b      	subs	r3, r1, #5
            header |= 1;
   d4714:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   d4716:	b29b      	uxth	r3, r3
   d4718:	bf0c      	ite	eq
   d471a:	2130      	moveq	r1, #48	; 0x30
   d471c:	2131      	movne	r1, #49	; 0x31
   d471e:	4620      	mov	r0, r4
}
   d4720:	b002      	add	sp, #8
   d4722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   d4726:	f7ff be8a 	b.w	d443e <_ZN12PubSubClient5writeEhPht>
}
   d472a:	2000      	movs	r0, #0
   d472c:	b002      	add	sp, #8
   d472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4732 <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   d4732:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4734:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   d4736:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   d4738:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   d473a:	9202      	str	r2, [sp, #8]
   d473c:	f001 ffd0 	bl	d66e0 <strlen>
   d4740:	4603      	mov	r3, r0
   d4742:	2000      	movs	r0, #0
   d4744:	9000      	str	r0, [sp, #0]
   d4746:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d474a:	4620      	mov	r0, r4
   d474c:	f7ff ffba 	bl	d46c4 <_ZN12PubSubClient7publishEPKcPKhjb>
}
   d4750:	b004      	add	sp, #16
   d4752:	bd10      	pop	{r4, pc}

000d4754 <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   d4754:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   d4758:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   d475c:	4770      	bx	lr
	...

000d4760 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_USB_USART_Init+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	681b      	ldr	r3, [r3, #0]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003024c 	.word	0x0003024c

000d4770 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_USB_USART_Begin+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	685b      	ldr	r3, [r3, #4]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	0003024c 	.word	0x0003024c

000d4780 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_USB_USART_Available_Data+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	691b      	ldr	r3, [r3, #16]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	0003024c 	.word	0x0003024c

000d4790 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	695b      	ldr	r3, [r3, #20]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	0003024c 	.word	0x0003024c

000d47a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_USB_USART_Receive_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	699b      	ldr	r3, [r3, #24]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	0003024c 	.word	0x0003024c

000d47b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_USB_USART_Send_Data+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	69db      	ldr	r3, [r3, #28]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	0003024c 	.word	0x0003024c

000d47c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USB_USART_Flush_Data+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	6a1b      	ldr	r3, [r3, #32]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003024c 	.word	0x0003024c

000d47d0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <hal_i2c_write+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6a1b      	ldr	r3, [r3, #32]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030228 	.word	0x00030228

000d47e0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <hal_i2c_available+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030228 	.word	0x00030228

000d47f0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <hal_i2c_read+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030228 	.word	0x00030228

000d4800 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <hal_i2c_peek+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030228 	.word	0x00030228

000d4810 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <hal_i2c_flush+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030228 	.word	0x00030228

000d4820 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <hal_i2c_is_enabled+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030228 	.word	0x00030228

000d4830 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <hal_i2c_init+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030228 	.word	0x00030228

000d4840 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <hal_spi_init+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	69db      	ldr	r3, [r3, #28]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030230 	.word	0x00030230

000d4850 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <hal_spi_is_enabled+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6a1b      	ldr	r3, [r3, #32]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030230 	.word	0x00030230

000d4860 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <sock_setsockopt+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	699b      	ldr	r3, [r3, #24]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030238 	.word	0x00030238

000d4870 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <sock_close+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	69db      	ldr	r3, [r3, #28]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030238 	.word	0x00030238

000d4880 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <sock_connect+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6a1b      	ldr	r3, [r3, #32]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030238 	.word	0x00030238

000d4890 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <sock_recv+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030238 	.word	0x00030238

000d48a0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <sock_send+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030238 	.word	0x00030238

000d48b0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <sock_socket+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030238 	.word	0x00030238

000d48c0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <hal_usart_init+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	681b      	ldr	r3, [r3, #0]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003023c 	.word	0x0003023c

000d48d0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <hal_usart_write+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	68db      	ldr	r3, [r3, #12]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003023c 	.word	0x0003023c

000d48e0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <hal_usart_available+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	691b      	ldr	r3, [r3, #16]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003023c 	.word	0x0003023c

000d48f0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <hal_usart_read+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	695b      	ldr	r3, [r3, #20]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003023c 	.word	0x0003023c

000d4900 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <hal_usart_peek+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	699b      	ldr	r3, [r3, #24]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	0003023c 	.word	0x0003023c

000d4910 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <hal_usart_flush+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	69db      	ldr	r3, [r3, #28]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	0003023c 	.word	0x0003023c

000d4920 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <hal_usart_is_enabled+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6a1b      	ldr	r3, [r3, #32]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	0003023c 	.word	0x0003023c

000d4930 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <hal_usart_available_data_for_write+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	0003023c 	.word	0x0003023c

000d4940 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <inet_inet_ntop+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	695b      	ldr	r3, [r3, #20]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030264 	.word	0x00030264

000d4950 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <inet_htonl+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	6a1b      	ldr	r3, [r3, #32]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030264 	.word	0x00030264

000d4960 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <inet_htons+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030264 	.word	0x00030264

000d4970 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <os_mutex_recursive_create+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030248 	.word	0x00030248

000d4980 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <HAL_RNG_GetRandomNumber+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	685b      	ldr	r3, [r3, #4]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030218 	.word	0x00030218

000d4990 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	695b      	ldr	r3, [r3, #20]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030218 	.word	0x00030218

000d49a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <if_index_to_name+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	695b      	ldr	r3, [r3, #20]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	0003026c 	.word	0x0003026c

000d49b0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_Pin_Mode+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	689b      	ldr	r3, [r3, #8]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	0003022c 	.word	0x0003022c

000d49c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_Get_Pin_Mode+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	68db      	ldr	r3, [r3, #12]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	0003022c 	.word	0x0003022c

000d49d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_GPIO_Write+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	691b      	ldr	r3, [r3, #16]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	0003022c 	.word	0x0003022c

000d49e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <netdb_freeaddrinfo+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	689b      	ldr	r3, [r3, #8]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030268 	.word	0x00030268

000d49f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <netdb_getaddrinfo+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	68db      	ldr	r3, [r3, #12]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030268 	.word	0x00030268

000d4a00 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <log_message+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030260 	.word	0x00030260

000d4a10 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030244 	.word	0x00030244

000d4a20 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <network_connect+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	685b      	ldr	r3, [r3, #4]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030240 	.word	0x00030240

000d4a30 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_connecting+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	689b      	ldr	r3, [r3, #8]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_disconnect+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	68db      	ldr	r3, [r3, #12]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_ready+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	691b      	ldr	r3, [r3, #16]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_on+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	695b      	ldr	r3, [r3, #20]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <network_off+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	699b      	ldr	r3, [r3, #24]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030240 	.word	0x00030240

000d4a80 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <network_listen+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	69db      	ldr	r3, [r3, #28]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030240 	.word	0x00030240

000d4a90 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <network_listening+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6a1b      	ldr	r3, [r3, #32]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030240 	.word	0x00030240

000d4aa0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <network_set_listen_timeout+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030240 	.word	0x00030240

000d4ab0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <network_get_listen_timeout+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030240 	.word	0x00030240

000d4ac0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <network_is_on+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030240 	.word	0x00030240

000d4ad0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <network_is_off+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	00030240 	.word	0x00030240

000d4ae0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <set_system_mode+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	685b      	ldr	r3, [r3, #4]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030220 	.word	0x00030220

000d4af0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <system_delay_ms+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	695b      	ldr	r3, [r3, #20]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030220 	.word	0x00030220

000d4b00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b03      	ldr	r3, [pc, #12]	; (d4b10 <system_ctrl_set_app_request_handler+0x10>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b0a:	9301      	str	r3, [sp, #4]
   d4b0c:	bd08      	pop	{r3, pc}
   d4b0e:	0000      	.short	0x0000
   d4b10:	00030220 	.word	0x00030220

000d4b14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b03      	ldr	r3, [pc, #12]	; (d4b24 <system_ctrl_set_result+0x10>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b1e:	9301      	str	r3, [sp, #4]
   d4b20:	bd08      	pop	{r3, pc}
   d4b22:	0000      	.short	0x0000
   d4b24:	00030220 	.word	0x00030220

000d4b28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <malloc+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	681b      	ldr	r3, [r3, #0]
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	0003021c 	.word	0x0003021c

000d4b38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <free+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	685b      	ldr	r3, [r3, #4]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	0003021c 	.word	0x0003021c

000d4b48 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <snprintf+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	69db      	ldr	r3, [r3, #28]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	0003021c 	.word	0x0003021c

000d4b58 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <vsnprintf+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003021c 	.word	0x0003021c

000d4b68 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <__errno+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	0003021c 	.word	0x0003021c

000d4b78 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <newlib_impure_ptr_callback+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	0003021c 	.word	0x0003021c

000d4b88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4b88:	2300      	movs	r3, #0
   d4b8a:	6840      	ldr	r0, [r0, #4]
   d4b8c:	461a      	mov	r2, r3
   d4b8e:	f7ff bf47 	b.w	d4a20 <network_connect>

000d4b92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4b92:	6840      	ldr	r0, [r0, #4]
   d4b94:	2200      	movs	r2, #0
   d4b96:	2102      	movs	r1, #2
   d4b98:	f7ff bf52 	b.w	d4a40 <network_disconnect>

000d4b9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4b9c:	2200      	movs	r2, #0
   d4b9e:	6840      	ldr	r0, [r0, #4]
   d4ba0:	4611      	mov	r1, r2
   d4ba2:	f7ff bf45 	b.w	d4a30 <network_connecting>

000d4ba6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4ba6:	2200      	movs	r2, #0
   d4ba8:	6840      	ldr	r0, [r0, #4]
   d4baa:	4611      	mov	r1, r2
   d4bac:	f7ff bf50 	b.w	d4a50 <network_ready>

000d4bb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4bb0:	2300      	movs	r3, #0
   d4bb2:	6840      	ldr	r0, [r0, #4]
   d4bb4:	461a      	mov	r2, r3
   d4bb6:	4619      	mov	r1, r3
   d4bb8:	f7ff bf52 	b.w	d4a60 <network_on>

000d4bbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4bbc:	2300      	movs	r3, #0
   d4bbe:	6840      	ldr	r0, [r0, #4]
   d4bc0:	461a      	mov	r2, r3
   d4bc2:	4619      	mov	r1, r3
   d4bc4:	f7ff bf54 	b.w	d4a70 <network_off>

000d4bc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4bc8:	6840      	ldr	r0, [r0, #4]
   d4bca:	2100      	movs	r1, #0
   d4bcc:	f7ff bf78 	b.w	d4ac0 <network_is_on>

000d4bd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4bd0:	6840      	ldr	r0, [r0, #4]
   d4bd2:	2100      	movs	r1, #0
   d4bd4:	f7ff bf7c 	b.w	d4ad0 <network_is_off>

000d4bd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4bd8:	6840      	ldr	r0, [r0, #4]
   d4bda:	2200      	movs	r2, #0
   d4bdc:	f081 0101 	eor.w	r1, r1, #1
   d4be0:	f7ff bf4e 	b.w	d4a80 <network_listen>

000d4be4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4be4:	6840      	ldr	r0, [r0, #4]
   d4be6:	2200      	movs	r2, #0
   d4be8:	f7ff bf5a 	b.w	d4aa0 <network_set_listen_timeout>

000d4bec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4bec:	2200      	movs	r2, #0
   d4bee:	6840      	ldr	r0, [r0, #4]
   d4bf0:	4611      	mov	r1, r2
   d4bf2:	f7ff bf5d 	b.w	d4ab0 <network_get_listen_timeout>

000d4bf6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4bf6:	2200      	movs	r2, #0
   d4bf8:	6840      	ldr	r0, [r0, #4]
   d4bfa:	4611      	mov	r1, r2
   d4bfc:	f7ff bf48 	b.w	d4a90 <network_listening>

000d4c00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4c04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4c06:	b095      	sub	sp, #84	; 0x54
   d4c08:	4616      	mov	r6, r2
   d4c0a:	460d      	mov	r5, r1
   d4c0c:	4607      	mov	r7, r0
    IPAddress addr;
   d4c0e:	f000 fd21 	bl	d5654 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4c12:	4621      	mov	r1, r4
   d4c14:	2218      	movs	r2, #24
   d4c16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4c18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4c1a:	f001 fcf7 	bl	d660c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4c1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4c20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4c24:	4621      	mov	r1, r4
   d4c26:	466b      	mov	r3, sp
   d4c28:	aa0c      	add	r2, sp, #48	; 0x30
   d4c2a:	4630      	mov	r0, r6
   d4c2c:	f7ff fee0 	bl	d49f0 <netdb_getaddrinfo>
    if (!r) {
   d4c30:	4604      	mov	r4, r0
   d4c32:	2800      	cmp	r0, #0
   d4c34:	d146      	bne.n	d4cc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c36:	4602      	mov	r2, r0
   d4c38:	2101      	movs	r1, #1
   d4c3a:	6868      	ldr	r0, [r5, #4]
   d4c3c:	f7ff ff08 	bl	d4a50 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c44:	4622      	mov	r2, r4
   d4c46:	6868      	ldr	r0, [r5, #4]
   d4c48:	f7ff ff02 	bl	d4a50 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c4e:	4681      	mov	r9, r0
        bool ok = false;
   d4c50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c52:	2e00      	cmp	r6, #0
   d4c54:	d036      	beq.n	d4cc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4c56:	2900      	cmp	r1, #0
   d4c58:	d134      	bne.n	d4cc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4c5a:	6873      	ldr	r3, [r6, #4]
   d4c5c:	2b02      	cmp	r3, #2
   d4c5e:	d003      	beq.n	d4c68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4c60:	2b0a      	cmp	r3, #10
   d4c62:	d00b      	beq.n	d4c7c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c64:	69f6      	ldr	r6, [r6, #28]
   d4c66:	e7f4      	b.n	d4c52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4c68:	f1b8 0f00 	cmp.w	r8, #0
   d4c6c:	d004      	beq.n	d4c78 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4c6e:	6971      	ldr	r1, [r6, #20]
   d4c70:	4638      	mov	r0, r7
   d4c72:	3104      	adds	r1, #4
   d4c74:	f000 fd31 	bl	d56da <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4c78:	4641      	mov	r1, r8
   d4c7a:	e7f3      	b.n	d4c64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4c7c:	f1b9 0f00 	cmp.w	r9, #0
   d4c80:	d101      	bne.n	d4c86 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4c82:	4649      	mov	r1, r9
   d4c84:	e7ee      	b.n	d4c64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4c86:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4c88:	2210      	movs	r2, #16
   d4c8a:	a801      	add	r0, sp, #4
   d4c8c:	f001 fcbe 	bl	d660c <memset>
                    a.v = 6;
   d4c90:	2306      	movs	r3, #6
   d4c92:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4c96:	ad01      	add	r5, sp, #4
   d4c98:	f104 0308 	add.w	r3, r4, #8
   d4c9c:	3418      	adds	r4, #24
   d4c9e:	6818      	ldr	r0, [r3, #0]
   d4ca0:	6859      	ldr	r1, [r3, #4]
   d4ca2:	462a      	mov	r2, r5
   d4ca4:	c203      	stmia	r2!, {r0, r1}
   d4ca6:	3308      	adds	r3, #8
   d4ca8:	42a3      	cmp	r3, r4
   d4caa:	4615      	mov	r5, r2
   d4cac:	d1f7      	bne.n	d4c9e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4cae:	a901      	add	r1, sp, #4
   d4cb0:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4cb2:	ad07      	add	r5, sp, #28
   d4cb4:	f000 fcdc 	bl	d5670 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4cba:	1d3c      	adds	r4, r7, #4
   d4cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4cbe:	682b      	ldr	r3, [r5, #0]
   d4cc0:	7023      	strb	r3, [r4, #0]
   d4cc2:	e7de      	b.n	d4c82 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4cc4:	9800      	ldr	r0, [sp, #0]
   d4cc6:	f7ff fe8b 	bl	d49e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4cca:	4638      	mov	r0, r7
   d4ccc:	b015      	add	sp, #84	; 0x54
   d4cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4cd4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cd4:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4cd6:	4a03      	ldr	r2, [pc, #12]	; (d4ce4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4cd8:	601a      	str	r2, [r3, #0]
   d4cda:	2200      	movs	r2, #0
   d4cdc:	605a      	str	r2, [r3, #4]

} // spark
   d4cde:	4770      	bx	lr
   d4ce0:	2003e5a8 	.word	0x2003e5a8
   d4ce4:	000d68dc 	.word	0x000d68dc

000d4ce8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4ce8:	2200      	movs	r2, #0
   d4cea:	6840      	ldr	r0, [r0, #4]
   d4cec:	4611      	mov	r1, r2
   d4cee:	f7ff beaf 	b.w	d4a50 <network_ready>

000d4cf2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	6840      	ldr	r0, [r0, #4]
   d4cf6:	4611      	mov	r1, r2
   d4cf8:	f7ff beca 	b.w	d4a90 <network_listening>

000d4cfc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4cfc:	2200      	movs	r2, #0
   d4cfe:	6840      	ldr	r0, [r0, #4]
   d4d00:	4611      	mov	r1, r2
   d4d02:	f7ff bed5 	b.w	d4ab0 <network_get_listen_timeout>

000d4d06 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d06:	6840      	ldr	r0, [r0, #4]
   d4d08:	2200      	movs	r2, #0
   d4d0a:	f7ff bec9 	b.w	d4aa0 <network_set_listen_timeout>

000d4d0e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	2200      	movs	r2, #0
   d4d12:	f081 0101 	eor.w	r1, r1, #1
   d4d16:	f7ff beb3 	b.w	d4a80 <network_listen>

000d4d1a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d1a:	2300      	movs	r3, #0
   d4d1c:	6840      	ldr	r0, [r0, #4]
   d4d1e:	461a      	mov	r2, r3
   d4d20:	4619      	mov	r1, r3
   d4d22:	f7ff bea5 	b.w	d4a70 <network_off>

000d4d26 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d26:	2300      	movs	r3, #0
   d4d28:	6840      	ldr	r0, [r0, #4]
   d4d2a:	461a      	mov	r2, r3
   d4d2c:	4619      	mov	r1, r3
   d4d2e:	f7ff be97 	b.w	d4a60 <network_on>

000d4d32 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d32:	2200      	movs	r2, #0
   d4d34:	6840      	ldr	r0, [r0, #4]
   d4d36:	4611      	mov	r1, r2
   d4d38:	f7ff be7a 	b.w	d4a30 <network_connecting>

000d4d3c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d3c:	6840      	ldr	r0, [r0, #4]
   d4d3e:	2200      	movs	r2, #0
   d4d40:	2102      	movs	r1, #2
   d4d42:	f7ff be7d 	b.w	d4a40 <network_disconnect>

000d4d46 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d46:	2300      	movs	r3, #0
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	461a      	mov	r2, r3
   d4d4c:	f7ff be68 	b.w	d4a20 <network_connect>

000d4d50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4d50:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4d52:	2204      	movs	r2, #4
   d4d54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4d56:	4a02      	ldr	r2, [pc, #8]	; (d4d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4d58:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4d5a:	4770      	bx	lr
   d4d5c:	2003e5b0 	.word	0x2003e5b0
   d4d60:	000d6918 	.word	0x000d6918

000d4d64 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d4d64:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d4d66:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d4d68:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d4d6c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d4d6e:	2201      	movs	r2, #1
   d4d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4d74:	f10d 0107 	add.w	r1, sp, #7
   d4d78:	47a0      	blx	r4
}
   d4d7a:	b002      	add	sp, #8
   d4d7c:	bd10      	pop	{r4, pc}

000d4d7e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d4d7e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d4d80:	6803      	ldr	r3, [r0, #0]
   d4d82:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d4d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4d88:	46a4      	mov	ip, r4
}
   d4d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d4d8e:	4760      	bx	ip

000d4d90 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d4d90:	b513      	push	{r0, r1, r4, lr}
   d4d92:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d4d94:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d4d96:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d4d9a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4d9c:	f10d 0107 	add.w	r1, sp, #7
   d4da0:	2201      	movs	r2, #1
   d4da2:	47a0      	blx	r4
}
   d4da4:	b002      	add	sp, #8
   d4da6:	bd10      	pop	{r4, pc}

000d4da8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d4da8:	4770      	bx	lr

000d4daa <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d4daa:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4dac:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d4dae:	681a      	ldr	r2, [r3, #0]
   d4db0:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d4db2:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d4db4:	da10      	bge.n	d4dd8 <_ZN9TCPClient9connectedEv+0x2e>
   d4db6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d4dba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d4dbe:	429a      	cmp	r2, r3
   d4dc0:	d10a      	bne.n	d4dd8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d4dc2:	6803      	ldr	r3, [r0, #0]
   d4dc4:	691b      	ldr	r3, [r3, #16]
   d4dc6:	4798      	blx	r3
        if (!rv) {
   d4dc8:	4604      	mov	r4, r0
   d4dca:	b928      	cbnz	r0, d4dd8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d4dcc:	682b      	ldr	r3, [r5, #0]
   d4dce:	4628      	mov	r0, r5
   d4dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dd2:	4798      	blx	r3
        rv = available();
   d4dd4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d4dd6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d4dd8:	2001      	movs	r0, #1
   d4dda:	e7fc      	b.n	d4dd6 <_ZN9TCPClient9connectedEv+0x2c>

000d4ddc <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d4ddc:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d4dde:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d4de0:	43c0      	mvns	r0, r0
   d4de2:	0fc0      	lsrs	r0, r0, #31
   d4de4:	4770      	bx	lr

000d4de6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4de6:	4770      	bx	lr

000d4de8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4de8:	4b06      	ldr	r3, [pc, #24]	; (d4e04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4dea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4dec:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4dee:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4df2:	d005      	beq.n	d4e00 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4df4:	4608      	mov	r0, r1
   d4df6:	f000 fec5 	bl	d5b84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4dfa:	2800      	cmp	r0, #0
	return nullptr;
   d4dfc:	bf08      	it	eq
   d4dfe:	2400      	moveq	r4, #0
      }
   d4e00:	4620      	mov	r0, r4
   d4e02:	bd10      	pop	{r4, pc}
   d4e04:	000d6980 	.word	0x000d6980

000d4e08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e08:	b510      	push	{r4, lr}
   d4e0a:	21ac      	movs	r1, #172	; 0xac
   d4e0c:	4604      	mov	r4, r0
   d4e0e:	f000 feb5 	bl	d5b7c <_ZdlPvj>
   d4e12:	4620      	mov	r0, r4
   d4e14:	bd10      	pop	{r4, pc}

000d4e16 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4e16:	f7ff b940 	b.w	d409a <_ZdlPv>

000d4e1a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d4e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d4e1e:	f04f 0800 	mov.w	r8, #0
   d4e22:	b086      	sub	sp, #24
   d4e24:	461d      	mov	r5, r3
   d4e26:	f8c0 8004 	str.w	r8, [r0, #4]
   d4e2a:	4604      	mov	r4, r0
   d4e2c:	460e      	mov	r6, r1
   d4e2e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d4e30:	4641      	mov	r1, r8
   d4e32:	2210      	movs	r2, #16
   d4e34:	a802      	add	r0, sp, #8
   d4e36:	f001 fbe9 	bl	d660c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d4e3a:	1c6b      	adds	r3, r5, #1
   d4e3c:	d009      	beq.n	d4e52 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d4e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4e42:	fbb5 f3f0 	udiv	r3, r5, r0
   d4e46:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d4e4a:	fb00 5313 	mls	r3, r0, r3, r5
   d4e4e:	4358      	muls	r0, r3
   d4e50:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d4e52:	6960      	ldr	r0, [r4, #20]
   d4e54:	2310      	movs	r3, #16
   d4e56:	9300      	str	r3, [sp, #0]
   d4e58:	6800      	ldr	r0, [r0, #0]
   d4e5a:	ab02      	add	r3, sp, #8
   d4e5c:	f241 0205 	movw	r2, #4101	; 0x1005
   d4e60:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4e64:	f7ff fcfc 	bl	d4860 <sock_setsockopt>
    if (ret < 0) {
   d4e68:	2800      	cmp	r0, #0
   d4e6a:	da07      	bge.n	d4e7c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d4e6c:	f7ff fe7c 	bl	d4b68 <__errno>
   d4e70:	6803      	ldr	r3, [r0, #0]
   d4e72:	6063      	str	r3, [r4, #4]
        return 0;
   d4e74:	2000      	movs	r0, #0
}
   d4e76:	b006      	add	sp, #24
   d4e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d4e7c:	6960      	ldr	r0, [r4, #20]
   d4e7e:	2300      	movs	r3, #0
   d4e80:	6800      	ldr	r0, [r0, #0]
   d4e82:	463a      	mov	r2, r7
   d4e84:	4631      	mov	r1, r6
   d4e86:	f7ff fd0b 	bl	d48a0 <sock_send>
    if (ret < 0) {
   d4e8a:	1e03      	subs	r3, r0, #0
   d4e8c:	dbee      	blt.n	d4e6c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d4e8e:	4618      	mov	r0, r3
   d4e90:	e7f1      	b.n	d4e76 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d4e94 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4e94:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4e96:	6984      	ldr	r4, [r0, #24]
   d4e98:	4b0a      	ldr	r3, [pc, #40]	; (d4ec4 <_ZN9TCPClientD1Ev+0x30>)
   d4e9a:	6003      	str	r3, [r0, #0]
   d4e9c:	4605      	mov	r5, r0
   d4e9e:	b17c      	cbz	r4, d4ec0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4ea0:	6863      	ldr	r3, [r4, #4]
   d4ea2:	3b01      	subs	r3, #1
   d4ea4:	6063      	str	r3, [r4, #4]
   d4ea6:	b95b      	cbnz	r3, d4ec0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d4ea8:	6823      	ldr	r3, [r4, #0]
   d4eaa:	4620      	mov	r0, r4
   d4eac:	689b      	ldr	r3, [r3, #8]
   d4eae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4eb0:	68a3      	ldr	r3, [r4, #8]
   d4eb2:	3b01      	subs	r3, #1
   d4eb4:	60a3      	str	r3, [r4, #8]
   d4eb6:	b91b      	cbnz	r3, d4ec0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4eb8:	6823      	ldr	r3, [r4, #0]
   d4eba:	4620      	mov	r0, r4
   d4ebc:	68db      	ldr	r3, [r3, #12]
   d4ebe:	4798      	blx	r3
   d4ec0:	4628      	mov	r0, r5
   d4ec2:	bd38      	pop	{r3, r4, r5, pc}
   d4ec4:	000d6990 	.word	0x000d6990

000d4ec8 <_ZN9TCPClientD0Ev>:
   d4ec8:	b510      	push	{r4, lr}
   d4eca:	4604      	mov	r4, r0
   d4ecc:	f7ff ffe2 	bl	d4e94 <_ZN9TCPClientD1Ev>
   d4ed0:	4620      	mov	r0, r4
   d4ed2:	211c      	movs	r1, #28
   d4ed4:	f000 fe52 	bl	d5b7c <_ZdlPvj>
   d4ed8:	4620      	mov	r0, r4
   d4eda:	bd10      	pop	{r4, pc}

000d4edc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d4edc:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4ede:	694d      	ldr	r5, [r1, #20]
   d4ee0:	4b05      	ldr	r3, [pc, #20]	; (d4ef8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d4ee2:	4604      	mov	r4, r0
   d4ee4:	358c      	adds	r5, #140	; 0x8c
   d4ee6:	f844 3b04 	str.w	r3, [r4], #4
   d4eea:	4606      	mov	r6, r0
   d4eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ef0:	682b      	ldr	r3, [r5, #0]
   d4ef2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d4ef4:	4630      	mov	r0, r6
   d4ef6:	bd70      	pop	{r4, r5, r6, pc}
   d4ef8:	000d6a64 	.word	0x000d6a64

000d4efc <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d4efc:	b510      	push	{r4, lr}
   d4efe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d4f00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d4f04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d4f08:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d4f0a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d4f0c:	d005      	beq.n	d4f1a <_ZN9TCPClient4peekEv+0x1e>
   d4f0e:	6963      	ldr	r3, [r4, #20]
   d4f10:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d4f14:	4413      	add	r3, r2
   d4f16:	7918      	ldrb	r0, [r3, #4]
}
   d4f18:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d4f1a:	6803      	ldr	r3, [r0, #0]
   d4f1c:	691b      	ldr	r3, [r3, #16]
   d4f1e:	4798      	blx	r3
   d4f20:	2800      	cmp	r0, #0
   d4f22:	d1f4      	bne.n	d4f0e <_ZN9TCPClient4peekEv+0x12>
   d4f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4f28:	e7f6      	b.n	d4f18 <_ZN9TCPClient4peekEv+0x1c>

000d4f2a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d4f2a:	b510      	push	{r4, lr}
   d4f2c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d4f2e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d4f32:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d4f36:	429a      	cmp	r2, r3
int TCPClient::read() {
   d4f38:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d4f3a:	d008      	beq.n	d4f4e <_ZN9TCPClient4readEv+0x24>
   d4f3c:	6963      	ldr	r3, [r4, #20]
   d4f3e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d4f42:	1c51      	adds	r1, r2, #1
   d4f44:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d4f48:	4413      	add	r3, r2
   d4f4a:	7918      	ldrb	r0, [r3, #4]
}
   d4f4c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d4f4e:	6803      	ldr	r3, [r0, #0]
   d4f50:	691b      	ldr	r3, [r3, #16]
   d4f52:	4798      	blx	r3
   d4f54:	2800      	cmp	r0, #0
   d4f56:	d1f1      	bne.n	d4f3c <_ZN9TCPClient4readEv+0x12>
   d4f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4f5c:	e7f6      	b.n	d4f4c <_ZN9TCPClient4readEv+0x22>

000d4f5e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d4f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f60:	6943      	ldr	r3, [r0, #20]
   d4f62:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d4f64:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d4f68:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d4f6c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d4f6e:	4605      	mov	r5, r0
   d4f70:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d4f72:	d016      	beq.n	d4fa2 <_ZN9TCPClient4readEPhj+0x44>
   d4f74:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d4f76:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d4f7a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d4f7e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d4f80:	42bc      	cmp	r4, r7
   d4f82:	bf28      	it	cs
   d4f84:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d4f86:	3304      	adds	r3, #4
   d4f88:	4622      	mov	r2, r4
   d4f8a:	4419      	add	r1, r3
   d4f8c:	4630      	mov	r0, r6
   d4f8e:	f001 fb2f 	bl	d65f0 <memcpy>
   d4f92:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d4f94:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d4f98:	4423      	add	r3, r4
   d4f9a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d4fa2:	6803      	ldr	r3, [r0, #0]
   d4fa4:	691b      	ldr	r3, [r3, #16]
   d4fa6:	4798      	blx	r3
   d4fa8:	2800      	cmp	r0, #0
   d4faa:	d1e3      	bne.n	d4f74 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d4fac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d4fb0:	e7f5      	b.n	d4f9e <_ZN9TCPClient4readEPhj+0x40>
	...

000d4fb4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d4fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4fb8:	4698      	mov	r8, r3
    stop();
   d4fba:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d4fbc:	b093      	sub	sp, #76	; 0x4c
   d4fbe:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d4fc0:	2400      	movs	r4, #0
    stop();
   d4fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d4fc4:	4606      	mov	r6, r0
   d4fc6:	4617      	mov	r7, r2
    stop();
   d4fc8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d4fca:	4628      	mov	r0, r5
   d4fcc:	466b      	mov	r3, sp
   d4fce:	4622      	mov	r2, r4
   d4fd0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d4fd2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d4fd4:	f7ff fd0c 	bl	d49f0 <netdb_getaddrinfo>
   d4fd8:	4605      	mov	r5, r0
   d4fda:	2800      	cmp	r0, #0
   d4fdc:	d163      	bne.n	d50a6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d4fde:	9b00      	ldr	r3, [sp, #0]
   d4fe0:	2b00      	cmp	r3, #0
   d4fe2:	d04b      	beq.n	d507c <_ZN9TCPClient7connectEPKctm+0xc8>
   d4fe4:	695b      	ldr	r3, [r3, #20]
   d4fe6:	2b00      	cmp	r3, #0
   d4fe8:	d048      	beq.n	d507c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d4fea:	a806      	add	r0, sp, #24
   d4fec:	f000 fb32 	bl	d5654 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d4ff0:	9b00      	ldr	r3, [sp, #0]
   d4ff2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d4ff4:	7863      	ldrb	r3, [r4, #1]
   d4ff6:	2b02      	cmp	r3, #2
   d4ff8:	d104      	bne.n	d5004 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d4ffa:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d4ffc:	a806      	add	r0, sp, #24
   d4ffe:	f000 fb6c 	bl	d56da <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d5002:	e026      	b.n	d5052 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d5004:	2b0a      	cmp	r3, #10
   d5006:	d124      	bne.n	d5052 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d5008:	2211      	movs	r2, #17
   d500a:	4629      	mov	r1, r5
   d500c:	a801      	add	r0, sp, #4
   d500e:	f001 fafd 	bl	d660c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5012:	68a3      	ldr	r3, [r4, #8]
   d5014:	2b00      	cmp	r3, #0
   d5016:	d038      	beq.n	d508a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5018:	f104 0308 	add.w	r3, r4, #8
   d501c:	f10d 0c04 	add.w	ip, sp, #4
   d5020:	3418      	adds	r4, #24
   d5022:	6818      	ldr	r0, [r3, #0]
   d5024:	6859      	ldr	r1, [r3, #4]
   d5026:	4662      	mov	r2, ip
   d5028:	c203      	stmia	r2!, {r0, r1}
   d502a:	3308      	adds	r3, #8
   d502c:	42a3      	cmp	r3, r4
   d502e:	4694      	mov	ip, r2
   d5030:	d1f7      	bne.n	d5022 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d5032:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5034:	a901      	add	r1, sp, #4
   d5036:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d5038:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d503c:	f000 fb18 	bl	d5670 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5040:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d5044:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5048:	ac07      	add	r4, sp, #28
   d504a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d504c:	f8dc 3000 	ldr.w	r3, [ip]
   d5050:	7023      	strb	r3, [r4, #0]
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5052:	a806      	add	r0, sp, #24
   d5054:	f000 fb1e 	bl	d5694 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5058:	b180      	cbz	r0, d507c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d505a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d505c:	ad07      	add	r5, sp, #28
   d505e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5062:	4b12      	ldr	r3, [pc, #72]	; (d50ac <_ZN9TCPClient7connectEPKctm+0xf8>)
   d5064:	930c      	str	r3, [sp, #48]	; 0x30
   d5066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5068:	ac0d      	add	r4, sp, #52	; 0x34
   d506a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d506c:	682b      	ldr	r3, [r5, #0]
   d506e:	7023      	strb	r3, [r4, #0]
   d5070:	463a      	mov	r2, r7
   d5072:	4643      	mov	r3, r8
   d5074:	a90c      	add	r1, sp, #48	; 0x30
   d5076:	4630      	mov	r0, r6
   d5078:	47c8      	blx	r9
   d507a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d507c:	9800      	ldr	r0, [sp, #0]
   d507e:	f7ff fcaf 	bl	d49e0 <netdb_freeaddrinfo>
}
   d5082:	4628      	mov	r0, r5
   d5084:	b013      	add	sp, #76	; 0x4c
   d5086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d508a:	68e3      	ldr	r3, [r4, #12]
   d508c:	2b00      	cmp	r3, #0
   d508e:	d1c3      	bne.n	d5018 <_ZN9TCPClient7connectEPKctm+0x64>
   d5090:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5094:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d5098:	f7ff fc5a 	bl	d4950 <inet_htonl>
   d509c:	4581      	cmp	r9, r0
   d509e:	d1bb      	bne.n	d5018 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d50a0:	f104 0114 	add.w	r1, r4, #20
   d50a4:	e7aa      	b.n	d4ffc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d50a6:	4625      	mov	r5, r4
   d50a8:	e7e8      	b.n	d507c <_ZN9TCPClient7connectEPKctm+0xc8>
   d50aa:	bf00      	nop
   d50ac:	000d6a64 	.word	0x000d6a64

000d50b0 <_ZN9TCPClient12flush_bufferEv>:
   d50b0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d50b2:	2300      	movs	r3, #0
   d50b4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d50b8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d50ba:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d50be:	4770      	bx	lr

000d50c0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d50c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d50c4:	461f      	mov	r7, r3
    stop();
   d50c6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d50c8:	460c      	mov	r4, r1
    stop();
   d50ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d50cc:	b08a      	sub	sp, #40	; 0x28
   d50ce:	4605      	mov	r5, r0
   d50d0:	4616      	mov	r6, r2
    stop();
   d50d2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d50d4:	7d23      	ldrb	r3, [r4, #20]
   d50d6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d50da:	2b04      	cmp	r3, #4
   d50dc:	bf0c      	ite	eq
   d50de:	2002      	moveq	r0, #2
   d50e0:	200a      	movne	r0, #10
   d50e2:	2206      	movs	r2, #6
   d50e4:	2101      	movs	r1, #1
   d50e6:	f7ff fbe3 	bl	d48b0 <sock_socket>
   d50ea:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d50ee:	696b      	ldr	r3, [r5, #20]
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	2b00      	cmp	r3, #0
   d50f4:	da08      	bge.n	d5108 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d50f6:	682b      	ldr	r3, [r5, #0]
   d50f8:	4628      	mov	r0, r5
   d50fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d50fc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d50fe:	4798      	blx	r3
}
   d5100:	4620      	mov	r0, r4
   d5102:	b00a      	add	sp, #40	; 0x28
   d5104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d5108:	4628      	mov	r0, r5
   d510a:	f7ff ffd1 	bl	d50b0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d510e:	b1b7      	cbz	r7, d513e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d5110:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5112:	a903      	add	r1, sp, #12
   d5114:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d5116:	9303      	str	r3, [sp, #12]
   d5118:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d511c:	f7ff fc40 	bl	d49a0 <if_index_to_name>
   d5120:	2800      	cmp	r0, #0
   d5122:	d1e8      	bne.n	d50f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5124:	6968      	ldr	r0, [r5, #20]
   d5126:	2306      	movs	r3, #6
   d5128:	9300      	str	r3, [sp, #0]
   d512a:	6800      	ldr	r0, [r0, #0]
   d512c:	ab03      	add	r3, sp, #12
   d512e:	f241 020b 	movw	r2, #4107	; 0x100b
   d5132:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5136:	f7ff fb93 	bl	d4860 <sock_setsockopt>
   d513a:	2800      	cmp	r0, #0
   d513c:	d1db      	bne.n	d50f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d513e:	221c      	movs	r2, #28
   d5140:	2100      	movs	r1, #0
   d5142:	a803      	add	r0, sp, #12
   d5144:	f001 fa62 	bl	d660c <memset>
    if (ip.version() == 4) {
   d5148:	7d23      	ldrb	r3, [r4, #20]
   d514a:	2b04      	cmp	r3, #4
   d514c:	d11d      	bne.n	d518a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d514e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d5152:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5154:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5158:	f7ff fc02 	bl	d4960 <inet_htons>
   d515c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5160:	6860      	ldr	r0, [r4, #4]
   d5162:	f7ff fbf5 	bl	d4950 <inet_htonl>
   d5166:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5168:	696b      	ldr	r3, [r5, #20]
   d516a:	221c      	movs	r2, #28
   d516c:	6818      	ldr	r0, [r3, #0]
   d516e:	a903      	add	r1, sp, #12
   d5170:	f7ff fb86 	bl	d4880 <sock_connect>
   d5174:	2800      	cmp	r0, #0
   d5176:	d1be      	bne.n	d50f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d5178:	3404      	adds	r4, #4
   d517a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d517c:	696d      	ldr	r5, [r5, #20]
   d517e:	358c      	adds	r5, #140	; 0x8c
   d5180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5182:	6823      	ldr	r3, [r4, #0]
   d5184:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d5186:	2401      	movs	r4, #1
   d5188:	e7ba      	b.n	d5100 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d518a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d518e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d5190:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d5194:	f7ff fbe4 	bl	d4960 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5198:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d519a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d519e:	1d23      	adds	r3, r4, #4
   d51a0:	f104 0714 	add.w	r7, r4, #20
   d51a4:	6818      	ldr	r0, [r3, #0]
   d51a6:	6859      	ldr	r1, [r3, #4]
   d51a8:	4632      	mov	r2, r6
   d51aa:	c203      	stmia	r2!, {r0, r1}
   d51ac:	3308      	adds	r3, #8
   d51ae:	42bb      	cmp	r3, r7
   d51b0:	4616      	mov	r6, r2
   d51b2:	d1f7      	bne.n	d51a4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d51b4:	e7d8      	b.n	d5168 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d51b8 <_ZN9TCPClient9availableEv>:
{
   d51b8:	b530      	push	{r4, r5, lr}
   d51ba:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d51bc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d51c0:	b08b      	sub	sp, #44	; 0x2c
   d51c2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d51c4:	b12b      	cbz	r3, d51d2 <_ZN9TCPClient9availableEv+0x1a>
   d51c6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d51ca:	429a      	cmp	r2, r3
   d51cc:	d101      	bne.n	d51d2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d51ce:	f7ff ff6f 	bl	d50b0 <_ZN9TCPClient12flush_bufferEv>
   d51d2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d51d4:	6808      	ldr	r0, [r1, #0]
   d51d6:	2800      	cmp	r0, #0
   d51d8:	db18      	blt.n	d520c <_ZN9TCPClient9availableEv+0x54>
   d51da:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d51de:	2d7f      	cmp	r5, #127	; 0x7f
   d51e0:	d814      	bhi.n	d520c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d51e2:	3104      	adds	r1, #4
   d51e4:	2308      	movs	r3, #8
   d51e6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d51ea:	4429      	add	r1, r5
   d51ec:	f7ff fb50 	bl	d4890 <sock_recv>
            if (ret > 0) {
   d51f0:	2800      	cmp	r0, #0
   d51f2:	dd13      	ble.n	d521c <_ZN9TCPClient9availableEv+0x64>
   d51f4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d51f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d51fa:	b90a      	cbnz	r2, d5200 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d51fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5200:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d5202:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5206:	4410      	add	r0, r2
   d5208:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d520c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d520e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d5212:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d5216:	1ac0      	subs	r0, r0, r3
   d5218:	b00b      	add	sp, #44	; 0x2c
   d521a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d521c:	f7ff fca4 	bl	d4b68 <__errno>
   d5220:	6803      	ldr	r3, [r0, #0]
   d5222:	2b0b      	cmp	r3, #11
   d5224:	d0f2      	beq.n	d520c <_ZN9TCPClient9availableEv+0x54>
   d5226:	f7ff fc9f 	bl	d4b68 <__errno>
   d522a:	6803      	ldr	r3, [r0, #0]
   d522c:	2b0b      	cmp	r3, #11
   d522e:	d0ed      	beq.n	d520c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d5230:	2320      	movs	r3, #32
   d5232:	2500      	movs	r5, #0
   d5234:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d5238:	f7ff fc96 	bl	d4b68 <__errno>
   d523c:	6803      	ldr	r3, [r0, #0]
   d523e:	9301      	str	r3, [sp, #4]
   d5240:	4b08      	ldr	r3, [pc, #32]	; (d5264 <_ZN9TCPClient9availableEv+0xac>)
   d5242:	4909      	ldr	r1, [pc, #36]	; (d5268 <_ZN9TCPClient9availableEv+0xb0>)
   d5244:	9300      	str	r3, [sp, #0]
   d5246:	aa02      	add	r2, sp, #8
   d5248:	462b      	mov	r3, r5
   d524a:	2032      	movs	r0, #50	; 0x32
   d524c:	f7ff fbd8 	bl	d4a00 <log_message>
                    sock_close(d_->sock);
   d5250:	6963      	ldr	r3, [r4, #20]
   d5252:	6818      	ldr	r0, [r3, #0]
   d5254:	f7ff fb0c 	bl	d4870 <sock_close>
   d5258:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d525a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d525e:	601a      	str	r2, [r3, #0]
   d5260:	e7d4      	b.n	d520c <_ZN9TCPClient9availableEv+0x54>
   d5262:	bf00      	nop
   d5264:	000d6953 	.word	0x000d6953
   d5268:	000d694c 	.word	0x000d694c

000d526c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d526c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d526e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d5270:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5272:	6818      	ldr	r0, [r3, #0]
   d5274:	2800      	cmp	r0, #0
   d5276:	db01      	blt.n	d527c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5278:	f7ff fafa 	bl	d4870 <sock_close>
   d527c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d527e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5282:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5284:	6960      	ldr	r0, [r4, #20]
   d5286:	2211      	movs	r2, #17
   d5288:	2100      	movs	r1, #0
   d528a:	308c      	adds	r0, #140	; 0x8c
   d528c:	f001 f9be 	bl	d660c <memset>
    flush_buffer();
   d5290:	4620      	mov	r0, r4
}
   d5292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d5296:	f7ff bf0b 	b.w	d50b0 <_ZN9TCPClient12flush_bufferEv>

000d529a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d529a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d529c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d529e:	4604      	mov	r4, r0
          total(0) {
   d52a0:	6001      	str	r1, [r0, #0]
   d52a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d52a6:	3088      	adds	r0, #136	; 0x88
   d52a8:	f000 f9d4 	bl	d5654 <_ZN9IPAddressC1Ev>
}
   d52ac:	4620      	mov	r0, r4
   d52ae:	bd10      	pop	{r4, pc}

000d52b0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d52b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d52b2:	2300      	movs	r3, #0
   d52b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52b8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d52bc:	4a0e      	ldr	r2, [pc, #56]	; (d52f8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d52be:	6103      	str	r3, [r0, #16]
   d52c0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d52c2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d52c4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d52c6:	20ac      	movs	r0, #172	; 0xac
   d52c8:	9101      	str	r1, [sp, #4]
   d52ca:	f7fe fee2 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d52ce:	1e05      	subs	r5, r0, #0
   d52d0:	f105 060c 	add.w	r6, r5, #12
   d52d4:	d008      	beq.n	d52e8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d52d6:	2301      	movs	r3, #1
   d52d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d52dc:	4b07      	ldr	r3, [pc, #28]	; (d52fc <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d52de:	9901      	ldr	r1, [sp, #4]
   d52e0:	602b      	str	r3, [r5, #0]
   d52e2:	4630      	mov	r0, r6
   d52e4:	f7ff ffd9 	bl	d529a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d52e8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d52ea:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d52ee:	f7ff fedf 	bl	d50b0 <_ZN9TCPClient12flush_bufferEv>
}
   d52f2:	b002      	add	sp, #8
   d52f4:	bd70      	pop	{r4, r5, r6, pc}
   d52f6:	bf00      	nop
   d52f8:	000d6990 	.word	0x000d6990
   d52fc:	000d696c 	.word	0x000d696c

000d5300 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d5300:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d5302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d5306:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d5308:	f7ff ffd2 	bl	d52b0 <_ZN9TCPClientC1Ei>
}
   d530c:	4620      	mov	r0, r4
   d530e:	bd10      	pop	{r4, pc}

000d5310 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d5310:	b510      	push	{r4, lr}
   d5312:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5314:	6800      	ldr	r0, [r0, #0]
   d5316:	2800      	cmp	r0, #0
   d5318:	db01      	blt.n	d531e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d531a:	f7ff faa9 	bl	d4870 <sock_close>
    }
}
   d531e:	4620      	mov	r0, r4
   d5320:	bd10      	pop	{r4, pc}

000d5322 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d5322:	300c      	adds	r0, #12
   d5324:	f7ff bff4 	b.w	d5310 <_ZN9TCPClient4DataD1Ev>

000d5328 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5328:	b510      	push	{r4, lr}
   d532a:	4604      	mov	r4, r0
   d532c:	4608      	mov	r0, r1
{
    _spi = spi;
   d532e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5330:	f7ff fa86 	bl	d4840 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5334:	2300      	movs	r3, #0
   d5336:	6063      	str	r3, [r4, #4]
}
   d5338:	4620      	mov	r0, r4
   d533a:	bd10      	pop	{r4, pc}

000d533c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d533c:	b510      	push	{r4, lr}
  if (0 == max) {
   d533e:	4604      	mov	r4, r0
   d5340:	b128      	cbz	r0, d534e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d5342:	f001 f98f 	bl	d6664 <rand>
   d5346:	fb90 f3f4 	sdiv	r3, r0, r4
   d534a:	fb03 0414 	mls	r4, r3, r4, r0
}
   d534e:	4620      	mov	r0, r4
   d5350:	bd10      	pop	{r4, pc}

000d5352 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d5352:	4288      	cmp	r0, r1
{
   d5354:	b510      	push	{r4, lr}
   d5356:	4604      	mov	r4, r0
  if (min >= max) {
   d5358:	da03      	bge.n	d5362 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d535a:	1a08      	subs	r0, r1, r0
   d535c:	f7ff ffee 	bl	d533c <_Z6randomi>
   d5360:	4404      	add	r4, r0
}
   d5362:	4620      	mov	r0, r4
   d5364:	bd10      	pop	{r4, pc}

000d5366 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5366:	4770      	bx	lr

000d5368 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d536a:	4606      	mov	r6, r0
   d536c:	4615      	mov	r5, r2
   d536e:	460c      	mov	r4, r1
   d5370:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5372:	42bc      	cmp	r4, r7
   d5374:	d006      	beq.n	d5384 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5376:	6833      	ldr	r3, [r6, #0]
   d5378:	f814 1b01 	ldrb.w	r1, [r4], #1
   d537c:	689b      	ldr	r3, [r3, #8]
   d537e:	4630      	mov	r0, r6
   d5380:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5382:	e7f6      	b.n	d5372 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5384:	4628      	mov	r0, r5
   d5386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5388 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5388:	7c00      	ldrb	r0, [r0, #16]
   d538a:	2200      	movs	r2, #0
   d538c:	f7ff ba20 	b.w	d47d0 <hal_i2c_write>

000d5390 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5390:	7c00      	ldrb	r0, [r0, #16]
   d5392:	2100      	movs	r1, #0
   d5394:	f7ff ba24 	b.w	d47e0 <hal_i2c_available>

000d5398 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5398:	7c00      	ldrb	r0, [r0, #16]
   d539a:	2100      	movs	r1, #0
   d539c:	f7ff ba28 	b.w	d47f0 <hal_i2c_read>

000d53a0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53a0:	7c00      	ldrb	r0, [r0, #16]
   d53a2:	2100      	movs	r1, #0
   d53a4:	f7ff ba2c 	b.w	d4800 <hal_i2c_peek>

000d53a8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d53a8:	7c00      	ldrb	r0, [r0, #16]
   d53aa:	2100      	movs	r1, #0
   d53ac:	f7ff ba30 	b.w	d4810 <hal_i2c_flush>

000d53b0 <_ZN7TwoWireD0Ev>:
   d53b0:	b510      	push	{r4, lr}
   d53b2:	2114      	movs	r1, #20
   d53b4:	4604      	mov	r4, r0
   d53b6:	f000 fbe1 	bl	d5b7c <_ZdlPvj>
   d53ba:	4620      	mov	r0, r4
   d53bc:	bd10      	pop	{r4, pc}
	...

000d53c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d53c0:	b510      	push	{r4, lr}
   d53c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53c6:	4604      	mov	r4, r0
   d53c8:	4608      	mov	r0, r1
   d53ca:	2100      	movs	r1, #0
   d53cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d53d0:	4b03      	ldr	r3, [pc, #12]	; (d53e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d53d2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d53d4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d53d6:	4611      	mov	r1, r2
   d53d8:	f7ff fa2a 	bl	d4830 <hal_i2c_init>
}
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}
   d53e0:	000d69dc 	.word	0x000d69dc

000d53e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d53e4:	4770      	bx	lr

000d53e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53e6:	7441      	strb	r1, [r0, #17]
}
   d53e8:	4770      	bx	lr

000d53ea <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d53ea:	4770      	bx	lr

000d53ec <_ZN11USARTSerial17availableForWriteEv>:
{
   d53ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d53ee:	7c00      	ldrb	r0, [r0, #16]
   d53f0:	f7ff fa9e 	bl	d4930 <hal_usart_available_data_for_write>
}
   d53f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d53f8:	bd08      	pop	{r3, pc}

000d53fa <_ZN11USARTSerial9availableEv>:
{
   d53fa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d53fc:	7c00      	ldrb	r0, [r0, #16]
   d53fe:	f7ff fa6f 	bl	d48e0 <hal_usart_available>
}
   d5402:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5406:	bd08      	pop	{r3, pc}

000d5408 <_ZN11USARTSerial4peekEv>:
{
   d5408:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d540a:	7c00      	ldrb	r0, [r0, #16]
   d540c:	f7ff fa78 	bl	d4900 <hal_usart_peek>
}
   d5410:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5414:	bd08      	pop	{r3, pc}

000d5416 <_ZN11USARTSerial4readEv>:
{
   d5416:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5418:	7c00      	ldrb	r0, [r0, #16]
   d541a:	f7ff fa69 	bl	d48f0 <hal_usart_read>
}
   d541e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5422:	bd08      	pop	{r3, pc}

000d5424 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5424:	7c00      	ldrb	r0, [r0, #16]
   d5426:	f7ff ba73 	b.w	d4910 <hal_usart_flush>

000d542a <_ZN11USARTSerial5writeEh>:
{
   d542a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d542c:	7c45      	ldrb	r5, [r0, #17]
{
   d542e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5430:	b12d      	cbz	r5, d543e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d5432:	7c20      	ldrb	r0, [r4, #16]
}
   d5434:	b003      	add	sp, #12
   d5436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d543a:	f7ff ba49 	b.w	d48d0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d543e:	7c00      	ldrb	r0, [r0, #16]
   d5440:	9101      	str	r1, [sp, #4]
   d5442:	f7ff fa75 	bl	d4930 <hal_usart_available_data_for_write>
   d5446:	2800      	cmp	r0, #0
   d5448:	9901      	ldr	r1, [sp, #4]
   d544a:	dcf2      	bgt.n	d5432 <_ZN11USARTSerial5writeEh+0x8>
}
   d544c:	4628      	mov	r0, r5
   d544e:	b003      	add	sp, #12
   d5450:	bd30      	pop	{r4, r5, pc}

000d5452 <_ZN11USARTSerialD0Ev>:
   d5452:	b510      	push	{r4, lr}
   d5454:	2114      	movs	r1, #20
   d5456:	4604      	mov	r4, r0
   d5458:	f000 fb90 	bl	d5b7c <_ZdlPvj>
   d545c:	4620      	mov	r0, r4
   d545e:	bd10      	pop	{r4, pc}

000d5460 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5460:	b510      	push	{r4, lr}
   d5462:	f04f 0c00 	mov.w	ip, #0
   d5466:	4604      	mov	r4, r0
   d5468:	4608      	mov	r0, r1
   d546a:	4611      	mov	r1, r2
   d546c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5470:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5474:	4a04      	ldr	r2, [pc, #16]	; (d5488 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5476:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5478:	2201      	movs	r2, #1
  _serial = serial;
   d547a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d547c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d547e:	461a      	mov	r2, r3
   d5480:	f7ff fa1e 	bl	d48c0 <hal_usart_init>
}
   d5484:	4620      	mov	r0, r4
   d5486:	bd10      	pop	{r4, pc}
   d5488:	000d6a04 	.word	0x000d6a04

000d548c <_Z22__fetch_global_Serial1v>:
{
   d548c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d548e:	4c0d      	ldr	r4, [pc, #52]	; (d54c4 <_Z22__fetch_global_Serial1v+0x38>)
   d5490:	7821      	ldrb	r1, [r4, #0]
   d5492:	f3bf 8f5b 	dmb	ish
   d5496:	f011 0101 	ands.w	r1, r1, #1
   d549a:	d110      	bne.n	d54be <_Z22__fetch_global_Serial1v+0x32>
   d549c:	4620      	mov	r0, r4
   d549e:	9101      	str	r1, [sp, #4]
   d54a0:	f7fe fdfd 	bl	d409e <__cxa_guard_acquire>
   d54a4:	9901      	ldr	r1, [sp, #4]
   d54a6:	b150      	cbz	r0, d54be <_Z22__fetch_global_Serial1v+0x32>
   d54a8:	4b07      	ldr	r3, [pc, #28]	; (d54c8 <_Z22__fetch_global_Serial1v+0x3c>)
   d54aa:	4a08      	ldr	r2, [pc, #32]	; (d54cc <_Z22__fetch_global_Serial1v+0x40>)
   d54ac:	4808      	ldr	r0, [pc, #32]	; (d54d0 <_Z22__fetch_global_Serial1v+0x44>)
   d54ae:	f7ff ffd7 	bl	d5460 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d54b2:	4620      	mov	r0, r4
   d54b4:	f7fe fdf8 	bl	d40a8 <__cxa_guard_release>
   d54b8:	4806      	ldr	r0, [pc, #24]	; (d54d4 <_Z22__fetch_global_Serial1v+0x48>)
   d54ba:	f001 f893 	bl	d65e4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54be:	4804      	ldr	r0, [pc, #16]	; (d54d0 <_Z22__fetch_global_Serial1v+0x44>)
   d54c0:	b002      	add	sp, #8
   d54c2:	bd10      	pop	{r4, pc}
   d54c4:	2003e5b8 	.word	0x2003e5b8
   d54c8:	2003e640 	.word	0x2003e640
   d54cc:	2003e5bc 	.word	0x2003e5bc
   d54d0:	2003e6c4 	.word	0x2003e6c4
   d54d4:	000d53eb 	.word	0x000d53eb

000d54d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54d8:	7441      	strb	r1, [r0, #17]
}
   d54da:	4770      	bx	lr

000d54dc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54dc:	4770      	bx	lr

000d54de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d54de:	4770      	bx	lr

000d54e0 <_ZN9USBSerial4readEv>:
{
   d54e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d54e2:	2100      	movs	r1, #0
   d54e4:	7c00      	ldrb	r0, [r0, #16]
   d54e6:	f7ff f95b 	bl	d47a0 <HAL_USB_USART_Receive_Data>
}
   d54ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d54ee:	bd08      	pop	{r3, pc}

000d54f0 <_ZN9USBSerial4peekEv>:
{
   d54f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d54f2:	2101      	movs	r1, #1
   d54f4:	7c00      	ldrb	r0, [r0, #16]
   d54f6:	f7ff f953 	bl	d47a0 <HAL_USB_USART_Receive_Data>
}
   d54fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d54fe:	bd08      	pop	{r3, pc}

000d5500 <_ZN9USBSerial17availableForWriteEv>:
{
   d5500:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5502:	7c00      	ldrb	r0, [r0, #16]
   d5504:	f7ff f944 	bl	d4790 <HAL_USB_USART_Available_Data_For_Write>
}
   d5508:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d550c:	bd08      	pop	{r3, pc}

000d550e <_ZN9USBSerial9availableEv>:
{
   d550e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5510:	7c00      	ldrb	r0, [r0, #16]
   d5512:	f7ff f935 	bl	d4780 <HAL_USB_USART_Available_Data>
}
   d5516:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d551a:	bd08      	pop	{r3, pc}

000d551c <_ZN9USBSerial5writeEh>:
{
   d551c:	b513      	push	{r0, r1, r4, lr}
   d551e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5520:	7c00      	ldrb	r0, [r0, #16]
{
   d5522:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5524:	f7ff f934 	bl	d4790 <HAL_USB_USART_Available_Data_For_Write>
   d5528:	2800      	cmp	r0, #0
   d552a:	9901      	ldr	r1, [sp, #4]
   d552c:	dc01      	bgt.n	d5532 <_ZN9USBSerial5writeEh+0x16>
   d552e:	7c60      	ldrb	r0, [r4, #17]
   d5530:	b120      	cbz	r0, d553c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5532:	7c20      	ldrb	r0, [r4, #16]
   d5534:	f7ff f93c 	bl	d47b0 <HAL_USB_USART_Send_Data>
   d5538:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d553c:	b002      	add	sp, #8
   d553e:	bd10      	pop	{r4, pc}

000d5540 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5540:	7c00      	ldrb	r0, [r0, #16]
   d5542:	f7ff b93d 	b.w	d47c0 <HAL_USB_USART_Flush_Data>

000d5546 <_ZN9USBSerialD0Ev>:
   d5546:	b510      	push	{r4, lr}
   d5548:	2114      	movs	r1, #20
   d554a:	4604      	mov	r4, r0
   d554c:	f000 fb16 	bl	d5b7c <_ZdlPvj>
   d5550:	4620      	mov	r0, r4
   d5552:	bd10      	pop	{r4, pc}

000d5554 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5554:	b510      	push	{r4, lr}
   d5556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d555a:	4604      	mov	r4, r0
   d555c:	4608      	mov	r0, r1
   d555e:	2100      	movs	r1, #0
   d5560:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5564:	4b04      	ldr	r3, [pc, #16]	; (d5578 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5566:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5568:	2301      	movs	r3, #1
  _serial = serial;
   d556a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d556c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d556e:	4611      	mov	r1, r2
   d5570:	f7ff f8f6 	bl	d4760 <HAL_USB_USART_Init>
}
   d5574:	4620      	mov	r0, r4
   d5576:	bd10      	pop	{r4, pc}
   d5578:	000d6a34 	.word	0x000d6a34

000d557c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d557c:	7c00      	ldrb	r0, [r0, #16]
   d557e:	2200      	movs	r2, #0
   d5580:	f7ff b8f6 	b.w	d4770 <HAL_USB_USART_Begin>

000d5584 <_Z19acquireSerialBufferv>:
{
   d5584:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5586:	2214      	movs	r2, #20
{
   d5588:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d558a:	2100      	movs	r1, #0
   d558c:	f001 f83e 	bl	d660c <memset>
}
   d5590:	4620      	mov	r0, r4
   d5592:	bd10      	pop	{r4, pc}

000d5594 <_Z16_fetch_usbserialv>:
{
   d5594:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5596:	4c0f      	ldr	r4, [pc, #60]	; (d55d4 <_Z16_fetch_usbserialv+0x40>)
{
   d5598:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d559a:	a803      	add	r0, sp, #12
   d559c:	f7ff fff2 	bl	d5584 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55a0:	7821      	ldrb	r1, [r4, #0]
   d55a2:	f3bf 8f5b 	dmb	ish
   d55a6:	f011 0101 	ands.w	r1, r1, #1
   d55aa:	d10f      	bne.n	d55cc <_Z16_fetch_usbserialv+0x38>
   d55ac:	4620      	mov	r0, r4
   d55ae:	9101      	str	r1, [sp, #4]
   d55b0:	f7fe fd75 	bl	d409e <__cxa_guard_acquire>
   d55b4:	9901      	ldr	r1, [sp, #4]
   d55b6:	b148      	cbz	r0, d55cc <_Z16_fetch_usbserialv+0x38>
   d55b8:	aa03      	add	r2, sp, #12
   d55ba:	4807      	ldr	r0, [pc, #28]	; (d55d8 <_Z16_fetch_usbserialv+0x44>)
   d55bc:	f7ff ffca 	bl	d5554 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7fe fd71 	bl	d40a8 <__cxa_guard_release>
   d55c6:	4805      	ldr	r0, [pc, #20]	; (d55dc <_Z16_fetch_usbserialv+0x48>)
   d55c8:	f001 f80c 	bl	d65e4 <atexit>
	return _usbserial;
}
   d55cc:	4802      	ldr	r0, [pc, #8]	; (d55d8 <_Z16_fetch_usbserialv+0x44>)
   d55ce:	b008      	add	sp, #32
   d55d0:	bd10      	pop	{r4, pc}
   d55d2:	bf00      	nop
   d55d4:	2003e6d8 	.word	0x2003e6d8
   d55d8:	2003e6dc 	.word	0x2003e6dc
   d55dc:	000d54dd 	.word	0x000d54dd

000d55e0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d55e0:	4770      	bx	lr

000d55e2 <_ZN9IPAddressD0Ev>:
   d55e2:	b510      	push	{r4, lr}
   d55e4:	2118      	movs	r1, #24
   d55e6:	4604      	mov	r4, r0
   d55e8:	f000 fac8 	bl	d5b7c <_ZdlPvj>
   d55ec:	4620      	mov	r0, r4
   d55ee:	bd10      	pop	{r4, pc}

000d55f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55f2:	7d03      	ldrb	r3, [r0, #20]
   d55f4:	2b06      	cmp	r3, #6
{
   d55f6:	b08d      	sub	sp, #52	; 0x34
   d55f8:	460e      	mov	r6, r1
   d55fa:	f100 0704 	add.w	r7, r0, #4
   d55fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5602:	d012      	beq.n	d562a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5604:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5608:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d560c:	220a      	movs	r2, #10
   d560e:	4630      	mov	r0, r6
   d5610:	f000 f967 	bl	d58e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5614:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5616:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5618:	d019      	beq.n	d564e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d561a:	2c00      	cmp	r4, #0
   d561c:	d0f4      	beq.n	d5608 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d561e:	212e      	movs	r1, #46	; 0x2e
   d5620:	4630      	mov	r0, r6
   d5622:	f000 f945 	bl	d58b0 <_ZN5Print5printEc>
   d5626:	4404      	add	r4, r0
   d5628:	e7ee      	b.n	d5608 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d562a:	232f      	movs	r3, #47	; 0x2f
   d562c:	466a      	mov	r2, sp
   d562e:	4639      	mov	r1, r7
   d5630:	200a      	movs	r0, #10
		buf[0] = 0;
   d5632:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5636:	f7ff f983 	bl	d4940 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d563a:	4668      	mov	r0, sp
   d563c:	f001 f850 	bl	d66e0 <strlen>
   d5640:	6833      	ldr	r3, [r6, #0]
   d5642:	4602      	mov	r2, r0
   d5644:	68db      	ldr	r3, [r3, #12]
   d5646:	4669      	mov	r1, sp
   d5648:	4630      	mov	r0, r6
   d564a:	4798      	blx	r3
   d564c:	4604      	mov	r4, r0
    }
    return n;
}
   d564e:	4620      	mov	r0, r4
   d5650:	b00d      	add	sp, #52	; 0x34
   d5652:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5654 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5654:	b510      	push	{r4, lr}
   d5656:	4b05      	ldr	r3, [pc, #20]	; (d566c <_ZN9IPAddressC1Ev+0x18>)
   d5658:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   d565a:	2211      	movs	r2, #17
   d565c:	f840 3b04 	str.w	r3, [r0], #4
   d5660:	2100      	movs	r1, #0
   d5662:	f000 ffd3 	bl	d660c <memset>
}
   d5666:	4620      	mov	r0, r4
   d5668:	bd10      	pop	{r4, pc}
   d566a:	bf00      	nop
   d566c:	000d6a64 	.word	0x000d6a64

000d5670 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5670:	4603      	mov	r3, r0
   d5672:	4a07      	ldr	r2, [pc, #28]	; (d5690 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5674:	b510      	push	{r4, lr}
   d5676:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d567a:	f101 0210 	add.w	r2, r1, #16
   d567e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5682:	f843 4b04 	str.w	r4, [r3], #4
   d5686:	4291      	cmp	r1, r2
   d5688:	d1f9      	bne.n	d567e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d568a:	780a      	ldrb	r2, [r1, #0]
   d568c:	701a      	strb	r2, [r3, #0]
}
   d568e:	bd10      	pop	{r4, pc}
   d5690:	000d6a64 	.word	0x000d6a64

000d5694 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5694:	7d03      	ldrb	r3, [r0, #20]
   d5696:	2b04      	cmp	r3, #4
   d5698:	d104      	bne.n	d56a4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d569a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d569c:	3800      	subs	r0, #0
   d569e:	bf18      	it	ne
   d56a0:	2001      	movne	r0, #1
   d56a2:	4770      	bx	lr
    } else if (version() == 6) {
   d56a4:	2b06      	cmp	r3, #6
   d56a6:	d107      	bne.n	d56b8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d56a8:	6843      	ldr	r3, [r0, #4]
   d56aa:	b93b      	cbnz	r3, d56bc <_ZNK9IPAddresscvbEv+0x28>
   d56ac:	6883      	ldr	r3, [r0, #8]
   d56ae:	b92b      	cbnz	r3, d56bc <_ZNK9IPAddresscvbEv+0x28>
   d56b0:	68c3      	ldr	r3, [r0, #12]
   d56b2:	b91b      	cbnz	r3, d56bc <_ZNK9IPAddresscvbEv+0x28>
   d56b4:	6900      	ldr	r0, [r0, #16]
   d56b6:	e7f1      	b.n	d569c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d56b8:	2000      	movs	r0, #0
   d56ba:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d56bc:	2001      	movs	r0, #1
}
   d56be:	4770      	bx	lr

000d56c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d56c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d56d2:	2304      	movs	r3, #4
   d56d4:	6041      	str	r1, [r0, #4]
   d56d6:	7503      	strb	r3, [r0, #20]
}
   d56d8:	bd10      	pop	{r4, pc}

000d56da <_ZN9IPAddressaSEPKh>:
{
   d56da:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56dc:	78cb      	ldrb	r3, [r1, #3]
   d56de:	9300      	str	r3, [sp, #0]
   d56e0:	788b      	ldrb	r3, [r1, #2]
   d56e2:	784a      	ldrb	r2, [r1, #1]
   d56e4:	7809      	ldrb	r1, [r1, #0]
   d56e6:	f7ff ffeb 	bl	d56c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d56ea:	b002      	add	sp, #8
   d56ec:	bd10      	pop	{r4, pc}
	...

000d56f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d56f0:	4b01      	ldr	r3, [pc, #4]	; (d56f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d56f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d56f4:	4770      	bx	lr
   d56f6:	bf00      	nop
   d56f8:	2003e3e0 	.word	0x2003e3e0

000d56fc <serialEventRun>:
{
   d56fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d56fe:	4b0b      	ldr	r3, [pc, #44]	; (d572c <serialEventRun+0x30>)
   d5700:	b143      	cbz	r3, d5714 <serialEventRun+0x18>
   d5702:	f7ff ff47 	bl	d5594 <_Z16_fetch_usbserialv>
   d5706:	6803      	ldr	r3, [r0, #0]
   d5708:	691b      	ldr	r3, [r3, #16]
   d570a:	4798      	blx	r3
   d570c:	2800      	cmp	r0, #0
   d570e:	dd01      	ble.n	d5714 <serialEventRun+0x18>
        serialEvent();
   d5710:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5714:	4b06      	ldr	r3, [pc, #24]	; (d5730 <serialEventRun+0x34>)
   d5716:	b143      	cbz	r3, d572a <serialEventRun+0x2e>
   d5718:	f7ff feb8 	bl	d548c <_Z22__fetch_global_Serial1v>
   d571c:	6803      	ldr	r3, [r0, #0]
   d571e:	691b      	ldr	r3, [r3, #16]
   d5720:	4798      	blx	r3
   d5722:	2800      	cmp	r0, #0
   d5724:	dd01      	ble.n	d572a <serialEventRun+0x2e>
        serialEvent1();
   d5726:	f3af 8000 	nop.w
}
   d572a:	bd08      	pop	{r3, pc}
	...

000d5734 <_post_loop>:
{
   d5734:	b508      	push	{r3, lr}
	serialEventRun();
   d5736:	f7ff ffe1 	bl	d56fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d573a:	f7ff f929 	bl	d4990 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d573e:	4b01      	ldr	r3, [pc, #4]	; (d5744 <_post_loop+0x10>)
   d5740:	6018      	str	r0, [r3, #0]
}
   d5742:	bd08      	pop	{r3, pc}
   d5744:	2003e744 	.word	0x2003e744

000d5748 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5748:	4805      	ldr	r0, [pc, #20]	; (d5760 <_Z33system_initialize_user_backup_ramv+0x18>)
   d574a:	4a06      	ldr	r2, [pc, #24]	; (d5764 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d574c:	4906      	ldr	r1, [pc, #24]	; (d5768 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d574e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5750:	1a12      	subs	r2, r2, r0
   d5752:	f000 ff4d 	bl	d65f0 <memcpy>
    __backup_sram_signature = signature;
   d5756:	4b05      	ldr	r3, [pc, #20]	; (d576c <_Z33system_initialize_user_backup_ramv+0x24>)
   d5758:	4a05      	ldr	r2, [pc, #20]	; (d5770 <_Z33system_initialize_user_backup_ramv+0x28>)
   d575a:	601a      	str	r2, [r3, #0]
}
   d575c:	bd08      	pop	{r3, pc}
   d575e:	bf00      	nop
   d5760:	2003f400 	.word	0x2003f400
   d5764:	2003f404 	.word	0x2003f404
   d5768:	000d6bf0 	.word	0x000d6bf0
   d576c:	2003f400 	.word	0x2003f400
   d5770:	9a271c1e 	.word	0x9a271c1e

000d5774 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5774:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5776:	2300      	movs	r3, #0
   d5778:	9300      	str	r3, [sp, #0]
   d577a:	461a      	mov	r2, r3
   d577c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5780:	f7ff f9c8 	bl	d4b14 <system_ctrl_set_result>
}
   d5784:	b003      	add	sp, #12
   d5786:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d578c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d578c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d578e:	8843      	ldrh	r3, [r0, #2]
   d5790:	2b0a      	cmp	r3, #10
   d5792:	d008      	beq.n	d57a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5794:	2b50      	cmp	r3, #80	; 0x50
   d5796:	d10b      	bne.n	d57b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5798:	4b09      	ldr	r3, [pc, #36]	; (d57c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d579a:	681b      	ldr	r3, [r3, #0]
   d579c:	b14b      	cbz	r3, d57b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d579e:	b003      	add	sp, #12
   d57a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d57a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d57a6:	f7ff ffe5 	bl	d5774 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d57aa:	b003      	add	sp, #12
   d57ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57b0:	2300      	movs	r3, #0
   d57b2:	9300      	str	r3, [sp, #0]
   d57b4:	461a      	mov	r2, r3
   d57b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57ba:	f7ff f9ab 	bl	d4b14 <system_ctrl_set_result>
}
   d57be:	e7f4      	b.n	d57aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d57c0:	2003e6f4 	.word	0x2003e6f4

000d57c4 <module_user_init_hook>:
{
   d57c4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d57c6:	4812      	ldr	r0, [pc, #72]	; (d5810 <module_user_init_hook+0x4c>)
   d57c8:	2100      	movs	r1, #0
   d57ca:	f7ff f9d5 	bl	d4b78 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d57ce:	4b11      	ldr	r3, [pc, #68]	; (d5814 <module_user_init_hook+0x50>)
   d57d0:	681a      	ldr	r2, [r3, #0]
   d57d2:	4b11      	ldr	r3, [pc, #68]	; (d5818 <module_user_init_hook+0x54>)
   d57d4:	429a      	cmp	r2, r3
   d57d6:	4b11      	ldr	r3, [pc, #68]	; (d581c <module_user_init_hook+0x58>)
   d57d8:	bf0c      	ite	eq
   d57da:	2201      	moveq	r2, #1
   d57dc:	2200      	movne	r2, #0
   d57de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d57e0:	d001      	beq.n	d57e6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d57e2:	f7ff ffb1 	bl	d5748 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d57e6:	f7ff f8cb 	bl	d4980 <HAL_RNG_GetRandomNumber>
   d57ea:	4604      	mov	r4, r0
    srand(seed);
   d57ec:	f000 ff16 	bl	d661c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d57f0:	4b0b      	ldr	r3, [pc, #44]	; (d5820 <module_user_init_hook+0x5c>)
   d57f2:	b113      	cbz	r3, d57fa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d57f4:	4620      	mov	r0, r4
   d57f6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d57fa:	2100      	movs	r1, #0
   d57fc:	4808      	ldr	r0, [pc, #32]	; (d5820 <module_user_init_hook+0x5c>)
   d57fe:	f7ff f907 	bl	d4a10 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5806:	4807      	ldr	r0, [pc, #28]	; (d5824 <module_user_init_hook+0x60>)
   d5808:	2100      	movs	r1, #0
   d580a:	f7ff b979 	b.w	d4b00 <system_ctrl_set_app_request_handler>
   d580e:	bf00      	nop
   d5810:	000d56f1 	.word	0x000d56f1
   d5814:	2003f400 	.word	0x2003f400
   d5818:	9a271c1e 	.word	0x9a271c1e
   d581c:	2003e6f0 	.word	0x2003e6f0
   d5820:	00000000 	.word	0x00000000
   d5824:	000d578d 	.word	0x000d578d

000d5828 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5828:	4b01      	ldr	r3, [pc, #4]	; (d5830 <_GLOBAL__sub_I_RGB+0x8>)
   d582a:	2200      	movs	r2, #0
   d582c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d582e:	4770      	bx	lr
   d5830:	2003e6f8 	.word	0x2003e6f8

000d5834 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5834:	2100      	movs	r1, #0
   d5836:	f7ff b95b 	b.w	d4af0 <system_delay_ms>
	...

000d583c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d583c:	4b02      	ldr	r3, [pc, #8]	; (d5848 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d583e:	681a      	ldr	r2, [r3, #0]
   d5840:	4b02      	ldr	r3, [pc, #8]	; (d584c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5842:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5844:	4770      	bx	lr
   d5846:	bf00      	nop
   d5848:	2003e3dc 	.word	0x2003e3dc
   d584c:	2003e708 	.word	0x2003e708

000d5850 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5850:	4b01      	ldr	r3, [pc, #4]	; (d5858 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5852:	4a02      	ldr	r2, [pc, #8]	; (d585c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5854:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5856:	4770      	bx	lr
   d5858:	2003e70c 	.word	0x2003e70c
   d585c:	000d6a8c 	.word	0x000d6a8c

000d5860 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5862:	4606      	mov	r6, r0
   d5864:	460d      	mov	r5, r1
  size_t n = 0;
   d5866:	188f      	adds	r7, r1, r2
   d5868:	2400      	movs	r4, #0
  while (size--) {
   d586a:	42bd      	cmp	r5, r7
   d586c:	d00c      	beq.n	d5888 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d586e:	6833      	ldr	r3, [r6, #0]
   d5870:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5874:	689b      	ldr	r3, [r3, #8]
   d5876:	4630      	mov	r0, r6
   d5878:	4798      	blx	r3
     if (chunk>=0)
   d587a:	1e03      	subs	r3, r0, #0
   d587c:	db01      	blt.n	d5882 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d587e:	441c      	add	r4, r3
  while (size--) {
   d5880:	e7f3      	b.n	d586a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5882:	2c00      	cmp	r4, #0
   d5884:	bf08      	it	eq
   d5886:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5888:	4620      	mov	r0, r4
   d588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d588c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d588c:	b513      	push	{r0, r1, r4, lr}
   d588e:	4604      	mov	r4, r0
    }
   d5890:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5892:	b159      	cbz	r1, d58ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5894:	9101      	str	r1, [sp, #4]
   d5896:	f000 ff23 	bl	d66e0 <strlen>
   d589a:	6823      	ldr	r3, [r4, #0]
   d589c:	9901      	ldr	r1, [sp, #4]
   d589e:	68db      	ldr	r3, [r3, #12]
   d58a0:	4602      	mov	r2, r0
   d58a2:	4620      	mov	r0, r4
    }
   d58a4:	b002      	add	sp, #8
   d58a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d58aa:	4718      	bx	r3
    }
   d58ac:	b002      	add	sp, #8
   d58ae:	bd10      	pop	{r4, pc}

000d58b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d58b0:	6803      	ldr	r3, [r0, #0]
   d58b2:	689b      	ldr	r3, [r3, #8]
   d58b4:	4718      	bx	r3

000d58b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d58b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d58b8:	210d      	movs	r1, #13
{
   d58ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d58bc:	f7ff fff8 	bl	d58b0 <_ZN5Print5printEc>
  n += print('\n');
   d58c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d58c2:	4604      	mov	r4, r0
  n += print('\n');
   d58c4:	4628      	mov	r0, r5
   d58c6:	f7ff fff3 	bl	d58b0 <_ZN5Print5printEc>
  return n;
}
   d58ca:	4420      	add	r0, r4
   d58cc:	bd38      	pop	{r3, r4, r5, pc}

000d58ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d58ce:	b538      	push	{r3, r4, r5, lr}
   d58d0:	4605      	mov	r5, r0
  return write(str);
   d58d2:	f7ff ffdb 	bl	d588c <_ZN5Print5writeEPKc>
   d58d6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d58d8:	4628      	mov	r0, r5
   d58da:	f7ff ffec 	bl	d58b6 <_ZN5Print7printlnEv>
  return n;
}
   d58de:	4420      	add	r0, r4
   d58e0:	bd38      	pop	{r3, r4, r5, pc}

000d58e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d58e2:	b530      	push	{r4, r5, lr}
   d58e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d58e6:	2300      	movs	r3, #0
   d58e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d58ec:	2a01      	cmp	r2, #1
   d58ee:	bf98      	it	ls
   d58f0:	220a      	movls	r2, #10
   d58f2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d58f4:	460d      	mov	r5, r1
   d58f6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d58fa:	fb01 5312 	mls	r3, r1, r2, r5
   d58fe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5902:	2b09      	cmp	r3, #9
   d5904:	bf94      	ite	ls
   d5906:	3330      	addls	r3, #48	; 0x30
   d5908:	3337      	addhi	r3, #55	; 0x37
   d590a:	b2db      	uxtb	r3, r3
  } while(n);
   d590c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d590e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5912:	d9ef      	bls.n	d58f4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5914:	4621      	mov	r1, r4
   d5916:	f7ff ffb9 	bl	d588c <_ZN5Print5writeEPKc>
}
   d591a:	b00b      	add	sp, #44	; 0x2c
   d591c:	bd30      	pop	{r4, r5, pc}

000d591e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d591e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5922:	b086      	sub	sp, #24
   d5924:	af00      	add	r7, sp, #0
   d5926:	4605      	mov	r5, r0
   d5928:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d592a:	1d38      	adds	r0, r7, #4
   d592c:	2114      	movs	r1, #20
{
   d592e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5930:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5932:	f7ff f911 	bl	d4b58 <vsnprintf>

    if (n<bufsize)
   d5936:	2813      	cmp	r0, #19
   d5938:	d80e      	bhi.n	d5958 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d593a:	1d39      	adds	r1, r7, #4
   d593c:	4628      	mov	r0, r5
   d593e:	f7ff ffa5 	bl	d588c <_ZN5Print5writeEPKc>
   d5942:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5944:	b11e      	cbz	r6, d594e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5946:	4628      	mov	r0, r5
   d5948:	f7ff ffb5 	bl	d58b6 <_ZN5Print7printlnEv>
   d594c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d594e:	4620      	mov	r0, r4
   d5950:	3718      	adds	r7, #24
   d5952:	46bd      	mov	sp, r7
   d5954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5958:	f100 0308 	add.w	r3, r0, #8
   d595c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5960:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5962:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5966:	4622      	mov	r2, r4
   d5968:	1c41      	adds	r1, r0, #1
   d596a:	683b      	ldr	r3, [r7, #0]
   d596c:	4668      	mov	r0, sp
   d596e:	f7ff f8f3 	bl	d4b58 <vsnprintf>
  return write(str);
   d5972:	4669      	mov	r1, sp
   d5974:	4628      	mov	r0, r5
   d5976:	f7ff ff89 	bl	d588c <_ZN5Print5writeEPKc>
   d597a:	4604      	mov	r4, r0
   d597c:	46c5      	mov	sp, r8
   d597e:	e7e1      	b.n	d5944 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5980 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5980:	4802      	ldr	r0, [pc, #8]	; (d598c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5982:	2300      	movs	r3, #0
   d5984:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5986:	f7fe bff3 	b.w	d4970 <os_mutex_recursive_create>
   d598a:	bf00      	nop
   d598c:	2003e710 	.word	0x2003e710

000d5990 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5990:	4b05      	ldr	r3, [pc, #20]	; (d59a8 <_GLOBAL__sub_I_System+0x18>)
   d5992:	2202      	movs	r2, #2
   d5994:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5996:	4b05      	ldr	r3, [pc, #20]	; (d59ac <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5998:	4a05      	ldr	r2, [pc, #20]	; (d59b0 <_GLOBAL__sub_I_System+0x20>)
   d599a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d599c:	2000      	movs	r0, #0
   d599e:	6018      	str	r0, [r3, #0]
   d59a0:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d59a2:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d59a4:	f7ff b89c 	b.w	d4ae0 <set_system_mode>
   d59a8:	2003e720 	.word	0x2003e720
   d59ac:	2003e714 	.word	0x2003e714
   d59b0:	ffff0000 	.word	0xffff0000

000d59b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59b4:	2200      	movs	r2, #0
   d59b6:	6840      	ldr	r0, [r0, #4]
   d59b8:	4611      	mov	r1, r2
   d59ba:	f7ff b869 	b.w	d4a90 <network_listening>

000d59be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d59be:	2200      	movs	r2, #0
   d59c0:	6840      	ldr	r0, [r0, #4]
   d59c2:	4611      	mov	r1, r2
   d59c4:	f7ff b874 	b.w	d4ab0 <network_get_listen_timeout>

000d59c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d59c8:	6840      	ldr	r0, [r0, #4]
   d59ca:	2200      	movs	r2, #0
   d59cc:	f7ff b868 	b.w	d4aa0 <network_set_listen_timeout>

000d59d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d59d0:	6840      	ldr	r0, [r0, #4]
   d59d2:	2200      	movs	r2, #0
   d59d4:	f081 0101 	eor.w	r1, r1, #1
   d59d8:	f7ff b852 	b.w	d4a80 <network_listen>

000d59dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d59dc:	2300      	movs	r3, #0
   d59de:	6840      	ldr	r0, [r0, #4]
   d59e0:	461a      	mov	r2, r3
   d59e2:	4619      	mov	r1, r3
   d59e4:	f7ff b844 	b.w	d4a70 <network_off>

000d59e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d59e8:	2300      	movs	r3, #0
   d59ea:	6840      	ldr	r0, [r0, #4]
   d59ec:	461a      	mov	r2, r3
   d59ee:	4619      	mov	r1, r3
   d59f0:	f7ff b836 	b.w	d4a60 <network_on>

000d59f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59f4:	2200      	movs	r2, #0
   d59f6:	6840      	ldr	r0, [r0, #4]
   d59f8:	4611      	mov	r1, r2
   d59fa:	f7ff b829 	b.w	d4a50 <network_ready>

000d59fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d59fe:	2200      	movs	r2, #0
   d5a00:	6840      	ldr	r0, [r0, #4]
   d5a02:	4611      	mov	r1, r2
   d5a04:	f7ff b814 	b.w	d4a30 <network_connecting>

000d5a08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a08:	6840      	ldr	r0, [r0, #4]
   d5a0a:	2200      	movs	r2, #0
   d5a0c:	2102      	movs	r1, #2
   d5a0e:	f7ff b817 	b.w	d4a40 <network_disconnect>

000d5a12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5a12:	2300      	movs	r3, #0
   d5a14:	6840      	ldr	r0, [r0, #4]
   d5a16:	461a      	mov	r2, r3
   d5a18:	f7ff b802 	b.w	d4a20 <network_connect>

000d5a1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5a1c:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a1e:	2203      	movs	r2, #3
   d5a20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a22:	4a02      	ldr	r2, [pc, #8]	; (d5a2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5a26:	4770      	bx	lr
   d5a28:	2003e724 	.word	0x2003e724
   d5a2c:	000d6a98 	.word	0x000d6a98

000d5a30 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a30:	4770      	bx	lr
	...

000d5a34 <_Z17acquireWireBufferv>:
{
   d5a34:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5a36:	2300      	movs	r3, #0
   d5a38:	2520      	movs	r5, #32
   d5a3a:	8043      	strh	r3, [r0, #2]
   d5a3c:	2314      	movs	r3, #20
{
   d5a3e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5a40:	8003      	strh	r3, [r0, #0]
   d5a42:	6085      	str	r5, [r0, #8]
   d5a44:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a46:	4906      	ldr	r1, [pc, #24]	; (d5a60 <_Z17acquireWireBufferv+0x2c>)
   d5a48:	4628      	mov	r0, r5
   d5a4a:	f000 f899 	bl	d5b80 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a4e:	4904      	ldr	r1, [pc, #16]	; (d5a60 <_Z17acquireWireBufferv+0x2c>)
	};
   d5a50:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a52:	4628      	mov	r0, r5
   d5a54:	f000 f894 	bl	d5b80 <_ZnajRKSt9nothrow_t>
	};
   d5a58:	60e0      	str	r0, [r4, #12]
}
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	bd38      	pop	{r3, r4, r5, pc}
   d5a5e:	bf00      	nop
   d5a60:	000d6acc 	.word	0x000d6acc

000d5a64 <_Z19__fetch_global_Wirev>:
{
   d5a64:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a66:	4d0e      	ldr	r5, [pc, #56]	; (d5aa0 <_Z19__fetch_global_Wirev+0x3c>)
   d5a68:	7829      	ldrb	r1, [r5, #0]
   d5a6a:	f3bf 8f5b 	dmb	ish
   d5a6e:	f011 0401 	ands.w	r4, r1, #1
{
   d5a72:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a74:	d111      	bne.n	d5a9a <_Z19__fetch_global_Wirev+0x36>
   d5a76:	4628      	mov	r0, r5
   d5a78:	f7fe fb11 	bl	d409e <__cxa_guard_acquire>
   d5a7c:	b168      	cbz	r0, d5a9a <_Z19__fetch_global_Wirev+0x36>
   d5a7e:	a801      	add	r0, sp, #4
   d5a80:	f7ff ffd8 	bl	d5a34 <_Z17acquireWireBufferv>
   d5a84:	aa01      	add	r2, sp, #4
   d5a86:	4621      	mov	r1, r4
   d5a88:	4806      	ldr	r0, [pc, #24]	; (d5aa4 <_Z19__fetch_global_Wirev+0x40>)
   d5a8a:	f7ff fc99 	bl	d53c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5a8e:	4628      	mov	r0, r5
   d5a90:	f7fe fb0a 	bl	d40a8 <__cxa_guard_release>
   d5a94:	4804      	ldr	r0, [pc, #16]	; (d5aa8 <_Z19__fetch_global_Wirev+0x44>)
   d5a96:	f000 fda5 	bl	d65e4 <atexit>
	return wire;
}
   d5a9a:	4802      	ldr	r0, [pc, #8]	; (d5aa4 <_Z19__fetch_global_Wirev+0x40>)
   d5a9c:	b007      	add	sp, #28
   d5a9e:	bd30      	pop	{r4, r5, pc}
   d5aa0:	2003e72c 	.word	0x2003e72c
   d5aa4:	2003e730 	.word	0x2003e730
   d5aa8:	000d5a31 	.word	0x000d5a31

000d5aac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5aac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5aae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5ab0:	d902      	bls.n	d5ab8 <pinAvailable+0xc>
    return false;
   d5ab2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5ab4:	b002      	add	sp, #8
   d5ab6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5ab8:	f1a0 030b 	sub.w	r3, r0, #11
   d5abc:	2b02      	cmp	r3, #2
   d5abe:	d81a      	bhi.n	d5af6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5ac0:	4c17      	ldr	r4, [pc, #92]	; (d5b20 <pinAvailable+0x74>)
   d5ac2:	7821      	ldrb	r1, [r4, #0]
   d5ac4:	f3bf 8f5b 	dmb	ish
   d5ac8:	f011 0101 	ands.w	r1, r1, #1
   d5acc:	d10b      	bne.n	d5ae6 <pinAvailable+0x3a>
   d5ace:	4620      	mov	r0, r4
   d5ad0:	9101      	str	r1, [sp, #4]
   d5ad2:	f7fe fae4 	bl	d409e <__cxa_guard_acquire>
   d5ad6:	9901      	ldr	r1, [sp, #4]
   d5ad8:	b128      	cbz	r0, d5ae6 <pinAvailable+0x3a>
   d5ada:	4812      	ldr	r0, [pc, #72]	; (d5b24 <pinAvailable+0x78>)
   d5adc:	f7ff fc24 	bl	d5328 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5ae0:	4620      	mov	r0, r4
   d5ae2:	f7fe fae1 	bl	d40a8 <__cxa_guard_release>
   d5ae6:	4b0f      	ldr	r3, [pc, #60]	; (d5b24 <pinAvailable+0x78>)
   d5ae8:	7818      	ldrb	r0, [r3, #0]
   d5aea:	f7fe feb1 	bl	d4850 <hal_spi_is_enabled>
   d5aee:	2800      	cmp	r0, #0
   d5af0:	d1df      	bne.n	d5ab2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5af2:	2001      	movs	r0, #1
   d5af4:	e7de      	b.n	d5ab4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5af6:	2801      	cmp	r0, #1
   d5af8:	d809      	bhi.n	d5b0e <pinAvailable+0x62>
   d5afa:	f7ff ffb3 	bl	d5a64 <_Z19__fetch_global_Wirev>
   d5afe:	2100      	movs	r1, #0
   d5b00:	7c00      	ldrb	r0, [r0, #16]
   d5b02:	f7fe fe8d 	bl	d4820 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5b06:	f080 0001 	eor.w	r0, r0, #1
   d5b0a:	b2c0      	uxtb	r0, r0
   d5b0c:	e7d2      	b.n	d5ab4 <pinAvailable+0x8>
   d5b0e:	3809      	subs	r0, #9
   d5b10:	2801      	cmp	r0, #1
   d5b12:	d8ee      	bhi.n	d5af2 <pinAvailable+0x46>
   d5b14:	f7ff fcba 	bl	d548c <_Z22__fetch_global_Serial1v>
   d5b18:	7c00      	ldrb	r0, [r0, #16]
   d5b1a:	f7fe ff01 	bl	d4920 <hal_usart_is_enabled>
   d5b1e:	e7f2      	b.n	d5b06 <pinAvailable+0x5a>
   d5b20:	2003e748 	.word	0x2003e748
   d5b24:	2003e74c 	.word	0x2003e74c

000d5b28 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b28:	2823      	cmp	r0, #35	; 0x23
{
   d5b2a:	b538      	push	{r3, r4, r5, lr}
   d5b2c:	4604      	mov	r4, r0
   d5b2e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b30:	d80a      	bhi.n	d5b48 <pinMode+0x20>
   d5b32:	29ff      	cmp	r1, #255	; 0xff
   d5b34:	d008      	beq.n	d5b48 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5b36:	f7ff ffb9 	bl	d5aac <pinAvailable>
   d5b3a:	b128      	cbz	r0, d5b48 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5b3c:	4629      	mov	r1, r5
   d5b3e:	4620      	mov	r0, r4
}
   d5b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5b44:	f7fe bf34 	b.w	d49b0 <HAL_Pin_Mode>
}
   d5b48:	bd38      	pop	{r3, r4, r5, pc}

000d5b4a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5b4a:	b538      	push	{r3, r4, r5, lr}
   d5b4c:	4604      	mov	r4, r0
   d5b4e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5b50:	f7fe ff36 	bl	d49c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5b54:	28ff      	cmp	r0, #255	; 0xff
   d5b56:	d010      	beq.n	d5b7a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5b58:	2806      	cmp	r0, #6
   d5b5a:	d804      	bhi.n	d5b66 <digitalWrite+0x1c>
   d5b5c:	234d      	movs	r3, #77	; 0x4d
   d5b5e:	fa23 f000 	lsr.w	r0, r3, r0
   d5b62:	07c3      	lsls	r3, r0, #31
   d5b64:	d409      	bmi.n	d5b7a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5b66:	4620      	mov	r0, r4
   d5b68:	f7ff ffa0 	bl	d5aac <pinAvailable>
   d5b6c:	b128      	cbz	r0, d5b7a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5b6e:	4629      	mov	r1, r5
   d5b70:	4620      	mov	r0, r4
}
   d5b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5b76:	f7fe bf2b 	b.w	d49d0 <HAL_GPIO_Write>
}
   d5b7a:	bd38      	pop	{r3, r4, r5, pc}

000d5b7c <_ZdlPvj>:
   d5b7c:	f7fe ba8d 	b.w	d409a <_ZdlPv>

000d5b80 <_ZnajRKSt9nothrow_t>:
   d5b80:	f7fe ba89 	b.w	d4096 <_Znaj>

000d5b84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d5b84:	4901      	ldr	r1, [pc, #4]	; (d5b8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d5b86:	f000 b8f9 	b.w	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5b8a:	bf00      	nop
   d5b8c:	000d6ae8 	.word	0x000d6ae8

000d5b90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d5b90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5b92:	2400      	movs	r4, #0
   d5b94:	2310      	movs	r3, #16
   d5b96:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d5b9a:	6803      	ldr	r3, [r0, #0]
   d5b9c:	9400      	str	r4, [sp, #0]
   d5b9e:	699e      	ldr	r6, [r3, #24]
   d5ba0:	f88d 4004 	strb.w	r4, [sp, #4]
   d5ba4:	4615      	mov	r5, r2
   d5ba6:	466b      	mov	r3, sp
   d5ba8:	6812      	ldr	r2, [r2, #0]
   d5baa:	47b0      	blx	r6
   d5bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5bb0:	f003 0306 	and.w	r3, r3, #6
   d5bb4:	2b06      	cmp	r3, #6
   d5bb6:	bf03      	ittte	eq
   d5bb8:	9b00      	ldreq	r3, [sp, #0]
   d5bba:	602b      	streq	r3, [r5, #0]
   d5bbc:	2001      	moveq	r0, #1
   d5bbe:	4620      	movne	r0, r4
   d5bc0:	b004      	add	sp, #16
   d5bc2:	bd70      	pop	{r4, r5, r6, pc}

000d5bc4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d5bc4:	9800      	ldr	r0, [sp, #0]
   d5bc6:	4290      	cmp	r0, r2
   d5bc8:	bf14      	ite	ne
   d5bca:	2001      	movne	r0, #1
   d5bcc:	2006      	moveq	r0, #6
   d5bce:	4770      	bx	lr

000d5bd0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d5bd0:	b510      	push	{r4, lr}
   d5bd2:	4b03      	ldr	r3, [pc, #12]	; (d5be0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d5bd4:	6003      	str	r3, [r0, #0]
   d5bd6:	4604      	mov	r4, r0
   d5bd8:	f000 f8cd 	bl	d5d76 <_ZNSt9type_infoD1Ev>
   d5bdc:	4620      	mov	r0, r4
   d5bde:	bd10      	pop	{r4, pc}
   d5be0:	000d6b28 	.word	0x000d6b28

000d5be4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d5be4:	b510      	push	{r4, lr}
   d5be6:	4604      	mov	r4, r0
   d5be8:	f7ff fff2 	bl	d5bd0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d5bec:	4620      	mov	r0, r4
   d5bee:	2108      	movs	r1, #8
   d5bf0:	f7ff ffc4 	bl	d5b7c <_ZdlPvj>
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	bd10      	pop	{r4, pc}

000d5bf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d5bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bfc:	461f      	mov	r7, r3
   d5bfe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d5c02:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d5c06:	4598      	cmp	r8, r3
   d5c08:	4606      	mov	r6, r0
   d5c0a:	4615      	mov	r5, r2
   d5c0c:	d107      	bne.n	d5c1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5c0e:	9907      	ldr	r1, [sp, #28]
   d5c10:	f000 f8b4 	bl	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5c14:	b118      	cbz	r0, d5c1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5c16:	7165      	strb	r5, [r4, #5]
   d5c18:	2000      	movs	r0, #0
   d5c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c1e:	4639      	mov	r1, r7
   d5c20:	4630      	mov	r0, r6
   d5c22:	f000 f8ab 	bl	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5c26:	2800      	cmp	r0, #0
   d5c28:	d0f6      	beq.n	d5c18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d5c2a:	2301      	movs	r3, #1
   d5c2c:	f8c4 8000 	str.w	r8, [r4]
   d5c30:	7125      	strb	r5, [r4, #4]
   d5c32:	71a3      	strb	r3, [r4, #6]
   d5c34:	e7f0      	b.n	d5c18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d5c36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d5c36:	b538      	push	{r3, r4, r5, lr}
   d5c38:	4615      	mov	r5, r2
   d5c3a:	461c      	mov	r4, r3
   d5c3c:	f000 f89e 	bl	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5c40:	b120      	cbz	r0, d5c4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d5c42:	2308      	movs	r3, #8
   d5c44:	60e3      	str	r3, [r4, #12]
   d5c46:	2306      	movs	r3, #6
   d5c48:	6025      	str	r5, [r4, #0]
   d5c4a:	7123      	strb	r3, [r4, #4]
   d5c4c:	bd38      	pop	{r3, r4, r5, pc}

000d5c4e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d5c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c50:	4605      	mov	r5, r0
   d5c52:	460c      	mov	r4, r1
   d5c54:	9201      	str	r2, [sp, #4]
   d5c56:	461e      	mov	r6, r3
   d5c58:	f000 f890 	bl	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5c5c:	b950      	cbnz	r0, d5c74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5c5e:	2e03      	cmp	r6, #3
   d5c60:	d808      	bhi.n	d5c74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5c62:	6823      	ldr	r3, [r4, #0]
   d5c64:	9a01      	ldr	r2, [sp, #4]
   d5c66:	695b      	ldr	r3, [r3, #20]
   d5c68:	4629      	mov	r1, r5
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	b002      	add	sp, #8
   d5c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5c72:	4718      	bx	r3
   d5c74:	b002      	add	sp, #8
   d5c76:	bd70      	pop	{r4, r5, r6, pc}

000d5c78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d5c78:	b510      	push	{r4, lr}
   d5c7a:	4b03      	ldr	r3, [pc, #12]	; (d5c88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d5c7c:	6003      	str	r3, [r0, #0]
   d5c7e:	4604      	mov	r4, r0
   d5c80:	f7ff ffa6 	bl	d5bd0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d5c84:	4620      	mov	r0, r4
   d5c86:	bd10      	pop	{r4, pc}
   d5c88:	000d6b88 	.word	0x000d6b88

000d5c8c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d5c8c:	b510      	push	{r4, lr}
   d5c8e:	4604      	mov	r4, r0
   d5c90:	f7ff fff2 	bl	d5c78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d5c94:	4620      	mov	r0, r4
   d5c96:	210c      	movs	r1, #12
   d5c98:	f7ff ff70 	bl	d5b7c <_ZdlPvj>
   d5c9c:	4620      	mov	r0, r4
   d5c9e:	bd10      	pop	{r4, pc}

000d5ca0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d5ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5ca2:	9f08      	ldr	r7, [sp, #32]
   d5ca4:	4297      	cmp	r7, r2
   d5ca6:	4605      	mov	r5, r0
   d5ca8:	460e      	mov	r6, r1
   d5caa:	4614      	mov	r4, r2
   d5cac:	d00a      	beq.n	d5cc4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d5cae:	68a8      	ldr	r0, [r5, #8]
   d5cb0:	6802      	ldr	r2, [r0, #0]
   d5cb2:	9708      	str	r7, [sp, #32]
   d5cb4:	6a15      	ldr	r5, [r2, #32]
   d5cb6:	4631      	mov	r1, r6
   d5cb8:	4622      	mov	r2, r4
   d5cba:	46ac      	mov	ip, r5
   d5cbc:	b003      	add	sp, #12
   d5cbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5cc2:	4760      	bx	ip
   d5cc4:	4619      	mov	r1, r3
   d5cc6:	9301      	str	r3, [sp, #4]
   d5cc8:	f000 f858 	bl	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5ccc:	9b01      	ldr	r3, [sp, #4]
   d5cce:	2800      	cmp	r0, #0
   d5cd0:	d0ed      	beq.n	d5cae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d5cd2:	2006      	movs	r0, #6
   d5cd4:	b003      	add	sp, #12
   d5cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d5cd8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cdc:	460d      	mov	r5, r1
   d5cde:	4619      	mov	r1, r3
   d5ce0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d5ce4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d5ce8:	4681      	mov	r9, r0
   d5cea:	4617      	mov	r7, r2
   d5cec:	4698      	mov	r8, r3
   d5cee:	f000 f845 	bl	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5cf2:	b190      	cbz	r0, d5d1a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d5cf4:	2d00      	cmp	r5, #0
   d5cf6:	6034      	str	r4, [r6, #0]
   d5cf8:	7137      	strb	r7, [r6, #4]
   d5cfa:	db09      	blt.n	d5d10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d5cfc:	1961      	adds	r1, r4, r5
   d5cfe:	458a      	cmp	sl, r1
   d5d00:	bf0c      	ite	eq
   d5d02:	2106      	moveq	r1, #6
   d5d04:	2101      	movne	r1, #1
   d5d06:	71b1      	strb	r1, [r6, #6]
   d5d08:	2000      	movs	r0, #0
   d5d0a:	b001      	add	sp, #4
   d5d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d10:	3502      	adds	r5, #2
   d5d12:	d1f9      	bne.n	d5d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5d14:	2301      	movs	r3, #1
   d5d16:	71b3      	strb	r3, [r6, #6]
   d5d18:	e7f6      	b.n	d5d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5d1a:	4554      	cmp	r4, sl
   d5d1c:	d106      	bne.n	d5d2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d5d1e:	4659      	mov	r1, fp
   d5d20:	4648      	mov	r0, r9
   d5d22:	f000 f82b 	bl	d5d7c <_ZNKSt9type_infoeqERKS_>
   d5d26:	b108      	cbz	r0, d5d2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d5d28:	7177      	strb	r7, [r6, #5]
   d5d2a:	e7ed      	b.n	d5d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5d2c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d5d30:	6803      	ldr	r3, [r0, #0]
   d5d32:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d5d36:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d5d3a:	69dc      	ldr	r4, [r3, #28]
   d5d3c:	463a      	mov	r2, r7
   d5d3e:	4643      	mov	r3, r8
   d5d40:	4629      	mov	r1, r5
   d5d42:	46a4      	mov	ip, r4
   d5d44:	b001      	add	sp, #4
   d5d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d4a:	4760      	bx	ip

000d5d4c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d5d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d50:	4607      	mov	r7, r0
   d5d52:	460c      	mov	r4, r1
   d5d54:	4615      	mov	r5, r2
   d5d56:	461e      	mov	r6, r3
   d5d58:	f7ff ff6d 	bl	d5c36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d5d5c:	b948      	cbnz	r0, d5d72 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d5d5e:	68b8      	ldr	r0, [r7, #8]
   d5d60:	6803      	ldr	r3, [r0, #0]
   d5d62:	699f      	ldr	r7, [r3, #24]
   d5d64:	462a      	mov	r2, r5
   d5d66:	4633      	mov	r3, r6
   d5d68:	4621      	mov	r1, r4
   d5d6a:	46bc      	mov	ip, r7
   d5d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5d70:	4760      	bx	ip
   d5d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d76 <_ZNSt9type_infoD1Ev>:
   d5d76:	4770      	bx	lr

000d5d78 <_ZNKSt9type_info14__is_pointer_pEv>:
   d5d78:	2000      	movs	r0, #0
   d5d7a:	4770      	bx	lr

000d5d7c <_ZNKSt9type_infoeqERKS_>:
   d5d7c:	4281      	cmp	r1, r0
   d5d7e:	b508      	push	{r3, lr}
   d5d80:	d00e      	beq.n	d5da0 <_ZNKSt9type_infoeqERKS_+0x24>
   d5d82:	6840      	ldr	r0, [r0, #4]
   d5d84:	7803      	ldrb	r3, [r0, #0]
   d5d86:	2b2a      	cmp	r3, #42	; 0x2a
   d5d88:	d00c      	beq.n	d5da4 <_ZNKSt9type_infoeqERKS_+0x28>
   d5d8a:	6849      	ldr	r1, [r1, #4]
   d5d8c:	780b      	ldrb	r3, [r1, #0]
   d5d8e:	2b2a      	cmp	r3, #42	; 0x2a
   d5d90:	bf08      	it	eq
   d5d92:	3101      	addeq	r1, #1
   d5d94:	f000 fc9a 	bl	d66cc <strcmp>
   d5d98:	fab0 f080 	clz	r0, r0
   d5d9c:	0940      	lsrs	r0, r0, #5
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	2001      	movs	r0, #1
   d5da2:	e7fc      	b.n	d5d9e <_ZNKSt9type_infoeqERKS_+0x22>
   d5da4:	2000      	movs	r0, #0
   d5da6:	e7fa      	b.n	d5d9e <_ZNKSt9type_infoeqERKS_+0x22>

000d5da8 <__aeabi_drsub>:
   d5da8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5dac:	e002      	b.n	d5db4 <__adddf3>
   d5dae:	bf00      	nop

000d5db0 <__aeabi_dsub>:
   d5db0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5db4 <__adddf3>:
   d5db4:	b530      	push	{r4, r5, lr}
   d5db6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5dba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5dbe:	ea94 0f05 	teq	r4, r5
   d5dc2:	bf08      	it	eq
   d5dc4:	ea90 0f02 	teqeq	r0, r2
   d5dc8:	bf1f      	itttt	ne
   d5dca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5dce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5dd2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5dd6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5dda:	f000 80e2 	beq.w	d5fa2 <__adddf3+0x1ee>
   d5dde:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5de2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5de6:	bfb8      	it	lt
   d5de8:	426d      	neglt	r5, r5
   d5dea:	dd0c      	ble.n	d5e06 <__adddf3+0x52>
   d5dec:	442c      	add	r4, r5
   d5dee:	ea80 0202 	eor.w	r2, r0, r2
   d5df2:	ea81 0303 	eor.w	r3, r1, r3
   d5df6:	ea82 0000 	eor.w	r0, r2, r0
   d5dfa:	ea83 0101 	eor.w	r1, r3, r1
   d5dfe:	ea80 0202 	eor.w	r2, r0, r2
   d5e02:	ea81 0303 	eor.w	r3, r1, r3
   d5e06:	2d36      	cmp	r5, #54	; 0x36
   d5e08:	bf88      	it	hi
   d5e0a:	bd30      	pophi	{r4, r5, pc}
   d5e0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5e10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5e14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5e18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5e1c:	d002      	beq.n	d5e24 <__adddf3+0x70>
   d5e1e:	4240      	negs	r0, r0
   d5e20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5e24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5e28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5e30:	d002      	beq.n	d5e38 <__adddf3+0x84>
   d5e32:	4252      	negs	r2, r2
   d5e34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5e38:	ea94 0f05 	teq	r4, r5
   d5e3c:	f000 80a7 	beq.w	d5f8e <__adddf3+0x1da>
   d5e40:	f1a4 0401 	sub.w	r4, r4, #1
   d5e44:	f1d5 0e20 	rsbs	lr, r5, #32
   d5e48:	db0d      	blt.n	d5e66 <__adddf3+0xb2>
   d5e4a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5e4e:	fa22 f205 	lsr.w	r2, r2, r5
   d5e52:	1880      	adds	r0, r0, r2
   d5e54:	f141 0100 	adc.w	r1, r1, #0
   d5e58:	fa03 f20e 	lsl.w	r2, r3, lr
   d5e5c:	1880      	adds	r0, r0, r2
   d5e5e:	fa43 f305 	asr.w	r3, r3, r5
   d5e62:	4159      	adcs	r1, r3
   d5e64:	e00e      	b.n	d5e84 <__adddf3+0xd0>
   d5e66:	f1a5 0520 	sub.w	r5, r5, #32
   d5e6a:	f10e 0e20 	add.w	lr, lr, #32
   d5e6e:	2a01      	cmp	r2, #1
   d5e70:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5e74:	bf28      	it	cs
   d5e76:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5e7a:	fa43 f305 	asr.w	r3, r3, r5
   d5e7e:	18c0      	adds	r0, r0, r3
   d5e80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5e84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e88:	d507      	bpl.n	d5e9a <__adddf3+0xe6>
   d5e8a:	f04f 0e00 	mov.w	lr, #0
   d5e8e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5e92:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5e96:	eb6e 0101 	sbc.w	r1, lr, r1
   d5e9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5e9e:	d31b      	bcc.n	d5ed8 <__adddf3+0x124>
   d5ea0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5ea4:	d30c      	bcc.n	d5ec0 <__adddf3+0x10c>
   d5ea6:	0849      	lsrs	r1, r1, #1
   d5ea8:	ea5f 0030 	movs.w	r0, r0, rrx
   d5eac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5eb0:	f104 0401 	add.w	r4, r4, #1
   d5eb4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5eb8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5ebc:	f080 809a 	bcs.w	d5ff4 <__adddf3+0x240>
   d5ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5ec4:	bf08      	it	eq
   d5ec6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5eca:	f150 0000 	adcs.w	r0, r0, #0
   d5ece:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ed2:	ea41 0105 	orr.w	r1, r1, r5
   d5ed6:	bd30      	pop	{r4, r5, pc}
   d5ed8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5edc:	4140      	adcs	r0, r0
   d5ede:	eb41 0101 	adc.w	r1, r1, r1
   d5ee2:	3c01      	subs	r4, #1
   d5ee4:	bf28      	it	cs
   d5ee6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5eea:	d2e9      	bcs.n	d5ec0 <__adddf3+0x10c>
   d5eec:	f091 0f00 	teq	r1, #0
   d5ef0:	bf04      	itt	eq
   d5ef2:	4601      	moveq	r1, r0
   d5ef4:	2000      	moveq	r0, #0
   d5ef6:	fab1 f381 	clz	r3, r1
   d5efa:	bf08      	it	eq
   d5efc:	3320      	addeq	r3, #32
   d5efe:	f1a3 030b 	sub.w	r3, r3, #11
   d5f02:	f1b3 0220 	subs.w	r2, r3, #32
   d5f06:	da0c      	bge.n	d5f22 <__adddf3+0x16e>
   d5f08:	320c      	adds	r2, #12
   d5f0a:	dd08      	ble.n	d5f1e <__adddf3+0x16a>
   d5f0c:	f102 0c14 	add.w	ip, r2, #20
   d5f10:	f1c2 020c 	rsb	r2, r2, #12
   d5f14:	fa01 f00c 	lsl.w	r0, r1, ip
   d5f18:	fa21 f102 	lsr.w	r1, r1, r2
   d5f1c:	e00c      	b.n	d5f38 <__adddf3+0x184>
   d5f1e:	f102 0214 	add.w	r2, r2, #20
   d5f22:	bfd8      	it	le
   d5f24:	f1c2 0c20 	rsble	ip, r2, #32
   d5f28:	fa01 f102 	lsl.w	r1, r1, r2
   d5f2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5f30:	bfdc      	itt	le
   d5f32:	ea41 010c 	orrle.w	r1, r1, ip
   d5f36:	4090      	lslle	r0, r2
   d5f38:	1ae4      	subs	r4, r4, r3
   d5f3a:	bfa2      	ittt	ge
   d5f3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5f40:	4329      	orrge	r1, r5
   d5f42:	bd30      	popge	{r4, r5, pc}
   d5f44:	ea6f 0404 	mvn.w	r4, r4
   d5f48:	3c1f      	subs	r4, #31
   d5f4a:	da1c      	bge.n	d5f86 <__adddf3+0x1d2>
   d5f4c:	340c      	adds	r4, #12
   d5f4e:	dc0e      	bgt.n	d5f6e <__adddf3+0x1ba>
   d5f50:	f104 0414 	add.w	r4, r4, #20
   d5f54:	f1c4 0220 	rsb	r2, r4, #32
   d5f58:	fa20 f004 	lsr.w	r0, r0, r4
   d5f5c:	fa01 f302 	lsl.w	r3, r1, r2
   d5f60:	ea40 0003 	orr.w	r0, r0, r3
   d5f64:	fa21 f304 	lsr.w	r3, r1, r4
   d5f68:	ea45 0103 	orr.w	r1, r5, r3
   d5f6c:	bd30      	pop	{r4, r5, pc}
   d5f6e:	f1c4 040c 	rsb	r4, r4, #12
   d5f72:	f1c4 0220 	rsb	r2, r4, #32
   d5f76:	fa20 f002 	lsr.w	r0, r0, r2
   d5f7a:	fa01 f304 	lsl.w	r3, r1, r4
   d5f7e:	ea40 0003 	orr.w	r0, r0, r3
   d5f82:	4629      	mov	r1, r5
   d5f84:	bd30      	pop	{r4, r5, pc}
   d5f86:	fa21 f004 	lsr.w	r0, r1, r4
   d5f8a:	4629      	mov	r1, r5
   d5f8c:	bd30      	pop	{r4, r5, pc}
   d5f8e:	f094 0f00 	teq	r4, #0
   d5f92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5f96:	bf06      	itte	eq
   d5f98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5f9c:	3401      	addeq	r4, #1
   d5f9e:	3d01      	subne	r5, #1
   d5fa0:	e74e      	b.n	d5e40 <__adddf3+0x8c>
   d5fa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5fa6:	bf18      	it	ne
   d5fa8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5fac:	d029      	beq.n	d6002 <__adddf3+0x24e>
   d5fae:	ea94 0f05 	teq	r4, r5
   d5fb2:	bf08      	it	eq
   d5fb4:	ea90 0f02 	teqeq	r0, r2
   d5fb8:	d005      	beq.n	d5fc6 <__adddf3+0x212>
   d5fba:	ea54 0c00 	orrs.w	ip, r4, r0
   d5fbe:	bf04      	itt	eq
   d5fc0:	4619      	moveq	r1, r3
   d5fc2:	4610      	moveq	r0, r2
   d5fc4:	bd30      	pop	{r4, r5, pc}
   d5fc6:	ea91 0f03 	teq	r1, r3
   d5fca:	bf1e      	ittt	ne
   d5fcc:	2100      	movne	r1, #0
   d5fce:	2000      	movne	r0, #0
   d5fd0:	bd30      	popne	{r4, r5, pc}
   d5fd2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5fd6:	d105      	bne.n	d5fe4 <__adddf3+0x230>
   d5fd8:	0040      	lsls	r0, r0, #1
   d5fda:	4149      	adcs	r1, r1
   d5fdc:	bf28      	it	cs
   d5fde:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5fe2:	bd30      	pop	{r4, r5, pc}
   d5fe4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5fe8:	bf3c      	itt	cc
   d5fea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5fee:	bd30      	popcc	{r4, r5, pc}
   d5ff0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ff4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5ff8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5ffc:	f04f 0000 	mov.w	r0, #0
   d6000:	bd30      	pop	{r4, r5, pc}
   d6002:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6006:	bf1a      	itte	ne
   d6008:	4619      	movne	r1, r3
   d600a:	4610      	movne	r0, r2
   d600c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6010:	bf1c      	itt	ne
   d6012:	460b      	movne	r3, r1
   d6014:	4602      	movne	r2, r0
   d6016:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d601a:	bf06      	itte	eq
   d601c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6020:	ea91 0f03 	teqeq	r1, r3
   d6024:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6028:	bd30      	pop	{r4, r5, pc}
   d602a:	bf00      	nop

000d602c <__aeabi_ui2d>:
   d602c:	f090 0f00 	teq	r0, #0
   d6030:	bf04      	itt	eq
   d6032:	2100      	moveq	r1, #0
   d6034:	4770      	bxeq	lr
   d6036:	b530      	push	{r4, r5, lr}
   d6038:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d603c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6040:	f04f 0500 	mov.w	r5, #0
   d6044:	f04f 0100 	mov.w	r1, #0
   d6048:	e750      	b.n	d5eec <__adddf3+0x138>
   d604a:	bf00      	nop

000d604c <__aeabi_i2d>:
   d604c:	f090 0f00 	teq	r0, #0
   d6050:	bf04      	itt	eq
   d6052:	2100      	moveq	r1, #0
   d6054:	4770      	bxeq	lr
   d6056:	b530      	push	{r4, r5, lr}
   d6058:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d605c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6060:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6064:	bf48      	it	mi
   d6066:	4240      	negmi	r0, r0
   d6068:	f04f 0100 	mov.w	r1, #0
   d606c:	e73e      	b.n	d5eec <__adddf3+0x138>
   d606e:	bf00      	nop

000d6070 <__aeabi_f2d>:
   d6070:	0042      	lsls	r2, r0, #1
   d6072:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6076:	ea4f 0131 	mov.w	r1, r1, rrx
   d607a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d607e:	bf1f      	itttt	ne
   d6080:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6084:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6088:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d608c:	4770      	bxne	lr
   d608e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6092:	bf08      	it	eq
   d6094:	4770      	bxeq	lr
   d6096:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d609a:	bf04      	itt	eq
   d609c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d60a0:	4770      	bxeq	lr
   d60a2:	b530      	push	{r4, r5, lr}
   d60a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d60a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d60b0:	e71c      	b.n	d5eec <__adddf3+0x138>
   d60b2:	bf00      	nop

000d60b4 <__aeabi_ul2d>:
   d60b4:	ea50 0201 	orrs.w	r2, r0, r1
   d60b8:	bf08      	it	eq
   d60ba:	4770      	bxeq	lr
   d60bc:	b530      	push	{r4, r5, lr}
   d60be:	f04f 0500 	mov.w	r5, #0
   d60c2:	e00a      	b.n	d60da <__aeabi_l2d+0x16>

000d60c4 <__aeabi_l2d>:
   d60c4:	ea50 0201 	orrs.w	r2, r0, r1
   d60c8:	bf08      	it	eq
   d60ca:	4770      	bxeq	lr
   d60cc:	b530      	push	{r4, r5, lr}
   d60ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d60d2:	d502      	bpl.n	d60da <__aeabi_l2d+0x16>
   d60d4:	4240      	negs	r0, r0
   d60d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d60da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d60e6:	f43f aed8 	beq.w	d5e9a <__adddf3+0xe6>
   d60ea:	f04f 0203 	mov.w	r2, #3
   d60ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60f2:	bf18      	it	ne
   d60f4:	3203      	addne	r2, #3
   d60f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60fa:	bf18      	it	ne
   d60fc:	3203      	addne	r2, #3
   d60fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6102:	f1c2 0320 	rsb	r3, r2, #32
   d6106:	fa00 fc03 	lsl.w	ip, r0, r3
   d610a:	fa20 f002 	lsr.w	r0, r0, r2
   d610e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6112:	ea40 000e 	orr.w	r0, r0, lr
   d6116:	fa21 f102 	lsr.w	r1, r1, r2
   d611a:	4414      	add	r4, r2
   d611c:	e6bd      	b.n	d5e9a <__adddf3+0xe6>
   d611e:	bf00      	nop

000d6120 <__aeabi_dmul>:
   d6120:	b570      	push	{r4, r5, r6, lr}
   d6122:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6126:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d612a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d612e:	bf1d      	ittte	ne
   d6130:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6134:	ea94 0f0c 	teqne	r4, ip
   d6138:	ea95 0f0c 	teqne	r5, ip
   d613c:	f000 f8de 	bleq	d62fc <__aeabi_dmul+0x1dc>
   d6140:	442c      	add	r4, r5
   d6142:	ea81 0603 	eor.w	r6, r1, r3
   d6146:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d614a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d614e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6152:	bf18      	it	ne
   d6154:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d615c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6160:	d038      	beq.n	d61d4 <__aeabi_dmul+0xb4>
   d6162:	fba0 ce02 	umull	ip, lr, r0, r2
   d6166:	f04f 0500 	mov.w	r5, #0
   d616a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d616e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6172:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6176:	f04f 0600 	mov.w	r6, #0
   d617a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d617e:	f09c 0f00 	teq	ip, #0
   d6182:	bf18      	it	ne
   d6184:	f04e 0e01 	orrne.w	lr, lr, #1
   d6188:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d618c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6190:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6194:	d204      	bcs.n	d61a0 <__aeabi_dmul+0x80>
   d6196:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d619a:	416d      	adcs	r5, r5
   d619c:	eb46 0606 	adc.w	r6, r6, r6
   d61a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d61a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d61a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d61ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d61b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d61b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d61b8:	bf88      	it	hi
   d61ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d61be:	d81e      	bhi.n	d61fe <__aeabi_dmul+0xde>
   d61c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d61c4:	bf08      	it	eq
   d61c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d61ca:	f150 0000 	adcs.w	r0, r0, #0
   d61ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d61d2:	bd70      	pop	{r4, r5, r6, pc}
   d61d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d61d8:	ea46 0101 	orr.w	r1, r6, r1
   d61dc:	ea40 0002 	orr.w	r0, r0, r2
   d61e0:	ea81 0103 	eor.w	r1, r1, r3
   d61e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d61e8:	bfc2      	ittt	gt
   d61ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d61ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61f2:	bd70      	popgt	{r4, r5, r6, pc}
   d61f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61f8:	f04f 0e00 	mov.w	lr, #0
   d61fc:	3c01      	subs	r4, #1
   d61fe:	f300 80ab 	bgt.w	d6358 <__aeabi_dmul+0x238>
   d6202:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6206:	bfde      	ittt	le
   d6208:	2000      	movle	r0, #0
   d620a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d620e:	bd70      	pople	{r4, r5, r6, pc}
   d6210:	f1c4 0400 	rsb	r4, r4, #0
   d6214:	3c20      	subs	r4, #32
   d6216:	da35      	bge.n	d6284 <__aeabi_dmul+0x164>
   d6218:	340c      	adds	r4, #12
   d621a:	dc1b      	bgt.n	d6254 <__aeabi_dmul+0x134>
   d621c:	f104 0414 	add.w	r4, r4, #20
   d6220:	f1c4 0520 	rsb	r5, r4, #32
   d6224:	fa00 f305 	lsl.w	r3, r0, r5
   d6228:	fa20 f004 	lsr.w	r0, r0, r4
   d622c:	fa01 f205 	lsl.w	r2, r1, r5
   d6230:	ea40 0002 	orr.w	r0, r0, r2
   d6234:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d623c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6240:	fa21 f604 	lsr.w	r6, r1, r4
   d6244:	eb42 0106 	adc.w	r1, r2, r6
   d6248:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d624c:	bf08      	it	eq
   d624e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6252:	bd70      	pop	{r4, r5, r6, pc}
   d6254:	f1c4 040c 	rsb	r4, r4, #12
   d6258:	f1c4 0520 	rsb	r5, r4, #32
   d625c:	fa00 f304 	lsl.w	r3, r0, r4
   d6260:	fa20 f005 	lsr.w	r0, r0, r5
   d6264:	fa01 f204 	lsl.w	r2, r1, r4
   d6268:	ea40 0002 	orr.w	r0, r0, r2
   d626c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6270:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6274:	f141 0100 	adc.w	r1, r1, #0
   d6278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d627c:	bf08      	it	eq
   d627e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6282:	bd70      	pop	{r4, r5, r6, pc}
   d6284:	f1c4 0520 	rsb	r5, r4, #32
   d6288:	fa00 f205 	lsl.w	r2, r0, r5
   d628c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6290:	fa20 f304 	lsr.w	r3, r0, r4
   d6294:	fa01 f205 	lsl.w	r2, r1, r5
   d6298:	ea43 0302 	orr.w	r3, r3, r2
   d629c:	fa21 f004 	lsr.w	r0, r1, r4
   d62a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62a4:	fa21 f204 	lsr.w	r2, r1, r4
   d62a8:	ea20 0002 	bic.w	r0, r0, r2
   d62ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d62b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d62b4:	bf08      	it	eq
   d62b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d62ba:	bd70      	pop	{r4, r5, r6, pc}
   d62bc:	f094 0f00 	teq	r4, #0
   d62c0:	d10f      	bne.n	d62e2 <__aeabi_dmul+0x1c2>
   d62c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d62c6:	0040      	lsls	r0, r0, #1
   d62c8:	eb41 0101 	adc.w	r1, r1, r1
   d62cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62d0:	bf08      	it	eq
   d62d2:	3c01      	subeq	r4, #1
   d62d4:	d0f7      	beq.n	d62c6 <__aeabi_dmul+0x1a6>
   d62d6:	ea41 0106 	orr.w	r1, r1, r6
   d62da:	f095 0f00 	teq	r5, #0
   d62de:	bf18      	it	ne
   d62e0:	4770      	bxne	lr
   d62e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d62e6:	0052      	lsls	r2, r2, #1
   d62e8:	eb43 0303 	adc.w	r3, r3, r3
   d62ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d62f0:	bf08      	it	eq
   d62f2:	3d01      	subeq	r5, #1
   d62f4:	d0f7      	beq.n	d62e6 <__aeabi_dmul+0x1c6>
   d62f6:	ea43 0306 	orr.w	r3, r3, r6
   d62fa:	4770      	bx	lr
   d62fc:	ea94 0f0c 	teq	r4, ip
   d6300:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6304:	bf18      	it	ne
   d6306:	ea95 0f0c 	teqne	r5, ip
   d630a:	d00c      	beq.n	d6326 <__aeabi_dmul+0x206>
   d630c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6310:	bf18      	it	ne
   d6312:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6316:	d1d1      	bne.n	d62bc <__aeabi_dmul+0x19c>
   d6318:	ea81 0103 	eor.w	r1, r1, r3
   d631c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6320:	f04f 0000 	mov.w	r0, #0
   d6324:	bd70      	pop	{r4, r5, r6, pc}
   d6326:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d632a:	bf06      	itte	eq
   d632c:	4610      	moveq	r0, r2
   d632e:	4619      	moveq	r1, r3
   d6330:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6334:	d019      	beq.n	d636a <__aeabi_dmul+0x24a>
   d6336:	ea94 0f0c 	teq	r4, ip
   d633a:	d102      	bne.n	d6342 <__aeabi_dmul+0x222>
   d633c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6340:	d113      	bne.n	d636a <__aeabi_dmul+0x24a>
   d6342:	ea95 0f0c 	teq	r5, ip
   d6346:	d105      	bne.n	d6354 <__aeabi_dmul+0x234>
   d6348:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d634c:	bf1c      	itt	ne
   d634e:	4610      	movne	r0, r2
   d6350:	4619      	movne	r1, r3
   d6352:	d10a      	bne.n	d636a <__aeabi_dmul+0x24a>
   d6354:	ea81 0103 	eor.w	r1, r1, r3
   d6358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d635c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6364:	f04f 0000 	mov.w	r0, #0
   d6368:	bd70      	pop	{r4, r5, r6, pc}
   d636a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d636e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6372:	bd70      	pop	{r4, r5, r6, pc}

000d6374 <__aeabi_ddiv>:
   d6374:	b570      	push	{r4, r5, r6, lr}
   d6376:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d637a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d637e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6382:	bf1d      	ittte	ne
   d6384:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6388:	ea94 0f0c 	teqne	r4, ip
   d638c:	ea95 0f0c 	teqne	r5, ip
   d6390:	f000 f8a7 	bleq	d64e2 <__aeabi_ddiv+0x16e>
   d6394:	eba4 0405 	sub.w	r4, r4, r5
   d6398:	ea81 0e03 	eor.w	lr, r1, r3
   d639c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d63a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d63a4:	f000 8088 	beq.w	d64b8 <__aeabi_ddiv+0x144>
   d63a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d63ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d63b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d63b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d63b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d63bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d63c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d63c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d63c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d63cc:	429d      	cmp	r5, r3
   d63ce:	bf08      	it	eq
   d63d0:	4296      	cmpeq	r6, r2
   d63d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d63d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d63da:	d202      	bcs.n	d63e2 <__aeabi_ddiv+0x6e>
   d63dc:	085b      	lsrs	r3, r3, #1
   d63de:	ea4f 0232 	mov.w	r2, r2, rrx
   d63e2:	1ab6      	subs	r6, r6, r2
   d63e4:	eb65 0503 	sbc.w	r5, r5, r3
   d63e8:	085b      	lsrs	r3, r3, #1
   d63ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d63ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d63f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d63f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d63fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63fe:	bf22      	ittt	cs
   d6400:	1ab6      	subcs	r6, r6, r2
   d6402:	4675      	movcs	r5, lr
   d6404:	ea40 000c 	orrcs.w	r0, r0, ip
   d6408:	085b      	lsrs	r3, r3, #1
   d640a:	ea4f 0232 	mov.w	r2, r2, rrx
   d640e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6412:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6416:	bf22      	ittt	cs
   d6418:	1ab6      	subcs	r6, r6, r2
   d641a:	4675      	movcs	r5, lr
   d641c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6420:	085b      	lsrs	r3, r3, #1
   d6422:	ea4f 0232 	mov.w	r2, r2, rrx
   d6426:	ebb6 0e02 	subs.w	lr, r6, r2
   d642a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d642e:	bf22      	ittt	cs
   d6430:	1ab6      	subcs	r6, r6, r2
   d6432:	4675      	movcs	r5, lr
   d6434:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6438:	085b      	lsrs	r3, r3, #1
   d643a:	ea4f 0232 	mov.w	r2, r2, rrx
   d643e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6442:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6446:	bf22      	ittt	cs
   d6448:	1ab6      	subcs	r6, r6, r2
   d644a:	4675      	movcs	r5, lr
   d644c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6450:	ea55 0e06 	orrs.w	lr, r5, r6
   d6454:	d018      	beq.n	d6488 <__aeabi_ddiv+0x114>
   d6456:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d645a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d645e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6462:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6466:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d646a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d646e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6472:	d1c0      	bne.n	d63f6 <__aeabi_ddiv+0x82>
   d6474:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6478:	d10b      	bne.n	d6492 <__aeabi_ddiv+0x11e>
   d647a:	ea41 0100 	orr.w	r1, r1, r0
   d647e:	f04f 0000 	mov.w	r0, #0
   d6482:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6486:	e7b6      	b.n	d63f6 <__aeabi_ddiv+0x82>
   d6488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d648c:	bf04      	itt	eq
   d648e:	4301      	orreq	r1, r0
   d6490:	2000      	moveq	r0, #0
   d6492:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6496:	bf88      	it	hi
   d6498:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d649c:	f63f aeaf 	bhi.w	d61fe <__aeabi_dmul+0xde>
   d64a0:	ebb5 0c03 	subs.w	ip, r5, r3
   d64a4:	bf04      	itt	eq
   d64a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d64aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d64ae:	f150 0000 	adcs.w	r0, r0, #0
   d64b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d64b6:	bd70      	pop	{r4, r5, r6, pc}
   d64b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d64bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d64c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d64c4:	bfc2      	ittt	gt
   d64c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d64ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d64ce:	bd70      	popgt	{r4, r5, r6, pc}
   d64d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64d4:	f04f 0e00 	mov.w	lr, #0
   d64d8:	3c01      	subs	r4, #1
   d64da:	e690      	b.n	d61fe <__aeabi_dmul+0xde>
   d64dc:	ea45 0e06 	orr.w	lr, r5, r6
   d64e0:	e68d      	b.n	d61fe <__aeabi_dmul+0xde>
   d64e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d64e6:	ea94 0f0c 	teq	r4, ip
   d64ea:	bf08      	it	eq
   d64ec:	ea95 0f0c 	teqeq	r5, ip
   d64f0:	f43f af3b 	beq.w	d636a <__aeabi_dmul+0x24a>
   d64f4:	ea94 0f0c 	teq	r4, ip
   d64f8:	d10a      	bne.n	d6510 <__aeabi_ddiv+0x19c>
   d64fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d64fe:	f47f af34 	bne.w	d636a <__aeabi_dmul+0x24a>
   d6502:	ea95 0f0c 	teq	r5, ip
   d6506:	f47f af25 	bne.w	d6354 <__aeabi_dmul+0x234>
   d650a:	4610      	mov	r0, r2
   d650c:	4619      	mov	r1, r3
   d650e:	e72c      	b.n	d636a <__aeabi_dmul+0x24a>
   d6510:	ea95 0f0c 	teq	r5, ip
   d6514:	d106      	bne.n	d6524 <__aeabi_ddiv+0x1b0>
   d6516:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d651a:	f43f aefd 	beq.w	d6318 <__aeabi_dmul+0x1f8>
   d651e:	4610      	mov	r0, r2
   d6520:	4619      	mov	r1, r3
   d6522:	e722      	b.n	d636a <__aeabi_dmul+0x24a>
   d6524:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6528:	bf18      	it	ne
   d652a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d652e:	f47f aec5 	bne.w	d62bc <__aeabi_dmul+0x19c>
   d6532:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6536:	f47f af0d 	bne.w	d6354 <__aeabi_dmul+0x234>
   d653a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d653e:	f47f aeeb 	bne.w	d6318 <__aeabi_dmul+0x1f8>
   d6542:	e712      	b.n	d636a <__aeabi_dmul+0x24a>

000d6544 <__aeabi_d2f>:
   d6544:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6548:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d654c:	bf24      	itt	cs
   d654e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6552:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6556:	d90d      	bls.n	d6574 <__aeabi_d2f+0x30>
   d6558:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d655c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6560:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6564:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6568:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d656c:	bf08      	it	eq
   d656e:	f020 0001 	biceq.w	r0, r0, #1
   d6572:	4770      	bx	lr
   d6574:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6578:	d121      	bne.n	d65be <__aeabi_d2f+0x7a>
   d657a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d657e:	bfbc      	itt	lt
   d6580:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6584:	4770      	bxlt	lr
   d6586:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d658a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d658e:	f1c2 0218 	rsb	r2, r2, #24
   d6592:	f1c2 0c20 	rsb	ip, r2, #32
   d6596:	fa10 f30c 	lsls.w	r3, r0, ip
   d659a:	fa20 f002 	lsr.w	r0, r0, r2
   d659e:	bf18      	it	ne
   d65a0:	f040 0001 	orrne.w	r0, r0, #1
   d65a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d65ac:	fa03 fc0c 	lsl.w	ip, r3, ip
   d65b0:	ea40 000c 	orr.w	r0, r0, ip
   d65b4:	fa23 f302 	lsr.w	r3, r3, r2
   d65b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d65bc:	e7cc      	b.n	d6558 <__aeabi_d2f+0x14>
   d65be:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d65c2:	d107      	bne.n	d65d4 <__aeabi_d2f+0x90>
   d65c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d65c8:	bf1e      	ittt	ne
   d65ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d65ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d65d2:	4770      	bxne	lr
   d65d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d65d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d65dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d65e0:	4770      	bx	lr
   d65e2:	bf00      	nop

000d65e4 <atexit>:
   d65e4:	2300      	movs	r3, #0
   d65e6:	4601      	mov	r1, r0
   d65e8:	461a      	mov	r2, r3
   d65ea:	4618      	mov	r0, r3
   d65ec:	f000 b880 	b.w	d66f0 <__register_exitproc>

000d65f0 <memcpy>:
   d65f0:	440a      	add	r2, r1
   d65f2:	4291      	cmp	r1, r2
   d65f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d65f8:	d100      	bne.n	d65fc <memcpy+0xc>
   d65fa:	4770      	bx	lr
   d65fc:	b510      	push	{r4, lr}
   d65fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6602:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6606:	4291      	cmp	r1, r2
   d6608:	d1f9      	bne.n	d65fe <memcpy+0xe>
   d660a:	bd10      	pop	{r4, pc}

000d660c <memset>:
   d660c:	4402      	add	r2, r0
   d660e:	4603      	mov	r3, r0
   d6610:	4293      	cmp	r3, r2
   d6612:	d100      	bne.n	d6616 <memset+0xa>
   d6614:	4770      	bx	lr
   d6616:	f803 1b01 	strb.w	r1, [r3], #1
   d661a:	e7f9      	b.n	d6610 <memset+0x4>

000d661c <srand>:
   d661c:	b538      	push	{r3, r4, r5, lr}
   d661e:	4b0d      	ldr	r3, [pc, #52]	; (d6654 <srand+0x38>)
   d6620:	681d      	ldr	r5, [r3, #0]
   d6622:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6624:	4604      	mov	r4, r0
   d6626:	b97b      	cbnz	r3, d6648 <srand+0x2c>
   d6628:	2018      	movs	r0, #24
   d662a:	f7fe fa7d 	bl	d4b28 <malloc>
   d662e:	4a0a      	ldr	r2, [pc, #40]	; (d6658 <srand+0x3c>)
   d6630:	4b0a      	ldr	r3, [pc, #40]	; (d665c <srand+0x40>)
   d6632:	63a8      	str	r0, [r5, #56]	; 0x38
   d6634:	e9c0 2300 	strd	r2, r3, [r0]
   d6638:	4b09      	ldr	r3, [pc, #36]	; (d6660 <srand+0x44>)
   d663a:	6083      	str	r3, [r0, #8]
   d663c:	230b      	movs	r3, #11
   d663e:	8183      	strh	r3, [r0, #12]
   d6640:	2201      	movs	r2, #1
   d6642:	2300      	movs	r3, #0
   d6644:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6648:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d664a:	2200      	movs	r2, #0
   d664c:	611c      	str	r4, [r3, #16]
   d664e:	615a      	str	r2, [r3, #20]
   d6650:	bd38      	pop	{r3, r4, r5, pc}
   d6652:	bf00      	nop
   d6654:	2003e3e0 	.word	0x2003e3e0
   d6658:	abcd330e 	.word	0xabcd330e
   d665c:	e66d1234 	.word	0xe66d1234
   d6660:	0005deec 	.word	0x0005deec

000d6664 <rand>:
   d6664:	4b13      	ldr	r3, [pc, #76]	; (d66b4 <rand+0x50>)
   d6666:	b510      	push	{r4, lr}
   d6668:	681c      	ldr	r4, [r3, #0]
   d666a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d666c:	b97b      	cbnz	r3, d668e <rand+0x2a>
   d666e:	2018      	movs	r0, #24
   d6670:	f7fe fa5a 	bl	d4b28 <malloc>
   d6674:	4a10      	ldr	r2, [pc, #64]	; (d66b8 <rand+0x54>)
   d6676:	4b11      	ldr	r3, [pc, #68]	; (d66bc <rand+0x58>)
   d6678:	63a0      	str	r0, [r4, #56]	; 0x38
   d667a:	e9c0 2300 	strd	r2, r3, [r0]
   d667e:	4b10      	ldr	r3, [pc, #64]	; (d66c0 <rand+0x5c>)
   d6680:	6083      	str	r3, [r0, #8]
   d6682:	230b      	movs	r3, #11
   d6684:	8183      	strh	r3, [r0, #12]
   d6686:	2201      	movs	r2, #1
   d6688:	2300      	movs	r3, #0
   d668a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d668e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6690:	480c      	ldr	r0, [pc, #48]	; (d66c4 <rand+0x60>)
   d6692:	690a      	ldr	r2, [r1, #16]
   d6694:	694b      	ldr	r3, [r1, #20]
   d6696:	4c0c      	ldr	r4, [pc, #48]	; (d66c8 <rand+0x64>)
   d6698:	4350      	muls	r0, r2
   d669a:	fb04 0003 	mla	r0, r4, r3, r0
   d669e:	fba2 3404 	umull	r3, r4, r2, r4
   d66a2:	1c5a      	adds	r2, r3, #1
   d66a4:	4404      	add	r4, r0
   d66a6:	f144 0000 	adc.w	r0, r4, #0
   d66aa:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d66ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d66b2:	bd10      	pop	{r4, pc}
   d66b4:	2003e3e0 	.word	0x2003e3e0
   d66b8:	abcd330e 	.word	0xabcd330e
   d66bc:	e66d1234 	.word	0xe66d1234
   d66c0:	0005deec 	.word	0x0005deec
   d66c4:	5851f42d 	.word	0x5851f42d
   d66c8:	4c957f2d 	.word	0x4c957f2d

000d66cc <strcmp>:
   d66cc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d66d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d66d4:	2a01      	cmp	r2, #1
   d66d6:	bf28      	it	cs
   d66d8:	429a      	cmpcs	r2, r3
   d66da:	d0f7      	beq.n	d66cc <strcmp>
   d66dc:	1ad0      	subs	r0, r2, r3
   d66de:	4770      	bx	lr

000d66e0 <strlen>:
   d66e0:	4603      	mov	r3, r0
   d66e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d66e6:	2a00      	cmp	r2, #0
   d66e8:	d1fb      	bne.n	d66e2 <strlen+0x2>
   d66ea:	1a18      	subs	r0, r3, r0
   d66ec:	3801      	subs	r0, #1
   d66ee:	4770      	bx	lr

000d66f0 <__register_exitproc>:
   d66f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d66f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d67b0 <__register_exitproc+0xc0>
   d66f8:	4606      	mov	r6, r0
   d66fa:	f8d8 0000 	ldr.w	r0, [r8]
   d66fe:	461f      	mov	r7, r3
   d6700:	460d      	mov	r5, r1
   d6702:	4691      	mov	r9, r2
   d6704:	f000 f856 	bl	d67b4 <__retarget_lock_acquire_recursive>
   d6708:	4b25      	ldr	r3, [pc, #148]	; (d67a0 <__register_exitproc+0xb0>)
   d670a:	681c      	ldr	r4, [r3, #0]
   d670c:	b934      	cbnz	r4, d671c <__register_exitproc+0x2c>
   d670e:	4c25      	ldr	r4, [pc, #148]	; (d67a4 <__register_exitproc+0xb4>)
   d6710:	601c      	str	r4, [r3, #0]
   d6712:	4b25      	ldr	r3, [pc, #148]	; (d67a8 <__register_exitproc+0xb8>)
   d6714:	b113      	cbz	r3, d671c <__register_exitproc+0x2c>
   d6716:	681b      	ldr	r3, [r3, #0]
   d6718:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d671c:	6863      	ldr	r3, [r4, #4]
   d671e:	2b1f      	cmp	r3, #31
   d6720:	dd07      	ble.n	d6732 <__register_exitproc+0x42>
   d6722:	f8d8 0000 	ldr.w	r0, [r8]
   d6726:	f000 f847 	bl	d67b8 <__retarget_lock_release_recursive>
   d672a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d672e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6732:	b34e      	cbz	r6, d6788 <__register_exitproc+0x98>
   d6734:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6738:	b988      	cbnz	r0, d675e <__register_exitproc+0x6e>
   d673a:	4b1c      	ldr	r3, [pc, #112]	; (d67ac <__register_exitproc+0xbc>)
   d673c:	b923      	cbnz	r3, d6748 <__register_exitproc+0x58>
   d673e:	f8d8 0000 	ldr.w	r0, [r8]
   d6742:	f000 f838 	bl	d67b6 <__retarget_lock_release>
   d6746:	e7f0      	b.n	d672a <__register_exitproc+0x3a>
   d6748:	f44f 7084 	mov.w	r0, #264	; 0x108
   d674c:	f7fe f9ec 	bl	d4b28 <malloc>
   d6750:	2800      	cmp	r0, #0
   d6752:	d0f4      	beq.n	d673e <__register_exitproc+0x4e>
   d6754:	2300      	movs	r3, #0
   d6756:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d675a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d675e:	6863      	ldr	r3, [r4, #4]
   d6760:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6764:	2201      	movs	r2, #1
   d6766:	409a      	lsls	r2, r3
   d6768:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d676c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d6770:	4313      	orrs	r3, r2
   d6772:	2e02      	cmp	r6, #2
   d6774:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d6778:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d677c:	bf02      	ittt	eq
   d677e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d6782:	431a      	orreq	r2, r3
   d6784:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6788:	6863      	ldr	r3, [r4, #4]
   d678a:	f8d8 0000 	ldr.w	r0, [r8]
   d678e:	1c5a      	adds	r2, r3, #1
   d6790:	3302      	adds	r3, #2
   d6792:	6062      	str	r2, [r4, #4]
   d6794:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6798:	f000 f80e 	bl	d67b8 <__retarget_lock_release_recursive>
   d679c:	2000      	movs	r0, #0
   d679e:	e7c6      	b.n	d672e <__register_exitproc+0x3e>
   d67a0:	2003e7e0 	.word	0x2003e7e0
   d67a4:	2003e754 	.word	0x2003e754
   d67a8:	00000000 	.word	0x00000000
   d67ac:	000d4b29 	.word	0x000d4b29
   d67b0:	2003e444 	.word	0x2003e444

000d67b4 <__retarget_lock_acquire_recursive>:
   d67b4:	4770      	bx	lr

000d67b6 <__retarget_lock_release>:
   d67b6:	4770      	bx	lr

000d67b8 <__retarget_lock_release_recursive>:
   d67b8:	4770      	bx	lr

000d67ba <link_code_end>:
	...

000d67bc <dynalib_user>:
   d67bc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d67cc:	0000 0000 227b 3174 3a22 2e25 6632 222c     ....{"t1":%.2f,"
   d67dc:	3274 3a22 2e25 6632 007d 716d 7474 7542     t2":%.2f}.mqttBu
   d67ec:	3a66 2520 0a73 6973 657a 664f 6d28 7471     f: %s.sizeOf(mqt
   d67fc:	4274 6675 3a29 2520 2f69 006e 3176 642f     tBuf): %i/n.v1/d
   d680c:	7665 6369 7365 6d2f 2f65 6574 656c 656d     evices/me/teleme
   d681c:	7274 0079 6c70 6d75 4365 6e6f 656e 7463     try.plumeConnect
   d682c:	2928 203a 7441 6574 706d 6974 676e 7420     (): Attempting t
   d683c:	206f 6f63 6e6e 6365 2074 6f74 5420 6968     o connect to Thi
   d684c:	676e 6273 616f 6472 7320 7265 6576 0072     ngsboard server.
   d685c:	6d79 5a56 716b 6c63 6a55 3650 7962 5633     ymVZkqclUjP6by3V
   d686c:	5a70 4365 4100 6772 6e6f 7000 756c 656d     pZeC.Argon.plume
   d687c:	6f43 6e6e 6365 2874 3a29 4320 6e6f 656e     Connect(): Conne
   d688c:	7463 6465 7000 756c 656d 6f43 6e6e 6365     cted.plumeConnec
   d689c:	2874 3a29 4320 6e6f 656e 7463 6f69 206e     t(): Connection 
   d68ac:	6166 6c69 6465 202c 6572 7274 2079 6e69     failed, retry in
   d68bc:	3320 7320 6365 6e6f 7364 2500 0073 0400      3 seconds.%s...
   d68cc:	514d 5454 0004 0000                         MQTT....

000d68d4 <_ZTVN5spark12NetworkClassE>:
	...
   d68dc:	4b89 000d 4b93 000d 4b9d 000d 4ba7 000d     .K...K...K...K..
   d68ec:	4bb1 000d 4bbd 000d 4bc9 000d 4bd1 000d     .K...K...K...K..
   d68fc:	4bd9 000d 4be5 000d 4bed 000d 4bf7 000d     .K...K...K...K..
   d690c:	4c01 000d                                   .L..

000d6910 <_ZTVN5spark9WiFiClassE>:
	...
   d6918:	4d47 000d 4d3d 000d 4d33 000d 4ce9 000d     GM..=M..3M...L..
   d6928:	4d27 000d 4d1b 000d 4bc9 000d 4bd1 000d     'M...M...K...K..
   d6938:	4d0f 000d 4d07 000d 4cfd 000d 4cf3 000d     .M...M...L...L..
   d6948:	4c01 000d 6977 6972 676e 7200 6365 2076     .L..wiring.recv 
   d6958:	7265 6f72 2072 203d 6425 0000               error = %d..

000d6964 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d696c:	4de7 000d 4e09 000d 5323 000d 4e17 000d     .M...N..#S...N..
   d697c:	4de9 000d                                   .M..

000d6980 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000d6988 <_ZTV9TCPClient>:
	...
   d6990:	4e95 000d 4ec9 000d 4d65 000d 4d7f 000d     .N...N..eM...M..
   d69a0:	51b9 000d 4f2b 000d 4efd 000d 4da9 000d     .Q..+O...N...M..
   d69b0:	50c1 000d 4fb5 000d 4f5f 000d 526d 000d     .P...O.._O..mR..
   d69c0:	4dab 000d 4ddd 000d 4d91 000d 4e1b 000d     .M...M...M...N..
   d69d0:	4edd 000d                                   .N..

000d69d4 <_ZTV7TwoWire>:
	...
   d69dc:	5367 000d 53b1 000d 5389 000d 5369 000d     gS...S...S..iS..
   d69ec:	5391 000d 5399 000d 53a1 000d 53a9 000d     .S...S...S...S..

000d69fc <_ZTV11USARTSerial>:
	...
   d6a04:	53e5 000d 5453 000d 542b 000d 5861 000d     .S..ST..+T..aX..
   d6a14:	53fb 000d 5417 000d 5409 000d 5425 000d     .S...T...T..%T..
   d6a24:	53e7 000d 53ed 000d                         .S...S..

000d6a2c <_ZTV9USBSerial>:
	...
   d6a34:	54df 000d 5547 000d 551d 000d 5861 000d     .T..GU...U..aX..
   d6a44:	550f 000d 54e1 000d 54f1 000d 5541 000d     .U...T...T..AU..
   d6a54:	5501 000d 54d9 000d                         .U...T..

000d6a5c <_ZTV9IPAddress>:
	...
   d6a64:	55f1 000d 55e1 000d 55e3 000d 5925 252d     .U...U...U..%Y-%
   d6a74:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d6a84:	7361 7463 6d69 0065 7061 0070               asctime.app.

000d6a90 <_ZTVN5spark13EthernetClassE>:
	...
   d6a98:	5a13 000d 5a09 000d 59ff 000d 59f5 000d     .Z...Z...Y...Y..
   d6aa8:	59e9 000d 59dd 000d 4bc9 000d 4bd1 000d     .Y...Y...K...K..
   d6ab8:	59d1 000d 59c9 000d 59bf 000d 59b5 000d     .Y...Y...Y...Y..
   d6ac8:	4c01 000d                                   .L..

000d6acc <_ZSt7nothrow>:
	...

000d6acd <_ZTSSt19_Sp_make_shared_tag>:
   d6acd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d6add:	6572 5f64 6174 0067 0000                     red_tag....

000d6ae8 <_ZTISt19_Sp_make_shared_tag>:
   d6ae8:	6b28 000d 6acd 000d                         (k...j..

000d6af0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d6af0:	6b88 000d 6afc 000d 6bac 000d               .k...j...k..

000d6afc <_ZTSN10__cxxabiv117__class_type_infoE>:
   d6afc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d6b0c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d6b1c:	0045 0000                                   E...

000d6b20 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d6b20:	0000 0000 6af0 000d 5bd1 000d 5be5 000d     .....j...[...[..
   d6b30:	5d79 000d 5d79 000d 5c4f 000d 5b91 000d     y]..y]..O\...[..
   d6b40:	5c37 000d 5bf9 000d 5bc5 000d               7\...[...[..

000d6b4c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d6b4c:	6b88 000d 6b58 000d 6af0 000d               .k..Xk...j..

000d6b58 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d6b58:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d6b68:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d6b78:	666e 456f 0000 0000                         nfoE....

000d6b80 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d6b80:	0000 0000 6b4c 000d 5c79 000d 5c8d 000d     ....Lk..y\...\..
   d6b90:	5d79 000d 5d79 000d 5c4f 000d 5b91 000d     y]..y]..O\...[..
   d6ba0:	5d4d 000d 5cd9 000d 5ca1 000d               M]...\...\..

000d6bac <_ZTISt9type_info>:
   d6bac:	6b28 000d 6bb4 000d                         (k...k..

000d6bb4 <_ZTSSt9type_info>:
   d6bb4:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d6bc1 <link_const_variable_data_end>:
   d6bc1:	00          	.byte	0x00
	...

000d6bc4 <link_constructors_location>:
   d6bc4:	000d426d 	.word	0x000d426d
   d6bc8:	000d4cd5 	.word	0x000d4cd5
   d6bcc:	000d4d51 	.word	0x000d4d51
   d6bd0:	000d5829 	.word	0x000d5829
   d6bd4:	000d583d 	.word	0x000d583d
   d6bd8:	000d5851 	.word	0x000d5851
   d6bdc:	000d5981 	.word	0x000d5981
   d6be0:	000d5991 	.word	0x000d5991
   d6be4:	000d5a1d 	.word	0x000d5a1d

000d6be8 <link_constructors_end>:
	...
