
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/helloThingsBoard/target/2.3.0/argon/helloThingsBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002db4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6dd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  2003e390  000d6dd4  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003a8  2003e448  2003e448  0002e448  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6e8c  000d6e8c  00026e8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6eb4  000d6eb4  00026eb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012ee09  00000000  00000000  00026eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000148f6  00000000  00000000  00155cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000026e0  00000000  00000000  0016a5b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000360c8  00000000  00000000  0016cc97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000332c7  00000000  00000000  001a2d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00106eb7  00000000  00000000  001d6026  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00026734  00000000  00000000  002dcedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00007140  00000000  00000000  00303611  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000069f0  00000000  00000000  0030a754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fbbf 	bl	d67b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fbc7 	bl	d67cc <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e390 	.word	0x2003e390
   d4048:	000d6dd4 	.word	0x000d6dd4
   d404c:	2003e448 	.word	0x2003e448
   d4050:	2003e448 	.word	0x2003e448
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fc91 	bl	d5984 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6da4 	.word	0x000d6da4
   d407c:	000d6dc8 	.word	0x000d6dc8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8d0 	b.w	d4224 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8fb 	bl	d4280 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bc31 	b.w	d58f4 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 be29 	b.w	d4ce8 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 be27 	b.w	d4ce8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 be2d 	b.w	d4cf8 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ae:	b40e      	push	{r1, r2, r3}
   d40b0:	b503      	push	{r0, r1, lr}
   d40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40bc:	f001 fd0f 	bl	d5ade <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c0:	b002      	add	sp, #8
   d40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   d40c6:	b003      	add	sp, #12
   d40c8:	4770      	bx	lr
	...

000d40cc <_Z12plumePublishv>:
    }
    plume.loop();
}

void plumePublish()
{
   d40cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    float t1 = random(80000, 170000) / 1000.0;
   d40ce:	4d32      	ldr	r5, [pc, #200]	; (d4198 <_Z12plumePublishv+0xcc>)
   d40d0:	4c32      	ldr	r4, [pc, #200]	; (d419c <_Z12plumePublishv+0xd0>)
{
   d40d2:	b085      	sub	sp, #20
    float t1 = random(80000, 170000) / 1000.0;
   d40d4:	4629      	mov	r1, r5
   d40d6:	4620      	mov	r0, r4
   d40d8:	f001 fa1b 	bl	d5512 <_Z6randomii>
    float t2 = random(80000, 170000) / 1000.0;
   d40dc:	4629      	mov	r1, r5
    float t1 = random(80000, 170000) / 1000.0;
   d40de:	4606      	mov	r6, r0
    float t2 = random(80000, 170000) / 1000.0;
   d40e0:	4620      	mov	r0, r4
   d40e2:	f001 fa16 	bl	d5512 <_Z6randomii>
    float t3 = random(80000, 170000) / 1000.0;
   d40e6:	4629      	mov	r1, r5
    float t2 = random(80000, 170000) / 1000.0;
   d40e8:	4607      	mov	r7, r0
    float t3 = random(80000, 170000) / 1000.0;
   d40ea:	4620      	mov	r0, r4
   d40ec:	f001 fa11 	bl	d5512 <_Z6randomii>
    float t4 = random(80000, 170000) / 1000.0;
   d40f0:	4629      	mov	r1, r5
   d40f2:	4620      	mov	r0, r4
   d40f4:	f001 fa0d 	bl	d5512 <_Z6randomii>
    float t5 = random(80000, 170000) / 1000.0;
   d40f8:	4629      	mov	r1, r5
   d40fa:	4620      	mov	r0, r4
   d40fc:	f001 fa09 	bl	d5512 <_Z6randomii>
    float t6 = random(80000, 170000) / 1000.0;
   d4100:	4629      	mov	r1, r5
   d4102:	4620      	mov	r0, r4
   d4104:	f001 fa05 	bl	d5512 <_Z6randomii>
    float t7 = random(80000, 170000) / 1000.0;
   d4108:	4629      	mov	r1, r5
   d410a:	4620      	mov	r0, r4
   d410c:	f001 fa01 	bl	d5512 <_Z6randomii>
    float t8 = random(80000, 170000) / 1000.0;
   d4110:	4629      	mov	r1, r5
   d4112:	4620      	mov	r0, r4
   d4114:	f001 f9fd 	bl	d5512 <_Z6randomii>
    float t9 = random(80000, 170000) / 1000.0;
   d4118:	4629      	mov	r1, r5
   d411a:	4620      	mov	r0, r4
   d411c:	f001 f9f9 	bl	d5512 <_Z6randomii>
    float t10 = random(80000, 170000) / 1000.0;
   d4120:	4629      	mov	r1, r5
   d4122:	4620      	mov	r0, r4
   d4124:	f001 f9f5 	bl	d5512 <_Z6randomii>
    float t2 = random(80000, 170000) / 1000.0;
   d4128:	4638      	mov	r0, r7
   d412a:	f002 f86f 	bl	d620c <__aeabi_i2d>
   d412e:	4b1c      	ldr	r3, [pc, #112]	; (d41a0 <_Z12plumePublishv+0xd4>)
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   d4130:	4c1c      	ldr	r4, [pc, #112]	; (d41a4 <_Z12plumePublishv+0xd8>)
    float t2 = random(80000, 170000) / 1000.0;
   d4132:	2200      	movs	r2, #0
   d4134:	f002 f9fe 	bl	d6534 <__aeabi_ddiv>
   d4138:	f002 fae4 	bl	d6704 <__aeabi_d2f>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   d413c:	f002 f878 	bl	d6230 <__aeabi_f2d>
   d4140:	e9cd 0102 	strd	r0, r1, [sp, #8]
    float t1 = random(80000, 170000) / 1000.0;
   d4144:	4630      	mov	r0, r6
   d4146:	f002 f861 	bl	d620c <__aeabi_i2d>
   d414a:	4b15      	ldr	r3, [pc, #84]	; (d41a0 <_Z12plumePublishv+0xd4>)
   d414c:	2200      	movs	r2, #0
   d414e:	f002 f9f1 	bl	d6534 <__aeabi_ddiv>
   d4152:	f002 fad7 	bl	d6704 <__aeabi_d2f>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   d4156:	f002 f86b 	bl	d6230 <__aeabi_f2d>
   d415a:	4a13      	ldr	r2, [pc, #76]	; (d41a8 <_Z12plumePublishv+0xdc>)
   d415c:	e9cd 0100 	strd	r0, r1, [sp]
   d4160:	2180      	movs	r1, #128	; 0x80
   d4162:	4620      	mov	r0, r4
   d4164:	f000 fdd0 	bl	d4d08 <snprintf>
    // snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f\"t3\":%.2f,\"t4\":%.2f\"t5\":%.2f,\"t6\":%.2f\"t7\":%.2f,\"t8\":%.2f\"t9\":%.2f,\"t10\":%.2f}", t1, t2, t3, t4, t5, t6, t7, t8, t9, t10);
    //  sprintf(mqttBuf, "{\"t1\":%.2f,\"t2\":%.2f\"t3\":%.2f,\"t4\":%.2f\"t5\":%.2f,\"t6\":%.2f\"t7\":%.2f,\"t8\":%.2f\"t9\":%.2f,\"t10\":%.2f}", t1, t2, t3, t4, t5, t6, t7, t8, t9, t10);
    Serial.printf("mqttBuf: %s\nsizeOf(mqttBuf): %i\n", mqttBuf, sizeof(mqttBuf));
   d4168:	f001 faf4 	bl	d5754 <_Z16_fetch_usbserialv>
   d416c:	2380      	movs	r3, #128	; 0x80
   d416e:	4622      	mov	r2, r4
   d4170:	490e      	ldr	r1, [pc, #56]	; (d41ac <_Z12plumePublishv+0xe0>)
   d4172:	f7ff ff9c 	bl	d40ae <_ZN5Print6printfEPKcz>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   d4176:	4622      	mov	r2, r4
    static bool onOff = true;
    digitalWrite(LEDPIN, onOff);
   d4178:	4c0d      	ldr	r4, [pc, #52]	; (d41b0 <_Z12plumePublishv+0xe4>)
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   d417a:	490e      	ldr	r1, [pc, #56]	; (d41b4 <_Z12plumePublishv+0xe8>)
   d417c:	480e      	ldr	r0, [pc, #56]	; (d41b8 <_Z12plumePublishv+0xec>)
   d417e:	f000 fbb9 	bl	d48f4 <_ZN12PubSubClient7publishEPKcS1_>
    digitalWrite(LEDPIN, onOff);
   d4182:	7821      	ldrb	r1, [r4, #0]
   d4184:	2007      	movs	r0, #7
   d4186:	f001 fdc0 	bl	d5d0a <digitalWrite>
    onOff = !onOff;
   d418a:	7823      	ldrb	r3, [r4, #0]
   d418c:	f083 0301 	eor.w	r3, r3, #1
   d4190:	7023      	strb	r3, [r4, #0]
}
   d4192:	b005      	add	sp, #20
   d4194:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4196:	bf00      	nop
   d4198:	00029810 	.word	0x00029810
   d419c:	00013880 	.word	0x00013880
   d41a0:	408f4000 	.word	0x408f4000
   d41a4:	2003e44c 	.word	0x2003e44c
   d41a8:	000d6990 	.word	0x000d6990
   d41ac:	000d69a6 	.word	0x000d69a6
   d41b0:	2003e390 	.word	0x2003e390
   d41b4:	000d69c7 	.word	0x000d69c7
   d41b8:	2003e4cc 	.word	0x2003e4cc

000d41bc <_Z12plumeConnectv>:

void plumeConnect()
{
   d41bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (!plume.connected())
   d41be:	4d13      	ldr	r5, [pc, #76]	; (d420c <_Z12plumeConnectv+0x50>)
    {
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   d41c0:	4e13      	ldr	r6, [pc, #76]	; (d4210 <_Z12plumeConnectv+0x54>)
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   d41c2:	4f14      	ldr	r7, [pc, #80]	; (d4214 <_Z12plumeConnectv+0x58>)
    while (!plume.connected())
   d41c4:	4811      	ldr	r0, [pc, #68]	; (d420c <_Z12plumeConnectv+0x50>)
   d41c6:	f000 f9b8 	bl	d453a <_ZN12PubSubClient9connectedEv>
   d41ca:	4604      	mov	r4, r0
   d41cc:	b9e0      	cbnz	r0, d4208 <_Z12plumeConnectv+0x4c>
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   d41ce:	f001 fac1 	bl	d5754 <_Z16_fetch_usbserialv>
   d41d2:	4631      	mov	r1, r6
   d41d4:	f001 fc5b 	bl	d5a8e <_ZN5Print7printlnEPKc>
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   d41d8:	490f      	ldr	r1, [pc, #60]	; (d4218 <_Z12plumeConnectv+0x5c>)
   d41da:	4623      	mov	r3, r4
   d41dc:	463a      	mov	r2, r7
   d41de:	4628      	mov	r0, r5
   d41e0:	f000 fa8e 	bl	d4700 <_ZN12PubSubClient7connectEPKcS1_S1_>
   d41e4:	b130      	cbz	r0, d41f4 <_Z12plumeConnectv+0x38>
        {
            Serial.println("plumeConnect(): Connected");
   d41e6:	f001 fab5 	bl	d5754 <_Z16_fetch_usbserialv>
        }
        else
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
        delay(3000);
    }
   d41ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            Serial.println("plumeConnect(): Connected");
   d41ee:	490b      	ldr	r1, [pc, #44]	; (d421c <_Z12plumeConnectv+0x60>)
   d41f0:	f001 bc4d 	b.w	d5a8e <_ZN5Print7printlnEPKc>
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   d41f4:	f001 faae 	bl	d5754 <_Z16_fetch_usbserialv>
   d41f8:	4909      	ldr	r1, [pc, #36]	; (d4220 <_Z12plumeConnectv+0x64>)
   d41fa:	f001 fc48 	bl	d5a8e <_ZN5Print7printlnEPKc>
        delay(3000);
   d41fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4202:	f001 fbf7 	bl	d59f4 <delay>
    while (!plume.connected())
   d4206:	e7dd      	b.n	d41c4 <_Z12plumeConnectv+0x8>
   d4208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d420a:	bf00      	nop
   d420c:	2003e4cc 	.word	0x2003e4cc
   d4210:	000d69df 	.word	0x000d69df
   d4214:	000d6a1b 	.word	0x000d6a1b
   d4218:	000d6a30 	.word	0x000d6a30
   d421c:	000d6a36 	.word	0x000d6a36
   d4220:	000d6a50 	.word	0x000d6a50

000d4224 <setup>:
{
   d4224:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d4226:	f001 fa95 	bl	d5754 <_Z16_fetch_usbserialv>
   d422a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d422e:	f001 fa85 	bl	d573c <_ZN9USBSerial5beginEl>
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   d4232:	4c0d      	ldr	r4, [pc, #52]	; (d4268 <setup+0x44>)
    pinMode(D7, OUTPUT);
   d4234:	2101      	movs	r1, #1
   d4236:	2007      	movs	r0, #7
   d4238:	f001 fd56 	bl	d5ce8 <pinMode>
    plume.setServer(thingsboardServer, MQTTPORT);
   d423c:	490b      	ldr	r1, [pc, #44]	; (d426c <setup+0x48>)
   d423e:	480c      	ldr	r0, [pc, #48]	; (d4270 <setup+0x4c>)
   d4240:	f240 725b 	movw	r2, #1883	; 0x75b
   d4244:	f000 fb67 	bl	d4916 <_ZN12PubSubClient9setServerEPKct>
    plumeConnect();
   d4248:	f7ff ffb8 	bl	d41bc <_Z12plumeConnectv>
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   d424c:	4b09      	ldr	r3, [pc, #36]	; (d4274 <setup+0x50>)
   d424e:	4a0a      	ldr	r2, [pc, #40]	; (d4278 <setup+0x54>)
   d4250:	2180      	movs	r1, #128	; 0x80
   d4252:	4620      	mov	r0, r4
   d4254:	f000 fd58 	bl	d4d08 <snprintf>
    Serial.printf("mqttBuf: %s\nsizeOf(mqttBuf): %i/n", mqttBuf, sizeof(mqttBuf));
   d4258:	f001 fa7c 	bl	d5754 <_Z16_fetch_usbserialv>
   d425c:	4907      	ldr	r1, [pc, #28]	; (d427c <setup+0x58>)
   d425e:	2380      	movs	r3, #128	; 0x80
   d4260:	4622      	mov	r2, r4
   d4262:	f7ff ff24 	bl	d40ae <_ZN5Print6printfEPKcz>
}
   d4266:	bd10      	pop	{r4, pc}
   d4268:	2003e44c 	.word	0x2003e44c
   d426c:	2003e391 	.word	0x2003e391
   d4270:	2003e4cc 	.word	0x2003e4cc
   d4274:	2003e3a3 	.word	0x2003e3a3
   d4278:	000d6a86 	.word	0x000d6a86
   d427c:	000d6a89 	.word	0x000d6a89

000d4280 <loop>:
{
   d4280:	b510      	push	{r4, lr}
    if (!plume.connected())
   d4282:	480c      	ldr	r0, [pc, #48]	; (d42b4 <loop+0x34>)
   d4284:	f000 f959 	bl	d453a <_ZN12PubSubClient9connectedEv>
   d4288:	b908      	cbnz	r0, d428e <loop+0xe>
        plumeConnect();
   d428a:	f7ff ff97 	bl	d41bc <_Z12plumeConnectv>
    if (millis() - lastTime > 5000)
   d428e:	4c0a      	ldr	r4, [pc, #40]	; (d42b8 <loop+0x38>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4290:	f000 fc5e 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
   d4294:	6823      	ldr	r3, [r4, #0]
   d4296:	1ac0      	subs	r0, r0, r3
   d4298:	f241 3388 	movw	r3, #5000	; 0x1388
   d429c:	4298      	cmp	r0, r3
   d429e:	d904      	bls.n	d42aa <loop+0x2a>
        plumePublish();
   d42a0:	f7ff ff14 	bl	d40cc <_Z12plumePublishv>
   d42a4:	f000 fc54 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
        lastTime = millis();
   d42a8:	6020      	str	r0, [r4, #0]
}
   d42aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    plume.loop();
   d42ae:	4801      	ldr	r0, [pc, #4]	; (d42b4 <loop+0x34>)
   d42b0:	f000 ba30 	b.w	d4714 <_ZN12PubSubClient4loopEv>
   d42b4:	2003e4cc 	.word	0x2003e4cc
   d42b8:	2003e448 	.word	0x2003e448

000d42bc <_GLOBAL__sub_I_thingsboardServer>:
   d42bc:	b508      	push	{r3, lr}
TCPClient pubsub;
   d42be:	4905      	ldr	r1, [pc, #20]	; (d42d4 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   d42c0:	4608      	mov	r0, r1
   d42c2:	f001 f8fd 	bl	d54c0 <_ZN9TCPClientC1Ev>
   d42c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   d42ca:	4902      	ldr	r1, [pc, #8]	; (d42d4 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   d42cc:	4802      	ldr	r0, [pc, #8]	; (d42d8 <_GLOBAL__sub_I_thingsboardServer+0x1c>)
   d42ce:	f000 b815 	b.w	d42fc <_ZN12PubSubClientC1ER6Client>
   d42d2:	bf00      	nop
   d42d4:	2003e58c 	.word	0x2003e58c
   d42d8:	2003e4cc 	.word	0x2003e4cc

000d42dc <_ZN9IPAddressC1ERKS_>:

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d42dc:	b570      	push	{r4, r5, r6, lr}
   d42de:	4604      	mov	r4, r0
   d42e0:	4b05      	ldr	r3, [pc, #20]	; (d42f8 <_ZN9IPAddressC1ERKS_+0x1c>)
   d42e2:	f844 3b04 	str.w	r3, [r4], #4
   d42e6:	1d0d      	adds	r5, r1, #4
   d42e8:	4606      	mov	r6, r0
   d42ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d42ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d42ee:	682b      	ldr	r3, [r5, #0]
   d42f0:	7023      	strb	r3, [r4, #0]
   d42f2:	4630      	mov	r0, r6
   d42f4:	bd70      	pop	{r4, r5, r6, pc}
   d42f6:	bf00      	nop
   d42f8:	000d6c44 	.word	0x000d6c44

000d42fc <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   d42fc:	b538      	push	{r3, r4, r5, lr}
   d42fe:	4604      	mov	r4, r0
   d4300:	3098      	adds	r0, #152	; 0x98
   d4302:	460d      	mov	r5, r1
   d4304:	f001 fa86 	bl	d5814 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   d4308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d430c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   d4310:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   d4312:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   d4314:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   d4318:	4620      	mov	r0, r4
   d431a:	bd38      	pop	{r3, r4, r5, pc}

000d431c <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   d431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4320:	4605      	mov	r5, r0
   d4322:	460e      	mov	r6, r1
   d4324:	f000 fc14 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   d4328:	f643 2897 	movw	r8, #14999	; 0x3a97
   d432c:	4607      	mov	r7, r0
   while(!_client->available()) {
   d432e:	6828      	ldr	r0, [r5, #0]
   d4330:	6803      	ldr	r3, [r0, #0]
   d4332:	691b      	ldr	r3, [r3, #16]
   d4334:	4798      	blx	r3
   d4336:	4604      	mov	r4, r0
   d4338:	b930      	cbnz	r0, d4348 <_ZN12PubSubClient8readByteEPh+0x2c>
   d433a:	f000 fc09 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   d433e:	1bc3      	subs	r3, r0, r7
   d4340:	4543      	cmp	r3, r8
   d4342:	d9f4      	bls.n	d432e <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   d4344:	4620      	mov	r0, r4
   d4346:	e005      	b.n	d4354 <_ZN12PubSubClient8readByteEPh+0x38>
   *result = _client->read();
   d4348:	6828      	ldr	r0, [r5, #0]
   d434a:	6803      	ldr	r3, [r0, #0]
   d434c:	695b      	ldr	r3, [r3, #20]
   d434e:	4798      	blx	r3
   d4350:	7030      	strb	r0, [r6, #0]
   d4352:	2001      	movs	r0, #1
}
   d4354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4358 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   d4358:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   d435a:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   d435c:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   d435e:	4614      	mov	r4, r2
  if(readByte(write_address)){
   d4360:	f7ff ffdc 	bl	d431c <_ZN12PubSubClient8readByteEPh>
   d4364:	b108      	cbz	r0, d436a <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   d4366:	3501      	adds	r5, #1
   d4368:	8025      	strh	r5, [r4, #0]
}
   d436a:	bd38      	pop	{r3, r4, r5, pc}

000d436c <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d436c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   d4370:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d4372:	4688      	mov	r8, r1
    uint16_t len = 0;
   d4374:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   d4376:	f10d 0206 	add.w	r2, sp, #6
   d437a:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d437c:	4604      	mov	r4, r0
    uint16_t len = 0;
   d437e:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   d4382:	f7ff ffe9 	bl	d4358 <_ZN12PubSubClient8readByteEPhPt>
   d4386:	b918      	cbnz	r0, d4390 <_ZN12PubSubClient10readPacketEPh+0x24>
   d4388:	2000      	movs	r0, #0
}
   d438a:	b003      	add	sp, #12
   d438c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4390:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   d4394:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   d4398:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   d439a:	f10d 0105 	add.w	r1, sp, #5
   d439e:	4620      	mov	r0, r4
   d43a0:	f7ff ffbc 	bl	d431c <_ZN12PubSubClient8readByteEPh>
   d43a4:	2800      	cmp	r0, #0
   d43a6:	d0ef      	beq.n	d4388 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   d43a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d43ac:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d43b0:	1c53      	adds	r3, r2, #1
   d43b2:	4422      	add	r2, r4
   d43b4:	b29b      	uxth	r3, r3
   d43b6:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   d43b8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   d43bc:	fb12 f206 	smulbb	r2, r2, r6
   d43c0:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   d43c2:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   d43c4:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   d43c8:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d43ca:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   d43ce:	d4e4      	bmi.n	d439a <_ZN12PubSubClient10readPacketEPh+0x2e>
   d43d0:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   d43d4:	3b01      	subs	r3, #1
    if (isPublish) {
   d43d6:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   d43da:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   d43de:	d11e      	bne.n	d441e <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   d43e0:	f10d 0206 	add.w	r2, sp, #6
   d43e4:	4629      	mov	r1, r5
   d43e6:	4620      	mov	r0, r4
   d43e8:	f7ff ffb6 	bl	d4358 <_ZN12PubSubClient8readByteEPhPt>
   d43ec:	2800      	cmp	r0, #0
   d43ee:	d0cb      	beq.n	d4388 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   d43f0:	f10d 0206 	add.w	r2, sp, #6
   d43f4:	4629      	mov	r1, r5
   d43f6:	4620      	mov	r0, r4
   d43f8:	f7ff ffae 	bl	d4358 <_ZN12PubSubClient8readByteEPhPt>
   d43fc:	2800      	cmp	r0, #0
   d43fe:	d0c3      	beq.n	d4388 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d4400:	f898 3000 	ldrb.w	r3, [r8]
   d4404:	4423      	add	r3, r4
   d4406:	795a      	ldrb	r2, [r3, #5]
   d4408:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   d440a:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d440c:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   d4410:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d4412:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   d4414:	d501      	bpl.n	d441a <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   d4416:	3602      	adds	r6, #2
   d4418:	b2b6      	uxth	r6, r6
        start = 2;
   d441a:	2502      	movs	r5, #2
   d441c:	e001      	b.n	d4422 <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   d441e:	2500      	movs	r5, #0
    uint16_t skip = 0;
   d4420:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   d4422:	b2ad      	uxth	r5, r5
   d4424:	42bd      	cmp	r5, r7
   d4426:	d226      	bcs.n	d4476 <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   d4428:	f10d 0105 	add.w	r1, sp, #5
   d442c:	4620      	mov	r0, r4
   d442e:	f7ff ff75 	bl	d431c <_ZN12PubSubClient8readByteEPh>
   d4432:	2800      	cmp	r0, #0
   d4434:	d0a8      	beq.n	d4388 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   d4436:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   d443a:	b178      	cbz	r0, d445c <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   d443c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   d4440:	d10c      	bne.n	d445c <_ZN12PubSubClient10readPacketEPh+0xf0>
   d4442:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4446:	f898 2000 	ldrb.w	r2, [r8]
   d444a:	1a9b      	subs	r3, r3, r2
   d444c:	3b02      	subs	r3, #2
   d444e:	42b3      	cmp	r3, r6
   d4450:	dd04      	ble.n	d445c <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   d4452:	6803      	ldr	r3, [r0, #0]
   d4454:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4458:	689b      	ldr	r3, [r3, #8]
   d445a:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   d445c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4460:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   d4462:	bf9e      	ittt	ls
   d4464:	18e2      	addls	r2, r4, r3
   d4466:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   d446a:	7111      	strbls	r1, [r2, #4]
        len++;
   d446c:	3301      	adds	r3, #1
   d446e:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   d4472:	3501      	adds	r5, #1
   d4474:	e7d5      	b.n	d4422 <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   d4476:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d447a:	b92b      	cbnz	r3, d4488 <_ZN12PubSubClient10readPacketEPh+0x11c>
   d447c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4480:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   d4482:	bf88      	it	hi
   d4484:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   d4488:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d448c:	e77d      	b.n	d438a <_ZN12PubSubClient10readPacketEPh+0x1e>

000d448e <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d448e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4490:	468c      	mov	ip, r1
   d4492:	461e      	mov	r6, r3
    uint16_t len = length;
   d4494:	461d      	mov	r5, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4496:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d4498:	2300      	movs	r3, #0
        digit = len % 128;
   d449a:	46ae      	mov	lr, r5
        lenBuf[pos++] = digit;
   d449c:	a802      	add	r0, sp, #8
        digit = len % 128;
   d449e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d44a2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d44a6:	f103 0401 	add.w	r4, r3, #1
   d44aa:	4403      	add	r3, r0
            digit |= 0x80;
   d44ac:	bf88      	it	hi
   d44ae:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
    } while(len>0);
   d44b2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d44b6:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d44ba:	b2e4      	uxtb	r4, r4
   d44bc:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len>0);
   d44c0:	d810      	bhi.n	d44e4 <_ZN12PubSubClient5writeEhPht+0x56>
    buf[4-llen] = header;
   d44c2:	f1c4 0304 	rsb	r3, r4, #4
   d44c6:	18d1      	adds	r1, r2, r3
   d44c8:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i=0;i<llen;i++) {
   d44cc:	f1c4 0305 	rsb	r3, r4, #5
   d44d0:	4413      	add	r3, r2
   d44d2:	a801      	add	r0, sp, #4
   d44d4:	3205      	adds	r2, #5
   d44d6:	429a      	cmp	r2, r3
   d44d8:	d006      	beq.n	d44e8 <_ZN12PubSubClient5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d44da:	f810 5b01 	ldrb.w	r5, [r0], #1
   d44de:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i=0;i<llen;i++) {
   d44e2:	e7f8      	b.n	d44d6 <_ZN12PubSubClient5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d44e4:	4623      	mov	r3, r4
   d44e6:	e7d8      	b.n	d449a <_ZN12PubSubClient5writeEhPht+0xc>
    rc = _client->write(buf+(4-llen),length+1+llen);
   d44e8:	6838      	ldr	r0, [r7, #0]
   d44ea:	6803      	ldr	r3, [r0, #0]
   d44ec:	1c72      	adds	r2, r6, #1
   d44ee:	4422      	add	r2, r4
   d44f0:	68db      	ldr	r3, [r3, #12]
   d44f2:	4798      	blx	r3
   d44f4:	4605      	mov	r5, r0
   d44f6:	f000 fb2b 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   d44fa:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d44fc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   d4500:	4432      	add	r2, r6
   d4502:	b2a8      	uxth	r0, r5
}
   d4504:	1a13      	subs	r3, r2, r0
   d4506:	4258      	negs	r0, r3
   d4508:	4158      	adcs	r0, r3
   d450a:	b003      	add	sp, #12
   d450c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d450e <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   d450e:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d4510:	b570      	push	{r4, r5, r6, lr}
    pos += 2;
   d4512:	b29b      	uxth	r3, r3
   d4514:	2400      	movs	r4, #0
    while (*idp) {
   d4516:	3901      	subs	r1, #1
   d4518:	1c65      	adds	r5, r4, #1
   d451a:	1918      	adds	r0, r3, r4
   d451c:	5d4e      	ldrb	r6, [r1, r5]
   d451e:	b280      	uxth	r0, r0
   d4520:	b116      	cbz	r6, d4528 <_ZN12PubSubClient11writeStringEPKcPht+0x1a>
        buf[pos++] = *idp++;
   d4522:	5416      	strb	r6, [r2, r0]
    while (*idp) {
   d4524:	462c      	mov	r4, r5
   d4526:	e7f7      	b.n	d4518 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   d4528:	b2a3      	uxth	r3, r4
   d452a:	1ac1      	subs	r1, r0, r3
   d452c:	440a      	add	r2, r1
   d452e:	121b      	asrs	r3, r3, #8
   d4530:	f802 3c02 	strb.w	r3, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4534:	f802 4c01 	strb.w	r4, [r2, #-1]
}
   d4538:	bd70      	pop	{r4, r5, r6, pc}

000d453a <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   d453a:	b538      	push	{r3, r4, r5, lr}
   d453c:	4604      	mov	r4, r0
    if (_client == NULL ) {
   d453e:	6800      	ldr	r0, [r0, #0]
   d4540:	b908      	cbnz	r0, d4546 <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   d4542:	2000      	movs	r0, #0
}
   d4544:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   d4546:	6803      	ldr	r3, [r0, #0]
   d4548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d454a:	4798      	blx	r3
        if (!rc) {
   d454c:	b980      	cbnz	r0, d4570 <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   d454e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   d4552:	2d00      	cmp	r5, #0
   d4554:	d1f5      	bne.n	d4542 <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   d4556:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   d4558:	f06f 0302 	mvn.w	r3, #2
   d455c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   d4560:	6803      	ldr	r3, [r0, #0]
   d4562:	69db      	ldr	r3, [r3, #28]
   d4564:	4798      	blx	r3
                _client->stop();
   d4566:	6820      	ldr	r0, [r4, #0]
   d4568:	6803      	ldr	r3, [r0, #0]
   d456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d456c:	4798      	blx	r3
   d456e:	e7e8      	b.n	d4542 <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   d4570:	2001      	movs	r0, #1
   d4572:	e7e7      	b.n	d4544 <_ZN12PubSubClient9connectedEv+0xa>

000d4574 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   d4574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4578:	b08b      	sub	sp, #44	; 0x2c
   d457a:	4604      	mov	r4, r0
   d457c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   d4580:	4689      	mov	r9, r1
   d4582:	4617      	mov	r7, r2
   d4584:	461e      	mov	r6, r3
    if (!connected()) {
   d4586:	f7ff ffd8 	bl	d453a <_ZN12PubSubClient9connectedEv>
   d458a:	4605      	mov	r5, r0
   d458c:	2800      	cmp	r0, #0
   d458e:	f040 80a9 	bne.w	d46e4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
        if (domain != NULL) {
   d4592:	f8d4 a000 	ldr.w	sl, [r4]
   d4596:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
   d459a:	f8da 3000 	ldr.w	r3, [sl]
   d459e:	2900      	cmp	r1, #0
   d45a0:	d07d      	beq.n	d469e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x12a>
            result = _client->connect(this->domain, this->port);
   d45a2:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   d45a6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d45aa:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   d45ac:	4650      	mov	r0, sl
   d45ae:	47d8      	blx	fp
        if (result == 1) {
   d45b0:	2801      	cmp	r0, #1
   d45b2:	f040 809e 	bne.w	d46f2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x17e>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   d45b6:	4b51      	ldr	r3, [pc, #324]	; (d46fc <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x188>)
            nextMsgId = 1;
   d45b8:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   d45bc:	889a      	ldrh	r2, [r3, #4]
   d45be:	6818      	ldr	r0, [r3, #0]
   d45c0:	799b      	ldrb	r3, [r3, #6]
   d45c2:	f8ad 2014 	strh.w	r2, [sp, #20]
   d45c6:	f88d 3016 	strb.w	r3, [sp, #22]
   d45ca:	9004      	str	r0, [sp, #16]
   d45cc:	ab04      	add	r3, sp, #16
   d45ce:	f104 0209 	add.w	r2, r4, #9
   d45d2:	f104 0110 	add.w	r1, r4, #16
                buffer[length++] = d[j];
   d45d6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d45da:	f802 0b01 	strb.w	r0, [r2], #1
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
   d45de:	428a      	cmp	r2, r1
   d45e0:	d1f9      	bne.n	d45d6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x62>
            if (willTopic) {
   d45e2:	f1b8 0f00 	cmp.w	r8, #0
   d45e6:	d066      	beq.n	d46b6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x142>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d45e8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   d45ec:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   d45f0:	015b      	lsls	r3, r3, #5
   d45f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   d45f6:	f043 0306 	orr.w	r3, r3, #6
   d45fa:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   d45fc:	b11f      	cbz	r7, d4606 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x92>
                if(pass != NULL) {
   d45fe:	2e00      	cmp	r6, #0
   d4600:	d15b      	bne.n	d46ba <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x146>
                v = v|0x80;
   d4602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   d4606:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   d4608:	2300      	movs	r3, #0
   d460a:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   d460c:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   d460e:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   d4610:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   d4612:	4649      	mov	r1, r9
   d4614:	4620      	mov	r0, r4
   d4616:	9201      	str	r2, [sp, #4]
   d4618:	f7ff ff79 	bl	d450e <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   d461c:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   d461e:	4603      	mov	r3, r0
            if (willTopic) {
   d4620:	f1b8 0f00 	cmp.w	r8, #0
   d4624:	d00b      	beq.n	d463e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xca>
                length = writeString(willTopic,buffer,length);
   d4626:	4641      	mov	r1, r8
   d4628:	4620      	mov	r0, r4
   d462a:	f7ff ff70 	bl	d450e <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   d462e:	9a01      	ldr	r2, [sp, #4]
   d4630:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   d4632:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   d4634:	4620      	mov	r0, r4
   d4636:	f7ff ff6a 	bl	d450e <_ZN12PubSubClient11writeStringEPKcPht>
   d463a:	9a01      	ldr	r2, [sp, #4]
   d463c:	4603      	mov	r3, r0
            if(user != NULL) {
   d463e:	b16f      	cbz	r7, d465c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe8>
                length = writeString(user,buffer,length);
   d4640:	4639      	mov	r1, r7
   d4642:	4620      	mov	r0, r4
   d4644:	9201      	str	r2, [sp, #4]
   d4646:	f7ff ff62 	bl	d450e <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   d464a:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   d464c:	4603      	mov	r3, r0
                if(pass != NULL) {
   d464e:	b12e      	cbz	r6, d465c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe8>
                    length = writeString(pass,buffer,length);
   d4650:	4631      	mov	r1, r6
   d4652:	4620      	mov	r0, r4
   d4654:	f7ff ff5b 	bl	d450e <_ZN12PubSubClient11writeStringEPKcPht>
   d4658:	9a01      	ldr	r2, [sp, #4]
   d465a:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   d465c:	3b05      	subs	r3, #5
   d465e:	b29b      	uxth	r3, r3
   d4660:	2110      	movs	r1, #16
   d4662:	4620      	mov	r0, r4
   d4664:	f7ff ff13 	bl	d448e <_ZN12PubSubClient5writeEhPht>
   d4668:	f000 fa72 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d466c:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   d4670:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   d4674:	6820      	ldr	r0, [r4, #0]
   d4676:	6803      	ldr	r3, [r0, #0]
   d4678:	691b      	ldr	r3, [r3, #16]
   d467a:	4798      	blx	r3
   d467c:	bb00      	cbnz	r0, d46c0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x14c>
   d467e:	f000 fa67 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   d4682:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d4686:	1ac0      	subs	r0, r0, r3
   d4688:	42b0      	cmp	r0, r6
   d468a:	d9f3      	bls.n	d4674 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x100>
                    _state = MQTT_CONNECTION_TIMEOUT;
   d468c:	f06f 0303 	mvn.w	r3, #3
   d4690:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   d4694:	6820      	ldr	r0, [r4, #0]
   d4696:	6803      	ldr	r3, [r0, #0]
   d4698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d469a:	4798      	blx	r3
   d469c:	e022      	b.n	d46e4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
            result = _client->connect(this->ip, this->port);
   d469e:	f104 0198 	add.w	r1, r4, #152	; 0x98
   d46a2:	a804      	add	r0, sp, #16
   d46a4:	f8d3 b020 	ldr.w	fp, [r3, #32]
   d46a8:	f7ff fe18 	bl	d42dc <_ZN9IPAddressC1ERKS_>
   d46ac:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   d46b0:	462b      	mov	r3, r5
   d46b2:	a904      	add	r1, sp, #16
   d46b4:	e77a      	b.n	d45ac <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   d46b6:	2302      	movs	r3, #2
   d46b8:	e7a0      	b.n	d45fc <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x88>
                    v = v|(0x80>>1);
   d46ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   d46be:	e7a2      	b.n	d4606 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x92>
            uint16_t len = readPacket(&llen);
   d46c0:	f10d 010f 	add.w	r1, sp, #15
   d46c4:	4620      	mov	r0, r4
   d46c6:	f7ff fe51 	bl	d436c <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   d46ca:	2804      	cmp	r0, #4
   d46cc:	d1e2      	bne.n	d4694 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x120>
                if (buffer[3] == 0) {
   d46ce:	79e6      	ldrb	r6, [r4, #7]
   d46d0:	b966      	cbnz	r6, d46ec <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x178>
   d46d2:	f000 fa3d 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d46d6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d46d8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   d46dc:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   d46e0:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   d46e4:	4628      	mov	r0, r5
   d46e6:	b00b      	add	sp, #44	; 0x2c
   d46e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   d46ec:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   d46f0:	e7d0      	b.n	d4694 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x120>
            _state = MQTT_CONNECT_FAILED;
   d46f2:	f06f 0301 	mvn.w	r3, #1
   d46f6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   d46fa:	e7f3      	b.n	d46e4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   d46fc:	000d6aab 	.word	0x000d6aab

000d4700 <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   d4700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   d4702:	2400      	movs	r4, #0
   d4704:	e9cd 4402 	strd	r4, r4, [sp, #8]
   d4708:	e9cd 4400 	strd	r4, r4, [sp]
   d470c:	f7ff ff32 	bl	d4574 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   d4710:	b004      	add	sp, #16
   d4712:	bd10      	pop	{r4, pc}

000d4714 <_ZN12PubSubClient4loopEv>:
boolean PubSubClient::loop() {
   d4714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4718:	b085      	sub	sp, #20
   d471a:	af00      	add	r7, sp, #0
   d471c:	4604      	mov	r4, r0
    if (connected()) {
   d471e:	f7ff ff0c 	bl	d453a <_ZN12PubSubClient9connectedEv>
   d4722:	4606      	mov	r6, r0
   d4724:	b1d0      	cbz	r0, d475c <_ZN12PubSubClient4loopEv+0x48>
   d4726:	f000 fa13 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   d472a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d472e:	f643 2298 	movw	r2, #15000	; 0x3a98
   d4732:	1ac3      	subs	r3, r0, r3
   d4734:	4293      	cmp	r3, r2
   d4736:	4605      	mov	r5, r0
   d4738:	d804      	bhi.n	d4744 <_ZN12PubSubClient4loopEv+0x30>
   d473a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   d473e:	1ac3      	subs	r3, r0, r3
   d4740:	4293      	cmp	r3, r2
   d4742:	d91d      	bls.n	d4780 <_ZN12PubSubClient4loopEv+0x6c>
            if (pingOutstanding) {
   d4744:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   d4748:	6820      	ldr	r0, [r4, #0]
   d474a:	b163      	cbz	r3, d4766 <_ZN12PubSubClient4loopEv+0x52>
                this->_state = MQTT_CONNECTION_TIMEOUT;
   d474c:	f06f 0303 	mvn.w	r3, #3
   d4750:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->stop();
   d4754:	6803      	ldr	r3, [r0, #0]
   d4756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4758:	4798      	blx	r3
                return false;
   d475a:	2600      	movs	r6, #0
}
   d475c:	4630      	mov	r0, r6
   d475e:	3714      	adds	r7, #20
   d4760:	46bd      	mov	sp, r7
   d4762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d4766:	4621      	mov	r1, r4
   d4768:	23c0      	movs	r3, #192	; 0xc0
   d476a:	f821 3f04 	strh.w	r3, [r1, #4]!
                _client->write(buffer,2);
   d476e:	6803      	ldr	r3, [r0, #0]
   d4770:	2202      	movs	r2, #2
   d4772:	68db      	ldr	r3, [r3, #12]
   d4774:	4798      	blx	r3
                lastInActivity = t;
   d4776:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
                pingOutstanding = true;
   d477a:	2301      	movs	r3, #1
   d477c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        if (_client->available()) {
   d4780:	6820      	ldr	r0, [r4, #0]
   d4782:	6803      	ldr	r3, [r0, #0]
   d4784:	691b      	ldr	r3, [r3, #16]
   d4786:	4798      	blx	r3
   d4788:	2800      	cmp	r0, #0
   d478a:	d0e7      	beq.n	d475c <_ZN12PubSubClient4loopEv+0x48>
            uint16_t len = readPacket(&llen);
   d478c:	f107 010f 	add.w	r1, r7, #15
   d4790:	4620      	mov	r0, r4
   d4792:	f7ff fdeb 	bl	d436c <_ZN12PubSubClient10readPacketEPh>
            if (len > 0) {
   d4796:	6078      	str	r0, [r7, #4]
   d4798:	2800      	cmp	r0, #0
   d479a:	d0df      	beq.n	d475c <_ZN12PubSubClient4loopEv+0x48>
                uint8_t type = buffer[0]&0xF0;
   d479c:	f894 a004 	ldrb.w	sl, [r4, #4]
                lastInActivity = t;
   d47a0:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
                uint8_t type = buffer[0]&0xF0;
   d47a4:	f00a 03f0 	and.w	r3, sl, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d47a8:	2b30      	cmp	r3, #48	; 0x30
   d47aa:	d15a      	bne.n	d4862 <_ZN12PubSubClient4loopEv+0x14e>
                    if (callback) {
   d47ac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   d47b0:	2b00      	cmp	r3, #0
   d47b2:	d0d3      	beq.n	d475c <_ZN12PubSubClient4loopEv+0x48>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d47b4:	f897 c00f 	ldrb.w	ip, [r7, #15]
   d47b8:	eb04 000c 	add.w	r0, r4, ip
                        }
   d47bc:	46e8      	mov	r8, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d47be:	f890 e005 	ldrb.w	lr, [r0, #5]
   d47c2:	7981      	ldrb	r1, [r0, #6]
   d47c4:	eb01 210e 	add.w	r1, r1, lr, lsl #8
   d47c8:	b289      	uxth	r1, r1
                        char topic[tl+1];
   d47ca:	f101 0008 	add.w	r0, r1, #8
   d47ce:	08c0      	lsrs	r0, r0, #3
   d47d0:	eba8 02c0 	sub.w	r2, r8, r0, lsl #3
   d47d4:	4695      	mov	sp, r2
   d47d6:	f10c 0e07 	add.w	lr, ip, #7
   d47da:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d47dc:	44a6      	add	lr, r4
   d47de:	46e9      	mov	r9, sp
   d47e0:	eb0d 0b01 	add.w	fp, sp, r1
   d47e4:	45cb      	cmp	fp, r9
   d47e6:	d004      	beq.n	d47f2 <_ZN12PubSubClient4loopEv+0xde>
                            topic[i] = buffer[llen+3+i];
   d47e8:	f81e 2b01 	ldrb.w	r2, [lr], #1
   d47ec:	f809 2b01 	strb.w	r2, [r9], #1
                        for (uint16_t i=0;i<tl;i++) {
   d47f0:	e7f8      	b.n	d47e4 <_ZN12PubSubClient4loopEv+0xd0>
                        topic[tl] = 0;
   d47f2:	687a      	ldr	r2, [r7, #4]
   d47f4:	f04f 0e00 	mov.w	lr, #0
   d47f8:	f800 e001 	strb.w	lr, [r0, r1]
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   d47fc:	eba2 020c 	sub.w	r2, r2, ip
   d4800:	f00a 0e06 	and.w	lr, sl, #6
   d4804:	3a03      	subs	r2, #3
   d4806:	f1be 0f02 	cmp.w	lr, #2
   d480a:	f104 0904 	add.w	r9, r4, #4
   d480e:	eba2 0201 	sub.w	r2, r2, r1
   d4812:	f10c 0e03 	add.w	lr, ip, #3
   d4816:	d120      	bne.n	d485a <_ZN12PubSubClient4loopEv+0x146>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4818:	448e      	add	lr, r1
   d481a:	44a6      	add	lr, r4
                            payload = buffer+llen+3+tl+2;
   d481c:	f10c 0c05 	add.w	ip, ip, #5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4820:	f89e b004 	ldrb.w	fp, [lr, #4]
   d4824:	f89e a005 	ldrb.w	sl, [lr, #5]
                            payload = buffer+llen+3+tl+2;
   d4828:	4461      	add	r1, ip
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d482a:	eb0a 2a0b 	add.w	sl, sl, fp, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d482e:	3a02      	subs	r2, #2
   d4830:	4449      	add	r1, r9
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4832:	fa1f fa8a 	uxth.w	sl, sl
                            callback(topic,payload,len-llen-3-tl-2);
   d4836:	4798      	blx	r3
                            buffer[2] = (msgId >> 8);
   d4838:	fa9a fa9a 	rev16.w	sl, sl
                            _client->write(buffer,4);
   d483c:	6820      	ldr	r0, [r4, #0]
                            buffer[2] = (msgId >> 8);
   d483e:	f8a4 a006 	strh.w	sl, [r4, #6]
                            buffer[0] = MQTTPUBACK;
   d4842:	f44f 7310 	mov.w	r3, #576	; 0x240
   d4846:	80a3      	strh	r3, [r4, #4]
                            _client->write(buffer,4);
   d4848:	6803      	ldr	r3, [r0, #0]
   d484a:	2204      	movs	r2, #4
   d484c:	68db      	ldr	r3, [r3, #12]
   d484e:	4649      	mov	r1, r9
   d4850:	4798      	blx	r3
                            lastOutActivity = t;
   d4852:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
   d4856:	46c5      	mov	sp, r8
   d4858:	e780      	b.n	d475c <_ZN12PubSubClient4loopEv+0x48>
                            payload = buffer+llen+3+tl;
   d485a:	4471      	add	r1, lr
                            callback(topic,payload,len-llen-3-tl);
   d485c:	4449      	add	r1, r9
   d485e:	4798      	blx	r3
   d4860:	e7f9      	b.n	d4856 <_ZN12PubSubClient4loopEv+0x142>
                } else if (type == MQTTPINGREQ) {
   d4862:	2bc0      	cmp	r3, #192	; 0xc0
   d4864:	d109      	bne.n	d487a <_ZN12PubSubClient4loopEv+0x166>
                    buffer[0] = MQTTPINGRESP;
   d4866:	23d0      	movs	r3, #208	; 0xd0
                    _client->write(buffer,2);
   d4868:	4621      	mov	r1, r4
                    buffer[0] = MQTTPINGRESP;
   d486a:	80a3      	strh	r3, [r4, #4]
                    _client->write(buffer,2);
   d486c:	f851 0b04 	ldr.w	r0, [r1], #4
   d4870:	6803      	ldr	r3, [r0, #0]
   d4872:	2202      	movs	r2, #2
   d4874:	68db      	ldr	r3, [r3, #12]
   d4876:	4798      	blx	r3
   d4878:	e770      	b.n	d475c <_ZN12PubSubClient4loopEv+0x48>
                } else if (type == MQTTPINGRESP) {
   d487a:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
   d487c:	bf04      	itt	eq
   d487e:	2300      	moveq	r3, #0
   d4880:	f884 3090 	strbeq.w	r3, [r4, #144]	; 0x90
   d4884:	e76a      	b.n	d475c <_ZN12PubSubClient4loopEv+0x48>

000d4886 <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   d4886:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d488a:	4604      	mov	r4, r0
   d488c:	f89d 7020 	ldrb.w	r7, [sp, #32]
   d4890:	4688      	mov	r8, r1
   d4892:	4616      	mov	r6, r2
   d4894:	461d      	mov	r5, r3
    if (connected()) {
   d4896:	f7ff fe50 	bl	d453a <_ZN12PubSubClient9connectedEv>
   d489a:	b338      	cbz	r0, d48ec <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   d489c:	4640      	mov	r0, r8
   d489e:	f001 ffff 	bl	d68a0 <strlen>
   d48a2:	1deb      	adds	r3, r5, #7
   d48a4:	4418      	add	r0, r3
   d48a6:	2880      	cmp	r0, #128	; 0x80
   d48a8:	d820      	bhi.n	d48ec <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   d48aa:	1d22      	adds	r2, r4, #4
   d48ac:	2305      	movs	r3, #5
   d48ae:	4641      	mov	r1, r8
   d48b0:	4620      	mov	r0, r4
   d48b2:	9201      	str	r2, [sp, #4]
   d48b4:	f7ff fe2b 	bl	d450e <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   d48b8:	9a01      	ldr	r2, [sp, #4]
   d48ba:	2300      	movs	r3, #0
   d48bc:	18c1      	adds	r1, r0, r3
   d48be:	429d      	cmp	r5, r3
   d48c0:	b289      	uxth	r1, r1
   d48c2:	d907      	bls.n	d48d4 <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   d48c4:	4421      	add	r1, r4
   d48c6:	f816 c003 	ldrb.w	ip, [r6, r3]
   d48ca:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   d48ce:	3301      	adds	r3, #1
   d48d0:	b29b      	uxth	r3, r3
   d48d2:	e7f3      	b.n	d48bc <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   d48d4:	1f4b      	subs	r3, r1, #5
            header |= 1;
   d48d6:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   d48d8:	b29b      	uxth	r3, r3
   d48da:	bf0c      	ite	eq
   d48dc:	2130      	moveq	r1, #48	; 0x30
   d48de:	2131      	movne	r1, #49	; 0x31
   d48e0:	4620      	mov	r0, r4
}
   d48e2:	b002      	add	sp, #8
   d48e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   d48e8:	f7ff bdd1 	b.w	d448e <_ZN12PubSubClient5writeEhPht>
}
   d48ec:	2000      	movs	r0, #0
   d48ee:	b002      	add	sp, #8
   d48f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48f4 <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   d48f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d48f6:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   d48f8:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   d48fa:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   d48fc:	9202      	str	r2, [sp, #8]
   d48fe:	f001 ffcf 	bl	d68a0 <strlen>
   d4902:	4603      	mov	r3, r0
   d4904:	2000      	movs	r0, #0
   d4906:	9000      	str	r0, [sp, #0]
   d4908:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d490c:	4620      	mov	r0, r4
   d490e:	f7ff ffba 	bl	d4886 <_ZN12PubSubClient7publishEPKcPKhjb>
}
   d4912:	b004      	add	sp, #16
   d4914:	bd10      	pop	{r4, pc}

000d4916 <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   d4916:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   d491a:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   d491e:	4770      	bx	lr

000d4920 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <HAL_USB_USART_Init+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	681b      	ldr	r3, [r3, #0]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	0003024c 	.word	0x0003024c

000d4930 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <HAL_USB_USART_Begin+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	685b      	ldr	r3, [r3, #4]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	0003024c 	.word	0x0003024c

000d4940 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <HAL_USB_USART_Available_Data+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	691b      	ldr	r3, [r3, #16]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	0003024c 	.word	0x0003024c

000d4950 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	695b      	ldr	r3, [r3, #20]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	0003024c 	.word	0x0003024c

000d4960 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <HAL_USB_USART_Receive_Data+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	699b      	ldr	r3, [r3, #24]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	0003024c 	.word	0x0003024c

000d4970 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <HAL_USB_USART_Send_Data+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	69db      	ldr	r3, [r3, #28]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	0003024c 	.word	0x0003024c

000d4980 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <HAL_USB_USART_Flush_Data+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a1b      	ldr	r3, [r3, #32]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	0003024c 	.word	0x0003024c

000d4990 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <hal_i2c_write+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a1b      	ldr	r3, [r3, #32]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030228 	.word	0x00030228

000d49a0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <hal_i2c_available+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030228 	.word	0x00030228

000d49b0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <hal_i2c_read+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030228 	.word	0x00030228

000d49c0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <hal_i2c_peek+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030228 	.word	0x00030228

000d49d0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <hal_i2c_flush+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030228 	.word	0x00030228

000d49e0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <hal_i2c_is_enabled+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030228 	.word	0x00030228

000d49f0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <hal_i2c_init+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030228 	.word	0x00030228

000d4a00 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <hal_spi_init+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	69db      	ldr	r3, [r3, #28]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030230 	.word	0x00030230

000d4a10 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <hal_spi_is_enabled+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	6a1b      	ldr	r3, [r3, #32]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030230 	.word	0x00030230

000d4a20 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <sock_setsockopt+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	699b      	ldr	r3, [r3, #24]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030238 	.word	0x00030238

000d4a30 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <sock_close+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	69db      	ldr	r3, [r3, #28]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030238 	.word	0x00030238

000d4a40 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <sock_connect+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6a1b      	ldr	r3, [r3, #32]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030238 	.word	0x00030238

000d4a50 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <sock_recv+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030238 	.word	0x00030238

000d4a60 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <sock_send+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030238 	.word	0x00030238

000d4a70 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <sock_socket+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030238 	.word	0x00030238

000d4a80 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <hal_usart_init+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	681b      	ldr	r3, [r3, #0]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003023c 	.word	0x0003023c

000d4a90 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <hal_usart_write+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	68db      	ldr	r3, [r3, #12]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <hal_usart_available+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	691b      	ldr	r3, [r3, #16]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <hal_usart_read+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	695b      	ldr	r3, [r3, #20]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003023c 	.word	0x0003023c

000d4ac0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <hal_usart_peek+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	699b      	ldr	r3, [r3, #24]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003023c 	.word	0x0003023c

000d4ad0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <hal_usart_flush+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	69db      	ldr	r3, [r3, #28]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003023c 	.word	0x0003023c

000d4ae0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <hal_usart_is_enabled+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6a1b      	ldr	r3, [r3, #32]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003023c 	.word	0x0003023c

000d4af0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <hal_usart_available_data_for_write+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003023c 	.word	0x0003023c

000d4b00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <inet_inet_ntop+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	695b      	ldr	r3, [r3, #20]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030264 	.word	0x00030264

000d4b10 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <inet_htonl+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6a1b      	ldr	r3, [r3, #32]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030264 	.word	0x00030264

000d4b20 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <inet_htons+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030264 	.word	0x00030264

000d4b30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <os_mutex_recursive_create+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030248 	.word	0x00030248

000d4b40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <HAL_RNG_GetRandomNumber+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	685b      	ldr	r3, [r3, #4]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030218 	.word	0x00030218

000d4b50 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	695b      	ldr	r3, [r3, #20]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030218 	.word	0x00030218

000d4b60 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <if_index_to_name+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	695b      	ldr	r3, [r3, #20]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003026c 	.word	0x0003026c

000d4b70 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <HAL_Pin_Mode+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	689b      	ldr	r3, [r3, #8]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003022c 	.word	0x0003022c

000d4b80 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <HAL_Get_Pin_Mode+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	68db      	ldr	r3, [r3, #12]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	0003022c 	.word	0x0003022c

000d4b90 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <HAL_GPIO_Write+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	691b      	ldr	r3, [r3, #16]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	0003022c 	.word	0x0003022c

000d4ba0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <netdb_freeaddrinfo+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	689b      	ldr	r3, [r3, #8]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030268 	.word	0x00030268

000d4bb0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <netdb_getaddrinfo+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	68db      	ldr	r3, [r3, #12]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030268 	.word	0x00030268

000d4bc0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <log_message+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030260 	.word	0x00030260

000d4bd0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <spark_set_random_seed_from_cloud_handler+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030244 	.word	0x00030244

000d4be0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <network_connect+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	685b      	ldr	r3, [r3, #4]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030240 	.word	0x00030240

000d4bf0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <network_connecting+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	689b      	ldr	r3, [r3, #8]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030240 	.word	0x00030240

000d4c00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <network_disconnect+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	68db      	ldr	r3, [r3, #12]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030240 	.word	0x00030240

000d4c10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <network_ready+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	691b      	ldr	r3, [r3, #16]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030240 	.word	0x00030240

000d4c20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <network_on+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	695b      	ldr	r3, [r3, #20]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030240 	.word	0x00030240

000d4c30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <network_off+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	699b      	ldr	r3, [r3, #24]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030240 	.word	0x00030240

000d4c40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <network_listen+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	69db      	ldr	r3, [r3, #28]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030240 	.word	0x00030240

000d4c50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <network_listening+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6a1b      	ldr	r3, [r3, #32]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030240 	.word	0x00030240

000d4c60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <network_set_listen_timeout+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030240 	.word	0x00030240

000d4c70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <network_get_listen_timeout+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030240 	.word	0x00030240

000d4c80 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <network_is_on+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030240 	.word	0x00030240

000d4c90 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <network_is_off+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030240 	.word	0x00030240

000d4ca0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <set_system_mode+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	685b      	ldr	r3, [r3, #4]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030220 	.word	0x00030220

000d4cb0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <system_delay_ms+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	695b      	ldr	r3, [r3, #20]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030220 	.word	0x00030220

000d4cc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b03      	ldr	r3, [pc, #12]	; (d4cd0 <system_ctrl_set_app_request_handler+0x10>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cca:	9301      	str	r3, [sp, #4]
   d4ccc:	bd08      	pop	{r3, pc}
   d4cce:	0000      	.short	0x0000
   d4cd0:	00030220 	.word	0x00030220

000d4cd4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b03      	ldr	r3, [pc, #12]	; (d4ce4 <system_ctrl_set_result+0x10>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cde:	9301      	str	r3, [sp, #4]
   d4ce0:	bd08      	pop	{r3, pc}
   d4ce2:	0000      	.short	0x0000
   d4ce4:	00030220 	.word	0x00030220

000d4ce8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <malloc+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	681b      	ldr	r3, [r3, #0]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	0003021c 	.word	0x0003021c

000d4cf8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <free+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	685b      	ldr	r3, [r3, #4]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	0003021c 	.word	0x0003021c

000d4d08 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <snprintf+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	69db      	ldr	r3, [r3, #28]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	0003021c 	.word	0x0003021c

000d4d18 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <vsnprintf+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	0003021c 	.word	0x0003021c

000d4d28 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <__errno+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	0003021c 	.word	0x0003021c

000d4d38 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <newlib_impure_ptr_callback+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	0003021c 	.word	0x0003021c

000d4d48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4d48:	2300      	movs	r3, #0
   d4d4a:	6840      	ldr	r0, [r0, #4]
   d4d4c:	461a      	mov	r2, r3
   d4d4e:	f7ff bf47 	b.w	d4be0 <network_connect>

000d4d52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d52:	6840      	ldr	r0, [r0, #4]
   d4d54:	2200      	movs	r2, #0
   d4d56:	2102      	movs	r1, #2
   d4d58:	f7ff bf52 	b.w	d4c00 <network_disconnect>

000d4d5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d5c:	2200      	movs	r2, #0
   d4d5e:	6840      	ldr	r0, [r0, #4]
   d4d60:	4611      	mov	r1, r2
   d4d62:	f7ff bf45 	b.w	d4bf0 <network_connecting>

000d4d66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4d66:	2200      	movs	r2, #0
   d4d68:	6840      	ldr	r0, [r0, #4]
   d4d6a:	4611      	mov	r1, r2
   d4d6c:	f7ff bf50 	b.w	d4c10 <network_ready>

000d4d70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d70:	2300      	movs	r3, #0
   d4d72:	6840      	ldr	r0, [r0, #4]
   d4d74:	461a      	mov	r2, r3
   d4d76:	4619      	mov	r1, r3
   d4d78:	f7ff bf52 	b.w	d4c20 <network_on>

000d4d7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4d7c:	2300      	movs	r3, #0
   d4d7e:	6840      	ldr	r0, [r0, #4]
   d4d80:	461a      	mov	r2, r3
   d4d82:	4619      	mov	r1, r3
   d4d84:	f7ff bf54 	b.w	d4c30 <network_off>

000d4d88 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4d88:	6840      	ldr	r0, [r0, #4]
   d4d8a:	2100      	movs	r1, #0
   d4d8c:	f7ff bf78 	b.w	d4c80 <network_is_on>

000d4d90 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4d90:	6840      	ldr	r0, [r0, #4]
   d4d92:	2100      	movs	r1, #0
   d4d94:	f7ff bf7c 	b.w	d4c90 <network_is_off>

000d4d98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d98:	6840      	ldr	r0, [r0, #4]
   d4d9a:	2200      	movs	r2, #0
   d4d9c:	f081 0101 	eor.w	r1, r1, #1
   d4da0:	f7ff bf4e 	b.w	d4c40 <network_listen>

000d4da4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4da4:	6840      	ldr	r0, [r0, #4]
   d4da6:	2200      	movs	r2, #0
   d4da8:	f7ff bf5a 	b.w	d4c60 <network_set_listen_timeout>

000d4dac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4dac:	2200      	movs	r2, #0
   d4dae:	6840      	ldr	r0, [r0, #4]
   d4db0:	4611      	mov	r1, r2
   d4db2:	f7ff bf5d 	b.w	d4c70 <network_get_listen_timeout>

000d4db6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4db6:	2200      	movs	r2, #0
   d4db8:	6840      	ldr	r0, [r0, #4]
   d4dba:	4611      	mov	r1, r2
   d4dbc:	f7ff bf48 	b.w	d4c50 <network_listening>

000d4dc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4dc4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4dc6:	b095      	sub	sp, #84	; 0x54
   d4dc8:	4616      	mov	r6, r2
   d4dca:	460d      	mov	r5, r1
   d4dcc:	4607      	mov	r7, r0
    IPAddress addr;
   d4dce:	f000 fd21 	bl	d5814 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4dd2:	4621      	mov	r1, r4
   d4dd4:	2218      	movs	r2, #24
   d4dd6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4dd8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4dda:	f001 fcf7 	bl	d67cc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4dde:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4de0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4de4:	4621      	mov	r1, r4
   d4de6:	466b      	mov	r3, sp
   d4de8:	aa0c      	add	r2, sp, #48	; 0x30
   d4dea:	4630      	mov	r0, r6
   d4dec:	f7ff fee0 	bl	d4bb0 <netdb_getaddrinfo>
    if (!r) {
   d4df0:	4604      	mov	r4, r0
   d4df2:	2800      	cmp	r0, #0
   d4df4:	d146      	bne.n	d4e84 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4df6:	4602      	mov	r2, r0
   d4df8:	2101      	movs	r1, #1
   d4dfa:	6868      	ldr	r0, [r5, #4]
   d4dfc:	f7ff ff08 	bl	d4c10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e00:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e02:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e04:	4622      	mov	r2, r4
   d4e06:	6868      	ldr	r0, [r5, #4]
   d4e08:	f7ff ff02 	bl	d4c10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e0c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e0e:	4681      	mov	r9, r0
        bool ok = false;
   d4e10:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e12:	2e00      	cmp	r6, #0
   d4e14:	d036      	beq.n	d4e84 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4e16:	2900      	cmp	r1, #0
   d4e18:	d134      	bne.n	d4e84 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4e1a:	6873      	ldr	r3, [r6, #4]
   d4e1c:	2b02      	cmp	r3, #2
   d4e1e:	d003      	beq.n	d4e28 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4e20:	2b0a      	cmp	r3, #10
   d4e22:	d00b      	beq.n	d4e3c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e24:	69f6      	ldr	r6, [r6, #28]
   d4e26:	e7f4      	b.n	d4e12 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4e28:	f1b8 0f00 	cmp.w	r8, #0
   d4e2c:	d004      	beq.n	d4e38 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e2e:	6971      	ldr	r1, [r6, #20]
   d4e30:	4638      	mov	r0, r7
   d4e32:	3104      	adds	r1, #4
   d4e34:	f000 fd31 	bl	d589a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4e38:	4641      	mov	r1, r8
   d4e3a:	e7f3      	b.n	d4e24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4e3c:	f1b9 0f00 	cmp.w	r9, #0
   d4e40:	d101      	bne.n	d4e46 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4e42:	4649      	mov	r1, r9
   d4e44:	e7ee      	b.n	d4e24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4e46:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4e48:	2210      	movs	r2, #16
   d4e4a:	a801      	add	r0, sp, #4
   d4e4c:	f001 fcbe 	bl	d67cc <memset>
                    a.v = 6;
   d4e50:	2306      	movs	r3, #6
   d4e52:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e56:	ad01      	add	r5, sp, #4
   d4e58:	f104 0308 	add.w	r3, r4, #8
   d4e5c:	3418      	adds	r4, #24
   d4e5e:	6818      	ldr	r0, [r3, #0]
   d4e60:	6859      	ldr	r1, [r3, #4]
   d4e62:	462a      	mov	r2, r5
   d4e64:	c203      	stmia	r2!, {r0, r1}
   d4e66:	3308      	adds	r3, #8
   d4e68:	42a3      	cmp	r3, r4
   d4e6a:	4615      	mov	r5, r2
   d4e6c:	d1f7      	bne.n	d4e5e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4e6e:	a901      	add	r1, sp, #4
   d4e70:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e72:	ad07      	add	r5, sp, #28
   d4e74:	f000 fcdc 	bl	d5830 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e7a:	1d3c      	adds	r4, r7, #4
   d4e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e7e:	682b      	ldr	r3, [r5, #0]
   d4e80:	7023      	strb	r3, [r4, #0]
   d4e82:	e7de      	b.n	d4e42 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e84:	9800      	ldr	r0, [sp, #0]
   d4e86:	f7ff fe8b 	bl	d4ba0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e8a:	4638      	mov	r0, r7
   d4e8c:	b015      	add	sp, #84	; 0x54
   d4e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4e94 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e94:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e96:	4a03      	ldr	r2, [pc, #12]	; (d4ea4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e98:	601a      	str	r2, [r3, #0]
   d4e9a:	2200      	movs	r2, #0
   d4e9c:	605a      	str	r2, [r3, #4]

} // spark
   d4e9e:	4770      	bx	lr
   d4ea0:	2003e5a8 	.word	0x2003e5a8
   d4ea4:	000d6abc 	.word	0x000d6abc

000d4ea8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	6840      	ldr	r0, [r0, #4]
   d4eac:	4611      	mov	r1, r2
   d4eae:	f7ff beaf 	b.w	d4c10 <network_ready>

000d4eb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4eb2:	2200      	movs	r2, #0
   d4eb4:	6840      	ldr	r0, [r0, #4]
   d4eb6:	4611      	mov	r1, r2
   d4eb8:	f7ff beca 	b.w	d4c50 <network_listening>

000d4ebc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4ebc:	2200      	movs	r2, #0
   d4ebe:	6840      	ldr	r0, [r0, #4]
   d4ec0:	4611      	mov	r1, r2
   d4ec2:	f7ff bed5 	b.w	d4c70 <network_get_listen_timeout>

000d4ec6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ec6:	6840      	ldr	r0, [r0, #4]
   d4ec8:	2200      	movs	r2, #0
   d4eca:	f7ff bec9 	b.w	d4c60 <network_set_listen_timeout>

000d4ece <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	2200      	movs	r2, #0
   d4ed2:	f081 0101 	eor.w	r1, r1, #1
   d4ed6:	f7ff beb3 	b.w	d4c40 <network_listen>

000d4eda <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4eda:	2300      	movs	r3, #0
   d4edc:	6840      	ldr	r0, [r0, #4]
   d4ede:	461a      	mov	r2, r3
   d4ee0:	4619      	mov	r1, r3
   d4ee2:	f7ff bea5 	b.w	d4c30 <network_off>

000d4ee6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ee6:	2300      	movs	r3, #0
   d4ee8:	6840      	ldr	r0, [r0, #4]
   d4eea:	461a      	mov	r2, r3
   d4eec:	4619      	mov	r1, r3
   d4eee:	f7ff be97 	b.w	d4c20 <network_on>

000d4ef2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4ef2:	2200      	movs	r2, #0
   d4ef4:	6840      	ldr	r0, [r0, #4]
   d4ef6:	4611      	mov	r1, r2
   d4ef8:	f7ff be7a 	b.w	d4bf0 <network_connecting>

000d4efc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4efc:	6840      	ldr	r0, [r0, #4]
   d4efe:	2200      	movs	r2, #0
   d4f00:	2102      	movs	r1, #2
   d4f02:	f7ff be7d 	b.w	d4c00 <network_disconnect>

000d4f06 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4f06:	2300      	movs	r3, #0
   d4f08:	6840      	ldr	r0, [r0, #4]
   d4f0a:	461a      	mov	r2, r3
   d4f0c:	f7ff be68 	b.w	d4be0 <network_connect>

000d4f10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4f10:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4f12:	2204      	movs	r2, #4
   d4f14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4f16:	4a02      	ldr	r2, [pc, #8]	; (d4f20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4f18:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4f1a:	4770      	bx	lr
   d4f1c:	2003e5b0 	.word	0x2003e5b0
   d4f20:	000d6af8 	.word	0x000d6af8

000d4f24 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d4f24:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d4f26:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d4f28:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d4f2c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d4f2e:	2201      	movs	r2, #1
   d4f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4f34:	f10d 0107 	add.w	r1, sp, #7
   d4f38:	47a0      	blx	r4
}
   d4f3a:	b002      	add	sp, #8
   d4f3c:	bd10      	pop	{r4, pc}

000d4f3e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d4f3e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d4f40:	6803      	ldr	r3, [r0, #0]
   d4f42:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d4f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4f48:	46a4      	mov	ip, r4
}
   d4f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d4f4e:	4760      	bx	ip

000d4f50 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d4f50:	b513      	push	{r0, r1, r4, lr}
   d4f52:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d4f54:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d4f56:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d4f5a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4f5c:	f10d 0107 	add.w	r1, sp, #7
   d4f60:	2201      	movs	r2, #1
   d4f62:	47a0      	blx	r4
}
   d4f64:	b002      	add	sp, #8
   d4f66:	bd10      	pop	{r4, pc}

000d4f68 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d4f68:	4770      	bx	lr

000d4f6a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d4f6a:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4f6c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d4f6e:	681a      	ldr	r2, [r3, #0]
   d4f70:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d4f72:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d4f74:	da10      	bge.n	d4f98 <_ZN9TCPClient9connectedEv+0x2e>
   d4f76:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d4f7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d4f7e:	429a      	cmp	r2, r3
   d4f80:	d10a      	bne.n	d4f98 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d4f82:	6803      	ldr	r3, [r0, #0]
   d4f84:	691b      	ldr	r3, [r3, #16]
   d4f86:	4798      	blx	r3
        if (!rv) {
   d4f88:	4604      	mov	r4, r0
   d4f8a:	b928      	cbnz	r0, d4f98 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d4f8c:	682b      	ldr	r3, [r5, #0]
   d4f8e:	4628      	mov	r0, r5
   d4f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f92:	4798      	blx	r3
        rv = available();
   d4f94:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d4f96:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d4f98:	2001      	movs	r0, #1
   d4f9a:	e7fc      	b.n	d4f96 <_ZN9TCPClient9connectedEv+0x2c>

000d4f9c <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d4f9c:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d4f9e:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d4fa0:	43c0      	mvns	r0, r0
   d4fa2:	0fc0      	lsrs	r0, r0, #31
   d4fa4:	4770      	bx	lr

000d4fa6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4fa6:	4770      	bx	lr

000d4fa8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4fa8:	4b06      	ldr	r3, [pc, #24]	; (d4fc4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4faa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4fac:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4fae:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4fb2:	d005      	beq.n	d4fc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4fb4:	4608      	mov	r0, r1
   d4fb6:	f000 fec5 	bl	d5d44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4fba:	2800      	cmp	r0, #0
	return nullptr;
   d4fbc:	bf08      	it	eq
   d4fbe:	2400      	moveq	r4, #0
      }
   d4fc0:	4620      	mov	r0, r4
   d4fc2:	bd10      	pop	{r4, pc}
   d4fc4:	000d6b60 	.word	0x000d6b60

000d4fc8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4fc8:	b510      	push	{r4, lr}
   d4fca:	21ac      	movs	r1, #172	; 0xac
   d4fcc:	4604      	mov	r4, r0
   d4fce:	f000 feb5 	bl	d5d3c <_ZdlPvj>
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	bd10      	pop	{r4, pc}

000d4fd6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4fd6:	f7ff b860 	b.w	d409a <_ZdlPv>

000d4fda <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d4fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d4fde:	f04f 0800 	mov.w	r8, #0
   d4fe2:	b086      	sub	sp, #24
   d4fe4:	461d      	mov	r5, r3
   d4fe6:	f8c0 8004 	str.w	r8, [r0, #4]
   d4fea:	4604      	mov	r4, r0
   d4fec:	460e      	mov	r6, r1
   d4fee:	4617      	mov	r7, r2
    struct timeval tv = {};
   d4ff0:	4641      	mov	r1, r8
   d4ff2:	2210      	movs	r2, #16
   d4ff4:	a802      	add	r0, sp, #8
   d4ff6:	f001 fbe9 	bl	d67cc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d4ffa:	1c6b      	adds	r3, r5, #1
   d4ffc:	d009      	beq.n	d5012 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d4ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5002:	fbb5 f3f0 	udiv	r3, r5, r0
   d5006:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d500a:	fb00 5313 	mls	r3, r0, r3, r5
   d500e:	4358      	muls	r0, r3
   d5010:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5012:	6960      	ldr	r0, [r4, #20]
   d5014:	2310      	movs	r3, #16
   d5016:	9300      	str	r3, [sp, #0]
   d5018:	6800      	ldr	r0, [r0, #0]
   d501a:	ab02      	add	r3, sp, #8
   d501c:	f241 0205 	movw	r2, #4101	; 0x1005
   d5020:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5024:	f7ff fcfc 	bl	d4a20 <sock_setsockopt>
    if (ret < 0) {
   d5028:	2800      	cmp	r0, #0
   d502a:	da07      	bge.n	d503c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d502c:	f7ff fe7c 	bl	d4d28 <__errno>
   d5030:	6803      	ldr	r3, [r0, #0]
   d5032:	6063      	str	r3, [r4, #4]
        return 0;
   d5034:	2000      	movs	r0, #0
}
   d5036:	b006      	add	sp, #24
   d5038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d503c:	6960      	ldr	r0, [r4, #20]
   d503e:	2300      	movs	r3, #0
   d5040:	6800      	ldr	r0, [r0, #0]
   d5042:	463a      	mov	r2, r7
   d5044:	4631      	mov	r1, r6
   d5046:	f7ff fd0b 	bl	d4a60 <sock_send>
    if (ret < 0) {
   d504a:	1e03      	subs	r3, r0, #0
   d504c:	dbee      	blt.n	d502c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d504e:	4618      	mov	r0, r3
   d5050:	e7f1      	b.n	d5036 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d5054 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5054:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5056:	6984      	ldr	r4, [r0, #24]
   d5058:	4b0a      	ldr	r3, [pc, #40]	; (d5084 <_ZN9TCPClientD1Ev+0x30>)
   d505a:	6003      	str	r3, [r0, #0]
   d505c:	4605      	mov	r5, r0
   d505e:	b17c      	cbz	r4, d5080 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5060:	6863      	ldr	r3, [r4, #4]
   d5062:	3b01      	subs	r3, #1
   d5064:	6063      	str	r3, [r4, #4]
   d5066:	b95b      	cbnz	r3, d5080 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5068:	6823      	ldr	r3, [r4, #0]
   d506a:	4620      	mov	r0, r4
   d506c:	689b      	ldr	r3, [r3, #8]
   d506e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5070:	68a3      	ldr	r3, [r4, #8]
   d5072:	3b01      	subs	r3, #1
   d5074:	60a3      	str	r3, [r4, #8]
   d5076:	b91b      	cbnz	r3, d5080 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5078:	6823      	ldr	r3, [r4, #0]
   d507a:	4620      	mov	r0, r4
   d507c:	68db      	ldr	r3, [r3, #12]
   d507e:	4798      	blx	r3
   d5080:	4628      	mov	r0, r5
   d5082:	bd38      	pop	{r3, r4, r5, pc}
   d5084:	000d6b70 	.word	0x000d6b70

000d5088 <_ZN9TCPClientD0Ev>:
   d5088:	b510      	push	{r4, lr}
   d508a:	4604      	mov	r4, r0
   d508c:	f7ff ffe2 	bl	d5054 <_ZN9TCPClientD1Ev>
   d5090:	4620      	mov	r0, r4
   d5092:	211c      	movs	r1, #28
   d5094:	f000 fe52 	bl	d5d3c <_ZdlPvj>
   d5098:	4620      	mov	r0, r4
   d509a:	bd10      	pop	{r4, pc}

000d509c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d509c:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d509e:	694d      	ldr	r5, [r1, #20]
   d50a0:	4b05      	ldr	r3, [pc, #20]	; (d50b8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d50a2:	4604      	mov	r4, r0
   d50a4:	358c      	adds	r5, #140	; 0x8c
   d50a6:	f844 3b04 	str.w	r3, [r4], #4
   d50aa:	4606      	mov	r6, r0
   d50ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50b0:	682b      	ldr	r3, [r5, #0]
   d50b2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d50b4:	4630      	mov	r0, r6
   d50b6:	bd70      	pop	{r4, r5, r6, pc}
   d50b8:	000d6c44 	.word	0x000d6c44

000d50bc <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d50bc:	b510      	push	{r4, lr}
   d50be:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d50c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d50c4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d50c8:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d50ca:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d50cc:	d005      	beq.n	d50da <_ZN9TCPClient4peekEv+0x1e>
   d50ce:	6963      	ldr	r3, [r4, #20]
   d50d0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d50d4:	4413      	add	r3, r2
   d50d6:	7918      	ldrb	r0, [r3, #4]
}
   d50d8:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d50da:	6803      	ldr	r3, [r0, #0]
   d50dc:	691b      	ldr	r3, [r3, #16]
   d50de:	4798      	blx	r3
   d50e0:	2800      	cmp	r0, #0
   d50e2:	d1f4      	bne.n	d50ce <_ZN9TCPClient4peekEv+0x12>
   d50e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d50e8:	e7f6      	b.n	d50d8 <_ZN9TCPClient4peekEv+0x1c>

000d50ea <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d50ea:	b510      	push	{r4, lr}
   d50ec:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d50ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d50f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d50f6:	429a      	cmp	r2, r3
int TCPClient::read() {
   d50f8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d50fa:	d008      	beq.n	d510e <_ZN9TCPClient4readEv+0x24>
   d50fc:	6963      	ldr	r3, [r4, #20]
   d50fe:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5102:	1c51      	adds	r1, r2, #1
   d5104:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d5108:	4413      	add	r3, r2
   d510a:	7918      	ldrb	r0, [r3, #4]
}
   d510c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d510e:	6803      	ldr	r3, [r0, #0]
   d5110:	691b      	ldr	r3, [r3, #16]
   d5112:	4798      	blx	r3
   d5114:	2800      	cmp	r0, #0
   d5116:	d1f1      	bne.n	d50fc <_ZN9TCPClient4readEv+0x12>
   d5118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d511c:	e7f6      	b.n	d510c <_ZN9TCPClient4readEv+0x22>

000d511e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d511e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5120:	6943      	ldr	r3, [r0, #20]
   d5122:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d5124:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5128:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d512c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d512e:	4605      	mov	r5, r0
   d5130:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d5132:	d016      	beq.n	d5162 <_ZN9TCPClient4readEPhj+0x44>
   d5134:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d5136:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d513a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d513e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5140:	42bc      	cmp	r4, r7
   d5142:	bf28      	it	cs
   d5144:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5146:	3304      	adds	r3, #4
   d5148:	4622      	mov	r2, r4
   d514a:	4419      	add	r1, r3
   d514c:	4630      	mov	r0, r6
   d514e:	f001 fb2f 	bl	d67b0 <memcpy>
   d5152:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5154:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5158:	4423      	add	r3, r4
   d515a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d515e:	4620      	mov	r0, r4
   d5160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d5162:	6803      	ldr	r3, [r0, #0]
   d5164:	691b      	ldr	r3, [r3, #16]
   d5166:	4798      	blx	r3
   d5168:	2800      	cmp	r0, #0
   d516a:	d1e3      	bne.n	d5134 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d516c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5170:	e7f5      	b.n	d515e <_ZN9TCPClient4readEPhj+0x40>
	...

000d5174 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5178:	4698      	mov	r8, r3
    stop();
   d517a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d517c:	b093      	sub	sp, #76	; 0x4c
   d517e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d5180:	2400      	movs	r4, #0
    stop();
   d5182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5184:	4606      	mov	r6, r0
   d5186:	4617      	mov	r7, r2
    stop();
   d5188:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d518a:	4628      	mov	r0, r5
   d518c:	466b      	mov	r3, sp
   d518e:	4622      	mov	r2, r4
   d5190:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d5192:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5194:	f7ff fd0c 	bl	d4bb0 <netdb_getaddrinfo>
   d5198:	4605      	mov	r5, r0
   d519a:	2800      	cmp	r0, #0
   d519c:	d163      	bne.n	d5266 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d519e:	9b00      	ldr	r3, [sp, #0]
   d51a0:	2b00      	cmp	r3, #0
   d51a2:	d04b      	beq.n	d523c <_ZN9TCPClient7connectEPKctm+0xc8>
   d51a4:	695b      	ldr	r3, [r3, #20]
   d51a6:	2b00      	cmp	r3, #0
   d51a8:	d048      	beq.n	d523c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d51aa:	a806      	add	r0, sp, #24
   d51ac:	f000 fb32 	bl	d5814 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d51b0:	9b00      	ldr	r3, [sp, #0]
   d51b2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d51b4:	7863      	ldrb	r3, [r4, #1]
   d51b6:	2b02      	cmp	r3, #2
   d51b8:	d104      	bne.n	d51c4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d51ba:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d51bc:	a806      	add	r0, sp, #24
   d51be:	f000 fb6c 	bl	d589a <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d51c2:	e026      	b.n	d5212 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d51c4:	2b0a      	cmp	r3, #10
   d51c6:	d124      	bne.n	d5212 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d51c8:	2211      	movs	r2, #17
   d51ca:	4629      	mov	r1, r5
   d51cc:	a801      	add	r0, sp, #4
   d51ce:	f001 fafd 	bl	d67cc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d51d2:	68a3      	ldr	r3, [r4, #8]
   d51d4:	2b00      	cmp	r3, #0
   d51d6:	d038      	beq.n	d524a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d51d8:	f104 0308 	add.w	r3, r4, #8
   d51dc:	f10d 0c04 	add.w	ip, sp, #4
   d51e0:	3418      	adds	r4, #24
   d51e2:	6818      	ldr	r0, [r3, #0]
   d51e4:	6859      	ldr	r1, [r3, #4]
   d51e6:	4662      	mov	r2, ip
   d51e8:	c203      	stmia	r2!, {r0, r1}
   d51ea:	3308      	adds	r3, #8
   d51ec:	42a3      	cmp	r3, r4
   d51ee:	4694      	mov	ip, r2
   d51f0:	d1f7      	bne.n	d51e2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d51f2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d51f4:	a901      	add	r1, sp, #4
   d51f6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d51f8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d51fc:	f000 fb18 	bl	d5830 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5200:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d5204:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5208:	ac07      	add	r4, sp, #28
   d520a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d520c:	f8dc 3000 	ldr.w	r3, [ip]
   d5210:	7023      	strb	r3, [r4, #0]
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5212:	a806      	add	r0, sp, #24
   d5214:	f000 fb1e 	bl	d5854 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5218:	b180      	cbz	r0, d523c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d521a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d521c:	ad07      	add	r5, sp, #28
   d521e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5222:	4b12      	ldr	r3, [pc, #72]	; (d526c <_ZN9TCPClient7connectEPKctm+0xf8>)
   d5224:	930c      	str	r3, [sp, #48]	; 0x30
   d5226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5228:	ac0d      	add	r4, sp, #52	; 0x34
   d522a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d522c:	682b      	ldr	r3, [r5, #0]
   d522e:	7023      	strb	r3, [r4, #0]
   d5230:	463a      	mov	r2, r7
   d5232:	4643      	mov	r3, r8
   d5234:	a90c      	add	r1, sp, #48	; 0x30
   d5236:	4630      	mov	r0, r6
   d5238:	47c8      	blx	r9
   d523a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d523c:	9800      	ldr	r0, [sp, #0]
   d523e:	f7ff fcaf 	bl	d4ba0 <netdb_freeaddrinfo>
}
   d5242:	4628      	mov	r0, r5
   d5244:	b013      	add	sp, #76	; 0x4c
   d5246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d524a:	68e3      	ldr	r3, [r4, #12]
   d524c:	2b00      	cmp	r3, #0
   d524e:	d1c3      	bne.n	d51d8 <_ZN9TCPClient7connectEPKctm+0x64>
   d5250:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5254:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d5258:	f7ff fc5a 	bl	d4b10 <inet_htonl>
   d525c:	4581      	cmp	r9, r0
   d525e:	d1bb      	bne.n	d51d8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d5260:	f104 0114 	add.w	r1, r4, #20
   d5264:	e7aa      	b.n	d51bc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5266:	4625      	mov	r5, r4
   d5268:	e7e8      	b.n	d523c <_ZN9TCPClient7connectEPKctm+0xc8>
   d526a:	bf00      	nop
   d526c:	000d6c44 	.word	0x000d6c44

000d5270 <_ZN9TCPClient12flush_bufferEv>:
   d5270:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5272:	2300      	movs	r3, #0
   d5274:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5278:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d527a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d527e:	4770      	bx	lr

000d5280 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5284:	461f      	mov	r7, r3
    stop();
   d5286:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5288:	460c      	mov	r4, r1
    stop();
   d528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d528c:	b08a      	sub	sp, #40	; 0x28
   d528e:	4605      	mov	r5, r0
   d5290:	4616      	mov	r6, r2
    stop();
   d5292:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5294:	7d23      	ldrb	r3, [r4, #20]
   d5296:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d529a:	2b04      	cmp	r3, #4
   d529c:	bf0c      	ite	eq
   d529e:	2002      	moveq	r0, #2
   d52a0:	200a      	movne	r0, #10
   d52a2:	2206      	movs	r2, #6
   d52a4:	2101      	movs	r1, #1
   d52a6:	f7ff fbe3 	bl	d4a70 <sock_socket>
   d52aa:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d52ae:	696b      	ldr	r3, [r5, #20]
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	2b00      	cmp	r3, #0
   d52b4:	da08      	bge.n	d52c8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d52b6:	682b      	ldr	r3, [r5, #0]
   d52b8:	4628      	mov	r0, r5
   d52ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d52bc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d52be:	4798      	blx	r3
}
   d52c0:	4620      	mov	r0, r4
   d52c2:	b00a      	add	sp, #40	; 0x28
   d52c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d52c8:	4628      	mov	r0, r5
   d52ca:	f7ff ffd1 	bl	d5270 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d52ce:	b1b7      	cbz	r7, d52fe <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d52d0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d52d2:	a903      	add	r1, sp, #12
   d52d4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d52d6:	9303      	str	r3, [sp, #12]
   d52d8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d52dc:	f7ff fc40 	bl	d4b60 <if_index_to_name>
   d52e0:	2800      	cmp	r0, #0
   d52e2:	d1e8      	bne.n	d52b6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d52e4:	6968      	ldr	r0, [r5, #20]
   d52e6:	2306      	movs	r3, #6
   d52e8:	9300      	str	r3, [sp, #0]
   d52ea:	6800      	ldr	r0, [r0, #0]
   d52ec:	ab03      	add	r3, sp, #12
   d52ee:	f241 020b 	movw	r2, #4107	; 0x100b
   d52f2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d52f6:	f7ff fb93 	bl	d4a20 <sock_setsockopt>
   d52fa:	2800      	cmp	r0, #0
   d52fc:	d1db      	bne.n	d52b6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d52fe:	221c      	movs	r2, #28
   d5300:	2100      	movs	r1, #0
   d5302:	a803      	add	r0, sp, #12
   d5304:	f001 fa62 	bl	d67cc <memset>
    if (ip.version() == 4) {
   d5308:	7d23      	ldrb	r3, [r4, #20]
   d530a:	2b04      	cmp	r3, #4
   d530c:	d11d      	bne.n	d534a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d530e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d5312:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5314:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5318:	f7ff fc02 	bl	d4b20 <inet_htons>
   d531c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5320:	6860      	ldr	r0, [r4, #4]
   d5322:	f7ff fbf5 	bl	d4b10 <inet_htonl>
   d5326:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5328:	696b      	ldr	r3, [r5, #20]
   d532a:	221c      	movs	r2, #28
   d532c:	6818      	ldr	r0, [r3, #0]
   d532e:	a903      	add	r1, sp, #12
   d5330:	f7ff fb86 	bl	d4a40 <sock_connect>
   d5334:	2800      	cmp	r0, #0
   d5336:	d1be      	bne.n	d52b6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d5338:	3404      	adds	r4, #4
   d533a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d533c:	696d      	ldr	r5, [r5, #20]
   d533e:	358c      	adds	r5, #140	; 0x8c
   d5340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5342:	6823      	ldr	r3, [r4, #0]
   d5344:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d5346:	2401      	movs	r4, #1
   d5348:	e7ba      	b.n	d52c0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d534a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d534e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d5350:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d5354:	f7ff fbe4 	bl	d4b20 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5358:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d535a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d535e:	1d23      	adds	r3, r4, #4
   d5360:	f104 0714 	add.w	r7, r4, #20
   d5364:	6818      	ldr	r0, [r3, #0]
   d5366:	6859      	ldr	r1, [r3, #4]
   d5368:	4632      	mov	r2, r6
   d536a:	c203      	stmia	r2!, {r0, r1}
   d536c:	3308      	adds	r3, #8
   d536e:	42bb      	cmp	r3, r7
   d5370:	4616      	mov	r6, r2
   d5372:	d1f7      	bne.n	d5364 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d5374:	e7d8      	b.n	d5328 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d5378 <_ZN9TCPClient9availableEv>:
{
   d5378:	b530      	push	{r4, r5, lr}
   d537a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d537c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d5380:	b08b      	sub	sp, #44	; 0x2c
   d5382:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d5384:	b12b      	cbz	r3, d5392 <_ZN9TCPClient9availableEv+0x1a>
   d5386:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d538a:	429a      	cmp	r2, r3
   d538c:	d101      	bne.n	d5392 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d538e:	f7ff ff6f 	bl	d5270 <_ZN9TCPClient12flush_bufferEv>
   d5392:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d5394:	6808      	ldr	r0, [r1, #0]
   d5396:	2800      	cmp	r0, #0
   d5398:	db18      	blt.n	d53cc <_ZN9TCPClient9availableEv+0x54>
   d539a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d539e:	2d7f      	cmp	r5, #127	; 0x7f
   d53a0:	d814      	bhi.n	d53cc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d53a2:	3104      	adds	r1, #4
   d53a4:	2308      	movs	r3, #8
   d53a6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d53aa:	4429      	add	r1, r5
   d53ac:	f7ff fb50 	bl	d4a50 <sock_recv>
            if (ret > 0) {
   d53b0:	2800      	cmp	r0, #0
   d53b2:	dd13      	ble.n	d53dc <_ZN9TCPClient9availableEv+0x64>
   d53b4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d53b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d53ba:	b90a      	cbnz	r2, d53c0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d53bc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d53c0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d53c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d53c6:	4410      	add	r0, r2
   d53c8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d53cc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d53ce:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d53d2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d53d6:	1ac0      	subs	r0, r0, r3
   d53d8:	b00b      	add	sp, #44	; 0x2c
   d53da:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d53dc:	f7ff fca4 	bl	d4d28 <__errno>
   d53e0:	6803      	ldr	r3, [r0, #0]
   d53e2:	2b0b      	cmp	r3, #11
   d53e4:	d0f2      	beq.n	d53cc <_ZN9TCPClient9availableEv+0x54>
   d53e6:	f7ff fc9f 	bl	d4d28 <__errno>
   d53ea:	6803      	ldr	r3, [r0, #0]
   d53ec:	2b0b      	cmp	r3, #11
   d53ee:	d0ed      	beq.n	d53cc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d53f0:	2320      	movs	r3, #32
   d53f2:	2500      	movs	r5, #0
   d53f4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d53f8:	f7ff fc96 	bl	d4d28 <__errno>
   d53fc:	6803      	ldr	r3, [r0, #0]
   d53fe:	9301      	str	r3, [sp, #4]
   d5400:	4b08      	ldr	r3, [pc, #32]	; (d5424 <_ZN9TCPClient9availableEv+0xac>)
   d5402:	4909      	ldr	r1, [pc, #36]	; (d5428 <_ZN9TCPClient9availableEv+0xb0>)
   d5404:	9300      	str	r3, [sp, #0]
   d5406:	aa02      	add	r2, sp, #8
   d5408:	462b      	mov	r3, r5
   d540a:	2032      	movs	r0, #50	; 0x32
   d540c:	f7ff fbd8 	bl	d4bc0 <log_message>
                    sock_close(d_->sock);
   d5410:	6963      	ldr	r3, [r4, #20]
   d5412:	6818      	ldr	r0, [r3, #0]
   d5414:	f7ff fb0c 	bl	d4a30 <sock_close>
   d5418:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d541a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d541e:	601a      	str	r2, [r3, #0]
   d5420:	e7d4      	b.n	d53cc <_ZN9TCPClient9availableEv+0x54>
   d5422:	bf00      	nop
   d5424:	000d6b33 	.word	0x000d6b33
   d5428:	000d6b2c 	.word	0x000d6b2c

000d542c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d542c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d542e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d5430:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5432:	6818      	ldr	r0, [r3, #0]
   d5434:	2800      	cmp	r0, #0
   d5436:	db01      	blt.n	d543c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5438:	f7ff fafa 	bl	d4a30 <sock_close>
   d543c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d543e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5442:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5444:	6960      	ldr	r0, [r4, #20]
   d5446:	2211      	movs	r2, #17
   d5448:	2100      	movs	r1, #0
   d544a:	308c      	adds	r0, #140	; 0x8c
   d544c:	f001 f9be 	bl	d67cc <memset>
    flush_buffer();
   d5450:	4620      	mov	r0, r4
}
   d5452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d5456:	f7ff bf0b 	b.w	d5270 <_ZN9TCPClient12flush_bufferEv>

000d545a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d545a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d545c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d545e:	4604      	mov	r4, r0
          total(0) {
   d5460:	6001      	str	r1, [r0, #0]
   d5462:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d5466:	3088      	adds	r0, #136	; 0x88
   d5468:	f000 f9d4 	bl	d5814 <_ZN9IPAddressC1Ev>
}
   d546c:	4620      	mov	r0, r4
   d546e:	bd10      	pop	{r4, pc}

000d5470 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d5470:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5472:	2300      	movs	r3, #0
   d5474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5478:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d547c:	4a0e      	ldr	r2, [pc, #56]	; (d54b8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d547e:	6103      	str	r3, [r0, #16]
   d5480:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5482:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d5484:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5486:	20ac      	movs	r0, #172	; 0xac
   d5488:	9101      	str	r1, [sp, #4]
   d548a:	f7fe fe02 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d548e:	1e05      	subs	r5, r0, #0
   d5490:	f105 060c 	add.w	r6, r5, #12
   d5494:	d008      	beq.n	d54a8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d5496:	2301      	movs	r3, #1
   d5498:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d549c:	4b07      	ldr	r3, [pc, #28]	; (d54bc <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d549e:	9901      	ldr	r1, [sp, #4]
   d54a0:	602b      	str	r3, [r5, #0]
   d54a2:	4630      	mov	r0, r6
   d54a4:	f7ff ffd9 	bl	d545a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d54a8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d54aa:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d54ae:	f7ff fedf 	bl	d5270 <_ZN9TCPClient12flush_bufferEv>
}
   d54b2:	b002      	add	sp, #8
   d54b4:	bd70      	pop	{r4, r5, r6, pc}
   d54b6:	bf00      	nop
   d54b8:	000d6b70 	.word	0x000d6b70
   d54bc:	000d6b4c 	.word	0x000d6b4c

000d54c0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d54c0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d54c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d54c6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d54c8:	f7ff ffd2 	bl	d5470 <_ZN9TCPClientC1Ei>
}
   d54cc:	4620      	mov	r0, r4
   d54ce:	bd10      	pop	{r4, pc}

000d54d0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d54d0:	b510      	push	{r4, lr}
   d54d2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d54d4:	6800      	ldr	r0, [r0, #0]
   d54d6:	2800      	cmp	r0, #0
   d54d8:	db01      	blt.n	d54de <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d54da:	f7ff faa9 	bl	d4a30 <sock_close>
    }
}
   d54de:	4620      	mov	r0, r4
   d54e0:	bd10      	pop	{r4, pc}

000d54e2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d54e2:	300c      	adds	r0, #12
   d54e4:	f7ff bff4 	b.w	d54d0 <_ZN9TCPClient4DataD1Ev>

000d54e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d54e8:	b510      	push	{r4, lr}
   d54ea:	4604      	mov	r4, r0
   d54ec:	4608      	mov	r0, r1
{
    _spi = spi;
   d54ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d54f0:	f7ff fa86 	bl	d4a00 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d54f4:	2300      	movs	r3, #0
   d54f6:	6063      	str	r3, [r4, #4]
}
   d54f8:	4620      	mov	r0, r4
   d54fa:	bd10      	pop	{r4, pc}

000d54fc <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d54fc:	b510      	push	{r4, lr}
  if (0 == max) {
   d54fe:	4604      	mov	r4, r0
   d5500:	b128      	cbz	r0, d550e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d5502:	f001 f98f 	bl	d6824 <rand>
   d5506:	fb90 f3f4 	sdiv	r3, r0, r4
   d550a:	fb03 0414 	mls	r4, r3, r4, r0
}
   d550e:	4620      	mov	r0, r4
   d5510:	bd10      	pop	{r4, pc}

000d5512 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d5512:	4288      	cmp	r0, r1
{
   d5514:	b510      	push	{r4, lr}
   d5516:	4604      	mov	r4, r0
  if (min >= max) {
   d5518:	da03      	bge.n	d5522 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d551a:	1a08      	subs	r0, r1, r0
   d551c:	f7ff ffee 	bl	d54fc <_Z6randomi>
   d5520:	4404      	add	r4, r0
}
   d5522:	4620      	mov	r0, r4
   d5524:	bd10      	pop	{r4, pc}

000d5526 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5526:	4770      	bx	lr

000d5528 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d552a:	4606      	mov	r6, r0
   d552c:	4615      	mov	r5, r2
   d552e:	460c      	mov	r4, r1
   d5530:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5532:	42bc      	cmp	r4, r7
   d5534:	d006      	beq.n	d5544 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5536:	6833      	ldr	r3, [r6, #0]
   d5538:	f814 1b01 	ldrb.w	r1, [r4], #1
   d553c:	689b      	ldr	r3, [r3, #8]
   d553e:	4630      	mov	r0, r6
   d5540:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5542:	e7f6      	b.n	d5532 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5544:	4628      	mov	r0, r5
   d5546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5548 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5548:	7c00      	ldrb	r0, [r0, #16]
   d554a:	2200      	movs	r2, #0
   d554c:	f7ff ba20 	b.w	d4990 <hal_i2c_write>

000d5550 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5550:	7c00      	ldrb	r0, [r0, #16]
   d5552:	2100      	movs	r1, #0
   d5554:	f7ff ba24 	b.w	d49a0 <hal_i2c_available>

000d5558 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5558:	7c00      	ldrb	r0, [r0, #16]
   d555a:	2100      	movs	r1, #0
   d555c:	f7ff ba28 	b.w	d49b0 <hal_i2c_read>

000d5560 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5560:	7c00      	ldrb	r0, [r0, #16]
   d5562:	2100      	movs	r1, #0
   d5564:	f7ff ba2c 	b.w	d49c0 <hal_i2c_peek>

000d5568 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5568:	7c00      	ldrb	r0, [r0, #16]
   d556a:	2100      	movs	r1, #0
   d556c:	f7ff ba30 	b.w	d49d0 <hal_i2c_flush>

000d5570 <_ZN7TwoWireD0Ev>:
   d5570:	b510      	push	{r4, lr}
   d5572:	2114      	movs	r1, #20
   d5574:	4604      	mov	r4, r0
   d5576:	f000 fbe1 	bl	d5d3c <_ZdlPvj>
   d557a:	4620      	mov	r0, r4
   d557c:	bd10      	pop	{r4, pc}
	...

000d5580 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5580:	b510      	push	{r4, lr}
   d5582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5586:	4604      	mov	r4, r0
   d5588:	4608      	mov	r0, r1
   d558a:	2100      	movs	r1, #0
   d558c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5590:	4b03      	ldr	r3, [pc, #12]	; (d55a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5592:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5594:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5596:	4611      	mov	r1, r2
   d5598:	f7ff fa2a 	bl	d49f0 <hal_i2c_init>
}
   d559c:	4620      	mov	r0, r4
   d559e:	bd10      	pop	{r4, pc}
   d55a0:	000d6bbc 	.word	0x000d6bbc

000d55a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d55a4:	4770      	bx	lr

000d55a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55a6:	7441      	strb	r1, [r0, #17]
}
   d55a8:	4770      	bx	lr

000d55aa <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55aa:	4770      	bx	lr

000d55ac <_ZN11USARTSerial17availableForWriteEv>:
{
   d55ac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d55ae:	7c00      	ldrb	r0, [r0, #16]
   d55b0:	f7ff fa9e 	bl	d4af0 <hal_usart_available_data_for_write>
}
   d55b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55b8:	bd08      	pop	{r3, pc}

000d55ba <_ZN11USARTSerial9availableEv>:
{
   d55ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d55bc:	7c00      	ldrb	r0, [r0, #16]
   d55be:	f7ff fa6f 	bl	d4aa0 <hal_usart_available>
}
   d55c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55c6:	bd08      	pop	{r3, pc}

000d55c8 <_ZN11USARTSerial4peekEv>:
{
   d55c8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d55ca:	7c00      	ldrb	r0, [r0, #16]
   d55cc:	f7ff fa78 	bl	d4ac0 <hal_usart_peek>
}
   d55d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55d4:	bd08      	pop	{r3, pc}

000d55d6 <_ZN11USARTSerial4readEv>:
{
   d55d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d55d8:	7c00      	ldrb	r0, [r0, #16]
   d55da:	f7ff fa69 	bl	d4ab0 <hal_usart_read>
}
   d55de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55e2:	bd08      	pop	{r3, pc}

000d55e4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d55e4:	7c00      	ldrb	r0, [r0, #16]
   d55e6:	f7ff ba73 	b.w	d4ad0 <hal_usart_flush>

000d55ea <_ZN11USARTSerial5writeEh>:
{
   d55ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55ec:	7c45      	ldrb	r5, [r0, #17]
{
   d55ee:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55f0:	b12d      	cbz	r5, d55fe <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d55f2:	7c20      	ldrb	r0, [r4, #16]
}
   d55f4:	b003      	add	sp, #12
   d55f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d55fa:	f7ff ba49 	b.w	d4a90 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55fe:	7c00      	ldrb	r0, [r0, #16]
   d5600:	9101      	str	r1, [sp, #4]
   d5602:	f7ff fa75 	bl	d4af0 <hal_usart_available_data_for_write>
   d5606:	2800      	cmp	r0, #0
   d5608:	9901      	ldr	r1, [sp, #4]
   d560a:	dcf2      	bgt.n	d55f2 <_ZN11USARTSerial5writeEh+0x8>
}
   d560c:	4628      	mov	r0, r5
   d560e:	b003      	add	sp, #12
   d5610:	bd30      	pop	{r4, r5, pc}

000d5612 <_ZN11USARTSerialD0Ev>:
   d5612:	b510      	push	{r4, lr}
   d5614:	2114      	movs	r1, #20
   d5616:	4604      	mov	r4, r0
   d5618:	f000 fb90 	bl	d5d3c <_ZdlPvj>
   d561c:	4620      	mov	r0, r4
   d561e:	bd10      	pop	{r4, pc}

000d5620 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5620:	b510      	push	{r4, lr}
   d5622:	f04f 0c00 	mov.w	ip, #0
   d5626:	4604      	mov	r4, r0
   d5628:	4608      	mov	r0, r1
   d562a:	4611      	mov	r1, r2
   d562c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5630:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5634:	4a04      	ldr	r2, [pc, #16]	; (d5648 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5636:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5638:	2201      	movs	r2, #1
  _serial = serial;
   d563a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d563c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d563e:	461a      	mov	r2, r3
   d5640:	f7ff fa1e 	bl	d4a80 <hal_usart_init>
}
   d5644:	4620      	mov	r0, r4
   d5646:	bd10      	pop	{r4, pc}
   d5648:	000d6be4 	.word	0x000d6be4

000d564c <_Z22__fetch_global_Serial1v>:
{
   d564c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d564e:	4c0d      	ldr	r4, [pc, #52]	; (d5684 <_Z22__fetch_global_Serial1v+0x38>)
   d5650:	7821      	ldrb	r1, [r4, #0]
   d5652:	f3bf 8f5b 	dmb	ish
   d5656:	f011 0101 	ands.w	r1, r1, #1
   d565a:	d110      	bne.n	d567e <_Z22__fetch_global_Serial1v+0x32>
   d565c:	4620      	mov	r0, r4
   d565e:	9101      	str	r1, [sp, #4]
   d5660:	f7fe fd1d 	bl	d409e <__cxa_guard_acquire>
   d5664:	9901      	ldr	r1, [sp, #4]
   d5666:	b150      	cbz	r0, d567e <_Z22__fetch_global_Serial1v+0x32>
   d5668:	4b07      	ldr	r3, [pc, #28]	; (d5688 <_Z22__fetch_global_Serial1v+0x3c>)
   d566a:	4a08      	ldr	r2, [pc, #32]	; (d568c <_Z22__fetch_global_Serial1v+0x40>)
   d566c:	4808      	ldr	r0, [pc, #32]	; (d5690 <_Z22__fetch_global_Serial1v+0x44>)
   d566e:	f7ff ffd7 	bl	d5620 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5672:	4620      	mov	r0, r4
   d5674:	f7fe fd18 	bl	d40a8 <__cxa_guard_release>
   d5678:	4806      	ldr	r0, [pc, #24]	; (d5694 <_Z22__fetch_global_Serial1v+0x48>)
   d567a:	f001 f893 	bl	d67a4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d567e:	4804      	ldr	r0, [pc, #16]	; (d5690 <_Z22__fetch_global_Serial1v+0x44>)
   d5680:	b002      	add	sp, #8
   d5682:	bd10      	pop	{r4, pc}
   d5684:	2003e5b8 	.word	0x2003e5b8
   d5688:	2003e640 	.word	0x2003e640
   d568c:	2003e5bc 	.word	0x2003e5bc
   d5690:	2003e6c4 	.word	0x2003e6c4
   d5694:	000d55ab 	.word	0x000d55ab

000d5698 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5698:	7441      	strb	r1, [r0, #17]
}
   d569a:	4770      	bx	lr

000d569c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d569c:	4770      	bx	lr

000d569e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d569e:	4770      	bx	lr

000d56a0 <_ZN9USBSerial4readEv>:
{
   d56a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d56a2:	2100      	movs	r1, #0
   d56a4:	7c00      	ldrb	r0, [r0, #16]
   d56a6:	f7ff f95b 	bl	d4960 <HAL_USB_USART_Receive_Data>
}
   d56aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56ae:	bd08      	pop	{r3, pc}

000d56b0 <_ZN9USBSerial4peekEv>:
{
   d56b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d56b2:	2101      	movs	r1, #1
   d56b4:	7c00      	ldrb	r0, [r0, #16]
   d56b6:	f7ff f953 	bl	d4960 <HAL_USB_USART_Receive_Data>
}
   d56ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56be:	bd08      	pop	{r3, pc}

000d56c0 <_ZN9USBSerial17availableForWriteEv>:
{
   d56c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d56c2:	7c00      	ldrb	r0, [r0, #16]
   d56c4:	f7ff f944 	bl	d4950 <HAL_USB_USART_Available_Data_For_Write>
}
   d56c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56cc:	bd08      	pop	{r3, pc}

000d56ce <_ZN9USBSerial9availableEv>:
{
   d56ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d56d0:	7c00      	ldrb	r0, [r0, #16]
   d56d2:	f7ff f935 	bl	d4940 <HAL_USB_USART_Available_Data>
}
   d56d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56da:	bd08      	pop	{r3, pc}

000d56dc <_ZN9USBSerial5writeEh>:
{
   d56dc:	b513      	push	{r0, r1, r4, lr}
   d56de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56e0:	7c00      	ldrb	r0, [r0, #16]
{
   d56e2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56e4:	f7ff f934 	bl	d4950 <HAL_USB_USART_Available_Data_For_Write>
   d56e8:	2800      	cmp	r0, #0
   d56ea:	9901      	ldr	r1, [sp, #4]
   d56ec:	dc01      	bgt.n	d56f2 <_ZN9USBSerial5writeEh+0x16>
   d56ee:	7c60      	ldrb	r0, [r4, #17]
   d56f0:	b120      	cbz	r0, d56fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d56f2:	7c20      	ldrb	r0, [r4, #16]
   d56f4:	f7ff f93c 	bl	d4970 <HAL_USB_USART_Send_Data>
   d56f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d56fc:	b002      	add	sp, #8
   d56fe:	bd10      	pop	{r4, pc}

000d5700 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5700:	7c00      	ldrb	r0, [r0, #16]
   d5702:	f7ff b93d 	b.w	d4980 <HAL_USB_USART_Flush_Data>

000d5706 <_ZN9USBSerialD0Ev>:
   d5706:	b510      	push	{r4, lr}
   d5708:	2114      	movs	r1, #20
   d570a:	4604      	mov	r4, r0
   d570c:	f000 fb16 	bl	d5d3c <_ZdlPvj>
   d5710:	4620      	mov	r0, r4
   d5712:	bd10      	pop	{r4, pc}

000d5714 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5714:	b510      	push	{r4, lr}
   d5716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d571a:	4604      	mov	r4, r0
   d571c:	4608      	mov	r0, r1
   d571e:	2100      	movs	r1, #0
   d5720:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5724:	4b04      	ldr	r3, [pc, #16]	; (d5738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5726:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5728:	2301      	movs	r3, #1
  _serial = serial;
   d572a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d572c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d572e:	4611      	mov	r1, r2
   d5730:	f7ff f8f6 	bl	d4920 <HAL_USB_USART_Init>
}
   d5734:	4620      	mov	r0, r4
   d5736:	bd10      	pop	{r4, pc}
   d5738:	000d6c14 	.word	0x000d6c14

000d573c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d573c:	7c00      	ldrb	r0, [r0, #16]
   d573e:	2200      	movs	r2, #0
   d5740:	f7ff b8f6 	b.w	d4930 <HAL_USB_USART_Begin>

000d5744 <_Z19acquireSerialBufferv>:
{
   d5744:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5746:	2214      	movs	r2, #20
{
   d5748:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d574a:	2100      	movs	r1, #0
   d574c:	f001 f83e 	bl	d67cc <memset>
}
   d5750:	4620      	mov	r0, r4
   d5752:	bd10      	pop	{r4, pc}

000d5754 <_Z16_fetch_usbserialv>:
{
   d5754:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5756:	4c0f      	ldr	r4, [pc, #60]	; (d5794 <_Z16_fetch_usbserialv+0x40>)
{
   d5758:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d575a:	a803      	add	r0, sp, #12
   d575c:	f7ff fff2 	bl	d5744 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5760:	7821      	ldrb	r1, [r4, #0]
   d5762:	f3bf 8f5b 	dmb	ish
   d5766:	f011 0101 	ands.w	r1, r1, #1
   d576a:	d10f      	bne.n	d578c <_Z16_fetch_usbserialv+0x38>
   d576c:	4620      	mov	r0, r4
   d576e:	9101      	str	r1, [sp, #4]
   d5770:	f7fe fc95 	bl	d409e <__cxa_guard_acquire>
   d5774:	9901      	ldr	r1, [sp, #4]
   d5776:	b148      	cbz	r0, d578c <_Z16_fetch_usbserialv+0x38>
   d5778:	aa03      	add	r2, sp, #12
   d577a:	4807      	ldr	r0, [pc, #28]	; (d5798 <_Z16_fetch_usbserialv+0x44>)
   d577c:	f7ff ffca 	bl	d5714 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5780:	4620      	mov	r0, r4
   d5782:	f7fe fc91 	bl	d40a8 <__cxa_guard_release>
   d5786:	4805      	ldr	r0, [pc, #20]	; (d579c <_Z16_fetch_usbserialv+0x48>)
   d5788:	f001 f80c 	bl	d67a4 <atexit>
	return _usbserial;
}
   d578c:	4802      	ldr	r0, [pc, #8]	; (d5798 <_Z16_fetch_usbserialv+0x44>)
   d578e:	b008      	add	sp, #32
   d5790:	bd10      	pop	{r4, pc}
   d5792:	bf00      	nop
   d5794:	2003e6d8 	.word	0x2003e6d8
   d5798:	2003e6dc 	.word	0x2003e6dc
   d579c:	000d569d 	.word	0x000d569d

000d57a0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d57a0:	4770      	bx	lr

000d57a2 <_ZN9IPAddressD0Ev>:
   d57a2:	b510      	push	{r4, lr}
   d57a4:	2118      	movs	r1, #24
   d57a6:	4604      	mov	r4, r0
   d57a8:	f000 fac8 	bl	d5d3c <_ZdlPvj>
   d57ac:	4620      	mov	r0, r4
   d57ae:	bd10      	pop	{r4, pc}

000d57b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57b2:	7d03      	ldrb	r3, [r0, #20]
   d57b4:	2b06      	cmp	r3, #6
{
   d57b6:	b08d      	sub	sp, #52	; 0x34
   d57b8:	460e      	mov	r6, r1
   d57ba:	f100 0704 	add.w	r7, r0, #4
   d57be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d57c2:	d012      	beq.n	d57ea <_ZNK9IPAddress7printToER5Print+0x3a>
   d57c4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d57c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d57cc:	220a      	movs	r2, #10
   d57ce:	4630      	mov	r0, r6
   d57d0:	f000 f967 	bl	d5aa2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d57d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d57d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d57d8:	d019      	beq.n	d580e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d57da:	2c00      	cmp	r4, #0
   d57dc:	d0f4      	beq.n	d57c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d57de:	212e      	movs	r1, #46	; 0x2e
   d57e0:	4630      	mov	r0, r6
   d57e2:	f000 f945 	bl	d5a70 <_ZN5Print5printEc>
   d57e6:	4404      	add	r4, r0
   d57e8:	e7ee      	b.n	d57c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57ea:	232f      	movs	r3, #47	; 0x2f
   d57ec:	466a      	mov	r2, sp
   d57ee:	4639      	mov	r1, r7
   d57f0:	200a      	movs	r0, #10
		buf[0] = 0;
   d57f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57f6:	f7ff f983 	bl	d4b00 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d57fa:	4668      	mov	r0, sp
   d57fc:	f001 f850 	bl	d68a0 <strlen>
   d5800:	6833      	ldr	r3, [r6, #0]
   d5802:	4602      	mov	r2, r0
   d5804:	68db      	ldr	r3, [r3, #12]
   d5806:	4669      	mov	r1, sp
   d5808:	4630      	mov	r0, r6
   d580a:	4798      	blx	r3
   d580c:	4604      	mov	r4, r0
    }
    return n;
}
   d580e:	4620      	mov	r0, r4
   d5810:	b00d      	add	sp, #52	; 0x34
   d5812:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5814 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5814:	b510      	push	{r4, lr}
   d5816:	4b05      	ldr	r3, [pc, #20]	; (d582c <_ZN9IPAddressC1Ev+0x18>)
   d5818:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   d581a:	2211      	movs	r2, #17
   d581c:	f840 3b04 	str.w	r3, [r0], #4
   d5820:	2100      	movs	r1, #0
   d5822:	f000 ffd3 	bl	d67cc <memset>
}
   d5826:	4620      	mov	r0, r4
   d5828:	bd10      	pop	{r4, pc}
   d582a:	bf00      	nop
   d582c:	000d6c44 	.word	0x000d6c44

000d5830 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5830:	4603      	mov	r3, r0
   d5832:	4a07      	ldr	r2, [pc, #28]	; (d5850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5834:	b510      	push	{r4, lr}
   d5836:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d583a:	f101 0210 	add.w	r2, r1, #16
   d583e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5842:	f843 4b04 	str.w	r4, [r3], #4
   d5846:	4291      	cmp	r1, r2
   d5848:	d1f9      	bne.n	d583e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d584a:	780a      	ldrb	r2, [r1, #0]
   d584c:	701a      	strb	r2, [r3, #0]
}
   d584e:	bd10      	pop	{r4, pc}
   d5850:	000d6c44 	.word	0x000d6c44

000d5854 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5854:	7d03      	ldrb	r3, [r0, #20]
   d5856:	2b04      	cmp	r3, #4
   d5858:	d104      	bne.n	d5864 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d585a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d585c:	3800      	subs	r0, #0
   d585e:	bf18      	it	ne
   d5860:	2001      	movne	r0, #1
   d5862:	4770      	bx	lr
    } else if (version() == 6) {
   d5864:	2b06      	cmp	r3, #6
   d5866:	d107      	bne.n	d5878 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5868:	6843      	ldr	r3, [r0, #4]
   d586a:	b93b      	cbnz	r3, d587c <_ZNK9IPAddresscvbEv+0x28>
   d586c:	6883      	ldr	r3, [r0, #8]
   d586e:	b92b      	cbnz	r3, d587c <_ZNK9IPAddresscvbEv+0x28>
   d5870:	68c3      	ldr	r3, [r0, #12]
   d5872:	b91b      	cbnz	r3, d587c <_ZNK9IPAddresscvbEv+0x28>
   d5874:	6900      	ldr	r0, [r0, #16]
   d5876:	e7f1      	b.n	d585c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d5878:	2000      	movs	r0, #0
   d587a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d587c:	2001      	movs	r0, #1
}
   d587e:	4770      	bx	lr

000d5880 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5880:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5882:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5886:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d588a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d588e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5892:	2304      	movs	r3, #4
   d5894:	6041      	str	r1, [r0, #4]
   d5896:	7503      	strb	r3, [r0, #20]
}
   d5898:	bd10      	pop	{r4, pc}

000d589a <_ZN9IPAddressaSEPKh>:
{
   d589a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d589c:	78cb      	ldrb	r3, [r1, #3]
   d589e:	9300      	str	r3, [sp, #0]
   d58a0:	788b      	ldrb	r3, [r1, #2]
   d58a2:	784a      	ldrb	r2, [r1, #1]
   d58a4:	7809      	ldrb	r1, [r1, #0]
   d58a6:	f7ff ffeb 	bl	d5880 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d58aa:	b002      	add	sp, #8
   d58ac:	bd10      	pop	{r4, pc}
	...

000d58b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d58b0:	4b01      	ldr	r3, [pc, #4]	; (d58b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d58b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d58b4:	4770      	bx	lr
   d58b6:	bf00      	nop
   d58b8:	2003e3e0 	.word	0x2003e3e0

000d58bc <serialEventRun>:
{
   d58bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d58be:	4b0b      	ldr	r3, [pc, #44]	; (d58ec <serialEventRun+0x30>)
   d58c0:	b143      	cbz	r3, d58d4 <serialEventRun+0x18>
   d58c2:	f7ff ff47 	bl	d5754 <_Z16_fetch_usbserialv>
   d58c6:	6803      	ldr	r3, [r0, #0]
   d58c8:	691b      	ldr	r3, [r3, #16]
   d58ca:	4798      	blx	r3
   d58cc:	2800      	cmp	r0, #0
   d58ce:	dd01      	ble.n	d58d4 <serialEventRun+0x18>
        serialEvent();
   d58d0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d58d4:	4b06      	ldr	r3, [pc, #24]	; (d58f0 <serialEventRun+0x34>)
   d58d6:	b143      	cbz	r3, d58ea <serialEventRun+0x2e>
   d58d8:	f7ff feb8 	bl	d564c <_Z22__fetch_global_Serial1v>
   d58dc:	6803      	ldr	r3, [r0, #0]
   d58de:	691b      	ldr	r3, [r3, #16]
   d58e0:	4798      	blx	r3
   d58e2:	2800      	cmp	r0, #0
   d58e4:	dd01      	ble.n	d58ea <serialEventRun+0x2e>
        serialEvent1();
   d58e6:	f3af 8000 	nop.w
}
   d58ea:	bd08      	pop	{r3, pc}
	...

000d58f4 <_post_loop>:
{
   d58f4:	b508      	push	{r3, lr}
	serialEventRun();
   d58f6:	f7ff ffe1 	bl	d58bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d58fa:	f7ff f929 	bl	d4b50 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d58fe:	4b01      	ldr	r3, [pc, #4]	; (d5904 <_post_loop+0x10>)
   d5900:	6018      	str	r0, [r3, #0]
}
   d5902:	bd08      	pop	{r3, pc}
   d5904:	2003e744 	.word	0x2003e744

000d5908 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5908:	4805      	ldr	r0, [pc, #20]	; (d5920 <_Z33system_initialize_user_backup_ramv+0x18>)
   d590a:	4a06      	ldr	r2, [pc, #24]	; (d5924 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d590c:	4906      	ldr	r1, [pc, #24]	; (d5928 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d590e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5910:	1a12      	subs	r2, r2, r0
   d5912:	f000 ff4d 	bl	d67b0 <memcpy>
    __backup_sram_signature = signature;
   d5916:	4b05      	ldr	r3, [pc, #20]	; (d592c <_Z33system_initialize_user_backup_ramv+0x24>)
   d5918:	4a05      	ldr	r2, [pc, #20]	; (d5930 <_Z33system_initialize_user_backup_ramv+0x28>)
   d591a:	601a      	str	r2, [r3, #0]
}
   d591c:	bd08      	pop	{r3, pc}
   d591e:	bf00      	nop
   d5920:	2003f400 	.word	0x2003f400
   d5924:	2003f404 	.word	0x2003f404
   d5928:	000d6dd0 	.word	0x000d6dd0
   d592c:	2003f400 	.word	0x2003f400
   d5930:	9a271c1e 	.word	0x9a271c1e

000d5934 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5934:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5936:	2300      	movs	r3, #0
   d5938:	9300      	str	r3, [sp, #0]
   d593a:	461a      	mov	r2, r3
   d593c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5940:	f7ff f9c8 	bl	d4cd4 <system_ctrl_set_result>
}
   d5944:	b003      	add	sp, #12
   d5946:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d594c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d594c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d594e:	8843      	ldrh	r3, [r0, #2]
   d5950:	2b0a      	cmp	r3, #10
   d5952:	d008      	beq.n	d5966 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5954:	2b50      	cmp	r3, #80	; 0x50
   d5956:	d10b      	bne.n	d5970 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5958:	4b09      	ldr	r3, [pc, #36]	; (d5980 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d595a:	681b      	ldr	r3, [r3, #0]
   d595c:	b14b      	cbz	r3, d5972 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d595e:	b003      	add	sp, #12
   d5960:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5964:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5966:	f7ff ffe5 	bl	d5934 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d596a:	b003      	add	sp, #12
   d596c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5970:	2300      	movs	r3, #0
   d5972:	9300      	str	r3, [sp, #0]
   d5974:	461a      	mov	r2, r3
   d5976:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d597a:	f7ff f9ab 	bl	d4cd4 <system_ctrl_set_result>
}
   d597e:	e7f4      	b.n	d596a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5980:	2003e6f4 	.word	0x2003e6f4

000d5984 <module_user_init_hook>:
{
   d5984:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5986:	4812      	ldr	r0, [pc, #72]	; (d59d0 <module_user_init_hook+0x4c>)
   d5988:	2100      	movs	r1, #0
   d598a:	f7ff f9d5 	bl	d4d38 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d598e:	4b11      	ldr	r3, [pc, #68]	; (d59d4 <module_user_init_hook+0x50>)
   d5990:	681a      	ldr	r2, [r3, #0]
   d5992:	4b11      	ldr	r3, [pc, #68]	; (d59d8 <module_user_init_hook+0x54>)
   d5994:	429a      	cmp	r2, r3
   d5996:	4b11      	ldr	r3, [pc, #68]	; (d59dc <module_user_init_hook+0x58>)
   d5998:	bf0c      	ite	eq
   d599a:	2201      	moveq	r2, #1
   d599c:	2200      	movne	r2, #0
   d599e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d59a0:	d001      	beq.n	d59a6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d59a2:	f7ff ffb1 	bl	d5908 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d59a6:	f7ff f8cb 	bl	d4b40 <HAL_RNG_GetRandomNumber>
   d59aa:	4604      	mov	r4, r0
    srand(seed);
   d59ac:	f000 ff16 	bl	d67dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d59b0:	4b0b      	ldr	r3, [pc, #44]	; (d59e0 <module_user_init_hook+0x5c>)
   d59b2:	b113      	cbz	r3, d59ba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d59b4:	4620      	mov	r0, r4
   d59b6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d59ba:	2100      	movs	r1, #0
   d59bc:	4808      	ldr	r0, [pc, #32]	; (d59e0 <module_user_init_hook+0x5c>)
   d59be:	f7ff f907 	bl	d4bd0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d59c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59c6:	4807      	ldr	r0, [pc, #28]	; (d59e4 <module_user_init_hook+0x60>)
   d59c8:	2100      	movs	r1, #0
   d59ca:	f7ff b979 	b.w	d4cc0 <system_ctrl_set_app_request_handler>
   d59ce:	bf00      	nop
   d59d0:	000d58b1 	.word	0x000d58b1
   d59d4:	2003f400 	.word	0x2003f400
   d59d8:	9a271c1e 	.word	0x9a271c1e
   d59dc:	2003e6f0 	.word	0x2003e6f0
   d59e0:	00000000 	.word	0x00000000
   d59e4:	000d594d 	.word	0x000d594d

000d59e8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d59e8:	4b01      	ldr	r3, [pc, #4]	; (d59f0 <_GLOBAL__sub_I_RGB+0x8>)
   d59ea:	2200      	movs	r2, #0
   d59ec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d59ee:	4770      	bx	lr
   d59f0:	2003e6f8 	.word	0x2003e6f8

000d59f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d59f4:	2100      	movs	r1, #0
   d59f6:	f7ff b95b 	b.w	d4cb0 <system_delay_ms>
	...

000d59fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d59fc:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5a04:	4770      	bx	lr
   d5a06:	bf00      	nop
   d5a08:	2003e3dc 	.word	0x2003e3dc
   d5a0c:	2003e708 	.word	0x2003e708

000d5a10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5a10:	4b01      	ldr	r3, [pc, #4]	; (d5a18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5a12:	4a02      	ldr	r2, [pc, #8]	; (d5a1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5a14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5a16:	4770      	bx	lr
   d5a18:	2003e70c 	.word	0x2003e70c
   d5a1c:	000d6c6c 	.word	0x000d6c6c

000d5a20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a22:	4606      	mov	r6, r0
   d5a24:	460d      	mov	r5, r1
  size_t n = 0;
   d5a26:	188f      	adds	r7, r1, r2
   d5a28:	2400      	movs	r4, #0
  while (size--) {
   d5a2a:	42bd      	cmp	r5, r7
   d5a2c:	d00c      	beq.n	d5a48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a2e:	6833      	ldr	r3, [r6, #0]
   d5a30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a34:	689b      	ldr	r3, [r3, #8]
   d5a36:	4630      	mov	r0, r6
   d5a38:	4798      	blx	r3
     if (chunk>=0)
   d5a3a:	1e03      	subs	r3, r0, #0
   d5a3c:	db01      	blt.n	d5a42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a3e:	441c      	add	r4, r3
  while (size--) {
   d5a40:	e7f3      	b.n	d5a2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5a42:	2c00      	cmp	r4, #0
   d5a44:	bf08      	it	eq
   d5a46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5a48:	4620      	mov	r0, r4
   d5a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a4c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5a4c:	b513      	push	{r0, r1, r4, lr}
   d5a4e:	4604      	mov	r4, r0
    }
   d5a50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5a52:	b159      	cbz	r1, d5a6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5a54:	9101      	str	r1, [sp, #4]
   d5a56:	f000 ff23 	bl	d68a0 <strlen>
   d5a5a:	6823      	ldr	r3, [r4, #0]
   d5a5c:	9901      	ldr	r1, [sp, #4]
   d5a5e:	68db      	ldr	r3, [r3, #12]
   d5a60:	4602      	mov	r2, r0
   d5a62:	4620      	mov	r0, r4
    }
   d5a64:	b002      	add	sp, #8
   d5a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5a6a:	4718      	bx	r3
    }
   d5a6c:	b002      	add	sp, #8
   d5a6e:	bd10      	pop	{r4, pc}

000d5a70 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5a70:	6803      	ldr	r3, [r0, #0]
   d5a72:	689b      	ldr	r3, [r3, #8]
   d5a74:	4718      	bx	r3

000d5a76 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5a76:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5a78:	210d      	movs	r1, #13
{
   d5a7a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5a7c:	f7ff fff8 	bl	d5a70 <_ZN5Print5printEc>
  n += print('\n');
   d5a80:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5a82:	4604      	mov	r4, r0
  n += print('\n');
   d5a84:	4628      	mov	r0, r5
   d5a86:	f7ff fff3 	bl	d5a70 <_ZN5Print5printEc>
  return n;
}
   d5a8a:	4420      	add	r0, r4
   d5a8c:	bd38      	pop	{r3, r4, r5, pc}

000d5a8e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5a8e:	b538      	push	{r3, r4, r5, lr}
   d5a90:	4605      	mov	r5, r0
  return write(str);
   d5a92:	f7ff ffdb 	bl	d5a4c <_ZN5Print5writeEPKc>
   d5a96:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5a98:	4628      	mov	r0, r5
   d5a9a:	f7ff ffec 	bl	d5a76 <_ZN5Print7printlnEv>
  return n;
}
   d5a9e:	4420      	add	r0, r4
   d5aa0:	bd38      	pop	{r3, r4, r5, pc}

000d5aa2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5aa2:	b530      	push	{r4, r5, lr}
   d5aa4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5aa6:	2300      	movs	r3, #0
   d5aa8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5aac:	2a01      	cmp	r2, #1
   d5aae:	bf98      	it	ls
   d5ab0:	220a      	movls	r2, #10
   d5ab2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5ab4:	460d      	mov	r5, r1
   d5ab6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5aba:	fb01 5312 	mls	r3, r1, r2, r5
   d5abe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ac2:	2b09      	cmp	r3, #9
   d5ac4:	bf94      	ite	ls
   d5ac6:	3330      	addls	r3, #48	; 0x30
   d5ac8:	3337      	addhi	r3, #55	; 0x37
   d5aca:	b2db      	uxtb	r3, r3
  } while(n);
   d5acc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ace:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ad2:	d9ef      	bls.n	d5ab4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5ad4:	4621      	mov	r1, r4
   d5ad6:	f7ff ffb9 	bl	d5a4c <_ZN5Print5writeEPKc>
}
   d5ada:	b00b      	add	sp, #44	; 0x2c
   d5adc:	bd30      	pop	{r4, r5, pc}

000d5ade <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ae2:	b086      	sub	sp, #24
   d5ae4:	af00      	add	r7, sp, #0
   d5ae6:	4605      	mov	r5, r0
   d5ae8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5aea:	1d38      	adds	r0, r7, #4
   d5aec:	2114      	movs	r1, #20
{
   d5aee:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5af0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5af2:	f7ff f911 	bl	d4d18 <vsnprintf>

    if (n<bufsize)
   d5af6:	2813      	cmp	r0, #19
   d5af8:	d80e      	bhi.n	d5b18 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5afa:	1d39      	adds	r1, r7, #4
   d5afc:	4628      	mov	r0, r5
   d5afe:	f7ff ffa5 	bl	d5a4c <_ZN5Print5writeEPKc>
   d5b02:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5b04:	b11e      	cbz	r6, d5b0e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5b06:	4628      	mov	r0, r5
   d5b08:	f7ff ffb5 	bl	d5a76 <_ZN5Print7printlnEv>
   d5b0c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5b0e:	4620      	mov	r0, r4
   d5b10:	3718      	adds	r7, #24
   d5b12:	46bd      	mov	sp, r7
   d5b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5b18:	f100 0308 	add.w	r3, r0, #8
   d5b1c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5b20:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5b22:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5b26:	4622      	mov	r2, r4
   d5b28:	1c41      	adds	r1, r0, #1
   d5b2a:	683b      	ldr	r3, [r7, #0]
   d5b2c:	4668      	mov	r0, sp
   d5b2e:	f7ff f8f3 	bl	d4d18 <vsnprintf>
  return write(str);
   d5b32:	4669      	mov	r1, sp
   d5b34:	4628      	mov	r0, r5
   d5b36:	f7ff ff89 	bl	d5a4c <_ZN5Print5writeEPKc>
   d5b3a:	4604      	mov	r4, r0
   d5b3c:	46c5      	mov	sp, r8
   d5b3e:	e7e1      	b.n	d5b04 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5b40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b40:	4802      	ldr	r0, [pc, #8]	; (d5b4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5b42:	2300      	movs	r3, #0
   d5b44:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5b46:	f7fe bff3 	b.w	d4b30 <os_mutex_recursive_create>
   d5b4a:	bf00      	nop
   d5b4c:	2003e710 	.word	0x2003e710

000d5b50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b50:	4b05      	ldr	r3, [pc, #20]	; (d5b68 <_GLOBAL__sub_I_System+0x18>)
   d5b52:	2202      	movs	r2, #2
   d5b54:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b56:	4b05      	ldr	r3, [pc, #20]	; (d5b6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5b58:	4a05      	ldr	r2, [pc, #20]	; (d5b70 <_GLOBAL__sub_I_System+0x20>)
   d5b5a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5b5c:	2000      	movs	r0, #0
   d5b5e:	6018      	str	r0, [r3, #0]
   d5b60:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d5b62:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b64:	f7ff b89c 	b.w	d4ca0 <set_system_mode>
   d5b68:	2003e720 	.word	0x2003e720
   d5b6c:	2003e714 	.word	0x2003e714
   d5b70:	ffff0000 	.word	0xffff0000

000d5b74 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b74:	2200      	movs	r2, #0
   d5b76:	6840      	ldr	r0, [r0, #4]
   d5b78:	4611      	mov	r1, r2
   d5b7a:	f7ff b869 	b.w	d4c50 <network_listening>

000d5b7e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5b7e:	2200      	movs	r2, #0
   d5b80:	6840      	ldr	r0, [r0, #4]
   d5b82:	4611      	mov	r1, r2
   d5b84:	f7ff b874 	b.w	d4c70 <network_get_listen_timeout>

000d5b88 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5b88:	6840      	ldr	r0, [r0, #4]
   d5b8a:	2200      	movs	r2, #0
   d5b8c:	f7ff b868 	b.w	d4c60 <network_set_listen_timeout>

000d5b90 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b90:	6840      	ldr	r0, [r0, #4]
   d5b92:	2200      	movs	r2, #0
   d5b94:	f081 0101 	eor.w	r1, r1, #1
   d5b98:	f7ff b852 	b.w	d4c40 <network_listen>

000d5b9c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5b9c:	2300      	movs	r3, #0
   d5b9e:	6840      	ldr	r0, [r0, #4]
   d5ba0:	461a      	mov	r2, r3
   d5ba2:	4619      	mov	r1, r3
   d5ba4:	f7ff b844 	b.w	d4c30 <network_off>

000d5ba8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5ba8:	2300      	movs	r3, #0
   d5baa:	6840      	ldr	r0, [r0, #4]
   d5bac:	461a      	mov	r2, r3
   d5bae:	4619      	mov	r1, r3
   d5bb0:	f7ff b836 	b.w	d4c20 <network_on>

000d5bb4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5bb4:	2200      	movs	r2, #0
   d5bb6:	6840      	ldr	r0, [r0, #4]
   d5bb8:	4611      	mov	r1, r2
   d5bba:	f7ff b829 	b.w	d4c10 <network_ready>

000d5bbe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5bbe:	2200      	movs	r2, #0
   d5bc0:	6840      	ldr	r0, [r0, #4]
   d5bc2:	4611      	mov	r1, r2
   d5bc4:	f7ff b814 	b.w	d4bf0 <network_connecting>

000d5bc8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5bc8:	6840      	ldr	r0, [r0, #4]
   d5bca:	2200      	movs	r2, #0
   d5bcc:	2102      	movs	r1, #2
   d5bce:	f7ff b817 	b.w	d4c00 <network_disconnect>

000d5bd2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5bd2:	2300      	movs	r3, #0
   d5bd4:	6840      	ldr	r0, [r0, #4]
   d5bd6:	461a      	mov	r2, r3
   d5bd8:	f7ff b802 	b.w	d4be0 <network_connect>

000d5bdc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5bdc:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5bde:	2203      	movs	r2, #3
   d5be0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5be2:	4a02      	ldr	r2, [pc, #8]	; (d5bec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5be4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5be6:	4770      	bx	lr
   d5be8:	2003e724 	.word	0x2003e724
   d5bec:	000d6c78 	.word	0x000d6c78

000d5bf0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5bf0:	4770      	bx	lr
	...

000d5bf4 <_Z17acquireWireBufferv>:
{
   d5bf4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5bf6:	2300      	movs	r3, #0
   d5bf8:	2520      	movs	r5, #32
   d5bfa:	8043      	strh	r3, [r0, #2]
   d5bfc:	2314      	movs	r3, #20
{
   d5bfe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5c00:	8003      	strh	r3, [r0, #0]
   d5c02:	6085      	str	r5, [r0, #8]
   d5c04:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c06:	4906      	ldr	r1, [pc, #24]	; (d5c20 <_Z17acquireWireBufferv+0x2c>)
   d5c08:	4628      	mov	r0, r5
   d5c0a:	f000 f899 	bl	d5d40 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c0e:	4904      	ldr	r1, [pc, #16]	; (d5c20 <_Z17acquireWireBufferv+0x2c>)
	};
   d5c10:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c12:	4628      	mov	r0, r5
   d5c14:	f000 f894 	bl	d5d40 <_ZnajRKSt9nothrow_t>
	};
   d5c18:	60e0      	str	r0, [r4, #12]
}
   d5c1a:	4620      	mov	r0, r4
   d5c1c:	bd38      	pop	{r3, r4, r5, pc}
   d5c1e:	bf00      	nop
   d5c20:	000d6cac 	.word	0x000d6cac

000d5c24 <_Z19__fetch_global_Wirev>:
{
   d5c24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c26:	4d0e      	ldr	r5, [pc, #56]	; (d5c60 <_Z19__fetch_global_Wirev+0x3c>)
   d5c28:	7829      	ldrb	r1, [r5, #0]
   d5c2a:	f3bf 8f5b 	dmb	ish
   d5c2e:	f011 0401 	ands.w	r4, r1, #1
{
   d5c32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c34:	d111      	bne.n	d5c5a <_Z19__fetch_global_Wirev+0x36>
   d5c36:	4628      	mov	r0, r5
   d5c38:	f7fe fa31 	bl	d409e <__cxa_guard_acquire>
   d5c3c:	b168      	cbz	r0, d5c5a <_Z19__fetch_global_Wirev+0x36>
   d5c3e:	a801      	add	r0, sp, #4
   d5c40:	f7ff ffd8 	bl	d5bf4 <_Z17acquireWireBufferv>
   d5c44:	aa01      	add	r2, sp, #4
   d5c46:	4621      	mov	r1, r4
   d5c48:	4806      	ldr	r0, [pc, #24]	; (d5c64 <_Z19__fetch_global_Wirev+0x40>)
   d5c4a:	f7ff fc99 	bl	d5580 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5c4e:	4628      	mov	r0, r5
   d5c50:	f7fe fa2a 	bl	d40a8 <__cxa_guard_release>
   d5c54:	4804      	ldr	r0, [pc, #16]	; (d5c68 <_Z19__fetch_global_Wirev+0x44>)
   d5c56:	f000 fda5 	bl	d67a4 <atexit>
	return wire;
}
   d5c5a:	4802      	ldr	r0, [pc, #8]	; (d5c64 <_Z19__fetch_global_Wirev+0x40>)
   d5c5c:	b007      	add	sp, #28
   d5c5e:	bd30      	pop	{r4, r5, pc}
   d5c60:	2003e72c 	.word	0x2003e72c
   d5c64:	2003e730 	.word	0x2003e730
   d5c68:	000d5bf1 	.word	0x000d5bf1

000d5c6c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5c6c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5c6e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5c70:	d902      	bls.n	d5c78 <pinAvailable+0xc>
    return false;
   d5c72:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5c74:	b002      	add	sp, #8
   d5c76:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5c78:	f1a0 030b 	sub.w	r3, r0, #11
   d5c7c:	2b02      	cmp	r3, #2
   d5c7e:	d81a      	bhi.n	d5cb6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c80:	4c17      	ldr	r4, [pc, #92]	; (d5ce0 <pinAvailable+0x74>)
   d5c82:	7821      	ldrb	r1, [r4, #0]
   d5c84:	f3bf 8f5b 	dmb	ish
   d5c88:	f011 0101 	ands.w	r1, r1, #1
   d5c8c:	d10b      	bne.n	d5ca6 <pinAvailable+0x3a>
   d5c8e:	4620      	mov	r0, r4
   d5c90:	9101      	str	r1, [sp, #4]
   d5c92:	f7fe fa04 	bl	d409e <__cxa_guard_acquire>
   d5c96:	9901      	ldr	r1, [sp, #4]
   d5c98:	b128      	cbz	r0, d5ca6 <pinAvailable+0x3a>
   d5c9a:	4812      	ldr	r0, [pc, #72]	; (d5ce4 <pinAvailable+0x78>)
   d5c9c:	f7ff fc24 	bl	d54e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	f7fe fa01 	bl	d40a8 <__cxa_guard_release>
   d5ca6:	4b0f      	ldr	r3, [pc, #60]	; (d5ce4 <pinAvailable+0x78>)
   d5ca8:	7818      	ldrb	r0, [r3, #0]
   d5caa:	f7fe feb1 	bl	d4a10 <hal_spi_is_enabled>
   d5cae:	2800      	cmp	r0, #0
   d5cb0:	d1df      	bne.n	d5c72 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5cb2:	2001      	movs	r0, #1
   d5cb4:	e7de      	b.n	d5c74 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5cb6:	2801      	cmp	r0, #1
   d5cb8:	d809      	bhi.n	d5cce <pinAvailable+0x62>
   d5cba:	f7ff ffb3 	bl	d5c24 <_Z19__fetch_global_Wirev>
   d5cbe:	2100      	movs	r1, #0
   d5cc0:	7c00      	ldrb	r0, [r0, #16]
   d5cc2:	f7fe fe8d 	bl	d49e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5cc6:	f080 0001 	eor.w	r0, r0, #1
   d5cca:	b2c0      	uxtb	r0, r0
   d5ccc:	e7d2      	b.n	d5c74 <pinAvailable+0x8>
   d5cce:	3809      	subs	r0, #9
   d5cd0:	2801      	cmp	r0, #1
   d5cd2:	d8ee      	bhi.n	d5cb2 <pinAvailable+0x46>
   d5cd4:	f7ff fcba 	bl	d564c <_Z22__fetch_global_Serial1v>
   d5cd8:	7c00      	ldrb	r0, [r0, #16]
   d5cda:	f7fe ff01 	bl	d4ae0 <hal_usart_is_enabled>
   d5cde:	e7f2      	b.n	d5cc6 <pinAvailable+0x5a>
   d5ce0:	2003e748 	.word	0x2003e748
   d5ce4:	2003e74c 	.word	0x2003e74c

000d5ce8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ce8:	2823      	cmp	r0, #35	; 0x23
{
   d5cea:	b538      	push	{r3, r4, r5, lr}
   d5cec:	4604      	mov	r4, r0
   d5cee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5cf0:	d80a      	bhi.n	d5d08 <pinMode+0x20>
   d5cf2:	29ff      	cmp	r1, #255	; 0xff
   d5cf4:	d008      	beq.n	d5d08 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5cf6:	f7ff ffb9 	bl	d5c6c <pinAvailable>
   d5cfa:	b128      	cbz	r0, d5d08 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5cfc:	4629      	mov	r1, r5
   d5cfe:	4620      	mov	r0, r4
}
   d5d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5d04:	f7fe bf34 	b.w	d4b70 <HAL_Pin_Mode>
}
   d5d08:	bd38      	pop	{r3, r4, r5, pc}

000d5d0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5d0a:	b538      	push	{r3, r4, r5, lr}
   d5d0c:	4604      	mov	r4, r0
   d5d0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5d10:	f7fe ff36 	bl	d4b80 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5d14:	28ff      	cmp	r0, #255	; 0xff
   d5d16:	d010      	beq.n	d5d3a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5d18:	2806      	cmp	r0, #6
   d5d1a:	d804      	bhi.n	d5d26 <digitalWrite+0x1c>
   d5d1c:	234d      	movs	r3, #77	; 0x4d
   d5d1e:	fa23 f000 	lsr.w	r0, r3, r0
   d5d22:	07c3      	lsls	r3, r0, #31
   d5d24:	d409      	bmi.n	d5d3a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5d26:	4620      	mov	r0, r4
   d5d28:	f7ff ffa0 	bl	d5c6c <pinAvailable>
   d5d2c:	b128      	cbz	r0, d5d3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d2e:	4629      	mov	r1, r5
   d5d30:	4620      	mov	r0, r4
}
   d5d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5d36:	f7fe bf2b 	b.w	d4b90 <HAL_GPIO_Write>
}
   d5d3a:	bd38      	pop	{r3, r4, r5, pc}

000d5d3c <_ZdlPvj>:
   d5d3c:	f7fe b9ad 	b.w	d409a <_ZdlPv>

000d5d40 <_ZnajRKSt9nothrow_t>:
   d5d40:	f7fe b9a9 	b.w	d4096 <_Znaj>

000d5d44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d5d44:	4901      	ldr	r1, [pc, #4]	; (d5d4c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d5d46:	f000 b8f9 	b.w	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5d4a:	bf00      	nop
   d5d4c:	000d6cc8 	.word	0x000d6cc8

000d5d50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d5d50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5d52:	2400      	movs	r4, #0
   d5d54:	2310      	movs	r3, #16
   d5d56:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d5d5a:	6803      	ldr	r3, [r0, #0]
   d5d5c:	9400      	str	r4, [sp, #0]
   d5d5e:	699e      	ldr	r6, [r3, #24]
   d5d60:	f88d 4004 	strb.w	r4, [sp, #4]
   d5d64:	4615      	mov	r5, r2
   d5d66:	466b      	mov	r3, sp
   d5d68:	6812      	ldr	r2, [r2, #0]
   d5d6a:	47b0      	blx	r6
   d5d6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5d70:	f003 0306 	and.w	r3, r3, #6
   d5d74:	2b06      	cmp	r3, #6
   d5d76:	bf03      	ittte	eq
   d5d78:	9b00      	ldreq	r3, [sp, #0]
   d5d7a:	602b      	streq	r3, [r5, #0]
   d5d7c:	2001      	moveq	r0, #1
   d5d7e:	4620      	movne	r0, r4
   d5d80:	b004      	add	sp, #16
   d5d82:	bd70      	pop	{r4, r5, r6, pc}

000d5d84 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d5d84:	9800      	ldr	r0, [sp, #0]
   d5d86:	4290      	cmp	r0, r2
   d5d88:	bf14      	ite	ne
   d5d8a:	2001      	movne	r0, #1
   d5d8c:	2006      	moveq	r0, #6
   d5d8e:	4770      	bx	lr

000d5d90 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d5d90:	b510      	push	{r4, lr}
   d5d92:	4b03      	ldr	r3, [pc, #12]	; (d5da0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d5d94:	6003      	str	r3, [r0, #0]
   d5d96:	4604      	mov	r4, r0
   d5d98:	f000 f8cd 	bl	d5f36 <_ZNSt9type_infoD1Ev>
   d5d9c:	4620      	mov	r0, r4
   d5d9e:	bd10      	pop	{r4, pc}
   d5da0:	000d6d08 	.word	0x000d6d08

000d5da4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d5da4:	b510      	push	{r4, lr}
   d5da6:	4604      	mov	r4, r0
   d5da8:	f7ff fff2 	bl	d5d90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d5dac:	4620      	mov	r0, r4
   d5dae:	2108      	movs	r1, #8
   d5db0:	f7ff ffc4 	bl	d5d3c <_ZdlPvj>
   d5db4:	4620      	mov	r0, r4
   d5db6:	bd10      	pop	{r4, pc}

000d5db8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d5db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5dbc:	461f      	mov	r7, r3
   d5dbe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d5dc2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d5dc6:	4598      	cmp	r8, r3
   d5dc8:	4606      	mov	r6, r0
   d5dca:	4615      	mov	r5, r2
   d5dcc:	d107      	bne.n	d5dde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5dce:	9907      	ldr	r1, [sp, #28]
   d5dd0:	f000 f8b4 	bl	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5dd4:	b118      	cbz	r0, d5dde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5dd6:	7165      	strb	r5, [r4, #5]
   d5dd8:	2000      	movs	r0, #0
   d5dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5dde:	4639      	mov	r1, r7
   d5de0:	4630      	mov	r0, r6
   d5de2:	f000 f8ab 	bl	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5de6:	2800      	cmp	r0, #0
   d5de8:	d0f6      	beq.n	d5dd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d5dea:	2301      	movs	r3, #1
   d5dec:	f8c4 8000 	str.w	r8, [r4]
   d5df0:	7125      	strb	r5, [r4, #4]
   d5df2:	71a3      	strb	r3, [r4, #6]
   d5df4:	e7f0      	b.n	d5dd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d5df6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d5df6:	b538      	push	{r3, r4, r5, lr}
   d5df8:	4615      	mov	r5, r2
   d5dfa:	461c      	mov	r4, r3
   d5dfc:	f000 f89e 	bl	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5e00:	b120      	cbz	r0, d5e0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d5e02:	2308      	movs	r3, #8
   d5e04:	60e3      	str	r3, [r4, #12]
   d5e06:	2306      	movs	r3, #6
   d5e08:	6025      	str	r5, [r4, #0]
   d5e0a:	7123      	strb	r3, [r4, #4]
   d5e0c:	bd38      	pop	{r3, r4, r5, pc}

000d5e0e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d5e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e10:	4605      	mov	r5, r0
   d5e12:	460c      	mov	r4, r1
   d5e14:	9201      	str	r2, [sp, #4]
   d5e16:	461e      	mov	r6, r3
   d5e18:	f000 f890 	bl	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5e1c:	b950      	cbnz	r0, d5e34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5e1e:	2e03      	cmp	r6, #3
   d5e20:	d808      	bhi.n	d5e34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5e22:	6823      	ldr	r3, [r4, #0]
   d5e24:	9a01      	ldr	r2, [sp, #4]
   d5e26:	695b      	ldr	r3, [r3, #20]
   d5e28:	4629      	mov	r1, r5
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	b002      	add	sp, #8
   d5e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5e32:	4718      	bx	r3
   d5e34:	b002      	add	sp, #8
   d5e36:	bd70      	pop	{r4, r5, r6, pc}

000d5e38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d5e38:	b510      	push	{r4, lr}
   d5e3a:	4b03      	ldr	r3, [pc, #12]	; (d5e48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d5e3c:	6003      	str	r3, [r0, #0]
   d5e3e:	4604      	mov	r4, r0
   d5e40:	f7ff ffa6 	bl	d5d90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d5e44:	4620      	mov	r0, r4
   d5e46:	bd10      	pop	{r4, pc}
   d5e48:	000d6d68 	.word	0x000d6d68

000d5e4c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d5e4c:	b510      	push	{r4, lr}
   d5e4e:	4604      	mov	r4, r0
   d5e50:	f7ff fff2 	bl	d5e38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d5e54:	4620      	mov	r0, r4
   d5e56:	210c      	movs	r1, #12
   d5e58:	f7ff ff70 	bl	d5d3c <_ZdlPvj>
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	bd10      	pop	{r4, pc}

000d5e60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d5e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5e62:	9f08      	ldr	r7, [sp, #32]
   d5e64:	4297      	cmp	r7, r2
   d5e66:	4605      	mov	r5, r0
   d5e68:	460e      	mov	r6, r1
   d5e6a:	4614      	mov	r4, r2
   d5e6c:	d00a      	beq.n	d5e84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d5e6e:	68a8      	ldr	r0, [r5, #8]
   d5e70:	6802      	ldr	r2, [r0, #0]
   d5e72:	9708      	str	r7, [sp, #32]
   d5e74:	6a15      	ldr	r5, [r2, #32]
   d5e76:	4631      	mov	r1, r6
   d5e78:	4622      	mov	r2, r4
   d5e7a:	46ac      	mov	ip, r5
   d5e7c:	b003      	add	sp, #12
   d5e7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5e82:	4760      	bx	ip
   d5e84:	4619      	mov	r1, r3
   d5e86:	9301      	str	r3, [sp, #4]
   d5e88:	f000 f858 	bl	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5e8c:	9b01      	ldr	r3, [sp, #4]
   d5e8e:	2800      	cmp	r0, #0
   d5e90:	d0ed      	beq.n	d5e6e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d5e92:	2006      	movs	r0, #6
   d5e94:	b003      	add	sp, #12
   d5e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d5e98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e9c:	460d      	mov	r5, r1
   d5e9e:	4619      	mov	r1, r3
   d5ea0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d5ea4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d5ea8:	4681      	mov	r9, r0
   d5eaa:	4617      	mov	r7, r2
   d5eac:	4698      	mov	r8, r3
   d5eae:	f000 f845 	bl	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5eb2:	b190      	cbz	r0, d5eda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d5eb4:	2d00      	cmp	r5, #0
   d5eb6:	6034      	str	r4, [r6, #0]
   d5eb8:	7137      	strb	r7, [r6, #4]
   d5eba:	db09      	blt.n	d5ed0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d5ebc:	1961      	adds	r1, r4, r5
   d5ebe:	458a      	cmp	sl, r1
   d5ec0:	bf0c      	ite	eq
   d5ec2:	2106      	moveq	r1, #6
   d5ec4:	2101      	movne	r1, #1
   d5ec6:	71b1      	strb	r1, [r6, #6]
   d5ec8:	2000      	movs	r0, #0
   d5eca:	b001      	add	sp, #4
   d5ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ed0:	3502      	adds	r5, #2
   d5ed2:	d1f9      	bne.n	d5ec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5ed4:	2301      	movs	r3, #1
   d5ed6:	71b3      	strb	r3, [r6, #6]
   d5ed8:	e7f6      	b.n	d5ec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5eda:	4554      	cmp	r4, sl
   d5edc:	d106      	bne.n	d5eec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d5ede:	4659      	mov	r1, fp
   d5ee0:	4648      	mov	r0, r9
   d5ee2:	f000 f82b 	bl	d5f3c <_ZNKSt9type_infoeqERKS_>
   d5ee6:	b108      	cbz	r0, d5eec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d5ee8:	7177      	strb	r7, [r6, #5]
   d5eea:	e7ed      	b.n	d5ec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5eec:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d5ef0:	6803      	ldr	r3, [r0, #0]
   d5ef2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d5ef6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d5efa:	69dc      	ldr	r4, [r3, #28]
   d5efc:	463a      	mov	r2, r7
   d5efe:	4643      	mov	r3, r8
   d5f00:	4629      	mov	r1, r5
   d5f02:	46a4      	mov	ip, r4
   d5f04:	b001      	add	sp, #4
   d5f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f0a:	4760      	bx	ip

000d5f0c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d5f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f10:	4607      	mov	r7, r0
   d5f12:	460c      	mov	r4, r1
   d5f14:	4615      	mov	r5, r2
   d5f16:	461e      	mov	r6, r3
   d5f18:	f7ff ff6d 	bl	d5df6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d5f1c:	b948      	cbnz	r0, d5f32 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d5f1e:	68b8      	ldr	r0, [r7, #8]
   d5f20:	6803      	ldr	r3, [r0, #0]
   d5f22:	699f      	ldr	r7, [r3, #24]
   d5f24:	462a      	mov	r2, r5
   d5f26:	4633      	mov	r3, r6
   d5f28:	4621      	mov	r1, r4
   d5f2a:	46bc      	mov	ip, r7
   d5f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5f30:	4760      	bx	ip
   d5f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5f36 <_ZNSt9type_infoD1Ev>:
   d5f36:	4770      	bx	lr

000d5f38 <_ZNKSt9type_info14__is_pointer_pEv>:
   d5f38:	2000      	movs	r0, #0
   d5f3a:	4770      	bx	lr

000d5f3c <_ZNKSt9type_infoeqERKS_>:
   d5f3c:	4281      	cmp	r1, r0
   d5f3e:	b508      	push	{r3, lr}
   d5f40:	d00e      	beq.n	d5f60 <_ZNKSt9type_infoeqERKS_+0x24>
   d5f42:	6840      	ldr	r0, [r0, #4]
   d5f44:	7803      	ldrb	r3, [r0, #0]
   d5f46:	2b2a      	cmp	r3, #42	; 0x2a
   d5f48:	d00c      	beq.n	d5f64 <_ZNKSt9type_infoeqERKS_+0x28>
   d5f4a:	6849      	ldr	r1, [r1, #4]
   d5f4c:	780b      	ldrb	r3, [r1, #0]
   d5f4e:	2b2a      	cmp	r3, #42	; 0x2a
   d5f50:	bf08      	it	eq
   d5f52:	3101      	addeq	r1, #1
   d5f54:	f000 fc9a 	bl	d688c <strcmp>
   d5f58:	fab0 f080 	clz	r0, r0
   d5f5c:	0940      	lsrs	r0, r0, #5
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	2001      	movs	r0, #1
   d5f62:	e7fc      	b.n	d5f5e <_ZNKSt9type_infoeqERKS_+0x22>
   d5f64:	2000      	movs	r0, #0
   d5f66:	e7fa      	b.n	d5f5e <_ZNKSt9type_infoeqERKS_+0x22>

000d5f68 <__aeabi_drsub>:
   d5f68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5f6c:	e002      	b.n	d5f74 <__adddf3>
   d5f6e:	bf00      	nop

000d5f70 <__aeabi_dsub>:
   d5f70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5f74 <__adddf3>:
   d5f74:	b530      	push	{r4, r5, lr}
   d5f76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5f7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5f7e:	ea94 0f05 	teq	r4, r5
   d5f82:	bf08      	it	eq
   d5f84:	ea90 0f02 	teqeq	r0, r2
   d5f88:	bf1f      	itttt	ne
   d5f8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5f8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5f92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5f96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f9a:	f000 80e2 	beq.w	d6162 <__adddf3+0x1ee>
   d5f9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5fa2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5fa6:	bfb8      	it	lt
   d5fa8:	426d      	neglt	r5, r5
   d5faa:	dd0c      	ble.n	d5fc6 <__adddf3+0x52>
   d5fac:	442c      	add	r4, r5
   d5fae:	ea80 0202 	eor.w	r2, r0, r2
   d5fb2:	ea81 0303 	eor.w	r3, r1, r3
   d5fb6:	ea82 0000 	eor.w	r0, r2, r0
   d5fba:	ea83 0101 	eor.w	r1, r3, r1
   d5fbe:	ea80 0202 	eor.w	r2, r0, r2
   d5fc2:	ea81 0303 	eor.w	r3, r1, r3
   d5fc6:	2d36      	cmp	r5, #54	; 0x36
   d5fc8:	bf88      	it	hi
   d5fca:	bd30      	pophi	{r4, r5, pc}
   d5fcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5fd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5fd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5fd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5fdc:	d002      	beq.n	d5fe4 <__adddf3+0x70>
   d5fde:	4240      	negs	r0, r0
   d5fe0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5fe4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5fe8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5fec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5ff0:	d002      	beq.n	d5ff8 <__adddf3+0x84>
   d5ff2:	4252      	negs	r2, r2
   d5ff4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5ff8:	ea94 0f05 	teq	r4, r5
   d5ffc:	f000 80a7 	beq.w	d614e <__adddf3+0x1da>
   d6000:	f1a4 0401 	sub.w	r4, r4, #1
   d6004:	f1d5 0e20 	rsbs	lr, r5, #32
   d6008:	db0d      	blt.n	d6026 <__adddf3+0xb2>
   d600a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d600e:	fa22 f205 	lsr.w	r2, r2, r5
   d6012:	1880      	adds	r0, r0, r2
   d6014:	f141 0100 	adc.w	r1, r1, #0
   d6018:	fa03 f20e 	lsl.w	r2, r3, lr
   d601c:	1880      	adds	r0, r0, r2
   d601e:	fa43 f305 	asr.w	r3, r3, r5
   d6022:	4159      	adcs	r1, r3
   d6024:	e00e      	b.n	d6044 <__adddf3+0xd0>
   d6026:	f1a5 0520 	sub.w	r5, r5, #32
   d602a:	f10e 0e20 	add.w	lr, lr, #32
   d602e:	2a01      	cmp	r2, #1
   d6030:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6034:	bf28      	it	cs
   d6036:	f04c 0c02 	orrcs.w	ip, ip, #2
   d603a:	fa43 f305 	asr.w	r3, r3, r5
   d603e:	18c0      	adds	r0, r0, r3
   d6040:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6048:	d507      	bpl.n	d605a <__adddf3+0xe6>
   d604a:	f04f 0e00 	mov.w	lr, #0
   d604e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6052:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6056:	eb6e 0101 	sbc.w	r1, lr, r1
   d605a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d605e:	d31b      	bcc.n	d6098 <__adddf3+0x124>
   d6060:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6064:	d30c      	bcc.n	d6080 <__adddf3+0x10c>
   d6066:	0849      	lsrs	r1, r1, #1
   d6068:	ea5f 0030 	movs.w	r0, r0, rrx
   d606c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6070:	f104 0401 	add.w	r4, r4, #1
   d6074:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6078:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d607c:	f080 809a 	bcs.w	d61b4 <__adddf3+0x240>
   d6080:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6084:	bf08      	it	eq
   d6086:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d608a:	f150 0000 	adcs.w	r0, r0, #0
   d608e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6092:	ea41 0105 	orr.w	r1, r1, r5
   d6096:	bd30      	pop	{r4, r5, pc}
   d6098:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d609c:	4140      	adcs	r0, r0
   d609e:	eb41 0101 	adc.w	r1, r1, r1
   d60a2:	3c01      	subs	r4, #1
   d60a4:	bf28      	it	cs
   d60a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d60aa:	d2e9      	bcs.n	d6080 <__adddf3+0x10c>
   d60ac:	f091 0f00 	teq	r1, #0
   d60b0:	bf04      	itt	eq
   d60b2:	4601      	moveq	r1, r0
   d60b4:	2000      	moveq	r0, #0
   d60b6:	fab1 f381 	clz	r3, r1
   d60ba:	bf08      	it	eq
   d60bc:	3320      	addeq	r3, #32
   d60be:	f1a3 030b 	sub.w	r3, r3, #11
   d60c2:	f1b3 0220 	subs.w	r2, r3, #32
   d60c6:	da0c      	bge.n	d60e2 <__adddf3+0x16e>
   d60c8:	320c      	adds	r2, #12
   d60ca:	dd08      	ble.n	d60de <__adddf3+0x16a>
   d60cc:	f102 0c14 	add.w	ip, r2, #20
   d60d0:	f1c2 020c 	rsb	r2, r2, #12
   d60d4:	fa01 f00c 	lsl.w	r0, r1, ip
   d60d8:	fa21 f102 	lsr.w	r1, r1, r2
   d60dc:	e00c      	b.n	d60f8 <__adddf3+0x184>
   d60de:	f102 0214 	add.w	r2, r2, #20
   d60e2:	bfd8      	it	le
   d60e4:	f1c2 0c20 	rsble	ip, r2, #32
   d60e8:	fa01 f102 	lsl.w	r1, r1, r2
   d60ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   d60f0:	bfdc      	itt	le
   d60f2:	ea41 010c 	orrle.w	r1, r1, ip
   d60f6:	4090      	lslle	r0, r2
   d60f8:	1ae4      	subs	r4, r4, r3
   d60fa:	bfa2      	ittt	ge
   d60fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6100:	4329      	orrge	r1, r5
   d6102:	bd30      	popge	{r4, r5, pc}
   d6104:	ea6f 0404 	mvn.w	r4, r4
   d6108:	3c1f      	subs	r4, #31
   d610a:	da1c      	bge.n	d6146 <__adddf3+0x1d2>
   d610c:	340c      	adds	r4, #12
   d610e:	dc0e      	bgt.n	d612e <__adddf3+0x1ba>
   d6110:	f104 0414 	add.w	r4, r4, #20
   d6114:	f1c4 0220 	rsb	r2, r4, #32
   d6118:	fa20 f004 	lsr.w	r0, r0, r4
   d611c:	fa01 f302 	lsl.w	r3, r1, r2
   d6120:	ea40 0003 	orr.w	r0, r0, r3
   d6124:	fa21 f304 	lsr.w	r3, r1, r4
   d6128:	ea45 0103 	orr.w	r1, r5, r3
   d612c:	bd30      	pop	{r4, r5, pc}
   d612e:	f1c4 040c 	rsb	r4, r4, #12
   d6132:	f1c4 0220 	rsb	r2, r4, #32
   d6136:	fa20 f002 	lsr.w	r0, r0, r2
   d613a:	fa01 f304 	lsl.w	r3, r1, r4
   d613e:	ea40 0003 	orr.w	r0, r0, r3
   d6142:	4629      	mov	r1, r5
   d6144:	bd30      	pop	{r4, r5, pc}
   d6146:	fa21 f004 	lsr.w	r0, r1, r4
   d614a:	4629      	mov	r1, r5
   d614c:	bd30      	pop	{r4, r5, pc}
   d614e:	f094 0f00 	teq	r4, #0
   d6152:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6156:	bf06      	itte	eq
   d6158:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d615c:	3401      	addeq	r4, #1
   d615e:	3d01      	subne	r5, #1
   d6160:	e74e      	b.n	d6000 <__adddf3+0x8c>
   d6162:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6166:	bf18      	it	ne
   d6168:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d616c:	d029      	beq.n	d61c2 <__adddf3+0x24e>
   d616e:	ea94 0f05 	teq	r4, r5
   d6172:	bf08      	it	eq
   d6174:	ea90 0f02 	teqeq	r0, r2
   d6178:	d005      	beq.n	d6186 <__adddf3+0x212>
   d617a:	ea54 0c00 	orrs.w	ip, r4, r0
   d617e:	bf04      	itt	eq
   d6180:	4619      	moveq	r1, r3
   d6182:	4610      	moveq	r0, r2
   d6184:	bd30      	pop	{r4, r5, pc}
   d6186:	ea91 0f03 	teq	r1, r3
   d618a:	bf1e      	ittt	ne
   d618c:	2100      	movne	r1, #0
   d618e:	2000      	movne	r0, #0
   d6190:	bd30      	popne	{r4, r5, pc}
   d6192:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6196:	d105      	bne.n	d61a4 <__adddf3+0x230>
   d6198:	0040      	lsls	r0, r0, #1
   d619a:	4149      	adcs	r1, r1
   d619c:	bf28      	it	cs
   d619e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d61a2:	bd30      	pop	{r4, r5, pc}
   d61a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d61a8:	bf3c      	itt	cc
   d61aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d61ae:	bd30      	popcc	{r4, r5, pc}
   d61b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d61b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d61b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d61bc:	f04f 0000 	mov.w	r0, #0
   d61c0:	bd30      	pop	{r4, r5, pc}
   d61c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d61c6:	bf1a      	itte	ne
   d61c8:	4619      	movne	r1, r3
   d61ca:	4610      	movne	r0, r2
   d61cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d61d0:	bf1c      	itt	ne
   d61d2:	460b      	movne	r3, r1
   d61d4:	4602      	movne	r2, r0
   d61d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d61da:	bf06      	itte	eq
   d61dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d61e0:	ea91 0f03 	teqeq	r1, r3
   d61e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d61e8:	bd30      	pop	{r4, r5, pc}
   d61ea:	bf00      	nop

000d61ec <__aeabi_ui2d>:
   d61ec:	f090 0f00 	teq	r0, #0
   d61f0:	bf04      	itt	eq
   d61f2:	2100      	moveq	r1, #0
   d61f4:	4770      	bxeq	lr
   d61f6:	b530      	push	{r4, r5, lr}
   d61f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6200:	f04f 0500 	mov.w	r5, #0
   d6204:	f04f 0100 	mov.w	r1, #0
   d6208:	e750      	b.n	d60ac <__adddf3+0x138>
   d620a:	bf00      	nop

000d620c <__aeabi_i2d>:
   d620c:	f090 0f00 	teq	r0, #0
   d6210:	bf04      	itt	eq
   d6212:	2100      	moveq	r1, #0
   d6214:	4770      	bxeq	lr
   d6216:	b530      	push	{r4, r5, lr}
   d6218:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d621c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6220:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6224:	bf48      	it	mi
   d6226:	4240      	negmi	r0, r0
   d6228:	f04f 0100 	mov.w	r1, #0
   d622c:	e73e      	b.n	d60ac <__adddf3+0x138>
   d622e:	bf00      	nop

000d6230 <__aeabi_f2d>:
   d6230:	0042      	lsls	r2, r0, #1
   d6232:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6236:	ea4f 0131 	mov.w	r1, r1, rrx
   d623a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d623e:	bf1f      	itttt	ne
   d6240:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6244:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6248:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d624c:	4770      	bxne	lr
   d624e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6252:	bf08      	it	eq
   d6254:	4770      	bxeq	lr
   d6256:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d625a:	bf04      	itt	eq
   d625c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6260:	4770      	bxeq	lr
   d6262:	b530      	push	{r4, r5, lr}
   d6264:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d626c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6270:	e71c      	b.n	d60ac <__adddf3+0x138>
   d6272:	bf00      	nop

000d6274 <__aeabi_ul2d>:
   d6274:	ea50 0201 	orrs.w	r2, r0, r1
   d6278:	bf08      	it	eq
   d627a:	4770      	bxeq	lr
   d627c:	b530      	push	{r4, r5, lr}
   d627e:	f04f 0500 	mov.w	r5, #0
   d6282:	e00a      	b.n	d629a <__aeabi_l2d+0x16>

000d6284 <__aeabi_l2d>:
   d6284:	ea50 0201 	orrs.w	r2, r0, r1
   d6288:	bf08      	it	eq
   d628a:	4770      	bxeq	lr
   d628c:	b530      	push	{r4, r5, lr}
   d628e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6292:	d502      	bpl.n	d629a <__aeabi_l2d+0x16>
   d6294:	4240      	negs	r0, r0
   d6296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d629a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d629e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d62a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d62a6:	f43f aed8 	beq.w	d605a <__adddf3+0xe6>
   d62aa:	f04f 0203 	mov.w	r2, #3
   d62ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d62b2:	bf18      	it	ne
   d62b4:	3203      	addne	r2, #3
   d62b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d62ba:	bf18      	it	ne
   d62bc:	3203      	addne	r2, #3
   d62be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d62c2:	f1c2 0320 	rsb	r3, r2, #32
   d62c6:	fa00 fc03 	lsl.w	ip, r0, r3
   d62ca:	fa20 f002 	lsr.w	r0, r0, r2
   d62ce:	fa01 fe03 	lsl.w	lr, r1, r3
   d62d2:	ea40 000e 	orr.w	r0, r0, lr
   d62d6:	fa21 f102 	lsr.w	r1, r1, r2
   d62da:	4414      	add	r4, r2
   d62dc:	e6bd      	b.n	d605a <__adddf3+0xe6>
   d62de:	bf00      	nop

000d62e0 <__aeabi_dmul>:
   d62e0:	b570      	push	{r4, r5, r6, lr}
   d62e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d62e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d62ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d62ee:	bf1d      	ittte	ne
   d62f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d62f4:	ea94 0f0c 	teqne	r4, ip
   d62f8:	ea95 0f0c 	teqne	r5, ip
   d62fc:	f000 f8de 	bleq	d64bc <__aeabi_dmul+0x1dc>
   d6300:	442c      	add	r4, r5
   d6302:	ea81 0603 	eor.w	r6, r1, r3
   d6306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d630a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d630e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6312:	bf18      	it	ne
   d6314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d631c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6320:	d038      	beq.n	d6394 <__aeabi_dmul+0xb4>
   d6322:	fba0 ce02 	umull	ip, lr, r0, r2
   d6326:	f04f 0500 	mov.w	r5, #0
   d632a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d632e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6332:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6336:	f04f 0600 	mov.w	r6, #0
   d633a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d633e:	f09c 0f00 	teq	ip, #0
   d6342:	bf18      	it	ne
   d6344:	f04e 0e01 	orrne.w	lr, lr, #1
   d6348:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d634c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6350:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6354:	d204      	bcs.n	d6360 <__aeabi_dmul+0x80>
   d6356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d635a:	416d      	adcs	r5, r5
   d635c:	eb46 0606 	adc.w	r6, r6, r6
   d6360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d636c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6374:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6378:	bf88      	it	hi
   d637a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d637e:	d81e      	bhi.n	d63be <__aeabi_dmul+0xde>
   d6380:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6384:	bf08      	it	eq
   d6386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d638a:	f150 0000 	adcs.w	r0, r0, #0
   d638e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6392:	bd70      	pop	{r4, r5, r6, pc}
   d6394:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6398:	ea46 0101 	orr.w	r1, r6, r1
   d639c:	ea40 0002 	orr.w	r0, r0, r2
   d63a0:	ea81 0103 	eor.w	r1, r1, r3
   d63a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d63a8:	bfc2      	ittt	gt
   d63aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d63ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d63b2:	bd70      	popgt	{r4, r5, r6, pc}
   d63b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63b8:	f04f 0e00 	mov.w	lr, #0
   d63bc:	3c01      	subs	r4, #1
   d63be:	f300 80ab 	bgt.w	d6518 <__aeabi_dmul+0x238>
   d63c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d63c6:	bfde      	ittt	le
   d63c8:	2000      	movle	r0, #0
   d63ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d63ce:	bd70      	pople	{r4, r5, r6, pc}
   d63d0:	f1c4 0400 	rsb	r4, r4, #0
   d63d4:	3c20      	subs	r4, #32
   d63d6:	da35      	bge.n	d6444 <__aeabi_dmul+0x164>
   d63d8:	340c      	adds	r4, #12
   d63da:	dc1b      	bgt.n	d6414 <__aeabi_dmul+0x134>
   d63dc:	f104 0414 	add.w	r4, r4, #20
   d63e0:	f1c4 0520 	rsb	r5, r4, #32
   d63e4:	fa00 f305 	lsl.w	r3, r0, r5
   d63e8:	fa20 f004 	lsr.w	r0, r0, r4
   d63ec:	fa01 f205 	lsl.w	r2, r1, r5
   d63f0:	ea40 0002 	orr.w	r0, r0, r2
   d63f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d63f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d63fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6400:	fa21 f604 	lsr.w	r6, r1, r4
   d6404:	eb42 0106 	adc.w	r1, r2, r6
   d6408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d640c:	bf08      	it	eq
   d640e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6412:	bd70      	pop	{r4, r5, r6, pc}
   d6414:	f1c4 040c 	rsb	r4, r4, #12
   d6418:	f1c4 0520 	rsb	r5, r4, #32
   d641c:	fa00 f304 	lsl.w	r3, r0, r4
   d6420:	fa20 f005 	lsr.w	r0, r0, r5
   d6424:	fa01 f204 	lsl.w	r2, r1, r4
   d6428:	ea40 0002 	orr.w	r0, r0, r2
   d642c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6434:	f141 0100 	adc.w	r1, r1, #0
   d6438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d643c:	bf08      	it	eq
   d643e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6442:	bd70      	pop	{r4, r5, r6, pc}
   d6444:	f1c4 0520 	rsb	r5, r4, #32
   d6448:	fa00 f205 	lsl.w	r2, r0, r5
   d644c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6450:	fa20 f304 	lsr.w	r3, r0, r4
   d6454:	fa01 f205 	lsl.w	r2, r1, r5
   d6458:	ea43 0302 	orr.w	r3, r3, r2
   d645c:	fa21 f004 	lsr.w	r0, r1, r4
   d6460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6464:	fa21 f204 	lsr.w	r2, r1, r4
   d6468:	ea20 0002 	bic.w	r0, r0, r2
   d646c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6474:	bf08      	it	eq
   d6476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d647a:	bd70      	pop	{r4, r5, r6, pc}
   d647c:	f094 0f00 	teq	r4, #0
   d6480:	d10f      	bne.n	d64a2 <__aeabi_dmul+0x1c2>
   d6482:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6486:	0040      	lsls	r0, r0, #1
   d6488:	eb41 0101 	adc.w	r1, r1, r1
   d648c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6490:	bf08      	it	eq
   d6492:	3c01      	subeq	r4, #1
   d6494:	d0f7      	beq.n	d6486 <__aeabi_dmul+0x1a6>
   d6496:	ea41 0106 	orr.w	r1, r1, r6
   d649a:	f095 0f00 	teq	r5, #0
   d649e:	bf18      	it	ne
   d64a0:	4770      	bxne	lr
   d64a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d64a6:	0052      	lsls	r2, r2, #1
   d64a8:	eb43 0303 	adc.w	r3, r3, r3
   d64ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d64b0:	bf08      	it	eq
   d64b2:	3d01      	subeq	r5, #1
   d64b4:	d0f7      	beq.n	d64a6 <__aeabi_dmul+0x1c6>
   d64b6:	ea43 0306 	orr.w	r3, r3, r6
   d64ba:	4770      	bx	lr
   d64bc:	ea94 0f0c 	teq	r4, ip
   d64c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d64c4:	bf18      	it	ne
   d64c6:	ea95 0f0c 	teqne	r5, ip
   d64ca:	d00c      	beq.n	d64e6 <__aeabi_dmul+0x206>
   d64cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d64d0:	bf18      	it	ne
   d64d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d64d6:	d1d1      	bne.n	d647c <__aeabi_dmul+0x19c>
   d64d8:	ea81 0103 	eor.w	r1, r1, r3
   d64dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64e0:	f04f 0000 	mov.w	r0, #0
   d64e4:	bd70      	pop	{r4, r5, r6, pc}
   d64e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d64ea:	bf06      	itte	eq
   d64ec:	4610      	moveq	r0, r2
   d64ee:	4619      	moveq	r1, r3
   d64f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d64f4:	d019      	beq.n	d652a <__aeabi_dmul+0x24a>
   d64f6:	ea94 0f0c 	teq	r4, ip
   d64fa:	d102      	bne.n	d6502 <__aeabi_dmul+0x222>
   d64fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6500:	d113      	bne.n	d652a <__aeabi_dmul+0x24a>
   d6502:	ea95 0f0c 	teq	r5, ip
   d6506:	d105      	bne.n	d6514 <__aeabi_dmul+0x234>
   d6508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d650c:	bf1c      	itt	ne
   d650e:	4610      	movne	r0, r2
   d6510:	4619      	movne	r1, r3
   d6512:	d10a      	bne.n	d652a <__aeabi_dmul+0x24a>
   d6514:	ea81 0103 	eor.w	r1, r1, r3
   d6518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d651c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6524:	f04f 0000 	mov.w	r0, #0
   d6528:	bd70      	pop	{r4, r5, r6, pc}
   d652a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d652e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6532:	bd70      	pop	{r4, r5, r6, pc}

000d6534 <__aeabi_ddiv>:
   d6534:	b570      	push	{r4, r5, r6, lr}
   d6536:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d653a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d653e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6542:	bf1d      	ittte	ne
   d6544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6548:	ea94 0f0c 	teqne	r4, ip
   d654c:	ea95 0f0c 	teqne	r5, ip
   d6550:	f000 f8a7 	bleq	d66a2 <__aeabi_ddiv+0x16e>
   d6554:	eba4 0405 	sub.w	r4, r4, r5
   d6558:	ea81 0e03 	eor.w	lr, r1, r3
   d655c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6560:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6564:	f000 8088 	beq.w	d6678 <__aeabi_ddiv+0x144>
   d6568:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d656c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6570:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6574:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6578:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d657c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6580:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6584:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6588:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d658c:	429d      	cmp	r5, r3
   d658e:	bf08      	it	eq
   d6590:	4296      	cmpeq	r6, r2
   d6592:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6596:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d659a:	d202      	bcs.n	d65a2 <__aeabi_ddiv+0x6e>
   d659c:	085b      	lsrs	r3, r3, #1
   d659e:	ea4f 0232 	mov.w	r2, r2, rrx
   d65a2:	1ab6      	subs	r6, r6, r2
   d65a4:	eb65 0503 	sbc.w	r5, r5, r3
   d65a8:	085b      	lsrs	r3, r3, #1
   d65aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d65ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d65b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d65b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d65ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d65be:	bf22      	ittt	cs
   d65c0:	1ab6      	subcs	r6, r6, r2
   d65c2:	4675      	movcs	r5, lr
   d65c4:	ea40 000c 	orrcs.w	r0, r0, ip
   d65c8:	085b      	lsrs	r3, r3, #1
   d65ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d65ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d65d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d65d6:	bf22      	ittt	cs
   d65d8:	1ab6      	subcs	r6, r6, r2
   d65da:	4675      	movcs	r5, lr
   d65dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d65e0:	085b      	lsrs	r3, r3, #1
   d65e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d65e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d65ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d65ee:	bf22      	ittt	cs
   d65f0:	1ab6      	subcs	r6, r6, r2
   d65f2:	4675      	movcs	r5, lr
   d65f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d65f8:	085b      	lsrs	r3, r3, #1
   d65fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d65fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d6602:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6606:	bf22      	ittt	cs
   d6608:	1ab6      	subcs	r6, r6, r2
   d660a:	4675      	movcs	r5, lr
   d660c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6610:	ea55 0e06 	orrs.w	lr, r5, r6
   d6614:	d018      	beq.n	d6648 <__aeabi_ddiv+0x114>
   d6616:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d661a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d661e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6622:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6626:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d662a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d662e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6632:	d1c0      	bne.n	d65b6 <__aeabi_ddiv+0x82>
   d6634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6638:	d10b      	bne.n	d6652 <__aeabi_ddiv+0x11e>
   d663a:	ea41 0100 	orr.w	r1, r1, r0
   d663e:	f04f 0000 	mov.w	r0, #0
   d6642:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6646:	e7b6      	b.n	d65b6 <__aeabi_ddiv+0x82>
   d6648:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d664c:	bf04      	itt	eq
   d664e:	4301      	orreq	r1, r0
   d6650:	2000      	moveq	r0, #0
   d6652:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6656:	bf88      	it	hi
   d6658:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d665c:	f63f aeaf 	bhi.w	d63be <__aeabi_dmul+0xde>
   d6660:	ebb5 0c03 	subs.w	ip, r5, r3
   d6664:	bf04      	itt	eq
   d6666:	ebb6 0c02 	subseq.w	ip, r6, r2
   d666a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d666e:	f150 0000 	adcs.w	r0, r0, #0
   d6672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6676:	bd70      	pop	{r4, r5, r6, pc}
   d6678:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d667c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6680:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6684:	bfc2      	ittt	gt
   d6686:	ebd4 050c 	rsbsgt	r5, r4, ip
   d668a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d668e:	bd70      	popgt	{r4, r5, r6, pc}
   d6690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6694:	f04f 0e00 	mov.w	lr, #0
   d6698:	3c01      	subs	r4, #1
   d669a:	e690      	b.n	d63be <__aeabi_dmul+0xde>
   d669c:	ea45 0e06 	orr.w	lr, r5, r6
   d66a0:	e68d      	b.n	d63be <__aeabi_dmul+0xde>
   d66a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d66a6:	ea94 0f0c 	teq	r4, ip
   d66aa:	bf08      	it	eq
   d66ac:	ea95 0f0c 	teqeq	r5, ip
   d66b0:	f43f af3b 	beq.w	d652a <__aeabi_dmul+0x24a>
   d66b4:	ea94 0f0c 	teq	r4, ip
   d66b8:	d10a      	bne.n	d66d0 <__aeabi_ddiv+0x19c>
   d66ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d66be:	f47f af34 	bne.w	d652a <__aeabi_dmul+0x24a>
   d66c2:	ea95 0f0c 	teq	r5, ip
   d66c6:	f47f af25 	bne.w	d6514 <__aeabi_dmul+0x234>
   d66ca:	4610      	mov	r0, r2
   d66cc:	4619      	mov	r1, r3
   d66ce:	e72c      	b.n	d652a <__aeabi_dmul+0x24a>
   d66d0:	ea95 0f0c 	teq	r5, ip
   d66d4:	d106      	bne.n	d66e4 <__aeabi_ddiv+0x1b0>
   d66d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d66da:	f43f aefd 	beq.w	d64d8 <__aeabi_dmul+0x1f8>
   d66de:	4610      	mov	r0, r2
   d66e0:	4619      	mov	r1, r3
   d66e2:	e722      	b.n	d652a <__aeabi_dmul+0x24a>
   d66e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d66e8:	bf18      	it	ne
   d66ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d66ee:	f47f aec5 	bne.w	d647c <__aeabi_dmul+0x19c>
   d66f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d66f6:	f47f af0d 	bne.w	d6514 <__aeabi_dmul+0x234>
   d66fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d66fe:	f47f aeeb 	bne.w	d64d8 <__aeabi_dmul+0x1f8>
   d6702:	e712      	b.n	d652a <__aeabi_dmul+0x24a>

000d6704 <__aeabi_d2f>:
   d6704:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6708:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d670c:	bf24      	itt	cs
   d670e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6712:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6716:	d90d      	bls.n	d6734 <__aeabi_d2f+0x30>
   d6718:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d671c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6720:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6724:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6728:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d672c:	bf08      	it	eq
   d672e:	f020 0001 	biceq.w	r0, r0, #1
   d6732:	4770      	bx	lr
   d6734:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6738:	d121      	bne.n	d677e <__aeabi_d2f+0x7a>
   d673a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d673e:	bfbc      	itt	lt
   d6740:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6744:	4770      	bxlt	lr
   d6746:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d674a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d674e:	f1c2 0218 	rsb	r2, r2, #24
   d6752:	f1c2 0c20 	rsb	ip, r2, #32
   d6756:	fa10 f30c 	lsls.w	r3, r0, ip
   d675a:	fa20 f002 	lsr.w	r0, r0, r2
   d675e:	bf18      	it	ne
   d6760:	f040 0001 	orrne.w	r0, r0, #1
   d6764:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6768:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d676c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6770:	ea40 000c 	orr.w	r0, r0, ip
   d6774:	fa23 f302 	lsr.w	r3, r3, r2
   d6778:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d677c:	e7cc      	b.n	d6718 <__aeabi_d2f+0x14>
   d677e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6782:	d107      	bne.n	d6794 <__aeabi_d2f+0x90>
   d6784:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6788:	bf1e      	ittt	ne
   d678a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d678e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6792:	4770      	bxne	lr
   d6794:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6798:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d679c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d67a0:	4770      	bx	lr
   d67a2:	bf00      	nop

000d67a4 <atexit>:
   d67a4:	2300      	movs	r3, #0
   d67a6:	4601      	mov	r1, r0
   d67a8:	461a      	mov	r2, r3
   d67aa:	4618      	mov	r0, r3
   d67ac:	f000 b880 	b.w	d68b0 <__register_exitproc>

000d67b0 <memcpy>:
   d67b0:	440a      	add	r2, r1
   d67b2:	4291      	cmp	r1, r2
   d67b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d67b8:	d100      	bne.n	d67bc <memcpy+0xc>
   d67ba:	4770      	bx	lr
   d67bc:	b510      	push	{r4, lr}
   d67be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d67c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d67c6:	4291      	cmp	r1, r2
   d67c8:	d1f9      	bne.n	d67be <memcpy+0xe>
   d67ca:	bd10      	pop	{r4, pc}

000d67cc <memset>:
   d67cc:	4402      	add	r2, r0
   d67ce:	4603      	mov	r3, r0
   d67d0:	4293      	cmp	r3, r2
   d67d2:	d100      	bne.n	d67d6 <memset+0xa>
   d67d4:	4770      	bx	lr
   d67d6:	f803 1b01 	strb.w	r1, [r3], #1
   d67da:	e7f9      	b.n	d67d0 <memset+0x4>

000d67dc <srand>:
   d67dc:	b538      	push	{r3, r4, r5, lr}
   d67de:	4b0d      	ldr	r3, [pc, #52]	; (d6814 <srand+0x38>)
   d67e0:	681d      	ldr	r5, [r3, #0]
   d67e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d67e4:	4604      	mov	r4, r0
   d67e6:	b97b      	cbnz	r3, d6808 <srand+0x2c>
   d67e8:	2018      	movs	r0, #24
   d67ea:	f7fe fa7d 	bl	d4ce8 <malloc>
   d67ee:	4a0a      	ldr	r2, [pc, #40]	; (d6818 <srand+0x3c>)
   d67f0:	4b0a      	ldr	r3, [pc, #40]	; (d681c <srand+0x40>)
   d67f2:	63a8      	str	r0, [r5, #56]	; 0x38
   d67f4:	e9c0 2300 	strd	r2, r3, [r0]
   d67f8:	4b09      	ldr	r3, [pc, #36]	; (d6820 <srand+0x44>)
   d67fa:	6083      	str	r3, [r0, #8]
   d67fc:	230b      	movs	r3, #11
   d67fe:	8183      	strh	r3, [r0, #12]
   d6800:	2201      	movs	r2, #1
   d6802:	2300      	movs	r3, #0
   d6804:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6808:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d680a:	2200      	movs	r2, #0
   d680c:	611c      	str	r4, [r3, #16]
   d680e:	615a      	str	r2, [r3, #20]
   d6810:	bd38      	pop	{r3, r4, r5, pc}
   d6812:	bf00      	nop
   d6814:	2003e3e0 	.word	0x2003e3e0
   d6818:	abcd330e 	.word	0xabcd330e
   d681c:	e66d1234 	.word	0xe66d1234
   d6820:	0005deec 	.word	0x0005deec

000d6824 <rand>:
   d6824:	4b13      	ldr	r3, [pc, #76]	; (d6874 <rand+0x50>)
   d6826:	b510      	push	{r4, lr}
   d6828:	681c      	ldr	r4, [r3, #0]
   d682a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d682c:	b97b      	cbnz	r3, d684e <rand+0x2a>
   d682e:	2018      	movs	r0, #24
   d6830:	f7fe fa5a 	bl	d4ce8 <malloc>
   d6834:	4a10      	ldr	r2, [pc, #64]	; (d6878 <rand+0x54>)
   d6836:	4b11      	ldr	r3, [pc, #68]	; (d687c <rand+0x58>)
   d6838:	63a0      	str	r0, [r4, #56]	; 0x38
   d683a:	e9c0 2300 	strd	r2, r3, [r0]
   d683e:	4b10      	ldr	r3, [pc, #64]	; (d6880 <rand+0x5c>)
   d6840:	6083      	str	r3, [r0, #8]
   d6842:	230b      	movs	r3, #11
   d6844:	8183      	strh	r3, [r0, #12]
   d6846:	2201      	movs	r2, #1
   d6848:	2300      	movs	r3, #0
   d684a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d684e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6850:	480c      	ldr	r0, [pc, #48]	; (d6884 <rand+0x60>)
   d6852:	690a      	ldr	r2, [r1, #16]
   d6854:	694b      	ldr	r3, [r1, #20]
   d6856:	4c0c      	ldr	r4, [pc, #48]	; (d6888 <rand+0x64>)
   d6858:	4350      	muls	r0, r2
   d685a:	fb04 0003 	mla	r0, r4, r3, r0
   d685e:	fba2 3404 	umull	r3, r4, r2, r4
   d6862:	1c5a      	adds	r2, r3, #1
   d6864:	4404      	add	r4, r0
   d6866:	f144 0000 	adc.w	r0, r4, #0
   d686a:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d686e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d6872:	bd10      	pop	{r4, pc}
   d6874:	2003e3e0 	.word	0x2003e3e0
   d6878:	abcd330e 	.word	0xabcd330e
   d687c:	e66d1234 	.word	0xe66d1234
   d6880:	0005deec 	.word	0x0005deec
   d6884:	5851f42d 	.word	0x5851f42d
   d6888:	4c957f2d 	.word	0x4c957f2d

000d688c <strcmp>:
   d688c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6890:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6894:	2a01      	cmp	r2, #1
   d6896:	bf28      	it	cs
   d6898:	429a      	cmpcs	r2, r3
   d689a:	d0f7      	beq.n	d688c <strcmp>
   d689c:	1ad0      	subs	r0, r2, r3
   d689e:	4770      	bx	lr

000d68a0 <strlen>:
   d68a0:	4603      	mov	r3, r0
   d68a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d68a6:	2a00      	cmp	r2, #0
   d68a8:	d1fb      	bne.n	d68a2 <strlen+0x2>
   d68aa:	1a18      	subs	r0, r3, r0
   d68ac:	3801      	subs	r0, #1
   d68ae:	4770      	bx	lr

000d68b0 <__register_exitproc>:
   d68b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d68b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d6970 <__register_exitproc+0xc0>
   d68b8:	4606      	mov	r6, r0
   d68ba:	f8d8 0000 	ldr.w	r0, [r8]
   d68be:	461f      	mov	r7, r3
   d68c0:	460d      	mov	r5, r1
   d68c2:	4691      	mov	r9, r2
   d68c4:	f000 f856 	bl	d6974 <__retarget_lock_acquire_recursive>
   d68c8:	4b25      	ldr	r3, [pc, #148]	; (d6960 <__register_exitproc+0xb0>)
   d68ca:	681c      	ldr	r4, [r3, #0]
   d68cc:	b934      	cbnz	r4, d68dc <__register_exitproc+0x2c>
   d68ce:	4c25      	ldr	r4, [pc, #148]	; (d6964 <__register_exitproc+0xb4>)
   d68d0:	601c      	str	r4, [r3, #0]
   d68d2:	4b25      	ldr	r3, [pc, #148]	; (d6968 <__register_exitproc+0xb8>)
   d68d4:	b113      	cbz	r3, d68dc <__register_exitproc+0x2c>
   d68d6:	681b      	ldr	r3, [r3, #0]
   d68d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d68dc:	6863      	ldr	r3, [r4, #4]
   d68de:	2b1f      	cmp	r3, #31
   d68e0:	dd07      	ble.n	d68f2 <__register_exitproc+0x42>
   d68e2:	f8d8 0000 	ldr.w	r0, [r8]
   d68e6:	f000 f847 	bl	d6978 <__retarget_lock_release_recursive>
   d68ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d68ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d68f2:	b34e      	cbz	r6, d6948 <__register_exitproc+0x98>
   d68f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d68f8:	b988      	cbnz	r0, d691e <__register_exitproc+0x6e>
   d68fa:	4b1c      	ldr	r3, [pc, #112]	; (d696c <__register_exitproc+0xbc>)
   d68fc:	b923      	cbnz	r3, d6908 <__register_exitproc+0x58>
   d68fe:	f8d8 0000 	ldr.w	r0, [r8]
   d6902:	f000 f838 	bl	d6976 <__retarget_lock_release>
   d6906:	e7f0      	b.n	d68ea <__register_exitproc+0x3a>
   d6908:	f44f 7084 	mov.w	r0, #264	; 0x108
   d690c:	f7fe f9ec 	bl	d4ce8 <malloc>
   d6910:	2800      	cmp	r0, #0
   d6912:	d0f4      	beq.n	d68fe <__register_exitproc+0x4e>
   d6914:	2300      	movs	r3, #0
   d6916:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d691a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d691e:	6863      	ldr	r3, [r4, #4]
   d6920:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6924:	2201      	movs	r2, #1
   d6926:	409a      	lsls	r2, r3
   d6928:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d692c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d6930:	4313      	orrs	r3, r2
   d6932:	2e02      	cmp	r6, #2
   d6934:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d6938:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d693c:	bf02      	ittt	eq
   d693e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d6942:	431a      	orreq	r2, r3
   d6944:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6948:	6863      	ldr	r3, [r4, #4]
   d694a:	f8d8 0000 	ldr.w	r0, [r8]
   d694e:	1c5a      	adds	r2, r3, #1
   d6950:	3302      	adds	r3, #2
   d6952:	6062      	str	r2, [r4, #4]
   d6954:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6958:	f000 f80e 	bl	d6978 <__retarget_lock_release_recursive>
   d695c:	2000      	movs	r0, #0
   d695e:	e7c6      	b.n	d68ee <__register_exitproc+0x3e>
   d6960:	2003e7e0 	.word	0x2003e7e0
   d6964:	2003e754 	.word	0x2003e754
   d6968:	00000000 	.word	0x00000000
   d696c:	000d4ce9 	.word	0x000d4ce9
   d6970:	2003e444 	.word	0x2003e444

000d6974 <__retarget_lock_acquire_recursive>:
   d6974:	4770      	bx	lr

000d6976 <__retarget_lock_release>:
   d6976:	4770      	bx	lr

000d6978 <__retarget_lock_release_recursive>:
   d6978:	4770      	bx	lr

000d697a <link_code_end>:
	...

000d697c <dynalib_user>:
   d697c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d698c:	0000 0000 227b 3174 3a22 2e25 6632 222c     ....{"t1":%.2f,"
   d699c:	3274 3a22 2e25 6632 007d 716d 7474 7542     t2":%.2f}.mqttBu
   d69ac:	3a66 2520 0a73 6973 657a 664f 6d28 7471     f: %s.sizeOf(mqt
   d69bc:	4274 6675 3a29 2520 0a69 7600 2f31 6564     tBuf): %i..v1/de
   d69cc:	6976 6563 2f73 656d 742f 6c65 6d65 7465     vices/me/telemet
   d69dc:	7972 7000 756c 656d 6f43 6e6e 6365 2874     ry.plumeConnect(
   d69ec:	3a29 4120 7474 6d65 7470 6e69 2067 6f74     ): Attempting to
   d69fc:	6320 6e6f 656e 7463 7420 206f 6854 6e69      connect to Thin
   d6a0c:	7367 6f62 7261 2064 6573 7672 7265 7900     gsboard server.y
   d6a1c:	566d 6b5a 6371 556c 506a 6236 3379 7056     mVZkqclUjP6by3Vp
   d6a2c:	655a 0043 7241 6f67 006e 6c70 6d75 4365     ZeC.Argon.plumeC
   d6a3c:	6e6f 656e 7463 2928 203a 6f43 6e6e 6365     onnect(): Connec
   d6a4c:	6574 0064 6c70 6d75 4365 6e6f 656e 7463     ted.plumeConnect
   d6a5c:	2928 203a 6f43 6e6e 6365 6974 6e6f 6620     (): Connection f
   d6a6c:	6961 656c 2c64 7220 7465 7972 6920 206e     ailed, retry in 
   d6a7c:	2033 6573 6f63 646e 0073 7325 6d00 7471     3 seconds.%s.mqt
   d6a8c:	4274 6675 203a 7325 730a 7a69 4f65 2866     tBuf: %s.sizeOf(
   d6a9c:	716d 7474 7542 2966 203a 6925 6e2f 0000     mqttBuf): %i/n..
   d6aac:	4d04 5451 0454 0000                         .MQTT...

000d6ab4 <_ZTVN5spark12NetworkClassE>:
	...
   d6abc:	4d49 000d 4d53 000d 4d5d 000d 4d67 000d     IM..SM..]M..gM..
   d6acc:	4d71 000d 4d7d 000d 4d89 000d 4d91 000d     qM..}M...M...M..
   d6adc:	4d99 000d 4da5 000d 4dad 000d 4db7 000d     .M...M...M...M..
   d6aec:	4dc1 000d                                   .M..

000d6af0 <_ZTVN5spark9WiFiClassE>:
	...
   d6af8:	4f07 000d 4efd 000d 4ef3 000d 4ea9 000d     .O...N...N...N..
   d6b08:	4ee7 000d 4edb 000d 4d89 000d 4d91 000d     .N...N...M...M..
   d6b18:	4ecf 000d 4ec7 000d 4ebd 000d 4eb3 000d     .N...N...N...N..
   d6b28:	4dc1 000d 6977 6972 676e 7200 6365 2076     .M..wiring.recv 
   d6b38:	7265 6f72 2072 203d 6425 0000               error = %d..

000d6b44 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6b4c:	4fa7 000d 4fc9 000d 54e3 000d 4fd7 000d     .O...O...T...O..
   d6b5c:	4fa9 000d                                   .O..

000d6b60 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000d6b68 <_ZTV9TCPClient>:
	...
   d6b70:	5055 000d 5089 000d 4f25 000d 4f3f 000d     UP...P..%O..?O..
   d6b80:	5379 000d 50eb 000d 50bd 000d 4f69 000d     yS...P...P..iO..
   d6b90:	5281 000d 5175 000d 511f 000d 542d 000d     .R..uQ...Q..-T..
   d6ba0:	4f6b 000d 4f9d 000d 4f51 000d 4fdb 000d     kO...O..QO...O..
   d6bb0:	509d 000d                                   .P..

000d6bb4 <_ZTV7TwoWire>:
	...
   d6bbc:	5527 000d 5571 000d 5549 000d 5529 000d     'U..qU..IU..)U..
   d6bcc:	5551 000d 5559 000d 5561 000d 5569 000d     QU..YU..aU..iU..

000d6bdc <_ZTV11USARTSerial>:
	...
   d6be4:	55a5 000d 5613 000d 55eb 000d 5a21 000d     .U...V...U..!Z..
   d6bf4:	55bb 000d 55d7 000d 55c9 000d 55e5 000d     .U...U...U...U..
   d6c04:	55a7 000d 55ad 000d                         .U...U..

000d6c0c <_ZTV9USBSerial>:
	...
   d6c14:	569f 000d 5707 000d 56dd 000d 5a21 000d     .V...W...V..!Z..
   d6c24:	56cf 000d 56a1 000d 56b1 000d 5701 000d     .V...V...V...W..
   d6c34:	56c1 000d 5699 000d                         .V...V..

000d6c3c <_ZTV9IPAddress>:
	...
   d6c44:	57b1 000d 57a1 000d 57a3 000d 5925 252d     .W...W...W..%Y-%
   d6c54:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d6c64:	7361 7463 6d69 0065 7061 0070               asctime.app.

000d6c70 <_ZTVN5spark13EthernetClassE>:
	...
   d6c78:	5bd3 000d 5bc9 000d 5bbf 000d 5bb5 000d     .[...[...[...[..
   d6c88:	5ba9 000d 5b9d 000d 4d89 000d 4d91 000d     .[...[...M...M..
   d6c98:	5b91 000d 5b89 000d 5b7f 000d 5b75 000d     .[...[...[..u[..
   d6ca8:	4dc1 000d                                   .M..

000d6cac <_ZSt7nothrow>:
	...

000d6cad <_ZTSSt19_Sp_make_shared_tag>:
   d6cad:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d6cbd:	6572 5f64 6174 0067 0000                     red_tag....

000d6cc8 <_ZTISt19_Sp_make_shared_tag>:
   d6cc8:	6d08 000d 6cad 000d                         .m...l..

000d6cd0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d6cd0:	6d68 000d 6cdc 000d 6d8c 000d               hm...l...m..

000d6cdc <_ZTSN10__cxxabiv117__class_type_infoE>:
   d6cdc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d6cec:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d6cfc:	0045 0000                                   E...

000d6d00 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d6d00:	0000 0000 6cd0 000d 5d91 000d 5da5 000d     .....l...]...]..
   d6d10:	5f39 000d 5f39 000d 5e0f 000d 5d51 000d     9_..9_...^..Q]..
   d6d20:	5df7 000d 5db9 000d 5d85 000d               .]...]...]..

000d6d2c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d6d2c:	6d68 000d 6d38 000d 6cd0 000d               hm..8m...l..

000d6d38 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d6d38:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d6d48:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d6d58:	666e 456f 0000 0000                         nfoE....

000d6d60 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d6d60:	0000 0000 6d2c 000d 5e39 000d 5e4d 000d     ....,m..9^..M^..
   d6d70:	5f39 000d 5f39 000d 5e0f 000d 5d51 000d     9_..9_...^..Q]..
   d6d80:	5f0d 000d 5e99 000d 5e61 000d               ._...^..a^..

000d6d8c <_ZTISt9type_info>:
   d6d8c:	6d08 000d 6d94 000d                         .m...m..

000d6d94 <_ZTSSt9type_info>:
   d6d94:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d6da1 <link_const_variable_data_end>:
   d6da1:	00          	.byte	0x00
	...

000d6da4 <link_constructors_location>:
   d6da4:	000d42bd 	.word	0x000d42bd
   d6da8:	000d4e95 	.word	0x000d4e95
   d6dac:	000d4f11 	.word	0x000d4f11
   d6db0:	000d59e9 	.word	0x000d59e9
   d6db4:	000d59fd 	.word	0x000d59fd
   d6db8:	000d5a11 	.word	0x000d5a11
   d6dbc:	000d5b41 	.word	0x000d5b41
   d6dc0:	000d5b51 	.word	0x000d5b51
   d6dc4:	000d5bdd 	.word	0x000d5bdd

000d6dc8 <link_constructors_end>:
	...
