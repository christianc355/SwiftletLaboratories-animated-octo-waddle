
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/helloThingsBoard/target/3.2.0/argon/helloThingsBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ce4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6d00  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  2003e4a0  000b6d04  0001e4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000298  2003e558  2003e558  0002e558  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b6dbc  000b6dbc  00026dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b6de4  000b6de4  00026de4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f9304  00000000  00000000  00026de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000117fd  00000000  00000000  001200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00002b08  00000000  00000000  001318e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00036490  00000000  00000000  001343f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00038fd7  00000000  00000000  0016a881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00129153  00000000  00000000  001a3858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00034abc  00000000  00000000  002cc9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00009df0  00000000  00000000  00301467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000078c8  00000000  00000000  0030b258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fb0d 	bl	b664c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fb15 	bl	b6668 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e4a0 	.word	0x2003e4a0
   b4048:	000b6d04 	.word	0x000b6d04
   b404c:	2003e558 	.word	0x2003e558
   b4050:	2003e558 	.word	0x2003e558
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fba3 	bl	b57a8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6cdc 	.word	0x000b6cdc
   b407c:	000b6d00 	.word	0x000b6d00

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8ac 	b.w	b41dc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8d7 	bl	b4238 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bb43 	b.w	b5718 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bd45 	b.w	b4b20 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bd43 	b.w	b4b20 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bd49 	b.w	b4b30 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f001 fc21 	bl	b5902 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <_Z12plumePublishv>:
        lastTime = millis();
    }
}

void plumePublish()
{
   b40cc:	b530      	push	{r4, r5, lr}
    float t1 = random(80000, 170000) / 1000.0;
   b40ce:	4c20      	ldr	r4, [pc, #128]	; (b4150 <_Z12plumePublishv+0x84>)
   b40d0:	4920      	ldr	r1, [pc, #128]	; (b4154 <_Z12plumePublishv+0x88>)
{
   b40d2:	b085      	sub	sp, #20
    float t1 = random(80000, 170000) / 1000.0;
   b40d4:	4620      	mov	r0, r4
   b40d6:	f001 f950 	bl	b537a <_Z6randomii>
    float t2 = random(80000, 170000) / 1000.0;
   b40da:	491e      	ldr	r1, [pc, #120]	; (b4154 <_Z12plumePublishv+0x88>)
    float t1 = random(80000, 170000) / 1000.0;
   b40dc:	4605      	mov	r5, r0
    float t2 = random(80000, 170000) / 1000.0;
   b40de:	4620      	mov	r0, r4
   b40e0:	f001 f94b 	bl	b537a <_Z6randomii>
   b40e4:	f001 ffe0 	bl	b60a8 <__aeabi_i2d>
   b40e8:	4b1b      	ldr	r3, [pc, #108]	; (b4158 <_Z12plumePublishv+0x8c>)
    // float t6 = random(80000, 170000) / 1000.0;
    // float t7 = random(80000, 170000) / 1000.0;
    // float t8 = random(80000, 170000) / 1000.0;
    // float t9 = random(80000, 170000) / 1000.0;

    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   b40ea:	4c1c      	ldr	r4, [pc, #112]	; (b415c <_Z12plumePublishv+0x90>)
    float t2 = random(80000, 170000) / 1000.0;
   b40ec:	2200      	movs	r2, #0
   b40ee:	f002 f96f 	bl	b63d0 <__aeabi_ddiv>
   b40f2:	f002 fa55 	bl	b65a0 <__aeabi_d2f>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   b40f6:	f001 ffe9 	bl	b60cc <__aeabi_f2d>
   b40fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    float t1 = random(80000, 170000) / 1000.0;
   b40fe:	4628      	mov	r0, r5
   b4100:	f001 ffd2 	bl	b60a8 <__aeabi_i2d>
   b4104:	4b14      	ldr	r3, [pc, #80]	; (b4158 <_Z12plumePublishv+0x8c>)
   b4106:	2200      	movs	r2, #0
   b4108:	f002 f962 	bl	b63d0 <__aeabi_ddiv>
   b410c:	f002 fa48 	bl	b65a0 <__aeabi_d2f>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f,\"t2\":%.2f}", t1, t2);
   b4110:	f001 ffdc 	bl	b60cc <__aeabi_f2d>
   b4114:	4a12      	ldr	r2, [pc, #72]	; (b4160 <_Z12plumePublishv+0x94>)
   b4116:	e9cd 0100 	strd	r0, r1, [sp]
   b411a:	2180      	movs	r1, #128	; 0x80
   b411c:	4620      	mov	r0, r4
   b411e:	f000 fd0f 	bl	b4b40 <snprintf>
    Serial.printf("mqttBuf: %s\nsizeOf(mqttBuf): %i/n", mqttBuf, sizeof(mqttBuf));
   b4122:	f001 fa23 	bl	b556c <_Z16_fetch_usbserialv>
   b4126:	2380      	movs	r3, #128	; 0x80
   b4128:	4622      	mov	r2, r4
   b412a:	490e      	ldr	r1, [pc, #56]	; (b4164 <_Z12plumePublishv+0x98>)
   b412c:	f7ff ffbf 	bl	b40ae <_ZN5Print6printfEPKcz>
    plume.publish("v1/devices/me/telemetry",mqttBuf);
   b4130:	4622      	mov	r2, r4
    static bool onOff = true;
    digitalWrite(LEDPIN, onOff);
   b4132:	4c0d      	ldr	r4, [pc, #52]	; (b4168 <_Z12plumePublishv+0x9c>)
    plume.publish("v1/devices/me/telemetry",mqttBuf);
   b4134:	490d      	ldr	r1, [pc, #52]	; (b416c <_Z12plumePublishv+0xa0>)
   b4136:	480e      	ldr	r0, [pc, #56]	; (b4170 <_Z12plumePublishv+0xa4>)
   b4138:	f000 faf7 	bl	b472a <_ZN12PubSubClient7publishEPKcS1_>
    digitalWrite(LEDPIN, onOff);
   b413c:	7821      	ldrb	r1, [r4, #0]
   b413e:	2007      	movs	r0, #7
   b4140:	f001 fd33 	bl	b5baa <digitalWrite>
    onOff = !onOff;
   b4144:	7823      	ldrb	r3, [r4, #0]
   b4146:	f083 0301 	eor.w	r3, r3, #1
   b414a:	7023      	strb	r3, [r4, #0]
}
   b414c:	b005      	add	sp, #20
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	00013880 	.word	0x00013880
   b4154:	00029810 	.word	0x00029810
   b4158:	408f4000 	.word	0x408f4000
   b415c:	2003e55c 	.word	0x2003e55c
   b4160:	000b6854 	.word	0x000b6854
   b4164:	000b686a 	.word	0x000b686a
   b4168:	2003e4a0 	.word	0x2003e4a0
   b416c:	000b688c 	.word	0x000b688c
   b4170:	2003e5dc 	.word	0x2003e5dc

000b4174 <_Z12plumeConnectv>:

void plumeConnect()
{
   b4174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (!plume.connected())
   b4176:	4d13      	ldr	r5, [pc, #76]	; (b41c4 <_Z12plumeConnectv+0x50>)
    {
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4178:	4e13      	ldr	r6, [pc, #76]	; (b41c8 <_Z12plumeConnectv+0x54>)
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b417a:	4f14      	ldr	r7, [pc, #80]	; (b41cc <_Z12plumeConnectv+0x58>)
    while (!plume.connected())
   b417c:	4811      	ldr	r0, [pc, #68]	; (b41c4 <_Z12plumeConnectv+0x50>)
   b417e:	f000 f9b4 	bl	b44ea <_ZN12PubSubClient9connectedEv>
   b4182:	4604      	mov	r4, r0
   b4184:	b9e0      	cbnz	r0, b41c0 <_Z12plumeConnectv+0x4c>
        Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4186:	f001 f9f1 	bl	b556c <_Z16_fetch_usbserialv>
   b418a:	4631      	mov	r1, r6
   b418c:	f001 fb91 	bl	b58b2 <_ZN5Print7printlnEPKc>
        if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b4190:	490f      	ldr	r1, [pc, #60]	; (b41d0 <_Z12plumeConnectv+0x5c>)
   b4192:	4623      	mov	r3, r4
   b4194:	463a      	mov	r2, r7
   b4196:	4628      	mov	r0, r5
   b4198:	f000 fa86 	bl	b46a8 <_ZN12PubSubClient7connectEPKcS1_S1_>
   b419c:	b130      	cbz	r0, b41ac <_Z12plumeConnectv+0x38>
        {
            Serial.println("plumeConnect(): Connected");
   b419e:	f001 f9e5 	bl	b556c <_Z16_fetch_usbserialv>
        }
        else
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
        delay(3000);
    }
   b41a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            Serial.println("plumeConnect(): Connected");
   b41a6:	490b      	ldr	r1, [pc, #44]	; (b41d4 <_Z12plumeConnectv+0x60>)
   b41a8:	f001 bb83 	b.w	b58b2 <_ZN5Print7printlnEPKc>
            Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   b41ac:	f001 f9de 	bl	b556c <_Z16_fetch_usbserialv>
   b41b0:	4909      	ldr	r1, [pc, #36]	; (b41d8 <_Z12plumeConnectv+0x64>)
   b41b2:	f001 fb7e 	bl	b58b2 <_ZN5Print7printlnEPKc>
        delay(3000);
   b41b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b41ba:	f001 fb2d 	bl	b5818 <delay>
    while (!plume.connected())
   b41be:	e7dd      	b.n	b417c <_Z12plumeConnectv+0x8>
   b41c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b41c2:	bf00      	nop
   b41c4:	2003e5dc 	.word	0x2003e5dc
   b41c8:	000b68a4 	.word	0x000b68a4
   b41cc:	000b68e0 	.word	0x000b68e0
   b41d0:	000b68f5 	.word	0x000b68f5
   b41d4:	000b68fb 	.word	0x000b68fb
   b41d8:	000b6915 	.word	0x000b6915

000b41dc <setup>:
{
   b41dc:	b510      	push	{r4, lr}
    Serial.begin(9600);
   b41de:	f001 f9c5 	bl	b556c <_Z16_fetch_usbserialv>
   b41e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41e6:	f001 f9b5 	bl	b5554 <_ZN9USBSerial5beginEl>
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   b41ea:	4c0d      	ldr	r4, [pc, #52]	; (b4220 <setup+0x44>)
    pinMode(D7, OUTPUT);
   b41ec:	2101      	movs	r1, #1
   b41ee:	2007      	movs	r0, #7
   b41f0:	f001 fcca 	bl	b5b88 <pinMode>
    plume.setServer(thingsboardServer, MQTTPORT);
   b41f4:	490b      	ldr	r1, [pc, #44]	; (b4224 <setup+0x48>)
   b41f6:	480c      	ldr	r0, [pc, #48]	; (b4228 <setup+0x4c>)
   b41f8:	f240 725b 	movw	r2, #1883	; 0x75b
   b41fc:	f000 faa6 	bl	b474c <_ZN12PubSubClient9setServerEPKct>
    plumeConnect();
   b4200:	f7ff ffb8 	bl	b4174 <_Z12plumeConnectv>
    snprintf(mqttBuf, sizeof(mqttBuf), "%s", versions);
   b4204:	4b09      	ldr	r3, [pc, #36]	; (b422c <setup+0x50>)
   b4206:	4a0a      	ldr	r2, [pc, #40]	; (b4230 <setup+0x54>)
   b4208:	2180      	movs	r1, #128	; 0x80
   b420a:	4620      	mov	r0, r4
   b420c:	f000 fc98 	bl	b4b40 <snprintf>
    Serial.printf("mqttBuf: %s\nsizeOf(mqttBuf): %i/n", mqttBuf, sizeof(mqttBuf));
   b4210:	f001 f9ac 	bl	b556c <_Z16_fetch_usbserialv>
   b4214:	4907      	ldr	r1, [pc, #28]	; (b4234 <setup+0x58>)
   b4216:	2380      	movs	r3, #128	; 0x80
   b4218:	4622      	mov	r2, r4
   b421a:	f7ff ff48 	bl	b40ae <_ZN5Print6printfEPKcz>
}
   b421e:	bd10      	pop	{r4, pc}
   b4220:	2003e55c 	.word	0x2003e55c
   b4224:	2003e4a1 	.word	0x2003e4a1
   b4228:	2003e5dc 	.word	0x2003e5dc
   b422c:	2003e4b3 	.word	0x2003e4b3
   b4230:	000b694b 	.word	0x000b694b
   b4234:	000b686a 	.word	0x000b686a

000b4238 <loop>:
{
   b4238:	b510      	push	{r4, lr}
    if (!plume.connected())
   b423a:	480a      	ldr	r0, [pc, #40]	; (b4264 <loop+0x2c>)
   b423c:	f000 f955 	bl	b44ea <_ZN12PubSubClient9connectedEv>
   b4240:	b908      	cbnz	r0, b4246 <loop+0xe>
        plumeConnect();
   b4242:	f7ff ff97 	bl	b4174 <_Z12plumeConnectv>
    if (millis() - lastTime > 5000)
   b4246:	4c08      	ldr	r4, [pc, #32]	; (b4268 <loop+0x30>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4248:	f000 fb9e 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
   b424c:	6823      	ldr	r3, [r4, #0]
   b424e:	1ac0      	subs	r0, r0, r3
   b4250:	f241 3388 	movw	r3, #5000	; 0x1388
   b4254:	4298      	cmp	r0, r3
   b4256:	d904      	bls.n	b4262 <loop+0x2a>
        plumePublish();
   b4258:	f7ff ff38 	bl	b40cc <_Z12plumePublishv>
   b425c:	f000 fb94 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
        lastTime = millis();
   b4260:	6020      	str	r0, [r4, #0]
}
   b4262:	bd10      	pop	{r4, pc}
   b4264:	2003e5dc 	.word	0x2003e5dc
   b4268:	2003e558 	.word	0x2003e558

000b426c <_GLOBAL__sub_I_thingsboardServer>:
   b426c:	b508      	push	{r3, lr}
TCPClient pubsub;
   b426e:	4905      	ldr	r1, [pc, #20]	; (b4284 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   b4270:	4608      	mov	r0, r1
   b4272:	f001 f859 	bl	b5328 <_ZN9TCPClientC1Ev>
   b4276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   b427a:	4902      	ldr	r1, [pc, #8]	; (b4284 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   b427c:	4802      	ldr	r0, [pc, #8]	; (b4288 <_GLOBAL__sub_I_thingsboardServer+0x1c>)
   b427e:	f000 b815 	b.w	b42ac <_ZN12PubSubClientC1ER6Client>
   b4282:	bf00      	nop
   b4284:	2003e69c 	.word	0x2003e69c
   b4288:	2003e5dc 	.word	0x2003e5dc

000b428c <_ZN9IPAddressC1ERKS_>:

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b428c:	b570      	push	{r4, r5, r6, lr}
   b428e:	4604      	mov	r4, r0
   b4290:	4b05      	ldr	r3, [pc, #20]	; (b42a8 <_ZN9IPAddressC1ERKS_+0x1c>)
   b4292:	f844 3b04 	str.w	r3, [r4], #4
   b4296:	1d0d      	adds	r5, r1, #4
   b4298:	4606      	mov	r6, r0
   b429a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b429c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b429e:	682b      	ldr	r3, [r5, #0]
   b42a0:	7023      	strb	r3, [r4, #0]
   b42a2:	4630      	mov	r0, r6
   b42a4:	bd70      	pop	{r4, r5, r6, pc}
   b42a6:	bf00      	nop
   b42a8:	000b6ae8 	.word	0x000b6ae8

000b42ac <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   b42ac:	b538      	push	{r3, r4, r5, lr}
   b42ae:	4604      	mov	r4, r0
   b42b0:	3098      	adds	r0, #152	; 0x98
   b42b2:	460d      	mov	r5, r1
   b42b4:	f001 f9ba 	bl	b562c <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   b42b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b42bc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   b42c0:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   b42c2:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   b42c4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   b42c8:	4620      	mov	r0, r4
   b42ca:	bd38      	pop	{r3, r4, r5, pc}

000b42cc <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   b42cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b42d0:	4605      	mov	r5, r0
   b42d2:	460e      	mov	r6, r1
   b42d4:	f000 fb58 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b42d8:	f643 2897 	movw	r8, #14999	; 0x3a97
   b42dc:	4607      	mov	r7, r0
   while(!_client->available()) {
   b42de:	6828      	ldr	r0, [r5, #0]
   b42e0:	6803      	ldr	r3, [r0, #0]
   b42e2:	691b      	ldr	r3, [r3, #16]
   b42e4:	4798      	blx	r3
   b42e6:	4604      	mov	r4, r0
   b42e8:	b930      	cbnz	r0, b42f8 <_ZN12PubSubClient8readByteEPh+0x2c>
   b42ea:	f000 fb4d 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b42ee:	1bc3      	subs	r3, r0, r7
   b42f0:	4543      	cmp	r3, r8
   b42f2:	d9f4      	bls.n	b42de <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   b42f4:	4620      	mov	r0, r4
   b42f6:	e005      	b.n	b4304 <_ZN12PubSubClient8readByteEPh+0x38>
   b42f8:	6828      	ldr	r0, [r5, #0]
   *result = _client->read();
   b42fa:	6803      	ldr	r3, [r0, #0]
   b42fc:	695b      	ldr	r3, [r3, #20]
   b42fe:	4798      	blx	r3
   b4300:	7030      	strb	r0, [r6, #0]
   b4302:	2001      	movs	r0, #1
}
   b4304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4308 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b4308:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   b430a:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   b430c:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b430e:	4614      	mov	r4, r2
  if(readByte(write_address)){
   b4310:	f7ff ffdc 	bl	b42cc <_ZN12PubSubClient8readByteEPh>
   b4314:	b108      	cbz	r0, b431a <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   b4316:	3501      	adds	r5, #1
   b4318:	8025      	strh	r5, [r4, #0]
}
   b431a:	bd38      	pop	{r3, r4, r5, pc}

000b431c <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b431c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   b4320:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b4322:	4688      	mov	r8, r1
    uint16_t len = 0;
   b4324:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   b4326:	f10d 0206 	add.w	r2, sp, #6
   b432a:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b432c:	4604      	mov	r4, r0
    uint16_t len = 0;
   b432e:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   b4332:	f7ff ffe9 	bl	b4308 <_ZN12PubSubClient8readByteEPhPt>
   b4336:	b918      	cbnz	r0, b4340 <_ZN12PubSubClient10readPacketEPh+0x24>
   b4338:	2000      	movs	r0, #0
}
   b433a:	b003      	add	sp, #12
   b433c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4340:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   b4344:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   b4348:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   b434a:	f10d 0105 	add.w	r1, sp, #5
   b434e:	4620      	mov	r0, r4
   b4350:	f7ff ffbc 	bl	b42cc <_ZN12PubSubClient8readByteEPh>
   b4354:	2800      	cmp	r0, #0
   b4356:	d0ef      	beq.n	b4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   b4358:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b435c:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4360:	1c53      	adds	r3, r2, #1
   b4362:	4422      	add	r2, r4
   b4364:	b29b      	uxth	r3, r3
   b4366:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   b4368:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   b436c:	fb12 f206 	smulbb	r2, r2, r6
   b4370:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   b4372:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   b4374:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   b4378:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b437a:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   b437e:	d4e4      	bmi.n	b434a <_ZN12PubSubClient10readPacketEPh+0x2e>
   b4380:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   b4384:	3b01      	subs	r3, #1
    if (isPublish) {
   b4386:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   b438a:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b438e:	d11e      	bne.n	b43ce <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   b4390:	f10d 0206 	add.w	r2, sp, #6
   b4394:	4629      	mov	r1, r5
   b4396:	4620      	mov	r0, r4
   b4398:	f7ff ffb6 	bl	b4308 <_ZN12PubSubClient8readByteEPhPt>
   b439c:	2800      	cmp	r0, #0
   b439e:	d0cb      	beq.n	b4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   b43a0:	f10d 0206 	add.w	r2, sp, #6
   b43a4:	4629      	mov	r1, r5
   b43a6:	4620      	mov	r0, r4
   b43a8:	f7ff ffae 	bl	b4308 <_ZN12PubSubClient8readByteEPhPt>
   b43ac:	2800      	cmp	r0, #0
   b43ae:	d0c3      	beq.n	b4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b43b0:	f898 3000 	ldrb.w	r3, [r8]
   b43b4:	4423      	add	r3, r4
   b43b6:	795a      	ldrb	r2, [r3, #5]
   b43b8:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   b43ba:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b43bc:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   b43c0:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b43c2:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   b43c4:	d501      	bpl.n	b43ca <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   b43c6:	3602      	adds	r6, #2
   b43c8:	b2b6      	uxth	r6, r6
        start = 2;
   b43ca:	2502      	movs	r5, #2
   b43cc:	e001      	b.n	b43d2 <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   b43ce:	2500      	movs	r5, #0
    uint16_t skip = 0;
   b43d0:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   b43d2:	b2ad      	uxth	r5, r5
   b43d4:	42bd      	cmp	r5, r7
   b43d6:	d226      	bcs.n	b4426 <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   b43d8:	f10d 0105 	add.w	r1, sp, #5
   b43dc:	4620      	mov	r0, r4
   b43de:	f7ff ff75 	bl	b42cc <_ZN12PubSubClient8readByteEPh>
   b43e2:	2800      	cmp	r0, #0
   b43e4:	d0a8      	beq.n	b4338 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   b43e6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b43ea:	b178      	cbz	r0, b440c <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   b43ec:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   b43f0:	d10c      	bne.n	b440c <_ZN12PubSubClient10readPacketEPh+0xf0>
   b43f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b43f6:	f898 2000 	ldrb.w	r2, [r8]
   b43fa:	1a9b      	subs	r3, r3, r2
   b43fc:	3b02      	subs	r3, #2
   b43fe:	42b3      	cmp	r3, r6
   b4400:	dd04      	ble.n	b440c <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   b4402:	6803      	ldr	r3, [r0, #0]
   b4404:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4408:	689b      	ldr	r3, [r3, #8]
   b440a:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   b440c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4410:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   b4412:	bf9e      	ittt	ls
   b4414:	18e2      	addls	r2, r4, r3
   b4416:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   b441a:	7111      	strbls	r1, [r2, #4]
        len++;
   b441c:	3301      	adds	r3, #1
   b441e:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   b4422:	3501      	adds	r5, #1
   b4424:	e7d5      	b.n	b43d2 <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   b4426:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b442a:	b92b      	cbnz	r3, b4438 <_ZN12PubSubClient10readPacketEPh+0x11c>
   b442c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b4430:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   b4432:	bf88      	it	hi
   b4434:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   b4438:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b443c:	e77d      	b.n	b433a <_ZN12PubSubClient10readPacketEPh+0x1e>

000b443e <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b443e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4442:	4615      	mov	r5, r2
   b4444:	461e      	mov	r6, r3
    uint16_t len = length;
   b4446:	461a      	mov	r2, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4448:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b444a:	2300      	movs	r3, #0
        digit = len % 128;
   b444c:	4696      	mov	lr, r2
        lenBuf[pos++] = digit;
   b444e:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4450:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4454:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4458:	f103 0401 	add.w	r4, r3, #1
   b445c:	4403      	add	r3, r0
            digit |= 0x80;
   b445e:	bf88      	it	hi
   b4460:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
    } while(len>0);
   b4464:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4468:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b446c:	b2e4      	uxtb	r4, r4
   b446e:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len>0);
   b4472:	d820      	bhi.n	b44b6 <_ZN12PubSubClient5writeEhPht+0x78>
    buf[4-llen] = header;
   b4474:	f1c4 0304 	rsb	r3, r4, #4
        buf[5-llen+i] = lenBuf[i];
   b4478:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b447c:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b447e:	4622      	mov	r2, r4
   b4480:	a901      	add	r1, sp, #4
   b4482:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4484:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4488:	f002 f8e0 	bl	b664c <memcpy>
    rc = _client->write(buf+(4-llen),length+1+llen);
   b448c:	6838      	ldr	r0, [r7, #0]
   b448e:	6803      	ldr	r3, [r0, #0]
   b4490:	1c72      	adds	r2, r6, #1
   b4492:	4422      	add	r2, r4
   b4494:	68db      	ldr	r3, [r3, #12]
   b4496:	4641      	mov	r1, r8
   b4498:	4798      	blx	r3
   b449a:	4605      	mov	r5, r0
   b449c:	f000 fa74 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   b44a0:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b44a2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   b44a6:	4432      	add	r2, r6
   b44a8:	b2a8      	uxth	r0, r5
}
   b44aa:	1a13      	subs	r3, r2, r0
   b44ac:	4258      	negs	r0, r3
   b44ae:	4158      	adcs	r0, r3
   b44b0:	b002      	add	sp, #8
   b44b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b44b6:	4623      	mov	r3, r4
   b44b8:	e7c8      	b.n	b444c <_ZN12PubSubClient5writeEhPht+0xe>

000b44ba <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   b44ba:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b44bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    while (*idp) {
   b44be:	3901      	subs	r1, #1
    pos += 2;
   b44c0:	b29c      	uxth	r4, r3
   b44c2:	2300      	movs	r3, #0
    while (*idp) {
   b44c4:	1c5e      	adds	r6, r3, #1
   b44c6:	fa14 f083 	uxtah	r0, r4, r3
   b44ca:	5d8f      	ldrb	r7, [r1, r6]
   b44cc:	b29d      	uxth	r5, r3
   b44ce:	b280      	uxth	r0, r0
   b44d0:	b117      	cbz	r7, b44d8 <_ZN12PubSubClient11writeStringEPKcPht+0x1e>
        buf[pos++] = *idp++;
   b44d2:	5417      	strb	r7, [r2, r0]
    while (*idp) {
   b44d4:	4633      	mov	r3, r6
   b44d6:	e7f5      	b.n	b44c4 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   b44d8:	b299      	uxth	r1, r3
   b44da:	1a41      	subs	r1, r0, r1
   b44dc:	440a      	add	r2, r1
   b44de:	0a29      	lsrs	r1, r5, #8
   b44e0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b44e4:	f802 3c01 	strb.w	r3, [r2, #-1]
}
   b44e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b44ea <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   b44ea:	b538      	push	{r3, r4, r5, lr}
   b44ec:	4604      	mov	r4, r0
    if (_client == NULL ) {
   b44ee:	6800      	ldr	r0, [r0, #0]
   b44f0:	b908      	cbnz	r0, b44f6 <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   b44f2:	2000      	movs	r0, #0
}
   b44f4:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   b44f6:	6803      	ldr	r3, [r0, #0]
   b44f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b44fa:	4798      	blx	r3
        if (!rc) {
   b44fc:	b980      	cbnz	r0, b4520 <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   b44fe:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   b4502:	2d00      	cmp	r5, #0
   b4504:	d1f5      	bne.n	b44f2 <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   b4506:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   b4508:	f06f 0302 	mvn.w	r3, #2
   b450c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   b4510:	6803      	ldr	r3, [r0, #0]
   b4512:	69db      	ldr	r3, [r3, #28]
   b4514:	4798      	blx	r3
                _client->stop();
   b4516:	6820      	ldr	r0, [r4, #0]
   b4518:	6803      	ldr	r3, [r0, #0]
   b451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b451c:	4798      	blx	r3
   b451e:	e7e8      	b.n	b44f2 <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   b4520:	2001      	movs	r0, #1
   b4522:	e7e7      	b.n	b44f4 <_ZN12PubSubClient9connectedEv+0xa>

000b4524 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   b4524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4528:	b08b      	sub	sp, #44	; 0x2c
   b452a:	4604      	mov	r4, r0
   b452c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   b4530:	4689      	mov	r9, r1
   b4532:	4617      	mov	r7, r2
   b4534:	461e      	mov	r6, r3
    if (!connected()) {
   b4536:	f7ff ffd8 	bl	b44ea <_ZN12PubSubClient9connectedEv>
   b453a:	4605      	mov	r5, r0
   b453c:	2800      	cmp	r0, #0
   b453e:	f040 80a5 	bne.w	b468c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->domain, this->port);
   b4542:	f8d4 a000 	ldr.w	sl, [r4]
        if (domain != NULL) {
   b4546:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
            result = _client->connect(this->domain, this->port);
   b454a:	f8da 3000 	ldr.w	r3, [sl]
        if (domain != NULL) {
   b454e:	2900      	cmp	r1, #0
   b4550:	d079      	beq.n	b4646 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x122>
            result = _client->connect(this->domain, this->port);
   b4552:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b4556:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b455a:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   b455c:	4650      	mov	r0, sl
   b455e:	47d8      	blx	fp
        if (result == 1) {
   b4560:	2801      	cmp	r0, #1
   b4562:	f040 809a 	bne.w	b469a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x176>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4566:	4b4f      	ldr	r3, [pc, #316]	; (b46a4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x180>)
            nextMsgId = 1;
   b4568:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b456c:	889a      	ldrh	r2, [r3, #4]
   b456e:	f8ad 2014 	strh.w	r2, [sp, #20]
   b4572:	6818      	ldr	r0, [r3, #0]
                buffer[length++] = d[j];
   b4574:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4578:	799b      	ldrb	r3, [r3, #6]
   b457a:	9004      	str	r0, [sp, #16]
   b457c:	f88d 3016 	strb.w	r3, [sp, #22]
                buffer[length++] = d[j];
   b4580:	f8c4 0009 	str.w	r0, [r4, #9]
   b4584:	f8a4 200d 	strh.w	r2, [r4, #13]
   b4588:	73e3      	strb	r3, [r4, #15]
            if (willTopic) {
   b458a:	f1b8 0f00 	cmp.w	r8, #0
   b458e:	d066      	beq.n	b465e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13a>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4590:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b4594:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b4598:	015b      	lsls	r3, r3, #5
   b459a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   b459e:	f043 0306 	orr.w	r3, r3, #6
   b45a2:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   b45a4:	b11f      	cbz	r7, b45ae <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
                if(pass != NULL) {
   b45a6:	2e00      	cmp	r6, #0
   b45a8:	d15b      	bne.n	b4662 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13e>
                v = v|0x80;
   b45aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   b45ae:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   b45b0:	2300      	movs	r3, #0
   b45b2:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b45b4:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   b45b6:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b45b8:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   b45ba:	4649      	mov	r1, r9
   b45bc:	4620      	mov	r0, r4
   b45be:	9201      	str	r2, [sp, #4]
   b45c0:	f7ff ff7b 	bl	b44ba <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   b45c4:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   b45c6:	4603      	mov	r3, r0
            if (willTopic) {
   b45c8:	f1b8 0f00 	cmp.w	r8, #0
   b45cc:	d00b      	beq.n	b45e6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xc2>
                length = writeString(willTopic,buffer,length);
   b45ce:	4641      	mov	r1, r8
   b45d0:	4620      	mov	r0, r4
   b45d2:	f7ff ff72 	bl	b44ba <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   b45d6:	9a01      	ldr	r2, [sp, #4]
   b45d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   b45da:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   b45dc:	4620      	mov	r0, r4
   b45de:	f7ff ff6c 	bl	b44ba <_ZN12PubSubClient11writeStringEPKcPht>
   b45e2:	9a01      	ldr	r2, [sp, #4]
   b45e4:	4603      	mov	r3, r0
            if(user != NULL) {
   b45e6:	b16f      	cbz	r7, b4604 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                length = writeString(user,buffer,length);
   b45e8:	4639      	mov	r1, r7
   b45ea:	4620      	mov	r0, r4
   b45ec:	9201      	str	r2, [sp, #4]
   b45ee:	f7ff ff64 	bl	b44ba <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   b45f2:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   b45f4:	4603      	mov	r3, r0
                if(pass != NULL) {
   b45f6:	b12e      	cbz	r6, b4604 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                    length = writeString(pass,buffer,length);
   b45f8:	4631      	mov	r1, r6
   b45fa:	4620      	mov	r0, r4
   b45fc:	f7ff ff5d 	bl	b44ba <_ZN12PubSubClient11writeStringEPKcPht>
   b4600:	9a01      	ldr	r2, [sp, #4]
   b4602:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   b4604:	3b05      	subs	r3, #5
   b4606:	b29b      	uxth	r3, r3
   b4608:	2110      	movs	r1, #16
   b460a:	4620      	mov	r0, r4
   b460c:	f7ff ff17 	bl	b443e <_ZN12PubSubClient5writeEhPht>
   b4610:	f000 f9ba 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4614:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b4618:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   b461c:	6820      	ldr	r0, [r4, #0]
   b461e:	6803      	ldr	r3, [r0, #0]
   b4620:	691b      	ldr	r3, [r3, #16]
   b4622:	4798      	blx	r3
   b4624:	bb00      	cbnz	r0, b4668 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x144>
   b4626:	f000 f9af 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b462a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b462e:	1ac0      	subs	r0, r0, r3
   b4630:	42b0      	cmp	r0, r6
   b4632:	d9f3      	bls.n	b461c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xf8>
                    _state = MQTT_CONNECTION_TIMEOUT;
   b4634:	f06f 0303 	mvn.w	r3, #3
   b4638:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   b463c:	6820      	ldr	r0, [r4, #0]
   b463e:	6803      	ldr	r3, [r0, #0]
   b4640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4642:	4798      	blx	r3
   b4644:	e022      	b.n	b468c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->ip, this->port);
   b4646:	f104 0198 	add.w	r1, r4, #152	; 0x98
   b464a:	a804      	add	r0, sp, #16
   b464c:	f8d3 b020 	ldr.w	fp, [r3, #32]
   b4650:	f7ff fe1c 	bl	b428c <_ZN9IPAddressC1ERKS_>
   b4654:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b4658:	462b      	mov	r3, r5
   b465a:	a904      	add	r1, sp, #16
   b465c:	e77e      	b.n	b455c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   b465e:	2302      	movs	r3, #2
   b4660:	e7a0      	b.n	b45a4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x80>
                    v = v|(0x80>>1);
   b4662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   b4666:	e7a2      	b.n	b45ae <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
            uint16_t len = readPacket(&llen);
   b4668:	f10d 010f 	add.w	r1, sp, #15
   b466c:	4620      	mov	r0, r4
   b466e:	f7ff fe55 	bl	b431c <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   b4672:	2804      	cmp	r0, #4
   b4674:	d1e2      	bne.n	b463c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
                if (buffer[3] == 0) {
   b4676:	79e6      	ldrb	r6, [r4, #7]
   b4678:	b966      	cbnz	r6, b4694 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   b467a:	f000 f985 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b467e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4680:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   b4684:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   b4688:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   b468c:	4628      	mov	r0, r5
   b468e:	b00b      	add	sp, #44	; 0x2c
   b4690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   b4694:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   b4698:	e7d0      	b.n	b463c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
            _state = MQTT_CONNECT_FAILED;
   b469a:	f06f 0301 	mvn.w	r3, #1
   b469e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   b46a2:	e7f3      	b.n	b468c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
   b46a4:	000b694e 	.word	0x000b694e

000b46a8 <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   b46a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   b46aa:	2400      	movs	r4, #0
   b46ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b46b0:	e9cd 4400 	strd	r4, r4, [sp]
   b46b4:	f7ff ff36 	bl	b4524 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   b46b8:	b004      	add	sp, #16
   b46ba:	bd10      	pop	{r4, pc}

000b46bc <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   b46bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b46c0:	4604      	mov	r4, r0
   b46c2:	f89d 7020 	ldrb.w	r7, [sp, #32]
   b46c6:	4688      	mov	r8, r1
   b46c8:	4616      	mov	r6, r2
   b46ca:	461d      	mov	r5, r3
    if (connected()) {
   b46cc:	f7ff ff0d 	bl	b44ea <_ZN12PubSubClient9connectedEv>
   b46d0:	b338      	cbz	r0, b4722 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   b46d2:	4640      	mov	r0, r8
   b46d4:	f002 f846 	bl	b6764 <strlen>
   b46d8:	1deb      	adds	r3, r5, #7
   b46da:	4418      	add	r0, r3
   b46dc:	2880      	cmp	r0, #128	; 0x80
   b46de:	d820      	bhi.n	b4722 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   b46e0:	1d22      	adds	r2, r4, #4
   b46e2:	2305      	movs	r3, #5
   b46e4:	4641      	mov	r1, r8
   b46e6:	4620      	mov	r0, r4
   b46e8:	9201      	str	r2, [sp, #4]
   b46ea:	f7ff fee6 	bl	b44ba <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   b46ee:	9a01      	ldr	r2, [sp, #4]
   b46f0:	2300      	movs	r3, #0
   b46f2:	18c1      	adds	r1, r0, r3
   b46f4:	429d      	cmp	r5, r3
   b46f6:	b289      	uxth	r1, r1
   b46f8:	d907      	bls.n	b470a <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   b46fa:	4421      	add	r1, r4
   b46fc:	f816 c003 	ldrb.w	ip, [r6, r3]
   b4700:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   b4704:	3301      	adds	r3, #1
   b4706:	b29b      	uxth	r3, r3
   b4708:	e7f3      	b.n	b46f2 <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   b470a:	1f4b      	subs	r3, r1, #5
            header |= 1;
   b470c:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   b470e:	b29b      	uxth	r3, r3
   b4710:	bf0c      	ite	eq
   b4712:	2130      	moveq	r1, #48	; 0x30
   b4714:	2131      	movne	r1, #49	; 0x31
   b4716:	4620      	mov	r0, r4
}
   b4718:	b002      	add	sp, #8
   b471a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   b471e:	f7ff be8e 	b.w	b443e <_ZN12PubSubClient5writeEhPht>
}
   b4722:	2000      	movs	r0, #0
   b4724:	b002      	add	sp, #8
   b4726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b472a <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b472a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b472c:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b472e:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b4730:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b4732:	9202      	str	r2, [sp, #8]
   b4734:	f002 f816 	bl	b6764 <strlen>
   b4738:	4603      	mov	r3, r0
   b473a:	2000      	movs	r0, #0
   b473c:	9000      	str	r0, [sp, #0]
   b473e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b4742:	4620      	mov	r0, r4
   b4744:	f7ff ffba 	bl	b46bc <_ZN12PubSubClient7publishEPKcPKhjb>
}
   b4748:	b004      	add	sp, #16
   b474a:	bd10      	pop	{r4, pc}

000b474c <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   b474c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   b4750:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   b4754:	4770      	bx	lr
	...

000b4758 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <HAL_USB_USART_Init+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	681b      	ldr	r3, [r3, #0]
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	0003024c 	.word	0x0003024c

000b4768 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <HAL_USB_USART_Begin+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	685b      	ldr	r3, [r3, #4]
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	0003024c 	.word	0x0003024c

000b4778 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <HAL_USB_USART_Available_Data+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	691b      	ldr	r3, [r3, #16]
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	0003024c 	.word	0x0003024c

000b4788 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	695b      	ldr	r3, [r3, #20]
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	0003024c 	.word	0x0003024c

000b4798 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <HAL_USB_USART_Receive_Data+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	699b      	ldr	r3, [r3, #24]
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	0003024c 	.word	0x0003024c

000b47a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <HAL_USB_USART_Send_Data+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	69db      	ldr	r3, [r3, #28]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	0003024c 	.word	0x0003024c

000b47b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <HAL_USB_USART_Flush_Data+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	6a1b      	ldr	r3, [r3, #32]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	0003024c 	.word	0x0003024c

000b47c8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <hal_i2c_write+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	6a1b      	ldr	r3, [r3, #32]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	00030228 	.word	0x00030228

000b47d8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <hal_i2c_available+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	00030228 	.word	0x00030228

000b47e8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <hal_i2c_read+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	00030228 	.word	0x00030228

000b47f8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <hal_i2c_peek+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	00030228 	.word	0x00030228

000b4808 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <hal_i2c_flush+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030228 	.word	0x00030228

000b4818 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <hal_i2c_is_enabled+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030228 	.word	0x00030228

000b4828 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <hal_i2c_init+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030228 	.word	0x00030228

000b4838 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <hal_spi_init+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	69db      	ldr	r3, [r3, #28]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030230 	.word	0x00030230

000b4848 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <hal_spi_is_enabled+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	6a1b      	ldr	r3, [r3, #32]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	00030230 	.word	0x00030230

000b4858 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <sock_setsockopt+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	699b      	ldr	r3, [r3, #24]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	00030238 	.word	0x00030238

000b4868 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <sock_close+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	69db      	ldr	r3, [r3, #28]
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	00030238 	.word	0x00030238

000b4878 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <sock_connect+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	6a1b      	ldr	r3, [r3, #32]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	00030238 	.word	0x00030238

000b4888 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <sock_recv+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030238 	.word	0x00030238

000b4898 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <sock_send+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030238 	.word	0x00030238

000b48a8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <sock_socket+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030238 	.word	0x00030238

000b48b8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <hal_usart_write+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	68db      	ldr	r3, [r3, #12]
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	0003023c 	.word	0x0003023c

000b48c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <hal_usart_available+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	691b      	ldr	r3, [r3, #16]
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	0003023c 	.word	0x0003023c

000b48d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <hal_usart_read+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	695b      	ldr	r3, [r3, #20]
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	0003023c 	.word	0x0003023c

000b48e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <hal_usart_peek+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	699b      	ldr	r3, [r3, #24]
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	0003023c 	.word	0x0003023c

000b48f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <hal_usart_flush+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	69db      	ldr	r3, [r3, #28]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	0003023c 	.word	0x0003023c

000b4908 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <hal_usart_is_enabled+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	6a1b      	ldr	r3, [r3, #32]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	0003023c 	.word	0x0003023c

000b4918 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <hal_usart_available_data_for_write+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	0003023c 	.word	0x0003023c

000b4928 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <hal_usart_init_ex+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	0003023c 	.word	0x0003023c

000b4938 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <inet_inet_ntop+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	695b      	ldr	r3, [r3, #20]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030264 	.word	0x00030264

000b4948 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <inet_htonl+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	6a1b      	ldr	r3, [r3, #32]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030264 	.word	0x00030264

000b4958 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <inet_htons+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030264 	.word	0x00030264

000b4968 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <os_mutex_recursive_create+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030248 	.word	0x00030248

000b4978 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <HAL_RNG_GetRandomNumber+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	685b      	ldr	r3, [r3, #4]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030218 	.word	0x00030218

000b4988 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	695b      	ldr	r3, [r3, #20]
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030218 	.word	0x00030218

000b4998 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <if_index_to_name+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	695b      	ldr	r3, [r3, #20]
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	0003026c 	.word	0x0003026c

000b49a8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <HAL_Pin_Mode+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	689b      	ldr	r3, [r3, #8]
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	0003022c 	.word	0x0003022c

000b49b8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <HAL_Get_Pin_Mode+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	68db      	ldr	r3, [r3, #12]
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	0003022c 	.word	0x0003022c

000b49c8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <HAL_GPIO_Write+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	691b      	ldr	r3, [r3, #16]
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	0003022c 	.word	0x0003022c

000b49d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <netdb_freeaddrinfo+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	689b      	ldr	r3, [r3, #8]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030268 	.word	0x00030268

000b49e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <netdb_getaddrinfo+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	68db      	ldr	r3, [r3, #12]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030268 	.word	0x00030268

000b49f8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <log_message+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030260 	.word	0x00030260

000b4a08 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030244 	.word	0x00030244

000b4a18 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <network_connect+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	685b      	ldr	r3, [r3, #4]
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030240 	.word	0x00030240

000b4a28 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <network_connecting+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	689b      	ldr	r3, [r3, #8]
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	00030240 	.word	0x00030240

000b4a38 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <network_disconnect+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	68db      	ldr	r3, [r3, #12]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030240 	.word	0x00030240

000b4a48 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <network_ready+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	691b      	ldr	r3, [r3, #16]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	00030240 	.word	0x00030240

000b4a58 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <network_on+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	695b      	ldr	r3, [r3, #20]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	00030240 	.word	0x00030240

000b4a68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <network_off+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	699b      	ldr	r3, [r3, #24]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	00030240 	.word	0x00030240

000b4a78 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <network_listen+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	69db      	ldr	r3, [r3, #28]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	00030240 	.word	0x00030240

000b4a88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <network_listening+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6a1b      	ldr	r3, [r3, #32]
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	00030240 	.word	0x00030240

000b4a98 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <network_set_listen_timeout+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	00030240 	.word	0x00030240

000b4aa8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <network_get_listen_timeout+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	00030240 	.word	0x00030240

000b4ab8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <network_is_on+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	00030240 	.word	0x00030240

000b4ac8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <network_is_off+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	00030240 	.word	0x00030240

000b4ad8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <set_system_mode+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	685b      	ldr	r3, [r3, #4]
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	00030220 	.word	0x00030220

000b4ae8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <system_delay_ms+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	695b      	ldr	r3, [r3, #20]
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	00030220 	.word	0x00030220

000b4af8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b03      	ldr	r3, [pc, #12]	; (b4b08 <system_ctrl_set_app_request_handler+0x10>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b02:	9301      	str	r3, [sp, #4]
   b4b04:	bd08      	pop	{r3, pc}
   b4b06:	0000      	.short	0x0000
   b4b08:	00030220 	.word	0x00030220

000b4b0c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b03      	ldr	r3, [pc, #12]	; (b4b1c <system_ctrl_set_result+0x10>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b16:	9301      	str	r3, [sp, #4]
   b4b18:	bd08      	pop	{r3, pc}
   b4b1a:	0000      	.short	0x0000
   b4b1c:	00030220 	.word	0x00030220

000b4b20 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <malloc+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	681b      	ldr	r3, [r3, #0]
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	0003021c 	.word	0x0003021c

000b4b30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <free+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	685b      	ldr	r3, [r3, #4]
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	0003021c 	.word	0x0003021c

000b4b40 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <snprintf+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	69db      	ldr	r3, [r3, #28]
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	0003021c 	.word	0x0003021c

000b4b50 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <vsnprintf+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	0003021c 	.word	0x0003021c

000b4b60 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <__errno+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	0003021c 	.word	0x0003021c

000b4b70 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <__assert_func+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	0003021c 	.word	0x0003021c

000b4b80 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <newlib_impure_ptr_callback+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	0003021c 	.word	0x0003021c

000b4b90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4b90:	2300      	movs	r3, #0
   b4b92:	6840      	ldr	r0, [r0, #4]
   b4b94:	461a      	mov	r2, r3
   b4b96:	f7ff bf3f 	b.w	b4a18 <network_connect>

000b4b9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4b9a:	6840      	ldr	r0, [r0, #4]
   b4b9c:	2200      	movs	r2, #0
   b4b9e:	2102      	movs	r1, #2
   b4ba0:	f7ff bf4a 	b.w	b4a38 <network_disconnect>

000b4ba4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4ba4:	2200      	movs	r2, #0
   b4ba6:	6840      	ldr	r0, [r0, #4]
   b4ba8:	4611      	mov	r1, r2
   b4baa:	f7ff bf3d 	b.w	b4a28 <network_connecting>

000b4bae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4bae:	2200      	movs	r2, #0
   b4bb0:	6840      	ldr	r0, [r0, #4]
   b4bb2:	4611      	mov	r1, r2
   b4bb4:	f7ff bf48 	b.w	b4a48 <network_ready>

000b4bb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4bb8:	2300      	movs	r3, #0
   b4bba:	6840      	ldr	r0, [r0, #4]
   b4bbc:	461a      	mov	r2, r3
   b4bbe:	4619      	mov	r1, r3
   b4bc0:	f7ff bf4a 	b.w	b4a58 <network_on>

000b4bc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4bc4:	2300      	movs	r3, #0
   b4bc6:	6840      	ldr	r0, [r0, #4]
   b4bc8:	461a      	mov	r2, r3
   b4bca:	4619      	mov	r1, r3
   b4bcc:	f7ff bf4c 	b.w	b4a68 <network_off>

000b4bd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4bd0:	6840      	ldr	r0, [r0, #4]
   b4bd2:	2100      	movs	r1, #0
   b4bd4:	f7ff bf70 	b.w	b4ab8 <network_is_on>

000b4bd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4bd8:	6840      	ldr	r0, [r0, #4]
   b4bda:	2100      	movs	r1, #0
   b4bdc:	f7ff bf74 	b.w	b4ac8 <network_is_off>

000b4be0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4be0:	6840      	ldr	r0, [r0, #4]
   b4be2:	2200      	movs	r2, #0
   b4be4:	f081 0101 	eor.w	r1, r1, #1
   b4be8:	f7ff bf46 	b.w	b4a78 <network_listen>

000b4bec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4bec:	6840      	ldr	r0, [r0, #4]
   b4bee:	2200      	movs	r2, #0
   b4bf0:	f7ff bf52 	b.w	b4a98 <network_set_listen_timeout>

000b4bf4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4bf4:	2200      	movs	r2, #0
   b4bf6:	6840      	ldr	r0, [r0, #4]
   b4bf8:	4611      	mov	r1, r2
   b4bfa:	f7ff bf55 	b.w	b4aa8 <network_get_listen_timeout>

000b4bfe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4bfe:	2200      	movs	r2, #0
   b4c00:	6840      	ldr	r0, [r0, #4]
   b4c02:	4611      	mov	r1, r2
   b4c04:	f7ff bf40 	b.w	b4a88 <network_listening>

000b4c08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4c0c:	b095      	sub	sp, #84	; 0x54
   b4c0e:	4614      	mov	r4, r2
   b4c10:	460d      	mov	r5, r1
   b4c12:	4607      	mov	r7, r0
    IPAddress addr;
   b4c14:	f000 fd0a 	bl	b562c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4c18:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4c1a:	221c      	movs	r2, #28
   b4c1c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4c1e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4c20:	f001 fd22 	bl	b6668 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4c24:	2340      	movs	r3, #64	; 0x40
   b4c26:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4c28:	4620      	mov	r0, r4
   b4c2a:	466b      	mov	r3, sp
   b4c2c:	aa0c      	add	r2, sp, #48	; 0x30
   b4c2e:	2100      	movs	r1, #0
   b4c30:	f7ff feda 	bl	b49e8 <netdb_getaddrinfo>
    if (!r) {
   b4c34:	4604      	mov	r4, r0
   b4c36:	2800      	cmp	r0, #0
   b4c38:	d14b      	bne.n	b4cd2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c3a:	4602      	mov	r2, r0
   b4c3c:	2101      	movs	r1, #1
   b4c3e:	6868      	ldr	r0, [r5, #4]
   b4c40:	f7ff ff02 	bl	b4a48 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c44:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c46:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c48:	4622      	mov	r2, r4
   b4c4a:	6868      	ldr	r0, [r5, #4]
   b4c4c:	f7ff fefc 	bl	b4a48 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c50:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c52:	4681      	mov	r9, r0
        bool ok = false;
   b4c54:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c56:	2e00      	cmp	r6, #0
   b4c58:	d03b      	beq.n	b4cd2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4c5a:	2900      	cmp	r1, #0
   b4c5c:	d139      	bne.n	b4cd2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4c5e:	6873      	ldr	r3, [r6, #4]
   b4c60:	2b02      	cmp	r3, #2
   b4c62:	d003      	beq.n	b4c6c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4c64:	2b0a      	cmp	r3, #10
   b4c66:	d011      	beq.n	b4c8c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c68:	69f6      	ldr	r6, [r6, #28]
   b4c6a:	e7f4      	b.n	b4c56 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4c6c:	f1b8 0f00 	cmp.w	r8, #0
   b4c70:	d0fa      	beq.n	b4c68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4c72:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b4c74:	a806      	add	r0, sp, #24
   b4c76:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4c78:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4c7a:	f000 fd1b 	bl	b56b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c80:	1d3c      	adds	r4, r7, #4
   b4c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c84:	682b      	ldr	r3, [r5, #0]
   b4c86:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4c88:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4c8a:	e7ed      	b.n	b4c68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4c8c:	f1b9 0f00 	cmp.w	r9, #0
   b4c90:	d0ea      	beq.n	b4c68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4c92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4c94:	2210      	movs	r2, #16
   b4c96:	a801      	add	r0, sp, #4
   b4c98:	f001 fce6 	bl	b6668 <memset>
                    a.v = 6;
   b4c9c:	2306      	movs	r3, #6
   b4c9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4ca2:	ad01      	add	r5, sp, #4
   b4ca4:	f104 0308 	add.w	r3, r4, #8
   b4ca8:	3418      	adds	r4, #24
   b4caa:	6818      	ldr	r0, [r3, #0]
   b4cac:	6859      	ldr	r1, [r3, #4]
   b4cae:	462a      	mov	r2, r5
   b4cb0:	c203      	stmia	r2!, {r0, r1}
   b4cb2:	3308      	adds	r3, #8
   b4cb4:	42a3      	cmp	r3, r4
   b4cb6:	4615      	mov	r5, r2
   b4cb8:	d1f7      	bne.n	b4caa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4cba:	a901      	add	r1, sp, #4
   b4cbc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4cbe:	ad07      	add	r5, sp, #28
   b4cc0:	f000 fcc2 	bl	b5648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cc6:	1d3c      	adds	r4, r7, #4
   b4cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4cca:	682b      	ldr	r3, [r5, #0]
   b4ccc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4cce:	4649      	mov	r1, r9
   b4cd0:	e7ca      	b.n	b4c68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4cd2:	9800      	ldr	r0, [sp, #0]
   b4cd4:	f7ff fe80 	bl	b49d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4cd8:	4638      	mov	r0, r7
   b4cda:	b015      	add	sp, #84	; 0x54
   b4cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4ce0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4ce0:	4b02      	ldr	r3, [pc, #8]	; (b4cec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4ce2:	4a03      	ldr	r2, [pc, #12]	; (b4cf0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4ce4:	601a      	str	r2, [r3, #0]
   b4ce6:	2200      	movs	r2, #0
   b4ce8:	605a      	str	r2, [r3, #4]

} // spark
   b4cea:	4770      	bx	lr
   b4cec:	2003e6b8 	.word	0x2003e6b8
   b4cf0:	000b6960 	.word	0x000b6960

000b4cf4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4cf4:	2200      	movs	r2, #0
   b4cf6:	6840      	ldr	r0, [r0, #4]
   b4cf8:	4611      	mov	r1, r2
   b4cfa:	f7ff bea5 	b.w	b4a48 <network_ready>

000b4cfe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4cfe:	2200      	movs	r2, #0
   b4d00:	6840      	ldr	r0, [r0, #4]
   b4d02:	4611      	mov	r1, r2
   b4d04:	f7ff bec0 	b.w	b4a88 <network_listening>

000b4d08 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d08:	2200      	movs	r2, #0
   b4d0a:	6840      	ldr	r0, [r0, #4]
   b4d0c:	4611      	mov	r1, r2
   b4d0e:	f7ff becb 	b.w	b4aa8 <network_get_listen_timeout>

000b4d12 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d12:	6840      	ldr	r0, [r0, #4]
   b4d14:	2200      	movs	r2, #0
   b4d16:	f7ff bebf 	b.w	b4a98 <network_set_listen_timeout>

000b4d1a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d1a:	6840      	ldr	r0, [r0, #4]
   b4d1c:	2200      	movs	r2, #0
   b4d1e:	f081 0101 	eor.w	r1, r1, #1
   b4d22:	f7ff bea9 	b.w	b4a78 <network_listen>

000b4d26 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d26:	2300      	movs	r3, #0
   b4d28:	6840      	ldr	r0, [r0, #4]
   b4d2a:	461a      	mov	r2, r3
   b4d2c:	4619      	mov	r1, r3
   b4d2e:	f7ff be9b 	b.w	b4a68 <network_off>

000b4d32 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d32:	2300      	movs	r3, #0
   b4d34:	6840      	ldr	r0, [r0, #4]
   b4d36:	461a      	mov	r2, r3
   b4d38:	4619      	mov	r1, r3
   b4d3a:	f7ff be8d 	b.w	b4a58 <network_on>

000b4d3e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d3e:	2200      	movs	r2, #0
   b4d40:	6840      	ldr	r0, [r0, #4]
   b4d42:	4611      	mov	r1, r2
   b4d44:	f7ff be70 	b.w	b4a28 <network_connecting>

000b4d48 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d48:	6840      	ldr	r0, [r0, #4]
   b4d4a:	2200      	movs	r2, #0
   b4d4c:	2102      	movs	r1, #2
   b4d4e:	f7ff be73 	b.w	b4a38 <network_disconnect>

000b4d52 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d52:	2300      	movs	r3, #0
   b4d54:	6840      	ldr	r0, [r0, #4]
   b4d56:	461a      	mov	r2, r3
   b4d58:	f7ff be5e 	b.w	b4a18 <network_connect>

000b4d5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4d5c:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4d5e:	2204      	movs	r2, #4
   b4d60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4d62:	4a02      	ldr	r2, [pc, #8]	; (b4d6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4d64:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4d66:	4770      	bx	lr
   b4d68:	2003e6c0 	.word	0x2003e6c0
   b4d6c:	000b699c 	.word	0x000b699c

000b4d70 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b4d70:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b4d72:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b4d74:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b4d78:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b4d7a:	2201      	movs	r2, #1
   b4d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4d80:	f10d 0107 	add.w	r1, sp, #7
   b4d84:	47a0      	blx	r4
}
   b4d86:	b002      	add	sp, #8
   b4d88:	bd10      	pop	{r4, pc}

000b4d8a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b4d8a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b4d8c:	6803      	ldr	r3, [r0, #0]
   b4d8e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b4d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4d94:	46a4      	mov	ip, r4
}
   b4d96:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b4d9a:	4760      	bx	ip

000b4d9c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b4d9c:	b513      	push	{r0, r1, r4, lr}
   b4d9e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b4da0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b4da2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b4da6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4da8:	f10d 0107 	add.w	r1, sp, #7
   b4dac:	2201      	movs	r2, #1
   b4dae:	47a0      	blx	r4
}
   b4db0:	b002      	add	sp, #8
   b4db2:	bd10      	pop	{r4, pc}

000b4db4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b4db4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4db6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b4db8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b4dbc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b4dc0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b4dc2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b4dc4:	d008      	beq.n	b4dd8 <_ZN9TCPClient4readEv+0x24>
   b4dc6:	6963      	ldr	r3, [r4, #20]
   b4dc8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b4dcc:	1c51      	adds	r1, r2, #1
   b4dce:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b4dd2:	4413      	add	r3, r2
   b4dd4:	7918      	ldrb	r0, [r3, #4]
}
   b4dd6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b4dd8:	6803      	ldr	r3, [r0, #0]
   b4dda:	691b      	ldr	r3, [r3, #16]
   b4ddc:	4798      	blx	r3
   b4dde:	2800      	cmp	r0, #0
   b4de0:	d1f1      	bne.n	b4dc6 <_ZN9TCPClient4readEv+0x12>
   b4de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4de6:	e7f6      	b.n	b4dd6 <_ZN9TCPClient4readEv+0x22>

000b4de8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b4de8:	4770      	bx	lr

000b4dea <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b4dea:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b4dec:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b4dee:	43c0      	mvns	r0, r0
   b4df0:	0fc0      	lsrs	r0, r0, #31
   b4df2:	4770      	bx	lr

000b4df4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4df4:	4770      	bx	lr
	...

000b4df8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4df8:	4b06      	ldr	r3, [pc, #24]	; (b4e14 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4dfa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4dfc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4dfe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4e02:	d005      	beq.n	b4e10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4e04:	4608      	mov	r0, r1
   b4e06:	f000 feeb 	bl	b5be0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4e0a:	2800      	cmp	r0, #0
   b4e0c:	bf08      	it	eq
   b4e0e:	2400      	moveq	r4, #0
      }
   b4e10:	4620      	mov	r0, r4
   b4e12:	bd10      	pop	{r4, pc}
   b4e14:	000b6a04 	.word	0x000b6a04

000b4e18 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4e18:	b510      	push	{r4, lr}
   b4e1a:	21ac      	movs	r1, #172	; 0xac
   b4e1c:	4604      	mov	r4, r0
   b4e1e:	f7ff f93c 	bl	b409a <_ZdlPvj>
   b4e22:	4620      	mov	r0, r4
   b4e24:	bd10      	pop	{r4, pc}

000b4e26 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4e26:	21ac      	movs	r1, #172	; 0xac
   b4e28:	f7ff b937 	b.w	b409a <_ZdlPvj>

000b4e2c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b4e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b4e30:	f04f 0800 	mov.w	r8, #0
   b4e34:	b086      	sub	sp, #24
   b4e36:	461c      	mov	r4, r3
   b4e38:	f8c0 8004 	str.w	r8, [r0, #4]
   b4e3c:	4605      	mov	r5, r0
   b4e3e:	460e      	mov	r6, r1
   b4e40:	4617      	mov	r7, r2
    struct timeval tv = {};
   b4e42:	4641      	mov	r1, r8
   b4e44:	2210      	movs	r2, #16
   b4e46:	a802      	add	r0, sp, #8
   b4e48:	f001 fc0e 	bl	b6668 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b4e4c:	1c63      	adds	r3, r4, #1
   b4e4e:	d009      	beq.n	b4e64 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b4e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e54:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b4e58:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b4e5c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b4e60:	435c      	muls	r4, r3
   b4e62:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b4e64:	6968      	ldr	r0, [r5, #20]
   b4e66:	2310      	movs	r3, #16
   b4e68:	9300      	str	r3, [sp, #0]
   b4e6a:	6800      	ldr	r0, [r0, #0]
   b4e6c:	ab02      	add	r3, sp, #8
   b4e6e:	f241 0205 	movw	r2, #4101	; 0x1005
   b4e72:	f640 71ff 	movw	r1, #4095	; 0xfff
   b4e76:	f7ff fcef 	bl	b4858 <sock_setsockopt>
    if (ret < 0) {
   b4e7a:	2800      	cmp	r0, #0
   b4e7c:	da07      	bge.n	b4e8e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b4e7e:	f7ff fe6f 	bl	b4b60 <__errno>
   b4e82:	6803      	ldr	r3, [r0, #0]
   b4e84:	606b      	str	r3, [r5, #4]
        return 0;
   b4e86:	2000      	movs	r0, #0
}
   b4e88:	b006      	add	sp, #24
   b4e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b4e8e:	6968      	ldr	r0, [r5, #20]
   b4e90:	2300      	movs	r3, #0
   b4e92:	6800      	ldr	r0, [r0, #0]
   b4e94:	463a      	mov	r2, r7
   b4e96:	4631      	mov	r1, r6
   b4e98:	f7ff fcfe 	bl	b4898 <sock_send>
    if (ret < 0) {
   b4e9c:	1e03      	subs	r3, r0, #0
   b4e9e:	dbee      	blt.n	b4e7e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b4ea0:	4618      	mov	r0, r3
   b4ea2:	e7f1      	b.n	b4e88 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b4ea4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4ea4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4ea6:	6984      	ldr	r4, [r0, #24]
   b4ea8:	4b0a      	ldr	r3, [pc, #40]	; (b4ed4 <_ZN9TCPClientD1Ev+0x30>)
   b4eaa:	6003      	str	r3, [r0, #0]
   b4eac:	4605      	mov	r5, r0
   b4eae:	b17c      	cbz	r4, b4ed0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4eb0:	6863      	ldr	r3, [r4, #4]
   b4eb2:	3b01      	subs	r3, #1
   b4eb4:	6063      	str	r3, [r4, #4]
   b4eb6:	b95b      	cbnz	r3, b4ed0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4eb8:	6823      	ldr	r3, [r4, #0]
   b4eba:	4620      	mov	r0, r4
   b4ebc:	689b      	ldr	r3, [r3, #8]
   b4ebe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ec0:	68a3      	ldr	r3, [r4, #8]
   b4ec2:	3b01      	subs	r3, #1
   b4ec4:	60a3      	str	r3, [r4, #8]
   b4ec6:	b91b      	cbnz	r3, b4ed0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4ec8:	6823      	ldr	r3, [r4, #0]
   b4eca:	4620      	mov	r0, r4
   b4ecc:	68db      	ldr	r3, [r3, #12]
   b4ece:	4798      	blx	r3
   b4ed0:	4628      	mov	r0, r5
   b4ed2:	bd38      	pop	{r3, r4, r5, pc}
   b4ed4:	000b6a14 	.word	0x000b6a14

000b4ed8 <_ZN9TCPClientD0Ev>:
   b4ed8:	b510      	push	{r4, lr}
   b4eda:	4604      	mov	r4, r0
   b4edc:	f7ff ffe2 	bl	b4ea4 <_ZN9TCPClientD1Ev>
   b4ee0:	4620      	mov	r0, r4
   b4ee2:	211c      	movs	r1, #28
   b4ee4:	f7ff f8d9 	bl	b409a <_ZdlPvj>
   b4ee8:	4620      	mov	r0, r4
   b4eea:	bd10      	pop	{r4, pc}

000b4eec <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b4eec:	b530      	push	{r4, r5, lr}
   b4eee:	b087      	sub	sp, #28
   b4ef0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b4ef2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b4ef4:	4668      	mov	r0, sp
   b4ef6:	f000 fbdd 	bl	b56b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4efc:	3404      	adds	r4, #4
   b4efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f00:	682b      	ldr	r3, [r5, #0]
   b4f02:	7023      	strb	r3, [r4, #0]
    }
   b4f04:	b007      	add	sp, #28
   b4f06:	bd30      	pop	{r4, r5, pc}

000b4f08 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b4f08:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b4f0a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b4f0c:	4b05      	ldr	r3, [pc, #20]	; (b4f24 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b4f0e:	4604      	mov	r4, r0
   b4f10:	358c      	adds	r5, #140	; 0x8c
   b4f12:	f844 3b04 	str.w	r3, [r4], #4
   b4f16:	4606      	mov	r6, r0
   b4f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f1c:	682b      	ldr	r3, [r5, #0]
   b4f1e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b4f20:	4630      	mov	r0, r6
   b4f22:	bd70      	pop	{r4, r5, r6, pc}
   b4f24:	000b6ae8 	.word	0x000b6ae8

000b4f28 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b4f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f2c:	4698      	mov	r8, r3
    stop();
   b4f2e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b4f30:	b093      	sub	sp, #76	; 0x4c
   b4f32:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b4f34:	2400      	movs	r4, #0
    stop();
   b4f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b4f38:	4606      	mov	r6, r0
   b4f3a:	4617      	mov	r7, r2
    stop();
   b4f3c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b4f3e:	4628      	mov	r0, r5
   b4f40:	466b      	mov	r3, sp
   b4f42:	4622      	mov	r2, r4
   b4f44:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b4f46:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b4f48:	f7ff fd4e 	bl	b49e8 <netdb_getaddrinfo>
   b4f4c:	4605      	mov	r5, r0
   b4f4e:	2800      	cmp	r0, #0
   b4f50:	d163      	bne.n	b501a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b4f52:	9b00      	ldr	r3, [sp, #0]
   b4f54:	2b00      	cmp	r3, #0
   b4f56:	d04b      	beq.n	b4ff0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b4f58:	695b      	ldr	r3, [r3, #20]
   b4f5a:	2b00      	cmp	r3, #0
   b4f5c:	d048      	beq.n	b4ff0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b4f5e:	a806      	add	r0, sp, #24
   b4f60:	f000 fb64 	bl	b562c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b4f64:	9b00      	ldr	r3, [sp, #0]
   b4f66:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b4f68:	7863      	ldrb	r3, [r4, #1]
   b4f6a:	2b02      	cmp	r3, #2
   b4f6c:	d104      	bne.n	b4f78 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b4f6e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b4f70:	a806      	add	r0, sp, #24
   b4f72:	f7ff ffbb 	bl	b4eec <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b4f76:	e026      	b.n	b4fc6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b4f78:	2b0a      	cmp	r3, #10
   b4f7a:	d124      	bne.n	b4fc6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b4f7c:	2211      	movs	r2, #17
   b4f7e:	4629      	mov	r1, r5
   b4f80:	a801      	add	r0, sp, #4
   b4f82:	f001 fb71 	bl	b6668 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b4f86:	68a3      	ldr	r3, [r4, #8]
   b4f88:	2b00      	cmp	r3, #0
   b4f8a:	d038      	beq.n	b4ffe <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4f8c:	f104 0308 	add.w	r3, r4, #8
   b4f90:	f10d 0c04 	add.w	ip, sp, #4
   b4f94:	3418      	adds	r4, #24
   b4f96:	6818      	ldr	r0, [r3, #0]
   b4f98:	6859      	ldr	r1, [r3, #4]
   b4f9a:	4662      	mov	r2, ip
   b4f9c:	c203      	stmia	r2!, {r0, r1}
   b4f9e:	3308      	adds	r3, #8
   b4fa0:	42a3      	cmp	r3, r4
   b4fa2:	4694      	mov	ip, r2
   b4fa4:	d1f7      	bne.n	b4f96 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b4fa6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b4fa8:	a901      	add	r1, sp, #4
   b4faa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b4fac:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b4fb0:	f000 fb4a 	bl	b5648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4fb4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b4fb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4fbc:	ac07      	add	r4, sp, #28
   b4fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4fc0:	f8dc 3000 	ldr.w	r3, [ip]
   b4fc4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b4fc6:	a806      	add	r0, sp, #24
   b4fc8:	f000 fb50 	bl	b566c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b4fcc:	b180      	cbz	r0, b4ff0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b4fce:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b4fd0:	ad07      	add	r5, sp, #28
   b4fd2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b4fd6:	4b12      	ldr	r3, [pc, #72]	; (b5020 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b4fd8:	930c      	str	r3, [sp, #48]	; 0x30
   b4fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4fdc:	ac0d      	add	r4, sp, #52	; 0x34
   b4fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4fe0:	682b      	ldr	r3, [r5, #0]
   b4fe2:	7023      	strb	r3, [r4, #0]
   b4fe4:	463a      	mov	r2, r7
   b4fe6:	4643      	mov	r3, r8
   b4fe8:	a90c      	add	r1, sp, #48	; 0x30
   b4fea:	4630      	mov	r0, r6
   b4fec:	47c8      	blx	r9
   b4fee:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b4ff0:	9800      	ldr	r0, [sp, #0]
   b4ff2:	f7ff fcf1 	bl	b49d8 <netdb_freeaddrinfo>
}
   b4ff6:	4628      	mov	r0, r5
   b4ff8:	b013      	add	sp, #76	; 0x4c
   b4ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b4ffe:	68e3      	ldr	r3, [r4, #12]
   b5000:	2b00      	cmp	r3, #0
   b5002:	d1c3      	bne.n	b4f8c <_ZN9TCPClient7connectEPKctm+0x64>
   b5004:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5008:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b500c:	f7ff fc9c 	bl	b4948 <inet_htonl>
   b5010:	4581      	cmp	r9, r0
   b5012:	d1bb      	bne.n	b4f8c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5014:	f104 0114 	add.w	r1, r4, #20
   b5018:	e7aa      	b.n	b4f70 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b501a:	4625      	mov	r5, r4
   b501c:	e7e8      	b.n	b4ff0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b501e:	bf00      	nop
   b5020:	000b6ae8 	.word	0x000b6ae8

000b5024 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5024:	b538      	push	{r3, r4, r5, lr}
   b5026:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5028:	681a      	ldr	r2, [r3, #0]
   b502a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b502c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b502e:	da10      	bge.n	b5052 <_ZN9TCPClient9connectedEv+0x2e>
   b5030:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5034:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5038:	429a      	cmp	r2, r3
   b503a:	d10a      	bne.n	b5052 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b503c:	6803      	ldr	r3, [r0, #0]
   b503e:	691b      	ldr	r3, [r3, #16]
   b5040:	4798      	blx	r3
        if (!rv) {
   b5042:	4604      	mov	r4, r0
   b5044:	b928      	cbnz	r0, b5052 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5046:	682b      	ldr	r3, [r5, #0]
   b5048:	4628      	mov	r0, r5
   b504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b504c:	4798      	blx	r3
        rv = available();
   b504e:	4620      	mov	r0, r4
}
   b5050:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5052:	2001      	movs	r0, #1
   b5054:	e7fc      	b.n	b5050 <_ZN9TCPClient9connectedEv+0x2c>

000b5056 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5056:	b510      	push	{r4, lr}
   b5058:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b505a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b505e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5062:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5064:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5066:	d005      	beq.n	b5074 <_ZN9TCPClient4peekEv+0x1e>
   b5068:	6963      	ldr	r3, [r4, #20]
   b506a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b506e:	4413      	add	r3, r2
   b5070:	7918      	ldrb	r0, [r3, #4]
}
   b5072:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5074:	6803      	ldr	r3, [r0, #0]
   b5076:	691b      	ldr	r3, [r3, #16]
   b5078:	4798      	blx	r3
   b507a:	2800      	cmp	r0, #0
   b507c:	d1f4      	bne.n	b5068 <_ZN9TCPClient4peekEv+0x12>
   b507e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5082:	e7f6      	b.n	b5072 <_ZN9TCPClient4peekEv+0x1c>

000b5084 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5086:	6943      	ldr	r3, [r0, #20]
   b5088:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b508a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b508e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5092:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5094:	4605      	mov	r5, r0
   b5096:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5098:	d016      	beq.n	b50c8 <_ZN9TCPClient4readEPhj+0x44>
   b509a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b509c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b50a0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b50a4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b50a6:	42bc      	cmp	r4, r7
   b50a8:	bf28      	it	cs
   b50aa:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b50ac:	3304      	adds	r3, #4
   b50ae:	4622      	mov	r2, r4
   b50b0:	4419      	add	r1, r3
   b50b2:	4630      	mov	r0, r6
   b50b4:	f001 faca 	bl	b664c <memcpy>
   b50b8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b50ba:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b50be:	4423      	add	r3, r4
   b50c0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b50c4:	4620      	mov	r0, r4
   b50c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b50c8:	6803      	ldr	r3, [r0, #0]
   b50ca:	691b      	ldr	r3, [r3, #16]
   b50cc:	4798      	blx	r3
   b50ce:	2800      	cmp	r0, #0
   b50d0:	d1e3      	bne.n	b509a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b50d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b50d6:	e7f5      	b.n	b50c4 <_ZN9TCPClient4readEPhj+0x40>

000b50d8 <_ZN9TCPClient12flush_bufferEv>:
   b50d8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b50da:	2300      	movs	r3, #0
   b50dc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b50e0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b50e2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b50e6:	4770      	bx	lr

000b50e8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b50e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b50ec:	461f      	mov	r7, r3
    stop();
   b50ee:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b50f0:	460c      	mov	r4, r1
    stop();
   b50f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b50f4:	b08a      	sub	sp, #40	; 0x28
   b50f6:	4605      	mov	r5, r0
   b50f8:	4616      	mov	r6, r2
    stop();
   b50fa:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b50fc:	7d23      	ldrb	r3, [r4, #20]
   b50fe:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5102:	2b04      	cmp	r3, #4
   b5104:	bf0c      	ite	eq
   b5106:	2002      	moveq	r0, #2
   b5108:	200a      	movne	r0, #10
   b510a:	2206      	movs	r2, #6
   b510c:	2101      	movs	r1, #1
   b510e:	f7ff fbcb 	bl	b48a8 <sock_socket>
   b5112:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5116:	696b      	ldr	r3, [r5, #20]
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	2b00      	cmp	r3, #0
   b511c:	da08      	bge.n	b5130 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b511e:	682b      	ldr	r3, [r5, #0]
   b5120:	4628      	mov	r0, r5
   b5122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5124:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5126:	4798      	blx	r3
}
   b5128:	4620      	mov	r0, r4
   b512a:	b00a      	add	sp, #40	; 0x28
   b512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5130:	4628      	mov	r0, r5
   b5132:	f7ff ffd1 	bl	b50d8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5136:	b1b7      	cbz	r7, b5166 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5138:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b513a:	a903      	add	r1, sp, #12
   b513c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b513e:	9303      	str	r3, [sp, #12]
   b5140:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5144:	f7ff fc28 	bl	b4998 <if_index_to_name>
   b5148:	2800      	cmp	r0, #0
   b514a:	d1e8      	bne.n	b511e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b514c:	6968      	ldr	r0, [r5, #20]
   b514e:	2306      	movs	r3, #6
   b5150:	9300      	str	r3, [sp, #0]
   b5152:	6800      	ldr	r0, [r0, #0]
   b5154:	ab03      	add	r3, sp, #12
   b5156:	f241 020b 	movw	r2, #4107	; 0x100b
   b515a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b515e:	f7ff fb7b 	bl	b4858 <sock_setsockopt>
   b5162:	2800      	cmp	r0, #0
   b5164:	d1db      	bne.n	b511e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5166:	221c      	movs	r2, #28
   b5168:	2100      	movs	r1, #0
   b516a:	a803      	add	r0, sp, #12
   b516c:	f001 fa7c 	bl	b6668 <memset>
    if (ip.version() == 4) {
   b5170:	7d23      	ldrb	r3, [r4, #20]
   b5172:	2b04      	cmp	r3, #4
   b5174:	d11d      	bne.n	b51b2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5176:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b517a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b517c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5180:	f7ff fbea 	bl	b4958 <inet_htons>
   b5184:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5188:	6860      	ldr	r0, [r4, #4]
   b518a:	f7ff fbdd 	bl	b4948 <inet_htonl>
   b518e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5190:	696b      	ldr	r3, [r5, #20]
   b5192:	221c      	movs	r2, #28
   b5194:	6818      	ldr	r0, [r3, #0]
   b5196:	a903      	add	r1, sp, #12
   b5198:	f7ff fb6e 	bl	b4878 <sock_connect>
   b519c:	2800      	cmp	r0, #0
   b519e:	d1be      	bne.n	b511e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b51a0:	3404      	adds	r4, #4
   b51a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b51a4:	696d      	ldr	r5, [r5, #20]
   b51a6:	358c      	adds	r5, #140	; 0x8c
   b51a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b51aa:	6823      	ldr	r3, [r4, #0]
   b51ac:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b51ae:	2401      	movs	r4, #1
   b51b0:	e7ba      	b.n	b5128 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b51b2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b51b6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b51b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b51bc:	f7ff fbcc 	bl	b4958 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b51c0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b51c2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b51c6:	1d23      	adds	r3, r4, #4
   b51c8:	f104 0714 	add.w	r7, r4, #20
   b51cc:	6818      	ldr	r0, [r3, #0]
   b51ce:	6859      	ldr	r1, [r3, #4]
   b51d0:	4632      	mov	r2, r6
   b51d2:	c203      	stmia	r2!, {r0, r1}
   b51d4:	3308      	adds	r3, #8
   b51d6:	42bb      	cmp	r3, r7
   b51d8:	4616      	mov	r6, r2
   b51da:	d1f7      	bne.n	b51cc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b51dc:	e7d8      	b.n	b5190 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b51e0 <_ZN9TCPClient9availableEv>:
{
   b51e0:	b530      	push	{r4, r5, lr}
   b51e2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b51e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b51e8:	b08b      	sub	sp, #44	; 0x2c
   b51ea:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b51ec:	b12b      	cbz	r3, b51fa <_ZN9TCPClient9availableEv+0x1a>
   b51ee:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b51f2:	429a      	cmp	r2, r3
   b51f4:	d101      	bne.n	b51fa <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b51f6:	f7ff ff6f 	bl	b50d8 <_ZN9TCPClient12flush_bufferEv>
   b51fa:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b51fc:	6808      	ldr	r0, [r1, #0]
   b51fe:	2800      	cmp	r0, #0
   b5200:	db18      	blt.n	b5234 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5202:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5206:	2d7f      	cmp	r5, #127	; 0x7f
   b5208:	d814      	bhi.n	b5234 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b520a:	3104      	adds	r1, #4
   b520c:	2308      	movs	r3, #8
   b520e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5212:	4429      	add	r1, r5
   b5214:	f7ff fb38 	bl	b4888 <sock_recv>
            if (ret > 0) {
   b5218:	2800      	cmp	r0, #0
   b521a:	dd13      	ble.n	b5244 <_ZN9TCPClient9availableEv+0x64>
   b521c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b521e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5222:	b90a      	cbnz	r2, b5228 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5224:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5228:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b522a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b522e:	4410      	add	r0, r2
   b5230:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5234:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5236:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b523a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b523e:	1ac0      	subs	r0, r0, r3
   b5240:	b00b      	add	sp, #44	; 0x2c
   b5242:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5244:	f7ff fc8c 	bl	b4b60 <__errno>
   b5248:	6803      	ldr	r3, [r0, #0]
   b524a:	2b0b      	cmp	r3, #11
   b524c:	d0f2      	beq.n	b5234 <_ZN9TCPClient9availableEv+0x54>
   b524e:	f7ff fc87 	bl	b4b60 <__errno>
   b5252:	6803      	ldr	r3, [r0, #0]
   b5254:	2b0b      	cmp	r3, #11
   b5256:	d0ed      	beq.n	b5234 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5258:	2320      	movs	r3, #32
   b525a:	2500      	movs	r5, #0
   b525c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5260:	f7ff fc7e 	bl	b4b60 <__errno>
   b5264:	6803      	ldr	r3, [r0, #0]
   b5266:	9301      	str	r3, [sp, #4]
   b5268:	4b08      	ldr	r3, [pc, #32]	; (b528c <_ZN9TCPClient9availableEv+0xac>)
   b526a:	4909      	ldr	r1, [pc, #36]	; (b5290 <_ZN9TCPClient9availableEv+0xb0>)
   b526c:	9300      	str	r3, [sp, #0]
   b526e:	aa02      	add	r2, sp, #8
   b5270:	462b      	mov	r3, r5
   b5272:	2032      	movs	r0, #50	; 0x32
   b5274:	f7ff fbc0 	bl	b49f8 <log_message>
                    sock_close(d_->sock);
   b5278:	6963      	ldr	r3, [r4, #20]
   b527a:	6818      	ldr	r0, [r3, #0]
   b527c:	f7ff faf4 	bl	b4868 <sock_close>
   b5280:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5286:	601a      	str	r2, [r3, #0]
   b5288:	e7d4      	b.n	b5234 <_ZN9TCPClient9availableEv+0x54>
   b528a:	bf00      	nop
   b528c:	000b69d7 	.word	0x000b69d7
   b5290:	000b69d0 	.word	0x000b69d0

000b5294 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5294:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5296:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5298:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b529a:	6818      	ldr	r0, [r3, #0]
   b529c:	2800      	cmp	r0, #0
   b529e:	db01      	blt.n	b52a4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b52a0:	f7ff fae2 	bl	b4868 <sock_close>
   b52a4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b52a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b52aa:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b52ac:	6960      	ldr	r0, [r4, #20]
   b52ae:	2211      	movs	r2, #17
   b52b0:	2100      	movs	r1, #0
   b52b2:	308c      	adds	r0, #140	; 0x8c
   b52b4:	f001 f9d8 	bl	b6668 <memset>
    flush_buffer();
   b52b8:	4620      	mov	r0, r4
}
   b52ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b52be:	f7ff bf0b 	b.w	b50d8 <_ZN9TCPClient12flush_bufferEv>

000b52c2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b52c2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b52c4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b52c6:	4604      	mov	r4, r0
          total(0) {
   b52c8:	6001      	str	r1, [r0, #0]
   b52ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b52ce:	3088      	adds	r0, #136	; 0x88
   b52d0:	f000 f9ac 	bl	b562c <_ZN9IPAddressC1Ev>
}
   b52d4:	4620      	mov	r0, r4
   b52d6:	bd10      	pop	{r4, pc}

000b52d8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b52d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b52da:	2300      	movs	r3, #0
   b52dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b52e0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b52e4:	4a0e      	ldr	r2, [pc, #56]	; (b5320 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b52e6:	6103      	str	r3, [r0, #16]
   b52e8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b52ea:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b52ec:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b52ee:	20ac      	movs	r0, #172	; 0xac
   b52f0:	9101      	str	r1, [sp, #4]
   b52f2:	f7fe fece 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b52f6:	1e05      	subs	r5, r0, #0
   b52f8:	f105 060c 	add.w	r6, r5, #12
   b52fc:	d008      	beq.n	b5310 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b52fe:	2301      	movs	r3, #1
   b5300:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5304:	4b07      	ldr	r3, [pc, #28]	; (b5324 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5306:	9901      	ldr	r1, [sp, #4]
   b5308:	602b      	str	r3, [r5, #0]
   b530a:	4630      	mov	r0, r6
   b530c:	f7ff ffd9 	bl	b52c2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5310:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5312:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5316:	f7ff fedf 	bl	b50d8 <_ZN9TCPClient12flush_bufferEv>
}
   b531a:	b002      	add	sp, #8
   b531c:	bd70      	pop	{r4, r5, r6, pc}
   b531e:	bf00      	nop
   b5320:	000b6a14 	.word	0x000b6a14
   b5324:	000b69f0 	.word	0x000b69f0

000b5328 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5328:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b532a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b532e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5330:	f7ff ffd2 	bl	b52d8 <_ZN9TCPClientC1Ei>
}
   b5334:	4620      	mov	r0, r4
   b5336:	bd10      	pop	{r4, pc}

000b5338 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5338:	b510      	push	{r4, lr}
   b533a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b533c:	6800      	ldr	r0, [r0, #0]
   b533e:	2800      	cmp	r0, #0
   b5340:	db01      	blt.n	b5346 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5342:	f7ff fa91 	bl	b4868 <sock_close>
    }
}
   b5346:	4620      	mov	r0, r4
   b5348:	bd10      	pop	{r4, pc}

000b534a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b534a:	300c      	adds	r0, #12
   b534c:	f7ff bff4 	b.w	b5338 <_ZN9TCPClient4DataD1Ev>

000b5350 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5350:	b510      	push	{r4, lr}
   b5352:	4604      	mov	r4, r0
   b5354:	4608      	mov	r0, r1
{
    _spi = spi;
   b5356:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5358:	f7ff fa6e 	bl	b4838 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b535c:	2300      	movs	r3, #0
   b535e:	6063      	str	r3, [r4, #4]
}
   b5360:	4620      	mov	r0, r4
   b5362:	bd10      	pop	{r4, pc}

000b5364 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b5364:	b510      	push	{r4, lr}
  if (0 == max) {
   b5366:	4604      	mov	r4, r0
   b5368:	b128      	cbz	r0, b5376 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b536a:	f001 f9b3 	bl	b66d4 <rand>
   b536e:	fb90 f3f4 	sdiv	r3, r0, r4
   b5372:	fb03 0414 	mls	r4, r3, r4, r0
}
   b5376:	4620      	mov	r0, r4
   b5378:	bd10      	pop	{r4, pc}

000b537a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   b537a:	4288      	cmp	r0, r1
{
   b537c:	b510      	push	{r4, lr}
   b537e:	4604      	mov	r4, r0
  if (min >= max) {
   b5380:	da03      	bge.n	b538a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   b5382:	1a08      	subs	r0, r1, r0
   b5384:	f7ff ffee 	bl	b5364 <_Z6randomi>
   b5388:	4404      	add	r4, r0
}
   b538a:	4620      	mov	r0, r4
   b538c:	bd10      	pop	{r4, pc}

000b538e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b538e:	4770      	bx	lr

000b5390 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5392:	4606      	mov	r6, r0
   b5394:	4615      	mov	r5, r2
   b5396:	460c      	mov	r4, r1
   b5398:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b539a:	42bc      	cmp	r4, r7
   b539c:	d006      	beq.n	b53ac <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b539e:	6833      	ldr	r3, [r6, #0]
   b53a0:	f814 1b01 	ldrb.w	r1, [r4], #1
   b53a4:	689b      	ldr	r3, [r3, #8]
   b53a6:	4630      	mov	r0, r6
   b53a8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b53aa:	e7f6      	b.n	b539a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b53ac:	4628      	mov	r0, r5
   b53ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53b0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b53b0:	7c00      	ldrb	r0, [r0, #16]
   b53b2:	2200      	movs	r2, #0
   b53b4:	f7ff ba08 	b.w	b47c8 <hal_i2c_write>

000b53b8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b53b8:	7c00      	ldrb	r0, [r0, #16]
   b53ba:	2100      	movs	r1, #0
   b53bc:	f7ff ba0c 	b.w	b47d8 <hal_i2c_available>

000b53c0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b53c0:	7c00      	ldrb	r0, [r0, #16]
   b53c2:	2100      	movs	r1, #0
   b53c4:	f7ff ba10 	b.w	b47e8 <hal_i2c_read>

000b53c8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b53c8:	7c00      	ldrb	r0, [r0, #16]
   b53ca:	2100      	movs	r1, #0
   b53cc:	f7ff ba14 	b.w	b47f8 <hal_i2c_peek>

000b53d0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b53d0:	7c00      	ldrb	r0, [r0, #16]
   b53d2:	2100      	movs	r1, #0
   b53d4:	f7ff ba18 	b.w	b4808 <hal_i2c_flush>

000b53d8 <_ZN7TwoWireD0Ev>:
   b53d8:	b510      	push	{r4, lr}
   b53da:	2114      	movs	r1, #20
   b53dc:	4604      	mov	r4, r0
   b53de:	f7fe fe5c 	bl	b409a <_ZdlPvj>
   b53e2:	4620      	mov	r0, r4
   b53e4:	bd10      	pop	{r4, pc}
	...

000b53e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53e8:	b510      	push	{r4, lr}
   b53ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53ee:	4604      	mov	r4, r0
   b53f0:	4608      	mov	r0, r1
   b53f2:	2100      	movs	r1, #0
   b53f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b53f8:	4b03      	ldr	r3, [pc, #12]	; (b5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b53fa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b53fc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b53fe:	4611      	mov	r1, r2
   b5400:	f7ff fa12 	bl	b4828 <hal_i2c_init>
}
   b5404:	4620      	mov	r0, r4
   b5406:	bd10      	pop	{r4, pc}
   b5408:	000b6a60 	.word	0x000b6a60

000b540c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b540c:	4770      	bx	lr

000b540e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b540e:	7441      	strb	r1, [r0, #17]
}
   b5410:	4770      	bx	lr

000b5412 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5412:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5414:	7c00      	ldrb	r0, [r0, #16]
   b5416:	f7ff fa7f 	bl	b4918 <hal_usart_available_data_for_write>
}
   b541a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b541e:	bd08      	pop	{r3, pc}

000b5420 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5420:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5422:	7c00      	ldrb	r0, [r0, #16]
   b5424:	f7ff fa50 	bl	b48c8 <hal_usart_available>
}
   b5428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b542c:	bd08      	pop	{r3, pc}

000b542e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b542e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5430:	7c00      	ldrb	r0, [r0, #16]
   b5432:	f7ff fa59 	bl	b48e8 <hal_usart_peek>
}
   b5436:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b543a:	bd08      	pop	{r3, pc}

000b543c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b543c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b543e:	7c00      	ldrb	r0, [r0, #16]
   b5440:	f7ff fa4a 	bl	b48d8 <hal_usart_read>
}
   b5444:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5448:	bd08      	pop	{r3, pc}

000b544a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b544a:	7c00      	ldrb	r0, [r0, #16]
   b544c:	f7ff ba54 	b.w	b48f8 <hal_usart_flush>

000b5450 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5450:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5452:	7c45      	ldrb	r5, [r0, #17]
{
   b5454:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5456:	b12d      	cbz	r5, b5464 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5458:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b545a:	b003      	add	sp, #12
   b545c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5460:	f7ff ba2a 	b.w	b48b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5464:	7c00      	ldrb	r0, [r0, #16]
   b5466:	9101      	str	r1, [sp, #4]
   b5468:	f7ff fa56 	bl	b4918 <hal_usart_available_data_for_write>
   b546c:	2800      	cmp	r0, #0
   b546e:	9901      	ldr	r1, [sp, #4]
   b5470:	dcf2      	bgt.n	b5458 <_ZN11USARTSerial5writeEh+0x8>
}
   b5472:	4628      	mov	r0, r5
   b5474:	b003      	add	sp, #12
   b5476:	bd30      	pop	{r4, r5, pc}

000b5478 <_ZN11USARTSerialD0Ev>:
   b5478:	b510      	push	{r4, lr}
   b547a:	2114      	movs	r1, #20
   b547c:	4604      	mov	r4, r0
   b547e:	f7fe fe0c 	bl	b409a <_ZdlPvj>
   b5482:	4620      	mov	r0, r4
   b5484:	bd10      	pop	{r4, pc}
	...

000b5488 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5488:	b510      	push	{r4, lr}
   b548a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b548e:	4604      	mov	r4, r0
   b5490:	4608      	mov	r0, r1
   b5492:	4611      	mov	r1, r2
   b5494:	2200      	movs	r2, #0
   b5496:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b549a:	4b04      	ldr	r3, [pc, #16]	; (b54ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b549c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b549e:	2301      	movs	r3, #1
  _serial = serial;
   b54a0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b54a2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b54a4:	f7ff fa40 	bl	b4928 <hal_usart_init_ex>
}
   b54a8:	4620      	mov	r0, r4
   b54aa:	bd10      	pop	{r4, pc}
   b54ac:	000b6a88 	.word	0x000b6a88

000b54b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b54b0:	7441      	strb	r1, [r0, #17]
}
   b54b2:	4770      	bx	lr

000b54b4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54b4:	4770      	bx	lr

000b54b6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b54b6:	4770      	bx	lr

000b54b8 <_ZN9USBSerial4readEv>:
{
   b54b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b54ba:	2100      	movs	r1, #0
   b54bc:	7c00      	ldrb	r0, [r0, #16]
   b54be:	f7ff f96b 	bl	b4798 <HAL_USB_USART_Receive_Data>
}
   b54c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54c6:	bd08      	pop	{r3, pc}

000b54c8 <_ZN9USBSerial4peekEv>:
{
   b54c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b54ca:	2101      	movs	r1, #1
   b54cc:	7c00      	ldrb	r0, [r0, #16]
   b54ce:	f7ff f963 	bl	b4798 <HAL_USB_USART_Receive_Data>
}
   b54d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54d6:	bd08      	pop	{r3, pc}

000b54d8 <_ZN9USBSerial17availableForWriteEv>:
{
   b54d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b54da:	7c00      	ldrb	r0, [r0, #16]
   b54dc:	f7ff f954 	bl	b4788 <HAL_USB_USART_Available_Data_For_Write>
}
   b54e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54e4:	bd08      	pop	{r3, pc}

000b54e6 <_ZN9USBSerial9availableEv>:
{
   b54e6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b54e8:	7c00      	ldrb	r0, [r0, #16]
   b54ea:	f7ff f945 	bl	b4778 <HAL_USB_USART_Available_Data>
}
   b54ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54f2:	bd08      	pop	{r3, pc}

000b54f4 <_ZN9USBSerial5writeEh>:
{
   b54f4:	b513      	push	{r0, r1, r4, lr}
   b54f6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54f8:	7c00      	ldrb	r0, [r0, #16]
{
   b54fa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54fc:	f7ff f944 	bl	b4788 <HAL_USB_USART_Available_Data_For_Write>
   b5500:	2800      	cmp	r0, #0
   b5502:	9901      	ldr	r1, [sp, #4]
   b5504:	dc01      	bgt.n	b550a <_ZN9USBSerial5writeEh+0x16>
   b5506:	7c60      	ldrb	r0, [r4, #17]
   b5508:	b120      	cbz	r0, b5514 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b550a:	7c20      	ldrb	r0, [r4, #16]
   b550c:	f7ff f94c 	bl	b47a8 <HAL_USB_USART_Send_Data>
   b5510:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5514:	b002      	add	sp, #8
   b5516:	bd10      	pop	{r4, pc}

000b5518 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5518:	7c00      	ldrb	r0, [r0, #16]
   b551a:	f7ff b94d 	b.w	b47b8 <HAL_USB_USART_Flush_Data>

000b551e <_ZN9USBSerialD0Ev>:
   b551e:	b510      	push	{r4, lr}
   b5520:	2114      	movs	r1, #20
   b5522:	4604      	mov	r4, r0
   b5524:	f7fe fdb9 	bl	b409a <_ZdlPvj>
   b5528:	4620      	mov	r0, r4
   b552a:	bd10      	pop	{r4, pc}

000b552c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b552c:	b510      	push	{r4, lr}
   b552e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5532:	4604      	mov	r4, r0
   b5534:	4608      	mov	r0, r1
   b5536:	2100      	movs	r1, #0
   b5538:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b553c:	4b04      	ldr	r3, [pc, #16]	; (b5550 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b553e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5540:	2301      	movs	r3, #1
  _serial = serial;
   b5542:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5544:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5546:	4611      	mov	r1, r2
   b5548:	f7ff f906 	bl	b4758 <HAL_USB_USART_Init>
}
   b554c:	4620      	mov	r0, r4
   b554e:	bd10      	pop	{r4, pc}
   b5550:	000b6ab8 	.word	0x000b6ab8

000b5554 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5554:	7c00      	ldrb	r0, [r0, #16]
   b5556:	2200      	movs	r2, #0
   b5558:	f7ff b906 	b.w	b4768 <HAL_USB_USART_Begin>

000b555c <_Z19acquireSerialBufferv>:
{
   b555c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b555e:	2214      	movs	r2, #20
{
   b5560:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5562:	2100      	movs	r1, #0
   b5564:	f001 f880 	bl	b6668 <memset>
}
   b5568:	4620      	mov	r0, r4
   b556a:	bd10      	pop	{r4, pc}

000b556c <_Z16_fetch_usbserialv>:
{
   b556c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b556e:	4c0f      	ldr	r4, [pc, #60]	; (b55ac <_Z16_fetch_usbserialv+0x40>)
{
   b5570:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5572:	a803      	add	r0, sp, #12
   b5574:	f7ff fff2 	bl	b555c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5578:	7821      	ldrb	r1, [r4, #0]
   b557a:	f3bf 8f5b 	dmb	ish
   b557e:	f011 0101 	ands.w	r1, r1, #1
   b5582:	d10f      	bne.n	b55a4 <_Z16_fetch_usbserialv+0x38>
   b5584:	4620      	mov	r0, r4
   b5586:	9101      	str	r1, [sp, #4]
   b5588:	f7fe fd89 	bl	b409e <__cxa_guard_acquire>
   b558c:	9901      	ldr	r1, [sp, #4]
   b558e:	b148      	cbz	r0, b55a4 <_Z16_fetch_usbserialv+0x38>
   b5590:	aa03      	add	r2, sp, #12
   b5592:	4807      	ldr	r0, [pc, #28]	; (b55b0 <_Z16_fetch_usbserialv+0x44>)
   b5594:	f7ff ffca 	bl	b552c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5598:	4620      	mov	r0, r4
   b559a:	f7fe fd85 	bl	b40a8 <__cxa_guard_release>
   b559e:	4805      	ldr	r0, [pc, #20]	; (b55b4 <_Z16_fetch_usbserialv+0x48>)
   b55a0:	f001 f84e 	bl	b6640 <atexit>
	return _usbserial;
}
   b55a4:	4802      	ldr	r0, [pc, #8]	; (b55b0 <_Z16_fetch_usbserialv+0x44>)
   b55a6:	b008      	add	sp, #32
   b55a8:	bd10      	pop	{r4, pc}
   b55aa:	bf00      	nop
   b55ac:	2003e6c8 	.word	0x2003e6c8
   b55b0:	2003e6cc 	.word	0x2003e6cc
   b55b4:	000b54b5 	.word	0x000b54b5

000b55b8 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b55b8:	4770      	bx	lr

000b55ba <_ZN9IPAddressD0Ev>:
   b55ba:	b510      	push	{r4, lr}
   b55bc:	2118      	movs	r1, #24
   b55be:	4604      	mov	r4, r0
   b55c0:	f7fe fd6b 	bl	b409a <_ZdlPvj>
   b55c4:	4620      	mov	r0, r4
   b55c6:	bd10      	pop	{r4, pc}

000b55c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b55c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b55ca:	7d03      	ldrb	r3, [r0, #20]
   b55cc:	2b06      	cmp	r3, #6
{
   b55ce:	b08d      	sub	sp, #52	; 0x34
   b55d0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55d2:	f100 0704 	add.w	r7, r0, #4
   b55d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b55da:	d012      	beq.n	b5602 <_ZNK9IPAddress7printToER5Print+0x3a>
   b55dc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b55e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b55e4:	220a      	movs	r2, #10
   b55e6:	4630      	mov	r0, r6
   b55e8:	f000 f96d 	bl	b58c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b55ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b55ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b55f0:	d019      	beq.n	b5626 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b55f2:	2c00      	cmp	r4, #0
   b55f4:	d0f4      	beq.n	b55e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b55f6:	212e      	movs	r1, #46	; 0x2e
   b55f8:	4630      	mov	r0, r6
   b55fa:	f000 f94b 	bl	b5894 <_ZN5Print5printEc>
   b55fe:	4404      	add	r4, r0
   b5600:	e7ee      	b.n	b55e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5602:	232f      	movs	r3, #47	; 0x2f
   b5604:	466a      	mov	r2, sp
   b5606:	4639      	mov	r1, r7
   b5608:	200a      	movs	r0, #10
		buf[0] = 0;
   b560a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b560e:	f7ff f993 	bl	b4938 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5612:	4668      	mov	r0, sp
   b5614:	f001 f8a6 	bl	b6764 <strlen>
   b5618:	6833      	ldr	r3, [r6, #0]
   b561a:	4602      	mov	r2, r0
   b561c:	68db      	ldr	r3, [r3, #12]
   b561e:	4669      	mov	r1, sp
   b5620:	4630      	mov	r0, r6
   b5622:	4798      	blx	r3
   b5624:	4604      	mov	r4, r0
    }
    return n;
}
   b5626:	4620      	mov	r0, r4
   b5628:	b00d      	add	sp, #52	; 0x34
   b562a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b562c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b562c:	b510      	push	{r4, lr}
   b562e:	4b05      	ldr	r3, [pc, #20]	; (b5644 <_ZN9IPAddressC1Ev+0x18>)
   b5630:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b5632:	2211      	movs	r2, #17
   b5634:	f840 3b04 	str.w	r3, [r0], #4
   b5638:	2100      	movs	r1, #0
   b563a:	f001 f815 	bl	b6668 <memset>
}
   b563e:	4620      	mov	r0, r4
   b5640:	bd10      	pop	{r4, pc}
   b5642:	bf00      	nop
   b5644:	000b6ae8 	.word	0x000b6ae8

000b5648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5648:	4603      	mov	r3, r0
   b564a:	4a07      	ldr	r2, [pc, #28]	; (b5668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b564c:	b510      	push	{r4, lr}
   b564e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5652:	f101 0210 	add.w	r2, r1, #16
   b5656:	f851 4b04 	ldr.w	r4, [r1], #4
   b565a:	f843 4b04 	str.w	r4, [r3], #4
   b565e:	4291      	cmp	r1, r2
   b5660:	d1f9      	bne.n	b5656 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5662:	780a      	ldrb	r2, [r1, #0]
   b5664:	701a      	strb	r2, [r3, #0]
}
   b5666:	bd10      	pop	{r4, pc}
   b5668:	000b6ae8 	.word	0x000b6ae8

000b566c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b566c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b566e:	2b04      	cmp	r3, #4
   b5670:	d104      	bne.n	b567c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5672:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5674:	3800      	subs	r0, #0
   b5676:	bf18      	it	ne
   b5678:	2001      	movne	r0, #1
   b567a:	4770      	bx	lr
    } else if (version() == 6) {
   b567c:	2b06      	cmp	r3, #6
   b567e:	d107      	bne.n	b5690 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5680:	6843      	ldr	r3, [r0, #4]
   b5682:	b93b      	cbnz	r3, b5694 <_ZNK9IPAddresscvbEv+0x28>
   b5684:	6883      	ldr	r3, [r0, #8]
   b5686:	b92b      	cbnz	r3, b5694 <_ZNK9IPAddresscvbEv+0x28>
   b5688:	68c3      	ldr	r3, [r0, #12]
   b568a:	b91b      	cbnz	r3, b5694 <_ZNK9IPAddresscvbEv+0x28>
   b568c:	6900      	ldr	r0, [r0, #16]
   b568e:	e7f1      	b.n	b5674 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5690:	2000      	movs	r0, #0
   b5692:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5694:	2001      	movs	r0, #1
}
   b5696:	4770      	bx	lr

000b5698 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5698:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b569a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b569e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b56a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b56a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b56aa:	2304      	movs	r3, #4
   b56ac:	6041      	str	r1, [r0, #4]
   b56ae:	7503      	strb	r3, [r0, #20]
}
   b56b0:	bd10      	pop	{r4, pc}
	...

000b56b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b56b4:	b507      	push	{r0, r1, r2, lr}
   b56b6:	4b06      	ldr	r3, [pc, #24]	; (b56d0 <_ZN9IPAddressC1EPKh+0x1c>)
   b56b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b56ba:	78cb      	ldrb	r3, [r1, #3]
   b56bc:	9300      	str	r3, [sp, #0]
   b56be:	788b      	ldrb	r3, [r1, #2]
   b56c0:	784a      	ldrb	r2, [r1, #1]
   b56c2:	7809      	ldrb	r1, [r1, #0]
   b56c4:	f7ff ffe8 	bl	b5698 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b56c8:	b003      	add	sp, #12
   b56ca:	f85d fb04 	ldr.w	pc, [sp], #4
   b56ce:	bf00      	nop
   b56d0:	000b6ae8 	.word	0x000b6ae8

000b56d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b56d4:	4b01      	ldr	r3, [pc, #4]	; (b56dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b56d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b56d8:	4770      	bx	lr
   b56da:	bf00      	nop
   b56dc:	2003e4f0 	.word	0x2003e4f0

000b56e0 <serialEventRun>:
{
   b56e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b56e2:	4b0b      	ldr	r3, [pc, #44]	; (b5710 <serialEventRun+0x30>)
   b56e4:	b143      	cbz	r3, b56f8 <serialEventRun+0x18>
   b56e6:	f7ff ff41 	bl	b556c <_Z16_fetch_usbserialv>
   b56ea:	6803      	ldr	r3, [r0, #0]
   b56ec:	691b      	ldr	r3, [r3, #16]
   b56ee:	4798      	blx	r3
   b56f0:	2800      	cmp	r0, #0
   b56f2:	dd01      	ble.n	b56f8 <serialEventRun+0x18>
        serialEvent();
   b56f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b56f8:	4b06      	ldr	r3, [pc, #24]	; (b5714 <serialEventRun+0x34>)
   b56fa:	b143      	cbz	r3, b570e <serialEventRun+0x2e>
   b56fc:	f000 f9e2 	bl	b5ac4 <_Z22__fetch_global_Serial1v>
   b5700:	6803      	ldr	r3, [r0, #0]
   b5702:	691b      	ldr	r3, [r3, #16]
   b5704:	4798      	blx	r3
   b5706:	2800      	cmp	r0, #0
   b5708:	dd01      	ble.n	b570e <serialEventRun+0x2e>
        serialEvent1();
   b570a:	f3af 8000 	nop.w
}
   b570e:	bd08      	pop	{r3, pc}
	...

000b5718 <_post_loop>:
{
   b5718:	b508      	push	{r3, lr}
	serialEventRun();
   b571a:	f7ff ffe1 	bl	b56e0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b571e:	f7ff f933 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5722:	4b01      	ldr	r3, [pc, #4]	; (b5728 <_post_loop+0x10>)
   b5724:	6018      	str	r0, [r3, #0]
}
   b5726:	bd08      	pop	{r3, pc}
   b5728:	2003e734 	.word	0x2003e734

000b572c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b572c:	4805      	ldr	r0, [pc, #20]	; (b5744 <_Z33system_initialize_user_backup_ramv+0x18>)
   b572e:	4a06      	ldr	r2, [pc, #24]	; (b5748 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5730:	4906      	ldr	r1, [pc, #24]	; (b574c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5732:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5734:	1a12      	subs	r2, r2, r0
   b5736:	f000 ff89 	bl	b664c <memcpy>
    __backup_sram_signature = signature;
   b573a:	4b05      	ldr	r3, [pc, #20]	; (b5750 <_Z33system_initialize_user_backup_ramv+0x24>)
   b573c:	4a05      	ldr	r2, [pc, #20]	; (b5754 <_Z33system_initialize_user_backup_ramv+0x28>)
   b573e:	601a      	str	r2, [r3, #0]
}
   b5740:	bd08      	pop	{r3, pc}
   b5742:	bf00      	nop
   b5744:	2003f400 	.word	0x2003f400
   b5748:	2003f404 	.word	0x2003f404
   b574c:	000b6d00 	.word	0x000b6d00
   b5750:	2003f400 	.word	0x2003f400
   b5754:	9a271c1e 	.word	0x9a271c1e

000b5758 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5758:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b575a:	2300      	movs	r3, #0
   b575c:	9300      	str	r3, [sp, #0]
   b575e:	461a      	mov	r2, r3
   b5760:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5764:	f7ff f9d2 	bl	b4b0c <system_ctrl_set_result>
}
   b5768:	b003      	add	sp, #12
   b576a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5770 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5770:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5772:	8843      	ldrh	r3, [r0, #2]
   b5774:	2b0a      	cmp	r3, #10
   b5776:	d008      	beq.n	b578a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5778:	2b50      	cmp	r3, #80	; 0x50
   b577a:	d10b      	bne.n	b5794 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b577c:	4b09      	ldr	r3, [pc, #36]	; (b57a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b577e:	681b      	ldr	r3, [r3, #0]
   b5780:	b14b      	cbz	r3, b5796 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5782:	b003      	add	sp, #12
   b5784:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5788:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b578a:	f7ff ffe5 	bl	b5758 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b578e:	b003      	add	sp, #12
   b5790:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5794:	2300      	movs	r3, #0
   b5796:	9300      	str	r3, [sp, #0]
   b5798:	461a      	mov	r2, r3
   b579a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b579e:	f7ff f9b5 	bl	b4b0c <system_ctrl_set_result>
}
   b57a2:	e7f4      	b.n	b578e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b57a4:	2003e6e4 	.word	0x2003e6e4

000b57a8 <module_user_init_hook>:
{
   b57a8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b57aa:	4812      	ldr	r0, [pc, #72]	; (b57f4 <module_user_init_hook+0x4c>)
   b57ac:	2100      	movs	r1, #0
   b57ae:	f7ff f9e7 	bl	b4b80 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b57b2:	4b11      	ldr	r3, [pc, #68]	; (b57f8 <module_user_init_hook+0x50>)
   b57b4:	681a      	ldr	r2, [r3, #0]
   b57b6:	4b11      	ldr	r3, [pc, #68]	; (b57fc <module_user_init_hook+0x54>)
   b57b8:	429a      	cmp	r2, r3
   b57ba:	4b11      	ldr	r3, [pc, #68]	; (b5800 <module_user_init_hook+0x58>)
   b57bc:	bf0c      	ite	eq
   b57be:	2201      	moveq	r2, #1
   b57c0:	2200      	movne	r2, #0
   b57c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b57c4:	d001      	beq.n	b57ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b57c6:	f7ff ffb1 	bl	b572c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b57ca:	f7ff f8d5 	bl	b4978 <HAL_RNG_GetRandomNumber>
   b57ce:	4604      	mov	r4, r0
    srand(seed);
   b57d0:	f000 ff52 	bl	b6678 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b57d4:	4b0b      	ldr	r3, [pc, #44]	; (b5804 <module_user_init_hook+0x5c>)
   b57d6:	b113      	cbz	r3, b57de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b57d8:	4620      	mov	r0, r4
   b57da:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b57de:	2100      	movs	r1, #0
   b57e0:	4808      	ldr	r0, [pc, #32]	; (b5804 <module_user_init_hook+0x5c>)
   b57e2:	f7ff f911 	bl	b4a08 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b57e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b57ea:	4807      	ldr	r0, [pc, #28]	; (b5808 <module_user_init_hook+0x60>)
   b57ec:	2100      	movs	r1, #0
   b57ee:	f7ff b983 	b.w	b4af8 <system_ctrl_set_app_request_handler>
   b57f2:	bf00      	nop
   b57f4:	000b56d5 	.word	0x000b56d5
   b57f8:	2003f400 	.word	0x2003f400
   b57fc:	9a271c1e 	.word	0x9a271c1e
   b5800:	2003e6e0 	.word	0x2003e6e0
   b5804:	00000000 	.word	0x00000000
   b5808:	000b5771 	.word	0x000b5771

000b580c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b580c:	4b01      	ldr	r3, [pc, #4]	; (b5814 <_GLOBAL__sub_I_RGB+0x8>)
   b580e:	2200      	movs	r2, #0
   b5810:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5812:	4770      	bx	lr
   b5814:	2003e6e8 	.word	0x2003e6e8

000b5818 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5818:	2100      	movs	r1, #0
   b581a:	f7ff b965 	b.w	b4ae8 <system_delay_ms>
	...

000b5820 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5820:	4b02      	ldr	r3, [pc, #8]	; (b582c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5822:	681a      	ldr	r2, [r3, #0]
   b5824:	4b02      	ldr	r3, [pc, #8]	; (b5830 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5826:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5828:	4770      	bx	lr
   b582a:	bf00      	nop
   b582c:	2003e4ec 	.word	0x2003e4ec
   b5830:	2003e6f8 	.word	0x2003e6f8

000b5834 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5834:	4b01      	ldr	r3, [pc, #4]	; (b583c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5836:	4a02      	ldr	r2, [pc, #8]	; (b5840 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5838:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b583a:	4770      	bx	lr
   b583c:	2003e6fc 	.word	0x2003e6fc
   b5840:	000b6b10 	.word	0x000b6b10

000b5844 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5846:	4606      	mov	r6, r0
   b5848:	460d      	mov	r5, r1
  size_t n = 0;
   b584a:	188f      	adds	r7, r1, r2
   b584c:	2400      	movs	r4, #0
  while (size--) {
   b584e:	42bd      	cmp	r5, r7
   b5850:	d00c      	beq.n	b586c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5852:	6833      	ldr	r3, [r6, #0]
   b5854:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5858:	689b      	ldr	r3, [r3, #8]
   b585a:	4630      	mov	r0, r6
   b585c:	4798      	blx	r3
     if (chunk>=0)
   b585e:	1e03      	subs	r3, r0, #0
   b5860:	db01      	blt.n	b5866 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5862:	441c      	add	r4, r3
  while (size--) {
   b5864:	e7f3      	b.n	b584e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5866:	2c00      	cmp	r4, #0
   b5868:	bf08      	it	eq
   b586a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b586c:	4620      	mov	r0, r4
   b586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5870 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5870:	b513      	push	{r0, r1, r4, lr}
   b5872:	4604      	mov	r4, r0
    }
   b5874:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5876:	b159      	cbz	r1, b5890 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5878:	9101      	str	r1, [sp, #4]
   b587a:	f000 ff73 	bl	b6764 <strlen>
   b587e:	6823      	ldr	r3, [r4, #0]
   b5880:	9901      	ldr	r1, [sp, #4]
   b5882:	68db      	ldr	r3, [r3, #12]
   b5884:	4602      	mov	r2, r0
   b5886:	4620      	mov	r0, r4
    }
   b5888:	b002      	add	sp, #8
   b588a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b588e:	4718      	bx	r3
    }
   b5890:	b002      	add	sp, #8
   b5892:	bd10      	pop	{r4, pc}

000b5894 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5894:	6803      	ldr	r3, [r0, #0]
   b5896:	689b      	ldr	r3, [r3, #8]
   b5898:	4718      	bx	r3

000b589a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b589a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b589c:	210d      	movs	r1, #13
{
   b589e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b58a0:	f7ff fff8 	bl	b5894 <_ZN5Print5printEc>
  n += print('\n');
   b58a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b58a6:	4604      	mov	r4, r0
  n += print('\n');
   b58a8:	4628      	mov	r0, r5
   b58aa:	f7ff fff3 	bl	b5894 <_ZN5Print5printEc>
  return n;
}
   b58ae:	4420      	add	r0, r4
   b58b0:	bd38      	pop	{r3, r4, r5, pc}

000b58b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b58b2:	b538      	push	{r3, r4, r5, lr}
   b58b4:	4605      	mov	r5, r0
  return write(str);
   b58b6:	f7ff ffdb 	bl	b5870 <_ZN5Print5writeEPKc>
   b58ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b58bc:	4628      	mov	r0, r5
   b58be:	f7ff ffec 	bl	b589a <_ZN5Print7printlnEv>
  return n;
}
   b58c2:	4420      	add	r0, r4
   b58c4:	bd38      	pop	{r3, r4, r5, pc}

000b58c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b58c6:	b530      	push	{r4, r5, lr}
   b58c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b58ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b58cc:	2a01      	cmp	r2, #1
  *str = '\0';
   b58ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b58d2:	bf98      	it	ls
   b58d4:	220a      	movls	r2, #10
   b58d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b58d8:	460d      	mov	r5, r1
   b58da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b58de:	fb01 5312 	mls	r3, r1, r2, r5
   b58e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b58e6:	2b09      	cmp	r3, #9
   b58e8:	bf94      	ite	ls
   b58ea:	3330      	addls	r3, #48	; 0x30
   b58ec:	3337      	addhi	r3, #55	; 0x37
   b58ee:	b2db      	uxtb	r3, r3
  } while(n);
   b58f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b58f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b58f6:	d9ef      	bls.n	b58d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b58f8:	4621      	mov	r1, r4
   b58fa:	f7ff ffb9 	bl	b5870 <_ZN5Print5writeEPKc>
}
   b58fe:	b00b      	add	sp, #44	; 0x2c
   b5900:	bd30      	pop	{r4, r5, pc}

000b5902 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5906:	b086      	sub	sp, #24
   b5908:	af00      	add	r7, sp, #0
   b590a:	4605      	mov	r5, r0
   b590c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b590e:	1d38      	adds	r0, r7, #4
   b5910:	2114      	movs	r1, #20
{
   b5912:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5914:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5916:	f7ff f91b 	bl	b4b50 <vsnprintf>

    if (n<bufsize)
   b591a:	2813      	cmp	r0, #19
   b591c:	d80e      	bhi.n	b593c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b591e:	1d39      	adds	r1, r7, #4
   b5920:	4628      	mov	r0, r5
   b5922:	f7ff ffa5 	bl	b5870 <_ZN5Print5writeEPKc>
   b5926:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5928:	b11e      	cbz	r6, b5932 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b592a:	4628      	mov	r0, r5
   b592c:	f7ff ffb5 	bl	b589a <_ZN5Print7printlnEv>
   b5930:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5932:	4620      	mov	r0, r4
   b5934:	3718      	adds	r7, #24
   b5936:	46bd      	mov	sp, r7
   b5938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b593c:	f100 0308 	add.w	r3, r0, #8
   b5940:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5944:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5946:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b594a:	4622      	mov	r2, r4
   b594c:	1c41      	adds	r1, r0, #1
   b594e:	683b      	ldr	r3, [r7, #0]
   b5950:	4668      	mov	r0, sp
   b5952:	f7ff f8fd 	bl	b4b50 <vsnprintf>
  return write(str);
   b5956:	4669      	mov	r1, sp
   b5958:	4628      	mov	r0, r5
   b595a:	f7ff ff89 	bl	b5870 <_ZN5Print5writeEPKc>
   b595e:	4604      	mov	r4, r0
   b5960:	46c5      	mov	sp, r8
   b5962:	e7e1      	b.n	b5928 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5964 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5964:	4802      	ldr	r0, [pc, #8]	; (b5970 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5966:	2300      	movs	r3, #0
   b5968:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b596a:	f7fe bffd 	b.w	b4968 <os_mutex_recursive_create>
   b596e:	bf00      	nop
   b5970:	2003e700 	.word	0x2003e700

000b5974 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5974:	4b05      	ldr	r3, [pc, #20]	; (b598c <_GLOBAL__sub_I_System+0x18>)
   b5976:	2202      	movs	r2, #2
   b5978:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b597a:	4b05      	ldr	r3, [pc, #20]	; (b5990 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b597c:	4a05      	ldr	r2, [pc, #20]	; (b5994 <_GLOBAL__sub_I_System+0x20>)
   b597e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5980:	2000      	movs	r0, #0
   b5982:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5986:	f7ff b8a7 	b.w	b4ad8 <set_system_mode>
   b598a:	bf00      	nop
   b598c:	2003e710 	.word	0x2003e710
   b5990:	2003e704 	.word	0x2003e704
   b5994:	ffff0000 	.word	0xffff0000

000b5998 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5998:	2200      	movs	r2, #0
   b599a:	6840      	ldr	r0, [r0, #4]
   b599c:	4611      	mov	r1, r2
   b599e:	f7ff b873 	b.w	b4a88 <network_listening>

000b59a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b59a2:	2200      	movs	r2, #0
   b59a4:	6840      	ldr	r0, [r0, #4]
   b59a6:	4611      	mov	r1, r2
   b59a8:	f7ff b87e 	b.w	b4aa8 <network_get_listen_timeout>

000b59ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b59ac:	6840      	ldr	r0, [r0, #4]
   b59ae:	2200      	movs	r2, #0
   b59b0:	f7ff b872 	b.w	b4a98 <network_set_listen_timeout>

000b59b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b59b4:	6840      	ldr	r0, [r0, #4]
   b59b6:	2200      	movs	r2, #0
   b59b8:	f081 0101 	eor.w	r1, r1, #1
   b59bc:	f7ff b85c 	b.w	b4a78 <network_listen>

000b59c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b59c0:	2300      	movs	r3, #0
   b59c2:	6840      	ldr	r0, [r0, #4]
   b59c4:	461a      	mov	r2, r3
   b59c6:	4619      	mov	r1, r3
   b59c8:	f7ff b84e 	b.w	b4a68 <network_off>

000b59cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b59cc:	2300      	movs	r3, #0
   b59ce:	6840      	ldr	r0, [r0, #4]
   b59d0:	461a      	mov	r2, r3
   b59d2:	4619      	mov	r1, r3
   b59d4:	f7ff b840 	b.w	b4a58 <network_on>

000b59d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b59d8:	2200      	movs	r2, #0
   b59da:	6840      	ldr	r0, [r0, #4]
   b59dc:	4611      	mov	r1, r2
   b59de:	f7ff b833 	b.w	b4a48 <network_ready>

000b59e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b59e2:	2200      	movs	r2, #0
   b59e4:	6840      	ldr	r0, [r0, #4]
   b59e6:	4611      	mov	r1, r2
   b59e8:	f7ff b81e 	b.w	b4a28 <network_connecting>

000b59ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b59ec:	6840      	ldr	r0, [r0, #4]
   b59ee:	2200      	movs	r2, #0
   b59f0:	2102      	movs	r1, #2
   b59f2:	f7ff b821 	b.w	b4a38 <network_disconnect>

000b59f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b59f6:	2300      	movs	r3, #0
   b59f8:	6840      	ldr	r0, [r0, #4]
   b59fa:	461a      	mov	r2, r3
   b59fc:	f7ff b80c 	b.w	b4a18 <network_connect>

000b5a00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5a00:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5a02:	2203      	movs	r2, #3
   b5a04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5a06:	4a02      	ldr	r2, [pc, #8]	; (b5a10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5a08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5a0a:	4770      	bx	lr
   b5a0c:	2003e714 	.word	0x2003e714
   b5a10:	000b6b1c 	.word	0x000b6b1c

000b5a14 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a14:	4770      	bx	lr
	...

000b5a18 <_Z17acquireWireBufferv>:
{
   b5a18:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5a1a:	2520      	movs	r5, #32
   b5a1c:	2314      	movs	r3, #20
{
   b5a1e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5a20:	6003      	str	r3, [r0, #0]
   b5a22:	6085      	str	r5, [r0, #8]
   b5a24:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a26:	4906      	ldr	r1, [pc, #24]	; (b5a40 <_Z17acquireWireBufferv+0x28>)
   b5a28:	4628      	mov	r0, r5
   b5a2a:	f000 f8d7 	bl	b5bdc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a2e:	4904      	ldr	r1, [pc, #16]	; (b5a40 <_Z17acquireWireBufferv+0x28>)
	};
   b5a30:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a32:	4628      	mov	r0, r5
   b5a34:	f000 f8d2 	bl	b5bdc <_ZnajRKSt9nothrow_t>
	};
   b5a38:	60e0      	str	r0, [r4, #12]
}
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	bd38      	pop	{r3, r4, r5, pc}
   b5a3e:	bf00      	nop
   b5a40:	000b6b50 	.word	0x000b6b50

000b5a44 <_Z19__fetch_global_Wirev>:
{
   b5a44:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a46:	4d0e      	ldr	r5, [pc, #56]	; (b5a80 <_Z19__fetch_global_Wirev+0x3c>)
   b5a48:	7829      	ldrb	r1, [r5, #0]
   b5a4a:	f3bf 8f5b 	dmb	ish
   b5a4e:	f011 0401 	ands.w	r4, r1, #1
{
   b5a52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a54:	d111      	bne.n	b5a7a <_Z19__fetch_global_Wirev+0x36>
   b5a56:	4628      	mov	r0, r5
   b5a58:	f7fe fb21 	bl	b409e <__cxa_guard_acquire>
   b5a5c:	b168      	cbz	r0, b5a7a <_Z19__fetch_global_Wirev+0x36>
   b5a5e:	a801      	add	r0, sp, #4
   b5a60:	f7ff ffda 	bl	b5a18 <_Z17acquireWireBufferv>
   b5a64:	aa01      	add	r2, sp, #4
   b5a66:	4621      	mov	r1, r4
   b5a68:	4806      	ldr	r0, [pc, #24]	; (b5a84 <_Z19__fetch_global_Wirev+0x40>)
   b5a6a:	f7ff fcbd 	bl	b53e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5a6e:	4628      	mov	r0, r5
   b5a70:	f7fe fb1a 	bl	b40a8 <__cxa_guard_release>
   b5a74:	4804      	ldr	r0, [pc, #16]	; (b5a88 <_Z19__fetch_global_Wirev+0x44>)
   b5a76:	f000 fde3 	bl	b6640 <atexit>
	return wire;
}
   b5a7a:	4802      	ldr	r0, [pc, #8]	; (b5a84 <_Z19__fetch_global_Wirev+0x40>)
   b5a7c:	b007      	add	sp, #28
   b5a7e:	bd30      	pop	{r4, r5, pc}
   b5a80:	2003e71c 	.word	0x2003e71c
   b5a84:	2003e720 	.word	0x2003e720
   b5a88:	000b5a15 	.word	0x000b5a15

000b5a8c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a8c:	4770      	bx	lr
	...

000b5a90 <_Z20acquireSerial1Bufferv>:
{
   b5a90:	b538      	push	{r3, r4, r5, lr}
   b5a92:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5a94:	2514      	movs	r5, #20
   b5a96:	462a      	mov	r2, r5
   b5a98:	2100      	movs	r1, #0
   b5a9a:	f000 fde5 	bl	b6668 <memset>
   b5a9e:	8025      	strh	r5, [r4, #0]
   b5aa0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5aa2:	4907      	ldr	r1, [pc, #28]	; (b5ac0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5aa4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5aa6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5aa8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5aaa:	f000 f897 	bl	b5bdc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5aae:	4904      	ldr	r1, [pc, #16]	; (b5ac0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5ab0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ab2:	4628      	mov	r0, r5
   b5ab4:	f000 f892 	bl	b5bdc <_ZnajRKSt9nothrow_t>
    };
   b5ab8:	60e0      	str	r0, [r4, #12]
}
   b5aba:	4620      	mov	r0, r4
   b5abc:	bd38      	pop	{r3, r4, r5, pc}
   b5abe:	bf00      	nop
   b5ac0:	000b6b50 	.word	0x000b6b50

000b5ac4 <_Z22__fetch_global_Serial1v>:
{
   b5ac4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ac6:	4d0e      	ldr	r5, [pc, #56]	; (b5b00 <_Z22__fetch_global_Serial1v+0x3c>)
   b5ac8:	7829      	ldrb	r1, [r5, #0]
   b5aca:	f3bf 8f5b 	dmb	ish
   b5ace:	f011 0401 	ands.w	r4, r1, #1
{
   b5ad2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ad4:	d111      	bne.n	b5afa <_Z22__fetch_global_Serial1v+0x36>
   b5ad6:	4628      	mov	r0, r5
   b5ad8:	f7fe fae1 	bl	b409e <__cxa_guard_acquire>
   b5adc:	b168      	cbz	r0, b5afa <_Z22__fetch_global_Serial1v+0x36>
   b5ade:	a801      	add	r0, sp, #4
   b5ae0:	f7ff ffd6 	bl	b5a90 <_Z20acquireSerial1Bufferv>
   b5ae4:	aa01      	add	r2, sp, #4
   b5ae6:	4621      	mov	r1, r4
   b5ae8:	4806      	ldr	r0, [pc, #24]	; (b5b04 <_Z22__fetch_global_Serial1v+0x40>)
   b5aea:	f7ff fccd 	bl	b5488 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5aee:	4628      	mov	r0, r5
   b5af0:	f7fe fada 	bl	b40a8 <__cxa_guard_release>
   b5af4:	4804      	ldr	r0, [pc, #16]	; (b5b08 <_Z22__fetch_global_Serial1v+0x44>)
   b5af6:	f000 fda3 	bl	b6640 <atexit>
    return serial1;
}
   b5afa:	4802      	ldr	r0, [pc, #8]	; (b5b04 <_Z22__fetch_global_Serial1v+0x40>)
   b5afc:	b007      	add	sp, #28
   b5afe:	bd30      	pop	{r4, r5, pc}
   b5b00:	2003e738 	.word	0x2003e738
   b5b04:	2003e73c 	.word	0x2003e73c
   b5b08:	000b5a8d 	.word	0x000b5a8d

000b5b0c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5b0c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5b0e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5b10:	d902      	bls.n	b5b18 <pinAvailable+0xc>
    return false;
   b5b12:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5b14:	b002      	add	sp, #8
   b5b16:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5b18:	f1a0 030b 	sub.w	r3, r0, #11
   b5b1c:	2b02      	cmp	r3, #2
   b5b1e:	d81a      	bhi.n	b5b56 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5b20:	4c17      	ldr	r4, [pc, #92]	; (b5b80 <pinAvailable+0x74>)
   b5b22:	7821      	ldrb	r1, [r4, #0]
   b5b24:	f3bf 8f5b 	dmb	ish
   b5b28:	f011 0101 	ands.w	r1, r1, #1
   b5b2c:	d10b      	bne.n	b5b46 <pinAvailable+0x3a>
   b5b2e:	4620      	mov	r0, r4
   b5b30:	9101      	str	r1, [sp, #4]
   b5b32:	f7fe fab4 	bl	b409e <__cxa_guard_acquire>
   b5b36:	9901      	ldr	r1, [sp, #4]
   b5b38:	b128      	cbz	r0, b5b46 <pinAvailable+0x3a>
   b5b3a:	4812      	ldr	r0, [pc, #72]	; (b5b84 <pinAvailable+0x78>)
   b5b3c:	f7ff fc08 	bl	b5350 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5b40:	4620      	mov	r0, r4
   b5b42:	f7fe fab1 	bl	b40a8 <__cxa_guard_release>
   b5b46:	4b0f      	ldr	r3, [pc, #60]	; (b5b84 <pinAvailable+0x78>)
   b5b48:	7818      	ldrb	r0, [r3, #0]
   b5b4a:	f7fe fe7d 	bl	b4848 <hal_spi_is_enabled>
   b5b4e:	2800      	cmp	r0, #0
   b5b50:	d1df      	bne.n	b5b12 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5b52:	2001      	movs	r0, #1
   b5b54:	e7de      	b.n	b5b14 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5b56:	2801      	cmp	r0, #1
   b5b58:	d809      	bhi.n	b5b6e <pinAvailable+0x62>
   b5b5a:	f7ff ff73 	bl	b5a44 <_Z19__fetch_global_Wirev>
   b5b5e:	2100      	movs	r1, #0
   b5b60:	7c00      	ldrb	r0, [r0, #16]
   b5b62:	f7fe fe59 	bl	b4818 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5b66:	f080 0001 	eor.w	r0, r0, #1
   b5b6a:	b2c0      	uxtb	r0, r0
   b5b6c:	e7d2      	b.n	b5b14 <pinAvailable+0x8>
   b5b6e:	3809      	subs	r0, #9
   b5b70:	2801      	cmp	r0, #1
   b5b72:	d8ee      	bhi.n	b5b52 <pinAvailable+0x46>
   b5b74:	f7ff ffa6 	bl	b5ac4 <_Z22__fetch_global_Serial1v>
   b5b78:	7c00      	ldrb	r0, [r0, #16]
   b5b7a:	f7fe fec5 	bl	b4908 <hal_usart_is_enabled>
   b5b7e:	e7f2      	b.n	b5b66 <pinAvailable+0x5a>
   b5b80:	2003e750 	.word	0x2003e750
   b5b84:	2003e754 	.word	0x2003e754

000b5b88 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5b88:	2823      	cmp	r0, #35	; 0x23
{
   b5b8a:	b538      	push	{r3, r4, r5, lr}
   b5b8c:	4604      	mov	r4, r0
   b5b8e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5b90:	d80a      	bhi.n	b5ba8 <pinMode+0x20>
   b5b92:	29ff      	cmp	r1, #255	; 0xff
   b5b94:	d008      	beq.n	b5ba8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5b96:	f7ff ffb9 	bl	b5b0c <pinAvailable>
   b5b9a:	b128      	cbz	r0, b5ba8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5b9c:	4629      	mov	r1, r5
   b5b9e:	4620      	mov	r0, r4
}
   b5ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5ba4:	f7fe bf00 	b.w	b49a8 <HAL_Pin_Mode>
}
   b5ba8:	bd38      	pop	{r3, r4, r5, pc}

000b5baa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5baa:	b538      	push	{r3, r4, r5, lr}
   b5bac:	4604      	mov	r4, r0
   b5bae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5bb0:	f7fe ff02 	bl	b49b8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5bb4:	28ff      	cmp	r0, #255	; 0xff
   b5bb6:	d010      	beq.n	b5bda <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5bb8:	2806      	cmp	r0, #6
   b5bba:	d804      	bhi.n	b5bc6 <digitalWrite+0x1c>
   b5bbc:	234d      	movs	r3, #77	; 0x4d
   b5bbe:	fa23 f000 	lsr.w	r0, r3, r0
   b5bc2:	07c3      	lsls	r3, r0, #31
   b5bc4:	d409      	bmi.n	b5bda <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	f7ff ffa0 	bl	b5b0c <pinAvailable>
   b5bcc:	b128      	cbz	r0, b5bda <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5bce:	4629      	mov	r1, r5
   b5bd0:	4620      	mov	r0, r4
}
   b5bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5bd6:	f7fe bef7 	b.w	b49c8 <HAL_GPIO_Write>
}
   b5bda:	bd38      	pop	{r3, r4, r5, pc}

000b5bdc <_ZnajRKSt9nothrow_t>:
   b5bdc:	f7fe ba5b 	b.w	b4096 <_Znaj>

000b5be0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5be0:	4901      	ldr	r1, [pc, #4]	; (b5be8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5be2:	f000 b8f9 	b.w	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5be6:	bf00      	nop
   b5be8:	000b6b6c 	.word	0x000b6b6c

000b5bec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5bee:	2400      	movs	r4, #0
   b5bf0:	2310      	movs	r3, #16
   b5bf2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5bf6:	6803      	ldr	r3, [r0, #0]
   b5bf8:	4615      	mov	r5, r2
   b5bfa:	699e      	ldr	r6, [r3, #24]
   b5bfc:	6812      	ldr	r2, [r2, #0]
   b5bfe:	466b      	mov	r3, sp
   b5c00:	e9cd 4400 	strd	r4, r4, [sp]
   b5c04:	47b0      	blx	r6
   b5c06:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5c0a:	f003 0306 	and.w	r3, r3, #6
   b5c0e:	2b06      	cmp	r3, #6
   b5c10:	bf03      	ittte	eq
   b5c12:	9b00      	ldreq	r3, [sp, #0]
   b5c14:	602b      	streq	r3, [r5, #0]
   b5c16:	2001      	moveq	r0, #1
   b5c18:	4620      	movne	r0, r4
   b5c1a:	b004      	add	sp, #16
   b5c1c:	bd70      	pop	{r4, r5, r6, pc}

000b5c1e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5c1e:	9800      	ldr	r0, [sp, #0]
   b5c20:	4290      	cmp	r0, r2
   b5c22:	bf14      	ite	ne
   b5c24:	2001      	movne	r0, #1
   b5c26:	2006      	moveq	r0, #6
   b5c28:	4770      	bx	lr
	...

000b5c2c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5c2c:	b510      	push	{r4, lr}
   b5c2e:	4b03      	ldr	r3, [pc, #12]	; (b5c3c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5c30:	6003      	str	r3, [r0, #0]
   b5c32:	4604      	mov	r4, r0
   b5c34:	f000 f8cd 	bl	b5dd2 <_ZNSt9type_infoD1Ev>
   b5c38:	4620      	mov	r0, r4
   b5c3a:	bd10      	pop	{r4, pc}
   b5c3c:	000b6bac 	.word	0x000b6bac

000b5c40 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5c40:	b510      	push	{r4, lr}
   b5c42:	4604      	mov	r4, r0
   b5c44:	f7ff fff2 	bl	b5c2c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5c48:	4620      	mov	r0, r4
   b5c4a:	2108      	movs	r1, #8
   b5c4c:	f7fe fa25 	bl	b409a <_ZdlPvj>
   b5c50:	4620      	mov	r0, r4
   b5c52:	bd10      	pop	{r4, pc}

000b5c54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c58:	461f      	mov	r7, r3
   b5c5a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5c5e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5c62:	4598      	cmp	r8, r3
   b5c64:	4606      	mov	r6, r0
   b5c66:	4615      	mov	r5, r2
   b5c68:	d107      	bne.n	b5c7a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5c6a:	9907      	ldr	r1, [sp, #28]
   b5c6c:	f000 f8b4 	bl	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5c70:	b118      	cbz	r0, b5c7a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5c72:	7165      	strb	r5, [r4, #5]
   b5c74:	2000      	movs	r0, #0
   b5c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5c7a:	4639      	mov	r1, r7
   b5c7c:	4630      	mov	r0, r6
   b5c7e:	f000 f8ab 	bl	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5c82:	2800      	cmp	r0, #0
   b5c84:	d0f6      	beq.n	b5c74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5c86:	2301      	movs	r3, #1
   b5c88:	f8c4 8000 	str.w	r8, [r4]
   b5c8c:	7125      	strb	r5, [r4, #4]
   b5c8e:	71a3      	strb	r3, [r4, #6]
   b5c90:	e7f0      	b.n	b5c74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5c92 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5c92:	b538      	push	{r3, r4, r5, lr}
   b5c94:	4615      	mov	r5, r2
   b5c96:	461c      	mov	r4, r3
   b5c98:	f000 f89e 	bl	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5c9c:	b120      	cbz	r0, b5ca8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5c9e:	2308      	movs	r3, #8
   b5ca0:	60e3      	str	r3, [r4, #12]
   b5ca2:	2306      	movs	r3, #6
   b5ca4:	6025      	str	r5, [r4, #0]
   b5ca6:	7123      	strb	r3, [r4, #4]
   b5ca8:	bd38      	pop	{r3, r4, r5, pc}

000b5caa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5cac:	4605      	mov	r5, r0
   b5cae:	460c      	mov	r4, r1
   b5cb0:	9201      	str	r2, [sp, #4]
   b5cb2:	461e      	mov	r6, r3
   b5cb4:	f000 f890 	bl	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5cb8:	b950      	cbnz	r0, b5cd0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5cba:	2e03      	cmp	r6, #3
   b5cbc:	d808      	bhi.n	b5cd0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5cbe:	6823      	ldr	r3, [r4, #0]
   b5cc0:	9a01      	ldr	r2, [sp, #4]
   b5cc2:	695b      	ldr	r3, [r3, #20]
   b5cc4:	4629      	mov	r1, r5
   b5cc6:	4620      	mov	r0, r4
   b5cc8:	b002      	add	sp, #8
   b5cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5cce:	4718      	bx	r3
   b5cd0:	b002      	add	sp, #8
   b5cd2:	bd70      	pop	{r4, r5, r6, pc}

000b5cd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5cd4:	b510      	push	{r4, lr}
   b5cd6:	4b03      	ldr	r3, [pc, #12]	; (b5ce4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5cd8:	6003      	str	r3, [r0, #0]
   b5cda:	4604      	mov	r4, r0
   b5cdc:	f7ff ffa6 	bl	b5c2c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5ce0:	4620      	mov	r0, r4
   b5ce2:	bd10      	pop	{r4, pc}
   b5ce4:	000b6c0c 	.word	0x000b6c0c

000b5ce8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5ce8:	b510      	push	{r4, lr}
   b5cea:	4604      	mov	r4, r0
   b5cec:	f7ff fff2 	bl	b5cd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	210c      	movs	r1, #12
   b5cf4:	f7fe f9d1 	bl	b409a <_ZdlPvj>
   b5cf8:	4620      	mov	r0, r4
   b5cfa:	bd10      	pop	{r4, pc}

000b5cfc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5cfe:	9f08      	ldr	r7, [sp, #32]
   b5d00:	4297      	cmp	r7, r2
   b5d02:	4605      	mov	r5, r0
   b5d04:	460e      	mov	r6, r1
   b5d06:	4614      	mov	r4, r2
   b5d08:	d00a      	beq.n	b5d20 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5d0a:	68a8      	ldr	r0, [r5, #8]
   b5d0c:	6802      	ldr	r2, [r0, #0]
   b5d0e:	9708      	str	r7, [sp, #32]
   b5d10:	6a15      	ldr	r5, [r2, #32]
   b5d12:	4631      	mov	r1, r6
   b5d14:	4622      	mov	r2, r4
   b5d16:	46ac      	mov	ip, r5
   b5d18:	b003      	add	sp, #12
   b5d1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5d1e:	4760      	bx	ip
   b5d20:	4619      	mov	r1, r3
   b5d22:	9301      	str	r3, [sp, #4]
   b5d24:	f000 f858 	bl	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5d28:	9b01      	ldr	r3, [sp, #4]
   b5d2a:	2800      	cmp	r0, #0
   b5d2c:	d0ed      	beq.n	b5d0a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5d2e:	2006      	movs	r0, #6
   b5d30:	b003      	add	sp, #12
   b5d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5d34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5d34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d38:	460d      	mov	r5, r1
   b5d3a:	4619      	mov	r1, r3
   b5d3c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5d40:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5d44:	4681      	mov	r9, r0
   b5d46:	4617      	mov	r7, r2
   b5d48:	4698      	mov	r8, r3
   b5d4a:	f000 f845 	bl	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5d4e:	b190      	cbz	r0, b5d76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5d50:	2d00      	cmp	r5, #0
   b5d52:	6034      	str	r4, [r6, #0]
   b5d54:	7137      	strb	r7, [r6, #4]
   b5d56:	db09      	blt.n	b5d6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5d58:	1961      	adds	r1, r4, r5
   b5d5a:	458a      	cmp	sl, r1
   b5d5c:	bf0c      	ite	eq
   b5d5e:	2106      	moveq	r1, #6
   b5d60:	2101      	movne	r1, #1
   b5d62:	71b1      	strb	r1, [r6, #6]
   b5d64:	2000      	movs	r0, #0
   b5d66:	b001      	add	sp, #4
   b5d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5d6c:	3502      	adds	r5, #2
   b5d6e:	d1f9      	bne.n	b5d64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5d70:	2301      	movs	r3, #1
   b5d72:	71b3      	strb	r3, [r6, #6]
   b5d74:	e7f6      	b.n	b5d64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5d76:	4554      	cmp	r4, sl
   b5d78:	d106      	bne.n	b5d88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5d7a:	4659      	mov	r1, fp
   b5d7c:	4648      	mov	r0, r9
   b5d7e:	f000 f82b 	bl	b5dd8 <_ZNKSt9type_infoeqERKS_>
   b5d82:	b108      	cbz	r0, b5d88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5d84:	7177      	strb	r7, [r6, #5]
   b5d86:	e7ed      	b.n	b5d64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5d88:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5d8c:	6803      	ldr	r3, [r0, #0]
   b5d8e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5d92:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5d96:	69dc      	ldr	r4, [r3, #28]
   b5d98:	463a      	mov	r2, r7
   b5d9a:	4643      	mov	r3, r8
   b5d9c:	4629      	mov	r1, r5
   b5d9e:	46a4      	mov	ip, r4
   b5da0:	b001      	add	sp, #4
   b5da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5da6:	4760      	bx	ip

000b5da8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5dac:	4607      	mov	r7, r0
   b5dae:	460c      	mov	r4, r1
   b5db0:	4615      	mov	r5, r2
   b5db2:	461e      	mov	r6, r3
   b5db4:	f7ff ff6d 	bl	b5c92 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5db8:	b948      	cbnz	r0, b5dce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5dba:	68b8      	ldr	r0, [r7, #8]
   b5dbc:	6803      	ldr	r3, [r0, #0]
   b5dbe:	699f      	ldr	r7, [r3, #24]
   b5dc0:	462a      	mov	r2, r5
   b5dc2:	4633      	mov	r3, r6
   b5dc4:	4621      	mov	r1, r4
   b5dc6:	46bc      	mov	ip, r7
   b5dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5dcc:	4760      	bx	ip
   b5dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5dd2 <_ZNSt9type_infoD1Ev>:
   b5dd2:	4770      	bx	lr

000b5dd4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b5dd4:	2000      	movs	r0, #0
   b5dd6:	4770      	bx	lr

000b5dd8 <_ZNKSt9type_infoeqERKS_>:
   b5dd8:	4281      	cmp	r1, r0
   b5dda:	b508      	push	{r3, lr}
   b5ddc:	d00e      	beq.n	b5dfc <_ZNKSt9type_infoeqERKS_+0x24>
   b5dde:	6840      	ldr	r0, [r0, #4]
   b5de0:	7803      	ldrb	r3, [r0, #0]
   b5de2:	2b2a      	cmp	r3, #42	; 0x2a
   b5de4:	d00c      	beq.n	b5e00 <_ZNKSt9type_infoeqERKS_+0x28>
   b5de6:	6849      	ldr	r1, [r1, #4]
   b5de8:	780b      	ldrb	r3, [r1, #0]
   b5dea:	2b2a      	cmp	r3, #42	; 0x2a
   b5dec:	bf08      	it	eq
   b5dee:	3101      	addeq	r1, #1
   b5df0:	f000 fcae 	bl	b6750 <strcmp>
   b5df4:	fab0 f080 	clz	r0, r0
   b5df8:	0940      	lsrs	r0, r0, #5
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	2001      	movs	r0, #1
   b5dfe:	e7fc      	b.n	b5dfa <_ZNKSt9type_infoeqERKS_+0x22>
   b5e00:	2000      	movs	r0, #0
   b5e02:	e7fa      	b.n	b5dfa <_ZNKSt9type_infoeqERKS_+0x22>

000b5e04 <__aeabi_drsub>:
   b5e04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5e08:	e002      	b.n	b5e10 <__adddf3>
   b5e0a:	bf00      	nop

000b5e0c <__aeabi_dsub>:
   b5e0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5e10 <__adddf3>:
   b5e10:	b530      	push	{r4, r5, lr}
   b5e12:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5e16:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b5e1a:	ea94 0f05 	teq	r4, r5
   b5e1e:	bf08      	it	eq
   b5e20:	ea90 0f02 	teqeq	r0, r2
   b5e24:	bf1f      	itttt	ne
   b5e26:	ea54 0c00 	orrsne.w	ip, r4, r0
   b5e2a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5e2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5e32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5e36:	f000 80e2 	beq.w	b5ffe <__adddf3+0x1ee>
   b5e3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5e3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5e42:	bfb8      	it	lt
   b5e44:	426d      	neglt	r5, r5
   b5e46:	dd0c      	ble.n	b5e62 <__adddf3+0x52>
   b5e48:	442c      	add	r4, r5
   b5e4a:	ea80 0202 	eor.w	r2, r0, r2
   b5e4e:	ea81 0303 	eor.w	r3, r1, r3
   b5e52:	ea82 0000 	eor.w	r0, r2, r0
   b5e56:	ea83 0101 	eor.w	r1, r3, r1
   b5e5a:	ea80 0202 	eor.w	r2, r0, r2
   b5e5e:	ea81 0303 	eor.w	r3, r1, r3
   b5e62:	2d36      	cmp	r5, #54	; 0x36
   b5e64:	bf88      	it	hi
   b5e66:	bd30      	pophi	{r4, r5, pc}
   b5e68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5e6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5e70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5e74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5e78:	d002      	beq.n	b5e80 <__adddf3+0x70>
   b5e7a:	4240      	negs	r0, r0
   b5e7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5e80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5e84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5e88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5e8c:	d002      	beq.n	b5e94 <__adddf3+0x84>
   b5e8e:	4252      	negs	r2, r2
   b5e90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5e94:	ea94 0f05 	teq	r4, r5
   b5e98:	f000 80a7 	beq.w	b5fea <__adddf3+0x1da>
   b5e9c:	f1a4 0401 	sub.w	r4, r4, #1
   b5ea0:	f1d5 0e20 	rsbs	lr, r5, #32
   b5ea4:	db0d      	blt.n	b5ec2 <__adddf3+0xb2>
   b5ea6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5eaa:	fa22 f205 	lsr.w	r2, r2, r5
   b5eae:	1880      	adds	r0, r0, r2
   b5eb0:	f141 0100 	adc.w	r1, r1, #0
   b5eb4:	fa03 f20e 	lsl.w	r2, r3, lr
   b5eb8:	1880      	adds	r0, r0, r2
   b5eba:	fa43 f305 	asr.w	r3, r3, r5
   b5ebe:	4159      	adcs	r1, r3
   b5ec0:	e00e      	b.n	b5ee0 <__adddf3+0xd0>
   b5ec2:	f1a5 0520 	sub.w	r5, r5, #32
   b5ec6:	f10e 0e20 	add.w	lr, lr, #32
   b5eca:	2a01      	cmp	r2, #1
   b5ecc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5ed0:	bf28      	it	cs
   b5ed2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5ed6:	fa43 f305 	asr.w	r3, r3, r5
   b5eda:	18c0      	adds	r0, r0, r3
   b5edc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5ee0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5ee4:	d507      	bpl.n	b5ef6 <__adddf3+0xe6>
   b5ee6:	f04f 0e00 	mov.w	lr, #0
   b5eea:	f1dc 0c00 	rsbs	ip, ip, #0
   b5eee:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5ef2:	eb6e 0101 	sbc.w	r1, lr, r1
   b5ef6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b5efa:	d31b      	bcc.n	b5f34 <__adddf3+0x124>
   b5efc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5f00:	d30c      	bcc.n	b5f1c <__adddf3+0x10c>
   b5f02:	0849      	lsrs	r1, r1, #1
   b5f04:	ea5f 0030 	movs.w	r0, r0, rrx
   b5f08:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5f0c:	f104 0401 	add.w	r4, r4, #1
   b5f10:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5f14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5f18:	f080 809a 	bcs.w	b6050 <__adddf3+0x240>
   b5f1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5f20:	bf08      	it	eq
   b5f22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5f26:	f150 0000 	adcs.w	r0, r0, #0
   b5f2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5f2e:	ea41 0105 	orr.w	r1, r1, r5
   b5f32:	bd30      	pop	{r4, r5, pc}
   b5f34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b5f38:	4140      	adcs	r0, r0
   b5f3a:	eb41 0101 	adc.w	r1, r1, r1
   b5f3e:	3c01      	subs	r4, #1
   b5f40:	bf28      	it	cs
   b5f42:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b5f46:	d2e9      	bcs.n	b5f1c <__adddf3+0x10c>
   b5f48:	f091 0f00 	teq	r1, #0
   b5f4c:	bf04      	itt	eq
   b5f4e:	4601      	moveq	r1, r0
   b5f50:	2000      	moveq	r0, #0
   b5f52:	fab1 f381 	clz	r3, r1
   b5f56:	bf08      	it	eq
   b5f58:	3320      	addeq	r3, #32
   b5f5a:	f1a3 030b 	sub.w	r3, r3, #11
   b5f5e:	f1b3 0220 	subs.w	r2, r3, #32
   b5f62:	da0c      	bge.n	b5f7e <__adddf3+0x16e>
   b5f64:	320c      	adds	r2, #12
   b5f66:	dd08      	ble.n	b5f7a <__adddf3+0x16a>
   b5f68:	f102 0c14 	add.w	ip, r2, #20
   b5f6c:	f1c2 020c 	rsb	r2, r2, #12
   b5f70:	fa01 f00c 	lsl.w	r0, r1, ip
   b5f74:	fa21 f102 	lsr.w	r1, r1, r2
   b5f78:	e00c      	b.n	b5f94 <__adddf3+0x184>
   b5f7a:	f102 0214 	add.w	r2, r2, #20
   b5f7e:	bfd8      	it	le
   b5f80:	f1c2 0c20 	rsble	ip, r2, #32
   b5f84:	fa01 f102 	lsl.w	r1, r1, r2
   b5f88:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5f8c:	bfdc      	itt	le
   b5f8e:	ea41 010c 	orrle.w	r1, r1, ip
   b5f92:	4090      	lslle	r0, r2
   b5f94:	1ae4      	subs	r4, r4, r3
   b5f96:	bfa2      	ittt	ge
   b5f98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5f9c:	4329      	orrge	r1, r5
   b5f9e:	bd30      	popge	{r4, r5, pc}
   b5fa0:	ea6f 0404 	mvn.w	r4, r4
   b5fa4:	3c1f      	subs	r4, #31
   b5fa6:	da1c      	bge.n	b5fe2 <__adddf3+0x1d2>
   b5fa8:	340c      	adds	r4, #12
   b5faa:	dc0e      	bgt.n	b5fca <__adddf3+0x1ba>
   b5fac:	f104 0414 	add.w	r4, r4, #20
   b5fb0:	f1c4 0220 	rsb	r2, r4, #32
   b5fb4:	fa20 f004 	lsr.w	r0, r0, r4
   b5fb8:	fa01 f302 	lsl.w	r3, r1, r2
   b5fbc:	ea40 0003 	orr.w	r0, r0, r3
   b5fc0:	fa21 f304 	lsr.w	r3, r1, r4
   b5fc4:	ea45 0103 	orr.w	r1, r5, r3
   b5fc8:	bd30      	pop	{r4, r5, pc}
   b5fca:	f1c4 040c 	rsb	r4, r4, #12
   b5fce:	f1c4 0220 	rsb	r2, r4, #32
   b5fd2:	fa20 f002 	lsr.w	r0, r0, r2
   b5fd6:	fa01 f304 	lsl.w	r3, r1, r4
   b5fda:	ea40 0003 	orr.w	r0, r0, r3
   b5fde:	4629      	mov	r1, r5
   b5fe0:	bd30      	pop	{r4, r5, pc}
   b5fe2:	fa21 f004 	lsr.w	r0, r1, r4
   b5fe6:	4629      	mov	r1, r5
   b5fe8:	bd30      	pop	{r4, r5, pc}
   b5fea:	f094 0f00 	teq	r4, #0
   b5fee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5ff2:	bf06      	itte	eq
   b5ff4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5ff8:	3401      	addeq	r4, #1
   b5ffa:	3d01      	subne	r5, #1
   b5ffc:	e74e      	b.n	b5e9c <__adddf3+0x8c>
   b5ffe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6002:	bf18      	it	ne
   b6004:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6008:	d029      	beq.n	b605e <__adddf3+0x24e>
   b600a:	ea94 0f05 	teq	r4, r5
   b600e:	bf08      	it	eq
   b6010:	ea90 0f02 	teqeq	r0, r2
   b6014:	d005      	beq.n	b6022 <__adddf3+0x212>
   b6016:	ea54 0c00 	orrs.w	ip, r4, r0
   b601a:	bf04      	itt	eq
   b601c:	4619      	moveq	r1, r3
   b601e:	4610      	moveq	r0, r2
   b6020:	bd30      	pop	{r4, r5, pc}
   b6022:	ea91 0f03 	teq	r1, r3
   b6026:	bf1e      	ittt	ne
   b6028:	2100      	movne	r1, #0
   b602a:	2000      	movne	r0, #0
   b602c:	bd30      	popne	{r4, r5, pc}
   b602e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6032:	d105      	bne.n	b6040 <__adddf3+0x230>
   b6034:	0040      	lsls	r0, r0, #1
   b6036:	4149      	adcs	r1, r1
   b6038:	bf28      	it	cs
   b603a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b603e:	bd30      	pop	{r4, r5, pc}
   b6040:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6044:	bf3c      	itt	cc
   b6046:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b604a:	bd30      	popcc	{r4, r5, pc}
   b604c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6050:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6054:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6058:	f04f 0000 	mov.w	r0, #0
   b605c:	bd30      	pop	{r4, r5, pc}
   b605e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6062:	bf1a      	itte	ne
   b6064:	4619      	movne	r1, r3
   b6066:	4610      	movne	r0, r2
   b6068:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b606c:	bf1c      	itt	ne
   b606e:	460b      	movne	r3, r1
   b6070:	4602      	movne	r2, r0
   b6072:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6076:	bf06      	itte	eq
   b6078:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b607c:	ea91 0f03 	teqeq	r1, r3
   b6080:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6084:	bd30      	pop	{r4, r5, pc}
   b6086:	bf00      	nop

000b6088 <__aeabi_ui2d>:
   b6088:	f090 0f00 	teq	r0, #0
   b608c:	bf04      	itt	eq
   b608e:	2100      	moveq	r1, #0
   b6090:	4770      	bxeq	lr
   b6092:	b530      	push	{r4, r5, lr}
   b6094:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6098:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b609c:	f04f 0500 	mov.w	r5, #0
   b60a0:	f04f 0100 	mov.w	r1, #0
   b60a4:	e750      	b.n	b5f48 <__adddf3+0x138>
   b60a6:	bf00      	nop

000b60a8 <__aeabi_i2d>:
   b60a8:	f090 0f00 	teq	r0, #0
   b60ac:	bf04      	itt	eq
   b60ae:	2100      	moveq	r1, #0
   b60b0:	4770      	bxeq	lr
   b60b2:	b530      	push	{r4, r5, lr}
   b60b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b60b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b60bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b60c0:	bf48      	it	mi
   b60c2:	4240      	negmi	r0, r0
   b60c4:	f04f 0100 	mov.w	r1, #0
   b60c8:	e73e      	b.n	b5f48 <__adddf3+0x138>
   b60ca:	bf00      	nop

000b60cc <__aeabi_f2d>:
   b60cc:	0042      	lsls	r2, r0, #1
   b60ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b60d2:	ea4f 0131 	mov.w	r1, r1, rrx
   b60d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b60da:	bf1f      	itttt	ne
   b60dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b60e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b60e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b60e8:	4770      	bxne	lr
   b60ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b60ee:	bf08      	it	eq
   b60f0:	4770      	bxeq	lr
   b60f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b60f6:	bf04      	itt	eq
   b60f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b60fc:	4770      	bxeq	lr
   b60fe:	b530      	push	{r4, r5, lr}
   b6100:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6104:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6108:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b610c:	e71c      	b.n	b5f48 <__adddf3+0x138>
   b610e:	bf00      	nop

000b6110 <__aeabi_ul2d>:
   b6110:	ea50 0201 	orrs.w	r2, r0, r1
   b6114:	bf08      	it	eq
   b6116:	4770      	bxeq	lr
   b6118:	b530      	push	{r4, r5, lr}
   b611a:	f04f 0500 	mov.w	r5, #0
   b611e:	e00a      	b.n	b6136 <__aeabi_l2d+0x16>

000b6120 <__aeabi_l2d>:
   b6120:	ea50 0201 	orrs.w	r2, r0, r1
   b6124:	bf08      	it	eq
   b6126:	4770      	bxeq	lr
   b6128:	b530      	push	{r4, r5, lr}
   b612a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b612e:	d502      	bpl.n	b6136 <__aeabi_l2d+0x16>
   b6130:	4240      	negs	r0, r0
   b6132:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6136:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b613a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b613e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6142:	f43f aed8 	beq.w	b5ef6 <__adddf3+0xe6>
   b6146:	f04f 0203 	mov.w	r2, #3
   b614a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b614e:	bf18      	it	ne
   b6150:	3203      	addne	r2, #3
   b6152:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6156:	bf18      	it	ne
   b6158:	3203      	addne	r2, #3
   b615a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b615e:	f1c2 0320 	rsb	r3, r2, #32
   b6162:	fa00 fc03 	lsl.w	ip, r0, r3
   b6166:	fa20 f002 	lsr.w	r0, r0, r2
   b616a:	fa01 fe03 	lsl.w	lr, r1, r3
   b616e:	ea40 000e 	orr.w	r0, r0, lr
   b6172:	fa21 f102 	lsr.w	r1, r1, r2
   b6176:	4414      	add	r4, r2
   b6178:	e6bd      	b.n	b5ef6 <__adddf3+0xe6>
   b617a:	bf00      	nop

000b617c <__aeabi_dmul>:
   b617c:	b570      	push	{r4, r5, r6, lr}
   b617e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6182:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6186:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b618a:	bf1d      	ittte	ne
   b618c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6190:	ea94 0f0c 	teqne	r4, ip
   b6194:	ea95 0f0c 	teqne	r5, ip
   b6198:	f000 f8de 	bleq	b6358 <__aeabi_dmul+0x1dc>
   b619c:	442c      	add	r4, r5
   b619e:	ea81 0603 	eor.w	r6, r1, r3
   b61a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b61a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b61aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b61ae:	bf18      	it	ne
   b61b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b61b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b61b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b61bc:	d038      	beq.n	b6230 <__aeabi_dmul+0xb4>
   b61be:	fba0 ce02 	umull	ip, lr, r0, r2
   b61c2:	f04f 0500 	mov.w	r5, #0
   b61c6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b61ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b61ce:	fbe0 e503 	umlal	lr, r5, r0, r3
   b61d2:	f04f 0600 	mov.w	r6, #0
   b61d6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b61da:	f09c 0f00 	teq	ip, #0
   b61de:	bf18      	it	ne
   b61e0:	f04e 0e01 	orrne.w	lr, lr, #1
   b61e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b61e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b61ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b61f0:	d204      	bcs.n	b61fc <__aeabi_dmul+0x80>
   b61f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b61f6:	416d      	adcs	r5, r5
   b61f8:	eb46 0606 	adc.w	r6, r6, r6
   b61fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6200:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6204:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6208:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b620c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6210:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6214:	bf88      	it	hi
   b6216:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b621a:	d81e      	bhi.n	b625a <__aeabi_dmul+0xde>
   b621c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6220:	bf08      	it	eq
   b6222:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6226:	f150 0000 	adcs.w	r0, r0, #0
   b622a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b622e:	bd70      	pop	{r4, r5, r6, pc}
   b6230:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6234:	ea46 0101 	orr.w	r1, r6, r1
   b6238:	ea40 0002 	orr.w	r0, r0, r2
   b623c:	ea81 0103 	eor.w	r1, r1, r3
   b6240:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6244:	bfc2      	ittt	gt
   b6246:	ebd4 050c 	rsbsgt	r5, r4, ip
   b624a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b624e:	bd70      	popgt	{r4, r5, r6, pc}
   b6250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6254:	f04f 0e00 	mov.w	lr, #0
   b6258:	3c01      	subs	r4, #1
   b625a:	f300 80ab 	bgt.w	b63b4 <__aeabi_dmul+0x238>
   b625e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6262:	bfde      	ittt	le
   b6264:	2000      	movle	r0, #0
   b6266:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b626a:	bd70      	pople	{r4, r5, r6, pc}
   b626c:	f1c4 0400 	rsb	r4, r4, #0
   b6270:	3c20      	subs	r4, #32
   b6272:	da35      	bge.n	b62e0 <__aeabi_dmul+0x164>
   b6274:	340c      	adds	r4, #12
   b6276:	dc1b      	bgt.n	b62b0 <__aeabi_dmul+0x134>
   b6278:	f104 0414 	add.w	r4, r4, #20
   b627c:	f1c4 0520 	rsb	r5, r4, #32
   b6280:	fa00 f305 	lsl.w	r3, r0, r5
   b6284:	fa20 f004 	lsr.w	r0, r0, r4
   b6288:	fa01 f205 	lsl.w	r2, r1, r5
   b628c:	ea40 0002 	orr.w	r0, r0, r2
   b6290:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6294:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6298:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b629c:	fa21 f604 	lsr.w	r6, r1, r4
   b62a0:	eb42 0106 	adc.w	r1, r2, r6
   b62a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b62a8:	bf08      	it	eq
   b62aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b62ae:	bd70      	pop	{r4, r5, r6, pc}
   b62b0:	f1c4 040c 	rsb	r4, r4, #12
   b62b4:	f1c4 0520 	rsb	r5, r4, #32
   b62b8:	fa00 f304 	lsl.w	r3, r0, r4
   b62bc:	fa20 f005 	lsr.w	r0, r0, r5
   b62c0:	fa01 f204 	lsl.w	r2, r1, r4
   b62c4:	ea40 0002 	orr.w	r0, r0, r2
   b62c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b62cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b62d0:	f141 0100 	adc.w	r1, r1, #0
   b62d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b62d8:	bf08      	it	eq
   b62da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b62de:	bd70      	pop	{r4, r5, r6, pc}
   b62e0:	f1c4 0520 	rsb	r5, r4, #32
   b62e4:	fa00 f205 	lsl.w	r2, r0, r5
   b62e8:	ea4e 0e02 	orr.w	lr, lr, r2
   b62ec:	fa20 f304 	lsr.w	r3, r0, r4
   b62f0:	fa01 f205 	lsl.w	r2, r1, r5
   b62f4:	ea43 0302 	orr.w	r3, r3, r2
   b62f8:	fa21 f004 	lsr.w	r0, r1, r4
   b62fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6300:	fa21 f204 	lsr.w	r2, r1, r4
   b6304:	ea20 0002 	bic.w	r0, r0, r2
   b6308:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b630c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6310:	bf08      	it	eq
   b6312:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6316:	bd70      	pop	{r4, r5, r6, pc}
   b6318:	f094 0f00 	teq	r4, #0
   b631c:	d10f      	bne.n	b633e <__aeabi_dmul+0x1c2>
   b631e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6322:	0040      	lsls	r0, r0, #1
   b6324:	eb41 0101 	adc.w	r1, r1, r1
   b6328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b632c:	bf08      	it	eq
   b632e:	3c01      	subeq	r4, #1
   b6330:	d0f7      	beq.n	b6322 <__aeabi_dmul+0x1a6>
   b6332:	ea41 0106 	orr.w	r1, r1, r6
   b6336:	f095 0f00 	teq	r5, #0
   b633a:	bf18      	it	ne
   b633c:	4770      	bxne	lr
   b633e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6342:	0052      	lsls	r2, r2, #1
   b6344:	eb43 0303 	adc.w	r3, r3, r3
   b6348:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b634c:	bf08      	it	eq
   b634e:	3d01      	subeq	r5, #1
   b6350:	d0f7      	beq.n	b6342 <__aeabi_dmul+0x1c6>
   b6352:	ea43 0306 	orr.w	r3, r3, r6
   b6356:	4770      	bx	lr
   b6358:	ea94 0f0c 	teq	r4, ip
   b635c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6360:	bf18      	it	ne
   b6362:	ea95 0f0c 	teqne	r5, ip
   b6366:	d00c      	beq.n	b6382 <__aeabi_dmul+0x206>
   b6368:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b636c:	bf18      	it	ne
   b636e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6372:	d1d1      	bne.n	b6318 <__aeabi_dmul+0x19c>
   b6374:	ea81 0103 	eor.w	r1, r1, r3
   b6378:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b637c:	f04f 0000 	mov.w	r0, #0
   b6380:	bd70      	pop	{r4, r5, r6, pc}
   b6382:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6386:	bf06      	itte	eq
   b6388:	4610      	moveq	r0, r2
   b638a:	4619      	moveq	r1, r3
   b638c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6390:	d019      	beq.n	b63c6 <__aeabi_dmul+0x24a>
   b6392:	ea94 0f0c 	teq	r4, ip
   b6396:	d102      	bne.n	b639e <__aeabi_dmul+0x222>
   b6398:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b639c:	d113      	bne.n	b63c6 <__aeabi_dmul+0x24a>
   b639e:	ea95 0f0c 	teq	r5, ip
   b63a2:	d105      	bne.n	b63b0 <__aeabi_dmul+0x234>
   b63a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b63a8:	bf1c      	itt	ne
   b63aa:	4610      	movne	r0, r2
   b63ac:	4619      	movne	r1, r3
   b63ae:	d10a      	bne.n	b63c6 <__aeabi_dmul+0x24a>
   b63b0:	ea81 0103 	eor.w	r1, r1, r3
   b63b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b63b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b63bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b63c0:	f04f 0000 	mov.w	r0, #0
   b63c4:	bd70      	pop	{r4, r5, r6, pc}
   b63c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b63ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b63ce:	bd70      	pop	{r4, r5, r6, pc}

000b63d0 <__aeabi_ddiv>:
   b63d0:	b570      	push	{r4, r5, r6, lr}
   b63d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b63d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b63da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b63de:	bf1d      	ittte	ne
   b63e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b63e4:	ea94 0f0c 	teqne	r4, ip
   b63e8:	ea95 0f0c 	teqne	r5, ip
   b63ec:	f000 f8a7 	bleq	b653e <__aeabi_ddiv+0x16e>
   b63f0:	eba4 0405 	sub.w	r4, r4, r5
   b63f4:	ea81 0e03 	eor.w	lr, r1, r3
   b63f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b63fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6400:	f000 8088 	beq.w	b6514 <__aeabi_ddiv+0x144>
   b6404:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6408:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b640c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6410:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6414:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6418:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b641c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6420:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6424:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6428:	429d      	cmp	r5, r3
   b642a:	bf08      	it	eq
   b642c:	4296      	cmpeq	r6, r2
   b642e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6432:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6436:	d202      	bcs.n	b643e <__aeabi_ddiv+0x6e>
   b6438:	085b      	lsrs	r3, r3, #1
   b643a:	ea4f 0232 	mov.w	r2, r2, rrx
   b643e:	1ab6      	subs	r6, r6, r2
   b6440:	eb65 0503 	sbc.w	r5, r5, r3
   b6444:	085b      	lsrs	r3, r3, #1
   b6446:	ea4f 0232 	mov.w	r2, r2, rrx
   b644a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b644e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6452:	ebb6 0e02 	subs.w	lr, r6, r2
   b6456:	eb75 0e03 	sbcs.w	lr, r5, r3
   b645a:	bf22      	ittt	cs
   b645c:	1ab6      	subcs	r6, r6, r2
   b645e:	4675      	movcs	r5, lr
   b6460:	ea40 000c 	orrcs.w	r0, r0, ip
   b6464:	085b      	lsrs	r3, r3, #1
   b6466:	ea4f 0232 	mov.w	r2, r2, rrx
   b646a:	ebb6 0e02 	subs.w	lr, r6, r2
   b646e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6472:	bf22      	ittt	cs
   b6474:	1ab6      	subcs	r6, r6, r2
   b6476:	4675      	movcs	r5, lr
   b6478:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b647c:	085b      	lsrs	r3, r3, #1
   b647e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6482:	ebb6 0e02 	subs.w	lr, r6, r2
   b6486:	eb75 0e03 	sbcs.w	lr, r5, r3
   b648a:	bf22      	ittt	cs
   b648c:	1ab6      	subcs	r6, r6, r2
   b648e:	4675      	movcs	r5, lr
   b6490:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6494:	085b      	lsrs	r3, r3, #1
   b6496:	ea4f 0232 	mov.w	r2, r2, rrx
   b649a:	ebb6 0e02 	subs.w	lr, r6, r2
   b649e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b64a2:	bf22      	ittt	cs
   b64a4:	1ab6      	subcs	r6, r6, r2
   b64a6:	4675      	movcs	r5, lr
   b64a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b64ac:	ea55 0e06 	orrs.w	lr, r5, r6
   b64b0:	d018      	beq.n	b64e4 <__aeabi_ddiv+0x114>
   b64b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b64b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b64ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b64be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b64c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b64c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b64ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b64ce:	d1c0      	bne.n	b6452 <__aeabi_ddiv+0x82>
   b64d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b64d4:	d10b      	bne.n	b64ee <__aeabi_ddiv+0x11e>
   b64d6:	ea41 0100 	orr.w	r1, r1, r0
   b64da:	f04f 0000 	mov.w	r0, #0
   b64de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b64e2:	e7b6      	b.n	b6452 <__aeabi_ddiv+0x82>
   b64e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b64e8:	bf04      	itt	eq
   b64ea:	4301      	orreq	r1, r0
   b64ec:	2000      	moveq	r0, #0
   b64ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b64f2:	bf88      	it	hi
   b64f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b64f8:	f63f aeaf 	bhi.w	b625a <__aeabi_dmul+0xde>
   b64fc:	ebb5 0c03 	subs.w	ip, r5, r3
   b6500:	bf04      	itt	eq
   b6502:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6506:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b650a:	f150 0000 	adcs.w	r0, r0, #0
   b650e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6512:	bd70      	pop	{r4, r5, r6, pc}
   b6514:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6518:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b651c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6520:	bfc2      	ittt	gt
   b6522:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b652a:	bd70      	popgt	{r4, r5, r6, pc}
   b652c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6530:	f04f 0e00 	mov.w	lr, #0
   b6534:	3c01      	subs	r4, #1
   b6536:	e690      	b.n	b625a <__aeabi_dmul+0xde>
   b6538:	ea45 0e06 	orr.w	lr, r5, r6
   b653c:	e68d      	b.n	b625a <__aeabi_dmul+0xde>
   b653e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6542:	ea94 0f0c 	teq	r4, ip
   b6546:	bf08      	it	eq
   b6548:	ea95 0f0c 	teqeq	r5, ip
   b654c:	f43f af3b 	beq.w	b63c6 <__aeabi_dmul+0x24a>
   b6550:	ea94 0f0c 	teq	r4, ip
   b6554:	d10a      	bne.n	b656c <__aeabi_ddiv+0x19c>
   b6556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b655a:	f47f af34 	bne.w	b63c6 <__aeabi_dmul+0x24a>
   b655e:	ea95 0f0c 	teq	r5, ip
   b6562:	f47f af25 	bne.w	b63b0 <__aeabi_dmul+0x234>
   b6566:	4610      	mov	r0, r2
   b6568:	4619      	mov	r1, r3
   b656a:	e72c      	b.n	b63c6 <__aeabi_dmul+0x24a>
   b656c:	ea95 0f0c 	teq	r5, ip
   b6570:	d106      	bne.n	b6580 <__aeabi_ddiv+0x1b0>
   b6572:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6576:	f43f aefd 	beq.w	b6374 <__aeabi_dmul+0x1f8>
   b657a:	4610      	mov	r0, r2
   b657c:	4619      	mov	r1, r3
   b657e:	e722      	b.n	b63c6 <__aeabi_dmul+0x24a>
   b6580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6584:	bf18      	it	ne
   b6586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b658a:	f47f aec5 	bne.w	b6318 <__aeabi_dmul+0x19c>
   b658e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6592:	f47f af0d 	bne.w	b63b0 <__aeabi_dmul+0x234>
   b6596:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b659a:	f47f aeeb 	bne.w	b6374 <__aeabi_dmul+0x1f8>
   b659e:	e712      	b.n	b63c6 <__aeabi_dmul+0x24a>

000b65a0 <__aeabi_d2f>:
   b65a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b65a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b65a8:	bf24      	itt	cs
   b65aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b65ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b65b2:	d90d      	bls.n	b65d0 <__aeabi_d2f+0x30>
   b65b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b65b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b65bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b65c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b65c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b65c8:	bf08      	it	eq
   b65ca:	f020 0001 	biceq.w	r0, r0, #1
   b65ce:	4770      	bx	lr
   b65d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b65d4:	d121      	bne.n	b661a <__aeabi_d2f+0x7a>
   b65d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b65da:	bfbc      	itt	lt
   b65dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b65e0:	4770      	bxlt	lr
   b65e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b65e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b65ea:	f1c2 0218 	rsb	r2, r2, #24
   b65ee:	f1c2 0c20 	rsb	ip, r2, #32
   b65f2:	fa10 f30c 	lsls.w	r3, r0, ip
   b65f6:	fa20 f002 	lsr.w	r0, r0, r2
   b65fa:	bf18      	it	ne
   b65fc:	f040 0001 	orrne.w	r0, r0, #1
   b6600:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6604:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6608:	fa03 fc0c 	lsl.w	ip, r3, ip
   b660c:	ea40 000c 	orr.w	r0, r0, ip
   b6610:	fa23 f302 	lsr.w	r3, r3, r2
   b6614:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6618:	e7cc      	b.n	b65b4 <__aeabi_d2f+0x14>
   b661a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b661e:	d107      	bne.n	b6630 <__aeabi_d2f+0x90>
   b6620:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6624:	bf1e      	ittt	ne
   b6626:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b662a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b662e:	4770      	bxne	lr
   b6630:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6634:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6638:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b663c:	4770      	bx	lr
   b663e:	bf00      	nop

000b6640 <atexit>:
   b6640:	2300      	movs	r3, #0
   b6642:	4601      	mov	r1, r0
   b6644:	461a      	mov	r2, r3
   b6646:	4618      	mov	r0, r3
   b6648:	f000 b894 	b.w	b6774 <__register_exitproc>

000b664c <memcpy>:
   b664c:	440a      	add	r2, r1
   b664e:	4291      	cmp	r1, r2
   b6650:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6654:	d100      	bne.n	b6658 <memcpy+0xc>
   b6656:	4770      	bx	lr
   b6658:	b510      	push	{r4, lr}
   b665a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b665e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6662:	4291      	cmp	r1, r2
   b6664:	d1f9      	bne.n	b665a <memcpy+0xe>
   b6666:	bd10      	pop	{r4, pc}

000b6668 <memset>:
   b6668:	4402      	add	r2, r0
   b666a:	4603      	mov	r3, r0
   b666c:	4293      	cmp	r3, r2
   b666e:	d100      	bne.n	b6672 <memset+0xa>
   b6670:	4770      	bx	lr
   b6672:	f803 1b01 	strb.w	r1, [r3], #1
   b6676:	e7f9      	b.n	b666c <memset+0x4>

000b6678 <srand>:
   b6678:	b538      	push	{r3, r4, r5, lr}
   b667a:	4b10      	ldr	r3, [pc, #64]	; (b66bc <srand+0x44>)
   b667c:	681d      	ldr	r5, [r3, #0]
   b667e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6680:	4604      	mov	r4, r0
   b6682:	b9b3      	cbnz	r3, b66b2 <srand+0x3a>
   b6684:	2018      	movs	r0, #24
   b6686:	f7fe fa4b 	bl	b4b20 <malloc>
   b668a:	4602      	mov	r2, r0
   b668c:	63a8      	str	r0, [r5, #56]	; 0x38
   b668e:	b920      	cbnz	r0, b669a <srand+0x22>
   b6690:	4b0b      	ldr	r3, [pc, #44]	; (b66c0 <srand+0x48>)
   b6692:	480c      	ldr	r0, [pc, #48]	; (b66c4 <srand+0x4c>)
   b6694:	2142      	movs	r1, #66	; 0x42
   b6696:	f7fe fa6b 	bl	b4b70 <__assert_func>
   b669a:	490b      	ldr	r1, [pc, #44]	; (b66c8 <srand+0x50>)
   b669c:	4b0b      	ldr	r3, [pc, #44]	; (b66cc <srand+0x54>)
   b669e:	e9c0 1300 	strd	r1, r3, [r0]
   b66a2:	4b0b      	ldr	r3, [pc, #44]	; (b66d0 <srand+0x58>)
   b66a4:	6083      	str	r3, [r0, #8]
   b66a6:	230b      	movs	r3, #11
   b66a8:	8183      	strh	r3, [r0, #12]
   b66aa:	2100      	movs	r1, #0
   b66ac:	2001      	movs	r0, #1
   b66ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b66b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b66b4:	2200      	movs	r2, #0
   b66b6:	611c      	str	r4, [r3, #16]
   b66b8:	615a      	str	r2, [r3, #20]
   b66ba:	bd38      	pop	{r3, r4, r5, pc}
   b66bc:	2003e4f0 	.word	0x2003e4f0
   b66c0:	000b6c45 	.word	0x000b6c45
   b66c4:	000b6c5c 	.word	0x000b6c5c
   b66c8:	abcd330e 	.word	0xabcd330e
   b66cc:	e66d1234 	.word	0xe66d1234
   b66d0:	0005deec 	.word	0x0005deec

000b66d4 <rand>:
   b66d4:	4b16      	ldr	r3, [pc, #88]	; (b6730 <rand+0x5c>)
   b66d6:	b510      	push	{r4, lr}
   b66d8:	681c      	ldr	r4, [r3, #0]
   b66da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b66dc:	b9b3      	cbnz	r3, b670c <rand+0x38>
   b66de:	2018      	movs	r0, #24
   b66e0:	f7fe fa1e 	bl	b4b20 <malloc>
   b66e4:	63a0      	str	r0, [r4, #56]	; 0x38
   b66e6:	b928      	cbnz	r0, b66f4 <rand+0x20>
   b66e8:	4602      	mov	r2, r0
   b66ea:	4b12      	ldr	r3, [pc, #72]	; (b6734 <rand+0x60>)
   b66ec:	4812      	ldr	r0, [pc, #72]	; (b6738 <rand+0x64>)
   b66ee:	214e      	movs	r1, #78	; 0x4e
   b66f0:	f7fe fa3e 	bl	b4b70 <__assert_func>
   b66f4:	4a11      	ldr	r2, [pc, #68]	; (b673c <rand+0x68>)
   b66f6:	4b12      	ldr	r3, [pc, #72]	; (b6740 <rand+0x6c>)
   b66f8:	e9c0 2300 	strd	r2, r3, [r0]
   b66fc:	4b11      	ldr	r3, [pc, #68]	; (b6744 <rand+0x70>)
   b66fe:	6083      	str	r3, [r0, #8]
   b6700:	230b      	movs	r3, #11
   b6702:	8183      	strh	r3, [r0, #12]
   b6704:	2201      	movs	r2, #1
   b6706:	2300      	movs	r3, #0
   b6708:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b670c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b670e:	4a0e      	ldr	r2, [pc, #56]	; (b6748 <rand+0x74>)
   b6710:	6920      	ldr	r0, [r4, #16]
   b6712:	6963      	ldr	r3, [r4, #20]
   b6714:	490d      	ldr	r1, [pc, #52]	; (b674c <rand+0x78>)
   b6716:	4342      	muls	r2, r0
   b6718:	fb01 2203 	mla	r2, r1, r3, r2
   b671c:	fba0 0101 	umull	r0, r1, r0, r1
   b6720:	1c43      	adds	r3, r0, #1
   b6722:	eb42 0001 	adc.w	r0, r2, r1
   b6726:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b672a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b672e:	bd10      	pop	{r4, pc}
   b6730:	2003e4f0 	.word	0x2003e4f0
   b6734:	000b6c45 	.word	0x000b6c45
   b6738:	000b6c5c 	.word	0x000b6c5c
   b673c:	abcd330e 	.word	0xabcd330e
   b6740:	e66d1234 	.word	0xe66d1234
   b6744:	0005deec 	.word	0x0005deec
   b6748:	5851f42d 	.word	0x5851f42d
   b674c:	4c957f2d 	.word	0x4c957f2d

000b6750 <strcmp>:
   b6750:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6754:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6758:	2a01      	cmp	r2, #1
   b675a:	bf28      	it	cs
   b675c:	429a      	cmpcs	r2, r3
   b675e:	d0f7      	beq.n	b6750 <strcmp>
   b6760:	1ad0      	subs	r0, r2, r3
   b6762:	4770      	bx	lr

000b6764 <strlen>:
   b6764:	4603      	mov	r3, r0
   b6766:	f813 2b01 	ldrb.w	r2, [r3], #1
   b676a:	2a00      	cmp	r2, #0
   b676c:	d1fb      	bne.n	b6766 <strlen+0x2>
   b676e:	1a18      	subs	r0, r3, r0
   b6770:	3801      	subs	r0, #1
   b6772:	4770      	bx	lr

000b6774 <__register_exitproc>:
   b6774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6778:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6834 <__register_exitproc+0xc0>
   b677c:	4606      	mov	r6, r0
   b677e:	f8d8 0000 	ldr.w	r0, [r8]
   b6782:	461f      	mov	r7, r3
   b6784:	460d      	mov	r5, r1
   b6786:	4691      	mov	r9, r2
   b6788:	f000 f856 	bl	b6838 <__retarget_lock_acquire_recursive>
   b678c:	4b25      	ldr	r3, [pc, #148]	; (b6824 <__register_exitproc+0xb0>)
   b678e:	681c      	ldr	r4, [r3, #0]
   b6790:	b934      	cbnz	r4, b67a0 <__register_exitproc+0x2c>
   b6792:	4c25      	ldr	r4, [pc, #148]	; (b6828 <__register_exitproc+0xb4>)
   b6794:	601c      	str	r4, [r3, #0]
   b6796:	4b25      	ldr	r3, [pc, #148]	; (b682c <__register_exitproc+0xb8>)
   b6798:	b113      	cbz	r3, b67a0 <__register_exitproc+0x2c>
   b679a:	681b      	ldr	r3, [r3, #0]
   b679c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b67a0:	6863      	ldr	r3, [r4, #4]
   b67a2:	2b1f      	cmp	r3, #31
   b67a4:	dd07      	ble.n	b67b6 <__register_exitproc+0x42>
   b67a6:	f8d8 0000 	ldr.w	r0, [r8]
   b67aa:	f000 f847 	bl	b683c <__retarget_lock_release_recursive>
   b67ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b67b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b67b6:	b34e      	cbz	r6, b680c <__register_exitproc+0x98>
   b67b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b67bc:	b988      	cbnz	r0, b67e2 <__register_exitproc+0x6e>
   b67be:	4b1c      	ldr	r3, [pc, #112]	; (b6830 <__register_exitproc+0xbc>)
   b67c0:	b923      	cbnz	r3, b67cc <__register_exitproc+0x58>
   b67c2:	f8d8 0000 	ldr.w	r0, [r8]
   b67c6:	f000 f838 	bl	b683a <__retarget_lock_release>
   b67ca:	e7f0      	b.n	b67ae <__register_exitproc+0x3a>
   b67cc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b67d0:	f7fe f9a6 	bl	b4b20 <malloc>
   b67d4:	2800      	cmp	r0, #0
   b67d6:	d0f4      	beq.n	b67c2 <__register_exitproc+0x4e>
   b67d8:	2300      	movs	r3, #0
   b67da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b67de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b67e2:	6863      	ldr	r3, [r4, #4]
   b67e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b67e8:	2201      	movs	r2, #1
   b67ea:	409a      	lsls	r2, r3
   b67ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b67f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b67f4:	4313      	orrs	r3, r2
   b67f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b67fa:	2e02      	cmp	r6, #2
   b67fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6800:	bf02      	ittt	eq
   b6802:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6806:	4313      	orreq	r3, r2
   b6808:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b680c:	6863      	ldr	r3, [r4, #4]
   b680e:	f8d8 0000 	ldr.w	r0, [r8]
   b6812:	1c5a      	adds	r2, r3, #1
   b6814:	3302      	adds	r3, #2
   b6816:	6062      	str	r2, [r4, #4]
   b6818:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b681c:	f000 f80e 	bl	b683c <__retarget_lock_release_recursive>
   b6820:	2000      	movs	r0, #0
   b6822:	e7c6      	b.n	b67b2 <__register_exitproc+0x3e>
   b6824:	2003e7e8 	.word	0x2003e7e8
   b6828:	2003e75c 	.word	0x2003e75c
   b682c:	00000000 	.word	0x00000000
   b6830:	000b4b21 	.word	0x000b4b21
   b6834:	2003e554 	.word	0x2003e554

000b6838 <__retarget_lock_acquire_recursive>:
   b6838:	4770      	bx	lr

000b683a <__retarget_lock_release>:
   b683a:	4770      	bx	lr

000b683c <__retarget_lock_release_recursive>:
   b683c:	4770      	bx	lr

000b683e <link_code_end>:
	...

000b6840 <dynalib_user>:
   b6840:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6850:	0000 0000 227b 3174 3a22 2e25 6632 222c     ....{"t1":%.2f,"
   b6860:	3274 3a22 2e25 6632 007d 716d 7474 7542     t2":%.2f}.mqttBu
   b6870:	3a66 2520 0a73 6973 657a 664f 6d28 7471     f: %s.sizeOf(mqt
   b6880:	4274 6675 3a29 2520 2f69 006e 3176 642f     tBuf): %i/n.v1/d
   b6890:	7665 6369 7365 6d2f 2f65 6574 656c 656d     evices/me/teleme
   b68a0:	7274 0079 6c70 6d75 4365 6e6f 656e 7463     try.plumeConnect
   b68b0:	2928 203a 7441 6574 706d 6974 676e 7420     (): Attempting t
   b68c0:	206f 6f63 6e6e 6365 2074 6f74 5420 6968     o connect to Thi
   b68d0:	676e 6273 616f 6472 7320 7265 6576 0072     ngsboard server.
   b68e0:	6d79 5a56 716b 6c63 6a55 3650 7962 5633     ymVZkqclUjP6by3V
   b68f0:	5a70 4365 4100 6772 6e6f 7000 756c 656d     pZeC.Argon.plume
   b6900:	6f43 6e6e 6365 2874 3a29 4320 6e6f 656e     Connect(): Conne
   b6910:	7463 6465 7000 756c 656d 6f43 6e6e 6365     cted.plumeConnec
   b6920:	2874 3a29 4320 6e6f 656e 7463 6f69 206e     t(): Connection 
   b6930:	6166 6c69 6465 202c 6572 7274 2079 6e69     failed, retry in
   b6940:	3320 7320 6365 6e6f 7364 2500 0073 0400      3 seconds.%s...
   b6950:	514d 5454 0004 0000                         MQTT....

000b6958 <_ZTVN5spark12NetworkClassE>:
	...
   b6960:	4b91 000b 4b9b 000b 4ba5 000b 4baf 000b     .K...K...K...K..
   b6970:	4bb9 000b 4bc5 000b 4bd1 000b 4bd9 000b     .K...K...K...K..
   b6980:	4be1 000b 4bed 000b 4bf5 000b 4bff 000b     .K...K...K...K..
   b6990:	4c09 000b                                   .L..

000b6994 <_ZTVN5spark9WiFiClassE>:
	...
   b699c:	4d53 000b 4d49 000b 4d3f 000b 4cf5 000b     SM..IM..?M...L..
   b69ac:	4d33 000b 4d27 000b 4bd1 000b 4bd9 000b     3M..'M...K...K..
   b69bc:	4d1b 000b 4d13 000b 4d09 000b 4cff 000b     .M...M...M...L..
   b69cc:	4c09 000b 6977 6972 676e 7200 6365 2076     .L..wiring.recv 
   b69dc:	7265 6f72 2072 203d 6425 0000               error = %d..

000b69e8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b69f0:	4df5 000b 4e19 000b 534b 000b 4e27 000b     .M...N..KS..'N..
   b6a00:	4df9 000b                                   .M..

000b6a04 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6a0c <_ZTV9TCPClient>:
	...
   b6a14:	4ea5 000b 4ed9 000b 4d71 000b 4d8b 000b     .N...N..qM...M..
   b6a24:	51e1 000b 4db5 000b 5057 000b 4de9 000b     .Q...M..WP...M..
   b6a34:	50e9 000b 4f29 000b 5085 000b 5295 000b     .P..)O...P...R..
   b6a44:	5025 000b 4deb 000b 4d9d 000b 4e2d 000b     %P...M...M..-N..
   b6a54:	4f09 000b                                   .O..

000b6a58 <_ZTV7TwoWire>:
	...
   b6a60:	538f 000b 53d9 000b 53b1 000b 5391 000b     .S...S...S...S..
   b6a70:	53b9 000b 53c1 000b 53c9 000b 53d1 000b     .S...S...S...S..

000b6a80 <_ZTV11USARTSerial>:
	...
   b6a88:	540d 000b 5479 000b 5451 000b 5845 000b     .T..yT..QT..EX..
   b6a98:	5421 000b 543d 000b 542f 000b 544b 000b     !T..=T../T..KT..
   b6aa8:	540f 000b 5413 000b                         .T...T..

000b6ab0 <_ZTV9USBSerial>:
	...
   b6ab8:	54b7 000b 551f 000b 54f5 000b 5845 000b     .T...U...T..EX..
   b6ac8:	54e7 000b 54b9 000b 54c9 000b 5519 000b     .T...T...T...U..
   b6ad8:	54d9 000b 54b1 000b                         .T...T..

000b6ae0 <_ZTV9IPAddress>:
	...
   b6ae8:	55c9 000b 55b9 000b 55bb 000b 5925 252d     .U...U...U..%Y-%
   b6af8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b6b08:	7361 7463 6d69 0065 7061 0070               asctime.app.

000b6b14 <_ZTVN5spark13EthernetClassE>:
	...
   b6b1c:	59f7 000b 59ed 000b 59e3 000b 59d9 000b     .Y...Y...Y...Y..
   b6b2c:	59cd 000b 59c1 000b 4bd1 000b 4bd9 000b     .Y...Y...K...K..
   b6b3c:	59b5 000b 59ad 000b 59a3 000b 5999 000b     .Y...Y...Y...Y..
   b6b4c:	4c09 000b                                   .L..

000b6b50 <_ZSt7nothrow>:
	...

000b6b51 <_ZTSSt19_Sp_make_shared_tag>:
   b6b51:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6b61:	6572 5f64 6174 0067 0000                     red_tag....

000b6b6c <_ZTISt19_Sp_make_shared_tag>:
   b6b6c:	6bac 000b 6b51 000b                         .k..Qk..

000b6b74 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6b74:	6c0c 000b 6b80 000b 6c30 000b               .l...k..0l..

000b6b80 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6b80:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6b90:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6ba0:	0045 0000                                   E...

000b6ba4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6ba4:	0000 0000 6b74 000b 5c2d 000b 5c41 000b     ....tk..-\..A\..
   b6bb4:	5dd5 000b 5dd5 000b 5cab 000b 5bed 000b     .]...]...\...[..
   b6bc4:	5c93 000b 5c55 000b 5c1f 000b               .\..U\...\..

000b6bd0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6bd0:	6c0c 000b 6bdc 000b 6b74 000b               .l...k..tk..

000b6bdc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6bdc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6bec:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6bfc:	666e 456f 0000 0000                         nfoE....

000b6c04 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6c04:	0000 0000 6bd0 000b 5cd5 000b 5ce9 000b     .....k...\...\..
   b6c14:	5dd5 000b 5dd5 000b 5cab 000b 5bed 000b     .]...]...\...[..
   b6c24:	5da9 000b 5d35 000b 5cfd 000b               .]..5]...\..

000b6c30 <_ZTISt9type_info>:
   b6c30:	6bac 000b 6c38 000b                         .k..8l..

000b6c38 <_ZTSSt9type_info>:
   b6c38:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b6c48:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b6c58:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b6c68:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b6c78:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b6c88:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6c98:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6ca8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b6cb8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6cc8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6cd9 <link_const_variable_data_end>:
   b6cd9:	00          	.byte	0x00
	...

000b6cdc <link_constructors_location>:
   b6cdc:	000b426d 	.word	0x000b426d
   b6ce0:	000b4ce1 	.word	0x000b4ce1
   b6ce4:	000b4d5d 	.word	0x000b4d5d
   b6ce8:	000b580d 	.word	0x000b580d
   b6cec:	000b5821 	.word	0x000b5821
   b6cf0:	000b5835 	.word	0x000b5835
   b6cf4:	000b5965 	.word	0x000b5965
   b6cf8:	000b5975 	.word	0x000b5975
   b6cfc:	000b5a01 	.word	0x000b5a01
