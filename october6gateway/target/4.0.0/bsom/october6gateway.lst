
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/october6gateway/target/4.0.0/bsom/october6gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009370  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd390  000bd390  0000d390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd3b4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  2003df74  000bd3b8  0001df74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000068c  2003e168  2003e168  0002e168  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bd5a8  000bd5a8  0002d5a8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bd5d4  000bd5d4  0002d5d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001afb56  00000000  00000000  0002d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001cdce  00000000  00000000  001dd12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003550  00000000  00000000  001f9efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00045c23  00000000  00000000  001fd44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0005a489  00000000  00000000  0024306f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00150a65  00000000  00000000  0029d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00047979  00000000  00000000  003edf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000cff0  00000000  00000000  004358d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a2e0  00000000  00000000  004428c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f83a 	bl	ba0aa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f842 	bl	ba0c6 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003df74 	.word	0x2003df74
   b404c:	000bd3b8 	.word	0x000bd3b8
   b4050:	2003e164 	.word	0x2003e164
   b4054:	2003e168 	.word	0x2003e168
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fadb 	bl	b861c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd354 	.word	0x000bd354
   b4080:	000bd38c 	.word	0x000bd38c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc66 	b.w	b4954 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fd3d 	bl	b4b08 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 ba7b 	b.w	b858c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b971 	b.w	b737c <malloc>

000b409a <_Znaj>:
   b409a:	f003 b96f 	b.w	b737c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 b975 	b.w	b738c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   b40b2:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b40b4:	f003 f85c 	bl	b7170 <spark_cloud_flag_connected>
        if (!connected()) {
   b40b8:	b120      	cbz	r0, b40c4 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   b40ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   b40be:	2000      	movs	r0, #0
   b40c0:	f003 b86e 	b.w	b71a0 <spark_sync_time>
    }
   b40c4:	bd08      	pop	{r3, pc}
	...

000b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   b40c8:	b510      	push	{r4, lr}
   b40ca:	b086      	sub	sp, #24
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b40cc:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b40ce:	a902      	add	r1, sp, #8
   b40d0:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b40d2:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   b40d4:	f003 f832 	bl	b713c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b40d8:	b9e0      	cbnz	r0, b4114 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x4c>
        return ret;
    }
    return get(src, val);
   b40da:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   b40dc:	b10c      	cbz	r4, b40e2 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1a>
   b40de:	6923      	ldr	r3, [r4, #16]
   b40e0:	b923      	cbnz	r3, b40ec <_ZNK11SystemClass13batteryChargeEv.isra.0+0x24>
   b40e2:	4a0e      	ldr	r2, [pc, #56]	; (b411c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x54>)
   b40e4:	490e      	ldr	r1, [pc, #56]	; (b4120 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x58>)
   b40e6:	200a      	movs	r0, #10
   b40e8:	f003 f818 	bl	b711c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b40ec:	230c      	movs	r3, #12
   b40ee:	9303      	str	r3, [sp, #12]
   b40f0:	ab01      	add	r3, sp, #4
   b40f2:	9304      	str	r3, [sp, #16]
   b40f4:	2304      	movs	r3, #4
   b40f6:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b40f8:	aa03      	add	r2, sp, #12
   b40fa:	6923      	ldr	r3, [r4, #16]
   b40fc:	2101      	movs	r1, #1
   b40fe:	4620      	mov	r0, r4
   b4100:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b4102:	b938      	cbnz	r0, b4114 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x4c>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4104:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b4108:	ee00 3a10 	vmov	s0, r3
   b410c:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   b4110:	b006      	add	sp, #24
   b4112:	bd10      	pop	{r4, pc}
            return -1.0f;
   b4114:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b4118:	e7fa      	b.n	b4110 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x48>
   b411a:	bf00      	nop
   b411c:	000b706d 	.word	0x000b706d
   b4120:	000bc248 	.word	0x000bc248

000b4124 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	b40e      	push	{r1, r2, r3}
   b4126:	b503      	push	{r0, r1, lr}
   b4128:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b412a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b412c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4130:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4132:	f004 fc0a 	bl	b894a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4136:	b002      	add	sp, #8
   b4138:	f85d eb04 	ldr.w	lr, [sp], #4
   b413c:	b003      	add	sp, #12
   b413e:	4770      	bx	lr

000b4140 <_Z12plumeConnectv>:
  }
  plume.loop();
}

void plumeConnect()
{
   b4140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!plume.connected())
   b4142:	4d13      	ldr	r5, [pc, #76]	; (b4190 <_Z12plumeConnectv+0x50>)
  {
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4144:	4e13      	ldr	r6, [pc, #76]	; (b4194 <_Z12plumeConnectv+0x54>)
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4146:	4f14      	ldr	r7, [pc, #80]	; (b4198 <_Z12plumeConnectv+0x58>)
  while (!plume.connected())
   b4148:	4811      	ldr	r0, [pc, #68]	; (b4190 <_Z12plumeConnectv+0x50>)
   b414a:	f002 fc7c 	bl	b6a46 <_ZN12PubSubClient9connectedEv>
   b414e:	4604      	mov	r4, r0
   b4150:	b9e0      	cbnz	r0, b418c <_Z12plumeConnectv+0x4c>
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4152:	f003 fe55 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4156:	4631      	mov	r1, r6
   b4158:	f004 fbcf 	bl	b88fa <_ZN5Print7printlnEPKc>
    if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b415c:	683a      	ldr	r2, [r7, #0]
   b415e:	490f      	ldr	r1, [pc, #60]	; (b419c <_Z12plumeConnectv+0x5c>)
   b4160:	4623      	mov	r3, r4
   b4162:	4628      	mov	r0, r5
   b4164:	f002 fd4e 	bl	b6c04 <_ZN12PubSubClient7connectEPKcS1_S1_>
   b4168:	b130      	cbz	r0, b4178 <_Z12plumeConnectv+0x38>
    {
      Serial.println("plumeConnect(): Connected");
   b416a:	f003 fe49 	bl	b7e00 <_Z16_fetch_usbserialv>
    }
    else
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
    delay(3000);
  }
}
   b416e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      Serial.println("plumeConnect(): Connected");
   b4172:	490b      	ldr	r1, [pc, #44]	; (b41a0 <_Z12plumeConnectv+0x60>)
   b4174:	f004 bbc1 	b.w	b88fa <_ZN5Print7printlnEPKc>
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   b4178:	f003 fe42 	bl	b7e00 <_Z16_fetch_usbserialv>
   b417c:	4909      	ldr	r1, [pc, #36]	; (b41a4 <_Z12plumeConnectv+0x64>)
   b417e:	f004 fbbc 	bl	b88fa <_ZN5Print7printlnEPKc>
    delay(3000);
   b4182:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4186:	f004 faa9 	bl	b86dc <delay>
  while (!plume.connected())
   b418a:	e7dd      	b.n	b4148 <_Z12plumeConnectv+0x8>
}
   b418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b418e:	bf00      	nop
   b4190:	2003e2dc 	.word	0x2003e2dc
   b4194:	000bc26e 	.word	0x000bc26e
   b4198:	2003e184 	.word	0x2003e184
   b419c:	000bc2aa 	.word	0x000bc2aa
   b41a0:	000bc2b0 	.word	0x000bc2b0
   b41a4:	000bc2ca 	.word	0x000bc2ca

000b41a8 <_Z12plumePublishv>:
{
   b41a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (!plume.connected())
   b41aa:	486f      	ldr	r0, [pc, #444]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b41ac:	f002 fc4b 	bl	b6a46 <_ZN12PubSubClient9connectedEv>
   b41b0:	b908      	cbnz	r0, b41b6 <_Z12plumePublishv+0xe>
    plumeConnect();
   b41b2:	f7ff ffc5 	bl	b4140 <_Z12plumeConnectv>
  float batterySoc = System.batteryCharge();
   b41b6:	f7ff ff87 	bl	b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   b41ba:	ee10 0a10 	vmov	r0, s0
  snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values\":{\"b\":%.2f}}", timeBuf, batterySoc);
   b41be:	f005 fbe7 	bl	b9990 <__aeabi_f2d>
   b41c2:	4b6a      	ldr	r3, [pc, #424]	; (b436c <_Z12plumePublishv+0x1c4>)
   b41c4:	4a6a      	ldr	r2, [pc, #424]	; (b4370 <_Z12plumePublishv+0x1c8>)
  if (x1)
   b41c6:	4c6b      	ldr	r4, [pc, #428]	; (b4374 <_Z12plumePublishv+0x1cc>)
  snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values\":{\"b\":%.2f}}", timeBuf, batterySoc);
   b41c8:	e9cd 0100 	strd	r0, r1, [sp]
   b41cc:	2180      	movs	r1, #128	; 0x80
   b41ce:	486a      	ldr	r0, [pc, #424]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b41d0:	f003 f8f4 	bl	b73bc <snprintf>
  plume.publish("v1/devices/me/telemetry", mqttBuf);
   b41d4:	4a68      	ldr	r2, [pc, #416]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b41d6:	4969      	ldr	r1, [pc, #420]	; (b437c <_Z12plumePublishv+0x1d4>)
   b41d8:	4863      	ldr	r0, [pc, #396]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b41da:	f002 fe01 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
  plume.loop();
   b41de:	4862      	ldr	r0, [pc, #392]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b41e0:	f002 fd1a 	bl	b6c18 <_ZN12PubSubClient4loopEv>
  if (x1)
   b41e4:	7823      	ldrb	r3, [r4, #0]
   b41e6:	b1bb      	cbz	r3, b4218 <_Z12plumePublishv+0x70>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f, \"v1\":%.2f}", t1, v1);
   b41e8:	4b65      	ldr	r3, [pc, #404]	; (b4380 <_Z12plumePublishv+0x1d8>)
   b41ea:	6818      	ldr	r0, [r3, #0]
   b41ec:	f005 fbd0 	bl	b9990 <__aeabi_f2d>
   b41f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b41f4:	4b63      	ldr	r3, [pc, #396]	; (b4384 <_Z12plumePublishv+0x1dc>)
   b41f6:	6818      	ldr	r0, [r3, #0]
   b41f8:	f005 fbca 	bl	b9990 <__aeabi_f2d>
   b41fc:	4a62      	ldr	r2, [pc, #392]	; (b4388 <_Z12plumePublishv+0x1e0>)
   b41fe:	e9cd 0100 	strd	r0, r1, [sp]
   b4202:	2180      	movs	r1, #128	; 0x80
   b4204:	485c      	ldr	r0, [pc, #368]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4206:	f003 f8d9 	bl	b73bc <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b420a:	4a5b      	ldr	r2, [pc, #364]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b420c:	495b      	ldr	r1, [pc, #364]	; (b437c <_Z12plumePublishv+0x1d4>)
   b420e:	4856      	ldr	r0, [pc, #344]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b4210:	f002 fde6 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
    x1 = false;
   b4214:	2300      	movs	r3, #0
   b4216:	7023      	strb	r3, [r4, #0]
  if (x2)
   b4218:	4c5c      	ldr	r4, [pc, #368]	; (b438c <_Z12plumePublishv+0x1e4>)
   b421a:	7823      	ldrb	r3, [r4, #0]
   b421c:	b1bb      	cbz	r3, b424e <_Z12plumePublishv+0xa6>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t2\":%.2f,\"v2\":%.2f}", t2, v2);
   b421e:	4b5c      	ldr	r3, [pc, #368]	; (b4390 <_Z12plumePublishv+0x1e8>)
   b4220:	6818      	ldr	r0, [r3, #0]
   b4222:	f005 fbb5 	bl	b9990 <__aeabi_f2d>
   b4226:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b422a:	4b5a      	ldr	r3, [pc, #360]	; (b4394 <_Z12plumePublishv+0x1ec>)
   b422c:	6818      	ldr	r0, [r3, #0]
   b422e:	f005 fbaf 	bl	b9990 <__aeabi_f2d>
   b4232:	4a59      	ldr	r2, [pc, #356]	; (b4398 <_Z12plumePublishv+0x1f0>)
   b4234:	e9cd 0100 	strd	r0, r1, [sp]
   b4238:	2180      	movs	r1, #128	; 0x80
   b423a:	484f      	ldr	r0, [pc, #316]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b423c:	f003 f8be 	bl	b73bc <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4240:	4a4d      	ldr	r2, [pc, #308]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4242:	494e      	ldr	r1, [pc, #312]	; (b437c <_Z12plumePublishv+0x1d4>)
   b4244:	4848      	ldr	r0, [pc, #288]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b4246:	f002 fdcb 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
    x2 = false;
   b424a:	2300      	movs	r3, #0
   b424c:	7023      	strb	r3, [r4, #0]
  if (x3)
   b424e:	4c53      	ldr	r4, [pc, #332]	; (b439c <_Z12plumePublishv+0x1f4>)
   b4250:	7823      	ldrb	r3, [r4, #0]
   b4252:	b1bb      	cbz	r3, b4284 <_Z12plumePublishv+0xdc>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t3\":%.2f,\"v3\":%.2f}", t3, v3);
   b4254:	4b52      	ldr	r3, [pc, #328]	; (b43a0 <_Z12plumePublishv+0x1f8>)
   b4256:	6818      	ldr	r0, [r3, #0]
   b4258:	f005 fb9a 	bl	b9990 <__aeabi_f2d>
   b425c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4260:	4b50      	ldr	r3, [pc, #320]	; (b43a4 <_Z12plumePublishv+0x1fc>)
   b4262:	6818      	ldr	r0, [r3, #0]
   b4264:	f005 fb94 	bl	b9990 <__aeabi_f2d>
   b4268:	4a4f      	ldr	r2, [pc, #316]	; (b43a8 <_Z12plumePublishv+0x200>)
   b426a:	e9cd 0100 	strd	r0, r1, [sp]
   b426e:	2180      	movs	r1, #128	; 0x80
   b4270:	4841      	ldr	r0, [pc, #260]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4272:	f003 f8a3 	bl	b73bc <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4276:	4a40      	ldr	r2, [pc, #256]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4278:	4940      	ldr	r1, [pc, #256]	; (b437c <_Z12plumePublishv+0x1d4>)
   b427a:	483b      	ldr	r0, [pc, #236]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b427c:	f002 fdb0 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
    x3 = false;
   b4280:	2300      	movs	r3, #0
   b4282:	7023      	strb	r3, [r4, #0]
  if (x4)
   b4284:	4c49      	ldr	r4, [pc, #292]	; (b43ac <_Z12plumePublishv+0x204>)
   b4286:	7823      	ldrb	r3, [r4, #0]
   b4288:	b1bb      	cbz	r3, b42ba <_Z12plumePublishv+0x112>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t4\":%.2f,\"v4\":%.2f}", t4, v4);
   b428a:	4b49      	ldr	r3, [pc, #292]	; (b43b0 <_Z12plumePublishv+0x208>)
   b428c:	6818      	ldr	r0, [r3, #0]
   b428e:	f005 fb7f 	bl	b9990 <__aeabi_f2d>
   b4292:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4296:	4b47      	ldr	r3, [pc, #284]	; (b43b4 <_Z12plumePublishv+0x20c>)
   b4298:	6818      	ldr	r0, [r3, #0]
   b429a:	f005 fb79 	bl	b9990 <__aeabi_f2d>
   b429e:	4a46      	ldr	r2, [pc, #280]	; (b43b8 <_Z12plumePublishv+0x210>)
   b42a0:	e9cd 0100 	strd	r0, r1, [sp]
   b42a4:	2180      	movs	r1, #128	; 0x80
   b42a6:	4834      	ldr	r0, [pc, #208]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42a8:	f003 f888 	bl	b73bc <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b42ac:	4a32      	ldr	r2, [pc, #200]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42ae:	4933      	ldr	r1, [pc, #204]	; (b437c <_Z12plumePublishv+0x1d4>)
   b42b0:	482d      	ldr	r0, [pc, #180]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b42b2:	f002 fd95 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
    x4 = false;
   b42b6:	2300      	movs	r3, #0
   b42b8:	7023      	strb	r3, [r4, #0]
  if (x5)
   b42ba:	4c40      	ldr	r4, [pc, #256]	; (b43bc <_Z12plumePublishv+0x214>)
   b42bc:	7823      	ldrb	r3, [r4, #0]
   b42be:	b1bb      	cbz	r3, b42f0 <_Z12plumePublishv+0x148>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t5\":%.2f,\"v5\":%.2f}", t5, v5);
   b42c0:	4b3f      	ldr	r3, [pc, #252]	; (b43c0 <_Z12plumePublishv+0x218>)
   b42c2:	6818      	ldr	r0, [r3, #0]
   b42c4:	f005 fb64 	bl	b9990 <__aeabi_f2d>
   b42c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b42cc:	4b3d      	ldr	r3, [pc, #244]	; (b43c4 <_Z12plumePublishv+0x21c>)
   b42ce:	6818      	ldr	r0, [r3, #0]
   b42d0:	f005 fb5e 	bl	b9990 <__aeabi_f2d>
   b42d4:	4a3c      	ldr	r2, [pc, #240]	; (b43c8 <_Z12plumePublishv+0x220>)
   b42d6:	e9cd 0100 	strd	r0, r1, [sp]
   b42da:	2180      	movs	r1, #128	; 0x80
   b42dc:	4826      	ldr	r0, [pc, #152]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42de:	f003 f86d 	bl	b73bc <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b42e2:	4a25      	ldr	r2, [pc, #148]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42e4:	4925      	ldr	r1, [pc, #148]	; (b437c <_Z12plumePublishv+0x1d4>)
   b42e6:	4820      	ldr	r0, [pc, #128]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b42e8:	f002 fd7a 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
    x5 = false;
   b42ec:	2300      	movs	r3, #0
   b42ee:	7023      	strb	r3, [r4, #0]
  if (x6)
   b42f0:	4c36      	ldr	r4, [pc, #216]	; (b43cc <_Z12plumePublishv+0x224>)
   b42f2:	7823      	ldrb	r3, [r4, #0]
   b42f4:	b1bb      	cbz	r3, b4326 <_Z12plumePublishv+0x17e>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t6\":%.2f,\"v6\":%.2f}", t6, v6);
   b42f6:	4b36      	ldr	r3, [pc, #216]	; (b43d0 <_Z12plumePublishv+0x228>)
   b42f8:	6818      	ldr	r0, [r3, #0]
   b42fa:	f005 fb49 	bl	b9990 <__aeabi_f2d>
   b42fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4302:	4b34      	ldr	r3, [pc, #208]	; (b43d4 <_Z12plumePublishv+0x22c>)
   b4304:	6818      	ldr	r0, [r3, #0]
   b4306:	f005 fb43 	bl	b9990 <__aeabi_f2d>
   b430a:	4a33      	ldr	r2, [pc, #204]	; (b43d8 <_Z12plumePublishv+0x230>)
   b430c:	e9cd 0100 	strd	r0, r1, [sp]
   b4310:	2180      	movs	r1, #128	; 0x80
   b4312:	4819      	ldr	r0, [pc, #100]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4314:	f003 f852 	bl	b73bc <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4318:	4a17      	ldr	r2, [pc, #92]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b431a:	4918      	ldr	r1, [pc, #96]	; (b437c <_Z12plumePublishv+0x1d4>)
   b431c:	4812      	ldr	r0, [pc, #72]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b431e:	f002 fd5f 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
    x6 = false;
   b4322:	2300      	movs	r3, #0
   b4324:	7023      	strb	r3, [r4, #0]
  if (x7)
   b4326:	4c2d      	ldr	r4, [pc, #180]	; (b43dc <_Z12plumePublishv+0x234>)
   b4328:	7823      	ldrb	r3, [r4, #0]
   b432a:	b1bb      	cbz	r3, b435c <_Z12plumePublishv+0x1b4>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t7\":%.2f,\"v7\":%.2f}", t7, v7);
   b432c:	4b2c      	ldr	r3, [pc, #176]	; (b43e0 <_Z12plumePublishv+0x238>)
   b432e:	6818      	ldr	r0, [r3, #0]
   b4330:	f005 fb2e 	bl	b9990 <__aeabi_f2d>
   b4334:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4338:	4b2a      	ldr	r3, [pc, #168]	; (b43e4 <_Z12plumePublishv+0x23c>)
   b433a:	6818      	ldr	r0, [r3, #0]
   b433c:	f005 fb28 	bl	b9990 <__aeabi_f2d>
   b4340:	4a29      	ldr	r2, [pc, #164]	; (b43e8 <_Z12plumePublishv+0x240>)
   b4342:	e9cd 0100 	strd	r0, r1, [sp]
   b4346:	2180      	movs	r1, #128	; 0x80
   b4348:	480b      	ldr	r0, [pc, #44]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b434a:	f003 f837 	bl	b73bc <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b434e:	4a0a      	ldr	r2, [pc, #40]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4350:	490a      	ldr	r1, [pc, #40]	; (b437c <_Z12plumePublishv+0x1d4>)
   b4352:	4805      	ldr	r0, [pc, #20]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b4354:	f002 fd44 	bl	b6de0 <_ZN12PubSubClient7publishEPKcS1_>
    x7 = false;
   b4358:	2300      	movs	r3, #0
   b435a:	7023      	strb	r3, [r4, #0]
  plume.loop();
   b435c:	4802      	ldr	r0, [pc, #8]	; (b4368 <_Z12plumePublishv+0x1c0>)
}
   b435e:	b004      	add	sp, #16
   b4360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  plume.loop();
   b4364:	f002 bc58 	b.w	b6c18 <_ZN12PubSubClient4loopEv>
   b4368:	2003e2dc 	.word	0x2003e2dc
   b436c:	2003e3f8 	.word	0x2003e3f8
   b4370:	000bc300 	.word	0x000bc300
   b4374:	2003e4c0 	.word	0x2003e4c0
   b4378:	2003e208 	.word	0x2003e208
   b437c:	000bc31f 	.word	0x000bc31f
   b4380:	2003e484 	.word	0x2003e484
   b4384:	2003e3bc 	.word	0x2003e3bc
   b4388:	000bc337 	.word	0x000bc337
   b438c:	2003e4c1 	.word	0x2003e4c1
   b4390:	2003e488 	.word	0x2003e488
   b4394:	2003e3c0 	.word	0x2003e3c0
   b4398:	000bc34e 	.word	0x000bc34e
   b439c:	2003e4c2 	.word	0x2003e4c2
   b43a0:	2003e48c 	.word	0x2003e48c
   b43a4:	2003e3c4 	.word	0x2003e3c4
   b43a8:	000bc364 	.word	0x000bc364
   b43ac:	2003e4c3 	.word	0x2003e4c3
   b43b0:	2003e490 	.word	0x2003e490
   b43b4:	2003e3c8 	.word	0x2003e3c8
   b43b8:	000bc37a 	.word	0x000bc37a
   b43bc:	2003e4c4 	.word	0x2003e4c4
   b43c0:	2003e494 	.word	0x2003e494
   b43c4:	2003e3cc 	.word	0x2003e3cc
   b43c8:	000bc390 	.word	0x000bc390
   b43cc:	2003e4c5 	.word	0x2003e4c5
   b43d0:	2003e498 	.word	0x2003e498
   b43d4:	2003e3d0 	.word	0x2003e3d0
   b43d8:	000bc3a6 	.word	0x000bc3a6
   b43dc:	2003e4c6 	.word	0x2003e4c6
   b43e0:	2003e49c 	.word	0x2003e49c
   b43e4:	2003e3d4 	.word	0x2003e3d4
   b43e8:	000bc3bc 	.word	0x000bc3bc

000b43ec <_Z8goOnlinev>:

void goOnline()
{
   b43ec:	b570      	push	{r4, r5, r6, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b43ee:	f002 feb7 	bl	b7160 <spark_cloud_flag_connect>
  Particle.connect();Particle.syncTime();
   b43f2:	f7ff fe5e 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
        return hal_timer_millis(nullptr);
   b43f6:	2000      	movs	r0, #0
   b43f8:	f002 fe50 	bl	b709c <hal_timer_millis>
        while (_while() && !_condition()) {
   b43fc:	4d1c      	ldr	r5, [pc, #112]	; (b4470 <_Z8goOnlinev+0x84>)
        return hal_timer_millis(nullptr);
   b43fe:	4604      	mov	r4, r0
   b4400:	2600      	movs	r6, #0
   b4402:	2000      	movs	r0, #0
   b4404:	f002 fe4a 	bl	b709c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4408:	1b00      	subs	r0, r0, r4
   b440a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b440e:	4285      	cmp	r5, r0
   b4410:	eb76 0301 	sbcs.w	r3, r6, r1
   b4414:	d305      	bcc.n	b4422 <_Z8goOnlinev+0x36>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4416:	f002 feab 	bl	b7170 <spark_cloud_flag_connected>
   b441a:	b910      	cbnz	r0, b4422 <_Z8goOnlinev+0x36>
            spark_process();
   b441c:	f002 fe98 	bl	b7150 <spark_process>
        while (_while() && !_condition()) {
   b4420:	e7ef      	b.n	b4402 <_Z8goOnlinev+0x16>
   b4422:	f002 fea5 	bl	b7170 <spark_cloud_flag_connected>
  // Serial.printf("Particle going online...\n");
  waitFor(Particle.connected, 240000);
  // Serial.printf("Particle online...\n");
  // Particle.publish("connected");
  // delay(1200);
  Particle.syncTime();
   b4426:	f7ff fe44 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
        return hal_timer_millis(nullptr);
   b442a:	2000      	movs	r0, #0
   b442c:	f002 fe36 	bl	b709c <hal_timer_millis>
        while (_while() && !_condition()) {
   b4430:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b4434:	4604      	mov	r4, r0
   b4436:	2000      	movs	r0, #0
   b4438:	f002 fe30 	bl	b709c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b443c:	1b00      	subs	r0, r0, r4
   b443e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4442:	42a8      	cmp	r0, r5
   b4444:	f171 0300 	sbcs.w	r3, r1, #0
   b4448:	d209      	bcs.n	b445e <_Z8goOnlinev+0x72>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b444a:	2000      	movs	r0, #0
   b444c:	f002 feb0 	bl	b71b0 <spark_sync_time_pending>
   b4450:	b128      	cbz	r0, b445e <_Z8goOnlinev+0x72>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4452:	f002 fe8d 	bl	b7170 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4456:	b110      	cbz	r0, b445e <_Z8goOnlinev+0x72>
            spark_process();
   b4458:	f002 fe7a 	bl	b7150 <spark_process>
        while (_while() && !_condition()) {
   b445c:	e7eb      	b.n	b4436 <_Z8goOnlinev+0x4a>
   b445e:	2000      	movs	r0, #0
   b4460:	f002 fea6 	bl	b71b0 <spark_sync_time_pending>
   b4464:	b118      	cbz	r0, b446e <_Z8goOnlinev+0x82>
  waitFor(Particle.syncTimeDone, 30000);
  // Serial.printf("Time synced...\n");
}
   b4466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b446a:	f002 be81 	b.w	b7170 <spark_cloud_flag_connected>
   b446e:	bd70      	pop	{r4, r5, r6, pc}
   b4470:	0003a97f 	.word	0x0003a97f

000b4474 <_Z12checkUpdatesv>:
  counter++;
  // System.sleep(config);
}

void checkUpdates()
{
   b4474:	b573      	push	{r0, r1, r4, r5, r6, lr}

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   b4476:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b4478:	4622      	mov	r2, r4
   b447a:	f10d 0107 	add.w	r1, sp, #7
   b447e:	4620      	mov	r0, r4
        uint8_t value = 0;
   b4480:	f88d 4007 	strb.w	r4, [sp, #7]
        system_get_flag(flag, &value, nullptr);
   b4484:	f002 ff3c 	bl	b7300 <system_get_flag>
        return value;
   b4488:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (System.updatesPending())
   b448c:	b1cb      	cbz	r3, b44c2 <_Z12checkUpdatesv+0x4e>
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b448e:	2101      	movs	r1, #1
   b4490:	4622      	mov	r2, r4
   b4492:	4608      	mov	r0, r1
   b4494:	f002 ff2c 	bl	b72f0 <system_set_flag>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4498:	f002 fdf0 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
  {
    System.enableUpdates();
    unsigned int start = millis();
    while (millis() - start < 120000)
   b449c:	4e0a      	ldr	r6, [pc, #40]	; (b44c8 <_Z12checkUpdatesv+0x54>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b449e:	4d0b      	ldr	r5, [pc, #44]	; (b44cc <_Z12checkUpdatesv+0x58>)
   b44a0:	4604      	mov	r4, r0
   b44a2:	f002 fdeb 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
   b44a6:	1b00      	subs	r0, r0, r4
   b44a8:	42b0      	cmp	r0, r6
   b44aa:	d805      	bhi.n	b44b8 <_Z12checkUpdatesv+0x44>
		return HAL_Timer_Get_Milli_Seconds();
   b44ac:	f002 fde6 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b44b0:	6028      	str	r0, [r5, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b44b2:	f002 fe4d 	bl	b7150 <spark_process>
    }
   b44b6:	e7f4      	b.n	b44a2 <_Z12checkUpdatesv+0x2e>
    {
      Particle.process();
    }
    System.reset();
  }
}
   b44b8:	b002      	add	sp, #8
   b44ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    System.reset();
   b44be:	f004 bb65 	b.w	b8b8c <_ZN11SystemClass5resetEv>
}
   b44c2:	b002      	add	sp, #8
   b44c4:	bd70      	pop	{r4, r5, r6, pc}
   b44c6:	bf00      	nop
   b44c8:	0001d4bf 	.word	0x0001d4bf
   b44cc:	2003e744 	.word	0x2003e744

000b44d0 <_Z10reyaxSetupv>:

void reyaxSetup()
{
   b44d0:	b500      	push	{lr}
   b44d2:	b093      	sub	sp, #76	; 0x4c
  String password = "BA4104032968BA1114299079021594AA";
   b44d4:	4984      	ldr	r1, [pc, #528]	; (b46e8 <_Z10reyaxSetupv+0x218>)
   b44d6:	4668      	mov	r0, sp
   b44d8:	f004 fabb 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
  String reply;
   b44dc:	4983      	ldr	r1, [pc, #524]	; (b46ec <_Z10reyaxSetupv+0x21c>)
   b44de:	a804      	add	r0, sp, #16
   b44e0:	f004 fab7 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
  int addr = 23;
  int net = 6;
  byte buf[40];

  Serial1.printf("AT+CPIN=%s\r\n", password.c_str()); // correct
   b44e4:	f004 ff02 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b44e8:	9a00      	ldr	r2, [sp, #0]
   b44ea:	4981      	ldr	r1, [pc, #516]	; (b46f0 <_Z10reyaxSetupv+0x220>)
   b44ec:	f7ff fe1a 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b44f0:	20c8      	movs	r0, #200	; 0xc8
   b44f2:	f004 f8f3 	bl	b86dc <delay>
  if (Serial1.available() > 0)
   b44f6:	f004 fef9 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b44fa:	6803      	ldr	r3, [r0, #0]
   b44fc:	691b      	ldr	r3, [r3, #16]
   b44fe:	4798      	blx	r3
   b4500:	2800      	cmp	r0, #0
   b4502:	dd18      	ble.n	b4536 <_Z10reyaxSetupv+0x66>
  {
    Serial.printf("Awaiting Reply from password\n");
   b4504:	f003 fc7c 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4508:	497a      	ldr	r1, [pc, #488]	; (b46f4 <_Z10reyaxSetupv+0x224>)
   b450a:	f7ff fe0b 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b450e:	f004 feed 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4512:	220a      	movs	r2, #10
   b4514:	4601      	mov	r1, r0
   b4516:	a808      	add	r0, sp, #32
   b4518:	f004 f99c 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b451c:	a908      	add	r1, sp, #32
   b451e:	a804      	add	r0, sp, #16
   b4520:	f004 fac8 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4524:	a808      	add	r0, sp, #32
   b4526:	f004 fa49 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("Reply: %s\n", reply.c_str());
   b452a:	f003 fc69 	bl	b7e00 <_Z16_fetch_usbserialv>
   b452e:	9a04      	ldr	r2, [sp, #16]
   b4530:	4971      	ldr	r1, [pc, #452]	; (b46f8 <_Z10reyaxSetupv+0x228>)
   b4532:	f7ff fdf7 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+ADDRESS=%i\r\n", addr); // correct
   b4536:	f004 fed9 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b453a:	4970      	ldr	r1, [pc, #448]	; (b46fc <_Z10reyaxSetupv+0x22c>)
   b453c:	2217      	movs	r2, #23
   b453e:	f7ff fdf1 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4542:	20c8      	movs	r0, #200	; 0xc8
   b4544:	f004 f8ca 	bl	b86dc <delay>
  if (Serial1.available() > 0)
   b4548:	f004 fed0 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b454c:	6803      	ldr	r3, [r0, #0]
   b454e:	691b      	ldr	r3, [r3, #16]
   b4550:	4798      	blx	r3
   b4552:	2800      	cmp	r0, #0
   b4554:	dd18      	ble.n	b4588 <_Z10reyaxSetupv+0xb8>
  {
    Serial.printf("Awaiting Reply from address\n");
   b4556:	f003 fc53 	bl	b7e00 <_Z16_fetch_usbserialv>
   b455a:	4969      	ldr	r1, [pc, #420]	; (b4700 <_Z10reyaxSetupv+0x230>)
   b455c:	f7ff fde2 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4560:	f004 fec4 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4564:	220a      	movs	r2, #10
   b4566:	4601      	mov	r1, r0
   b4568:	a808      	add	r0, sp, #32
   b456a:	f004 f973 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b456e:	a908      	add	r1, sp, #32
   b4570:	a804      	add	r0, sp, #16
   b4572:	f004 fa9f 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4576:	a808      	add	r0, sp, #32
   b4578:	f004 fa20 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("Reply address: %s\n", reply.c_str());
   b457c:	f003 fc40 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4580:	9a04      	ldr	r2, [sp, #16]
   b4582:	4960      	ldr	r1, [pc, #384]	; (b4704 <_Z10reyaxSetupv+0x234>)
   b4584:	f7ff fdce 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+NETWORKID=%i\r\n", net); // correct
   b4588:	f004 feb0 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b458c:	495e      	ldr	r1, [pc, #376]	; (b4708 <_Z10reyaxSetupv+0x238>)
   b458e:	2206      	movs	r2, #6
   b4590:	f7ff fdc8 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4594:	20c8      	movs	r0, #200	; 0xc8
   b4596:	f004 f8a1 	bl	b86dc <delay>
  if (Serial1.available() > 0)
   b459a:	f004 fea7 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b459e:	6803      	ldr	r3, [r0, #0]
   b45a0:	691b      	ldr	r3, [r3, #16]
   b45a2:	4798      	blx	r3
   b45a4:	2800      	cmp	r0, #0
   b45a6:	dd18      	ble.n	b45da <_Z10reyaxSetupv+0x10a>
  {
    Serial.printf("Awaiting Reply from networkid\n");
   b45a8:	f003 fc2a 	bl	b7e00 <_Z16_fetch_usbserialv>
   b45ac:	4957      	ldr	r1, [pc, #348]	; (b470c <_Z10reyaxSetupv+0x23c>)
   b45ae:	f7ff fdb9 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b45b2:	f004 fe9b 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b45b6:	220a      	movs	r2, #10
   b45b8:	4601      	mov	r1, r0
   b45ba:	a808      	add	r0, sp, #32
   b45bc:	f004 f94a 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b45c0:	a908      	add	r1, sp, #32
   b45c2:	a804      	add	r0, sp, #16
   b45c4:	f004 fa76 	bl	b8ab4 <_ZN6StringaSEOS_>
   b45c8:	a808      	add	r0, sp, #32
   b45ca:	f004 f9f7 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("Reply network: %s\n", reply.c_str());
   b45ce:	f003 fc17 	bl	b7e00 <_Z16_fetch_usbserialv>
   b45d2:	9a04      	ldr	r2, [sp, #16]
   b45d4:	494e      	ldr	r1, [pc, #312]	; (b4710 <_Z10reyaxSetupv+0x240>)
   b45d6:	f7ff fda5 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b45da:	f004 fe87 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b45de:	494d      	ldr	r1, [pc, #308]	; (b4714 <_Z10reyaxSetupv+0x244>)
   b45e0:	f7ff fda0 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b45e4:	20c8      	movs	r0, #200	; 0xc8
   b45e6:	f004 f879 	bl	b86dc <delay>
  if (Serial1.available() > 0)
   b45ea:	f004 fe7f 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b45ee:	6803      	ldr	r3, [r0, #0]
   b45f0:	691b      	ldr	r3, [r3, #16]
   b45f2:	4798      	blx	r3
   b45f4:	2800      	cmp	r0, #0
   b45f6:	dd18      	ble.n	b462a <_Z10reyaxSetupv+0x15a>
  {
    Serial.printf("Awaiting Reply\n");
   b45f8:	f003 fc02 	bl	b7e00 <_Z16_fetch_usbserialv>
   b45fc:	4946      	ldr	r1, [pc, #280]	; (b4718 <_Z10reyaxSetupv+0x248>)
   b45fe:	f7ff fd91 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4602:	f004 fe73 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4606:	220a      	movs	r2, #10
   b4608:	4601      	mov	r1, r0
   b460a:	a808      	add	r0, sp, #32
   b460c:	f004 f922 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4610:	a908      	add	r1, sp, #32
   b4612:	a804      	add	r0, sp, #16
   b4614:	f004 fa4e 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4618:	a808      	add	r0, sp, #32
   b461a:	f004 f9cf 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("Reply get address: %s\n", reply.c_str());
   b461e:	f003 fbef 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4622:	9a04      	ldr	r2, [sp, #16]
   b4624:	493d      	ldr	r1, [pc, #244]	; (b471c <_Z10reyaxSetupv+0x24c>)
   b4626:	f7ff fd7d 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+NETWORKID?\r\n"); // correct
   b462a:	f004 fe5f 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b462e:	493c      	ldr	r1, [pc, #240]	; (b4720 <_Z10reyaxSetupv+0x250>)
   b4630:	f7ff fd78 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4634:	20c8      	movs	r0, #200	; 0xc8
   b4636:	f004 f851 	bl	b86dc <delay>
  if (Serial1.available() > 0)
   b463a:	f004 fe57 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b463e:	6803      	ldr	r3, [r0, #0]
   b4640:	691b      	ldr	r3, [r3, #16]
   b4642:	4798      	blx	r3
   b4644:	2800      	cmp	r0, #0
   b4646:	dd18      	ble.n	b467a <_Z10reyaxSetupv+0x1aa>
  {
    Serial.printf("Awaiting Reply\n");
   b4648:	f003 fbda 	bl	b7e00 <_Z16_fetch_usbserialv>
   b464c:	4932      	ldr	r1, [pc, #200]	; (b4718 <_Z10reyaxSetupv+0x248>)
   b464e:	f7ff fd69 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4652:	f004 fe4b 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4656:	220a      	movs	r2, #10
   b4658:	4601      	mov	r1, r0
   b465a:	a808      	add	r0, sp, #32
   b465c:	f004 f8fa 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4660:	a908      	add	r1, sp, #32
   b4662:	a804      	add	r0, sp, #16
   b4664:	f004 fa26 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4668:	a808      	add	r0, sp, #32
   b466a:	f004 f9a7 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("Reply get network: %s\n", reply.c_str());
   b466e:	f003 fbc7 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4672:	9a04      	ldr	r2, [sp, #16]
   b4674:	492b      	ldr	r1, [pc, #172]	; (b4724 <_Z10reyaxSetupv+0x254>)
   b4676:	f7ff fd55 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+CPIN?\r\n"); // correct
   b467a:	f004 fe37 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b467e:	492a      	ldr	r1, [pc, #168]	; (b4728 <_Z10reyaxSetupv+0x258>)
   b4680:	f7ff fd50 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4684:	20c8      	movs	r0, #200	; 0xc8
   b4686:	f004 f829 	bl	b86dc <delay>
  if (Serial1.available() > 0)
   b468a:	f004 fe2f 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b468e:	6803      	ldr	r3, [r0, #0]
   b4690:	691b      	ldr	r3, [r3, #16]
   b4692:	4798      	blx	r3
   b4694:	2800      	cmp	r0, #0
   b4696:	dd1e      	ble.n	b46d6 <_Z10reyaxSetupv+0x206>
  {
    Serial.printf("Awaiting Reply\n");
   b4698:	f003 fbb2 	bl	b7e00 <_Z16_fetch_usbserialv>
   b469c:	491e      	ldr	r1, [pc, #120]	; (b4718 <_Z10reyaxSetupv+0x248>)
   b469e:	f7ff fd41 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b46a2:	f004 fe23 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b46a6:	220a      	movs	r2, #10
   b46a8:	4601      	mov	r1, r0
   b46aa:	a808      	add	r0, sp, #32
   b46ac:	f004 f8d2 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b46b0:	a908      	add	r1, sp, #32
   b46b2:	a804      	add	r0, sp, #16
   b46b4:	f004 f9fe 	bl	b8ab4 <_ZN6StringaSEOS_>
   b46b8:	a808      	add	r0, sp, #32
   b46ba:	f004 f97f 	bl	b89bc <_ZN6StringD1Ev>
    reply.getBytes(buf, 40);
   b46be:	2228      	movs	r2, #40	; 0x28
   b46c0:	a908      	add	r1, sp, #32
   b46c2:	2300      	movs	r3, #0
   b46c4:	a804      	add	r0, sp, #16
   b46c6:	f004 fa21 	bl	b8b0c <_ZNK6String8getBytesEPhjj>
    Serial.printf("Reply get password: %s\n", (char *)buf);
   b46ca:	f003 fb99 	bl	b7e00 <_Z16_fetch_usbserialv>
   b46ce:	4917      	ldr	r1, [pc, #92]	; (b472c <_Z10reyaxSetupv+0x25c>)
   b46d0:	aa08      	add	r2, sp, #32
   b46d2:	f7ff fd27 	bl	b4124 <_ZN5Print6printfEPKcz>
  String reply;
   b46d6:	a804      	add	r0, sp, #16
   b46d8:	f004 f970 	bl	b89bc <_ZN6StringD1Ev>
  String password = "BA4104032968BA1114299079021594AA";
   b46dc:	4668      	mov	r0, sp
   b46de:	f004 f96d 	bl	b89bc <_ZN6StringD1Ev>
  }
}
   b46e2:	b013      	add	sp, #76	; 0x4c
   b46e4:	f85d fb04 	ldr.w	pc, [sp], #4
   b46e8:	000bc3d2 	.word	0x000bc3d2
   b46ec:	000bc953 	.word	0x000bc953
   b46f0:	000bc3f3 	.word	0x000bc3f3
   b46f4:	000bc400 	.word	0x000bc400
   b46f8:	000bc41e 	.word	0x000bc41e
   b46fc:	000bc429 	.word	0x000bc429
   b4700:	000bc439 	.word	0x000bc439
   b4704:	000bc456 	.word	0x000bc456
   b4708:	000bc469 	.word	0x000bc469
   b470c:	000bc47b 	.word	0x000bc47b
   b4710:	000bc49a 	.word	0x000bc49a
   b4714:	000bc4ad 	.word	0x000bc4ad
   b4718:	000bc4bb 	.word	0x000bc4bb
   b471c:	000bc4cb 	.word	0x000bc4cb
   b4720:	000bc4e2 	.word	0x000bc4e2
   b4724:	000bc4f2 	.word	0x000bc4f2
   b4728:	000bc509 	.word	0x000bc509
   b472c:	000bc514 	.word	0x000bc514

000b4730 <_Z10reyaxResetv>:

void reyaxReset()
{
   b4730:	b500      	push	{lr}
   b4732:	b089      	sub	sp, #36	; 0x24
  String reply;
   b4734:	491a      	ldr	r1, [pc, #104]	; (b47a0 <_Z10reyaxResetv+0x70>)
   b4736:	4668      	mov	r0, sp
   b4738:	f004 f98b 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+RESET\r\n");
   b473c:	f004 fdd6 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4740:	4918      	ldr	r1, [pc, #96]	; (b47a4 <_Z10reyaxResetv+0x74>)
   b4742:	f7ff fcef 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(10000);
   b4746:	f242 7010 	movw	r0, #10000	; 0x2710
   b474a:	f003 ffc7 	bl	b86dc <delay>
  if (Serial1.available() > 0)
   b474e:	f004 fdcd 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4752:	6803      	ldr	r3, [r0, #0]
   b4754:	691b      	ldr	r3, [r3, #16]
   b4756:	4798      	blx	r3
   b4758:	2800      	cmp	r0, #0
   b475a:	dd18      	ble.n	b478e <_Z10reyaxResetv+0x5e>
  {
    Serial.printf("Awaiting Reply from address\n");
   b475c:	f003 fb50 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4760:	4911      	ldr	r1, [pc, #68]	; (b47a8 <_Z10reyaxResetv+0x78>)
   b4762:	f7ff fcdf 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4766:	f004 fdc1 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b476a:	220a      	movs	r2, #10
   b476c:	4601      	mov	r1, r0
   b476e:	a804      	add	r0, sp, #16
   b4770:	f004 f870 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4774:	a904      	add	r1, sp, #16
   b4776:	4668      	mov	r0, sp
   b4778:	f004 f99c 	bl	b8ab4 <_ZN6StringaSEOS_>
   b477c:	a804      	add	r0, sp, #16
   b477e:	f004 f91d 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("Reply address: %s\n", reply.c_str());
   b4782:	f003 fb3d 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4786:	9a00      	ldr	r2, [sp, #0]
   b4788:	4908      	ldr	r1, [pc, #32]	; (b47ac <_Z10reyaxResetv+0x7c>)
   b478a:	f7ff fccb 	bl	b4124 <_ZN5Print6printfEPKcz>
  }
  System.reset();
   b478e:	f004 f9fd 	bl	b8b8c <_ZN11SystemClass5resetEv>
  String reply;
   b4792:	4668      	mov	r0, sp
   b4794:	f004 f912 	bl	b89bc <_ZN6StringD1Ev>
}
   b4798:	b009      	add	sp, #36	; 0x24
   b479a:	f85d fb04 	ldr.w	pc, [sp], #4
   b479e:	bf00      	nop
   b47a0:	000bc953 	.word	0x000bc953
   b47a4:	000bc52c 	.word	0x000bc52c
   b47a8:	000bc439 	.word	0x000bc439
   b47ac:	000bc456 	.word	0x000bc456

000b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b47b0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b47b2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b47b4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b47b6:	b17c      	cbz	r4, b47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b47b8:	6863      	ldr	r3, [r4, #4]
   b47ba:	3b01      	subs	r3, #1
   b47bc:	6063      	str	r3, [r4, #4]
   b47be:	b95b      	cbnz	r3, b47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b47c0:	6823      	ldr	r3, [r4, #0]
   b47c2:	4620      	mov	r0, r4
   b47c4:	689b      	ldr	r3, [r3, #8]
   b47c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47c8:	68a3      	ldr	r3, [r4, #8]
   b47ca:	3b01      	subs	r3, #1
   b47cc:	60a3      	str	r3, [r4, #8]
   b47ce:	b91b      	cbnz	r3, b47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b47d0:	6823      	ldr	r3, [r4, #0]
   b47d2:	4620      	mov	r0, r4
   b47d4:	68db      	ldr	r3, [r3, #12]
   b47d6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b47d8:	4628      	mov	r0, r5
   b47da:	bd38      	pop	{r3, r4, r5, pc}

000b47dc <_GLOBAL__sub_I___appProductVersion>:
   b47dc:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b47de:	4b31      	ldr	r3, [pc, #196]	; (b48a4 <_GLOBAL__sub_I___appProductVersion+0xc8>)
String deviceID;
   b47e0:	4d31      	ldr	r5, [pc, #196]	; (b48a8 <_GLOBAL__sub_I___appProductVersion+0xcc>)
   b47e2:	2400      	movs	r4, #0
   b47e4:	701c      	strb	r4, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b47e6:	f004 fd11 	bl	b920c <spark_protocol_instance>
   b47ea:	4623      	mov	r3, r4
   b47ec:	4622      	mov	r2, r4
   b47ee:	2101      	movs	r1, #1
   b47f0:	f004 fd1c 	bl	b922c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b47f4:	f004 fd0a 	bl	b920c <spark_protocol_instance>
   b47f8:	4623      	mov	r3, r4
   b47fa:	4622      	mov	r2, r4
   b47fc:	2117      	movs	r1, #23
   b47fe:	f004 fd0d 	bl	b921c <spark_protocol_set_product_id>
String TOKEN = "WYAarNcBsj6qVc0NKg1c"; // catalyst compost
   b4802:	492a      	ldr	r1, [pc, #168]	; (b48ac <_GLOBAL__sub_I___appProductVersion+0xd0>)
   b4804:	482a      	ldr	r0, [pc, #168]	; (b48b0 <_GLOBAL__sub_I___appProductVersion+0xd4>)
   b4806:	f004 f924 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
        return spark_deviceID();
   b480a:	482a      	ldr	r0, [pc, #168]	; (b48b4 <_GLOBAL__sub_I___appProductVersion+0xd8>)
   b480c:	f002 fcb8 	bl	b7180 <spark_deviceID>
TCPClient pubsub;
   b4810:	4929      	ldr	r1, [pc, #164]	; (b48b8 <_GLOBAL__sub_I___appProductVersion+0xdc>)
   b4812:	4608      	mov	r0, r1
   b4814:	f003 f982 	bl	b7b1c <_ZN9TCPClientC1Ev>
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   b4818:	4927      	ldr	r1, [pc, #156]	; (b48b8 <_GLOBAL__sub_I___appProductVersion+0xdc>)
   b481a:	4828      	ldr	r0, [pc, #160]	; (b48bc <_GLOBAL__sub_I___appProductVersion+0xe0>)
   b481c:	f001 fff4 	bl	b6808 <_ZN12PubSubClientC1ER6Client>
FuelGauge fuel;
   b4820:	4621      	mov	r1, r4
   b4822:	4827      	ldr	r0, [pc, #156]	; (b48c0 <_GLOBAL__sub_I___appProductVersion+0xe4>)
   b4824:	f003 ff38 	bl	b8698 <_ZN9FuelGaugeC1Eb>
String deviceID;
   b4828:	4629      	mov	r1, r5
   b482a:	4826      	ldr	r0, [pc, #152]	; (b48c4 <_GLOBAL__sub_I___appProductVersion+0xe8>)
   b482c:	f004 f911 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
String incomingString;
   b4830:	4629      	mov	r1, r5
   b4832:	4825      	ldr	r0, [pc, #148]	; (b48c8 <_GLOBAL__sub_I___appProductVersion+0xec>)
   b4834:	f004 f90d 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
String incomingString2;
   b4838:	4629      	mov	r1, r5
   b483a:	4824      	ldr	r0, [pc, #144]	; (b48cc <_GLOBAL__sub_I___appProductVersion+0xf0>)
   b483c:	f004 f909 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
String WEBHOOK_NAME = "customer01";
   b4840:	4923      	ldr	r1, [pc, #140]	; (b48d0 <_GLOBAL__sub_I___appProductVersion+0xf4>)
   b4842:	4824      	ldr	r0, [pc, #144]	; (b48d4 <_GLOBAL__sub_I___appProductVersion+0xf8>)
   b4844:	f004 f905 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
Ubidots ubidots("webhook", UBI_PARTICLE);
   b4848:	2203      	movs	r2, #3
   b484a:	4923      	ldr	r1, [pc, #140]	; (b48d8 <_GLOBAL__sub_I___appProductVersion+0xfc>)
   b484c:	4823      	ldr	r0, [pc, #140]	; (b48dc <_GLOBAL__sub_I___appProductVersion+0x100>)
   b484e:	f001 f9bf 	bl	b5bd0 <_ZN7UbidotsC1EPc11IotProtocol>
String parse0, parse1, parse2, parse3, parse4;
   b4852:	4629      	mov	r1, r5
   b4854:	4822      	ldr	r0, [pc, #136]	; (b48e0 <_GLOBAL__sub_I___appProductVersion+0x104>)
   b4856:	f004 f8fc 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
   b485a:	4629      	mov	r1, r5
   b485c:	4821      	ldr	r0, [pc, #132]	; (b48e4 <_GLOBAL__sub_I___appProductVersion+0x108>)
   b485e:	f004 f8f8 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
   b4862:	4629      	mov	r1, r5
   b4864:	4820      	ldr	r0, [pc, #128]	; (b48e8 <_GLOBAL__sub_I___appProductVersion+0x10c>)
   b4866:	f004 f8f4 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
   b486a:	4629      	mov	r1, r5
   b486c:	481f      	ldr	r0, [pc, #124]	; (b48ec <_GLOBAL__sub_I___appProductVersion+0x110>)
   b486e:	f004 f8f0 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
   b4872:	4629      	mov	r1, r5
   b4874:	481e      	ldr	r0, [pc, #120]	; (b48f0 <_GLOBAL__sub_I___appProductVersion+0x114>)
   b4876:	f004 f8ec 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b487a:	4b1e      	ldr	r3, [pc, #120]	; (b48f4 <_GLOBAL__sub_I___appProductVersion+0x118>)
   b487c:	1d1a      	adds	r2, r3, #4
   b487e:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b4880:	4a1d      	ldr	r2, [pc, #116]	; (b48f8 <_GLOBAL__sub_I___appProductVersion+0x11c>)
   b4882:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4884:	2201      	movs	r2, #1
   b4886:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b488a:	751a      	strb	r2, [r3, #20]
   b488c:	611c      	str	r4, [r3, #16]
              error_(SYSTEM_ERROR_NONE) {
   b488e:	4b1b      	ldr	r3, [pc, #108]	; (b48fc <_GLOBAL__sub_I___appProductVersion+0x120>)
   b4890:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4894:	f1a2 1201 	sub.w	r2, r2, #65537	; 0x10001
   b4898:	609a      	str	r2, [r3, #8]
}
   b489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        set_system_mode(mode);
   b489e:	2002      	movs	r0, #2
   b48a0:	f002 bd16 	b.w	b72d0 <set_system_mode>
   b48a4:	2003e1a4 	.word	0x2003e1a4
   b48a8:	000bc953 	.word	0x000bc953
   b48ac:	000bc537 	.word	0x000bc537
   b48b0:	2003e184 	.word	0x2003e184
   b48b4:	2003e168 	.word	0x2003e168
   b48b8:	2003e3a0 	.word	0x2003e3a0
   b48bc:	2003e2dc 	.word	0x2003e2dc
   b48c0:	2003e1dc 	.word	0x2003e1dc
   b48c4:	2003e1c8 	.word	0x2003e1c8
   b48c8:	2003e1e4 	.word	0x2003e1e4
   b48cc:	2003e1f4 	.word	0x2003e1f4
   b48d0:	000bc54c 	.word	0x000bc54c
   b48d4:	2003e194 	.word	0x2003e194
   b48d8:	000bc557 	.word	0x000bc557
   b48dc:	2003e478 	.word	0x2003e478
   b48e0:	2003e28c 	.word	0x2003e28c
   b48e4:	2003e29c 	.word	0x2003e29c
   b48e8:	2003e2ac 	.word	0x2003e2ac
   b48ec:	2003e2bc 	.word	0x2003e2bc
   b48f0:	2003e2cc 	.word	0x2003e2cc
   b48f4:	2003e1a8 	.word	0x2003e1a8
   b48f8:	00030010 	.word	0x00030010
   b48fc:	2003e178 	.word	0x2003e178

000b4900 <_Z9goOfflinev>:
{
   b4900:	b530      	push	{r4, r5, lr}
   b4902:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4904:	2300      	movs	r3, #0
  Particle.disconnect();
   b4906:	a801      	add	r0, sp, #4
   b4908:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b490c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4910:	f003 fb7f 	bl	b8012 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4914:	f002 fc2c 	bl	b7170 <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   b4918:	4604      	mov	r4, r0
   b491a:	b110      	cbz	r0, b4922 <_Z9goOfflinev+0x22>
            spark_process();
   b491c:	f002 fc18 	bl	b7150 <spark_process>
        while (_while() && !_condition()) {
   b4920:	e7f8      	b.n	b4914 <_Z9goOfflinev+0x14>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4922:	4d0b      	ldr	r5, [pc, #44]	; (b4950 <_Z9goOfflinev+0x50>)
   b4924:	f002 fc24 	bl	b7170 <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b4928:	6868      	ldr	r0, [r5, #4]
   b492a:	4623      	mov	r3, r4
   b492c:	4622      	mov	r2, r4
   b492e:	4621      	mov	r1, r4
   b4930:	f002 fc8e 	bl	b7250 <network_off>
  waitUntil(Cellular.isOff);
   b4934:	4628      	mov	r0, r5
   b4936:	f002 fda5 	bl	b7484 <_ZN5spark12NetworkClass5isOffEv>
   b493a:	b910      	cbnz	r0, b4942 <_Z9goOfflinev+0x42>
            spark_process();
   b493c:	f002 fc08 	bl	b7150 <spark_process>
        while (_while() && !_condition()) {
   b4940:	e7f8      	b.n	b4934 <_Z9goOfflinev+0x34>
   b4942:	4803      	ldr	r0, [pc, #12]	; (b4950 <_Z9goOfflinev+0x50>)
}
   b4944:	b005      	add	sp, #20
   b4946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  waitUntil(Cellular.isOff);
   b494a:	f002 bd9b 	b.w	b7484 <_ZN5spark12NetworkClass5isOffEv>
   b494e:	bf00      	nop
   b4950:	2003e668 	.word	0x2003e668

000b4954 <setup>:
{
   b4954:	b530      	push	{r4, r5, lr}
  RGB.brightness(255);
   b4956:	2101      	movs	r1, #1
{
   b4958:	b085      	sub	sp, #20
  RGB.brightness(255);
   b495a:	20ff      	movs	r0, #255	; 0xff
   b495c:	f003 fea9 	bl	b86b2 <_ZN8RGBClass10brightnessEhb>
  Serial.begin(9600);
   b4960:	f003 fa4e 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4964:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4968:	f003 fa3e 	bl	b7de8 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   b496c:	f004 fcbe 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4970:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4974:	f003 f996 	bl	b7ca4 <_ZN11USARTSerial5beginEm>
  delay(3000);
   b4978:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b497c:	f003 feae 	bl	b86dc <delay>
  reyaxSetup();
   b4980:	f7ff fda6 	bl	b44d0 <_Z10reyaxSetupv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b4984:	4b1c      	ldr	r3, [pc, #112]	; (b49f8 <setup+0xa4>)
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(120000));
   b4986:	a801      	add	r0, sp, #4
   b4988:	2403      	movs	r4, #3
        bool clearSession) :
   b498a:	2501      	movs	r5, #1
    timeout_ = timeout;
   b498c:	e9cd 4301 	strd	r4, r3, [sp, #4]
        bool clearSession) :
   b4990:	f8ad 500c 	strh.w	r5, [sp, #12]
   b4994:	f003 fb57 	bl	b8046 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  goOnline();
   b4998:	f7ff fd28 	bl	b43ec <_Z8goOnlinev>
  Particle.syncTime();
   b499c:	f7ff fb89 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
  Particle.publishVitals();
   b49a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b49a4:	4815      	ldr	r0, [pc, #84]	; (b49fc <setup+0xa8>)
   b49a6:	f003 fb30 	bl	b800a <_ZN10CloudClass13publishVitalsEm>
  plume.setServer(thingsboardServer, MQTTPORT);
   b49aa:	f240 725b 	movw	r2, #1883	; 0x75b
   b49ae:	4914      	ldr	r1, [pc, #80]	; (b4a00 <setup+0xac>)
   b49b0:	4814      	ldr	r0, [pc, #80]	; (b4a04 <setup+0xb0>)
   b49b2:	f002 fa26 	bl	b6e02 <_ZN12PubSubClient9setServerEPKct>
  plumeConnect();
   b49b6:	f7ff fbc3 	bl	b4140 <_Z12plumeConnectv>
  plumePublish();
   b49ba:	f7ff fbf5 	bl	b41a8 <_Z12plumePublishv>
  delay(3000);
   b49be:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49c2:	f003 fe8b 	bl	b86dc <delay>
  goOffline();
   b49c6:	f7ff ff9b 	bl	b4900 <_Z9goOfflinev>
  RGB.brightness(3);
   b49ca:	4629      	mov	r1, r5
   b49cc:	4620      	mov	r0, r4
   b49ce:	f003 fe70 	bl	b86b2 <_ZN8RGBClass10brightnessEhb>
   b49d2:	f002 fb53 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
  lastSend = millis();
   b49d6:	4b0c      	ldr	r3, [pc, #48]	; (b4a08 <setup+0xb4>)
  counter = 0;
   b49d8:	4a0c      	ldr	r2, [pc, #48]	; (b4a0c <setup+0xb8>)
  lastSend = millis();
   b49da:	6018      	str	r0, [r3, #0]
  counter = 0;
   b49dc:	2300      	movs	r3, #0
   b49de:	6013      	str	r3, [r2, #0]
  dataSent = false;
   b49e0:	4a0b      	ldr	r2, [pc, #44]	; (b4a10 <setup+0xbc>)
   b49e2:	7013      	strb	r3, [r2, #0]
  Serial.printf("deviceID: %s\n", ID.c_str());
   b49e4:	f003 fa0c 	bl	b7e00 <_Z16_fetch_usbserialv>
   b49e8:	4b0a      	ldr	r3, [pc, #40]	; (b4a14 <setup+0xc0>)
   b49ea:	490b      	ldr	r1, [pc, #44]	; (b4a18 <setup+0xc4>)
   b49ec:	681a      	ldr	r2, [r3, #0]
   b49ee:	f7ff fb99 	bl	b4124 <_ZN5Print6printfEPKcz>
}
   b49f2:	b005      	add	sp, #20
   b49f4:	bd30      	pop	{r4, r5, pc}
   b49f6:	bf00      	nop
   b49f8:	0001d4c0 	.word	0x0001d4c0
   b49fc:	2003e740 	.word	0x2003e740
   b4a00:	2003df74 	.word	0x2003df74
   b4a04:	2003e2dc 	.word	0x2003e2dc
   b4a08:	2003e204 	.word	0x2003e204
   b4a0c:	2003e1c0 	.word	0x2003e1c0
   b4a10:	2003e1c4 	.word	0x2003e1c4
   b4a14:	2003e168 	.word	0x2003e168
   b4a18:	000bc55f 	.word	0x000bc55f

000b4a1c <_Z8sendDatav>:
{
   b4a1c:	b530      	push	{r4, r5, lr}
   b4a1e:	ed2d 8b02 	vpush	{d8}
   b4a22:	b085      	sub	sp, #20
  goOnline();
   b4a24:	f7ff fce2 	bl	b43ec <_Z8goOnlinev>
  ubidots.add("counter", counter);
   b4a28:	4c2c      	ldr	r4, [pc, #176]	; (b4adc <_Z8sendDatav+0xc0>)
   b4a2a:	4d2d      	ldr	r5, [pc, #180]	; (b4ae0 <_Z8sendDatav+0xc4>)
  delay(1200);
   b4a2c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4a30:	f003 fe54 	bl	b86dc <delay>
  float batterySoc = System.batteryCharge();
   b4a34:	f7ff fb48 	bl	b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  ubidots.add("counter", counter);
   b4a38:	edd4 7a00 	vldr	s15, [r4]
   b4a3c:	4929      	ldr	r1, [pc, #164]	; (b4ae4 <_Z8sendDatav+0xc8>)
   b4a3e:	482a      	ldr	r0, [pc, #168]	; (b4ae8 <_Z8sendDatav+0xcc>)
  float batterySoc = System.batteryCharge();
   b4a40:	eeb0 8a40 	vmov.f32	s16, s0
  ubidots.add("counter", counter);
   b4a44:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b4a48:	f001 f8d3 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
  ubidots.add("homeBattery", batterySoc);
   b4a4c:	4927      	ldr	r1, [pc, #156]	; (b4aec <_Z8sendDatav+0xd0>)
   b4a4e:	4826      	ldr	r0, [pc, #152]	; (b4ae8 <_Z8sendDatav+0xcc>)
   b4a50:	eeb0 0a48 	vmov.f32	s0, s16
   b4a54:	f001 f8cd 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
  bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC);
   b4a58:	4b25      	ldr	r3, [pc, #148]	; (b4af0 <_Z8sendDatav+0xd4>)
   b4a5a:	782a      	ldrb	r2, [r5, #0]
   b4a5c:	6819      	ldr	r1, [r3, #0]
   b4a5e:	4822      	ldr	r0, [pc, #136]	; (b4ae8 <_Z8sendDatav+0xcc>)
   b4a60:	f001 f8d0 	bl	b5c04 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
  if (bufferSent)
   b4a64:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4a66:	f88d 3000 	strb.w	r3, [sp]
   b4a6a:	4602      	mov	r2, r0
   b4a6c:	233c      	movs	r3, #60	; 0x3c
   b4a6e:	b340      	cbz	r0, b4ac2 <_Z8sendDatav+0xa6>
   b4a70:	2200      	movs	r2, #0
   b4a72:	4920      	ldr	r1, [pc, #128]	; (b4af4 <_Z8sendDatav+0xd8>)
   b4a74:	a802      	add	r0, sp, #8
   b4a76:	f003 fbfb 	bl	b8270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4a7a:	a803      	add	r0, sp, #12
   b4a7c:	f7ff fe98 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1200);
   b4a80:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4a84:	f003 fe2a 	bl	b86dc <delay>
    dataSent = true;
   b4a88:	4b1b      	ldr	r3, [pc, #108]	; (b4af8 <_Z8sendDatav+0xdc>)
   b4a8a:	2501      	movs	r5, #1
   b4a8c:	701d      	strb	r5, [r3, #0]
    checkUpdates();
   b4a8e:	f7ff fcf1 	bl	b4474 <_Z12checkUpdatesv>
    delay(1000);
   b4a92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4a96:	f003 fe21 	bl	b86dc <delay>
    goOffline();
   b4a9a:	f7ff ff31 	bl	b4900 <_Z9goOfflinev>
    RGB.brightness(3);
   b4a9e:	4629      	mov	r1, r5
   b4aa0:	2003      	movs	r0, #3
   b4aa2:	f003 fe06 	bl	b86b2 <_ZN8RGBClass10brightnessEhb>
    onlineNow = false;
   b4aa6:	4b15      	ldr	r3, [pc, #84]	; (b4afc <_Z8sendDatav+0xe0>)
   b4aa8:	2200      	movs	r2, #0
   b4aaa:	701a      	strb	r2, [r3, #0]
   b4aac:	f002 fae6 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
    lastSend = millis();
   b4ab0:	4b13      	ldr	r3, [pc, #76]	; (b4b00 <_Z8sendDatav+0xe4>)
   b4ab2:	6018      	str	r0, [r3, #0]
  counter++;
   b4ab4:	6823      	ldr	r3, [r4, #0]
   b4ab6:	3301      	adds	r3, #1
   b4ab8:	6023      	str	r3, [r4, #0]
}
   b4aba:	b005      	add	sp, #20
   b4abc:	ecbd 8b02 	vpop	{d8}
   b4ac0:	bd30      	pop	{r4, r5, pc}
   b4ac2:	4910      	ldr	r1, [pc, #64]	; (b4b04 <_Z8sendDatav+0xe8>)
   b4ac4:	a802      	add	r0, sp, #8
   b4ac6:	f003 fbd3 	bl	b8270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4aca:	a803      	add	r0, sp, #12
   b4acc:	f7ff fe70 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1200);
   b4ad0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4ad4:	f003 fe02 	bl	b86dc <delay>
   b4ad8:	e7ec      	b.n	b4ab4 <_Z8sendDatav+0x98>
   b4ada:	bf00      	nop
   b4adc:	2003e1c0 	.word	0x2003e1c0
   b4ae0:	2003e1a4 	.word	0x2003e1a4
   b4ae4:	000bc56d 	.word	0x000bc56d
   b4ae8:	2003e478 	.word	0x2003e478
   b4aec:	000bc575 	.word	0x000bc575
   b4af0:	2003e194 	.word	0x2003e194
   b4af4:	000bc581 	.word	0x000bc581
   b4af8:	2003e1c4 	.word	0x2003e1c4
   b4afc:	2003e288 	.word	0x2003e288
   b4b00:	2003e204 	.word	0x2003e204
   b4b04:	000bc596 	.word	0x000bc596

000b4b08 <loop>:
{
   b4b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (onlineNow) ///////////////
   b4b0a:	4ea6      	ldr	r6, [pc, #664]	; (b4da4 <loop+0x29c>)
   b4b0c:	7833      	ldrb	r3, [r6, #0]
{
   b4b0e:	b087      	sub	sp, #28
  if (onlineNow) ///////////////
   b4b10:	b113      	cbz	r3, b4b18 <loop+0x10>
    plume.loop();
   b4b12:	48a5      	ldr	r0, [pc, #660]	; (b4da8 <loop+0x2a0>)
   b4b14:	f002 f880 	bl	b6c18 <_ZN12PubSubClient4loopEv>
  if ((earlyBird == false) && (((Time.minute() == 59) || (Time.minute() == 29)) && !Particle.connected()))
   b4b18:	4ca4      	ldr	r4, [pc, #656]	; (b4dac <loop+0x2a4>)
   b4b1a:	7823      	ldrb	r3, [r4, #0]
   b4b1c:	bb0b      	cbnz	r3, b4b62 <loop+0x5a>
   b4b1e:	f003 fe51 	bl	b87c4 <_ZN9TimeClass6minuteEv>
   b4b22:	283b      	cmp	r0, #59	; 0x3b
   b4b24:	d119      	bne.n	b4b5a <loop+0x52>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4b26:	f002 fb23 	bl	b7170 <spark_cloud_flag_connected>
   b4b2a:	b9d0      	cbnz	r0, b4b62 <loop+0x5a>
    RGB.brightness(3);
   b4b2c:	2101      	movs	r1, #1
   b4b2e:	2003      	movs	r0, #3
    onlineNow = true;
   b4b30:	2501      	movs	r5, #1
    RGB.brightness(3);
   b4b32:	f003 fdbe 	bl	b86b2 <_ZN8RGBClass10brightnessEhb>
    onlineNow = true;
   b4b36:	7035      	strb	r5, [r6, #0]
    goOnline();
   b4b38:	f7ff fc58 	bl	b43ec <_Z8goOnlinev>
    Particle.syncTime();
   b4b3c:	f7ff fab9 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
    Particle.publishVitals();
   b4b40:	489b      	ldr	r0, [pc, #620]	; (b4db0 <loop+0x2a8>)
   b4b42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4b46:	f003 fa60 	bl	b800a <_ZN10CloudClass13publishVitalsEm>
    if (!plume.connected())
   b4b4a:	4897      	ldr	r0, [pc, #604]	; (b4da8 <loop+0x2a0>)
    earlyBird = true; // we are early
   b4b4c:	7025      	strb	r5, [r4, #0]
    if (!plume.connected())
   b4b4e:	f001 ff7a 	bl	b6a46 <_ZN12PubSubClient9connectedEv>
   b4b52:	b930      	cbnz	r0, b4b62 <loop+0x5a>
      plumeConnect();
   b4b54:	f7ff faf4 	bl	b4140 <_Z12plumeConnectv>
   b4b58:	e003      	b.n	b4b62 <loop+0x5a>
  if ((earlyBird == false) && (((Time.minute() == 59) || (Time.minute() == 29)) && !Particle.connected()))
   b4b5a:	f003 fe33 	bl	b87c4 <_ZN9TimeClass6minuteEv>
   b4b5e:	281d      	cmp	r0, #29
   b4b60:	d0e1      	beq.n	b4b26 <loop+0x1e>
  if ((Time.minute() == 0) || (Time.minute() == 30))
   b4b62:	f003 fe2f 	bl	b87c4 <_ZN9TimeClass6minuteEv>
   b4b66:	2800      	cmp	r0, #0
   b4b68:	f040 80b4 	bne.w	b4cd4 <loop+0x1cc>
    plumePublish();
   b4b6c:	f7ff fb1c 	bl	b41a8 <_Z12plumePublishv>
    sendData();
   b4b70:	f7ff ff54 	bl	b4a1c <_Z8sendDatav>
    earlyBird = false; // we are too early
   b4b74:	2300      	movs	r3, #0
   b4b76:	7023      	strb	r3, [r4, #0]
  if (Serial1.available())
   b4b78:	f004 fbb8 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4b7c:	6803      	ldr	r3, [r0, #0]
   b4b7e:	691b      	ldr	r3, [r3, #16]
   b4b80:	4798      	blx	r3
   b4b82:	2800      	cmp	r0, #0
   b4b84:	f000 80a4 	beq.w	b4cd0 <loop+0x1c8>
    parse0 = Serial1.readStringUntil(',');
   b4b88:	f004 fbb0 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4b8c:	222c      	movs	r2, #44	; 0x2c
   b4b8e:	4601      	mov	r1, r0
   b4b90:	a802      	add	r0, sp, #8
   b4b92:	f003 fe5f 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4b96:	a902      	add	r1, sp, #8
   b4b98:	4886      	ldr	r0, [pc, #536]	; (b4db4 <loop+0x2ac>)
    tempF = Serial1.readStringUntil(',').toFloat();
   b4b9a:	4d87      	ldr	r5, [pc, #540]	; (b4db8 <loop+0x2b0>)
    voltage = Serial1.readStringUntil(',').toFloat();
   b4b9c:	4c87      	ldr	r4, [pc, #540]	; (b4dbc <loop+0x2b4>)
    probeNumber = Serial1.readStringUntil('\n').toInt();
   b4b9e:	4e88      	ldr	r6, [pc, #544]	; (b4dc0 <loop+0x2b8>)
    incomingString = Serial1.readString();
   b4ba0:	4f88      	ldr	r7, [pc, #544]	; (b4dc4 <loop+0x2bc>)
    parse0 = Serial1.readStringUntil(',');
   b4ba2:	f003 ff87 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4ba6:	a802      	add	r0, sp, #8
   b4ba8:	f003 ff08 	bl	b89bc <_ZN6StringD1Ev>
    parse1 = Serial1.readStringUntil(',');
   b4bac:	f004 fb9e 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4bb0:	222c      	movs	r2, #44	; 0x2c
   b4bb2:	4601      	mov	r1, r0
   b4bb4:	a802      	add	r0, sp, #8
   b4bb6:	f003 fe4d 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4bba:	a902      	add	r1, sp, #8
   b4bbc:	4882      	ldr	r0, [pc, #520]	; (b4dc8 <loop+0x2c0>)
   b4bbe:	f003 ff79 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4bc2:	a802      	add	r0, sp, #8
   b4bc4:	f003 fefa 	bl	b89bc <_ZN6StringD1Ev>
    tempF = Serial1.readStringUntil(',').toFloat();
   b4bc8:	f004 fb90 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4bcc:	222c      	movs	r2, #44	; 0x2c
   b4bce:	4601      	mov	r1, r0
   b4bd0:	a802      	add	r0, sp, #8
   b4bd2:	f003 fe3f 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4bd6:	a802      	add	r0, sp, #8
   b4bd8:	f003 ffb6 	bl	b8b48 <_ZNK6String7toFloatEv>
   b4bdc:	a802      	add	r0, sp, #8
   b4bde:	ed85 0a00 	vstr	s0, [r5]
   b4be2:	f003 feeb 	bl	b89bc <_ZN6StringD1Ev>
    voltage = Serial1.readStringUntil(',').toFloat();
   b4be6:	f004 fb81 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4bea:	222c      	movs	r2, #44	; 0x2c
   b4bec:	4601      	mov	r1, r0
   b4bee:	a802      	add	r0, sp, #8
   b4bf0:	f003 fe30 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4bf4:	a802      	add	r0, sp, #8
   b4bf6:	f003 ffa7 	bl	b8b48 <_ZNK6String7toFloatEv>
   b4bfa:	a802      	add	r0, sp, #8
   b4bfc:	ed84 0a00 	vstr	s0, [r4]
   b4c00:	f003 fedc 	bl	b89bc <_ZN6StringD1Ev>
    probeNumber = Serial1.readStringUntil('\n').toInt();
   b4c04:	f004 fb72 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4c08:	220a      	movs	r2, #10
   b4c0a:	4601      	mov	r1, r0
   b4c0c:	a802      	add	r0, sp, #8
   b4c0e:	f003 fe21 	bl	b8854 <_ZN6Stream15readStringUntilEc>
   b4c12:	a802      	add	r0, sp, #8
   b4c14:	f003 ff92 	bl	b8b3c <_ZNK6String5toIntEv>
   b4c18:	6030      	str	r0, [r6, #0]
   b4c1a:	a802      	add	r0, sp, #8
   b4c1c:	f003 fece 	bl	b89bc <_ZN6StringD1Ev>
    incomingString = Serial1.readString();
   b4c20:	f004 fb64 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4c24:	4601      	mov	r1, r0
   b4c26:	a802      	add	r0, sp, #8
   b4c28:	f003 fe00 	bl	b882c <_ZN6Stream10readStringEv>
   b4c2c:	a902      	add	r1, sp, #8
   b4c2e:	4638      	mov	r0, r7
   b4c30:	f003 ff40 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4c34:	a802      	add	r0, sp, #8
   b4c36:	f003 fec1 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("incomingString: %s\n", incomingString.c_str());
   b4c3a:	f003 f8e1 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4c3e:	683a      	ldr	r2, [r7, #0]
   b4c40:	4962      	ldr	r1, [pc, #392]	; (b4dcc <loop+0x2c4>)
   b4c42:	f7ff fa6f 	bl	b4124 <_ZN5Print6printfEPKcz>
    Serial.printf("tempF: %.02f, probeNumber: %i\n", tempF, probeNumber);
   b4c46:	f003 f8db 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4c4a:	4607      	mov	r7, r0
   b4c4c:	6828      	ldr	r0, [r5, #0]
   b4c4e:	f004 fe9f 	bl	b9990 <__aeabi_f2d>
   b4c52:	460b      	mov	r3, r1
   b4c54:	6831      	ldr	r1, [r6, #0]
   b4c56:	9100      	str	r1, [sp, #0]
   b4c58:	4602      	mov	r2, r0
   b4c5a:	495d      	ldr	r1, [pc, #372]	; (b4dd0 <loop+0x2c8>)
   b4c5c:	4638      	mov	r0, r7
   b4c5e:	f7ff fa61 	bl	b4124 <_ZN5Print6printfEPKcz>
    if (probeNumber == 1)
   b4c62:	6836      	ldr	r6, [r6, #0]
      ubidots.add("tempBlue", tempF);
   b4c64:	ed95 0a00 	vldr	s0, [r5]
    if (probeNumber == 1)
   b4c68:	2e01      	cmp	r6, #1
   b4c6a:	d139      	bne.n	b4ce0 <loop+0x1d8>
      ubidots.add("tempBlue", tempF);
   b4c6c:	4959      	ldr	r1, [pc, #356]	; (b4dd4 <loop+0x2cc>)
   b4c6e:	485a      	ldr	r0, [pc, #360]	; (b4dd8 <loop+0x2d0>)
   b4c70:	f000 ffbf 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageBlue", voltage);
   b4c74:	4959      	ldr	r1, [pc, #356]	; (b4ddc <loop+0x2d4>)
   b4c76:	ed94 0a00 	vldr	s0, [r4]
   b4c7a:	4857      	ldr	r0, [pc, #348]	; (b4dd8 <loop+0x2d0>)
   b4c7c:	f000 ffb9 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      tempBlue = tempF;
   b4c80:	4b57      	ldr	r3, [pc, #348]	; (b4de0 <loop+0x2d8>)
   b4c82:	682a      	ldr	r2, [r5, #0]
      voltageBlue = voltage;
   b4c84:	4957      	ldr	r1, [pc, #348]	; (b4de4 <loop+0x2dc>)
      tempBlue = tempF;
   b4c86:	601a      	str	r2, [r3, #0]
      voltageBlue = voltage;
   b4c88:	6823      	ldr	r3, [r4, #0]
   b4c8a:	600b      	str	r3, [r1, #0]
      t1 = tempF;
   b4c8c:	4956      	ldr	r1, [pc, #344]	; (b4de8 <loop+0x2e0>)
   b4c8e:	600a      	str	r2, [r1, #0]
      v1 = voltage;
   b4c90:	4a56      	ldr	r2, [pc, #344]	; (b4dec <loop+0x2e4>)
   b4c92:	6013      	str	r3, [r2, #0]
      x1 = true;
   b4c94:	4b56      	ldr	r3, [pc, #344]	; (b4df0 <loop+0x2e8>)
   b4c96:	701e      	strb	r6, [r3, #0]
    incomingString2 = Serial1.readString();
   b4c98:	f004 fb28 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b4c9c:	4c55      	ldr	r4, [pc, #340]	; (b4df4 <loop+0x2ec>)
   b4c9e:	4601      	mov	r1, r0
   b4ca0:	a802      	add	r0, sp, #8
   b4ca2:	f003 fdc3 	bl	b882c <_ZN6Stream10readStringEv>
   b4ca6:	a902      	add	r1, sp, #8
   b4ca8:	4620      	mov	r0, r4
   b4caa:	f003 ff03 	bl	b8ab4 <_ZN6StringaSEOS_>
   b4cae:	a802      	add	r0, sp, #8
   b4cb0:	f003 fe84 	bl	b89bc <_ZN6StringD1Ev>
    Serial.printf("incomingString2: %s\n", incomingString2.c_str());
   b4cb4:	f003 f8a4 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4cb8:	6822      	ldr	r2, [r4, #0]
   b4cba:	494f      	ldr	r1, [pc, #316]	; (b4df8 <loop+0x2f0>)
   b4cbc:	f7ff fa32 	bl	b4124 <_ZN5Print6printfEPKcz>
    Serial.flush();
   b4cc0:	f003 f89e 	bl	b7e00 <_Z16_fetch_usbserialv>
   b4cc4:	6803      	ldr	r3, [r0, #0]
   b4cc6:	69db      	ldr	r3, [r3, #28]
   b4cc8:	4798      	blx	r3
    dataSent = false;
   b4cca:	4b4c      	ldr	r3, [pc, #304]	; (b4dfc <loop+0x2f4>)
   b4ccc:	2200      	movs	r2, #0
   b4cce:	701a      	strb	r2, [r3, #0]
}
   b4cd0:	b007      	add	sp, #28
   b4cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Time.minute() == 0) || (Time.minute() == 30))
   b4cd4:	f003 fd76 	bl	b87c4 <_ZN9TimeClass6minuteEv>
   b4cd8:	281e      	cmp	r0, #30
   b4cda:	f47f af4d 	bne.w	b4b78 <loop+0x70>
   b4cde:	e745      	b.n	b4b6c <loop+0x64>
    else if (probeNumber == 2)
   b4ce0:	2e02      	cmp	r6, #2
   b4ce2:	d117      	bne.n	b4d14 <loop+0x20c>
      ubidots.add("tempGreen", tempF);
   b4ce4:	4946      	ldr	r1, [pc, #280]	; (b4e00 <loop+0x2f8>)
   b4ce6:	483c      	ldr	r0, [pc, #240]	; (b4dd8 <loop+0x2d0>)
   b4ce8:	f000 ff83 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageGreen", voltage);
   b4cec:	4945      	ldr	r1, [pc, #276]	; (b4e04 <loop+0x2fc>)
   b4cee:	ed94 0a00 	vldr	s0, [r4]
   b4cf2:	4839      	ldr	r0, [pc, #228]	; (b4dd8 <loop+0x2d0>)
   b4cf4:	f000 ff7d 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      tempGreen = tempF;
   b4cf8:	4b43      	ldr	r3, [pc, #268]	; (b4e08 <loop+0x300>)
   b4cfa:	682a      	ldr	r2, [r5, #0]
      voltageGreen = voltage;
   b4cfc:	4943      	ldr	r1, [pc, #268]	; (b4e0c <loop+0x304>)
      tempGreen = tempF;
   b4cfe:	601a      	str	r2, [r3, #0]
      voltageGreen = voltage;
   b4d00:	6823      	ldr	r3, [r4, #0]
   b4d02:	600b      	str	r3, [r1, #0]
      t2 = tempF;
   b4d04:	4942      	ldr	r1, [pc, #264]	; (b4e10 <loop+0x308>)
   b4d06:	600a      	str	r2, [r1, #0]
      v2 = voltage;
   b4d08:	4a42      	ldr	r2, [pc, #264]	; (b4e14 <loop+0x30c>)
   b4d0a:	6013      	str	r3, [r2, #0]
      x2 = true;
   b4d0c:	4b42      	ldr	r3, [pc, #264]	; (b4e18 <loop+0x310>)
      x3 = true;
   b4d0e:	2201      	movs	r2, #1
   b4d10:	701a      	strb	r2, [r3, #0]
   b4d12:	e7c1      	b.n	b4c98 <loop+0x190>
    else if (probeNumber == 3)
   b4d14:	2e03      	cmp	r6, #3
   b4d16:	d115      	bne.n	b4d44 <loop+0x23c>
      ubidots.add("tempOrange", tempF);
   b4d18:	4940      	ldr	r1, [pc, #256]	; (b4e1c <loop+0x314>)
   b4d1a:	482f      	ldr	r0, [pc, #188]	; (b4dd8 <loop+0x2d0>)
   b4d1c:	f000 ff69 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageOrange", voltage);
   b4d20:	493f      	ldr	r1, [pc, #252]	; (b4e20 <loop+0x318>)
   b4d22:	ed94 0a00 	vldr	s0, [r4]
   b4d26:	482c      	ldr	r0, [pc, #176]	; (b4dd8 <loop+0x2d0>)
   b4d28:	f000 ff63 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      tempOrange = tempF;
   b4d2c:	4b3d      	ldr	r3, [pc, #244]	; (b4e24 <loop+0x31c>)
   b4d2e:	682a      	ldr	r2, [r5, #0]
      voltageOrange = voltage;
   b4d30:	493d      	ldr	r1, [pc, #244]	; (b4e28 <loop+0x320>)
      tempOrange = tempF;
   b4d32:	601a      	str	r2, [r3, #0]
      voltageOrange = voltage;
   b4d34:	6823      	ldr	r3, [r4, #0]
   b4d36:	600b      	str	r3, [r1, #0]
      t3 = tempF;
   b4d38:	493c      	ldr	r1, [pc, #240]	; (b4e2c <loop+0x324>)
   b4d3a:	600a      	str	r2, [r1, #0]
      v3 = voltage;
   b4d3c:	4a3c      	ldr	r2, [pc, #240]	; (b4e30 <loop+0x328>)
   b4d3e:	6013      	str	r3, [r2, #0]
      x3 = true;
   b4d40:	4b3c      	ldr	r3, [pc, #240]	; (b4e34 <loop+0x32c>)
   b4d42:	e7e4      	b.n	b4d0e <loop+0x206>
    else if (probeNumber == 4)
   b4d44:	2e04      	cmp	r6, #4
   b4d46:	d115      	bne.n	b4d74 <loop+0x26c>
      ubidots.add("004", tempF);
   b4d48:	493b      	ldr	r1, [pc, #236]	; (b4e38 <loop+0x330>)
   b4d4a:	4823      	ldr	r0, [pc, #140]	; (b4dd8 <loop+0x2d0>)
   b4d4c:	f000 ff51 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      ubidots.add("004Voltage", voltage);
   b4d50:	493a      	ldr	r1, [pc, #232]	; (b4e3c <loop+0x334>)
   b4d52:	ed94 0a00 	vldr	s0, [r4]
   b4d56:	4820      	ldr	r0, [pc, #128]	; (b4dd8 <loop+0x2d0>)
   b4d58:	f000 ff4b 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      temp004 = tempF;
   b4d5c:	4b38      	ldr	r3, [pc, #224]	; (b4e40 <loop+0x338>)
   b4d5e:	682a      	ldr	r2, [r5, #0]
      voltage004 = voltage;
   b4d60:	4938      	ldr	r1, [pc, #224]	; (b4e44 <loop+0x33c>)
      temp004 = tempF;
   b4d62:	601a      	str	r2, [r3, #0]
      voltage004 = voltage;
   b4d64:	6823      	ldr	r3, [r4, #0]
   b4d66:	600b      	str	r3, [r1, #0]
      t4 = tempF;
   b4d68:	4937      	ldr	r1, [pc, #220]	; (b4e48 <loop+0x340>)
   b4d6a:	600a      	str	r2, [r1, #0]
      v4 = voltage;
   b4d6c:	4a37      	ldr	r2, [pc, #220]	; (b4e4c <loop+0x344>)
   b4d6e:	6013      	str	r3, [r2, #0]
      x4 = true;
   b4d70:	4b37      	ldr	r3, [pc, #220]	; (b4e50 <loop+0x348>)
   b4d72:	e7cc      	b.n	b4d0e <loop+0x206>
    else if (probeNumber == 5)
   b4d74:	2e05      	cmp	r6, #5
   b4d76:	d17b      	bne.n	b4e70 <loop+0x368>
      ubidots.add("005", tempF);
   b4d78:	4936      	ldr	r1, [pc, #216]	; (b4e54 <loop+0x34c>)
   b4d7a:	4817      	ldr	r0, [pc, #92]	; (b4dd8 <loop+0x2d0>)
   b4d7c:	f000 ff39 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      ubidots.add("005Voltage", voltage);
   b4d80:	4935      	ldr	r1, [pc, #212]	; (b4e58 <loop+0x350>)
   b4d82:	ed94 0a00 	vldr	s0, [r4]
   b4d86:	4814      	ldr	r0, [pc, #80]	; (b4dd8 <loop+0x2d0>)
   b4d88:	f000 ff33 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      temp005 = tempF;
   b4d8c:	4b33      	ldr	r3, [pc, #204]	; (b4e5c <loop+0x354>)
   b4d8e:	682a      	ldr	r2, [r5, #0]
      voltage005 = voltage;
   b4d90:	4933      	ldr	r1, [pc, #204]	; (b4e60 <loop+0x358>)
      temp005 = tempF;
   b4d92:	601a      	str	r2, [r3, #0]
      voltage005 = voltage;
   b4d94:	6823      	ldr	r3, [r4, #0]
   b4d96:	600b      	str	r3, [r1, #0]
      t5 = tempF;
   b4d98:	4932      	ldr	r1, [pc, #200]	; (b4e64 <loop+0x35c>)
   b4d9a:	600a      	str	r2, [r1, #0]
      v5 = voltage;
   b4d9c:	4a32      	ldr	r2, [pc, #200]	; (b4e68 <loop+0x360>)
   b4d9e:	6013      	str	r3, [r2, #0]
      x5 = true;
   b4da0:	4b32      	ldr	r3, [pc, #200]	; (b4e6c <loop+0x364>)
   b4da2:	e7b4      	b.n	b4d0e <loop+0x206>
   b4da4:	2003e288 	.word	0x2003e288
   b4da8:	2003e2dc 	.word	0x2003e2dc
   b4dac:	2003e1d8 	.word	0x2003e1d8
   b4db0:	2003e740 	.word	0x2003e740
   b4db4:	2003e28c 	.word	0x2003e28c
   b4db8:	2003e3ec 	.word	0x2003e3ec
   b4dbc:	2003e4a0 	.word	0x2003e4a0
   b4dc0:	2003e39c 	.word	0x2003e39c
   b4dc4:	2003e1e4 	.word	0x2003e1e4
   b4dc8:	2003e29c 	.word	0x2003e29c
   b4dcc:	000bc5b7 	.word	0x000bc5b7
   b4dd0:	000bc5cb 	.word	0x000bc5cb
   b4dd4:	000bc5ea 	.word	0x000bc5ea
   b4dd8:	2003e478 	.word	0x2003e478
   b4ddc:	000bc5f3 	.word	0x000bc5f3
   b4de0:	2003e3e8 	.word	0x2003e3e8
   b4de4:	2003e4b4 	.word	0x2003e4b4
   b4de8:	2003e3bc 	.word	0x2003e3bc
   b4dec:	2003e484 	.word	0x2003e484
   b4df0:	2003e4c0 	.word	0x2003e4c0
   b4df4:	2003e1f4 	.word	0x2003e1f4
   b4df8:	000bc676 	.word	0x000bc676
   b4dfc:	2003e1c4 	.word	0x2003e1c4
   b4e00:	000bc5ff 	.word	0x000bc5ff
   b4e04:	000bc609 	.word	0x000bc609
   b4e08:	2003e3f0 	.word	0x2003e3f0
   b4e0c:	2003e4b8 	.word	0x2003e4b8
   b4e10:	2003e3c0 	.word	0x2003e3c0
   b4e14:	2003e488 	.word	0x2003e488
   b4e18:	2003e4c1 	.word	0x2003e4c1
   b4e1c:	000bc616 	.word	0x000bc616
   b4e20:	000bc621 	.word	0x000bc621
   b4e24:	2003e3f4 	.word	0x2003e3f4
   b4e28:	2003e4bc 	.word	0x2003e4bc
   b4e2c:	2003e3c4 	.word	0x2003e3c4
   b4e30:	2003e48c 	.word	0x2003e48c
   b4e34:	2003e4c2 	.word	0x2003e4c2
   b4e38:	000bc62f 	.word	0x000bc62f
   b4e3c:	000bc633 	.word	0x000bc633
   b4e40:	2003e3d8 	.word	0x2003e3d8
   b4e44:	2003e4a4 	.word	0x2003e4a4
   b4e48:	2003e3c8 	.word	0x2003e3c8
   b4e4c:	2003e490 	.word	0x2003e490
   b4e50:	2003e4c3 	.word	0x2003e4c3
   b4e54:	000bc63e 	.word	0x000bc63e
   b4e58:	000bc642 	.word	0x000bc642
   b4e5c:	2003e3dc 	.word	0x2003e3dc
   b4e60:	2003e4a8 	.word	0x2003e4a8
   b4e64:	2003e3cc 	.word	0x2003e3cc
   b4e68:	2003e494 	.word	0x2003e494
   b4e6c:	2003e4c4 	.word	0x2003e4c4
    else if (probeNumber == 6)
   b4e70:	2e06      	cmp	r6, #6
   b4e72:	d115      	bne.n	b4ea0 <loop+0x398>
      ubidots.add("006", tempF);
   b4e74:	491a      	ldr	r1, [pc, #104]	; (b4ee0 <loop+0x3d8>)
   b4e76:	481b      	ldr	r0, [pc, #108]	; (b4ee4 <loop+0x3dc>)
   b4e78:	f000 febb 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      ubidots.add("006Voltage", voltage);
   b4e7c:	491a      	ldr	r1, [pc, #104]	; (b4ee8 <loop+0x3e0>)
   b4e7e:	ed94 0a00 	vldr	s0, [r4]
   b4e82:	4818      	ldr	r0, [pc, #96]	; (b4ee4 <loop+0x3dc>)
   b4e84:	f000 feb5 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      temp006 = tempF;
   b4e88:	4b18      	ldr	r3, [pc, #96]	; (b4eec <loop+0x3e4>)
   b4e8a:	682a      	ldr	r2, [r5, #0]
      voltage006 = voltage;
   b4e8c:	4918      	ldr	r1, [pc, #96]	; (b4ef0 <loop+0x3e8>)
      temp006 = tempF;
   b4e8e:	601a      	str	r2, [r3, #0]
      voltage006 = voltage;
   b4e90:	6823      	ldr	r3, [r4, #0]
   b4e92:	600b      	str	r3, [r1, #0]
      t6 = tempF;
   b4e94:	4917      	ldr	r1, [pc, #92]	; (b4ef4 <loop+0x3ec>)
   b4e96:	600a      	str	r2, [r1, #0]
      v6 = voltage;
   b4e98:	4a17      	ldr	r2, [pc, #92]	; (b4ef8 <loop+0x3f0>)
   b4e9a:	6013      	str	r3, [r2, #0]
      x6 = true;
   b4e9c:	4b17      	ldr	r3, [pc, #92]	; (b4efc <loop+0x3f4>)
   b4e9e:	e736      	b.n	b4d0e <loop+0x206>
    else if (probeNumber == 7)
   b4ea0:	2e07      	cmp	r6, #7
   b4ea2:	d115      	bne.n	b4ed0 <loop+0x3c8>
      ubidots.add("007", tempF);
   b4ea4:	4916      	ldr	r1, [pc, #88]	; (b4f00 <loop+0x3f8>)
   b4ea6:	480f      	ldr	r0, [pc, #60]	; (b4ee4 <loop+0x3dc>)
   b4ea8:	f000 fea3 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      ubidots.add("007Voltage", voltage);
   b4eac:	4915      	ldr	r1, [pc, #84]	; (b4f04 <loop+0x3fc>)
   b4eae:	ed94 0a00 	vldr	s0, [r4]
   b4eb2:	480c      	ldr	r0, [pc, #48]	; (b4ee4 <loop+0x3dc>)
   b4eb4:	f000 fe9d 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      temp007 = tempF;
   b4eb8:	4b13      	ldr	r3, [pc, #76]	; (b4f08 <loop+0x400>)
   b4eba:	682a      	ldr	r2, [r5, #0]
      voltage007 = voltage;
   b4ebc:	4913      	ldr	r1, [pc, #76]	; (b4f0c <loop+0x404>)
      temp007 = tempF;
   b4ebe:	601a      	str	r2, [r3, #0]
      voltage007 = voltage;
   b4ec0:	6823      	ldr	r3, [r4, #0]
   b4ec2:	600b      	str	r3, [r1, #0]
      t7 = tempF;
   b4ec4:	4912      	ldr	r1, [pc, #72]	; (b4f10 <loop+0x408>)
   b4ec6:	600a      	str	r2, [r1, #0]
      v7 = voltage;
   b4ec8:	4a12      	ldr	r2, [pc, #72]	; (b4f14 <loop+0x40c>)
   b4eca:	6013      	str	r3, [r2, #0]
      x7 = true;
   b4ecc:	4b12      	ldr	r3, [pc, #72]	; (b4f18 <loop+0x410>)
   b4ece:	e71e      	b.n	b4d0e <loop+0x206>
      ubidots.add("extraProbe", tempF);
   b4ed0:	4912      	ldr	r1, [pc, #72]	; (b4f1c <loop+0x414>)
   b4ed2:	4804      	ldr	r0, [pc, #16]	; (b4ee4 <loop+0x3dc>)
   b4ed4:	f000 fe8d 	bl	b5bf2 <_ZN7Ubidots3addEPcf>
      reyaxReset();
   b4ed8:	f7ff fc2a 	bl	b4730 <_Z10reyaxResetv>
   b4edc:	e6dc      	b.n	b4c98 <loop+0x190>
   b4ede:	bf00      	nop
   b4ee0:	000bc64d 	.word	0x000bc64d
   b4ee4:	2003e478 	.word	0x2003e478
   b4ee8:	000bc651 	.word	0x000bc651
   b4eec:	2003e3e0 	.word	0x2003e3e0
   b4ef0:	2003e4ac 	.word	0x2003e4ac
   b4ef4:	2003e3d0 	.word	0x2003e3d0
   b4ef8:	2003e498 	.word	0x2003e498
   b4efc:	2003e4c5 	.word	0x2003e4c5
   b4f00:	000bc65c 	.word	0x000bc65c
   b4f04:	000bc660 	.word	0x000bc660
   b4f08:	2003e3e4 	.word	0x2003e3e4
   b4f0c:	2003e4b0 	.word	0x2003e4b0
   b4f10:	2003e3d4 	.word	0x2003e3d4
   b4f14:	2003e49c 	.word	0x2003e49c
   b4f18:	2003e4c6 	.word	0x2003e4c6
   b4f1c:	000bc66b 	.word	0x000bc66b

000b4f20 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   b4f20:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4f28 <_ZN11UbiParticle3getEPKcS1_+0x8>
   b4f24:	4770      	bx	lr
   b4f26:	bf00      	nop
   b4f28:	cda2425f 	.word	0xcda2425f

000b4f2c <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   b4f2c:	7401      	strb	r1, [r0, #16]
   b4f2e:	4770      	bx	lr

000b4f30 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    {
      _M_header._M_color = _S_red;
   b4f30:	2200      	movs	r2, #0

	  _Rb_tree_impl()
	    _GLIBCXX_NOEXCEPT_IF(
		is_nothrow_default_constructible<_Node_allocator>::value
		&& is_nothrow_default_constructible<_Base_key_compare>::value )
	  : _Node_allocator()
   b4f32:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b4f34:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b4f38:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b4f3c:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b4f3e:	4770      	bx	lr

000b4f40 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b4f40:	b530      	push	{r4, r5, lr}
   b4f42:	b085      	sub	sp, #20
   b4f44:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4f46:	9b08      	ldr	r3, [sp, #32]
   b4f48:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4f4a:	f88d 3000 	strb.w	r3, [sp]
   b4f4e:	a802      	add	r0, sp, #8
   b4f50:	233c      	movs	r3, #60	; 0x3c
   b4f52:	f003 f98d 	bl	b8270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b4f56:	2000      	movs	r0, #0
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4f58:	9c02      	ldr	r4, [sp, #8]
   b4f5a:	f002 f9d9 	bl	b7310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4f5e:	b120      	cbz	r0, b4f6a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4f60:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4f62:	b913      	cbnz	r3, b4f6a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   b4f64:	f002 f8f4 	bl	b7150 <spark_process>
    }
   b4f68:	e7fa      	b.n	b4f60 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   b4f6a:	7863      	ldrb	r3, [r4, #1]
   b4f6c:	f3bf 8f5b 	dmb	ish
   b4f70:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4f72:	b9ab      	cbnz	r3, b4fa0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   b4f74:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   b4f76:	9c03      	ldr	r4, [sp, #12]
   b4f78:	b17c      	cbz	r4, b4f9a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   b4f7a:	6863      	ldr	r3, [r4, #4]
   b4f7c:	3b01      	subs	r3, #1
   b4f7e:	6063      	str	r3, [r4, #4]
   b4f80:	b95b      	cbnz	r3, b4f9a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   b4f82:	6823      	ldr	r3, [r4, #0]
   b4f84:	4620      	mov	r0, r4
   b4f86:	689b      	ldr	r3, [r3, #8]
   b4f88:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4f8a:	68a3      	ldr	r3, [r4, #8]
   b4f8c:	3b01      	subs	r3, #1
   b4f8e:	60a3      	str	r3, [r4, #8]
   b4f90:	b91b      	cbnz	r3, b4f9a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   b4f92:	6823      	ldr	r3, [r4, #0]
   b4f94:	4620      	mov	r0, r4
   b4f96:	68db      	ldr	r3, [r3, #12]
   b4f98:	4798      	blx	r3
}
   b4f9a:	4628      	mov	r0, r5
   b4f9c:	b005      	add	sp, #20
   b4f9e:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4fa0:	2000      	movs	r0, #0
   b4fa2:	f002 f9b5 	bl	b7310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4fa6:	b120      	cbz	r0, b4fb2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   b4fa8:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4faa:	b913      	cbnz	r3, b4fb2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   b4fac:	f002 f8d0 	bl	b7150 <spark_process>
    }
   b4fb0:	e7fa      	b.n	b4fa8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4fb2:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b4fb4:	2b01      	cmp	r3, #1
   b4fb6:	d1dd      	bne.n	b4f74 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   b4fb8:	7b25      	ldrb	r5, [r4, #12]
   b4fba:	e7dc      	b.n	b4f76 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000b4fbc <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b4fbc:	b510      	push	{r4, lr}
   b4fbe:	4c04      	ldr	r4, [pc, #16]	; (b4fd0 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   b4fc0:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   b4fc2:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b4fc6:	2400      	movs	r4, #0
  _token = token;
   b4fc8:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b4fca:	7404      	strb	r4, [r0, #16]
  _token = token;
   b4fcc:	60c3      	str	r3, [r0, #12]
}
   b4fce:	bd10      	pop	{r4, pc}
   b4fd0:	000bc694 	.word	0x000bc694

000b4fd4 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   b4fd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4fdc <_ZN6UbiUDP3getEPKcS1_+0x8>
   b4fd8:	4770      	bx	lr
   b4fda:	bf00      	nop
   b4fdc:	cda2425f 	.word	0xcda2425f

000b4fe0 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   b4fe0:	7501      	strb	r1, [r0, #20]
   b4fe2:	4770      	bx	lr

000b4fe4 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
   b4fe4:	2200      	movs	r2, #0
	  : _Node_allocator()
   b4fe6:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b4fe8:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b4fec:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b4ff0:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   b4ff2:	4770      	bx	lr

000b4ff4 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b4ff4:	b530      	push	{r4, r5, lr}
   b4ff6:	4d06      	ldr	r5, [pc, #24]	; (b5010 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   b4ff8:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b4ffa:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b4ffe:	2500      	movs	r5, #0
  _token = token;
   b5000:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b5002:	7505      	strb	r5, [r0, #20]
   b5004:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b5008:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b500c:	6185      	str	r5, [r0, #24]
}
   b500e:	bd30      	pop	{r4, r5, pc}
   b5010:	000bc758 	.word	0x000bc758

000b5014 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   b5014:	b530      	push	{r4, r5, lr}
  if (inet_gethostbyname(_host, strlen(_host), &ip, t, NULL) == 0) {
   b5016:	684d      	ldr	r5, [r1, #4]
IPAddress UbiUDP::getServerIp() {
   b5018:	b089      	sub	sp, #36	; 0x24
   b501a:	4604      	mov	r4, r0
  if (inet_gethostbyname(_host, strlen(_host), &ip, t, NULL) == 0) {
   b501c:	4628      	mov	r0, r5
   b501e:	f005 f8c6 	bl	ba1ae <strlen>
   b5022:	2300      	movs	r3, #0
   b5024:	b281      	uxth	r1, r0
   b5026:	9300      	str	r3, [sp, #0]
   b5028:	aa03      	add	r2, sp, #12
   b502a:	4628      	mov	r0, r5
   b502c:	f002 f80e 	bl	b704c <inet_gethostbyname>
   b5030:	b930      	cbnz	r0, b5040 <_ZN6UbiUDP11getServerIpEv+0x2c>
    return ip;
   b5032:	a903      	add	r1, sp, #12
   b5034:	4620      	mov	r0, r4
   b5036:	f002 ff51 	bl	b7edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
}
   b503a:	4620      	mov	r0, r4
   b503c:	b009      	add	sp, #36	; 0x24
   b503e:	bd30      	pop	{r4, r5, pc}
    return IPAddress(169, 55, 61, 243);
   b5040:	23f3      	movs	r3, #243	; 0xf3
   b5042:	9300      	str	r3, [sp, #0]
   b5044:	2237      	movs	r2, #55	; 0x37
   b5046:	233d      	movs	r3, #61	; 0x3d
   b5048:	21a9      	movs	r1, #169	; 0xa9
   b504a:	4620      	mov	r0, r4
   b504c:	f002 ff7c 	bl	b7f48 <_ZN9IPAddressC1Ehhhh>
   b5050:	e7f3      	b.n	b503a <_ZN6UbiUDP11getServerIpEv+0x26>
	...

000b5054 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b5054:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5056:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   b5058:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b505a:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   b505c:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b505e:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   b5060:	f7ff ffd8 	bl	b5014 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   b5064:	a802      	add	r0, sp, #8
   b5066:	f002 ff4b 	bl	b7f00 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   b506a:	b9a0      	cbnz	r0, b5096 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   b506c:	7d33      	ldrb	r3, [r6, #20]
   b506e:	b123      	cbz	r3, b507a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   b5070:	f002 fec6 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5074:	4927      	ldr	r1, [pc, #156]	; (b5114 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   b5076:	f003 fc40 	bl	b88fa <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   b507a:	23f3      	movs	r3, #243	; 0xf3
   b507c:	9300      	str	r3, [sp, #0]
   b507e:	2237      	movs	r2, #55	; 0x37
   b5080:	233d      	movs	r3, #61	; 0x3d
   b5082:	21a9      	movs	r1, #169	; 0xa9
   b5084:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   b5086:	ad09      	add	r5, sp, #36	; 0x24
   b5088:	f002 ff5e 	bl	b7f48 <_ZN9IPAddressC1Ehhhh>
   b508c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b508e:	ac03      	add	r4, sp, #12
   b5090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5092:	682b      	ldr	r3, [r5, #0]
   b5094:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   b5096:	2200      	movs	r2, #0
   b5098:	f240 21bd 	movw	r1, #701	; 0x2bd
   b509c:	481e      	ldr	r0, [pc, #120]	; (b5118 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b509e:	f004 f807 	bl	b90b0 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   b50a2:	2200      	movs	r2, #0
   b50a4:	f242 3134 	movw	r1, #9012	; 0x2334
   b50a8:	481b      	ldr	r0, [pc, #108]	; (b5118 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50aa:	f003 fdef 	bl	b8c8c <_ZN3UDP5beginEtm>
   b50ae:	ad03      	add	r5, sp, #12
   b50b0:	4b1a      	ldr	r3, [pc, #104]	; (b511c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   b50b2:	9308      	str	r3, [sp, #32]
   b50b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50b6:	ac09      	add	r4, sp, #36	; 0x24
   b50b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50ba:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b50bc:	4816      	ldr	r0, [pc, #88]	; (b5118 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50be:	7023      	strb	r3, [r4, #0]
   b50c0:	f242 3234 	movw	r2, #9012	; 0x2334
   b50c4:	a908      	add	r1, sp, #32
   b50c6:	f004 f80f 	bl	b90e8 <_ZN3UDP11beginPacketE9IPAddresst>
   b50ca:	b958      	cbnz	r0, b50e4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   b50cc:	7d33      	ldrb	r3, [r6, #20]
   b50ce:	b123      	cbz	r3, b50da <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   b50d0:	f002 fe96 	bl	b7e00 <_Z16_fetch_usbserialv>
   b50d4:	4912      	ldr	r1, [pc, #72]	; (b5120 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   b50d6:	f003 fc10 	bl	b88fa <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   b50da:	480f      	ldr	r0, [pc, #60]	; (b5118 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50dc:	f003 fe22 	bl	b8d24 <_ZN3UDP4stopEv>
    return false;
   b50e0:	2000      	movs	r0, #0
   b50e2:	e014      	b.n	b510e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   b50e4:	2f00      	cmp	r7, #0
   b50e6:	d0f1      	beq.n	b50cc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   b50e8:	4638      	mov	r0, r7
   b50ea:	f005 f860 	bl	ba1ae <strlen>
   b50ee:	4639      	mov	r1, r7
   b50f0:	4602      	mov	r2, r0
   b50f2:	4809      	ldr	r0, [pc, #36]	; (b5118 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50f4:	f003 fe24 	bl	b8d40 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b50f8:	2800      	cmp	r0, #0
   b50fa:	d0e7      	beq.n	b50cc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   b50fc:	4806      	ldr	r0, [pc, #24]	; (b5118 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50fe:	f003 fd6b 	bl	b8bd8 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b5102:	2800      	cmp	r0, #0
   b5104:	d0e2      	beq.n	b50cc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   b5106:	4804      	ldr	r0, [pc, #16]	; (b5118 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b5108:	f003 fe0c 	bl	b8d24 <_ZN3UDP4stopEv>
  return true;
   b510c:	2001      	movs	r0, #1
}
   b510e:	b00f      	add	sp, #60	; 0x3c
   b5110:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5112:	bf00      	nop
   b5114:	000bc6a4 	.word	0x000bc6a4
   b5118:	2003e4c8 	.word	0x2003e4c8
   b511c:	000bcccc 	.word	0x000bcccc
   b5120:	000bc730 	.word	0x000bc730

000b5124 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   b5124:	4801      	ldr	r0, [pc, #4]	; (b512c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   b5126:	f003 bf91 	b.w	b904c <_ZN3UDPC1Ev>
   b512a:	bf00      	nop
   b512c:	2003e4c8 	.word	0x2003e4c8

000b5130 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   b5130:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b5132:	201c      	movs	r0, #28
   b5134:	f7fe ffaf 	bl	b4096 <_Znwj>
   b5138:	4604      	mov	r4, r0
   b513a:	b148      	cbz	r0, b5150 <_Z10builderTcpv+0x20>
   b513c:	4b06      	ldr	r3, [pc, #24]	; (b5158 <_Z10builderTcpv+0x28>)
   b513e:	4907      	ldr	r1, [pc, #28]	; (b515c <_Z10builderTcpv+0x2c>)
   b5140:	681b      	ldr	r3, [r3, #0]
   b5142:	9300      	str	r3, [sp, #0]
   b5144:	6809      	ldr	r1, [r1, #0]
   b5146:	4b06      	ldr	r3, [pc, #24]	; (b5160 <_Z10builderTcpv+0x30>)
   b5148:	f242 3234 	movw	r2, #9012	; 0x2334
   b514c:	f001 f84c 	bl	b61e8 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   b5150:	4620      	mov	r0, r4
   b5152:	b002      	add	sp, #8
   b5154:	bd10      	pop	{r4, pc}
   b5156:	bf00      	nop
   b5158:	2003e59c 	.word	0x2003e59c
   b515c:	2003e598 	.word	0x2003e598
   b5160:	000bc768 	.word	0x000bc768

000b5164 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   b5164:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   b5166:	2020      	movs	r0, #32
   b5168:	f7fe ff95 	bl	b4096 <_Znwj>
   b516c:	4604      	mov	r4, r0
   b516e:	b140      	cbz	r0, b5182 <_Z11builderHttpv+0x1e>
   b5170:	4b05      	ldr	r3, [pc, #20]	; (b5188 <_Z11builderHttpv+0x24>)
   b5172:	4906      	ldr	r1, [pc, #24]	; (b518c <_Z11builderHttpv+0x28>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	9300      	str	r3, [sp, #0]
   b5178:	6809      	ldr	r1, [r1, #0]
   b517a:	4b05      	ldr	r3, [pc, #20]	; (b5190 <_Z11builderHttpv+0x2c>)
   b517c:	2250      	movs	r2, #80	; 0x50
   b517e:	f000 fa41 	bl	b5604 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   b5182:	4620      	mov	r0, r4
   b5184:	b002      	add	sp, #8
   b5186:	bd10      	pop	{r4, pc}
   b5188:	2003e59c 	.word	0x2003e59c
   b518c:	2003e598 	.word	0x2003e598
   b5190:	000bc768 	.word	0x000bc768

000b5194 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   b5194:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b5196:	201c      	movs	r0, #28
   b5198:	f7fe ff7d 	bl	b4096 <_Znwj>
   b519c:	4604      	mov	r4, r0
   b519e:	b148      	cbz	r0, b51b4 <_Z10builderUdpv+0x20>
   b51a0:	4b06      	ldr	r3, [pc, #24]	; (b51bc <_Z10builderUdpv+0x28>)
   b51a2:	4907      	ldr	r1, [pc, #28]	; (b51c0 <_Z10builderUdpv+0x2c>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	9300      	str	r3, [sp, #0]
   b51a8:	6809      	ldr	r1, [r1, #0]
   b51aa:	4b06      	ldr	r3, [pc, #24]	; (b51c4 <_Z10builderUdpv+0x30>)
   b51ac:	f242 3234 	movw	r2, #9012	; 0x2334
   b51b0:	f7ff ff20 	bl	b4ff4 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   b51b4:	4620      	mov	r0, r4
   b51b6:	b002      	add	sp, #8
   b51b8:	bd10      	pop	{r4, pc}
   b51ba:	bf00      	nop
   b51bc:	2003e59c 	.word	0x2003e59c
   b51c0:	2003e598 	.word	0x2003e598
   b51c4:	000bc768 	.word	0x000bc768

000b51c8 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   b51c8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   b51ca:	2014      	movs	r0, #20
   b51cc:	f7fe ff63 	bl	b4096 <_Znwj>
   b51d0:	4604      	mov	r4, r0
   b51d2:	b140      	cbz	r0, b51e6 <_Z15builderParticlev+0x1e>
   b51d4:	4b05      	ldr	r3, [pc, #20]	; (b51ec <_Z15builderParticlev+0x24>)
   b51d6:	4906      	ldr	r1, [pc, #24]	; (b51f0 <_Z15builderParticlev+0x28>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	9300      	str	r3, [sp, #0]
   b51dc:	2300      	movs	r3, #0
   b51de:	6809      	ldr	r1, [r1, #0]
   b51e0:	461a      	mov	r2, r3
   b51e2:	f7ff feeb 	bl	b4fbc <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   b51e6:	4620      	mov	r0, r4
   b51e8:	b002      	add	sp, #8
   b51ea:	bd10      	pop	{r4, pc}
   b51ec:	2003e59c 	.word	0x2003e59c
   b51f0:	2003e598 	.word	0x2003e598

000b51f4 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b51f4:	2a01      	cmp	r2, #1
   b51f6:	d102      	bne.n	b51fe <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b51f8:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b51fa:	2000      	movs	r0, #0
   b51fc:	4770      	bx	lr
	  switch (__op)
   b51fe:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5200:	bf04      	itt	eq
   b5202:	680b      	ldreq	r3, [r1, #0]
   b5204:	6003      	streq	r3, [r0, #0]
	      break;
   b5206:	e7f8      	b.n	b51fa <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

000b5208 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5208:	6803      	ldr	r3, [r0, #0]
   b520a:	4718      	bx	r3

000b520c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b520c:	b510      	push	{r4, lr}
      if (_M_manager)
   b520e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5210:	4604      	mov	r4, r0
      if (_M_manager)
   b5212:	b113      	cbz	r3, b521a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5214:	2203      	movs	r2, #3
   b5216:	4601      	mov	r1, r0
   b5218:	4798      	blx	r3
    }
   b521a:	4620      	mov	r0, r4
   b521c:	bd10      	pop	{r4, pc}
	...

000b5220 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   b5220:	b510      	push	{r4, lr}
   b5222:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b5224:	2200      	movs	r2, #0
	operator=(_Functor&& __f)
   b5226:	4603      	mov	r3, r0
    _Function_base() : _M_manager(nullptr) { }
   b5228:	9204      	str	r2, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   b522a:	b121      	cbz	r1, b5236 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b522c:	4a0f      	ldr	r2, [pc, #60]	; (b526c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x4c>)
   b522e:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5230:	4a0f      	ldr	r2, [pc, #60]	; (b5270 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x50>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5232:	9102      	str	r1, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b5234:	9204      	str	r2, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5236:	aa02      	add	r2, sp, #8
   b5238:	e892 0003 	ldmia.w	r2, {r0, r1}
   b523c:	466c      	mov	r4, sp
   b523e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5242:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5246:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b524a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b524e:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5252:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5254:	6898      	ldr	r0, [r3, #8]
   b5256:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5258:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b525a:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b525c:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b525e:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5260:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b5262:	4610      	mov	r0, r2
   b5264:	f7ff ffd2 	bl	b520c <_ZNSt14_Function_baseD1Ev>
	}
   b5268:	b006      	add	sp, #24
   b526a:	bd10      	pop	{r4, pc}
   b526c:	000b5209 	.word	0x000b5209
   b5270:	000b51f5 	.word	0x000b51f5

000b5274 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5274:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b5276:	6984      	ldr	r4, [r0, #24]
   b5278:	4b0a      	ldr	r3, [pc, #40]	; (b52a4 <_ZN9TCPClientD1Ev+0x30>)
   b527a:	6003      	str	r3, [r0, #0]
   b527c:	4605      	mov	r5, r0
   b527e:	b17c      	cbz	r4, b52a0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5280:	6863      	ldr	r3, [r4, #4]
   b5282:	3b01      	subs	r3, #1
   b5284:	6063      	str	r3, [r4, #4]
   b5286:	b95b      	cbnz	r3, b52a0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5288:	6823      	ldr	r3, [r4, #0]
   b528a:	4620      	mov	r0, r4
   b528c:	689b      	ldr	r3, [r3, #8]
   b528e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5290:	68a3      	ldr	r3, [r4, #8]
   b5292:	3b01      	subs	r3, #1
   b5294:	60a3      	str	r3, [r4, #8]
   b5296:	b91b      	cbnz	r3, b52a0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b5298:	6823      	ldr	r3, [r4, #0]
   b529a:	4620      	mov	r0, r4
   b529c:	68db      	ldr	r3, [r3, #12]
   b529e:	4798      	blx	r3
   b52a0:	4628      	mov	r0, r5
   b52a2:	bd38      	pop	{r3, r4, r5, pc}
   b52a4:	000bcbbc 	.word	0x000bcbbc

000b52a8 <_ZN9TCPClientD0Ev>:
   b52a8:	b510      	push	{r4, lr}
   b52aa:	4604      	mov	r4, r0
   b52ac:	f7ff ffe2 	bl	b5274 <_ZN9TCPClientD1Ev>
   b52b0:	4620      	mov	r0, r4
   b52b2:	211c      	movs	r1, #28
   b52b4:	f7fe fef3 	bl	b409e <_ZdlPvj>
   b52b8:	4620      	mov	r0, r4
   b52ba:	bd10      	pop	{r4, pc}

000b52bc <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   b52bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   b52c0:	f100 0108 	add.w	r1, r0, #8
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b52c4:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   b52c6:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   b52c8:	b14a      	cbz	r2, b52de <_ZN10UbiBuilder7builderEv+0x22>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b52ca:	7c17      	ldrb	r7, [r2, #16]
   b52cc:	7806      	ldrb	r6, [r0, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b52ce:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b52d2:	42b7      	cmp	r7, r6
   b52d4:	bf2a      	itet	cs
   b52d6:	4613      	movcs	r3, r2
   b52d8:	462a      	movcc	r2, r5
   b52da:	4622      	movcs	r2, r4
   b52dc:	e7f4      	b.n	b52c8 <_ZN10UbiBuilder7builderEv+0xc>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   b52de:	4299      	cmp	r1, r3
   b52e0:	d004      	beq.n	b52ec <_ZN10UbiBuilder7builderEv+0x30>
	      || _M_impl._M_key_compare(__k,
   b52e2:	7800      	ldrb	r0, [r0, #0]
   b52e4:	7c1a      	ldrb	r2, [r3, #16]
   b52e6:	4290      	cmp	r0, r2
   b52e8:	bf38      	it	cc
   b52ea:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b52ec:	69da      	ldr	r2, [r3, #28]
   b52ee:	b90a      	cbnz	r2, b52f4 <_ZN10UbiBuilder7builderEv+0x38>
	__throw_bad_function_call();
   b52f0:	f004 f8d5 	bl	b949e <_ZSt25__throw_bad_function_callv>
}
   b52f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b52f8:	6a1a      	ldr	r2, [r3, #32]
   b52fa:	f103 0014 	add.w	r0, r3, #20
   b52fe:	4710      	bx	r2

000b5300 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5302:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5304:	4616      	mov	r6, r2
   b5306:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b5308:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   b530a:	2201      	movs	r2, #1
      while (__x != 0)
   b530c:	b163      	cbz	r3, b5328 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x28>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b530e:	7c1d      	ldrb	r5, [r3, #16]
   b5310:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5312:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b5316:	4295      	cmp	r5, r2
   b5318:	bf88      	it	hi
   b531a:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b531c:	461d      	mov	r5, r3
   b531e:	bf96      	itet	ls
   b5320:	2200      	movls	r2, #0
   b5322:	463b      	movhi	r3, r7
   b5324:	4603      	movls	r3, r0
   b5326:	e7f1      	b.n	b530c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   b5328:	b192      	cbz	r2, b5350 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x50>
	  if (__j == begin())
   b532a:	68ca      	ldr	r2, [r1, #12]
   b532c:	42aa      	cmp	r2, r5
   b532e:	d103      	bne.n	b5338 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b5330:	e9c4 3500 	strd	r3, r5, [r4]
    }
   b5334:	4620      	mov	r0, r4
   b5336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b5338:	4628      	mov	r0, r5
   b533a:	f004 f853 	bl	b93e4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b533e:	7833      	ldrb	r3, [r6, #0]
   b5340:	7c02      	ldrb	r2, [r0, #16]
   b5342:	429a      	cmp	r2, r3
   b5344:	f04f 0300 	mov.w	r3, #0
   b5348:	d3f2      	bcc.n	b5330 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b534a:	e9c4 0300 	strd	r0, r3, [r4]
   b534e:	e7f1      	b.n	b5334 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
   b5350:	4628      	mov	r0, r5
   b5352:	e7f4      	b.n	b533e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3e>

000b5354 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   b5354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
      { return &this->_M_impl._M_header; }
   b5358:	f100 0904 	add.w	r9, r0, #4
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b535c:	6885      	ldr	r5, [r0, #8]
   b535e:	4606      	mov	r6, r0
   b5360:	460f      	mov	r7, r1
      { return &this->_M_impl._M_header; }
   b5362:	464c      	mov	r4, r9
      while (__x != 0)
   b5364:	b14d      	cbz	r5, b537a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x26>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5366:	7c28      	ldrb	r0, [r5, #16]
   b5368:	7839      	ldrb	r1, [r7, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b536a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b536e:	4288      	cmp	r0, r1
   b5370:	bf2a      	itet	cs
   b5372:	462c      	movcs	r4, r5
   b5374:	4615      	movcc	r5, r2
   b5376:	461d      	movcs	r5, r3
   b5378:	e7f4      	b.n	b5364 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b537a:	45a1      	cmp	r9, r4
   b537c:	d003      	beq.n	b5386 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x32>
   b537e:	783a      	ldrb	r2, [r7, #0]
   b5380:	7c23      	ldrb	r3, [r4, #16]
   b5382:	429a      	cmp	r2, r3
   b5384:	d22f      	bcs.n	b53e6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x92>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5386:	2024      	movs	r0, #36	; 0x24
   b5388:	f7fe fe85 	bl	b4096 <_Znwj>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b538c:	f897 a000 	ldrb.w	sl, [r7]
   b5390:	f880 a010 	strb.w	sl, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   b5394:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   b5396:	45a1      	cmp	r9, r4
   b5398:	4680      	mov	r8, r0
   b539a:	61c3      	str	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b539c:	f100 0210 	add.w	r2, r0, #16
   b53a0:	d126      	bne.n	b53f0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x9c>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b53a2:	6973      	ldr	r3, [r6, #20]
   b53a4:	b11b      	cbz	r3, b53ae <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x5a>
   b53a6:	6937      	ldr	r7, [r6, #16]
   b53a8:	7c3b      	ldrb	r3, [r7, #16]
   b53aa:	4553      	cmp	r3, sl
   b53ac:	d309      	bcc.n	b53c2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6e>
	    return _M_get_insert_unique_pos(__k);
   b53ae:	4631      	mov	r1, r6
   b53b0:	a802      	add	r0, sp, #8
   b53b2:	f7ff ffa5 	bl	b5300 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b53b6:	e9dd 4702 	ldrd	r4, r7, [sp, #8]
	    if (__res.second)
   b53ba:	2f00      	cmp	r7, #0
   b53bc:	d052      	beq.n	b5464 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   b53be:	2c00      	cmp	r4, #0
   b53c0:	d14e      	bne.n	b5460 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b53c2:	45b9      	cmp	r9, r7
   b53c4:	d04c      	beq.n	b5460 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
			    || _M_impl._M_key_compare(_S_key(__z),
   b53c6:	f898 0010 	ldrb.w	r0, [r8, #16]
   b53ca:	7c3b      	ldrb	r3, [r7, #16]
   b53cc:	4298      	cmp	r0, r3
   b53ce:	bf2c      	ite	cs
   b53d0:	2000      	movcs	r0, #0
   b53d2:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b53d4:	464b      	mov	r3, r9
   b53d6:	463a      	mov	r2, r7
   b53d8:	4641      	mov	r1, r8
   b53da:	f004 f805 	bl	b93e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b53de:	6973      	ldr	r3, [r6, #20]
   b53e0:	3301      	adds	r3, #1
   b53e2:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b53e4:	4644      	mov	r4, r8
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   b53e6:	f104 0014 	add.w	r0, r4, #20
   b53ea:	b004      	add	sp, #16
   b53ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return __x < __y; }
   b53f0:	7c23      	ldrb	r3, [r4, #16]
   b53f2:	9201      	str	r2, [sp, #4]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b53f4:	4553      	cmp	r3, sl
   b53f6:	d918      	bls.n	b542a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b53f8:	68f3      	ldr	r3, [r6, #12]
   b53fa:	429c      	cmp	r4, r3
   b53fc:	d009      	beq.n	b5412 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
	_M_node = _Rb_tree_decrement(_M_node);
   b53fe:	4620      	mov	r0, r4
   b5400:	f003 fff0 	bl	b93e4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b5404:	7c03      	ldrb	r3, [r0, #16]
   b5406:	9a01      	ldr	r2, [sp, #4]
   b5408:	4553      	cmp	r3, sl
   b540a:	d205      	bcs.n	b5418 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc4>
      { return static_cast<_Link_type>(__x->_M_right); }
   b540c:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b540e:	b953      	cbnz	r3, b5426 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd2>
   b5410:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b5412:	4627      	mov	r7, r4
   b5414:	461c      	mov	r4, r3
   b5416:	e7d0      	b.n	b53ba <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b5418:	4631      	mov	r1, r6
   b541a:	a802      	add	r0, sp, #8
   b541c:	f7ff ff70 	bl	b5300 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b5420:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   b5424:	e7f5      	b.n	b5412 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
   b5426:	4623      	mov	r3, r4
   b5428:	e7f3      	b.n	b5412 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b542a:	d21b      	bcs.n	b5464 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
	  if (__pos._M_node == _M_rightmost())
   b542c:	6937      	ldr	r7, [r6, #16]
   b542e:	42bc      	cmp	r4, r7
   b5430:	d00b      	beq.n	b544a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
	_M_node = _Rb_tree_increment(_M_node);
   b5432:	4620      	mov	r0, r4
   b5434:	f003 ffd4 	bl	b93e0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5438:	7c03      	ldrb	r3, [r0, #16]
   b543a:	9a01      	ldr	r2, [sp, #4]
   b543c:	4553      	cmp	r3, sl
	_M_node = _Rb_tree_increment(_M_node);
   b543e:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5440:	d905      	bls.n	b544e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5442:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5444:	b953      	cbnz	r3, b545c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x108>
   b5446:	4627      	mov	r7, r4
   b5448:	461d      	mov	r5, r3
   b544a:	462c      	mov	r4, r5
   b544c:	e7b5      	b.n	b53ba <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b544e:	4631      	mov	r1, r6
   b5450:	a802      	add	r0, sp, #8
   b5452:	f7ff ff55 	bl	b5300 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b5456:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
   b545a:	e7f6      	b.n	b544a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
   b545c:	4607      	mov	r7, r0
   b545e:	e7f4      	b.n	b544a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5460:	2001      	movs	r0, #1
   b5462:	e7b7      	b.n	b53d4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x80>
    class function<_Res(_ArgTypes...)>
   b5464:	f108 0014 	add.w	r0, r8, #20
   b5468:	f7ff fed0 	bl	b520c <_ZNSt14_Function_baseD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b546c:	4640      	mov	r0, r8
   b546e:	2124      	movs	r1, #36	; 0x24
   b5470:	f7fe fe15 	bl	b409e <_ZdlPvj>
   b5474:	46a0      	mov	r8, r4
   b5476:	e7b5      	b.n	b53e4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x90>

000b5478 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   b5478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b547c:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   b547e:	2600      	movs	r6, #0
   b5480:	4617      	mov	r7, r2
	  : _Node_allocator()
   b5482:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   b5486:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   b548a:	e9c0 2605 	strd	r2, r6, [r0, #20]
   b548e:	4604      	mov	r4, r0
   b5490:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   b5492:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   b5494:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   b5496:	f10d 0107 	add.w	r1, sp, #7
   b549a:	2301      	movs	r3, #1
   b549c:	4628      	mov	r0, r5
   b549e:	f88d 3007 	strb.w	r3, [sp, #7]
   b54a2:	f7ff ff57 	bl	b5354 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b54a6:	4916      	ldr	r1, [pc, #88]	; (b5500 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   b54a8:	f7ff feba 	bl	b5220 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   b54ac:	f10d 0107 	add.w	r1, sp, #7
   b54b0:	4628      	mov	r0, r5
   b54b2:	f88d 6007 	strb.w	r6, [sp, #7]
   b54b6:	f7ff ff4d 	bl	b5354 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b54ba:	4912      	ldr	r1, [pc, #72]	; (b5504 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   b54bc:	f7ff feb0 	bl	b5220 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   b54c0:	2302      	movs	r3, #2
   b54c2:	f10d 0107 	add.w	r1, sp, #7
   b54c6:	4628      	mov	r0, r5
   b54c8:	f88d 3007 	strb.w	r3, [sp, #7]
   b54cc:	f7ff ff42 	bl	b5354 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b54d0:	490d      	ldr	r1, [pc, #52]	; (b5508 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   b54d2:	f7ff fea5 	bl	b5220 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   b54d6:	2303      	movs	r3, #3
   b54d8:	f10d 0107 	add.w	r1, sp, #7
   b54dc:	4628      	mov	r0, r5
   b54de:	f88d 3007 	strb.w	r3, [sp, #7]
   b54e2:	f7ff ff37 	bl	b5354 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b54e6:	4909      	ldr	r1, [pc, #36]	; (b550c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   b54e8:	f7ff fe9a 	bl	b5220 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   b54ec:	4b08      	ldr	r3, [pc, #32]	; (b5510 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   b54ee:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   b54f2:	4b08      	ldr	r3, [pc, #32]	; (b5514 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   b54f4:	4620      	mov	r0, r4
  _token = token;
   b54f6:	601f      	str	r7, [r3, #0]
}
   b54f8:	b002      	add	sp, #8
   b54fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b54fe:	bf00      	nop
   b5500:	000b5131 	.word	0x000b5131
   b5504:	000b5165 	.word	0x000b5165
   b5508:	000b5195 	.word	0x000b5195
   b550c:	000b51c9 	.word	0x000b51c9
   b5510:	2003e598 	.word	0x2003e598
   b5514:	2003e59c 	.word	0x2003e59c

000b5518 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   b5518:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   b551a:	4805      	ldr	r0, [pc, #20]	; (b5530 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   b551c:	f002 fafe 	bl	b7b1c <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   b5520:	4804      	ldr	r0, [pc, #16]	; (b5534 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   b5522:	f002 fafb 	bl	b7b1c <_ZN9TCPClientC1Ev>
   b5526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b552a:	4803      	ldr	r0, [pc, #12]	; (b5538 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   b552c:	f003 bd8e 	b.w	b904c <_ZN3UDPC1Ev>
   b5530:	2003e57c 	.word	0x2003e57c
   b5534:	2003e514 	.word	0x2003e514
   b5538:	2003e530 	.word	0x2003e530

000b553c <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   b553c:	7501      	strb	r1, [r0, #20]
   b553e:	4770      	bx	lr

000b5540 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   b5540:	2200      	movs	r2, #0
	  : _Node_allocator()
   b5542:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b5544:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b5548:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b554c:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b554e:	4770      	bx	lr

000b5550 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   b5550:	b570      	push	{r4, r5, r6, lr}
   b5552:	4606      	mov	r6, r0
   b5554:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   b5558:	2014      	movs	r0, #20
   b555a:	f001 ff0f 	bl	b737c <malloc>
   b555e:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   b5560:	2014      	movs	r0, #20
   b5562:	f001 ff0b 	bl	b737c <malloc>
   b5566:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   b5568:	4630      	mov	r0, r6
   b556a:	f004 fe20 	bl	ba1ae <strlen>
    for (int i = 0; i < len - 2; i++) {
   b556e:	4632      	mov	r2, r6
   b5570:	2300      	movs	r3, #0
   b5572:	3802      	subs	r0, #2
   b5574:	4298      	cmp	r0, r3
   b5576:	dd14      	ble.n	b55a2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   b5578:	f812 1b01 	ldrb.w	r1, [r2], #1
   b557c:	290d      	cmp	r1, #13
   b557e:	d13a      	bne.n	b55f6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5580:	7811      	ldrb	r1, [r2, #0]
   b5582:	290a      	cmp	r1, #10
   b5584:	d137      	bne.n	b55f6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5586:	7851      	ldrb	r1, [r2, #1]
   b5588:	290d      	cmp	r1, #13
   b558a:	d134      	bne.n	b55f6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b558c:	7891      	ldrb	r1, [r2, #2]
   b558e:	290a      	cmp	r1, #10
   b5590:	d131      	bne.n	b55f6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   b5592:	3304      	adds	r3, #4
   b5594:	18f1      	adds	r1, r6, r3
   b5596:	2214      	movs	r2, #20
   b5598:	4628      	mov	r0, r5
   b559a:	f004 fe24 	bl	ba1e6 <strncpy>
        parsed[20] = '\0';
   b559e:	2300      	movs	r3, #0
   b55a0:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   b55a2:	210a      	movs	r1, #10
   b55a4:	4628      	mov	r0, r5
   b55a6:	f004 fdc5 	bl	ba134 <strchr>
    if (pch == NULL) {
   b55aa:	4606      	mov	r6, r0
   b55ac:	b328      	cbz	r0, b55fa <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   b55ae:	210a      	movs	r1, #10
   b55b0:	3001      	adds	r0, #1
   b55b2:	f004 fdbf 	bl	ba134 <strchr>
    if (pch2 == NULL) {
   b55b6:	b300      	cbz	r0, b55fa <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   b55b8:	4631      	mov	r1, r6
   b55ba:	4620      	mov	r0, r4
   b55bc:	f004 fdd1 	bl	ba162 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   b55c0:	4620      	mov	r0, r4
   b55c2:	f004 fdf4 	bl	ba1ae <strlen>
   b55c6:	4420      	add	r0, r4
   b55c8:	2300      	movs	r3, #0
   b55ca:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   b55ce:	4620      	mov	r0, r4
   b55d0:	f004 fd64 	bl	ba09c <atof>
   b55d4:	ec51 0b10 	vmov	r0, r1, d0
   b55d8:	f004 fcec 	bl	b9fb4 <__aeabi_d2f>
   b55dc:	ee08 0a10 	vmov	s16, r0
    free(dst);
   b55e0:	4620      	mov	r0, r4
   b55e2:	f001 fed3 	bl	b738c <free>
    free(parsed);
   b55e6:	4628      	mov	r0, r5
   b55e8:	f001 fed0 	bl	b738c <free>
}
   b55ec:	eeb0 0a48 	vmov.f32	s0, s16
   b55f0:	ecbd 8b02 	vpop	{d8}
   b55f4:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   b55f6:	3301      	adds	r3, #1
   b55f8:	e7bc      	b.n	b5574 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   b55fa:	ed9f 8a01 	vldr	s16, [pc, #4]	; b5600 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   b55fe:	e7f5      	b.n	b55ec <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   b5600:	cda2425f 	.word	0xcda2425f

000b5604 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5604:	b530      	push	{r4, r5, lr}
   b5606:	4d07      	ldr	r5, [pc, #28]	; (b5624 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   b5608:	6005      	str	r5, [r0, #0]
   b560a:	2500      	movs	r5, #0
  _user_agent = user_agent;
   b560c:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5610:	7505      	strb	r5, [r0, #20]
  _token = token;
   b5612:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5614:	f241 3588 	movw	r5, #5000	; 0x1388
   b5618:	6185      	str	r5, [r0, #24]
   b561a:	2505      	movs	r5, #5
  _port = port;
   b561c:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5620:	7705      	strb	r5, [r0, #28]
}
   b5622:	bd30      	pop	{r4, r5, pc}
   b5624:	000bc984 	.word	0x000bc984

000b5628 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   b5628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b562c:	f8df 808c 	ldr.w	r8, [pc, #140]	; b56bc <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   b5630:	f8df a08c 	ldr.w	sl, [pc, #140]	; b56c0 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   b5634:	f8df b08c 	ldr.w	fp, [pc, #140]	; b56c4 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   b5638:	4604      	mov	r4, r0
   b563a:	460d      	mov	r5, r1
   b563c:	4617      	mov	r7, r2
   b563e:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5640:	4640      	mov	r0, r8
   b5642:	fa5f f986 	uxtb.w	r9, r6
   b5646:	f002 f8e1 	bl	b780c <_ZN9TCPClient9connectedEv>
   b564a:	bb88      	cbnz	r0, b56b0 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   b564c:	7f23      	ldrb	r3, [r4, #28]
   b564e:	454b      	cmp	r3, r9
   b5650:	d92e      	bls.n	b56b0 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   b5652:	7d23      	ldrb	r3, [r4, #20]
   b5654:	b1cb      	cbz	r3, b568a <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   b5656:	f002 fbd3 	bl	b7e00 <_Z16_fetch_usbserialv>
   b565a:	4651      	mov	r1, sl
   b565c:	f003 f93a 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(host);
   b5660:	f002 fbce 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5664:	4629      	mov	r1, r5
   b5666:	f003 f935 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b566a:	f002 fbc9 	bl	b7e00 <_Z16_fetch_usbserialv>
   b566e:	4659      	mov	r1, fp
   b5670:	f003 f930 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b5674:	f002 fbc4 	bl	b7e00 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5678:	220a      	movs	r2, #10
   b567a:	4649      	mov	r1, r9
   b567c:	9001      	str	r0, [sp, #4]
   b567e:	f003 f946 	bl	b890e <_ZN5Print11printNumberEmh>
        n += println();
   b5682:	9b01      	ldr	r3, [sp, #4]
   b5684:	4618      	mov	r0, r3
   b5686:	f003 f92c 	bl	b88e2 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   b568a:	2300      	movs	r3, #0
   b568c:	b2ba      	uxth	r2, r7
   b568e:	4629      	mov	r1, r5
   b5690:	4640      	mov	r0, r8
   b5692:	f002 f83d 	bl	b7710 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   b5696:	7d23      	ldrb	r3, [r4, #20]
   b5698:	b123      	cbz	r3, b56a4 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   b569a:	f002 fbb1 	bl	b7e00 <_Z16_fetch_usbserialv>
   b569e:	4906      	ldr	r1, [pc, #24]	; (b56b8 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   b56a0:	f003 f92b 	bl	b88fa <_ZN5Print7printlnEPKc>
    delay(1000);
   b56a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b56a8:	f003 f818 	bl	b86dc <delay>
   b56ac:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b56ae:	e7c7      	b.n	b5640 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   b56b0:	b003      	add	sp, #12
   b56b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56b6:	bf00      	nop
   b56b8:	000bc7a6 	.word	0x000bc7a6
   b56bc:	2003e5a0 	.word	0x2003e5a0
   b56c0:	000bc77c 	.word	0x000bc77c
   b56c4:	000bc792 	.word	0x000bc792

000b56c8 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   b56c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56ca:	4605      	mov	r5, r0
   b56cc:	460c      	mov	r4, r1
    response[i] = '\0';
   b56ce:	f240 22bd 	movw	r2, #701	; 0x2bd
   b56d2:	2100      	movs	r1, #0
   b56d4:	4620      	mov	r0, r4
   b56d6:	f004 fcf6 	bl	ba0c6 <memset>
  if (_debug) {
   b56da:	7d2b      	ldrb	r3, [r5, #20]
   b56dc:	b14b      	cbz	r3, b56f2 <_ZN7UbiHTTP16readServerAnswerEPc+0x2a>
    Serial.println("----------");
   b56de:	f002 fb8f 	bl	b7e00 <_Z16_fetch_usbserialv>
   b56e2:	4914      	ldr	r1, [pc, #80]	; (b5734 <_ZN7UbiHTTP16readServerAnswerEPc+0x6c>)
   b56e4:	f003 f909 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b56e8:	f002 fb8a 	bl	b7e00 <_Z16_fetch_usbserialv>
   b56ec:	4912      	ldr	r1, [pc, #72]	; (b5738 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   b56ee:	f003 f904 	bl	b88fa <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   b56f2:	4e12      	ldr	r6, [pc, #72]	; (b573c <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   b56f4:	f204 27bb 	addw	r7, r4, #699	; 0x2bb
   b56f8:	4630      	mov	r0, r6
   b56fa:	f002 f965 	bl	b79c8 <_ZN9TCPClient9availableEv>
   b56fe:	b170      	cbz	r0, b571e <_ZN7UbiHTTP16readServerAnswerEPc+0x56>
    response[j] = (char)_client_http_ubi.read();
   b5700:	4630      	mov	r0, r6
   b5702:	f001 ff6f 	bl	b75e4 <_ZN9TCPClient4readEv>
   b5706:	7020      	strb	r0, [r4, #0]
    if (_debug) {
   b5708:	7d2b      	ldrb	r3, [r5, #20]
   b570a:	b12b      	cbz	r3, b5718 <_ZN7UbiHTTP16readServerAnswerEPc+0x50>
      Serial.write(response[j]);
   b570c:	f002 fb78 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5710:	6803      	ldr	r3, [r0, #0]
   b5712:	7821      	ldrb	r1, [r4, #0]
   b5714:	689b      	ldr	r3, [r3, #8]
   b5716:	4798      	blx	r3
    if (j >= MAX_BUFFER_SIZE - 1) {
   b5718:	3401      	adds	r4, #1
   b571a:	42a7      	cmp	r7, r4
   b571c:	d1ec      	bne.n	b56f8 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
  if (_debug) {
   b571e:	7d2b      	ldrb	r3, [r5, #20]
   b5720:	b133      	cbz	r3, b5730 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
    Serial.println("\n----------");
   b5722:	f002 fb6d 	bl	b7e00 <_Z16_fetch_usbserialv>
}
   b5726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("\n----------");
   b572a:	4905      	ldr	r1, [pc, #20]	; (b5740 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   b572c:	f003 b8e5 	b.w	b88fa <_ZN5Print7printlnEPKc>
}
   b5730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5732:	bf00      	nop
   b5734:	000bc7cb 	.word	0x000bc7cb
   b5738:	000bc7b7 	.word	0x000bc7b7
   b573c:	2003e5a0 	.word	0x2003e5a0
   b5740:	000bc7ca 	.word	0x000bc7ca

000b5744 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   b5744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b5746:	4f0e      	ldr	r7, [pc, #56]	; (b5780 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   b5748:	4604      	mov	r4, r0
  int timeout = 0;
   b574a:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b574c:	4638      	mov	r0, r7
   b574e:	f002 f93b 	bl	b79c8 <_ZN9TCPClient9availableEv>
   b5752:	4605      	mov	r5, r0
   b5754:	b990      	cbnz	r0, b577c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   b5756:	69a3      	ldr	r3, [r4, #24]
   b5758:	42b3      	cmp	r3, r6
   b575a:	dd0f      	ble.n	b577c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   b575c:	2001      	movs	r0, #1
   b575e:	f002 ffbd 	bl	b86dc <delay>
    if (timeout > _timeout - 1) {
   b5762:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b5764:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b5766:	42b3      	cmp	r3, r6
   b5768:	dcf0      	bgt.n	b574c <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
   b576a:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b576c:	b128      	cbz	r0, b577a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b576e:	f002 fb47 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5772:	4904      	ldr	r1, [pc, #16]	; (b5784 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   b5774:	f003 f8c1 	bl	b88fa <_ZN5Print7printlnEPKc>
   b5778:	4628      	mov	r0, r5
}
   b577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b577c:	2001      	movs	r0, #1
   b577e:	e7fc      	b.n	b577a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   b5780:	2003e5a0 	.word	0x2003e5a0
   b5784:	000bc7d6 	.word	0x000bc7d6

000b5788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b578a:	460f      	mov	r7, r1
  reconnect(_host, _port);
   b578c:	6902      	ldr	r2, [r0, #16]
   b578e:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5790:	4604      	mov	r4, r0
   b5792:	461d      	mov	r5, r3
  reconnect(_host, _port);
   b5794:	f7ff ff48 	bl	b5628 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   b5798:	4878      	ldr	r0, [pc, #480]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b579a:	f002 f837 	bl	b780c <_ZN9TCPClient9connectedEv>
   b579e:	4606      	mov	r6, r0
   b57a0:	2800      	cmp	r0, #0
   b57a2:	f000 80e1 	beq.w	b5968 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   b57a6:	4976      	ldr	r1, [pc, #472]	; (b5980 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b57a8:	4874      	ldr	r0, [pc, #464]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57aa:	f003 f893 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b57ae:	4639      	mov	r1, r7
   b57b0:	4872      	ldr	r0, [pc, #456]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57b2:	f003 f88f 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   b57b6:	4973      	ldr	r1, [pc, #460]	; (b5984 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b57b8:	4870      	ldr	r0, [pc, #448]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57ba:	f003 f88b 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   b57be:	4972      	ldr	r1, [pc, #456]	; (b5988 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b57c0:	486e      	ldr	r0, [pc, #440]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57c2:	f003 f887 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b57c6:	6861      	ldr	r1, [r4, #4]
   b57c8:	486c      	ldr	r0, [pc, #432]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57ca:	f003 f883 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b57ce:	496f      	ldr	r1, [pc, #444]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b57d0:	486a      	ldr	r0, [pc, #424]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57d2:	f003 f87f 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   b57d6:	496e      	ldr	r1, [pc, #440]	; (b5990 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b57d8:	4868      	ldr	r0, [pc, #416]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57da:	f003 f87b 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b57de:	68a1      	ldr	r1, [r4, #8]
   b57e0:	4866      	ldr	r0, [pc, #408]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57e2:	f003 f877 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b57e6:	4969      	ldr	r1, [pc, #420]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b57e8:	4864      	ldr	r0, [pc, #400]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57ea:	f003 f873 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   b57ee:	4969      	ldr	r1, [pc, #420]	; (b5994 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b57f0:	4862      	ldr	r0, [pc, #392]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57f2:	f003 f86f 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b57f6:	68e1      	ldr	r1, [r4, #12]
   b57f8:	4860      	ldr	r0, [pc, #384]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57fa:	f003 f86b 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b57fe:	4963      	ldr	r1, [pc, #396]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5800:	485e      	ldr	r0, [pc, #376]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5802:	f003 f867 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   b5806:	4964      	ldr	r1, [pc, #400]	; (b5998 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b5808:	485c      	ldr	r0, [pc, #368]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b580a:	f003 f863 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   b580e:	4963      	ldr	r1, [pc, #396]	; (b599c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b5810:	485a      	ldr	r0, [pc, #360]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5812:	f003 f85f 	bl	b88d4 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   b5816:	4628      	mov	r0, r5
   b5818:	f004 fcc9 	bl	ba1ae <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   b581c:	4960      	ldr	r1, [pc, #384]	; (b59a0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   b581e:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   b5820:	4856      	ldr	r0, [pc, #344]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5822:	f003 f857 	bl	b88d4 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b5826:	220a      	movs	r2, #10
   b5828:	4631      	mov	r1, r6
   b582a:	4854      	ldr	r0, [pc, #336]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b582c:	f003 f86f 	bl	b890e <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   b5830:	495c      	ldr	r1, [pc, #368]	; (b59a4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5832:	4852      	ldr	r0, [pc, #328]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5834:	f003 f84e 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   b5838:	4629      	mov	r1, r5
   b583a:	4850      	ldr	r0, [pc, #320]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b583c:	f003 f84a 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5840:	4952      	ldr	r1, [pc, #328]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5842:	484e      	ldr	r0, [pc, #312]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5844:	f003 f846 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   b5848:	484c      	ldr	r0, [pc, #304]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b584a:	f001 fee5 	bl	b7618 <_ZN9TCPClient5flushEv>
    if (_debug) {
   b584e:	7d23      	ldrb	r3, [r4, #20]
   b5850:	2b00      	cmp	r3, #0
   b5852:	d069      	beq.n	b5928 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   b5854:	f002 fad4 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5858:	4953      	ldr	r1, [pc, #332]	; (b59a8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   b585a:	f003 f84e 	bl	b88fa <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   b585e:	f002 facf 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5862:	4947      	ldr	r1, [pc, #284]	; (b5980 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b5864:	f003 f836 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5868:	f002 faca 	bl	b7e00 <_Z16_fetch_usbserialv>
   b586c:	4639      	mov	r1, r7
   b586e:	f003 f831 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5872:	f002 fac5 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5876:	4943      	ldr	r1, [pc, #268]	; (b5984 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b5878:	f003 f82c 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b587c:	f002 fac0 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5880:	4941      	ldr	r1, [pc, #260]	; (b5988 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5882:	f003 f827 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5886:	f002 fabb 	bl	b7e00 <_Z16_fetch_usbserialv>
   b588a:	6861      	ldr	r1, [r4, #4]
   b588c:	f003 f822 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5890:	f002 fab6 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5894:	493d      	ldr	r1, [pc, #244]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5896:	f003 f81d 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b589a:	f002 fab1 	bl	b7e00 <_Z16_fetch_usbserialv>
   b589e:	493c      	ldr	r1, [pc, #240]	; (b5990 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b58a0:	f003 f818 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b58a4:	f002 faac 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58a8:	68a1      	ldr	r1, [r4, #8]
   b58aa:	f003 f813 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b58ae:	f002 faa7 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58b2:	4936      	ldr	r1, [pc, #216]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b58b4:	f003 f80e 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b58b8:	f002 faa2 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58bc:	4935      	ldr	r1, [pc, #212]	; (b5994 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b58be:	f003 f809 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b58c2:	f002 fa9d 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58c6:	68e1      	ldr	r1, [r4, #12]
   b58c8:	f003 f804 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b58cc:	f002 fa98 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58d0:	492e      	ldr	r1, [pc, #184]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b58d2:	f002 ffff 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   b58d6:	f002 fa93 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58da:	492f      	ldr	r1, [pc, #188]	; (b5998 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b58dc:	f002 fffa 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   b58e0:	f002 fa8e 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58e4:	492d      	ldr	r1, [pc, #180]	; (b599c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b58e6:	f002 fff5 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   b58ea:	f002 fa89 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58ee:	492c      	ldr	r1, [pc, #176]	; (b59a0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   b58f0:	f002 fff0 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   b58f4:	f002 fa84 	bl	b7e00 <_Z16_fetch_usbserialv>
   b58f8:	220a      	movs	r2, #10
   b58fa:	4631      	mov	r1, r6
   b58fc:	f003 f807 	bl	b890e <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   b5900:	f002 fa7e 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5904:	4927      	ldr	r1, [pc, #156]	; (b59a4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5906:	f002 ffe5 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(payload);
   b590a:	f002 fa79 	bl	b7e00 <_Z16_fetch_usbserialv>
   b590e:	4629      	mov	r1, r5
   b5910:	f002 ffe0 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5914:	f002 fa74 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5918:	491c      	ldr	r1, [pc, #112]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b591a:	f002 ffdb 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   b591e:	f002 fa6f 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5922:	4922      	ldr	r1, [pc, #136]	; (b59ac <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   b5924:	f002 ffe9 	bl	b88fa <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   b5928:	4620      	mov	r0, r4
   b592a:	f7ff ff0b 	bl	b5744 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   b592e:	7d23      	ldrb	r3, [r4, #20]
   b5930:	b92b      	cbnz	r3, b593e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   b5932:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   b5934:	4811      	ldr	r0, [pc, #68]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5936:	f002 f8a1 	bl	b7a7c <_ZN9TCPClient4stopEv>
}
   b593a:	4620      	mov	r0, r4
   b593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   b593e:	f002 fa5f 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5942:	491b      	ldr	r1, [pc, #108]	; (b59b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   b5944:	4d0d      	ldr	r5, [pc, #52]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   b5946:	f002 ffd8 	bl	b88fa <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   b594a:	4628      	mov	r0, r5
   b594c:	f002 f83c 	bl	b79c8 <_ZN9TCPClient9availableEv>
   b5950:	2800      	cmp	r0, #0
   b5952:	d0ee      	beq.n	b5932 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   b5954:	4628      	mov	r0, r5
   b5956:	f001 fe45 	bl	b75e4 <_ZN9TCPClient4readEv>
   b595a:	4604      	mov	r4, r0
        Serial.print(c);
   b595c:	f002 fa50 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5960:	b2e1      	uxtb	r1, r4
   b5962:	f002 ffbb 	bl	b88dc <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   b5966:	e7f0      	b.n	b594a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   b5968:	7d24      	ldrb	r4, [r4, #20]
   b596a:	2c00      	cmp	r4, #0
   b596c:	d0e2      	beq.n	b5934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   b596e:	f002 fa47 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5972:	4910      	ldr	r1, [pc, #64]	; (b59b4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   b5974:	f002 ffc1 	bl	b88fa <_ZN5Print7printlnEPKc>
  bool result = false;
   b5978:	4634      	mov	r4, r6
   b597a:	e7db      	b.n	b5934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   b597c:	2003e5a0 	.word	0x2003e5a0
   b5980:	000bc809 	.word	0x000bc809
   b5984:	000bc821 	.word	0x000bc821
   b5988:	000bc82d 	.word	0x000bc82d
   b598c:	000bc951 	.word	0x000bc951
   b5990:	000bc834 	.word	0x000bc834
   b5994:	000bc841 	.word	0x000bc841
   b5998:	000bc850 	.word	0x000bc850
   b599c:	000bc864 	.word	0x000bc864
   b59a0:	000bc885 	.word	0x000bc885
   b59a4:	000bc94f 	.word	0x000bc94f
   b59a8:	000bc896 	.word	0x000bc896
   b59ac:	000bc8b2 	.word	0x000bc8b2
   b59b0:	000bc8d0 	.word	0x000bc8d0
   b59b4:	000bc8ec 	.word	0x000bc8ec

000b59b8 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b59b8:	b570      	push	{r4, r5, r6, lr}
   b59ba:	ed2d 8b02 	vpush	{d8}
   b59be:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b59c0:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b59c2:	460e      	mov	r6, r1
   b59c4:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b59c6:	6841      	ldr	r1, [r0, #4]
   b59c8:	4866      	ldr	r0, [pc, #408]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59ca:	2250      	movs	r2, #80	; 0x50
   b59cc:	f001 fea0 	bl	b7710 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   b59d0:	4620      	mov	r0, r4
   b59d2:	6861      	ldr	r1, [r4, #4]
   b59d4:	2250      	movs	r2, #80	; 0x50
   b59d6:	f7ff fe27 	bl	b5628 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   b59da:	4862      	ldr	r0, [pc, #392]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59dc:	f001 ff16 	bl	b780c <_ZN9TCPClient9connectedEv>
   b59e0:	2800      	cmp	r0, #0
   b59e2:	f000 80b6 	beq.w	b5b52 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   b59e6:	4960      	ldr	r1, [pc, #384]	; (b5b68 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b59e8:	485e      	ldr	r0, [pc, #376]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59ea:	f002 ff73 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b59ee:	4631      	mov	r1, r6
   b59f0:	485c      	ldr	r0, [pc, #368]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59f2:	f002 ff6f 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   b59f6:	495d      	ldr	r1, [pc, #372]	; (b5b6c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b59f8:	485a      	ldr	r0, [pc, #360]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59fa:	f002 ff6b 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   b59fe:	4629      	mov	r1, r5
   b5a00:	4858      	ldr	r0, [pc, #352]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a02:	f002 ff67 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   b5a06:	495a      	ldr	r1, [pc, #360]	; (b5b70 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5a08:	4856      	ldr	r0, [pc, #344]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a0a:	f002 ff63 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   b5a0e:	4959      	ldr	r1, [pc, #356]	; (b5b74 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5a10:	4854      	ldr	r0, [pc, #336]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a12:	f002 ff5f 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   b5a16:	4958      	ldr	r1, [pc, #352]	; (b5b78 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5a18:	4852      	ldr	r0, [pc, #328]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a1a:	f002 ff5b 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b5a1e:	6861      	ldr	r1, [r4, #4]
   b5a20:	4850      	ldr	r0, [pc, #320]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a22:	f002 ff57 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5a26:	4955      	ldr	r1, [pc, #340]	; (b5b7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5a28:	484e      	ldr	r0, [pc, #312]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a2a:	f002 ff53 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   b5a2e:	4954      	ldr	r1, [pc, #336]	; (b5b80 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5a30:	484c      	ldr	r0, [pc, #304]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a32:	f002 ff4f 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5a36:	68a1      	ldr	r1, [r4, #8]
   b5a38:	484a      	ldr	r0, [pc, #296]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a3a:	f002 ff4b 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5a3e:	494f      	ldr	r1, [pc, #316]	; (b5b7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5a40:	4848      	ldr	r0, [pc, #288]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a42:	f002 ff47 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   b5a46:	494f      	ldr	r1, [pc, #316]	; (b5b84 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5a48:	4846      	ldr	r0, [pc, #280]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a4a:	f002 ff43 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b5a4e:	68e1      	ldr	r1, [r4, #12]
   b5a50:	4844      	ldr	r0, [pc, #272]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a52:	f002 ff3f 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5a56:	4949      	ldr	r1, [pc, #292]	; (b5b7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5a58:	4842      	ldr	r0, [pc, #264]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a5a:	f002 ff3b 	bl	b88d4 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   b5a5e:	494a      	ldr	r1, [pc, #296]	; (b5b88 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5a60:	4840      	ldr	r0, [pc, #256]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a62:	f002 ff37 	bl	b88d4 <_ZN5Print5printEPKc>
    if (_debug) {
   b5a66:	7d23      	ldrb	r3, [r4, #20]
   b5a68:	2b00      	cmp	r3, #0
   b5a6a:	d04f      	beq.n	b5b0c <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   b5a6c:	f002 f9c8 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5a70:	493d      	ldr	r1, [pc, #244]	; (b5b68 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5a72:	f002 ff2f 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5a76:	f002 f9c3 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5a7a:	4631      	mov	r1, r6
   b5a7c:	f002 ff2a 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("/");
   b5a80:	f002 f9be 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5a84:	4939      	ldr	r1, [pc, #228]	; (b5b6c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5a86:	f002 ff25 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   b5a8a:	f002 f9b9 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5a8e:	4629      	mov	r1, r5
   b5a90:	f002 ff20 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   b5a94:	f002 f9b4 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5a98:	4935      	ldr	r1, [pc, #212]	; (b5b70 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5a9a:	f002 ff1b 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5a9e:	f002 f9af 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5aa2:	4934      	ldr	r1, [pc, #208]	; (b5b74 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5aa4:	f002 ff16 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5aa8:	f002 f9aa 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5aac:	4932      	ldr	r1, [pc, #200]	; (b5b78 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5aae:	f002 ff11 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5ab2:	f002 f9a5 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5ab6:	6861      	ldr	r1, [r4, #4]
   b5ab8:	f002 ff0c 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5abc:	f002 f9a0 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5ac0:	492e      	ldr	r1, [pc, #184]	; (b5b7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5ac2:	f002 ff07 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5ac6:	f002 f99b 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5aca:	492d      	ldr	r1, [pc, #180]	; (b5b80 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5acc:	f002 ff02 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5ad0:	f002 f996 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5ad4:	68a1      	ldr	r1, [r4, #8]
   b5ad6:	f002 fefd 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5ada:	f002 f991 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5ade:	4927      	ldr	r1, [pc, #156]	; (b5b7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5ae0:	f002 fef8 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5ae4:	f002 f98c 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5ae8:	4926      	ldr	r1, [pc, #152]	; (b5b84 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5aea:	f002 fef3 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5aee:	f002 f987 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5af2:	68e1      	ldr	r1, [r4, #12]
   b5af4:	f002 feee 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5af8:	f002 f982 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5afc:	491f      	ldr	r1, [pc, #124]	; (b5b7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5afe:	f002 fee9 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   b5b02:	f002 f97d 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5b06:	4920      	ldr	r1, [pc, #128]	; (b5b88 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5b08:	f002 fee4 	bl	b88d4 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   b5b0c:	4620      	mov	r0, r4
   b5b0e:	f7ff fe19 	bl	b5744 <_ZN7UbiHTTP16waitServerAnswerEv>
   b5b12:	b948      	cbnz	r0, b5b28 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   b5b14:	4813      	ldr	r0, [pc, #76]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   b5b16:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b5b8c <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   b5b1a:	f001 ffaf 	bl	b7a7c <_ZN9TCPClient4stopEv>
}
   b5b1e:	eeb0 0a48 	vmov.f32	s0, s16
   b5b22:	ecbd 8b02 	vpop	{d8}
   b5b26:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5b28:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b5b2c:	f001 fc26 	bl	b737c <malloc>
    readServerAnswer(response);
   b5b30:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5b32:	4605      	mov	r5, r0
    readServerAnswer(response);
   b5b34:	4620      	mov	r0, r4
   b5b36:	f7ff fdc7 	bl	b56c8 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   b5b3a:	4628      	mov	r0, r5
   b5b3c:	f7ff fd08 	bl	b5550 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   b5b40:	4808      	ldr	r0, [pc, #32]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b42:	eeb0 8a40 	vmov.f32	s16, s0
   b5b46:	f001 ff99 	bl	b7a7c <_ZN9TCPClient4stopEv>
    free(response);
   b5b4a:	4628      	mov	r0, r5
   b5b4c:	f001 fc1e 	bl	b738c <free>
    return value;
   b5b50:	e7e5      	b.n	b5b1e <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   b5b52:	7d23      	ldrb	r3, [r4, #20]
   b5b54:	2b00      	cmp	r3, #0
   b5b56:	d0dd      	beq.n	b5b14 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   b5b58:	f002 f952 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5b5c:	490c      	ldr	r1, [pc, #48]	; (b5b90 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   b5b5e:	f002 fecc 	bl	b88fa <_ZN5Print7printlnEPKc>
   b5b62:	e7d7      	b.n	b5b14 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   b5b64:	2003e5a0 	.word	0x2003e5a0
   b5b68:	000bc916 	.word	0x000bc916
   b5b6c:	000bc92b 	.word	0x000bc92b
   b5b70:	000bc92d 	.word	0x000bc92d
   b5b74:	000bc821 	.word	0x000bc821
   b5b78:	000bc82d 	.word	0x000bc82d
   b5b7c:	000bc951 	.word	0x000bc951
   b5b80:	000bc834 	.word	0x000bc834
   b5b84:	000bc841 	.word	0x000bc841
   b5b88:	000bc931 	.word	0x000bc931
   b5b8c:	cda2425f 	.word	0xcda2425f
   b5b90:	000bc954 	.word	0x000bc954

000b5b94 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   b5b94:	4801      	ldr	r0, [pc, #4]	; (b5b9c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   b5b96:	f001 bfc1 	b.w	b7b1c <_ZN9TCPClientC1Ev>
   b5b9a:	bf00      	nop
   b5b9c:	2003e5a0 	.word	0x2003e5a0

000b5ba0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   b5ba2:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5ba4:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b5ba6:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5ba8:	e9cd 2100 	strd	r2, r1, [sp]
   b5bac:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b5bae:	f001 fbe5 	bl	b737c <malloc>
   b5bb2:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   b5bb4:	2014      	movs	r0, #20
   b5bb6:	f7fe fa6e 	bl	b4096 <_Znwj>
   b5bba:	4605      	mov	r5, r0
   b5bbc:	b120      	cbz	r0, b5bc8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   b5bbe:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5bc2:	4633      	mov	r3, r6
   b5bc4:	f000 f861 	bl	b5c8a <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   b5bc8:	6025      	str	r5, [r4, #0]
}
   b5bca:	b002      	add	sp, #8
   b5bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5bd0 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   b5bd0:	b538      	push	{r3, r4, r5, lr}
   b5bd2:	2500      	movs	r5, #0
   b5bd4:	4604      	mov	r4, r0
   b5bd6:	4613      	mov	r3, r2
   b5bd8:	7245      	strb	r5, [r0, #9]
   b5bda:	7285      	strb	r5, [r0, #10]
   b5bdc:	4a02      	ldr	r2, [pc, #8]	; (b5be8 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   b5bde:	f7ff ffdf 	bl	b5ba0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   b5be2:	4620      	mov	r0, r4
   b5be4:	bd38      	pop	{r3, r4, r5, pc}
   b5be6:	bf00      	nop
   b5be8:	000bc994 	.word	0x000bc994

000b5bec <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   b5bec:	6800      	ldr	r0, [r0, #0]
   b5bee:	f000 b855 	b.w	b5c9c <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000b5bf2 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   b5bf2:	b507      	push	{r0, r1, r2, lr}
   b5bf4:	2300      	movs	r3, #0
   b5bf6:	9300      	str	r3, [sp, #0]
   b5bf8:	461a      	mov	r2, r3
   b5bfa:	f7ff fff7 	bl	b5bec <_ZN7Ubidots3addEPcfS0_mj>
   b5bfe:	b003      	add	sp, #12
   b5c00:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c04 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   b5c04:	6800      	ldr	r0, [r0, #0]
   b5c06:	f000 ba69 	b.w	b60dc <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

000b5c0a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5c0a:	b538      	push	{r3, r4, r5, lr}
   b5c0c:	4604      	mov	r4, r0
      while (__x != 0)
   b5c0e:	b184      	cbz	r4, b5c32 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
	  _M_erase(_S_right(__x));
   b5c10:	68e0      	ldr	r0, [r4, #12]
   b5c12:	f7ff fffa 	bl	b5c0a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      if (_M_manager)
   b5c16:	69e3      	ldr	r3, [r4, #28]
      { return static_cast<_Link_type>(__x->_M_left); }
   b5c18:	68a5      	ldr	r5, [r4, #8]
   b5c1a:	b123      	cbz	r3, b5c26 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
    class function<_Res(_ArgTypes...)>
   b5c1c:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c20:	2203      	movs	r2, #3
   b5c22:	4608      	mov	r0, r1
   b5c24:	4798      	blx	r3
   b5c26:	4620      	mov	r0, r4
   b5c28:	2124      	movs	r1, #36	; 0x24
   b5c2a:	f7fe fa38 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b5c2e:	462c      	mov	r4, r5
      }
   b5c30:	e7ed      	b.n	b5c0e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
    }
   b5c32:	bd38      	pop	{r3, r4, r5, pc}

000b5c34 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   b5c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c36:	b08d      	sub	sp, #52	; 0x34
   b5c38:	4604      	mov	r4, r0
        return spark_deviceID();
   b5c3a:	a801      	add	r0, sp, #4
   b5c3c:	460d      	mov	r5, r1
   b5c3e:	4617      	mov	r7, r2
   b5c40:	461e      	mov	r6, r3
   b5c42:	f001 fa9d 	bl	b7180 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   b5c46:	9803      	ldr	r0, [sp, #12]
   b5c48:	3001      	adds	r0, #1
   b5c4a:	f7fe fa26 	bl	b409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   b5c4e:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   b5c50:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   b5c52:	f004 fa86 	bl	ba162 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   b5c56:	462a      	mov	r2, r5
   b5c58:	4639      	mov	r1, r7
   b5c5a:	4633      	mov	r3, r6
  _iot_protocol = iot_protocol;
   b5c5c:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   b5c5e:	a805      	add	r0, sp, #20
   b5c60:	f7ff fc0a 	bl	b5478 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   b5c64:	20c8      	movs	r0, #200	; 0xc8
   b5c66:	f001 fb89 	bl	b737c <malloc>
   b5c6a:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   b5c6c:	a805      	add	r0, sp, #20
   b5c6e:	f7ff fb25 	bl	b52bc <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   b5c72:	2300      	movs	r3, #0
  _token = token;
   b5c74:	e9c4 0501 	strd	r0, r5, [r4, #4]
  _current_value = 0;
   b5c78:	7423      	strb	r3, [r4, #16]
      { _M_erase(_M_begin()); }
   b5c7a:	9808      	ldr	r0, [sp, #32]
   b5c7c:	f7ff ffc5 	bl	b5c0a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
  String particle_id_str = System.deviceID();
   b5c80:	a801      	add	r0, sp, #4
   b5c82:	f002 fe9b 	bl	b89bc <_ZN6StringD1Ev>
}
   b5c86:	b00d      	add	sp, #52	; 0x34
   b5c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c8a <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   b5c8a:	b538      	push	{r3, r4, r5, lr}
   b5c8c:	2500      	movs	r5, #0
   b5c8e:	4604      	mov	r4, r0
   b5c90:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   b5c92:	f7ff ffcf 	bl	b5c34 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   b5c96:	4620      	mov	r0, r4
   b5c98:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c9c <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   b5c9c:	b538      	push	{r3, r4, r5, lr}
   b5c9e:	4604      	mov	r4, r0
  _dirty = true;
   b5ca0:	2001      	movs	r0, #1
   b5ca2:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   b5ca4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5ca8:	68e5      	ldr	r5, [r4, #12]
   b5caa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b5cae:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   b5cb2:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b5cb6:	68e0      	ldr	r0, [r4, #12]
   b5cb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b5cbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b5cc0:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   b5cc4:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b5cc8:	68e0      	ldr	r0, [r4, #12]
   b5cca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b5cce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b5cd2:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   b5cd4:	f994 2010 	ldrsb.w	r2, [r4, #16]
   b5cd8:	68e1      	ldr	r1, [r4, #12]
   b5cda:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b5cde:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b5ce2:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   b5ce4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b5ce8:	68e2      	ldr	r2, [r4, #12]
   b5cea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5cee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b5cf2:	9a04      	ldr	r2, [sp, #16]
   b5cf4:	611a      	str	r2, [r3, #16]
  _current_value++;
   b5cf6:	7c23      	ldrb	r3, [r4, #16]
   b5cf8:	3301      	adds	r3, #1
   b5cfa:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   b5cfc:	2b0a      	cmp	r3, #10
  _current_value++;
   b5cfe:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   b5d00:	dd08      	ble.n	b5d14 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   b5d02:	7ca3      	ldrb	r3, [r4, #18]
   b5d04:	b123      	cbz	r3, b5d10 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   b5d06:	f002 f87b 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5d0a:	4903      	ldr	r1, [pc, #12]	; (b5d18 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   b5d0c:	f002 fdf5 	bl	b88fa <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   b5d10:	230a      	movs	r3, #10
   b5d12:	7423      	strb	r3, [r4, #16]
  }
}
   b5d14:	bd38      	pop	{r3, r4, r5, pc}
   b5d16:	bf00      	nop
   b5d18:	000bc9af 	.word	0x000bc9af

000b5d1c <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   b5d1c:	b510      	push	{r4, lr}
   b5d1e:	ee10 0a10 	vmov	r0, s0
   b5d22:	b086      	sub	sp, #24
   b5d24:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   b5d26:	f003 fe33 	bl	b9990 <__aeabi_f2d>
   b5d2a:	4602      	mov	r2, r0
   b5d2c:	460b      	mov	r3, r1
   b5d2e:	a801      	add	r0, sp, #4
   b5d30:	490a      	ldr	r1, [pc, #40]	; (b5d5c <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   b5d32:	f001 fb3b 	bl	b73ac <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   b5d36:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   b5d38:	2214      	movs	r2, #20
  uint8_t k = 0;
   b5d3a:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   b5d3c:	f810 1b01 	ldrb.w	r1, [r0], #1
   b5d40:	2920      	cmp	r1, #32
   b5d42:	d006      	beq.n	b5d52 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b5d44:	54e1      	strb	r1, [r4, r3]
      k++;
   b5d46:	3301      	adds	r3, #1
   b5d48:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   b5d4a:	b911      	cbnz	r1, b5d52 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b5d4c:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   b5d4e:	b006      	add	sp, #24
   b5d50:	bd10      	pop	{r4, pc}
  while (j < 20) {
   b5d52:	3a01      	subs	r2, #1
   b5d54:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   b5d58:	d1f0      	bne.n	b5d3c <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   b5d5a:	e7f8      	b.n	b5d4e <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   b5d5c:	000bc9ee 	.word	0x000bc9ee

000b5d60 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b5d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d64:	460c      	mov	r4, r1
   b5d66:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   b5d68:	494d      	ldr	r1, [pc, #308]	; (b5ea0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b5d6a:	f8df 8158 	ldr.w	r8, [pc, #344]	; b5ec4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5d6e:	f8df 9158 	ldr.w	r9, [pc, #344]	; b5ec8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
        sprintf(payload, "%s000", payload);
   b5d72:	f8df a158 	ldr.w	sl, [pc, #344]	; b5ecc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x16c>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b5d76:	4605      	mov	r5, r0
  sprintf(payload, "{");
   b5d78:	4620      	mov	r0, r4
   b5d7a:	f004 f9f2 	bl	ba162 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   b5d7e:	2600      	movs	r6, #0
   b5d80:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b5d84:	429e      	cmp	r6, r3
   b5d86:	da69      	bge.n	b5e5c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfc>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5d88:	68eb      	ldr	r3, [r5, #12]
   b5d8a:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b5d8e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b5d92:	ed93 0a02 	vldr	s0, [r3, #8]
   b5d96:	a903      	add	r1, sp, #12
   b5d98:	4628      	mov	r0, r5
   b5d9a:	f7ff ffbf 	bl	b5d1c <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b5d9e:	68eb      	ldr	r3, [r5, #12]
   b5da0:	a903      	add	r1, sp, #12
   b5da2:	9100      	str	r1, [sp, #0]
   b5da4:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b5da8:	4622      	mov	r2, r4
   b5daa:	4641      	mov	r1, r8
   b5dac:	4620      	mov	r0, r4
   b5dae:	f001 fafd 	bl	b73ac <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5db2:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5db4:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5db8:	443b      	add	r3, r7
   b5dba:	68db      	ldr	r3, [r3, #12]
   b5dbc:	b33b      	cbz	r3, b5e0e <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5dbe:	4649      	mov	r1, r9
   b5dc0:	4622      	mov	r2, r4
   b5dc2:	4620      	mov	r0, r4
   b5dc4:	f001 faf2 	bl	b73ac <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b5dc8:	68eb      	ldr	r3, [r5, #12]
   b5dca:	443b      	add	r3, r7
   b5dcc:	6919      	ldr	r1, [r3, #16]
   b5dce:	2900      	cmp	r1, #0
   b5dd0:	d037      	beq.n	b5e42 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe2>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5dd2:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5dd4:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5dd6:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5dda:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b5dde:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5de2:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5de6:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5dea:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5dee:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b5df2:	b2c9      	uxtb	r1, r1
   b5df4:	9100      	str	r1, [sp, #0]
   b5df6:	b2db      	uxtb	r3, r3
   b5df8:	492a      	ldr	r1, [pc, #168]	; (b5ea4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   b5dfa:	b2d2      	uxtb	r2, r2
   b5dfc:	a802      	add	r0, sp, #8
   b5dfe:	f001 fad5 	bl	b73ac <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b5e02:	4929      	ldr	r1, [pc, #164]	; (b5ea8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   b5e04:	ab02      	add	r3, sp, #8
   b5e06:	4622      	mov	r2, r4
   b5e08:	4620      	mov	r0, r4
   b5e0a:	f001 facf 	bl	b73ac <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b5e0e:	68eb      	ldr	r3, [r5, #12]
   b5e10:	443b      	add	r3, r7
   b5e12:	685b      	ldr	r3, [r3, #4]
   b5e14:	b123      	cbz	r3, b5e20 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc0>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   b5e16:	4925      	ldr	r1, [pc, #148]	; (b5eac <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   b5e18:	4622      	mov	r2, r4
   b5e1a:	4620      	mov	r0, r4
   b5e1c:	f001 fac6 	bl	b73ac <sprintf>
    sprintf(payload, "%s}", payload);
   b5e20:	4622      	mov	r2, r4
   b5e22:	4923      	ldr	r1, [pc, #140]	; (b5eb0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b5e24:	4620      	mov	r0, r4
   b5e26:	f001 fac1 	bl	b73ac <sprintf>
    i++;
   b5e2a:	3601      	adds	r6, #1
    if (i < _current_value) {
   b5e2c:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b5e30:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b5e32:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b5e34:	4622      	mov	r2, r4
    if (i < _current_value) {
   b5e36:	da0a      	bge.n	b5e4e <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xee>
      sprintf(payload, "%s,", payload);
   b5e38:	491e      	ldr	r1, [pc, #120]	; (b5eb4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   b5e3a:	4620      	mov	r0, r4
   b5e3c:	f001 fab6 	bl	b73ac <sprintf>
   b5e40:	e79e      	b.n	b5d80 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   b5e42:	4622      	mov	r2, r4
   b5e44:	4651      	mov	r1, sl
   b5e46:	4620      	mov	r0, r4
   b5e48:	f001 fab0 	bl	b73ac <sprintf>
   b5e4c:	e7df      	b.n	b5e0e <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s}", payload);
   b5e4e:	4918      	ldr	r1, [pc, #96]	; (b5eb0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b5e50:	4620      	mov	r0, r4
   b5e52:	f001 faab 	bl	b73ac <sprintf>
      _current_value = 0;
   b5e56:	2300      	movs	r3, #0
   b5e58:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b5e5a:	e791      	b.n	b5d80 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   b5e5c:	7cab      	ldrb	r3, [r5, #18]
   b5e5e:	b1db      	cbz	r3, b5e98 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>
    Serial.println("----------");
   b5e60:	f001 ffce 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5e64:	4914      	ldr	r1, [pc, #80]	; (b5eb8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b5e66:	f002 fd48 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b5e6a:	f001 ffc9 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5e6e:	4913      	ldr	r1, [pc, #76]	; (b5ebc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   b5e70:	f002 fd43 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b5e74:	f001 ffc4 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5e78:	4621      	mov	r1, r4
   b5e7a:	f002 fd3e 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b5e7e:	f001 ffbf 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5e82:	490d      	ldr	r1, [pc, #52]	; (b5eb8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b5e84:	f002 fd39 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("");
   b5e88:	f001 ffba 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5e8c:	490c      	ldr	r1, [pc, #48]	; (b5ec0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>)
}
   b5e8e:	b009      	add	sp, #36	; 0x24
   b5e90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b5e94:	f002 bd31 	b.w	b88fa <_ZN5Print7printlnEPKc>
}
   b5e98:	b009      	add	sp, #36	; 0x24
   b5e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e9e:	bf00      	nop
   b5ea0:	000bc9f3 	.word	0x000bc9f3
   b5ea4:	000bca1b 	.word	0x000bca1b
   b5ea8:	000bca22 	.word	0x000bca22
   b5eac:	000bca2d 	.word	0x000bca2d
   b5eb0:	000bca3c 	.word	0x000bca3c
   b5eb4:	000bca40 	.word	0x000bca40
   b5eb8:	000bc7cb 	.word	0x000bc7cb
   b5ebc:	000bca44 	.word	0x000bca44
   b5ec0:	000bc953 	.word	0x000bc953
   b5ec4:	000bc9f5 	.word	0x000bc9f5
   b5ec8:	000bca08 	.word	0x000bca08
   b5ecc:	000bca27 	.word	0x000bca27

000b5ed0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b5ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ed4:	460c      	mov	r4, r1
   b5ed6:	4605      	mov	r5, r0
   b5ed8:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   b5eda:	4953      	ldr	r1, [pc, #332]	; (b6028 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b5edc:	f8df 8178 	ldr.w	r8, [pc, #376]	; b6058 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5ee0:	f8df 9178 	ldr.w	r9, [pc, #376]	; b605c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x18c>
  sprintf(payload, "");
   b5ee4:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b5ee6:	4616      	mov	r6, r2
   b5ee8:	461f      	mov	r7, r3
  sprintf(payload, "");
   b5eea:	f004 f93a 	bl	ba162 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   b5eee:	68ab      	ldr	r3, [r5, #8]
   b5ef0:	4a4e      	ldr	r2, [pc, #312]	; (b602c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   b5ef2:	494f      	ldr	r1, [pc, #316]	; (b6030 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   b5ef4:	4620      	mov	r0, r4
   b5ef6:	f001 fa59 	bl	b73ac <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   b5efa:	4633      	mov	r3, r6
   b5efc:	494d      	ldr	r1, [pc, #308]	; (b6034 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
   b5efe:	9700      	str	r7, [sp, #0]
   b5f00:	4622      	mov	r2, r4
   b5f02:	4620      	mov	r0, r4
   b5f04:	f001 fa52 	bl	b73ac <sprintf>
  sprintf(payload, "%s=>", payload);
   b5f08:	494b      	ldr	r1, [pc, #300]	; (b6038 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b5f0a:	4f4a      	ldr	r7, [pc, #296]	; (b6034 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
  sprintf(payload, "%s=>", payload);
   b5f0c:	4622      	mov	r2, r4
   b5f0e:	4620      	mov	r0, r4
   b5f10:	f001 fa4c 	bl	b73ac <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   b5f14:	2600      	movs	r6, #0
   b5f16:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b5f1a:	429e      	cmp	r6, r3
   b5f1c:	da63      	bge.n	b5fe6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x116>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5f1e:	68eb      	ldr	r3, [r5, #12]
   b5f20:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b5f24:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b5f28:	ed93 0a02 	vldr	s0, [r3, #8]
   b5f2c:	a903      	add	r1, sp, #12
   b5f2e:	4628      	mov	r0, r5
   b5f30:	f7ff fef4 	bl	b5d1c <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b5f34:	68eb      	ldr	r3, [r5, #12]
   b5f36:	a903      	add	r1, sp, #12
   b5f38:	9100      	str	r1, [sp, #0]
   b5f3a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b5f3e:	4622      	mov	r2, r4
   b5f40:	4639      	mov	r1, r7
   b5f42:	4620      	mov	r0, r4
   b5f44:	f001 fa32 	bl	b73ac <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b5f48:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5f4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   b5f4e:	4453      	add	r3, sl
   b5f50:	685b      	ldr	r3, [r3, #4]
   b5f52:	b123      	cbz	r3, b5f5e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b5f54:	4622      	mov	r2, r4
   b5f56:	4641      	mov	r1, r8
   b5f58:	4620      	mov	r0, r4
   b5f5a:	f001 fa27 	bl	b73ac <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5f5e:	68eb      	ldr	r3, [r5, #12]
   b5f60:	4453      	add	r3, sl
   b5f62:	68db      	ldr	r3, [r3, #12]
   b5f64:	b333      	cbz	r3, b5fb4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5f66:	4649      	mov	r1, r9
   b5f68:	4622      	mov	r2, r4
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f001 fa1e 	bl	b73ac <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b5f70:	68eb      	ldr	r3, [r5, #12]
   b5f72:	4453      	add	r3, sl
   b5f74:	6919      	ldr	r1, [r3, #16]
   b5f76:	b349      	cbz	r1, b5fcc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfc>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f78:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f7a:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f7c:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f80:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b5f84:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f88:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f8c:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f90:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f94:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b5f98:	b2c9      	uxtb	r1, r1
   b5f9a:	9100      	str	r1, [sp, #0]
   b5f9c:	b2db      	uxtb	r3, r3
   b5f9e:	4927      	ldr	r1, [pc, #156]	; (b603c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   b5fa0:	b2d2      	uxtb	r2, r2
   b5fa2:	a802      	add	r0, sp, #8
   b5fa4:	f001 fa02 	bl	b73ac <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b5fa8:	4925      	ldr	r1, [pc, #148]	; (b6040 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   b5faa:	ab02      	add	r3, sp, #8
   b5fac:	4622      	mov	r2, r4
   b5fae:	4620      	mov	r0, r4
   b5fb0:	f001 f9fc 	bl	b73ac <sprintf>
    if (i < _current_value) {
   b5fb4:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b5fb8:	3601      	adds	r6, #1
   b5fba:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b5fbc:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b5fbe:	4622      	mov	r2, r4
    if (i < _current_value) {
   b5fc0:	da0a      	bge.n	b5fd8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x108>
      sprintf(payload, "%s,", payload);
   b5fc2:	4920      	ldr	r1, [pc, #128]	; (b6044 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	f001 f9f1 	bl	b73ac <sprintf>
   b5fca:	e7a4      	b.n	b5f16 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   b5fcc:	491e      	ldr	r1, [pc, #120]	; (b6048 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   b5fce:	4622      	mov	r2, r4
   b5fd0:	4620      	mov	r0, r4
   b5fd2:	f001 f9eb 	bl	b73ac <sprintf>
   b5fd6:	e7ed      	b.n	b5fb4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s|end", payload);
   b5fd8:	491c      	ldr	r1, [pc, #112]	; (b604c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   b5fda:	4620      	mov	r0, r4
   b5fdc:	f001 f9e6 	bl	b73ac <sprintf>
      _current_value = 0;
   b5fe0:	2300      	movs	r3, #0
   b5fe2:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b5fe4:	e797      	b.n	b5f16 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   b5fe6:	7cab      	ldrb	r3, [r5, #18]
   b5fe8:	b1db      	cbz	r3, b6022 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x152>
    Serial.println("----------");
   b5fea:	f001 ff09 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5fee:	4918      	ldr	r1, [pc, #96]	; (b6050 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b5ff0:	f002 fc83 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b5ff4:	f001 ff04 	bl	b7e00 <_Z16_fetch_usbserialv>
   b5ff8:	4916      	ldr	r1, [pc, #88]	; (b6054 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>)
   b5ffa:	f002 fc7e 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b5ffe:	f001 feff 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6002:	4621      	mov	r1, r4
   b6004:	f002 fc79 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b6008:	f001 fefa 	bl	b7e00 <_Z16_fetch_usbserialv>
   b600c:	4910      	ldr	r1, [pc, #64]	; (b6050 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b600e:	f002 fc74 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("");
   b6012:	f001 fef5 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6016:	4904      	ldr	r1, [pc, #16]	; (b6028 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
}
   b6018:	b009      	add	sp, #36	; 0x24
   b601a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b601e:	f002 bc6c 	b.w	b88fa <_ZN5Print7printlnEPKc>
}
   b6022:	b009      	add	sp, #36	; 0x24
   b6024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6028:	000bc953 	.word	0x000bc953
   b602c:	000bc768 	.word	0x000bc768
   b6030:	000bca4d 	.word	0x000bca4d
   b6034:	000bca59 	.word	0x000bca59
   b6038:	000bca61 	.word	0x000bca61
   b603c:	000bca1b 	.word	0x000bca1b
   b6040:	000bca22 	.word	0x000bca22
   b6044:	000bca40 	.word	0x000bca40
   b6048:	000bca27 	.word	0x000bca27
   b604c:	000bca73 	.word	0x000bca73
   b6050:	000bc7cb 	.word	0x000bc7cb
   b6054:	000bca44 	.word	0x000bca44
   b6058:	000bca66 	.word	0x000bca66
   b605c:	000bca6c 	.word	0x000bca6c

000b6060 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b6060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6064:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6066:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b606a:	461e      	mov	r6, r3
   b606c:	460f      	mov	r7, r1
   b606e:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6070:	f001 f984 	bl	b737c <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b6074:	7ce3      	ldrb	r3, [r4, #19]
   b6076:	3b01      	subs	r3, #1
   b6078:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b607a:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b607c:	d826      	bhi.n	b60cc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   b607e:	4601      	mov	r1, r0
   b6080:	4643      	mov	r3, r8
   b6082:	463a      	mov	r2, r7
   b6084:	4620      	mov	r0, r4
   b6086:	f7ff ff23 	bl	b5ed0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   b608a:	7ca3      	ldrb	r3, [r4, #18]
   b608c:	b123      	cbz	r3, b6098 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   b608e:	f001 feb7 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6092:	4911      	ldr	r1, [pc, #68]	; (b60d8 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   b6094:	f002 fc31 	bl	b88fa <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   b6098:	6860      	ldr	r0, [r4, #4]
   b609a:	6803      	ldr	r3, [r0, #0]
   b609c:	9600      	str	r6, [sp, #0]
   b609e:	f8d3 9000 	ldr.w	r9, [r3]
   b60a2:	4639      	mov	r1, r7
   b60a4:	462b      	mov	r3, r5
   b60a6:	4642      	mov	r2, r8
   b60a8:	47c8      	blx	r9
   b60aa:	4607      	mov	r7, r0
  free(payload);
   b60ac:	4628      	mov	r0, r5
   b60ae:	f001 f96d 	bl	b738c <free>
  delete flags;
   b60b2:	b11e      	cbz	r6, b60bc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   b60b4:	2101      	movs	r1, #1
   b60b6:	4630      	mov	r0, r6
   b60b8:	f7fd fff1 	bl	b409e <_ZdlPvj>
  if (result) {
   b60bc:	2300      	movs	r3, #0
   b60be:	b107      	cbz	r7, b60c2 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   b60c0:	7463      	strb	r3, [r4, #17]
}
   b60c2:	4638      	mov	r0, r7
  _current_value = 0;
   b60c4:	7423      	strb	r3, [r4, #16]
}
   b60c6:	b003      	add	sp, #12
   b60c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   b60cc:	4601      	mov	r1, r0
   b60ce:	4620      	mov	r0, r4
   b60d0:	f7ff fe46 	bl	b5d60 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   b60d4:	e7d9      	b.n	b608a <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   b60d6:	bf00      	nop
   b60d8:	000bca7a 	.word	0x000bca7a

000b60dc <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b60dc:	b570      	push	{r4, r5, r6, lr}
   b60de:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   b60e0:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b60e2:	460d      	mov	r5, r1
   b60e4:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   b60e6:	f7fd ffd6 	bl	b4096 <_Znwj>
  flags->particle_flag = flag;
   b60ea:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   b60ec:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   b60ee:	462a      	mov	r2, r5
   b60f0:	4629      	mov	r1, r5
   b60f2:	4620      	mov	r0, r4
}
   b60f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   b60f8:	f7ff bfb2 	b.w	b6060 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000b60fc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b60fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6100:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6102:	2018      	movs	r0, #24
   b6104:	4615      	mov	r5, r2
   b6106:	460f      	mov	r7, r1
   b6108:	f7fd ffc5 	bl	b4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   b610c:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   b6110:	686b      	ldr	r3, [r5, #4]
   b6112:	f8d5 9000 	ldr.w	r9, [r5]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b6116:	68ba      	ldr	r2, [r7, #8]
   b6118:	6143      	str	r3, [r0, #20]
   b611a:	4606      	mov	r6, r0
   b611c:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   b6120:	4655      	mov	r5, sl
      bool __comp = true;
   b6122:	2301      	movs	r3, #1
      while (__x != 0)
   b6124:	b152      	cbz	r2, b613c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b6126:	6913      	ldr	r3, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b6128:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   b612c:	454b      	cmp	r3, r9
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b612e:	4615      	mov	r5, r2
   b6130:	bfcb      	itete	gt
   b6132:	2301      	movgt	r3, #1
   b6134:	2300      	movle	r3, #0
   b6136:	4602      	movgt	r2, r0
   b6138:	460a      	movle	r2, r1
   b613a:	e7f3      	b.n	b6124 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   b613c:	b1ab      	cbz	r3, b616a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6e>
	  if (__j == begin())
   b613e:	68fb      	ldr	r3, [r7, #12]
   b6140:	42ab      	cmp	r3, r5
   b6142:	d024      	beq.n	b618e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	_M_node = _Rb_tree_decrement(_M_node);
   b6144:	4628      	mov	r0, r5
   b6146:	f003 f94d 	bl	b93e4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b614a:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b614c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b6150:	454b      	cmp	r3, r9
   b6152:	db1c      	blt.n	b618e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	::operator delete(__p
   b6154:	2118      	movs	r1, #24
   b6156:	4630      	mov	r0, r6
   b6158:	f7fd ffa1 	bl	b409e <_ZdlPvj>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b615c:	f8c4 8000 	str.w	r8, [r4]
   b6160:	2300      	movs	r3, #0
   b6162:	7123      	strb	r3, [r4, #4]
      }
   b6164:	4620      	mov	r0, r4
   b6166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b616a:	46a8      	mov	r8, r5
   b616c:	e7ee      	b.n	b614c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   b616e:	6928      	ldr	r0, [r5, #16]
   b6170:	4581      	cmp	r9, r0
   b6172:	bfac      	ite	ge
   b6174:	2000      	movge	r0, #0
   b6176:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b6178:	4653      	mov	r3, sl
   b617a:	462a      	mov	r2, r5
   b617c:	4631      	mov	r1, r6
   b617e:	f003 f933 	bl	b93e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b6182:	697b      	ldr	r3, [r7, #20]
   b6184:	6026      	str	r6, [r4, #0]
   b6186:	3301      	adds	r3, #1
   b6188:	617b      	str	r3, [r7, #20]
   b618a:	2301      	movs	r3, #1
   b618c:	e7e9      	b.n	b6162 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x66>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b618e:	45aa      	cmp	sl, r5
   b6190:	d1ed      	bne.n	b616e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x72>
			    || _M_impl._M_key_compare(_S_key(__z),
   b6192:	2001      	movs	r0, #1
   b6194:	e7f0      	b.n	b6178 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7c>
	...

000b6198 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   b6198:	b508      	push	{r3, lr}
        val_(val) {
   b619a:	4b07      	ldr	r3, [pc, #28]	; (b61b8 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   b619c:	4807      	ldr	r0, [pc, #28]	; (b61bc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   b619e:	2200      	movs	r2, #0
   b61a0:	701a      	strb	r2, [r3, #0]
   b61a2:	f001 fcbb 	bl	b7b1c <_ZN9TCPClientC1Ev>
   b61a6:	4806      	ldr	r0, [pc, #24]	; (b61c0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   b61a8:	f001 fcb8 	bl	b7b1c <_ZN9TCPClientC1Ev>
   b61ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b61b0:	4804      	ldr	r0, [pc, #16]	; (b61c4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   b61b2:	f002 bf4b 	b.w	b904c <_ZN3UDPC1Ev>
   b61b6:	bf00      	nop
   b61b8:	2003e640 	.word	0x2003e640
   b61bc:	2003e624 	.word	0x2003e624
   b61c0:	2003e5bc 	.word	0x2003e5bc
   b61c4:	2003e5d8 	.word	0x2003e5d8

000b61c8 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   b61c8:	7501      	strb	r1, [r0, #20]
   b61ca:	4770      	bx	lr

000b61cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b61cc:	b538      	push	{r3, r4, r5, lr}
   b61ce:	4604      	mov	r4, r0
      while (__x != 0)
   b61d0:	b14c      	cbz	r4, b61e6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x1a>
	  _M_erase(_S_right(__x));
   b61d2:	68e0      	ldr	r0, [r4, #12]
   b61d4:	f7ff fffa 	bl	b61cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b61d8:	68a5      	ldr	r5, [r4, #8]
   b61da:	4620      	mov	r0, r4
   b61dc:	2118      	movs	r1, #24
   b61de:	f7fd ff5e 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b61e2:	462c      	mov	r4, r5
      while (__x != 0)
   b61e4:	e7f4      	b.n	b61d0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x4>
    }
   b61e6:	bd38      	pop	{r3, r4, r5, pc}

000b61e8 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b61e8:	b530      	push	{r4, r5, lr}
   b61ea:	4d06      	ldr	r5, [pc, #24]	; (b6204 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   b61ec:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b61ee:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b61f2:	2500      	movs	r5, #0
  _token = token;
   b61f4:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b61f6:	7505      	strb	r5, [r0, #20]
   b61f8:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b61fc:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b6200:	6185      	str	r5, [r0, #24]
}
   b6202:	bd30      	pop	{r4, r5, pc}
   b6204:	000bcb24 	.word	0x000bcb24

000b6208 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   b6208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b620c:	460d      	mov	r5, r1
   b620e:	4617      	mov	r7, r2
   b6210:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   b6212:	f001 fdf5 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6216:	491e      	ldr	r1, [pc, #120]	; (b6290 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b6218:	4e1e      	ldr	r6, [pc, #120]	; (b6294 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   b621a:	f8df a07c 	ldr.w	sl, [pc, #124]	; b6298 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   b621e:	f8df b07c 	ldr.w	fp, [pc, #124]	; b629c <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   b6222:	f002 fb6a 	bl	b88fa <_ZN5Print7printlnEPKc>
   b6226:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b6228:	4630      	mov	r0, r6
   b622a:	f001 fc3e 	bl	b7aaa <_ZN9TCPClient6statusEv>
   b622e:	bb60      	cbnz	r0, b628a <_ZN6UbiTCP9reconnectEPKci+0x82>
   b6230:	2c05      	cmp	r4, #5
   b6232:	d02a      	beq.n	b628a <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   b6234:	f898 3014 	ldrb.w	r3, [r8, #20]
   b6238:	b1c3      	cbz	r3, b626c <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   b623a:	f001 fde1 	bl	b7e00 <_Z16_fetch_usbserialv>
   b623e:	4651      	mov	r1, sl
   b6240:	f002 fb48 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(host);
   b6244:	f001 fddc 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6248:	4629      	mov	r1, r5
   b624a:	f002 fb43 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b624e:	f001 fdd7 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6252:	4659      	mov	r1, fp
   b6254:	f002 fb3e 	bl	b88d4 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b6258:	f001 fdd2 	bl	b7e00 <_Z16_fetch_usbserialv>
   b625c:	220a      	movs	r2, #10
   b625e:	4681      	mov	r9, r0
   b6260:	4621      	mov	r1, r4
   b6262:	f002 fb54 	bl	b890e <_ZN5Print11printNumberEmh>
        n += println();
   b6266:	4648      	mov	r0, r9
   b6268:	f002 fb3b 	bl	b88e2 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   b626c:	4630      	mov	r0, r6
   b626e:	f001 fc05 	bl	b7a7c <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   b6272:	2300      	movs	r3, #0
   b6274:	b2ba      	uxth	r2, r7
   b6276:	4629      	mov	r1, r5
   b6278:	4630      	mov	r0, r6
   b627a:	f001 fa49 	bl	b7710 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   b627e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6282:	f002 fa2b 	bl	b86dc <delay>
   b6286:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b6288:	e7ce      	b.n	b6228 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   b628a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b628e:	bf00      	nop
   b6290:	000bca8a 	.word	0x000bca8a
   b6294:	2003e644 	.word	0x2003e644
   b6298:	000bc77c 	.word	0x000bc77c
   b629c:	000bc792 	.word	0x000bc792

000b62a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b62a0:	b570      	push	{r4, r5, r6, lr}
   b62a2:	4604      	mov	r4, r0
   b62a4:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   b62a6:	6881      	ldr	r1, [r0, #8]
   b62a8:	482e      	ldr	r0, [pc, #184]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b62aa:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   b62ac:	f002 fb12 	bl	b88d4 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   b62b0:	492d      	ldr	r1, [pc, #180]	; (b6368 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b62b2:	482c      	ldr	r0, [pc, #176]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62b4:	f002 fb0e 	bl	b88d4 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   b62b8:	68e1      	ldr	r1, [r4, #12]
   b62ba:	482a      	ldr	r0, [pc, #168]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62bc:	f002 fb0a 	bl	b88d4 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   b62c0:	492a      	ldr	r1, [pc, #168]	; (b636c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b62c2:	4828      	ldr	r0, [pc, #160]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62c4:	f002 fb06 	bl	b88d4 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   b62c8:	4631      	mov	r1, r6
   b62ca:	4826      	ldr	r0, [pc, #152]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62cc:	f002 fb02 	bl	b88d4 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   b62d0:	4927      	ldr	r1, [pc, #156]	; (b6370 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b62d2:	4824      	ldr	r0, [pc, #144]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62d4:	f002 fafe 	bl	b88d4 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   b62d8:	4629      	mov	r1, r5
   b62da:	4822      	ldr	r0, [pc, #136]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62dc:	f002 fafa 	bl	b88d4 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   b62e0:	4924      	ldr	r1, [pc, #144]	; (b6374 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b62e2:	4820      	ldr	r0, [pc, #128]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62e4:	f002 faf6 	bl	b88d4 <_ZN5Print5printEPKc>
  if (_debug) {
   b62e8:	7d23      	ldrb	r3, [r4, #20]
   b62ea:	2b00      	cmp	r3, #0
   b62ec:	d038      	beq.n	b6360 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   b62ee:	f001 fd87 	bl	b7e00 <_Z16_fetch_usbserialv>
   b62f2:	4921      	ldr	r1, [pc, #132]	; (b6378 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   b62f4:	f002 fb01 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   b62f8:	f001 fd82 	bl	b7e00 <_Z16_fetch_usbserialv>
   b62fc:	491f      	ldr	r1, [pc, #124]	; (b637c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   b62fe:	f002 fafc 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   b6302:	f001 fd7d 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6306:	68a1      	ldr	r1, [r4, #8]
   b6308:	f002 fae4 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   b630c:	f001 fd78 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6310:	4915      	ldr	r1, [pc, #84]	; (b6368 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b6312:	f002 fadf 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.print(_token);
   b6316:	f001 fd73 	bl	b7e00 <_Z16_fetch_usbserialv>
   b631a:	68e1      	ldr	r1, [r4, #12]
   b631c:	f002 fada 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.print("|");
   b6320:	f001 fd6e 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6324:	4911      	ldr	r1, [pc, #68]	; (b636c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b6326:	f002 fad5 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   b632a:	f001 fd69 	bl	b7e00 <_Z16_fetch_usbserialv>
   b632e:	4631      	mov	r1, r6
   b6330:	f002 fad0 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.print(":");
   b6334:	f001 fd64 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6338:	490d      	ldr	r1, [pc, #52]	; (b6370 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b633a:	f002 facb 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   b633e:	f001 fd5f 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6342:	4629      	mov	r1, r5
   b6344:	f002 fac6 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.print("|end");
   b6348:	f001 fd5a 	bl	b7e00 <_Z16_fetch_usbserialv>
   b634c:	4909      	ldr	r1, [pc, #36]	; (b6374 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b634e:	f002 fac1 	bl	b88d4 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   b6352:	f001 fd55 	bl	b7e00 <_Z16_fetch_usbserialv>
}
   b6356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   b635a:	4909      	ldr	r1, [pc, #36]	; (b6380 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   b635c:	f002 bacd 	b.w	b88fa <_ZN5Print7printlnEPKc>
}
   b6360:	bd70      	pop	{r4, r5, r6, pc}
   b6362:	bf00      	nop
   b6364:	2003e644 	.word	0x2003e644
   b6368:	000bcaa2 	.word	0x000bcaa2
   b636c:	000bcaa5 	.word	0x000bcaa5
   b6370:	000bca4b 	.word	0x000bca4b
   b6374:	000bca75 	.word	0x000bca75
   b6378:	000bcabd 	.word	0x000bcabd
   b637c:	000bcaa7 	.word	0x000bcaa7
   b6380:	000bcabc 	.word	0x000bcabc

000b6384 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   b6384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b6386:	4f0e      	ldr	r7, [pc, #56]	; (b63c0 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   b6388:	4604      	mov	r4, r0
  int timeout = 0;
   b638a:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b638c:	4638      	mov	r0, r7
   b638e:	f001 fb1b 	bl	b79c8 <_ZN9TCPClient9availableEv>
   b6392:	4605      	mov	r5, r0
   b6394:	b990      	cbnz	r0, b63bc <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   b6396:	69a3      	ldr	r3, [r4, #24]
   b6398:	42b3      	cmp	r3, r6
   b639a:	dd0f      	ble.n	b63bc <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   b639c:	2001      	movs	r0, #1
   b639e:	f002 f99d 	bl	b86dc <delay>
    if (timeout > _timeout - 1) {
   b63a2:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b63a4:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b63a6:	42b3      	cmp	r3, r6
   b63a8:	dcf0      	bgt.n	b638c <_ZN6UbiTCP16waitServerAnswerEv+0x8>
   b63aa:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b63ac:	b128      	cbz	r0, b63ba <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b63ae:	f001 fd27 	bl	b7e00 <_Z16_fetch_usbserialv>
   b63b2:	4904      	ldr	r1, [pc, #16]	; (b63c4 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   b63b4:	f002 faa1 	bl	b88fa <_ZN5Print7printlnEPKc>
   b63b8:	4628      	mov	r0, r5
}
   b63ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b63bc:	2001      	movs	r0, #1
   b63be:	e7fc      	b.n	b63ba <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   b63c0:	2003e644 	.word	0x2003e644
   b63c4:	000bc7d6 	.word	0x000bc7d6

000b63c8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b63c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   b63cc:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b63ce:	4606      	mov	r6, r0
   b63d0:	4688      	mov	r8, r1
   b63d2:	4614      	mov	r4, r2
  if (_debug) {
   b63d4:	b14b      	cbz	r3, b63ea <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   b63d6:	f001 fd13 	bl	b7e00 <_Z16_fetch_usbserialv>
   b63da:	4927      	ldr	r1, [pc, #156]	; (b6478 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   b63dc:	f002 fa8d 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b63e0:	f001 fd0e 	bl	b7e00 <_Z16_fetch_usbserialv>
   b63e4:	4925      	ldr	r1, [pc, #148]	; (b647c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   b63e6:	f002 fa88 	bl	b88fa <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b63ea:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6490 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b63ee:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b63f0:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b63f4:	4648      	mov	r0, r9
   b63f6:	f001 fae7 	bl	b79c8 <_ZN9TCPClient9availableEv>
   b63fa:	b178      	cbz	r0, b641c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   b63fc:	4648      	mov	r0, r9
   b63fe:	f001 f8f1 	bl	b75e4 <_ZN9TCPClient4readEv>
    if (_debug) {
   b6402:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   b6404:	b2c7      	uxtb	r7, r0
    if (_debug) {
   b6406:	b12b      	cbz	r3, b6414 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   b6408:	f001 fcfa 	bl	b7e00 <_Z16_fetch_usbserialv>
   b640c:	6803      	ldr	r3, [r0, #0]
   b640e:	4639      	mov	r1, r7
   b6410:	689b      	ldr	r3, [r3, #8]
   b6412:	4798      	blx	r3
    response[j] = c;
   b6414:	5567      	strb	r7, [r4, r5]
    j++;
   b6416:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6418:	4555      	cmp	r5, sl
   b641a:	d1eb      	bne.n	b63f4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   b641c:	7d33      	ldrb	r3, [r6, #20]
   b641e:	b123      	cbz	r3, b642a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   b6420:	f001 fcee 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6424:	4916      	ldr	r1, [pc, #88]	; (b6480 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   b6426:	f002 fa68 	bl	b88fa <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b642a:	2300      	movs	r3, #0
   b642c:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   b642e:	4915      	ldr	r1, [pc, #84]	; (b6484 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   b6430:	4640      	mov	r0, r8
   b6432:	f003 fe8c 	bl	ba14e <strcmp>
   b6436:	b968      	cbnz	r0, b6454 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   b6438:	4913      	ldr	r1, [pc, #76]	; (b6488 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   b643a:	4620      	mov	r0, r4
   b643c:	f003 fee6 	bl	ba20c <strstr>
      result = 1;
   b6440:	ed9f 0a12 	vldr	s0, [pc, #72]	; b648c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b6444:	2800      	cmp	r0, #0
   b6446:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b644a:	bf18      	it	ne
   b644c:	eeb0 0a67 	vmovne.f32	s0, s15
}
   b6450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   b6454:	217c      	movs	r1, #124	; 0x7c
   b6456:	4620      	mov	r0, r4
   b6458:	f003 fe6c 	bl	ba134 <strchr>
  if (pch != NULL) {
   b645c:	b148      	cbz	r0, b6472 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   b645e:	3001      	adds	r0, #1
   b6460:	f003 fe1c 	bl	ba09c <atof>
   b6464:	ec51 0b10 	vmov	r0, r1, d0
   b6468:	f003 fda4 	bl	b9fb4 <__aeabi_d2f>
   b646c:	ee00 0a10 	vmov	s0, r0
   b6470:	e7ee      	b.n	b6450 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   b6472:	ed9f 0a06 	vldr	s0, [pc, #24]	; b648c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b6476:	e7eb      	b.n	b6450 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   b6478:	000bc7cb 	.word	0x000bc7cb
   b647c:	000bc7b7 	.word	0x000bc7b7
   b6480:	000bc7ca 	.word	0x000bc7ca
   b6484:	000bcac2 	.word	0x000bcac2
   b6488:	000bcac7 	.word	0x000bcac7
   b648c:	cda2425f 	.word	0xcda2425f
   b6490:	2003e644 	.word	0x2003e644

000b6494 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b6494:	b570      	push	{r4, r5, r6, lr}
   b6496:	ed2d 8b02 	vpush	{d8}
   b649a:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b649c:	6841      	ldr	r1, [r0, #4]
   b649e:	4822      	ldr	r0, [pc, #136]	; (b6528 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b64a0:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b64a4:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b64a6:	2300      	movs	r3, #0
   b64a8:	f001 f932 	bl	b7710 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b64ac:	4620      	mov	r0, r4
   b64ae:	6861      	ldr	r1, [r4, #4]
   b64b0:	f242 3234 	movw	r2, #9012	; 0x2334
   b64b4:	f7ff fea8 	bl	b6208 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b64b8:	481b      	ldr	r0, [pc, #108]	; (b6528 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b64ba:	f001 f9a7 	bl	b780c <_ZN9TCPClient9connectedEv>
   b64be:	b180      	cbz	r0, b64e2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.print(payload);
   b64c0:	4629      	mov	r1, r5
   b64c2:	4819      	ldr	r0, [pc, #100]	; (b6528 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b64c4:	f002 fa06 	bl	b88d4 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   b64c8:	4620      	mov	r0, r4
   b64ca:	f7ff ff5b 	bl	b6384 <_ZN6UbiTCP16waitServerAnswerEv>
   b64ce:	4605      	mov	r5, r0
   b64d0:	b980      	cbnz	r0, b64f4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x60>
    _client_tcp_ubi.stop();
   b64d2:	4815      	ldr	r0, [pc, #84]	; (b6528 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b64d4:	f001 fad2 	bl	b7a7c <_ZN9TCPClient4stopEv>
    return false;
   b64d8:	2500      	movs	r5, #0
}
   b64da:	ecbd 8b02 	vpop	{d8}
   b64de:	4628      	mov	r0, r5
   b64e0:	bd70      	pop	{r4, r5, r6, pc}
    if (_debug) {
   b64e2:	7d23      	ldrb	r3, [r4, #20]
   b64e4:	2b00      	cmp	r3, #0
   b64e6:	d0f4      	beq.n	b64d2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   b64e8:	f001 fc8a 	bl	b7e00 <_Z16_fetch_usbserialv>
   b64ec:	490f      	ldr	r1, [pc, #60]	; (b652c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   b64ee:	f002 fa04 	bl	b88fa <_ZN5Print7printlnEPKc>
   b64f2:	e7ee      	b.n	b64d2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
  char* response = (char*)malloc(sizeof(char) * 100);
   b64f4:	2064      	movs	r0, #100	; 0x64
   b64f6:	f000 ff41 	bl	b737c <malloc>
  float value = parseTCPAnswer("POST", response);
   b64fa:	490d      	ldr	r1, [pc, #52]	; (b6530 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>)
   b64fc:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   b64fe:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   b6500:	4620      	mov	r0, r4
   b6502:	f7ff ff61 	bl	b63c8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   b6506:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   b6508:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   b650c:	f000 ff3e 	bl	b738c <free>
  if (value != ERROR_VALUE) {
   b6510:	eddf 7a08 	vldr	s15, [pc, #32]	; b6534 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>
   b6514:	eeb4 8a67 	vcmp.f32	s16, s15
   b6518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b651c:	d0d9      	beq.n	b64d2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   b651e:	4802      	ldr	r0, [pc, #8]	; (b6528 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6520:	f001 faac 	bl	b7a7c <_ZN9TCPClient4stopEv>
    return true;
   b6524:	e7d9      	b.n	b64da <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
   b6526:	bf00      	nop
   b6528:	2003e644 	.word	0x2003e644
   b652c:	000bcaca 	.word	0x000bcaca
   b6530:	000bcac2 	.word	0x000bcac2
   b6534:	cda2425f 	.word	0xcda2425f

000b6538 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b6538:	b570      	push	{r4, r5, r6, lr}
   b653a:	ed2d 8b02 	vpush	{d8}
   b653e:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6540:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b6542:	460d      	mov	r5, r1
   b6544:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6546:	6841      	ldr	r1, [r0, #4]
   b6548:	481e      	ldr	r0, [pc, #120]	; (b65c4 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b654a:	f242 3234 	movw	r2, #9012	; 0x2334
   b654e:	f001 f8df 	bl	b7710 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6552:	4620      	mov	r0, r4
   b6554:	6861      	ldr	r1, [r4, #4]
   b6556:	f242 3234 	movw	r2, #9012	; 0x2334
   b655a:	f7ff fe55 	bl	b6208 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b655e:	4819      	ldr	r0, [pc, #100]	; (b65c4 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b6560:	f001 f954 	bl	b780c <_ZN9TCPClient9connectedEv>
   b6564:	b328      	cbz	r0, b65b2 <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   b6566:	4620      	mov	r0, r4
   b6568:	4632      	mov	r2, r6
   b656a:	4629      	mov	r1, r5
   b656c:	f7ff fe98 	bl	b62a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6570:	4620      	mov	r0, r4
   b6572:	f7ff ff07 	bl	b6384 <_ZN6UbiTCP16waitServerAnswerEv>
   b6576:	b948      	cbnz	r0, b658c <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   b6578:	4812      	ldr	r0, [pc, #72]	; (b65c4 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   b657a:	ed9f 8a13 	vldr	s16, [pc, #76]	; b65c8 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   b657e:	f001 fa7d 	bl	b7a7c <_ZN9TCPClient4stopEv>
}
   b6582:	eeb0 0a48 	vmov.f32	s0, s16
   b6586:	ecbd 8b02 	vpop	{d8}
   b658a:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b658c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6590:	f000 fef4 	bl	b737c <malloc>
    float value = parseTCPAnswer("LV", response);
   b6594:	490d      	ldr	r1, [pc, #52]	; (b65cc <_ZN6UbiTCP3getEPKcS1_+0x94>)
   b6596:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6598:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   b659a:	4620      	mov	r0, r4
   b659c:	f7ff ff14 	bl	b63c8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   b65a0:	4808      	ldr	r0, [pc, #32]	; (b65c4 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   b65a2:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   b65a6:	f001 fa69 	bl	b7a7c <_ZN9TCPClient4stopEv>
    free(response);
   b65aa:	4628      	mov	r0, r5
   b65ac:	f000 feee 	bl	b738c <free>
    return value;
   b65b0:	e7e7      	b.n	b6582 <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   b65b2:	7d23      	ldrb	r3, [r4, #20]
   b65b4:	2b00      	cmp	r3, #0
   b65b6:	d0df      	beq.n	b6578 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   b65b8:	f001 fc22 	bl	b7e00 <_Z16_fetch_usbserialv>
   b65bc:	4904      	ldr	r1, [pc, #16]	; (b65d0 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   b65be:	f002 f99c 	bl	b88fa <_ZN5Print7printlnEPKc>
   b65c2:	e7d9      	b.n	b6578 <_ZN6UbiTCP3getEPKcS1_+0x40>
   b65c4:	2003e644 	.word	0x2003e644
   b65c8:	cda2425f 	.word	0xcda2425f
   b65cc:	000bcae8 	.word	0x000bcae8
   b65d0:	000bcaeb 	.word	0x000bcaeb

000b65d4 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   b65d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b65d8:	460d      	mov	r5, r1
   b65da:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b65dc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b65e0:	f000 fecc 	bl	b737c <malloc>
  if (_debug) {
   b65e4:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b65e6:	4607      	mov	r7, r0
  if (_debug) {
   b65e8:	b14b      	cbz	r3, b65fe <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   b65ea:	f001 fc09 	bl	b7e00 <_Z16_fetch_usbserialv>
   b65ee:	493a      	ldr	r1, [pc, #232]	; (b66d8 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   b65f0:	f002 f983 	bl	b88fa <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b65f4:	f001 fc04 	bl	b7e00 <_Z16_fetch_usbserialv>
   b65f8:	4938      	ldr	r1, [pc, #224]	; (b66dc <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   b65fa:	f002 f97e 	bl	b88fa <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b65fe:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b66f0 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   b6602:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6604:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b6608:	4648      	mov	r0, r9
   b660a:	f001 f9dd 	bl	b79c8 <_ZN9TCPClient9availableEv>
   b660e:	b188      	cbz	r0, b6634 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   b6610:	4648      	mov	r0, r9
   b6612:	f000 ffe7 	bl	b75e4 <_ZN9TCPClient4readEv>
    if (_debug) {
   b6616:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   b6618:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   b661c:	b12b      	cbz	r3, b662a <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   b661e:	f001 fbef 	bl	b7e00 <_Z16_fetch_usbserialv>
   b6622:	6803      	ldr	r3, [r0, #0]
   b6624:	4641      	mov	r1, r8
   b6626:	689b      	ldr	r3, [r3, #8]
   b6628:	4798      	blx	r3
    response[j] = c;
   b662a:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   b662e:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6630:	4556      	cmp	r6, sl
   b6632:	d1e9      	bne.n	b6608 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   b6634:	7d2b      	ldrb	r3, [r5, #20]
   b6636:	b123      	cbz	r3, b6642 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   b6638:	f001 fbe2 	bl	b7e00 <_Z16_fetch_usbserialv>
   b663c:	4928      	ldr	r1, [pc, #160]	; (b66e0 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   b663e:	f002 f95c 	bl	b88fa <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b6642:	2500      	movs	r5, #0
	  : _Node_allocator()
   b6644:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   b6646:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   b664a:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   b664e:	4925      	ldr	r1, [pc, #148]	; (b66e4 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   b6650:	7125      	strb	r5, [r4, #4]
   b6652:	4638      	mov	r0, r7
  response[j] = '\0';
   b6654:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   b6656:	f004 fc1d 	bl	bae94 <strtok>
    if (strcmp(token, "OK") == 0) {
   b665a:	f8df 9098 	ldr.w	r9, [pc, #152]	; b66f4 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   b665e:	f8df a098 	ldr.w	sl, [pc, #152]	; b66f8 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   b6662:	f8df 8080 	ldr.w	r8, [pc, #128]	; b66e4 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   b6666:	4606      	mov	r6, r0
  while (token != NULL) {
   b6668:	b37e      	cbz	r6, b66ca <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   b666a:	4649      	mov	r1, r9
   b666c:	4630      	mov	r0, r6
   b666e:	f003 fd6e 	bl	ba14e <strcmp>
   b6672:	bb00      	cbnz	r0, b66b6 <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   b6674:	4641      	mov	r1, r8
   b6676:	f004 fc0d 	bl	bae94 <strtok>
      if (strcmp(token, "null") == 0) {
   b667a:	491b      	ldr	r1, [pc, #108]	; (b66e8 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   b667c:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   b667e:	f003 fd66 	bl	ba14e <strcmp>
   b6682:	b918      	cbnz	r0, b668c <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b6684:	4b19      	ldr	r3, [pc, #100]	; (b66ec <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   b6686:	9500      	str	r5, [sp, #0]
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	e008      	b.n	b669e <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   b668c:	4630      	mov	r0, r6
   b668e:	f003 fd05 	bl	ba09c <atof>
   b6692:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b6696:	9500      	str	r5, [sp, #0]
   b6698:	f003 fc8c 	bl	b9fb4 <__aeabi_d2f>
   b669c:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   b669e:	466a      	mov	r2, sp
   b66a0:	4621      	mov	r1, r4
   b66a2:	a802      	add	r0, sp, #8
   b66a4:	f7ff fd2a 	bl	b60fc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   b66a8:	4641      	mov	r1, r8
   b66aa:	2000      	movs	r0, #0
   b66ac:	f004 fbf2 	bl	bae94 <strtok>
    mapKey++;
   b66b0:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   b66b2:	4606      	mov	r6, r0
  while (token != NULL) {
   b66b4:	e7d8      	b.n	b6668 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   b66b6:	4651      	mov	r1, sl
   b66b8:	4630      	mov	r0, r6
   b66ba:	f003 fd48 	bl	ba14e <strcmp>
   b66be:	2800      	cmp	r0, #0
   b66c0:	d1f2      	bne.n	b66a8 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   b66c2:	4641      	mov	r1, r8
   b66c4:	f004 fbe6 	bl	bae94 <strtok>
   b66c8:	e7dc      	b.n	b6684 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   b66ca:	4638      	mov	r0, r7
   b66cc:	f000 fe5e 	bl	b738c <free>
}
   b66d0:	4620      	mov	r0, r4
   b66d2:	b004      	add	sp, #16
   b66d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b66d8:	000bc7cb 	.word	0x000bc7cb
   b66dc:	000bc7b7 	.word	0x000bc7b7
   b66e0:	000bc7ca 	.word	0x000bc7ca
   b66e4:	000bcaa5 	.word	0x000bcaa5
   b66e8:	000bcb11 	.word	0x000bcb11
   b66ec:	cda2425f 	.word	0xcda2425f
   b66f0:	2003e644 	.word	0x2003e644
   b66f4:	000bcac7 	.word	0x000bcac7
   b66f8:	000bcb16 	.word	0x000bcb16

000b66fc <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b66fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   b6700:	1d07      	adds	r7, r0, #4
   b6702:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   b6704:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b6706:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   b670a:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   b670e:	7103      	strb	r3, [r0, #4]
   b6710:	460d      	mov	r5, r1
   b6712:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6714:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b6716:	4604      	mov	r4, r0
   b6718:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b671a:	482d      	ldr	r0, [pc, #180]	; (b67d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b671c:	f242 3234 	movw	r2, #9012	; 0x2334
   b6720:	f000 fff6 	bl	b7710 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6724:	4628      	mov	r0, r5
   b6726:	6869      	ldr	r1, [r5, #4]
   b6728:	f242 3234 	movw	r2, #9012	; 0x2334
   b672c:	f7ff fd6c 	bl	b6208 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b6730:	4827      	ldr	r0, [pc, #156]	; (b67d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6732:	f001 f86b 	bl	b780c <_ZN9TCPClient9connectedEv>
   b6736:	b310      	cbz	r0, b677e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   b6738:	4631      	mov	r1, r6
   b673a:	4642      	mov	r2, r8
   b673c:	4628      	mov	r0, r5
   b673e:	f7ff fdaf 	bl	b62a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6742:	4628      	mov	r0, r5
   b6744:	f7ff fe1e 	bl	b6384 <_ZN6UbiTCP16waitServerAnswerEv>
   b6748:	4606      	mov	r6, r0
   b674a:	b9c0      	cbnz	r0, b677e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   b674c:	4820      	ldr	r0, [pc, #128]	; (b67d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   b674e:	4f21      	ldr	r7, [pc, #132]	; (b67d4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   b6750:	f001 f994 	bl	b7a7c <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   b6754:	4920      	ldr	r1, [pc, #128]	; (b67d8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   b6756:	4640      	mov	r0, r8
   b6758:	f004 fb9c 	bl	bae94 <strtok>
      int mapKey = 0;
   b675c:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   b675e:	4e1e      	ldr	r6, [pc, #120]	; (b67d8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
      while (token != NULL) {
   b6760:	2800      	cmp	r0, #0
   b6762:	d030      	beq.n	b67c6 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xca>
   b6764:	4621      	mov	r1, r4
   b6766:	a802      	add	r0, sp, #8
   b6768:	466a      	mov	r2, sp
   b676a:	9500      	str	r5, [sp, #0]
   b676c:	9701      	str	r7, [sp, #4]
   b676e:	f7ff fcc5 	bl	b60fc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   b6772:	4631      	mov	r1, r6
   b6774:	2000      	movs	r0, #0
        mapKey++;
   b6776:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   b6778:	f004 fb8c 	bl	bae94 <strtok>
      while (token != NULL) {
   b677c:	e7f0      	b.n	b6760 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   b677e:	4629      	mov	r1, r5
   b6780:	a802      	add	r0, sp, #8
   b6782:	f7ff ff27 	bl	b65d4 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   b6786:	68a0      	ldr	r0, [r4, #8]
   b6788:	f7ff fd20 	bl	b61cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      if (__x._M_root() != nullptr)
   b678c:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   b678e:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b6790:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   b6794:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   b6798:	b17a      	cbz	r2, b67ba <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xbe>
      _M_header._M_color = __from._M_header._M_color;
   b679a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b679e:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   b67a0:	9905      	ldr	r1, [sp, #20]
   b67a2:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   b67a4:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   b67a6:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   b67a8:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   b67aa:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   b67ac:	9a07      	ldr	r2, [sp, #28]
   b67ae:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   b67b0:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   b67b2:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   b67b6:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   b67b8:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   b67ba:	9804      	ldr	r0, [sp, #16]
   b67bc:	f7ff fd06 	bl	b61cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
  _client_tcp_ubi.stop();
   b67c0:	4803      	ldr	r0, [pc, #12]	; (b67d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b67c2:	f001 f95b 	bl	b7a7c <_ZN9TCPClient4stopEv>
}
   b67c6:	4620      	mov	r0, r4
   b67c8:	b008      	add	sp, #32
   b67ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b67ce:	bf00      	nop
   b67d0:	2003e644 	.word	0x2003e644
   b67d4:	cda2425f 	.word	0xcda2425f
   b67d8:	000bca42 	.word	0x000bca42

000b67dc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   b67dc:	4801      	ldr	r0, [pc, #4]	; (b67e4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   b67de:	f001 b99d 	b.w	b7b1c <_ZN9TCPClientC1Ev>
   b67e2:	bf00      	nop
   b67e4:	2003e644 	.word	0x2003e644

000b67e8 <_ZN9IPAddressC1ERKS_>:
   b67e8:	b570      	push	{r4, r5, r6, lr}
   b67ea:	4604      	mov	r4, r0
   b67ec:	4b05      	ldr	r3, [pc, #20]	; (b6804 <_ZN9IPAddressC1ERKS_+0x1c>)
   b67ee:	f844 3b04 	str.w	r3, [r4], #4
   b67f2:	1d0d      	adds	r5, r1, #4
   b67f4:	4606      	mov	r6, r0
   b67f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67fa:	682b      	ldr	r3, [r5, #0]
   b67fc:	7023      	strb	r3, [r4, #0]
   b67fe:	4630      	mov	r0, r6
   b6800:	bd70      	pop	{r4, r5, r6, pc}
   b6802:	bf00      	nop
   b6804:	000bcccc 	.word	0x000bcccc

000b6808 <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   b6808:	b538      	push	{r3, r4, r5, lr}
   b680a:	4604      	mov	r4, r0
   b680c:	3098      	adds	r0, #152	; 0x98
   b680e:	460d      	mov	r5, r1
   b6810:	f001 fb56 	bl	b7ec0 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   b6814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6818:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   b681c:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   b681e:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   b6820:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   b6824:	4620      	mov	r0, r4
   b6826:	bd38      	pop	{r3, r4, r5, pc}

000b6828 <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   b6828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b682c:	4605      	mov	r5, r0
   b682e:	460e      	mov	r6, r1
   b6830:	f000 fc24 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b6834:	f643 2897 	movw	r8, #14999	; 0x3a97
   b6838:	4607      	mov	r7, r0
   while(!_client->available()) {
   b683a:	6828      	ldr	r0, [r5, #0]
   b683c:	6803      	ldr	r3, [r0, #0]
   b683e:	691b      	ldr	r3, [r3, #16]
   b6840:	4798      	blx	r3
   b6842:	4604      	mov	r4, r0
   b6844:	b930      	cbnz	r0, b6854 <_ZN12PubSubClient8readByteEPh+0x2c>
   b6846:	f000 fc19 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b684a:	1bc3      	subs	r3, r0, r7
   b684c:	4543      	cmp	r3, r8
   b684e:	d9f4      	bls.n	b683a <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   b6850:	4620      	mov	r0, r4
   b6852:	e005      	b.n	b6860 <_ZN12PubSubClient8readByteEPh+0x38>
   b6854:	6828      	ldr	r0, [r5, #0]
   *result = _client->read();
   b6856:	6803      	ldr	r3, [r0, #0]
   b6858:	695b      	ldr	r3, [r3, #20]
   b685a:	4798      	blx	r3
   b685c:	7030      	strb	r0, [r6, #0]
   b685e:	2001      	movs	r0, #1
}
   b6860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6864 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b6864:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   b6866:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   b6868:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b686a:	4614      	mov	r4, r2
  if(readByte(write_address)){
   b686c:	f7ff ffdc 	bl	b6828 <_ZN12PubSubClient8readByteEPh>
   b6870:	b108      	cbz	r0, b6876 <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   b6872:	3501      	adds	r5, #1
   b6874:	8025      	strh	r5, [r4, #0]
}
   b6876:	bd38      	pop	{r3, r4, r5, pc}

000b6878 <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b6878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   b687c:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b687e:	4688      	mov	r8, r1
    uint16_t len = 0;
   b6880:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   b6882:	f10d 0206 	add.w	r2, sp, #6
   b6886:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b6888:	4604      	mov	r4, r0
    uint16_t len = 0;
   b688a:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   b688e:	f7ff ffe9 	bl	b6864 <_ZN12PubSubClient8readByteEPhPt>
   b6892:	b918      	cbnz	r0, b689c <_ZN12PubSubClient10readPacketEPh+0x24>
   b6894:	2000      	movs	r0, #0
}
   b6896:	b003      	add	sp, #12
   b6898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b689c:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   b68a0:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   b68a4:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   b68a6:	f10d 0105 	add.w	r1, sp, #5
   b68aa:	4620      	mov	r0, r4
   b68ac:	f7ff ffbc 	bl	b6828 <_ZN12PubSubClient8readByteEPh>
   b68b0:	2800      	cmp	r0, #0
   b68b2:	d0ef      	beq.n	b6894 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   b68b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b68b8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b68bc:	1c53      	adds	r3, r2, #1
   b68be:	4422      	add	r2, r4
   b68c0:	b29b      	uxth	r3, r3
   b68c2:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   b68c4:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   b68c8:	fb12 f206 	smulbb	r2, r2, r6
   b68cc:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   b68ce:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   b68d0:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   b68d4:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b68d6:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   b68da:	d4e4      	bmi.n	b68a6 <_ZN12PubSubClient10readPacketEPh+0x2e>
   b68dc:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   b68e0:	3b01      	subs	r3, #1
    if (isPublish) {
   b68e2:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   b68e6:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b68ea:	d11e      	bne.n	b692a <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   b68ec:	f10d 0206 	add.w	r2, sp, #6
   b68f0:	4629      	mov	r1, r5
   b68f2:	4620      	mov	r0, r4
   b68f4:	f7ff ffb6 	bl	b6864 <_ZN12PubSubClient8readByteEPhPt>
   b68f8:	2800      	cmp	r0, #0
   b68fa:	d0cb      	beq.n	b6894 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   b68fc:	f10d 0206 	add.w	r2, sp, #6
   b6900:	4629      	mov	r1, r5
   b6902:	4620      	mov	r0, r4
   b6904:	f7ff ffae 	bl	b6864 <_ZN12PubSubClient8readByteEPhPt>
   b6908:	2800      	cmp	r0, #0
   b690a:	d0c3      	beq.n	b6894 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b690c:	f898 3000 	ldrb.w	r3, [r8]
   b6910:	4423      	add	r3, r4
   b6912:	795a      	ldrb	r2, [r3, #5]
   b6914:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   b6916:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b6918:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   b691c:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b691e:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   b6920:	d501      	bpl.n	b6926 <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   b6922:	3602      	adds	r6, #2
   b6924:	b2b6      	uxth	r6, r6
        start = 2;
   b6926:	2502      	movs	r5, #2
   b6928:	e001      	b.n	b692e <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   b692a:	2500      	movs	r5, #0
    uint16_t skip = 0;
   b692c:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   b692e:	b2ad      	uxth	r5, r5
   b6930:	42bd      	cmp	r5, r7
   b6932:	d226      	bcs.n	b6982 <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   b6934:	f10d 0105 	add.w	r1, sp, #5
   b6938:	4620      	mov	r0, r4
   b693a:	f7ff ff75 	bl	b6828 <_ZN12PubSubClient8readByteEPh>
   b693e:	2800      	cmp	r0, #0
   b6940:	d0a8      	beq.n	b6894 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   b6942:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b6946:	b178      	cbz	r0, b6968 <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   b6948:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   b694c:	d10c      	bne.n	b6968 <_ZN12PubSubClient10readPacketEPh+0xf0>
   b694e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b6952:	f898 2000 	ldrb.w	r2, [r8]
   b6956:	1a9b      	subs	r3, r3, r2
   b6958:	3b02      	subs	r3, #2
   b695a:	42b3      	cmp	r3, r6
   b695c:	dd04      	ble.n	b6968 <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   b695e:	6803      	ldr	r3, [r0, #0]
   b6960:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b6964:	689b      	ldr	r3, [r3, #8]
   b6966:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   b6968:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b696c:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   b696e:	bf9e      	ittt	ls
   b6970:	18e2      	addls	r2, r4, r3
   b6972:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   b6976:	7111      	strbls	r1, [r2, #4]
        len++;
   b6978:	3301      	adds	r3, #1
   b697a:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   b697e:	3501      	adds	r5, #1
   b6980:	e7d5      	b.n	b692e <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   b6982:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b6986:	b92b      	cbnz	r3, b6994 <_ZN12PubSubClient10readPacketEPh+0x11c>
   b6988:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b698c:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   b698e:	bf88      	it	hi
   b6990:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   b6994:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b6998:	e77d      	b.n	b6896 <_ZN12PubSubClient10readPacketEPh+0x1e>

000b699a <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b699a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b699e:	4615      	mov	r5, r2
   b69a0:	461e      	mov	r6, r3
    uint16_t len = length;
   b69a2:	461a      	mov	r2, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b69a4:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b69a6:	2300      	movs	r3, #0
        digit = len % 128;
   b69a8:	4696      	mov	lr, r2
        lenBuf[pos++] = digit;
   b69aa:	a802      	add	r0, sp, #8
        digit = len % 128;
   b69ac:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b69b0:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b69b4:	f103 0401 	add.w	r4, r3, #1
   b69b8:	4403      	add	r3, r0
            digit |= 0x80;
   b69ba:	bf88      	it	hi
   b69bc:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
    } while(len>0);
   b69c0:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b69c4:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b69c8:	b2e4      	uxtb	r4, r4
   b69ca:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len>0);
   b69ce:	d820      	bhi.n	b6a12 <_ZN12PubSubClient5writeEhPht+0x78>
    buf[4-llen] = header;
   b69d0:	f1c4 0304 	rsb	r3, r4, #4
        buf[5-llen+i] = lenBuf[i];
   b69d4:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b69d8:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b69da:	4622      	mov	r2, r4
   b69dc:	a901      	add	r1, sp, #4
   b69de:	4428      	add	r0, r5
    buf[4-llen] = header;
   b69e0:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b69e4:	f003 fb61 	bl	ba0aa <memcpy>
    rc = _client->write(buf+(4-llen),length+1+llen);
   b69e8:	6838      	ldr	r0, [r7, #0]
   b69ea:	6803      	ldr	r3, [r0, #0]
   b69ec:	1c72      	adds	r2, r6, #1
   b69ee:	4422      	add	r2, r4
   b69f0:	68db      	ldr	r3, [r3, #12]
   b69f2:	4641      	mov	r1, r8
   b69f4:	4798      	blx	r3
   b69f6:	4605      	mov	r5, r0
   b69f8:	f000 fb40 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   b69fc:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b69fe:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   b6a02:	4432      	add	r2, r6
   b6a04:	b2a8      	uxth	r0, r5
}
   b6a06:	1a13      	subs	r3, r2, r0
   b6a08:	4258      	negs	r0, r3
   b6a0a:	4158      	adcs	r0, r3
   b6a0c:	b002      	add	sp, #8
   b6a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6a12:	4623      	mov	r3, r4
   b6a14:	e7c8      	b.n	b69a8 <_ZN12PubSubClient5writeEhPht+0xe>

000b6a16 <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   b6a16:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b6a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    while (*idp) {
   b6a1a:	3901      	subs	r1, #1
    pos += 2;
   b6a1c:	b29c      	uxth	r4, r3
   b6a1e:	2300      	movs	r3, #0
    while (*idp) {
   b6a20:	1c5e      	adds	r6, r3, #1
   b6a22:	fa14 f083 	uxtah	r0, r4, r3
   b6a26:	5d8f      	ldrb	r7, [r1, r6]
   b6a28:	b29d      	uxth	r5, r3
   b6a2a:	b280      	uxth	r0, r0
   b6a2c:	b117      	cbz	r7, b6a34 <_ZN12PubSubClient11writeStringEPKcPht+0x1e>
        buf[pos++] = *idp++;
   b6a2e:	5417      	strb	r7, [r2, r0]
    while (*idp) {
   b6a30:	4633      	mov	r3, r6
   b6a32:	e7f5      	b.n	b6a20 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   b6a34:	b299      	uxth	r1, r3
   b6a36:	1a41      	subs	r1, r0, r1
   b6a38:	440a      	add	r2, r1
   b6a3a:	0a29      	lsrs	r1, r5, #8
   b6a3c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b6a40:	f802 3c01 	strb.w	r3, [r2, #-1]
}
   b6a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a46 <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   b6a46:	b538      	push	{r3, r4, r5, lr}
   b6a48:	4604      	mov	r4, r0
    if (_client == NULL ) {
   b6a4a:	6800      	ldr	r0, [r0, #0]
   b6a4c:	b908      	cbnz	r0, b6a52 <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   b6a4e:	2000      	movs	r0, #0
}
   b6a50:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   b6a52:	6803      	ldr	r3, [r0, #0]
   b6a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a56:	4798      	blx	r3
        if (!rc) {
   b6a58:	b980      	cbnz	r0, b6a7c <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   b6a5a:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   b6a5e:	2d00      	cmp	r5, #0
   b6a60:	d1f5      	bne.n	b6a4e <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   b6a62:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   b6a64:	f06f 0302 	mvn.w	r3, #2
   b6a68:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   b6a6c:	6803      	ldr	r3, [r0, #0]
   b6a6e:	69db      	ldr	r3, [r3, #28]
   b6a70:	4798      	blx	r3
                _client->stop();
   b6a72:	6820      	ldr	r0, [r4, #0]
   b6a74:	6803      	ldr	r3, [r0, #0]
   b6a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a78:	4798      	blx	r3
   b6a7a:	e7e8      	b.n	b6a4e <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   b6a7c:	2001      	movs	r0, #1
   b6a7e:	e7e7      	b.n	b6a50 <_ZN12PubSubClient9connectedEv+0xa>

000b6a80 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   b6a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a84:	b08b      	sub	sp, #44	; 0x2c
   b6a86:	4604      	mov	r4, r0
   b6a88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   b6a8c:	4689      	mov	r9, r1
   b6a8e:	4617      	mov	r7, r2
   b6a90:	461e      	mov	r6, r3
    if (!connected()) {
   b6a92:	f7ff ffd8 	bl	b6a46 <_ZN12PubSubClient9connectedEv>
   b6a96:	4605      	mov	r5, r0
   b6a98:	2800      	cmp	r0, #0
   b6a9a:	f040 80a5 	bne.w	b6be8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->domain, this->port);
   b6a9e:	f8d4 a000 	ldr.w	sl, [r4]
        if (domain != NULL) {
   b6aa2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
            result = _client->connect(this->domain, this->port);
   b6aa6:	f8da 3000 	ldr.w	r3, [sl]
        if (domain != NULL) {
   b6aaa:	2900      	cmp	r1, #0
   b6aac:	d079      	beq.n	b6ba2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x122>
            result = _client->connect(this->domain, this->port);
   b6aae:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b6ab2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b6ab6:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   b6ab8:	4650      	mov	r0, sl
   b6aba:	47d8      	blx	fp
        if (result == 1) {
   b6abc:	2801      	cmp	r0, #1
   b6abe:	f040 809a 	bne.w	b6bf6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x176>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6ac2:	4b4f      	ldr	r3, [pc, #316]	; (b6c00 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x180>)
            nextMsgId = 1;
   b6ac4:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6ac8:	889a      	ldrh	r2, [r3, #4]
   b6aca:	f8ad 2014 	strh.w	r2, [sp, #20]
   b6ace:	6818      	ldr	r0, [r3, #0]
                buffer[length++] = d[j];
   b6ad0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6ad4:	799b      	ldrb	r3, [r3, #6]
   b6ad6:	9004      	str	r0, [sp, #16]
   b6ad8:	f88d 3016 	strb.w	r3, [sp, #22]
                buffer[length++] = d[j];
   b6adc:	f8c4 0009 	str.w	r0, [r4, #9]
   b6ae0:	f8a4 200d 	strh.w	r2, [r4, #13]
   b6ae4:	73e3      	strb	r3, [r4, #15]
            if (willTopic) {
   b6ae6:	f1b8 0f00 	cmp.w	r8, #0
   b6aea:	d066      	beq.n	b6bba <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13a>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6aec:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b6af0:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b6af4:	015b      	lsls	r3, r3, #5
   b6af6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   b6afa:	f043 0306 	orr.w	r3, r3, #6
   b6afe:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   b6b00:	b11f      	cbz	r7, b6b0a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
                if(pass != NULL) {
   b6b02:	2e00      	cmp	r6, #0
   b6b04:	d15b      	bne.n	b6bbe <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13e>
                v = v|0x80;
   b6b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   b6b0a:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   b6b0c:	2300      	movs	r3, #0
   b6b0e:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b6b10:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   b6b12:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b6b14:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   b6b16:	4649      	mov	r1, r9
   b6b18:	4620      	mov	r0, r4
   b6b1a:	9201      	str	r2, [sp, #4]
   b6b1c:	f7ff ff7b 	bl	b6a16 <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   b6b20:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   b6b22:	4603      	mov	r3, r0
            if (willTopic) {
   b6b24:	f1b8 0f00 	cmp.w	r8, #0
   b6b28:	d00b      	beq.n	b6b42 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xc2>
                length = writeString(willTopic,buffer,length);
   b6b2a:	4641      	mov	r1, r8
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	f7ff ff72 	bl	b6a16 <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   b6b32:	9a01      	ldr	r2, [sp, #4]
   b6b34:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   b6b36:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   b6b38:	4620      	mov	r0, r4
   b6b3a:	f7ff ff6c 	bl	b6a16 <_ZN12PubSubClient11writeStringEPKcPht>
   b6b3e:	9a01      	ldr	r2, [sp, #4]
   b6b40:	4603      	mov	r3, r0
            if(user != NULL) {
   b6b42:	b16f      	cbz	r7, b6b60 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                length = writeString(user,buffer,length);
   b6b44:	4639      	mov	r1, r7
   b6b46:	4620      	mov	r0, r4
   b6b48:	9201      	str	r2, [sp, #4]
   b6b4a:	f7ff ff64 	bl	b6a16 <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   b6b4e:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   b6b50:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6b52:	b12e      	cbz	r6, b6b60 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                    length = writeString(pass,buffer,length);
   b6b54:	4631      	mov	r1, r6
   b6b56:	4620      	mov	r0, r4
   b6b58:	f7ff ff5d 	bl	b6a16 <_ZN12PubSubClient11writeStringEPKcPht>
   b6b5c:	9a01      	ldr	r2, [sp, #4]
   b6b5e:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   b6b60:	3b05      	subs	r3, #5
   b6b62:	b29b      	uxth	r3, r3
   b6b64:	2110      	movs	r1, #16
   b6b66:	4620      	mov	r0, r4
   b6b68:	f7ff ff17 	bl	b699a <_ZN12PubSubClient5writeEhPht>
   b6b6c:	f000 fa86 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6b70:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b6b74:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   b6b78:	6820      	ldr	r0, [r4, #0]
   b6b7a:	6803      	ldr	r3, [r0, #0]
   b6b7c:	691b      	ldr	r3, [r3, #16]
   b6b7e:	4798      	blx	r3
   b6b80:	bb00      	cbnz	r0, b6bc4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x144>
   b6b82:	f000 fa7b 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b6b86:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b6b8a:	1ac0      	subs	r0, r0, r3
   b6b8c:	42b0      	cmp	r0, r6
   b6b8e:	d9f3      	bls.n	b6b78 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xf8>
                    _state = MQTT_CONNECTION_TIMEOUT;
   b6b90:	f06f 0303 	mvn.w	r3, #3
   b6b94:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   b6b98:	6820      	ldr	r0, [r4, #0]
   b6b9a:	6803      	ldr	r3, [r0, #0]
   b6b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b9e:	4798      	blx	r3
   b6ba0:	e022      	b.n	b6be8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->ip, this->port);
   b6ba2:	f104 0198 	add.w	r1, r4, #152	; 0x98
   b6ba6:	a804      	add	r0, sp, #16
   b6ba8:	f8d3 b020 	ldr.w	fp, [r3, #32]
   b6bac:	f7ff fe1c 	bl	b67e8 <_ZN9IPAddressC1ERKS_>
   b6bb0:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b6bb4:	462b      	mov	r3, r5
   b6bb6:	a904      	add	r1, sp, #16
   b6bb8:	e77e      	b.n	b6ab8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   b6bba:	2302      	movs	r3, #2
   b6bbc:	e7a0      	b.n	b6b00 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x80>
                    v = v|(0x80>>1);
   b6bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   b6bc2:	e7a2      	b.n	b6b0a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
            uint16_t len = readPacket(&llen);
   b6bc4:	f10d 010f 	add.w	r1, sp, #15
   b6bc8:	4620      	mov	r0, r4
   b6bca:	f7ff fe55 	bl	b6878 <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   b6bce:	2804      	cmp	r0, #4
   b6bd0:	d1e2      	bne.n	b6b98 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
                if (buffer[3] == 0) {
   b6bd2:	79e6      	ldrb	r6, [r4, #7]
   b6bd4:	b966      	cbnz	r6, b6bf0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   b6bd6:	f000 fa51 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6bda:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6bdc:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   b6be0:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   b6be4:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   b6be8:	4628      	mov	r0, r5
   b6bea:	b00b      	add	sp, #44	; 0x2c
   b6bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   b6bf0:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   b6bf4:	e7d0      	b.n	b6b98 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
            _state = MQTT_CONNECT_FAILED;
   b6bf6:	f06f 0301 	mvn.w	r3, #1
   b6bfa:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   b6bfe:	e7f3      	b.n	b6be8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
   b6c00:	000bcb34 	.word	0x000bcb34

000b6c04 <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   b6c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   b6c06:	2400      	movs	r4, #0
   b6c08:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b6c0c:	e9cd 4400 	strd	r4, r4, [sp]
   b6c10:	f7ff ff36 	bl	b6a80 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   b6c14:	b004      	add	sp, #16
   b6c16:	bd10      	pop	{r4, pc}

000b6c18 <_ZN12PubSubClient4loopEv>:
boolean PubSubClient::loop() {
   b6c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c1c:	b085      	sub	sp, #20
   b6c1e:	af00      	add	r7, sp, #0
   b6c20:	4604      	mov	r4, r0
    if (connected()) {
   b6c22:	f7ff ff10 	bl	b6a46 <_ZN12PubSubClient9connectedEv>
   b6c26:	4681      	mov	r9, r0
   b6c28:	b1d8      	cbz	r0, b6c62 <_ZN12PubSubClient4loopEv+0x4a>
   b6c2a:	f000 fa27 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   b6c2e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b6c32:	f643 2298 	movw	r2, #15000	; 0x3a98
   b6c36:	1ac3      	subs	r3, r0, r3
   b6c38:	4293      	cmp	r3, r2
   b6c3a:	4680      	mov	r8, r0
   b6c3c:	d804      	bhi.n	b6c48 <_ZN12PubSubClient4loopEv+0x30>
   b6c3e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   b6c42:	1ac3      	subs	r3, r0, r3
   b6c44:	4293      	cmp	r3, r2
   b6c46:	d91e      	bls.n	b6c86 <_ZN12PubSubClient4loopEv+0x6e>
            if (pingOutstanding) {
   b6c48:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
                _client->stop();
   b6c4c:	6820      	ldr	r0, [r4, #0]
            if (pingOutstanding) {
   b6c4e:	b16b      	cbz	r3, b6c6c <_ZN12PubSubClient4loopEv+0x54>
                this->_state = MQTT_CONNECTION_TIMEOUT;
   b6c50:	f06f 0303 	mvn.w	r3, #3
   b6c54:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->stop();
   b6c58:	6803      	ldr	r3, [r0, #0]
   b6c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c5c:	4798      	blx	r3
                return false;
   b6c5e:	f04f 0900 	mov.w	r9, #0
}
   b6c62:	4648      	mov	r0, r9
   b6c64:	3714      	adds	r7, #20
   b6c66:	46bd      	mov	sp, r7
   b6c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6c6c:	4621      	mov	r1, r4
   b6c6e:	23c0      	movs	r3, #192	; 0xc0
   b6c70:	f821 3f04 	strh.w	r3, [r1, #4]!
                _client->write(buffer,2);
   b6c74:	6803      	ldr	r3, [r0, #0]
   b6c76:	2202      	movs	r2, #2
   b6c78:	68db      	ldr	r3, [r3, #12]
   b6c7a:	4798      	blx	r3
                lastInActivity = t;
   b6c7c:	e9c4 8822 	strd	r8, r8, [r4, #136]	; 0x88
                pingOutstanding = true;
   b6c80:	2301      	movs	r3, #1
   b6c82:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        if (_client->available()) {
   b6c86:	6820      	ldr	r0, [r4, #0]
   b6c88:	6803      	ldr	r3, [r0, #0]
   b6c8a:	691b      	ldr	r3, [r3, #16]
   b6c8c:	4798      	blx	r3
   b6c8e:	2800      	cmp	r0, #0
   b6c90:	d0e7      	beq.n	b6c62 <_ZN12PubSubClient4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
   b6c92:	f107 010f 	add.w	r1, r7, #15
   b6c96:	4620      	mov	r0, r4
   b6c98:	f7ff fdee 	bl	b6878 <_ZN12PubSubClient10readPacketEPh>
            if (len > 0) {
   b6c9c:	4605      	mov	r5, r0
   b6c9e:	2800      	cmp	r0, #0
   b6ca0:	d0df      	beq.n	b6c62 <_ZN12PubSubClient4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
   b6ca2:	7923      	ldrb	r3, [r4, #4]
   b6ca4:	607b      	str	r3, [r7, #4]
   b6ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6caa:	2b30      	cmp	r3, #48	; 0x30
                lastInActivity = t;
   b6cac:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                if (type == MQTTPUBLISH) {
   b6cb0:	d14d      	bne.n	b6d4e <_ZN12PubSubClient4loopEv+0x136>
                    if (callback) {
   b6cb2:	f8d4 a094 	ldr.w	sl, [r4, #148]	; 0x94
   b6cb6:	f1ba 0f00 	cmp.w	sl, #0
   b6cba:	d0d2      	beq.n	b6c62 <_ZN12PubSubClient4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b6cbc:	7bfe      	ldrb	r6, [r7, #15]
   b6cbe:	19a3      	adds	r3, r4, r6
                        }
   b6cc0:	46eb      	mov	fp, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b6cc2:	7959      	ldrb	r1, [r3, #5]
   b6cc4:	799a      	ldrb	r2, [r3, #6]
   b6cc6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   b6cca:	b292      	uxth	r2, r2
                        char topic[tl+1];
   b6ccc:	f102 0308 	add.w	r3, r2, #8
   b6cd0:	08db      	lsrs	r3, r3, #3
   b6cd2:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
   b6cd6:	469d      	mov	sp, r3
                            topic[i] = buffer[llen+3+i];
   b6cd8:	1df1      	adds	r1, r6, #7
   b6cda:	4421      	add	r1, r4
   b6cdc:	4668      	mov	r0, sp
   b6cde:	603a      	str	r2, [r7, #0]
   b6ce0:	f003 f9e3 	bl	ba0aa <memcpy>
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6ce4:	6879      	ldr	r1, [r7, #4]
                        topic[tl] = 0;
   b6ce6:	683a      	ldr	r2, [r7, #0]
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6ce8:	f001 0106 	and.w	r1, r1, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6cec:	1ba8      	subs	r0, r5, r6
                        topic[tl] = 0;
   b6cee:	2300      	movs	r3, #0
                            callback(topic,payload,len-llen-3-tl-2);
   b6cf0:	3803      	subs	r0, #3
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6cf2:	2902      	cmp	r1, #2
   b6cf4:	f106 0103 	add.w	r1, r6, #3
                        topic[tl] = 0;
   b6cf8:	f80d 3002 	strb.w	r3, [sp, r2]
                            callback(topic,payload,len-llen-3-tl-2);
   b6cfc:	eba0 0002 	sub.w	r0, r0, r2
                _client->write(buffer,2);
   b6d00:	f104 0304 	add.w	r3, r4, #4
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6d04:	4411      	add	r1, r2
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6d06:	d11d      	bne.n	b6d44 <_ZN12PubSubClient4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6d08:	4421      	add	r1, r4
                            callback(topic,payload,len-llen-3-tl-2);
   b6d0a:	607b      	str	r3, [r7, #4]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6d0c:	f891 c004 	ldrb.w	ip, [r1, #4]
   b6d10:	794d      	ldrb	r5, [r1, #5]
                            payload = buffer+llen+3+tl+2;
   b6d12:	1d71      	adds	r1, r6, #5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6d14:	eb05 250c 	add.w	r5, r5, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
   b6d18:	4411      	add	r1, r2
                            callback(topic,payload,len-llen-3-tl-2);
   b6d1a:	4419      	add	r1, r3
   b6d1c:	1e82      	subs	r2, r0, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6d1e:	b2ad      	uxth	r5, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6d20:	4668      	mov	r0, sp
   b6d22:	47d0      	blx	sl
                            buffer[2] = (msgId >> 8);
   b6d24:	ba6d      	rev16	r5, r5
                            _client->write(buffer,4);
   b6d26:	6820      	ldr	r0, [r4, #0]
                            buffer[2] = (msgId >> 8);
   b6d28:	80e5      	strh	r5, [r4, #6]
                            buffer[0] = MQTTPUBACK;
   b6d2a:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6d2e:	80a2      	strh	r2, [r4, #4]
                            _client->write(buffer,4);
   b6d30:	6802      	ldr	r2, [r0, #0]
   b6d32:	687b      	ldr	r3, [r7, #4]
   b6d34:	68d5      	ldr	r5, [r2, #12]
   b6d36:	4619      	mov	r1, r3
   b6d38:	2204      	movs	r2, #4
   b6d3a:	47a8      	blx	r5
                            lastOutActivity = t;
   b6d3c:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
   b6d40:	46dd      	mov	sp, fp
   b6d42:	e78e      	b.n	b6c62 <_ZN12PubSubClient4loopEv+0x4a>
                            callback(topic,payload,len-llen-3-tl);
   b6d44:	4602      	mov	r2, r0
   b6d46:	4419      	add	r1, r3
   b6d48:	4668      	mov	r0, sp
   b6d4a:	47d0      	blx	sl
   b6d4c:	e7f8      	b.n	b6d40 <_ZN12PubSubClient4loopEv+0x128>
                } else if (type == MQTTPINGREQ) {
   b6d4e:	2bc0      	cmp	r3, #192	; 0xc0
   b6d50:	d109      	bne.n	b6d66 <_ZN12PubSubClient4loopEv+0x14e>
                    buffer[0] = MQTTPINGRESP;
   b6d52:	23d0      	movs	r3, #208	; 0xd0
                    _client->write(buffer,2);
   b6d54:	4621      	mov	r1, r4
                    buffer[0] = MQTTPINGRESP;
   b6d56:	80a3      	strh	r3, [r4, #4]
                    _client->write(buffer,2);
   b6d58:	f851 0b04 	ldr.w	r0, [r1], #4
   b6d5c:	6803      	ldr	r3, [r0, #0]
   b6d5e:	2202      	movs	r2, #2
   b6d60:	68db      	ldr	r3, [r3, #12]
   b6d62:	4798      	blx	r3
   b6d64:	e77d      	b.n	b6c62 <_ZN12PubSubClient4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
   b6d66:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
   b6d68:	bf04      	itt	eq
   b6d6a:	2300      	moveq	r3, #0
   b6d6c:	f884 3090 	strbeq.w	r3, [r4, #144]	; 0x90
   b6d70:	e777      	b.n	b6c62 <_ZN12PubSubClient4loopEv+0x4a>

000b6d72 <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   b6d72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6d76:	4604      	mov	r4, r0
   b6d78:	f89d 7020 	ldrb.w	r7, [sp, #32]
   b6d7c:	4688      	mov	r8, r1
   b6d7e:	4616      	mov	r6, r2
   b6d80:	461d      	mov	r5, r3
    if (connected()) {
   b6d82:	f7ff fe60 	bl	b6a46 <_ZN12PubSubClient9connectedEv>
   b6d86:	b338      	cbz	r0, b6dd8 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   b6d88:	4640      	mov	r0, r8
   b6d8a:	f003 fa10 	bl	ba1ae <strlen>
   b6d8e:	1deb      	adds	r3, r5, #7
   b6d90:	4418      	add	r0, r3
   b6d92:	2880      	cmp	r0, #128	; 0x80
   b6d94:	d820      	bhi.n	b6dd8 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   b6d96:	1d22      	adds	r2, r4, #4
   b6d98:	2305      	movs	r3, #5
   b6d9a:	4641      	mov	r1, r8
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	9201      	str	r2, [sp, #4]
   b6da0:	f7ff fe39 	bl	b6a16 <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   b6da4:	9a01      	ldr	r2, [sp, #4]
   b6da6:	2300      	movs	r3, #0
   b6da8:	18c1      	adds	r1, r0, r3
   b6daa:	429d      	cmp	r5, r3
   b6dac:	b289      	uxth	r1, r1
   b6dae:	d907      	bls.n	b6dc0 <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   b6db0:	4421      	add	r1, r4
   b6db2:	f816 c003 	ldrb.w	ip, [r6, r3]
   b6db6:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   b6dba:	3301      	adds	r3, #1
   b6dbc:	b29b      	uxth	r3, r3
   b6dbe:	e7f3      	b.n	b6da8 <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   b6dc0:	1f4b      	subs	r3, r1, #5
            header |= 1;
   b6dc2:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   b6dc4:	b29b      	uxth	r3, r3
   b6dc6:	bf0c      	ite	eq
   b6dc8:	2130      	moveq	r1, #48	; 0x30
   b6dca:	2131      	movne	r1, #49	; 0x31
   b6dcc:	4620      	mov	r0, r4
}
   b6dce:	b002      	add	sp, #8
   b6dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   b6dd4:	f7ff bde1 	b.w	b699a <_ZN12PubSubClient5writeEhPht>
}
   b6dd8:	2000      	movs	r0, #0
   b6dda:	b002      	add	sp, #8
   b6ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6de0 <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b6de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6de2:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b6de4:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b6de6:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b6de8:	9202      	str	r2, [sp, #8]
   b6dea:	f003 f9e0 	bl	ba1ae <strlen>
   b6dee:	4603      	mov	r3, r0
   b6df0:	2000      	movs	r0, #0
   b6df2:	9000      	str	r0, [sp, #0]
   b6df4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b6df8:	4620      	mov	r0, r4
   b6dfa:	f7ff ffba 	bl	b6d72 <_ZN12PubSubClient7publishEPKcPKhjb>
}
   b6dfe:	b004      	add	sp, #16
   b6e00:	bd10      	pop	{r4, pc}

000b6e02 <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   b6e02:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   b6e06:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   b6e0a:	4770      	bx	lr

000b6e0c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <HAL_USB_USART_Init+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	681b      	ldr	r3, [r3, #0]
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	0003024c 	.word	0x0003024c

000b6e1c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <HAL_USB_USART_Begin+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	685b      	ldr	r3, [r3, #4]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	0003024c 	.word	0x0003024c

000b6e2c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <HAL_USB_USART_Available_Data+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	691b      	ldr	r3, [r3, #16]
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	0003024c 	.word	0x0003024c

000b6e3c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	695b      	ldr	r3, [r3, #20]
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	0003024c 	.word	0x0003024c

000b6e4c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <HAL_USB_USART_Receive_Data+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	699b      	ldr	r3, [r3, #24]
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	0003024c 	.word	0x0003024c

000b6e5c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <HAL_USB_USART_Send_Data+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	69db      	ldr	r3, [r3, #28]
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	0003024c 	.word	0x0003024c

000b6e6c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <HAL_USB_USART_Flush_Data+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	6a1b      	ldr	r3, [r3, #32]
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	0003024c 	.word	0x0003024c

000b6e7c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <hal_i2c_write+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	6a1b      	ldr	r3, [r3, #32]
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	00030228 	.word	0x00030228

000b6e8c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <hal_i2c_available+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	00030228 	.word	0x00030228

000b6e9c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <hal_i2c_read+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	00030228 	.word	0x00030228

000b6eac <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <hal_i2c_peek+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	00030228 	.word	0x00030228

000b6ebc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <hal_i2c_flush+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	00030228 	.word	0x00030228

000b6ecc <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <hal_i2c_init+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	00030228 	.word	0x00030228

000b6edc <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <hal_i2c_lock+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	00030228 	.word	0x00030228

000b6eec <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <sock_bind+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	685b      	ldr	r3, [r3, #4]
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	00030238 	.word	0x00030238

000b6efc <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <sock_setsockopt+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	699b      	ldr	r3, [r3, #24]
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	00030238 	.word	0x00030238

000b6f0c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <sock_close+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	69db      	ldr	r3, [r3, #28]
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030238 	.word	0x00030238

000b6f1c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <sock_connect+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	6a1b      	ldr	r3, [r3, #32]
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030238 	.word	0x00030238

000b6f2c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <sock_recv+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030238 	.word	0x00030238

000b6f3c <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <sock_recvfrom+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030238 	.word	0x00030238

000b6f4c <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <sock_send+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030238 	.word	0x00030238

000b6f5c <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <sock_sendto+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030238 	.word	0x00030238

000b6f6c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <sock_socket+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030238 	.word	0x00030238

000b6f7c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <hal_usart_write+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	68db      	ldr	r3, [r3, #12]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	0003023c 	.word	0x0003023c

000b6f8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <hal_usart_available+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	691b      	ldr	r3, [r3, #16]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	0003023c 	.word	0x0003023c

000b6f9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <hal_usart_read+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	695b      	ldr	r3, [r3, #20]
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	0003023c 	.word	0x0003023c

000b6fac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <hal_usart_peek+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	699b      	ldr	r3, [r3, #24]
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	0003023c 	.word	0x0003023c

000b6fbc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <hal_usart_flush+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	69db      	ldr	r3, [r3, #28]
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	0003023c 	.word	0x0003023c

000b6fcc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <hal_usart_available_data_for_write+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	0003023c 	.word	0x0003023c

000b6fdc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <hal_usart_begin_config+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	0003023c 	.word	0x0003023c

000b6fec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <hal_usart_init_ex+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	0003023c 	.word	0x0003023c

000b6ffc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <inet_inet_ntop+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	695b      	ldr	r3, [r3, #20]
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030264 	.word	0x00030264

000b700c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <inet_htonl+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6a1b      	ldr	r3, [r3, #32]
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030264 	.word	0x00030264

000b701c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <inet_ntohs+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030264 	.word	0x00030264

000b702c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <inet_htons+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030264 	.word	0x00030264

000b703c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <os_mutex_recursive_create+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	00030248 	.word	0x00030248

000b704c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <inet_gethostbyname+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	00030274 	.word	0x00030274

000b705c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <HAL_RNG_GetRandomNumber+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	685b      	ldr	r3, [r3, #4]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	00030218 	.word	0x00030218

000b706c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <HAL_Delay_Microseconds+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	68db      	ldr	r3, [r3, #12]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030218 	.word	0x00030218

000b707c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	695b      	ldr	r3, [r3, #20]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030218 	.word	0x00030218

000b708c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <hal_rtc_time_is_valid+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030218 	.word	0x00030218

000b709c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <hal_timer_millis+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030218 	.word	0x00030218

000b70ac <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <hal_rtc_get_time+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030218 	.word	0x00030218

000b70bc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <if_index_to_name+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	695b      	ldr	r3, [r3, #20]
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	0003026c 	.word	0x0003026c

000b70cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <netdb_freeaddrinfo+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	689b      	ldr	r3, [r3, #8]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030268 	.word	0x00030268

000b70dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <netdb_getaddrinfo+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	68db      	ldr	r3, [r3, #12]
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030268 	.word	0x00030268

000b70ec <LED_SetBrightness>:

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <LED_SetBrightness+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	691b      	ldr	r3, [r3, #16]
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	00030260 	.word	0x00030260

000b70fc <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <LED_RGB_IsOverRidden+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	699b      	ldr	r3, [r3, #24]
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	00030260 	.word	0x00030260

000b710c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <LED_On+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	69db      	ldr	r3, [r3, #28]
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	00030260 	.word	0x00030260

000b711c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <panic_+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	00030260 	.word	0x00030260

000b712c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <log_message+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	00030260 	.word	0x00030260

000b713c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b03      	ldr	r3, [pc, #12]	; (b714c <diag_get_source+0x10>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7146:	9301      	str	r3, [sp, #4]
   b7148:	bd08      	pop	{r3, pc}
   b714a:	0000      	.short	0x0000
   b714c:	00030260 	.word	0x00030260

000b7150 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7150:	b508      	push	{r3, lr}
   b7152:	4b02      	ldr	r3, [pc, #8]	; (b715c <spark_process+0xc>)
   b7154:	681b      	ldr	r3, [r3, #0]
   b7156:	689b      	ldr	r3, [r3, #8]
   b7158:	9301      	str	r3, [sp, #4]
   b715a:	bd08      	pop	{r3, pc}
   b715c:	00030244 	.word	0x00030244

000b7160 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b7160:	b508      	push	{r3, lr}
   b7162:	4b02      	ldr	r3, [pc, #8]	; (b716c <spark_cloud_flag_connect+0xc>)
   b7164:	681b      	ldr	r3, [r3, #0]
   b7166:	68db      	ldr	r3, [r3, #12]
   b7168:	9301      	str	r3, [sp, #4]
   b716a:	bd08      	pop	{r3, pc}
   b716c:	00030244 	.word	0x00030244

000b7170 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7170:	b508      	push	{r3, lr}
   b7172:	4b02      	ldr	r3, [pc, #8]	; (b717c <spark_cloud_flag_connected+0xc>)
   b7174:	681b      	ldr	r3, [r3, #0]
   b7176:	695b      	ldr	r3, [r3, #20]
   b7178:	9301      	str	r3, [sp, #4]
   b717a:	bd08      	pop	{r3, pc}
   b717c:	00030244 	.word	0x00030244

000b7180 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7180:	b508      	push	{r3, lr}
   b7182:	4b02      	ldr	r3, [pc, #8]	; (b718c <spark_deviceID+0xc>)
   b7184:	681b      	ldr	r3, [r3, #0]
   b7186:	69db      	ldr	r3, [r3, #28]
   b7188:	9301      	str	r3, [sp, #4]
   b718a:	bd08      	pop	{r3, pc}
   b718c:	00030244 	.word	0x00030244

000b7190 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7190:	b508      	push	{r3, lr}
   b7192:	4b02      	ldr	r3, [pc, #8]	; (b719c <spark_send_event+0xc>)
   b7194:	681b      	ldr	r3, [r3, #0]
   b7196:	6a1b      	ldr	r3, [r3, #32]
   b7198:	9301      	str	r3, [sp, #4]
   b719a:	bd08      	pop	{r3, pc}
   b719c:	00030244 	.word	0x00030244

000b71a0 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b71a0:	b508      	push	{r3, lr}
   b71a2:	4b02      	ldr	r3, [pc, #8]	; (b71ac <spark_sync_time+0xc>)
   b71a4:	681b      	ldr	r3, [r3, #0]
   b71a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b71a8:	9301      	str	r3, [sp, #4]
   b71aa:	bd08      	pop	{r3, pc}
   b71ac:	00030244 	.word	0x00030244

000b71b0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b71b0:	b508      	push	{r3, lr}
   b71b2:	4b02      	ldr	r3, [pc, #8]	; (b71bc <spark_sync_time_pending+0xc>)
   b71b4:	681b      	ldr	r3, [r3, #0]
   b71b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b71b8:	9301      	str	r3, [sp, #4]
   b71ba:	bd08      	pop	{r3, pc}
   b71bc:	00030244 	.word	0x00030244

000b71c0 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b71c0:	b508      	push	{r3, lr}
   b71c2:	4b02      	ldr	r3, [pc, #8]	; (b71cc <spark_set_connection_property+0xc>)
   b71c4:	681b      	ldr	r3, [r3, #0]
   b71c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b71c8:	9301      	str	r3, [sp, #4]
   b71ca:	bd08      	pop	{r3, pc}
   b71cc:	00030244 	.word	0x00030244

000b71d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b71d0:	b508      	push	{r3, lr}
   b71d2:	4b02      	ldr	r3, [pc, #8]	; (b71dc <spark_set_random_seed_from_cloud_handler+0xc>)
   b71d4:	681b      	ldr	r3, [r3, #0]
   b71d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71d8:	9301      	str	r3, [sp, #4]
   b71da:	bd08      	pop	{r3, pc}
   b71dc:	00030244 	.word	0x00030244

000b71e0 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   b71e0:	b508      	push	{r3, lr}
   b71e2:	4b02      	ldr	r3, [pc, #8]	; (b71ec <spark_publish_vitals+0xc>)
   b71e4:	681b      	ldr	r3, [r3, #0]
   b71e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71e8:	9301      	str	r3, [sp, #4]
   b71ea:	bd08      	pop	{r3, pc}
   b71ec:	00030244 	.word	0x00030244

000b71f0 <spark_cloud_disconnect>:
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b71f0:	b508      	push	{r3, lr}
   b71f2:	4b02      	ldr	r3, [pc, #8]	; (b71fc <spark_cloud_disconnect+0xc>)
   b71f4:	681b      	ldr	r3, [r3, #0]
   b71f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71f8:	9301      	str	r3, [sp, #4]
   b71fa:	bd08      	pop	{r3, pc}
   b71fc:	00030244 	.word	0x00030244

000b7200 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7200:	b508      	push	{r3, lr}
   b7202:	4b02      	ldr	r3, [pc, #8]	; (b720c <network_connect+0xc>)
   b7204:	681b      	ldr	r3, [r3, #0]
   b7206:	685b      	ldr	r3, [r3, #4]
   b7208:	9301      	str	r3, [sp, #4]
   b720a:	bd08      	pop	{r3, pc}
   b720c:	00030240 	.word	0x00030240

000b7210 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b02      	ldr	r3, [pc, #8]	; (b721c <network_connecting+0xc>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	689b      	ldr	r3, [r3, #8]
   b7218:	9301      	str	r3, [sp, #4]
   b721a:	bd08      	pop	{r3, pc}
   b721c:	00030240 	.word	0x00030240

000b7220 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b02      	ldr	r3, [pc, #8]	; (b722c <network_disconnect+0xc>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	68db      	ldr	r3, [r3, #12]
   b7228:	9301      	str	r3, [sp, #4]
   b722a:	bd08      	pop	{r3, pc}
   b722c:	00030240 	.word	0x00030240

000b7230 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7230:	b508      	push	{r3, lr}
   b7232:	4b02      	ldr	r3, [pc, #8]	; (b723c <network_ready+0xc>)
   b7234:	681b      	ldr	r3, [r3, #0]
   b7236:	691b      	ldr	r3, [r3, #16]
   b7238:	9301      	str	r3, [sp, #4]
   b723a:	bd08      	pop	{r3, pc}
   b723c:	00030240 	.word	0x00030240

000b7240 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7240:	b508      	push	{r3, lr}
   b7242:	4b02      	ldr	r3, [pc, #8]	; (b724c <network_on+0xc>)
   b7244:	681b      	ldr	r3, [r3, #0]
   b7246:	695b      	ldr	r3, [r3, #20]
   b7248:	9301      	str	r3, [sp, #4]
   b724a:	bd08      	pop	{r3, pc}
   b724c:	00030240 	.word	0x00030240

000b7250 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7250:	b508      	push	{r3, lr}
   b7252:	4b02      	ldr	r3, [pc, #8]	; (b725c <network_off+0xc>)
   b7254:	681b      	ldr	r3, [r3, #0]
   b7256:	699b      	ldr	r3, [r3, #24]
   b7258:	9301      	str	r3, [sp, #4]
   b725a:	bd08      	pop	{r3, pc}
   b725c:	00030240 	.word	0x00030240

000b7260 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b02      	ldr	r3, [pc, #8]	; (b726c <network_listen+0xc>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	69db      	ldr	r3, [r3, #28]
   b7268:	9301      	str	r3, [sp, #4]
   b726a:	bd08      	pop	{r3, pc}
   b726c:	00030240 	.word	0x00030240

000b7270 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b02      	ldr	r3, [pc, #8]	; (b727c <network_listening+0xc>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	6a1b      	ldr	r3, [r3, #32]
   b7278:	9301      	str	r3, [sp, #4]
   b727a:	bd08      	pop	{r3, pc}
   b727c:	00030240 	.word	0x00030240

000b7280 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7280:	b508      	push	{r3, lr}
   b7282:	4b02      	ldr	r3, [pc, #8]	; (b728c <network_set_listen_timeout+0xc>)
   b7284:	681b      	ldr	r3, [r3, #0]
   b7286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7288:	9301      	str	r3, [sp, #4]
   b728a:	bd08      	pop	{r3, pc}
   b728c:	00030240 	.word	0x00030240

000b7290 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7290:	b508      	push	{r3, lr}
   b7292:	4b02      	ldr	r3, [pc, #8]	; (b729c <network_get_listen_timeout+0xc>)
   b7294:	681b      	ldr	r3, [r3, #0]
   b7296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7298:	9301      	str	r3, [sp, #4]
   b729a:	bd08      	pop	{r3, pc}
   b729c:	00030240 	.word	0x00030240

000b72a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b72a0:	b508      	push	{r3, lr}
   b72a2:	4b02      	ldr	r3, [pc, #8]	; (b72ac <network_is_on+0xc>)
   b72a4:	681b      	ldr	r3, [r3, #0]
   b72a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72a8:	9301      	str	r3, [sp, #4]
   b72aa:	bd08      	pop	{r3, pc}
   b72ac:	00030240 	.word	0x00030240

000b72b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b72b0:	b508      	push	{r3, lr}
   b72b2:	4b02      	ldr	r3, [pc, #8]	; (b72bc <network_is_off+0xc>)
   b72b4:	681b      	ldr	r3, [r3, #0]
   b72b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72b8:	9301      	str	r3, [sp, #4]
   b72ba:	bd08      	pop	{r3, pc}
   b72bc:	00030240 	.word	0x00030240

000b72c0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <system_mode+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	681b      	ldr	r3, [r3, #0]
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	00030220 	.word	0x00030220

000b72d0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <set_system_mode+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	685b      	ldr	r3, [r3, #4]
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	00030220 	.word	0x00030220

000b72e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <system_delay_ms+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	695b      	ldr	r3, [r3, #20]
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	00030220 	.word	0x00030220

000b72f0 <system_set_flag>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <system_set_flag+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	00030220 	.word	0x00030220

000b7300 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <system_get_flag+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	00030220 	.word	0x00030220

000b7310 <application_thread_current>:
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <application_thread_current+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030220 	.word	0x00030220

000b7320 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <application_thread_invoke+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030220 	.word	0x00030220

000b7330 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <system_thread_get_state+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	00030220 	.word	0x00030220

000b7340 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b03      	ldr	r3, [pc, #12]	; (b7350 <system_ctrl_set_app_request_handler+0x10>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b734a:	9301      	str	r3, [sp, #4]
   b734c:	bd08      	pop	{r3, pc}
   b734e:	0000      	.short	0x0000
   b7350:	00030220 	.word	0x00030220

000b7354 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b03      	ldr	r3, [pc, #12]	; (b7364 <system_ctrl_set_result+0x10>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b735e:	9301      	str	r3, [sp, #4]
   b7360:	bd08      	pop	{r3, pc}
   b7362:	0000      	.short	0x0000
   b7364:	00030220 	.word	0x00030220

000b7368 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b7368:	b508      	push	{r3, lr}
   b736a:	4b03      	ldr	r3, [pc, #12]	; (b7378 <system_reset+0x10>)
   b736c:	681b      	ldr	r3, [r3, #0]
   b736e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b7372:	9301      	str	r3, [sp, #4]
   b7374:	bd08      	pop	{r3, pc}
   b7376:	0000      	.short	0x0000
   b7378:	00030220 	.word	0x00030220

000b737c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b737c:	b508      	push	{r3, lr}
   b737e:	4b02      	ldr	r3, [pc, #8]	; (b7388 <malloc+0xc>)
   b7380:	681b      	ldr	r3, [r3, #0]
   b7382:	681b      	ldr	r3, [r3, #0]
   b7384:	9301      	str	r3, [sp, #4]
   b7386:	bd08      	pop	{r3, pc}
   b7388:	0003021c 	.word	0x0003021c

000b738c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b738c:	b508      	push	{r3, lr}
   b738e:	4b02      	ldr	r3, [pc, #8]	; (b7398 <free+0xc>)
   b7390:	681b      	ldr	r3, [r3, #0]
   b7392:	685b      	ldr	r3, [r3, #4]
   b7394:	9301      	str	r3, [sp, #4]
   b7396:	bd08      	pop	{r3, pc}
   b7398:	0003021c 	.word	0x0003021c

000b739c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b739c:	b508      	push	{r3, lr}
   b739e:	4b02      	ldr	r3, [pc, #8]	; (b73a8 <realloc+0xc>)
   b73a0:	681b      	ldr	r3, [r3, #0]
   b73a2:	689b      	ldr	r3, [r3, #8]
   b73a4:	9301      	str	r3, [sp, #4]
   b73a6:	bd08      	pop	{r3, pc}
   b73a8:	0003021c 	.word	0x0003021c

000b73ac <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b73ac:	b508      	push	{r3, lr}
   b73ae:	4b02      	ldr	r3, [pc, #8]	; (b73b8 <sprintf+0xc>)
   b73b0:	681b      	ldr	r3, [r3, #0]
   b73b2:	68db      	ldr	r3, [r3, #12]
   b73b4:	9301      	str	r3, [sp, #4]
   b73b6:	bd08      	pop	{r3, pc}
   b73b8:	0003021c 	.word	0x0003021c

000b73bc <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b73bc:	b508      	push	{r3, lr}
   b73be:	4b02      	ldr	r3, [pc, #8]	; (b73c8 <snprintf+0xc>)
   b73c0:	681b      	ldr	r3, [r3, #0]
   b73c2:	69db      	ldr	r3, [r3, #28]
   b73c4:	9301      	str	r3, [sp, #4]
   b73c6:	bd08      	pop	{r3, pc}
   b73c8:	0003021c 	.word	0x0003021c

000b73cc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b73cc:	b508      	push	{r3, lr}
   b73ce:	4b02      	ldr	r3, [pc, #8]	; (b73d8 <vsnprintf+0xc>)
   b73d0:	681b      	ldr	r3, [r3, #0]
   b73d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b73d4:	9301      	str	r3, [sp, #4]
   b73d6:	bd08      	pop	{r3, pc}
   b73d8:	0003021c 	.word	0x0003021c

000b73dc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b73dc:	b508      	push	{r3, lr}
   b73de:	4b02      	ldr	r3, [pc, #8]	; (b73e8 <abort+0xc>)
   b73e0:	681b      	ldr	r3, [r3, #0]
   b73e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b73e4:	9301      	str	r3, [sp, #4]
   b73e6:	bd08      	pop	{r3, pc}
   b73e8:	0003021c 	.word	0x0003021c

000b73ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b73ec:	b508      	push	{r3, lr}
   b73ee:	4b02      	ldr	r3, [pc, #8]	; (b73f8 <_malloc_r+0xc>)
   b73f0:	681b      	ldr	r3, [r3, #0]
   b73f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73f4:	9301      	str	r3, [sp, #4]
   b73f6:	bd08      	pop	{r3, pc}
   b73f8:	0003021c 	.word	0x0003021c

000b73fc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b73fc:	b508      	push	{r3, lr}
   b73fe:	4b02      	ldr	r3, [pc, #8]	; (b7408 <__errno+0xc>)
   b7400:	681b      	ldr	r3, [r3, #0]
   b7402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7404:	9301      	str	r3, [sp, #4]
   b7406:	bd08      	pop	{r3, pc}
   b7408:	0003021c 	.word	0x0003021c

000b740c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b740c:	b508      	push	{r3, lr}
   b740e:	4b02      	ldr	r3, [pc, #8]	; (b7418 <__assert_func+0xc>)
   b7410:	681b      	ldr	r3, [r3, #0]
   b7412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7414:	9301      	str	r3, [sp, #4]
   b7416:	bd08      	pop	{r3, pc}
   b7418:	0003021c 	.word	0x0003021c

000b741c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b741c:	b508      	push	{r3, lr}
   b741e:	4b02      	ldr	r3, [pc, #8]	; (b7428 <newlib_impure_ptr_callback+0xc>)
   b7420:	681b      	ldr	r3, [r3, #0]
   b7422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7424:	9301      	str	r3, [sp, #4]
   b7426:	bd08      	pop	{r3, pc}
   b7428:	0003021c 	.word	0x0003021c

000b742c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b742c:	b508      	push	{r3, lr}
   b742e:	4b02      	ldr	r3, [pc, #8]	; (b7438 <localtime_r+0xc>)
   b7430:	681b      	ldr	r3, [r3, #0]
   b7432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7434:	9301      	str	r3, [sp, #4]
   b7436:	bd08      	pop	{r3, pc}
   b7438:	0003021c 	.word	0x0003021c

000b743c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b743c:	2300      	movs	r3, #0
   b743e:	6840      	ldr	r0, [r0, #4]
   b7440:	461a      	mov	r2, r3
   b7442:	f7ff bedd 	b.w	b7200 <network_connect>

000b7446 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7446:	6840      	ldr	r0, [r0, #4]
   b7448:	2200      	movs	r2, #0
   b744a:	2102      	movs	r1, #2
   b744c:	f7ff bee8 	b.w	b7220 <network_disconnect>

000b7450 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7450:	2200      	movs	r2, #0
   b7452:	6840      	ldr	r0, [r0, #4]
   b7454:	4611      	mov	r1, r2
   b7456:	f7ff bedb 	b.w	b7210 <network_connecting>

000b745a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b745a:	2200      	movs	r2, #0
   b745c:	6840      	ldr	r0, [r0, #4]
   b745e:	4611      	mov	r1, r2
   b7460:	f7ff bee6 	b.w	b7230 <network_ready>

000b7464 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7464:	2300      	movs	r3, #0
   b7466:	6840      	ldr	r0, [r0, #4]
   b7468:	461a      	mov	r2, r3
   b746a:	4619      	mov	r1, r3
   b746c:	f7ff bee8 	b.w	b7240 <network_on>

000b7470 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7470:	2300      	movs	r3, #0
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	461a      	mov	r2, r3
   b7476:	4619      	mov	r1, r3
   b7478:	f7ff beea 	b.w	b7250 <network_off>

000b747c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b747c:	6840      	ldr	r0, [r0, #4]
   b747e:	2100      	movs	r1, #0
   b7480:	f7ff bf0e 	b.w	b72a0 <network_is_on>

000b7484 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7484:	6840      	ldr	r0, [r0, #4]
   b7486:	2100      	movs	r1, #0
   b7488:	f7ff bf12 	b.w	b72b0 <network_is_off>

000b748c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b748c:	6840      	ldr	r0, [r0, #4]
   b748e:	2200      	movs	r2, #0
   b7490:	f081 0101 	eor.w	r1, r1, #1
   b7494:	f7ff bee4 	b.w	b7260 <network_listen>

000b7498 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7498:	6840      	ldr	r0, [r0, #4]
   b749a:	2200      	movs	r2, #0
   b749c:	f7ff bef0 	b.w	b7280 <network_set_listen_timeout>

000b74a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b74a0:	2200      	movs	r2, #0
   b74a2:	6840      	ldr	r0, [r0, #4]
   b74a4:	4611      	mov	r1, r2
   b74a6:	f7ff bef3 	b.w	b7290 <network_get_listen_timeout>

000b74aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b74aa:	2200      	movs	r2, #0
   b74ac:	6840      	ldr	r0, [r0, #4]
   b74ae:	4611      	mov	r1, r2
   b74b0:	f7ff bede 	b.w	b7270 <network_listening>

000b74b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b74b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74b8:	b095      	sub	sp, #84	; 0x54
   b74ba:	4614      	mov	r4, r2
   b74bc:	460d      	mov	r5, r1
   b74be:	4607      	mov	r7, r0
    IPAddress addr;
   b74c0:	f000 fcfe 	bl	b7ec0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b74c4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b74c6:	221c      	movs	r2, #28
   b74c8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b74ca:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b74cc:	f002 fdfb 	bl	ba0c6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b74d0:	2340      	movs	r3, #64	; 0x40
   b74d2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b74d4:	4620      	mov	r0, r4
   b74d6:	466b      	mov	r3, sp
   b74d8:	aa0c      	add	r2, sp, #48	; 0x30
   b74da:	2100      	movs	r1, #0
   b74dc:	f7ff fdfe 	bl	b70dc <netdb_getaddrinfo>
    if (!r) {
   b74e0:	4604      	mov	r4, r0
   b74e2:	2800      	cmp	r0, #0
   b74e4:	d14b      	bne.n	b757e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74e6:	4602      	mov	r2, r0
   b74e8:	2101      	movs	r1, #1
   b74ea:	6868      	ldr	r0, [r5, #4]
   b74ec:	f7ff fea0 	bl	b7230 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74f4:	4622      	mov	r2, r4
   b74f6:	6868      	ldr	r0, [r5, #4]
   b74f8:	f7ff fe9a 	bl	b7230 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74fe:	4681      	mov	r9, r0
        bool ok = false;
   b7500:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7502:	2e00      	cmp	r6, #0
   b7504:	d03b      	beq.n	b757e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7506:	2900      	cmp	r1, #0
   b7508:	d139      	bne.n	b757e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b750a:	6873      	ldr	r3, [r6, #4]
   b750c:	2b02      	cmp	r3, #2
   b750e:	d003      	beq.n	b7518 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7510:	2b0a      	cmp	r3, #10
   b7512:	d011      	beq.n	b7538 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7514:	69f6      	ldr	r6, [r6, #28]
   b7516:	e7f4      	b.n	b7502 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7518:	f1b8 0f00 	cmp.w	r8, #0
   b751c:	d0fa      	beq.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b751e:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b7520:	a806      	add	r0, sp, #24
   b7522:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7524:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7526:	f000 fd1b 	bl	b7f60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b752a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b752c:	1d3c      	adds	r4, r7, #4
   b752e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7530:	682b      	ldr	r3, [r5, #0]
   b7532:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7534:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7536:	e7ed      	b.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7538:	f1b9 0f00 	cmp.w	r9, #0
   b753c:	d0ea      	beq.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b753e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7540:	2210      	movs	r2, #16
   b7542:	a801      	add	r0, sp, #4
   b7544:	f002 fdbf 	bl	ba0c6 <memset>
                    a.v = 6;
   b7548:	2306      	movs	r3, #6
   b754a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b754e:	ad01      	add	r5, sp, #4
   b7550:	f104 0308 	add.w	r3, r4, #8
   b7554:	3418      	adds	r4, #24
   b7556:	6818      	ldr	r0, [r3, #0]
   b7558:	6859      	ldr	r1, [r3, #4]
   b755a:	462a      	mov	r2, r5
   b755c:	c203      	stmia	r2!, {r0, r1}
   b755e:	3308      	adds	r3, #8
   b7560:	42a3      	cmp	r3, r4
   b7562:	4615      	mov	r5, r2
   b7564:	d1f7      	bne.n	b7556 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7566:	a901      	add	r1, sp, #4
   b7568:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b756a:	ad07      	add	r5, sp, #28
   b756c:	f000 fcb6 	bl	b7edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7572:	1d3c      	adds	r4, r7, #4
   b7574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7576:	682b      	ldr	r3, [r5, #0]
   b7578:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b757a:	4649      	mov	r1, r9
   b757c:	e7ca      	b.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b757e:	9800      	ldr	r0, [sp, #0]
   b7580:	f7ff fda4 	bl	b70cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7584:	4638      	mov	r0, r7
   b7586:	b015      	add	sp, #84	; 0x54
   b7588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b758c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b758c:	4b02      	ldr	r3, [pc, #8]	; (b7598 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b758e:	4a03      	ldr	r2, [pc, #12]	; (b759c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7590:	601a      	str	r2, [r3, #0]
   b7592:	2200      	movs	r2, #0
   b7594:	605a      	str	r2, [r3, #4]

} // spark
   b7596:	4770      	bx	lr
   b7598:	2003e660 	.word	0x2003e660
   b759c:	000bcb44 	.word	0x000bcb44

000b75a0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b75a0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b75a2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b75a4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b75a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b75aa:	2201      	movs	r2, #1
   b75ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b75b0:	f10d 0107 	add.w	r1, sp, #7
   b75b4:	47a0      	blx	r4
}
   b75b6:	b002      	add	sp, #8
   b75b8:	bd10      	pop	{r4, pc}

000b75ba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b75ba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b75bc:	6803      	ldr	r3, [r0, #0]
   b75be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b75c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b75c4:	46a4      	mov	ip, r4
}
   b75c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b75ca:	4760      	bx	ip

000b75cc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b75cc:	b513      	push	{r0, r1, r4, lr}
   b75ce:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b75d0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b75d2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b75d6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b75d8:	f10d 0107 	add.w	r1, sp, #7
   b75dc:	2201      	movs	r2, #1
   b75de:	47a0      	blx	r4
}
   b75e0:	b002      	add	sp, #8
   b75e2:	bd10      	pop	{r4, pc}

000b75e4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b75e4:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b75e6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b75e8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b75f0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b75f2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b75f4:	d008      	beq.n	b7608 <_ZN9TCPClient4readEv+0x24>
   b75f6:	6963      	ldr	r3, [r4, #20]
   b75f8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b75fc:	1c51      	adds	r1, r2, #1
   b75fe:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7602:	4413      	add	r3, r2
   b7604:	7918      	ldrb	r0, [r3, #4]
}
   b7606:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7608:	6803      	ldr	r3, [r0, #0]
   b760a:	691b      	ldr	r3, [r3, #16]
   b760c:	4798      	blx	r3
   b760e:	2800      	cmp	r0, #0
   b7610:	d1f1      	bne.n	b75f6 <_ZN9TCPClient4readEv+0x12>
   b7612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7616:	e7f6      	b.n	b7606 <_ZN9TCPClient4readEv+0x22>

000b7618 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7618:	4770      	bx	lr

000b761a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b761a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b761c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b761e:	43c0      	mvns	r0, r0
   b7620:	0fc0      	lsrs	r0, r0, #31
   b7622:	4770      	bx	lr

000b7624 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7624:	4770      	bx	lr
	...

000b7628 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7628:	4b06      	ldr	r3, [pc, #24]	; (b7644 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b762a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b762c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b762e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7632:	d005      	beq.n	b7640 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7634:	4608      	mov	r0, r1
   b7636:	f001 ff35 	bl	b94a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b763a:	2800      	cmp	r0, #0
   b763c:	bf08      	it	eq
   b763e:	2400      	moveq	r4, #0
      }
   b7640:	4620      	mov	r0, r4
   b7642:	bd10      	pop	{r4, pc}
   b7644:	000bcbac 	.word	0x000bcbac

000b7648 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7648:	b510      	push	{r4, lr}
   b764a:	21ac      	movs	r1, #172	; 0xac
   b764c:	4604      	mov	r4, r0
   b764e:	f7fc fd26 	bl	b409e <_ZdlPvj>
   b7652:	4620      	mov	r0, r4
   b7654:	bd10      	pop	{r4, pc}

000b7656 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7656:	21ac      	movs	r1, #172	; 0xac
   b7658:	f7fc bd21 	b.w	b409e <_ZdlPvj>

000b765c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b7660:	f04f 0800 	mov.w	r8, #0
   b7664:	b086      	sub	sp, #24
   b7666:	461c      	mov	r4, r3
   b7668:	f8c0 8004 	str.w	r8, [r0, #4]
   b766c:	4605      	mov	r5, r0
   b766e:	460e      	mov	r6, r1
   b7670:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7672:	4641      	mov	r1, r8
   b7674:	2210      	movs	r2, #16
   b7676:	a802      	add	r0, sp, #8
   b7678:	f002 fd25 	bl	ba0c6 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b767c:	1c63      	adds	r3, r4, #1
   b767e:	d009      	beq.n	b7694 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7684:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7688:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b768c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7690:	435c      	muls	r4, r3
   b7692:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7694:	6968      	ldr	r0, [r5, #20]
   b7696:	2310      	movs	r3, #16
   b7698:	9300      	str	r3, [sp, #0]
   b769a:	6800      	ldr	r0, [r0, #0]
   b769c:	ab02      	add	r3, sp, #8
   b769e:	f241 0205 	movw	r2, #4101	; 0x1005
   b76a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b76a6:	f7ff fc29 	bl	b6efc <sock_setsockopt>
    if (ret < 0) {
   b76aa:	2800      	cmp	r0, #0
   b76ac:	da07      	bge.n	b76be <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b76ae:	f7ff fea5 	bl	b73fc <__errno>
   b76b2:	6803      	ldr	r3, [r0, #0]
   b76b4:	606b      	str	r3, [r5, #4]
        return 0;
   b76b6:	2000      	movs	r0, #0
}
   b76b8:	b006      	add	sp, #24
   b76ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b76be:	6968      	ldr	r0, [r5, #20]
   b76c0:	2300      	movs	r3, #0
   b76c2:	6800      	ldr	r0, [r0, #0]
   b76c4:	463a      	mov	r2, r7
   b76c6:	4631      	mov	r1, r6
   b76c8:	f7ff fc40 	bl	b6f4c <sock_send>
    if (ret < 0) {
   b76cc:	1e03      	subs	r3, r0, #0
   b76ce:	dbee      	blt.n	b76ae <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b76d0:	4618      	mov	r0, r3
   b76d2:	e7f1      	b.n	b76b8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b76d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b76d4:	b530      	push	{r4, r5, lr}
   b76d6:	b087      	sub	sp, #28
   b76d8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b76da:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b76dc:	4668      	mov	r0, sp
   b76de:	f000 fc3f 	bl	b7f60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b76e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b76e4:	3404      	adds	r4, #4
   b76e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76e8:	682b      	ldr	r3, [r5, #0]
   b76ea:	7023      	strb	r3, [r4, #0]
    }
   b76ec:	b007      	add	sp, #28
   b76ee:	bd30      	pop	{r4, r5, pc}

000b76f0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b76f0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b76f2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b76f4:	4b05      	ldr	r3, [pc, #20]	; (b770c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b76f6:	4604      	mov	r4, r0
   b76f8:	358c      	adds	r5, #140	; 0x8c
   b76fa:	f844 3b04 	str.w	r3, [r4], #4
   b76fe:	4606      	mov	r6, r0
   b7700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7704:	682b      	ldr	r3, [r5, #0]
   b7706:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7708:	4630      	mov	r0, r6
   b770a:	bd70      	pop	{r4, r5, r6, pc}
   b770c:	000bcccc 	.word	0x000bcccc

000b7710 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7714:	4698      	mov	r8, r3
    stop();
   b7716:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7718:	b093      	sub	sp, #76	; 0x4c
   b771a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b771c:	2400      	movs	r4, #0
    stop();
   b771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7720:	4606      	mov	r6, r0
   b7722:	4617      	mov	r7, r2
    stop();
   b7724:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7726:	4628      	mov	r0, r5
   b7728:	466b      	mov	r3, sp
   b772a:	4622      	mov	r2, r4
   b772c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b772e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7730:	f7ff fcd4 	bl	b70dc <netdb_getaddrinfo>
   b7734:	4605      	mov	r5, r0
   b7736:	2800      	cmp	r0, #0
   b7738:	d163      	bne.n	b7802 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b773a:	9b00      	ldr	r3, [sp, #0]
   b773c:	2b00      	cmp	r3, #0
   b773e:	d04b      	beq.n	b77d8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7740:	695b      	ldr	r3, [r3, #20]
   b7742:	2b00      	cmp	r3, #0
   b7744:	d048      	beq.n	b77d8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7746:	a806      	add	r0, sp, #24
   b7748:	f000 fbba 	bl	b7ec0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b774c:	9b00      	ldr	r3, [sp, #0]
   b774e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7750:	7863      	ldrb	r3, [r4, #1]
   b7752:	2b02      	cmp	r3, #2
   b7754:	d104      	bne.n	b7760 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7756:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7758:	a806      	add	r0, sp, #24
   b775a:	f7ff ffbb 	bl	b76d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b775e:	e026      	b.n	b77ae <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7760:	2b0a      	cmp	r3, #10
   b7762:	d124      	bne.n	b77ae <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7764:	2211      	movs	r2, #17
   b7766:	4629      	mov	r1, r5
   b7768:	a801      	add	r0, sp, #4
   b776a:	f002 fcac 	bl	ba0c6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b776e:	68a3      	ldr	r3, [r4, #8]
   b7770:	2b00      	cmp	r3, #0
   b7772:	d038      	beq.n	b77e6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7774:	f104 0308 	add.w	r3, r4, #8
   b7778:	f10d 0c04 	add.w	ip, sp, #4
   b777c:	3418      	adds	r4, #24
   b777e:	6818      	ldr	r0, [r3, #0]
   b7780:	6859      	ldr	r1, [r3, #4]
   b7782:	4662      	mov	r2, ip
   b7784:	c203      	stmia	r2!, {r0, r1}
   b7786:	3308      	adds	r3, #8
   b7788:	42a3      	cmp	r3, r4
   b778a:	4694      	mov	ip, r2
   b778c:	d1f7      	bne.n	b777e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b778e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7790:	a901      	add	r1, sp, #4
   b7792:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7794:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7798:	f000 fba0 	bl	b7edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b779c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b77a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b77a4:	ac07      	add	r4, sp, #28
   b77a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77a8:	f8dc 3000 	ldr.w	r3, [ip]
   b77ac:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b77ae:	a806      	add	r0, sp, #24
   b77b0:	f000 fba6 	bl	b7f00 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b77b4:	b180      	cbz	r0, b77d8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b77b6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b77b8:	ad07      	add	r5, sp, #28
   b77ba:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b77be:	4b12      	ldr	r3, [pc, #72]	; (b7808 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b77c0:	930c      	str	r3, [sp, #48]	; 0x30
   b77c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77c4:	ac0d      	add	r4, sp, #52	; 0x34
   b77c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77c8:	682b      	ldr	r3, [r5, #0]
   b77ca:	7023      	strb	r3, [r4, #0]
   b77cc:	463a      	mov	r2, r7
   b77ce:	4643      	mov	r3, r8
   b77d0:	a90c      	add	r1, sp, #48	; 0x30
   b77d2:	4630      	mov	r0, r6
   b77d4:	47c8      	blx	r9
   b77d6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b77d8:	9800      	ldr	r0, [sp, #0]
   b77da:	f7ff fc77 	bl	b70cc <netdb_freeaddrinfo>
}
   b77de:	4628      	mov	r0, r5
   b77e0:	b013      	add	sp, #76	; 0x4c
   b77e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b77e6:	68e3      	ldr	r3, [r4, #12]
   b77e8:	2b00      	cmp	r3, #0
   b77ea:	d1c3      	bne.n	b7774 <_ZN9TCPClient7connectEPKctm+0x64>
   b77ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b77f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b77f4:	f7ff fc0a 	bl	b700c <inet_htonl>
   b77f8:	4581      	cmp	r9, r0
   b77fa:	d1bb      	bne.n	b7774 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b77fc:	f104 0114 	add.w	r1, r4, #20
   b7800:	e7aa      	b.n	b7758 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7802:	4625      	mov	r5, r4
   b7804:	e7e8      	b.n	b77d8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7806:	bf00      	nop
   b7808:	000bcccc 	.word	0x000bcccc

000b780c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b780c:	b538      	push	{r3, r4, r5, lr}
   b780e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7810:	681a      	ldr	r2, [r3, #0]
   b7812:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7814:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7816:	da10      	bge.n	b783a <_ZN9TCPClient9connectedEv+0x2e>
   b7818:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b781c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7820:	429a      	cmp	r2, r3
   b7822:	d10a      	bne.n	b783a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7824:	6803      	ldr	r3, [r0, #0]
   b7826:	691b      	ldr	r3, [r3, #16]
   b7828:	4798      	blx	r3
        if (!rv) {
   b782a:	4604      	mov	r4, r0
   b782c:	b928      	cbnz	r0, b783a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b782e:	682b      	ldr	r3, [r5, #0]
   b7830:	4628      	mov	r0, r5
   b7832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7834:	4798      	blx	r3
        rv = available();
   b7836:	4620      	mov	r0, r4
}
   b7838:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b783a:	2001      	movs	r0, #1
   b783c:	e7fc      	b.n	b7838 <_ZN9TCPClient9connectedEv+0x2c>

000b783e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b783e:	b510      	push	{r4, lr}
   b7840:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7842:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7846:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b784a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b784c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b784e:	d005      	beq.n	b785c <_ZN9TCPClient4peekEv+0x1e>
   b7850:	6963      	ldr	r3, [r4, #20]
   b7852:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7856:	4413      	add	r3, r2
   b7858:	7918      	ldrb	r0, [r3, #4]
}
   b785a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b785c:	6803      	ldr	r3, [r0, #0]
   b785e:	691b      	ldr	r3, [r3, #16]
   b7860:	4798      	blx	r3
   b7862:	2800      	cmp	r0, #0
   b7864:	d1f4      	bne.n	b7850 <_ZN9TCPClient4peekEv+0x12>
   b7866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b786a:	e7f6      	b.n	b785a <_ZN9TCPClient4peekEv+0x1c>

000b786c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b786e:	6943      	ldr	r3, [r0, #20]
   b7870:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7872:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7876:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b787a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b787c:	4605      	mov	r5, r0
   b787e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7880:	d016      	beq.n	b78b0 <_ZN9TCPClient4readEPhj+0x44>
   b7882:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7884:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7888:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b788c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b788e:	42bc      	cmp	r4, r7
   b7890:	bf28      	it	cs
   b7892:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7894:	3304      	adds	r3, #4
   b7896:	4622      	mov	r2, r4
   b7898:	4419      	add	r1, r3
   b789a:	4630      	mov	r0, r6
   b789c:	f002 fc05 	bl	ba0aa <memcpy>
   b78a0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b78a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b78a6:	4423      	add	r3, r4
   b78a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b78ac:	4620      	mov	r0, r4
   b78ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b78b0:	6803      	ldr	r3, [r0, #0]
   b78b2:	691b      	ldr	r3, [r3, #16]
   b78b4:	4798      	blx	r3
   b78b6:	2800      	cmp	r0, #0
   b78b8:	d1e3      	bne.n	b7882 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b78ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b78be:	e7f5      	b.n	b78ac <_ZN9TCPClient4readEPhj+0x40>

000b78c0 <_ZN9TCPClient12flush_bufferEv>:
   b78c0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b78c2:	2300      	movs	r3, #0
   b78c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b78c8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b78ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b78ce:	4770      	bx	lr

000b78d0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b78d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78d4:	461f      	mov	r7, r3
    stop();
   b78d6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b78d8:	460c      	mov	r4, r1
    stop();
   b78da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b78dc:	b08a      	sub	sp, #40	; 0x28
   b78de:	4605      	mov	r5, r0
   b78e0:	4616      	mov	r6, r2
    stop();
   b78e2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b78e4:	7d23      	ldrb	r3, [r4, #20]
   b78e6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b78ea:	2b04      	cmp	r3, #4
   b78ec:	bf0c      	ite	eq
   b78ee:	2002      	moveq	r0, #2
   b78f0:	200a      	movne	r0, #10
   b78f2:	2206      	movs	r2, #6
   b78f4:	2101      	movs	r1, #1
   b78f6:	f7ff fb39 	bl	b6f6c <sock_socket>
   b78fa:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b78fe:	696b      	ldr	r3, [r5, #20]
   b7900:	681b      	ldr	r3, [r3, #0]
   b7902:	2b00      	cmp	r3, #0
   b7904:	da08      	bge.n	b7918 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7906:	682b      	ldr	r3, [r5, #0]
   b7908:	4628      	mov	r0, r5
   b790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b790c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b790e:	4798      	blx	r3
}
   b7910:	4620      	mov	r0, r4
   b7912:	b00a      	add	sp, #40	; 0x28
   b7914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7918:	4628      	mov	r0, r5
   b791a:	f7ff ffd1 	bl	b78c0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b791e:	b1b7      	cbz	r7, b794e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7920:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7922:	a903      	add	r1, sp, #12
   b7924:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7926:	9303      	str	r3, [sp, #12]
   b7928:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b792c:	f7ff fbc6 	bl	b70bc <if_index_to_name>
   b7930:	2800      	cmp	r0, #0
   b7932:	d1e8      	bne.n	b7906 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7934:	6968      	ldr	r0, [r5, #20]
   b7936:	2306      	movs	r3, #6
   b7938:	9300      	str	r3, [sp, #0]
   b793a:	6800      	ldr	r0, [r0, #0]
   b793c:	ab03      	add	r3, sp, #12
   b793e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7942:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7946:	f7ff fad9 	bl	b6efc <sock_setsockopt>
   b794a:	2800      	cmp	r0, #0
   b794c:	d1db      	bne.n	b7906 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b794e:	221c      	movs	r2, #28
   b7950:	2100      	movs	r1, #0
   b7952:	a803      	add	r0, sp, #12
   b7954:	f002 fbb7 	bl	ba0c6 <memset>
    if (ip.version() == 4) {
   b7958:	7d23      	ldrb	r3, [r4, #20]
   b795a:	2b04      	cmp	r3, #4
   b795c:	d11d      	bne.n	b799a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b795e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7962:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7964:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7968:	f7ff fb60 	bl	b702c <inet_htons>
   b796c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7970:	6860      	ldr	r0, [r4, #4]
   b7972:	f7ff fb4b 	bl	b700c <inet_htonl>
   b7976:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7978:	696b      	ldr	r3, [r5, #20]
   b797a:	221c      	movs	r2, #28
   b797c:	6818      	ldr	r0, [r3, #0]
   b797e:	a903      	add	r1, sp, #12
   b7980:	f7ff facc 	bl	b6f1c <sock_connect>
   b7984:	2800      	cmp	r0, #0
   b7986:	d1be      	bne.n	b7906 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7988:	3404      	adds	r4, #4
   b798a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b798c:	696d      	ldr	r5, [r5, #20]
   b798e:	358c      	adds	r5, #140	; 0x8c
   b7990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7992:	6823      	ldr	r3, [r4, #0]
   b7994:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7996:	2401      	movs	r4, #1
   b7998:	e7ba      	b.n	b7910 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b799a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b799e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b79a0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b79a4:	f7ff fb42 	bl	b702c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b79a8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b79aa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b79ae:	1d23      	adds	r3, r4, #4
   b79b0:	f104 0714 	add.w	r7, r4, #20
   b79b4:	6818      	ldr	r0, [r3, #0]
   b79b6:	6859      	ldr	r1, [r3, #4]
   b79b8:	4632      	mov	r2, r6
   b79ba:	c203      	stmia	r2!, {r0, r1}
   b79bc:	3308      	adds	r3, #8
   b79be:	42bb      	cmp	r3, r7
   b79c0:	4616      	mov	r6, r2
   b79c2:	d1f7      	bne.n	b79b4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b79c4:	e7d8      	b.n	b7978 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b79c8 <_ZN9TCPClient9availableEv>:
{
   b79c8:	b530      	push	{r4, r5, lr}
   b79ca:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b79cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b79d0:	b08b      	sub	sp, #44	; 0x2c
   b79d2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b79d4:	b12b      	cbz	r3, b79e2 <_ZN9TCPClient9availableEv+0x1a>
   b79d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b79da:	429a      	cmp	r2, r3
   b79dc:	d101      	bne.n	b79e2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b79de:	f7ff ff6f 	bl	b78c0 <_ZN9TCPClient12flush_bufferEv>
   b79e2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b79e4:	6808      	ldr	r0, [r1, #0]
   b79e6:	2800      	cmp	r0, #0
   b79e8:	db18      	blt.n	b7a1c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b79ea:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b79ee:	2d7f      	cmp	r5, #127	; 0x7f
   b79f0:	d814      	bhi.n	b7a1c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b79f2:	3104      	adds	r1, #4
   b79f4:	2308      	movs	r3, #8
   b79f6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b79fa:	4429      	add	r1, r5
   b79fc:	f7ff fa96 	bl	b6f2c <sock_recv>
            if (ret > 0) {
   b7a00:	2800      	cmp	r0, #0
   b7a02:	dd13      	ble.n	b7a2c <_ZN9TCPClient9availableEv+0x64>
   b7a04:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7a06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a0a:	b90a      	cbnz	r2, b7a10 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7a0c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7a10:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7a12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a16:	4410      	add	r0, r2
   b7a18:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7a1c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7a1e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7a22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7a26:	1ac0      	subs	r0, r0, r3
   b7a28:	b00b      	add	sp, #44	; 0x2c
   b7a2a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7a2c:	f7ff fce6 	bl	b73fc <__errno>
   b7a30:	6803      	ldr	r3, [r0, #0]
   b7a32:	2b0b      	cmp	r3, #11
   b7a34:	d0f2      	beq.n	b7a1c <_ZN9TCPClient9availableEv+0x54>
   b7a36:	f7ff fce1 	bl	b73fc <__errno>
   b7a3a:	6803      	ldr	r3, [r0, #0]
   b7a3c:	2b0b      	cmp	r3, #11
   b7a3e:	d0ed      	beq.n	b7a1c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7a40:	2320      	movs	r3, #32
   b7a42:	2500      	movs	r5, #0
   b7a44:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7a48:	f7ff fcd8 	bl	b73fc <__errno>
   b7a4c:	6803      	ldr	r3, [r0, #0]
   b7a4e:	9301      	str	r3, [sp, #4]
   b7a50:	4b08      	ldr	r3, [pc, #32]	; (b7a74 <_ZN9TCPClient9availableEv+0xac>)
   b7a52:	4909      	ldr	r1, [pc, #36]	; (b7a78 <_ZN9TCPClient9availableEv+0xb0>)
   b7a54:	9300      	str	r3, [sp, #0]
   b7a56:	aa02      	add	r2, sp, #8
   b7a58:	462b      	mov	r3, r5
   b7a5a:	2032      	movs	r0, #50	; 0x32
   b7a5c:	f7ff fb66 	bl	b712c <log_message>
                    sock_close(d_->sock);
   b7a60:	6963      	ldr	r3, [r4, #20]
   b7a62:	6818      	ldr	r0, [r3, #0]
   b7a64:	f7ff fa52 	bl	b6f0c <sock_close>
   b7a68:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7a6e:	601a      	str	r2, [r3, #0]
   b7a70:	e7d4      	b.n	b7a1c <_ZN9TCPClient9availableEv+0x54>
   b7a72:	bf00      	nop
   b7a74:	000bcb7f 	.word	0x000bcb7f
   b7a78:	000bcb78 	.word	0x000bcb78

000b7a7c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7a7c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7a7e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7a80:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7a82:	6818      	ldr	r0, [r3, #0]
   b7a84:	2800      	cmp	r0, #0
   b7a86:	db01      	blt.n	b7a8c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7a88:	f7ff fa40 	bl	b6f0c <sock_close>
   b7a8c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7a92:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7a94:	6960      	ldr	r0, [r4, #20]
   b7a96:	2211      	movs	r2, #17
   b7a98:	2100      	movs	r1, #0
   b7a9a:	308c      	adds	r0, #140	; 0x8c
   b7a9c:	f002 fb13 	bl	ba0c6 <memset>
    flush_buffer();
   b7aa0:	4620      	mov	r0, r4
}
   b7aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7aa6:	f7ff bf0b 	b.w	b78c0 <_ZN9TCPClient12flush_bufferEv>

000b7aaa <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   b7aaa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7aac:	6818      	ldr	r0, [r3, #0]
}
   b7aae:	43c0      	mvns	r0, r0
   b7ab0:	0fc0      	lsrs	r0, r0, #31
   b7ab2:	4770      	bx	lr

000b7ab4 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7ab4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7ab6:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7ab8:	4604      	mov	r4, r0
          total(0) {
   b7aba:	6001      	str	r1, [r0, #0]
   b7abc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7ac0:	3088      	adds	r0, #136	; 0x88
   b7ac2:	f000 f9fd 	bl	b7ec0 <_ZN9IPAddressC1Ev>
}
   b7ac6:	4620      	mov	r0, r4
   b7ac8:	bd10      	pop	{r4, pc}
	...

000b7acc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7acc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7ace:	2300      	movs	r3, #0
   b7ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7ad4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7ad8:	4a0e      	ldr	r2, [pc, #56]	; (b7b14 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7ada:	6103      	str	r3, [r0, #16]
   b7adc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7ade:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7ae0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7ae2:	20ac      	movs	r0, #172	; 0xac
   b7ae4:	9101      	str	r1, [sp, #4]
   b7ae6:	f7fc fad6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7aea:	1e05      	subs	r5, r0, #0
   b7aec:	f105 060c 	add.w	r6, r5, #12
   b7af0:	d008      	beq.n	b7b04 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7af2:	2301      	movs	r3, #1
   b7af4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7af8:	4b07      	ldr	r3, [pc, #28]	; (b7b18 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7afa:	9901      	ldr	r1, [sp, #4]
   b7afc:	602b      	str	r3, [r5, #0]
   b7afe:	4630      	mov	r0, r6
   b7b00:	f7ff ffd8 	bl	b7ab4 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7b04:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7b06:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7b0a:	f7ff fed9 	bl	b78c0 <_ZN9TCPClient12flush_bufferEv>
}
   b7b0e:	b002      	add	sp, #8
   b7b10:	bd70      	pop	{r4, r5, r6, pc}
   b7b12:	bf00      	nop
   b7b14:	000bcbbc 	.word	0x000bcbbc
   b7b18:	000bcb98 	.word	0x000bcb98

000b7b1c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7b1c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7b1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7b22:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7b24:	f7ff ffd2 	bl	b7acc <_ZN9TCPClientC1Ei>
}
   b7b28:	4620      	mov	r0, r4
   b7b2a:	bd10      	pop	{r4, pc}

000b7b2c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7b2c:	b510      	push	{r4, lr}
   b7b2e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7b30:	6800      	ldr	r0, [r0, #0]
   b7b32:	2800      	cmp	r0, #0
   b7b34:	db01      	blt.n	b7b3a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7b36:	f7ff f9e9 	bl	b6f0c <sock_close>
    }
}
   b7b3a:	4620      	mov	r0, r4
   b7b3c:	bd10      	pop	{r4, pc}

000b7b3e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7b3e:	300c      	adds	r0, #12
   b7b40:	f7ff bff4 	b.w	b7b2c <_ZN9TCPClient4DataD1Ev>

000b7b44 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7b44:	4770      	bx	lr

000b7b46 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b48:	4606      	mov	r6, r0
   b7b4a:	4615      	mov	r5, r2
   b7b4c:	460c      	mov	r4, r1
   b7b4e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7b50:	42bc      	cmp	r4, r7
   b7b52:	d006      	beq.n	b7b62 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7b54:	6833      	ldr	r3, [r6, #0]
   b7b56:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7b5a:	689b      	ldr	r3, [r3, #8]
   b7b5c:	4630      	mov	r0, r6
   b7b5e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7b60:	e7f6      	b.n	b7b50 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7b62:	4628      	mov	r0, r5
   b7b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b66 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7b66:	7c00      	ldrb	r0, [r0, #16]
   b7b68:	2200      	movs	r2, #0
   b7b6a:	f7ff b987 	b.w	b6e7c <hal_i2c_write>

000b7b6e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7b6e:	7c00      	ldrb	r0, [r0, #16]
   b7b70:	2100      	movs	r1, #0
   b7b72:	f7ff b98b 	b.w	b6e8c <hal_i2c_available>

000b7b76 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7b76:	7c00      	ldrb	r0, [r0, #16]
   b7b78:	2100      	movs	r1, #0
   b7b7a:	f7ff b98f 	b.w	b6e9c <hal_i2c_read>

000b7b7e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7b7e:	7c00      	ldrb	r0, [r0, #16]
   b7b80:	2100      	movs	r1, #0
   b7b82:	f7ff b993 	b.w	b6eac <hal_i2c_peek>

000b7b86 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7b86:	7c00      	ldrb	r0, [r0, #16]
   b7b88:	2100      	movs	r1, #0
   b7b8a:	f7ff b997 	b.w	b6ebc <hal_i2c_flush>

000b7b8e <_ZN7TwoWireD0Ev>:
   b7b8e:	b510      	push	{r4, lr}
   b7b90:	2114      	movs	r1, #20
   b7b92:	4604      	mov	r4, r0
   b7b94:	f7fc fa83 	bl	b409e <_ZdlPvj>
   b7b98:	4620      	mov	r0, r4
   b7b9a:	bd10      	pop	{r4, pc}

000b7b9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7b9c:	b510      	push	{r4, lr}
   b7b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7ba2:	4604      	mov	r4, r0
   b7ba4:	4608      	mov	r0, r1
   b7ba6:	2100      	movs	r1, #0
   b7ba8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7bac:	4b03      	ldr	r3, [pc, #12]	; (b7bbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7bae:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7bb0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7bb2:	4611      	mov	r1, r2
   b7bb4:	f7ff f98a 	bl	b6ecc <hal_i2c_init>
}
   b7bb8:	4620      	mov	r0, r4
   b7bba:	bd10      	pop	{r4, pc}
   b7bbc:	000bcc08 	.word	0x000bcc08

000b7bc0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7bc0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7bc2:	2100      	movs	r1, #0
   b7bc4:	7c00      	ldrb	r0, [r0, #16]
   b7bc6:	f7ff f989 	bl	b6edc <hal_i2c_lock>
}
   b7bca:	fab0 f080 	clz	r0, r0
   b7bce:	0940      	lsrs	r0, r0, #5
   b7bd0:	bd08      	pop	{r3, pc}

000b7bd2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b7bd2:	b510      	push	{r4, lr}
      if (_M_empty())
   b7bd4:	6883      	ldr	r3, [r0, #8]
   b7bd6:	4604      	mov	r4, r0
   b7bd8:	b90b      	cbnz	r3, b7bde <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7bda:	f001 fc60 	bl	b949e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7bde:	68c3      	ldr	r3, [r0, #12]
   b7be0:	4798      	blx	r3
      if (_M_manager)
   b7be2:	68a3      	ldr	r3, [r4, #8]
   b7be4:	b11b      	cbz	r3, b7bee <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7be6:	2203      	movs	r2, #3
   b7be8:	4621      	mov	r1, r4
   b7bea:	4620      	mov	r0, r4
   b7bec:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7bee:	4620      	mov	r0, r4
   b7bf0:	2110      	movs	r1, #16
}
   b7bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7bf6:	f7fc ba52 	b.w	b409e <_ZdlPvj>

000b7bfa <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7bfa:	4770      	bx	lr

000b7bfc <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7bfc:	7441      	strb	r1, [r0, #17]
}
   b7bfe:	4770      	bx	lr

000b7c00 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7c00:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7c02:	7c00      	ldrb	r0, [r0, #16]
   b7c04:	f7ff f9e2 	bl	b6fcc <hal_usart_available_data_for_write>
}
   b7c08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7c0c:	bd08      	pop	{r3, pc}

000b7c0e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7c0e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7c10:	7c00      	ldrb	r0, [r0, #16]
   b7c12:	f7ff f9bb 	bl	b6f8c <hal_usart_available>
}
   b7c16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7c1a:	bd08      	pop	{r3, pc}

000b7c1c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7c1c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7c1e:	7c00      	ldrb	r0, [r0, #16]
   b7c20:	f7ff f9c4 	bl	b6fac <hal_usart_peek>
}
   b7c24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c28:	bd08      	pop	{r3, pc}

000b7c2a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7c2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7c2c:	7c00      	ldrb	r0, [r0, #16]
   b7c2e:	f7ff f9b5 	bl	b6f9c <hal_usart_read>
}
   b7c32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c36:	bd08      	pop	{r3, pc}

000b7c38 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7c38:	7c00      	ldrb	r0, [r0, #16]
   b7c3a:	f7ff b9bf 	b.w	b6fbc <hal_usart_flush>

000b7c3e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c40:	7c45      	ldrb	r5, [r0, #17]
{
   b7c42:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c44:	b12d      	cbz	r5, b7c52 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7c46:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7c48:	b003      	add	sp, #12
   b7c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7c4e:	f7ff b995 	b.w	b6f7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c52:	7c00      	ldrb	r0, [r0, #16]
   b7c54:	9101      	str	r1, [sp, #4]
   b7c56:	f7ff f9b9 	bl	b6fcc <hal_usart_available_data_for_write>
   b7c5a:	2800      	cmp	r0, #0
   b7c5c:	9901      	ldr	r1, [sp, #4]
   b7c5e:	dcf2      	bgt.n	b7c46 <_ZN11USARTSerial5writeEh+0x8>
}
   b7c60:	4628      	mov	r0, r5
   b7c62:	b003      	add	sp, #12
   b7c64:	bd30      	pop	{r4, r5, pc}

000b7c66 <_ZN11USARTSerialD0Ev>:
   b7c66:	b510      	push	{r4, lr}
   b7c68:	2114      	movs	r1, #20
   b7c6a:	4604      	mov	r4, r0
   b7c6c:	f7fc fa17 	bl	b409e <_ZdlPvj>
   b7c70:	4620      	mov	r0, r4
   b7c72:	bd10      	pop	{r4, pc}

000b7c74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7c74:	b510      	push	{r4, lr}
   b7c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c7a:	4604      	mov	r4, r0
   b7c7c:	4608      	mov	r0, r1
   b7c7e:	4611      	mov	r1, r2
   b7c80:	2200      	movs	r2, #0
   b7c82:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7c86:	4b04      	ldr	r3, [pc, #16]	; (b7c98 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7c88:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7c8a:	2301      	movs	r3, #1
  _serial = serial;
   b7c8c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7c8e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7c90:	f7ff f9ac 	bl	b6fec <hal_usart_init_ex>
}
   b7c94:	4620      	mov	r0, r4
   b7c96:	bd10      	pop	{r4, pc}
   b7c98:	000bcc30 	.word	0x000bcc30

000b7c9c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7c9c:	7c00      	ldrb	r0, [r0, #16]
   b7c9e:	2300      	movs	r3, #0
   b7ca0:	f7ff b99c 	b.w	b6fdc <hal_usart_begin_config>

000b7ca4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7ca4:	2200      	movs	r2, #0
   b7ca6:	f7ff bff9 	b.w	b7c9c <_ZN11USARTSerial5beginEmm>

000b7caa <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7caa:	2200      	movs	r2, #0
   b7cac:	6840      	ldr	r0, [r0, #4]
   b7cae:	4611      	mov	r1, r2
   b7cb0:	f7ff babe 	b.w	b7230 <network_ready>

000b7cb4 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b7cb4:	2200      	movs	r2, #0
   b7cb6:	6840      	ldr	r0, [r0, #4]
   b7cb8:	4611      	mov	r1, r2
   b7cba:	f7ff bad9 	b.w	b7270 <network_listening>

000b7cbe <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7cbe:	2200      	movs	r2, #0
   b7cc0:	6840      	ldr	r0, [r0, #4]
   b7cc2:	4611      	mov	r1, r2
   b7cc4:	f7ff bae4 	b.w	b7290 <network_get_listen_timeout>

000b7cc8 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7cc8:	6840      	ldr	r0, [r0, #4]
   b7cca:	2200      	movs	r2, #0
   b7ccc:	f7ff bad8 	b.w	b7280 <network_set_listen_timeout>

000b7cd0 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7cd0:	6840      	ldr	r0, [r0, #4]
   b7cd2:	2200      	movs	r2, #0
   b7cd4:	f081 0101 	eor.w	r1, r1, #1
   b7cd8:	f7ff bac2 	b.w	b7260 <network_listen>

000b7cdc <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7cdc:	2300      	movs	r3, #0
   b7cde:	6840      	ldr	r0, [r0, #4]
   b7ce0:	461a      	mov	r2, r3
   b7ce2:	4619      	mov	r1, r3
   b7ce4:	f7ff bab4 	b.w	b7250 <network_off>

000b7ce8 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7ce8:	2300      	movs	r3, #0
   b7cea:	6840      	ldr	r0, [r0, #4]
   b7cec:	461a      	mov	r2, r3
   b7cee:	4619      	mov	r1, r3
   b7cf0:	f7ff baa6 	b.w	b7240 <network_on>

000b7cf4 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7cf4:	2200      	movs	r2, #0
   b7cf6:	6840      	ldr	r0, [r0, #4]
   b7cf8:	4611      	mov	r1, r2
   b7cfa:	f7ff ba89 	b.w	b7210 <network_connecting>

000b7cfe <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7cfe:	6840      	ldr	r0, [r0, #4]
   b7d00:	2200      	movs	r2, #0
   b7d02:	2102      	movs	r1, #2
   b7d04:	f7ff ba8c 	b.w	b7220 <network_disconnect>

000b7d08 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7d08:	2300      	movs	r3, #0
   b7d0a:	6840      	ldr	r0, [r0, #4]
   b7d0c:	461a      	mov	r2, r3
   b7d0e:	f7ff ba77 	b.w	b7200 <network_connect>
	...

000b7d14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b7d14:	4b08      	ldr	r3, [pc, #32]	; (b7d38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b7d16:	b510      	push	{r4, lr}
   b7d18:	2428      	movs	r4, #40	; 0x28
   b7d1a:	4622      	mov	r2, r4
   b7d1c:	4618      	mov	r0, r3
   b7d1e:	2100      	movs	r1, #0
   b7d20:	f002 f9d1 	bl	ba0c6 <memset>
   b7d24:	4b05      	ldr	r3, [pc, #20]	; (b7d3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b7d26:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7d2c:	6042      	str	r2, [r0, #4]
   b7d2e:	2204      	movs	r2, #4
   b7d30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b7d32:	4a03      	ldr	r2, [pc, #12]	; (b7d40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7d34:	601a      	str	r2, [r3, #0]
   b7d36:	bd10      	pop	{r4, pc}
   b7d38:	2003e670 	.word	0x2003e670
   b7d3c:	2003e668 	.word	0x2003e668
   b7d40:	000bcc60 	.word	0x000bcc60

000b7d44 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d44:	7441      	strb	r1, [r0, #17]
}
   b7d46:	4770      	bx	lr

000b7d48 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d48:	4770      	bx	lr

000b7d4a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7d4a:	4770      	bx	lr

000b7d4c <_ZN9USBSerial4readEv>:
{
   b7d4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7d4e:	2100      	movs	r1, #0
   b7d50:	7c00      	ldrb	r0, [r0, #16]
   b7d52:	f7ff f87b 	bl	b6e4c <HAL_USB_USART_Receive_Data>
}
   b7d56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d5a:	bd08      	pop	{r3, pc}

000b7d5c <_ZN9USBSerial4peekEv>:
{
   b7d5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7d5e:	2101      	movs	r1, #1
   b7d60:	7c00      	ldrb	r0, [r0, #16]
   b7d62:	f7ff f873 	bl	b6e4c <HAL_USB_USART_Receive_Data>
}
   b7d66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d6a:	bd08      	pop	{r3, pc}

000b7d6c <_ZN9USBSerial17availableForWriteEv>:
{
   b7d6c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7d6e:	7c00      	ldrb	r0, [r0, #16]
   b7d70:	f7ff f864 	bl	b6e3c <HAL_USB_USART_Available_Data_For_Write>
}
   b7d74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d78:	bd08      	pop	{r3, pc}

000b7d7a <_ZN9USBSerial9availableEv>:
{
   b7d7a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7d7c:	7c00      	ldrb	r0, [r0, #16]
   b7d7e:	f7ff f855 	bl	b6e2c <HAL_USB_USART_Available_Data>
}
   b7d82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d86:	bd08      	pop	{r3, pc}

000b7d88 <_ZN9USBSerial5writeEh>:
{
   b7d88:	b513      	push	{r0, r1, r4, lr}
   b7d8a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d8c:	7c00      	ldrb	r0, [r0, #16]
{
   b7d8e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d90:	f7ff f854 	bl	b6e3c <HAL_USB_USART_Available_Data_For_Write>
   b7d94:	2800      	cmp	r0, #0
   b7d96:	9901      	ldr	r1, [sp, #4]
   b7d98:	dc01      	bgt.n	b7d9e <_ZN9USBSerial5writeEh+0x16>
   b7d9a:	7c60      	ldrb	r0, [r4, #17]
   b7d9c:	b120      	cbz	r0, b7da8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7d9e:	7c20      	ldrb	r0, [r4, #16]
   b7da0:	f7ff f85c 	bl	b6e5c <HAL_USB_USART_Send_Data>
   b7da4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7da8:	b002      	add	sp, #8
   b7daa:	bd10      	pop	{r4, pc}

000b7dac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7dac:	7c00      	ldrb	r0, [r0, #16]
   b7dae:	f7ff b85d 	b.w	b6e6c <HAL_USB_USART_Flush_Data>

000b7db2 <_ZN9USBSerialD0Ev>:
   b7db2:	b510      	push	{r4, lr}
   b7db4:	2114      	movs	r1, #20
   b7db6:	4604      	mov	r4, r0
   b7db8:	f7fc f971 	bl	b409e <_ZdlPvj>
   b7dbc:	4620      	mov	r0, r4
   b7dbe:	bd10      	pop	{r4, pc}

000b7dc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7dc0:	b510      	push	{r4, lr}
   b7dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7dc6:	4604      	mov	r4, r0
   b7dc8:	4608      	mov	r0, r1
   b7dca:	2100      	movs	r1, #0
   b7dcc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7dd0:	4b04      	ldr	r3, [pc, #16]	; (b7de4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7dd2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7dd4:	2301      	movs	r3, #1
  _serial = serial;
   b7dd6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7dd8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7dda:	4611      	mov	r1, r2
   b7ddc:	f7ff f816 	bl	b6e0c <HAL_USB_USART_Init>
}
   b7de0:	4620      	mov	r0, r4
   b7de2:	bd10      	pop	{r4, pc}
   b7de4:	000bcc9c 	.word	0x000bcc9c

000b7de8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7de8:	7c00      	ldrb	r0, [r0, #16]
   b7dea:	2200      	movs	r2, #0
   b7dec:	f7ff b816 	b.w	b6e1c <HAL_USB_USART_Begin>

000b7df0 <_Z19acquireSerialBufferv>:
{
   b7df0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7df2:	2214      	movs	r2, #20
{
   b7df4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7df6:	2100      	movs	r1, #0
   b7df8:	f002 f965 	bl	ba0c6 <memset>
}
   b7dfc:	4620      	mov	r0, r4
   b7dfe:	bd10      	pop	{r4, pc}

000b7e00 <_Z16_fetch_usbserialv>:
{
   b7e00:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e02:	4c0f      	ldr	r4, [pc, #60]	; (b7e40 <_Z16_fetch_usbserialv+0x40>)
{
   b7e04:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7e06:	a803      	add	r0, sp, #12
   b7e08:	f7ff fff2 	bl	b7df0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e0c:	7821      	ldrb	r1, [r4, #0]
   b7e0e:	f3bf 8f5b 	dmb	ish
   b7e12:	f011 0101 	ands.w	r1, r1, #1
   b7e16:	d10f      	bne.n	b7e38 <_Z16_fetch_usbserialv+0x38>
   b7e18:	4620      	mov	r0, r4
   b7e1a:	9101      	str	r1, [sp, #4]
   b7e1c:	f7fc f941 	bl	b40a2 <__cxa_guard_acquire>
   b7e20:	9901      	ldr	r1, [sp, #4]
   b7e22:	b148      	cbz	r0, b7e38 <_Z16_fetch_usbserialv+0x38>
   b7e24:	aa03      	add	r2, sp, #12
   b7e26:	4807      	ldr	r0, [pc, #28]	; (b7e44 <_Z16_fetch_usbserialv+0x44>)
   b7e28:	f7ff ffca 	bl	b7dc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	f7fc f93d 	bl	b40ac <__cxa_guard_release>
   b7e32:	4805      	ldr	r0, [pc, #20]	; (b7e48 <_Z16_fetch_usbserialv+0x48>)
   b7e34:	f002 f92c 	bl	ba090 <atexit>
	return _usbserial;
}
   b7e38:	4802      	ldr	r0, [pc, #8]	; (b7e44 <_Z16_fetch_usbserialv+0x44>)
   b7e3a:	b008      	add	sp, #32
   b7e3c:	bd10      	pop	{r4, pc}
   b7e3e:	bf00      	nop
   b7e40:	2003e698 	.word	0x2003e698
   b7e44:	2003e69c 	.word	0x2003e69c
   b7e48:	000b7d49 	.word	0x000b7d49

000b7e4c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b7e4c:	4770      	bx	lr

000b7e4e <_ZN9IPAddressD0Ev>:
   b7e4e:	b510      	push	{r4, lr}
   b7e50:	2118      	movs	r1, #24
   b7e52:	4604      	mov	r4, r0
   b7e54:	f7fc f923 	bl	b409e <_ZdlPvj>
   b7e58:	4620      	mov	r0, r4
   b7e5a:	bd10      	pop	{r4, pc}

000b7e5c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7e5e:	7d03      	ldrb	r3, [r0, #20]
   b7e60:	2b06      	cmp	r3, #6
{
   b7e62:	b08d      	sub	sp, #52	; 0x34
   b7e64:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e66:	f100 0704 	add.w	r7, r0, #4
   b7e6a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7e6e:	d012      	beq.n	b7e96 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7e70:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7e74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7e78:	220a      	movs	r2, #10
   b7e7a:	4630      	mov	r0, r6
   b7e7c:	f000 fd47 	bl	b890e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7e80:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7e82:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7e84:	d019      	beq.n	b7eba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7e86:	2c00      	cmp	r4, #0
   b7e88:	d0f4      	beq.n	b7e74 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7e8a:	212e      	movs	r1, #46	; 0x2e
   b7e8c:	4630      	mov	r0, r6
   b7e8e:	f000 fd25 	bl	b88dc <_ZN5Print5printEc>
   b7e92:	4404      	add	r4, r0
   b7e94:	e7ee      	b.n	b7e74 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e96:	232f      	movs	r3, #47	; 0x2f
   b7e98:	466a      	mov	r2, sp
   b7e9a:	4639      	mov	r1, r7
   b7e9c:	200a      	movs	r0, #10
		buf[0] = 0;
   b7e9e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7ea2:	f7ff f8ab 	bl	b6ffc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7ea6:	4668      	mov	r0, sp
   b7ea8:	f002 f981 	bl	ba1ae <strlen>
   b7eac:	6833      	ldr	r3, [r6, #0]
   b7eae:	4602      	mov	r2, r0
   b7eb0:	68db      	ldr	r3, [r3, #12]
   b7eb2:	4669      	mov	r1, sp
   b7eb4:	4630      	mov	r0, r6
   b7eb6:	4798      	blx	r3
   b7eb8:	4604      	mov	r4, r0
    }
    return n;
}
   b7eba:	4620      	mov	r0, r4
   b7ebc:	b00d      	add	sp, #52	; 0x34
   b7ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ec0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7ec0:	b510      	push	{r4, lr}
   b7ec2:	4b05      	ldr	r3, [pc, #20]	; (b7ed8 <_ZN9IPAddressC1Ev+0x18>)
   b7ec4:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b7ec6:	2211      	movs	r2, #17
   b7ec8:	f840 3b04 	str.w	r3, [r0], #4
   b7ecc:	2100      	movs	r1, #0
   b7ece:	f002 f8fa 	bl	ba0c6 <memset>
}
   b7ed2:	4620      	mov	r0, r4
   b7ed4:	bd10      	pop	{r4, pc}
   b7ed6:	bf00      	nop
   b7ed8:	000bcccc 	.word	0x000bcccc

000b7edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7edc:	4603      	mov	r3, r0
   b7ede:	4a07      	ldr	r2, [pc, #28]	; (b7efc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7ee0:	b510      	push	{r4, lr}
   b7ee2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7ee6:	f101 0210 	add.w	r2, r1, #16
   b7eea:	f851 4b04 	ldr.w	r4, [r1], #4
   b7eee:	f843 4b04 	str.w	r4, [r3], #4
   b7ef2:	4291      	cmp	r1, r2
   b7ef4:	d1f9      	bne.n	b7eea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7ef6:	780a      	ldrb	r2, [r1, #0]
   b7ef8:	701a      	strb	r2, [r3, #0]
}
   b7efa:	bd10      	pop	{r4, pc}
   b7efc:	000bcccc 	.word	0x000bcccc

000b7f00 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7f00:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7f02:	2b04      	cmp	r3, #4
   b7f04:	d104      	bne.n	b7f10 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7f06:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7f08:	3800      	subs	r0, #0
   b7f0a:	bf18      	it	ne
   b7f0c:	2001      	movne	r0, #1
   b7f0e:	4770      	bx	lr
    } else if (version() == 6) {
   b7f10:	2b06      	cmp	r3, #6
   b7f12:	d107      	bne.n	b7f24 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7f14:	6843      	ldr	r3, [r0, #4]
   b7f16:	b93b      	cbnz	r3, b7f28 <_ZNK9IPAddresscvbEv+0x28>
   b7f18:	6883      	ldr	r3, [r0, #8]
   b7f1a:	b92b      	cbnz	r3, b7f28 <_ZNK9IPAddresscvbEv+0x28>
   b7f1c:	68c3      	ldr	r3, [r0, #12]
   b7f1e:	b91b      	cbnz	r3, b7f28 <_ZNK9IPAddresscvbEv+0x28>
   b7f20:	6900      	ldr	r0, [r0, #16]
   b7f22:	e7f1      	b.n	b7f08 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7f24:	2000      	movs	r0, #0
   b7f26:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7f28:	2001      	movs	r0, #1
}
   b7f2a:	4770      	bx	lr

000b7f2c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7f2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7f2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7f32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7f36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7f3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7f3e:	2304      	movs	r3, #4
   b7f40:	6041      	str	r1, [r0, #4]
   b7f42:	7503      	strb	r3, [r0, #20]
}
   b7f44:	bd10      	pop	{r4, pc}
	...

000b7f48 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b7f48:	b513      	push	{r0, r1, r4, lr}
   b7f4a:	4c04      	ldr	r4, [pc, #16]	; (b7f5c <_ZN9IPAddressC1Ehhhh+0x14>)
   b7f4c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b7f4e:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7f52:	9400      	str	r4, [sp, #0]
   b7f54:	f7ff ffea 	bl	b7f2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7f58:	b002      	add	sp, #8
   b7f5a:	bd10      	pop	{r4, pc}
   b7f5c:	000bcccc 	.word	0x000bcccc

000b7f60 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7f60:	b507      	push	{r0, r1, r2, lr}
   b7f62:	4b06      	ldr	r3, [pc, #24]	; (b7f7c <_ZN9IPAddressC1EPKh+0x1c>)
   b7f64:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7f66:	78cb      	ldrb	r3, [r1, #3]
   b7f68:	9300      	str	r3, [sp, #0]
   b7f6a:	788b      	ldrb	r3, [r1, #2]
   b7f6c:	784a      	ldrb	r2, [r1, #1]
   b7f6e:	7809      	ldrb	r1, [r1, #0]
   b7f70:	f7ff ffdc 	bl	b7f2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7f74:	b003      	add	sp, #12
   b7f76:	f85d fb04 	ldr.w	pc, [sp], #4
   b7f7a:	bf00      	nop
   b7f7c:	000bcccc 	.word	0x000bcccc

000b7f80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7f80:	4770      	bx	lr

000b7f82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7f82:	2000      	movs	r0, #0
   b7f84:	4770      	bx	lr

000b7f86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7f86:	b510      	push	{r4, lr}
   b7f88:	2110      	movs	r1, #16
   b7f8a:	4604      	mov	r4, r0
   b7f8c:	f7fc f887 	bl	b409e <_ZdlPvj>
   b7f90:	4620      	mov	r0, r4
   b7f92:	bd10      	pop	{r4, pc}

000b7f94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7f94:	b508      	push	{r3, lr}
      { delete this; }
   b7f96:	f7ff fff6 	bl	b7f86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7f9a:	bd08      	pop	{r3, pc}

000b7f9c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7f9c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7f9e:	2200      	movs	r2, #0
   b7fa0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7fa4:	6002      	str	r2, [r0, #0]
   b7fa6:	8084      	strh	r4, [r0, #4]
   b7fa8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7faa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7fac:	680c      	ldr	r4, [r1, #0]
   b7fae:	8085      	strh	r5, [r0, #4]
   b7fb0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fb2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7fb4:	bd30      	pop	{r4, r5, pc}

000b7fb6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7fb6:	b510      	push	{r4, lr}
   b7fb8:	4604      	mov	r4, r0
    free((void*)msg_);
   b7fba:	6800      	ldr	r0, [r0, #0]
   b7fbc:	f7ff f9e6 	bl	b738c <free>
}
   b7fc0:	4620      	mov	r0, r4
   b7fc2:	bd10      	pop	{r4, pc}

000b7fc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7fc4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7fc6:	68c4      	ldr	r4, [r0, #12]
   b7fc8:	b1f4      	cbz	r4, b8008 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b7fca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7fcc:	2b02      	cmp	r3, #2
   b7fce:	d103      	bne.n	b7fd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7fd0:	f104 000c 	add.w	r0, r4, #12
   b7fd4:	f7ff ffef 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7fd8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7fda:	b135      	cbz	r5, b7fea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7fdc:	4628      	mov	r0, r5
   b7fde:	f7fd f915 	bl	b520c <_ZNSt14_Function_baseD1Ev>
   b7fe2:	2110      	movs	r1, #16
   b7fe4:	4628      	mov	r0, r5
   b7fe6:	f7fc f85a 	bl	b409e <_ZdlPvj>
   b7fea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7fec:	b135      	cbz	r5, b7ffc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7fee:	4628      	mov	r0, r5
   b7ff0:	f7fd f90c 	bl	b520c <_ZNSt14_Function_baseD1Ev>
   b7ff4:	2110      	movs	r1, #16
   b7ff6:	4628      	mov	r0, r5
   b7ff8:	f7fc f851 	bl	b409e <_ZdlPvj>
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	2114      	movs	r1, #20
   b8000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8004:	f7fc b84b 	b.w	b409e <_ZdlPvj>
   b8008:	bd38      	pop	{r3, r4, r5, pc}

000b800a <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   b800a:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   b800c:	2100      	movs	r1, #0
   b800e:	f7ff b8e7 	b.w	b71e0 <spark_publish_vitals>

000b8012 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b8012:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b8014:	230c      	movs	r3, #12
   b8016:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b801a:	6803      	ldr	r3, [r0, #0]
   b801c:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b8020:	7a03      	ldrb	r3, [r0, #8]
   b8022:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b8026:	6843      	ldr	r3, [r0, #4]
   b8028:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b802a:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b802c:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b802e:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b8032:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b8034:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b8038:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b803c:	f7ff f8d8 	bl	b71f0 <spark_cloud_disconnect>
}
   b8040:	b005      	add	sp, #20
   b8042:	f85d fb04 	ldr.w	pc, [sp], #4

000b8046 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b8046:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b8048:	220c      	movs	r2, #12
   b804a:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b804e:	6802      	ldr	r2, [r0, #0]
   b8050:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b8054:	7a02      	ldrb	r2, [r0, #8]
   b8056:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b805a:	6842      	ldr	r2, [r0, #4]
   b805c:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b805e:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b8060:	7a42      	ldrb	r2, [r0, #9]
   b8062:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b8066:	4619      	mov	r1, r3
   b8068:	aa01      	add	r2, sp, #4
   b806a:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b806c:	f8ad 300d 	strh.w	r3, [sp, #13]
   b8070:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b8074:	f7ff f8a4 	bl	b71c0 <spark_set_connection_property>
}
   b8078:	b005      	add	sp, #20
   b807a:	f85d fb04 	ldr.w	pc, [sp], #4

000b807e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b807e:	680b      	ldr	r3, [r1, #0]
   b8080:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8082:	684b      	ldr	r3, [r1, #4]
   b8084:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8086:	b113      	cbz	r3, b808e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8088:	685a      	ldr	r2, [r3, #4]
   b808a:	3201      	adds	r2, #1
   b808c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b808e:	4770      	bx	lr

000b8090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8090:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8092:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8094:	4668      	mov	r0, sp
   b8096:	460d      	mov	r5, r1
   b8098:	f7ff fff1 	bl	b807e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b809c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b809e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b80a0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b80a2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b80a4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b80a6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b80a8:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b80aa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b80ac:	f7fc fb80 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b80b0:	b135      	cbz	r5, b80c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b80b2:	1d28      	adds	r0, r5, #4
   b80b4:	f7fc fb7c 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80b8:	2108      	movs	r1, #8
   b80ba:	4628      	mov	r0, r5
   b80bc:	f7fb ffef 	bl	b409e <_ZdlPvj>
        return p;
    }
   b80c0:	4620      	mov	r0, r4
   b80c2:	b003      	add	sp, #12
   b80c4:	bd30      	pop	{r4, r5, pc}

000b80c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b80c6:	b513      	push	{r0, r1, r4, lr}
   b80c8:	460b      	mov	r3, r1
   b80ca:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b80d0:	466c      	mov	r4, sp
   b80d2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b80d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   b80da:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b80de:	e894 0003 	ldmia.w	r4, {r0, r1}
   b80e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b80e6:	b002      	add	sp, #8
   b80e8:	bd10      	pop	{r4, pc}

000b80ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b80ea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b80ec:	b510      	push	{r4, lr}
      if (_M_empty())
   b80ee:	b90a      	cbnz	r2, b80f4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b80f0:	f001 f9d5 	bl	b949e <_ZSt25__throw_bad_function_callv>
    }
   b80f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b80f8:	68c3      	ldr	r3, [r0, #12]
   b80fa:	4718      	bx	r3

000b80fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b80fc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b80fe:	6800      	ldr	r0, [r0, #0]
   b8100:	f100 0110 	add.w	r1, r0, #16
   b8104:	f7ff fff1 	bl	b80ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8108:	bd08      	pop	{r3, pc}

000b810a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b810a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b810c:	b510      	push	{r4, lr}
      if (_M_empty())
   b810e:	b90a      	cbnz	r2, b8114 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8110:	f001 f9c5 	bl	b949e <_ZSt25__throw_bad_function_callv>
    }
   b8114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8118:	68c3      	ldr	r3, [r0, #12]
   b811a:	4718      	bx	r3

000b811c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b811c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b811e:	6800      	ldr	r0, [r0, #0]
   b8120:	f100 0110 	add.w	r1, r0, #16
   b8124:	f7ff fff1 	bl	b810a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8128:	bd08      	pop	{r3, pc}
	...

000b812c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b812c:	b538      	push	{r3, r4, r5, lr}
   b812e:	2300      	movs	r3, #0
   b8130:	4604      	mov	r4, r0
   b8132:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8134:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b8136:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8138:	f7fb ffad 	bl	b4096 <_Znwj>
   b813c:	b128      	cbz	r0, b814a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b813e:	2301      	movs	r3, #1
   b8140:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8144:	4b02      	ldr	r3, [pc, #8]	; (b8150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b8146:	6003      	str	r3, [r0, #0]
   b8148:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b814a:	6020      	str	r0, [r4, #0]
	}
   b814c:	4620      	mov	r0, r4
   b814e:	bd38      	pop	{r3, r4, r5, pc}
   b8150:	000bcce0 	.word	0x000bcce0

000b8154 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8154:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8156:	2300      	movs	r3, #0
   b8158:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b815a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b815c:	4604      	mov	r4, r0
   b815e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8160:	b12b      	cbz	r3, b816e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8162:	2202      	movs	r2, #2
   b8164:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8166:	68eb      	ldr	r3, [r5, #12]
   b8168:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b816a:	68ab      	ldr	r3, [r5, #8]
   b816c:	60a3      	str	r3, [r4, #8]
    }
   b816e:	4620      	mov	r0, r4
   b8170:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8174:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8176:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b8178:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b817a:	4668      	mov	r0, sp
   b817c:	f7ff ff0e 	bl	b7f9c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8180:	f04f 0302 	mov.w	r3, #2
   b8184:	e8d4 2f4f 	ldrexb	r2, [r4]
   b8188:	2a00      	cmp	r2, #0
   b818a:	d103      	bne.n	b8194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b818c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8190:	2900      	cmp	r1, #0
   b8192:	d1f7      	bne.n	b8184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8194:	d125      	bne.n	b81e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b8196:	f104 050c 	add.w	r5, r4, #12
   b819a:	4669      	mov	r1, sp
   b819c:	4628      	mov	r0, r5
   b819e:	f7ff fefd 	bl	b7f9c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b81a2:	f3bf 8f5b 	dmb	ish
   b81a6:	2301      	movs	r3, #1
   b81a8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b81aa:	2000      	movs	r0, #0
   b81ac:	f104 0308 	add.w	r3, r4, #8
   b81b0:	f3bf 8f5b 	dmb	ish
   b81b4:	e853 6f00 	ldrex	r6, [r3]
   b81b8:	e843 0200 	strex	r2, r0, [r3]
   b81bc:	2a00      	cmp	r2, #0
   b81be:	d1f9      	bne.n	b81b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b81c0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b81c4:	b16e      	cbz	r6, b81e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b81c6:	f7ff f8a3 	bl	b7310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b81ca:	b178      	cbz	r0, b81ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b81cc:	4629      	mov	r1, r5
   b81ce:	4630      	mov	r0, r6
   b81d0:	f7ff ff8b 	bl	b80ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b81d4:	4630      	mov	r0, r6
   b81d6:	f7fd f819 	bl	b520c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b81da:	2110      	movs	r1, #16
   b81dc:	4630      	mov	r0, r6
   b81de:	f7fb ff5e 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b81e2:	4668      	mov	r0, sp
   b81e4:	f7ff fee7 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
    }
   b81e8:	b009      	add	sp, #36	; 0x24
   b81ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b81ec:	4631      	mov	r1, r6
   b81ee:	a802      	add	r0, sp, #8
   b81f0:	f7ff ffb0 	bl	b8154 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b81f4:	68e0      	ldr	r0, [r4, #12]
   b81f6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b81fa:	b108      	cbz	r0, b8200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b81fc:	f001 ffba 	bl	ba174 <strdup>
        type_(type) {
   b8200:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8202:	2010      	movs	r0, #16
   b8204:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8208:	f7fb ff45 	bl	b4096 <_Znwj>
   b820c:	4605      	mov	r5, r0
   b820e:	b1e8      	cbz	r0, b824c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8210:	2700      	movs	r7, #0
   b8212:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8214:	2018      	movs	r0, #24
   b8216:	f7fb ff3e 	bl	b4096 <_Znwj>
   b821a:	4604      	mov	r4, r0
   b821c:	b188      	cbz	r0, b8242 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b821e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8220:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8222:	a802      	add	r0, sp, #8
   b8224:	f7ff ff4f 	bl	b80c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8228:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b822a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b822c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b822e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8230:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8232:	a906      	add	r1, sp, #24
   b8234:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8236:	60e3      	str	r3, [r4, #12]
   b8238:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b823c:	9205      	str	r2, [sp, #20]
   b823e:	f7ff fead 	bl	b7f9c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8242:	4b08      	ldr	r3, [pc, #32]	; (b8264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8244:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8246:	4b08      	ldr	r3, [pc, #32]	; (b8268 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8248:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b824a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b824c:	a806      	add	r0, sp, #24
   b824e:	f7ff feb2 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8252:	a802      	add	r0, sp, #8
   b8254:	f7fc ffda 	bl	b520c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8258:	2200      	movs	r2, #0
   b825a:	4629      	mov	r1, r5
   b825c:	4803      	ldr	r0, [pc, #12]	; (b826c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b825e:	f7ff f85f 	bl	b7320 <application_thread_invoke>
   b8262:	e7b7      	b.n	b81d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8264:	000b80fd 	.word	0x000b80fd
   b8268:	000b8381 	.word	0x000b8381
   b826c:	000b7bd3 	.word	0x000b7bd3

000b8270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8274:	b08b      	sub	sp, #44	; 0x2c
   b8276:	4605      	mov	r5, r0
   b8278:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b827c:	460f      	mov	r7, r1
   b827e:	4690      	mov	r8, r2
   b8280:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8282:	f7fe ff75 	bl	b7170 <spark_cloud_flag_connected>
   b8286:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b8288:	4683      	mov	fp, r0
   b828a:	bb38      	cbnz	r0, b82dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b828c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8290:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8292:	a905      	add	r1, sp, #20
   b8294:	4630      	mov	r0, r6
   b8296:	f8ad 3018 	strh.w	r3, [sp, #24]
   b829a:	f7ff fe7f 	bl	b7f9c <_ZN8particle5ErrorC1EOS0_>
   b829e:	2014      	movs	r0, #20
   b82a0:	f7fb fef9 	bl	b4096 <_Znwj>
   b82a4:	4604      	mov	r4, r0
   b82a6:	b148      	cbz	r0, b82bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b82a8:	2302      	movs	r3, #2
   b82aa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b82ac:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b82ae:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b82b2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b82b4:	4631      	mov	r1, r6
   b82b6:	300c      	adds	r0, #12
   b82b8:	f7ff fe70 	bl	b7f9c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b82bc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b82be:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b82c0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b82c4:	f7ff ff32 	bl	b812c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b82c8:	4630      	mov	r0, r6
   b82ca:	f7ff fe74 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b82ce:	a805      	add	r0, sp, #20
   b82d0:	f7ff fe71 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
}
   b82d4:	4628      	mov	r0, r5
   b82d6:	b00b      	add	sp, #44	; 0x2c
   b82d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b82dc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b82de:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b82e0:	2014      	movs	r0, #20
   b82e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b82e6:	9307      	str	r3, [sp, #28]
   b82e8:	f7fb fed5 	bl	b4096 <_Znwj>
   b82ec:	4601      	mov	r1, r0
   b82ee:	b118      	cbz	r0, b82f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b82f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b82f4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b82f6:	7044      	strb	r4, [r0, #1]
   b82f8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b82fa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b82fc:	f7ff ff16 	bl	b812c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8300:	4b1e      	ldr	r3, [pc, #120]	; (b837c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8302:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8304:	2008      	movs	r0, #8
   b8306:	f7fb fec6 	bl	b4096 <_Znwj>
   b830a:	4604      	mov	r4, r0
   b830c:	b110      	cbz	r0, b8314 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b830e:	a903      	add	r1, sp, #12
   b8310:	f7ff feb5 	bl	b807e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8314:	9600      	str	r6, [sp, #0]
   b8316:	fa5f f38a 	uxtb.w	r3, sl
   b831a:	464a      	mov	r2, r9
   b831c:	4641      	mov	r1, r8
   b831e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8320:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8322:	f7fe ff35 	bl	b7190 <spark_send_event>
   b8326:	b9b8      	cbnz	r0, b8358 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8328:	9b03      	ldr	r3, [sp, #12]
   b832a:	785b      	ldrb	r3, [r3, #1]
   b832c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8330:	b993      	cbnz	r3, b8358 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8332:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8336:	a905      	add	r1, sp, #20
   b8338:	a803      	add	r0, sp, #12
   b833a:	9205      	str	r2, [sp, #20]
   b833c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8340:	f7ff ff18 	bl	b8174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8344:	a805      	add	r0, sp, #20
   b8346:	f7ff fe36 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b834a:	a805      	add	r0, sp, #20
   b834c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b834e:	f7ff fe9f 	bl	b8090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8352:	a806      	add	r0, sp, #24
   b8354:	f7fc fa2c 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8358:	a903      	add	r1, sp, #12
   b835a:	a805      	add	r0, sp, #20
   b835c:	f7ff fe8f 	bl	b807e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8360:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8362:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8364:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8366:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8368:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b836a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b836c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b836e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8370:	f7fc fa1e 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8374:	a804      	add	r0, sp, #16
   b8376:	f7fc fa1b 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b837a:	e7ab      	b.n	b82d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b837c:	000b83fd 	.word	0x000b83fd

000b8380 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8380:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8384:	4605      	mov	r5, r0
	switch (__op)
   b8386:	d103      	bne.n	b8390 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8388:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b838a:	6003      	str	r3, [r0, #0]
      }
   b838c:	2000      	movs	r0, #0
   b838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8390:	2a02      	cmp	r2, #2
   b8392:	d010      	beq.n	b83b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8394:	2a03      	cmp	r2, #3
   b8396:	d1f9      	bne.n	b838c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8398:	6804      	ldr	r4, [r0, #0]
   b839a:	2c00      	cmp	r4, #0
   b839c:	d0f6      	beq.n	b838c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b839e:	f104 0010 	add.w	r0, r4, #16
   b83a2:	f7ff fe08 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b83a6:	4620      	mov	r0, r4
   b83a8:	f7fc ff30 	bl	b520c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b83ac:	2118      	movs	r1, #24
   b83ae:	4620      	mov	r0, r4
   b83b0:	f7fb fe75 	bl	b409e <_ZdlPvj>
   b83b4:	e7ea      	b.n	b838c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b83b6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b83b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b83ba:	f7fb fe6c 	bl	b4096 <_Znwj>
   b83be:	4604      	mov	r4, r0
   b83c0:	b150      	cbz	r0, b83d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b83c2:	4631      	mov	r1, r6
   b83c4:	f7ff fec6 	bl	b8154 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b83c8:	6930      	ldr	r0, [r6, #16]
   b83ca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b83ce:	b108      	cbz	r0, b83d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b83d0:	f001 fed0 	bl	ba174 <strdup>
        type_(type) {
   b83d4:	6120      	str	r0, [r4, #16]
   b83d6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b83d8:	602c      	str	r4, [r5, #0]
	}
   b83da:	e7d7      	b.n	b838c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b83dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b83dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b83de:	2300      	movs	r3, #0
   b83e0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b83e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b83e4:	4604      	mov	r4, r0
   b83e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b83e8:	b12b      	cbz	r3, b83f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b83ea:	2202      	movs	r2, #2
   b83ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b83ee:	68eb      	ldr	r3, [r5, #12]
   b83f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b83f2:	68ab      	ldr	r3, [r5, #8]
   b83f4:	60a3      	str	r3, [r4, #8]
    }
   b83f6:	4620      	mov	r0, r4
   b83f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b83fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b83fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b83fe:	b089      	sub	sp, #36	; 0x24
   b8400:	4604      	mov	r4, r0
   b8402:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8404:	a801      	add	r0, sp, #4
   b8406:	4611      	mov	r1, r2
   b8408:	f7ff fe42 	bl	b8090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b840c:	b1a4      	cbz	r4, b8438 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b840e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8410:	b11d      	cbz	r5, b841a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8412:	4628      	mov	r0, r5
   b8414:	f001 feae 	bl	ba174 <strdup>
   b8418:	4605      	mov	r5, r0
   b841a:	a801      	add	r0, sp, #4
   b841c:	a903      	add	r1, sp, #12
        type_(type) {
   b841e:	9503      	str	r5, [sp, #12]
   b8420:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8424:	f7ff fea6 	bl	b8174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8428:	a803      	add	r0, sp, #12
   b842a:	f7ff fdc4 	bl	b7fb6 <_ZN8particle5ErrorD1Ev>
   b842e:	a802      	add	r0, sp, #8
   b8430:	f7fc f9be 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8434:	b009      	add	sp, #36	; 0x24
   b8436:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8438:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b843a:	2301      	movs	r3, #1
   b843c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8440:	2a00      	cmp	r2, #0
   b8442:	d103      	bne.n	b844c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8444:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8448:	2900      	cmp	r1, #0
   b844a:	d1f7      	bne.n	b843c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b844c:	d1ef      	bne.n	b842e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b844e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8450:	f3bf 8f5b 	dmb	ish
   b8454:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8456:	1d2b      	adds	r3, r5, #4
   b8458:	f3bf 8f5b 	dmb	ish
   b845c:	e853 6f00 	ldrex	r6, [r3]
   b8460:	e843 4200 	strex	r2, r4, [r3]
   b8464:	2a00      	cmp	r2, #0
   b8466:	d1f9      	bne.n	b845c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8468:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b846c:	2e00      	cmp	r6, #0
   b846e:	d0de      	beq.n	b842e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8470:	4620      	mov	r0, r4
   b8472:	f7fe ff4d 	bl	b7310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8476:	4607      	mov	r7, r0
   b8478:	b160      	cbz	r0, b8494 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b847a:	f105 010c 	add.w	r1, r5, #12
   b847e:	4630      	mov	r0, r6
   b8480:	f7ff fe43 	bl	b810a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8484:	4630      	mov	r0, r6
   b8486:	f7fc fec1 	bl	b520c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b848a:	2110      	movs	r1, #16
   b848c:	4630      	mov	r0, r6
   b848e:	f7fb fe06 	bl	b409e <_ZdlPvj>
   b8492:	e7cc      	b.n	b842e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8494:	4631      	mov	r1, r6
   b8496:	a803      	add	r0, sp, #12
   b8498:	f7ff ffa0 	bl	b83dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b849c:	7b2b      	ldrb	r3, [r5, #12]
   b849e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b84a2:	2010      	movs	r0, #16
   b84a4:	f7fb fdf7 	bl	b4096 <_Znwj>
   b84a8:	4605      	mov	r5, r0
   b84aa:	b1d0      	cbz	r0, b84e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b84ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b84ae:	2014      	movs	r0, #20
   b84b0:	f7fb fdf1 	bl	b4096 <_Znwj>
   b84b4:	4604      	mov	r4, r0
   b84b6:	b178      	cbz	r0, b84d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b84b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b84ba:	4601      	mov	r1, r0
   b84bc:	a803      	add	r0, sp, #12
   b84be:	f7ff fe02 	bl	b80c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b84c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b84c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b84ca:	9205      	str	r2, [sp, #20]
   b84cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b84ce:	60e3      	str	r3, [r4, #12]
   b84d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b84d4:	9206      	str	r2, [sp, #24]
   b84d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b84d8:	4b06      	ldr	r3, [pc, #24]	; (b84f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b84da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b84dc:	4b06      	ldr	r3, [pc, #24]	; (b84f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b84de:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b84e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b84e2:	a803      	add	r0, sp, #12
   b84e4:	f7fc fe92 	bl	b520c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b84e8:	2200      	movs	r2, #0
   b84ea:	4629      	mov	r1, r5
   b84ec:	4803      	ldr	r0, [pc, #12]	; (b84fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b84ee:	f7fe ff17 	bl	b7320 <application_thread_invoke>
   b84f2:	e7c7      	b.n	b8484 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b84f4:	000b811d 	.word	0x000b811d
   b84f8:	000b8501 	.word	0x000b8501
   b84fc:	000b7bd3 	.word	0x000b7bd3

000b8500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8500:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8502:	b570      	push	{r4, r5, r6, lr}
   b8504:	4604      	mov	r4, r0
	switch (__op)
   b8506:	d103      	bne.n	b8510 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8508:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b850a:	6003      	str	r3, [r0, #0]
      }
   b850c:	2000      	movs	r0, #0
   b850e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8510:	2a02      	cmp	r2, #2
   b8512:	d00c      	beq.n	b852e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8514:	2a03      	cmp	r2, #3
   b8516:	d1f9      	bne.n	b850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8518:	6804      	ldr	r4, [r0, #0]
   b851a:	2c00      	cmp	r4, #0
   b851c:	d0f6      	beq.n	b850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b851e:	4620      	mov	r0, r4
   b8520:	f7fc fe74 	bl	b520c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8524:	2114      	movs	r1, #20
   b8526:	4620      	mov	r0, r4
   b8528:	f7fb fdb9 	bl	b409e <_ZdlPvj>
   b852c:	e7ee      	b.n	b850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b852e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8530:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8532:	f7fb fdb0 	bl	b4096 <_Znwj>
   b8536:	4605      	mov	r5, r0
   b8538:	b120      	cbz	r0, b8544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b853a:	4631      	mov	r1, r6
   b853c:	f7ff ff4e 	bl	b83dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8540:	7c33      	ldrb	r3, [r6, #16]
   b8542:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8544:	6025      	str	r5, [r4, #0]
	}
   b8546:	e7e1      	b.n	b850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b8548 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8548:	4b01      	ldr	r3, [pc, #4]	; (b8550 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b854a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b854c:	4770      	bx	lr
   b854e:	bf00      	nop
   b8550:	2003df8c 	.word	0x2003df8c

000b8554 <serialEventRun>:
{
   b8554:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8556:	4b0b      	ldr	r3, [pc, #44]	; (b8584 <serialEventRun+0x30>)
   b8558:	b143      	cbz	r3, b856c <serialEventRun+0x18>
   b855a:	f7ff fc51 	bl	b7e00 <_Z16_fetch_usbserialv>
   b855e:	6803      	ldr	r3, [r0, #0]
   b8560:	691b      	ldr	r3, [r3, #16]
   b8562:	4798      	blx	r3
   b8564:	2800      	cmp	r0, #0
   b8566:	dd01      	ble.n	b856c <serialEventRun+0x18>
        serialEvent();
   b8568:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b856c:	4b06      	ldr	r3, [pc, #24]	; (b8588 <serialEventRun+0x34>)
   b856e:	b143      	cbz	r3, b8582 <serialEventRun+0x2e>
   b8570:	f000 febc 	bl	b92ec <_Z22__fetch_global_Serial1v>
   b8574:	6803      	ldr	r3, [r0, #0]
   b8576:	691b      	ldr	r3, [r3, #16]
   b8578:	4798      	blx	r3
   b857a:	2800      	cmp	r0, #0
   b857c:	dd01      	ble.n	b8582 <serialEventRun+0x2e>
        serialEvent1();
   b857e:	f3af 8000 	nop.w
}
   b8582:	bd08      	pop	{r3, pc}
	...

000b858c <_post_loop>:
{
   b858c:	b508      	push	{r3, lr}
	serialEventRun();
   b858e:	f7ff ffe1 	bl	b8554 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8592:	f7fe fd73 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8596:	4b01      	ldr	r3, [pc, #4]	; (b859c <_post_loop+0x10>)
   b8598:	6018      	str	r0, [r3, #0]
}
   b859a:	bd08      	pop	{r3, pc}
   b859c:	2003e744 	.word	0x2003e744

000b85a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b85a0:	4805      	ldr	r0, [pc, #20]	; (b85b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b85a2:	4a06      	ldr	r2, [pc, #24]	; (b85bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b85a4:	4906      	ldr	r1, [pc, #24]	; (b85c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b85a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b85a8:	1a12      	subs	r2, r2, r0
   b85aa:	f001 fd7e 	bl	ba0aa <memcpy>
    __backup_sram_signature = signature;
   b85ae:	4b05      	ldr	r3, [pc, #20]	; (b85c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b85b0:	4a05      	ldr	r2, [pc, #20]	; (b85c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b85b2:	601a      	str	r2, [r3, #0]
}
   b85b4:	bd08      	pop	{r3, pc}
   b85b6:	bf00      	nop
   b85b8:	2003f400 	.word	0x2003f400
   b85bc:	2003f404 	.word	0x2003f404
   b85c0:	000bd3b4 	.word	0x000bd3b4
   b85c4:	2003f400 	.word	0x2003f400
   b85c8:	9a271c1e 	.word	0x9a271c1e

000b85cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b85cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b85ce:	2300      	movs	r3, #0
   b85d0:	9300      	str	r3, [sp, #0]
   b85d2:	461a      	mov	r2, r3
   b85d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b85d8:	f7fe febc 	bl	b7354 <system_ctrl_set_result>
}
   b85dc:	b003      	add	sp, #12
   b85de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b85e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b85e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b85e6:	8843      	ldrh	r3, [r0, #2]
   b85e8:	2b0a      	cmp	r3, #10
   b85ea:	d008      	beq.n	b85fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b85ec:	2b50      	cmp	r3, #80	; 0x50
   b85ee:	d10b      	bne.n	b8608 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b85f0:	4b09      	ldr	r3, [pc, #36]	; (b8618 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b85f2:	681b      	ldr	r3, [r3, #0]
   b85f4:	b14b      	cbz	r3, b860a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b85f6:	b003      	add	sp, #12
   b85f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b85fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b85fe:	f7ff ffe5 	bl	b85cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8602:	b003      	add	sp, #12
   b8604:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8608:	2300      	movs	r3, #0
   b860a:	9300      	str	r3, [sp, #0]
   b860c:	461a      	mov	r2, r3
   b860e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8612:	f7fe fe9f 	bl	b7354 <system_ctrl_set_result>
}
   b8616:	e7f4      	b.n	b8602 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8618:	2003e6b4 	.word	0x2003e6b4

000b861c <module_user_init_hook>:
{
   b861c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b861e:	4812      	ldr	r0, [pc, #72]	; (b8668 <module_user_init_hook+0x4c>)
   b8620:	2100      	movs	r1, #0
   b8622:	f7fe fefb 	bl	b741c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8626:	4b11      	ldr	r3, [pc, #68]	; (b866c <module_user_init_hook+0x50>)
   b8628:	681a      	ldr	r2, [r3, #0]
   b862a:	4b11      	ldr	r3, [pc, #68]	; (b8670 <module_user_init_hook+0x54>)
   b862c:	429a      	cmp	r2, r3
   b862e:	4b11      	ldr	r3, [pc, #68]	; (b8674 <module_user_init_hook+0x58>)
   b8630:	bf0c      	ite	eq
   b8632:	2201      	moveq	r2, #1
   b8634:	2200      	movne	r2, #0
   b8636:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8638:	d001      	beq.n	b863e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b863a:	f7ff ffb1 	bl	b85a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b863e:	f7fe fd0d 	bl	b705c <HAL_RNG_GetRandomNumber>
   b8642:	4604      	mov	r4, r0
    srand(seed);
   b8644:	f001 fd48 	bl	ba0d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8648:	4b0b      	ldr	r3, [pc, #44]	; (b8678 <module_user_init_hook+0x5c>)
   b864a:	b113      	cbz	r3, b8652 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b864c:	4620      	mov	r0, r4
   b864e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8652:	2100      	movs	r1, #0
   b8654:	4808      	ldr	r0, [pc, #32]	; (b8678 <module_user_init_hook+0x5c>)
   b8656:	f7fe fdbb 	bl	b71d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b865a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b865e:	4807      	ldr	r0, [pc, #28]	; (b867c <module_user_init_hook+0x60>)
   b8660:	2100      	movs	r1, #0
   b8662:	f7fe be6d 	b.w	b7340 <system_ctrl_set_app_request_handler>
   b8666:	bf00      	nop
   b8668:	000b8549 	.word	0x000b8549
   b866c:	2003f400 	.word	0x2003f400
   b8670:	9a271c1e 	.word	0x9a271c1e
   b8674:	2003e6b0 	.word	0x2003e6b0
   b8678:	00000000 	.word	0x00000000
   b867c:	000b85e5 	.word	0x000b85e5

000b8680 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8680:	6800      	ldr	r0, [r0, #0]
   b8682:	f7ff ba9d 	b.w	b7bc0 <_ZN7TwoWire4lockEv>

000b8686 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b8686:	b510      	push	{r4, lr}
   b8688:	4604      	mov	r4, r0
      lock_(_lock) {
   b868a:	6001      	str	r1, [r0, #0]
   b868c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b868e:	b10a      	cbz	r2, b8694 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8690:	f7ff fff6 	bl	b8680 <_ZN9FuelGauge4lockEv>
}
   b8694:	4620      	mov	r0, r4
   b8696:	bd10      	pop	{r4, pc}

000b8698 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b8698:	b513      	push	{r0, r1, r4, lr}
   b869a:	4604      	mov	r4, r0
   b869c:	9101      	str	r1, [sp, #4]
            return &Wire;
   b869e:	f000 fde5 	bl	b926c <_Z19__fetch_global_Wirev>
        : FuelGauge(*fuelWireInstance(), _lock)
   b86a2:	9a01      	ldr	r2, [sp, #4]
            return &Wire;
   b86a4:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b86a6:	4620      	mov	r0, r4
   b86a8:	f7ff ffed 	bl	b8686 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b86ac:	4620      	mov	r0, r4
   b86ae:	b002      	add	sp, #8
   b86b0:	bd10      	pop	{r4, pc}

000b86b2 <_ZN8RGBClass10brightnessEhb>:
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(PARTICLE_LED_RGB);
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   b86b2:	b510      	push	{r4, lr}
   b86b4:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   b86b6:	f7fe fd19 	bl	b70ec <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   b86ba:	f7fe fd1f 	bl	b70fc <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   b86be:	b128      	cbz	r0, b86cc <_ZN8RGBClass10brightnessEhb+0x1a>
   b86c0:	b124      	cbz	r4, b86cc <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   b86c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   b86c6:	20e7      	movs	r0, #231	; 0xe7
   b86c8:	f7fe bd20 	b.w	b710c <LED_On>
}
   b86cc:	bd10      	pop	{r4, pc}
	...

000b86d0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b86d0:	4b01      	ldr	r3, [pc, #4]	; (b86d8 <_GLOBAL__sub_I_RGB+0x8>)
   b86d2:	2200      	movs	r2, #0
   b86d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b86d6:	4770      	bx	lr
   b86d8:	2003e6b8 	.word	0x2003e6b8

000b86dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b86dc:	2100      	movs	r1, #0
   b86de:	f7fe bdff 	b.w	b72e0 <system_delay_ms>
	...

000b86e4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b86e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b86e8:	4a15      	ldr	r2, [pc, #84]	; (b8740 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b86ea:	f8df 8060 	ldr.w	r8, [pc, #96]	; b874c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b86ee:	e9d2 6300 	ldrd	r6, r3, [r2]
   b86f2:	1980      	adds	r0, r0, r6
   b86f4:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b86f8:	4b12      	ldr	r3, [pc, #72]	; (b8744 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b86fa:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b86fe:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8702:	1986      	adds	r6, r0, r6
   b8704:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b8708:	42bb      	cmp	r3, r7
   b870a:	bf08      	it	eq
   b870c:	42b2      	cmpeq	r2, r6
{
   b870e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8710:	d013      	beq.n	b873a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8712:	a903      	add	r1, sp, #12
   b8714:	4668      	mov	r0, sp
   b8716:	e9cd 6700 	strd	r6, r7, [sp]
   b871a:	f7fe fe87 	bl	b742c <localtime_r>
	calendar_time.tm_year += 1900;
   b871e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8720:	4d09      	ldr	r5, [pc, #36]	; (b8748 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8722:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8726:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b8728:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b872a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b872c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b872e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8732:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8736:	6823      	ldr	r3, [r4, #0]
   b8738:	602b      	str	r3, [r5, #0]
    }
}
   b873a:	b00c      	add	sp, #48	; 0x30
   b873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8740:	2003e6f8 	.word	0x2003e6f8
   b8744:	2003e6f0 	.word	0x2003e6f0
   b8748:	2003e6cc 	.word	0x2003e6cc
   b874c:	2003e700 	.word	0x2003e700

000b8750 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b8750:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8752:	2000      	movs	r0, #0
   b8754:	f7fe fd2c 	bl	b71b0 <spark_sync_time_pending>
   b8758:	b128      	cbz	r0, b8766 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b875a:	f7fe fd09 	bl	b7170 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b875e:	f080 0001 	eor.w	r0, r0, #1
   b8762:	b2c0      	uxtb	r0, r0
    }
   b8764:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8766:	2001      	movs	r0, #1
   b8768:	e7fc      	b.n	b8764 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b876a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b876a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b876c:	2000      	movs	r0, #0
   b876e:	f7fe fc8d 	bl	b708c <hal_rtc_time_is_valid>
    if (rtcstate)
   b8772:	4604      	mov	r4, r0
   b8774:	b9a0      	cbnz	r0, b87a0 <_ZN9TimeClass7isValidEv+0x36>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8776:	f7fe fda3 	bl	b72c0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b877a:	2801      	cmp	r0, #1
   b877c:	d110      	bne.n	b87a0 <_ZN9TimeClass7isValidEv+0x36>
   b877e:	4620      	mov	r0, r4
   b8780:	f7fe fdd6 	bl	b7330 <system_thread_get_state>
   b8784:	b960      	cbnz	r0, b87a0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8786:	f7ff ffe3 	bl	b8750 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b878a:	b910      	cbnz	r0, b8792 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b878c:	f7fe fce0 	bl	b7150 <spark_process>
        while (_while() && !_condition()) {
   b8790:	e7f9      	b.n	b8786 <_ZN9TimeClass7isValidEv+0x1c>
   b8792:	f7ff ffdd 	bl	b8750 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b879a:	2000      	movs	r0, #0
   b879c:	f7fe bc76 	b.w	b708c <hal_rtc_time_is_valid>
}
   b87a0:	4620      	mov	r0, r4
   b87a2:	bd10      	pop	{r4, pc}

000b87a4 <_ZN9TimeClass3nowEv>:
{
   b87a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b87a6:	f7ff ffe0 	bl	b876a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b87aa:	2210      	movs	r2, #16
   b87ac:	2100      	movs	r1, #0
   b87ae:	4668      	mov	r0, sp
   b87b0:	f001 fc89 	bl	ba0c6 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b87b4:	2100      	movs	r1, #0
   b87b6:	4668      	mov	r0, sp
   b87b8:	f7fe fc78 	bl	b70ac <hal_rtc_get_time>
}
   b87bc:	9800      	ldr	r0, [sp, #0]
   b87be:	b005      	add	sp, #20
   b87c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b87c4 <_ZN9TimeClass6minuteEv>:
{
   b87c4:	b508      	push	{r3, lr}
	return minute(now());
   b87c6:	f7ff ffed 	bl	b87a4 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b87ca:	17c1      	asrs	r1, r0, #31
   b87cc:	f7ff ff8a 	bl	b86e4 <_ZL22Refresh_UnixTime_Cachex>
}
   b87d0:	4b01      	ldr	r3, [pc, #4]	; (b87d8 <_ZN9TimeClass6minuteEv+0x14>)
   b87d2:	6858      	ldr	r0, [r3, #4]
   b87d4:	bd08      	pop	{r3, pc}
   b87d6:	bf00      	nop
   b87d8:	2003e6cc 	.word	0x2003e6cc

000b87dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b87dc:	4b02      	ldr	r3, [pc, #8]	; (b87e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b87de:	681a      	ldr	r2, [r3, #0]
   b87e0:	4b02      	ldr	r3, [pc, #8]	; (b87ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b87e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b87e4:	4770      	bx	lr
   b87e6:	bf00      	nop
   b87e8:	2003df88 	.word	0x2003df88
   b87ec:	2003e6c8 	.word	0x2003e6c8

000b87f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b87f0:	4b01      	ldr	r3, [pc, #4]	; (b87f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b87f2:	4a02      	ldr	r2, [pc, #8]	; (b87fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b87f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b87f6:	4770      	bx	lr
   b87f8:	2003e708 	.word	0x2003e708
   b87fc:	000bcd10 	.word	0x000bcd10

000b8800 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8800:	b510      	push	{r4, lr}
   b8802:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8804:	f7fe fc3a 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8808:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b880a:	6823      	ldr	r3, [r4, #0]
   b880c:	4620      	mov	r0, r4
   b880e:	695b      	ldr	r3, [r3, #20]
   b8810:	4798      	blx	r3
    if (c >= 0) return c;
   b8812:	2800      	cmp	r0, #0
   b8814:	da08      	bge.n	b8828 <_ZN6Stream9timedReadEv+0x28>
   b8816:	f7fe fc31 	bl	b707c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b881a:	68e3      	ldr	r3, [r4, #12]
   b881c:	1ac0      	subs	r0, r0, r3
   b881e:	68a3      	ldr	r3, [r4, #8]
   b8820:	4298      	cmp	r0, r3
   b8822:	d3f2      	bcc.n	b880a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b8828:	bd10      	pop	{r4, pc}
	...

000b882c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b882c:	b538      	push	{r3, r4, r5, lr}
   b882e:	460d      	mov	r5, r1
  String ret;
   b8830:	4907      	ldr	r1, [pc, #28]	; (b8850 <_ZN6Stream10readStringEv+0x24>)
{
   b8832:	4604      	mov	r4, r0
  String ret;
   b8834:	f000 f90d 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b8838:	4628      	mov	r0, r5
   b883a:	f7ff ffe1 	bl	b8800 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b883e:	2800      	cmp	r0, #0
   b8840:	db04      	blt.n	b884c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b8842:	b2c1      	uxtb	r1, r0
   b8844:	4620      	mov	r0, r4
   b8846:	f000 f954 	bl	b8af2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b884a:	e7f5      	b.n	b8838 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b884c:	4620      	mov	r0, r4
   b884e:	bd38      	pop	{r3, r4, r5, pc}
   b8850:	000bc953 	.word	0x000bc953

000b8854 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
   b8854:	b570      	push	{r4, r5, r6, lr}
   b8856:	460d      	mov	r5, r1
  String ret;
   b8858:	4909      	ldr	r1, [pc, #36]	; (b8880 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b885a:	4604      	mov	r4, r0
   b885c:	4616      	mov	r6, r2
  String ret;
   b885e:	f000 f8f8 	bl	b8a52 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b8862:	4628      	mov	r0, r5
   b8864:	f7ff ffcc 	bl	b8800 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b8868:	2800      	cmp	r0, #0
   b886a:	db06      	blt.n	b887a <_ZN6Stream15readStringUntilEc+0x26>
   b886c:	4286      	cmp	r6, r0
   b886e:	d004      	beq.n	b887a <_ZN6Stream15readStringUntilEc+0x26>
   b8870:	b2c1      	uxtb	r1, r0
   b8872:	4620      	mov	r0, r4
   b8874:	f000 f93d 	bl	b8af2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b8878:	e7f3      	b.n	b8862 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b887a:	4620      	mov	r0, r4
   b887c:	bd70      	pop	{r4, r5, r6, pc}
   b887e:	bf00      	nop
   b8880:	000bc953 	.word	0x000bc953

000b8884 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8886:	4606      	mov	r6, r0
   b8888:	460d      	mov	r5, r1
  size_t n = 0;
   b888a:	188f      	adds	r7, r1, r2
   b888c:	2400      	movs	r4, #0
  while (size--) {
   b888e:	42bd      	cmp	r5, r7
   b8890:	d00c      	beq.n	b88ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8892:	6833      	ldr	r3, [r6, #0]
   b8894:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8898:	689b      	ldr	r3, [r3, #8]
   b889a:	4630      	mov	r0, r6
   b889c:	4798      	blx	r3
     if (chunk>=0)
   b889e:	1e03      	subs	r3, r0, #0
   b88a0:	db01      	blt.n	b88a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b88a2:	441c      	add	r4, r3
  while (size--) {
   b88a4:	e7f3      	b.n	b888e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b88a6:	2c00      	cmp	r4, #0
   b88a8:	bf08      	it	eq
   b88aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b88ac:	4620      	mov	r0, r4
   b88ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b88b0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b88b0:	b513      	push	{r0, r1, r4, lr}
   b88b2:	4604      	mov	r4, r0
    }
   b88b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b88b6:	b159      	cbz	r1, b88d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b88b8:	9101      	str	r1, [sp, #4]
   b88ba:	f001 fc78 	bl	ba1ae <strlen>
   b88be:	6823      	ldr	r3, [r4, #0]
   b88c0:	9901      	ldr	r1, [sp, #4]
   b88c2:	68db      	ldr	r3, [r3, #12]
   b88c4:	4602      	mov	r2, r0
   b88c6:	4620      	mov	r0, r4
    }
   b88c8:	b002      	add	sp, #8
   b88ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b88ce:	4718      	bx	r3
    }
   b88d0:	b002      	add	sp, #8
   b88d2:	bd10      	pop	{r4, pc}

000b88d4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b88d4:	b508      	push	{r3, lr}
  return write(str);
   b88d6:	f7ff ffeb 	bl	b88b0 <_ZN5Print5writeEPKc>
}
   b88da:	bd08      	pop	{r3, pc}

000b88dc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b88dc:	6803      	ldr	r3, [r0, #0]
   b88de:	689b      	ldr	r3, [r3, #8]
   b88e0:	4718      	bx	r3

000b88e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b88e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b88e4:	210d      	movs	r1, #13
{
   b88e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b88e8:	f7ff fff8 	bl	b88dc <_ZN5Print5printEc>
  n += print('\n');
   b88ec:	210a      	movs	r1, #10
  size_t n = print('\r');
   b88ee:	4604      	mov	r4, r0
  n += print('\n');
   b88f0:	4628      	mov	r0, r5
   b88f2:	f7ff fff3 	bl	b88dc <_ZN5Print5printEc>
  return n;
}
   b88f6:	4420      	add	r0, r4
   b88f8:	bd38      	pop	{r3, r4, r5, pc}

000b88fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b88fa:	b538      	push	{r3, r4, r5, lr}
   b88fc:	4605      	mov	r5, r0
  return write(str);
   b88fe:	f7ff ffd7 	bl	b88b0 <_ZN5Print5writeEPKc>
   b8902:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8904:	4628      	mov	r0, r5
   b8906:	f7ff ffec 	bl	b88e2 <_ZN5Print7printlnEv>
  return n;
}
   b890a:	4420      	add	r0, r4
   b890c:	bd38      	pop	{r3, r4, r5, pc}

000b890e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b890e:	b530      	push	{r4, r5, lr}
   b8910:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8912:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8914:	2a01      	cmp	r2, #1
  *str = '\0';
   b8916:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b891a:	bf98      	it	ls
   b891c:	220a      	movls	r2, #10
   b891e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8920:	460d      	mov	r5, r1
   b8922:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8926:	fb01 5312 	mls	r3, r1, r2, r5
   b892a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b892e:	2b09      	cmp	r3, #9
   b8930:	bf94      	ite	ls
   b8932:	3330      	addls	r3, #48	; 0x30
   b8934:	3337      	addhi	r3, #55	; 0x37
   b8936:	b2db      	uxtb	r3, r3
  } while(n);
   b8938:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b893a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b893e:	d9ef      	bls.n	b8920 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8940:	4621      	mov	r1, r4
   b8942:	f7ff ffb5 	bl	b88b0 <_ZN5Print5writeEPKc>
}
   b8946:	b00b      	add	sp, #44	; 0x2c
   b8948:	bd30      	pop	{r4, r5, pc}

000b894a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b894a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b894e:	b086      	sub	sp, #24
   b8950:	af00      	add	r7, sp, #0
   b8952:	4605      	mov	r5, r0
   b8954:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8956:	1d38      	adds	r0, r7, #4
   b8958:	2114      	movs	r1, #20
{
   b895a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b895c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b895e:	f7fe fd35 	bl	b73cc <vsnprintf>

    if (n<bufsize)
   b8962:	2813      	cmp	r0, #19
   b8964:	d80e      	bhi.n	b8984 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8966:	1d39      	adds	r1, r7, #4
   b8968:	4628      	mov	r0, r5
   b896a:	f7ff ffa1 	bl	b88b0 <_ZN5Print5writeEPKc>
   b896e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8970:	b11e      	cbz	r6, b897a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8972:	4628      	mov	r0, r5
   b8974:	f7ff ffb5 	bl	b88e2 <_ZN5Print7printlnEv>
   b8978:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b897a:	4620      	mov	r0, r4
   b897c:	3718      	adds	r7, #24
   b897e:	46bd      	mov	sp, r7
   b8980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8984:	f100 0308 	add.w	r3, r0, #8
   b8988:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b898c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b898e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8992:	4622      	mov	r2, r4
   b8994:	1c41      	adds	r1, r0, #1
   b8996:	683b      	ldr	r3, [r7, #0]
   b8998:	4668      	mov	r0, sp
   b899a:	f7fe fd17 	bl	b73cc <vsnprintf>
  return write(str);
   b899e:	4669      	mov	r1, sp
   b89a0:	4628      	mov	r0, r5
   b89a2:	f7ff ff85 	bl	b88b0 <_ZN5Print5writeEPKc>
   b89a6:	4604      	mov	r4, r0
   b89a8:	46c5      	mov	sp, r8
   b89aa:	e7e1      	b.n	b8970 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b89ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b89ac:	4802      	ldr	r0, [pc, #8]	; (b89b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b89ae:	2300      	movs	r3, #0
   b89b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b89b2:	f7fe bb43 	b.w	b703c <os_mutex_recursive_create>
   b89b6:	bf00      	nop
   b89b8:	2003e70c 	.word	0x2003e70c

000b89bc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b89bc:	b510      	push	{r4, lr}
   b89be:	4604      	mov	r4, r0
{
	free(buffer);
   b89c0:	6800      	ldr	r0, [r0, #0]
   b89c2:	f7fe fce3 	bl	b738c <free>
}
   b89c6:	4620      	mov	r0, r4
   b89c8:	bd10      	pop	{r4, pc}

000b89ca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b89ca:	b510      	push	{r4, lr}
   b89cc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b89ce:	6800      	ldr	r0, [r0, #0]
   b89d0:	b108      	cbz	r0, b89d6 <_ZN6String10invalidateEv+0xc>
   b89d2:	f7fe fcdb 	bl	b738c <free>
	buffer = NULL;
   b89d6:	2300      	movs	r3, #0
	capacity = len = 0;
   b89d8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b89dc:	6023      	str	r3, [r4, #0]
}
   b89de:	bd10      	pop	{r4, pc}

000b89e0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b89e0:	b538      	push	{r3, r4, r5, lr}
   b89e2:	4604      	mov	r4, r0
   b89e4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b89e6:	6800      	ldr	r0, [r0, #0]
   b89e8:	3101      	adds	r1, #1
   b89ea:	f7fe fcd7 	bl	b739c <realloc>
	if (newbuffer) {
   b89ee:	b110      	cbz	r0, b89f6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b89f0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b89f4:	2001      	movs	r0, #1
	}
	return 0;
}
   b89f6:	bd38      	pop	{r3, r4, r5, pc}

000b89f8 <_ZN6String7reserveEj>:
{
   b89f8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b89fa:	6803      	ldr	r3, [r0, #0]
{
   b89fc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b89fe:	b123      	cbz	r3, b8a0a <_ZN6String7reserveEj+0x12>
   b8a00:	6843      	ldr	r3, [r0, #4]
   b8a02:	428b      	cmp	r3, r1
   b8a04:	d301      	bcc.n	b8a0a <_ZN6String7reserveEj+0x12>
   b8a06:	2001      	movs	r0, #1
}
   b8a08:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8a0a:	4620      	mov	r0, r4
   b8a0c:	f7ff ffe8 	bl	b89e0 <_ZN6String12changeBufferEj>
   b8a10:	2800      	cmp	r0, #0
   b8a12:	d0f9      	beq.n	b8a08 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8a14:	68a3      	ldr	r3, [r4, #8]
   b8a16:	2b00      	cmp	r3, #0
   b8a18:	d1f5      	bne.n	b8a06 <_ZN6String7reserveEj+0xe>
   b8a1a:	6822      	ldr	r2, [r4, #0]
   b8a1c:	7013      	strb	r3, [r2, #0]
   b8a1e:	e7f2      	b.n	b8a06 <_ZN6String7reserveEj+0xe>

000b8a20 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8a22:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8a24:	4611      	mov	r1, r2
   b8a26:	9201      	str	r2, [sp, #4]
{
   b8a28:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8a2a:	f7ff ffe5 	bl	b89f8 <_ZN6String7reserveEj>
   b8a2e:	9a01      	ldr	r2, [sp, #4]
   b8a30:	b928      	cbnz	r0, b8a3e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8a32:	4620      	mov	r0, r4
   b8a34:	f7ff ffc9 	bl	b89ca <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8a38:	4620      	mov	r0, r4
   b8a3a:	b003      	add	sp, #12
   b8a3c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8a3e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8a40:	4629      	mov	r1, r5
   b8a42:	6820      	ldr	r0, [r4, #0]
   b8a44:	f001 fb31 	bl	ba0aa <memcpy>
	buffer[len] = 0;
   b8a48:	6822      	ldr	r2, [r4, #0]
   b8a4a:	68a3      	ldr	r3, [r4, #8]
   b8a4c:	2100      	movs	r1, #0
   b8a4e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8a50:	e7f2      	b.n	b8a38 <_ZN6String4copyEPKcj+0x18>

000b8a52 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8a52:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8a54:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8a56:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8a5a:	4604      	mov	r4, r0
	len = 0;
   b8a5c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8a5e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8a60:	b141      	cbz	r1, b8a74 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8a62:	4608      	mov	r0, r1
   b8a64:	9101      	str	r1, [sp, #4]
   b8a66:	f001 fba2 	bl	ba1ae <strlen>
   b8a6a:	9901      	ldr	r1, [sp, #4]
   b8a6c:	4602      	mov	r2, r0
   b8a6e:	4620      	mov	r0, r4
   b8a70:	f7ff ffd6 	bl	b8a20 <_ZN6String4copyEPKcj>
}
   b8a74:	4620      	mov	r0, r4
   b8a76:	b002      	add	sp, #8
   b8a78:	bd10      	pop	{r4, pc}

000b8a7a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8a7a:	b538      	push	{r3, r4, r5, lr}
   b8a7c:	4605      	mov	r5, r0
	if (buffer) {
   b8a7e:	6800      	ldr	r0, [r0, #0]
{
   b8a80:	460c      	mov	r4, r1
	if (buffer) {
   b8a82:	b168      	cbz	r0, b8aa0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8a84:	686a      	ldr	r2, [r5, #4]
   b8a86:	688b      	ldr	r3, [r1, #8]
   b8a88:	429a      	cmp	r2, r3
   b8a8a:	d307      	bcc.n	b8a9c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8a8c:	6809      	ldr	r1, [r1, #0]
   b8a8e:	f001 fb68 	bl	ba162 <strcpy>
			len = rhs.len;
   b8a92:	68a3      	ldr	r3, [r4, #8]
   b8a94:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8a96:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8a98:	60a3      	str	r3, [r4, #8]
}
   b8a9a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8a9c:	f7fe fc76 	bl	b738c <free>
	buffer = rhs.buffer;
   b8aa0:	6823      	ldr	r3, [r4, #0]
   b8aa2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8aa4:	6863      	ldr	r3, [r4, #4]
   b8aa6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8aa8:	68a3      	ldr	r3, [r4, #8]
   b8aaa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8aac:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8aae:	e9c4 3300 	strd	r3, r3, [r4]
   b8ab2:	e7f1      	b.n	b8a98 <_ZN6String4moveERS_+0x1e>

000b8ab4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b8ab4:	4288      	cmp	r0, r1
{
   b8ab6:	b510      	push	{r4, lr}
   b8ab8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b8aba:	d001      	beq.n	b8ac0 <_ZN6StringaSEOS_+0xc>
   b8abc:	f7ff ffdd 	bl	b8a7a <_ZN6String4moveERS_>
	return *this;
}
   b8ac0:	4620      	mov	r0, r4
   b8ac2:	bd10      	pop	{r4, pc}

000b8ac4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8ac4:	b570      	push	{r4, r5, r6, lr}
   b8ac6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8ac8:	460e      	mov	r6, r1
   b8aca:	b909      	cbnz	r1, b8ad0 <_ZN6String6concatEPKcj+0xc>
   b8acc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8ace:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8ad0:	b16a      	cbz	r2, b8aee <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8ad2:	6884      	ldr	r4, [r0, #8]
   b8ad4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8ad6:	4621      	mov	r1, r4
   b8ad8:	f7ff ff8e 	bl	b89f8 <_ZN6String7reserveEj>
   b8adc:	2800      	cmp	r0, #0
   b8ade:	d0f5      	beq.n	b8acc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8ae0:	6828      	ldr	r0, [r5, #0]
   b8ae2:	68ab      	ldr	r3, [r5, #8]
   b8ae4:	4631      	mov	r1, r6
   b8ae6:	4418      	add	r0, r3
   b8ae8:	f001 fb3b 	bl	ba162 <strcpy>
	len = newlen;
   b8aec:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8aee:	2001      	movs	r0, #1
   b8af0:	e7ed      	b.n	b8ace <_ZN6String6concatEPKcj+0xa>

000b8af2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8af2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8af4:	2300      	movs	r3, #0
	buf[0] = c;
   b8af6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8afa:	2201      	movs	r2, #1
   b8afc:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8afe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8b02:	f7ff ffdf 	bl	b8ac4 <_ZN6String6concatEPKcj>
}
   b8b06:	b003      	add	sp, #12
   b8b08:	f85d fb04 	ldr.w	pc, [sp], #4

000b8b0c <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b8b0c:	b558      	push	{r3, r4, r6, lr}
   b8b0e:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b8b10:	b12a      	cbz	r2, b8b1e <_ZNK6String8getBytesEPhjj+0x12>
   b8b12:	b121      	cbz	r1, b8b1e <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b8b14:	6884      	ldr	r4, [r0, #8]
   b8b16:	42a3      	cmp	r3, r4
   b8b18:	d302      	bcc.n	b8b20 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b8b1a:	2300      	movs	r3, #0
   b8b1c:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b8b1e:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b8b20:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b8b22:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b8b24:	6801      	ldr	r1, [r0, #0]
   b8b26:	4294      	cmp	r4, r2
   b8b28:	bf28      	it	cs
   b8b2a:	4614      	movcs	r4, r2
   b8b2c:	4419      	add	r1, r3
   b8b2e:	4622      	mov	r2, r4
   b8b30:	4630      	mov	r0, r6
   b8b32:	f001 fb58 	bl	ba1e6 <strncpy>
	buf[n] = 0;
   b8b36:	2300      	movs	r3, #0
   b8b38:	5533      	strb	r3, [r6, r4]
   b8b3a:	e7f0      	b.n	b8b1e <_ZNK6String8getBytesEPhjj+0x12>

000b8b3c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8b3c:	6800      	ldr	r0, [r0, #0]
   b8b3e:	b108      	cbz	r0, b8b44 <_ZNK6String5toIntEv+0x8>
   b8b40:	f001 baaf 	b.w	ba0a2 <atol>
	return 0;
}
   b8b44:	4770      	bx	lr
	...

000b8b48 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   b8b48:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b8b4a:	6800      	ldr	r0, [r0, #0]
   b8b4c:	b140      	cbz	r0, b8b60 <_ZNK6String7toFloatEv+0x18>
   b8b4e:	f001 faa5 	bl	ba09c <atof>
   b8b52:	ec51 0b10 	vmov	r0, r1, d0
   b8b56:	f001 fa2d 	bl	b9fb4 <__aeabi_d2f>
   b8b5a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8b5e:	bd08      	pop	{r3, pc}
	return 0;
   b8b60:	ed9f 0a01 	vldr	s0, [pc, #4]	; b8b68 <_ZNK6String7toFloatEv+0x20>
   b8b64:	e7fb      	b.n	b8b5e <_ZNK6String7toFloatEv+0x16>
   b8b66:	bf00      	nop
   b8b68:	00000000 	.word	0x00000000

000b8b6c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b8b6c:	b507      	push	{r0, r1, r2, lr}
   b8b6e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8b70:	2100      	movs	r1, #0
{
   b8b72:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8b74:	9100      	str	r1, [sp, #0]
   b8b76:	2001      	movs	r0, #1
   b8b78:	218c      	movs	r1, #140	; 0x8c
   b8b7a:	f7fe fbf5 	bl	b7368 <system_reset>
}
   b8b7e:	b003      	add	sp, #12
   b8b80:	f85d fb04 	ldr.w	pc, [sp], #4

000b8b84 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8b84:	4601      	mov	r1, r0
    reset(0, flags);
   b8b86:	2000      	movs	r0, #0
   b8b88:	f7ff bff0 	b.w	b8b6c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b8b8c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b8b8c:	2000      	movs	r0, #0
   b8b8e:	f7ff bff9 	b.w	b8b84 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b8b94 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8b94:	4b05      	ldr	r3, [pc, #20]	; (b8bac <_GLOBAL__sub_I_System+0x18>)
   b8b96:	2202      	movs	r2, #2
   b8b98:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b8b9a:	4b05      	ldr	r3, [pc, #20]	; (b8bb0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8b9c:	4a05      	ldr	r2, [pc, #20]	; (b8bb4 <_GLOBAL__sub_I_System+0x20>)
   b8b9e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8ba0:	2000      	movs	r0, #0
   b8ba2:	e9c3 0000 	strd	r0, r0, [r3]
        set_system_mode(mode);
   b8ba6:	f7fe bb93 	b.w	b72d0 <set_system_mode>
   b8baa:	bf00      	nop
   b8bac:	2003e71c 	.word	0x2003e71c
   b8bb0:	2003e710 	.word	0x2003e710
   b8bb4:	ffff0000 	.word	0xffff0000

000b8bb8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b8bb8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b8bba:	6804      	ldr	r4, [r0, #0]
   b8bbc:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b8bbe:	46a4      	mov	ip, r4
    }
   b8bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b8bc4:	4760      	bx	ip

000b8bc6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b8bc6:	6803      	ldr	r3, [r0, #0]
   b8bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8bca:	4718      	bx	r3

000b8bcc <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b8bcc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b8bce:	4770      	bx	lr

000b8bd0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b8bd0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b8bd2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b8bd4:	1a10      	subs	r0, r2, r0
   b8bd6:	4770      	bx	lr

000b8bd8 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b8bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8bda:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b8bdc:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8bde:	6a9f      	ldr	r7, [r3, #40]	; 0x28
class IPAddress : public Printable {
   b8be0:	4b0c      	ldr	r3, [pc, #48]	; (b8c14 <_ZN3UDP9endPacketEv+0x3c>)
   b8be2:	9302      	str	r3, [sp, #8]
   b8be4:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b8be8:	4604      	mov	r4, r0
   b8bea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8bec:	ad03      	add	r5, sp, #12
   b8bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8bf0:	6833      	ldr	r3, [r6, #0]
   b8bf2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8bf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b8bf6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b8bf8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b8bfa:	9300      	str	r3, [sp, #0]
   b8bfc:	4620      	mov	r0, r4
   b8bfe:	ab02      	add	r3, sp, #8
   b8c00:	47b8      	blx	r7
    flush(); // wait for send to complete
   b8c02:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8c04:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b8c06:	69db      	ldr	r3, [r3, #28]
   b8c08:	4620      	mov	r0, r4
   b8c0a:	4798      	blx	r3
    return result;
}
   b8c0c:	4628      	mov	r0, r5
   b8c0e:	b009      	add	sp, #36	; 0x24
   b8c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8c12:	bf00      	nop
   b8c14:	000bcccc 	.word	0x000bcccc

000b8c18 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b8c18:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b8c1a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b8c1c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b8c20:	68db      	ldr	r3, [r3, #12]
   b8c22:	2201      	movs	r2, #1
   b8c24:	f10d 0107 	add.w	r1, sp, #7
   b8c28:	4798      	blx	r3
}
   b8c2a:	b003      	add	sp, #12
   b8c2c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c30 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b8c30:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b8c32:	6803      	ldr	r3, [r0, #0]
   b8c34:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b8c36:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b8c38:	4798      	blx	r3
   b8c3a:	b128      	cbz	r0, b8c48 <_ZN3UDP4readEv+0x18>
   b8c3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8c3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b8c40:	1c59      	adds	r1, r3, #1
   b8c42:	86e1      	strh	r1, [r4, #54]	; 0x36
   b8c44:	5cd0      	ldrb	r0, [r2, r3]
}
   b8c46:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b8c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8c4c:	e7fb      	b.n	b8c46 <_ZN3UDP4readEv+0x16>

000b8c4e <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b8c4e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b8c50:	6803      	ldr	r3, [r0, #0]
   b8c52:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b8c54:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b8c56:	4798      	blx	r3
   b8c58:	b118      	cbz	r0, b8c62 <_ZN3UDP4peekEv+0x14>
   b8c5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8c5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b8c5e:	5cd0      	ldrb	r0, [r2, r3]
}
   b8c60:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b8c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8c66:	e7fb      	b.n	b8c60 <_ZN3UDP4peekEv+0x12>

000b8c68 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b8c68:	4770      	bx	lr

000b8c6a <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b8c6a:	b410      	push	{r4}
   b8c6c:	4603      	mov	r3, r0
   b8c6e:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b8c70:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b8c72:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b8c74:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b8c76:	6803      	ldr	r3, [r0, #0]
   b8c78:	1a52      	subs	r2, r2, r1
   b8c7a:	68db      	ldr	r3, [r3, #12]
   b8c7c:	4421      	add	r1, r4
}
   b8c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b8c82:	4718      	bx	r3

000b8c84 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b8c84:	f1a0 0010 	sub.w	r0, r0, #16
   b8c88:	f7ff bfef 	b.w	b8c6a <_ZNK3UDP7printToER5Print>

000b8c8c <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8c8c:	b570      	push	{r4, r5, r6, lr}
    stop();
   b8c8e:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8c90:	b08c      	sub	sp, #48	; 0x30
    stop();
   b8c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8c94:	4604      	mov	r4, r0
   b8c96:	460e      	mov	r6, r1
   b8c98:	4615      	mov	r5, r2
    stop();
   b8c9a:	4798      	blx	r3
    const int one = 1;
   b8c9c:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b8c9e:	221c      	movs	r2, #28
   b8ca0:	2100      	movs	r1, #0
   b8ca2:	a805      	add	r0, sp, #20
    const int one = 1;
   b8ca4:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b8ca6:	f001 fa0e 	bl	ba0c6 <memset>
    saddr.sin6_len = sizeof(saddr);
   b8caa:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b8cae:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b8cb0:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b8cb4:	f7fe f9ba 	bl	b702c <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8cb8:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b8cba:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8cbe:	2102      	movs	r1, #2
   b8cc0:	200a      	movs	r0, #10
   b8cc2:	f7fe f953 	bl	b6f6c <sock_socket>
    if (_sock < 0) {
   b8cc6:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8cc8:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b8cca:	db25      	blt.n	b8d18 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b8ccc:	2204      	movs	r2, #4
   b8cce:	9200      	str	r2, [sp, #0]
   b8cd0:	ab02      	add	r3, sp, #8
   b8cd2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8cd6:	f7fe f911 	bl	b6efc <sock_setsockopt>
   b8cda:	b9e8      	cbnz	r0, b8d18 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b8cdc:	b195      	cbz	r5, b8d04 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b8cde:	9003      	str	r0, [sp, #12]
   b8ce0:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b8ce4:	a903      	add	r1, sp, #12
   b8ce6:	b2e8      	uxtb	r0, r5
   b8ce8:	f7fe f9e8 	bl	b70bc <if_index_to_name>
   b8cec:	b9a0      	cbnz	r0, b8d18 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b8cee:	2306      	movs	r3, #6
   b8cf0:	9300      	str	r3, [sp, #0]
   b8cf2:	6960      	ldr	r0, [r4, #20]
   b8cf4:	ab03      	add	r3, sp, #12
   b8cf6:	f241 020b 	movw	r2, #4107	; 0x100b
   b8cfa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8cfe:	f7fe f8fd 	bl	b6efc <sock_setsockopt>
   b8d02:	b948      	cbnz	r0, b8d18 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b8d04:	6960      	ldr	r0, [r4, #20]
   b8d06:	221c      	movs	r2, #28
   b8d08:	a905      	add	r1, sp, #20
   b8d0a:	f7fe f8ef 	bl	b6eec <sock_bind>
   b8d0e:	b918      	cbnz	r0, b8d18 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b8d10:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b8d12:	2001      	movs	r0, #1
}
   b8d14:	b00c      	add	sp, #48	; 0x30
   b8d16:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b8d18:	6823      	ldr	r3, [r4, #0]
   b8d1a:	4620      	mov	r0, r4
   b8d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8d1e:	4798      	blx	r3
   b8d20:	2000      	movs	r0, #0
   b8d22:	e7f7      	b.n	b8d14 <_ZN3UDP5beginEtm+0x88>

000b8d24 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b8d24:	b510      	push	{r4, lr}
   b8d26:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b8d28:	6940      	ldr	r0, [r0, #20]
   b8d2a:	2800      	cmp	r0, #0
   b8d2c:	db01      	blt.n	b8d32 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b8d2e:	f7fe f8ed 	bl	b6f0c <sock_close>
    _sock = -1;
   b8d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d36:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b8d38:	2300      	movs	r3, #0
   b8d3a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b8d3c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b8d3e:	bd10      	pop	{r4, pc}

000b8d40 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b8d40:	b570      	push	{r4, r5, r6, lr}
   b8d42:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b8d44:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8d46:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b8d48:	b168      	cbz	r0, b8d66 <_ZN3UDP5writeEPKhj+0x26>
   b8d4a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b8d4c:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b8d4e:	4294      	cmp	r4, r2
   b8d50:	bf28      	it	cs
   b8d52:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b8d54:	4622      	mov	r2, r4
   b8d56:	4430      	add	r0, r6
   b8d58:	f001 f9a7 	bl	ba0aa <memcpy>
    _offset += size;
   b8d5c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b8d5e:	4423      	add	r3, r4
   b8d60:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b8d62:	4620      	mov	r0, r4
   b8d64:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b8d66:	4604      	mov	r4, r0
   b8d68:	e7f1      	b.n	b8d4e <_ZN3UDP5writeEPKhj+0xe>

000b8d6a <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b8d6a:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b8d6c:	6803      	ldr	r3, [r0, #0]
   b8d6e:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b8d70:	4604      	mov	r4, r0
   b8d72:	460f      	mov	r7, r1
   b8d74:	4616      	mov	r6, r2
    if (available()) {
   b8d76:	4798      	blx	r3
   b8d78:	b190      	cbz	r0, b8da0 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b8d7a:	6823      	ldr	r3, [r4, #0]
   b8d7c:	4620      	mov	r0, r4
   b8d7e:	691b      	ldr	r3, [r3, #16]
   b8d80:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b8d82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8d84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b8d86:	4286      	cmp	r6, r0
   b8d88:	bfa8      	it	ge
   b8d8a:	4606      	movge	r6, r0
   b8d8c:	4419      	add	r1, r3
   b8d8e:	4632      	mov	r2, r6
   b8d90:	4638      	mov	r0, r7
   b8d92:	f001 f98a 	bl	ba0aa <memcpy>
        _offset += read;
   b8d96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8d98:	4433      	add	r3, r6
   b8d9a:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b8d9c:	4630      	mov	r0, r6
   b8d9e:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b8da0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   b8da4:	e7fa      	b.n	b8d9c <_ZN3UDP4readEPhj+0x32>

000b8da6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8da6:	b530      	push	{r4, r5, lr}
   b8da8:	b087      	sub	sp, #28
   b8daa:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8dac:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8dae:	4668      	mov	r0, sp
   b8db0:	f7ff f8d6 	bl	b7f60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8db6:	3404      	adds	r4, #4
   b8db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8dba:	682b      	ldr	r3, [r5, #0]
   b8dbc:	7023      	strb	r3, [r4, #0]
    }
   b8dbe:	b007      	add	sp, #28
   b8dc0:	bd30      	pop	{r4, r5, pc}
	...

000b8dc4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8dc6:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8dc8:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8dca:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8dcc:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b8dce:	4a0a      	ldr	r2, [pc, #40]	; (b8df8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b8dd0:	9202      	str	r2, [sp, #8]
   b8dd2:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8dd4:	468c      	mov	ip, r1
   b8dd6:	4606      	mov	r6, r0
   b8dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8dda:	ad03      	add	r5, sp, #12
   b8ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8dde:	6823      	ldr	r3, [r4, #0]
   b8de0:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8de2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b8de6:	9300      	str	r3, [sp, #0]
   b8de8:	4672      	mov	r2, lr
   b8dea:	ab02      	add	r3, sp, #8
   b8dec:	4661      	mov	r1, ip
   b8dee:	4630      	mov	r0, r6
   b8df0:	47b8      	blx	r7
    }
   b8df2:	b009      	add	sp, #36	; 0x24
   b8df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8df6:	bf00      	nop
   b8df8:	000bcccc 	.word	0x000bcccc

000b8dfc <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b8dfc:	b570      	push	{r4, r5, r6, lr}
   b8dfe:	4604      	mov	r4, r0
   b8e00:	4b05      	ldr	r3, [pc, #20]	; (b8e18 <_ZN3UDP8remoteIPEv+0x1c>)
   b8e02:	f844 3b04 	str.w	r3, [r4], #4
   b8e06:	f101 0520 	add.w	r5, r1, #32
   b8e0a:	4606      	mov	r6, r0
   b8e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e10:	682b      	ldr	r3, [r5, #0]
   b8e12:	7023      	strb	r3, [r4, #0]
   b8e14:	4630      	mov	r0, r6
   b8e16:	bd70      	pop	{r4, r5, r6, pc}
   b8e18:	000bcccc 	.word	0x000bcccc

000b8e1c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b8e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b8e1e:	7843      	ldrb	r3, [r0, #1]
   b8e20:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b8e22:	b08d      	sub	sp, #52	; 0x34
   b8e24:	4605      	mov	r5, r0
   b8e26:	460c      	mov	r4, r1
   b8e28:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b8e2a:	d104      	bne.n	b8e36 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8e2c:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   b8e2e:	4620      	mov	r0, r4
   b8e30:	f7ff ffb9 	bl	b8da6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b8e34:	e022      	b.n	b8e7c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b8e36:	2b0a      	cmp	r3, #10
   b8e38:	d125      	bne.n	b8e86 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b8e3a:	2211      	movs	r2, #17
   b8e3c:	2100      	movs	r1, #0
   b8e3e:	a801      	add	r0, sp, #4
   b8e40:	f001 f941 	bl	ba0c6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8e44:	68ab      	ldr	r3, [r5, #8]
   b8e46:	b303      	cbz	r3, b8e8a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8e48:	f105 0308 	add.w	r3, r5, #8
   b8e4c:	ae01      	add	r6, sp, #4
   b8e4e:	f105 0c18 	add.w	ip, r5, #24
   b8e52:	6818      	ldr	r0, [r3, #0]
   b8e54:	6859      	ldr	r1, [r3, #4]
   b8e56:	4632      	mov	r2, r6
   b8e58:	c203      	stmia	r2!, {r0, r1}
   b8e5a:	3308      	adds	r3, #8
   b8e5c:	4563      	cmp	r3, ip
   b8e5e:	4616      	mov	r6, r2
   b8e60:	d1f7      	bne.n	b8e52 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b8e62:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8e64:	a901      	add	r1, sp, #4
   b8e66:	a806      	add	r0, sp, #24
   b8e68:	ae07      	add	r6, sp, #28
            a.v = 6;
   b8e6a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8e6e:	f7ff f835 	bl	b7edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8e72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8e74:	3404      	adds	r4, #4
   b8e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e78:	6833      	ldr	r3, [r6, #0]
   b8e7a:	7023      	strb	r3, [r4, #0]
        if (port) {
   b8e7c:	b11f      	cbz	r7, b8e86 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b8e7e:	8868      	ldrh	r0, [r5, #2]
   b8e80:	f7fe f8cc 	bl	b701c <inet_ntohs>
   b8e84:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b8e86:	b00d      	add	sp, #52	; 0x34
   b8e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8e8a:	68eb      	ldr	r3, [r5, #12]
   b8e8c:	2b00      	cmp	r3, #0
   b8e8e:	d1db      	bne.n	b8e48 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b8e90:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8e94:	692e      	ldr	r6, [r5, #16]
   b8e96:	f7fe f8b9 	bl	b700c <inet_htonl>
   b8e9a:	4286      	cmp	r6, r0
   b8e9c:	d1d4      	bne.n	b8e48 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b8e9e:	f105 0114 	add.w	r1, r5, #20
   b8ea2:	e7c4      	b.n	b8e2e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b8ea4 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b8ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ea8:	4617      	mov	r7, r2
   b8eaa:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b8eac:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b8eae:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8eb0:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b8eb2:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8eb4:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b8eb6:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8eb8:	f7fe f910 	bl	b70dc <netdb_getaddrinfo>
   b8ebc:	1e04      	subs	r4, r0, #0
   b8ebe:	db20      	blt.n	b8f02 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b8ec0:	9b01      	ldr	r3, [sp, #4]
   b8ec2:	b32b      	cbz	r3, b8f10 <_ZN3UDP11beginPacketEPKct+0x6c>
   b8ec4:	695b      	ldr	r3, [r3, #20]
   b8ec6:	b31b      	cbz	r3, b8f10 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b8ec8:	a802      	add	r0, sp, #8
   b8eca:	f7fe fff9 	bl	b7ec0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8ece:	9b01      	ldr	r3, [sp, #4]
   b8ed0:	2200      	movs	r2, #0
   b8ed2:	6958      	ldr	r0, [r3, #20]
   b8ed4:	a902      	add	r1, sp, #8
   b8ed6:	f7ff ffa1 	bl	b8e1c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b8eda:	a802      	add	r0, sp, #8
   b8edc:	f7ff f810 	bl	b7f00 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8ee0:	b1b0      	cbz	r0, b8f10 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b8ee2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8ee4:	ad03      	add	r5, sp, #12
   b8ee6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b8eea:	4b0b      	ldr	r3, [pc, #44]	; (b8f18 <_ZN3UDP11beginPacketEPKct+0x74>)
   b8eec:	9308      	str	r3, [sp, #32]
   b8eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8ef0:	ac09      	add	r4, sp, #36	; 0x24
   b8ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ef4:	682b      	ldr	r3, [r5, #0]
   b8ef6:	7023      	strb	r3, [r4, #0]
   b8ef8:	463a      	mov	r2, r7
   b8efa:	a908      	add	r1, sp, #32
   b8efc:	4630      	mov	r0, r6
   b8efe:	47c0      	blx	r8
   b8f00:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b8f02:	9801      	ldr	r0, [sp, #4]
   b8f04:	f7fe f8e2 	bl	b70cc <netdb_freeaddrinfo>
}
   b8f08:	4620      	mov	r0, r4
   b8f0a:	b00e      	add	sp, #56	; 0x38
   b8f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b8f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8f14:	e7f5      	b.n	b8f02 <_ZN3UDP11beginPacketEPKct+0x5e>
   b8f16:	bf00      	nop
   b8f18:	000bcccc 	.word	0x000bcccc

000b8f1c <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b8f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b8f20:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b8f24:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b8f28:	b090      	sub	sp, #64	; 0x40
   b8f2a:	4605      	mov	r5, r0
   b8f2c:	460e      	mov	r6, r1
   b8f2e:	4690      	mov	r8, r2
   b8f30:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b8f32:	db3c      	blt.n	b8fae <_ZN3UDP13receivePacketEPhjm+0x92>
   b8f34:	2900      	cmp	r1, #0
   b8f36:	d03a      	beq.n	b8fae <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b8f38:	f04f 0a1c 	mov.w	sl, #28
   b8f3c:	af09      	add	r7, sp, #36	; 0x24
   b8f3e:	4652      	mov	r2, sl
   b8f40:	2100      	movs	r1, #0
   b8f42:	4638      	mov	r0, r7
   b8f44:	f001 f8bf 	bl	ba0c6 <memset>
        socklen_t slen = sizeof(saddr);
   b8f48:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b8f4c:	b1dc      	cbz	r4, b8f86 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b8f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f52:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b8f56:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b8f5a:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b8f5c:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b8f5e:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b8f60:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b8f64:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b8f66:	9300      	str	r3, [sp, #0]
   b8f68:	f241 0206 	movw	r2, #4102	; 0x1006
   b8f6c:	446b      	add	r3, sp
   b8f6e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8f72:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b8f74:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b8f76:	f7fd ffc1 	bl	b6efc <sock_setsockopt>
            if (ret) {
   b8f7a:	4604      	mov	r4, r0
   b8f7c:	b120      	cbz	r0, b8f88 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b8f7e:	4620      	mov	r0, r4
   b8f80:	b010      	add	sp, #64	; 0x40
   b8f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b8f86:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b8f88:	ab03      	add	r3, sp, #12
   b8f8a:	e9cd 7300 	strd	r7, r3, [sp]
   b8f8e:	6968      	ldr	r0, [r5, #20]
   b8f90:	4623      	mov	r3, r4
   b8f92:	4642      	mov	r2, r8
   b8f94:	4631      	mov	r1, r6
   b8f96:	f7fd ffd1 	bl	b6f3c <sock_recvfrom>
        if (ret >= 0) {
   b8f9a:	1e04      	subs	r4, r0, #0
   b8f9c:	dbef      	blt.n	b8f7e <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b8f9e:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b8fa2:	f105 011c 	add.w	r1, r5, #28
   b8fa6:	4638      	mov	r0, r7
   b8fa8:	f7ff ff38 	bl	b8e1c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b8fac:	e7e7      	b.n	b8f7e <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b8fae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8fb2:	e7e4      	b.n	b8f7e <_ZN3UDP13receivePacketEPhjm+0x62>

000b8fb4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b8fb4:	b538      	push	{r3, r4, r5, lr}
   b8fb6:	4605      	mov	r5, r0
   b8fb8:	4614      	mov	r4, r2
    		return address.v;
   b8fba:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b8fbc:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b8fbe:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b8fc0:	d110      	bne.n	b8fe4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b8fc2:	f640 231c 	movw	r3, #2588	; 0xa1c
   b8fc6:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b8fc8:	f7fe f830 	bl	b702c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b8fcc:	3408      	adds	r4, #8
   b8fce:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b8fd0:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b8fd4:	3514      	adds	r5, #20
   b8fd6:	f853 2b04 	ldr.w	r2, [r3], #4
   b8fda:	f844 2b04 	str.w	r2, [r4], #4
   b8fde:	42ab      	cmp	r3, r5
   b8fe0:	d1f9      	bne.n	b8fd6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b8fe2:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b8fe4:	2b04      	cmp	r3, #4
   b8fe6:	d1fc      	bne.n	b8fe2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b8fe8:	f44f 7304 	mov.w	r3, #528	; 0x210
   b8fec:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b8fee:	f7fe f81d 	bl	b702c <inet_htons>
   b8ff2:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b8ff4:	6868      	ldr	r0, [r5, #4]
   b8ff6:	f7fe f809 	bl	b700c <inet_htonl>
   b8ffa:	6060      	str	r0, [r4, #4]
}
   b8ffc:	e7f1      	b.n	b8fe2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b8ffe <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b8ffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9002:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b9004:	af03      	add	r7, sp, #12
   b9006:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b900a:	4698      	mov	r8, r3
   b900c:	4604      	mov	r4, r0
   b900e:	460d      	mov	r5, r1
   b9010:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b9012:	2100      	movs	r1, #0
   b9014:	464a      	mov	r2, r9
   b9016:	4638      	mov	r0, r7
   b9018:	f001 f855 	bl	ba0c6 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b901c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b9020:	463a      	mov	r2, r7
   b9022:	4640      	mov	r0, r8
   b9024:	f7ff ffc6 	bl	b8fb4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b9028:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b902c:	b153      	cbz	r3, b9044 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b902e:	e9cd 7900 	strd	r7, r9, [sp]
   b9032:	6960      	ldr	r0, [r4, #20]
   b9034:	2300      	movs	r3, #0
   b9036:	4632      	mov	r2, r6
   b9038:	4629      	mov	r1, r5
   b903a:	f7fd ff8f 	bl	b6f5c <sock_sendto>
}
   b903e:	b00b      	add	sp, #44	; 0x2c
   b9040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b9044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9048:	e7f9      	b.n	b903e <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b904c <_ZN3UDPC1Ev>:
UDP::UDP()
   b904c:	b538      	push	{r3, r4, r5, lr}
   b904e:	2500      	movs	r5, #0
   b9050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9054:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b9058:	4b0b      	ldr	r3, [pc, #44]	; (b9088 <_ZN3UDPC1Ev+0x3c>)
   b905a:	f103 0208 	add.w	r2, r3, #8
   b905e:	336c      	adds	r3, #108	; 0x6c
   b9060:	6103      	str	r3, [r0, #16]
   b9062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   b9066:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b9068:	6002      	str	r2, [r0, #0]
   b906a:	6143      	str	r3, [r0, #20]
   b906c:	301c      	adds	r0, #28
   b906e:	f7fe ff27 	bl	b7ec0 <_ZN9IPAddressC1Ev>
   b9072:	f44f 7300 	mov.w	r3, #512	; 0x200
   b9076:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b907a:	86e5      	strh	r5, [r4, #54]	; 0x36
   b907c:	8725      	strh	r5, [r4, #56]	; 0x38
   b907e:	63e5      	str	r5, [r4, #60]	; 0x3c
   b9080:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b9084:	4620      	mov	r0, r4
   b9086:	bd38      	pop	{r3, r4, r5, pc}
   b9088:	000bcd14 	.word	0x000bcd14

000b908c <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b908c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b908e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b9092:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b9094:	b123      	cbz	r3, b90a0 <_ZN3UDP13releaseBufferEv+0x14>
   b9096:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9098:	b110      	cbz	r0, b90a0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b909a:	2101      	movs	r1, #1
   b909c:	f7fa ffff 	bl	b409e <_ZdlPvj>
    _buffer = NULL;
   b90a0:	2300      	movs	r3, #0
   b90a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b90a4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b90a8:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b90aa:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b90ac:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b90ae:	bd10      	pop	{r4, pc}

000b90b0 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b90b0:	b570      	push	{r4, r5, r6, lr}
   b90b2:	4604      	mov	r4, r0
   b90b4:	4616      	mov	r6, r2
   b90b6:	460d      	mov	r5, r1
    releaseBuffer();
   b90b8:	f7ff ffe8 	bl	b908c <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b90bc:	2300      	movs	r3, #0
    _buffer = buffer;
   b90be:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b90c0:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b90c2:	b12e      	cbz	r6, b90d0 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b90c4:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b90c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b90c8:	3800      	subs	r0, #0
   b90ca:	bf18      	it	ne
   b90cc:	2001      	movne	r0, #1
   b90ce:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b90d0:	2d00      	cmp	r5, #0
   b90d2:	d0f8      	beq.n	b90c6 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b90d4:	4628      	mov	r0, r5
   b90d6:	f7fa ffe0 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b90da:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b90dc:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b90de:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b90e2:	2800      	cmp	r0, #0
   b90e4:	d0ef      	beq.n	b90c6 <_ZN3UDP9setBufferEjPh+0x16>
   b90e6:	e7ed      	b.n	b90c4 <_ZN3UDP9setBufferEjPh+0x14>

000b90e8 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b90e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90ea:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b90ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b90ee:	4605      	mov	r5, r0
   b90f0:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b90f2:	b91a      	cbnz	r2, b90fc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b90f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b90f6:	b109      	cbz	r1, b90fc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b90f8:	f7ff ffda 	bl	b90b0 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b90fc:	3404      	adds	r4, #4
   b90fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9100:	f105 0620 	add.w	r6, r5, #32
   b9104:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b9106:	6823      	ldr	r3, [r4, #0]
   b9108:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b910a:	2300      	movs	r3, #0
}
   b910c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b910e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b9110:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b9112:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b9114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9116 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b9116:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b9118:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b911a:	4604      	mov	r4, r0
   b911c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b911e:	b92a      	cbnz	r2, b912c <_ZN3UDP11parsePacketEm+0x16>
   b9120:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b9122:	b119      	cbz	r1, b912c <_ZN3UDP11parsePacketEm+0x16>
   b9124:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b9126:	f7ff ffc3 	bl	b90b0 <_ZN3UDP9setBufferEjPh>
   b912a:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b912c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b912e:	2200      	movs	r2, #0
   b9130:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b9132:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b9134:	b141      	cbz	r1, b9148 <_ZN3UDP11parsePacketEm+0x32>
   b9136:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b9138:	b132      	cbz	r2, b9148 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b913a:	6820      	ldr	r0, [r4, #0]
   b913c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b913e:	4620      	mov	r0, r4
   b9140:	47a8      	blx	r5
        if (result > 0) {
   b9142:	2800      	cmp	r0, #0
            _total = result;
   b9144:	bfc8      	it	gt
   b9146:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b9148:	6823      	ldr	r3, [r4, #0]
   b914a:	691b      	ldr	r3, [r3, #16]
   b914c:	4620      	mov	r0, r4
}
   b914e:	b003      	add	sp, #12
   b9150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b9154:	4718      	bx	r3
	...

000b9158 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b9158:	b510      	push	{r4, lr}
   b915a:	4b07      	ldr	r3, [pc, #28]	; (b9178 <_ZN3UDPD1Ev+0x20>)
   b915c:	f103 0208 	add.w	r2, r3, #8
   b9160:	336c      	adds	r3, #108	; 0x6c
   b9162:	4604      	mov	r4, r0
   b9164:	6002      	str	r2, [r0, #0]
   b9166:	6103      	str	r3, [r0, #16]
   b9168:	f7ff fddc 	bl	b8d24 <_ZN3UDP4stopEv>
   b916c:	4620      	mov	r0, r4
   b916e:	f7ff ff8d 	bl	b908c <_ZN3UDP13releaseBufferEv>
   b9172:	4620      	mov	r0, r4
   b9174:	bd10      	pop	{r4, pc}
   b9176:	bf00      	nop
   b9178:	000bcd14 	.word	0x000bcd14

000b917c <_ZN3UDPD0Ev>:
   b917c:	b510      	push	{r4, lr}
   b917e:	4604      	mov	r4, r0
   b9180:	f7ff ffea 	bl	b9158 <_ZN3UDPD1Ev>
   b9184:	4620      	mov	r0, r4
   b9186:	214c      	movs	r1, #76	; 0x4c
   b9188:	f7fa ff89 	bl	b409e <_ZdlPvj>
   b918c:	4620      	mov	r0, r4
   b918e:	bd10      	pop	{r4, pc}

000b9190 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9190:	2200      	movs	r2, #0
   b9192:	6840      	ldr	r0, [r0, #4]
   b9194:	4611      	mov	r1, r2
   b9196:	f7fe b86b 	b.w	b7270 <network_listening>

000b919a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b919a:	2200      	movs	r2, #0
   b919c:	6840      	ldr	r0, [r0, #4]
   b919e:	4611      	mov	r1, r2
   b91a0:	f7fe b876 	b.w	b7290 <network_get_listen_timeout>

000b91a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b91a4:	6840      	ldr	r0, [r0, #4]
   b91a6:	2200      	movs	r2, #0
   b91a8:	f7fe b86a 	b.w	b7280 <network_set_listen_timeout>

000b91ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b91ac:	6840      	ldr	r0, [r0, #4]
   b91ae:	2200      	movs	r2, #0
   b91b0:	f081 0101 	eor.w	r1, r1, #1
   b91b4:	f7fe b854 	b.w	b7260 <network_listen>

000b91b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b91b8:	2300      	movs	r3, #0
   b91ba:	6840      	ldr	r0, [r0, #4]
   b91bc:	461a      	mov	r2, r3
   b91be:	4619      	mov	r1, r3
   b91c0:	f7fe b846 	b.w	b7250 <network_off>

000b91c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b91c4:	2300      	movs	r3, #0
   b91c6:	6840      	ldr	r0, [r0, #4]
   b91c8:	461a      	mov	r2, r3
   b91ca:	4619      	mov	r1, r3
   b91cc:	f7fe b838 	b.w	b7240 <network_on>

000b91d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b91d0:	2200      	movs	r2, #0
   b91d2:	6840      	ldr	r0, [r0, #4]
   b91d4:	4611      	mov	r1, r2
   b91d6:	f7fe b82b 	b.w	b7230 <network_ready>

000b91da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b91da:	2200      	movs	r2, #0
   b91dc:	6840      	ldr	r0, [r0, #4]
   b91de:	4611      	mov	r1, r2
   b91e0:	f7fe b816 	b.w	b7210 <network_connecting>

000b91e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b91e4:	6840      	ldr	r0, [r0, #4]
   b91e6:	2200      	movs	r2, #0
   b91e8:	2102      	movs	r1, #2
   b91ea:	f7fe b819 	b.w	b7220 <network_disconnect>

000b91ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b91ee:	2300      	movs	r3, #0
   b91f0:	6840      	ldr	r0, [r0, #4]
   b91f2:	461a      	mov	r2, r3
   b91f4:	f7fe b804 	b.w	b7200 <network_connect>

000b91f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b91f8:	4b02      	ldr	r3, [pc, #8]	; (b9204 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b91fa:	2203      	movs	r2, #3
   b91fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b91fe:	4a02      	ldr	r2, [pc, #8]	; (b9208 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9200:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9202:	4770      	bx	lr
   b9204:	2003e720 	.word	0x2003e720
   b9208:	000bcd8c 	.word	0x000bcd8c

000b920c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   b920c:	b508      	push	{r3, lr}
   b920e:	4b02      	ldr	r3, [pc, #8]	; (b9218 <spark_protocol_instance+0xc>)
   b9210:	681b      	ldr	r3, [r3, #0]
   b9212:	681b      	ldr	r3, [r3, #0]
   b9214:	9301      	str	r3, [sp, #4]
   b9216:	bd08      	pop	{r3, pc}
   b9218:	0003025c 	.word	0x0003025c

000b921c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   b921c:	b508      	push	{r3, lr}
   b921e:	4b02      	ldr	r3, [pc, #8]	; (b9228 <spark_protocol_set_product_id+0xc>)
   b9220:	681b      	ldr	r3, [r3, #0]
   b9222:	685b      	ldr	r3, [r3, #4]
   b9224:	9301      	str	r3, [sp, #4]
   b9226:	bd08      	pop	{r3, pc}
   b9228:	0003025c 	.word	0x0003025c

000b922c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   b922c:	b508      	push	{r3, lr}
   b922e:	4b02      	ldr	r3, [pc, #8]	; (b9238 <spark_protocol_set_product_firmware_version+0xc>)
   b9230:	681b      	ldr	r3, [r3, #0]
   b9232:	689b      	ldr	r3, [r3, #8]
   b9234:	9301      	str	r3, [sp, #4]
   b9236:	bd08      	pop	{r3, pc}
   b9238:	0003025c 	.word	0x0003025c

000b923c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b923c:	4770      	bx	lr
	...

000b9240 <_Z17acquireWireBufferv>:
{
   b9240:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9242:	2520      	movs	r5, #32
   b9244:	2314      	movs	r3, #20
{
   b9246:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9248:	6003      	str	r3, [r0, #0]
   b924a:	6085      	str	r5, [r0, #8]
   b924c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b924e:	4906      	ldr	r1, [pc, #24]	; (b9268 <_Z17acquireWireBufferv+0x28>)
   b9250:	4628      	mov	r0, r5
   b9252:	f000 f86f 	bl	b9334 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9256:	4904      	ldr	r1, [pc, #16]	; (b9268 <_Z17acquireWireBufferv+0x28>)
	};
   b9258:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b925a:	4628      	mov	r0, r5
   b925c:	f000 f86a 	bl	b9334 <_ZnajRKSt9nothrow_t>
	};
   b9260:	60e0      	str	r0, [r4, #12]
}
   b9262:	4620      	mov	r0, r4
   b9264:	bd38      	pop	{r3, r4, r5, pc}
   b9266:	bf00      	nop
   b9268:	000bcdc0 	.word	0x000bcdc0

000b926c <_Z19__fetch_global_Wirev>:
{
   b926c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b926e:	4d0e      	ldr	r5, [pc, #56]	; (b92a8 <_Z19__fetch_global_Wirev+0x3c>)
   b9270:	7829      	ldrb	r1, [r5, #0]
   b9272:	f3bf 8f5b 	dmb	ish
   b9276:	f011 0401 	ands.w	r4, r1, #1
{
   b927a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b927c:	d111      	bne.n	b92a2 <_Z19__fetch_global_Wirev+0x36>
   b927e:	4628      	mov	r0, r5
   b9280:	f7fa ff0f 	bl	b40a2 <__cxa_guard_acquire>
   b9284:	b168      	cbz	r0, b92a2 <_Z19__fetch_global_Wirev+0x36>
   b9286:	a801      	add	r0, sp, #4
   b9288:	f7ff ffda 	bl	b9240 <_Z17acquireWireBufferv>
   b928c:	aa01      	add	r2, sp, #4
   b928e:	4621      	mov	r1, r4
   b9290:	4806      	ldr	r0, [pc, #24]	; (b92ac <_Z19__fetch_global_Wirev+0x40>)
   b9292:	f7fe fc83 	bl	b7b9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9296:	4628      	mov	r0, r5
   b9298:	f7fa ff08 	bl	b40ac <__cxa_guard_release>
   b929c:	4804      	ldr	r0, [pc, #16]	; (b92b0 <_Z19__fetch_global_Wirev+0x44>)
   b929e:	f000 fef7 	bl	ba090 <atexit>
	return wire;
}
   b92a2:	4802      	ldr	r0, [pc, #8]	; (b92ac <_Z19__fetch_global_Wirev+0x40>)
   b92a4:	b007      	add	sp, #28
   b92a6:	bd30      	pop	{r4, r5, pc}
   b92a8:	2003e728 	.word	0x2003e728
   b92ac:	2003e72c 	.word	0x2003e72c
   b92b0:	000b923d 	.word	0x000b923d

000b92b4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b92b4:	4770      	bx	lr
	...

000b92b8 <_Z20acquireSerial1Bufferv>:
{
   b92b8:	b538      	push	{r3, r4, r5, lr}
   b92ba:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b92bc:	2514      	movs	r5, #20
   b92be:	462a      	mov	r2, r5
   b92c0:	2100      	movs	r1, #0
   b92c2:	f000 ff00 	bl	ba0c6 <memset>
   b92c6:	8025      	strh	r5, [r4, #0]
   b92c8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92ca:	4907      	ldr	r1, [pc, #28]	; (b92e8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b92cc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92ce:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b92d0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92d2:	f000 f82f 	bl	b9334 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92d6:	4904      	ldr	r1, [pc, #16]	; (b92e8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b92d8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92da:	4628      	mov	r0, r5
   b92dc:	f000 f82a 	bl	b9334 <_ZnajRKSt9nothrow_t>
    };
   b92e0:	60e0      	str	r0, [r4, #12]
}
   b92e2:	4620      	mov	r0, r4
   b92e4:	bd38      	pop	{r3, r4, r5, pc}
   b92e6:	bf00      	nop
   b92e8:	000bcdc0 	.word	0x000bcdc0

000b92ec <_Z22__fetch_global_Serial1v>:
{
   b92ec:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b92ee:	4d0e      	ldr	r5, [pc, #56]	; (b9328 <_Z22__fetch_global_Serial1v+0x3c>)
   b92f0:	7829      	ldrb	r1, [r5, #0]
   b92f2:	f3bf 8f5b 	dmb	ish
   b92f6:	f011 0401 	ands.w	r4, r1, #1
{
   b92fa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b92fc:	d111      	bne.n	b9322 <_Z22__fetch_global_Serial1v+0x36>
   b92fe:	4628      	mov	r0, r5
   b9300:	f7fa fecf 	bl	b40a2 <__cxa_guard_acquire>
   b9304:	b168      	cbz	r0, b9322 <_Z22__fetch_global_Serial1v+0x36>
   b9306:	a801      	add	r0, sp, #4
   b9308:	f7ff ffd6 	bl	b92b8 <_Z20acquireSerial1Bufferv>
   b930c:	aa01      	add	r2, sp, #4
   b930e:	4621      	mov	r1, r4
   b9310:	4806      	ldr	r0, [pc, #24]	; (b932c <_Z22__fetch_global_Serial1v+0x40>)
   b9312:	f7fe fcaf 	bl	b7c74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9316:	4628      	mov	r0, r5
   b9318:	f7fa fec8 	bl	b40ac <__cxa_guard_release>
   b931c:	4804      	ldr	r0, [pc, #16]	; (b9330 <_Z22__fetch_global_Serial1v+0x44>)
   b931e:	f000 feb7 	bl	ba090 <atexit>
    return serial1;
}
   b9322:	4802      	ldr	r0, [pc, #8]	; (b932c <_Z22__fetch_global_Serial1v+0x40>)
   b9324:	b007      	add	sp, #28
   b9326:	bd30      	pop	{r4, r5, pc}
   b9328:	2003e748 	.word	0x2003e748
   b932c:	2003e74c 	.word	0x2003e74c
   b9330:	000b92b5 	.word	0x000b92b5

000b9334 <_ZnajRKSt9nothrow_t>:
   b9334:	f7fa beb1 	b.w	b409a <_Znaj>

000b9338 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b9338:	68c3      	ldr	r3, [r0, #12]
   b933a:	689a      	ldr	r2, [r3, #8]
   b933c:	60c2      	str	r2, [r0, #12]
   b933e:	b510      	push	{r4, lr}
   b9340:	b102      	cbz	r2, b9344 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b9342:	6050      	str	r0, [r2, #4]
   b9344:	6842      	ldr	r2, [r0, #4]
   b9346:	605a      	str	r2, [r3, #4]
   b9348:	680c      	ldr	r4, [r1, #0]
   b934a:	4284      	cmp	r4, r0
   b934c:	d103      	bne.n	b9356 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b934e:	600b      	str	r3, [r1, #0]
   b9350:	6098      	str	r0, [r3, #8]
   b9352:	6043      	str	r3, [r0, #4]
   b9354:	bd10      	pop	{r4, pc}
   b9356:	6891      	ldr	r1, [r2, #8]
   b9358:	4281      	cmp	r1, r0
   b935a:	bf0c      	ite	eq
   b935c:	6093      	streq	r3, [r2, #8]
   b935e:	60d3      	strne	r3, [r2, #12]
   b9360:	e7f6      	b.n	b9350 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b9362 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b9362:	6883      	ldr	r3, [r0, #8]
   b9364:	68da      	ldr	r2, [r3, #12]
   b9366:	6082      	str	r2, [r0, #8]
   b9368:	b510      	push	{r4, lr}
   b936a:	b102      	cbz	r2, b936e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b936c:	6050      	str	r0, [r2, #4]
   b936e:	6842      	ldr	r2, [r0, #4]
   b9370:	605a      	str	r2, [r3, #4]
   b9372:	680c      	ldr	r4, [r1, #0]
   b9374:	4284      	cmp	r4, r0
   b9376:	d103      	bne.n	b9380 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b9378:	600b      	str	r3, [r1, #0]
   b937a:	60d8      	str	r0, [r3, #12]
   b937c:	6043      	str	r3, [r0, #4]
   b937e:	bd10      	pop	{r4, pc}
   b9380:	68d1      	ldr	r1, [r2, #12]
   b9382:	4281      	cmp	r1, r0
   b9384:	bf0c      	ite	eq
   b9386:	60d3      	streq	r3, [r2, #12]
   b9388:	6093      	strne	r3, [r2, #8]
   b938a:	e7f6      	b.n	b937a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b938c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b938c:	68c3      	ldr	r3, [r0, #12]
   b938e:	b123      	cbz	r3, b939a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b9390:	4618      	mov	r0, r3
   b9392:	689b      	ldr	r3, [r3, #8]
   b9394:	2b00      	cmp	r3, #0
   b9396:	d1fb      	bne.n	b9390 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b9398:	4770      	bx	lr
   b939a:	6843      	ldr	r3, [r0, #4]
   b939c:	68da      	ldr	r2, [r3, #12]
   b939e:	4282      	cmp	r2, r0
   b93a0:	d102      	bne.n	b93a8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b93a2:	4618      	mov	r0, r3
   b93a4:	685b      	ldr	r3, [r3, #4]
   b93a6:	e7f9      	b.n	b939c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b93a8:	68c2      	ldr	r2, [r0, #12]
   b93aa:	4293      	cmp	r3, r2
   b93ac:	bf18      	it	ne
   b93ae:	4618      	movne	r0, r3
   b93b0:	4770      	bx	lr

000b93b2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b93b2:	7803      	ldrb	r3, [r0, #0]
   b93b4:	b933      	cbnz	r3, b93c4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b93b6:	6843      	ldr	r3, [r0, #4]
   b93b8:	685b      	ldr	r3, [r3, #4]
   b93ba:	4283      	cmp	r3, r0
   b93bc:	d102      	bne.n	b93c4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b93be:	68db      	ldr	r3, [r3, #12]
   b93c0:	4618      	mov	r0, r3
   b93c2:	4770      	bx	lr
   b93c4:	6882      	ldr	r2, [r0, #8]
   b93c6:	b122      	cbz	r2, b93d2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b93c8:	4613      	mov	r3, r2
   b93ca:	68d2      	ldr	r2, [r2, #12]
   b93cc:	2a00      	cmp	r2, #0
   b93ce:	d1fb      	bne.n	b93c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b93d0:	e7f6      	b.n	b93c0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b93d2:	6843      	ldr	r3, [r0, #4]
   b93d4:	689a      	ldr	r2, [r3, #8]
   b93d6:	4282      	cmp	r2, r0
   b93d8:	d1f2      	bne.n	b93c0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b93da:	4618      	mov	r0, r3
   b93dc:	685b      	ldr	r3, [r3, #4]
   b93de:	e7f9      	b.n	b93d4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b93e0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b93e0:	f7ff bfd4 	b.w	b938c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b93e4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b93e4:	f7ff bfe5 	b.w	b93b2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b93e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b93e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b93ec:	461e      	mov	r6, r3
   b93ee:	f103 0804 	add.w	r8, r3, #4
   b93f2:	2300      	movs	r3, #0
   b93f4:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b93f8:	460c      	mov	r4, r1
   b93fa:	604a      	str	r2, [r1, #4]
   b93fc:	700b      	strb	r3, [r1, #0]
   b93fe:	b300      	cbz	r0, b9442 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b9400:	4296      	cmp	r6, r2
   b9402:	6091      	str	r1, [r2, #8]
   b9404:	d118      	bne.n	b9438 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b9406:	6071      	str	r1, [r6, #4]
   b9408:	60f4      	str	r4, [r6, #12]
   b940a:	2701      	movs	r7, #1
   b940c:	f04f 0900 	mov.w	r9, #0
   b9410:	6873      	ldr	r3, [r6, #4]
   b9412:	42a3      	cmp	r3, r4
   b9414:	d03f      	beq.n	b9496 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b9416:	6860      	ldr	r0, [r4, #4]
   b9418:	7802      	ldrb	r2, [r0, #0]
   b941a:	2a00      	cmp	r2, #0
   b941c:	d13b      	bne.n	b9496 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b941e:	6845      	ldr	r5, [r0, #4]
   b9420:	68ab      	ldr	r3, [r5, #8]
   b9422:	4298      	cmp	r0, r3
   b9424:	d123      	bne.n	b946e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b9426:	68eb      	ldr	r3, [r5, #12]
   b9428:	b183      	cbz	r3, b944c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b942a:	781a      	ldrb	r2, [r3, #0]
   b942c:	b972      	cbnz	r2, b944c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b942e:	7007      	strb	r7, [r0, #0]
   b9430:	701f      	strb	r7, [r3, #0]
   b9432:	702a      	strb	r2, [r5, #0]
   b9434:	462c      	mov	r4, r5
   b9436:	e7eb      	b.n	b9410 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b9438:	68b3      	ldr	r3, [r6, #8]
   b943a:	4293      	cmp	r3, r2
   b943c:	d1e5      	bne.n	b940a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b943e:	60b1      	str	r1, [r6, #8]
   b9440:	e7e3      	b.n	b940a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b9442:	60d1      	str	r1, [r2, #12]
   b9444:	68f3      	ldr	r3, [r6, #12]
   b9446:	4293      	cmp	r3, r2
   b9448:	d1df      	bne.n	b940a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b944a:	e7dd      	b.n	b9408 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b944c:	68c3      	ldr	r3, [r0, #12]
   b944e:	42a3      	cmp	r3, r4
   b9450:	d103      	bne.n	b945a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b9452:	4641      	mov	r1, r8
   b9454:	f7ff ff70 	bl	b9338 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b9458:	4604      	mov	r4, r0
   b945a:	6863      	ldr	r3, [r4, #4]
   b945c:	4641      	mov	r1, r8
   b945e:	701f      	strb	r7, [r3, #0]
   b9460:	4628      	mov	r0, r5
   b9462:	f885 9000 	strb.w	r9, [r5]
   b9466:	f7ff ff7c 	bl	b9362 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b946a:	4625      	mov	r5, r4
   b946c:	e7e2      	b.n	b9434 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b946e:	b113      	cbz	r3, b9476 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b9470:	781a      	ldrb	r2, [r3, #0]
   b9472:	2a00      	cmp	r2, #0
   b9474:	d0db      	beq.n	b942e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b9476:	6883      	ldr	r3, [r0, #8]
   b9478:	42a3      	cmp	r3, r4
   b947a:	d103      	bne.n	b9484 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b947c:	4641      	mov	r1, r8
   b947e:	f7ff ff70 	bl	b9362 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b9482:	4604      	mov	r4, r0
   b9484:	6863      	ldr	r3, [r4, #4]
   b9486:	4641      	mov	r1, r8
   b9488:	701f      	strb	r7, [r3, #0]
   b948a:	4628      	mov	r0, r5
   b948c:	f885 9000 	strb.w	r9, [r5]
   b9490:	f7ff ff52 	bl	b9338 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b9494:	e7e9      	b.n	b946a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b9496:	2201      	movs	r2, #1
   b9498:	701a      	strb	r2, [r3, #0]
   b949a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b949e <_ZSt25__throw_bad_function_callv>:
   b949e:	b508      	push	{r3, lr}
   b94a0:	f7fd ff9c 	bl	b73dc <abort>

000b94a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b94a4:	4901      	ldr	r1, [pc, #4]	; (b94ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b94a6:	f000 b8f9 	b.w	b969c <_ZNKSt9type_infoeqERKS_>
   b94aa:	bf00      	nop
   b94ac:	000bcddc 	.word	0x000bcddc

000b94b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b94b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b94b2:	2400      	movs	r4, #0
   b94b4:	2310      	movs	r3, #16
   b94b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b94ba:	6803      	ldr	r3, [r0, #0]
   b94bc:	4615      	mov	r5, r2
   b94be:	699e      	ldr	r6, [r3, #24]
   b94c0:	6812      	ldr	r2, [r2, #0]
   b94c2:	466b      	mov	r3, sp
   b94c4:	e9cd 4400 	strd	r4, r4, [sp]
   b94c8:	47b0      	blx	r6
   b94ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b94ce:	f003 0306 	and.w	r3, r3, #6
   b94d2:	2b06      	cmp	r3, #6
   b94d4:	bf03      	ittte	eq
   b94d6:	9b00      	ldreq	r3, [sp, #0]
   b94d8:	602b      	streq	r3, [r5, #0]
   b94da:	2001      	moveq	r0, #1
   b94dc:	4620      	movne	r0, r4
   b94de:	b004      	add	sp, #16
   b94e0:	bd70      	pop	{r4, r5, r6, pc}

000b94e2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b94e2:	9800      	ldr	r0, [sp, #0]
   b94e4:	4290      	cmp	r0, r2
   b94e6:	bf14      	ite	ne
   b94e8:	2001      	movne	r0, #1
   b94ea:	2006      	moveq	r0, #6
   b94ec:	4770      	bx	lr
	...

000b94f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b94f0:	b510      	push	{r4, lr}
   b94f2:	4b03      	ldr	r3, [pc, #12]	; (b9500 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b94f4:	6003      	str	r3, [r0, #0]
   b94f6:	4604      	mov	r4, r0
   b94f8:	f000 f8cd 	bl	b9696 <_ZNSt9type_infoD1Ev>
   b94fc:	4620      	mov	r0, r4
   b94fe:	bd10      	pop	{r4, pc}
   b9500:	000bce1c 	.word	0x000bce1c

000b9504 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9504:	b510      	push	{r4, lr}
   b9506:	4604      	mov	r4, r0
   b9508:	f7ff fff2 	bl	b94f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b950c:	4620      	mov	r0, r4
   b950e:	2108      	movs	r1, #8
   b9510:	f7fa fdc5 	bl	b409e <_ZdlPvj>
   b9514:	4620      	mov	r0, r4
   b9516:	bd10      	pop	{r4, pc}

000b9518 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b951c:	461f      	mov	r7, r3
   b951e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9522:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9526:	4598      	cmp	r8, r3
   b9528:	4606      	mov	r6, r0
   b952a:	4615      	mov	r5, r2
   b952c:	d107      	bne.n	b953e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b952e:	9907      	ldr	r1, [sp, #28]
   b9530:	f000 f8b4 	bl	b969c <_ZNKSt9type_infoeqERKS_>
   b9534:	b118      	cbz	r0, b953e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9536:	7165      	strb	r5, [r4, #5]
   b9538:	2000      	movs	r0, #0
   b953a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b953e:	4639      	mov	r1, r7
   b9540:	4630      	mov	r0, r6
   b9542:	f000 f8ab 	bl	b969c <_ZNKSt9type_infoeqERKS_>
   b9546:	2800      	cmp	r0, #0
   b9548:	d0f6      	beq.n	b9538 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b954a:	2301      	movs	r3, #1
   b954c:	f8c4 8000 	str.w	r8, [r4]
   b9550:	7125      	strb	r5, [r4, #4]
   b9552:	71a3      	strb	r3, [r4, #6]
   b9554:	e7f0      	b.n	b9538 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9556 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9556:	b538      	push	{r3, r4, r5, lr}
   b9558:	4615      	mov	r5, r2
   b955a:	461c      	mov	r4, r3
   b955c:	f000 f89e 	bl	b969c <_ZNKSt9type_infoeqERKS_>
   b9560:	b120      	cbz	r0, b956c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9562:	2308      	movs	r3, #8
   b9564:	60e3      	str	r3, [r4, #12]
   b9566:	2306      	movs	r3, #6
   b9568:	6025      	str	r5, [r4, #0]
   b956a:	7123      	strb	r3, [r4, #4]
   b956c:	bd38      	pop	{r3, r4, r5, pc}

000b956e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b956e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9570:	4605      	mov	r5, r0
   b9572:	460c      	mov	r4, r1
   b9574:	9201      	str	r2, [sp, #4]
   b9576:	461e      	mov	r6, r3
   b9578:	f000 f890 	bl	b969c <_ZNKSt9type_infoeqERKS_>
   b957c:	b950      	cbnz	r0, b9594 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b957e:	2e03      	cmp	r6, #3
   b9580:	d808      	bhi.n	b9594 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9582:	6823      	ldr	r3, [r4, #0]
   b9584:	9a01      	ldr	r2, [sp, #4]
   b9586:	695b      	ldr	r3, [r3, #20]
   b9588:	4629      	mov	r1, r5
   b958a:	4620      	mov	r0, r4
   b958c:	b002      	add	sp, #8
   b958e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9592:	4718      	bx	r3
   b9594:	b002      	add	sp, #8
   b9596:	bd70      	pop	{r4, r5, r6, pc}

000b9598 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9598:	b510      	push	{r4, lr}
   b959a:	4b03      	ldr	r3, [pc, #12]	; (b95a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b959c:	6003      	str	r3, [r0, #0]
   b959e:	4604      	mov	r4, r0
   b95a0:	f7ff ffa6 	bl	b94f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b95a4:	4620      	mov	r0, r4
   b95a6:	bd10      	pop	{r4, pc}
   b95a8:	000bce7c 	.word	0x000bce7c

000b95ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b95ac:	b510      	push	{r4, lr}
   b95ae:	4604      	mov	r4, r0
   b95b0:	f7ff fff2 	bl	b9598 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b95b4:	4620      	mov	r0, r4
   b95b6:	210c      	movs	r1, #12
   b95b8:	f7fa fd71 	bl	b409e <_ZdlPvj>
   b95bc:	4620      	mov	r0, r4
   b95be:	bd10      	pop	{r4, pc}

000b95c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b95c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b95c2:	9f08      	ldr	r7, [sp, #32]
   b95c4:	4297      	cmp	r7, r2
   b95c6:	4605      	mov	r5, r0
   b95c8:	460e      	mov	r6, r1
   b95ca:	4614      	mov	r4, r2
   b95cc:	d00a      	beq.n	b95e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b95ce:	68a8      	ldr	r0, [r5, #8]
   b95d0:	6802      	ldr	r2, [r0, #0]
   b95d2:	9708      	str	r7, [sp, #32]
   b95d4:	6a15      	ldr	r5, [r2, #32]
   b95d6:	4631      	mov	r1, r6
   b95d8:	4622      	mov	r2, r4
   b95da:	46ac      	mov	ip, r5
   b95dc:	b003      	add	sp, #12
   b95de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b95e2:	4760      	bx	ip
   b95e4:	4619      	mov	r1, r3
   b95e6:	9301      	str	r3, [sp, #4]
   b95e8:	f000 f858 	bl	b969c <_ZNKSt9type_infoeqERKS_>
   b95ec:	9b01      	ldr	r3, [sp, #4]
   b95ee:	2800      	cmp	r0, #0
   b95f0:	d0ed      	beq.n	b95ce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b95f2:	2006      	movs	r0, #6
   b95f4:	b003      	add	sp, #12
   b95f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b95f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b95f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95fc:	460d      	mov	r5, r1
   b95fe:	4619      	mov	r1, r3
   b9600:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9604:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9608:	4681      	mov	r9, r0
   b960a:	4617      	mov	r7, r2
   b960c:	4698      	mov	r8, r3
   b960e:	f000 f845 	bl	b969c <_ZNKSt9type_infoeqERKS_>
   b9612:	b190      	cbz	r0, b963a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9614:	2d00      	cmp	r5, #0
   b9616:	6034      	str	r4, [r6, #0]
   b9618:	7137      	strb	r7, [r6, #4]
   b961a:	db09      	blt.n	b9630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b961c:	1961      	adds	r1, r4, r5
   b961e:	458a      	cmp	sl, r1
   b9620:	bf0c      	ite	eq
   b9622:	2106      	moveq	r1, #6
   b9624:	2101      	movne	r1, #1
   b9626:	71b1      	strb	r1, [r6, #6]
   b9628:	2000      	movs	r0, #0
   b962a:	b001      	add	sp, #4
   b962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9630:	3502      	adds	r5, #2
   b9632:	d1f9      	bne.n	b9628 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9634:	2301      	movs	r3, #1
   b9636:	71b3      	strb	r3, [r6, #6]
   b9638:	e7f6      	b.n	b9628 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b963a:	4554      	cmp	r4, sl
   b963c:	d106      	bne.n	b964c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b963e:	4659      	mov	r1, fp
   b9640:	4648      	mov	r0, r9
   b9642:	f000 f82b 	bl	b969c <_ZNKSt9type_infoeqERKS_>
   b9646:	b108      	cbz	r0, b964c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9648:	7177      	strb	r7, [r6, #5]
   b964a:	e7ed      	b.n	b9628 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b964c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9650:	6803      	ldr	r3, [r0, #0]
   b9652:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9656:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b965a:	69dc      	ldr	r4, [r3, #28]
   b965c:	463a      	mov	r2, r7
   b965e:	4643      	mov	r3, r8
   b9660:	4629      	mov	r1, r5
   b9662:	46a4      	mov	ip, r4
   b9664:	b001      	add	sp, #4
   b9666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b966a:	4760      	bx	ip

000b966c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9670:	4607      	mov	r7, r0
   b9672:	460c      	mov	r4, r1
   b9674:	4615      	mov	r5, r2
   b9676:	461e      	mov	r6, r3
   b9678:	f7ff ff6d 	bl	b9556 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b967c:	b948      	cbnz	r0, b9692 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b967e:	68b8      	ldr	r0, [r7, #8]
   b9680:	6803      	ldr	r3, [r0, #0]
   b9682:	699f      	ldr	r7, [r3, #24]
   b9684:	462a      	mov	r2, r5
   b9686:	4633      	mov	r3, r6
   b9688:	4621      	mov	r1, r4
   b968a:	46bc      	mov	ip, r7
   b968c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9690:	4760      	bx	ip
   b9692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9696 <_ZNSt9type_infoD1Ev>:
   b9696:	4770      	bx	lr

000b9698 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9698:	2000      	movs	r0, #0
   b969a:	4770      	bx	lr

000b969c <_ZNKSt9type_infoeqERKS_>:
   b969c:	4281      	cmp	r1, r0
   b969e:	b508      	push	{r3, lr}
   b96a0:	d00e      	beq.n	b96c0 <_ZNKSt9type_infoeqERKS_+0x24>
   b96a2:	6840      	ldr	r0, [r0, #4]
   b96a4:	7803      	ldrb	r3, [r0, #0]
   b96a6:	2b2a      	cmp	r3, #42	; 0x2a
   b96a8:	d00c      	beq.n	b96c4 <_ZNKSt9type_infoeqERKS_+0x28>
   b96aa:	6849      	ldr	r1, [r1, #4]
   b96ac:	780b      	ldrb	r3, [r1, #0]
   b96ae:	2b2a      	cmp	r3, #42	; 0x2a
   b96b0:	bf08      	it	eq
   b96b2:	3101      	addeq	r1, #1
   b96b4:	f000 fd4b 	bl	ba14e <strcmp>
   b96b8:	fab0 f080 	clz	r0, r0
   b96bc:	0940      	lsrs	r0, r0, #5
   b96be:	bd08      	pop	{r3, pc}
   b96c0:	2001      	movs	r0, #1
   b96c2:	e7fc      	b.n	b96be <_ZNKSt9type_infoeqERKS_+0x22>
   b96c4:	2000      	movs	r0, #0
   b96c6:	e7fa      	b.n	b96be <_ZNKSt9type_infoeqERKS_+0x22>

000b96c8 <__aeabi_drsub>:
   b96c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b96cc:	e002      	b.n	b96d4 <__adddf3>
   b96ce:	bf00      	nop

000b96d0 <__aeabi_dsub>:
   b96d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b96d4 <__adddf3>:
   b96d4:	b530      	push	{r4, r5, lr}
   b96d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b96da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b96de:	ea94 0f05 	teq	r4, r5
   b96e2:	bf08      	it	eq
   b96e4:	ea90 0f02 	teqeq	r0, r2
   b96e8:	bf1f      	itttt	ne
   b96ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   b96ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   b96f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b96f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b96fa:	f000 80e2 	beq.w	b98c2 <__adddf3+0x1ee>
   b96fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9702:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9706:	bfb8      	it	lt
   b9708:	426d      	neglt	r5, r5
   b970a:	dd0c      	ble.n	b9726 <__adddf3+0x52>
   b970c:	442c      	add	r4, r5
   b970e:	ea80 0202 	eor.w	r2, r0, r2
   b9712:	ea81 0303 	eor.w	r3, r1, r3
   b9716:	ea82 0000 	eor.w	r0, r2, r0
   b971a:	ea83 0101 	eor.w	r1, r3, r1
   b971e:	ea80 0202 	eor.w	r2, r0, r2
   b9722:	ea81 0303 	eor.w	r3, r1, r3
   b9726:	2d36      	cmp	r5, #54	; 0x36
   b9728:	bf88      	it	hi
   b972a:	bd30      	pophi	{r4, r5, pc}
   b972c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9730:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9734:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9738:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b973c:	d002      	beq.n	b9744 <__adddf3+0x70>
   b973e:	4240      	negs	r0, r0
   b9740:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9744:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9748:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b974c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9750:	d002      	beq.n	b9758 <__adddf3+0x84>
   b9752:	4252      	negs	r2, r2
   b9754:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9758:	ea94 0f05 	teq	r4, r5
   b975c:	f000 80a7 	beq.w	b98ae <__adddf3+0x1da>
   b9760:	f1a4 0401 	sub.w	r4, r4, #1
   b9764:	f1d5 0e20 	rsbs	lr, r5, #32
   b9768:	db0d      	blt.n	b9786 <__adddf3+0xb2>
   b976a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b976e:	fa22 f205 	lsr.w	r2, r2, r5
   b9772:	1880      	adds	r0, r0, r2
   b9774:	f141 0100 	adc.w	r1, r1, #0
   b9778:	fa03 f20e 	lsl.w	r2, r3, lr
   b977c:	1880      	adds	r0, r0, r2
   b977e:	fa43 f305 	asr.w	r3, r3, r5
   b9782:	4159      	adcs	r1, r3
   b9784:	e00e      	b.n	b97a4 <__adddf3+0xd0>
   b9786:	f1a5 0520 	sub.w	r5, r5, #32
   b978a:	f10e 0e20 	add.w	lr, lr, #32
   b978e:	2a01      	cmp	r2, #1
   b9790:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9794:	bf28      	it	cs
   b9796:	f04c 0c02 	orrcs.w	ip, ip, #2
   b979a:	fa43 f305 	asr.w	r3, r3, r5
   b979e:	18c0      	adds	r0, r0, r3
   b97a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b97a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b97a8:	d507      	bpl.n	b97ba <__adddf3+0xe6>
   b97aa:	f04f 0e00 	mov.w	lr, #0
   b97ae:	f1dc 0c00 	rsbs	ip, ip, #0
   b97b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b97b6:	eb6e 0101 	sbc.w	r1, lr, r1
   b97ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b97be:	d31b      	bcc.n	b97f8 <__adddf3+0x124>
   b97c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b97c4:	d30c      	bcc.n	b97e0 <__adddf3+0x10c>
   b97c6:	0849      	lsrs	r1, r1, #1
   b97c8:	ea5f 0030 	movs.w	r0, r0, rrx
   b97cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b97d0:	f104 0401 	add.w	r4, r4, #1
   b97d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b97d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b97dc:	f080 809a 	bcs.w	b9914 <__adddf3+0x240>
   b97e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b97e4:	bf08      	it	eq
   b97e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b97ea:	f150 0000 	adcs.w	r0, r0, #0
   b97ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b97f2:	ea41 0105 	orr.w	r1, r1, r5
   b97f6:	bd30      	pop	{r4, r5, pc}
   b97f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b97fc:	4140      	adcs	r0, r0
   b97fe:	eb41 0101 	adc.w	r1, r1, r1
   b9802:	3c01      	subs	r4, #1
   b9804:	bf28      	it	cs
   b9806:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b980a:	d2e9      	bcs.n	b97e0 <__adddf3+0x10c>
   b980c:	f091 0f00 	teq	r1, #0
   b9810:	bf04      	itt	eq
   b9812:	4601      	moveq	r1, r0
   b9814:	2000      	moveq	r0, #0
   b9816:	fab1 f381 	clz	r3, r1
   b981a:	bf08      	it	eq
   b981c:	3320      	addeq	r3, #32
   b981e:	f1a3 030b 	sub.w	r3, r3, #11
   b9822:	f1b3 0220 	subs.w	r2, r3, #32
   b9826:	da0c      	bge.n	b9842 <__adddf3+0x16e>
   b9828:	320c      	adds	r2, #12
   b982a:	dd08      	ble.n	b983e <__adddf3+0x16a>
   b982c:	f102 0c14 	add.w	ip, r2, #20
   b9830:	f1c2 020c 	rsb	r2, r2, #12
   b9834:	fa01 f00c 	lsl.w	r0, r1, ip
   b9838:	fa21 f102 	lsr.w	r1, r1, r2
   b983c:	e00c      	b.n	b9858 <__adddf3+0x184>
   b983e:	f102 0214 	add.w	r2, r2, #20
   b9842:	bfd8      	it	le
   b9844:	f1c2 0c20 	rsble	ip, r2, #32
   b9848:	fa01 f102 	lsl.w	r1, r1, r2
   b984c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9850:	bfdc      	itt	le
   b9852:	ea41 010c 	orrle.w	r1, r1, ip
   b9856:	4090      	lslle	r0, r2
   b9858:	1ae4      	subs	r4, r4, r3
   b985a:	bfa2      	ittt	ge
   b985c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9860:	4329      	orrge	r1, r5
   b9862:	bd30      	popge	{r4, r5, pc}
   b9864:	ea6f 0404 	mvn.w	r4, r4
   b9868:	3c1f      	subs	r4, #31
   b986a:	da1c      	bge.n	b98a6 <__adddf3+0x1d2>
   b986c:	340c      	adds	r4, #12
   b986e:	dc0e      	bgt.n	b988e <__adddf3+0x1ba>
   b9870:	f104 0414 	add.w	r4, r4, #20
   b9874:	f1c4 0220 	rsb	r2, r4, #32
   b9878:	fa20 f004 	lsr.w	r0, r0, r4
   b987c:	fa01 f302 	lsl.w	r3, r1, r2
   b9880:	ea40 0003 	orr.w	r0, r0, r3
   b9884:	fa21 f304 	lsr.w	r3, r1, r4
   b9888:	ea45 0103 	orr.w	r1, r5, r3
   b988c:	bd30      	pop	{r4, r5, pc}
   b988e:	f1c4 040c 	rsb	r4, r4, #12
   b9892:	f1c4 0220 	rsb	r2, r4, #32
   b9896:	fa20 f002 	lsr.w	r0, r0, r2
   b989a:	fa01 f304 	lsl.w	r3, r1, r4
   b989e:	ea40 0003 	orr.w	r0, r0, r3
   b98a2:	4629      	mov	r1, r5
   b98a4:	bd30      	pop	{r4, r5, pc}
   b98a6:	fa21 f004 	lsr.w	r0, r1, r4
   b98aa:	4629      	mov	r1, r5
   b98ac:	bd30      	pop	{r4, r5, pc}
   b98ae:	f094 0f00 	teq	r4, #0
   b98b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b98b6:	bf06      	itte	eq
   b98b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b98bc:	3401      	addeq	r4, #1
   b98be:	3d01      	subne	r5, #1
   b98c0:	e74e      	b.n	b9760 <__adddf3+0x8c>
   b98c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b98c6:	bf18      	it	ne
   b98c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b98cc:	d029      	beq.n	b9922 <__adddf3+0x24e>
   b98ce:	ea94 0f05 	teq	r4, r5
   b98d2:	bf08      	it	eq
   b98d4:	ea90 0f02 	teqeq	r0, r2
   b98d8:	d005      	beq.n	b98e6 <__adddf3+0x212>
   b98da:	ea54 0c00 	orrs.w	ip, r4, r0
   b98de:	bf04      	itt	eq
   b98e0:	4619      	moveq	r1, r3
   b98e2:	4610      	moveq	r0, r2
   b98e4:	bd30      	pop	{r4, r5, pc}
   b98e6:	ea91 0f03 	teq	r1, r3
   b98ea:	bf1e      	ittt	ne
   b98ec:	2100      	movne	r1, #0
   b98ee:	2000      	movne	r0, #0
   b98f0:	bd30      	popne	{r4, r5, pc}
   b98f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b98f6:	d105      	bne.n	b9904 <__adddf3+0x230>
   b98f8:	0040      	lsls	r0, r0, #1
   b98fa:	4149      	adcs	r1, r1
   b98fc:	bf28      	it	cs
   b98fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9902:	bd30      	pop	{r4, r5, pc}
   b9904:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9908:	bf3c      	itt	cc
   b990a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b990e:	bd30      	popcc	{r4, r5, pc}
   b9910:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9914:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b991c:	f04f 0000 	mov.w	r0, #0
   b9920:	bd30      	pop	{r4, r5, pc}
   b9922:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9926:	bf1a      	itte	ne
   b9928:	4619      	movne	r1, r3
   b992a:	4610      	movne	r0, r2
   b992c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9930:	bf1c      	itt	ne
   b9932:	460b      	movne	r3, r1
   b9934:	4602      	movne	r2, r0
   b9936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b993a:	bf06      	itte	eq
   b993c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9940:	ea91 0f03 	teqeq	r1, r3
   b9944:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9948:	bd30      	pop	{r4, r5, pc}
   b994a:	bf00      	nop

000b994c <__aeabi_ui2d>:
   b994c:	f090 0f00 	teq	r0, #0
   b9950:	bf04      	itt	eq
   b9952:	2100      	moveq	r1, #0
   b9954:	4770      	bxeq	lr
   b9956:	b530      	push	{r4, r5, lr}
   b9958:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b995c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9960:	f04f 0500 	mov.w	r5, #0
   b9964:	f04f 0100 	mov.w	r1, #0
   b9968:	e750      	b.n	b980c <__adddf3+0x138>
   b996a:	bf00      	nop

000b996c <__aeabi_i2d>:
   b996c:	f090 0f00 	teq	r0, #0
   b9970:	bf04      	itt	eq
   b9972:	2100      	moveq	r1, #0
   b9974:	4770      	bxeq	lr
   b9976:	b530      	push	{r4, r5, lr}
   b9978:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b997c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9980:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9984:	bf48      	it	mi
   b9986:	4240      	negmi	r0, r0
   b9988:	f04f 0100 	mov.w	r1, #0
   b998c:	e73e      	b.n	b980c <__adddf3+0x138>
   b998e:	bf00      	nop

000b9990 <__aeabi_f2d>:
   b9990:	0042      	lsls	r2, r0, #1
   b9992:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9996:	ea4f 0131 	mov.w	r1, r1, rrx
   b999a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b999e:	bf1f      	itttt	ne
   b99a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b99a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b99a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b99ac:	4770      	bxne	lr
   b99ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b99b2:	bf08      	it	eq
   b99b4:	4770      	bxeq	lr
   b99b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b99ba:	bf04      	itt	eq
   b99bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b99c0:	4770      	bxeq	lr
   b99c2:	b530      	push	{r4, r5, lr}
   b99c4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b99c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b99cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b99d0:	e71c      	b.n	b980c <__adddf3+0x138>
   b99d2:	bf00      	nop

000b99d4 <__aeabi_ul2d>:
   b99d4:	ea50 0201 	orrs.w	r2, r0, r1
   b99d8:	bf08      	it	eq
   b99da:	4770      	bxeq	lr
   b99dc:	b530      	push	{r4, r5, lr}
   b99de:	f04f 0500 	mov.w	r5, #0
   b99e2:	e00a      	b.n	b99fa <__aeabi_l2d+0x16>

000b99e4 <__aeabi_l2d>:
   b99e4:	ea50 0201 	orrs.w	r2, r0, r1
   b99e8:	bf08      	it	eq
   b99ea:	4770      	bxeq	lr
   b99ec:	b530      	push	{r4, r5, lr}
   b99ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b99f2:	d502      	bpl.n	b99fa <__aeabi_l2d+0x16>
   b99f4:	4240      	negs	r0, r0
   b99f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b99fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b99fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9a02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9a06:	f43f aed8 	beq.w	b97ba <__adddf3+0xe6>
   b9a0a:	f04f 0203 	mov.w	r2, #3
   b9a0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9a12:	bf18      	it	ne
   b9a14:	3203      	addne	r2, #3
   b9a16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9a1a:	bf18      	it	ne
   b9a1c:	3203      	addne	r2, #3
   b9a1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9a22:	f1c2 0320 	rsb	r3, r2, #32
   b9a26:	fa00 fc03 	lsl.w	ip, r0, r3
   b9a2a:	fa20 f002 	lsr.w	r0, r0, r2
   b9a2e:	fa01 fe03 	lsl.w	lr, r1, r3
   b9a32:	ea40 000e 	orr.w	r0, r0, lr
   b9a36:	fa21 f102 	lsr.w	r1, r1, r2
   b9a3a:	4414      	add	r4, r2
   b9a3c:	e6bd      	b.n	b97ba <__adddf3+0xe6>
   b9a3e:	bf00      	nop

000b9a40 <__aeabi_dmul>:
   b9a40:	b570      	push	{r4, r5, r6, lr}
   b9a42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9a46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9a4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9a4e:	bf1d      	ittte	ne
   b9a50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9a54:	ea94 0f0c 	teqne	r4, ip
   b9a58:	ea95 0f0c 	teqne	r5, ip
   b9a5c:	f000 f8de 	bleq	b9c1c <__aeabi_dmul+0x1dc>
   b9a60:	442c      	add	r4, r5
   b9a62:	ea81 0603 	eor.w	r6, r1, r3
   b9a66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9a6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9a6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9a72:	bf18      	it	ne
   b9a74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9a80:	d038      	beq.n	b9af4 <__aeabi_dmul+0xb4>
   b9a82:	fba0 ce02 	umull	ip, lr, r0, r2
   b9a86:	f04f 0500 	mov.w	r5, #0
   b9a8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9a8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9a92:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9a96:	f04f 0600 	mov.w	r6, #0
   b9a9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9a9e:	f09c 0f00 	teq	ip, #0
   b9aa2:	bf18      	it	ne
   b9aa4:	f04e 0e01 	orrne.w	lr, lr, #1
   b9aa8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9aac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9ab0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9ab4:	d204      	bcs.n	b9ac0 <__aeabi_dmul+0x80>
   b9ab6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9aba:	416d      	adcs	r5, r5
   b9abc:	eb46 0606 	adc.w	r6, r6, r6
   b9ac0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9ac4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9ac8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9acc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9ad0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9ad4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9ad8:	bf88      	it	hi
   b9ada:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9ade:	d81e      	bhi.n	b9b1e <__aeabi_dmul+0xde>
   b9ae0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9ae4:	bf08      	it	eq
   b9ae6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9aea:	f150 0000 	adcs.w	r0, r0, #0
   b9aee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9af2:	bd70      	pop	{r4, r5, r6, pc}
   b9af4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9af8:	ea46 0101 	orr.w	r1, r6, r1
   b9afc:	ea40 0002 	orr.w	r0, r0, r2
   b9b00:	ea81 0103 	eor.w	r1, r1, r3
   b9b04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9b08:	bfc2      	ittt	gt
   b9b0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9b0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9b12:	bd70      	popgt	{r4, r5, r6, pc}
   b9b14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9b18:	f04f 0e00 	mov.w	lr, #0
   b9b1c:	3c01      	subs	r4, #1
   b9b1e:	f300 80ab 	bgt.w	b9c78 <__aeabi_dmul+0x238>
   b9b22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9b26:	bfde      	ittt	le
   b9b28:	2000      	movle	r0, #0
   b9b2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9b2e:	bd70      	pople	{r4, r5, r6, pc}
   b9b30:	f1c4 0400 	rsb	r4, r4, #0
   b9b34:	3c20      	subs	r4, #32
   b9b36:	da35      	bge.n	b9ba4 <__aeabi_dmul+0x164>
   b9b38:	340c      	adds	r4, #12
   b9b3a:	dc1b      	bgt.n	b9b74 <__aeabi_dmul+0x134>
   b9b3c:	f104 0414 	add.w	r4, r4, #20
   b9b40:	f1c4 0520 	rsb	r5, r4, #32
   b9b44:	fa00 f305 	lsl.w	r3, r0, r5
   b9b48:	fa20 f004 	lsr.w	r0, r0, r4
   b9b4c:	fa01 f205 	lsl.w	r2, r1, r5
   b9b50:	ea40 0002 	orr.w	r0, r0, r2
   b9b54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9b58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9b5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9b60:	fa21 f604 	lsr.w	r6, r1, r4
   b9b64:	eb42 0106 	adc.w	r1, r2, r6
   b9b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9b6c:	bf08      	it	eq
   b9b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9b72:	bd70      	pop	{r4, r5, r6, pc}
   b9b74:	f1c4 040c 	rsb	r4, r4, #12
   b9b78:	f1c4 0520 	rsb	r5, r4, #32
   b9b7c:	fa00 f304 	lsl.w	r3, r0, r4
   b9b80:	fa20 f005 	lsr.w	r0, r0, r5
   b9b84:	fa01 f204 	lsl.w	r2, r1, r4
   b9b88:	ea40 0002 	orr.w	r0, r0, r2
   b9b8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9b90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9b94:	f141 0100 	adc.w	r1, r1, #0
   b9b98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9b9c:	bf08      	it	eq
   b9b9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9ba2:	bd70      	pop	{r4, r5, r6, pc}
   b9ba4:	f1c4 0520 	rsb	r5, r4, #32
   b9ba8:	fa00 f205 	lsl.w	r2, r0, r5
   b9bac:	ea4e 0e02 	orr.w	lr, lr, r2
   b9bb0:	fa20 f304 	lsr.w	r3, r0, r4
   b9bb4:	fa01 f205 	lsl.w	r2, r1, r5
   b9bb8:	ea43 0302 	orr.w	r3, r3, r2
   b9bbc:	fa21 f004 	lsr.w	r0, r1, r4
   b9bc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9bc4:	fa21 f204 	lsr.w	r2, r1, r4
   b9bc8:	ea20 0002 	bic.w	r0, r0, r2
   b9bcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9bd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9bd4:	bf08      	it	eq
   b9bd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9bda:	bd70      	pop	{r4, r5, r6, pc}
   b9bdc:	f094 0f00 	teq	r4, #0
   b9be0:	d10f      	bne.n	b9c02 <__aeabi_dmul+0x1c2>
   b9be2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9be6:	0040      	lsls	r0, r0, #1
   b9be8:	eb41 0101 	adc.w	r1, r1, r1
   b9bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9bf0:	bf08      	it	eq
   b9bf2:	3c01      	subeq	r4, #1
   b9bf4:	d0f7      	beq.n	b9be6 <__aeabi_dmul+0x1a6>
   b9bf6:	ea41 0106 	orr.w	r1, r1, r6
   b9bfa:	f095 0f00 	teq	r5, #0
   b9bfe:	bf18      	it	ne
   b9c00:	4770      	bxne	lr
   b9c02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9c06:	0052      	lsls	r2, r2, #1
   b9c08:	eb43 0303 	adc.w	r3, r3, r3
   b9c0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9c10:	bf08      	it	eq
   b9c12:	3d01      	subeq	r5, #1
   b9c14:	d0f7      	beq.n	b9c06 <__aeabi_dmul+0x1c6>
   b9c16:	ea43 0306 	orr.w	r3, r3, r6
   b9c1a:	4770      	bx	lr
   b9c1c:	ea94 0f0c 	teq	r4, ip
   b9c20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9c24:	bf18      	it	ne
   b9c26:	ea95 0f0c 	teqne	r5, ip
   b9c2a:	d00c      	beq.n	b9c46 <__aeabi_dmul+0x206>
   b9c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9c30:	bf18      	it	ne
   b9c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9c36:	d1d1      	bne.n	b9bdc <__aeabi_dmul+0x19c>
   b9c38:	ea81 0103 	eor.w	r1, r1, r3
   b9c3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9c40:	f04f 0000 	mov.w	r0, #0
   b9c44:	bd70      	pop	{r4, r5, r6, pc}
   b9c46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9c4a:	bf06      	itte	eq
   b9c4c:	4610      	moveq	r0, r2
   b9c4e:	4619      	moveq	r1, r3
   b9c50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9c54:	d019      	beq.n	b9c8a <__aeabi_dmul+0x24a>
   b9c56:	ea94 0f0c 	teq	r4, ip
   b9c5a:	d102      	bne.n	b9c62 <__aeabi_dmul+0x222>
   b9c5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9c60:	d113      	bne.n	b9c8a <__aeabi_dmul+0x24a>
   b9c62:	ea95 0f0c 	teq	r5, ip
   b9c66:	d105      	bne.n	b9c74 <__aeabi_dmul+0x234>
   b9c68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9c6c:	bf1c      	itt	ne
   b9c6e:	4610      	movne	r0, r2
   b9c70:	4619      	movne	r1, r3
   b9c72:	d10a      	bne.n	b9c8a <__aeabi_dmul+0x24a>
   b9c74:	ea81 0103 	eor.w	r1, r1, r3
   b9c78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9c7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9c80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9c84:	f04f 0000 	mov.w	r0, #0
   b9c88:	bd70      	pop	{r4, r5, r6, pc}
   b9c8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9c8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9c92:	bd70      	pop	{r4, r5, r6, pc}

000b9c94 <__aeabi_ddiv>:
   b9c94:	b570      	push	{r4, r5, r6, lr}
   b9c96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9c9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9c9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9ca2:	bf1d      	ittte	ne
   b9ca4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9ca8:	ea94 0f0c 	teqne	r4, ip
   b9cac:	ea95 0f0c 	teqne	r5, ip
   b9cb0:	f000 f8a7 	bleq	b9e02 <__aeabi_ddiv+0x16e>
   b9cb4:	eba4 0405 	sub.w	r4, r4, r5
   b9cb8:	ea81 0e03 	eor.w	lr, r1, r3
   b9cbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9cc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9cc4:	f000 8088 	beq.w	b9dd8 <__aeabi_ddiv+0x144>
   b9cc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9ccc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9cd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9cd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9cd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9cdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9ce0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9ce4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9ce8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9cec:	429d      	cmp	r5, r3
   b9cee:	bf08      	it	eq
   b9cf0:	4296      	cmpeq	r6, r2
   b9cf2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9cf6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9cfa:	d202      	bcs.n	b9d02 <__aeabi_ddiv+0x6e>
   b9cfc:	085b      	lsrs	r3, r3, #1
   b9cfe:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d02:	1ab6      	subs	r6, r6, r2
   b9d04:	eb65 0503 	sbc.w	r5, r5, r3
   b9d08:	085b      	lsrs	r3, r3, #1
   b9d0a:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9d12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9d16:	ebb6 0e02 	subs.w	lr, r6, r2
   b9d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d1e:	bf22      	ittt	cs
   b9d20:	1ab6      	subcs	r6, r6, r2
   b9d22:	4675      	movcs	r5, lr
   b9d24:	ea40 000c 	orrcs.w	r0, r0, ip
   b9d28:	085b      	lsrs	r3, r3, #1
   b9d2a:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d2e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9d32:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d36:	bf22      	ittt	cs
   b9d38:	1ab6      	subcs	r6, r6, r2
   b9d3a:	4675      	movcs	r5, lr
   b9d3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9d40:	085b      	lsrs	r3, r3, #1
   b9d42:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d46:	ebb6 0e02 	subs.w	lr, r6, r2
   b9d4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d4e:	bf22      	ittt	cs
   b9d50:	1ab6      	subcs	r6, r6, r2
   b9d52:	4675      	movcs	r5, lr
   b9d54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9d58:	085b      	lsrs	r3, r3, #1
   b9d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d5e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9d62:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d66:	bf22      	ittt	cs
   b9d68:	1ab6      	subcs	r6, r6, r2
   b9d6a:	4675      	movcs	r5, lr
   b9d6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9d70:	ea55 0e06 	orrs.w	lr, r5, r6
   b9d74:	d018      	beq.n	b9da8 <__aeabi_ddiv+0x114>
   b9d76:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9d7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9d7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9d82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9d86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9d8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9d8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9d92:	d1c0      	bne.n	b9d16 <__aeabi_ddiv+0x82>
   b9d94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9d98:	d10b      	bne.n	b9db2 <__aeabi_ddiv+0x11e>
   b9d9a:	ea41 0100 	orr.w	r1, r1, r0
   b9d9e:	f04f 0000 	mov.w	r0, #0
   b9da2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9da6:	e7b6      	b.n	b9d16 <__aeabi_ddiv+0x82>
   b9da8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9dac:	bf04      	itt	eq
   b9dae:	4301      	orreq	r1, r0
   b9db0:	2000      	moveq	r0, #0
   b9db2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9db6:	bf88      	it	hi
   b9db8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9dbc:	f63f aeaf 	bhi.w	b9b1e <__aeabi_dmul+0xde>
   b9dc0:	ebb5 0c03 	subs.w	ip, r5, r3
   b9dc4:	bf04      	itt	eq
   b9dc6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9dca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9dce:	f150 0000 	adcs.w	r0, r0, #0
   b9dd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9dd6:	bd70      	pop	{r4, r5, r6, pc}
   b9dd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9ddc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9de0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9de4:	bfc2      	ittt	gt
   b9de6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9dea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9dee:	bd70      	popgt	{r4, r5, r6, pc}
   b9df0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9df4:	f04f 0e00 	mov.w	lr, #0
   b9df8:	3c01      	subs	r4, #1
   b9dfa:	e690      	b.n	b9b1e <__aeabi_dmul+0xde>
   b9dfc:	ea45 0e06 	orr.w	lr, r5, r6
   b9e00:	e68d      	b.n	b9b1e <__aeabi_dmul+0xde>
   b9e02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9e06:	ea94 0f0c 	teq	r4, ip
   b9e0a:	bf08      	it	eq
   b9e0c:	ea95 0f0c 	teqeq	r5, ip
   b9e10:	f43f af3b 	beq.w	b9c8a <__aeabi_dmul+0x24a>
   b9e14:	ea94 0f0c 	teq	r4, ip
   b9e18:	d10a      	bne.n	b9e30 <__aeabi_ddiv+0x19c>
   b9e1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9e1e:	f47f af34 	bne.w	b9c8a <__aeabi_dmul+0x24a>
   b9e22:	ea95 0f0c 	teq	r5, ip
   b9e26:	f47f af25 	bne.w	b9c74 <__aeabi_dmul+0x234>
   b9e2a:	4610      	mov	r0, r2
   b9e2c:	4619      	mov	r1, r3
   b9e2e:	e72c      	b.n	b9c8a <__aeabi_dmul+0x24a>
   b9e30:	ea95 0f0c 	teq	r5, ip
   b9e34:	d106      	bne.n	b9e44 <__aeabi_ddiv+0x1b0>
   b9e36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9e3a:	f43f aefd 	beq.w	b9c38 <__aeabi_dmul+0x1f8>
   b9e3e:	4610      	mov	r0, r2
   b9e40:	4619      	mov	r1, r3
   b9e42:	e722      	b.n	b9c8a <__aeabi_dmul+0x24a>
   b9e44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9e48:	bf18      	it	ne
   b9e4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e4e:	f47f aec5 	bne.w	b9bdc <__aeabi_dmul+0x19c>
   b9e52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9e56:	f47f af0d 	bne.w	b9c74 <__aeabi_dmul+0x234>
   b9e5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b9e5e:	f47f aeeb 	bne.w	b9c38 <__aeabi_dmul+0x1f8>
   b9e62:	e712      	b.n	b9c8a <__aeabi_dmul+0x24a>

000b9e64 <__gedf2>:
   b9e64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9e68:	e006      	b.n	b9e78 <__cmpdf2+0x4>
   b9e6a:	bf00      	nop

000b9e6c <__ledf2>:
   b9e6c:	f04f 0c01 	mov.w	ip, #1
   b9e70:	e002      	b.n	b9e78 <__cmpdf2+0x4>
   b9e72:	bf00      	nop

000b9e74 <__cmpdf2>:
   b9e74:	f04f 0c01 	mov.w	ip, #1
   b9e78:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9e7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9e84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9e88:	bf18      	it	ne
   b9e8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9e8e:	d01b      	beq.n	b9ec8 <__cmpdf2+0x54>
   b9e90:	b001      	add	sp, #4
   b9e92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9e96:	bf0c      	ite	eq
   b9e98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9e9c:	ea91 0f03 	teqne	r1, r3
   b9ea0:	bf02      	ittt	eq
   b9ea2:	ea90 0f02 	teqeq	r0, r2
   b9ea6:	2000      	moveq	r0, #0
   b9ea8:	4770      	bxeq	lr
   b9eaa:	f110 0f00 	cmn.w	r0, #0
   b9eae:	ea91 0f03 	teq	r1, r3
   b9eb2:	bf58      	it	pl
   b9eb4:	4299      	cmppl	r1, r3
   b9eb6:	bf08      	it	eq
   b9eb8:	4290      	cmpeq	r0, r2
   b9eba:	bf2c      	ite	cs
   b9ebc:	17d8      	asrcs	r0, r3, #31
   b9ebe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9ec2:	f040 0001 	orr.w	r0, r0, #1
   b9ec6:	4770      	bx	lr
   b9ec8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9ecc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9ed0:	d102      	bne.n	b9ed8 <__cmpdf2+0x64>
   b9ed2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9ed6:	d107      	bne.n	b9ee8 <__cmpdf2+0x74>
   b9ed8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9edc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9ee0:	d1d6      	bne.n	b9e90 <__cmpdf2+0x1c>
   b9ee2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9ee6:	d0d3      	beq.n	b9e90 <__cmpdf2+0x1c>
   b9ee8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9eec:	4770      	bx	lr
   b9eee:	bf00      	nop

000b9ef0 <__aeabi_cdrcmple>:
   b9ef0:	4684      	mov	ip, r0
   b9ef2:	4610      	mov	r0, r2
   b9ef4:	4662      	mov	r2, ip
   b9ef6:	468c      	mov	ip, r1
   b9ef8:	4619      	mov	r1, r3
   b9efa:	4663      	mov	r3, ip
   b9efc:	e000      	b.n	b9f00 <__aeabi_cdcmpeq>
   b9efe:	bf00      	nop

000b9f00 <__aeabi_cdcmpeq>:
   b9f00:	b501      	push	{r0, lr}
   b9f02:	f7ff ffb7 	bl	b9e74 <__cmpdf2>
   b9f06:	2800      	cmp	r0, #0
   b9f08:	bf48      	it	mi
   b9f0a:	f110 0f00 	cmnmi.w	r0, #0
   b9f0e:	bd01      	pop	{r0, pc}

000b9f10 <__aeabi_dcmpeq>:
   b9f10:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f14:	f7ff fff4 	bl	b9f00 <__aeabi_cdcmpeq>
   b9f18:	bf0c      	ite	eq
   b9f1a:	2001      	moveq	r0, #1
   b9f1c:	2000      	movne	r0, #0
   b9f1e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f22:	bf00      	nop

000b9f24 <__aeabi_dcmplt>:
   b9f24:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f28:	f7ff ffea 	bl	b9f00 <__aeabi_cdcmpeq>
   b9f2c:	bf34      	ite	cc
   b9f2e:	2001      	movcc	r0, #1
   b9f30:	2000      	movcs	r0, #0
   b9f32:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f36:	bf00      	nop

000b9f38 <__aeabi_dcmple>:
   b9f38:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f3c:	f7ff ffe0 	bl	b9f00 <__aeabi_cdcmpeq>
   b9f40:	bf94      	ite	ls
   b9f42:	2001      	movls	r0, #1
   b9f44:	2000      	movhi	r0, #0
   b9f46:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f4a:	bf00      	nop

000b9f4c <__aeabi_dcmpge>:
   b9f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f50:	f7ff ffce 	bl	b9ef0 <__aeabi_cdrcmple>
   b9f54:	bf94      	ite	ls
   b9f56:	2001      	movls	r0, #1
   b9f58:	2000      	movhi	r0, #0
   b9f5a:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f5e:	bf00      	nop

000b9f60 <__aeabi_dcmpgt>:
   b9f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f64:	f7ff ffc4 	bl	b9ef0 <__aeabi_cdrcmple>
   b9f68:	bf34      	ite	cc
   b9f6a:	2001      	movcc	r0, #1
   b9f6c:	2000      	movcs	r0, #0
   b9f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f72:	bf00      	nop

000b9f74 <__aeabi_d2uiz>:
   b9f74:	004a      	lsls	r2, r1, #1
   b9f76:	d211      	bcs.n	b9f9c <__aeabi_d2uiz+0x28>
   b9f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9f7c:	d211      	bcs.n	b9fa2 <__aeabi_d2uiz+0x2e>
   b9f7e:	d50d      	bpl.n	b9f9c <__aeabi_d2uiz+0x28>
   b9f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9f88:	d40e      	bmi.n	b9fa8 <__aeabi_d2uiz+0x34>
   b9f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9f96:	fa23 f002 	lsr.w	r0, r3, r2
   b9f9a:	4770      	bx	lr
   b9f9c:	f04f 0000 	mov.w	r0, #0
   b9fa0:	4770      	bx	lr
   b9fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9fa6:	d102      	bne.n	b9fae <__aeabi_d2uiz+0x3a>
   b9fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9fac:	4770      	bx	lr
   b9fae:	f04f 0000 	mov.w	r0, #0
   b9fb2:	4770      	bx	lr

000b9fb4 <__aeabi_d2f>:
   b9fb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9fb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9fbc:	bf24      	itt	cs
   b9fbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9fc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9fc6:	d90d      	bls.n	b9fe4 <__aeabi_d2f+0x30>
   b9fc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9fcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9fd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9fd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9fd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9fdc:	bf08      	it	eq
   b9fde:	f020 0001 	biceq.w	r0, r0, #1
   b9fe2:	4770      	bx	lr
   b9fe4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9fe8:	d121      	bne.n	ba02e <__aeabi_d2f+0x7a>
   b9fea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9fee:	bfbc      	itt	lt
   b9ff0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b9ff4:	4770      	bxlt	lr
   b9ff6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9ffa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9ffe:	f1c2 0218 	rsb	r2, r2, #24
   ba002:	f1c2 0c20 	rsb	ip, r2, #32
   ba006:	fa10 f30c 	lsls.w	r3, r0, ip
   ba00a:	fa20 f002 	lsr.w	r0, r0, r2
   ba00e:	bf18      	it	ne
   ba010:	f040 0001 	orrne.w	r0, r0, #1
   ba014:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba018:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   ba01c:	fa03 fc0c 	lsl.w	ip, r3, ip
   ba020:	ea40 000c 	orr.w	r0, r0, ip
   ba024:	fa23 f302 	lsr.w	r3, r3, r2
   ba028:	ea4f 0343 	mov.w	r3, r3, lsl #1
   ba02c:	e7cc      	b.n	b9fc8 <__aeabi_d2f+0x14>
   ba02e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   ba032:	d107      	bne.n	ba044 <__aeabi_d2f+0x90>
   ba034:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   ba038:	bf1e      	ittt	ne
   ba03a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   ba03e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   ba042:	4770      	bxne	lr
   ba044:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   ba048:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   ba04c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ba050:	4770      	bx	lr
   ba052:	bf00      	nop

000ba054 <__aeabi_d2ulz>:
   ba054:	b5d0      	push	{r4, r6, r7, lr}
   ba056:	4b0c      	ldr	r3, [pc, #48]	; (ba088 <__aeabi_d2ulz+0x34>)
   ba058:	2200      	movs	r2, #0
   ba05a:	4606      	mov	r6, r0
   ba05c:	460f      	mov	r7, r1
   ba05e:	f7ff fcef 	bl	b9a40 <__aeabi_dmul>
   ba062:	f7ff ff87 	bl	b9f74 <__aeabi_d2uiz>
   ba066:	4604      	mov	r4, r0
   ba068:	f7ff fc70 	bl	b994c <__aeabi_ui2d>
   ba06c:	4b07      	ldr	r3, [pc, #28]	; (ba08c <__aeabi_d2ulz+0x38>)
   ba06e:	2200      	movs	r2, #0
   ba070:	f7ff fce6 	bl	b9a40 <__aeabi_dmul>
   ba074:	4602      	mov	r2, r0
   ba076:	460b      	mov	r3, r1
   ba078:	4630      	mov	r0, r6
   ba07a:	4639      	mov	r1, r7
   ba07c:	f7ff fb28 	bl	b96d0 <__aeabi_dsub>
   ba080:	f7ff ff78 	bl	b9f74 <__aeabi_d2uiz>
   ba084:	4621      	mov	r1, r4
   ba086:	bdd0      	pop	{r4, r6, r7, pc}
   ba088:	3df00000 	.word	0x3df00000
   ba08c:	41f00000 	.word	0x41f00000

000ba090 <atexit>:
   ba090:	2300      	movs	r3, #0
   ba092:	4601      	mov	r1, r0
   ba094:	461a      	mov	r2, r3
   ba096:	4618      	mov	r0, r3
   ba098:	f000 bfe4 	b.w	bb064 <__register_exitproc>

000ba09c <atof>:
   ba09c:	2100      	movs	r1, #0
   ba09e:	f000 beed 	b.w	bae7c <strtod>

000ba0a2 <atol>:
   ba0a2:	220a      	movs	r2, #10
   ba0a4:	2100      	movs	r1, #0
   ba0a6:	f000 bfd3 	b.w	bb050 <strtol>

000ba0aa <memcpy>:
   ba0aa:	440a      	add	r2, r1
   ba0ac:	4291      	cmp	r1, r2
   ba0ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba0b2:	d100      	bne.n	ba0b6 <memcpy+0xc>
   ba0b4:	4770      	bx	lr
   ba0b6:	b510      	push	{r4, lr}
   ba0b8:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba0bc:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba0c0:	4291      	cmp	r1, r2
   ba0c2:	d1f9      	bne.n	ba0b8 <memcpy+0xe>
   ba0c4:	bd10      	pop	{r4, pc}

000ba0c6 <memset>:
   ba0c6:	4402      	add	r2, r0
   ba0c8:	4603      	mov	r3, r0
   ba0ca:	4293      	cmp	r3, r2
   ba0cc:	d100      	bne.n	ba0d0 <memset+0xa>
   ba0ce:	4770      	bx	lr
   ba0d0:	f803 1b01 	strb.w	r1, [r3], #1
   ba0d4:	e7f9      	b.n	ba0ca <memset+0x4>
	...

000ba0d8 <srand>:
   ba0d8:	b538      	push	{r3, r4, r5, lr}
   ba0da:	4b10      	ldr	r3, [pc, #64]	; (ba11c <srand+0x44>)
   ba0dc:	681d      	ldr	r5, [r3, #0]
   ba0de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba0e0:	4604      	mov	r4, r0
   ba0e2:	b9b3      	cbnz	r3, ba112 <srand+0x3a>
   ba0e4:	2018      	movs	r0, #24
   ba0e6:	f7fd f949 	bl	b737c <malloc>
   ba0ea:	4602      	mov	r2, r0
   ba0ec:	63a8      	str	r0, [r5, #56]	; 0x38
   ba0ee:	b920      	cbnz	r0, ba0fa <srand+0x22>
   ba0f0:	4b0b      	ldr	r3, [pc, #44]	; (ba120 <srand+0x48>)
   ba0f2:	480c      	ldr	r0, [pc, #48]	; (ba124 <srand+0x4c>)
   ba0f4:	2142      	movs	r1, #66	; 0x42
   ba0f6:	f7fd f989 	bl	b740c <__assert_func>
   ba0fa:	490b      	ldr	r1, [pc, #44]	; (ba128 <srand+0x50>)
   ba0fc:	4b0b      	ldr	r3, [pc, #44]	; (ba12c <srand+0x54>)
   ba0fe:	e9c0 1300 	strd	r1, r3, [r0]
   ba102:	4b0b      	ldr	r3, [pc, #44]	; (ba130 <srand+0x58>)
   ba104:	6083      	str	r3, [r0, #8]
   ba106:	230b      	movs	r3, #11
   ba108:	8183      	strh	r3, [r0, #12]
   ba10a:	2100      	movs	r1, #0
   ba10c:	2001      	movs	r0, #1
   ba10e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba112:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba114:	2200      	movs	r2, #0
   ba116:	611c      	str	r4, [r3, #16]
   ba118:	615a      	str	r2, [r3, #20]
   ba11a:	bd38      	pop	{r3, r4, r5, pc}
   ba11c:	2003df8c 	.word	0x2003df8c
   ba120:	000bceb5 	.word	0x000bceb5
   ba124:	000bcecc 	.word	0x000bcecc
   ba128:	abcd330e 	.word	0xabcd330e
   ba12c:	e66d1234 	.word	0xe66d1234
   ba130:	0005deec 	.word	0x0005deec

000ba134 <strchr>:
   ba134:	b2c9      	uxtb	r1, r1
   ba136:	4603      	mov	r3, r0
   ba138:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba13c:	b11a      	cbz	r2, ba146 <strchr+0x12>
   ba13e:	428a      	cmp	r2, r1
   ba140:	d1f9      	bne.n	ba136 <strchr+0x2>
   ba142:	4618      	mov	r0, r3
   ba144:	4770      	bx	lr
   ba146:	2900      	cmp	r1, #0
   ba148:	bf18      	it	ne
   ba14a:	2300      	movne	r3, #0
   ba14c:	e7f9      	b.n	ba142 <strchr+0xe>

000ba14e <strcmp>:
   ba14e:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba152:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba156:	2a01      	cmp	r2, #1
   ba158:	bf28      	it	cs
   ba15a:	429a      	cmpcs	r2, r3
   ba15c:	d0f7      	beq.n	ba14e <strcmp>
   ba15e:	1ad0      	subs	r0, r2, r3
   ba160:	4770      	bx	lr

000ba162 <strcpy>:
   ba162:	4603      	mov	r3, r0
   ba164:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba168:	f803 2b01 	strb.w	r2, [r3], #1
   ba16c:	2a00      	cmp	r2, #0
   ba16e:	d1f9      	bne.n	ba164 <strcpy+0x2>
   ba170:	4770      	bx	lr
	...

000ba174 <strdup>:
   ba174:	4b02      	ldr	r3, [pc, #8]	; (ba180 <strdup+0xc>)
   ba176:	4601      	mov	r1, r0
   ba178:	6818      	ldr	r0, [r3, #0]
   ba17a:	f000 b803 	b.w	ba184 <_strdup_r>
   ba17e:	bf00      	nop
   ba180:	2003df8c 	.word	0x2003df8c

000ba184 <_strdup_r>:
   ba184:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba186:	4604      	mov	r4, r0
   ba188:	4608      	mov	r0, r1
   ba18a:	460d      	mov	r5, r1
   ba18c:	f000 f80f 	bl	ba1ae <strlen>
   ba190:	1c42      	adds	r2, r0, #1
   ba192:	4611      	mov	r1, r2
   ba194:	4620      	mov	r0, r4
   ba196:	9201      	str	r2, [sp, #4]
   ba198:	f7fd f928 	bl	b73ec <_malloc_r>
   ba19c:	4604      	mov	r4, r0
   ba19e:	b118      	cbz	r0, ba1a8 <_strdup_r+0x24>
   ba1a0:	9a01      	ldr	r2, [sp, #4]
   ba1a2:	4629      	mov	r1, r5
   ba1a4:	f7ff ff81 	bl	ba0aa <memcpy>
   ba1a8:	4620      	mov	r0, r4
   ba1aa:	b003      	add	sp, #12
   ba1ac:	bd30      	pop	{r4, r5, pc}

000ba1ae <strlen>:
   ba1ae:	4603      	mov	r3, r0
   ba1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba1b4:	2a00      	cmp	r2, #0
   ba1b6:	d1fb      	bne.n	ba1b0 <strlen+0x2>
   ba1b8:	1a18      	subs	r0, r3, r0
   ba1ba:	3801      	subs	r0, #1
   ba1bc:	4770      	bx	lr

000ba1be <strncmp>:
   ba1be:	b510      	push	{r4, lr}
   ba1c0:	b17a      	cbz	r2, ba1e2 <strncmp+0x24>
   ba1c2:	4603      	mov	r3, r0
   ba1c4:	3901      	subs	r1, #1
   ba1c6:	1884      	adds	r4, r0, r2
   ba1c8:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba1cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba1d0:	4290      	cmp	r0, r2
   ba1d2:	d101      	bne.n	ba1d8 <strncmp+0x1a>
   ba1d4:	42a3      	cmp	r3, r4
   ba1d6:	d101      	bne.n	ba1dc <strncmp+0x1e>
   ba1d8:	1a80      	subs	r0, r0, r2
   ba1da:	bd10      	pop	{r4, pc}
   ba1dc:	2800      	cmp	r0, #0
   ba1de:	d1f3      	bne.n	ba1c8 <strncmp+0xa>
   ba1e0:	e7fa      	b.n	ba1d8 <strncmp+0x1a>
   ba1e2:	4610      	mov	r0, r2
   ba1e4:	e7f9      	b.n	ba1da <strncmp+0x1c>

000ba1e6 <strncpy>:
   ba1e6:	b510      	push	{r4, lr}
   ba1e8:	3901      	subs	r1, #1
   ba1ea:	4603      	mov	r3, r0
   ba1ec:	b132      	cbz	r2, ba1fc <strncpy+0x16>
   ba1ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba1f2:	f803 4b01 	strb.w	r4, [r3], #1
   ba1f6:	3a01      	subs	r2, #1
   ba1f8:	2c00      	cmp	r4, #0
   ba1fa:	d1f7      	bne.n	ba1ec <strncpy+0x6>
   ba1fc:	441a      	add	r2, r3
   ba1fe:	2100      	movs	r1, #0
   ba200:	4293      	cmp	r3, r2
   ba202:	d100      	bne.n	ba206 <strncpy+0x20>
   ba204:	bd10      	pop	{r4, pc}
   ba206:	f803 1b01 	strb.w	r1, [r3], #1
   ba20a:	e7f9      	b.n	ba200 <strncpy+0x1a>

000ba20c <strstr>:
   ba20c:	780a      	ldrb	r2, [r1, #0]
   ba20e:	b570      	push	{r4, r5, r6, lr}
   ba210:	b96a      	cbnz	r2, ba22e <strstr+0x22>
   ba212:	bd70      	pop	{r4, r5, r6, pc}
   ba214:	429a      	cmp	r2, r3
   ba216:	d109      	bne.n	ba22c <strstr+0x20>
   ba218:	460c      	mov	r4, r1
   ba21a:	4605      	mov	r5, r0
   ba21c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba220:	2b00      	cmp	r3, #0
   ba222:	d0f6      	beq.n	ba212 <strstr+0x6>
   ba224:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba228:	429e      	cmp	r6, r3
   ba22a:	d0f7      	beq.n	ba21c <strstr+0x10>
   ba22c:	3001      	adds	r0, #1
   ba22e:	7803      	ldrb	r3, [r0, #0]
   ba230:	2b00      	cmp	r3, #0
   ba232:	d1ef      	bne.n	ba214 <strstr+0x8>
   ba234:	4618      	mov	r0, r3
   ba236:	e7ec      	b.n	ba212 <strstr+0x6>

000ba238 <sulp>:
   ba238:	b570      	push	{r4, r5, r6, lr}
   ba23a:	4604      	mov	r4, r0
   ba23c:	460d      	mov	r5, r1
   ba23e:	ec45 4b10 	vmov	d0, r4, r5
   ba242:	4616      	mov	r6, r2
   ba244:	f001 fe68 	bl	bbf18 <__ulp>
   ba248:	ec51 0b10 	vmov	r0, r1, d0
   ba24c:	b17e      	cbz	r6, ba26e <sulp+0x36>
   ba24e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba252:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba256:	2b00      	cmp	r3, #0
   ba258:	dd09      	ble.n	ba26e <sulp+0x36>
   ba25a:	051b      	lsls	r3, r3, #20
   ba25c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba260:	2400      	movs	r4, #0
   ba262:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba266:	4622      	mov	r2, r4
   ba268:	462b      	mov	r3, r5
   ba26a:	f7ff fbe9 	bl	b9a40 <__aeabi_dmul>
   ba26e:	bd70      	pop	{r4, r5, r6, pc}

000ba270 <_strtod_l>:
   ba270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba274:	ed2d 8b02 	vpush	{d8}
   ba278:	b09d      	sub	sp, #116	; 0x74
   ba27a:	461f      	mov	r7, r3
   ba27c:	2300      	movs	r3, #0
   ba27e:	9318      	str	r3, [sp, #96]	; 0x60
   ba280:	4ba2      	ldr	r3, [pc, #648]	; (ba50c <_strtod_l+0x29c>)
   ba282:	9213      	str	r2, [sp, #76]	; 0x4c
   ba284:	681b      	ldr	r3, [r3, #0]
   ba286:	9305      	str	r3, [sp, #20]
   ba288:	4604      	mov	r4, r0
   ba28a:	4618      	mov	r0, r3
   ba28c:	4688      	mov	r8, r1
   ba28e:	f7ff ff8e 	bl	ba1ae <strlen>
   ba292:	f04f 0a00 	mov.w	sl, #0
   ba296:	4605      	mov	r5, r0
   ba298:	f04f 0b00 	mov.w	fp, #0
   ba29c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba2a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba2a2:	781a      	ldrb	r2, [r3, #0]
   ba2a4:	2a2b      	cmp	r2, #43	; 0x2b
   ba2a6:	d04e      	beq.n	ba346 <_strtod_l+0xd6>
   ba2a8:	d83b      	bhi.n	ba322 <_strtod_l+0xb2>
   ba2aa:	2a0d      	cmp	r2, #13
   ba2ac:	d834      	bhi.n	ba318 <_strtod_l+0xa8>
   ba2ae:	2a08      	cmp	r2, #8
   ba2b0:	d834      	bhi.n	ba31c <_strtod_l+0xac>
   ba2b2:	2a00      	cmp	r2, #0
   ba2b4:	d03e      	beq.n	ba334 <_strtod_l+0xc4>
   ba2b6:	2300      	movs	r3, #0
   ba2b8:	930a      	str	r3, [sp, #40]	; 0x28
   ba2ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba2bc:	7833      	ldrb	r3, [r6, #0]
   ba2be:	2b30      	cmp	r3, #48	; 0x30
   ba2c0:	f040 80b0 	bne.w	ba424 <_strtod_l+0x1b4>
   ba2c4:	7873      	ldrb	r3, [r6, #1]
   ba2c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba2ca:	2b58      	cmp	r3, #88	; 0x58
   ba2cc:	d168      	bne.n	ba3a0 <_strtod_l+0x130>
   ba2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba2d0:	9301      	str	r3, [sp, #4]
   ba2d2:	ab18      	add	r3, sp, #96	; 0x60
   ba2d4:	9702      	str	r7, [sp, #8]
   ba2d6:	9300      	str	r3, [sp, #0]
   ba2d8:	4a8d      	ldr	r2, [pc, #564]	; (ba510 <_strtod_l+0x2a0>)
   ba2da:	ab19      	add	r3, sp, #100	; 0x64
   ba2dc:	a917      	add	r1, sp, #92	; 0x5c
   ba2de:	4620      	mov	r0, r4
   ba2e0:	f000 ff8a 	bl	bb1f8 <__gethex>
   ba2e4:	f010 0707 	ands.w	r7, r0, #7
   ba2e8:	4605      	mov	r5, r0
   ba2ea:	d005      	beq.n	ba2f8 <_strtod_l+0x88>
   ba2ec:	2f06      	cmp	r7, #6
   ba2ee:	d12c      	bne.n	ba34a <_strtod_l+0xda>
   ba2f0:	3601      	adds	r6, #1
   ba2f2:	2300      	movs	r3, #0
   ba2f4:	9617      	str	r6, [sp, #92]	; 0x5c
   ba2f6:	930a      	str	r3, [sp, #40]	; 0x28
   ba2f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba2fa:	2b00      	cmp	r3, #0
   ba2fc:	f040 8590 	bne.w	bae20 <_strtod_l+0xbb0>
   ba300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba302:	b1eb      	cbz	r3, ba340 <_strtod_l+0xd0>
   ba304:	4652      	mov	r2, sl
   ba306:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba30a:	ec43 2b10 	vmov	d0, r2, r3
   ba30e:	b01d      	add	sp, #116	; 0x74
   ba310:	ecbd 8b02 	vpop	{d8}
   ba314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba318:	2a20      	cmp	r2, #32
   ba31a:	d1cc      	bne.n	ba2b6 <_strtod_l+0x46>
   ba31c:	3301      	adds	r3, #1
   ba31e:	9317      	str	r3, [sp, #92]	; 0x5c
   ba320:	e7be      	b.n	ba2a0 <_strtod_l+0x30>
   ba322:	2a2d      	cmp	r2, #45	; 0x2d
   ba324:	d1c7      	bne.n	ba2b6 <_strtod_l+0x46>
   ba326:	2201      	movs	r2, #1
   ba328:	920a      	str	r2, [sp, #40]	; 0x28
   ba32a:	1c5a      	adds	r2, r3, #1
   ba32c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba32e:	785b      	ldrb	r3, [r3, #1]
   ba330:	2b00      	cmp	r3, #0
   ba332:	d1c2      	bne.n	ba2ba <_strtod_l+0x4a>
   ba334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba336:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba33a:	2b00      	cmp	r3, #0
   ba33c:	f040 856e 	bne.w	bae1c <_strtod_l+0xbac>
   ba340:	4652      	mov	r2, sl
   ba342:	465b      	mov	r3, fp
   ba344:	e7e1      	b.n	ba30a <_strtod_l+0x9a>
   ba346:	2200      	movs	r2, #0
   ba348:	e7ee      	b.n	ba328 <_strtod_l+0xb8>
   ba34a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba34c:	b13a      	cbz	r2, ba35e <_strtod_l+0xee>
   ba34e:	2135      	movs	r1, #53	; 0x35
   ba350:	a81a      	add	r0, sp, #104	; 0x68
   ba352:	f001 feec 	bl	bc12e <__copybits>
   ba356:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba358:	4620      	mov	r0, r4
   ba35a:	f001 faab 	bl	bb8b4 <_Bfree>
   ba35e:	3f01      	subs	r7, #1
   ba360:	2f04      	cmp	r7, #4
   ba362:	d806      	bhi.n	ba372 <_strtod_l+0x102>
   ba364:	e8df f007 	tbb	[pc, r7]
   ba368:	1714030a 	.word	0x1714030a
   ba36c:	0a          	.byte	0x0a
   ba36d:	00          	.byte	0x00
   ba36e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba372:	0728      	lsls	r0, r5, #28
   ba374:	d5c0      	bpl.n	ba2f8 <_strtod_l+0x88>
   ba376:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba37a:	e7bd      	b.n	ba2f8 <_strtod_l+0x88>
   ba37c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba380:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba382:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba386:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba38a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba38e:	e7f0      	b.n	ba372 <_strtod_l+0x102>
   ba390:	f8df b180 	ldr.w	fp, [pc, #384]	; ba514 <_strtod_l+0x2a4>
   ba394:	e7ed      	b.n	ba372 <_strtod_l+0x102>
   ba396:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba39a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba39e:	e7e8      	b.n	ba372 <_strtod_l+0x102>
   ba3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba3a2:	1c5a      	adds	r2, r3, #1
   ba3a4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba3a6:	785b      	ldrb	r3, [r3, #1]
   ba3a8:	2b30      	cmp	r3, #48	; 0x30
   ba3aa:	d0f9      	beq.n	ba3a0 <_strtod_l+0x130>
   ba3ac:	2b00      	cmp	r3, #0
   ba3ae:	d0a3      	beq.n	ba2f8 <_strtod_l+0x88>
   ba3b0:	2301      	movs	r3, #1
   ba3b2:	f04f 0900 	mov.w	r9, #0
   ba3b6:	9304      	str	r3, [sp, #16]
   ba3b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba3ba:	9308      	str	r3, [sp, #32]
   ba3bc:	f8cd 901c 	str.w	r9, [sp, #28]
   ba3c0:	464f      	mov	r7, r9
   ba3c2:	220a      	movs	r2, #10
   ba3c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba3c6:	7806      	ldrb	r6, [r0, #0]
   ba3c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba3cc:	b2d9      	uxtb	r1, r3
   ba3ce:	2909      	cmp	r1, #9
   ba3d0:	d92a      	bls.n	ba428 <_strtod_l+0x1b8>
   ba3d2:	9905      	ldr	r1, [sp, #20]
   ba3d4:	462a      	mov	r2, r5
   ba3d6:	f7ff fef2 	bl	ba1be <strncmp>
   ba3da:	b398      	cbz	r0, ba444 <_strtod_l+0x1d4>
   ba3dc:	2000      	movs	r0, #0
   ba3de:	4632      	mov	r2, r6
   ba3e0:	463d      	mov	r5, r7
   ba3e2:	9005      	str	r0, [sp, #20]
   ba3e4:	4603      	mov	r3, r0
   ba3e6:	2a65      	cmp	r2, #101	; 0x65
   ba3e8:	d001      	beq.n	ba3ee <_strtod_l+0x17e>
   ba3ea:	2a45      	cmp	r2, #69	; 0x45
   ba3ec:	d118      	bne.n	ba420 <_strtod_l+0x1b0>
   ba3ee:	b91d      	cbnz	r5, ba3f8 <_strtod_l+0x188>
   ba3f0:	9a04      	ldr	r2, [sp, #16]
   ba3f2:	4302      	orrs	r2, r0
   ba3f4:	d09e      	beq.n	ba334 <_strtod_l+0xc4>
   ba3f6:	2500      	movs	r5, #0
   ba3f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba3fc:	f108 0201 	add.w	r2, r8, #1
   ba400:	9217      	str	r2, [sp, #92]	; 0x5c
   ba402:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba406:	2a2b      	cmp	r2, #43	; 0x2b
   ba408:	d075      	beq.n	ba4f6 <_strtod_l+0x286>
   ba40a:	2a2d      	cmp	r2, #45	; 0x2d
   ba40c:	d07b      	beq.n	ba506 <_strtod_l+0x296>
   ba40e:	f04f 0c00 	mov.w	ip, #0
   ba412:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba416:	2909      	cmp	r1, #9
   ba418:	f240 8082 	bls.w	ba520 <_strtod_l+0x2b0>
   ba41c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba420:	2600      	movs	r6, #0
   ba422:	e09d      	b.n	ba560 <_strtod_l+0x2f0>
   ba424:	2300      	movs	r3, #0
   ba426:	e7c4      	b.n	ba3b2 <_strtod_l+0x142>
   ba428:	2f08      	cmp	r7, #8
   ba42a:	bfd8      	it	le
   ba42c:	9907      	ldrle	r1, [sp, #28]
   ba42e:	f100 0001 	add.w	r0, r0, #1
   ba432:	bfda      	itte	le
   ba434:	fb02 3301 	mlale	r3, r2, r1, r3
   ba438:	9307      	strle	r3, [sp, #28]
   ba43a:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba43e:	3701      	adds	r7, #1
   ba440:	9017      	str	r0, [sp, #92]	; 0x5c
   ba442:	e7bf      	b.n	ba3c4 <_strtod_l+0x154>
   ba444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba446:	195a      	adds	r2, r3, r5
   ba448:	9217      	str	r2, [sp, #92]	; 0x5c
   ba44a:	5d5a      	ldrb	r2, [r3, r5]
   ba44c:	2f00      	cmp	r7, #0
   ba44e:	d037      	beq.n	ba4c0 <_strtod_l+0x250>
   ba450:	9005      	str	r0, [sp, #20]
   ba452:	463d      	mov	r5, r7
   ba454:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba458:	2b09      	cmp	r3, #9
   ba45a:	d912      	bls.n	ba482 <_strtod_l+0x212>
   ba45c:	2301      	movs	r3, #1
   ba45e:	e7c2      	b.n	ba3e6 <_strtod_l+0x176>
   ba460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba462:	1c5a      	adds	r2, r3, #1
   ba464:	9217      	str	r2, [sp, #92]	; 0x5c
   ba466:	785a      	ldrb	r2, [r3, #1]
   ba468:	3001      	adds	r0, #1
   ba46a:	2a30      	cmp	r2, #48	; 0x30
   ba46c:	d0f8      	beq.n	ba460 <_strtod_l+0x1f0>
   ba46e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba472:	2b08      	cmp	r3, #8
   ba474:	f200 84d9 	bhi.w	bae2a <_strtod_l+0xbba>
   ba478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba47a:	9005      	str	r0, [sp, #20]
   ba47c:	2000      	movs	r0, #0
   ba47e:	9308      	str	r3, [sp, #32]
   ba480:	4605      	mov	r5, r0
   ba482:	3a30      	subs	r2, #48	; 0x30
   ba484:	f100 0301 	add.w	r3, r0, #1
   ba488:	d014      	beq.n	ba4b4 <_strtod_l+0x244>
   ba48a:	9905      	ldr	r1, [sp, #20]
   ba48c:	4419      	add	r1, r3
   ba48e:	9105      	str	r1, [sp, #20]
   ba490:	462b      	mov	r3, r5
   ba492:	eb00 0e05 	add.w	lr, r0, r5
   ba496:	210a      	movs	r1, #10
   ba498:	4573      	cmp	r3, lr
   ba49a:	d113      	bne.n	ba4c4 <_strtod_l+0x254>
   ba49c:	182b      	adds	r3, r5, r0
   ba49e:	2b08      	cmp	r3, #8
   ba4a0:	f105 0501 	add.w	r5, r5, #1
   ba4a4:	4405      	add	r5, r0
   ba4a6:	dc1c      	bgt.n	ba4e2 <_strtod_l+0x272>
   ba4a8:	9907      	ldr	r1, [sp, #28]
   ba4aa:	230a      	movs	r3, #10
   ba4ac:	fb03 2301 	mla	r3, r3, r1, r2
   ba4b0:	9307      	str	r3, [sp, #28]
   ba4b2:	2300      	movs	r3, #0
   ba4b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba4b6:	1c51      	adds	r1, r2, #1
   ba4b8:	9117      	str	r1, [sp, #92]	; 0x5c
   ba4ba:	7852      	ldrb	r2, [r2, #1]
   ba4bc:	4618      	mov	r0, r3
   ba4be:	e7c9      	b.n	ba454 <_strtod_l+0x1e4>
   ba4c0:	4638      	mov	r0, r7
   ba4c2:	e7d2      	b.n	ba46a <_strtod_l+0x1fa>
   ba4c4:	2b08      	cmp	r3, #8
   ba4c6:	dc04      	bgt.n	ba4d2 <_strtod_l+0x262>
   ba4c8:	9e07      	ldr	r6, [sp, #28]
   ba4ca:	434e      	muls	r6, r1
   ba4cc:	9607      	str	r6, [sp, #28]
   ba4ce:	3301      	adds	r3, #1
   ba4d0:	e7e2      	b.n	ba498 <_strtod_l+0x228>
   ba4d2:	f103 0c01 	add.w	ip, r3, #1
   ba4d6:	f1bc 0f10 	cmp.w	ip, #16
   ba4da:	bfd8      	it	le
   ba4dc:	fb01 f909 	mulle.w	r9, r1, r9
   ba4e0:	e7f5      	b.n	ba4ce <_strtod_l+0x25e>
   ba4e2:	2d10      	cmp	r5, #16
   ba4e4:	bfdc      	itt	le
   ba4e6:	230a      	movle	r3, #10
   ba4e8:	fb03 2909 	mlale	r9, r3, r9, r2
   ba4ec:	e7e1      	b.n	ba4b2 <_strtod_l+0x242>
   ba4ee:	2300      	movs	r3, #0
   ba4f0:	9305      	str	r3, [sp, #20]
   ba4f2:	2301      	movs	r3, #1
   ba4f4:	e77c      	b.n	ba3f0 <_strtod_l+0x180>
   ba4f6:	f04f 0c00 	mov.w	ip, #0
   ba4fa:	f108 0202 	add.w	r2, r8, #2
   ba4fe:	9217      	str	r2, [sp, #92]	; 0x5c
   ba500:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba504:	e785      	b.n	ba412 <_strtod_l+0x1a2>
   ba506:	f04f 0c01 	mov.w	ip, #1
   ba50a:	e7f6      	b.n	ba4fa <_strtod_l+0x28a>
   ba50c:	000bd1c0 	.word	0x000bd1c0
   ba510:	000bcf58 	.word	0x000bcf58
   ba514:	7ff00000 	.word	0x7ff00000
   ba518:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba51a:	1c51      	adds	r1, r2, #1
   ba51c:	9117      	str	r1, [sp, #92]	; 0x5c
   ba51e:	7852      	ldrb	r2, [r2, #1]
   ba520:	2a30      	cmp	r2, #48	; 0x30
   ba522:	d0f9      	beq.n	ba518 <_strtod_l+0x2a8>
   ba524:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba528:	2908      	cmp	r1, #8
   ba52a:	f63f af79 	bhi.w	ba420 <_strtod_l+0x1b0>
   ba52e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba532:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba534:	9206      	str	r2, [sp, #24]
   ba536:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba538:	1c51      	adds	r1, r2, #1
   ba53a:	9117      	str	r1, [sp, #92]	; 0x5c
   ba53c:	7852      	ldrb	r2, [r2, #1]
   ba53e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba542:	2e09      	cmp	r6, #9
   ba544:	d937      	bls.n	ba5b6 <_strtod_l+0x346>
   ba546:	9e06      	ldr	r6, [sp, #24]
   ba548:	1b89      	subs	r1, r1, r6
   ba54a:	2908      	cmp	r1, #8
   ba54c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba550:	dc02      	bgt.n	ba558 <_strtod_l+0x2e8>
   ba552:	4576      	cmp	r6, lr
   ba554:	bfa8      	it	ge
   ba556:	4676      	movge	r6, lr
   ba558:	f1bc 0f00 	cmp.w	ip, #0
   ba55c:	d000      	beq.n	ba560 <_strtod_l+0x2f0>
   ba55e:	4276      	negs	r6, r6
   ba560:	2d00      	cmp	r5, #0
   ba562:	d14d      	bne.n	ba600 <_strtod_l+0x390>
   ba564:	9904      	ldr	r1, [sp, #16]
   ba566:	4301      	orrs	r1, r0
   ba568:	f47f aec6 	bne.w	ba2f8 <_strtod_l+0x88>
   ba56c:	2b00      	cmp	r3, #0
   ba56e:	f47f aee1 	bne.w	ba334 <_strtod_l+0xc4>
   ba572:	2a69      	cmp	r2, #105	; 0x69
   ba574:	d027      	beq.n	ba5c6 <_strtod_l+0x356>
   ba576:	dc24      	bgt.n	ba5c2 <_strtod_l+0x352>
   ba578:	2a49      	cmp	r2, #73	; 0x49
   ba57a:	d024      	beq.n	ba5c6 <_strtod_l+0x356>
   ba57c:	2a4e      	cmp	r2, #78	; 0x4e
   ba57e:	f47f aed9 	bne.w	ba334 <_strtod_l+0xc4>
   ba582:	499f      	ldr	r1, [pc, #636]	; (ba800 <_strtod_l+0x590>)
   ba584:	a817      	add	r0, sp, #92	; 0x5c
   ba586:	f001 f88f 	bl	bb6a8 <__match>
   ba58a:	2800      	cmp	r0, #0
   ba58c:	f43f aed2 	beq.w	ba334 <_strtod_l+0xc4>
   ba590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba592:	781b      	ldrb	r3, [r3, #0]
   ba594:	2b28      	cmp	r3, #40	; 0x28
   ba596:	d12d      	bne.n	ba5f4 <_strtod_l+0x384>
   ba598:	499a      	ldr	r1, [pc, #616]	; (ba804 <_strtod_l+0x594>)
   ba59a:	aa1a      	add	r2, sp, #104	; 0x68
   ba59c:	a817      	add	r0, sp, #92	; 0x5c
   ba59e:	f001 f897 	bl	bb6d0 <__hexnan>
   ba5a2:	2805      	cmp	r0, #5
   ba5a4:	d126      	bne.n	ba5f4 <_strtod_l+0x384>
   ba5a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba5a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba5ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba5b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba5b4:	e6a0      	b.n	ba2f8 <_strtod_l+0x88>
   ba5b6:	210a      	movs	r1, #10
   ba5b8:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba5bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba5c0:	e7b9      	b.n	ba536 <_strtod_l+0x2c6>
   ba5c2:	2a6e      	cmp	r2, #110	; 0x6e
   ba5c4:	e7db      	b.n	ba57e <_strtod_l+0x30e>
   ba5c6:	4990      	ldr	r1, [pc, #576]	; (ba808 <_strtod_l+0x598>)
   ba5c8:	a817      	add	r0, sp, #92	; 0x5c
   ba5ca:	f001 f86d 	bl	bb6a8 <__match>
   ba5ce:	2800      	cmp	r0, #0
   ba5d0:	f43f aeb0 	beq.w	ba334 <_strtod_l+0xc4>
   ba5d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5d6:	498d      	ldr	r1, [pc, #564]	; (ba80c <_strtod_l+0x59c>)
   ba5d8:	3b01      	subs	r3, #1
   ba5da:	a817      	add	r0, sp, #92	; 0x5c
   ba5dc:	9317      	str	r3, [sp, #92]	; 0x5c
   ba5de:	f001 f863 	bl	bb6a8 <__match>
   ba5e2:	b910      	cbnz	r0, ba5ea <_strtod_l+0x37a>
   ba5e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5e6:	3301      	adds	r3, #1
   ba5e8:	9317      	str	r3, [sp, #92]	; 0x5c
   ba5ea:	f8df b230 	ldr.w	fp, [pc, #560]	; ba81c <_strtod_l+0x5ac>
   ba5ee:	f04f 0a00 	mov.w	sl, #0
   ba5f2:	e681      	b.n	ba2f8 <_strtod_l+0x88>
   ba5f4:	4886      	ldr	r0, [pc, #536]	; (ba810 <_strtod_l+0x5a0>)
   ba5f6:	f001 fdef 	bl	bc1d8 <nan>
   ba5fa:	ec5b ab10 	vmov	sl, fp, d0
   ba5fe:	e67b      	b.n	ba2f8 <_strtod_l+0x88>
   ba600:	9b05      	ldr	r3, [sp, #20]
   ba602:	9807      	ldr	r0, [sp, #28]
   ba604:	1af3      	subs	r3, r6, r3
   ba606:	2f00      	cmp	r7, #0
   ba608:	bf08      	it	eq
   ba60a:	462f      	moveq	r7, r5
   ba60c:	2d10      	cmp	r5, #16
   ba60e:	9306      	str	r3, [sp, #24]
   ba610:	46a8      	mov	r8, r5
   ba612:	bfa8      	it	ge
   ba614:	f04f 0810 	movge.w	r8, #16
   ba618:	f7ff f998 	bl	b994c <__aeabi_ui2d>
   ba61c:	2d09      	cmp	r5, #9
   ba61e:	4682      	mov	sl, r0
   ba620:	468b      	mov	fp, r1
   ba622:	dd13      	ble.n	ba64c <_strtod_l+0x3dc>
   ba624:	4b7b      	ldr	r3, [pc, #492]	; (ba814 <_strtod_l+0x5a4>)
   ba626:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba62a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba62e:	f7ff fa07 	bl	b9a40 <__aeabi_dmul>
   ba632:	4682      	mov	sl, r0
   ba634:	4648      	mov	r0, r9
   ba636:	468b      	mov	fp, r1
   ba638:	f7ff f988 	bl	b994c <__aeabi_ui2d>
   ba63c:	4602      	mov	r2, r0
   ba63e:	460b      	mov	r3, r1
   ba640:	4650      	mov	r0, sl
   ba642:	4659      	mov	r1, fp
   ba644:	f7ff f846 	bl	b96d4 <__adddf3>
   ba648:	4682      	mov	sl, r0
   ba64a:	468b      	mov	fp, r1
   ba64c:	2d0f      	cmp	r5, #15
   ba64e:	dc38      	bgt.n	ba6c2 <_strtod_l+0x452>
   ba650:	9b06      	ldr	r3, [sp, #24]
   ba652:	2b00      	cmp	r3, #0
   ba654:	f43f ae50 	beq.w	ba2f8 <_strtod_l+0x88>
   ba658:	dd24      	ble.n	ba6a4 <_strtod_l+0x434>
   ba65a:	2b16      	cmp	r3, #22
   ba65c:	dc0b      	bgt.n	ba676 <_strtod_l+0x406>
   ba65e:	496d      	ldr	r1, [pc, #436]	; (ba814 <_strtod_l+0x5a4>)
   ba660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba664:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba668:	4652      	mov	r2, sl
   ba66a:	465b      	mov	r3, fp
   ba66c:	f7ff f9e8 	bl	b9a40 <__aeabi_dmul>
   ba670:	4682      	mov	sl, r0
   ba672:	468b      	mov	fp, r1
   ba674:	e640      	b.n	ba2f8 <_strtod_l+0x88>
   ba676:	9a06      	ldr	r2, [sp, #24]
   ba678:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba67c:	4293      	cmp	r3, r2
   ba67e:	db20      	blt.n	ba6c2 <_strtod_l+0x452>
   ba680:	4c64      	ldr	r4, [pc, #400]	; (ba814 <_strtod_l+0x5a4>)
   ba682:	f1c5 050f 	rsb	r5, r5, #15
   ba686:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba68a:	4652      	mov	r2, sl
   ba68c:	465b      	mov	r3, fp
   ba68e:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba692:	f7ff f9d5 	bl	b9a40 <__aeabi_dmul>
   ba696:	9b06      	ldr	r3, [sp, #24]
   ba698:	1b5d      	subs	r5, r3, r5
   ba69a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba69e:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba6a2:	e7e3      	b.n	ba66c <_strtod_l+0x3fc>
   ba6a4:	9b06      	ldr	r3, [sp, #24]
   ba6a6:	3316      	adds	r3, #22
   ba6a8:	db0b      	blt.n	ba6c2 <_strtod_l+0x452>
   ba6aa:	9b05      	ldr	r3, [sp, #20]
   ba6ac:	1b9e      	subs	r6, r3, r6
   ba6ae:	4b59      	ldr	r3, [pc, #356]	; (ba814 <_strtod_l+0x5a4>)
   ba6b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba6b4:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba6b8:	4650      	mov	r0, sl
   ba6ba:	4659      	mov	r1, fp
   ba6bc:	f7ff faea 	bl	b9c94 <__aeabi_ddiv>
   ba6c0:	e7d6      	b.n	ba670 <_strtod_l+0x400>
   ba6c2:	9b06      	ldr	r3, [sp, #24]
   ba6c4:	eba5 0808 	sub.w	r8, r5, r8
   ba6c8:	4498      	add	r8, r3
   ba6ca:	f1b8 0f00 	cmp.w	r8, #0
   ba6ce:	dd74      	ble.n	ba7ba <_strtod_l+0x54a>
   ba6d0:	f018 030f 	ands.w	r3, r8, #15
   ba6d4:	d00a      	beq.n	ba6ec <_strtod_l+0x47c>
   ba6d6:	494f      	ldr	r1, [pc, #316]	; (ba814 <_strtod_l+0x5a4>)
   ba6d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba6dc:	4652      	mov	r2, sl
   ba6de:	465b      	mov	r3, fp
   ba6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba6e4:	f7ff f9ac 	bl	b9a40 <__aeabi_dmul>
   ba6e8:	4682      	mov	sl, r0
   ba6ea:	468b      	mov	fp, r1
   ba6ec:	f038 080f 	bics.w	r8, r8, #15
   ba6f0:	d04f      	beq.n	ba792 <_strtod_l+0x522>
   ba6f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba6f6:	dd22      	ble.n	ba73e <_strtod_l+0x4ce>
   ba6f8:	2500      	movs	r5, #0
   ba6fa:	462e      	mov	r6, r5
   ba6fc:	9507      	str	r5, [sp, #28]
   ba6fe:	9505      	str	r5, [sp, #20]
   ba700:	2322      	movs	r3, #34	; 0x22
   ba702:	f8df b118 	ldr.w	fp, [pc, #280]	; ba81c <_strtod_l+0x5ac>
   ba706:	6023      	str	r3, [r4, #0]
   ba708:	f04f 0a00 	mov.w	sl, #0
   ba70c:	9b07      	ldr	r3, [sp, #28]
   ba70e:	2b00      	cmp	r3, #0
   ba710:	f43f adf2 	beq.w	ba2f8 <_strtod_l+0x88>
   ba714:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba716:	4620      	mov	r0, r4
   ba718:	f001 f8cc 	bl	bb8b4 <_Bfree>
   ba71c:	9905      	ldr	r1, [sp, #20]
   ba71e:	4620      	mov	r0, r4
   ba720:	f001 f8c8 	bl	bb8b4 <_Bfree>
   ba724:	4631      	mov	r1, r6
   ba726:	4620      	mov	r0, r4
   ba728:	f001 f8c4 	bl	bb8b4 <_Bfree>
   ba72c:	9907      	ldr	r1, [sp, #28]
   ba72e:	4620      	mov	r0, r4
   ba730:	f001 f8c0 	bl	bb8b4 <_Bfree>
   ba734:	4629      	mov	r1, r5
   ba736:	4620      	mov	r0, r4
   ba738:	f001 f8bc 	bl	bb8b4 <_Bfree>
   ba73c:	e5dc      	b.n	ba2f8 <_strtod_l+0x88>
   ba73e:	4b36      	ldr	r3, [pc, #216]	; (ba818 <_strtod_l+0x5a8>)
   ba740:	9304      	str	r3, [sp, #16]
   ba742:	2300      	movs	r3, #0
   ba744:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba748:	4650      	mov	r0, sl
   ba74a:	4659      	mov	r1, fp
   ba74c:	4699      	mov	r9, r3
   ba74e:	f1b8 0f01 	cmp.w	r8, #1
   ba752:	dc21      	bgt.n	ba798 <_strtod_l+0x528>
   ba754:	b10b      	cbz	r3, ba75a <_strtod_l+0x4ea>
   ba756:	4682      	mov	sl, r0
   ba758:	468b      	mov	fp, r1
   ba75a:	4b2f      	ldr	r3, [pc, #188]	; (ba818 <_strtod_l+0x5a8>)
   ba75c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba760:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba764:	4652      	mov	r2, sl
   ba766:	465b      	mov	r3, fp
   ba768:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba76c:	f7ff f968 	bl	b9a40 <__aeabi_dmul>
   ba770:	4b2a      	ldr	r3, [pc, #168]	; (ba81c <_strtod_l+0x5ac>)
   ba772:	460a      	mov	r2, r1
   ba774:	400b      	ands	r3, r1
   ba776:	492a      	ldr	r1, [pc, #168]	; (ba820 <_strtod_l+0x5b0>)
   ba778:	428b      	cmp	r3, r1
   ba77a:	4682      	mov	sl, r0
   ba77c:	d8bc      	bhi.n	ba6f8 <_strtod_l+0x488>
   ba77e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba782:	428b      	cmp	r3, r1
   ba784:	bf86      	itte	hi
   ba786:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; ba824 <_strtod_l+0x5b4>
   ba78a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   ba78e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba792:	2300      	movs	r3, #0
   ba794:	9304      	str	r3, [sp, #16]
   ba796:	e084      	b.n	ba8a2 <_strtod_l+0x632>
   ba798:	f018 0f01 	tst.w	r8, #1
   ba79c:	d005      	beq.n	ba7aa <_strtod_l+0x53a>
   ba79e:	9b04      	ldr	r3, [sp, #16]
   ba7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7a4:	f7ff f94c 	bl	b9a40 <__aeabi_dmul>
   ba7a8:	2301      	movs	r3, #1
   ba7aa:	9a04      	ldr	r2, [sp, #16]
   ba7ac:	3208      	adds	r2, #8
   ba7ae:	f109 0901 	add.w	r9, r9, #1
   ba7b2:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba7b6:	9204      	str	r2, [sp, #16]
   ba7b8:	e7c9      	b.n	ba74e <_strtod_l+0x4de>
   ba7ba:	d0ea      	beq.n	ba792 <_strtod_l+0x522>
   ba7bc:	f1c8 0800 	rsb	r8, r8, #0
   ba7c0:	f018 020f 	ands.w	r2, r8, #15
   ba7c4:	d00a      	beq.n	ba7dc <_strtod_l+0x56c>
   ba7c6:	4b13      	ldr	r3, [pc, #76]	; (ba814 <_strtod_l+0x5a4>)
   ba7c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba7cc:	4650      	mov	r0, sl
   ba7ce:	4659      	mov	r1, fp
   ba7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7d4:	f7ff fa5e 	bl	b9c94 <__aeabi_ddiv>
   ba7d8:	4682      	mov	sl, r0
   ba7da:	468b      	mov	fp, r1
   ba7dc:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba7e0:	d0d7      	beq.n	ba792 <_strtod_l+0x522>
   ba7e2:	f1b8 0f1f 	cmp.w	r8, #31
   ba7e6:	dd1f      	ble.n	ba828 <_strtod_l+0x5b8>
   ba7e8:	2500      	movs	r5, #0
   ba7ea:	462e      	mov	r6, r5
   ba7ec:	9507      	str	r5, [sp, #28]
   ba7ee:	9505      	str	r5, [sp, #20]
   ba7f0:	2322      	movs	r3, #34	; 0x22
   ba7f2:	f04f 0a00 	mov.w	sl, #0
   ba7f6:	f04f 0b00 	mov.w	fp, #0
   ba7fa:	6023      	str	r3, [r4, #0]
   ba7fc:	e786      	b.n	ba70c <_strtod_l+0x49c>
   ba7fe:	bf00      	nop
   ba800:	000bcf52 	.word	0x000bcf52
   ba804:	000bcf6c 	.word	0x000bcf6c
   ba808:	000bcf49 	.word	0x000bcf49
   ba80c:	000bcf4c 	.word	0x000bcf4c
   ba810:	000bc953 	.word	0x000bc953
   ba814:	000bd280 	.word	0x000bd280
   ba818:	000bd258 	.word	0x000bd258
   ba81c:	7ff00000 	.word	0x7ff00000
   ba820:	7ca00000 	.word	0x7ca00000
   ba824:	7fefffff 	.word	0x7fefffff
   ba828:	f018 0310 	ands.w	r3, r8, #16
   ba82c:	bf18      	it	ne
   ba82e:	236a      	movne	r3, #106	; 0x6a
   ba830:	f8df 93ac 	ldr.w	r9, [pc, #940]	; babe0 <_strtod_l+0x970>
   ba834:	9304      	str	r3, [sp, #16]
   ba836:	4650      	mov	r0, sl
   ba838:	4659      	mov	r1, fp
   ba83a:	2300      	movs	r3, #0
   ba83c:	f018 0f01 	tst.w	r8, #1
   ba840:	d004      	beq.n	ba84c <_strtod_l+0x5dc>
   ba842:	e9d9 2300 	ldrd	r2, r3, [r9]
   ba846:	f7ff f8fb 	bl	b9a40 <__aeabi_dmul>
   ba84a:	2301      	movs	r3, #1
   ba84c:	ea5f 0868 	movs.w	r8, r8, asr #1
   ba850:	f109 0908 	add.w	r9, r9, #8
   ba854:	d1f2      	bne.n	ba83c <_strtod_l+0x5cc>
   ba856:	b10b      	cbz	r3, ba85c <_strtod_l+0x5ec>
   ba858:	4682      	mov	sl, r0
   ba85a:	468b      	mov	fp, r1
   ba85c:	9b04      	ldr	r3, [sp, #16]
   ba85e:	b1c3      	cbz	r3, ba892 <_strtod_l+0x622>
   ba860:	f3cb 520a 	ubfx	r2, fp, #20, #11
   ba864:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   ba868:	2b00      	cmp	r3, #0
   ba86a:	4659      	mov	r1, fp
   ba86c:	dd11      	ble.n	ba892 <_strtod_l+0x622>
   ba86e:	2b1f      	cmp	r3, #31
   ba870:	f340 8124 	ble.w	baabc <_strtod_l+0x84c>
   ba874:	2b34      	cmp	r3, #52	; 0x34
   ba876:	bfde      	ittt	le
   ba878:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   ba87c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   ba880:	fa03 f202 	lslle.w	r2, r3, r2
   ba884:	f04f 0a00 	mov.w	sl, #0
   ba888:	bfcc      	ite	gt
   ba88a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   ba88e:	ea02 0b01 	andle.w	fp, r2, r1
   ba892:	2200      	movs	r2, #0
   ba894:	2300      	movs	r3, #0
   ba896:	4650      	mov	r0, sl
   ba898:	4659      	mov	r1, fp
   ba89a:	f7ff fb39 	bl	b9f10 <__aeabi_dcmpeq>
   ba89e:	2800      	cmp	r0, #0
   ba8a0:	d1a2      	bne.n	ba7e8 <_strtod_l+0x578>
   ba8a2:	9b07      	ldr	r3, [sp, #28]
   ba8a4:	9300      	str	r3, [sp, #0]
   ba8a6:	9908      	ldr	r1, [sp, #32]
   ba8a8:	462b      	mov	r3, r5
   ba8aa:	463a      	mov	r2, r7
   ba8ac:	4620      	mov	r0, r4
   ba8ae:	f001 f869 	bl	bb984 <__s2b>
   ba8b2:	9007      	str	r0, [sp, #28]
   ba8b4:	2800      	cmp	r0, #0
   ba8b6:	f43f af1f 	beq.w	ba6f8 <_strtod_l+0x488>
   ba8ba:	9b05      	ldr	r3, [sp, #20]
   ba8bc:	1b9e      	subs	r6, r3, r6
   ba8be:	9b06      	ldr	r3, [sp, #24]
   ba8c0:	2b00      	cmp	r3, #0
   ba8c2:	bfb4      	ite	lt
   ba8c4:	4633      	movlt	r3, r6
   ba8c6:	2300      	movge	r3, #0
   ba8c8:	930c      	str	r3, [sp, #48]	; 0x30
   ba8ca:	9b06      	ldr	r3, [sp, #24]
   ba8cc:	2500      	movs	r5, #0
   ba8ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   ba8d2:	9312      	str	r3, [sp, #72]	; 0x48
   ba8d4:	462e      	mov	r6, r5
   ba8d6:	9b07      	ldr	r3, [sp, #28]
   ba8d8:	4620      	mov	r0, r4
   ba8da:	6859      	ldr	r1, [r3, #4]
   ba8dc:	f000 ffaa 	bl	bb834 <_Balloc>
   ba8e0:	9005      	str	r0, [sp, #20]
   ba8e2:	2800      	cmp	r0, #0
   ba8e4:	f43f af0c 	beq.w	ba700 <_strtod_l+0x490>
   ba8e8:	9b07      	ldr	r3, [sp, #28]
   ba8ea:	691a      	ldr	r2, [r3, #16]
   ba8ec:	3202      	adds	r2, #2
   ba8ee:	f103 010c 	add.w	r1, r3, #12
   ba8f2:	0092      	lsls	r2, r2, #2
   ba8f4:	300c      	adds	r0, #12
   ba8f6:	f7ff fbd8 	bl	ba0aa <memcpy>
   ba8fa:	ec4b ab10 	vmov	d0, sl, fp
   ba8fe:	aa1a      	add	r2, sp, #104	; 0x68
   ba900:	a919      	add	r1, sp, #100	; 0x64
   ba902:	4620      	mov	r0, r4
   ba904:	f001 fb84 	bl	bc010 <__d2b>
   ba908:	ec4b ab18 	vmov	d8, sl, fp
   ba90c:	9018      	str	r0, [sp, #96]	; 0x60
   ba90e:	2800      	cmp	r0, #0
   ba910:	f43f aef6 	beq.w	ba700 <_strtod_l+0x490>
   ba914:	2101      	movs	r1, #1
   ba916:	4620      	mov	r0, r4
   ba918:	f001 f8ce 	bl	bbab8 <__i2b>
   ba91c:	4606      	mov	r6, r0
   ba91e:	2800      	cmp	r0, #0
   ba920:	f43f aeee 	beq.w	ba700 <_strtod_l+0x490>
   ba924:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba926:	9904      	ldr	r1, [sp, #16]
   ba928:	2b00      	cmp	r3, #0
   ba92a:	bfab      	itete	ge
   ba92c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   ba92e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   ba930:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   ba932:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   ba936:	bfac      	ite	ge
   ba938:	eb03 0902 	addge.w	r9, r3, r2
   ba93c:	1ad7      	sublt	r7, r2, r3
   ba93e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba940:	eba3 0801 	sub.w	r8, r3, r1
   ba944:	4490      	add	r8, r2
   ba946:	4ba1      	ldr	r3, [pc, #644]	; (babcc <_strtod_l+0x95c>)
   ba948:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba94c:	4598      	cmp	r8, r3
   ba94e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   ba952:	f280 80c7 	bge.w	baae4 <_strtod_l+0x874>
   ba956:	eba3 0308 	sub.w	r3, r3, r8
   ba95a:	2b1f      	cmp	r3, #31
   ba95c:	eba2 0203 	sub.w	r2, r2, r3
   ba960:	f04f 0101 	mov.w	r1, #1
   ba964:	f300 80b1 	bgt.w	baaca <_strtod_l+0x85a>
   ba968:	fa01 f303 	lsl.w	r3, r1, r3
   ba96c:	930d      	str	r3, [sp, #52]	; 0x34
   ba96e:	2300      	movs	r3, #0
   ba970:	9308      	str	r3, [sp, #32]
   ba972:	eb09 0802 	add.w	r8, r9, r2
   ba976:	9b04      	ldr	r3, [sp, #16]
   ba978:	45c1      	cmp	r9, r8
   ba97a:	4417      	add	r7, r2
   ba97c:	441f      	add	r7, r3
   ba97e:	464b      	mov	r3, r9
   ba980:	bfa8      	it	ge
   ba982:	4643      	movge	r3, r8
   ba984:	42bb      	cmp	r3, r7
   ba986:	bfa8      	it	ge
   ba988:	463b      	movge	r3, r7
   ba98a:	2b00      	cmp	r3, #0
   ba98c:	bfc2      	ittt	gt
   ba98e:	eba8 0803 	subgt.w	r8, r8, r3
   ba992:	1aff      	subgt	r7, r7, r3
   ba994:	eba9 0903 	subgt.w	r9, r9, r3
   ba998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba99a:	2b00      	cmp	r3, #0
   ba99c:	dd17      	ble.n	ba9ce <_strtod_l+0x75e>
   ba99e:	4631      	mov	r1, r6
   ba9a0:	461a      	mov	r2, r3
   ba9a2:	4620      	mov	r0, r4
   ba9a4:	f001 f948 	bl	bbc38 <__pow5mult>
   ba9a8:	4606      	mov	r6, r0
   ba9aa:	2800      	cmp	r0, #0
   ba9ac:	f43f aea8 	beq.w	ba700 <_strtod_l+0x490>
   ba9b0:	4601      	mov	r1, r0
   ba9b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba9b4:	4620      	mov	r0, r4
   ba9b6:	f001 f895 	bl	bbae4 <__multiply>
   ba9ba:	900b      	str	r0, [sp, #44]	; 0x2c
   ba9bc:	2800      	cmp	r0, #0
   ba9be:	f43f ae9f 	beq.w	ba700 <_strtod_l+0x490>
   ba9c2:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba9c4:	4620      	mov	r0, r4
   ba9c6:	f000 ff75 	bl	bb8b4 <_Bfree>
   ba9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba9cc:	9318      	str	r3, [sp, #96]	; 0x60
   ba9ce:	f1b8 0f00 	cmp.w	r8, #0
   ba9d2:	f300 808c 	bgt.w	baaee <_strtod_l+0x87e>
   ba9d6:	9b06      	ldr	r3, [sp, #24]
   ba9d8:	2b00      	cmp	r3, #0
   ba9da:	dd08      	ble.n	ba9ee <_strtod_l+0x77e>
   ba9dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba9de:	9905      	ldr	r1, [sp, #20]
   ba9e0:	4620      	mov	r0, r4
   ba9e2:	f001 f929 	bl	bbc38 <__pow5mult>
   ba9e6:	9005      	str	r0, [sp, #20]
   ba9e8:	2800      	cmp	r0, #0
   ba9ea:	f43f ae89 	beq.w	ba700 <_strtod_l+0x490>
   ba9ee:	2f00      	cmp	r7, #0
   ba9f0:	dd08      	ble.n	baa04 <_strtod_l+0x794>
   ba9f2:	9905      	ldr	r1, [sp, #20]
   ba9f4:	463a      	mov	r2, r7
   ba9f6:	4620      	mov	r0, r4
   ba9f8:	f001 f978 	bl	bbcec <__lshift>
   ba9fc:	9005      	str	r0, [sp, #20]
   ba9fe:	2800      	cmp	r0, #0
   baa00:	f43f ae7e 	beq.w	ba700 <_strtod_l+0x490>
   baa04:	f1b9 0f00 	cmp.w	r9, #0
   baa08:	dd08      	ble.n	baa1c <_strtod_l+0x7ac>
   baa0a:	4631      	mov	r1, r6
   baa0c:	464a      	mov	r2, r9
   baa0e:	4620      	mov	r0, r4
   baa10:	f001 f96c 	bl	bbcec <__lshift>
   baa14:	4606      	mov	r6, r0
   baa16:	2800      	cmp	r0, #0
   baa18:	f43f ae72 	beq.w	ba700 <_strtod_l+0x490>
   baa1c:	9a05      	ldr	r2, [sp, #20]
   baa1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   baa20:	4620      	mov	r0, r4
   baa22:	f001 f9ef 	bl	bbe04 <__mdiff>
   baa26:	4605      	mov	r5, r0
   baa28:	2800      	cmp	r0, #0
   baa2a:	f43f ae69 	beq.w	ba700 <_strtod_l+0x490>
   baa2e:	68c3      	ldr	r3, [r0, #12]
   baa30:	930b      	str	r3, [sp, #44]	; 0x2c
   baa32:	2300      	movs	r3, #0
   baa34:	60c3      	str	r3, [r0, #12]
   baa36:	4631      	mov	r1, r6
   baa38:	f001 f9c8 	bl	bbdcc <__mcmp>
   baa3c:	2800      	cmp	r0, #0
   baa3e:	da60      	bge.n	bab02 <_strtod_l+0x892>
   baa40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baa42:	ea53 030a 	orrs.w	r3, r3, sl
   baa46:	f040 8082 	bne.w	bab4e <_strtod_l+0x8de>
   baa4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baa4e:	2b00      	cmp	r3, #0
   baa50:	d17d      	bne.n	bab4e <_strtod_l+0x8de>
   baa52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baa56:	0d1b      	lsrs	r3, r3, #20
   baa58:	051b      	lsls	r3, r3, #20
   baa5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   baa5e:	d976      	bls.n	bab4e <_strtod_l+0x8de>
   baa60:	696b      	ldr	r3, [r5, #20]
   baa62:	b913      	cbnz	r3, baa6a <_strtod_l+0x7fa>
   baa64:	692b      	ldr	r3, [r5, #16]
   baa66:	2b01      	cmp	r3, #1
   baa68:	dd71      	ble.n	bab4e <_strtod_l+0x8de>
   baa6a:	4629      	mov	r1, r5
   baa6c:	2201      	movs	r2, #1
   baa6e:	4620      	mov	r0, r4
   baa70:	f001 f93c 	bl	bbcec <__lshift>
   baa74:	4631      	mov	r1, r6
   baa76:	4605      	mov	r5, r0
   baa78:	f001 f9a8 	bl	bbdcc <__mcmp>
   baa7c:	2800      	cmp	r0, #0
   baa7e:	dd66      	ble.n	bab4e <_strtod_l+0x8de>
   baa80:	9904      	ldr	r1, [sp, #16]
   baa82:	4a53      	ldr	r2, [pc, #332]	; (babd0 <_strtod_l+0x960>)
   baa84:	465b      	mov	r3, fp
   baa86:	2900      	cmp	r1, #0
   baa88:	f000 8081 	beq.w	bab8e <_strtod_l+0x91e>
   baa8c:	ea02 010b 	and.w	r1, r2, fp
   baa90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   baa94:	dc7b      	bgt.n	bab8e <_strtod_l+0x91e>
   baa96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   baa9a:	f77f aea9 	ble.w	ba7f0 <_strtod_l+0x580>
   baa9e:	4b4d      	ldr	r3, [pc, #308]	; (babd4 <_strtod_l+0x964>)
   baaa0:	4650      	mov	r0, sl
   baaa2:	4659      	mov	r1, fp
   baaa4:	2200      	movs	r2, #0
   baaa6:	f7fe ffcb 	bl	b9a40 <__aeabi_dmul>
   baaaa:	460b      	mov	r3, r1
   baaac:	4303      	orrs	r3, r0
   baaae:	bf08      	it	eq
   baab0:	2322      	moveq	r3, #34	; 0x22
   baab2:	4682      	mov	sl, r0
   baab4:	468b      	mov	fp, r1
   baab6:	bf08      	it	eq
   baab8:	6023      	streq	r3, [r4, #0]
   baaba:	e62b      	b.n	ba714 <_strtod_l+0x4a4>
   baabc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baac0:	fa02 f303 	lsl.w	r3, r2, r3
   baac4:	ea03 0a0a 	and.w	sl, r3, sl
   baac8:	e6e3      	b.n	ba892 <_strtod_l+0x622>
   baaca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   baace:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   baad2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   baad6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   baada:	fa01 f308 	lsl.w	r3, r1, r8
   baade:	9308      	str	r3, [sp, #32]
   baae0:	910d      	str	r1, [sp, #52]	; 0x34
   baae2:	e746      	b.n	ba972 <_strtod_l+0x702>
   baae4:	2300      	movs	r3, #0
   baae6:	9308      	str	r3, [sp, #32]
   baae8:	2301      	movs	r3, #1
   baaea:	930d      	str	r3, [sp, #52]	; 0x34
   baaec:	e741      	b.n	ba972 <_strtod_l+0x702>
   baaee:	9918      	ldr	r1, [sp, #96]	; 0x60
   baaf0:	4642      	mov	r2, r8
   baaf2:	4620      	mov	r0, r4
   baaf4:	f001 f8fa 	bl	bbcec <__lshift>
   baaf8:	9018      	str	r0, [sp, #96]	; 0x60
   baafa:	2800      	cmp	r0, #0
   baafc:	f47f af6b 	bne.w	ba9d6 <_strtod_l+0x766>
   bab00:	e5fe      	b.n	ba700 <_strtod_l+0x490>
   bab02:	465f      	mov	r7, fp
   bab04:	d16e      	bne.n	babe4 <_strtod_l+0x974>
   bab06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bab08:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bab0c:	b342      	cbz	r2, bab60 <_strtod_l+0x8f0>
   bab0e:	4a32      	ldr	r2, [pc, #200]	; (babd8 <_strtod_l+0x968>)
   bab10:	4293      	cmp	r3, r2
   bab12:	d128      	bne.n	bab66 <_strtod_l+0x8f6>
   bab14:	9b04      	ldr	r3, [sp, #16]
   bab16:	4651      	mov	r1, sl
   bab18:	b1eb      	cbz	r3, bab56 <_strtod_l+0x8e6>
   bab1a:	4b2d      	ldr	r3, [pc, #180]	; (babd0 <_strtod_l+0x960>)
   bab1c:	403b      	ands	r3, r7
   bab1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bab22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab26:	d819      	bhi.n	bab5c <_strtod_l+0x8ec>
   bab28:	0d1b      	lsrs	r3, r3, #20
   bab2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bab2e:	fa02 f303 	lsl.w	r3, r2, r3
   bab32:	4299      	cmp	r1, r3
   bab34:	d117      	bne.n	bab66 <_strtod_l+0x8f6>
   bab36:	4b29      	ldr	r3, [pc, #164]	; (babdc <_strtod_l+0x96c>)
   bab38:	429f      	cmp	r7, r3
   bab3a:	d102      	bne.n	bab42 <_strtod_l+0x8d2>
   bab3c:	3101      	adds	r1, #1
   bab3e:	f43f addf 	beq.w	ba700 <_strtod_l+0x490>
   bab42:	4b23      	ldr	r3, [pc, #140]	; (babd0 <_strtod_l+0x960>)
   bab44:	403b      	ands	r3, r7
   bab46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bab4a:	f04f 0a00 	mov.w	sl, #0
   bab4e:	9b04      	ldr	r3, [sp, #16]
   bab50:	2b00      	cmp	r3, #0
   bab52:	d1a4      	bne.n	baa9e <_strtod_l+0x82e>
   bab54:	e5de      	b.n	ba714 <_strtod_l+0x4a4>
   bab56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bab5a:	e7ea      	b.n	bab32 <_strtod_l+0x8c2>
   bab5c:	4613      	mov	r3, r2
   bab5e:	e7e8      	b.n	bab32 <_strtod_l+0x8c2>
   bab60:	ea53 030a 	orrs.w	r3, r3, sl
   bab64:	d08c      	beq.n	baa80 <_strtod_l+0x810>
   bab66:	9b08      	ldr	r3, [sp, #32]
   bab68:	b1db      	cbz	r3, baba2 <_strtod_l+0x932>
   bab6a:	423b      	tst	r3, r7
   bab6c:	d0ef      	beq.n	bab4e <_strtod_l+0x8de>
   bab6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bab70:	9a04      	ldr	r2, [sp, #16]
   bab72:	4650      	mov	r0, sl
   bab74:	4659      	mov	r1, fp
   bab76:	b1c3      	cbz	r3, babaa <_strtod_l+0x93a>
   bab78:	f7ff fb5e 	bl	ba238 <sulp>
   bab7c:	4602      	mov	r2, r0
   bab7e:	460b      	mov	r3, r1
   bab80:	ec51 0b18 	vmov	r0, r1, d8
   bab84:	f7fe fda6 	bl	b96d4 <__adddf3>
   bab88:	4682      	mov	sl, r0
   bab8a:	468b      	mov	fp, r1
   bab8c:	e7df      	b.n	bab4e <_strtod_l+0x8de>
   bab8e:	4013      	ands	r3, r2
   bab90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bab94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bab98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bab9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   baba0:	e7d5      	b.n	bab4e <_strtod_l+0x8de>
   baba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   baba4:	ea13 0f0a 	tst.w	r3, sl
   baba8:	e7e0      	b.n	bab6c <_strtod_l+0x8fc>
   babaa:	f7ff fb45 	bl	ba238 <sulp>
   babae:	4602      	mov	r2, r0
   babb0:	460b      	mov	r3, r1
   babb2:	ec51 0b18 	vmov	r0, r1, d8
   babb6:	f7fe fd8b 	bl	b96d0 <__aeabi_dsub>
   babba:	2200      	movs	r2, #0
   babbc:	2300      	movs	r3, #0
   babbe:	4682      	mov	sl, r0
   babc0:	468b      	mov	fp, r1
   babc2:	f7ff f9a5 	bl	b9f10 <__aeabi_dcmpeq>
   babc6:	2800      	cmp	r0, #0
   babc8:	d0c1      	beq.n	bab4e <_strtod_l+0x8de>
   babca:	e611      	b.n	ba7f0 <_strtod_l+0x580>
   babcc:	fffffc02 	.word	0xfffffc02
   babd0:	7ff00000 	.word	0x7ff00000
   babd4:	39500000 	.word	0x39500000
   babd8:	000fffff 	.word	0x000fffff
   babdc:	7fefffff 	.word	0x7fefffff
   babe0:	000bcf80 	.word	0x000bcf80
   babe4:	4631      	mov	r1, r6
   babe6:	4628      	mov	r0, r5
   babe8:	f001 fa6e 	bl	bc0c8 <__ratio>
   babec:	ec59 8b10 	vmov	r8, r9, d0
   babf0:	ee10 0a10 	vmov	r0, s0
   babf4:	2200      	movs	r2, #0
   babf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   babfa:	4649      	mov	r1, r9
   babfc:	f7ff f99c 	bl	b9f38 <__aeabi_dcmple>
   bac00:	2800      	cmp	r0, #0
   bac02:	d07a      	beq.n	bacfa <_strtod_l+0xa8a>
   bac04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bac06:	2b00      	cmp	r3, #0
   bac08:	d04a      	beq.n	baca0 <_strtod_l+0xa30>
   bac0a:	4b95      	ldr	r3, [pc, #596]	; (bae60 <_strtod_l+0xbf0>)
   bac0c:	2200      	movs	r2, #0
   bac0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bac12:	f8df 924c 	ldr.w	r9, [pc, #588]	; bae60 <_strtod_l+0xbf0>
   bac16:	f04f 0800 	mov.w	r8, #0
   bac1a:	4b92      	ldr	r3, [pc, #584]	; (bae64 <_strtod_l+0xbf4>)
   bac1c:	403b      	ands	r3, r7
   bac1e:	930d      	str	r3, [sp, #52]	; 0x34
   bac20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bac22:	4b91      	ldr	r3, [pc, #580]	; (bae68 <_strtod_l+0xbf8>)
   bac24:	429a      	cmp	r2, r3
   bac26:	f040 80b0 	bne.w	bad8a <_strtod_l+0xb1a>
   bac2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bac2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bac32:	ec4b ab10 	vmov	d0, sl, fp
   bac36:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bac3a:	f001 f96d 	bl	bbf18 <__ulp>
   bac3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bac42:	ec53 2b10 	vmov	r2, r3, d0
   bac46:	f7fe fefb 	bl	b9a40 <__aeabi_dmul>
   bac4a:	4652      	mov	r2, sl
   bac4c:	465b      	mov	r3, fp
   bac4e:	f7fe fd41 	bl	b96d4 <__adddf3>
   bac52:	460b      	mov	r3, r1
   bac54:	4983      	ldr	r1, [pc, #524]	; (bae64 <_strtod_l+0xbf4>)
   bac56:	4a85      	ldr	r2, [pc, #532]	; (bae6c <_strtod_l+0xbfc>)
   bac58:	4019      	ands	r1, r3
   bac5a:	4291      	cmp	r1, r2
   bac5c:	4682      	mov	sl, r0
   bac5e:	d960      	bls.n	bad22 <_strtod_l+0xab2>
   bac60:	ee18 3a90 	vmov	r3, s17
   bac64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bac68:	4293      	cmp	r3, r2
   bac6a:	d104      	bne.n	bac76 <_strtod_l+0xa06>
   bac6c:	ee18 3a10 	vmov	r3, s16
   bac70:	3301      	adds	r3, #1
   bac72:	f43f ad45 	beq.w	ba700 <_strtod_l+0x490>
   bac76:	f8df b200 	ldr.w	fp, [pc, #512]	; bae78 <_strtod_l+0xc08>
   bac7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bac7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bac80:	4620      	mov	r0, r4
   bac82:	f000 fe17 	bl	bb8b4 <_Bfree>
   bac86:	9905      	ldr	r1, [sp, #20]
   bac88:	4620      	mov	r0, r4
   bac8a:	f000 fe13 	bl	bb8b4 <_Bfree>
   bac8e:	4631      	mov	r1, r6
   bac90:	4620      	mov	r0, r4
   bac92:	f000 fe0f 	bl	bb8b4 <_Bfree>
   bac96:	4629      	mov	r1, r5
   bac98:	4620      	mov	r0, r4
   bac9a:	f000 fe0b 	bl	bb8b4 <_Bfree>
   bac9e:	e61a      	b.n	ba8d6 <_strtod_l+0x666>
   baca0:	f1ba 0f00 	cmp.w	sl, #0
   baca4:	d11b      	bne.n	bacde <_strtod_l+0xa6e>
   baca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bacaa:	b9f3      	cbnz	r3, bacea <_strtod_l+0xa7a>
   bacac:	4b6c      	ldr	r3, [pc, #432]	; (bae60 <_strtod_l+0xbf0>)
   bacae:	2200      	movs	r2, #0
   bacb0:	4640      	mov	r0, r8
   bacb2:	4649      	mov	r1, r9
   bacb4:	f7ff f936 	bl	b9f24 <__aeabi_dcmplt>
   bacb8:	b9d0      	cbnz	r0, bacf0 <_strtod_l+0xa80>
   bacba:	4640      	mov	r0, r8
   bacbc:	4649      	mov	r1, r9
   bacbe:	4b6c      	ldr	r3, [pc, #432]	; (bae70 <_strtod_l+0xc00>)
   bacc0:	2200      	movs	r2, #0
   bacc2:	f7fe febd 	bl	b9a40 <__aeabi_dmul>
   bacc6:	4680      	mov	r8, r0
   bacc8:	4689      	mov	r9, r1
   bacca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bacce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bacd2:	9315      	str	r3, [sp, #84]	; 0x54
   bacd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bacd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bacdc:	e79d      	b.n	bac1a <_strtod_l+0x9aa>
   bacde:	f1ba 0f01 	cmp.w	sl, #1
   bace2:	d102      	bne.n	bacea <_strtod_l+0xa7a>
   bace4:	2f00      	cmp	r7, #0
   bace6:	f43f ad83 	beq.w	ba7f0 <_strtod_l+0x580>
   bacea:	4b62      	ldr	r3, [pc, #392]	; (bae74 <_strtod_l+0xc04>)
   bacec:	2200      	movs	r2, #0
   bacee:	e78e      	b.n	bac0e <_strtod_l+0x99e>
   bacf0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bae70 <_strtod_l+0xc00>
   bacf4:	f04f 0800 	mov.w	r8, #0
   bacf8:	e7e7      	b.n	bacca <_strtod_l+0xa5a>
   bacfa:	4b5d      	ldr	r3, [pc, #372]	; (bae70 <_strtod_l+0xc00>)
   bacfc:	4640      	mov	r0, r8
   bacfe:	4649      	mov	r1, r9
   bad00:	2200      	movs	r2, #0
   bad02:	f7fe fe9d 	bl	b9a40 <__aeabi_dmul>
   bad06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bad08:	4680      	mov	r8, r0
   bad0a:	4689      	mov	r9, r1
   bad0c:	b933      	cbnz	r3, bad1c <_strtod_l+0xaac>
   bad0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bad12:	900e      	str	r0, [sp, #56]	; 0x38
   bad14:	930f      	str	r3, [sp, #60]	; 0x3c
   bad16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bad1a:	e7dd      	b.n	bacd8 <_strtod_l+0xa68>
   bad1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bad20:	e7f9      	b.n	bad16 <_strtod_l+0xaa6>
   bad22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bad26:	9b04      	ldr	r3, [sp, #16]
   bad28:	2b00      	cmp	r3, #0
   bad2a:	d1a8      	bne.n	bac7e <_strtod_l+0xa0e>
   bad2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bad30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bad32:	0d1b      	lsrs	r3, r3, #20
   bad34:	051b      	lsls	r3, r3, #20
   bad36:	429a      	cmp	r2, r3
   bad38:	d1a1      	bne.n	bac7e <_strtod_l+0xa0e>
   bad3a:	4640      	mov	r0, r8
   bad3c:	4649      	mov	r1, r9
   bad3e:	f001 fa61 	bl	bc204 <__aeabi_d2lz>
   bad42:	f7fe fe4f 	bl	b99e4 <__aeabi_l2d>
   bad46:	4602      	mov	r2, r0
   bad48:	460b      	mov	r3, r1
   bad4a:	4640      	mov	r0, r8
   bad4c:	4649      	mov	r1, r9
   bad4e:	f7fe fcbf 	bl	b96d0 <__aeabi_dsub>
   bad52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bad54:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bad58:	ea43 030a 	orr.w	r3, r3, sl
   bad5c:	4313      	orrs	r3, r2
   bad5e:	4680      	mov	r8, r0
   bad60:	4689      	mov	r9, r1
   bad62:	d055      	beq.n	bae10 <_strtod_l+0xba0>
   bad64:	a336      	add	r3, pc, #216	; (adr r3, bae40 <_strtod_l+0xbd0>)
   bad66:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad6a:	f7ff f8db 	bl	b9f24 <__aeabi_dcmplt>
   bad6e:	2800      	cmp	r0, #0
   bad70:	f47f acd0 	bne.w	ba714 <_strtod_l+0x4a4>
   bad74:	a334      	add	r3, pc, #208	; (adr r3, bae48 <_strtod_l+0xbd8>)
   bad76:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad7a:	4640      	mov	r0, r8
   bad7c:	4649      	mov	r1, r9
   bad7e:	f7ff f8ef 	bl	b9f60 <__aeabi_dcmpgt>
   bad82:	2800      	cmp	r0, #0
   bad84:	f43f af7b 	beq.w	bac7e <_strtod_l+0xa0e>
   bad88:	e4c4      	b.n	ba714 <_strtod_l+0x4a4>
   bad8a:	9b04      	ldr	r3, [sp, #16]
   bad8c:	b333      	cbz	r3, baddc <_strtod_l+0xb6c>
   bad8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bad90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bad94:	d822      	bhi.n	baddc <_strtod_l+0xb6c>
   bad96:	a32e      	add	r3, pc, #184	; (adr r3, bae50 <_strtod_l+0xbe0>)
   bad98:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad9c:	4640      	mov	r0, r8
   bad9e:	4649      	mov	r1, r9
   bada0:	f7ff f8ca 	bl	b9f38 <__aeabi_dcmple>
   bada4:	b1a0      	cbz	r0, badd0 <_strtod_l+0xb60>
   bada6:	4649      	mov	r1, r9
   bada8:	4640      	mov	r0, r8
   badaa:	f7ff f8e3 	bl	b9f74 <__aeabi_d2uiz>
   badae:	2801      	cmp	r0, #1
   badb0:	bf38      	it	cc
   badb2:	2001      	movcc	r0, #1
   badb4:	f7fe fdca 	bl	b994c <__aeabi_ui2d>
   badb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   badba:	4680      	mov	r8, r0
   badbc:	4689      	mov	r9, r1
   badbe:	bb23      	cbnz	r3, bae0a <_strtod_l+0xb9a>
   badc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   badc4:	9010      	str	r0, [sp, #64]	; 0x40
   badc6:	9311      	str	r3, [sp, #68]	; 0x44
   badc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   badcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   badd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   badd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   badd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   badd8:	1a9b      	subs	r3, r3, r2
   badda:	9309      	str	r3, [sp, #36]	; 0x24
   baddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bade0:	eeb0 0a48 	vmov.f32	s0, s16
   bade4:	eef0 0a68 	vmov.f32	s1, s17
   bade8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   badec:	f001 f894 	bl	bbf18 <__ulp>
   badf0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   badf4:	ec53 2b10 	vmov	r2, r3, d0
   badf8:	f7fe fe22 	bl	b9a40 <__aeabi_dmul>
   badfc:	ec53 2b18 	vmov	r2, r3, d8
   bae00:	f7fe fc68 	bl	b96d4 <__adddf3>
   bae04:	4682      	mov	sl, r0
   bae06:	468b      	mov	fp, r1
   bae08:	e78d      	b.n	bad26 <_strtod_l+0xab6>
   bae0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bae0e:	e7db      	b.n	badc8 <_strtod_l+0xb58>
   bae10:	a311      	add	r3, pc, #68	; (adr r3, bae58 <_strtod_l+0xbe8>)
   bae12:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae16:	f7ff f885 	bl	b9f24 <__aeabi_dcmplt>
   bae1a:	e7b2      	b.n	bad82 <_strtod_l+0xb12>
   bae1c:	2300      	movs	r3, #0
   bae1e:	930a      	str	r3, [sp, #40]	; 0x28
   bae20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bae22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae24:	6013      	str	r3, [r2, #0]
   bae26:	f7ff ba6b 	b.w	ba300 <_strtod_l+0x90>
   bae2a:	2a65      	cmp	r2, #101	; 0x65
   bae2c:	f43f ab5f 	beq.w	ba4ee <_strtod_l+0x27e>
   bae30:	2a45      	cmp	r2, #69	; 0x45
   bae32:	f43f ab5c 	beq.w	ba4ee <_strtod_l+0x27e>
   bae36:	2301      	movs	r3, #1
   bae38:	f7ff bb94 	b.w	ba564 <_strtod_l+0x2f4>
   bae3c:	f3af 8000 	nop.w
   bae40:	94a03595 	.word	0x94a03595
   bae44:	3fdfffff 	.word	0x3fdfffff
   bae48:	35afe535 	.word	0x35afe535
   bae4c:	3fe00000 	.word	0x3fe00000
   bae50:	ffc00000 	.word	0xffc00000
   bae54:	41dfffff 	.word	0x41dfffff
   bae58:	94a03595 	.word	0x94a03595
   bae5c:	3fcfffff 	.word	0x3fcfffff
   bae60:	3ff00000 	.word	0x3ff00000
   bae64:	7ff00000 	.word	0x7ff00000
   bae68:	7fe00000 	.word	0x7fe00000
   bae6c:	7c9fffff 	.word	0x7c9fffff
   bae70:	3fe00000 	.word	0x3fe00000
   bae74:	bff00000 	.word	0xbff00000
   bae78:	7fefffff 	.word	0x7fefffff

000bae7c <strtod>:
   bae7c:	460a      	mov	r2, r1
   bae7e:	4601      	mov	r1, r0
   bae80:	4802      	ldr	r0, [pc, #8]	; (bae8c <strtod+0x10>)
   bae82:	4b03      	ldr	r3, [pc, #12]	; (bae90 <strtod+0x14>)
   bae84:	6800      	ldr	r0, [r0, #0]
   bae86:	f7ff b9f3 	b.w	ba270 <_strtod_l>
   bae8a:	bf00      	nop
   bae8c:	2003df8c 	.word	0x2003df8c
   bae90:	2003dff8 	.word	0x2003dff8

000bae94 <strtok>:
   bae94:	4b16      	ldr	r3, [pc, #88]	; (baef0 <strtok+0x5c>)
   bae96:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bae98:	681e      	ldr	r6, [r3, #0]
   bae9a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bae9c:	4605      	mov	r5, r0
   bae9e:	b9fc      	cbnz	r4, baee0 <strtok+0x4c>
   baea0:	2050      	movs	r0, #80	; 0x50
   baea2:	9101      	str	r1, [sp, #4]
   baea4:	f7fc fa6a 	bl	b737c <malloc>
   baea8:	9901      	ldr	r1, [sp, #4]
   baeaa:	65b0      	str	r0, [r6, #88]	; 0x58
   baeac:	4602      	mov	r2, r0
   baeae:	b920      	cbnz	r0, baeba <strtok+0x26>
   baeb0:	4b10      	ldr	r3, [pc, #64]	; (baef4 <strtok+0x60>)
   baeb2:	4811      	ldr	r0, [pc, #68]	; (baef8 <strtok+0x64>)
   baeb4:	2157      	movs	r1, #87	; 0x57
   baeb6:	f7fc faa9 	bl	b740c <__assert_func>
   baeba:	e9c0 4400 	strd	r4, r4, [r0]
   baebe:	e9c0 4402 	strd	r4, r4, [r0, #8]
   baec2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   baec6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   baeca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   baece:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   baed2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   baed6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   baeda:	6184      	str	r4, [r0, #24]
   baedc:	7704      	strb	r4, [r0, #28]
   baede:	6244      	str	r4, [r0, #36]	; 0x24
   baee0:	6db2      	ldr	r2, [r6, #88]	; 0x58
   baee2:	2301      	movs	r3, #1
   baee4:	4628      	mov	r0, r5
   baee6:	b002      	add	sp, #8
   baee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   baeec:	f000 b806 	b.w	baefc <__strtok_r>
   baef0:	2003df8c 	.word	0x2003df8c
   baef4:	000bceb5 	.word	0x000bceb5
   baef8:	000bcfa8 	.word	0x000bcfa8

000baefc <__strtok_r>:
   baefc:	b5f0      	push	{r4, r5, r6, r7, lr}
   baefe:	b908      	cbnz	r0, baf04 <__strtok_r+0x8>
   baf00:	6810      	ldr	r0, [r2, #0]
   baf02:	b188      	cbz	r0, baf28 <__strtok_r+0x2c>
   baf04:	4604      	mov	r4, r0
   baf06:	4620      	mov	r0, r4
   baf08:	f814 5b01 	ldrb.w	r5, [r4], #1
   baf0c:	460f      	mov	r7, r1
   baf0e:	f817 6b01 	ldrb.w	r6, [r7], #1
   baf12:	b91e      	cbnz	r6, baf1c <__strtok_r+0x20>
   baf14:	b965      	cbnz	r5, baf30 <__strtok_r+0x34>
   baf16:	6015      	str	r5, [r2, #0]
   baf18:	4628      	mov	r0, r5
   baf1a:	e005      	b.n	baf28 <__strtok_r+0x2c>
   baf1c:	42b5      	cmp	r5, r6
   baf1e:	d1f6      	bne.n	baf0e <__strtok_r+0x12>
   baf20:	2b00      	cmp	r3, #0
   baf22:	d1f0      	bne.n	baf06 <__strtok_r+0xa>
   baf24:	6014      	str	r4, [r2, #0]
   baf26:	7003      	strb	r3, [r0, #0]
   baf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   baf2a:	461c      	mov	r4, r3
   baf2c:	e00c      	b.n	baf48 <__strtok_r+0x4c>
   baf2e:	b915      	cbnz	r5, baf36 <__strtok_r+0x3a>
   baf30:	f814 3b01 	ldrb.w	r3, [r4], #1
   baf34:	460e      	mov	r6, r1
   baf36:	f816 5b01 	ldrb.w	r5, [r6], #1
   baf3a:	42ab      	cmp	r3, r5
   baf3c:	d1f7      	bne.n	baf2e <__strtok_r+0x32>
   baf3e:	2b00      	cmp	r3, #0
   baf40:	d0f3      	beq.n	baf2a <__strtok_r+0x2e>
   baf42:	2300      	movs	r3, #0
   baf44:	f804 3c01 	strb.w	r3, [r4, #-1]
   baf48:	6014      	str	r4, [r2, #0]
   baf4a:	e7ed      	b.n	baf28 <__strtok_r+0x2c>

000baf4c <_strtol_l.constprop.0>:
   baf4c:	2b01      	cmp	r3, #1
   baf4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baf52:	d001      	beq.n	baf58 <_strtol_l.constprop.0+0xc>
   baf54:	2b24      	cmp	r3, #36	; 0x24
   baf56:	d906      	bls.n	baf66 <_strtol_l.constprop.0+0x1a>
   baf58:	f7fc fa50 	bl	b73fc <__errno>
   baf5c:	2316      	movs	r3, #22
   baf5e:	6003      	str	r3, [r0, #0]
   baf60:	2000      	movs	r0, #0
   baf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baf66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb04c <_strtol_l.constprop.0+0x100>
   baf6a:	460d      	mov	r5, r1
   baf6c:	462e      	mov	r6, r5
   baf6e:	f815 4b01 	ldrb.w	r4, [r5], #1
   baf72:	f814 700c 	ldrb.w	r7, [r4, ip]
   baf76:	f017 0708 	ands.w	r7, r7, #8
   baf7a:	d1f7      	bne.n	baf6c <_strtol_l.constprop.0+0x20>
   baf7c:	2c2d      	cmp	r4, #45	; 0x2d
   baf7e:	d132      	bne.n	bafe6 <_strtol_l.constprop.0+0x9a>
   baf80:	782c      	ldrb	r4, [r5, #0]
   baf82:	2701      	movs	r7, #1
   baf84:	1cb5      	adds	r5, r6, #2
   baf86:	2b00      	cmp	r3, #0
   baf88:	d05b      	beq.n	bb042 <_strtol_l.constprop.0+0xf6>
   baf8a:	2b10      	cmp	r3, #16
   baf8c:	d109      	bne.n	bafa2 <_strtol_l.constprop.0+0x56>
   baf8e:	2c30      	cmp	r4, #48	; 0x30
   baf90:	d107      	bne.n	bafa2 <_strtol_l.constprop.0+0x56>
   baf92:	782c      	ldrb	r4, [r5, #0]
   baf94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   baf98:	2c58      	cmp	r4, #88	; 0x58
   baf9a:	d14d      	bne.n	bb038 <_strtol_l.constprop.0+0xec>
   baf9c:	786c      	ldrb	r4, [r5, #1]
   baf9e:	2310      	movs	r3, #16
   bafa0:	3502      	adds	r5, #2
   bafa2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bafa6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bafaa:	f04f 0c00 	mov.w	ip, #0
   bafae:	fbb8 f9f3 	udiv	r9, r8, r3
   bafb2:	4666      	mov	r6, ip
   bafb4:	fb03 8a19 	mls	sl, r3, r9, r8
   bafb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bafbc:	f1be 0f09 	cmp.w	lr, #9
   bafc0:	d816      	bhi.n	baff0 <_strtol_l.constprop.0+0xa4>
   bafc2:	4674      	mov	r4, lr
   bafc4:	42a3      	cmp	r3, r4
   bafc6:	dd24      	ble.n	bb012 <_strtol_l.constprop.0+0xc6>
   bafc8:	f1bc 0f00 	cmp.w	ip, #0
   bafcc:	db1e      	blt.n	bb00c <_strtol_l.constprop.0+0xc0>
   bafce:	45b1      	cmp	r9, r6
   bafd0:	d31c      	bcc.n	bb00c <_strtol_l.constprop.0+0xc0>
   bafd2:	d101      	bne.n	bafd8 <_strtol_l.constprop.0+0x8c>
   bafd4:	45a2      	cmp	sl, r4
   bafd6:	db19      	blt.n	bb00c <_strtol_l.constprop.0+0xc0>
   bafd8:	fb06 4603 	mla	r6, r6, r3, r4
   bafdc:	f04f 0c01 	mov.w	ip, #1
   bafe0:	f815 4b01 	ldrb.w	r4, [r5], #1
   bafe4:	e7e8      	b.n	bafb8 <_strtol_l.constprop.0+0x6c>
   bafe6:	2c2b      	cmp	r4, #43	; 0x2b
   bafe8:	bf04      	itt	eq
   bafea:	782c      	ldrbeq	r4, [r5, #0]
   bafec:	1cb5      	addeq	r5, r6, #2
   bafee:	e7ca      	b.n	baf86 <_strtol_l.constprop.0+0x3a>
   baff0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   baff4:	f1be 0f19 	cmp.w	lr, #25
   baff8:	d801      	bhi.n	baffe <_strtol_l.constprop.0+0xb2>
   baffa:	3c37      	subs	r4, #55	; 0x37
   baffc:	e7e2      	b.n	bafc4 <_strtol_l.constprop.0+0x78>
   baffe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb002:	f1be 0f19 	cmp.w	lr, #25
   bb006:	d804      	bhi.n	bb012 <_strtol_l.constprop.0+0xc6>
   bb008:	3c57      	subs	r4, #87	; 0x57
   bb00a:	e7db      	b.n	bafc4 <_strtol_l.constprop.0+0x78>
   bb00c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb010:	e7e6      	b.n	bafe0 <_strtol_l.constprop.0+0x94>
   bb012:	f1bc 0f00 	cmp.w	ip, #0
   bb016:	da05      	bge.n	bb024 <_strtol_l.constprop.0+0xd8>
   bb018:	2322      	movs	r3, #34	; 0x22
   bb01a:	6003      	str	r3, [r0, #0]
   bb01c:	4646      	mov	r6, r8
   bb01e:	b942      	cbnz	r2, bb032 <_strtol_l.constprop.0+0xe6>
   bb020:	4630      	mov	r0, r6
   bb022:	e79e      	b.n	baf62 <_strtol_l.constprop.0+0x16>
   bb024:	b107      	cbz	r7, bb028 <_strtol_l.constprop.0+0xdc>
   bb026:	4276      	negs	r6, r6
   bb028:	2a00      	cmp	r2, #0
   bb02a:	d0f9      	beq.n	bb020 <_strtol_l.constprop.0+0xd4>
   bb02c:	f1bc 0f00 	cmp.w	ip, #0
   bb030:	d000      	beq.n	bb034 <_strtol_l.constprop.0+0xe8>
   bb032:	1e69      	subs	r1, r5, #1
   bb034:	6011      	str	r1, [r2, #0]
   bb036:	e7f3      	b.n	bb020 <_strtol_l.constprop.0+0xd4>
   bb038:	2430      	movs	r4, #48	; 0x30
   bb03a:	2b00      	cmp	r3, #0
   bb03c:	d1b1      	bne.n	bafa2 <_strtol_l.constprop.0+0x56>
   bb03e:	2308      	movs	r3, #8
   bb040:	e7af      	b.n	bafa2 <_strtol_l.constprop.0+0x56>
   bb042:	2c30      	cmp	r4, #48	; 0x30
   bb044:	d0a5      	beq.n	baf92 <_strtol_l.constprop.0+0x46>
   bb046:	230a      	movs	r3, #10
   bb048:	e7ab      	b.n	bafa2 <_strtol_l.constprop.0+0x56>
   bb04a:	bf00      	nop
   bb04c:	000bd028 	.word	0x000bd028

000bb050 <strtol>:
   bb050:	4613      	mov	r3, r2
   bb052:	460a      	mov	r2, r1
   bb054:	4601      	mov	r1, r0
   bb056:	4802      	ldr	r0, [pc, #8]	; (bb060 <strtol+0x10>)
   bb058:	6800      	ldr	r0, [r0, #0]
   bb05a:	f7ff bf77 	b.w	baf4c <_strtol_l.constprop.0>
   bb05e:	bf00      	nop
   bb060:	2003df8c 	.word	0x2003df8c

000bb064 <__register_exitproc>:
   bb064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb068:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb124 <__register_exitproc+0xc0>
   bb06c:	4606      	mov	r6, r0
   bb06e:	f8d8 0000 	ldr.w	r0, [r8]
   bb072:	461f      	mov	r7, r3
   bb074:	460d      	mov	r5, r1
   bb076:	4691      	mov	r9, r2
   bb078:	f000 fbc6 	bl	bb808 <__retarget_lock_acquire_recursive>
   bb07c:	4b25      	ldr	r3, [pc, #148]	; (bb114 <__register_exitproc+0xb0>)
   bb07e:	681c      	ldr	r4, [r3, #0]
   bb080:	b934      	cbnz	r4, bb090 <__register_exitproc+0x2c>
   bb082:	4c25      	ldr	r4, [pc, #148]	; (bb118 <__register_exitproc+0xb4>)
   bb084:	601c      	str	r4, [r3, #0]
   bb086:	4b25      	ldr	r3, [pc, #148]	; (bb11c <__register_exitproc+0xb8>)
   bb088:	b113      	cbz	r3, bb090 <__register_exitproc+0x2c>
   bb08a:	681b      	ldr	r3, [r3, #0]
   bb08c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb090:	6863      	ldr	r3, [r4, #4]
   bb092:	2b1f      	cmp	r3, #31
   bb094:	dd07      	ble.n	bb0a6 <__register_exitproc+0x42>
   bb096:	f8d8 0000 	ldr.w	r0, [r8]
   bb09a:	f000 fbb7 	bl	bb80c <__retarget_lock_release_recursive>
   bb09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb0a6:	b34e      	cbz	r6, bb0fc <__register_exitproc+0x98>
   bb0a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb0ac:	b988      	cbnz	r0, bb0d2 <__register_exitproc+0x6e>
   bb0ae:	4b1c      	ldr	r3, [pc, #112]	; (bb120 <__register_exitproc+0xbc>)
   bb0b0:	b923      	cbnz	r3, bb0bc <__register_exitproc+0x58>
   bb0b2:	f8d8 0000 	ldr.w	r0, [r8]
   bb0b6:	f000 fba8 	bl	bb80a <__retarget_lock_release>
   bb0ba:	e7f0      	b.n	bb09e <__register_exitproc+0x3a>
   bb0bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb0c0:	f7fc f95c 	bl	b737c <malloc>
   bb0c4:	2800      	cmp	r0, #0
   bb0c6:	d0f4      	beq.n	bb0b2 <__register_exitproc+0x4e>
   bb0c8:	2300      	movs	r3, #0
   bb0ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb0ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb0d2:	6863      	ldr	r3, [r4, #4]
   bb0d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb0d8:	2201      	movs	r2, #1
   bb0da:	409a      	lsls	r2, r3
   bb0dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb0e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb0e4:	4313      	orrs	r3, r2
   bb0e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb0ea:	2e02      	cmp	r6, #2
   bb0ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb0f0:	bf02      	ittt	eq
   bb0f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb0f6:	4313      	orreq	r3, r2
   bb0f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb0fc:	6863      	ldr	r3, [r4, #4]
   bb0fe:	f8d8 0000 	ldr.w	r0, [r8]
   bb102:	1c5a      	adds	r2, r3, #1
   bb104:	3302      	adds	r3, #2
   bb106:	6062      	str	r2, [r4, #4]
   bb108:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb10c:	f000 fb7e 	bl	bb80c <__retarget_lock_release_recursive>
   bb110:	2000      	movs	r0, #0
   bb112:	e7c6      	b.n	bb0a2 <__register_exitproc+0x3e>
   bb114:	2003e7ec 	.word	0x2003e7ec
   bb118:	2003e760 	.word	0x2003e760
   bb11c:	00000000 	.word	0x00000000
   bb120:	000b737d 	.word	0x000b737d
   bb124:	2003dff0 	.word	0x2003dff0

000bb128 <rshift>:
   bb128:	6903      	ldr	r3, [r0, #16]
   bb12a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb12e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb132:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb136:	f100 0414 	add.w	r4, r0, #20
   bb13a:	dd45      	ble.n	bb1c8 <rshift+0xa0>
   bb13c:	f011 011f 	ands.w	r1, r1, #31
   bb140:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb144:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb148:	d10c      	bne.n	bb164 <rshift+0x3c>
   bb14a:	f100 0710 	add.w	r7, r0, #16
   bb14e:	4629      	mov	r1, r5
   bb150:	42b1      	cmp	r1, r6
   bb152:	d334      	bcc.n	bb1be <rshift+0x96>
   bb154:	1a9b      	subs	r3, r3, r2
   bb156:	009b      	lsls	r3, r3, #2
   bb158:	1eea      	subs	r2, r5, #3
   bb15a:	4296      	cmp	r6, r2
   bb15c:	bf38      	it	cc
   bb15e:	2300      	movcc	r3, #0
   bb160:	4423      	add	r3, r4
   bb162:	e015      	b.n	bb190 <rshift+0x68>
   bb164:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb168:	f1c1 0820 	rsb	r8, r1, #32
   bb16c:	40cf      	lsrs	r7, r1
   bb16e:	f105 0e04 	add.w	lr, r5, #4
   bb172:	46a1      	mov	r9, r4
   bb174:	4576      	cmp	r6, lr
   bb176:	46f4      	mov	ip, lr
   bb178:	d815      	bhi.n	bb1a6 <rshift+0x7e>
   bb17a:	1a9a      	subs	r2, r3, r2
   bb17c:	0092      	lsls	r2, r2, #2
   bb17e:	3a04      	subs	r2, #4
   bb180:	3501      	adds	r5, #1
   bb182:	42ae      	cmp	r6, r5
   bb184:	bf38      	it	cc
   bb186:	2200      	movcc	r2, #0
   bb188:	18a3      	adds	r3, r4, r2
   bb18a:	50a7      	str	r7, [r4, r2]
   bb18c:	b107      	cbz	r7, bb190 <rshift+0x68>
   bb18e:	3304      	adds	r3, #4
   bb190:	1b1a      	subs	r2, r3, r4
   bb192:	42a3      	cmp	r3, r4
   bb194:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb198:	bf08      	it	eq
   bb19a:	2300      	moveq	r3, #0
   bb19c:	6102      	str	r2, [r0, #16]
   bb19e:	bf08      	it	eq
   bb1a0:	6143      	streq	r3, [r0, #20]
   bb1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb1a6:	f8dc c000 	ldr.w	ip, [ip]
   bb1aa:	fa0c fc08 	lsl.w	ip, ip, r8
   bb1ae:	ea4c 0707 	orr.w	r7, ip, r7
   bb1b2:	f849 7b04 	str.w	r7, [r9], #4
   bb1b6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb1ba:	40cf      	lsrs	r7, r1
   bb1bc:	e7da      	b.n	bb174 <rshift+0x4c>
   bb1be:	f851 cb04 	ldr.w	ip, [r1], #4
   bb1c2:	f847 cf04 	str.w	ip, [r7, #4]!
   bb1c6:	e7c3      	b.n	bb150 <rshift+0x28>
   bb1c8:	4623      	mov	r3, r4
   bb1ca:	e7e1      	b.n	bb190 <rshift+0x68>

000bb1cc <__hexdig_fun>:
   bb1cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb1d0:	2b09      	cmp	r3, #9
   bb1d2:	d802      	bhi.n	bb1da <__hexdig_fun+0xe>
   bb1d4:	3820      	subs	r0, #32
   bb1d6:	b2c0      	uxtb	r0, r0
   bb1d8:	4770      	bx	lr
   bb1da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb1de:	2b05      	cmp	r3, #5
   bb1e0:	d801      	bhi.n	bb1e6 <__hexdig_fun+0x1a>
   bb1e2:	3847      	subs	r0, #71	; 0x47
   bb1e4:	e7f7      	b.n	bb1d6 <__hexdig_fun+0xa>
   bb1e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb1ea:	2b05      	cmp	r3, #5
   bb1ec:	d801      	bhi.n	bb1f2 <__hexdig_fun+0x26>
   bb1ee:	3827      	subs	r0, #39	; 0x27
   bb1f0:	e7f1      	b.n	bb1d6 <__hexdig_fun+0xa>
   bb1f2:	2000      	movs	r0, #0
   bb1f4:	4770      	bx	lr
	...

000bb1f8 <__gethex>:
   bb1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb1fc:	ed2d 8b02 	vpush	{d8}
   bb200:	b089      	sub	sp, #36	; 0x24
   bb202:	ee08 0a10 	vmov	s16, r0
   bb206:	9304      	str	r3, [sp, #16]
   bb208:	4bb4      	ldr	r3, [pc, #720]	; (bb4dc <__gethex+0x2e4>)
   bb20a:	681b      	ldr	r3, [r3, #0]
   bb20c:	9301      	str	r3, [sp, #4]
   bb20e:	4618      	mov	r0, r3
   bb210:	468b      	mov	fp, r1
   bb212:	4690      	mov	r8, r2
   bb214:	f7fe ffcb 	bl	ba1ae <strlen>
   bb218:	9b01      	ldr	r3, [sp, #4]
   bb21a:	f8db 2000 	ldr.w	r2, [fp]
   bb21e:	4403      	add	r3, r0
   bb220:	4682      	mov	sl, r0
   bb222:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb226:	9305      	str	r3, [sp, #20]
   bb228:	1c93      	adds	r3, r2, #2
   bb22a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb22e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb232:	32fe      	adds	r2, #254	; 0xfe
   bb234:	18d1      	adds	r1, r2, r3
   bb236:	461f      	mov	r7, r3
   bb238:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb23c:	9100      	str	r1, [sp, #0]
   bb23e:	2830      	cmp	r0, #48	; 0x30
   bb240:	d0f8      	beq.n	bb234 <__gethex+0x3c>
   bb242:	f7ff ffc3 	bl	bb1cc <__hexdig_fun>
   bb246:	4604      	mov	r4, r0
   bb248:	2800      	cmp	r0, #0
   bb24a:	d13a      	bne.n	bb2c2 <__gethex+0xca>
   bb24c:	9901      	ldr	r1, [sp, #4]
   bb24e:	4652      	mov	r2, sl
   bb250:	4638      	mov	r0, r7
   bb252:	f7fe ffb4 	bl	ba1be <strncmp>
   bb256:	4605      	mov	r5, r0
   bb258:	2800      	cmp	r0, #0
   bb25a:	d168      	bne.n	bb32e <__gethex+0x136>
   bb25c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb260:	eb07 060a 	add.w	r6, r7, sl
   bb264:	f7ff ffb2 	bl	bb1cc <__hexdig_fun>
   bb268:	2800      	cmp	r0, #0
   bb26a:	d062      	beq.n	bb332 <__gethex+0x13a>
   bb26c:	4633      	mov	r3, r6
   bb26e:	7818      	ldrb	r0, [r3, #0]
   bb270:	2830      	cmp	r0, #48	; 0x30
   bb272:	461f      	mov	r7, r3
   bb274:	f103 0301 	add.w	r3, r3, #1
   bb278:	d0f9      	beq.n	bb26e <__gethex+0x76>
   bb27a:	f7ff ffa7 	bl	bb1cc <__hexdig_fun>
   bb27e:	2301      	movs	r3, #1
   bb280:	fab0 f480 	clz	r4, r0
   bb284:	0964      	lsrs	r4, r4, #5
   bb286:	4635      	mov	r5, r6
   bb288:	9300      	str	r3, [sp, #0]
   bb28a:	463a      	mov	r2, r7
   bb28c:	4616      	mov	r6, r2
   bb28e:	3201      	adds	r2, #1
   bb290:	7830      	ldrb	r0, [r6, #0]
   bb292:	f7ff ff9b 	bl	bb1cc <__hexdig_fun>
   bb296:	2800      	cmp	r0, #0
   bb298:	d1f8      	bne.n	bb28c <__gethex+0x94>
   bb29a:	9901      	ldr	r1, [sp, #4]
   bb29c:	4652      	mov	r2, sl
   bb29e:	4630      	mov	r0, r6
   bb2a0:	f7fe ff8d 	bl	ba1be <strncmp>
   bb2a4:	b980      	cbnz	r0, bb2c8 <__gethex+0xd0>
   bb2a6:	b94d      	cbnz	r5, bb2bc <__gethex+0xc4>
   bb2a8:	eb06 050a 	add.w	r5, r6, sl
   bb2ac:	462a      	mov	r2, r5
   bb2ae:	4616      	mov	r6, r2
   bb2b0:	3201      	adds	r2, #1
   bb2b2:	7830      	ldrb	r0, [r6, #0]
   bb2b4:	f7ff ff8a 	bl	bb1cc <__hexdig_fun>
   bb2b8:	2800      	cmp	r0, #0
   bb2ba:	d1f8      	bne.n	bb2ae <__gethex+0xb6>
   bb2bc:	1bad      	subs	r5, r5, r6
   bb2be:	00ad      	lsls	r5, r5, #2
   bb2c0:	e004      	b.n	bb2cc <__gethex+0xd4>
   bb2c2:	2400      	movs	r4, #0
   bb2c4:	4625      	mov	r5, r4
   bb2c6:	e7e0      	b.n	bb28a <__gethex+0x92>
   bb2c8:	2d00      	cmp	r5, #0
   bb2ca:	d1f7      	bne.n	bb2bc <__gethex+0xc4>
   bb2cc:	7833      	ldrb	r3, [r6, #0]
   bb2ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb2d2:	2b50      	cmp	r3, #80	; 0x50
   bb2d4:	d13b      	bne.n	bb34e <__gethex+0x156>
   bb2d6:	7873      	ldrb	r3, [r6, #1]
   bb2d8:	2b2b      	cmp	r3, #43	; 0x2b
   bb2da:	d02c      	beq.n	bb336 <__gethex+0x13e>
   bb2dc:	2b2d      	cmp	r3, #45	; 0x2d
   bb2de:	d02e      	beq.n	bb33e <__gethex+0x146>
   bb2e0:	1c71      	adds	r1, r6, #1
   bb2e2:	f04f 0900 	mov.w	r9, #0
   bb2e6:	7808      	ldrb	r0, [r1, #0]
   bb2e8:	f7ff ff70 	bl	bb1cc <__hexdig_fun>
   bb2ec:	1e43      	subs	r3, r0, #1
   bb2ee:	b2db      	uxtb	r3, r3
   bb2f0:	2b18      	cmp	r3, #24
   bb2f2:	d82c      	bhi.n	bb34e <__gethex+0x156>
   bb2f4:	f1a0 0210 	sub.w	r2, r0, #16
   bb2f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb2fc:	f7ff ff66 	bl	bb1cc <__hexdig_fun>
   bb300:	1e43      	subs	r3, r0, #1
   bb302:	b2db      	uxtb	r3, r3
   bb304:	2b18      	cmp	r3, #24
   bb306:	d91d      	bls.n	bb344 <__gethex+0x14c>
   bb308:	f1b9 0f00 	cmp.w	r9, #0
   bb30c:	d000      	beq.n	bb310 <__gethex+0x118>
   bb30e:	4252      	negs	r2, r2
   bb310:	4415      	add	r5, r2
   bb312:	f8cb 1000 	str.w	r1, [fp]
   bb316:	b1e4      	cbz	r4, bb352 <__gethex+0x15a>
   bb318:	9b00      	ldr	r3, [sp, #0]
   bb31a:	2b00      	cmp	r3, #0
   bb31c:	bf14      	ite	ne
   bb31e:	2700      	movne	r7, #0
   bb320:	2706      	moveq	r7, #6
   bb322:	4638      	mov	r0, r7
   bb324:	b009      	add	sp, #36	; 0x24
   bb326:	ecbd 8b02 	vpop	{d8}
   bb32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb32e:	463e      	mov	r6, r7
   bb330:	4625      	mov	r5, r4
   bb332:	2401      	movs	r4, #1
   bb334:	e7ca      	b.n	bb2cc <__gethex+0xd4>
   bb336:	f04f 0900 	mov.w	r9, #0
   bb33a:	1cb1      	adds	r1, r6, #2
   bb33c:	e7d3      	b.n	bb2e6 <__gethex+0xee>
   bb33e:	f04f 0901 	mov.w	r9, #1
   bb342:	e7fa      	b.n	bb33a <__gethex+0x142>
   bb344:	230a      	movs	r3, #10
   bb346:	fb03 0202 	mla	r2, r3, r2, r0
   bb34a:	3a10      	subs	r2, #16
   bb34c:	e7d4      	b.n	bb2f8 <__gethex+0x100>
   bb34e:	4631      	mov	r1, r6
   bb350:	e7df      	b.n	bb312 <__gethex+0x11a>
   bb352:	1bf3      	subs	r3, r6, r7
   bb354:	3b01      	subs	r3, #1
   bb356:	4621      	mov	r1, r4
   bb358:	2b07      	cmp	r3, #7
   bb35a:	dc0b      	bgt.n	bb374 <__gethex+0x17c>
   bb35c:	ee18 0a10 	vmov	r0, s16
   bb360:	f000 fa68 	bl	bb834 <_Balloc>
   bb364:	4604      	mov	r4, r0
   bb366:	b940      	cbnz	r0, bb37a <__gethex+0x182>
   bb368:	4b5d      	ldr	r3, [pc, #372]	; (bb4e0 <__gethex+0x2e8>)
   bb36a:	4602      	mov	r2, r0
   bb36c:	21de      	movs	r1, #222	; 0xde
   bb36e:	485d      	ldr	r0, [pc, #372]	; (bb4e4 <__gethex+0x2ec>)
   bb370:	f7fc f84c 	bl	b740c <__assert_func>
   bb374:	3101      	adds	r1, #1
   bb376:	105b      	asrs	r3, r3, #1
   bb378:	e7ee      	b.n	bb358 <__gethex+0x160>
   bb37a:	f100 0914 	add.w	r9, r0, #20
   bb37e:	f04f 0b00 	mov.w	fp, #0
   bb382:	f1ca 0301 	rsb	r3, sl, #1
   bb386:	f8cd 9008 	str.w	r9, [sp, #8]
   bb38a:	f8cd b000 	str.w	fp, [sp]
   bb38e:	9306      	str	r3, [sp, #24]
   bb390:	42b7      	cmp	r7, r6
   bb392:	d340      	bcc.n	bb416 <__gethex+0x21e>
   bb394:	9802      	ldr	r0, [sp, #8]
   bb396:	9b00      	ldr	r3, [sp, #0]
   bb398:	f840 3b04 	str.w	r3, [r0], #4
   bb39c:	eba0 0009 	sub.w	r0, r0, r9
   bb3a0:	1080      	asrs	r0, r0, #2
   bb3a2:	0146      	lsls	r6, r0, #5
   bb3a4:	6120      	str	r0, [r4, #16]
   bb3a6:	4618      	mov	r0, r3
   bb3a8:	f000 fb36 	bl	bba18 <__hi0bits>
   bb3ac:	1a30      	subs	r0, r6, r0
   bb3ae:	f8d8 6000 	ldr.w	r6, [r8]
   bb3b2:	42b0      	cmp	r0, r6
   bb3b4:	dd63      	ble.n	bb47e <__gethex+0x286>
   bb3b6:	1b87      	subs	r7, r0, r6
   bb3b8:	4639      	mov	r1, r7
   bb3ba:	4620      	mov	r0, r4
   bb3bc:	f000 feda 	bl	bc174 <__any_on>
   bb3c0:	4682      	mov	sl, r0
   bb3c2:	b1a8      	cbz	r0, bb3f0 <__gethex+0x1f8>
   bb3c4:	1e7b      	subs	r3, r7, #1
   bb3c6:	1159      	asrs	r1, r3, #5
   bb3c8:	f003 021f 	and.w	r2, r3, #31
   bb3cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb3d0:	f04f 0a01 	mov.w	sl, #1
   bb3d4:	fa0a f202 	lsl.w	r2, sl, r2
   bb3d8:	420a      	tst	r2, r1
   bb3da:	d009      	beq.n	bb3f0 <__gethex+0x1f8>
   bb3dc:	4553      	cmp	r3, sl
   bb3de:	dd05      	ble.n	bb3ec <__gethex+0x1f4>
   bb3e0:	1eb9      	subs	r1, r7, #2
   bb3e2:	4620      	mov	r0, r4
   bb3e4:	f000 fec6 	bl	bc174 <__any_on>
   bb3e8:	2800      	cmp	r0, #0
   bb3ea:	d145      	bne.n	bb478 <__gethex+0x280>
   bb3ec:	f04f 0a02 	mov.w	sl, #2
   bb3f0:	4639      	mov	r1, r7
   bb3f2:	4620      	mov	r0, r4
   bb3f4:	f7ff fe98 	bl	bb128 <rshift>
   bb3f8:	443d      	add	r5, r7
   bb3fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb3fe:	42ab      	cmp	r3, r5
   bb400:	da4c      	bge.n	bb49c <__gethex+0x2a4>
   bb402:	ee18 0a10 	vmov	r0, s16
   bb406:	4621      	mov	r1, r4
   bb408:	f000 fa54 	bl	bb8b4 <_Bfree>
   bb40c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb40e:	2300      	movs	r3, #0
   bb410:	6013      	str	r3, [r2, #0]
   bb412:	27a3      	movs	r7, #163	; 0xa3
   bb414:	e785      	b.n	bb322 <__gethex+0x12a>
   bb416:	1e73      	subs	r3, r6, #1
   bb418:	9a05      	ldr	r2, [sp, #20]
   bb41a:	9303      	str	r3, [sp, #12]
   bb41c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb420:	4293      	cmp	r3, r2
   bb422:	d019      	beq.n	bb458 <__gethex+0x260>
   bb424:	f1bb 0f20 	cmp.w	fp, #32
   bb428:	d107      	bne.n	bb43a <__gethex+0x242>
   bb42a:	9b02      	ldr	r3, [sp, #8]
   bb42c:	9a00      	ldr	r2, [sp, #0]
   bb42e:	f843 2b04 	str.w	r2, [r3], #4
   bb432:	9302      	str	r3, [sp, #8]
   bb434:	2300      	movs	r3, #0
   bb436:	9300      	str	r3, [sp, #0]
   bb438:	469b      	mov	fp, r3
   bb43a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb43e:	f7ff fec5 	bl	bb1cc <__hexdig_fun>
   bb442:	9b00      	ldr	r3, [sp, #0]
   bb444:	f000 000f 	and.w	r0, r0, #15
   bb448:	fa00 f00b 	lsl.w	r0, r0, fp
   bb44c:	4303      	orrs	r3, r0
   bb44e:	9300      	str	r3, [sp, #0]
   bb450:	f10b 0b04 	add.w	fp, fp, #4
   bb454:	9b03      	ldr	r3, [sp, #12]
   bb456:	e00d      	b.n	bb474 <__gethex+0x27c>
   bb458:	9b03      	ldr	r3, [sp, #12]
   bb45a:	9a06      	ldr	r2, [sp, #24]
   bb45c:	4413      	add	r3, r2
   bb45e:	42bb      	cmp	r3, r7
   bb460:	d3e0      	bcc.n	bb424 <__gethex+0x22c>
   bb462:	4618      	mov	r0, r3
   bb464:	9901      	ldr	r1, [sp, #4]
   bb466:	9307      	str	r3, [sp, #28]
   bb468:	4652      	mov	r2, sl
   bb46a:	f7fe fea8 	bl	ba1be <strncmp>
   bb46e:	9b07      	ldr	r3, [sp, #28]
   bb470:	2800      	cmp	r0, #0
   bb472:	d1d7      	bne.n	bb424 <__gethex+0x22c>
   bb474:	461e      	mov	r6, r3
   bb476:	e78b      	b.n	bb390 <__gethex+0x198>
   bb478:	f04f 0a03 	mov.w	sl, #3
   bb47c:	e7b8      	b.n	bb3f0 <__gethex+0x1f8>
   bb47e:	da0a      	bge.n	bb496 <__gethex+0x29e>
   bb480:	1a37      	subs	r7, r6, r0
   bb482:	4621      	mov	r1, r4
   bb484:	ee18 0a10 	vmov	r0, s16
   bb488:	463a      	mov	r2, r7
   bb48a:	f000 fc2f 	bl	bbcec <__lshift>
   bb48e:	1bed      	subs	r5, r5, r7
   bb490:	4604      	mov	r4, r0
   bb492:	f100 0914 	add.w	r9, r0, #20
   bb496:	f04f 0a00 	mov.w	sl, #0
   bb49a:	e7ae      	b.n	bb3fa <__gethex+0x202>
   bb49c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb4a0:	42a8      	cmp	r0, r5
   bb4a2:	dd72      	ble.n	bb58a <__gethex+0x392>
   bb4a4:	1b45      	subs	r5, r0, r5
   bb4a6:	42ae      	cmp	r6, r5
   bb4a8:	dc36      	bgt.n	bb518 <__gethex+0x320>
   bb4aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb4ae:	2b02      	cmp	r3, #2
   bb4b0:	d02a      	beq.n	bb508 <__gethex+0x310>
   bb4b2:	2b03      	cmp	r3, #3
   bb4b4:	d02c      	beq.n	bb510 <__gethex+0x318>
   bb4b6:	2b01      	cmp	r3, #1
   bb4b8:	d11c      	bne.n	bb4f4 <__gethex+0x2fc>
   bb4ba:	42ae      	cmp	r6, r5
   bb4bc:	d11a      	bne.n	bb4f4 <__gethex+0x2fc>
   bb4be:	2e01      	cmp	r6, #1
   bb4c0:	d112      	bne.n	bb4e8 <__gethex+0x2f0>
   bb4c2:	9a04      	ldr	r2, [sp, #16]
   bb4c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb4c8:	6013      	str	r3, [r2, #0]
   bb4ca:	2301      	movs	r3, #1
   bb4cc:	6123      	str	r3, [r4, #16]
   bb4ce:	f8c9 3000 	str.w	r3, [r9]
   bb4d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb4d4:	2762      	movs	r7, #98	; 0x62
   bb4d6:	601c      	str	r4, [r3, #0]
   bb4d8:	e723      	b.n	bb322 <__gethex+0x12a>
   bb4da:	bf00      	nop
   bb4dc:	000bd1c0 	.word	0x000bd1c0
   bb4e0:	000bd128 	.word	0x000bd128
   bb4e4:	000bd139 	.word	0x000bd139
   bb4e8:	1e71      	subs	r1, r6, #1
   bb4ea:	4620      	mov	r0, r4
   bb4ec:	f000 fe42 	bl	bc174 <__any_on>
   bb4f0:	2800      	cmp	r0, #0
   bb4f2:	d1e6      	bne.n	bb4c2 <__gethex+0x2ca>
   bb4f4:	ee18 0a10 	vmov	r0, s16
   bb4f8:	4621      	mov	r1, r4
   bb4fa:	f000 f9db 	bl	bb8b4 <_Bfree>
   bb4fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb500:	2300      	movs	r3, #0
   bb502:	6013      	str	r3, [r2, #0]
   bb504:	2750      	movs	r7, #80	; 0x50
   bb506:	e70c      	b.n	bb322 <__gethex+0x12a>
   bb508:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb50a:	2b00      	cmp	r3, #0
   bb50c:	d1f2      	bne.n	bb4f4 <__gethex+0x2fc>
   bb50e:	e7d8      	b.n	bb4c2 <__gethex+0x2ca>
   bb510:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb512:	2b00      	cmp	r3, #0
   bb514:	d1d5      	bne.n	bb4c2 <__gethex+0x2ca>
   bb516:	e7ed      	b.n	bb4f4 <__gethex+0x2fc>
   bb518:	1e6f      	subs	r7, r5, #1
   bb51a:	f1ba 0f00 	cmp.w	sl, #0
   bb51e:	d131      	bne.n	bb584 <__gethex+0x38c>
   bb520:	b127      	cbz	r7, bb52c <__gethex+0x334>
   bb522:	4639      	mov	r1, r7
   bb524:	4620      	mov	r0, r4
   bb526:	f000 fe25 	bl	bc174 <__any_on>
   bb52a:	4682      	mov	sl, r0
   bb52c:	117b      	asrs	r3, r7, #5
   bb52e:	2101      	movs	r1, #1
   bb530:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb534:	f007 071f 	and.w	r7, r7, #31
   bb538:	fa01 f707 	lsl.w	r7, r1, r7
   bb53c:	421f      	tst	r7, r3
   bb53e:	4629      	mov	r1, r5
   bb540:	4620      	mov	r0, r4
   bb542:	bf18      	it	ne
   bb544:	f04a 0a02 	orrne.w	sl, sl, #2
   bb548:	1b76      	subs	r6, r6, r5
   bb54a:	f7ff fded 	bl	bb128 <rshift>
   bb54e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb552:	2702      	movs	r7, #2
   bb554:	f1ba 0f00 	cmp.w	sl, #0
   bb558:	d048      	beq.n	bb5ec <__gethex+0x3f4>
   bb55a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb55e:	2b02      	cmp	r3, #2
   bb560:	d015      	beq.n	bb58e <__gethex+0x396>
   bb562:	2b03      	cmp	r3, #3
   bb564:	d017      	beq.n	bb596 <__gethex+0x39e>
   bb566:	2b01      	cmp	r3, #1
   bb568:	d109      	bne.n	bb57e <__gethex+0x386>
   bb56a:	f01a 0f02 	tst.w	sl, #2
   bb56e:	d006      	beq.n	bb57e <__gethex+0x386>
   bb570:	f8d9 0000 	ldr.w	r0, [r9]
   bb574:	ea4a 0a00 	orr.w	sl, sl, r0
   bb578:	f01a 0f01 	tst.w	sl, #1
   bb57c:	d10e      	bne.n	bb59c <__gethex+0x3a4>
   bb57e:	f047 0710 	orr.w	r7, r7, #16
   bb582:	e033      	b.n	bb5ec <__gethex+0x3f4>
   bb584:	f04f 0a01 	mov.w	sl, #1
   bb588:	e7d0      	b.n	bb52c <__gethex+0x334>
   bb58a:	2701      	movs	r7, #1
   bb58c:	e7e2      	b.n	bb554 <__gethex+0x35c>
   bb58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb590:	f1c3 0301 	rsb	r3, r3, #1
   bb594:	9315      	str	r3, [sp, #84]	; 0x54
   bb596:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb598:	2b00      	cmp	r3, #0
   bb59a:	d0f0      	beq.n	bb57e <__gethex+0x386>
   bb59c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb5a0:	f104 0314 	add.w	r3, r4, #20
   bb5a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb5a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb5ac:	f04f 0c00 	mov.w	ip, #0
   bb5b0:	4618      	mov	r0, r3
   bb5b2:	f853 2b04 	ldr.w	r2, [r3], #4
   bb5b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bb5ba:	d01c      	beq.n	bb5f6 <__gethex+0x3fe>
   bb5bc:	3201      	adds	r2, #1
   bb5be:	6002      	str	r2, [r0, #0]
   bb5c0:	2f02      	cmp	r7, #2
   bb5c2:	f104 0314 	add.w	r3, r4, #20
   bb5c6:	d13f      	bne.n	bb648 <__gethex+0x450>
   bb5c8:	f8d8 2000 	ldr.w	r2, [r8]
   bb5cc:	3a01      	subs	r2, #1
   bb5ce:	42b2      	cmp	r2, r6
   bb5d0:	d10a      	bne.n	bb5e8 <__gethex+0x3f0>
   bb5d2:	1171      	asrs	r1, r6, #5
   bb5d4:	2201      	movs	r2, #1
   bb5d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb5da:	f006 061f 	and.w	r6, r6, #31
   bb5de:	fa02 f606 	lsl.w	r6, r2, r6
   bb5e2:	421e      	tst	r6, r3
   bb5e4:	bf18      	it	ne
   bb5e6:	4617      	movne	r7, r2
   bb5e8:	f047 0720 	orr.w	r7, r7, #32
   bb5ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb5ee:	601c      	str	r4, [r3, #0]
   bb5f0:	9b04      	ldr	r3, [sp, #16]
   bb5f2:	601d      	str	r5, [r3, #0]
   bb5f4:	e695      	b.n	bb322 <__gethex+0x12a>
   bb5f6:	4299      	cmp	r1, r3
   bb5f8:	f843 cc04 	str.w	ip, [r3, #-4]
   bb5fc:	d8d8      	bhi.n	bb5b0 <__gethex+0x3b8>
   bb5fe:	68a3      	ldr	r3, [r4, #8]
   bb600:	459b      	cmp	fp, r3
   bb602:	db19      	blt.n	bb638 <__gethex+0x440>
   bb604:	6861      	ldr	r1, [r4, #4]
   bb606:	ee18 0a10 	vmov	r0, s16
   bb60a:	3101      	adds	r1, #1
   bb60c:	f000 f912 	bl	bb834 <_Balloc>
   bb610:	4681      	mov	r9, r0
   bb612:	b918      	cbnz	r0, bb61c <__gethex+0x424>
   bb614:	4b1a      	ldr	r3, [pc, #104]	; (bb680 <__gethex+0x488>)
   bb616:	4602      	mov	r2, r0
   bb618:	2184      	movs	r1, #132	; 0x84
   bb61a:	e6a8      	b.n	bb36e <__gethex+0x176>
   bb61c:	6922      	ldr	r2, [r4, #16]
   bb61e:	3202      	adds	r2, #2
   bb620:	f104 010c 	add.w	r1, r4, #12
   bb624:	0092      	lsls	r2, r2, #2
   bb626:	300c      	adds	r0, #12
   bb628:	f7fe fd3f 	bl	ba0aa <memcpy>
   bb62c:	4621      	mov	r1, r4
   bb62e:	ee18 0a10 	vmov	r0, s16
   bb632:	f000 f93f 	bl	bb8b4 <_Bfree>
   bb636:	464c      	mov	r4, r9
   bb638:	6923      	ldr	r3, [r4, #16]
   bb63a:	1c5a      	adds	r2, r3, #1
   bb63c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb640:	6122      	str	r2, [r4, #16]
   bb642:	2201      	movs	r2, #1
   bb644:	615a      	str	r2, [r3, #20]
   bb646:	e7bb      	b.n	bb5c0 <__gethex+0x3c8>
   bb648:	6922      	ldr	r2, [r4, #16]
   bb64a:	455a      	cmp	r2, fp
   bb64c:	dd0b      	ble.n	bb666 <__gethex+0x46e>
   bb64e:	2101      	movs	r1, #1
   bb650:	4620      	mov	r0, r4
   bb652:	f7ff fd69 	bl	bb128 <rshift>
   bb656:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb65a:	3501      	adds	r5, #1
   bb65c:	42ab      	cmp	r3, r5
   bb65e:	f6ff aed0 	blt.w	bb402 <__gethex+0x20a>
   bb662:	2701      	movs	r7, #1
   bb664:	e7c0      	b.n	bb5e8 <__gethex+0x3f0>
   bb666:	f016 061f 	ands.w	r6, r6, #31
   bb66a:	d0fa      	beq.n	bb662 <__gethex+0x46a>
   bb66c:	4453      	add	r3, sl
   bb66e:	f1c6 0620 	rsb	r6, r6, #32
   bb672:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb676:	f000 f9cf 	bl	bba18 <__hi0bits>
   bb67a:	42b0      	cmp	r0, r6
   bb67c:	dbe7      	blt.n	bb64e <__gethex+0x456>
   bb67e:	e7f0      	b.n	bb662 <__gethex+0x46a>
   bb680:	000bd128 	.word	0x000bd128

000bb684 <L_shift>:
   bb684:	f1c2 0208 	rsb	r2, r2, #8
   bb688:	0092      	lsls	r2, r2, #2
   bb68a:	b570      	push	{r4, r5, r6, lr}
   bb68c:	f1c2 0620 	rsb	r6, r2, #32
   bb690:	6843      	ldr	r3, [r0, #4]
   bb692:	6804      	ldr	r4, [r0, #0]
   bb694:	fa03 f506 	lsl.w	r5, r3, r6
   bb698:	432c      	orrs	r4, r5
   bb69a:	40d3      	lsrs	r3, r2
   bb69c:	6004      	str	r4, [r0, #0]
   bb69e:	f840 3f04 	str.w	r3, [r0, #4]!
   bb6a2:	4288      	cmp	r0, r1
   bb6a4:	d3f4      	bcc.n	bb690 <L_shift+0xc>
   bb6a6:	bd70      	pop	{r4, r5, r6, pc}

000bb6a8 <__match>:
   bb6a8:	b530      	push	{r4, r5, lr}
   bb6aa:	6803      	ldr	r3, [r0, #0]
   bb6ac:	3301      	adds	r3, #1
   bb6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb6b2:	b914      	cbnz	r4, bb6ba <__match+0x12>
   bb6b4:	6003      	str	r3, [r0, #0]
   bb6b6:	2001      	movs	r0, #1
   bb6b8:	bd30      	pop	{r4, r5, pc}
   bb6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb6be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb6c2:	2d19      	cmp	r5, #25
   bb6c4:	bf98      	it	ls
   bb6c6:	3220      	addls	r2, #32
   bb6c8:	42a2      	cmp	r2, r4
   bb6ca:	d0f0      	beq.n	bb6ae <__match+0x6>
   bb6cc:	2000      	movs	r0, #0
   bb6ce:	e7f3      	b.n	bb6b8 <__match+0x10>

000bb6d0 <__hexnan>:
   bb6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb6d4:	680b      	ldr	r3, [r1, #0]
   bb6d6:	115e      	asrs	r6, r3, #5
   bb6d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb6dc:	f013 031f 	ands.w	r3, r3, #31
   bb6e0:	b087      	sub	sp, #28
   bb6e2:	bf18      	it	ne
   bb6e4:	3604      	addne	r6, #4
   bb6e6:	2500      	movs	r5, #0
   bb6e8:	1f37      	subs	r7, r6, #4
   bb6ea:	4690      	mov	r8, r2
   bb6ec:	6802      	ldr	r2, [r0, #0]
   bb6ee:	9301      	str	r3, [sp, #4]
   bb6f0:	4682      	mov	sl, r0
   bb6f2:	f846 5c04 	str.w	r5, [r6, #-4]
   bb6f6:	46b9      	mov	r9, r7
   bb6f8:	463c      	mov	r4, r7
   bb6fa:	9502      	str	r5, [sp, #8]
   bb6fc:	46ab      	mov	fp, r5
   bb6fe:	7851      	ldrb	r1, [r2, #1]
   bb700:	1c53      	adds	r3, r2, #1
   bb702:	9303      	str	r3, [sp, #12]
   bb704:	b341      	cbz	r1, bb758 <__hexnan+0x88>
   bb706:	4608      	mov	r0, r1
   bb708:	9205      	str	r2, [sp, #20]
   bb70a:	9104      	str	r1, [sp, #16]
   bb70c:	f7ff fd5e 	bl	bb1cc <__hexdig_fun>
   bb710:	2800      	cmp	r0, #0
   bb712:	d14f      	bne.n	bb7b4 <__hexnan+0xe4>
   bb714:	9904      	ldr	r1, [sp, #16]
   bb716:	9a05      	ldr	r2, [sp, #20]
   bb718:	2920      	cmp	r1, #32
   bb71a:	d818      	bhi.n	bb74e <__hexnan+0x7e>
   bb71c:	9b02      	ldr	r3, [sp, #8]
   bb71e:	459b      	cmp	fp, r3
   bb720:	dd13      	ble.n	bb74a <__hexnan+0x7a>
   bb722:	454c      	cmp	r4, r9
   bb724:	d206      	bcs.n	bb734 <__hexnan+0x64>
   bb726:	2d07      	cmp	r5, #7
   bb728:	dc04      	bgt.n	bb734 <__hexnan+0x64>
   bb72a:	462a      	mov	r2, r5
   bb72c:	4649      	mov	r1, r9
   bb72e:	4620      	mov	r0, r4
   bb730:	f7ff ffa8 	bl	bb684 <L_shift>
   bb734:	4544      	cmp	r4, r8
   bb736:	d950      	bls.n	bb7da <__hexnan+0x10a>
   bb738:	2300      	movs	r3, #0
   bb73a:	f1a4 0904 	sub.w	r9, r4, #4
   bb73e:	f844 3c04 	str.w	r3, [r4, #-4]
   bb742:	f8cd b008 	str.w	fp, [sp, #8]
   bb746:	464c      	mov	r4, r9
   bb748:	461d      	mov	r5, r3
   bb74a:	9a03      	ldr	r2, [sp, #12]
   bb74c:	e7d7      	b.n	bb6fe <__hexnan+0x2e>
   bb74e:	2929      	cmp	r1, #41	; 0x29
   bb750:	d156      	bne.n	bb800 <__hexnan+0x130>
   bb752:	3202      	adds	r2, #2
   bb754:	f8ca 2000 	str.w	r2, [sl]
   bb758:	f1bb 0f00 	cmp.w	fp, #0
   bb75c:	d050      	beq.n	bb800 <__hexnan+0x130>
   bb75e:	454c      	cmp	r4, r9
   bb760:	d206      	bcs.n	bb770 <__hexnan+0xa0>
   bb762:	2d07      	cmp	r5, #7
   bb764:	dc04      	bgt.n	bb770 <__hexnan+0xa0>
   bb766:	462a      	mov	r2, r5
   bb768:	4649      	mov	r1, r9
   bb76a:	4620      	mov	r0, r4
   bb76c:	f7ff ff8a 	bl	bb684 <L_shift>
   bb770:	4544      	cmp	r4, r8
   bb772:	d934      	bls.n	bb7de <__hexnan+0x10e>
   bb774:	f1a8 0204 	sub.w	r2, r8, #4
   bb778:	4623      	mov	r3, r4
   bb77a:	f853 1b04 	ldr.w	r1, [r3], #4
   bb77e:	f842 1f04 	str.w	r1, [r2, #4]!
   bb782:	429f      	cmp	r7, r3
   bb784:	d2f9      	bcs.n	bb77a <__hexnan+0xaa>
   bb786:	1b3b      	subs	r3, r7, r4
   bb788:	f023 0303 	bic.w	r3, r3, #3
   bb78c:	3304      	adds	r3, #4
   bb78e:	3401      	adds	r4, #1
   bb790:	3e03      	subs	r6, #3
   bb792:	42b4      	cmp	r4, r6
   bb794:	bf88      	it	hi
   bb796:	2304      	movhi	r3, #4
   bb798:	4443      	add	r3, r8
   bb79a:	2200      	movs	r2, #0
   bb79c:	f843 2b04 	str.w	r2, [r3], #4
   bb7a0:	429f      	cmp	r7, r3
   bb7a2:	d2fb      	bcs.n	bb79c <__hexnan+0xcc>
   bb7a4:	683b      	ldr	r3, [r7, #0]
   bb7a6:	b91b      	cbnz	r3, bb7b0 <__hexnan+0xe0>
   bb7a8:	4547      	cmp	r7, r8
   bb7aa:	d127      	bne.n	bb7fc <__hexnan+0x12c>
   bb7ac:	2301      	movs	r3, #1
   bb7ae:	603b      	str	r3, [r7, #0]
   bb7b0:	2005      	movs	r0, #5
   bb7b2:	e026      	b.n	bb802 <__hexnan+0x132>
   bb7b4:	3501      	adds	r5, #1
   bb7b6:	2d08      	cmp	r5, #8
   bb7b8:	f10b 0b01 	add.w	fp, fp, #1
   bb7bc:	dd06      	ble.n	bb7cc <__hexnan+0xfc>
   bb7be:	4544      	cmp	r4, r8
   bb7c0:	d9c3      	bls.n	bb74a <__hexnan+0x7a>
   bb7c2:	2300      	movs	r3, #0
   bb7c4:	f844 3c04 	str.w	r3, [r4, #-4]
   bb7c8:	2501      	movs	r5, #1
   bb7ca:	3c04      	subs	r4, #4
   bb7cc:	6822      	ldr	r2, [r4, #0]
   bb7ce:	f000 000f 	and.w	r0, r0, #15
   bb7d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb7d6:	6022      	str	r2, [r4, #0]
   bb7d8:	e7b7      	b.n	bb74a <__hexnan+0x7a>
   bb7da:	2508      	movs	r5, #8
   bb7dc:	e7b5      	b.n	bb74a <__hexnan+0x7a>
   bb7de:	9b01      	ldr	r3, [sp, #4]
   bb7e0:	2b00      	cmp	r3, #0
   bb7e2:	d0df      	beq.n	bb7a4 <__hexnan+0xd4>
   bb7e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb7e8:	f1c3 0320 	rsb	r3, r3, #32
   bb7ec:	fa22 f303 	lsr.w	r3, r2, r3
   bb7f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb7f4:	401a      	ands	r2, r3
   bb7f6:	f846 2c04 	str.w	r2, [r6, #-4]
   bb7fa:	e7d3      	b.n	bb7a4 <__hexnan+0xd4>
   bb7fc:	3f04      	subs	r7, #4
   bb7fe:	e7d1      	b.n	bb7a4 <__hexnan+0xd4>
   bb800:	2004      	movs	r0, #4
   bb802:	b007      	add	sp, #28
   bb804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb808 <__retarget_lock_acquire_recursive>:
   bb808:	4770      	bx	lr

000bb80a <__retarget_lock_release>:
   bb80a:	4770      	bx	lr

000bb80c <__retarget_lock_release_recursive>:
   bb80c:	4770      	bx	lr

000bb80e <__ascii_mbtowc>:
   bb80e:	b082      	sub	sp, #8
   bb810:	b901      	cbnz	r1, bb814 <__ascii_mbtowc+0x6>
   bb812:	a901      	add	r1, sp, #4
   bb814:	b142      	cbz	r2, bb828 <__ascii_mbtowc+0x1a>
   bb816:	b14b      	cbz	r3, bb82c <__ascii_mbtowc+0x1e>
   bb818:	7813      	ldrb	r3, [r2, #0]
   bb81a:	600b      	str	r3, [r1, #0]
   bb81c:	7812      	ldrb	r2, [r2, #0]
   bb81e:	1e10      	subs	r0, r2, #0
   bb820:	bf18      	it	ne
   bb822:	2001      	movne	r0, #1
   bb824:	b002      	add	sp, #8
   bb826:	4770      	bx	lr
   bb828:	4610      	mov	r0, r2
   bb82a:	e7fb      	b.n	bb824 <__ascii_mbtowc+0x16>
   bb82c:	f06f 0001 	mvn.w	r0, #1
   bb830:	e7f8      	b.n	bb824 <__ascii_mbtowc+0x16>
	...

000bb834 <_Balloc>:
   bb834:	b570      	push	{r4, r5, r6, lr}
   bb836:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb838:	4604      	mov	r4, r0
   bb83a:	460d      	mov	r5, r1
   bb83c:	b976      	cbnz	r6, bb85c <_Balloc+0x28>
   bb83e:	2010      	movs	r0, #16
   bb840:	f7fb fd9c 	bl	b737c <malloc>
   bb844:	4602      	mov	r2, r0
   bb846:	6260      	str	r0, [r4, #36]	; 0x24
   bb848:	b920      	cbnz	r0, bb854 <_Balloc+0x20>
   bb84a:	4b18      	ldr	r3, [pc, #96]	; (bb8ac <_Balloc+0x78>)
   bb84c:	4818      	ldr	r0, [pc, #96]	; (bb8b0 <_Balloc+0x7c>)
   bb84e:	2166      	movs	r1, #102	; 0x66
   bb850:	f7fb fddc 	bl	b740c <__assert_func>
   bb854:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb858:	6006      	str	r6, [r0, #0]
   bb85a:	60c6      	str	r6, [r0, #12]
   bb85c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bb85e:	68f3      	ldr	r3, [r6, #12]
   bb860:	b183      	cbz	r3, bb884 <_Balloc+0x50>
   bb862:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb864:	68db      	ldr	r3, [r3, #12]
   bb866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bb86a:	b9b8      	cbnz	r0, bb89c <_Balloc+0x68>
   bb86c:	2101      	movs	r1, #1
   bb86e:	fa01 f605 	lsl.w	r6, r1, r5
   bb872:	1d72      	adds	r2, r6, #5
   bb874:	0092      	lsls	r2, r2, #2
   bb876:	4620      	mov	r0, r4
   bb878:	f000 fc9d 	bl	bc1b6 <_calloc_r>
   bb87c:	b160      	cbz	r0, bb898 <_Balloc+0x64>
   bb87e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bb882:	e00e      	b.n	bb8a2 <_Balloc+0x6e>
   bb884:	2221      	movs	r2, #33	; 0x21
   bb886:	2104      	movs	r1, #4
   bb888:	4620      	mov	r0, r4
   bb88a:	f000 fc94 	bl	bc1b6 <_calloc_r>
   bb88e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb890:	60f0      	str	r0, [r6, #12]
   bb892:	68db      	ldr	r3, [r3, #12]
   bb894:	2b00      	cmp	r3, #0
   bb896:	d1e4      	bne.n	bb862 <_Balloc+0x2e>
   bb898:	2000      	movs	r0, #0
   bb89a:	bd70      	pop	{r4, r5, r6, pc}
   bb89c:	6802      	ldr	r2, [r0, #0]
   bb89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bb8a2:	2300      	movs	r3, #0
   bb8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bb8a8:	e7f7      	b.n	bb89a <_Balloc+0x66>
   bb8aa:	bf00      	nop
   bb8ac:	000bceb5 	.word	0x000bceb5
   bb8b0:	000bd1d4 	.word	0x000bd1d4

000bb8b4 <_Bfree>:
   bb8b4:	b570      	push	{r4, r5, r6, lr}
   bb8b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb8b8:	4605      	mov	r5, r0
   bb8ba:	460c      	mov	r4, r1
   bb8bc:	b976      	cbnz	r6, bb8dc <_Bfree+0x28>
   bb8be:	2010      	movs	r0, #16
   bb8c0:	f7fb fd5c 	bl	b737c <malloc>
   bb8c4:	4602      	mov	r2, r0
   bb8c6:	6268      	str	r0, [r5, #36]	; 0x24
   bb8c8:	b920      	cbnz	r0, bb8d4 <_Bfree+0x20>
   bb8ca:	4b09      	ldr	r3, [pc, #36]	; (bb8f0 <_Bfree+0x3c>)
   bb8cc:	4809      	ldr	r0, [pc, #36]	; (bb8f4 <_Bfree+0x40>)
   bb8ce:	218a      	movs	r1, #138	; 0x8a
   bb8d0:	f7fb fd9c 	bl	b740c <__assert_func>
   bb8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb8d8:	6006      	str	r6, [r0, #0]
   bb8da:	60c6      	str	r6, [r0, #12]
   bb8dc:	b13c      	cbz	r4, bb8ee <_Bfree+0x3a>
   bb8de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bb8e0:	6862      	ldr	r2, [r4, #4]
   bb8e2:	68db      	ldr	r3, [r3, #12]
   bb8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bb8e8:	6021      	str	r1, [r4, #0]
   bb8ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bb8ee:	bd70      	pop	{r4, r5, r6, pc}
   bb8f0:	000bceb5 	.word	0x000bceb5
   bb8f4:	000bd1d4 	.word	0x000bd1d4

000bb8f8 <__multadd>:
   bb8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb8fc:	690d      	ldr	r5, [r1, #16]
   bb8fe:	4607      	mov	r7, r0
   bb900:	460c      	mov	r4, r1
   bb902:	461e      	mov	r6, r3
   bb904:	f101 0c14 	add.w	ip, r1, #20
   bb908:	2000      	movs	r0, #0
   bb90a:	f8dc 3000 	ldr.w	r3, [ip]
   bb90e:	b299      	uxth	r1, r3
   bb910:	fb02 6101 	mla	r1, r2, r1, r6
   bb914:	0c1e      	lsrs	r6, r3, #16
   bb916:	0c0b      	lsrs	r3, r1, #16
   bb918:	fb02 3306 	mla	r3, r2, r6, r3
   bb91c:	b289      	uxth	r1, r1
   bb91e:	3001      	adds	r0, #1
   bb920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bb924:	4285      	cmp	r5, r0
   bb926:	f84c 1b04 	str.w	r1, [ip], #4
   bb92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bb92e:	dcec      	bgt.n	bb90a <__multadd+0x12>
   bb930:	b30e      	cbz	r6, bb976 <__multadd+0x7e>
   bb932:	68a3      	ldr	r3, [r4, #8]
   bb934:	42ab      	cmp	r3, r5
   bb936:	dc19      	bgt.n	bb96c <__multadd+0x74>
   bb938:	6861      	ldr	r1, [r4, #4]
   bb93a:	4638      	mov	r0, r7
   bb93c:	3101      	adds	r1, #1
   bb93e:	f7ff ff79 	bl	bb834 <_Balloc>
   bb942:	4680      	mov	r8, r0
   bb944:	b928      	cbnz	r0, bb952 <__multadd+0x5a>
   bb946:	4602      	mov	r2, r0
   bb948:	4b0c      	ldr	r3, [pc, #48]	; (bb97c <__multadd+0x84>)
   bb94a:	480d      	ldr	r0, [pc, #52]	; (bb980 <__multadd+0x88>)
   bb94c:	21b5      	movs	r1, #181	; 0xb5
   bb94e:	f7fb fd5d 	bl	b740c <__assert_func>
   bb952:	6922      	ldr	r2, [r4, #16]
   bb954:	3202      	adds	r2, #2
   bb956:	f104 010c 	add.w	r1, r4, #12
   bb95a:	0092      	lsls	r2, r2, #2
   bb95c:	300c      	adds	r0, #12
   bb95e:	f7fe fba4 	bl	ba0aa <memcpy>
   bb962:	4621      	mov	r1, r4
   bb964:	4638      	mov	r0, r7
   bb966:	f7ff ffa5 	bl	bb8b4 <_Bfree>
   bb96a:	4644      	mov	r4, r8
   bb96c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bb970:	3501      	adds	r5, #1
   bb972:	615e      	str	r6, [r3, #20]
   bb974:	6125      	str	r5, [r4, #16]
   bb976:	4620      	mov	r0, r4
   bb978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb97c:	000bd128 	.word	0x000bd128
   bb980:	000bd1d4 	.word	0x000bd1d4

000bb984 <__s2b>:
   bb984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb988:	460c      	mov	r4, r1
   bb98a:	4615      	mov	r5, r2
   bb98c:	461f      	mov	r7, r3
   bb98e:	2209      	movs	r2, #9
   bb990:	3308      	adds	r3, #8
   bb992:	4606      	mov	r6, r0
   bb994:	fb93 f3f2 	sdiv	r3, r3, r2
   bb998:	2100      	movs	r1, #0
   bb99a:	2201      	movs	r2, #1
   bb99c:	429a      	cmp	r2, r3
   bb99e:	db09      	blt.n	bb9b4 <__s2b+0x30>
   bb9a0:	4630      	mov	r0, r6
   bb9a2:	f7ff ff47 	bl	bb834 <_Balloc>
   bb9a6:	b940      	cbnz	r0, bb9ba <__s2b+0x36>
   bb9a8:	4602      	mov	r2, r0
   bb9aa:	4b19      	ldr	r3, [pc, #100]	; (bba10 <__s2b+0x8c>)
   bb9ac:	4819      	ldr	r0, [pc, #100]	; (bba14 <__s2b+0x90>)
   bb9ae:	21ce      	movs	r1, #206	; 0xce
   bb9b0:	f7fb fd2c 	bl	b740c <__assert_func>
   bb9b4:	0052      	lsls	r2, r2, #1
   bb9b6:	3101      	adds	r1, #1
   bb9b8:	e7f0      	b.n	bb99c <__s2b+0x18>
   bb9ba:	9b08      	ldr	r3, [sp, #32]
   bb9bc:	6143      	str	r3, [r0, #20]
   bb9be:	2d09      	cmp	r5, #9
   bb9c0:	f04f 0301 	mov.w	r3, #1
   bb9c4:	6103      	str	r3, [r0, #16]
   bb9c6:	dd16      	ble.n	bb9f6 <__s2b+0x72>
   bb9c8:	f104 0909 	add.w	r9, r4, #9
   bb9cc:	46c8      	mov	r8, r9
   bb9ce:	442c      	add	r4, r5
   bb9d0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bb9d4:	4601      	mov	r1, r0
   bb9d6:	3b30      	subs	r3, #48	; 0x30
   bb9d8:	220a      	movs	r2, #10
   bb9da:	4630      	mov	r0, r6
   bb9dc:	f7ff ff8c 	bl	bb8f8 <__multadd>
   bb9e0:	45a0      	cmp	r8, r4
   bb9e2:	d1f5      	bne.n	bb9d0 <__s2b+0x4c>
   bb9e4:	f1a5 0408 	sub.w	r4, r5, #8
   bb9e8:	444c      	add	r4, r9
   bb9ea:	1b2d      	subs	r5, r5, r4
   bb9ec:	1963      	adds	r3, r4, r5
   bb9ee:	42bb      	cmp	r3, r7
   bb9f0:	db04      	blt.n	bb9fc <__s2b+0x78>
   bb9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb9f6:	340a      	adds	r4, #10
   bb9f8:	2509      	movs	r5, #9
   bb9fa:	e7f6      	b.n	bb9ea <__s2b+0x66>
   bb9fc:	f814 3b01 	ldrb.w	r3, [r4], #1
   bba00:	4601      	mov	r1, r0
   bba02:	3b30      	subs	r3, #48	; 0x30
   bba04:	220a      	movs	r2, #10
   bba06:	4630      	mov	r0, r6
   bba08:	f7ff ff76 	bl	bb8f8 <__multadd>
   bba0c:	e7ee      	b.n	bb9ec <__s2b+0x68>
   bba0e:	bf00      	nop
   bba10:	000bd128 	.word	0x000bd128
   bba14:	000bd1d4 	.word	0x000bd1d4

000bba18 <__hi0bits>:
   bba18:	0c03      	lsrs	r3, r0, #16
   bba1a:	041b      	lsls	r3, r3, #16
   bba1c:	b9d3      	cbnz	r3, bba54 <__hi0bits+0x3c>
   bba1e:	0400      	lsls	r0, r0, #16
   bba20:	2310      	movs	r3, #16
   bba22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bba26:	bf04      	itt	eq
   bba28:	0200      	lsleq	r0, r0, #8
   bba2a:	3308      	addeq	r3, #8
   bba2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bba30:	bf04      	itt	eq
   bba32:	0100      	lsleq	r0, r0, #4
   bba34:	3304      	addeq	r3, #4
   bba36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bba3a:	bf04      	itt	eq
   bba3c:	0080      	lsleq	r0, r0, #2
   bba3e:	3302      	addeq	r3, #2
   bba40:	2800      	cmp	r0, #0
   bba42:	db05      	blt.n	bba50 <__hi0bits+0x38>
   bba44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bba48:	f103 0301 	add.w	r3, r3, #1
   bba4c:	bf08      	it	eq
   bba4e:	2320      	moveq	r3, #32
   bba50:	4618      	mov	r0, r3
   bba52:	4770      	bx	lr
   bba54:	2300      	movs	r3, #0
   bba56:	e7e4      	b.n	bba22 <__hi0bits+0xa>

000bba58 <__lo0bits>:
   bba58:	6803      	ldr	r3, [r0, #0]
   bba5a:	f013 0207 	ands.w	r2, r3, #7
   bba5e:	4601      	mov	r1, r0
   bba60:	d00b      	beq.n	bba7a <__lo0bits+0x22>
   bba62:	07da      	lsls	r2, r3, #31
   bba64:	d423      	bmi.n	bbaae <__lo0bits+0x56>
   bba66:	0798      	lsls	r0, r3, #30
   bba68:	bf49      	itett	mi
   bba6a:	085b      	lsrmi	r3, r3, #1
   bba6c:	089b      	lsrpl	r3, r3, #2
   bba6e:	2001      	movmi	r0, #1
   bba70:	600b      	strmi	r3, [r1, #0]
   bba72:	bf5c      	itt	pl
   bba74:	600b      	strpl	r3, [r1, #0]
   bba76:	2002      	movpl	r0, #2
   bba78:	4770      	bx	lr
   bba7a:	b298      	uxth	r0, r3
   bba7c:	b9a8      	cbnz	r0, bbaaa <__lo0bits+0x52>
   bba7e:	0c1b      	lsrs	r3, r3, #16
   bba80:	2010      	movs	r0, #16
   bba82:	b2da      	uxtb	r2, r3
   bba84:	b90a      	cbnz	r2, bba8a <__lo0bits+0x32>
   bba86:	3008      	adds	r0, #8
   bba88:	0a1b      	lsrs	r3, r3, #8
   bba8a:	071a      	lsls	r2, r3, #28
   bba8c:	bf04      	itt	eq
   bba8e:	091b      	lsreq	r3, r3, #4
   bba90:	3004      	addeq	r0, #4
   bba92:	079a      	lsls	r2, r3, #30
   bba94:	bf04      	itt	eq
   bba96:	089b      	lsreq	r3, r3, #2
   bba98:	3002      	addeq	r0, #2
   bba9a:	07da      	lsls	r2, r3, #31
   bba9c:	d403      	bmi.n	bbaa6 <__lo0bits+0x4e>
   bba9e:	085b      	lsrs	r3, r3, #1
   bbaa0:	f100 0001 	add.w	r0, r0, #1
   bbaa4:	d005      	beq.n	bbab2 <__lo0bits+0x5a>
   bbaa6:	600b      	str	r3, [r1, #0]
   bbaa8:	4770      	bx	lr
   bbaaa:	4610      	mov	r0, r2
   bbaac:	e7e9      	b.n	bba82 <__lo0bits+0x2a>
   bbaae:	2000      	movs	r0, #0
   bbab0:	4770      	bx	lr
   bbab2:	2020      	movs	r0, #32
   bbab4:	4770      	bx	lr
	...

000bbab8 <__i2b>:
   bbab8:	b510      	push	{r4, lr}
   bbaba:	460c      	mov	r4, r1
   bbabc:	2101      	movs	r1, #1
   bbabe:	f7ff feb9 	bl	bb834 <_Balloc>
   bbac2:	4602      	mov	r2, r0
   bbac4:	b928      	cbnz	r0, bbad2 <__i2b+0x1a>
   bbac6:	4b05      	ldr	r3, [pc, #20]	; (bbadc <__i2b+0x24>)
   bbac8:	4805      	ldr	r0, [pc, #20]	; (bbae0 <__i2b+0x28>)
   bbaca:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbace:	f7fb fc9d 	bl	b740c <__assert_func>
   bbad2:	2301      	movs	r3, #1
   bbad4:	6144      	str	r4, [r0, #20]
   bbad6:	6103      	str	r3, [r0, #16]
   bbad8:	bd10      	pop	{r4, pc}
   bbada:	bf00      	nop
   bbadc:	000bd128 	.word	0x000bd128
   bbae0:	000bd1d4 	.word	0x000bd1d4

000bbae4 <__multiply>:
   bbae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbae8:	4691      	mov	r9, r2
   bbaea:	690a      	ldr	r2, [r1, #16]
   bbaec:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbaf0:	429a      	cmp	r2, r3
   bbaf2:	bfb8      	it	lt
   bbaf4:	460b      	movlt	r3, r1
   bbaf6:	460c      	mov	r4, r1
   bbaf8:	bfbc      	itt	lt
   bbafa:	464c      	movlt	r4, r9
   bbafc:	4699      	movlt	r9, r3
   bbafe:	6927      	ldr	r7, [r4, #16]
   bbb00:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbb04:	68a3      	ldr	r3, [r4, #8]
   bbb06:	6861      	ldr	r1, [r4, #4]
   bbb08:	eb07 060a 	add.w	r6, r7, sl
   bbb0c:	42b3      	cmp	r3, r6
   bbb0e:	b085      	sub	sp, #20
   bbb10:	bfb8      	it	lt
   bbb12:	3101      	addlt	r1, #1
   bbb14:	f7ff fe8e 	bl	bb834 <_Balloc>
   bbb18:	b930      	cbnz	r0, bbb28 <__multiply+0x44>
   bbb1a:	4602      	mov	r2, r0
   bbb1c:	4b44      	ldr	r3, [pc, #272]	; (bbc30 <__multiply+0x14c>)
   bbb1e:	4845      	ldr	r0, [pc, #276]	; (bbc34 <__multiply+0x150>)
   bbb20:	f240 115d 	movw	r1, #349	; 0x15d
   bbb24:	f7fb fc72 	bl	b740c <__assert_func>
   bbb28:	f100 0514 	add.w	r5, r0, #20
   bbb2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbb30:	462b      	mov	r3, r5
   bbb32:	2200      	movs	r2, #0
   bbb34:	4543      	cmp	r3, r8
   bbb36:	d321      	bcc.n	bbb7c <__multiply+0x98>
   bbb38:	f104 0314 	add.w	r3, r4, #20
   bbb3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbb40:	f109 0314 	add.w	r3, r9, #20
   bbb44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbb48:	9202      	str	r2, [sp, #8]
   bbb4a:	1b3a      	subs	r2, r7, r4
   bbb4c:	3a15      	subs	r2, #21
   bbb4e:	f022 0203 	bic.w	r2, r2, #3
   bbb52:	3204      	adds	r2, #4
   bbb54:	f104 0115 	add.w	r1, r4, #21
   bbb58:	428f      	cmp	r7, r1
   bbb5a:	bf38      	it	cc
   bbb5c:	2204      	movcc	r2, #4
   bbb5e:	9201      	str	r2, [sp, #4]
   bbb60:	9a02      	ldr	r2, [sp, #8]
   bbb62:	9303      	str	r3, [sp, #12]
   bbb64:	429a      	cmp	r2, r3
   bbb66:	d80c      	bhi.n	bbb82 <__multiply+0x9e>
   bbb68:	2e00      	cmp	r6, #0
   bbb6a:	dd03      	ble.n	bbb74 <__multiply+0x90>
   bbb6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbb70:	2b00      	cmp	r3, #0
   bbb72:	d05a      	beq.n	bbc2a <__multiply+0x146>
   bbb74:	6106      	str	r6, [r0, #16]
   bbb76:	b005      	add	sp, #20
   bbb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbb7c:	f843 2b04 	str.w	r2, [r3], #4
   bbb80:	e7d8      	b.n	bbb34 <__multiply+0x50>
   bbb82:	f8b3 a000 	ldrh.w	sl, [r3]
   bbb86:	f1ba 0f00 	cmp.w	sl, #0
   bbb8a:	d024      	beq.n	bbbd6 <__multiply+0xf2>
   bbb8c:	f104 0e14 	add.w	lr, r4, #20
   bbb90:	46a9      	mov	r9, r5
   bbb92:	f04f 0c00 	mov.w	ip, #0
   bbb96:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbb9a:	f8d9 1000 	ldr.w	r1, [r9]
   bbb9e:	fa1f fb82 	uxth.w	fp, r2
   bbba2:	b289      	uxth	r1, r1
   bbba4:	fb0a 110b 	mla	r1, sl, fp, r1
   bbba8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbbac:	f8d9 2000 	ldr.w	r2, [r9]
   bbbb0:	4461      	add	r1, ip
   bbbb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbbb6:	fb0a c20b 	mla	r2, sl, fp, ip
   bbbba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbbbe:	b289      	uxth	r1, r1
   bbbc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbbc4:	4577      	cmp	r7, lr
   bbbc6:	f849 1b04 	str.w	r1, [r9], #4
   bbbca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbbce:	d8e2      	bhi.n	bbb96 <__multiply+0xb2>
   bbbd0:	9a01      	ldr	r2, [sp, #4]
   bbbd2:	f845 c002 	str.w	ip, [r5, r2]
   bbbd6:	9a03      	ldr	r2, [sp, #12]
   bbbd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbbdc:	3304      	adds	r3, #4
   bbbde:	f1b9 0f00 	cmp.w	r9, #0
   bbbe2:	d020      	beq.n	bbc26 <__multiply+0x142>
   bbbe4:	6829      	ldr	r1, [r5, #0]
   bbbe6:	f104 0c14 	add.w	ip, r4, #20
   bbbea:	46ae      	mov	lr, r5
   bbbec:	f04f 0a00 	mov.w	sl, #0
   bbbf0:	f8bc b000 	ldrh.w	fp, [ip]
   bbbf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbbf8:	fb09 220b 	mla	r2, r9, fp, r2
   bbbfc:	4492      	add	sl, r2
   bbbfe:	b289      	uxth	r1, r1
   bbc00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbc04:	f84e 1b04 	str.w	r1, [lr], #4
   bbc08:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbc0c:	f8be 1000 	ldrh.w	r1, [lr]
   bbc10:	0c12      	lsrs	r2, r2, #16
   bbc12:	fb09 1102 	mla	r1, r9, r2, r1
   bbc16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbc1a:	4567      	cmp	r7, ip
   bbc1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbc20:	d8e6      	bhi.n	bbbf0 <__multiply+0x10c>
   bbc22:	9a01      	ldr	r2, [sp, #4]
   bbc24:	50a9      	str	r1, [r5, r2]
   bbc26:	3504      	adds	r5, #4
   bbc28:	e79a      	b.n	bbb60 <__multiply+0x7c>
   bbc2a:	3e01      	subs	r6, #1
   bbc2c:	e79c      	b.n	bbb68 <__multiply+0x84>
   bbc2e:	bf00      	nop
   bbc30:	000bd128 	.word	0x000bd128
   bbc34:	000bd1d4 	.word	0x000bd1d4

000bbc38 <__pow5mult>:
   bbc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbc3c:	4615      	mov	r5, r2
   bbc3e:	f012 0203 	ands.w	r2, r2, #3
   bbc42:	4606      	mov	r6, r0
   bbc44:	460f      	mov	r7, r1
   bbc46:	d007      	beq.n	bbc58 <__pow5mult+0x20>
   bbc48:	4c25      	ldr	r4, [pc, #148]	; (bbce0 <__pow5mult+0xa8>)
   bbc4a:	3a01      	subs	r2, #1
   bbc4c:	2300      	movs	r3, #0
   bbc4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbc52:	f7ff fe51 	bl	bb8f8 <__multadd>
   bbc56:	4607      	mov	r7, r0
   bbc58:	10ad      	asrs	r5, r5, #2
   bbc5a:	d03d      	beq.n	bbcd8 <__pow5mult+0xa0>
   bbc5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbc5e:	b97c      	cbnz	r4, bbc80 <__pow5mult+0x48>
   bbc60:	2010      	movs	r0, #16
   bbc62:	f7fb fb8b 	bl	b737c <malloc>
   bbc66:	4602      	mov	r2, r0
   bbc68:	6270      	str	r0, [r6, #36]	; 0x24
   bbc6a:	b928      	cbnz	r0, bbc78 <__pow5mult+0x40>
   bbc6c:	4b1d      	ldr	r3, [pc, #116]	; (bbce4 <__pow5mult+0xac>)
   bbc6e:	481e      	ldr	r0, [pc, #120]	; (bbce8 <__pow5mult+0xb0>)
   bbc70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbc74:	f7fb fbca 	bl	b740c <__assert_func>
   bbc78:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbc7c:	6004      	str	r4, [r0, #0]
   bbc7e:	60c4      	str	r4, [r0, #12]
   bbc80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbc84:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbc88:	b94c      	cbnz	r4, bbc9e <__pow5mult+0x66>
   bbc8a:	f240 2171 	movw	r1, #625	; 0x271
   bbc8e:	4630      	mov	r0, r6
   bbc90:	f7ff ff12 	bl	bbab8 <__i2b>
   bbc94:	2300      	movs	r3, #0
   bbc96:	f8c8 0008 	str.w	r0, [r8, #8]
   bbc9a:	4604      	mov	r4, r0
   bbc9c:	6003      	str	r3, [r0, #0]
   bbc9e:	f04f 0900 	mov.w	r9, #0
   bbca2:	07eb      	lsls	r3, r5, #31
   bbca4:	d50a      	bpl.n	bbcbc <__pow5mult+0x84>
   bbca6:	4639      	mov	r1, r7
   bbca8:	4622      	mov	r2, r4
   bbcaa:	4630      	mov	r0, r6
   bbcac:	f7ff ff1a 	bl	bbae4 <__multiply>
   bbcb0:	4639      	mov	r1, r7
   bbcb2:	4680      	mov	r8, r0
   bbcb4:	4630      	mov	r0, r6
   bbcb6:	f7ff fdfd 	bl	bb8b4 <_Bfree>
   bbcba:	4647      	mov	r7, r8
   bbcbc:	106d      	asrs	r5, r5, #1
   bbcbe:	d00b      	beq.n	bbcd8 <__pow5mult+0xa0>
   bbcc0:	6820      	ldr	r0, [r4, #0]
   bbcc2:	b938      	cbnz	r0, bbcd4 <__pow5mult+0x9c>
   bbcc4:	4622      	mov	r2, r4
   bbcc6:	4621      	mov	r1, r4
   bbcc8:	4630      	mov	r0, r6
   bbcca:	f7ff ff0b 	bl	bbae4 <__multiply>
   bbcce:	6020      	str	r0, [r4, #0]
   bbcd0:	f8c0 9000 	str.w	r9, [r0]
   bbcd4:	4604      	mov	r4, r0
   bbcd6:	e7e4      	b.n	bbca2 <__pow5mult+0x6a>
   bbcd8:	4638      	mov	r0, r7
   bbcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbcde:	bf00      	nop
   bbce0:	000bd348 	.word	0x000bd348
   bbce4:	000bceb5 	.word	0x000bceb5
   bbce8:	000bd1d4 	.word	0x000bd1d4

000bbcec <__lshift>:
   bbcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbcf0:	460c      	mov	r4, r1
   bbcf2:	6849      	ldr	r1, [r1, #4]
   bbcf4:	6923      	ldr	r3, [r4, #16]
   bbcf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbcfa:	68a3      	ldr	r3, [r4, #8]
   bbcfc:	4607      	mov	r7, r0
   bbcfe:	4691      	mov	r9, r2
   bbd00:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbd04:	f108 0601 	add.w	r6, r8, #1
   bbd08:	42b3      	cmp	r3, r6
   bbd0a:	db0b      	blt.n	bbd24 <__lshift+0x38>
   bbd0c:	4638      	mov	r0, r7
   bbd0e:	f7ff fd91 	bl	bb834 <_Balloc>
   bbd12:	4605      	mov	r5, r0
   bbd14:	b948      	cbnz	r0, bbd2a <__lshift+0x3e>
   bbd16:	4602      	mov	r2, r0
   bbd18:	4b2a      	ldr	r3, [pc, #168]	; (bbdc4 <__lshift+0xd8>)
   bbd1a:	482b      	ldr	r0, [pc, #172]	; (bbdc8 <__lshift+0xdc>)
   bbd1c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbd20:	f7fb fb74 	bl	b740c <__assert_func>
   bbd24:	3101      	adds	r1, #1
   bbd26:	005b      	lsls	r3, r3, #1
   bbd28:	e7ee      	b.n	bbd08 <__lshift+0x1c>
   bbd2a:	2300      	movs	r3, #0
   bbd2c:	f100 0114 	add.w	r1, r0, #20
   bbd30:	f100 0210 	add.w	r2, r0, #16
   bbd34:	4618      	mov	r0, r3
   bbd36:	4553      	cmp	r3, sl
   bbd38:	db37      	blt.n	bbdaa <__lshift+0xbe>
   bbd3a:	6920      	ldr	r0, [r4, #16]
   bbd3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbd40:	f104 0314 	add.w	r3, r4, #20
   bbd44:	f019 091f 	ands.w	r9, r9, #31
   bbd48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbd4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbd50:	d02f      	beq.n	bbdb2 <__lshift+0xc6>
   bbd52:	f1c9 0e20 	rsb	lr, r9, #32
   bbd56:	468a      	mov	sl, r1
   bbd58:	f04f 0c00 	mov.w	ip, #0
   bbd5c:	681a      	ldr	r2, [r3, #0]
   bbd5e:	fa02 f209 	lsl.w	r2, r2, r9
   bbd62:	ea42 020c 	orr.w	r2, r2, ip
   bbd66:	f84a 2b04 	str.w	r2, [sl], #4
   bbd6a:	f853 2b04 	ldr.w	r2, [r3], #4
   bbd6e:	4298      	cmp	r0, r3
   bbd70:	fa22 fc0e 	lsr.w	ip, r2, lr
   bbd74:	d8f2      	bhi.n	bbd5c <__lshift+0x70>
   bbd76:	1b03      	subs	r3, r0, r4
   bbd78:	3b15      	subs	r3, #21
   bbd7a:	f023 0303 	bic.w	r3, r3, #3
   bbd7e:	3304      	adds	r3, #4
   bbd80:	f104 0215 	add.w	r2, r4, #21
   bbd84:	4290      	cmp	r0, r2
   bbd86:	bf38      	it	cc
   bbd88:	2304      	movcc	r3, #4
   bbd8a:	f841 c003 	str.w	ip, [r1, r3]
   bbd8e:	f1bc 0f00 	cmp.w	ip, #0
   bbd92:	d001      	beq.n	bbd98 <__lshift+0xac>
   bbd94:	f108 0602 	add.w	r6, r8, #2
   bbd98:	3e01      	subs	r6, #1
   bbd9a:	4638      	mov	r0, r7
   bbd9c:	612e      	str	r6, [r5, #16]
   bbd9e:	4621      	mov	r1, r4
   bbda0:	f7ff fd88 	bl	bb8b4 <_Bfree>
   bbda4:	4628      	mov	r0, r5
   bbda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbdaa:	f842 0f04 	str.w	r0, [r2, #4]!
   bbdae:	3301      	adds	r3, #1
   bbdb0:	e7c1      	b.n	bbd36 <__lshift+0x4a>
   bbdb2:	3904      	subs	r1, #4
   bbdb4:	f853 2b04 	ldr.w	r2, [r3], #4
   bbdb8:	f841 2f04 	str.w	r2, [r1, #4]!
   bbdbc:	4298      	cmp	r0, r3
   bbdbe:	d8f9      	bhi.n	bbdb4 <__lshift+0xc8>
   bbdc0:	e7ea      	b.n	bbd98 <__lshift+0xac>
   bbdc2:	bf00      	nop
   bbdc4:	000bd128 	.word	0x000bd128
   bbdc8:	000bd1d4 	.word	0x000bd1d4

000bbdcc <__mcmp>:
   bbdcc:	b530      	push	{r4, r5, lr}
   bbdce:	6902      	ldr	r2, [r0, #16]
   bbdd0:	690c      	ldr	r4, [r1, #16]
   bbdd2:	1b12      	subs	r2, r2, r4
   bbdd4:	d10e      	bne.n	bbdf4 <__mcmp+0x28>
   bbdd6:	f100 0314 	add.w	r3, r0, #20
   bbdda:	3114      	adds	r1, #20
   bbddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbde0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbde4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbde8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbdec:	42a5      	cmp	r5, r4
   bbdee:	d003      	beq.n	bbdf8 <__mcmp+0x2c>
   bbdf0:	d305      	bcc.n	bbdfe <__mcmp+0x32>
   bbdf2:	2201      	movs	r2, #1
   bbdf4:	4610      	mov	r0, r2
   bbdf6:	bd30      	pop	{r4, r5, pc}
   bbdf8:	4283      	cmp	r3, r0
   bbdfa:	d3f3      	bcc.n	bbde4 <__mcmp+0x18>
   bbdfc:	e7fa      	b.n	bbdf4 <__mcmp+0x28>
   bbdfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbe02:	e7f7      	b.n	bbdf4 <__mcmp+0x28>

000bbe04 <__mdiff>:
   bbe04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe08:	460c      	mov	r4, r1
   bbe0a:	4606      	mov	r6, r0
   bbe0c:	4611      	mov	r1, r2
   bbe0e:	4620      	mov	r0, r4
   bbe10:	4690      	mov	r8, r2
   bbe12:	f7ff ffdb 	bl	bbdcc <__mcmp>
   bbe16:	1e05      	subs	r5, r0, #0
   bbe18:	d110      	bne.n	bbe3c <__mdiff+0x38>
   bbe1a:	4629      	mov	r1, r5
   bbe1c:	4630      	mov	r0, r6
   bbe1e:	f7ff fd09 	bl	bb834 <_Balloc>
   bbe22:	b930      	cbnz	r0, bbe32 <__mdiff+0x2e>
   bbe24:	4b3a      	ldr	r3, [pc, #232]	; (bbf10 <__mdiff+0x10c>)
   bbe26:	4602      	mov	r2, r0
   bbe28:	f240 2132 	movw	r1, #562	; 0x232
   bbe2c:	4839      	ldr	r0, [pc, #228]	; (bbf14 <__mdiff+0x110>)
   bbe2e:	f7fb faed 	bl	b740c <__assert_func>
   bbe32:	2301      	movs	r3, #1
   bbe34:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bbe38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe3c:	bfa4      	itt	ge
   bbe3e:	4643      	movge	r3, r8
   bbe40:	46a0      	movge	r8, r4
   bbe42:	4630      	mov	r0, r6
   bbe44:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bbe48:	bfa6      	itte	ge
   bbe4a:	461c      	movge	r4, r3
   bbe4c:	2500      	movge	r5, #0
   bbe4e:	2501      	movlt	r5, #1
   bbe50:	f7ff fcf0 	bl	bb834 <_Balloc>
   bbe54:	b920      	cbnz	r0, bbe60 <__mdiff+0x5c>
   bbe56:	4b2e      	ldr	r3, [pc, #184]	; (bbf10 <__mdiff+0x10c>)
   bbe58:	4602      	mov	r2, r0
   bbe5a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bbe5e:	e7e5      	b.n	bbe2c <__mdiff+0x28>
   bbe60:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bbe64:	6926      	ldr	r6, [r4, #16]
   bbe66:	60c5      	str	r5, [r0, #12]
   bbe68:	f104 0914 	add.w	r9, r4, #20
   bbe6c:	f108 0514 	add.w	r5, r8, #20
   bbe70:	f100 0e14 	add.w	lr, r0, #20
   bbe74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bbe78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bbe7c:	f108 0210 	add.w	r2, r8, #16
   bbe80:	46f2      	mov	sl, lr
   bbe82:	2100      	movs	r1, #0
   bbe84:	f859 3b04 	ldr.w	r3, [r9], #4
   bbe88:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bbe8c:	fa1f f883 	uxth.w	r8, r3
   bbe90:	fa11 f18b 	uxtah	r1, r1, fp
   bbe94:	0c1b      	lsrs	r3, r3, #16
   bbe96:	eba1 0808 	sub.w	r8, r1, r8
   bbe9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bbe9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bbea2:	fa1f f888 	uxth.w	r8, r8
   bbea6:	1419      	asrs	r1, r3, #16
   bbea8:	454e      	cmp	r6, r9
   bbeaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bbeae:	f84a 3b04 	str.w	r3, [sl], #4
   bbeb2:	d8e7      	bhi.n	bbe84 <__mdiff+0x80>
   bbeb4:	1b33      	subs	r3, r6, r4
   bbeb6:	3b15      	subs	r3, #21
   bbeb8:	f023 0303 	bic.w	r3, r3, #3
   bbebc:	3304      	adds	r3, #4
   bbebe:	3415      	adds	r4, #21
   bbec0:	42a6      	cmp	r6, r4
   bbec2:	bf38      	it	cc
   bbec4:	2304      	movcc	r3, #4
   bbec6:	441d      	add	r5, r3
   bbec8:	4473      	add	r3, lr
   bbeca:	469e      	mov	lr, r3
   bbecc:	462e      	mov	r6, r5
   bbece:	4566      	cmp	r6, ip
   bbed0:	d30e      	bcc.n	bbef0 <__mdiff+0xec>
   bbed2:	f10c 0203 	add.w	r2, ip, #3
   bbed6:	1b52      	subs	r2, r2, r5
   bbed8:	f022 0203 	bic.w	r2, r2, #3
   bbedc:	3d03      	subs	r5, #3
   bbede:	45ac      	cmp	ip, r5
   bbee0:	bf38      	it	cc
   bbee2:	2200      	movcc	r2, #0
   bbee4:	441a      	add	r2, r3
   bbee6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bbeea:	b17b      	cbz	r3, bbf0c <__mdiff+0x108>
   bbeec:	6107      	str	r7, [r0, #16]
   bbeee:	e7a3      	b.n	bbe38 <__mdiff+0x34>
   bbef0:	f856 8b04 	ldr.w	r8, [r6], #4
   bbef4:	fa11 f288 	uxtah	r2, r1, r8
   bbef8:	1414      	asrs	r4, r2, #16
   bbefa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bbefe:	b292      	uxth	r2, r2
   bbf00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bbf04:	f84e 2b04 	str.w	r2, [lr], #4
   bbf08:	1421      	asrs	r1, r4, #16
   bbf0a:	e7e0      	b.n	bbece <__mdiff+0xca>
   bbf0c:	3f01      	subs	r7, #1
   bbf0e:	e7ea      	b.n	bbee6 <__mdiff+0xe2>
   bbf10:	000bd128 	.word	0x000bd128
   bbf14:	000bd1d4 	.word	0x000bd1d4

000bbf18 <__ulp>:
   bbf18:	b082      	sub	sp, #8
   bbf1a:	ed8d 0b00 	vstr	d0, [sp]
   bbf1e:	9b01      	ldr	r3, [sp, #4]
   bbf20:	4912      	ldr	r1, [pc, #72]	; (bbf6c <__ulp+0x54>)
   bbf22:	4019      	ands	r1, r3
   bbf24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bbf28:	2900      	cmp	r1, #0
   bbf2a:	dd05      	ble.n	bbf38 <__ulp+0x20>
   bbf2c:	2200      	movs	r2, #0
   bbf2e:	460b      	mov	r3, r1
   bbf30:	ec43 2b10 	vmov	d0, r2, r3
   bbf34:	b002      	add	sp, #8
   bbf36:	4770      	bx	lr
   bbf38:	4249      	negs	r1, r1
   bbf3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bbf3e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bbf42:	f04f 0200 	mov.w	r2, #0
   bbf46:	f04f 0300 	mov.w	r3, #0
   bbf4a:	da04      	bge.n	bbf56 <__ulp+0x3e>
   bbf4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bbf50:	fa41 f300 	asr.w	r3, r1, r0
   bbf54:	e7ec      	b.n	bbf30 <__ulp+0x18>
   bbf56:	f1a0 0114 	sub.w	r1, r0, #20
   bbf5a:	291e      	cmp	r1, #30
   bbf5c:	bfda      	itte	le
   bbf5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bbf62:	fa20 f101 	lsrle.w	r1, r0, r1
   bbf66:	2101      	movgt	r1, #1
   bbf68:	460a      	mov	r2, r1
   bbf6a:	e7e1      	b.n	bbf30 <__ulp+0x18>
   bbf6c:	7ff00000 	.word	0x7ff00000

000bbf70 <__b2d>:
   bbf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbf72:	6905      	ldr	r5, [r0, #16]
   bbf74:	f100 0714 	add.w	r7, r0, #20
   bbf78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bbf7c:	1f2e      	subs	r6, r5, #4
   bbf7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bbf82:	4620      	mov	r0, r4
   bbf84:	f7ff fd48 	bl	bba18 <__hi0bits>
   bbf88:	f1c0 0320 	rsb	r3, r0, #32
   bbf8c:	280a      	cmp	r0, #10
   bbf8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc00c <__b2d+0x9c>
   bbf92:	600b      	str	r3, [r1, #0]
   bbf94:	dc14      	bgt.n	bbfc0 <__b2d+0x50>
   bbf96:	f1c0 0e0b 	rsb	lr, r0, #11
   bbf9a:	fa24 f10e 	lsr.w	r1, r4, lr
   bbf9e:	42b7      	cmp	r7, r6
   bbfa0:	ea41 030c 	orr.w	r3, r1, ip
   bbfa4:	bf34      	ite	cc
   bbfa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbfaa:	2100      	movcs	r1, #0
   bbfac:	3015      	adds	r0, #21
   bbfae:	fa04 f000 	lsl.w	r0, r4, r0
   bbfb2:	fa21 f10e 	lsr.w	r1, r1, lr
   bbfb6:	ea40 0201 	orr.w	r2, r0, r1
   bbfba:	ec43 2b10 	vmov	d0, r2, r3
   bbfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbfc0:	42b7      	cmp	r7, r6
   bbfc2:	bf3a      	itte	cc
   bbfc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbfc8:	f1a5 0608 	subcc.w	r6, r5, #8
   bbfcc:	2100      	movcs	r1, #0
   bbfce:	380b      	subs	r0, #11
   bbfd0:	d017      	beq.n	bc002 <__b2d+0x92>
   bbfd2:	f1c0 0c20 	rsb	ip, r0, #32
   bbfd6:	fa04 f500 	lsl.w	r5, r4, r0
   bbfda:	42be      	cmp	r6, r7
   bbfdc:	fa21 f40c 	lsr.w	r4, r1, ip
   bbfe0:	ea45 0504 	orr.w	r5, r5, r4
   bbfe4:	bf8c      	ite	hi
   bbfe6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bbfea:	2400      	movls	r4, #0
   bbfec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bbff0:	fa01 f000 	lsl.w	r0, r1, r0
   bbff4:	fa24 f40c 	lsr.w	r4, r4, ip
   bbff8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bbffc:	ea40 0204 	orr.w	r2, r0, r4
   bc000:	e7db      	b.n	bbfba <__b2d+0x4a>
   bc002:	ea44 030c 	orr.w	r3, r4, ip
   bc006:	460a      	mov	r2, r1
   bc008:	e7d7      	b.n	bbfba <__b2d+0x4a>
   bc00a:	bf00      	nop
   bc00c:	3ff00000 	.word	0x3ff00000

000bc010 <__d2b>:
   bc010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc014:	4689      	mov	r9, r1
   bc016:	2101      	movs	r1, #1
   bc018:	ec57 6b10 	vmov	r6, r7, d0
   bc01c:	4690      	mov	r8, r2
   bc01e:	f7ff fc09 	bl	bb834 <_Balloc>
   bc022:	4604      	mov	r4, r0
   bc024:	b930      	cbnz	r0, bc034 <__d2b+0x24>
   bc026:	4602      	mov	r2, r0
   bc028:	4b25      	ldr	r3, [pc, #148]	; (bc0c0 <__d2b+0xb0>)
   bc02a:	4826      	ldr	r0, [pc, #152]	; (bc0c4 <__d2b+0xb4>)
   bc02c:	f240 310a 	movw	r1, #778	; 0x30a
   bc030:	f7fb f9ec 	bl	b740c <__assert_func>
   bc034:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc038:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc03c:	bb35      	cbnz	r5, bc08c <__d2b+0x7c>
   bc03e:	2e00      	cmp	r6, #0
   bc040:	9301      	str	r3, [sp, #4]
   bc042:	d028      	beq.n	bc096 <__d2b+0x86>
   bc044:	4668      	mov	r0, sp
   bc046:	9600      	str	r6, [sp, #0]
   bc048:	f7ff fd06 	bl	bba58 <__lo0bits>
   bc04c:	9900      	ldr	r1, [sp, #0]
   bc04e:	b300      	cbz	r0, bc092 <__d2b+0x82>
   bc050:	9a01      	ldr	r2, [sp, #4]
   bc052:	f1c0 0320 	rsb	r3, r0, #32
   bc056:	fa02 f303 	lsl.w	r3, r2, r3
   bc05a:	430b      	orrs	r3, r1
   bc05c:	40c2      	lsrs	r2, r0
   bc05e:	6163      	str	r3, [r4, #20]
   bc060:	9201      	str	r2, [sp, #4]
   bc062:	9b01      	ldr	r3, [sp, #4]
   bc064:	61a3      	str	r3, [r4, #24]
   bc066:	2b00      	cmp	r3, #0
   bc068:	bf14      	ite	ne
   bc06a:	2202      	movne	r2, #2
   bc06c:	2201      	moveq	r2, #1
   bc06e:	6122      	str	r2, [r4, #16]
   bc070:	b1d5      	cbz	r5, bc0a8 <__d2b+0x98>
   bc072:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc076:	4405      	add	r5, r0
   bc078:	f8c9 5000 	str.w	r5, [r9]
   bc07c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc080:	f8c8 0000 	str.w	r0, [r8]
   bc084:	4620      	mov	r0, r4
   bc086:	b003      	add	sp, #12
   bc088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc08c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc090:	e7d5      	b.n	bc03e <__d2b+0x2e>
   bc092:	6161      	str	r1, [r4, #20]
   bc094:	e7e5      	b.n	bc062 <__d2b+0x52>
   bc096:	a801      	add	r0, sp, #4
   bc098:	f7ff fcde 	bl	bba58 <__lo0bits>
   bc09c:	9b01      	ldr	r3, [sp, #4]
   bc09e:	6163      	str	r3, [r4, #20]
   bc0a0:	2201      	movs	r2, #1
   bc0a2:	6122      	str	r2, [r4, #16]
   bc0a4:	3020      	adds	r0, #32
   bc0a6:	e7e3      	b.n	bc070 <__d2b+0x60>
   bc0a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc0ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc0b0:	f8c9 0000 	str.w	r0, [r9]
   bc0b4:	6918      	ldr	r0, [r3, #16]
   bc0b6:	f7ff fcaf 	bl	bba18 <__hi0bits>
   bc0ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc0be:	e7df      	b.n	bc080 <__d2b+0x70>
   bc0c0:	000bd128 	.word	0x000bd128
   bc0c4:	000bd1d4 	.word	0x000bd1d4

000bc0c8 <__ratio>:
   bc0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc0cc:	4688      	mov	r8, r1
   bc0ce:	4669      	mov	r1, sp
   bc0d0:	4681      	mov	r9, r0
   bc0d2:	f7ff ff4d 	bl	bbf70 <__b2d>
   bc0d6:	a901      	add	r1, sp, #4
   bc0d8:	4640      	mov	r0, r8
   bc0da:	ec55 4b10 	vmov	r4, r5, d0
   bc0de:	f7ff ff47 	bl	bbf70 <__b2d>
   bc0e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc0e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc0ea:	eba3 0c02 	sub.w	ip, r3, r2
   bc0ee:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc0f2:	1a9b      	subs	r3, r3, r2
   bc0f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc0f8:	ec51 0b10 	vmov	r0, r1, d0
   bc0fc:	2b00      	cmp	r3, #0
   bc0fe:	bfd6      	itet	le
   bc100:	460a      	movle	r2, r1
   bc102:	462a      	movgt	r2, r5
   bc104:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc108:	468b      	mov	fp, r1
   bc10a:	462f      	mov	r7, r5
   bc10c:	bfd4      	ite	le
   bc10e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc112:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc116:	4620      	mov	r0, r4
   bc118:	ee10 2a10 	vmov	r2, s0
   bc11c:	465b      	mov	r3, fp
   bc11e:	4639      	mov	r1, r7
   bc120:	f7fd fdb8 	bl	b9c94 <__aeabi_ddiv>
   bc124:	ec41 0b10 	vmov	d0, r0, r1
   bc128:	b003      	add	sp, #12
   bc12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc12e <__copybits>:
   bc12e:	3901      	subs	r1, #1
   bc130:	b570      	push	{r4, r5, r6, lr}
   bc132:	1149      	asrs	r1, r1, #5
   bc134:	6914      	ldr	r4, [r2, #16]
   bc136:	3101      	adds	r1, #1
   bc138:	f102 0314 	add.w	r3, r2, #20
   bc13c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc140:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc144:	1f05      	subs	r5, r0, #4
   bc146:	42a3      	cmp	r3, r4
   bc148:	d30c      	bcc.n	bc164 <__copybits+0x36>
   bc14a:	1aa3      	subs	r3, r4, r2
   bc14c:	3b11      	subs	r3, #17
   bc14e:	f023 0303 	bic.w	r3, r3, #3
   bc152:	3211      	adds	r2, #17
   bc154:	42a2      	cmp	r2, r4
   bc156:	bf88      	it	hi
   bc158:	2300      	movhi	r3, #0
   bc15a:	4418      	add	r0, r3
   bc15c:	2300      	movs	r3, #0
   bc15e:	4288      	cmp	r0, r1
   bc160:	d305      	bcc.n	bc16e <__copybits+0x40>
   bc162:	bd70      	pop	{r4, r5, r6, pc}
   bc164:	f853 6b04 	ldr.w	r6, [r3], #4
   bc168:	f845 6f04 	str.w	r6, [r5, #4]!
   bc16c:	e7eb      	b.n	bc146 <__copybits+0x18>
   bc16e:	f840 3b04 	str.w	r3, [r0], #4
   bc172:	e7f4      	b.n	bc15e <__copybits+0x30>

000bc174 <__any_on>:
   bc174:	f100 0214 	add.w	r2, r0, #20
   bc178:	6900      	ldr	r0, [r0, #16]
   bc17a:	114b      	asrs	r3, r1, #5
   bc17c:	4298      	cmp	r0, r3
   bc17e:	b510      	push	{r4, lr}
   bc180:	db11      	blt.n	bc1a6 <__any_on+0x32>
   bc182:	dd0a      	ble.n	bc19a <__any_on+0x26>
   bc184:	f011 011f 	ands.w	r1, r1, #31
   bc188:	d007      	beq.n	bc19a <__any_on+0x26>
   bc18a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc18e:	fa24 f001 	lsr.w	r0, r4, r1
   bc192:	fa00 f101 	lsl.w	r1, r0, r1
   bc196:	428c      	cmp	r4, r1
   bc198:	d10b      	bne.n	bc1b2 <__any_on+0x3e>
   bc19a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc19e:	4293      	cmp	r3, r2
   bc1a0:	d803      	bhi.n	bc1aa <__any_on+0x36>
   bc1a2:	2000      	movs	r0, #0
   bc1a4:	bd10      	pop	{r4, pc}
   bc1a6:	4603      	mov	r3, r0
   bc1a8:	e7f7      	b.n	bc19a <__any_on+0x26>
   bc1aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc1ae:	2900      	cmp	r1, #0
   bc1b0:	d0f5      	beq.n	bc19e <__any_on+0x2a>
   bc1b2:	2001      	movs	r0, #1
   bc1b4:	e7f6      	b.n	bc1a4 <__any_on+0x30>

000bc1b6 <_calloc_r>:
   bc1b6:	b513      	push	{r0, r1, r4, lr}
   bc1b8:	434a      	muls	r2, r1
   bc1ba:	4611      	mov	r1, r2
   bc1bc:	9201      	str	r2, [sp, #4]
   bc1be:	f7fb f915 	bl	b73ec <_malloc_r>
   bc1c2:	4604      	mov	r4, r0
   bc1c4:	b118      	cbz	r0, bc1ce <_calloc_r+0x18>
   bc1c6:	9a01      	ldr	r2, [sp, #4]
   bc1c8:	2100      	movs	r1, #0
   bc1ca:	f7fd ff7c 	bl	ba0c6 <memset>
   bc1ce:	4620      	mov	r0, r4
   bc1d0:	b002      	add	sp, #8
   bc1d2:	bd10      	pop	{r4, pc}
   bc1d4:	0000      	movs	r0, r0
	...

000bc1d8 <nan>:
   bc1d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc1e0 <nan+0x8>
   bc1dc:	4770      	bx	lr
   bc1de:	bf00      	nop
   bc1e0:	00000000 	.word	0x00000000
   bc1e4:	7ff80000 	.word	0x7ff80000

000bc1e8 <__ascii_wctomb>:
   bc1e8:	b149      	cbz	r1, bc1fe <__ascii_wctomb+0x16>
   bc1ea:	2aff      	cmp	r2, #255	; 0xff
   bc1ec:	bf85      	ittet	hi
   bc1ee:	238a      	movhi	r3, #138	; 0x8a
   bc1f0:	6003      	strhi	r3, [r0, #0]
   bc1f2:	700a      	strbls	r2, [r1, #0]
   bc1f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bc1f8:	bf98      	it	ls
   bc1fa:	2001      	movls	r0, #1
   bc1fc:	4770      	bx	lr
   bc1fe:	4608      	mov	r0, r1
   bc200:	4770      	bx	lr
	...

000bc204 <__aeabi_d2lz>:
   bc204:	b538      	push	{r3, r4, r5, lr}
   bc206:	2200      	movs	r2, #0
   bc208:	2300      	movs	r3, #0
   bc20a:	4604      	mov	r4, r0
   bc20c:	460d      	mov	r5, r1
   bc20e:	f7fd fe89 	bl	b9f24 <__aeabi_dcmplt>
   bc212:	b928      	cbnz	r0, bc220 <__aeabi_d2lz+0x1c>
   bc214:	4620      	mov	r0, r4
   bc216:	4629      	mov	r1, r5
   bc218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc21c:	f7fd bf1a 	b.w	ba054 <__aeabi_d2ulz>
   bc220:	4620      	mov	r0, r4
   bc222:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc226:	f7fd ff15 	bl	ba054 <__aeabi_d2ulz>
   bc22a:	4240      	negs	r0, r0
   bc22c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc230:	bd38      	pop	{r3, r4, r5, pc}
   bc232:	bf00      	nop

000bc234 <dynalib_user>:
   bc234:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc244:	0000 0000 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bc254:	756c 6572 7320 6372 2620 2026 7273 2d63     lure src && src-
   bc264:	633e 6c61 626c 6361 006b 6c70 6d75 4365     >callback.plumeC
   bc274:	6e6f 656e 7463 2928 203a 7441 6574 706d     onnect(): Attemp
   bc284:	6974 676e 7420 206f 6f63 6e6e 6365 2074     ting to connect 
   bc294:	6f74 5420 6968 676e 6273 616f 6472 7320     to Thingsboard s
   bc2a4:	7265 6576 0072 7241 6f67 006e 6c70 6d75     erver.Argon.plum
   bc2b4:	4365 6e6f 656e 7463 2928 203a 6f43 6e6e     eConnect(): Conn
   bc2c4:	6365 6574 0064 6c70 6d75 4365 6e6f 656e     ected.plumeConne
   bc2d4:	7463 2928 203a 6f43 6e6e 6365 6974 6e6f     ct(): Connection
   bc2e4:	6620 6961 656c 2c64 7220 7465 7972 6920      failed, retry i
   bc2f4:	206e 2033 6573 6f63 646e 0073 227b 7374     n 3 seconds.{"ts
   bc304:	3a22 7325 202c 7622 6c61 6575 2273 7b3a     ":%s, "values":{
   bc314:	6222 3a22 2e25 6632 7d7d 7600 2f31 6564     "b":%.2f}}.v1/de
   bc324:	6976 6563 2f73 656d 742f 6c65 6d65 7465     vices/me/telemet
   bc334:	7972 7b00 7422 2231 253a 322e 2c66 2220     ry.{"t1":%.2f, "
   bc344:	3176 3a22 2e25 6632 007d 227b 3274 3a22     v1":%.2f}.{"t2":
   bc354:	2e25 6632 222c 3276 3a22 2e25 6632 007d     %.2f,"v2":%.2f}.
   bc364:	227b 3374 3a22 2e25 6632 222c 3376 3a22     {"t3":%.2f,"v3":
   bc374:	2e25 6632 007d 227b 3474 3a22 2e25 6632     %.2f}.{"t4":%.2f
   bc384:	222c 3476 3a22 2e25 6632 007d 227b 3574     ,"v4":%.2f}.{"t5
   bc394:	3a22 2e25 6632 222c 3576 3a22 2e25 6632     ":%.2f,"v5":%.2f
   bc3a4:	007d 227b 3674 3a22 2e25 6632 222c 3676     }.{"t6":%.2f,"v6
   bc3b4:	3a22 2e25 6632 007d 227b 3774 3a22 2e25     ":%.2f}.{"t7":%.
   bc3c4:	6632 222c 3776 3a22 2e25 6632 007d 4142     2f,"v7":%.2f}.BA
   bc3d4:	3134 3430 3330 3932 3836 4142 3131 3431     4104032968BA1114
   bc3e4:	3932 3039 3937 3230 3531 3439 4141 4100     299079021594AA.A
   bc3f4:	2b54 5043 4e49 253d 0d73 000a 7741 6961     T+CPIN=%s...Awai
   bc404:	6974 676e 5220 7065 796c 6620 6f72 206d     ting Reply from 
   bc414:	6170 7373 6f77 6472 000a 6552 6c70 3a79     password..Reply:
   bc424:	2520 0a73 4100 2b54 4441 5244 5345 3d53      %s..AT+ADDRESS=
   bc434:	6925 0a0d 4100 6177 7469 6e69 2067 6552     %i...Awaiting Re
   bc444:	6c70 2079 7266 6d6f 6120 6464 6572 7373     ply from address
   bc454:	000a 6552 6c70 2079 6461 7264 7365 3a73     ..Reply address:
   bc464:	2520 0a73 4100 2b54 454e 5754 524f 494b      %s..AT+NETWORKI
   bc474:	3d44 6925 0a0d 4100 6177 7469 6e69 2067     D=%i...Awaiting 
   bc484:	6552 6c70 2079 7266 6d6f 6e20 7465 6f77     Reply from netwo
   bc494:	6b72 6469 000a 6552 6c70 2079 656e 7774     rkid..Reply netw
   bc4a4:	726f 3a6b 2520 0a73 4100 2b54 4441 5244     ork: %s..AT+ADDR
   bc4b4:	5345 3f53 0a0d 4100 6177 7469 6e69 2067     ESS?...Awaiting 
   bc4c4:	6552 6c70 0a79 5200 7065 796c 6720 7465     Reply..Reply get
   bc4d4:	6120 6464 6572 7373 203a 7325 000a 5441      address: %s..AT
   bc4e4:	4e2b 5445 4f57 4b52 4449 0d3f 000a 6552     +NETWORKID?...Re
   bc4f4:	6c70 2079 6567 2074 656e 7774 726f 3a6b     ply get network:
   bc504:	2520 0a73 4100 2b54 5043 4e49 0d3f 000a      %s..AT+CPIN?...
   bc514:	6552 6c70 2079 6567 2074 6170 7373 6f77     Reply get passwo
   bc524:	6472 203a 7325 000a 5441 522b 5345 5445     rd: %s..AT+RESET
   bc534:	0a0d 5700 4159 7261 634e 7342 366a 5671     ...WYAarNcBsj6qV
   bc544:	3063 4b4e 3167 0063 7563 7473 6d6f 7265     c0NKg1c.customer
   bc554:	3130 7700 6265 6f68 6b6f 6400 7665 6369     01.webhook.devic
   bc564:	4965 3a44 2520 0a73 6300 756f 746e 7265     eID: %s..counter
   bc574:	6800 6d6f 4265 7461 6574 7972 5500 6962     .homeBattery.Ubi
   bc584:	6f64 7374 6420 7461 2061 6573 746e 2e2e     dots data sent..
   bc594:	002e 7245 6f72 2e72 2e2e 6275 6469 746f     ..Error...ubidot
   bc5a4:	2073 6164 6174 6e20 746f 7320 6e65 2e74     s data not sent.
   bc5b4:	2e2e 6900 636e 6d6f 6e69 5367 7274 6e69     ...incomingStrin
   bc5c4:	3a67 2520 0a73 7400 6d65 4670 203a 2e25     g: %s..tempF: %.
   bc5d4:	3230 2c66 7020 6f72 6562 754e 626d 7265     02f, probeNumber
   bc5e4:	203a 6925 000a 6574 706d 6c42 6575 7600     : %i..tempBlue.v
   bc5f4:	6c6f 6174 6567 6c42 6575 7400 6d65 4770     oltageBlue.tempG
   bc604:	6572 6e65 7600 6c6f 6174 6567 7247 6565     reen.voltageGree
   bc614:	006e 6574 706d 724f 6e61 6567 7600 6c6f     n.tempOrange.vol
   bc624:	6174 6567 724f 6e61 6567 3000 3430 3000     tageOrange.004.0
   bc634:	3430 6f56 746c 6761 0065 3030 0035 3030     04Voltage.005.00
   bc644:	5635 6c6f 6174 6567 3000 3630 3000 3630     5Voltage.006.006
   bc654:	6f56 746c 6761 0065 3030 0037 3030 5637     Voltage.007.007V
   bc664:	6c6f 6174 6567 6500 7478 6172 7250 626f     oltage.extraProb
   bc674:	0065 6e69 6f63 696d 676e 7453 6972 676e     e.incomingString
   bc684:	3a32 2520 0a73 0000                         2: %s...

000bc68c <_ZTV11UbiParticle>:
	...
   bc694:	4f41 000b 4f21 000b 4f2d 000b 4f31 000b     AO..!O..-O..1O..
   bc6a4:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   bc6b4:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   bc6c4:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   bc6d4:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   bc6e4:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   bc6f4:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   bc704:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   bc714:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   bc724:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   bc734:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   bc744:	7720 7469 2068 4455 0050 0000                with UDP...

000bc750 <_ZTV6UbiUDP>:
	...
   bc758:	5055 000b 4fd5 000b 4fe1 000b 4fe5 000b     UP...O...O...O..
   bc768:	6255 6469 746f 5073 7261 6974 6c63 2f65     UbidotsParticle/
   bc778:	2e33 0032 7254 6979 676e 7420 206f 6f63     3.2.Trying to co
   bc788:	6e6e 6365 2074 6f74 0020 2c20 6120 7474     nnect to . , att
   bc798:	6d65 7470 6e20 6d75 6562 3a72 0020 7441     empt number: .At
   bc7a8:	6574 706d 2074 6966 696e 6873 6465 5300     tempt finished.S
   bc7b8:	7265 6576 2772 2073 6572 7073 6e6f 6573     erver's response
   bc7c8:	003a 2d0a 2d2d 2d2d 2d2d 2d2d 002d 6974     :..----------.ti
   bc7d8:	656d 756f 2c74 6320 756f 646c 6e20 746f     meout, could not
   bc7e8:	7220 6165 2064 6e61 2079 6572 7073 6e6f      read any respon
   bc7f8:	6573 6620 6f72 206d 6874 2065 6f68 7473     se from the host
   bc808:	5000 534f 2054 612f 6970 762f 2e31 2f36     .POST /api/v1.6/
   bc818:	6564 6976 6563 2f73 2000 5448 5054 312f     devices/. HTTP/1
   bc828:	312e 0a0d 4800 736f 3a74 0020 7355 7265     .1...Host: .User
   bc838:	412d 6567 746e 203a 5800 412d 7475 2d68     -Agent: .X-Auth-
   bc848:	6f54 656b 3a6e 0020 6f43 6e6e 6365 6974     Token: .Connecti
   bc858:	6e6f 203a 6c63 736f 0d65 000a 6f43 746e     on: close...Cont
   bc868:	6e65 2d74 7954 6570 203a 7061 6c70 6369     ent-Type: applic
   bc878:	7461 6f69 2f6e 736a 6e6f 0a0d 4300 6e6f     ation/json...Con
   bc888:	6574 746e 4c2d 6e65 7467 3a68 0020 614d     tent-Length: .Ma
   bc898:	696b 676e 7220 7165 6575 7473 7420 206f     king request to 
   bc8a8:	6255 6469 746f 3a73 000a 6177 7469 6e69     Ubidots:..waitin
   bc8b8:	2067 6f66 2072 6573 7672 7265 6120 736e     g for server ans
   bc8c8:	6577 2072 2e2e 002e 550a 6962 6f64 7374     wer .....Ubidots
   bc8d8:	2027 6553 7672 7265 7220 7365 6f70 736e     ' Server respons
   bc8e8:	3a65 000a 6f43 6c75 2064 6f6e 2074 6573     e:..Could not se
   bc8f8:	646e 6420 7461 2061 6f74 7520 6962 6f64     nd data to ubido
   bc908:	7374 7520 6973 676e 4820 5454 0050 4547     ts using HTTP.GE
   bc918:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
   bc928:	6563 2f73 2f00 766c 4300 6e6f 6574 746e     ces/./lv.Content
   bc938:	542d 7079 3a65 6120 7070 696c 6163 6974     -Type: applicati
   bc948:	6e6f 6a2f 6f73 0d6e 0d0a 000a 6f43 6e6e     on/json.....Conn
   bc958:	6365 6974 6e6f 4620 6961 656c 2064 6275     ection Failed ub
   bc968:	6469 746f 2073 202d 7254 2079 6741 6961     idots - Try Agai
   bc978:	006e 0000                                   n...

000bc97c <_ZTV7UbiHTTP>:
	...
   bc984:	5789 000b 59b9 000b 553d 000b 5541 000b     .W...Y..=U..AU..
   bc994:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   bc9a4:	6962 6f64 7374 632e 6d6f 5900 756f 6120     bidots.com.You a
   bc9b4:	6572 7320 6e65 6964 676e 6d20 726f 2065     re sending more 
   bc9c4:	6874 6e61 7420 6568 6d20 7861 6d69 6d75     than the maximum
   bc9d4:	6f20 2066 6f63 736e 6365 7475 7669 2065      of consecutive 
   bc9e4:	6176 6972 6261 656c 0073 3125 6737 7b00     variables.%17g.{
   bc9f4:	2500 2273 7325 3a22 227b 6176 756c 2265     .%s"%s":{"value"
   bca04:	253a 0073 7325 222c 6974 656d 7473 6d61     :%s.%s,"timestam
   bca14:	2270 253a 756c 2500 2564 2564 0064 7325     p":%lu.%d%d%d.%s
   bca24:	7325 2500 3073 3030 2500 2c73 6322 6e6f     %s.%s000.%s,"con
   bca34:	6574 7478 3a22 7b20 7325 007d 7325 002c     text": {%s}.%s,.
   bca44:	6170 6c79 616f 3a64 2500 7c73 4f50 5453     payload:.%s|POST
   bca54:	257c 7c73 2500 2573 3a73 7325 2500 3d73     |%s|.%s%s:%s.%s=
   bca64:	003e 7325 2524 0073 7325 2540 756c 2500     >.%s$%s.%s@%lu.%
   bca74:	7c73 6e65 0064 6553 646e 6e69 2067 6164     s|end.Sending da
   bca84:	6174 2e2e 002e 7441 6574 706d 6974 676e     ta....Attempting
   bca94:	7420 206f 6572 6f63 6e6e 6365 0074 4c7c      to reconnect.|L
   bcaa4:	7c56 5000 7961 6f6c 6461 6620 726f 7220     V|.Payload for r
   bcab4:	7165 6575 7473 003a 2d0a 2d2d 002d 4f50     equest:..----.PO
   bcac4:	5453 4f00 004b 6f43 6c75 2064 6f6e 2074     ST.OK.Could not 
   bcad4:	6f63 6e6e 6365 2074 6f74 7420 6568 6820     connect to the h
   bcae4:	736f 0074 564c 4500 5252 524f 6320 756f     ost.LV.ERROR cou
   bcaf4:	646c 6e20 746f 6320 6e6f 656e 7463 7420     ld not connect t
   bcb04:	206f 6874 2065 6573 7672 7265 6e00 6c75     o the server.nul
   bcb14:	006c 5245 4f52 0052                         l.ERROR.

000bcb1c <_ZTV6UbiTCP>:
	...
   bcb24:	6495 000b 6539 000b 61c9 000b 66fd 000b     .d..9e...a...f..
   bcb34:	0400 514d 5454 0004                         ..MQTT..

000bcb3c <_ZTVN5spark12NetworkClassE>:
	...
   bcb44:	743d 000b 7447 000b 7451 000b 745b 000b     =t..Gt..Qt..[t..
   bcb54:	7465 000b 7471 000b 747d 000b 7485 000b     et..qt..}t...t..
   bcb64:	748d 000b 7499 000b 74a1 000b 74ab 000b     .t...t...t...t..
   bcb74:	74b5 000b 6977 6972 676e 7200 6365 2076     .t..wiring.recv 
   bcb84:	7265 6f72 2072 203d 6425 0000               error = %d..

000bcb90 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcb98:	7625 000b 7649 000b 7b3f 000b 7657 000b     %v..Iv..?{..Wv..
   bcba8:	7629 000b                                   )v..

000bcbac <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bcbb4 <_ZTV9TCPClient>:
	...
   bcbbc:	5275 000b 52a9 000b 75a1 000b 75bb 000b     uR...R...u...u..
   bcbcc:	79c9 000b 75e5 000b 783f 000b 7619 000b     .y...u..?x...v..
   bcbdc:	78d1 000b 7711 000b 786d 000b 7a7d 000b     .x...w..mx..}z..
   bcbec:	780d 000b 761b 000b 75cd 000b 765d 000b     .x...v...u..]v..
   bcbfc:	76f1 000b                                   .v..

000bcc00 <_ZTV7TwoWire>:
	...
   bcc08:	7b45 000b 7b8f 000b 7b67 000b 7b47 000b     E{...{..g{..G{..
   bcc18:	7b6f 000b 7b77 000b 7b7f 000b 7b87 000b     o{..w{...{...{..

000bcc28 <_ZTV11USARTSerial>:
	...
   bcc30:	7bfb 000b 7c67 000b 7c3f 000b 8885 000b     .{..g|..?|......
   bcc40:	7c0f 000b 7c2b 000b 7c1d 000b 7c39 000b     .|..+|...|..9|..
   bcc50:	7bfd 000b 7c01 000b                         .{...|..

000bcc58 <_ZTVN5spark13CellularClassE>:
	...
   bcc60:	7d09 000b 7cff 000b 7cf5 000b 7cab 000b     .}...|...|...|..
   bcc70:	7ce9 000b 7cdd 000b 747d 000b 7485 000b     .|...|..}t...t..
   bcc80:	7cd1 000b 7cc9 000b 7cbf 000b 7cb5 000b     .|...|...|...|..
   bcc90:	74b5 000b                                   .t..

000bcc94 <_ZTV9USBSerial>:
	...
   bcc9c:	7d4b 000b 7db3 000b 7d89 000b 8885 000b     K}...}...}......
   bccac:	7d7b 000b 7d4d 000b 7d5d 000b 7dad 000b     {}..M}..]}...}..
   bccbc:	7d6d 000b 7d45 000b                         m}..E}..

000bccc4 <_ZTV9IPAddress>:
	...
   bcccc:	7e5d 000b 7e4d 000b 7e4f 000b               ]~..M~..O~..

000bccd8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcce0:	7f81 000b 7f87 000b 7fc5 000b 7f95 000b     ................
   bccf0:	7f83 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bcd00:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   bcd10:	7061 0070                                   app.

000bcd14 <_ZTV3UDP>:
	...
   bcd1c:	9159 000b 917d 000b 8c19 000b 8d41 000b     Y...}.......A...
   bcd2c:	8bd1 000b 8c31 000b 8c4f 000b 8c69 000b     ....1...O...i...
   bcd3c:	8c8d 000b 8d25 000b 8fff 000b 8dc5 000b     ....%...........
   bcd4c:	8f1d 000b 8bb9 000b 90e9 000b 8ea5 000b     ................
   bcd5c:	8bd9 000b 9117 000b 8d6b 000b 8bc7 000b     ........k.......
   bcd6c:	8dfd 000b 8bcd 000b 8c6b 000b fff0 ffff     ........k.......
   bcd7c:	0000 0000 8c85 000b                         ........

000bcd84 <_ZTVN5spark13EthernetClassE>:
	...
   bcd8c:	91ef 000b 91e5 000b 91db 000b 91d1 000b     ................
   bcd9c:	91c5 000b 91b9 000b 747d 000b 7485 000b     ........}t...t..
   bcdac:	91ad 000b 91a5 000b 919b 000b 9191 000b     ................
   bcdbc:	74b5 000b                                   .t..

000bcdc0 <_ZSt7nothrow>:
	...

000bcdc1 <_ZTSSt19_Sp_make_shared_tag>:
   bcdc1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bcdd1:	6572 5f64 6174 0067 0000                     red_tag....

000bcddc <_ZTISt19_Sp_make_shared_tag>:
   bcddc:	ce1c 000b cdc1 000b                         ........

000bcde4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bcde4:	ce7c 000b cdf0 000b cea0 000b               |...........

000bcdf0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcdf0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bce00:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bce10:	0045 0000                                   E...

000bce14 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bce14:	0000 0000 cde4 000b 94f1 000b 9505 000b     ................
   bce24:	9699 000b 9699 000b 956f 000b 94b1 000b     ........o.......
   bce34:	9557 000b 9519 000b 94e3 000b               W...........

000bce40 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bce40:	ce7c 000b ce4c 000b cde4 000b               |...L.......

000bce4c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bce4c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bce5c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bce6c:	666e 456f 0000 0000                         nfoE....

000bce74 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bce74:	0000 0000 ce40 000b 9599 000b 95ad 000b     ....@...........
   bce84:	9699 000b 9699 000b 956f 000b 94b1 000b     ........o.......
   bce94:	966d 000b 95f9 000b 95c1 000b               m...........

000bcea0 <_ZTISt9type_info>:
   bcea0:	ce1c 000b cea8 000b                         ........

000bcea8 <_ZTSSt9type_info>:
   bcea8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bceb8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bcec8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bced8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bcee8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bcef8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bcf08:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bcf18:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bcf28:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bcf38:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bcf48:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bcf58 <fpi.1>:
   bcf58:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bcf68:	0000 0000                                   ....

000bcf6c <fpinan.0>:
   bcf6c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bcf7c:	0000 0000                                   ....

000bcf80 <tinytens>:
   bcf80:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bcf90:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bcfa0:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bcfb0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bcfc0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bcfd0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bcfe0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bcff0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd000:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd010:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bd020:	7472 6b6f 632e                               rtok.c.

000bd027 <_ctype_>:
   bd027:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd037:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd047:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd057:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd067:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd077:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd087:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd097:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd0a7:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd127:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd137:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bd147:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bd157:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bd167:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bd177:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bd187:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bd197:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bd1a7:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bd1b7:	6874 7865 632e 0000                          thex.c...

000bd1c0 <_C_numeric_locale>:
   bd1c0:	c8ce 000b c953 000b dff4 2003 0043 4f50     ....S...... C.PO
   bd1d0:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bd1e0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd1f0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd200:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd210:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd220:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd230:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd240:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bd250:	0063 0000 0000 0000                         c.......

000bd258 <__mprec_bigtens>:
   bd258:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd268:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd278:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd280 <__mprec_tens>:
   bd280:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd290:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd2a0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd2b0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd2c0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd2d0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd2e0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd2f0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd300:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd310:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd320:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd330:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd340:	9db4 79d9 7843 44ea                         ...yCx.D

000bd348 <p05.0>:
   bd348:	0005 0000 0019 0000 007d 0000               ........}...

000bd354 <link_const_variable_data_end>:
   bd354:	000b47dd 	.word	0x000b47dd
   bd358:	000b5125 	.word	0x000b5125
   bd35c:	000b5519 	.word	0x000b5519
   bd360:	000b5b95 	.word	0x000b5b95
   bd364:	000b6199 	.word	0x000b6199
   bd368:	000b67dd 	.word	0x000b67dd
   bd36c:	000b758d 	.word	0x000b758d
   bd370:	000b7d15 	.word	0x000b7d15
   bd374:	000b86d1 	.word	0x000b86d1
   bd378:	000b87dd 	.word	0x000b87dd
   bd37c:	000b87f1 	.word	0x000b87f1
   bd380:	000b89ad 	.word	0x000b89ad
   bd384:	000b8b95 	.word	0x000b8b95
   bd388:	000b91f9 	.word	0x000b91f9

000bd38c <link_constructors_end>:
   bd38c:	00000000 	.word	0x00000000
