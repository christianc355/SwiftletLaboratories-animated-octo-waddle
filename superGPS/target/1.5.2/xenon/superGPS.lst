
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/superGPS/target/1.5.2/xenon/superGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005650  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9670  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000024c  2003d3dc  000d9674  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000011c8  2003d628  2003d628  0002d628  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d98c0  000d98c0  000298c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d98e8  000d98e8  000298e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010d880  00000000  00000000  000298ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000153b5  00000000  00000000  0013716c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002c88  00000000  00000000  0014c521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003bff4  00000000  00000000  0014f1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00034f57  00000000  00000000  0018b19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0011428a  00000000  00000000  001c00f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025d3b  00000000  00000000  002d437e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005578  00000000  00000000  002fa0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e5f0  00000000  00000000  002ff634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd63 	bl	d8afc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fd68 	bl	d8b12 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d3dc 	.word	0x2003d3dc
   d404c:	000d9674 	.word	0x000d9674
   d4050:	2003d628 	.word	0x2003d628
   d4054:	2003d628 	.word	0x2003d628
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f8bb 	bl	d71d8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9670 	.word	0x000d9670
   d4084:	000d962c 	.word	0x000d962c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b826 	b.w	d50d8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fbb3 	bl	d47f8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b861 	b.w	d715c <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b915 	b.w	d62c8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b91b 	b.w	d62d8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b919 	b.w	d62d8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40b6:	b538      	push	{r3, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40ba:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40bc:	b128      	cbz	r0, d40ca <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40be:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40c0:	210c      	movs	r1, #12
   d40c2:	f003 fc5f 	bl	d7984 <_ZdlPvj>
            wakeupSource = next;
   d40c6:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40c8:	e7f8      	b.n	d40bc <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40ca:	4620      	mov	r0, r4
   d40cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40d0:	b513      	push	{r0, r1, r4, lr}
   d40d2:	4b05      	ldr	r3, [pc, #20]	; (d40e8 <_ZN10CloudClass7publishEPKcS1_.isra.7+0x18>)
   d40d4:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d6:	f88d 3000 	strb.w	r3, [sp]
   d40da:	233c      	movs	r3, #60	; 0x3c
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40dc:	4604      	mov	r4, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40de:	f002 fe95 	bl	d6e0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
   d40e2:	4620      	mov	r0, r4
   d40e4:	b002      	add	sp, #8
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003d630 	.word	0x2003d630

000d40ec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ec:	b510      	push	{r4, lr}
   d40ee:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40f0:	6800      	ldr	r0, [r0, #0]
   d40f2:	b108      	cbz	r0, d40f8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40f4:	f002 f8f0 	bl	d62d8 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}

000d40fc <_Z6getGPSPfS_S_Pi>:
    System.reset();
  }
}

void getGPS(float *latitude, float *longitude, float *altitude, int *satellites)
{
   d40fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  int theHour;

  theHour = GPS.hour + TIMEZONE;
   d4100:	4c24      	ldr	r4, [pc, #144]	; (d4194 <_Z6getGPSPfS_S_Pi+0x98>)
  if (theHour < 0)
  {
    theHour = theHour + 24;
  }

  Serial.printf("Time: %02i:%02i:%02i:%03i\n", theHour, GPS.minute, GPS.seconds, GPS.milliseconds);
   d4102:	f8df a090 	ldr.w	sl, [pc, #144]	; d4194 <_Z6getGPSPfS_S_Pi+0x98>
    System.reset();
  }
}

void getGPS(float *latitude, float *longitude, float *altitude, int *satellites)
{
   d4106:	4617      	mov	r7, r2
  int theHour;

  theHour = GPS.hour + TIMEZONE;
   d4108:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  if (theHour < 0)
   d410c:	1f95      	subs	r5, r2, #6
  {
    theHour = theHour + 24;
   d410e:	bf48      	it	mi
   d4110:	f102 0512 	addmi.w	r5, r2, #18
    System.reset();
  }
}

void getGPS(float *latitude, float *longitude, float *altitude, int *satellites)
{
   d4114:	4688      	mov	r8, r1
   d4116:	461e      	mov	r6, r3
   d4118:	4681      	mov	r9, r0
  if (theHour < 0)
  {
    theHour = theHour + 24;
  }

  Serial.printf("Time: %02i:%02i:%02i:%03i\n", theHour, GPS.minute, GPS.seconds, GPS.milliseconds);
   d411a:	f002 fc8d 	bl	d6a38 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d411e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   d4120:	9302      	str	r3, [sp, #8]
   d4122:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d4126:	9301      	str	r3, [sp, #4]
   d4128:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   d412c:	4a1a      	ldr	r2, [pc, #104]	; (d4198 <_Z6getGPSPfS_S_Pi+0x9c>)
   d412e:	9300      	str	r3, [sp, #0]
   d4130:	2100      	movs	r1, #0
   d4132:	462b      	mov	r3, r5
   d4134:	f003 f96b 	bl	d740e <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Dates: %02i-%02i-%02i\n", GPS.month, GPS.day, GPS.year);
   d4138:	f002 fc7e 	bl	d6a38 <_Z16_fetch_usbserialv>
   d413c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   d4140:	9201      	str	r2, [sp, #4]
   d4142:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   d4146:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   d414a:	9200      	str	r2, [sp, #0]
   d414c:	2100      	movs	r1, #0
   d414e:	4a13      	ldr	r2, [pc, #76]	; (d419c <_Z6getGPSPfS_S_Pi+0xa0>)
   d4150:	f003 f95d 	bl	d740e <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Fix: %i, Quality: %i", (int)GPS.fix, (int)GPS.fixquality);
   d4154:	f002 fc70 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4158:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
   d415c:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
   d4160:	9200      	str	r2, [sp, #0]
   d4162:	2100      	movs	r1, #0
   d4164:	4a0e      	ldr	r2, [pc, #56]	; (d41a0 <_Z6getGPSPfS_S_Pi+0xa4>)
   d4166:	f003 f952 	bl	d740e <_ZN5Print11printf_implEbPKcz>
  if (GPS.fix)
   d416a:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
   d416e:	b16b      	cbz	r3, d418c <_Z6getGPSPfS_S_Pi+0x90>
  {
    *latitude = GPS.latitudeDegrees;
   d4170:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   d4174:	f8c9 3000 	str.w	r3, [r9]
    *longitude = GPS.longitudeDegrees;
   d4178:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
   d417c:	f8c8 3000 	str.w	r3, [r8]
    *altitude = GPS.altitude;
   d4180:	f8da 3060 	ldr.w	r3, [sl, #96]	; 0x60
   d4184:	603b      	str	r3, [r7, #0]
    *satellites = (int)GPS.satellites;
   d4186:	f89a 3082 	ldrb.w	r3, [sl, #130]	; 0x82
   d418a:	6033      	str	r3, [r6, #0]
    // Serial.printf("Lat: %0.6f, Lon: %0.6f, Alt: %0.6f\n",*latitude, *longitude, *altitude);
    // Serial.printf("Speed (m/s): %0.2f\n",GPS.speed/1.944);
    // Serial.printf("Angle: %0.2f\n",GPS.angle);
    // Serial.printf("Satellites: %i\n",*satellites);
  }
}
   d418c:	b004      	add	sp, #16
   d418e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4192:	bf00      	nop
   d4194:	2003d814 	.word	0x2003d814
   d4198:	000d8be0 	.word	0x000d8be0
   d419c:	000d8bfb 	.word	0x000d8bfb
   d41a0:	000d8c12 	.word	0x000d8c12
   d41a4:	00000000 	.word	0x00000000

000d41a8 <_Z11takeSamplesv>:
  Serial.printf("-------------- \nScan Complete!\n");
  delay(delayTime);
}

void takeSamples()
{
   d41a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41aa:	ed2d 8b02 	vpush	{d8}
   d41ae:	4c60      	ldr	r4, [pc, #384]	; (d4330 <_Z11takeSamplesv+0x188>)
   d41b0:	b08b      	sub	sp, #44	; 0x2c
   d41b2:	f504 76c8 	add.w	r6, r4, #400	; 0x190
   d41b6:	4625      	mov	r5, r4
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
  {
    samples[i] = analogRead(THERMISTORPIN);
   d41b8:	2013      	movs	r0, #19
   d41ba:	f003 fbbf 	bl	d793c <analogRead>
   d41be:	ee07 0a90 	vmov	s15, r0
   d41c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    delay(10);
   d41c6:	200a      	movs	r0, #10
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
  {
    samples[i] = analogRead(THERMISTORPIN);
   d41c8:	ece5 7a01 	vstmia	r5!, {s15}
    delay(10);
   d41cc:	f003 f876 	bl	d72bc <delay>
void takeSamples()
{
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
   d41d0:	42ae      	cmp	r6, r5
   d41d2:	d1f1      	bne.n	d41b8 <_Z11takeSamplesv+0x10>
   d41d4:	eddf 7a57 	vldr	s15, [pc, #348]	; d4334 <_Z11takeSamplesv+0x18c>

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
  {
    average += samples[i];
   d41d8:	ecb4 7a01 	vldmia	r4!, {s14}
    delay(10);
  }

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
   d41dc:	42a6      	cmp	r6, r4
  {
    average += samples[i];
   d41de:	ee77 7a87 	vadd.f32	s15, s15, s14
    delay(10);
  }

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
   d41e2:	d1f9      	bne.n	d41d8 <_Z11takeSamplesv+0x30>
  {
    average += samples[i];
  }
  average /= NUMSAMPLES;
   d41e4:	eddf 6a54 	vldr	s13, [pc, #336]	; d4338 <_Z11takeSamplesv+0x190>
   d41e8:	4b54      	ldr	r3, [pc, #336]	; (d433c <_Z11takeSamplesv+0x194>)

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d41ea:	4c55      	ldr	r4, [pc, #340]	; (d4340 <_Z11takeSamplesv+0x198>)
  tempC /= BCOEFFICIENT;                         // 1/B * ln(R/Ro)
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
  tempC = 1.0 / tempC;                           // Invert
  tempC -= 273.15;                               // convert absolute temp to C

  tempF = tempC * 1.8 + 32;
   d41ec:	4d55      	ldr	r5, [pc, #340]	; (d4344 <_Z11takeSamplesv+0x19c>)
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
  {
    average += samples[i];
  }
  average /= NUMSAMPLES;
   d41ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;
   d41f2:	eddf 6a55 	vldr	s13, [pc, #340]	; d4348 <_Z11takeSamplesv+0x1a0>
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
  {
    average += samples[i];
  }
  average /= NUMSAMPLES;
   d41f6:	ed83 7a00 	vstr	s14, [r3]

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;
   d41fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d41fe:	4b53      	ldr	r3, [pc, #332]	; (d434c <_Z11takeSamplesv+0x1a4>)
   d4200:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d4204:	ed9f 7a52 	vldr	s14, [pc, #328]	; d4350 <_Z11takeSamplesv+0x1a8>
   d4208:	ee77 7ac8 	vsub.f32	s15, s15, s16
   d420c:	eec7 6a27 	vdiv.f32	s13, s14, s15

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d4210:	eec6 7a87 	vdiv.f32	s15, s13, s14
  }
  average /= NUMSAMPLES;

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;
   d4214:	edc3 6a00 	vstr	s13, [r3]

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d4218:	edc4 7a00 	vstr	s15, [r4]
  tempC = log(tempC);                            // ln(R/Ro)
   d421c:	ee17 0a90 	vmov	r0, s15
   d4220:	f004 f90a 	bl	d8438 <__aeabi_f2d>
   d4224:	ec41 0b10 	vmov	d0, r0, r1
   d4228:	f003 fd0a 	bl	d7c40 <log>
  tempC /= BCOEFFICIENT;                         // 1/B * ln(R/Ro)
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
  tempC = 1.0 / tempC;                           // Invert
  tempC -= 273.15;                               // convert absolute temp to C
   d422c:	ec51 0b10 	vmov	r0, r1, d0
   d4230:	f004 fc06 	bl	d8a40 <__aeabi_d2f>
   d4234:	eddf 7a47 	vldr	s15, [pc, #284]	; d4354 <_Z11takeSamplesv+0x1ac>
   d4238:	ee06 0a90 	vmov	s13, r0
   d423c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4240:	ee17 0a10 	vmov	r0, s14
   d4244:	f004 f8f8 	bl	d8438 <__aeabi_f2d>
   d4248:	a331      	add	r3, pc, #196	; (adr r3, d4310 <_Z11takeSamplesv+0x168>)
   d424a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d424e:	f003 ff95 	bl	d817c <__adddf3>
   d4252:	f004 fbf5 	bl	d8a40 <__aeabi_d2f>
   d4256:	ee07 0a10 	vmov	s14, r0
   d425a:	eec8 7a07 	vdiv.f32	s15, s16, s14
   d425e:	ee17 0a90 	vmov	r0, s15
   d4262:	f004 f8e9 	bl	d8438 <__aeabi_f2d>
   d4266:	a32c      	add	r3, pc, #176	; (adr r3, d4318 <_Z11takeSamplesv+0x170>)
   d4268:	e9d3 2300 	ldrd	r2, r3, [r3]
   d426c:	f003 ff84 	bl	d8178 <__aeabi_dsub>
   d4270:	f004 fbe6 	bl	d8a40 <__aeabi_d2f>
   d4274:	6020      	str	r0, [r4, #0]

  tempF = tempC * 1.8 + 32;
   d4276:	f004 f8df 	bl	d8438 <__aeabi_f2d>
   d427a:	a329      	add	r3, pc, #164	; (adr r3, d4320 <_Z11takeSamplesv+0x178>)
   d427c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4280:	f004 f92e 	bl	d84e0 <__aeabi_dmul>
   d4284:	2200      	movs	r2, #0
   d4286:	4b34      	ldr	r3, [pc, #208]	; (d4358 <_Z11takeSamplesv+0x1b0>)
   d4288:	f003 ff78 	bl	d817c <__adddf3>
   d428c:	f004 fbd8 	bl	d8a40 <__aeabi_d2f>
   d4290:	6028      	str	r0, [r5, #0]

  // tempF = random(0,23000)/100.0;

  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   d4292:	f002 fbd1 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4296:	682d      	ldr	r5, [r5, #0]
   d4298:	4b30      	ldr	r3, [pc, #192]	; (d435c <_Z11takeSamplesv+0x1b4>)
   d429a:	6824      	ldr	r4, [r4, #0]
   d429c:	681f      	ldr	r7, [r3, #0]
   d429e:	4606      	mov	r6, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d42a0:	a806      	add	r0, sp, #24
   d42a2:	f001 ff6b 	bl	d617c <spark_deviceID>
   d42a6:	9b06      	ldr	r3, [sp, #24]
   d42a8:	9305      	str	r3, [sp, #20]
   d42aa:	4628      	mov	r0, r5
   d42ac:	9704      	str	r7, [sp, #16]
   d42ae:	f004 f8c3 	bl	d8438 <__aeabi_f2d>
   d42b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42b6:	4620      	mov	r0, r4
   d42b8:	f004 f8be 	bl	d8438 <__aeabi_f2d>
   d42bc:	4a28      	ldr	r2, [pc, #160]	; (d4360 <_Z11takeSamplesv+0x1b8>)

  batteryVoltage = analogRead(BATT) * 0.0011224;
   d42be:	4c29      	ldr	r4, [pc, #164]	; (d4364 <_Z11takeSamplesv+0x1bc>)
   d42c0:	e9cd 0100 	strd	r0, r1, [sp]
   d42c4:	2100      	movs	r1, #0
   d42c6:	4630      	mov	r0, r6
   d42c8:	f003 f8a1 	bl	d740e <_ZN5Print11printf_implEbPKcz>

  tempF = tempC * 1.8 + 32;

  // tempF = random(0,23000)/100.0;

  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   d42cc:	a806      	add	r0, sp, #24
   d42ce:	f003 f8f5 	bl	d74bc <_ZN6StringD1Ev>

  batteryVoltage = analogRead(BATT) * 0.0011224;
   d42d2:	2018      	movs	r0, #24
   d42d4:	f003 fb32 	bl	d793c <analogRead>
   d42d8:	f004 f89c 	bl	d8414 <__aeabi_i2d>
   d42dc:	a312      	add	r3, pc, #72	; (adr r3, d4328 <_Z11takeSamplesv+0x180>)
   d42de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e2:	f004 f8fd 	bl	d84e0 <__aeabi_dmul>
   d42e6:	f004 fbab 	bl	d8a40 <__aeabi_d2f>
   d42ea:	6020      	str	r0, [r4, #0]
  Serial.printf("voltage: %f\n", batteryVoltage);
   d42ec:	f002 fba4 	bl	d6a38 <_Z16_fetch_usbserialv>
   d42f0:	4605      	mov	r5, r0
   d42f2:	6820      	ldr	r0, [r4, #0]
   d42f4:	f004 f8a0 	bl	d8438 <__aeabi_f2d>
   d42f8:	4a1b      	ldr	r2, [pc, #108]	; (d4368 <_Z11takeSamplesv+0x1c0>)
   d42fa:	e9cd 0100 	strd	r0, r1, [sp]
   d42fe:	2100      	movs	r1, #0
   d4300:	4628      	mov	r0, r5
   d4302:	f003 f884 	bl	d740e <_ZN5Print11printf_implEbPKcz>

  // delay(1000);
}
   d4306:	b00b      	add	sp, #44	; 0x2c
   d4308:	ecbd 8b02 	vpop	{d8}
   d430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d430e:	bf00      	nop
   d4310:	dcb5db83 	.word	0xdcb5db83
   d4314:	3f6b79e1 	.word	0x3f6b79e1
   d4318:	66666666 	.word	0x66666666
   d431c:	40711266 	.word	0x40711266
   d4320:	cccccccd 	.word	0xcccccccd
   d4324:	3ffccccc 	.word	0x3ffccccc
   d4328:	d2c10294 	.word	0xd2c10294
   d432c:	3f5263af 	.word	0x3f5263af
   d4330:	2003d684 	.word	0x2003d684
   d4334:	00000000 	.word	0x00000000
   d4338:	42c80000 	.word	0x42c80000
   d433c:	2003e398 	.word	0x2003e398
   d4340:	2003d660 	.word	0x2003d660
   d4344:	2003d67c 	.word	0x2003d67c
   d4348:	457ff000 	.word	0x457ff000
   d434c:	2003d62c 	.word	0x2003d62c
   d4350:	461c4000 	.word	0x461c4000
   d4354:	4576e000 	.word	0x4576e000
   d4358:	40400000 	.word	0x40400000
   d435c:	2003e39c 	.word	0x2003e39c
   d4360:	000d8c27 	.word	0x000d8c27
   d4364:	2003d648 	.word	0x2003d648
   d4368:	000d8c55 	.word	0x000d8c55

000d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d436c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d436e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4370:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4372:	b17c      	cbz	r4, d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4374:	6863      	ldr	r3, [r4, #4]
   d4376:	3b01      	subs	r3, #1
   d4378:	6063      	str	r3, [r4, #4]
   d437a:	b95b      	cbnz	r3, d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d437c:	6823      	ldr	r3, [r4, #0]
   d437e:	4620      	mov	r0, r4
   d4380:	689b      	ldr	r3, [r3, #8]
   d4382:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4384:	68a3      	ldr	r3, [r4, #8]
   d4386:	3b01      	subs	r3, #1
   d4388:	60a3      	str	r3, [r4, #8]
   d438a:	b91b      	cbnz	r3, d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d438c:	6823      	ldr	r3, [r4, #0]
   d438e:	4620      	mov	r0, r4
   d4390:	68db      	ldr	r3, [r3, #12]
   d4392:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4394:	4628      	mov	r0, r5
   d4396:	bd38      	pop	{r3, r4, r5, pc}

000d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>:
   d4398:	4613      	mov	r3, r2
   d439a:	460a      	mov	r2, r1
   d439c:	2100      	movs	r1, #0
   d439e:	f003 b836 	b.w	d740e <_ZN5Print11printf_implEbPKcz>
	...

000d43a4 <_Z8sendDatav>:

void sendData()
{
   d43a4:	b500      	push	{lr}
   d43a6:	b089      	sub	sp, #36	; 0x24
  String reply;
   d43a8:	4922      	ldr	r1, [pc, #136]	; (d4434 <_Z8sendDatav+0x90>)
   d43aa:	4668      	mov	r0, sp
   d43ac:	f003 f8cd 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.println(buffer);
   d43b0:	f002 fab2 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d43b4:	4920      	ldr	r1, [pc, #128]	; (d4438 <_Z8sendDatav+0x94>)
   d43b6:	f003 f800 	bl	d73ba <_ZN5Print7printlnEPKc>
  Serial1.flush();
   d43ba:	f002 faad 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d43be:	6803      	ldr	r3, [r0, #0]
   d43c0:	69db      	ldr	r3, [r3, #28]
   d43c2:	4798      	blx	r3
  delay(2300);
   d43c4:	f640 00fc 	movw	r0, #2300	; 0x8fc
   d43c8:	f002 ff78 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d43cc:	f002 faa4 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d43d0:	6803      	ldr	r3, [r0, #0]
   d43d2:	691b      	ldr	r3, [r3, #16]
   d43d4:	4798      	blx	r3
   d43d6:	2800      	cmp	r0, #0
   d43d8:	dd26      	ble.n	d4428 <_Z8sendDatav+0x84>
  {
    reply = Serial1.readStringUntil('\n');
   d43da:	f002 fa9d 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d43de:	220a      	movs	r2, #10
   d43e0:	4601      	mov	r1, r0
   d43e2:	a804      	add	r0, sp, #16
   d43e4:	f002 ff98 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d43e8:	a904      	add	r1, sp, #16
   d43ea:	4668      	mov	r0, sp
   d43ec:	f003 f8dd 	bl	d75aa <_ZN6StringaSEOS_>
   d43f0:	a804      	add	r0, sp, #16
   d43f2:	f003 f863 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint == true)
   d43f6:	4b11      	ldr	r3, [pc, #68]	; (d443c <_Z8sendDatav+0x98>)
   d43f8:	781b      	ldrb	r3, [r3, #0]
   d43fa:	b153      	cbz	r3, d4412 <_Z8sendDatav+0x6e>
    {
      Serial.printf("send reply: %s\n", reply.c_str()); //+OK
   d43fc:	f002 fb1c 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4400:	9a00      	ldr	r2, [sp, #0]
   d4402:	490f      	ldr	r1, [pc, #60]	; (d4440 <_Z8sendDatav+0x9c>)
   d4404:	f7ff ffc8 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      Serial.flush();
   d4408:	f002 fb16 	bl	d6a38 <_Z16_fetch_usbserialv>
   d440c:	6803      	ldr	r3, [r0, #0]
   d440e:	69db      	ldr	r3, [r3, #28]
   d4410:	4798      	blx	r3
    }
    if (particlePublish)
   d4412:	4b0c      	ldr	r3, [pc, #48]	; (d4444 <_Z8sendDatav+0xa0>)
   d4414:	781b      	ldrb	r3, [r3, #0]
   d4416:	b13b      	cbz	r3, d4428 <_Z8sendDatav+0x84>
    {
      Particle.publish("sendData()", reply);
   d4418:	a804      	add	r0, sp, #16
   d441a:	9a00      	ldr	r2, [sp, #0]
   d441c:	490a      	ldr	r1, [pc, #40]	; (d4448 <_Z8sendDatav+0xa4>)
   d441e:	f7ff fe57 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4422:	a805      	add	r0, sp, #20
   d4424:	f7ff ffa2 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  // delay(1000);
}

void sendData()
{
  String reply;
   d4428:	4668      	mov	r0, sp
   d442a:	f003 f847 	bl	d74bc <_ZN6StringD1Ev>
    if (particlePublish)
    {
      Particle.publish("sendData()", reply);
    }
  }
}
   d442e:	b009      	add	sp, #36	; 0x24
   d4430:	f85d fb04 	ldr.w	pc, [sp], #4
   d4434:	000d8f07 	.word	0x000d8f07
   d4438:	2003e3a0 	.word	0x2003e3a0
   d443c:	2003d644 	.word	0x2003d644
   d4440:	000d8c62 	.word	0x000d8c62
   d4444:	2003d650 	.word	0x2003d650
   d4448:	000d8c72 	.word	0x000d8c72

000d444c <_Z12createBufferiiff>:
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d444c:	b530      	push	{r4, r5, lr}
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d444e:	4b19      	ldr	r3, [pc, #100]	; (d44b4 <_Z12createBufferiiff+0x68>)
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d4450:	b08b      	sub	sp, #44	; 0x2c
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d4452:	681b      	ldr	r3, [r3, #0]
   d4454:	9304      	str	r3, [sp, #16]
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d4456:	4604      	mov	r4, r0
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d4458:	ee10 0a90 	vmov	r0, s1
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d445c:	460d      	mov	r5, r1
   d445e:	ed8d 0a07 	vstr	s0, [sp, #28]
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d4462:	f003 ffe9 	bl	d8438 <__aeabi_f2d>
   d4466:	ed9d 0a07 	vldr	s0, [sp, #28]
   d446a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d446e:	ee10 0a10 	vmov	r0, s0
   d4472:	f003 ffe1 	bl	d8438 <__aeabi_f2d>
   d4476:	462b      	mov	r3, r5
   d4478:	e9cd 0100 	strd	r0, r1, [sp]
   d447c:	4622      	mov	r2, r4
   d447e:	490e      	ldr	r1, [pc, #56]	; (d44b8 <_Z12createBufferiiff+0x6c>)
   d4480:	480e      	ldr	r0, [pc, #56]	; (d44bc <_Z12createBufferiiff+0x70>)
   d4482:	f001 ff39 	bl	d62f8 <sprintf>
  if (serialPrint)
   d4486:	4b0e      	ldr	r3, [pc, #56]	; (d44c0 <_Z12createBufferiiff+0x74>)
   d4488:	781b      	ldrb	r3, [r3, #0]
   d448a:	b12b      	cbz	r3, d4498 <_Z12createBufferiiff+0x4c>
  {
    Serial.printf("createBuffer: %s", buffer);
   d448c:	f002 fad4 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4490:	4a0a      	ldr	r2, [pc, #40]	; (d44bc <_Z12createBufferiiff+0x70>)
   d4492:	490c      	ldr	r1, [pc, #48]	; (d44c4 <_Z12createBufferiiff+0x78>)
   d4494:	f7ff ff80 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
  }
  if (particlePublish)
   d4498:	4b0b      	ldr	r3, [pc, #44]	; (d44c8 <_Z12createBufferiiff+0x7c>)
   d449a:	781b      	ldrb	r3, [r3, #0]
   d449c:	b13b      	cbz	r3, d44ae <_Z12createBufferiiff+0x62>
  {
    Particle.publish("createBuffer()", buffer);
   d449e:	a808      	add	r0, sp, #32
   d44a0:	4a06      	ldr	r2, [pc, #24]	; (d44bc <_Z12createBufferiiff+0x70>)
   d44a2:	490a      	ldr	r1, [pc, #40]	; (d44cc <_Z12createBufferiiff+0x80>)
   d44a4:	f7ff fe14 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d44a8:	a809      	add	r0, sp, #36	; 0x24
   d44aa:	f7ff ff5f 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d44ae:	b00b      	add	sp, #44	; 0x2c
   d44b0:	bd30      	pop	{r4, r5, pc}
   d44b2:	bf00      	nop
   d44b4:	2003d3f4 	.word	0x2003d3f4
   d44b8:	000d8c7d 	.word	0x000d8c7d
   d44bc:	2003e3a0 	.word	0x2003e3a0
   d44c0:	2003d644 	.word	0x2003d644
   d44c4:	000d8c9c 	.word	0x000d8c9c
   d44c8:	2003d650 	.word	0x2003d650
   d44cc:	000d8cad 	.word	0x000d8cad

000d44d0 <_Z11sendGPSDatav>:
    // Serial.printf("Satellites: %i\n",*satellites);
  }
}

void sendGPSData()
{
   d44d0:	b500      	push	{lr}
  char buffer[60];
  // sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
  sprintf(buffer, "AT+SEND=%i,60,%f,%f,%i\r\n", sendID, lat, lon, probeNumber);
   d44d2:	4b1a      	ldr	r3, [pc, #104]	; (d453c <_Z11sendGPSDatav+0x6c>)
    // Serial.printf("Satellites: %i\n",*satellites);
  }
}

void sendGPSData()
{
   d44d4:	b09b      	sub	sp, #108	; 0x6c
  char buffer[60];
  // sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
  sprintf(buffer, "AT+SEND=%i,60,%f,%f,%i\r\n", sendID, lat, lon, probeNumber);
   d44d6:	681b      	ldr	r3, [r3, #0]
   d44d8:	9304      	str	r3, [sp, #16]
   d44da:	4b19      	ldr	r3, [pc, #100]	; (d4540 <_Z11sendGPSDatav+0x70>)
   d44dc:	6818      	ldr	r0, [r3, #0]
   d44de:	f003 ffab 	bl	d8438 <__aeabi_f2d>
   d44e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d44e6:	4b17      	ldr	r3, [pc, #92]	; (d4544 <_Z11sendGPSDatav+0x74>)
   d44e8:	6818      	ldr	r0, [r3, #0]
   d44ea:	f003 ffa5 	bl	d8438 <__aeabi_f2d>
   d44ee:	e9cd 0100 	strd	r0, r1, [sp]
   d44f2:	4b15      	ldr	r3, [pc, #84]	; (d4548 <_Z11sendGPSDatav+0x78>)
   d44f4:	4915      	ldr	r1, [pc, #84]	; (d454c <_Z11sendGPSDatav+0x7c>)
   d44f6:	681a      	ldr	r2, [r3, #0]
   d44f8:	a80b      	add	r0, sp, #44	; 0x2c
   d44fa:	f001 fefd 	bl	d62f8 <sprintf>
  Serial1.printf("%s", buffer);
   d44fe:	f002 fa0b 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4502:	aa0b      	add	r2, sp, #44	; 0x2c
   d4504:	4912      	ldr	r1, [pc, #72]	; (d4550 <_Z11sendGPSDatav+0x80>)
   d4506:	f7ff ff47 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
  Serial1.setTimeout(20000);
   d450a:	f002 fa05 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d450e:	f644 6120 	movw	r1, #20000	; 0x4e20
   d4512:	f002 fefe 	bl	d7312 <_ZN6Stream10setTimeoutEm>
  String reply = Serial1.readStringUntil('\n');
   d4516:	f002 f9ff 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d451a:	220a      	movs	r2, #10
   d451c:	4601      	mov	r1, r0
   d451e:	a807      	add	r0, sp, #28
   d4520:	f002 fefa 	bl	d7318 <_ZN6Stream15readStringUntilEc>
  Serial.printf("Send reply: %s\n", reply.c_str());
   d4524:	f002 fa88 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4528:	9a07      	ldr	r2, [sp, #28]
   d452a:	490a      	ldr	r1, [pc, #40]	; (d4554 <_Z11sendGPSDatav+0x84>)
   d452c:	f7ff ff34 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
  char buffer[60];
  // sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
  sprintf(buffer, "AT+SEND=%i,60,%f,%f,%i\r\n", sendID, lat, lon, probeNumber);
  Serial1.printf("%s", buffer);
  Serial1.setTimeout(20000);
  String reply = Serial1.readStringUntil('\n');
   d4530:	a807      	add	r0, sp, #28
   d4532:	f002 ffc3 	bl	d74bc <_ZN6StringD1Ev>
  Serial.printf("Send reply: %s\n", reply.c_str());
}
   d4536:	b01b      	add	sp, #108	; 0x6c
   d4538:	f85d fb04 	ldr.w	pc, [sp], #4
   d453c:	2003d3f4 	.word	0x2003d3f4
   d4540:	2003d634 	.word	0x2003d634
   d4544:	2003e394 	.word	0x2003e394
   d4548:	2003d3dc 	.word	0x2003d3dc
   d454c:	000d8cbc 	.word	0x000d8cbc
   d4550:	000d8caa 	.word	0x000d8caa
   d4554:	000d8cd5 	.word	0x000d8cd5

000d4558 <_ZN5Print6printfIIEEEjPKcDpT_>:
   d4558:	460a      	mov	r2, r1
   d455a:	2100      	movs	r1, #0
   d455c:	f002 bf57 	b.w	d740e <_ZN5Print11printf_implEbPKcz>

000d4560 <_Z7i2cScanv>:

void i2cScan()
{
   d4560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  byte status;
  byte address;
  int nDevices;
  unsigned long delayTime = 2000;
  Serial.printf("Starting Scan: \n-------------- \n");
   d4562:	f002 fa69 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4566:	491d      	ldr	r1, [pc, #116]	; (d45dc <_Z7i2cScanv+0x7c>)
    status = Wire.endTransmission();
    if (status == 0)
    {
      Serial.printf("I2C device found at address 0x%02x \n", address);
      nDevices++;
      gpsOn = true;
   d4568:	4f1d      	ldr	r7, [pc, #116]	; (d45e0 <_Z7i2cScanv+0x80>)
{
  byte status;
  byte address;
  int nDevices;
  unsigned long delayTime = 2000;
  Serial.printf("Starting Scan: \n-------------- \n");
   d456a:	f7ff fff5 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
   d456e:	2401      	movs	r4, #1
  nDevices = 0;
   d4570:	2500      	movs	r5, #0
  for (address = 1; address < 127; address++)
  {
    Wire.beginTransmission(address);
   d4572:	f003 f95d 	bl	d7830 <_Z19__fetch_global_Wirev>
   d4576:	b2e1      	uxtb	r1, r4
   d4578:	f002 f94a 	bl	d6810 <_ZN7TwoWire17beginTransmissionEh>
    status = Wire.endTransmission();
   d457c:	f003 f958 	bl	d7830 <_Z19__fetch_global_Wirev>
   d4580:	f002 f94e 	bl	d6820 <_ZN7TwoWire15endTransmissionEv>
    if (status == 0)
   d4584:	4606      	mov	r6, r0
   d4586:	b950      	cbnz	r0, d459e <_Z7i2cScanv+0x3e>
    {
      Serial.printf("I2C device found at address 0x%02x \n", address);
   d4588:	f002 fa56 	bl	d6a38 <_Z16_fetch_usbserialv>
   d458c:	4623      	mov	r3, r4
   d458e:	4a15      	ldr	r2, [pc, #84]	; (d45e4 <_Z7i2cScanv+0x84>)
   d4590:	4631      	mov	r1, r6
   d4592:	f002 ff3c 	bl	d740e <_ZN5Print11printf_implEbPKcz>
      nDevices++;
      gpsOn = true;
   d4596:	2301      	movs	r3, #1
    Wire.beginTransmission(address);
    status = Wire.endTransmission();
    if (status == 0)
    {
      Serial.printf("I2C device found at address 0x%02x \n", address);
      nDevices++;
   d4598:	3501      	adds	r5, #1
      gpsOn = true;
   d459a:	703b      	strb	r3, [r7, #0]
   d459c:	e008      	b.n	d45b0 <_Z7i2cScanv+0x50>
    }
    else if (status == 4)
   d459e:	2804      	cmp	r0, #4
   d45a0:	d106      	bne.n	d45b0 <_Z7i2cScanv+0x50>
    {
      Serial.printf("Unknown error at address 0x%02x \n", address);
   d45a2:	f002 fa49 	bl	d6a38 <_Z16_fetch_usbserialv>
   d45a6:	4623      	mov	r3, r4
   d45a8:	4a0f      	ldr	r2, [pc, #60]	; (d45e8 <_Z7i2cScanv+0x88>)
   d45aa:	2100      	movs	r1, #0
   d45ac:	f002 ff2f 	bl	d740e <_ZN5Print11printf_implEbPKcz>
   d45b0:	3401      	adds	r4, #1
  byte address;
  int nDevices;
  unsigned long delayTime = 2000;
  Serial.printf("Starting Scan: \n-------------- \n");
  nDevices = 0;
  for (address = 1; address < 127; address++)
   d45b2:	2c7f      	cmp	r4, #127	; 0x7f
   d45b4:	d1dd      	bne.n	d4572 <_Z7i2cScanv+0x12>
    else if (status == 4)
    {
      Serial.printf("Unknown error at address 0x%02x \n", address);
    }
  }
  if (nDevices == 0)
   d45b6:	b935      	cbnz	r5, d45c6 <_Z7i2cScanv+0x66>
  {
    Serial.printf("No I2C devices found\n");
   d45b8:	f002 fa3e 	bl	d6a38 <_Z16_fetch_usbserialv>
   d45bc:	490b      	ldr	r1, [pc, #44]	; (d45ec <_Z7i2cScanv+0x8c>)
   d45be:	f7ff ffcb 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    gpsOn = false;
   d45c2:	4b07      	ldr	r3, [pc, #28]	; (d45e0 <_Z7i2cScanv+0x80>)
   d45c4:	701d      	strb	r5, [r3, #0]
  }
  Serial.printf("-------------- \nScan Complete!\n");
   d45c6:	f002 fa37 	bl	d6a38 <_Z16_fetch_usbserialv>
   d45ca:	4909      	ldr	r1, [pc, #36]	; (d45f0 <_Z7i2cScanv+0x90>)
   d45cc:	f7ff ffc4 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
  delay(delayTime);
   d45d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d45d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  {
    Serial.printf("No I2C devices found\n");
    gpsOn = false;
  }
  Serial.printf("-------------- \nScan Complete!\n");
  delay(delayTime);
   d45d8:	f002 be70 	b.w	d72bc <delay>
   d45dc:	000d8d5f 	.word	0x000d8d5f
   d45e0:	2003d645 	.word	0x2003d645
   d45e4:	000d8d80 	.word	0x000d8d80
   d45e8:	000d8da5 	.word	0x000d8da5
   d45ec:	000d8dc7 	.word	0x000d8dc7
   d45f0:	000d8ddd 	.word	0x000d8ddd

000d45f4 <_Z6atTestv>:
    Particle.publish("createBuffer()", buffer);
  }
}

void atTest() // 1
{             // test if module responds to commands
   d45f4:	b500      	push	{lr}
   d45f6:	b089      	sub	sp, #36	; 0x24
  String reply;
   d45f8:	491b      	ldr	r1, [pc, #108]	; (d4668 <_Z6atTestv+0x74>)
   d45fa:	4668      	mov	r0, sp
   d45fc:	f002 ffa5 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT\r\n");
   d4600:	f002 f98a 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4604:	4919      	ldr	r1, [pc, #100]	; (d466c <_Z6atTestv+0x78>)
   d4606:	f7ff ffa7 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
  delay(200);
   d460a:	20c8      	movs	r0, #200	; 0xc8
   d460c:	f002 fe56 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d4610:	f002 f982 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4614:	6803      	ldr	r3, [r0, #0]
   d4616:	691b      	ldr	r3, [r3, #16]
   d4618:	4798      	blx	r3
   d461a:	2800      	cmp	r0, #0
   d461c:	dd1e      	ble.n	d465c <_Z6atTestv+0x68>
  {
    reply = Serial1.readStringUntil('\n');
   d461e:	f002 f97b 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4622:	220a      	movs	r2, #10
   d4624:	4601      	mov	r1, r0
   d4626:	a804      	add	r0, sp, #16
   d4628:	f002 fe76 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d462c:	a904      	add	r1, sp, #16
   d462e:	4668      	mov	r0, sp
   d4630:	f002 ffbb 	bl	d75aa <_ZN6StringaSEOS_>
   d4634:	a804      	add	r0, sp, #16
   d4636:	f002 ff41 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint == true)
   d463a:	4b0d      	ldr	r3, [pc, #52]	; (d4670 <_Z6atTestv+0x7c>)
   d463c:	781b      	ldrb	r3, [r3, #0]
   d463e:	b12b      	cbz	r3, d464c <_Z6atTestv+0x58>
    {
      Serial.printf("atTest reply: %s\n", reply.c_str()); //+OK
   d4640:	f002 f9fa 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4644:	9a00      	ldr	r2, [sp, #0]
   d4646:	490b      	ldr	r1, [pc, #44]	; (d4674 <_Z6atTestv+0x80>)
   d4648:	f7ff fea6 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish == true)
      ;
    {
      Particle.publish("atTest()", reply);
   d464c:	a804      	add	r0, sp, #16
   d464e:	9a00      	ldr	r2, [sp, #0]
   d4650:	4909      	ldr	r1, [pc, #36]	; (d4678 <_Z6atTestv+0x84>)
   d4652:	f7ff fd3d 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4656:	a805      	add	r0, sp, #20
   d4658:	f7ff fe88 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void atTest() // 1
{             // test if module responds to commands
  String reply;
   d465c:	4668      	mov	r0, sp
   d465e:	f002 ff2d 	bl	d74bc <_ZN6StringD1Ev>
      ;
    {
      Particle.publish("atTest()", reply);
    }
  }
}
   d4662:	b009      	add	sp, #36	; 0x24
   d4664:	f85d fb04 	ldr.w	pc, [sp], #4
   d4668:	000d8f07 	.word	0x000d8f07
   d466c:	000d8dfd 	.word	0x000d8dfd
   d4670:	2003d644 	.word	0x2003d644
   d4674:	000d8e02 	.word	0x000d8e02
   d4678:	000d8e14 	.word	0x000d8e14

000d467c <_Z7setModei>:
    }
  }
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
   d467c:	b510      	push	{r4, lr}
   d467e:	b08e      	sub	sp, #56	; 0x38
   d4680:	4604      	mov	r4, r0
  String reply;
   d4682:	4951      	ldr	r1, [pc, #324]	; (d47c8 <_Z7setModei+0x14c>)
   d4684:	a802      	add	r0, sp, #8
   d4686:	f002 ff60 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  String reply2;
   d468a:	494f      	ldr	r1, [pc, #316]	; (d47c8 <_Z7setModei+0x14c>)
   d468c:	a806      	add	r0, sp, #24
   d468e:	f002 ff5c 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  if (modeParameter == 1)
   d4692:	2c01      	cmp	r4, #1
   d4694:	d108      	bne.n	d46a8 <_Z7setModei+0x2c>
  {
    Serial1.printf("AT+MODE=1\r\n");
   d4696:	f002 f93f 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d469a:	494c      	ldr	r1, [pc, #304]	; (d47cc <_Z7setModei+0x150>)
   d469c:	f7ff ff5c 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    Serial.printf("AT+MODE=1\r\n");
   d46a0:	f002 f9ca 	bl	d6a38 <_Z16_fetch_usbserialv>
   d46a4:	4949      	ldr	r1, [pc, #292]	; (d47cc <_Z7setModei+0x150>)
   d46a6:	e007      	b.n	d46b8 <_Z7setModei+0x3c>
    Serial.flush();
    Serial1.flush();
  }
  else
  {
    Serial1.printf("AT+MODE=0\r\n");
   d46a8:	f002 f936 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d46ac:	4948      	ldr	r1, [pc, #288]	; (d47d0 <_Z7setModei+0x154>)
   d46ae:	f7ff ff53 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    Serial.printf("AT+MODE=0\r\n");
   d46b2:	f002 f9c1 	bl	d6a38 <_Z16_fetch_usbserialv>
   d46b6:	4946      	ldr	r1, [pc, #280]	; (d47d0 <_Z7setModei+0x154>)
   d46b8:	f7ff ff4e 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    Serial.flush();
   d46bc:	f002 f9bc 	bl	d6a38 <_Z16_fetch_usbserialv>
   d46c0:	6803      	ldr	r3, [r0, #0]
   d46c2:	69db      	ldr	r3, [r3, #28]
   d46c4:	4798      	blx	r3
    Serial1.flush();
   d46c6:	f002 f927 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d46ca:	6803      	ldr	r3, [r0, #0]
   d46cc:	69db      	ldr	r3, [r3, #28]
   d46ce:	4798      	blx	r3
  }
  delay(200);
   d46d0:	20c8      	movs	r0, #200	; 0xc8
   d46d2:	f002 fdf3 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d46d6:	f002 f91f 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d46da:	6803      	ldr	r3, [r0, #0]
   d46dc:	691b      	ldr	r3, [r3, #16]
   d46de:	4798      	blx	r3
   d46e0:	2800      	cmp	r0, #0
   d46e2:	dd32      	ble.n	d474a <_Z7setModei+0xce>
  {
    reply = Serial1.readStringUntil('\n');
   d46e4:	f002 f918 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d46e8:	220a      	movs	r2, #10
   d46ea:	4601      	mov	r1, r0
   d46ec:	a80a      	add	r0, sp, #40	; 0x28
   d46ee:	f002 fe13 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d46f2:	a90a      	add	r1, sp, #40	; 0x28
   d46f4:	a802      	add	r0, sp, #8
   d46f6:	f002 ff58 	bl	d75aa <_ZN6StringaSEOS_>
   d46fa:	a80a      	add	r0, sp, #40	; 0x28
   d46fc:	f002 fede 	bl	d74bc <_ZN6StringD1Ev>
    reply2 = Serial1.readStringUntil('\n');
   d4700:	f002 f90a 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4704:	220a      	movs	r2, #10
   d4706:	4601      	mov	r1, r0
   d4708:	a80a      	add	r0, sp, #40	; 0x28
   d470a:	f002 fe05 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d470e:	a90a      	add	r1, sp, #40	; 0x28
   d4710:	a806      	add	r0, sp, #24
   d4712:	f002 ff4a 	bl	d75aa <_ZN6StringaSEOS_>
   d4716:	a80a      	add	r0, sp, #40	; 0x28
   d4718:	f002 fed0 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d471c:	4b2d      	ldr	r3, [pc, #180]	; (d47d4 <_Z7setModei+0x158>)
   d471e:	781b      	ldrb	r3, [r3, #0]
   d4720:	b143      	cbz	r3, d4734 <_Z7setModei+0xb8>
    {
      Serial.printf("atMode reply: %s reply2: %s\n", reply.c_str(), reply2.c_str());
   d4722:	f002 f989 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4726:	9b06      	ldr	r3, [sp, #24]
   d4728:	9300      	str	r3, [sp, #0]
   d472a:	4a2b      	ldr	r2, [pc, #172]	; (d47d8 <_Z7setModei+0x15c>)
   d472c:	9b02      	ldr	r3, [sp, #8]
   d472e:	2100      	movs	r1, #0
   d4730:	f002 fe6d 	bl	d740e <_ZN5Print11printf_implEbPKcz>
    }
    if (particlePublish)
   d4734:	4b29      	ldr	r3, [pc, #164]	; (d47dc <_Z7setModei+0x160>)
   d4736:	781b      	ldrb	r3, [r3, #0]
   d4738:	b13b      	cbz	r3, d474a <_Z7setModei+0xce>
    {
      Particle.publish("atMode()", reply);
   d473a:	a80a      	add	r0, sp, #40	; 0x28
   d473c:	9a02      	ldr	r2, [sp, #8]
   d473e:	4928      	ldr	r1, [pc, #160]	; (d47e0 <_Z7setModei+0x164>)
   d4740:	f7ff fcc6 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4744:	a80b      	add	r0, sp, #44	; 0x2c
   d4746:	f7ff fe11 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d474a:	4b26      	ldr	r3, [pc, #152]	; (d47e4 <_Z7setModei+0x168>)
   d474c:	781b      	ldrb	r3, [r3, #0]
   d474e:	2b00      	cmp	r3, #0
   d4750:	d032      	beq.n	d47b8 <_Z7setModei+0x13c>
  {
    Serial1.printf("AT+MODE?\r\n"); // correct
   d4752:	f002 f8e1 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4756:	4924      	ldr	r1, [pc, #144]	; (d47e8 <_Z7setModei+0x16c>)
   d4758:	f7ff fefe 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d475c:	20c8      	movs	r0, #200	; 0xc8
   d475e:	f002 fdad 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4762:	f002 f8d9 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4766:	6803      	ldr	r3, [r0, #0]
   d4768:	691b      	ldr	r3, [r3, #16]
   d476a:	4798      	blx	r3
   d476c:	2800      	cmp	r0, #0
   d476e:	dd23      	ble.n	d47b8 <_Z7setModei+0x13c>
    {
      Serial.printf("Awaiting Reply\n");
   d4770:	f002 f962 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4774:	491d      	ldr	r1, [pc, #116]	; (d47ec <_Z7setModei+0x170>)
   d4776:	f7ff feef 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d477a:	f002 f8cd 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d477e:	220a      	movs	r2, #10
   d4780:	4601      	mov	r1, r0
   d4782:	a80a      	add	r0, sp, #40	; 0x28
   d4784:	f002 fdc8 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4788:	a90a      	add	r1, sp, #40	; 0x28
   d478a:	a802      	add	r0, sp, #8
   d478c:	f002 ff0d 	bl	d75aa <_ZN6StringaSEOS_>
   d4790:	a80a      	add	r0, sp, #40	; 0x28
   d4792:	f002 fe93 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+MODE?: %s\n", reply.c_str());
   d4796:	f002 f94f 	bl	d6a38 <_Z16_fetch_usbserialv>
   d479a:	9a02      	ldr	r2, [sp, #8]
   d479c:	4914      	ldr	r1, [pc, #80]	; (d47f0 <_Z7setModei+0x174>)
   d479e:	f7ff fdfb 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d47a2:	4b0e      	ldr	r3, [pc, #56]	; (d47dc <_Z7setModei+0x160>)
   d47a4:	781b      	ldrb	r3, [r3, #0]
   d47a6:	b13b      	cbz	r3, d47b8 <_Z7setModei+0x13c>
      {
        Particle.publish("AT+MODE?", reply);
   d47a8:	a80a      	add	r0, sp, #40	; 0x28
   d47aa:	9a02      	ldr	r2, [sp, #8]
   d47ac:	4911      	ldr	r1, [pc, #68]	; (d47f4 <_Z7setModei+0x178>)
   d47ae:	f7ff fc8f 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d47b2:	a80b      	add	r0, sp, #44	; 0x2c
   d47b4:	f7ff fdda 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
  String reply;
  String reply2;
   d47b8:	a806      	add	r0, sp, #24
   d47ba:	f002 fe7f 	bl	d74bc <_ZN6StringD1Ev>
  }
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
  String reply;
   d47be:	a802      	add	r0, sp, #8
   d47c0:	f002 fe7c 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("AT+MODE?", reply);
      }
    }
  }
}
   d47c4:	b00e      	add	sp, #56	; 0x38
   d47c6:	bd10      	pop	{r4, pc}
   d47c8:	000d8f07 	.word	0x000d8f07
   d47cc:	000d8d41 	.word	0x000d8d41
   d47d0:	000d8ce5 	.word	0x000d8ce5
   d47d4:	2003d644 	.word	0x2003d644
   d47d8:	000d8e49 	.word	0x000d8e49
   d47dc:	2003d650 	.word	0x2003d650
   d47e0:	000d8e66 	.word	0x000d8e66
   d47e4:	2003d680 	.word	0x2003d680
   d47e8:	000d8d1b 	.word	0x000d8d1b
   d47ec:	000d8e6f 	.word	0x000d8e6f
   d47f0:	000d8e7f 	.word	0x000d8e7f
   d47f4:	000d8e93 	.word	0x000d8e93

000d47f8 <loop>:
    probeNumber = 0;
  }
}

void loop()
{
   d47f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (gpsOn)
   d47fa:	4b22      	ldr	r3, [pc, #136]	; (d4884 <loop+0x8c>)
   d47fc:	7818      	ldrb	r0, [r3, #0]
   d47fe:	b1a0      	cbz	r0, d482a <loop+0x32>
  {
    if (millis() - lastGPS > 15000)
   d4800:	4c21      	ldr	r4, [pc, #132]	; (d4888 <loop+0x90>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4802:	f001 fbf3 	bl	d5fec <HAL_Timer_Get_Milli_Seconds>
   d4806:	6823      	ldr	r3, [r4, #0]
   d4808:	1ac0      	subs	r0, r0, r3
   d480a:	f643 2398 	movw	r3, #15000	; 0x3a98
   d480e:	4298      	cmp	r0, r3
   d4810:	d936      	bls.n	d4880 <loop+0x88>
    {
      getGPS(&lat, &lon, &alt, &sat);
   d4812:	4b1e      	ldr	r3, [pc, #120]	; (d488c <loop+0x94>)
   d4814:	4a1e      	ldr	r2, [pc, #120]	; (d4890 <loop+0x98>)
   d4816:	491f      	ldr	r1, [pc, #124]	; (d4894 <loop+0x9c>)
   d4818:	481f      	ldr	r0, [pc, #124]	; (d4898 <loop+0xa0>)
   d481a:	f7ff fc6f 	bl	d40fc <_Z6getGPSPfS_S_Pi>
      sendGPSData();
   d481e:	f7ff fe57 	bl	d44d0 <_Z11sendGPSDatav>
   d4822:	f001 fbe3 	bl	d5fec <HAL_Timer_Get_Milli_Seconds>
      lastGPS = millis();
   d4826:	6020      	str	r0, [r4, #0]
   d4828:	e02a      	b.n	d4880 <loop+0x88>
    }
  }
  else
  {
    setMode(0);
   d482a:	f7ff ff27 	bl	d467c <_Z7setModei>
    delay(500);
   d482e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4832:	f002 fd43 	bl	d72bc <delay>
    takeSamples();
   d4836:	f7ff fcb7 	bl	d41a8 <_Z11takeSamplesv>
    createBuffer(sendID, bufferLength, tempF, batteryVoltage);
   d483a:	4b18      	ldr	r3, [pc, #96]	; (d489c <loop+0xa4>)
   d483c:	edd3 0a00 	vldr	s1, [r3]
   d4840:	4b17      	ldr	r3, [pc, #92]	; (d48a0 <loop+0xa8>)
   d4842:	ed93 0a00 	vldr	s0, [r3]
   d4846:	4b17      	ldr	r3, [pc, #92]	; (d48a4 <loop+0xac>)
   d4848:	6819      	ldr	r1, [r3, #0]
   d484a:	4b17      	ldr	r3, [pc, #92]	; (d48a8 <loop+0xb0>)
   d484c:	6818      	ldr	r0, [r3, #0]
   d484e:	f7ff fdfd 	bl	d444c <_Z12createBufferiiff>
    sendData();
   d4852:	f7ff fda7 	bl	d43a4 <_Z8sendDatav>
    delay(1000);
   d4856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d485a:	f002 fd2f 	bl	d72bc <delay>
    setMode(1);
   d485e:	2001      	movs	r0, #1
   d4860:	f7ff ff0c 	bl	d467c <_Z7setModei>
    delay(500);
   d4864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4868:	f002 fd28 	bl	d72bc <delay>
    System.sleep(config);
   d486c:	a801      	add	r0, sp, #4
   d486e:	490f      	ldr	r1, [pc, #60]	; (d48ac <loop+0xb4>)
   d4870:	f002 ff04 	bl	d767c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4874:	9801      	ldr	r0, [sp, #4]
   d4876:	b108      	cbz	r0, d487c <loop+0x84>
            free(wakeupSource_);
   d4878:	f001 fd2e 	bl	d62d8 <free>
    System.reset();
   d487c:	f002 fefb 	bl	d7676 <_ZN11SystemClass5resetEv>
  }
}
   d4880:	b004      	add	sp, #16
   d4882:	bd10      	pop	{r4, pc}
   d4884:	2003d645 	.word	0x2003d645
   d4888:	2003d654 	.word	0x2003d654
   d488c:	2003e3d4 	.word	0x2003e3d4
   d4890:	2003d658 	.word	0x2003d658
   d4894:	2003d634 	.word	0x2003d634
   d4898:	2003e394 	.word	0x2003e394
   d489c:	2003d648 	.word	0x2003d648
   d48a0:	2003d67c 	.word	0x2003d67c
   d48a4:	2003d3f8 	.word	0x2003d3f8
   d48a8:	2003d3dc 	.word	0x2003d3dc
   d48ac:	2003d664 	.word	0x2003d664

000d48b0 <_Z12setParameteri>:
  }
}

//************************** TEST RADIO PARAMETERS
void setParameter(int radioParameter) // 5
{                                     //  Set the Radio Frequency parameters
   d48b0:	b500      	push	{lr}
   d48b2:	b089      	sub	sp, #36	; 0x24
  String reply;
   d48b4:	4938      	ldr	r1, [pc, #224]	; (d4998 <_Z12setParameteri+0xe8>)
   d48b6:	4668      	mov	r0, sp
   d48b8:	f002 fe47 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  // Serial1.printf("AT+PARAMETER=12,7,1,4\r\n"); // default working with v1 home base
  Serial1.printf("AT+PARAMETER=12,7,1,7\r\n"); // working with v1 home base
   d48bc:	f002 f82c 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d48c0:	4936      	ldr	r1, [pc, #216]	; (d499c <_Z12setParameteri+0xec>)
   d48c2:	f7ff fe49 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
  // }
  // else if (radioParameter == 1)
  // {
  //     Serial1.printf("AT+PARAMETER=12,4,1,7\r\n"); // more than 3km //not working with v1 home base
  // }
  delay(200);
   d48c6:	20c8      	movs	r0, #200	; 0xc8
   d48c8:	f002 fcf8 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d48cc:	f002 f824 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d48d0:	6803      	ldr	r3, [r0, #0]
   d48d2:	691b      	ldr	r3, [r3, #16]
   d48d4:	4798      	blx	r3
   d48d6:	2800      	cmp	r0, #0
   d48d8:	dd21      	ble.n	d491e <_Z12setParameteri+0x6e>
  {
    reply = Serial1.readStringUntil('\n');
   d48da:	f002 f81d 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d48de:	220a      	movs	r2, #10
   d48e0:	4601      	mov	r1, r0
   d48e2:	a804      	add	r0, sp, #16
   d48e4:	f002 fd18 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d48e8:	a904      	add	r1, sp, #16
   d48ea:	4668      	mov	r0, sp
   d48ec:	f002 fe5d 	bl	d75aa <_ZN6StringaSEOS_>
   d48f0:	a804      	add	r0, sp, #16
   d48f2:	f002 fde3 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d48f6:	4b2a      	ldr	r3, [pc, #168]	; (d49a0 <_Z12setParameteri+0xf0>)
   d48f8:	781b      	ldrb	r3, [r3, #0]
   d48fa:	b12b      	cbz	r3, d4908 <_Z12setParameteri+0x58>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   d48fc:	f002 f89c 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4900:	9a00      	ldr	r2, [sp, #0]
   d4902:	4928      	ldr	r1, [pc, #160]	; (d49a4 <_Z12setParameteri+0xf4>)
   d4904:	f7ff fd48 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish)
   d4908:	4b27      	ldr	r3, [pc, #156]	; (d49a8 <_Z12setParameteri+0xf8>)
   d490a:	781b      	ldrb	r3, [r3, #0]
   d490c:	b13b      	cbz	r3, d491e <_Z12setParameteri+0x6e>
    {
      Particle.publish("setRadio", reply);
   d490e:	a804      	add	r0, sp, #16
   d4910:	9a00      	ldr	r2, [sp, #0]
   d4912:	4926      	ldr	r1, [pc, #152]	; (d49ac <_Z12setParameteri+0xfc>)
   d4914:	f7ff fbdc 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4918:	a805      	add	r0, sp, #20
   d491a:	f7ff fd27 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d491e:	4b24      	ldr	r3, [pc, #144]	; (d49b0 <_Z12setParameteri+0x100>)
   d4920:	781b      	ldrb	r3, [r3, #0]
   d4922:	2b00      	cmp	r3, #0
   d4924:	d032      	beq.n	d498c <_Z12setParameteri+0xdc>
  {
    Serial1.printf("AT+PARAMETER?\r\n");
   d4926:	f001 fff7 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d492a:	4922      	ldr	r1, [pc, #136]	; (d49b4 <_Z12setParameteri+0x104>)
   d492c:	f7ff fe14 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4930:	20c8      	movs	r0, #200	; 0xc8
   d4932:	f002 fcc3 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4936:	f001 ffef 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d493a:	6803      	ldr	r3, [r0, #0]
   d493c:	691b      	ldr	r3, [r3, #16]
   d493e:	4798      	blx	r3
   d4940:	2800      	cmp	r0, #0
   d4942:	dd23      	ble.n	d498c <_Z12setParameteri+0xdc>
    {
      Serial.printf("Awaiting Reply\n");
   d4944:	f002 f878 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4948:	491b      	ldr	r1, [pc, #108]	; (d49b8 <_Z12setParameteri+0x108>)
   d494a:	f7ff fe05 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d494e:	f001 ffe3 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4952:	220a      	movs	r2, #10
   d4954:	4601      	mov	r1, r0
   d4956:	a804      	add	r0, sp, #16
   d4958:	f002 fcde 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d495c:	a904      	add	r1, sp, #16
   d495e:	4668      	mov	r0, sp
   d4960:	f002 fe23 	bl	d75aa <_ZN6StringaSEOS_>
   d4964:	a804      	add	r0, sp, #16
   d4966:	f002 fda9 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+PARAMETER?: %s\n", reply.c_str()); //+PARAMETER=" "
   d496a:	f002 f865 	bl	d6a38 <_Z16_fetch_usbserialv>
   d496e:	9a00      	ldr	r2, [sp, #0]
   d4970:	4912      	ldr	r1, [pc, #72]	; (d49bc <_Z12setParameteri+0x10c>)
   d4972:	f7ff fd11 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d4976:	4b0c      	ldr	r3, [pc, #48]	; (d49a8 <_Z12setParameteri+0xf8>)
   d4978:	781b      	ldrb	r3, [r3, #0]
   d497a:	b13b      	cbz	r3, d498c <_Z12setParameteri+0xdc>
      {
        Particle.publish("setParameter?", reply);
   d497c:	a804      	add	r0, sp, #16
   d497e:	9a00      	ldr	r2, [sp, #0]
   d4980:	490f      	ldr	r1, [pc, #60]	; (d49c0 <_Z12setParameteri+0x110>)
   d4982:	f7ff fba5 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4986:	a805      	add	r0, sp, #20
   d4988:	f7ff fcf0 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

//************************** TEST RADIO PARAMETERS
void setParameter(int radioParameter) // 5
{                                     //  Set the Radio Frequency parameters
  String reply;
   d498c:	4668      	mov	r0, sp
   d498e:	f002 fd95 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("setParameter?", reply);
      }
    }
  }
}
   d4992:	b009      	add	sp, #36	; 0x24
   d4994:	f85d fb04 	ldr.w	pc, [sp], #4
   d4998:	000d8f07 	.word	0x000d8f07
   d499c:	000d8e9c 	.word	0x000d8e9c
   d49a0:	2003d644 	.word	0x2003d644
   d49a4:	000d8cd9 	.word	0x000d8cd9
   d49a8:	2003d650 	.word	0x2003d650
   d49ac:	000d8eb4 	.word	0x000d8eb4
   d49b0:	2003d680 	.word	0x2003d680
   d49b4:	000d8ebd 	.word	0x000d8ebd
   d49b8:	000d8e6f 	.word	0x000d8e6f
   d49bc:	000d8ecd 	.word	0x000d8ecd
   d49c0:	000d8ee6 	.word	0x000d8ee6

000d49c4 <_Z7setBandi>:

//************************* Check band before sending to england
void setBand(int bandParameter) // 6
{                               //  Set RF Band
   d49c4:	b510      	push	{r4, lr}
   d49c6:	b088      	sub	sp, #32
   d49c8:	4604      	mov	r4, r0
  String reply;
   d49ca:	493b      	ldr	r1, [pc, #236]	; (d4ab8 <_Z7setBandi+0xf4>)
   d49cc:	4668      	mov	r0, sp
   d49ce:	f002 fdbc 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  if (bandParameter == 0)
   d49d2:	b924      	cbnz	r4, d49de <_Z7setBandi+0x1a>
  {
    Serial1.printf("AT+BAND=915000000\r\n"); // united states
   d49d4:	f001 ffa0 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d49d8:	4938      	ldr	r1, [pc, #224]	; (d4abc <_Z7setBandi+0xf8>)
   d49da:	f7ff fdbd 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
  }
  else if (bandParameter == 1)
    ;
  {
    Serial1.printf("AT+BAND=868500000\r\n"); // europe
   d49de:	f001 ff9b 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d49e2:	4937      	ldr	r1, [pc, #220]	; (d4ac0 <_Z7setBandi+0xfc>)
   d49e4:	f7ff fdb8 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
  }

  delay(200);
   d49e8:	20c8      	movs	r0, #200	; 0xc8
   d49ea:	f002 fc67 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d49ee:	f001 ff93 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d49f2:	6803      	ldr	r3, [r0, #0]
   d49f4:	691b      	ldr	r3, [r3, #16]
   d49f6:	4798      	blx	r3
   d49f8:	2800      	cmp	r0, #0
   d49fa:	dd21      	ble.n	d4a40 <_Z7setBandi+0x7c>
  {
    reply = Serial1.readStringUntil('\n');
   d49fc:	f001 ff8c 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4a00:	220a      	movs	r2, #10
   d4a02:	4601      	mov	r1, r0
   d4a04:	a804      	add	r0, sp, #16
   d4a06:	f002 fc87 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4a0a:	a904      	add	r1, sp, #16
   d4a0c:	4668      	mov	r0, sp
   d4a0e:	f002 fdcc 	bl	d75aa <_ZN6StringaSEOS_>
   d4a12:	a804      	add	r0, sp, #16
   d4a14:	f002 fd52 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d4a18:	4b2a      	ldr	r3, [pc, #168]	; (d4ac4 <_Z7setBandi+0x100>)
   d4a1a:	781b      	ldrb	r3, [r3, #0]
   d4a1c:	b12b      	cbz	r3, d4a2a <_Z7setBandi+0x66>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   d4a1e:	f002 f80b 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4a22:	9a00      	ldr	r2, [sp, #0]
   d4a24:	4928      	ldr	r1, [pc, #160]	; (d4ac8 <_Z7setBandi+0x104>)
   d4a26:	f7ff fcb7 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish)
   d4a2a:	4b28      	ldr	r3, [pc, #160]	; (d4acc <_Z7setBandi+0x108>)
   d4a2c:	781b      	ldrb	r3, [r3, #0]
   d4a2e:	b13b      	cbz	r3, d4a40 <_Z7setBandi+0x7c>
    {
      Particle.publish("setBand", reply);
   d4a30:	a804      	add	r0, sp, #16
   d4a32:	9a00      	ldr	r2, [sp, #0]
   d4a34:	4926      	ldr	r1, [pc, #152]	; (d4ad0 <_Z7setBandi+0x10c>)
   d4a36:	f7ff fb4b 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4a3a:	a805      	add	r0, sp, #20
   d4a3c:	f7ff fc96 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4a40:	4b24      	ldr	r3, [pc, #144]	; (d4ad4 <_Z7setBandi+0x110>)
   d4a42:	781b      	ldrb	r3, [r3, #0]
   d4a44:	2b00      	cmp	r3, #0
   d4a46:	d032      	beq.n	d4aae <_Z7setBandi+0xea>
  {
    Serial1.printf("AT+BAND?\r\n"); // correct
   d4a48:	f001 ff66 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4a4c:	4922      	ldr	r1, [pc, #136]	; (d4ad8 <_Z7setBandi+0x114>)
   d4a4e:	f7ff fd83 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4a52:	20c8      	movs	r0, #200	; 0xc8
   d4a54:	f002 fc32 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4a58:	f001 ff5e 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4a5c:	6803      	ldr	r3, [r0, #0]
   d4a5e:	691b      	ldr	r3, [r3, #16]
   d4a60:	4798      	blx	r3
   d4a62:	2800      	cmp	r0, #0
   d4a64:	dd23      	ble.n	d4aae <_Z7setBandi+0xea>
    {
      Serial.printf("Awaiting Reply\n");
   d4a66:	f001 ffe7 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4a6a:	491c      	ldr	r1, [pc, #112]	; (d4adc <_Z7setBandi+0x118>)
   d4a6c:	f7ff fd74 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4a70:	f001 ff52 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4a74:	220a      	movs	r2, #10
   d4a76:	4601      	mov	r1, r0
   d4a78:	a804      	add	r0, sp, #16
   d4a7a:	f002 fc4d 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4a7e:	a904      	add	r1, sp, #16
   d4a80:	4668      	mov	r0, sp
   d4a82:	f002 fd92 	bl	d75aa <_ZN6StringaSEOS_>
   d4a86:	a804      	add	r0, sp, #16
   d4a88:	f002 fd18 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+BAND?: %s\n", reply.c_str());
   d4a8c:	f001 ffd4 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4a90:	9a00      	ldr	r2, [sp, #0]
   d4a92:	4913      	ldr	r1, [pc, #76]	; (d4ae0 <_Z7setBandi+0x11c>)
   d4a94:	f7ff fc80 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d4a98:	4b0c      	ldr	r3, [pc, #48]	; (d4acc <_Z7setBandi+0x108>)
   d4a9a:	781b      	ldrb	r3, [r3, #0]
   d4a9c:	b13b      	cbz	r3, d4aae <_Z7setBandi+0xea>
      {
        Particle.publish("AT+BAND?", reply);
   d4a9e:	a804      	add	r0, sp, #16
   d4aa0:	9a00      	ldr	r2, [sp, #0]
   d4aa2:	4910      	ldr	r1, [pc, #64]	; (d4ae4 <_Z7setBandi+0x120>)
   d4aa4:	f7ff fb14 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4aa8:	a805      	add	r0, sp, #20
   d4aaa:	f7ff fc5f 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

//************************* Check band before sending to england
void setBand(int bandParameter) // 6
{                               //  Set RF Band
  String reply;
   d4aae:	4668      	mov	r0, sp
   d4ab0:	f002 fd04 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("AT+BAND?", reply);
      }
    }
  }
}
   d4ab4:	b008      	add	sp, #32
   d4ab6:	bd10      	pop	{r4, pc}
   d4ab8:	000d8f07 	.word	0x000d8f07
   d4abc:	000d8ef4 	.word	0x000d8ef4
   d4ac0:	000d8f08 	.word	0x000d8f08
   d4ac4:	2003d644 	.word	0x2003d644
   d4ac8:	000d8cd9 	.word	0x000d8cd9
   d4acc:	2003d650 	.word	0x2003d650
   d4ad0:	000d8f1c 	.word	0x000d8f1c
   d4ad4:	2003d680 	.word	0x2003d680
   d4ad8:	000d8f24 	.word	0x000d8f24
   d4adc:	000d8e6f 	.word	0x000d8e6f
   d4ae0:	000d8f2f 	.word	0x000d8f2f
   d4ae4:	000d8f43 	.word	0x000d8f43

000d4ae8 <_Z7setCPINv>:
    }
  }
}

void setCPIN() // 9
{              //  set password
   d4ae8:	b500      	push	{lr}
   d4aea:	b08d      	sub	sp, #52	; 0x34
  String CPIN = "BA4104032968BA1114299079021594AA";
   d4aec:	493c      	ldr	r1, [pc, #240]	; (d4be0 <_Z7setCPINv+0xf8>)
   d4aee:	4668      	mov	r0, sp
   d4af0:	f002 fd2b 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  String reply;
   d4af4:	493b      	ldr	r1, [pc, #236]	; (d4be4 <_Z7setCPINv+0xfc>)
   d4af6:	a804      	add	r0, sp, #16
   d4af8:	f002 fd27 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+CPIN=%s\r\n", CPIN.c_str());
   d4afc:	f001 ff0c 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4b00:	9a00      	ldr	r2, [sp, #0]
   d4b02:	4939      	ldr	r1, [pc, #228]	; (d4be8 <_Z7setCPINv+0x100>)
   d4b04:	f7ff fc48 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
  delay(200);
   d4b08:	20c8      	movs	r0, #200	; 0xc8
   d4b0a:	f002 fbd7 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d4b0e:	f001 ff03 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4b12:	6803      	ldr	r3, [r0, #0]
   d4b14:	691b      	ldr	r3, [r3, #16]
   d4b16:	4798      	blx	r3
   d4b18:	2800      	cmp	r0, #0
   d4b1a:	dd21      	ble.n	d4b60 <_Z7setCPINv+0x78>
  {
    reply = Serial1.readStringUntil('\n');
   d4b1c:	f001 fefc 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4b20:	220a      	movs	r2, #10
   d4b22:	4601      	mov	r1, r0
   d4b24:	a808      	add	r0, sp, #32
   d4b26:	f002 fbf7 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4b2a:	a908      	add	r1, sp, #32
   d4b2c:	a804      	add	r0, sp, #16
   d4b2e:	f002 fd3c 	bl	d75aa <_ZN6StringaSEOS_>
   d4b32:	a808      	add	r0, sp, #32
   d4b34:	f002 fcc2 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d4b38:	4b2c      	ldr	r3, [pc, #176]	; (d4bec <_Z7setCPINv+0x104>)
   d4b3a:	781b      	ldrb	r3, [r3, #0]
   d4b3c:	b12b      	cbz	r3, d4b4a <_Z7setCPINv+0x62>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4b3e:	f001 ff7b 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4b42:	9a04      	ldr	r2, [sp, #16]
   d4b44:	492a      	ldr	r1, [pc, #168]	; (d4bf0 <_Z7setCPINv+0x108>)
   d4b46:	f7ff fc27 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish)
   d4b4a:	4b2a      	ldr	r3, [pc, #168]	; (d4bf4 <_Z7setCPINv+0x10c>)
   d4b4c:	781b      	ldrb	r3, [r3, #0]
   d4b4e:	b13b      	cbz	r3, d4b60 <_Z7setCPINv+0x78>
    {
      Particle.publish("setCPIN", reply);
   d4b50:	a808      	add	r0, sp, #32
   d4b52:	9a04      	ldr	r2, [sp, #16]
   d4b54:	4928      	ldr	r1, [pc, #160]	; (d4bf8 <_Z7setCPINv+0x110>)
   d4b56:	f7ff fabb 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4b5a:	a809      	add	r0, sp, #36	; 0x24
   d4b5c:	f7ff fc06 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4b60:	4b26      	ldr	r3, [pc, #152]	; (d4bfc <_Z7setCPINv+0x114>)
   d4b62:	781b      	ldrb	r3, [r3, #0]
   d4b64:	2b00      	cmp	r3, #0
   d4b66:	d032      	beq.n	d4bce <_Z7setCPINv+0xe6>
  {
    Serial1.printf("AT+CPIN?\r\n");
   d4b68:	f001 fed6 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4b6c:	4924      	ldr	r1, [pc, #144]	; (d4c00 <_Z7setCPINv+0x118>)
   d4b6e:	f7ff fcf3 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4b72:	20c8      	movs	r0, #200	; 0xc8
   d4b74:	f002 fba2 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4b78:	f001 fece 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4b7c:	6803      	ldr	r3, [r0, #0]
   d4b7e:	691b      	ldr	r3, [r3, #16]
   d4b80:	4798      	blx	r3
   d4b82:	2800      	cmp	r0, #0
   d4b84:	dd23      	ble.n	d4bce <_Z7setCPINv+0xe6>
    {
      Serial.printf("Awaiting Reply\n");
   d4b86:	f001 ff57 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4b8a:	491e      	ldr	r1, [pc, #120]	; (d4c04 <_Z7setCPINv+0x11c>)
   d4b8c:	f7ff fce4 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4b90:	f001 fec2 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4b94:	220a      	movs	r2, #10
   d4b96:	4601      	mov	r1, r0
   d4b98:	a808      	add	r0, sp, #32
   d4b9a:	f002 fbbd 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4b9e:	a908      	add	r1, sp, #32
   d4ba0:	a804      	add	r0, sp, #16
   d4ba2:	f002 fd02 	bl	d75aa <_ZN6StringaSEOS_>
   d4ba6:	a808      	add	r0, sp, #32
   d4ba8:	f002 fc88 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply CPIN: %s\n", reply.c_str());
   d4bac:	f001 ff44 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4bb0:	9a04      	ldr	r2, [sp, #16]
   d4bb2:	4915      	ldr	r1, [pc, #84]	; (d4c08 <_Z7setCPINv+0x120>)
   d4bb4:	f7ff fbf0 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d4bb8:	4b0e      	ldr	r3, [pc, #56]	; (d4bf4 <_Z7setCPINv+0x10c>)
   d4bba:	781b      	ldrb	r3, [r3, #0]
   d4bbc:	b13b      	cbz	r3, d4bce <_Z7setCPINv+0xe6>
      {
        Particle.publish("AT+CPIN?", reply);
   d4bbe:	a808      	add	r0, sp, #32
   d4bc0:	9a04      	ldr	r2, [sp, #16]
   d4bc2:	4912      	ldr	r1, [pc, #72]	; (d4c0c <_Z7setCPINv+0x124>)
   d4bc4:	f7ff fa84 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4bc8:	a809      	add	r0, sp, #36	; 0x24
   d4bca:	f7ff fbcf 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

void setCPIN() // 9
{              //  set password
  String CPIN = "BA4104032968BA1114299079021594AA";
  String reply;
   d4bce:	a804      	add	r0, sp, #16
   d4bd0:	f002 fc74 	bl	d74bc <_ZN6StringD1Ev>
  }
}

void setCPIN() // 9
{              //  set password
  String CPIN = "BA4104032968BA1114299079021594AA";
   d4bd4:	4668      	mov	r0, sp
   d4bd6:	f002 fc71 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("AT+CPIN?", reply);
      }
    }
  }
}
   d4bda:	b00d      	add	sp, #52	; 0x34
   d4bdc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4be0:	000d8f4c 	.word	0x000d8f4c
   d4be4:	000d8f07 	.word	0x000d8f07
   d4be8:	000d8f6d 	.word	0x000d8f6d
   d4bec:	2003d644 	.word	0x2003d644
   d4bf0:	000d8cd9 	.word	0x000d8cd9
   d4bf4:	2003d650 	.word	0x2003d650
   d4bf8:	000d8f7a 	.word	0x000d8f7a
   d4bfc:	2003d680 	.word	0x2003d680
   d4c00:	000d8f82 	.word	0x000d8f82
   d4c04:	000d8e6f 	.word	0x000d8e6f
   d4c08:	000d8f8d 	.word	0x000d8f8d
   d4c0c:	000d8f9d 	.word	0x000d8f9d

000d4c10 <_ZN5Print6printfIIiEEEjPKcDpT_>:
   d4c10:	4613      	mov	r3, r2
   d4c12:	460a      	mov	r2, r1
   d4c14:	2100      	movs	r1, #0
   d4c16:	f002 bbfa 	b.w	d740e <_ZN5Print11printf_implEbPKcz>
	...

000d4c1c <_Z6setIPRi>:
    }
  }
}

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
   d4c1c:	b510      	push	{r4, lr}
   d4c1e:	b088      	sub	sp, #32
  String reply;
   d4c20:	4939      	ldr	r1, [pc, #228]	; (d4d08 <_Z6setIPRi+0xec>)
    }
  }
}

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
   d4c22:	4604      	mov	r4, r0
  String reply;
   d4c24:	4668      	mov	r0, sp
   d4c26:	f002 fc90 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+IPR=%i\r\n", _baudRate);
   d4c2a:	f001 fe75 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4c2e:	4622      	mov	r2, r4
   d4c30:	4936      	ldr	r1, [pc, #216]	; (d4d0c <_Z6setIPRi+0xf0>)
   d4c32:	f7ff ffed 	bl	d4c10 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4c36:	20c8      	movs	r0, #200	; 0xc8
   d4c38:	f002 fb40 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d4c3c:	f001 fe6c 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4c40:	6803      	ldr	r3, [r0, #0]
   d4c42:	691b      	ldr	r3, [r3, #16]
   d4c44:	4798      	blx	r3
   d4c46:	2800      	cmp	r0, #0
   d4c48:	dd21      	ble.n	d4c8e <_Z6setIPRi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4c4a:	f001 fe65 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4c4e:	220a      	movs	r2, #10
   d4c50:	4601      	mov	r1, r0
   d4c52:	a804      	add	r0, sp, #16
   d4c54:	f002 fb60 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4c58:	a904      	add	r1, sp, #16
   d4c5a:	4668      	mov	r0, sp
   d4c5c:	f002 fca5 	bl	d75aa <_ZN6StringaSEOS_>
   d4c60:	a804      	add	r0, sp, #16
   d4c62:	f002 fc2b 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d4c66:	4b2a      	ldr	r3, [pc, #168]	; (d4d10 <_Z6setIPRi+0xf4>)
   d4c68:	781b      	ldrb	r3, [r3, #0]
   d4c6a:	b12b      	cbz	r3, d4c78 <_Z6setIPRi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   d4c6c:	f001 fee4 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4c70:	9a00      	ldr	r2, [sp, #0]
   d4c72:	4928      	ldr	r1, [pc, #160]	; (d4d14 <_Z6setIPRi+0xf8>)
   d4c74:	f7ff fb90 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish)
   d4c78:	4b27      	ldr	r3, [pc, #156]	; (d4d18 <_Z6setIPRi+0xfc>)
   d4c7a:	781b      	ldrb	r3, [r3, #0]
   d4c7c:	b13b      	cbz	r3, d4c8e <_Z6setIPRi+0x72>
    {
      Particle.publish("setIPR", reply);
   d4c7e:	a804      	add	r0, sp, #16
   d4c80:	9a00      	ldr	r2, [sp, #0]
   d4c82:	4926      	ldr	r1, [pc, #152]	; (d4d1c <_Z6setIPRi+0x100>)
   d4c84:	f7ff fa24 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4c88:	a805      	add	r0, sp, #20
   d4c8a:	f7ff fb6f 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4c8e:	4b24      	ldr	r3, [pc, #144]	; (d4d20 <_Z6setIPRi+0x104>)
   d4c90:	781b      	ldrb	r3, [r3, #0]
   d4c92:	2b00      	cmp	r3, #0
   d4c94:	d032      	beq.n	d4cfc <_Z6setIPRi+0xe0>
  {
    Serial1.printf("AT+IPR?\r\n"); // correct
   d4c96:	f001 fe3f 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4c9a:	4922      	ldr	r1, [pc, #136]	; (d4d24 <_Z6setIPRi+0x108>)
   d4c9c:	f7ff fc5c 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4ca0:	20c8      	movs	r0, #200	; 0xc8
   d4ca2:	f002 fb0b 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4ca6:	f001 fe37 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4caa:	6803      	ldr	r3, [r0, #0]
   d4cac:	691b      	ldr	r3, [r3, #16]
   d4cae:	4798      	blx	r3
   d4cb0:	2800      	cmp	r0, #0
   d4cb2:	dd23      	ble.n	d4cfc <_Z6setIPRi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4cb4:	f001 fec0 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4cb8:	491b      	ldr	r1, [pc, #108]	; (d4d28 <_Z6setIPRi+0x10c>)
   d4cba:	f7ff fc4d 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4cbe:	f001 fe2b 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4cc2:	220a      	movs	r2, #10
   d4cc4:	4601      	mov	r1, r0
   d4cc6:	a804      	add	r0, sp, #16
   d4cc8:	f002 fb26 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4ccc:	a904      	add	r1, sp, #16
   d4cce:	4668      	mov	r0, sp
   d4cd0:	f002 fc6b 	bl	d75aa <_ZN6StringaSEOS_>
   d4cd4:	a804      	add	r0, sp, #16
   d4cd6:	f002 fbf1 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+IPR?: %s\n", reply.c_str());
   d4cda:	f001 fead 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4cde:	9a00      	ldr	r2, [sp, #0]
   d4ce0:	4912      	ldr	r1, [pc, #72]	; (d4d2c <_Z6setIPRi+0x110>)
   d4ce2:	f7ff fb59 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d4ce6:	4b0c      	ldr	r3, [pc, #48]	; (d4d18 <_Z6setIPRi+0xfc>)
   d4ce8:	781b      	ldrb	r3, [r3, #0]
   d4cea:	b13b      	cbz	r3, d4cfc <_Z6setIPRi+0xe0>
      {
        Particle.publish("AT+IPR?", reply);
   d4cec:	a804      	add	r0, sp, #16
   d4cee:	9a00      	ldr	r2, [sp, #0]
   d4cf0:	490f      	ldr	r1, [pc, #60]	; (d4d30 <_Z6setIPRi+0x114>)
   d4cf2:	f7ff f9ed 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4cf6:	a805      	add	r0, sp, #20
   d4cf8:	f7ff fb38 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
  String reply;
   d4cfc:	4668      	mov	r0, sp
   d4cfe:	f002 fbdd 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("AT+IPR?", reply);
      }
    }
  }
}
   d4d02:	b008      	add	sp, #32
   d4d04:	bd10      	pop	{r4, pc}
   d4d06:	bf00      	nop
   d4d08:	000d8f07 	.word	0x000d8f07
   d4d0c:	000d904e 	.word	0x000d904e
   d4d10:	2003d644 	.word	0x2003d644
   d4d14:	000d8cd9 	.word	0x000d8cd9
   d4d18:	2003d650 	.word	0x2003d650
   d4d1c:	000d905a 	.word	0x000d905a
   d4d20:	2003d680 	.word	0x2003d680
   d4d24:	000d9061 	.word	0x000d9061
   d4d28:	000d8e6f 	.word	0x000d8e6f
   d4d2c:	000d906b 	.word	0x000d906b
   d4d30:	000d907e 	.word	0x000d907e

000d4d34 <_Z10setAddressi>:
    }
  }
}

void setAddress(int address) // 7
{                            //  Set set module address
   d4d34:	b510      	push	{r4, lr}
   d4d36:	b088      	sub	sp, #32
  String reply;
   d4d38:	4939      	ldr	r1, [pc, #228]	; (d4e20 <_Z10setAddressi+0xec>)
    }
  }
}

void setAddress(int address) // 7
{                            //  Set set module address
   d4d3a:	4604      	mov	r4, r0
  String reply;
   d4d3c:	4668      	mov	r0, sp
   d4d3e:	f002 fc04 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+ADDRESS=%i\r\n", address);
   d4d42:	f001 fde9 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4d46:	4622      	mov	r2, r4
   d4d48:	4936      	ldr	r1, [pc, #216]	; (d4e24 <_Z10setAddressi+0xf0>)
   d4d4a:	f7ff ff61 	bl	d4c10 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4d4e:	20c8      	movs	r0, #200	; 0xc8
   d4d50:	f002 fab4 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d4d54:	f001 fde0 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4d58:	6803      	ldr	r3, [r0, #0]
   d4d5a:	691b      	ldr	r3, [r3, #16]
   d4d5c:	4798      	blx	r3
   d4d5e:	2800      	cmp	r0, #0
   d4d60:	dd21      	ble.n	d4da6 <_Z10setAddressi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4d62:	f001 fdd9 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4d66:	220a      	movs	r2, #10
   d4d68:	4601      	mov	r1, r0
   d4d6a:	a804      	add	r0, sp, #16
   d4d6c:	f002 fad4 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4d70:	a904      	add	r1, sp, #16
   d4d72:	4668      	mov	r0, sp
   d4d74:	f002 fc19 	bl	d75aa <_ZN6StringaSEOS_>
   d4d78:	a804      	add	r0, sp, #16
   d4d7a:	f002 fb9f 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d4d7e:	4b2a      	ldr	r3, [pc, #168]	; (d4e28 <_Z10setAddressi+0xf4>)
   d4d80:	781b      	ldrb	r3, [r3, #0]
   d4d82:	b12b      	cbz	r3, d4d90 <_Z10setAddressi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4d84:	f001 fe58 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4d88:	9a00      	ldr	r2, [sp, #0]
   d4d8a:	4928      	ldr	r1, [pc, #160]	; (d4e2c <_Z10setAddressi+0xf8>)
   d4d8c:	f7ff fb04 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish)
   d4d90:	4b27      	ldr	r3, [pc, #156]	; (d4e30 <_Z10setAddressi+0xfc>)
   d4d92:	781b      	ldrb	r3, [r3, #0]
   d4d94:	b13b      	cbz	r3, d4da6 <_Z10setAddressi+0x72>
    {
      Particle.publish("setAddress", reply);
   d4d96:	a804      	add	r0, sp, #16
   d4d98:	9a00      	ldr	r2, [sp, #0]
   d4d9a:	4926      	ldr	r1, [pc, #152]	; (d4e34 <_Z10setAddressi+0x100>)
   d4d9c:	f7ff f998 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4da0:	a805      	add	r0, sp, #20
   d4da2:	f7ff fae3 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4da6:	4b24      	ldr	r3, [pc, #144]	; (d4e38 <_Z10setAddressi+0x104>)
   d4da8:	781b      	ldrb	r3, [r3, #0]
   d4daa:	2b00      	cmp	r3, #0
   d4dac:	d032      	beq.n	d4e14 <_Z10setAddressi+0xe0>
  {
    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   d4dae:	f001 fdb3 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4db2:	4922      	ldr	r1, [pc, #136]	; (d4e3c <_Z10setAddressi+0x108>)
   d4db4:	f7ff fbd0 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4db8:	20c8      	movs	r0, #200	; 0xc8
   d4dba:	f002 fa7f 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4dbe:	f001 fdab 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4dc2:	6803      	ldr	r3, [r0, #0]
   d4dc4:	691b      	ldr	r3, [r3, #16]
   d4dc6:	4798      	blx	r3
   d4dc8:	2800      	cmp	r0, #0
   d4dca:	dd23      	ble.n	d4e14 <_Z10setAddressi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4dcc:	f001 fe34 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4dd0:	491b      	ldr	r1, [pc, #108]	; (d4e40 <_Z10setAddressi+0x10c>)
   d4dd2:	f7ff fbc1 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4dd6:	f001 fd9f 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4dda:	220a      	movs	r2, #10
   d4ddc:	4601      	mov	r1, r0
   d4dde:	a804      	add	r0, sp, #16
   d4de0:	f002 fa9a 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4de4:	a904      	add	r1, sp, #16
   d4de6:	4668      	mov	r0, sp
   d4de8:	f002 fbdf 	bl	d75aa <_ZN6StringaSEOS_>
   d4dec:	a804      	add	r0, sp, #16
   d4dee:	f002 fb65 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply get address: %s\n", reply.c_str());
   d4df2:	f001 fe21 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4df6:	9a00      	ldr	r2, [sp, #0]
   d4df8:	4912      	ldr	r1, [pc, #72]	; (d4e44 <_Z10setAddressi+0x110>)
   d4dfa:	f7ff facd 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d4dfe:	4b0c      	ldr	r3, [pc, #48]	; (d4e30 <_Z10setAddressi+0xfc>)
   d4e00:	781b      	ldrb	r3, [r3, #0]
   d4e02:	b13b      	cbz	r3, d4e14 <_Z10setAddressi+0xe0>
      {
        Particle.publish("AT+ADDRESS?", reply);
   d4e04:	a804      	add	r0, sp, #16
   d4e06:	9a00      	ldr	r2, [sp, #0]
   d4e08:	490f      	ldr	r1, [pc, #60]	; (d4e48 <_Z10setAddressi+0x114>)
   d4e0a:	f7ff f961 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4e0e:	a805      	add	r0, sp, #20
   d4e10:	f7ff faac 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setAddress(int address) // 7
{                            //  Set set module address
  String reply;
   d4e14:	4668      	mov	r0, sp
   d4e16:	f002 fb51 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("AT+ADDRESS?", reply);
      }
    }
  }
}
   d4e1a:	b008      	add	sp, #32
   d4e1c:	bd10      	pop	{r4, pc}
   d4e1e:	bf00      	nop
   d4e20:	000d8f07 	.word	0x000d8f07
   d4e24:	000d9086 	.word	0x000d9086
   d4e28:	2003d644 	.word	0x2003d644
   d4e2c:	000d8cd9 	.word	0x000d8cd9
   d4e30:	2003d650 	.word	0x2003d650
   d4e34:	000d9096 	.word	0x000d9096
   d4e38:	2003d680 	.word	0x2003d680
   d4e3c:	000d90a1 	.word	0x000d90a1
   d4e40:	000d8e6f 	.word	0x000d8e6f
   d4e44:	000d90af 	.word	0x000d90af
   d4e48:	000d90c6 	.word	0x000d90c6

000d4e4c <_Z12setNetworkIDi>:

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
   d4e4c:	b510      	push	{r4, lr}
   d4e4e:	b088      	sub	sp, #32
  String reply;
   d4e50:	4939      	ldr	r1, [pc, #228]	; (d4f38 <_Z12setNetworkIDi+0xec>)
    }
  }
}

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
   d4e52:	4604      	mov	r4, r0
  String reply;
   d4e54:	4668      	mov	r0, sp
   d4e56:	f002 fb78 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+NETWORKID=%i\r\n", networkID);
   d4e5a:	f001 fd5d 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4e5e:	4622      	mov	r2, r4
   d4e60:	4936      	ldr	r1, [pc, #216]	; (d4f3c <_Z12setNetworkIDi+0xf0>)
   d4e62:	f7ff fed5 	bl	d4c10 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4e66:	20c8      	movs	r0, #200	; 0xc8
   d4e68:	f002 fa28 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d4e6c:	f001 fd54 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4e70:	6803      	ldr	r3, [r0, #0]
   d4e72:	691b      	ldr	r3, [r3, #16]
   d4e74:	4798      	blx	r3
   d4e76:	2800      	cmp	r0, #0
   d4e78:	dd21      	ble.n	d4ebe <_Z12setNetworkIDi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4e7a:	f001 fd4d 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4e7e:	220a      	movs	r2, #10
   d4e80:	4601      	mov	r1, r0
   d4e82:	a804      	add	r0, sp, #16
   d4e84:	f002 fa48 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4e88:	a904      	add	r1, sp, #16
   d4e8a:	4668      	mov	r0, sp
   d4e8c:	f002 fb8d 	bl	d75aa <_ZN6StringaSEOS_>
   d4e90:	a804      	add	r0, sp, #16
   d4e92:	f002 fb13 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d4e96:	4b2a      	ldr	r3, [pc, #168]	; (d4f40 <_Z12setNetworkIDi+0xf4>)
   d4e98:	781b      	ldrb	r3, [r3, #0]
   d4e9a:	b12b      	cbz	r3, d4ea8 <_Z12setNetworkIDi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   d4e9c:	f001 fdcc 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4ea0:	9a00      	ldr	r2, [sp, #0]
   d4ea2:	4928      	ldr	r1, [pc, #160]	; (d4f44 <_Z12setNetworkIDi+0xf8>)
   d4ea4:	f7ff fa78 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish)
   d4ea8:	4b27      	ldr	r3, [pc, #156]	; (d4f48 <_Z12setNetworkIDi+0xfc>)
   d4eaa:	781b      	ldrb	r3, [r3, #0]
   d4eac:	b13b      	cbz	r3, d4ebe <_Z12setNetworkIDi+0x72>
    {
      Particle.publish("setAddress", reply);
   d4eae:	a804      	add	r0, sp, #16
   d4eb0:	9a00      	ldr	r2, [sp, #0]
   d4eb2:	4926      	ldr	r1, [pc, #152]	; (d4f4c <_Z12setNetworkIDi+0x100>)
   d4eb4:	f7ff f90c 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4eb8:	a805      	add	r0, sp, #20
   d4eba:	f7ff fa57 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4ebe:	4b24      	ldr	r3, [pc, #144]	; (d4f50 <_Z12setNetworkIDi+0x104>)
   d4ec0:	781b      	ldrb	r3, [r3, #0]
   d4ec2:	2b00      	cmp	r3, #0
   d4ec4:	d032      	beq.n	d4f2c <_Z12setNetworkIDi+0xe0>
  {
    Serial1.printf("AT+NETWORKID?\r\n");
   d4ec6:	f001 fd27 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4eca:	4922      	ldr	r1, [pc, #136]	; (d4f54 <_Z12setNetworkIDi+0x108>)
   d4ecc:	f7ff fb44 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4ed0:	20c8      	movs	r0, #200	; 0xc8
   d4ed2:	f002 f9f3 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4ed6:	f001 fd1f 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4eda:	6803      	ldr	r3, [r0, #0]
   d4edc:	691b      	ldr	r3, [r3, #16]
   d4ede:	4798      	blx	r3
   d4ee0:	2800      	cmp	r0, #0
   d4ee2:	dd23      	ble.n	d4f2c <_Z12setNetworkIDi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4ee4:	f001 fda8 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4ee8:	491b      	ldr	r1, [pc, #108]	; (d4f58 <_Z12setNetworkIDi+0x10c>)
   d4eea:	f7ff fb35 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4eee:	f001 fd13 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4ef2:	220a      	movs	r2, #10
   d4ef4:	4601      	mov	r1, r0
   d4ef6:	a804      	add	r0, sp, #16
   d4ef8:	f002 fa0e 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4efc:	a904      	add	r1, sp, #16
   d4efe:	4668      	mov	r0, sp
   d4f00:	f002 fb53 	bl	d75aa <_ZN6StringaSEOS_>
   d4f04:	a804      	add	r0, sp, #16
   d4f06:	f002 fad9 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+NETWORKID? %s\n", reply.c_str());
   d4f0a:	f001 fd95 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4f0e:	9a00      	ldr	r2, [sp, #0]
   d4f10:	4912      	ldr	r1, [pc, #72]	; (d4f5c <_Z12setNetworkIDi+0x110>)
   d4f12:	f7ff fa41 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d4f16:	4b0c      	ldr	r3, [pc, #48]	; (d4f48 <_Z12setNetworkIDi+0xfc>)
   d4f18:	781b      	ldrb	r3, [r3, #0]
   d4f1a:	b13b      	cbz	r3, d4f2c <_Z12setNetworkIDi+0xe0>
      {
        Particle.publish("AT+NETWORKID?", reply);
   d4f1c:	a804      	add	r0, sp, #16
   d4f1e:	9a00      	ldr	r2, [sp, #0]
   d4f20:	490f      	ldr	r1, [pc, #60]	; (d4f60 <_Z12setNetworkIDi+0x114>)
   d4f22:	f7ff f8d5 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4f26:	a805      	add	r0, sp, #20
   d4f28:	f7ff fa20 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
  String reply;
   d4f2c:	4668      	mov	r0, sp
   d4f2e:	f002 fac5 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("AT+NETWORKID?", reply);
      }
    }
  }
}
   d4f32:	b008      	add	sp, #32
   d4f34:	bd10      	pop	{r4, pc}
   d4f36:	bf00      	nop
   d4f38:	000d8f07 	.word	0x000d8f07
   d4f3c:	000d90d2 	.word	0x000d90d2
   d4f40:	2003d644 	.word	0x2003d644
   d4f44:	000d8cd9 	.word	0x000d8cd9
   d4f48:	2003d650 	.word	0x2003d650
   d4f4c:	000d9096 	.word	0x000d9096
   d4f50:	2003d680 	.word	0x2003d680
   d4f54:	000d90e4 	.word	0x000d90e4
   d4f58:	000d8e6f 	.word	0x000d8e6f
   d4f5c:	000d90f4 	.word	0x000d90f4
   d4f60:	000d910c 	.word	0x000d910c

000d4f64 <_Z8setCRFOPi>:
    }
  }
}

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
   d4f64:	b510      	push	{r4, lr}
   d4f66:	b088      	sub	sp, #32
  String reply;
   d4f68:	4939      	ldr	r1, [pc, #228]	; (d5050 <_Z8setCRFOPi+0xec>)
    }
  }
}

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
   d4f6a:	4604      	mov	r4, r0
  String reply;
   d4f6c:	4668      	mov	r0, sp
   d4f6e:	f002 faec 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+CRFOP=%i\r\n", outputPower);
   d4f72:	f001 fcd1 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4f76:	4622      	mov	r2, r4
   d4f78:	4936      	ldr	r1, [pc, #216]	; (d5054 <_Z8setCRFOPi+0xf0>)
   d4f7a:	f7ff fe49 	bl	d4c10 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4f7e:	20c8      	movs	r0, #200	; 0xc8
   d4f80:	f002 f99c 	bl	d72bc <delay>
  if (Serial1.available() > 0)
   d4f84:	f001 fcc8 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4f88:	6803      	ldr	r3, [r0, #0]
   d4f8a:	691b      	ldr	r3, [r3, #16]
   d4f8c:	4798      	blx	r3
   d4f8e:	2800      	cmp	r0, #0
   d4f90:	dd21      	ble.n	d4fd6 <_Z8setCRFOPi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4f92:	f001 fcc1 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4f96:	220a      	movs	r2, #10
   d4f98:	4601      	mov	r1, r0
   d4f9a:	a804      	add	r0, sp, #16
   d4f9c:	f002 f9bc 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d4fa0:	a904      	add	r1, sp, #16
   d4fa2:	4668      	mov	r0, sp
   d4fa4:	f002 fb01 	bl	d75aa <_ZN6StringaSEOS_>
   d4fa8:	a804      	add	r0, sp, #16
   d4faa:	f002 fa87 	bl	d74bc <_ZN6StringD1Ev>

    if (serialPrint)
   d4fae:	4b2a      	ldr	r3, [pc, #168]	; (d5058 <_Z8setCRFOPi+0xf4>)
   d4fb0:	781b      	ldrb	r3, [r3, #0]
   d4fb2:	b12b      	cbz	r3, d4fc0 <_Z8setCRFOPi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4fb4:	f001 fd40 	bl	d6a38 <_Z16_fetch_usbserialv>
   d4fb8:	9a00      	ldr	r2, [sp, #0]
   d4fba:	4928      	ldr	r1, [pc, #160]	; (d505c <_Z8setCRFOPi+0xf8>)
   d4fbc:	f7ff f9ec 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
    }
    if (particlePublish)
   d4fc0:	4b27      	ldr	r3, [pc, #156]	; (d5060 <_Z8setCRFOPi+0xfc>)
   d4fc2:	781b      	ldrb	r3, [r3, #0]
   d4fc4:	b13b      	cbz	r3, d4fd6 <_Z8setCRFOPi+0x72>
    {
      Particle.publish("AT+CRFOP", reply);
   d4fc6:	a804      	add	r0, sp, #16
   d4fc8:	9a00      	ldr	r2, [sp, #0]
   d4fca:	4926      	ldr	r1, [pc, #152]	; (d5064 <_Z8setCRFOPi+0x100>)
   d4fcc:	f7ff f880 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4fd0:	a805      	add	r0, sp, #20
   d4fd2:	f7ff f9cb 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4fd6:	4b24      	ldr	r3, [pc, #144]	; (d5068 <_Z8setCRFOPi+0x104>)
   d4fd8:	781b      	ldrb	r3, [r3, #0]
   d4fda:	2b00      	cmp	r3, #0
   d4fdc:	d032      	beq.n	d5044 <_Z8setCRFOPi+0xe0>
  {
    Serial1.printf("AT+CRFOP?\r\n");
   d4fde:	f001 fc9b 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4fe2:	4922      	ldr	r1, [pc, #136]	; (d506c <_Z8setCRFOPi+0x108>)
   d4fe4:	f7ff fab8 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4fe8:	20c8      	movs	r0, #200	; 0xc8
   d4fea:	f002 f967 	bl	d72bc <delay>
    if (Serial1.available() > 0)
   d4fee:	f001 fc93 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d4ff2:	6803      	ldr	r3, [r0, #0]
   d4ff4:	691b      	ldr	r3, [r3, #16]
   d4ff6:	4798      	blx	r3
   d4ff8:	2800      	cmp	r0, #0
   d4ffa:	dd23      	ble.n	d5044 <_Z8setCRFOPi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4ffc:	f001 fd1c 	bl	d6a38 <_Z16_fetch_usbserialv>
   d5000:	491b      	ldr	r1, [pc, #108]	; (d5070 <_Z8setCRFOPi+0x10c>)
   d5002:	f7ff faa9 	bl	d4558 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d5006:	f001 fc87 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d500a:	220a      	movs	r2, #10
   d500c:	4601      	mov	r1, r0
   d500e:	a804      	add	r0, sp, #16
   d5010:	f002 f982 	bl	d7318 <_ZN6Stream15readStringUntilEc>
   d5014:	a904      	add	r1, sp, #16
   d5016:	4668      	mov	r0, sp
   d5018:	f002 fac7 	bl	d75aa <_ZN6StringaSEOS_>
   d501c:	a804      	add	r0, sp, #16
   d501e:	f002 fa4d 	bl	d74bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+CRFOP?: %s\n", reply.c_str());
   d5022:	f001 fd09 	bl	d6a38 <_Z16_fetch_usbserialv>
   d5026:	9a00      	ldr	r2, [sp, #0]
   d5028:	4912      	ldr	r1, [pc, #72]	; (d5074 <_Z8setCRFOPi+0x110>)
   d502a:	f7ff f9b5 	bl	d4398 <_ZN5Print6printfIIPKcEEEjS2_DpT_>
      if (particlePublish)
   d502e:	4b0c      	ldr	r3, [pc, #48]	; (d5060 <_Z8setCRFOPi+0xfc>)
   d5030:	781b      	ldrb	r3, [r3, #0]
   d5032:	b13b      	cbz	r3, d5044 <_Z8setCRFOPi+0xe0>
      {
        Particle.publish("AT+CRFOP?", reply);
   d5034:	a804      	add	r0, sp, #16
   d5036:	9a00      	ldr	r2, [sp, #0]
   d5038:	490f      	ldr	r1, [pc, #60]	; (d5078 <_Z8setCRFOPi+0x114>)
   d503a:	f7ff f849 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d503e:	a805      	add	r0, sp, #20
   d5040:	f7ff f994 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
  String reply;
   d5044:	4668      	mov	r0, sp
   d5046:	f002 fa39 	bl	d74bc <_ZN6StringD1Ev>
      {
        Particle.publish("AT+CRFOP?", reply);
      }
    }
  }
}
   d504a:	b008      	add	sp, #32
   d504c:	bd10      	pop	{r4, pc}
   d504e:	bf00      	nop
   d5050:	000d8f07 	.word	0x000d8f07
   d5054:	000d911a 	.word	0x000d911a
   d5058:	2003d644 	.word	0x2003d644
   d505c:	000d8cd9 	.word	0x000d8cd9
   d5060:	2003d650 	.word	0x2003d650
   d5064:	000d9128 	.word	0x000d9128
   d5068:	2003d680 	.word	0x2003d680
   d506c:	000d9131 	.word	0x000d9131
   d5070:	000d8e6f 	.word	0x000d8e6f
   d5074:	000d913d 	.word	0x000d913d
   d5078:	000d9152 	.word	0x000d9152

000d507c <_Z10radioSetupv>:
    }
  }
}

void radioSetup()
{
   d507c:	b508      	push	{r3, lr}
  setMode(0); // turn on transmit and receive mode
   d507e:	2000      	movs	r0, #0
   d5080:	f7ff fafc 	bl	d467c <_Z7setModei>
  atTest();
   d5084:	f7ff fab6 	bl	d45f4 <_Z6atTestv>
  setAddress(address); // between 0-65535
   d5088:	4b0d      	ldr	r3, [pc, #52]	; (d50c0 <_Z10radioSetupv+0x44>)
   d508a:	6818      	ldr	r0, [r3, #0]
   d508c:	f7ff fe52 	bl	d4d34 <_Z10setAddressi>
  setNetworkID(networkID);
   d5090:	4b0c      	ldr	r3, [pc, #48]	; (d50c4 <_Z10radioSetupv+0x48>)
   d5092:	6818      	ldr	r0, [r3, #0]
   d5094:	f7ff feda 	bl	d4e4c <_Z12setNetworkIDi>
  setBand(bandParameter);
   d5098:	4b0b      	ldr	r3, [pc, #44]	; (d50c8 <_Z10radioSetupv+0x4c>)
   d509a:	6818      	ldr	r0, [r3, #0]
   d509c:	f7ff fc92 	bl	d49c4 <_Z7setBandi>
  setParameter(radioParameter);
   d50a0:	4b0a      	ldr	r3, [pc, #40]	; (d50cc <_Z10radioSetupv+0x50>)
   d50a2:	6818      	ldr	r0, [r3, #0]
   d50a4:	f7ff fc04 	bl	d48b0 <_Z12setParameteri>
  setIPR(baudRate);
   d50a8:	4b09      	ldr	r3, [pc, #36]	; (d50d0 <_Z10radioSetupv+0x54>)
   d50aa:	6818      	ldr	r0, [r3, #0]
   d50ac:	f7ff fdb6 	bl	d4c1c <_Z6setIPRi>
  setCRFOP(outputPower);
   d50b0:	4b08      	ldr	r3, [pc, #32]	; (d50d4 <_Z10radioSetupv+0x58>)
   d50b2:	6818      	ldr	r0, [r3, #0]
   d50b4:	f7ff ff56 	bl	d4f64 <_Z8setCRFOPi>
  setCPIN();
}
   d50b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setNetworkID(networkID);
  setBand(bandParameter);
  setParameter(radioParameter);
  setIPR(baudRate);
  setCRFOP(outputPower);
  setCPIN();
   d50bc:	f7ff bd14 	b.w	d4ae8 <_Z7setCPINv>
   d50c0:	2003d3e0 	.word	0x2003d3e0
   d50c4:	2003d3f0 	.word	0x2003d3f0
   d50c8:	2003d65c 	.word	0x2003d65c
   d50cc:	2003d64c 	.word	0x2003d64c
   d50d0:	2003d3e4 	.word	0x2003d3e4
   d50d4:	2003d3ec 	.word	0x2003d3ec

000d50d8 <setup>:
int lowPowerTime = 30; // number of minutes

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   d50d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RGB.control(TRUE);
   d50dc:	2001      	movs	r0, #1
  RGB.brightness(10);
  switch (probeNumber)
   d50de:	4f52      	ldr	r7, [pc, #328]	; (d5228 <setup+0x150>)

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
  RGB.control(TRUE);
   d50e0:	f002 f8ac 	bl	d723c <_ZN8RGBClass7controlEb>
  RGB.brightness(10);
   d50e4:	2101      	movs	r1, #1
   d50e6:	200a      	movs	r0, #10
   d50e8:	f002 f8cb 	bl	d7282 <_ZN8RGBClass10brightnessEhb>
  switch (probeNumber)
   d50ec:	683b      	ldr	r3, [r7, #0]
   d50ee:	2b07      	cmp	r3, #7
   d50f0:	d825      	bhi.n	d513e <setup+0x66>
   d50f2:	e8df f003 	tbb	[pc, r3]
   d50f6:	0804      	.short	0x0804
   d50f8:	1915120e 	.word	0x1915120e
   d50fc:	211d      	.short	0x211d
  {
  case 0:
    RGB.color(255, 255, 255); // 
   d50fe:	22ff      	movs	r2, #255	; 0xff
   d5100:	4611      	mov	r1, r2
   d5102:	4610      	mov	r0, r2
   d5104:	e002      	b.n	d510c <setup+0x34>
    break;
  case 1:
    RGB.color(0, 0, 255); // blue!
   d5106:	22ff      	movs	r2, #255	; 0xff
   d5108:	2100      	movs	r1, #0
   d510a:	4608      	mov	r0, r1
   d510c:	f002 f8a6 	bl	d725c <_ZN8RGBClass5colorEiii>
    break;
   d5110:	e018      	b.n	d5144 <setup+0x6c>
  case 2:
    RGB.color(25, 255, 88); // green!
   d5112:	2258      	movs	r2, #88	; 0x58
   d5114:	21ff      	movs	r1, #255	; 0xff
   d5116:	2019      	movs	r0, #25
   d5118:	e7f8      	b.n	d510c <setup+0x34>
    break;
  case 3:
    RGB.color(255, 69, 0); // orange!
   d511a:	2200      	movs	r2, #0
   d511c:	2145      	movs	r1, #69	; 0x45
   d511e:	e005      	b.n	d512c <setup+0x54>
    break;
  case 4:
    RGB.color(160, 32, 240); // purple!
   d5120:	22f0      	movs	r2, #240	; 0xf0
   d5122:	2120      	movs	r1, #32
   d5124:	20a0      	movs	r0, #160	; 0xa0
   d5126:	e7f1      	b.n	d510c <setup+0x34>
    break;
  case 5:
    RGB.color(255, 0, 0); // red!
   d5128:	2200      	movs	r2, #0
   d512a:	4611      	mov	r1, r2
   d512c:	20ff      	movs	r0, #255	; 0xff
   d512e:	e7ed      	b.n	d510c <setup+0x34>
    break;
  case 6:
    RGB.color(115, 147, 179); // grey!
   d5130:	22b3      	movs	r2, #179	; 0xb3
   d5132:	2193      	movs	r1, #147	; 0x93
   d5134:	2073      	movs	r0, #115	; 0x73
   d5136:	e7e9      	b.n	d510c <setup+0x34>
    break;
  case 7:
    RGB.color(255, 255, 0); // yellow
   d5138:	2200      	movs	r2, #0
   d513a:	21ff      	movs	r1, #255	; 0xff
   d513c:	e7e5      	b.n	d510a <setup+0x32>
    break;
  default:
    RGB.control(FALSE);
   d513e:	2000      	movs	r0, #0
   d5140:	f002 f87c 	bl	d723c <_ZN8RGBClass7controlEb>
    break;
  }
  Serial.begin(9600);
   d5144:	f001 fc78 	bl	d6a38 <_Z16_fetch_usbserialv>
   d5148:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d514c:	f001 fc68 	bl	d6a20 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d5150:	f001 fbe2 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d5154:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d5158:	f001 fbd8 	bl	d690c <_ZN11USARTSerial5beginEm>
  delay(1000);
   d515c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5160:	f002 f8ac 	bl	d72bc <delay>
  pinMode(THERMISTORPIN, INPUT);
   d5164:	2100      	movs	r1, #0
   d5166:	2013      	movs	r0, #19
   d5168:	f002 fbbe 	bl	d78e8 <pinMode>

  serialPrint = true;      // serial print to screen
   d516c:	4b2f      	ldr	r3, [pc, #188]	; (d522c <setup+0x154>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d516e:	4c30      	ldr	r4, [pc, #192]	; (d5230 <setup+0x158>)
   d5170:	2201      	movs	r2, #1
   d5172:	701a      	strb	r2, [r3, #0]
  particlePublish = false; // publish to particle cloud
   d5174:	4a2f      	ldr	r2, [pc, #188]	; (d5234 <setup+0x15c>)
   d5176:	2300      	movs	r3, #0
   d5178:	7013      	strb	r3, [r2, #0]
  askSetting = false;      // ask lora setting values
   d517a:	4a2f      	ldr	r2, [pc, #188]	; (d5238 <setup+0x160>)
   d517c:	7013      	strb	r3, [r2, #0]
  // serialPrint = true;     // serial print to screen
  // particlePublish = false; // publish to particle cloud
  // askSetting = true;      // ask lora setting values

  // FACTORY(); // set lora module to factory defaults
  atTest();
   d517e:	f7ff fa39 	bl	d45f4 <_Z6atTestv>
  radioSetup(); // start lora module
   d5182:	f7ff ff7b 	bl	d507c <_Z10radioSetupv>
   d5186:	7d23      	ldrb	r3, [r4, #20]
   d5188:	b32b      	cbz	r3, d51d6 <setup+0xfe>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d518a:	2302      	movs	r3, #2
   d518c:	7223      	strb	r3, [r4, #8]

  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
      .duration(lowPowerTime * 60000); // minutes to milliseconds
   d518e:	4b2b      	ldr	r3, [pc, #172]	; (d523c <setup+0x164>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	f64e 2860 	movw	r8, #60000	; 0xea60
   d5196:	fb08 f803 	mul.w	r8, r8, r3
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d519a:	6823      	ldr	r3, [r4, #0]
   d519c:	68db      	ldr	r3, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d519e:	b123      	cbz	r3, d51aa <setup+0xd2>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d51a0:	889a      	ldrh	r2, [r3, #4]
   d51a2:	2a04      	cmp	r2, #4
   d51a4:	d039      	beq.n	d521a <setup+0x142>
                return start;
            }
            start = start->next;
   d51a6:	689b      	ldr	r3, [r3, #8]
   d51a8:	e7f9      	b.n	d519e <setup+0xc6>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d51aa:	4925      	ldr	r1, [pc, #148]	; (d5240 <setup+0x168>)
   d51ac:	2010      	movs	r0, #16
   d51ae:	f002 fbed 	bl	d798c <_ZnwjRKSt9nothrow_t>
   d51b2:	4605      	mov	r5, r0
   d51b4:	2800      	cmp	r0, #0
   d51b6:	d033      	beq.n	d5220 <setup+0x148>
   d51b8:	2610      	movs	r6, #16
   d51ba:	4632      	mov	r2, r6
   d51bc:	2100      	movs	r1, #0
   d51be:	f003 fca8 	bl	d8b12 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d51c2:	2302      	movs	r3, #2
   d51c4:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d51c6:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d51c8:	802e      	strh	r6, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d51ca:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d51cc:	6923      	ldr	r3, [r4, #16]
   d51ce:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d51d0:	f8c5 800c 	str.w	r8, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d51d4:	6125      	str	r5, [r4, #16]
  counter = 0;
   d51d6:	4b1b      	ldr	r3, [pc, #108]	; (d5244 <setup+0x16c>)

  i2cScan();

  Serial.printf("Gps status is %i\n", gpsOn);
   d51d8:	4d1b      	ldr	r5, [pc, #108]	; (d5248 <setup+0x170>)
  atTest();
  radioSetup(); // start lora module

  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
      .duration(lowPowerTime * 60000); // minutes to milliseconds
  counter = 0;
   d51da:	2400      	movs	r4, #0
   d51dc:	601c      	str	r4, [r3, #0]

  i2cScan();
   d51de:	f7ff f9bf 	bl	d4560 <_Z7i2cScanv>

  Serial.printf("Gps status is %i\n", gpsOn);
   d51e2:	f001 fc29 	bl	d6a38 <_Z16_fetch_usbserialv>
   d51e6:	782b      	ldrb	r3, [r5, #0]
   d51e8:	4a18      	ldr	r2, [pc, #96]	; (d524c <setup+0x174>)
   d51ea:	4621      	mov	r1, r4
   d51ec:	f002 f90f 	bl	d740e <_ZN5Print11printf_implEbPKcz>
  if (gpsOn)
   d51f0:	782b      	ldrb	r3, [r5, #0]
   d51f2:	b1bb      	cbz	r3, d5224 <setup+0x14c>
  {
    GPS.begin(0x10); // The I2C address to use is 0x10
   d51f4:	2110      	movs	r1, #16
   d51f6:	4816      	ldr	r0, [pc, #88]	; (d5250 <setup+0x178>)
   d51f8:	f000 f90d 	bl	d5416 <_ZN12Adafruit_GPS5beginEm>
    GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d51fc:	4915      	ldr	r1, [pc, #84]	; (d5254 <setup+0x17c>)
   d51fe:	4814      	ldr	r0, [pc, #80]	; (d5250 <setup+0x178>)
   d5200:	f000 fb48 	bl	d5894 <_ZN12Adafruit_GPS11sendCommandEPKc>
    GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
   d5204:	4914      	ldr	r1, [pc, #80]	; (d5258 <setup+0x180>)
   d5206:	4812      	ldr	r0, [pc, #72]	; (d5250 <setup+0x178>)
   d5208:	f000 fb44 	bl	d5894 <_ZN12Adafruit_GPS11sendCommandEPKc>
    GPS.sendCommand(PGCMD_ANTENNA);
   d520c:	4913      	ldr	r1, [pc, #76]	; (d525c <setup+0x184>)
   d520e:	4810      	ldr	r0, [pc, #64]	; (d5250 <setup+0x178>)
   d5210:	f000 fb40 	bl	d5894 <_ZN12Adafruit_GPS11sendCommandEPKc>
    probeNumber = 0;
   d5214:	603c      	str	r4, [r7, #0]
  }
}
   d5216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d521a:	f8c3 800c 	str.w	r8, [r3, #12]
   d521e:	e7da      	b.n	d51d6 <setup+0xfe>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d5220:	7520      	strb	r0, [r4, #20]
   d5222:	e7d8      	b.n	d51d6 <setup+0xfe>
   d5224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5228:	2003d3f4 	.word	0x2003d3f4
   d522c:	2003d644 	.word	0x2003d644
   d5230:	2003d664 	.word	0x2003d664
   d5234:	2003d650 	.word	0x2003d650
   d5238:	2003d680 	.word	0x2003d680
   d523c:	2003d3e8 	.word	0x2003d3e8
   d5240:	000d95c0 	.word	0x000d95c0
   d5244:	2003e39c 	.word	0x2003e39c
   d5248:	2003d645 	.word	0x2003d645
   d524c:	000d915c 	.word	0x000d915c
   d5250:	2003d814 	.word	0x2003d814
   d5254:	000d916e 	.word	0x000d916e
   d5258:	000d91a0 	.word	0x000d91a0
   d525c:	000d91b1 	.word	0x000d91b1

000d5260 <_GLOBAL__sub_I_GPS>:
  //   Serial.printf("Awaiting Reply from mode?\n");
  //   reply = Serial1.readStringUntil('\n');
  //   Serial.printf("Reply: %s\n", reply.c_str());
  //   delay(1000);
  // }
   d5260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5262:	4b1b      	ldr	r3, [pc, #108]	; (d52d0 <_GLOBAL__sub_I_GPS+0x70>)
 */

#include <math.h>

#include <Adafruit_GPS.h>
Adafruit_GPS GPS(&Wire);
   d5264:	4c1b      	ldr	r4, [pc, #108]	; (d52d4 <_GLOBAL__sub_I_GPS+0x74>)
   d5266:	4e1c      	ldr	r6, [pc, #112]	; (d52d8 <_GLOBAL__sub_I_GPS+0x78>)
   d5268:	2500      	movs	r5, #0
   d526a:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d526c:	f000 ff06 	bl	d607c <HAL_Pin_Map>
   d5270:	f002 fade 	bl	d7830 <_Z19__fetch_global_Wirev>
   d5274:	4601      	mov	r1, r0
   d5276:	4620      	mov	r0, r4
   d5278:	f000 f954 	bl	d5524 <_ZN12Adafruit_GPSC1EP7TwoWire>
   d527c:	4620      	mov	r0, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d527e:	4c17      	ldr	r4, [pc, #92]	; (d52dc <_GLOBAL__sub_I_GPS+0x7c>)
   d5280:	4917      	ldr	r1, [pc, #92]	; (d52e0 <_GLOBAL__sub_I_GPS+0x80>)
   d5282:	4632      	mov	r2, r6
   d5284:	f002 fb71 	bl	d796a <__aeabi_atexit>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5288:	2710      	movs	r7, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d528a:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d528c:	463a      	mov	r2, r7
   d528e:	4629      	mov	r1, r5
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5290:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5292:	f003 fc3e 	bl	d8b12 <memset>
   d5296:	2301      	movs	r3, #1
        config_.size = sizeof(hal_sleep_config_t);
   d5298:	80a7      	strh	r7, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
   d529a:	2702      	movs	r7, #2
int bandParameter = 0;  // 0 for 915 and 1 for 868
int radioParameter = 0; // 0 for within 3km 1 for over 3km
int baudRate = 115200;
int outputPower = 15; // 0-15

SystemSleepConfiguration config;
   d529c:	4632      	mov	r2, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d529e:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d52a0:	80e7      	strh	r7, [r4, #6]
   d52a2:	4910      	ldr	r1, [pc, #64]	; (d52e4 <_GLOBAL__sub_I_GPS+0x84>)
   d52a4:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d52a6:	4c10      	ldr	r4, [pc, #64]	; (d52e8 <_GLOBAL__sub_I_GPS+0x88>)
   d52a8:	f002 fb5f 	bl	d796a <__aeabi_atexit>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d52ac:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d52b0:	4638      	mov	r0, r7

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d52b2:	6025      	str	r5, [r4, #0]
   d52b4:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d52b6:	71a5      	strb	r5, [r4, #6]
   d52b8:	8125      	strh	r5, [r4, #8]
   d52ba:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d52bc:	f000 ffc6 	bl	d624c <set_system_mode>
int lowPowerTime = 30; // number of minutes

SYSTEM_MODE(SEMI_AUTOMATIC);
   d52c0:	4632      	mov	r2, r6
   d52c2:	4620      	mov	r0, r4
   d52c4:	4909      	ldr	r1, [pc, #36]	; (d52ec <_GLOBAL__sub_I_GPS+0x8c>)
  //   Serial.printf("Awaiting Reply from mode?\n");
  //   reply = Serial1.readStringUntil('\n');
  //   Serial.printf("Reply: %s\n", reply.c_str());
  //   delay(1000);
  // }
   d52c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int outputPower = 15; // 0-15

SystemSleepConfiguration config;
int lowPowerTime = 30; // number of minutes

SYSTEM_MODE(SEMI_AUTOMATIC);
   d52ca:	f002 bb4e 	b.w	d796a <__aeabi_atexit>
   d52ce:	bf00      	nop
   d52d0:	2003d630 	.word	0x2003d630
   d52d4:	2003d814 	.word	0x2003d814
   d52d8:	2003d628 	.word	0x2003d628
   d52dc:	2003d664 	.word	0x2003d664
   d52e0:	000d5349 	.word	0x000d5349
   d52e4:	000d40b7 	.word	0x000d40b7
   d52e8:	2003d638 	.word	0x2003d638
   d52ec:	000d40ed 	.word	0x000d40ed

000d52f0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d52f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d52f2:	4602      	mov	r2, r0
   d52f4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d52f6:	7913      	ldrb	r3, [r2, #4]
   d52f8:	6895      	ldr	r5, [r2, #8]
   d52fa:	b133      	cbz	r3, d530a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d52fc:	b93d      	cbnz	r5, d530e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d52fe:	490c      	ldr	r1, [pc, #48]	; (d5330 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d5300:	b004      	add	sp, #16
   d5302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d5306:	f002 b845 	b.w	d7394 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d530a:	4b0a      	ldr	r3, [pc, #40]	; (d5334 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d530c:	e000      	b.n	d5310 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d530e:	4b0a      	ldr	r3, [pc, #40]	; (d5338 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d5310:	7b16      	ldrb	r6, [r2, #12]
   d5312:	4c0a      	ldr	r4, [pc, #40]	; (d533c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d5314:	490a      	ldr	r1, [pc, #40]	; (d5340 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d5316:	7b52      	ldrb	r2, [r2, #13]
   d5318:	9202      	str	r2, [sp, #8]
   d531a:	2e01      	cmp	r6, #1
   d531c:	bf08      	it	eq
   d531e:	4621      	moveq	r1, r4
   d5320:	9101      	str	r1, [sp, #4]
   d5322:	9500      	str	r5, [sp, #0]
   d5324:	4a07      	ldr	r2, [pc, #28]	; (d5344 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d5326:	2100      	movs	r1, #0
   d5328:	f002 f871 	bl	d740e <_ZN5Print11printf_implEbPKcz>
  }
   d532c:	b004      	add	sp, #16
   d532e:	bd70      	pop	{r4, r5, r6, pc}
   d5330:	000d9211 	.word	0x000d9211
   d5334:	000d8f07 	.word	0x000d8f07
   d5338:	000d9200 	.word	0x000d9200
   d533c:	000d9209 	.word	0x000d9209
   d5340:	000d920d 	.word	0x000d920d
   d5344:	000d9227 	.word	0x000d9227

000d5348 <_ZN12Adafruit_GPSD1Ev>:
/*!
    @brief    Destroy the object.
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
   d5348:	b538      	push	{r3, r4, r5, lr}
   d534a:	4b06      	ldr	r3, [pc, #24]	; (d5364 <_ZN12Adafruit_GPSD1Ev+0x1c>)
   d534c:	6003      	str	r3, [r0, #0]
   d534e:	4605      	mov	r5, r0
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
   d5350:	2400      	movs	r4, #0
    removeHistory((nmea_index_t)i); // to free any history mallocs
   d5352:	b2e1      	uxtb	r1, r4
   d5354:	4628      	mov	r0, r5
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
   d5356:	3401      	adds	r4, #1
    removeHistory((nmea_index_t)i); // to free any history mallocs
   d5358:	f000 fd22 	bl	d5da0 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
   d535c:	2c40      	cmp	r4, #64	; 0x40
   d535e:	d1f8      	bne.n	d5352 <_ZN12Adafruit_GPSD1Ev+0xa>
    removeHistory((nmea_index_t)i); // to free any history mallocs
#endif
}
   d5360:	4628      	mov	r0, r5
   d5362:	bd38      	pop	{r3, r4, r5, pc}
   d5364:	000d91f0 	.word	0x000d91f0

000d5368 <_ZN12Adafruit_GPSD0Ev>:
/*!
    @brief    Destroy the object.
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
   d5368:	b510      	push	{r4, lr}
   d536a:	4604      	mov	r4, r0
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
    removeHistory((nmea_index_t)i); // to free any history mallocs
#endif
}
   d536c:	f7ff ffec 	bl	d5348 <_ZN12Adafruit_GPSD1Ev>
   d5370:	4620      	mov	r0, r4
   d5372:	f44f 6138 	mov.w	r1, #2944	; 0xb80
   d5376:	f002 fb05 	bl	d7984 <_ZdlPvj>
   d537a:	4620      	mov	r0, r4
   d537c:	bd10      	pop	{r4, pc}

000d537e <_ZN12Adafruit_GPS5writeEh>:
   functionality
    @param c A single byte to send
    @return Bytes written - 1 on success, 0 on failure
*/
/**************************************************************************/
size_t Adafruit_GPS::write(uint8_t c) {
   d537e:	b570      	push	{r4, r5, r6, lr}
   d5380:	4604      	mov	r4, r0
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    return gpsSwSerial->write(c);
  }
#endif
  if (gpsHwSerial) {
   d5382:	f8d0 09d4 	ldr.w	r0, [r0, #2516]	; 0x9d4
   functionality
    @param c A single byte to send
    @return Bytes written - 1 on success, 0 on failure
*/
/**************************************************************************/
size_t Adafruit_GPS::write(uint8_t c) {
   d5386:	460e      	mov	r6, r1
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    return gpsSwSerial->write(c);
  }
#endif
  if (gpsHwSerial) {
   d5388:	b910      	cbnz	r0, d5390 <_ZN12Adafruit_GPS5writeEh+0x12>
    return gpsHwSerial->write(c);
  }
  if (gpsStream) {
   d538a:	f8d4 09d8 	ldr.w	r0, [r4, #2520]	; 0x9d8
   d538e:	b120      	cbz	r0, d539a <_ZN12Adafruit_GPS5writeEh+0x1c>
    return gpsStream->write(c);
   d5390:	6803      	ldr	r3, [r0, #0]
    gpsSPI->endTransaction();
    return 1;
  }

  return 0;
}
   d5392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#endif
  if (gpsHwSerial) {
    return gpsHwSerial->write(c);
  }
  if (gpsStream) {
    return gpsStream->write(c);
   d5396:	689b      	ldr	r3, [r3, #8]
   d5398:	4718      	bx	r3
  }
  if (gpsI2C) {
   d539a:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d539e:	b918      	cbnz	r0, d53a8 <_ZN12Adafruit_GPS5writeEh+0x2a>
    }
    if (gpsI2C->endTransmission(true) == 0) {
      return 1;
    }
  }
  if (gpsSPI) {
   d53a0:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d53a4:	b9b8      	cbnz	r0, d53d6 <_ZN12Adafruit_GPS5writeEh+0x58>
   d53a6:	e00c      	b.n	d53c2 <_ZN12Adafruit_GPS5writeEh+0x44>
  }
  if (gpsStream) {
    return gpsStream->write(c);
  }
  if (gpsI2C) {
    gpsI2C->beginTransmission(_i2caddr);
   d53a8:	f894 1a5c 	ldrb.w	r1, [r4, #2652]	; 0xa5c
   d53ac:	f001 fa30 	bl	d6810 <_ZN7TwoWire17beginTransmissionEh>
    if (gpsI2C->write(c) != 1) {
   d53b0:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d53b4:	6803      	ldr	r3, [r0, #0]
   d53b6:	4631      	mov	r1, r6
   d53b8:	689b      	ldr	r3, [r3, #8]
   d53ba:	4798      	blx	r3
   d53bc:	2801      	cmp	r0, #1
   d53be:	4605      	mov	r5, r0
   d53c0:	d001      	beq.n	d53c6 <_ZN12Adafruit_GPS5writeEh+0x48>
      return 0;
   d53c2:	2500      	movs	r5, #0
   d53c4:	e025      	b.n	d5412 <_ZN12Adafruit_GPS5writeEh+0x94>
    }
    if (gpsI2C->endTransmission(true) == 0) {
   d53c6:	4601      	mov	r1, r0
   d53c8:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d53cc:	f001 fa24 	bl	d6818 <_ZN7TwoWire15endTransmissionEh>
   d53d0:	2800      	cmp	r0, #0
   d53d2:	d1e5      	bne.n	d53a0 <_ZN12Adafruit_GPS5writeEh+0x22>
   d53d4:	e01d      	b.n	d5412 <_ZN12Adafruit_GPS5writeEh+0x94>
      return 1;
    }
  }
  if (gpsSPI) {
    gpsSPI->beginTransaction(gpsSPI_settings);
   d53d6:	f604 11e8 	addw	r1, r4, #2536	; 0x9e8
   d53da:	f001 f95b 	bl	d6694 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
    if (gpsSPI_cs >= 0) {
   d53de:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
   d53e2:	2800      	cmp	r0, #0
   d53e4:	db03      	blt.n	d53ee <_ZN12Adafruit_GPS5writeEh+0x70>
      digitalWrite(gpsSPI_cs, LOW);
   d53e6:	2100      	movs	r1, #0
   d53e8:	b280      	uxth	r0, r0
   d53ea:	f002 fa8e 	bl	d790a <digitalWrite>
    }
    c = gpsSPI->transfer(c);
   d53ee:	4631      	mov	r1, r6
   d53f0:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d53f4:	f001 f9be 	bl	d6774 <_ZN8SPIClass8transferEh>
    if (gpsSPI_cs >= 0) {
   d53f8:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
   d53fc:	2800      	cmp	r0, #0
   d53fe:	db03      	blt.n	d5408 <_ZN12Adafruit_GPS5writeEh+0x8a>
      digitalWrite(gpsSPI_cs, HIGH);
   d5400:	2101      	movs	r1, #1
   d5402:	b280      	uxth	r0, r0
   d5404:	f002 fa81 	bl	d790a <digitalWrite>
    }
    gpsSPI->endTransaction();
   d5408:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d540c:	f001 f929 	bl	d6662 <_ZN8SPIClass14endTransactionEv>
    return 1;
   d5410:	2501      	movs	r5, #1
  }

  return 0;
}
   d5412:	4628      	mov	r0, r5
   d5414:	bd70      	pop	{r4, r5, r6, pc}

000d5416 <_ZN12Adafruit_GPS5beginEm>:
    @brief Start the HW or SW serial port
    @param baud_or_i2caddr Baud rate if using serial, I2C address if using I2C
    @returns True on successful hardware init, False on failure
*/
/**************************************************************************/
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
   d5416:	b570      	push	{r4, r5, r6, lr}
   d5418:	4604      	mov	r4, r0
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    gpsSwSerial->begin(baud_or_i2caddr);
  }
#endif
  if (gpsHwSerial) {
   d541a:	f8d0 09d4 	ldr.w	r0, [r0, #2516]	; 0x9d4
    @brief Start the HW or SW serial port
    @param baud_or_i2caddr Baud rate if using serial, I2C address if using I2C
    @returns True on successful hardware init, False on failure
*/
/**************************************************************************/
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
   d541e:	460e      	mov	r6, r1
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    gpsSwSerial->begin(baud_or_i2caddr);
  }
#endif
  if (gpsHwSerial) {
   d5420:	b108      	cbz	r0, d5426 <_ZN12Adafruit_GPS5beginEm+0x10>
    gpsHwSerial->begin(baud_or_i2caddr);
   d5422:	f001 fa73 	bl	d690c <_ZN11USARTSerial5beginEm>
  }
  if (gpsI2C) {
   d5426:	f8d4 59dc 	ldr.w	r5, [r4, #2524]	; 0x9dc
   d542a:	b1bd      	cbz	r5, d545c <_ZN12Adafruit_GPS5beginEm+0x46>
    gpsI2C->begin();
   d542c:	4628      	mov	r0, r5
   d542e:	f001 f9e9 	bl	d6804 <_ZN7TwoWire5beginEv>
    if (baud_or_i2caddr > 0x7F) {
   d5432:	2e7f      	cmp	r6, #127	; 0x7f
      _i2caddr = GPS_DEFAULT_I2C_ADDR;
   d5434:	bf86      	itte	hi
   d5436:	2310      	movhi	r3, #16
   d5438:	f884 3a5c 	strbhi.w	r3, [r4, #2652]	; 0xa5c
    } else {
      _i2caddr = baud_or_i2caddr;
   d543c:	f884 6a5c 	strbls.w	r6, [r4, #2652]	; 0xa5c
    }
    // A basic scanner, see if it ACK's
    gpsI2C->beginTransmission(_i2caddr);
   d5440:	f894 1a5c 	ldrb.w	r1, [r4, #2652]	; 0xa5c
   d5444:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d5448:	f001 f9e2 	bl	d6810 <_ZN7TwoWire17beginTransmissionEh>
    return (gpsI2C->endTransmission() == 0);
   d544c:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d5450:	f001 f9e6 	bl	d6820 <_ZN7TwoWire15endTransmissionEv>
   d5454:	fab0 f080 	clz	r0, r0
   d5458:	0940      	lsrs	r0, r0, #5
   d545a:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (gpsSPI) {
   d545c:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d5460:	b1c8      	cbz	r0, d5496 <_ZN12Adafruit_GPS5beginEm+0x80>
    gpsSPI->begin();
   d5462:	f001 f8ed 	bl	d6640 <_ZN8SPIClass5beginEv>
    gpsSPI_settings = SPISettings(baud_or_i2caddr, MSBFIRST, SPI_MODE0);
    if (gpsSPI_cs >= 0) {
   d5466:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d546a:	f8c4 69f0 	str.w	r6, [r4, #2544]	; 0x9f0
   d546e:	2800      	cmp	r0, #0
   d5470:	f04f 0601 	mov.w	r6, #1
   d5474:	f884 59ec 	strb.w	r5, [r4, #2540]	; 0x9ec
   d5478:	f884 69f4 	strb.w	r6, [r4, #2548]	; 0x9f4
   d547c:	f884 59f5 	strb.w	r5, [r4, #2549]	; 0x9f5
   d5480:	db09      	blt.n	d5496 <_ZN12Adafruit_GPS5beginEm+0x80>
      pinMode(gpsSPI_cs, OUTPUT);
   d5482:	4631      	mov	r1, r6
   d5484:	b280      	uxth	r0, r0
   d5486:	f002 fa2f 	bl	d78e8 <pinMode>
      digitalWrite(gpsSPI_cs, HIGH);
   d548a:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
   d548e:	4631      	mov	r1, r6
   d5490:	b280      	uxth	r0, r0
   d5492:	f002 fa3a 	bl	d790a <digitalWrite>
    }
  }

  delay(10);
   d5496:	200a      	movs	r0, #10
   d5498:	f001 ff10 	bl	d72bc <delay>
  return true;
   d549c:	2001      	movs	r0, #1
}
   d549e:	bd70      	pop	{r4, r5, r6, pc}

000d54a0 <_ZN12Adafruit_GPS11common_initEv>:
/**************************************************************************/
void Adafruit_GPS::common_init(void) {
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d54a0:	2200      	movs	r2, #0
  gpsI2C = NULL;
  gpsSPI = NULL;
  recvdflag = false;
  paused = false;
  lineidx = 0;
  currentline = line1;
   d54a2:	f500 6128 	add.w	r1, r0, #2688	; 0xa80
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  gpsStream = NULL;   // port pointer in corresponding constructor
  gpsI2C = NULL;
  gpsSPI = NULL;
  recvdflag = false;
   d54a6:	f880 2b7c 	strb.w	r2, [r0, #2940]	; 0xb7c
/**************************************************************************/
void Adafruit_GPS::common_init(void) {
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d54aa:	f8c0 29d4 	str.w	r2, [r0, #2516]	; 0x9d4
  gpsStream = NULL;   // port pointer in corresponding constructor
   d54ae:	f8c0 29d8 	str.w	r2, [r0, #2520]	; 0x9d8
  gpsI2C = NULL;
   d54b2:	f8c0 29dc 	str.w	r2, [r0, #2524]	; 0x9dc
  gpsSPI = NULL;
   d54b6:	f8c0 29e0 	str.w	r2, [r0, #2528]	; 0x9e0
  recvdflag = false;
  paused = false;
   d54ba:	f880 29d0 	strb.w	r2, [r0, #2512]	; 0x9d0
  lineidx = 0;
   d54be:	f880 2b70 	strb.w	r2, [r0, #2928]	; 0xb70
  currentline = line1;
   d54c2:	f8c0 1b74 	str.w	r1, [r0, #2932]	; 0xb74
  lastline = line2;

  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
      satellites = antenna = 0; // uint8_t
   d54c6:	f880 2083 	strb.w	r2, [r0, #131]	; 0x83
   d54ca:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82
   d54ce:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
   d54d2:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
   d54d6:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
   d54da:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
   d54de:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
   d54e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
   d54e6:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
   d54ea:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  lat = lon = mag = 0;          // char
   d54ee:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
   d54f2:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
   d54f6:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
  fix = false;                  // bool
   d54fa:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
  milliseconds = 0;             // uint16_t
   d54fe:	87c2      	strh	r2, [r0, #62]	; 0x3e
  gpsSPI = NULL;
  recvdflag = false;
  paused = false;
  lineidx = 0;
  currentline = line1;
  lastline = line2;
   d5500:	f600 21f8 	addw	r1, r0, #2808	; 0xaf8
      satellites = antenna = 0; // uint8_t
  lat = lon = mag = 0;          // char
  fix = false;                  // bool
  milliseconds = 0;             // uint16_t
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
      HDOP = VDOP = PDOP = 0.0; // nmea_float_t
   d5504:	2200      	movs	r2, #0
  gpsSPI = NULL;
  recvdflag = false;
  paused = false;
  lineidx = 0;
  currentline = line1;
  lastline = line2;
   d5506:	f8c0 1b78 	str.w	r1, [r0, #2936]	; 0xb78
      satellites = antenna = 0; // uint8_t
  lat = lon = mag = 0;          // char
  fix = false;                  // bool
  milliseconds = 0;             // uint16_t
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
      HDOP = VDOP = PDOP = 0.0; // nmea_float_t
   d550a:	6782      	str	r2, [r0, #120]	; 0x78
   d550c:	6742      	str	r2, [r0, #116]	; 0x74
   d550e:	6702      	str	r2, [r0, #112]	; 0x70
   d5510:	66c2      	str	r2, [r0, #108]	; 0x6c
   d5512:	6682      	str	r2, [r0, #104]	; 0x68
   d5514:	6642      	str	r2, [r0, #100]	; 0x64
   d5516:	6602      	str	r2, [r0, #96]	; 0x60
   d5518:	65c2      	str	r2, [r0, #92]	; 0x5c
   d551a:	6482      	str	r2, [r0, #72]	; 0x48
   d551c:	6442      	str	r2, [r0, #68]	; 0x44
#ifdef NMEA_EXTENSIONS
  data_init();
   d551e:	f000 b9f9 	b.w	d5914 <_ZN12Adafruit_GPS9data_initEv>
	...

000d5524 <_ZN12Adafruit_GPSC1EP7TwoWire>:
/*!
    @brief Constructor when using I2C
    @param theWire Pointer to an I2C TwoWire object
*/
/**************************************************************************/
Adafruit_GPS::Adafruit_GPS(TwoWire *theWire) {
   d5524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5528:	4bb5      	ldr	r3, [pc, #724]	; (d5800 <_ZN12Adafruit_GPSC1EP7TwoWire+0x2dc>)
   d552a:	6003      	str	r3, [r0, #0]
   d552c:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d552e:	2500      	movs	r5, #0
   d5530:	2614      	movs	r6, #20
   d5532:	4688      	mov	r8, r1
   d5534:	6045      	str	r5, [r0, #4]
   d5536:	6085      	str	r5, [r0, #8]
   d5538:	8185      	strh	r5, [r0, #12]
   d553a:	7385      	strb	r5, [r0, #14]
   d553c:	4632      	mov	r2, r6
   d553e:	4629      	mov	r1, r5
   d5540:	300f      	adds	r0, #15
   d5542:	f003 fae6 	bl	d8b12 <memset>
   d5546:	4632      	mov	r2, r6
   d5548:	4629      	mov	r1, r5
   d554a:	f8a4 5023 	strh.w	r5, [r4, #35]	; 0x23
   d554e:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
   d5552:	f104 0026 	add.w	r0, r4, #38	; 0x26
   d5556:	f003 fadc 	bl	d8b12 <memset>
   d555a:	2358      	movs	r3, #88	; 0x58
   d555c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
   d5560:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
   d5564:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
   d5568:	4629      	mov	r1, r5
   d556a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d556e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d5572:	f003 face 	bl	d8b12 <memset>
   d5576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d557a:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
   d557e:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   d5582:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
   d5586:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
   d558a:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
   d558e:	f8a4 313c 	strh.w	r3, [r4, #316]	; 0x13c
   d5592:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
   d5596:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
   d559a:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
   d559e:	f8a4 31bc 	strh.w	r3, [r4, #444]	; 0x1bc
   d55a2:	f8a4 31dc 	strh.w	r3, [r4, #476]	; 0x1dc
   d55a6:	f8a4 31fc 	strh.w	r3, [r4, #508]	; 0x1fc
   d55aa:	f8a4 321c 	strh.w	r3, [r4, #540]	; 0x21c
   d55ae:	f8a4 323c 	strh.w	r3, [r4, #572]	; 0x23c
   d55b2:	f8a4 325c 	strh.w	r3, [r4, #604]	; 0x25c
   d55b6:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
   d55ba:	f8a4 329c 	strh.w	r3, [r4, #668]	; 0x29c
   d55be:	f8a4 32bc 	strh.w	r3, [r4, #700]	; 0x2bc
   d55c2:	f8a4 32dc 	strh.w	r3, [r4, #732]	; 0x2dc
   d55c6:	f8a4 32fc 	strh.w	r3, [r4, #764]	; 0x2fc
   d55ca:	f8a4 331c 	strh.w	r3, [r4, #796]	; 0x31c
   d55ce:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
   d55d2:	f8a4 335c 	strh.w	r3, [r4, #860]	; 0x35c
   d55d6:	f8a4 337c 	strh.w	r3, [r4, #892]	; 0x37c
   d55da:	f8a4 339c 	strh.w	r3, [r4, #924]	; 0x39c
   d55de:	f8a4 33bc 	strh.w	r3, [r4, #956]	; 0x3bc
   d55e2:	f8a4 33dc 	strh.w	r3, [r4, #988]	; 0x3dc
   d55e6:	f8a4 33fc 	strh.w	r3, [r4, #1020]	; 0x3fc
   d55ea:	f8a4 341c 	strh.w	r3, [r4, #1052]	; 0x41c
   d55ee:	f8a4 343c 	strh.w	r3, [r4, #1084]	; 0x43c
   d55f2:	f8a4 345c 	strh.w	r3, [r4, #1116]	; 0x45c
   d55f6:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   d55fa:	f8a4 349c 	strh.w	r3, [r4, #1180]	; 0x49c
   d55fe:	f8a4 34bc 	strh.w	r3, [r4, #1212]	; 0x4bc
   d5602:	f8a4 34dc 	strh.w	r3, [r4, #1244]	; 0x4dc
   d5606:	f8a4 34fc 	strh.w	r3, [r4, #1276]	; 0x4fc
   d560a:	f8a4 351c 	strh.w	r3, [r4, #1308]	; 0x51c
   d560e:	f8a4 353c 	strh.w	r3, [r4, #1340]	; 0x53c
   d5612:	f8a4 355c 	strh.w	r3, [r4, #1372]	; 0x55c
   d5616:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
   d561a:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c
   d561e:	f8a4 35bc 	strh.w	r3, [r4, #1468]	; 0x5bc
   d5622:	f8a4 35dc 	strh.w	r3, [r4, #1500]	; 0x5dc
   d5626:	f8a4 35fc 	strh.w	r3, [r4, #1532]	; 0x5fc
   d562a:	f8a4 361c 	strh.w	r3, [r4, #1564]	; 0x61c
   d562e:	f8a4 363c 	strh.w	r3, [r4, #1596]	; 0x63c
   d5632:	f8a4 365c 	strh.w	r3, [r4, #1628]	; 0x65c
   d5636:	f8a4 367c 	strh.w	r3, [r4, #1660]	; 0x67c
   d563a:	f8a4 369c 	strh.w	r3, [r4, #1692]	; 0x69c
   d563e:	f8a4 36bc 	strh.w	r3, [r4, #1724]	; 0x6bc
   d5642:	f8a4 36dc 	strh.w	r3, [r4, #1756]	; 0x6dc
   d5646:	f8a4 36fc 	strh.w	r3, [r4, #1788]	; 0x6fc
   d564a:	f8a4 371c 	strh.w	r3, [r4, #1820]	; 0x71c
   d564e:	f8a4 373c 	strh.w	r3, [r4, #1852]	; 0x73c
   d5652:	f8a4 375c 	strh.w	r3, [r4, #1884]	; 0x75c
   d5656:	f8a4 377c 	strh.w	r3, [r4, #1916]	; 0x77c
   d565a:	f8a4 379c 	strh.w	r3, [r4, #1948]	; 0x79c
   d565e:	f8a4 37bc 	strh.w	r3, [r4, #1980]	; 0x7bc
   d5662:	f8a4 37dc 	strh.w	r3, [r4, #2012]	; 0x7dc
   d5666:	f8a4 37fc 	strh.w	r3, [r4, #2044]	; 0x7fc
   d566a:	f8a4 381c 	strh.w	r3, [r4, #2076]	; 0x81c
   d566e:	f8a4 383c 	strh.w	r3, [r4, #2108]	; 0x83c
   d5672:	f8a4 385c 	strh.w	r3, [r4, #2140]	; 0x85c
   d5676:	f8a4 387c 	strh.w	r3, [r4, #2172]	; 0x87c
   d567a:	f504 6309 	add.w	r3, r4, #2192	; 0x890
   d567e:	4a61      	ldr	r2, [pc, #388]	; (d5804 <_ZN12Adafruit_GPSC1EP7TwoWire+0x2e0>)
   d5680:	601a      	str	r2, [r3, #0]
   d5682:	f604 0394 	addw	r3, r4, #2196	; 0x894
   d5686:	2200      	movs	r2, #0
   d5688:	601a      	str	r2, [r3, #0]
   d568a:	4629      	mov	r1, r5
   d568c:	4632      	mov	r2, r6
   d568e:	f604 0098 	addw	r0, r4, #2200	; 0x898
   d5692:	f003 fa3e 	bl	d8b12 <memset>
   d5696:	4f5c      	ldr	r7, [pc, #368]	; (d5808 <_ZN12Adafruit_GPSC1EP7TwoWire+0x2e4>)
   d5698:	4632      	mov	r2, r6
   d569a:	4629      	mov	r1, r5
   d569c:	f604 00ac 	addw	r0, r4, #2220	; 0x8ac
   d56a0:	f003 fa37 	bl	d8b12 <memset>
   d56a4:	4629      	mov	r1, r5
   d56a6:	223f      	movs	r2, #63	; 0x3f
   d56a8:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
   d56ac:	f003 fa31 	bl	d8b12 <memset>
   d56b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d56b2:	f604 160c 	addw	r6, r4, #2316	; 0x90c
   d56b6:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
   d56ba:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
   d56be:	f8c4 5908 	str.w	r5, [r4, #2312]	; 0x908
   d56c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d56c4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   d56c8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   d56cc:	4629      	mov	r1, r5
   d56ce:	2254      	movs	r2, #84	; 0x54
   d56d0:	f604 1028 	addw	r0, r4, #2344	; 0x928
   d56d4:	f003 fa1d 	bl	d8b12 <memset>
   d56d8:	4b4c      	ldr	r3, [pc, #304]	; (d580c <_ZN12Adafruit_GPSC1EP7TwoWire+0x2e8>)
   d56da:	f8c4 3928 	str.w	r3, [r4, #2344]	; 0x928
   d56de:	4b4c      	ldr	r3, [pc, #304]	; (d5810 <_ZN12Adafruit_GPSC1EP7TwoWire+0x2ec>)
   d56e0:	f8c4 392c 	str.w	r3, [r4, #2348]	; 0x92c
   d56e4:	4b4b      	ldr	r3, [pc, #300]	; (d5814 <_ZN12Adafruit_GPSC1EP7TwoWire+0x2f0>)
   d56e6:	f8c4 3930 	str.w	r3, [r4, #2352]	; 0x930
   d56ea:	4b4b      	ldr	r3, [pc, #300]	; (d5818 <_ZN12Adafruit_GPSC1EP7TwoWire+0x2f4>)
   d56ec:	f8c4 3934 	str.w	r3, [r4, #2356]	; 0x934
   d56f0:	4b4a      	ldr	r3, [pc, #296]	; (d581c <_ZN12Adafruit_GPSC1EP7TwoWire+0x2f8>)
   d56f2:	f8c4 3938 	str.w	r3, [r4, #2360]	; 0x938
   d56f6:	4b4a      	ldr	r3, [pc, #296]	; (d5820 <_ZN12Adafruit_GPSC1EP7TwoWire+0x2fc>)
   d56f8:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
   d56fc:	4b49      	ldr	r3, [pc, #292]	; (d5824 <_ZN12Adafruit_GPSC1EP7TwoWire+0x300>)
   d56fe:	f8c4 3940 	str.w	r3, [r4, #2368]	; 0x940
   d5702:	4b49      	ldr	r3, [pc, #292]	; (d5828 <_ZN12Adafruit_GPSC1EP7TwoWire+0x304>)
   d5704:	f8c4 3944 	str.w	r3, [r4, #2372]	; 0x944
   d5708:	4b48      	ldr	r3, [pc, #288]	; (d582c <_ZN12Adafruit_GPSC1EP7TwoWire+0x308>)
   d570a:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
   d570e:	4b48      	ldr	r3, [pc, #288]	; (d5830 <_ZN12Adafruit_GPSC1EP7TwoWire+0x30c>)
   d5710:	f8c4 394c 	str.w	r3, [r4, #2380]	; 0x94c
   d5714:	4b47      	ldr	r3, [pc, #284]	; (d5834 <_ZN12Adafruit_GPSC1EP7TwoWire+0x310>)
   d5716:	f8c4 3950 	str.w	r3, [r4, #2384]	; 0x950
   d571a:	4b47      	ldr	r3, [pc, #284]	; (d5838 <_ZN12Adafruit_GPSC1EP7TwoWire+0x314>)
   d571c:	f8c4 3954 	str.w	r3, [r4, #2388]	; 0x954
   d5720:	4b46      	ldr	r3, [pc, #280]	; (d583c <_ZN12Adafruit_GPSC1EP7TwoWire+0x318>)
   d5722:	f8c4 3958 	str.w	r3, [r4, #2392]	; 0x958
   d5726:	4b46      	ldr	r3, [pc, #280]	; (d5840 <_ZN12Adafruit_GPSC1EP7TwoWire+0x31c>)
   d5728:	f8c4 395c 	str.w	r3, [r4, #2396]	; 0x95c
   d572c:	4b45      	ldr	r3, [pc, #276]	; (d5844 <_ZN12Adafruit_GPSC1EP7TwoWire+0x320>)
   d572e:	f8c4 3960 	str.w	r3, [r4, #2400]	; 0x960
   d5732:	4b45      	ldr	r3, [pc, #276]	; (d5848 <_ZN12Adafruit_GPSC1EP7TwoWire+0x324>)
   d5734:	f8c4 3964 	str.w	r3, [r4, #2404]	; 0x964
   d5738:	4b44      	ldr	r3, [pc, #272]	; (d584c <_ZN12Adafruit_GPSC1EP7TwoWire+0x328>)
   d573a:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
   d573e:	4b44      	ldr	r3, [pc, #272]	; (d5850 <_ZN12Adafruit_GPSC1EP7TwoWire+0x32c>)
   d5740:	f8c4 396c 	str.w	r3, [r4, #2412]	; 0x96c
   d5744:	4e43      	ldr	r6, [pc, #268]	; (d5854 <_ZN12Adafruit_GPSC1EP7TwoWire+0x330>)
   d5746:	4b44      	ldr	r3, [pc, #272]	; (d5858 <_ZN12Adafruit_GPSC1EP7TwoWire+0x334>)
   d5748:	f8c4 3970 	str.w	r3, [r4, #2416]	; 0x970
   d574c:	4629      	mov	r1, r5
   d574e:	f8c4 6974 	str.w	r6, [r4, #2420]	; 0x974
   d5752:	223c      	movs	r2, #60	; 0x3c
   d5754:	f604 107c 	addw	r0, r4, #2428	; 0x97c
   d5758:	f003 f9db 	bl	d8b12 <memset>
   d575c:	4b3f      	ldr	r3, [pc, #252]	; (d585c <_ZN12Adafruit_GPSC1EP7TwoWire+0x338>)
   d575e:	f8c4 397c 	str.w	r3, [r4, #2428]	; 0x97c
   d5762:	4b3f      	ldr	r3, [pc, #252]	; (d5860 <_ZN12Adafruit_GPSC1EP7TwoWire+0x33c>)
   d5764:	f8c4 3980 	str.w	r3, [r4, #2432]	; 0x980
   d5768:	4b3e      	ldr	r3, [pc, #248]	; (d5864 <_ZN12Adafruit_GPSC1EP7TwoWire+0x340>)
   d576a:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
   d576e:	4b3e      	ldr	r3, [pc, #248]	; (d5868 <_ZN12Adafruit_GPSC1EP7TwoWire+0x344>)
   d5770:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
   d5774:	4b3d      	ldr	r3, [pc, #244]	; (d586c <_ZN12Adafruit_GPSC1EP7TwoWire+0x348>)
   d5776:	f8c4 398c 	str.w	r3, [r4, #2444]	; 0x98c
   d577a:	4b3d      	ldr	r3, [pc, #244]	; (d5870 <_ZN12Adafruit_GPSC1EP7TwoWire+0x34c>)
   d577c:	f8c4 3990 	str.w	r3, [r4, #2448]	; 0x990
   d5780:	4b3c      	ldr	r3, [pc, #240]	; (d5874 <_ZN12Adafruit_GPSC1EP7TwoWire+0x350>)
   d5782:	f8c4 3994 	str.w	r3, [r4, #2452]	; 0x994
   d5786:	4b3c      	ldr	r3, [pc, #240]	; (d5878 <_ZN12Adafruit_GPSC1EP7TwoWire+0x354>)
   d5788:	f8c4 3998 	str.w	r3, [r4, #2456]	; 0x998
   d578c:	4b3b      	ldr	r3, [pc, #236]	; (d587c <_ZN12Adafruit_GPSC1EP7TwoWire+0x358>)
   d578e:	f8c4 399c 	str.w	r3, [r4, #2460]	; 0x99c
   d5792:	4b3b      	ldr	r3, [pc, #236]	; (d5880 <_ZN12Adafruit_GPSC1EP7TwoWire+0x35c>)
   d5794:	f8c4 39a0 	str.w	r3, [r4, #2464]	; 0x9a0
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d5798:	4a3a      	ldr	r2, [pc, #232]	; (d5884 <_ZN12Adafruit_GPSC1EP7TwoWire+0x360>)
   d579a:	4b3b      	ldr	r3, [pc, #236]	; (d5888 <_ZN12Adafruit_GPSC1EP7TwoWire+0x364>)
   d579c:	f8c4 39a4 	str.w	r3, [r4, #2468]	; 0x9a4
   d57a0:	f8c4 29e8 	str.w	r2, [r4, #2536]	; 0x9e8
   d57a4:	4b39      	ldr	r3, [pc, #228]	; (d588c <_ZN12Adafruit_GPSC1EP7TwoWire+0x368>)
   d57a6:	4a3a      	ldr	r2, [pc, #232]	; (d5890 <_ZN12Adafruit_GPSC1EP7TwoWire+0x36c>)
   d57a8:	f8c4 39b8 	str.w	r3, [r4, #2488]	; 0x9b8
   d57ac:	f8c4 39bc 	str.w	r3, [r4, #2492]	; 0x9bc
   d57b0:	f8c4 39c0 	str.w	r3, [r4, #2496]	; 0x9c0
   d57b4:	f8c4 39c4 	str.w	r3, [r4, #2500]	; 0x9c4
   d57b8:	f8c4 39c8 	str.w	r3, [r4, #2504]	; 0x9c8
   d57bc:	f8c4 39cc 	str.w	r3, [r4, #2508]	; 0x9cc
   d57c0:	f8c4 29f0 	str.w	r2, [r4, #2544]	; 0x9f0
   d57c4:	23ff      	movs	r3, #255	; 0xff
   d57c6:	2201      	movs	r2, #1
  common_init();    // Set everything to common state, then...
   d57c8:	4620      	mov	r0, r4
/*!
    @brief Constructor when using I2C
    @param theWire Pointer to an I2C TwoWire object
*/
/**************************************************************************/
Adafruit_GPS::Adafruit_GPS(TwoWire *theWire) {
   d57ca:	f8c4 69a8 	str.w	r6, [r4, #2472]	; 0x9a8
   d57ce:	f884 59d1 	strb.w	r5, [r4, #2513]	; 0x9d1
   d57d2:	f884 39e4 	strb.w	r3, [r4, #2532]	; 0x9e4
   d57d6:	f884 59ec 	strb.w	r5, [r4, #2540]	; 0x9ec
   d57da:	f884 29f4 	strb.w	r2, [r4, #2548]	; 0x9f4
   d57de:	f884 59f5 	strb.w	r5, [r4, #2549]	; 0x9f5
   d57e2:	f884 3a7d 	strb.w	r3, [r4, #2685]	; 0xa7d
   d57e6:	f884 5a7e 	strb.w	r5, [r4, #2686]	; 0xa7e
   d57ea:	f884 5a7f 	strb.w	r5, [r4, #2687]	; 0xa7f
   d57ee:	f884 5b70 	strb.w	r5, [r4, #2928]	; 0xb70
  common_init();    // Set everything to common state, then...
   d57f2:	f7ff fe55 	bl	d54a0 <_ZN12Adafruit_GPS11common_initEv>
  gpsI2C = theWire; // ...override gpsI2C
   d57f6:	f8c4 89dc 	str.w	r8, [r4, #2524]	; 0x9dc
}
   d57fa:	4620      	mov	r0, r4
   d57fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5800:	000d91f0 	.word	0x000d91f0
   d5804:	4019999a 	.word	0x4019999a
   d5808:	000d91cc 	.word	0x000d91cc
   d580c:	000d9245 	.word	0x000d9245
   d5810:	000d9249 	.word	0x000d9249
   d5814:	000d924d 	.word	0x000d924d
   d5818:	000d9251 	.word	0x000d9251
   d581c:	000d9255 	.word	0x000d9255
   d5820:	000d9259 	.word	0x000d9259
   d5824:	000d925d 	.word	0x000d925d
   d5828:	000d9261 	.word	0x000d9261
   d582c:	000d9265 	.word	0x000d9265
   d5830:	000d9269 	.word	0x000d9269
   d5834:	000d926d 	.word	0x000d926d
   d5838:	000d9271 	.word	0x000d9271
   d583c:	000d9275 	.word	0x000d9275
   d5840:	000d9279 	.word	0x000d9279
   d5844:	000d927d 	.word	0x000d927d
   d5848:	000d9281 	.word	0x000d9281
   d584c:	000d9285 	.word	0x000d9285
   d5850:	000d9289 	.word	0x000d9289
   d5854:	000d9291 	.word	0x000d9291
   d5858:	000d928d 	.word	0x000d928d
   d585c:	000d9295 	.word	0x000d9295
   d5860:	000d9299 	.word	0x000d9299
   d5864:	000d929d 	.word	0x000d929d
   d5868:	000d92a1 	.word	0x000d92a1
   d586c:	000d92a5 	.word	0x000d92a5
   d5870:	000d92a9 	.word	0x000d92a9
   d5874:	000d92ad 	.word	0x000d92ad
   d5878:	000d92b1 	.word	0x000d92b1
   d587c:	000d92b5 	.word	0x000d92b5
   d5880:	000d92b9 	.word	0x000d92b9
   d5884:	000d91c8 	.word	0x000d91c8
   d5888:	000d92bd 	.word	0x000d92bd
   d588c:	77359400 	.word	0x77359400
   d5890:	000f4240 	.word	0x000f4240

000d5894 <_ZN12Adafruit_GPS11sendCommandEPKc>:
/*!
    @brief Send a command to the GPS device
    @param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void Adafruit_GPS::sendCommand(const char *str) { println(str); }
   d5894:	f001 bd91 	b.w	d73ba <_ZN5Print7printlnEPKc>

000d5898 <_GLOBAL__sub_I__ZN12Adafruit_GPS5beginEm>:
   d5898:	f000 bbf0 	b.w	d607c <HAL_Pin_Map>

000d589c <_GLOBAL__sub_I__ZN12Adafruit_GPS5buildEPcPKcS2_cb>:
   d589c:	f000 bbee 	b.w	d607c <HAL_Pin_Map>

000d58a0 <_GLOBAL__sub_I__ZN12Adafruit_GPS5parseEPc>:
   d58a0:	f000 bbec 	b.w	d607c <HAL_Pin_Map>

000d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>:
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::initDataValue(nmea_index_t idx, char *label, char *fmt,
                                 char *unit, unsigned long response,
                                 nmea_value_type_t type) {
   d58a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d58a6:	b085      	sub	sp, #20
   d58a8:	4605      	mov	r5, r0
   d58aa:	460c      	mov	r4, r1
   d58ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d58ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
   d58b0:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
      val[idx].response = response;
    val[idx].type = type;
    if ((int)(val[idx].type / 10) ==
        1) { // angle with sin/cos component recording
      initDataValue((nmea_index_t)(
          idx + 1)); // initialize the next two data values as well
   d58b4:	2600      	movs	r6, #0
*/
/**************************************************************************/
void Adafruit_GPS::initDataValue(nmea_index_t idx, char *label, char *fmt,
                                 char *unit, unsigned long response,
                                 nmea_value_type_t type) {
  if (idx < NMEA_MAX_INDEX) {
   d58b6:	2c3f      	cmp	r4, #63	; 0x3f
   d58b8:	d82a      	bhi.n	d5910 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
    if (label)
   d58ba:	b11a      	cbz	r2, d58c4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x20>
      val[idx].label = label;
   d58bc:	eb05 1e44 	add.w	lr, r5, r4, lsl #5
   d58c0:	f8ce 20a4 	str.w	r2, [lr, #164]	; 0xa4
   d58c4:	0162      	lsls	r2, r4, #5
    if (fmt)
   d58c6:	b11b      	cbz	r3, d58d0 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x2c>
      val[idx].fmt = fmt;
   d58c8:	eb05 0e02 	add.w	lr, r5, r2
   d58cc:	f8ce 30ac 	str.w	r3, [lr, #172]	; 0xac
    if (unit)
   d58d0:	b117      	cbz	r7, d58d8 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x34>
      val[idx].unit = unit;
   d58d2:	18ab      	adds	r3, r5, r2
   d58d4:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
    if (response)
   d58d8:	b110      	cbz	r0, d58e0 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x3c>
      val[idx].response = response;
   d58da:	18ab      	adds	r3, r5, r2
   d58dc:	f8a3 009c 	strh.w	r0, [r3, #156]	; 0x9c
    val[idx].type = type;
   d58e0:	442a      	add	r2, r5
   d58e2:	f882 109e 	strb.w	r1, [r2, #158]	; 0x9e
    if ((int)(val[idx].type / 10) ==
   d58e6:	390a      	subs	r1, #10
   d58e8:	2909      	cmp	r1, #9
   d58ea:	d811      	bhi.n	d5910 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
        1) { // angle with sin/cos component recording
      initDataValue((nmea_index_t)(
          idx + 1)); // initialize the next two data values as well
   d58ec:	2300      	movs	r3, #0
   d58ee:	1c61      	adds	r1, r4, #1
   d58f0:	461a      	mov	r2, r3
   d58f2:	b2c9      	uxtb	r1, r1
   d58f4:	4628      	mov	r0, r5
   d58f6:	9602      	str	r6, [sp, #8]
   d58f8:	9601      	str	r6, [sp, #4]
   d58fa:	9600      	str	r6, [sp, #0]
   d58fc:	f7ff ffd2 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
      initDataValue((nmea_index_t)(idx + 2));
   d5900:	3402      	adds	r4, #2
   d5902:	2200      	movs	r2, #0
   d5904:	b2e4      	uxtb	r4, r4
   d5906:	4613      	mov	r3, r2
   d5908:	4617      	mov	r7, r2
   d590a:	4610      	mov	r0, r2
   d590c:	4611      	mov	r1, r2
   d590e:	e7d2      	b.n	d58b6 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x12>
    }
  }
}
   d5910:	b005      	add	sp, #20
   d5912:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5914 <_ZN12Adafruit_GPS9data_initEv>:
    sketch to decide which data values should carry the extra memory burden
    of history.
    @return   none
*/
/**************************************************************************/
void Adafruit_GPS::data_init() {
   d5914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
   d5918:	2600      	movs	r6, #0
    sketch to decide which data values should carry the extra memory burden
    of history.
    @return   none
*/
/**************************************************************************/
void Adafruit_GPS::data_init() {
   d591a:	b085      	sub	sp, #20
   d591c:	4605      	mov	r5, r0
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
   d591e:	4637      	mov	r7, r6
   d5920:	2400      	movs	r4, #0
   d5922:	b2f1      	uxtb	r1, r6
   d5924:	9702      	str	r7, [sp, #8]
   d5926:	9701      	str	r7, [sp, #4]
   d5928:	9700      	str	r7, [sp, #0]
   d592a:	4623      	mov	r3, r4
   d592c:	4ab0      	ldr	r2, [pc, #704]	; (d5bf0 <_ZN12Adafruit_GPS9data_initEv+0x2dc>)
   d592e:	4628      	mov	r0, r5
/**************************************************************************/
void Adafruit_GPS::data_init() {
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
   d5930:	3601      	adds	r6, #1
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
   d5932:	f7ff ffb7 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
/**************************************************************************/
void Adafruit_GPS::data_init() {
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
   d5936:	2e40      	cmp	r6, #64	; 0x40
   d5938:	d1f2      	bne.n	d5920 <_ZN12Adafruit_GPS9data_initEv+0xc>
  static char LATlabel[] = "Lat";
  static char LATfmt[] = "%9.4f";
  static char LATunit[] = "DDD.dddd";
  initDataValue(
      NMEA_LAT, LATlabel, LATfmt, LATunit, 0,
      NMEA_BOAT_ANGLE); // angle from -180 to 180, or actually -90 to 90 for lat
   d593a:	2602      	movs	r6, #2
   d593c:	4fad      	ldr	r7, [pc, #692]	; (d5bf4 <_ZN12Adafruit_GPS9data_initEv+0x2e0>)
  static char BoatAngleunit[] = "Degrees";
  static char TrueAngleunit[] = "Deg True";
  static char MagAngleunit[] = "Deg Mag";

  static char HDOPlabel[] = "HDOP";
  initDataValue(NMEA_HDOP, HDOPlabel);
   d593e:	9402      	str	r4, [sp, #8]
   d5940:	4623      	mov	r3, r4
   d5942:	4621      	mov	r1, r4
   d5944:	4628      	mov	r0, r5
   d5946:	9401      	str	r4, [sp, #4]
   d5948:	9400      	str	r4, [sp, #0]
   d594a:	4aab      	ldr	r2, [pc, #684]	; (d5bf8 <_ZN12Adafruit_GPS9data_initEv+0x2e4>)
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);

  static char COGlabel[] = "COG";
  // types with sin/cos need two extra spots in the values matrix!
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
   d594c:	f8df 9380 	ldr.w	r9, [pc, #896]	; d5cd0 <_ZN12Adafruit_GPS9data_initEv+0x3bc>
                NMEA_COMPASS_ANGLE); // type: angle 0-360 1

  static char XTElabel[] = "XTE";
  static char XTEfmt[] = "%6.2f";
  static char XTEunit[] = "NM";
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
   d5950:	f8df a380 	ldr.w	sl, [pc, #896]	; d5cd4 <_ZN12Adafruit_GPS9data_initEv+0x3c0>
  static char DISTWPlabel[] = "WP Dist";
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);

  static char AWAlabel[] = "AWA";
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
   d5954:	f8df b380 	ldr.w	fp, [pc, #896]	; d5cd8 <_ZN12Adafruit_GPS9data_initEv+0x3c4>
  static char BoatAngleunit[] = "Degrees";
  static char TrueAngleunit[] = "Deg True";
  static char MagAngleunit[] = "Deg Mag";

  static char HDOPlabel[] = "HDOP";
  initDataValue(NMEA_HDOP, HDOPlabel);
   d5958:	f7ff ffa4 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  static char LATlabel[] = "Lat";
  static char LATfmt[] = "%9.4f";
  static char LATunit[] = "DDD.dddd";
  initDataValue(
      NMEA_LAT, LATlabel, LATfmt, LATunit, 0,
      NMEA_BOAT_ANGLE); // angle from -180 to 180, or actually -90 to 90 for lat
   d595c:	9602      	str	r6, [sp, #8]
   d595e:	9700      	str	r7, [sp, #0]
   d5960:	4628      	mov	r0, r5
   d5962:	9401      	str	r4, [sp, #4]
   d5964:	4ba5      	ldr	r3, [pc, #660]	; (d5bfc <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
   d5966:	4aa6      	ldr	r2, [pc, #664]	; (d5c00 <_ZN12Adafruit_GPS9data_initEv+0x2ec>)
   d5968:	2101      	movs	r1, #1
   d596a:	f7ff ff9b 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LONlabel[] = "Lon";
  initDataValue(NMEA_LON, LONlabel, LATfmt, LATunit, 0,
                NMEA_BOAT_ANGLE); // angle from -180 to 180
   d596e:	9602      	str	r6, [sp, #8]
   d5970:	9700      	str	r7, [sp, #0]
   d5972:	4631      	mov	r1, r6
   d5974:	4628      	mov	r0, r5
   d5976:	9401      	str	r4, [sp, #4]
   d5978:	4ba0      	ldr	r3, [pc, #640]	; (d5bfc <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
   d597a:	4aa2      	ldr	r2, [pc, #648]	; (d5c04 <_ZN12Adafruit_GPS9data_initEv+0x2f0>)
   d597c:	f7ff ff92 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LATWPlabel[] = "WP Lat";
  initDataValue(NMEA_LATWP, LATWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
   d5980:	9602      	str	r6, [sp, #8]
   d5982:	9700      	str	r7, [sp, #0]
   d5984:	4628      	mov	r0, r5
   d5986:	9401      	str	r4, [sp, #4]
   d5988:	4b9c      	ldr	r3, [pc, #624]	; (d5bfc <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
   d598a:	4a9f      	ldr	r2, [pc, #636]	; (d5c08 <_ZN12Adafruit_GPS9data_initEv+0x2f4>)
   d598c:	2103      	movs	r1, #3
   d598e:	f7ff ff89 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LONWPlabel[] = "WP Lon";
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
   d5992:	9602      	str	r6, [sp, #8]
   d5994:	9700      	str	r7, [sp, #0]
   d5996:	4628      	mov	r0, r5

  static char SOGlabel[] = "SOG";
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
   d5998:	4f9c      	ldr	r7, [pc, #624]	; (d5c0c <_ZN12Adafruit_GPS9data_initEv+0x2f8>)

  static char LATWPlabel[] = "WP Lat";
  initDataValue(NMEA_LATWP, LATWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);

  static char LONWPlabel[] = "WP Lon";
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
   d599a:	9401      	str	r4, [sp, #4]
   d599c:	4b97      	ldr	r3, [pc, #604]	; (d5bfc <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
   d599e:	4a9c      	ldr	r2, [pc, #624]	; (d5c10 <_ZN12Adafruit_GPS9data_initEv+0x2fc>)
   d59a0:	2104      	movs	r1, #4
   d59a2:	f7ff ff7f 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);

  static char COGlabel[] = "COG";
  // types with sin/cos need two extra spots in the values matrix!
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
   d59a6:	f04f 080b 	mov.w	r8, #11

  static char LONWPlabel[] = "WP Lon";
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);

  static char SOGlabel[] = "SOG";
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
   d59aa:	9700      	str	r7, [sp, #0]
   d59ac:	4628      	mov	r0, r5
   d59ae:	9402      	str	r4, [sp, #8]
   d59b0:	9401      	str	r4, [sp, #4]
   d59b2:	4b98      	ldr	r3, [pc, #608]	; (d5c14 <_ZN12Adafruit_GPS9data_initEv+0x300>)
   d59b4:	4a98      	ldr	r2, [pc, #608]	; (d5c18 <_ZN12Adafruit_GPS9data_initEv+0x304>)
   d59b6:	2105      	movs	r1, #5
   d59b8:	f7ff ff74 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char COGlabel[] = "COG";
  // types with sin/cos need two extra spots in the values matrix!
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
   d59bc:	f8cd 8008 	str.w	r8, [sp, #8]
   d59c0:	f8cd 9000 	str.w	r9, [sp]
   d59c4:	4628      	mov	r0, r5
   d59c6:	9401      	str	r4, [sp, #4]
   d59c8:	4b94      	ldr	r3, [pc, #592]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d59ca:	4a95      	ldr	r2, [pc, #596]	; (d5c20 <_ZN12Adafruit_GPS9data_initEv+0x30c>)
   d59cc:	2106      	movs	r1, #6
   d59ce:	f7ff ff69 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char COGWPlabel[] = "WP COG";
  initDataValue(NMEA_COGWP, COGWPlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE); // type: angle 0-360 1
   d59d2:	2301      	movs	r3, #1
   d59d4:	9302      	str	r3, [sp, #8]
   d59d6:	f8cd 9000 	str.w	r9, [sp]
   d59da:	4628      	mov	r0, r5
   d59dc:	9401      	str	r4, [sp, #4]
   d59de:	4b8f      	ldr	r3, [pc, #572]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d59e0:	4a90      	ldr	r2, [pc, #576]	; (d5c24 <_ZN12Adafruit_GPS9data_initEv+0x310>)
   d59e2:	2109      	movs	r1, #9
   d59e4:	f7ff ff5e 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char XTElabel[] = "XTE";
  static char XTEfmt[] = "%6.2f";
  static char XTEunit[] = "NM";
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
   d59e8:	f8cd a000 	str.w	sl, [sp]
   d59ec:	4628      	mov	r0, r5
   d59ee:	9402      	str	r4, [sp, #8]
   d59f0:	9401      	str	r4, [sp, #4]
   d59f2:	4b8d      	ldr	r3, [pc, #564]	; (d5c28 <_ZN12Adafruit_GPS9data_initEv+0x314>)
   d59f4:	4a8d      	ldr	r2, [pc, #564]	; (d5c2c <_ZN12Adafruit_GPS9data_initEv+0x318>)
   d59f6:	210a      	movs	r1, #10
   d59f8:	f7ff ff54 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char DISTWPlabel[] = "WP Dist";
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
   d59fc:	f8cd a000 	str.w	sl, [sp]
   d5a00:	4641      	mov	r1, r8

  static char AWAlabel[] = "AWA";
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
   d5a02:	f04f 0a0c 	mov.w	sl, #12
  static char XTEfmt[] = "%6.2f";
  static char XTEunit[] = "NM";
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);

  static char DISTWPlabel[] = "WP Dist";
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
   d5a06:	4628      	mov	r0, r5
   d5a08:	9402      	str	r4, [sp, #8]
   d5a0a:	9401      	str	r4, [sp, #4]
   d5a0c:	4b86      	ldr	r3, [pc, #536]	; (d5c28 <_ZN12Adafruit_GPS9data_initEv+0x314>)
   d5a0e:	4a88      	ldr	r2, [pc, #544]	; (d5c30 <_ZN12Adafruit_GPS9data_initEv+0x31c>)
   d5a10:	f7ff ff48 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char AWAlabel[] = "AWA";
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
   d5a14:	f8cd a008 	str.w	sl, [sp, #8]
   d5a18:	4651      	mov	r1, sl
   d5a1a:	4628      	mov	r0, r5
   d5a1c:	9401      	str	r4, [sp, #4]
   d5a1e:	f8cd b000 	str.w	fp, [sp]
   d5a22:	4b7e      	ldr	r3, [pc, #504]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d5a24:	4a83      	ldr	r2, [pc, #524]	; (d5c34 <_ZN12Adafruit_GPS9data_initEv+0x320>)
   d5a26:	f7ff ff3d 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char AWSlabel[] = "AWS";
  initDataValue(NMEA_AWS, AWSlabel, WindSpeedfmt, Speedunit);
   d5a2a:	9700      	str	r7, [sp, #0]
   d5a2c:	4628      	mov	r0, r5
   d5a2e:	9402      	str	r4, [sp, #8]
   d5a30:	9401      	str	r4, [sp, #4]
   d5a32:	4b81      	ldr	r3, [pc, #516]	; (d5c38 <_ZN12Adafruit_GPS9data_initEv+0x324>)
   d5a34:	4a81      	ldr	r2, [pc, #516]	; (d5c3c <_ZN12Adafruit_GPS9data_initEv+0x328>)
   d5a36:	210f      	movs	r1, #15
   d5a38:	f7ff ff34 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TWAlabel[] = "TWA";
  initDataValue(NMEA_TWA, TWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
   d5a3c:	f8cd a008 	str.w	sl, [sp, #8]
   d5a40:	4628      	mov	r0, r5
   d5a42:	9401      	str	r4, [sp, #4]
   d5a44:	f8cd b000 	str.w	fp, [sp]
   d5a48:	4b74      	ldr	r3, [pc, #464]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d5a4a:	4a7d      	ldr	r2, [pc, #500]	; (d5c40 <_ZN12Adafruit_GPS9data_initEv+0x32c>)
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);

  static char RPM_M1label[] = "Motor 1";
  static char RPM_M1fmt[] = "%6.0f";
  static char RPM_M1unit[] = "RPM";
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
   d5a4c:	f8df a28c 	ldr.w	sl, [pc, #652]	; d5cdc <_ZN12Adafruit_GPS9data_initEv+0x3c8>
  static char AWSlabel[] = "AWS";
  initDataValue(NMEA_AWS, AWSlabel, WindSpeedfmt, Speedunit);

  static char TWAlabel[] = "TWA";
  initDataValue(NMEA_TWA, TWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
   d5a50:	2110      	movs	r1, #16
   d5a52:	f7ff ff27 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TWDlabel[] = "TWD";
  initDataValue(NMEA_TWD, TWDlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
   d5a56:	f8cd 8008 	str.w	r8, [sp, #8]
   d5a5a:	f8cd 9000 	str.w	r9, [sp]
   d5a5e:	4628      	mov	r0, r5
   d5a60:	9401      	str	r4, [sp, #4]
   d5a62:	4b6e      	ldr	r3, [pc, #440]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d5a64:	4a77      	ldr	r2, [pc, #476]	; (d5c44 <_ZN12Adafruit_GPS9data_initEv+0x330>)
   d5a66:	2113      	movs	r1, #19
   d5a68:	f7ff ff1c 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TWSlabel[] = "TWS";
  initDataValue(NMEA_TWS, TWSlabel, WindSpeedfmt, Speedunit);
   d5a6c:	9700      	str	r7, [sp, #0]
   d5a6e:	4628      	mov	r0, r5
   d5a70:	9402      	str	r4, [sp, #8]
   d5a72:	9401      	str	r4, [sp, #4]
   d5a74:	4b70      	ldr	r3, [pc, #448]	; (d5c38 <_ZN12Adafruit_GPS9data_initEv+0x324>)
   d5a76:	4a74      	ldr	r2, [pc, #464]	; (d5c48 <_ZN12Adafruit_GPS9data_initEv+0x334>)
   d5a78:	2116      	movs	r1, #22
   d5a7a:	f7ff ff13 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VMGlabel[] = "VMG";
  initDataValue(NMEA_VMG, VMGlabel, BoatSpeedfmt, Speedunit);
   d5a7e:	9700      	str	r7, [sp, #0]
   d5a80:	4628      	mov	r0, r5
   d5a82:	9402      	str	r4, [sp, #8]
   d5a84:	9401      	str	r4, [sp, #4]
   d5a86:	4b63      	ldr	r3, [pc, #396]	; (d5c14 <_ZN12Adafruit_GPS9data_initEv+0x300>)
   d5a88:	4a70      	ldr	r2, [pc, #448]	; (d5c4c <_ZN12Adafruit_GPS9data_initEv+0x338>)
   d5a8a:	2117      	movs	r1, #23
   d5a8c:	f7ff ff0a 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VMGWPlabel[] = "WP VMG";
  initDataValue(NMEA_VMGWP, VMGWPlabel, BoatSpeedfmt, Speedunit);
   d5a90:	9700      	str	r7, [sp, #0]
   d5a92:	4628      	mov	r0, r5
   d5a94:	9402      	str	r4, [sp, #8]
   d5a96:	9401      	str	r4, [sp, #4]
   d5a98:	4b5e      	ldr	r3, [pc, #376]	; (d5c14 <_ZN12Adafruit_GPS9data_initEv+0x300>)
   d5a9a:	4a6d      	ldr	r2, [pc, #436]	; (d5c50 <_ZN12Adafruit_GPS9data_initEv+0x33c>)
   d5a9c:	2118      	movs	r1, #24
   d5a9e:	f7ff ff01 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char HEELlabel[] = "Heel";
  static char HEELunit[] = "Deg Stbd";
  initDataValue(NMEA_HEEL, HEELlabel, Anglefmt, HEELunit, 0,
                NMEA_BOAT_ANGLE); // type: angle +/-180 2
   d5aa2:	4b6c      	ldr	r3, [pc, #432]	; (d5c54 <_ZN12Adafruit_GPS9data_initEv+0x340>)
   d5aa4:	9602      	str	r6, [sp, #8]
   d5aa6:	9300      	str	r3, [sp, #0]
   d5aa8:	4628      	mov	r0, r5
   d5aaa:	9401      	str	r4, [sp, #4]
   d5aac:	4b5b      	ldr	r3, [pc, #364]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d5aae:	4a6a      	ldr	r2, [pc, #424]	; (d5c58 <_ZN12Adafruit_GPS9data_initEv+0x344>)
   d5ab0:	2119      	movs	r1, #25
   d5ab2:	f7ff fef7 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char PITCHlabel[] = "Pitch";
  static char PITCHunit[] = "Deg Bow Up";
  initDataValue(NMEA_PITCH, PITCHlabel, Anglefmt, PITCHunit, 0,
                NMEA_BOAT_ANGLE); // type: angle +/-180 2
   d5ab6:	4b69      	ldr	r3, [pc, #420]	; (d5c5c <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d5ab8:	9602      	str	r6, [sp, #8]
   d5aba:	9300      	str	r3, [sp, #0]
   d5abc:	4628      	mov	r0, r5
   d5abe:	9401      	str	r4, [sp, #4]
   d5ac0:	4b56      	ldr	r3, [pc, #344]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d5ac2:	4a67      	ldr	r2, [pc, #412]	; (d5c60 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);

  static char LOGlabel[] = "Log";
  static char LOGfmt[] = "%6.0f";
  static char LOGunit[] = "NM";
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
   d5ac4:	4e67      	ldr	r6, [pc, #412]	; (d5c64 <_ZN12Adafruit_GPS9data_initEv+0x350>)
                NMEA_BOAT_ANGLE); // type: angle +/-180 2

  static char PITCHlabel[] = "Pitch";
  static char PITCHunit[] = "Deg Bow Up";
  initDataValue(NMEA_PITCH, PITCHlabel, Anglefmt, PITCHunit, 0,
                NMEA_BOAT_ANGLE); // type: angle +/-180 2
   d5ac6:	211a      	movs	r1, #26
   d5ac8:	f7ff feec 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  static char HDGlabel[] = "HDG";
  initDataValue(NMEA_HDG, HDGlabel, Anglefmt, MagAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
   d5acc:	4b66      	ldr	r3, [pc, #408]	; (d5c68 <_ZN12Adafruit_GPS9data_initEv+0x354>)
   d5ace:	f8cd 8008 	str.w	r8, [sp, #8]
   d5ad2:	9300      	str	r3, [sp, #0]
   d5ad4:	4628      	mov	r0, r5
   d5ad6:	9401      	str	r4, [sp, #4]
   d5ad8:	4b50      	ldr	r3, [pc, #320]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d5ada:	4a64      	ldr	r2, [pc, #400]	; (d5c6c <_ZN12Adafruit_GPS9data_initEv+0x358>)
   d5adc:	211b      	movs	r1, #27
   d5ade:	f7ff fee1 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char HDTlabel[] = "HDG";
  initDataValue(NMEA_HDT, HDTlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
   d5ae2:	f8cd 8008 	str.w	r8, [sp, #8]
   d5ae6:	f8cd 9000 	str.w	r9, [sp]
   d5aea:	4628      	mov	r0, r5
   d5aec:	9401      	str	r4, [sp, #4]
   d5aee:	4b4b      	ldr	r3, [pc, #300]	; (d5c1c <_ZN12Adafruit_GPS9data_initEv+0x308>)
   d5af0:	4a5f      	ldr	r2, [pc, #380]	; (d5c70 <_ZN12Adafruit_GPS9data_initEv+0x35c>)

  static char TEMPERATURE_M1label[] = "Temp 1";
  static char TEMPERATURE_M1fmt[] = "%6.0f";
  static char TEMPERATURE_M1unit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
                TEMPERATURE_M1unit);
   d5af2:	f8df 91ec 	ldr.w	r9, [pc, #492]	; d5ce0 <_ZN12Adafruit_GPS9data_initEv+0x3cc>

  static char PRESSURE_M1label[] = "Oil 1";
  static char PRESSURE_M1fmt[] = "%6.0f";
  static char PRESSURE_M1unit[] = "kPa";
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
                PRESSURE_M1unit);
   d5af6:	f8df 81ec 	ldr.w	r8, [pc, #492]	; d5ce4 <_ZN12Adafruit_GPS9data_initEv+0x3d0>
  initDataValue(NMEA_HDG, HDGlabel, Anglefmt, MagAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11

  static char HDTlabel[] = "HDG";
  initDataValue(NMEA_HDT, HDTlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
   d5afa:	211e      	movs	r1, #30
   d5afc:	f7ff fed2 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VTWlabel[] = "VTW";
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);
   d5b00:	9700      	str	r7, [sp, #0]
   d5b02:	4628      	mov	r0, r5
   d5b04:	9402      	str	r4, [sp, #8]
   d5b06:	9401      	str	r4, [sp, #4]
   d5b08:	4b42      	ldr	r3, [pc, #264]	; (d5c14 <_ZN12Adafruit_GPS9data_initEv+0x300>)
   d5b0a:	4a5a      	ldr	r2, [pc, #360]	; (d5c74 <_ZN12Adafruit_GPS9data_initEv+0x360>)

  static char VOLTAGE_M1label[] = "Motor 1";
  static char VOLTAGE_M1fmt[] = "%6.2f";
  static char VOLTAGE_M1unit[] = "Volts";
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
                VOLTAGE_M1unit);
   d5b0c:	4f5a      	ldr	r7, [pc, #360]	; (d5c78 <_ZN12Adafruit_GPS9data_initEv+0x364>)
  static char HDTlabel[] = "HDG";
  initDataValue(NMEA_HDT, HDTlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11

  static char VTWlabel[] = "VTW";
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);
   d5b0e:	2121      	movs	r1, #33	; 0x21
   d5b10:	f7ff fec8 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LOGlabel[] = "Log";
  static char LOGfmt[] = "%6.0f";
  static char LOGunit[] = "NM";
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
   d5b14:	9600      	str	r6, [sp, #0]
   d5b16:	4628      	mov	r0, r5
   d5b18:	9402      	str	r4, [sp, #8]
   d5b1a:	9401      	str	r4, [sp, #4]
   d5b1c:	4b57      	ldr	r3, [pc, #348]	; (d5c7c <_ZN12Adafruit_GPS9data_initEv+0x368>)
   d5b1e:	4a58      	ldr	r2, [pc, #352]	; (d5c80 <_ZN12Adafruit_GPS9data_initEv+0x36c>)
   d5b20:	2122      	movs	r1, #34	; 0x22
   d5b22:	f7ff febf 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LOGRlabel[] = "Trip";
  static char LOGRfmt[] = "%6.2f";
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);
   d5b26:	9600      	str	r6, [sp, #0]
   d5b28:	4628      	mov	r0, r5
   d5b2a:	9402      	str	r4, [sp, #8]
   d5b2c:	9401      	str	r4, [sp, #4]
   d5b2e:	4b55      	ldr	r3, [pc, #340]	; (d5c84 <_ZN12Adafruit_GPS9data_initEv+0x370>)
   d5b30:	4a55      	ldr	r2, [pc, #340]	; (d5c88 <_ZN12Adafruit_GPS9data_initEv+0x374>)

  static char CURRENT_M1label[] = "Motor 1";
  static char CURRENT_M1fmt[] = "%6.1f";
  static char CURRENT_M1unit[] = "Amps";
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
                CURRENT_M1unit);
   d5b32:	4e56      	ldr	r6, [pc, #344]	; (d5c8c <_ZN12Adafruit_GPS9data_initEv+0x378>)
  static char LOGunit[] = "NM";
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);

  static char LOGRlabel[] = "Trip";
  static char LOGRfmt[] = "%6.2f";
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);
   d5b34:	2122      	movs	r1, #34	; 0x22
   d5b36:	f7ff feb5 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char DEPTHlabel[] = "Depth";
  static char DEPTHfmt[] = "%6.1f";
  static char DEPTHunit[] = "m";
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
   d5b3a:	4b55      	ldr	r3, [pc, #340]	; (d5c90 <_ZN12Adafruit_GPS9data_initEv+0x37c>)
   d5b3c:	9300      	str	r3, [sp, #0]
   d5b3e:	4628      	mov	r0, r5
   d5b40:	9402      	str	r4, [sp, #8]
   d5b42:	9401      	str	r4, [sp, #4]
   d5b44:	4b53      	ldr	r3, [pc, #332]	; (d5c94 <_ZN12Adafruit_GPS9data_initEv+0x380>)
   d5b46:	4a54      	ldr	r2, [pc, #336]	; (d5c98 <_ZN12Adafruit_GPS9data_initEv+0x384>)
   d5b48:	2124      	movs	r1, #36	; 0x24
   d5b4a:	f7ff feab 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char RPM_M1label[] = "Motor 1";
  static char RPM_M1fmt[] = "%6.0f";
  static char RPM_M1unit[] = "RPM";
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
   d5b4e:	4628      	mov	r0, r5
   d5b50:	9402      	str	r4, [sp, #8]
   d5b52:	9401      	str	r4, [sp, #4]
   d5b54:	f8cd a000 	str.w	sl, [sp]
   d5b58:	4b50      	ldr	r3, [pc, #320]	; (d5c9c <_ZN12Adafruit_GPS9data_initEv+0x388>)
   d5b5a:	4a51      	ldr	r2, [pc, #324]	; (d5ca0 <_ZN12Adafruit_GPS9data_initEv+0x38c>)
   d5b5c:	2125      	movs	r1, #37	; 0x25
   d5b5e:	f7ff fea1 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TEMPERATURE_M1label[] = "Temp 1";
  static char TEMPERATURE_M1fmt[] = "%6.0f";
  static char TEMPERATURE_M1unit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
                TEMPERATURE_M1unit);
   d5b62:	4628      	mov	r0, r5
   d5b64:	9402      	str	r4, [sp, #8]
   d5b66:	9401      	str	r4, [sp, #4]
   d5b68:	f8cd 9000 	str.w	r9, [sp]
   d5b6c:	4b4d      	ldr	r3, [pc, #308]	; (d5ca4 <_ZN12Adafruit_GPS9data_initEv+0x390>)
   d5b6e:	4a4e      	ldr	r2, [pc, #312]	; (d5ca8 <_ZN12Adafruit_GPS9data_initEv+0x394>)
   d5b70:	2126      	movs	r1, #38	; 0x26
   d5b72:	f7ff fe97 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char PRESSURE_M1label[] = "Oil 1";
  static char PRESSURE_M1fmt[] = "%6.0f";
  static char PRESSURE_M1unit[] = "kPa";
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
                PRESSURE_M1unit);
   d5b76:	4628      	mov	r0, r5
   d5b78:	9402      	str	r4, [sp, #8]
   d5b7a:	9401      	str	r4, [sp, #4]
   d5b7c:	f8cd 8000 	str.w	r8, [sp]
   d5b80:	4b4a      	ldr	r3, [pc, #296]	; (d5cac <_ZN12Adafruit_GPS9data_initEv+0x398>)
   d5b82:	4a4b      	ldr	r2, [pc, #300]	; (d5cb0 <_ZN12Adafruit_GPS9data_initEv+0x39c>)
   d5b84:	2127      	movs	r1, #39	; 0x27
   d5b86:	f7ff fe8d 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VOLTAGE_M1label[] = "Motor 1";
  static char VOLTAGE_M1fmt[] = "%6.2f";
  static char VOLTAGE_M1unit[] = "Volts";
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
                VOLTAGE_M1unit);
   d5b8a:	4628      	mov	r0, r5
   d5b8c:	9402      	str	r4, [sp, #8]
   d5b8e:	9401      	str	r4, [sp, #4]
   d5b90:	9700      	str	r7, [sp, #0]
   d5b92:	4b48      	ldr	r3, [pc, #288]	; (d5cb4 <_ZN12Adafruit_GPS9data_initEv+0x3a0>)
   d5b94:	4a48      	ldr	r2, [pc, #288]	; (d5cb8 <_ZN12Adafruit_GPS9data_initEv+0x3a4>)
   d5b96:	2128      	movs	r1, #40	; 0x28
   d5b98:	f7ff fe84 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char CURRENT_M1label[] = "Motor 1";
  static char CURRENT_M1fmt[] = "%6.1f";
  static char CURRENT_M1unit[] = "Amps";
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
                CURRENT_M1unit);
   d5b9c:	4628      	mov	r0, r5
   d5b9e:	9402      	str	r4, [sp, #8]
   d5ba0:	9401      	str	r4, [sp, #4]
   d5ba2:	9600      	str	r6, [sp, #0]
   d5ba4:	4b45      	ldr	r3, [pc, #276]	; (d5cbc <_ZN12Adafruit_GPS9data_initEv+0x3a8>)
   d5ba6:	4a46      	ldr	r2, [pc, #280]	; (d5cc0 <_ZN12Adafruit_GPS9data_initEv+0x3ac>)
   d5ba8:	2129      	movs	r1, #41	; 0x29
   d5baa:	f7ff fe7b 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char RPM_M2label[] = "Motor 2";
  initDataValue(NMEA_RPM_M2, RPM_M2label, RPM_M1fmt, RPM_M1unit);
   d5bae:	4628      	mov	r0, r5
   d5bb0:	9402      	str	r4, [sp, #8]
   d5bb2:	9401      	str	r4, [sp, #4]
   d5bb4:	f8cd a000 	str.w	sl, [sp]
   d5bb8:	4b38      	ldr	r3, [pc, #224]	; (d5c9c <_ZN12Adafruit_GPS9data_initEv+0x388>)
   d5bba:	4a42      	ldr	r2, [pc, #264]	; (d5cc4 <_ZN12Adafruit_GPS9data_initEv+0x3b0>)
   d5bbc:	212a      	movs	r1, #42	; 0x2a
   d5bbe:	f7ff fe71 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TEMPERATURE_M2label[] = "Temp 2";
  initDataValue(NMEA_TEMPERATURE_M2, TEMPERATURE_M2label, TEMPERATURE_M1fmt,
                TEMPERATURE_M1unit);
   d5bc2:	4628      	mov	r0, r5
   d5bc4:	9402      	str	r4, [sp, #8]
   d5bc6:	9401      	str	r4, [sp, #4]
   d5bc8:	f8cd 9000 	str.w	r9, [sp]
   d5bcc:	4b35      	ldr	r3, [pc, #212]	; (d5ca4 <_ZN12Adafruit_GPS9data_initEv+0x390>)
   d5bce:	4a3e      	ldr	r2, [pc, #248]	; (d5cc8 <_ZN12Adafruit_GPS9data_initEv+0x3b4>)
   d5bd0:	212b      	movs	r1, #43	; 0x2b
   d5bd2:	f7ff fe67 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char PRESSURE_M2label[] = "Oil 2";
  initDataValue(NMEA_PRESSURE_M2, PRESSURE_M2label, PRESSURE_M1fmt,
                PRESSURE_M1unit);
   d5bd6:	4628      	mov	r0, r5
   d5bd8:	9402      	str	r4, [sp, #8]
   d5bda:	9401      	str	r4, [sp, #4]
   d5bdc:	f8cd 8000 	str.w	r8, [sp]
   d5be0:	4b32      	ldr	r3, [pc, #200]	; (d5cac <_ZN12Adafruit_GPS9data_initEv+0x398>)
   d5be2:	4a3a      	ldr	r2, [pc, #232]	; (d5ccc <_ZN12Adafruit_GPS9data_initEv+0x3b8>)
   d5be4:	212c      	movs	r1, #44	; 0x2c
   d5be6:	f7ff fe5d 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VOLTAGE_M2label[] = "Motor 2";
  initDataValue(NMEA_VOLTAGE_M2, VOLTAGE_M2label, VOLTAGE_M1fmt,
                VOLTAGE_M1unit);
   d5bea:	4628      	mov	r0, r5
   d5bec:	e07c      	b.n	d5ce8 <_ZN12Adafruit_GPS9data_initEv+0x3d4>
   d5bee:	bf00      	nop
   d5bf0:	2003d509 	.word	0x2003d509
   d5bf4:	2003d482 	.word	0x2003d482
   d5bf8:	2003d523 	.word	0x2003d523
   d5bfc:	2003d4fb 	.word	0x2003d4fb
   d5c00:	2003d498 	.word	0x2003d498
   d5c04:	2003d534 	.word	0x2003d534
   d5c08:	2003d57c 	.word	0x2003d57c
   d5c0c:	2003d562 	.word	0x2003d562
   d5c10:	2003d4aa 	.word	0x2003d4aa
   d5c14:	2003d4db 	.word	0x2003d4db
   d5c18:	2003d445 	.word	0x2003d445
   d5c1c:	2003d55c 	.word	0x2003d55c
   d5c20:	2003d453 	.word	0x2003d453
   d5c24:	2003d400 	.word	0x2003d400
   d5c28:	2003d4bf 	.word	0x2003d4bf
   d5c2c:	2003d4bb 	.word	0x2003d4bb
   d5c30:	2003d4f3 	.word	0x2003d4f3
   d5c34:	2003d511 	.word	0x2003d511
   d5c38:	2003d51d 	.word	0x2003d51d
   d5c3c:	2003d412 	.word	0x2003d412
   d5c40:	2003d50d 	.word	0x2003d50d
   d5c44:	2003d54a 	.word	0x2003d54a
   d5c48:	2003d5b5 	.word	0x2003d5b5
   d5c4c:	2003d4b1 	.word	0x2003d4b1
   d5c50:	2003d4c9 	.word	0x2003d4c9
   d5c54:	2003d4e4 	.word	0x2003d4e4
   d5c58:	2003d424 	.word	0x2003d424
   d5c5c:	2003d5aa 	.word	0x2003d5aa
   d5c60:	2003d43d 	.word	0x2003d43d
   d5c64:	2003d4e1 	.word	0x2003d4e1
   d5c68:	2003d54e 	.word	0x2003d54e
   d5c6c:	2003d47e 	.word	0x2003d47e
   d5c70:	2003d494 	.word	0x2003d494
   d5c74:	2003d3fc 	.word	0x2003d3fc
   d5c78:	2003d464 	.word	0x2003d464
   d5c7c:	2003d46a 	.word	0x2003d46a
   d5c80:	2003d4c5 	.word	0x2003d4c5
   d5c84:	2003d4b5 	.word	0x2003d4b5
   d5c88:	2003d40d 	.word	0x2003d40d
   d5c8c:	2003d4d0 	.word	0x2003d4d0
   d5c90:	2003d443 	.word	0x2003d443
   d5c94:	2003d4a4 	.word	0x2003d4a4
   d5c98:	2003d4ed 	.word	0x2003d4ed
   d5c9c:	2003d538 	.word	0x2003d538
   d5ca0:	2003d476 	.word	0x2003d476
   d5ca4:	2003d5a4 	.word	0x2003d5a4
   d5ca8:	2003d575 	.word	0x2003d575
   d5cac:	2003d528 	.word	0x2003d528
   d5cb0:	2003d45e 	.word	0x2003d45e
   d5cb4:	2003d416 	.word	0x2003d416
   d5cb8:	2003d41c 	.word	0x2003d41c
   d5cbc:	2003d431 	.word	0x2003d431
   d5cc0:	2003d515 	.word	0x2003d515
   d5cc4:	2003d501 	.word	0x2003d501
   d5cc8:	2003d457 	.word	0x2003d457
   d5ccc:	2003d407 	.word	0x2003d407
   d5cd0:	2003d48b 	.word	0x2003d48b
   d5cd4:	2003d53e 	.word	0x2003d53e
   d5cd8:	2003d49c 	.word	0x2003d49c
   d5cdc:	2003d42d 	.word	0x2003d42d
   d5ce0:	2003d59e 	.word	0x2003d59e
   d5ce4:	2003d429 	.word	0x2003d429
   d5ce8:	9402      	str	r4, [sp, #8]
   d5cea:	9401      	str	r4, [sp, #4]
   d5cec:	9700      	str	r7, [sp, #0]
   d5cee:	4b1c      	ldr	r3, [pc, #112]	; (d5d60 <_ZN12Adafruit_GPS9data_initEv+0x44c>)
   d5cf0:	4a1c      	ldr	r2, [pc, #112]	; (d5d64 <_ZN12Adafruit_GPS9data_initEv+0x450>)
   d5cf2:	212d      	movs	r1, #45	; 0x2d
   d5cf4:	f7ff fdd6 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char CURRENT_M2label[] = "Motor 2";
  initDataValue(NMEA_CURRENT_M2, CURRENT_M2label, CURRENT_M1fmt,
                CURRENT_M1unit);
   d5cf8:	4628      	mov	r0, r5
   d5cfa:	9402      	str	r4, [sp, #8]
   d5cfc:	9401      	str	r4, [sp, #4]
   d5cfe:	9600      	str	r6, [sp, #0]
   d5d00:	4b19      	ldr	r3, [pc, #100]	; (d5d68 <_ZN12Adafruit_GPS9data_initEv+0x454>)
   d5d02:	4a1a      	ldr	r2, [pc, #104]	; (d5d6c <_ZN12Adafruit_GPS9data_initEv+0x458>)
   d5d04:	212e      	movs	r1, #46	; 0x2e
   d5d06:	f7ff fdcd 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TEMPERATURE_AIRlabel[] = "Air";
  static char TEMPERATURE_AIRfmt[] = "%6.1f";
  static char TEMPERATURE_AIRunit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_AIR, TEMPERATURE_AIRlabel, TEMPERATURE_AIRfmt,
                TEMPERATURE_AIRunit);
   d5d0a:	4b19      	ldr	r3, [pc, #100]	; (d5d70 <_ZN12Adafruit_GPS9data_initEv+0x45c>)
   d5d0c:	9300      	str	r3, [sp, #0]
   d5d0e:	4628      	mov	r0, r5
   d5d10:	9402      	str	r4, [sp, #8]
   d5d12:	9401      	str	r4, [sp, #4]
   d5d14:	4b17      	ldr	r3, [pc, #92]	; (d5d74 <_ZN12Adafruit_GPS9data_initEv+0x460>)
   d5d16:	4a18      	ldr	r2, [pc, #96]	; (d5d78 <_ZN12Adafruit_GPS9data_initEv+0x464>)
   d5d18:	212f      	movs	r1, #47	; 0x2f
   d5d1a:	f7ff fdc3 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TEMPERATURE_WATERlabel[] = "Water";
  static char TEMPERATURE_WATERfmt[] = "%6.1f";
  static char TEMPERATURE_WATERunit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_WATER, TEMPERATURE_WATERlabel,
                TEMPERATURE_WATERfmt, TEMPERATURE_WATERunit);
   d5d1e:	4b17      	ldr	r3, [pc, #92]	; (d5d7c <_ZN12Adafruit_GPS9data_initEv+0x468>)
   d5d20:	9300      	str	r3, [sp, #0]
   d5d22:	4628      	mov	r0, r5
   d5d24:	9402      	str	r4, [sp, #8]
   d5d26:	9401      	str	r4, [sp, #4]
   d5d28:	4b15      	ldr	r3, [pc, #84]	; (d5d80 <_ZN12Adafruit_GPS9data_initEv+0x46c>)
   d5d2a:	4a16      	ldr	r2, [pc, #88]	; (d5d84 <_ZN12Adafruit_GPS9data_initEv+0x470>)
   d5d2c:	2130      	movs	r1, #48	; 0x30
   d5d2e:	f7ff fdb9 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char HUMIDITYlabel[] = "Humidity";
  static char HUMIDITYfmt[] = "%6.0f";
  static char HUMIDITYunit[] = "% RH";
  initDataValue(NMEA_HUMIDITY, HUMIDITYlabel, HUMIDITYfmt, HUMIDITYunit);
   d5d32:	4b15      	ldr	r3, [pc, #84]	; (d5d88 <_ZN12Adafruit_GPS9data_initEv+0x474>)
   d5d34:	9300      	str	r3, [sp, #0]
   d5d36:	4628      	mov	r0, r5
   d5d38:	9402      	str	r4, [sp, #8]
   d5d3a:	9401      	str	r4, [sp, #4]
   d5d3c:	4b13      	ldr	r3, [pc, #76]	; (d5d8c <_ZN12Adafruit_GPS9data_initEv+0x478>)
   d5d3e:	4a14      	ldr	r2, [pc, #80]	; (d5d90 <_ZN12Adafruit_GPS9data_initEv+0x47c>)
   d5d40:	2131      	movs	r1, #49	; 0x31
   d5d42:	f7ff fdaf 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char BAROMETERlabel[] = "Barometer";
  static char BAROMETERfmt[] = "%6.0f";
  static char BAROMETERunit[] = "Pa";
  initDataValue(NMEA_BAROMETER, BAROMETERlabel, BAROMETERfmt, BAROMETERunit);
   d5d46:	4b13      	ldr	r3, [pc, #76]	; (d5d94 <_ZN12Adafruit_GPS9data_initEv+0x480>)
   d5d48:	9300      	str	r3, [sp, #0]
   d5d4a:	9402      	str	r4, [sp, #8]
   d5d4c:	9401      	str	r4, [sp, #4]
   d5d4e:	4b12      	ldr	r3, [pc, #72]	; (d5d98 <_ZN12Adafruit_GPS9data_initEv+0x484>)
   d5d50:	4a12      	ldr	r2, [pc, #72]	; (d5d9c <_ZN12Adafruit_GPS9data_initEv+0x488>)
   d5d52:	2132      	movs	r1, #50	; 0x32
   d5d54:	4628      	mov	r0, r5
   d5d56:	f7ff fda5 	bl	d58a4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
#endif // NMEA_EXTENSIONS
}
   d5d5a:	b005      	add	sp, #20
   d5d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d60:	2003d416 	.word	0x2003d416
   d5d64:	2003d590 	.word	0x2003d590
   d5d68:	2003d431 	.word	0x2003d431
   d5d6c:	2003d583 	.word	0x2003d583
   d5d70:	2003d470 	.word	0x2003d470
   d5d74:	2003d568 	.word	0x2003d568
   d5d78:	2003d571 	.word	0x2003d571
   d5d7c:	2003d52e 	.word	0x2003d52e
   d5d80:	2003d556 	.word	0x2003d556
   d5d84:	2003d437 	.word	0x2003d437
   d5d88:	2003d58b 	.word	0x2003d58b
   d5d8c:	2003d4d5 	.word	0x2003d4d5
   d5d90:	2003d541 	.word	0x2003d541
   d5d94:	2003d56e 	.word	0x2003d56e
   d5d98:	2003d598 	.word	0x2003d598
   d5d9c:	2003d449 	.word	0x2003d449

000d5da0 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>:
    @param idx The data index for the value to have history removed
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
  if (idx < NMEA_MAX_INDEX) {
   d5da0:	293f      	cmp	r1, #63	; 0x3f
    @brief Remove history from a data value table entry, if it has been added.
    @param idx The data index for the value to have history removed
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
   d5da2:	b510      	push	{r4, lr}
  if (idx < NMEA_MAX_INDEX) {
   d5da4:	d80e      	bhi.n	d5dc4 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
   d5da6:	eb00 1441 	add.w	r4, r0, r1, lsl #5
    if (val[idx].hist == NULL)
   d5daa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d5dae:	b14b      	cbz	r3, d5dc4 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
      return;
    free(val[idx].hist->data);
   d5db0:	6818      	ldr	r0, [r3, #0]
   d5db2:	f000 fa91 	bl	d62d8 <free>
    free(val[idx].hist);
   d5db6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d5dba:	f000 fa8d 	bl	d62d8 <free>
    val[idx].hist = NULL;
   d5dbe:	2300      	movs	r3, #0
   d5dc0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d5dc4:	bd10      	pop	{r4, pc}

000d5dc6 <_GLOBAL__sub_I__ZN12Adafruit_GPS12newDataValueE12nmea_index_tf>:
   d5dc6:	f000 b959 	b.w	d607c <HAL_Pin_Map>
	...

000d5dcc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <HAL_USB_USART_Init+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	681b      	ldr	r3, [r3, #0]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	0003024c 	.word	0x0003024c

000d5ddc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <HAL_USB_USART_Begin+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	685b      	ldr	r3, [r3, #4]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003024c 	.word	0x0003024c

000d5dec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <HAL_USB_USART_Available_Data+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	691b      	ldr	r3, [r3, #16]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003024c 	.word	0x0003024c

000d5dfc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	695b      	ldr	r3, [r3, #20]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003024c 	.word	0x0003024c

000d5e0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <HAL_USB_USART_Receive_Data+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	699b      	ldr	r3, [r3, #24]
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003024c 	.word	0x0003024c

000d5e1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <HAL_USB_USART_Send_Data+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	69db      	ldr	r3, [r3, #28]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	0003024c 	.word	0x0003024c

000d5e2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <HAL_USB_USART_Flush_Data+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	6a1b      	ldr	r3, [r3, #32]
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	0003024c 	.word	0x0003024c

000d5e3c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <HAL_I2C_Begin+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	68db      	ldr	r3, [r3, #12]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030228 	.word	0x00030228

000d5e4c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <HAL_I2C_Begin_Transmission+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	699b      	ldr	r3, [r3, #24]
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030228 	.word	0x00030228

000d5e5c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <HAL_I2C_End_Transmission+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	69db      	ldr	r3, [r3, #28]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030228 	.word	0x00030228

000d5e6c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <HAL_I2C_Write_Data+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	6a1b      	ldr	r3, [r3, #32]
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030228 	.word	0x00030228

000d5e7c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <HAL_I2C_Available_Data+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030228 	.word	0x00030228

000d5e8c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <HAL_I2C_Read_Data+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030228 	.word	0x00030228

000d5e9c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <HAL_I2C_Peek_Data+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030228 	.word	0x00030228

000d5eac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <HAL_I2C_Flush_Data+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030228 	.word	0x00030228

000d5ebc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <HAL_I2C_Is_Enabled+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030228 	.word	0x00030228

000d5ecc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <HAL_I2C_Init+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030228 	.word	0x00030228

000d5edc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <HAL_USART_Init+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	681b      	ldr	r3, [r3, #0]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	0003023c 	.word	0x0003023c

000d5eec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <HAL_USART_Write_Data+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	68db      	ldr	r3, [r3, #12]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	0003023c 	.word	0x0003023c

000d5efc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <HAL_USART_Available_Data+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	691b      	ldr	r3, [r3, #16]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	0003023c 	.word	0x0003023c

000d5f0c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <HAL_USART_Read_Data+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	695b      	ldr	r3, [r3, #20]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	0003023c 	.word	0x0003023c

000d5f1c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <HAL_USART_Peek_Data+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	699b      	ldr	r3, [r3, #24]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	0003023c 	.word	0x0003023c

000d5f2c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <HAL_USART_Flush_Data+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	69db      	ldr	r3, [r3, #28]
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	0003023c 	.word	0x0003023c

000d5f3c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <HAL_USART_Is_Enabled+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	6a1b      	ldr	r3, [r3, #32]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	0003023c 	.word	0x0003023c

000d5f4c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <HAL_USART_Available_Data_For_Write+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	0003023c 	.word	0x0003023c

000d5f5c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <HAL_USART_BeginConfig+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	0003023c 	.word	0x0003023c

000d5f6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <inet_inet_ntop+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	695b      	ldr	r3, [r3, #20]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030264 	.word	0x00030264

000d5f7c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <os_thread_is_current+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	689b      	ldr	r3, [r3, #8]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030248 	.word	0x00030248

000d5f8c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <os_thread_join+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	691b      	ldr	r3, [r3, #16]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030248 	.word	0x00030248

000d5f9c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <os_thread_cleanup+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	695b      	ldr	r3, [r3, #20]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030248 	.word	0x00030248

000d5fac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <os_mutex_recursive_create+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030248 	.word	0x00030248

000d5fbc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <os_mutex_recursive_destroy+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030248 	.word	0x00030248

000d5fcc <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <HAL_Core_System_Reset_Ex+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030234 	.word	0x00030234

000d5fdc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_RNG_GetRandomNumber+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	685b      	ldr	r3, [r3, #4]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030218 	.word	0x00030218

000d5fec <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	695b      	ldr	r3, [r3, #20]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030218 	.word	0x00030218

000d5ffc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_SPI_Begin+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	681b      	ldr	r3, [r3, #0]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030230 	.word	0x00030230

000d600c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_SPI_Send_Receive_Data+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	695b      	ldr	r3, [r3, #20]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030230 	.word	0x00030230

000d601c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <HAL_SPI_Init+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	69db      	ldr	r3, [r3, #28]
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030230 	.word	0x00030230

000d602c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <HAL_SPI_Is_Enabled+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6a1b      	ldr	r3, [r3, #32]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030230 	.word	0x00030230

000d603c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_SPI_Info+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030230 	.word	0x00030230

000d604c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <HAL_SPI_Set_Settings+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030230 	.word	0x00030230

000d605c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <HAL_SPI_Acquire+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030230 	.word	0x00030230

000d606c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <HAL_SPI_Release+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030230 	.word	0x00030230

000d607c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <HAL_Pin_Map+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	681b      	ldr	r3, [r3, #0]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	0003022c 	.word	0x0003022c

000d608c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <HAL_Validate_Pin_Function+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	685b      	ldr	r3, [r3, #4]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	0003022c 	.word	0x0003022c

000d609c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <HAL_Pin_Mode+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	689b      	ldr	r3, [r3, #8]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	0003022c 	.word	0x0003022c

000d60ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <HAL_Get_Pin_Mode+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	68db      	ldr	r3, [r3, #12]
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	0003022c 	.word	0x0003022c

000d60bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <HAL_GPIO_Write+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	691b      	ldr	r3, [r3, #16]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	0003022c 	.word	0x0003022c

000d60cc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <HAL_ADC_Read+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003022c 	.word	0x0003022c

000d60dc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <netdb_freeaddrinfo+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	689b      	ldr	r3, [r3, #8]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	00030268 	.word	0x00030268

000d60ec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <netdb_getaddrinfo+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	68db      	ldr	r3, [r3, #12]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	00030268 	.word	0x00030268

000d60fc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <LED_SetSignalingColor+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	685b      	ldr	r3, [r3, #4]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	00030260 	.word	0x00030260

000d610c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <LED_Signaling_Start+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	689b      	ldr	r3, [r3, #8]
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	00030260 	.word	0x00030260

000d611c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <LED_Signaling_Stop+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	68db      	ldr	r3, [r3, #12]
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	00030260 	.word	0x00030260

000d612c <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <LED_SetBrightness+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	691b      	ldr	r3, [r3, #16]
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	00030260 	.word	0x00030260

000d613c <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <LED_RGB_IsOverRidden+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	699b      	ldr	r3, [r3, #24]
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030260 	.word	0x00030260

000d614c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <LED_On+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	69db      	ldr	r3, [r3, #28]
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030260 	.word	0x00030260

000d615c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <log_message+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030260 	.word	0x00030260

000d616c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <spark_cloud_flag_connected+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	695b      	ldr	r3, [r3, #20]
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030244 	.word	0x00030244

000d617c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <spark_deviceID+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	69db      	ldr	r3, [r3, #28]
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030244 	.word	0x00030244

000d618c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <spark_send_event+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6a1b      	ldr	r3, [r3, #32]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030244 	.word	0x00030244

000d619c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030244 	.word	0x00030244

000d61ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <network_connect+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	685b      	ldr	r3, [r3, #4]
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030240 	.word	0x00030240

000d61bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <network_connecting+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	689b      	ldr	r3, [r3, #8]
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030240 	.word	0x00030240

000d61cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <network_disconnect+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	68db      	ldr	r3, [r3, #12]
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030240 	.word	0x00030240

000d61dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <network_ready+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	691b      	ldr	r3, [r3, #16]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030240 	.word	0x00030240

000d61ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <network_on+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	695b      	ldr	r3, [r3, #20]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	00030240 	.word	0x00030240

000d61fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <network_off+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	699b      	ldr	r3, [r3, #24]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	00030240 	.word	0x00030240

000d620c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <network_listen+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	69db      	ldr	r3, [r3, #28]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	00030240 	.word	0x00030240

000d621c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <network_listening+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	6a1b      	ldr	r3, [r3, #32]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	00030240 	.word	0x00030240

000d622c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <network_set_listen_timeout+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	00030240 	.word	0x00030240

000d623c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <network_get_listen_timeout+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030240 	.word	0x00030240

000d624c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <set_system_mode+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	685b      	ldr	r3, [r3, #4]
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	00030220 	.word	0x00030220

000d625c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <system_delay_ms+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	695b      	ldr	r3, [r3, #20]
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030220 	.word	0x00030220

000d626c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <application_thread_current+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030220 	.word	0x00030220

000d627c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <application_thread_invoke+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	00030220 	.word	0x00030220

000d628c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b03      	ldr	r3, [pc, #12]	; (d629c <system_ctrl_set_app_request_handler+0x10>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6296:	9301      	str	r3, [sp, #4]
   d6298:	bd08      	pop	{r3, pc}
   d629a:	0000      	.short	0x0000
   d629c:	00030220 	.word	0x00030220

000d62a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b03      	ldr	r3, [pc, #12]	; (d62b0 <system_ctrl_set_result+0x10>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d62aa:	9301      	str	r3, [sp, #4]
   d62ac:	bd08      	pop	{r3, pc}
   d62ae:	0000      	.short	0x0000
   d62b0:	00030220 	.word	0x00030220

000d62b4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b03      	ldr	r3, [pc, #12]	; (d62c4 <system_sleep_ext+0x10>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d62be:	9301      	str	r3, [sp, #4]
   d62c0:	bd08      	pop	{r3, pc}
   d62c2:	0000      	.short	0x0000
   d62c4:	00030220 	.word	0x00030220

000d62c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <malloc+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	681b      	ldr	r3, [r3, #0]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	0003021c 	.word	0x0003021c

000d62d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <free+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	685b      	ldr	r3, [r3, #4]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	0003021c 	.word	0x0003021c

000d62e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <realloc+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	689b      	ldr	r3, [r3, #8]
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	0003021c 	.word	0x0003021c

000d62f8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <sprintf+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	68db      	ldr	r3, [r3, #12]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	0003021c 	.word	0x0003021c

000d6308 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <vsnprintf+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	0003021c 	.word	0x0003021c

000d6318 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <abort+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	0003021c 	.word	0x0003021c

000d6328 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <_malloc_r+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	0003021c 	.word	0x0003021c

000d6338 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <__errno+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	0003021c 	.word	0x0003021c

000d6348 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6348:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d634a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d634c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d634e:	b113      	cbz	r3, d6356 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6350:	2203      	movs	r2, #3
   d6352:	4601      	mov	r1, r0
   d6354:	4798      	blx	r3
    }
   d6356:	4620      	mov	r0, r4
   d6358:	bd10      	pop	{r4, pc}

000d635a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d635a:	2300      	movs	r3, #0
   d635c:	461a      	mov	r2, r3
   d635e:	6840      	ldr	r0, [r0, #4]
   d6360:	f7ff bf24 	b.w	d61ac <network_connect>

000d6364 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6364:	2200      	movs	r2, #0
   d6366:	2102      	movs	r1, #2
   d6368:	6840      	ldr	r0, [r0, #4]
   d636a:	f7ff bf2f 	b.w	d61cc <network_disconnect>

000d636e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d636e:	2200      	movs	r2, #0
   d6370:	4611      	mov	r1, r2
   d6372:	6840      	ldr	r0, [r0, #4]
   d6374:	f7ff bf22 	b.w	d61bc <network_connecting>

000d6378 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6378:	2200      	movs	r2, #0
   d637a:	4611      	mov	r1, r2
   d637c:	6840      	ldr	r0, [r0, #4]
   d637e:	f7ff bf2d 	b.w	d61dc <network_ready>

000d6382 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6382:	2300      	movs	r3, #0
   d6384:	461a      	mov	r2, r3
   d6386:	4619      	mov	r1, r3
   d6388:	6840      	ldr	r0, [r0, #4]
   d638a:	f7ff bf2f 	b.w	d61ec <network_on>

000d638e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d638e:	2300      	movs	r3, #0
   d6390:	461a      	mov	r2, r3
   d6392:	4619      	mov	r1, r3
   d6394:	6840      	ldr	r0, [r0, #4]
   d6396:	f7ff bf31 	b.w	d61fc <network_off>

000d639a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d639a:	2200      	movs	r2, #0
   d639c:	f081 0101 	eor.w	r1, r1, #1
   d63a0:	6840      	ldr	r0, [r0, #4]
   d63a2:	f7ff bf33 	b.w	d620c <network_listen>

000d63a6 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d63a6:	2200      	movs	r2, #0
   d63a8:	6840      	ldr	r0, [r0, #4]
   d63aa:	f7ff bf3f 	b.w	d622c <network_set_listen_timeout>

000d63ae <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63ae:	2200      	movs	r2, #0
   d63b0:	4611      	mov	r1, r2
   d63b2:	6840      	ldr	r0, [r0, #4]
   d63b4:	f7ff bf42 	b.w	d623c <network_get_listen_timeout>

000d63b8 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63b8:	2200      	movs	r2, #0
   d63ba:	4611      	mov	r1, r2
   d63bc:	6840      	ldr	r0, [r0, #4]
   d63be:	f7ff bf2d 	b.w	d621c <network_listening>

000d63c2 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63c6:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d63c8:	b095      	sub	sp, #84	; 0x54
   d63ca:	4616      	mov	r6, r2
   d63cc:	460d      	mov	r5, r1
   d63ce:	4607      	mov	r7, r0
    IPAddress addr;
   d63d0:	f000 fb92 	bl	d6af8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d63d4:	4621      	mov	r1, r4
   d63d6:	2220      	movs	r2, #32
   d63d8:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63da:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d63dc:	f002 fb99 	bl	d8b12 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d63e0:	2340      	movs	r3, #64	; 0x40
   d63e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d63e4:	4621      	mov	r1, r4
   d63e6:	466b      	mov	r3, sp
   d63e8:	aa0c      	add	r2, sp, #48	; 0x30
   d63ea:	4630      	mov	r0, r6
   d63ec:	f7ff fe7e 	bl	d60ec <netdb_getaddrinfo>
    if (!r) {
   d63f0:	4604      	mov	r4, r0
   d63f2:	2800      	cmp	r0, #0
   d63f4:	d144      	bne.n	d6480 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63f6:	4602      	mov	r2, r0
   d63f8:	2101      	movs	r1, #1
   d63fa:	6868      	ldr	r0, [r5, #4]
   d63fc:	f7ff feee 	bl	d61dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6400:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6402:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6404:	4622      	mov	r2, r4
   d6406:	6868      	ldr	r0, [r5, #4]
   d6408:	f7ff fee8 	bl	d61dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d640c:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d640e:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6410:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6412:	2e00      	cmp	r6, #0
   d6414:	d034      	beq.n	d6480 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6416:	2900      	cmp	r1, #0
   d6418:	d132      	bne.n	d6480 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d641a:	6873      	ldr	r3, [r6, #4]
   d641c:	2b02      	cmp	r3, #2
   d641e:	d002      	beq.n	d6426 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6420:	2b0a      	cmp	r3, #10
   d6422:	d009      	beq.n	d6438 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6424:	e02a      	b.n	d647c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6426:	f1b8 0f00 	cmp.w	r8, #0
   d642a:	d027      	beq.n	d647c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d642c:	6971      	ldr	r1, [r6, #20]
   d642e:	4638      	mov	r0, r7
   d6430:	3104      	adds	r1, #4
   d6432:	f000 fb8e 	bl	d6b52 <_ZN9IPAddressaSEPKh>
   d6436:	e020      	b.n	d647a <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6438:	f1b9 0f00 	cmp.w	r9, #0
   d643c:	d01e      	beq.n	d647c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d643e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6440:	2211      	movs	r2, #17
   d6442:	a801      	add	r0, sp, #4
   d6444:	f002 fb65 	bl	d8b12 <memset>
                    a.v = 6;
   d6448:	2306      	movs	r3, #6
   d644a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d644e:	ad01      	add	r5, sp, #4
   d6450:	f104 0308 	add.w	r3, r4, #8
   d6454:	3418      	adds	r4, #24
   d6456:	6818      	ldr	r0, [r3, #0]
   d6458:	6859      	ldr	r1, [r3, #4]
   d645a:	462a      	mov	r2, r5
   d645c:	c203      	stmia	r2!, {r0, r1}
   d645e:	3308      	adds	r3, #8
   d6460:	42a3      	cmp	r3, r4
   d6462:	4615      	mov	r5, r2
   d6464:	d1f7      	bne.n	d6456 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6466:	a901      	add	r1, sp, #4
   d6468:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d646a:	ad07      	add	r5, sp, #28
   d646c:	f000 fb52 	bl	d6b14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6472:	1d3c      	adds	r4, r7, #4
   d6474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6476:	682b      	ldr	r3, [r5, #0]
   d6478:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d647a:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d647c:	69f6      	ldr	r6, [r6, #28]
   d647e:	e7c8      	b.n	d6412 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6480:	9800      	ldr	r0, [sp, #0]
   d6482:	f7ff fe2b 	bl	d60dc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6486:	4638      	mov	r0, r7
   d6488:	b015      	add	sp, #84	; 0x54
   d648a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6490 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6490:	4b02      	ldr	r3, [pc, #8]	; (d649c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6492:	4a03      	ldr	r2, [pc, #12]	; (d64a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6494:	601a      	str	r2, [r3, #0]
   d6496:	2200      	movs	r2, #0
   d6498:	605a      	str	r2, [r3, #4]
   d649a:	4770      	bx	lr
   d649c:	2003e3d8 	.word	0x2003e3d8
   d64a0:	000d933c 	.word	0x000d933c

000d64a4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d64a4:	2200      	movs	r2, #0
   d64a6:	4611      	mov	r1, r2
   d64a8:	6840      	ldr	r0, [r0, #4]
   d64aa:	f7ff beb7 	b.w	d621c <network_listening>

000d64ae <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d64ae:	2200      	movs	r2, #0
   d64b0:	4611      	mov	r1, r2
   d64b2:	6840      	ldr	r0, [r0, #4]
   d64b4:	f7ff bec2 	b.w	d623c <network_get_listen_timeout>

000d64b8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d64b8:	2200      	movs	r2, #0
   d64ba:	6840      	ldr	r0, [r0, #4]
   d64bc:	f7ff beb6 	b.w	d622c <network_set_listen_timeout>

000d64c0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d64c0:	2200      	movs	r2, #0
   d64c2:	f081 0101 	eor.w	r1, r1, #1
   d64c6:	6840      	ldr	r0, [r0, #4]
   d64c8:	f7ff bea0 	b.w	d620c <network_listen>

000d64cc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d64cc:	2300      	movs	r3, #0
   d64ce:	461a      	mov	r2, r3
   d64d0:	2101      	movs	r1, #1
   d64d2:	6840      	ldr	r0, [r0, #4]
   d64d4:	f7ff be92 	b.w	d61fc <network_off>

000d64d8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d64d8:	2300      	movs	r3, #0
   d64da:	461a      	mov	r2, r3
   d64dc:	4619      	mov	r1, r3
   d64de:	6840      	ldr	r0, [r0, #4]
   d64e0:	f7ff be84 	b.w	d61ec <network_on>

000d64e4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d64e4:	2200      	movs	r2, #0
   d64e6:	4611      	mov	r1, r2
   d64e8:	6840      	ldr	r0, [r0, #4]
   d64ea:	f7ff be77 	b.w	d61dc <network_ready>

000d64ee <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64ee:	2200      	movs	r2, #0
   d64f0:	4611      	mov	r1, r2
   d64f2:	6840      	ldr	r0, [r0, #4]
   d64f4:	f7ff be62 	b.w	d61bc <network_connecting>

000d64f8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64f8:	2200      	movs	r2, #0
   d64fa:	2102      	movs	r1, #2
   d64fc:	6840      	ldr	r0, [r0, #4]
   d64fe:	f7ff be65 	b.w	d61cc <network_disconnect>

000d6502 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6502:	2300      	movs	r3, #0
   d6504:	461a      	mov	r2, r3
   d6506:	6840      	ldr	r0, [r0, #4]
   d6508:	f7ff be50 	b.w	d61ac <network_connect>

000d650c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d650c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d650e:	4605      	mov	r5, r0
   d6510:	b188      	cbz	r0, d6536 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6512:	6804      	ldr	r4, [r0, #0]
   d6514:	b14c      	cbz	r4, d652a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6516:	68a3      	ldr	r3, [r4, #8]
   d6518:	b11b      	cbz	r3, d6522 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d651a:	2203      	movs	r2, #3
   d651c:	4621      	mov	r1, r4
   d651e:	4620      	mov	r0, r4
   d6520:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6522:	2110      	movs	r1, #16
   d6524:	4620      	mov	r0, r4
   d6526:	f001 fa2d 	bl	d7984 <_ZdlPvj>
   d652a:	4628      	mov	r0, r5
   d652c:	2114      	movs	r1, #20
      }
   d652e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6532:	f001 ba27 	b.w	d7984 <_ZdlPvj>
   d6536:	bd38      	pop	{r3, r4, r5, pc}

000d6538 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6538:	b110      	cbz	r0, d6540 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d653a:	6803      	ldr	r3, [r0, #0]
   d653c:	685b      	ldr	r3, [r3, #4]
   d653e:	4718      	bx	r3
   d6540:	4770      	bx	lr

000d6542 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6542:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6544:	6803      	ldr	r3, [r0, #0]
   d6546:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6548:	b1bb      	cbz	r3, d657a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d654a:	6858      	ldr	r0, [r3, #4]
   d654c:	f7ff fd16 	bl	d5f7c <os_thread_is_current>
   d6550:	b978      	cbnz	r0, d6572 <_ZN6ThreadD1Ev+0x30>
   d6552:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6554:	7c5a      	ldrb	r2, [r3, #17]
   d6556:	b912      	cbnz	r2, d655e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6558:	6858      	ldr	r0, [r3, #4]
   d655a:	f7ff fd17 	bl	d5f8c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d655e:	6823      	ldr	r3, [r4, #0]
   d6560:	6858      	ldr	r0, [r3, #4]
   d6562:	f7ff fd1b 	bl	d5f9c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6566:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6568:	2300      	movs	r3, #0
   d656a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d656c:	b128      	cbz	r0, d657a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d656e:	f7ff ffcd 	bl	d650c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6572:	6820      	ldr	r0, [r4, #0]
   d6574:	b108      	cbz	r0, d657a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6576:	f7ff ffc9 	bl	d650c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d657a:	4620      	mov	r0, r4
   d657c:	bd10      	pop	{r4, pc}

000d657e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d657e:	b538      	push	{r3, r4, r5, lr}
   d6580:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6582:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6586:	b108      	cbz	r0, d658c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6588:	f7fd fd8b 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d658c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6590:	b108      	cbz	r0, d6596 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6592:	f7ff fd13 	bl	d5fbc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6596:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d659a:	b135      	cbz	r5, d65aa <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d659c:	4628      	mov	r0, r5
   d659e:	f7ff ffd0 	bl	d6542 <_ZN6ThreadD1Ev>
   d65a2:	2104      	movs	r1, #4
   d65a4:	4628      	mov	r0, r5
   d65a6:	f001 f9ed 	bl	d7984 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d65aa:	6820      	ldr	r0, [r4, #0]
   d65ac:	b108      	cbz	r0, d65b2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d65ae:	f7ff ffc3 	bl	d6538 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d65b2:	4620      	mov	r0, r4
   d65b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d65b8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d65b8:	b510      	push	{r4, lr}
   d65ba:	4b04      	ldr	r3, [pc, #16]	; (d65cc <_ZN5spark9MeshClassD1Ev+0x14>)
   d65bc:	4604      	mov	r4, r0
   d65be:	f840 3b08 	str.w	r3, [r0], #8
   d65c2:	f7ff ffdc 	bl	d657e <_ZN5spark11MeshPublishD1Ev>
   d65c6:	4620      	mov	r0, r4
   d65c8:	bd10      	pop	{r4, pc}
   d65ca:	bf00      	nop
   d65cc:	000d9370 	.word	0x000d9370

000d65d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d65d0:	b538      	push	{r3, r4, r5, lr}
   d65d2:	4c0e      	ldr	r4, [pc, #56]	; (d660c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d65d4:	4b0e      	ldr	r3, [pc, #56]	; (d6610 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d65d6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d65d8:	2500      	movs	r5, #0
   d65da:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d65dc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d65e0:	6063      	str	r3, [r4, #4]
   d65e2:	60a5      	str	r5, [r4, #8]
   d65e4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d65e8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d65ec:	f7ff fcde 	bl	d5fac <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d65f0:	4b08      	ldr	r3, [pc, #32]	; (d6614 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d65f2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d65f6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d65fa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d65fc:	4620      	mov	r0, r4
   d65fe:	4a06      	ldr	r2, [pc, #24]	; (d6618 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6600:	4906      	ldr	r1, [pc, #24]	; (d661c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6606:	f001 b9b0 	b.w	d796a <__aeabi_atexit>
   d660a:	bf00      	nop
   d660c:	2003e3e0 	.word	0x2003e3e0
   d6610:	000d933c 	.word	0x000d933c
   d6614:	000d9370 	.word	0x000d9370
   d6618:	2003d628 	.word	0x2003d628
   d661c:	000d65b9 	.word	0x000d65b9

000d6620 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6620:	2100      	movs	r1, #0
   d6622:	f7ff bd1b 	b.w	d605c <HAL_SPI_Acquire>

000d6626 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6626:	2100      	movs	r1, #0
   d6628:	f7ff bd20 	b.w	d606c <HAL_SPI_Release>

000d662c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d662c:	b510      	push	{r4, lr}
   d662e:	4604      	mov	r4, r0
{
    _spi = spi;
   d6630:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6632:	4608      	mov	r0, r1
   d6634:	f7ff fcf2 	bl	d601c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6638:	2300      	movs	r3, #0
   d663a:	6063      	str	r3, [r4, #4]
}
   d663c:	4620      	mov	r0, r4
   d663e:	bd10      	pop	{r4, pc}

000d6640 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6640:	b510      	push	{r4, lr}
   d6642:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6644:	7800      	ldrb	r0, [r0, #0]
   d6646:	f7ff ffeb 	bl	d6620 <_ZN8SPIClass4lockEv.isra.0>
   d664a:	b948      	cbnz	r0, d6660 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d664c:	7820      	ldrb	r0, [r4, #0]
   d664e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6652:	f7ff fcd3 	bl	d5ffc <HAL_SPI_Begin>
        unlock();
   d6656:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d665c:	f7ff bfe3 	b.w	d6626 <_ZN8SPIClass6unlockEv.isra.1>
   d6660:	bd10      	pop	{r4, pc}

000d6662 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6662:	7800      	ldrb	r0, [r0, #0]
   d6664:	f7ff bfdf 	b.w	d6626 <_ZN8SPIClass6unlockEv.isra.1>

000d6668 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6668:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d666a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d666c:	6018      	str	r0, [r3, #0]
   d666e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6670:	6818      	ldr	r0, [r3, #0]
   d6672:	4288      	cmp	r0, r1
   d6674:	b2e5      	uxtb	r5, r4
   d6676:	d906      	bls.n	d6686 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6678:	3401      	adds	r4, #1
   d667a:	2c08      	cmp	r4, #8
   d667c:	d002      	beq.n	d6684 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d667e:	0840      	lsrs	r0, r0, #1
   d6680:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6682:	e7f5      	b.n	d6670 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6684:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6688:	5d5b      	ldrb	r3, [r3, r5]
   d668a:	7013      	strb	r3, [r2, #0]
   d668c:	bd30      	pop	{r4, r5, pc}
   d668e:	bf00      	nop
   d6690:	000d939c 	.word	0x000d939c

000d6694 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6698:	4607      	mov	r7, r0
   d669a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d669c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d669e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d66a0:	f7ff ffbe 	bl	d6620 <_ZN8SPIClass4lockEv.isra.0>
   d66a4:	2800      	cmp	r0, #0
   d66a6:	db62      	blt.n	d676e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d66a8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d66aa:	2214      	movs	r2, #20
   d66ac:	2100      	movs	r1, #0
   d66ae:	a809      	add	r0, sp, #36	; 0x24
   d66b0:	f002 fa2f 	bl	d8b12 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d66b4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d66b6:	4620      	mov	r0, r4
   d66b8:	2200      	movs	r2, #0
   d66ba:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d66bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d66c0:	f7ff fcbc 	bl	d603c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d66c4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d66c8:	b154      	cbz	r4, d66e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d66ca:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d66ce:	b935      	cbnz	r5, d66de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d66d0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d66d4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d66d8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d66dc:	e003      	b.n	d66e6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d66de:	2400      	movs	r4, #0
   d66e0:	46a1      	mov	r9, r4
   d66e2:	46a0      	mov	r8, r4
   d66e4:	2501      	movs	r5, #1
   d66e6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d66e8:	b105      	cbz	r5, d66ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d66ea:	b9bb      	cbnz	r3, d671c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d66ec:	429d      	cmp	r5, r3
   d66ee:	d10b      	bne.n	d6708 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d66f0:	68b2      	ldr	r2, [r6, #8]
   d66f2:	4542      	cmp	r2, r8
   d66f4:	d108      	bne.n	d6708 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d66f6:	f88d 9020 	strb.w	r9, [sp, #32]
   d66fa:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d66fe:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6702:	89b2      	ldrh	r2, [r6, #12]
   d6704:	4291      	cmp	r1, r2
   d6706:	d009      	beq.n	d671c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6708:	b153      	cbz	r3, d6720 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d670a:	2400      	movs	r4, #0
   d670c:	7838      	ldrb	r0, [r7, #0]
   d670e:	9401      	str	r4, [sp, #4]
   d6710:	9400      	str	r4, [sp, #0]
   d6712:	4623      	mov	r3, r4
   d6714:	4622      	mov	r2, r4
   d6716:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6718:	f7ff fc98 	bl	d604c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d671c:	2000      	movs	r0, #0
   d671e:	e026      	b.n	d676e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6720:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6724:	68b1      	ldr	r1, [r6, #8]
   d6726:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6728:	ab04      	add	r3, sp, #16
   d672a:	f10d 020f 	add.w	r2, sp, #15
   d672e:	f7ff ff9b 	bl	d6668 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6732:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6734:	b105      	cbz	r5, d6738 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6736:	b9b1      	cbnz	r1, d6766 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6738:	42a9      	cmp	r1, r5
   d673a:	d008      	beq.n	d674e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d673c:	2400      	movs	r4, #0
   d673e:	7838      	ldrb	r0, [r7, #0]
   d6740:	9401      	str	r4, [sp, #4]
   d6742:	7b74      	ldrb	r4, [r6, #13]
   d6744:	7b33      	ldrb	r3, [r6, #12]
   d6746:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d674a:	9400      	str	r4, [sp, #0]
   d674c:	e7e4      	b.n	d6718 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d674e:	68b3      	ldr	r3, [r6, #8]
   d6750:	4543      	cmp	r3, r8
   d6752:	d3f3      	bcc.n	d673c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6754:	f88d 9020 	strb.w	r9, [sp, #32]
   d6758:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d675c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6760:	89b3      	ldrh	r3, [r6, #12]
   d6762:	429a      	cmp	r2, r3
   d6764:	d1ea      	bne.n	d673c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6766:	9b04      	ldr	r3, [sp, #16]
   d6768:	4543      	cmp	r3, r8
   d676a:	d1e7      	bne.n	d673c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d676c:	e7d6      	b.n	d671c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d676e:	b00f      	add	sp, #60	; 0x3c
   d6770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6774 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6774:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6776:	7800      	ldrb	r0, [r0, #0]
   d6778:	f7ff fc48 	bl	d600c <HAL_SPI_Send_Receive_Data>
}
   d677c:	b2c0      	uxtb	r0, r0
   d677e:	bd08      	pop	{r3, pc}

000d6780 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6780:	7800      	ldrb	r0, [r0, #0]
   d6782:	f7ff bc53 	b.w	d602c <HAL_SPI_Is_Enabled>

000d6786 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6786:	4770      	bx	lr

000d6788 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d678a:	4606      	mov	r6, r0
   d678c:	4615      	mov	r5, r2
   d678e:	460c      	mov	r4, r1
   d6790:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6792:	42bc      	cmp	r4, r7
   d6794:	d006      	beq.n	d67a4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6796:	6833      	ldr	r3, [r6, #0]
   d6798:	f814 1b01 	ldrb.w	r1, [r4], #1
   d679c:	689b      	ldr	r3, [r3, #8]
   d679e:	4630      	mov	r0, r6
   d67a0:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67a2:	e7f6      	b.n	d6792 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d67a4:	4628      	mov	r0, r5
   d67a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67a8 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d67a8:	2200      	movs	r2, #0
   d67aa:	7c00      	ldrb	r0, [r0, #16]
   d67ac:	f7ff bb5e 	b.w	d5e6c <HAL_I2C_Write_Data>

000d67b0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d67b0:	2100      	movs	r1, #0
   d67b2:	7c00      	ldrb	r0, [r0, #16]
   d67b4:	f7ff bb62 	b.w	d5e7c <HAL_I2C_Available_Data>

000d67b8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d67b8:	2100      	movs	r1, #0
   d67ba:	7c00      	ldrb	r0, [r0, #16]
   d67bc:	f7ff bb66 	b.w	d5e8c <HAL_I2C_Read_Data>

000d67c0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d67c0:	2100      	movs	r1, #0
   d67c2:	7c00      	ldrb	r0, [r0, #16]
   d67c4:	f7ff bb6a 	b.w	d5e9c <HAL_I2C_Peek_Data>

000d67c8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d67c8:	2100      	movs	r1, #0
   d67ca:	7c00      	ldrb	r0, [r0, #16]
   d67cc:	f7ff bb6e 	b.w	d5eac <HAL_I2C_Flush_Data>

000d67d0 <_ZN7TwoWireD0Ev>:
   d67d0:	b510      	push	{r4, lr}
   d67d2:	2114      	movs	r1, #20
   d67d4:	4604      	mov	r4, r0
   d67d6:	f001 f8d5 	bl	d7984 <_ZdlPvj>
   d67da:	4620      	mov	r0, r4
   d67dc:	bd10      	pop	{r4, pc}
	...

000d67e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d67e0:	b510      	push	{r4, lr}
   d67e2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d67e4:	2300      	movs	r3, #0
   d67e6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d67e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67ec:	60a3      	str	r3, [r4, #8]
   d67ee:	4b04      	ldr	r3, [pc, #16]	; (d6800 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d67f0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d67f2:	4608      	mov	r0, r1
   d67f4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d67f6:	4611      	mov	r1, r2
   d67f8:	f7ff fb68 	bl	d5ecc <HAL_I2C_Init>
}
   d67fc:	4620      	mov	r0, r4
   d67fe:	bd10      	pop	{r4, pc}
   d6800:	000d93ac 	.word	0x000d93ac

000d6804 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6804:	2300      	movs	r3, #0
   d6806:	461a      	mov	r2, r3
   d6808:	4619      	mov	r1, r3
   d680a:	7c00      	ldrb	r0, [r0, #16]
   d680c:	f7ff bb16 	b.w	d5e3c <HAL_I2C_Begin>

000d6810 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6810:	2200      	movs	r2, #0
   d6812:	7c00      	ldrb	r0, [r0, #16]
   d6814:	f7ff bb1a 	b.w	d5e4c <HAL_I2C_Begin_Transmission>

000d6818 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6818:	2200      	movs	r2, #0
   d681a:	7c00      	ldrb	r0, [r0, #16]
   d681c:	f7ff bb1e 	b.w	d5e5c <HAL_I2C_End_Transmission>

000d6820 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6820:	2101      	movs	r1, #1
   d6822:	f7ff bff9 	b.w	d6818 <_ZN7TwoWire15endTransmissionEh>

000d6826 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6826:	2100      	movs	r1, #0
   d6828:	7c00      	ldrb	r0, [r0, #16]
   d682a:	f7ff bb47 	b.w	d5ebc <HAL_I2C_Is_Enabled>

000d682e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d682e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6830:	6883      	ldr	r3, [r0, #8]
   d6832:	4604      	mov	r4, r0
   d6834:	b90b      	cbnz	r3, d683a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6836:	f001 f8b8 	bl	d79aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d683a:	68c3      	ldr	r3, [r0, #12]
   d683c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d683e:	68a3      	ldr	r3, [r4, #8]
   d6840:	b11b      	cbz	r3, d684a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6842:	2203      	movs	r2, #3
   d6844:	4621      	mov	r1, r4
   d6846:	4620      	mov	r0, r4
   d6848:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d684a:	4620      	mov	r0, r4
   d684c:	2110      	movs	r1, #16
}
   d684e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6852:	f001 b897 	b.w	d7984 <_ZdlPvj>

000d6856 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6856:	4770      	bx	lr

000d6858 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6858:	7441      	strb	r1, [r0, #17]
   d685a:	4770      	bx	lr

000d685c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d685c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d685e:	7c00      	ldrb	r0, [r0, #16]
   d6860:	f7ff fb74 	bl	d5f4c <HAL_USART_Available_Data_For_Write>
}
   d6864:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6868:	bd08      	pop	{r3, pc}

000d686a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d686a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d686c:	7c00      	ldrb	r0, [r0, #16]
   d686e:	f7ff fb45 	bl	d5efc <HAL_USART_Available_Data>
}
   d6872:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6876:	bd08      	pop	{r3, pc}

000d6878 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6878:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d687a:	7c00      	ldrb	r0, [r0, #16]
   d687c:	f7ff fb4e 	bl	d5f1c <HAL_USART_Peek_Data>
}
   d6880:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6884:	bf28      	it	cs
   d6886:	f04f 30ff 	movcs.w	r0, #4294967295
   d688a:	bd08      	pop	{r3, pc}

000d688c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d688c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d688e:	7c00      	ldrb	r0, [r0, #16]
   d6890:	f7ff fb3c 	bl	d5f0c <HAL_USART_Read_Data>
}
   d6894:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6898:	bf28      	it	cs
   d689a:	f04f 30ff 	movcs.w	r0, #4294967295
   d689e:	bd08      	pop	{r3, pc}

000d68a0 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d68a0:	7c00      	ldrb	r0, [r0, #16]
   d68a2:	f7ff bb43 	b.w	d5f2c <HAL_USART_Flush_Data>

000d68a6 <_ZN11USARTSerialD0Ev>:
   d68a6:	b510      	push	{r4, lr}
   d68a8:	2114      	movs	r1, #20
   d68aa:	4604      	mov	r4, r0
   d68ac:	f001 f86a 	bl	d7984 <_ZdlPvj>
   d68b0:	4620      	mov	r0, r4
   d68b2:	bd10      	pop	{r4, pc}

000d68b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d68b4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d68b6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d68b8:	4604      	mov	r4, r0
   d68ba:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d68bc:	b925      	cbnz	r5, d68c8 <_ZN11USARTSerial5writeEh+0x14>
   d68be:	7c00      	ldrb	r0, [r0, #16]
   d68c0:	f7ff fb44 	bl	d5f4c <HAL_USART_Available_Data_For_Write>
   d68c4:	2800      	cmp	r0, #0
   d68c6:	dd05      	ble.n	d68d4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d68c8:	4631      	mov	r1, r6
   d68ca:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d68cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d68d0:	f7ff bb0c 	b.w	d5eec <HAL_USART_Write_Data>
  }
  return 0;
}
   d68d4:	4628      	mov	r0, r5
   d68d6:	bd70      	pop	{r4, r5, r6, pc}

000d68d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d68d8:	b510      	push	{r4, lr}
   d68da:	4604      	mov	r4, r0
   d68dc:	4608      	mov	r0, r1
   d68de:	4611      	mov	r1, r2
   d68e0:	2200      	movs	r2, #0
   d68e2:	6062      	str	r2, [r4, #4]
   d68e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d68e8:	60a2      	str	r2, [r4, #8]
   d68ea:	4a05      	ldr	r2, [pc, #20]	; (d6900 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d68ec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d68ee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d68f0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d68f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d68f4:	461a      	mov	r2, r3
   d68f6:	f7ff faf1 	bl	d5edc <HAL_USART_Init>
}
   d68fa:	4620      	mov	r0, r4
   d68fc:	bd10      	pop	{r4, pc}
   d68fe:	bf00      	nop
   d6900:	000d93d4 	.word	0x000d93d4

000d6904 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6904:	2300      	movs	r3, #0
   d6906:	7c00      	ldrb	r0, [r0, #16]
   d6908:	f7ff bb28 	b.w	d5f5c <HAL_USART_BeginConfig>

000d690c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d690c:	2200      	movs	r2, #0
   d690e:	f7ff bff9 	b.w	d6904 <_ZN11USARTSerial5beginEmm>

000d6912 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6912:	7c00      	ldrb	r0, [r0, #16]
   d6914:	f7ff bb12 	b.w	d5f3c <HAL_USART_Is_Enabled>

000d6918 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6918:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d691a:	4d0c      	ldr	r5, [pc, #48]	; (d694c <_Z22__fetch_global_Serial1v+0x34>)
   d691c:	6829      	ldr	r1, [r5, #0]
   d691e:	f011 0401 	ands.w	r4, r1, #1
   d6922:	d111      	bne.n	d6948 <_Z22__fetch_global_Serial1v+0x30>
   d6924:	4628      	mov	r0, r5
   d6926:	f7fd fbbe 	bl	d40a6 <__cxa_guard_acquire>
   d692a:	b168      	cbz	r0, d6948 <_Z22__fetch_global_Serial1v+0x30>
   d692c:	4a08      	ldr	r2, [pc, #32]	; (d6950 <_Z22__fetch_global_Serial1v+0x38>)
   d692e:	4b09      	ldr	r3, [pc, #36]	; (d6954 <_Z22__fetch_global_Serial1v+0x3c>)
   d6930:	4809      	ldr	r0, [pc, #36]	; (d6958 <_Z22__fetch_global_Serial1v+0x40>)
   d6932:	4621      	mov	r1, r4
   d6934:	f7ff ffd0 	bl	d68d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6938:	4628      	mov	r0, r5
   d693a:	f7fd fbb9 	bl	d40b0 <__cxa_guard_release>
   d693e:	4a07      	ldr	r2, [pc, #28]	; (d695c <_Z22__fetch_global_Serial1v+0x44>)
   d6940:	4907      	ldr	r1, [pc, #28]	; (d6960 <_Z22__fetch_global_Serial1v+0x48>)
   d6942:	4805      	ldr	r0, [pc, #20]	; (d6958 <_Z22__fetch_global_Serial1v+0x40>)
   d6944:	f001 f811 	bl	d796a <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6948:	4803      	ldr	r0, [pc, #12]	; (d6958 <_Z22__fetch_global_Serial1v+0x40>)
   d694a:	bd38      	pop	{r3, r4, r5, pc}
   d694c:	2003e64c 	.word	0x2003e64c
   d6950:	2003e650 	.word	0x2003e650
   d6954:	2003e5c8 	.word	0x2003e5c8
   d6958:	2003e5b4 	.word	0x2003e5b4
   d695c:	2003d628 	.word	0x2003d628
   d6960:	000d6857 	.word	0x000d6857

000d6964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6964:	680b      	ldr	r3, [r1, #0]
   d6966:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6968:	b113      	cbz	r3, d6970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d696a:	685a      	ldr	r2, [r3, #4]
   d696c:	3201      	adds	r2, #1
   d696e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6970:	4770      	bx	lr

000d6972 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6972:	7441      	strb	r1, [r0, #17]
   d6974:	4770      	bx	lr

000d6976 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6976:	4770      	bx	lr

000d6978 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6978:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d697a:	2100      	movs	r1, #0
   d697c:	7c00      	ldrb	r0, [r0, #16]
   d697e:	f7ff fa45 	bl	d5e0c <HAL_USB_USART_Receive_Data>
}
   d6982:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6986:	bf28      	it	cs
   d6988:	f04f 30ff 	movcs.w	r0, #4294967295
   d698c:	bd08      	pop	{r3, pc}

000d698e <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d698e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6990:	2101      	movs	r1, #1
   d6992:	7c00      	ldrb	r0, [r0, #16]
   d6994:	f7ff fa3a 	bl	d5e0c <HAL_USB_USART_Receive_Data>
}
   d6998:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d699c:	bf28      	it	cs
   d699e:	f04f 30ff 	movcs.w	r0, #4294967295
   d69a2:	bd08      	pop	{r3, pc}

000d69a4 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d69a4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d69a6:	7c00      	ldrb	r0, [r0, #16]
   d69a8:	f7ff fa28 	bl	d5dfc <HAL_USB_USART_Available_Data_For_Write>
}
   d69ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69b0:	bd08      	pop	{r3, pc}

000d69b2 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d69b2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d69b4:	7c00      	ldrb	r0, [r0, #16]
   d69b6:	f7ff fa19 	bl	d5dec <HAL_USB_USART_Available_Data>
}
   d69ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69be:	bd08      	pop	{r3, pc}

000d69c0 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d69c0:	7c00      	ldrb	r0, [r0, #16]
   d69c2:	f7ff ba33 	b.w	d5e2c <HAL_USB_USART_Flush_Data>

000d69c6 <_ZN9USBSerialD0Ev>:
   d69c6:	b510      	push	{r4, lr}
   d69c8:	2114      	movs	r1, #20
   d69ca:	4604      	mov	r4, r0
   d69cc:	f000 ffda 	bl	d7984 <_ZdlPvj>
   d69d0:	4620      	mov	r0, r4
   d69d2:	bd10      	pop	{r4, pc}

000d69d4 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69d4:	b538      	push	{r3, r4, r5, lr}
   d69d6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69d8:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69da:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69dc:	f7ff fa0e 	bl	d5dfc <HAL_USB_USART_Available_Data_For_Write>
   d69e0:	2800      	cmp	r0, #0
   d69e2:	dc01      	bgt.n	d69e8 <_ZN9USBSerial5writeEh+0x14>
   d69e4:	7c60      	ldrb	r0, [r4, #17]
   d69e6:	b128      	cbz	r0, d69f4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d69e8:	4629      	mov	r1, r5
   d69ea:	7c20      	ldrb	r0, [r4, #16]
   d69ec:	f7ff fa16 	bl	d5e1c <HAL_USB_USART_Send_Data>
   d69f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d69f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d69f8:	b510      	push	{r4, lr}
   d69fa:	4604      	mov	r4, r0
   d69fc:	2300      	movs	r3, #0
   d69fe:	6063      	str	r3, [r4, #4]
   d6a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a04:	60a3      	str	r3, [r4, #8]
   d6a06:	4b05      	ldr	r3, [pc, #20]	; (d6a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a08:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6a0a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a0c:	4608      	mov	r0, r1
{
  _serial = serial;
   d6a0e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6a10:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6a12:	4611      	mov	r1, r2
   d6a14:	f7ff f9da 	bl	d5dcc <HAL_USB_USART_Init>
}
   d6a18:	4620      	mov	r0, r4
   d6a1a:	bd10      	pop	{r4, pc}
   d6a1c:	000d9404 	.word	0x000d9404

000d6a20 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a20:	2200      	movs	r2, #0
   d6a22:	7c00      	ldrb	r0, [r0, #16]
   d6a24:	f7ff b9da 	b.w	d5ddc <HAL_USB_USART_Begin>

000d6a28 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a2a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a2c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a2e:	2100      	movs	r1, #0
   d6a30:	f002 f86f 	bl	d8b12 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a34:	4620      	mov	r0, r4
   d6a36:	bd10      	pop	{r4, pc}

000d6a38 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a38:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a3a:	4d0e      	ldr	r5, [pc, #56]	; (d6a74 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6a3c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a3e:	a801      	add	r0, sp, #4
   d6a40:	f7ff fff2 	bl	d6a28 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a44:	6829      	ldr	r1, [r5, #0]
   d6a46:	f011 0401 	ands.w	r4, r1, #1
   d6a4a:	d110      	bne.n	d6a6e <_Z16_fetch_usbserialv+0x36>
   d6a4c:	4628      	mov	r0, r5
   d6a4e:	f7fd fb2a 	bl	d40a6 <__cxa_guard_acquire>
   d6a52:	b160      	cbz	r0, d6a6e <_Z16_fetch_usbserialv+0x36>
   d6a54:	aa01      	add	r2, sp, #4
   d6a56:	4621      	mov	r1, r4
   d6a58:	4807      	ldr	r0, [pc, #28]	; (d6a78 <_Z16_fetch_usbserialv+0x40>)
   d6a5a:	f7ff ffcd 	bl	d69f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6a5e:	4628      	mov	r0, r5
   d6a60:	f7fd fb26 	bl	d40b0 <__cxa_guard_release>
   d6a64:	4a05      	ldr	r2, [pc, #20]	; (d6a7c <_Z16_fetch_usbserialv+0x44>)
   d6a66:	4906      	ldr	r1, [pc, #24]	; (d6a80 <_Z16_fetch_usbserialv+0x48>)
   d6a68:	4803      	ldr	r0, [pc, #12]	; (d6a78 <_Z16_fetch_usbserialv+0x40>)
   d6a6a:	f000 ff7e 	bl	d796a <__aeabi_atexit>
	return _usbserial;
}
   d6a6e:	4802      	ldr	r0, [pc, #8]	; (d6a78 <_Z16_fetch_usbserialv+0x40>)
   d6a70:	b007      	add	sp, #28
   d6a72:	bd30      	pop	{r4, r5, pc}
   d6a74:	2003e6d4 	.word	0x2003e6d4
   d6a78:	2003e6d8 	.word	0x2003e6d8
   d6a7c:	2003d628 	.word	0x2003d628
   d6a80:	000d6977 	.word	0x000d6977

000d6a84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6a84:	4770      	bx	lr

000d6a86 <_ZN9IPAddressD0Ev>:
   d6a86:	b510      	push	{r4, lr}
   d6a88:	2118      	movs	r1, #24
   d6a8a:	4604      	mov	r4, r0
   d6a8c:	f000 ff7a 	bl	d7984 <_ZdlPvj>
   d6a90:	4620      	mov	r0, r4
   d6a92:	bd10      	pop	{r4, pc}

000d6a94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a96:	7d03      	ldrb	r3, [r0, #20]
   d6a98:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a9a:	b08d      	sub	sp, #52	; 0x34
   d6a9c:	460e      	mov	r6, r1
   d6a9e:	f100 0704 	add.w	r7, r0, #4
   d6aa2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6aa6:	d002      	beq.n	d6aae <_ZNK9IPAddress7printToER5Print+0x1a>
   d6aa8:	f100 0508 	add.w	r5, r0, #8
   d6aac:	e018      	b.n	d6ae0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6aae:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ab0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6ab2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ab6:	232f      	movs	r3, #47	; 0x2f
   d6ab8:	462a      	mov	r2, r5
   d6aba:	200a      	movs	r0, #10
   d6abc:	f7ff fa56 	bl	d5f6c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6ac0:	4628      	mov	r0, r5
   d6ac2:	f002 f87a 	bl	d8bba <strlen>
   d6ac6:	6833      	ldr	r3, [r6, #0]
   d6ac8:	4602      	mov	r2, r0
   d6aca:	68db      	ldr	r3, [r3, #12]
   d6acc:	4629      	mov	r1, r5
   d6ace:	4630      	mov	r0, r6
   d6ad0:	4798      	blx	r3
   d6ad2:	e00f      	b.n	d6af4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6ad4:	b124      	cbz	r4, d6ae0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6ad6:	212e      	movs	r1, #46	; 0x2e
   d6ad8:	4630      	mov	r0, r6
   d6ada:	f000 fc5f 	bl	d739c <_ZN5Print5printEc>
   d6ade:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6ae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ae4:	220a      	movs	r2, #10
   d6ae6:	4630      	mov	r0, r6
   d6ae8:	f000 fc71 	bl	d73ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6aec:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6aee:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6af0:	d1f0      	bne.n	d6ad4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6af2:	4620      	mov	r0, r4
    }
    return n;
}
   d6af4:	b00d      	add	sp, #52	; 0x34
   d6af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6af8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6af8:	b510      	push	{r4, lr}
   d6afa:	4b05      	ldr	r3, [pc, #20]	; (d6b10 <_ZN9IPAddressC1Ev+0x18>)
   d6afc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6afe:	2211      	movs	r2, #17
   d6b00:	f840 3b04 	str.w	r3, [r0], #4
   d6b04:	2100      	movs	r1, #0
   d6b06:	f002 f804 	bl	d8b12 <memset>
{
    clear();
}
   d6b0a:	4620      	mov	r0, r4
   d6b0c:	bd10      	pop	{r4, pc}
   d6b0e:	bf00      	nop
   d6b10:	000d9434 	.word	0x000d9434

000d6b14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6b14:	4603      	mov	r3, r0
   d6b16:	4a07      	ldr	r2, [pc, #28]	; (d6b34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6b18:	b510      	push	{r4, lr}
   d6b1a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6b1e:	f101 0210 	add.w	r2, r1, #16
   d6b22:	f851 4b04 	ldr.w	r4, [r1], #4
   d6b26:	f843 4b04 	str.w	r4, [r3], #4
   d6b2a:	4291      	cmp	r1, r2
   d6b2c:	d1f9      	bne.n	d6b22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6b2e:	780a      	ldrb	r2, [r1, #0]
   d6b30:	701a      	strb	r2, [r3, #0]
}
   d6b32:	bd10      	pop	{r4, pc}
   d6b34:	000d9434 	.word	0x000d9434

000d6b38 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6b38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6b3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6b3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6b42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6b46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6b4a:	2304      	movs	r3, #4
   d6b4c:	6041      	str	r1, [r0, #4]
   d6b4e:	7503      	strb	r3, [r0, #20]
   d6b50:	bd10      	pop	{r4, pc}

000d6b52 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6b54:	780d      	ldrb	r5, [r1, #0]
   d6b56:	788b      	ldrb	r3, [r1, #2]
   d6b58:	784a      	ldrb	r2, [r1, #1]
   d6b5a:	78c9      	ldrb	r1, [r1, #3]
   d6b5c:	9100      	str	r1, [sp, #0]
   d6b5e:	4629      	mov	r1, r5
   d6b60:	f7ff ffea 	bl	d6b38 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6b64:	b003      	add	sp, #12
   d6b66:	bd30      	pop	{r4, r5, pc}

000d6b68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b68:	4770      	bx	lr

000d6b6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6b6a:	2000      	movs	r0, #0
   d6b6c:	4770      	bx	lr

000d6b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b6e:	b510      	push	{r4, lr}
   d6b70:	2110      	movs	r1, #16
   d6b72:	4604      	mov	r4, r0
   d6b74:	f000 ff06 	bl	d7984 <_ZdlPvj>
   d6b78:	4620      	mov	r0, r4
   d6b7a:	bd10      	pop	{r4, pc}

000d6b7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6b7c:	b508      	push	{r3, lr}
      { delete this; }
   d6b7e:	b108      	cbz	r0, d6b84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6b80:	f7ff fff5 	bl	d6b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6b84:	bd08      	pop	{r3, pc}

000d6b86 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6b86:	2200      	movs	r2, #0
   d6b88:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6b8a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6b8c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6b90:	8082      	strh	r2, [r0, #4]
   d6b92:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6b96:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b98:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b9a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b9c:	680c      	ldr	r4, [r1, #0]
   d6b9e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ba0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6ba2:	bd10      	pop	{r4, pc}

000d6ba4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6ba4:	b510      	push	{r4, lr}
   d6ba6:	4604      	mov	r4, r0
    free((void*)msg_);
   d6ba8:	6800      	ldr	r0, [r0, #0]
   d6baa:	f7ff fb95 	bl	d62d8 <free>
}
   d6bae:	4620      	mov	r0, r4
   d6bb0:	bd10      	pop	{r4, pc}

000d6bb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6bb2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6bb4:	68c4      	ldr	r4, [r0, #12]
   d6bb6:	b1f4      	cbz	r4, d6bf6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6bb8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6bba:	2b02      	cmp	r3, #2
   d6bbc:	d103      	bne.n	d6bc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6bbe:	f104 000c 	add.w	r0, r4, #12
   d6bc2:	f7ff ffef 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6bc6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6bc8:	b135      	cbz	r5, d6bd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6bca:	4628      	mov	r0, r5
   d6bcc:	f7ff fbbc 	bl	d6348 <_ZNSt14_Function_baseD1Ev>
   d6bd0:	2110      	movs	r1, #16
   d6bd2:	4628      	mov	r0, r5
   d6bd4:	f000 fed6 	bl	d7984 <_ZdlPvj>
   d6bd8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6bda:	b135      	cbz	r5, d6bea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6bdc:	4628      	mov	r0, r5
   d6bde:	f7ff fbb3 	bl	d6348 <_ZNSt14_Function_baseD1Ev>
   d6be2:	2110      	movs	r1, #16
   d6be4:	4628      	mov	r0, r5
   d6be6:	f000 fecd 	bl	d7984 <_ZdlPvj>
   d6bea:	4620      	mov	r0, r4
   d6bec:	2114      	movs	r1, #20
   d6bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6bf2:	f000 bec7 	b.w	d7984 <_ZdlPvj>
   d6bf6:	bd38      	pop	{r3, r4, r5, pc}

000d6bf8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6bf8:	b513      	push	{r0, r1, r4, lr}
   d6bfa:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6bfc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6c00:	2300      	movs	r3, #0
   d6c02:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c04:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c06:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6c08:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c0a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6c0c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c0e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c10:	f7fd fbac 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c14:	4620      	mov	r0, r4
   d6c16:	b002      	add	sp, #8
   d6c18:	bd10      	pop	{r4, pc}

000d6c1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c1c:	460c      	mov	r4, r1
   d6c1e:	ad02      	add	r5, sp, #8
   d6c20:	f854 3b04 	ldr.w	r3, [r4], #4
   d6c24:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6c28:	4606      	mov	r6, r0
   d6c2a:	460f      	mov	r7, r1
   d6c2c:	a801      	add	r0, sp, #4
   d6c2e:	4621      	mov	r1, r4
   d6c30:	f7ff fe98 	bl	d6964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6c34:	4629      	mov	r1, r5
   d6c36:	4630      	mov	r0, r6
   d6c38:	f7ff ffde 	bl	d6bf8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c3c:	a801      	add	r0, sp, #4
   d6c3e:	f7fd fb95 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c42:	4620      	mov	r0, r4
   d6c44:	f7fd fb92 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6c48:	4638      	mov	r0, r7
   d6c4a:	2108      	movs	r1, #8
   d6c4c:	f000 fe9a 	bl	d7984 <_ZdlPvj>
        return p;
    }
   d6c50:	4630      	mov	r0, r6
   d6c52:	b003      	add	sp, #12
   d6c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c56 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6c56:	b513      	push	{r0, r1, r4, lr}
   d6c58:	460b      	mov	r3, r1
   d6c5a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c5c:	c803      	ldmia	r0, {r0, r1}
   d6c5e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6c62:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6c66:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6c6a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6c6e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6c72:	b002      	add	sp, #8
   d6c74:	bd10      	pop	{r4, pc}
	...

000d6c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6c78:	b538      	push	{r3, r4, r5, lr}
   d6c7a:	2300      	movs	r3, #0
   d6c7c:	4604      	mov	r4, r0
   d6c7e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6c80:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6c82:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6c84:	f7fd fa09 	bl	d409a <_Znwj>
   d6c88:	b128      	cbz	r0, d6c96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6c8a:	2301      	movs	r3, #1
   d6c8c:	6043      	str	r3, [r0, #4]
   d6c8e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6c90:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6c92:	6003      	str	r3, [r0, #0]
   d6c94:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6c96:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6c98:	4620      	mov	r0, r4
   d6c9a:	bd38      	pop	{r3, r4, r5, pc}
   d6c9c:	000d9448 	.word	0x000d9448

000d6ca0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ca0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6ca2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ca4:	b90a      	cbnz	r2, d6caa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6ca6:	f000 fe80 	bl	d79aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6caa:	68c3      	ldr	r3, [r0, #12]
    }
   d6cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cb0:	4718      	bx	r3

000d6cb2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6cb2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6cb4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6cb6:	f100 0110 	add.w	r1, r0, #16
   d6cba:	f7ff fff1 	bl	d6ca0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6cbe:	bd08      	pop	{r3, pc}

000d6cc0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cc0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6cc2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cc4:	b90a      	cbnz	r2, d6cca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6cc6:	f000 fe70 	bl	d79aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cca:	68c3      	ldr	r3, [r0, #12]
    }
   d6ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cd0:	4718      	bx	r3

000d6cd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6cd2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6cd4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6cd6:	f100 0110 	add.w	r1, r0, #16
   d6cda:	f7ff fff1 	bl	d6cc0 <_ZNKSt8functionIFvRKbEEclES1_>
   d6cde:	bd08      	pop	{r3, pc}

000d6ce0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ce0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ce2:	2300      	movs	r3, #0
   d6ce4:	6083      	str	r3, [r0, #8]
   d6ce6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ce8:	4604      	mov	r4, r0
   d6cea:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6cec:	b12b      	cbz	r3, d6cfa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6cee:	2202      	movs	r2, #2
   d6cf0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6cf2:	68eb      	ldr	r3, [r5, #12]
   d6cf4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6cf6:	68ab      	ldr	r3, [r5, #8]
   d6cf8:	60a3      	str	r3, [r4, #8]
	}
    }
   d6cfa:	4620      	mov	r0, r4
   d6cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d02:	b089      	sub	sp, #36	; 0x24
   d6d04:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6d06:	4668      	mov	r0, sp
   d6d08:	f7ff ff3d 	bl	d6b86 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6d0c:	2300      	movs	r3, #0
   d6d0e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6d12:	f04f 0202 	mov.w	r2, #2
   d6d16:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6d1a:	2b00      	cmp	r3, #0
   d6d1c:	d103      	bne.n	d6d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6d1e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6d22:	2900      	cmp	r1, #0
   d6d24:	d1f7      	bne.n	d6d16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6d26:	d002      	beq.n	d6d2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6d28:	f88d 3008 	strb.w	r3, [sp, #8]
   d6d2c:	e063      	b.n	d6df6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6d2e:	f114 050c 	adds.w	r5, r4, #12
   d6d32:	d003      	beq.n	d6d3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6d34:	4669      	mov	r1, sp
   d6d36:	4628      	mov	r0, r5
   d6d38:	f7ff ff25 	bl	d6b86 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6d3c:	f3bf 8f5f 	dmb	sy
   d6d40:	2301      	movs	r3, #1
   d6d42:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6d44:	2000      	movs	r0, #0
   d6d46:	f104 0308 	add.w	r3, r4, #8
   d6d4a:	f3bf 8f5f 	dmb	sy
   d6d4e:	e853 6f00 	ldrex	r6, [r3]
   d6d52:	e843 0200 	strex	r2, r0, [r3]
   d6d56:	2a00      	cmp	r2, #0
   d6d58:	d1f9      	bne.n	d6d4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6d5a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6d5e:	2e00      	cmp	r6, #0
   d6d60:	d049      	beq.n	d6df6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6d62:	f7ff fa83 	bl	d626c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6d66:	b120      	cbz	r0, d6d72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d68:	4629      	mov	r1, r5
   d6d6a:	4630      	mov	r0, r6
   d6d6c:	f7ff ff98 	bl	d6ca0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6d70:	e03a      	b.n	d6de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d72:	4631      	mov	r1, r6
   d6d74:	a802      	add	r0, sp, #8
   d6d76:	f7ff ffb3 	bl	d6ce0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6d7a:	68e0      	ldr	r0, [r4, #12]
   d6d7c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6d80:	b108      	cbz	r0, d6d86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6d82:	f001 feff 	bl	d8b84 <strdup>
   d6d86:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d88:	2010      	movs	r0, #16
   d6d8a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6d8e:	f7fd f984 	bl	d409a <_Znwj>
   d6d92:	4605      	mov	r5, r0
   d6d94:	b1e8      	cbz	r0, d6dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d96:	2700      	movs	r7, #0
   d6d98:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d9a:	2018      	movs	r0, #24
   d6d9c:	f7fd f97d 	bl	d409a <_Znwj>
   d6da0:	4604      	mov	r4, r0
   d6da2:	b188      	cbz	r0, d6dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6da4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6da6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6da8:	a802      	add	r0, sp, #8
   d6daa:	f7ff ff54 	bl	d6c56 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dae:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6db0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6db2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6db4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6db6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6db8:	a906      	add	r1, sp, #24
   d6dba:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dbc:	60e3      	str	r3, [r4, #12]
   d6dbe:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6dc2:	9205      	str	r2, [sp, #20]
   d6dc4:	f7ff fedf 	bl	d6b86 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6dc8:	4b0d      	ldr	r3, [pc, #52]	; (d6e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6dca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6dcc:	4b0d      	ldr	r3, [pc, #52]	; (d6e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6dce:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6dd0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6dd2:	a806      	add	r0, sp, #24
   d6dd4:	f7ff fee6 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6dd8:	a802      	add	r0, sp, #8
   d6dda:	f7ff fab5 	bl	d6348 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6dde:	2200      	movs	r2, #0
   d6de0:	4629      	mov	r1, r5
   d6de2:	4809      	ldr	r0, [pc, #36]	; (d6e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6de4:	f7ff fa4a 	bl	d627c <application_thread_invoke>
   d6de8:	4630      	mov	r0, r6
   d6dea:	f7ff faad 	bl	d6348 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6dee:	2110      	movs	r1, #16
   d6df0:	4630      	mov	r0, r6
   d6df2:	f000 fdc7 	bl	d7984 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6df6:	4668      	mov	r0, sp
   d6df8:	f7ff fed4 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
    }
   d6dfc:	b009      	add	sp, #36	; 0x24
   d6dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e00:	000d6cb3 	.word	0x000d6cb3
   d6e04:	000d6f29 	.word	0x000d6f29
   d6e08:	000d682f 	.word	0x000d682f

000d6e0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e10:	b08b      	sub	sp, #44	; 0x2c
   d6e12:	4606      	mov	r6, r0
   d6e14:	460f      	mov	r7, r1
   d6e16:	4690      	mov	r8, r2
   d6e18:	4699      	mov	r9, r3
   d6e1a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e1e:	f7ff f9a5 	bl	d616c <spark_cloud_flag_connected>
   d6e22:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6e24:	4683      	mov	fp, r0
   d6e26:	bb30      	cbnz	r0, d6e76 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6e28:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6e2c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e2e:	a905      	add	r1, sp, #20
   d6e30:	4628      	mov	r0, r5
   d6e32:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6e36:	f7ff fea6 	bl	d6b86 <_ZN8particle5ErrorC1EOS0_>
   d6e3a:	2014      	movs	r0, #20
   d6e3c:	f7fd f92d 	bl	d409a <_Znwj>
   d6e40:	4604      	mov	r4, r0
   d6e42:	b158      	cbz	r0, d6e5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6e44:	2302      	movs	r3, #2
   d6e46:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e48:	2301      	movs	r3, #1
   d6e4a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e4c:	f8c0 b004 	str.w	fp, [r0, #4]
   d6e50:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6e54:	4629      	mov	r1, r5
   d6e56:	300c      	adds	r0, #12
   d6e58:	f7ff fe95 	bl	d6b86 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6e5c:	4630      	mov	r0, r6
   d6e5e:	4621      	mov	r1, r4
   d6e60:	f840 4b04 	str.w	r4, [r0], #4
   d6e64:	f7ff ff08 	bl	d6c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e68:	4628      	mov	r0, r5
   d6e6a:	f7ff fe9b 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6e6e:	a805      	add	r0, sp, #20
   d6e70:	f7ff fe98 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
   d6e74:	e052      	b.n	d6f1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6e76:	2400      	movs	r4, #0
   d6e78:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6e7a:	2014      	movs	r0, #20
   d6e7c:	606c      	str	r4, [r5, #4]
   d6e7e:	60ac      	str	r4, [r5, #8]
   d6e80:	9307      	str	r3, [sp, #28]
   d6e82:	f7fd f90a 	bl	d409a <_Znwj>
   d6e86:	4601      	mov	r1, r0
   d6e88:	b118      	cbz	r0, d6e92 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6e8a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e8c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e8e:	6044      	str	r4, [r0, #4]
   d6e90:	6084      	str	r4, [r0, #8]
   d6e92:	a804      	add	r0, sp, #16
   d6e94:	9103      	str	r1, [sp, #12]
   d6e96:	f7ff feef 	bl	d6c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6e9a:	4b22      	ldr	r3, [pc, #136]	; (d6f24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6e9c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6e9e:	2008      	movs	r0, #8
   d6ea0:	f7fd f8fb 	bl	d409a <_Znwj>
   d6ea4:	4604      	mov	r4, r0
   d6ea6:	b128      	cbz	r0, d6eb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ea8:	9b03      	ldr	r3, [sp, #12]
   d6eaa:	f840 3b04 	str.w	r3, [r0], #4
   d6eae:	a904      	add	r1, sp, #16
   d6eb0:	f7ff fd58 	bl	d6964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6eb4:	9500      	str	r5, [sp, #0]
   d6eb6:	fa5f f38a 	uxtb.w	r3, sl
   d6eba:	464a      	mov	r2, r9
   d6ebc:	4641      	mov	r1, r8
   d6ebe:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6ec0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6ec2:	f7ff f963 	bl	d618c <spark_send_event>
   d6ec6:	b920      	cbnz	r0, d6ed2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6ec8:	9b03      	ldr	r3, [sp, #12]
   d6eca:	785b      	ldrb	r3, [r3, #1]
   d6ecc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6ed0:	b183      	cbz	r3, d6ef4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6ed2:	9b03      	ldr	r3, [sp, #12]
   d6ed4:	9305      	str	r3, [sp, #20]
   d6ed6:	a904      	add	r1, sp, #16
   d6ed8:	a806      	add	r0, sp, #24
   d6eda:	f7ff fd43 	bl	d6964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6ede:	a905      	add	r1, sp, #20
   d6ee0:	4630      	mov	r0, r6
   d6ee2:	f7ff fe89 	bl	d6bf8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ee6:	a806      	add	r0, sp, #24
   d6ee8:	f7fd fa40 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6eec:	a804      	add	r0, sp, #16
   d6eee:	f7fd fa3d 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ef2:	e013      	b.n	d6f1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6ef4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6ef8:	a905      	add	r1, sp, #20
   d6efa:	a803      	add	r0, sp, #12
   d6efc:	9205      	str	r2, [sp, #20]
   d6efe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6f02:	f7ff fefd 	bl	d6d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6f06:	a805      	add	r0, sp, #20
   d6f08:	f7ff fe4c 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6f0c:	a805      	add	r0, sp, #20
   d6f0e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6f10:	f7ff fe83 	bl	d6c1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6f14:	a806      	add	r0, sp, #24
   d6f16:	f7fd fa29 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f1a:	e7da      	b.n	d6ed2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6f1c:	4630      	mov	r0, r6
   d6f1e:	b00b      	add	sp, #44	; 0x2c
   d6f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f24:	000d7099 	.word	0x000d7099

000d6f28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f28:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f2c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f2e:	d006      	beq.n	d6f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6f30:	2a03      	cmp	r2, #3
   d6f32:	d017      	beq.n	d6f64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6f34:	2a01      	cmp	r2, #1
   d6f36:	d122      	bne.n	d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6f38:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f3a:	6003      	str	r3, [r0, #0]
	      break;
   d6f3c:	e01f      	b.n	d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6f3e:	2018      	movs	r0, #24
   d6f40:	680e      	ldr	r6, [r1, #0]
   d6f42:	f7fd f8aa 	bl	d409a <_Znwj>
   d6f46:	4605      	mov	r5, r0
   d6f48:	b150      	cbz	r0, d6f60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6f4a:	4631      	mov	r1, r6
   d6f4c:	f7ff fec8 	bl	d6ce0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6f50:	6930      	ldr	r0, [r6, #16]
   d6f52:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6f56:	b108      	cbz	r0, d6f5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6f58:	f001 fe14 	bl	d8b84 <strdup>
   d6f5c:	6128      	str	r0, [r5, #16]
   d6f5e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6f60:	6025      	str	r5, [r4, #0]
   d6f62:	e00c      	b.n	d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6f64:	6804      	ldr	r4, [r0, #0]
   d6f66:	b154      	cbz	r4, d6f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6f68:	f104 0010 	add.w	r0, r4, #16
   d6f6c:	f7ff fe1a 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f70:	4620      	mov	r0, r4
   d6f72:	f7ff f9e9 	bl	d6348 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6f76:	2118      	movs	r1, #24
   d6f78:	4620      	mov	r0, r4
   d6f7a:	f000 fd03 	bl	d7984 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6f7e:	2000      	movs	r0, #0
   d6f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f82 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6f82:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f84:	2300      	movs	r3, #0
   d6f86:	6083      	str	r3, [r0, #8]
   d6f88:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6f8a:	4604      	mov	r4, r0
   d6f8c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6f8e:	b12b      	cbz	r3, d6f9c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6f90:	2202      	movs	r2, #2
   d6f92:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6f94:	68eb      	ldr	r3, [r5, #12]
   d6f96:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6f98:	68ab      	ldr	r3, [r5, #8]
   d6f9a:	60a3      	str	r3, [r4, #8]
	}
    }
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	bd38      	pop	{r3, r4, r5, pc}

000d6fa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6fa0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6fa2:	b570      	push	{r4, r5, r6, lr}
   d6fa4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6fa6:	d006      	beq.n	d6fb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6fa8:	2a03      	cmp	r2, #3
   d6faa:	d011      	beq.n	d6fd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6fac:	2a01      	cmp	r2, #1
   d6fae:	d118      	bne.n	d6fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6fb0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6fb2:	6003      	str	r3, [r0, #0]
	      break;
   d6fb4:	e015      	b.n	d6fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6fb6:	2014      	movs	r0, #20
   d6fb8:	680e      	ldr	r6, [r1, #0]
   d6fba:	f7fd f86e 	bl	d409a <_Znwj>
   d6fbe:	4605      	mov	r5, r0
   d6fc0:	b120      	cbz	r0, d6fcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6fc2:	4631      	mov	r1, r6
   d6fc4:	f7ff ffdd 	bl	d6f82 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6fc8:	7c33      	ldrb	r3, [r6, #16]
   d6fca:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6fcc:	6025      	str	r5, [r4, #0]
   d6fce:	e008      	b.n	d6fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6fd0:	6804      	ldr	r4, [r0, #0]
   d6fd2:	b134      	cbz	r4, d6fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	f7ff f9b7 	bl	d6348 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6fda:	2114      	movs	r1, #20
   d6fdc:	4620      	mov	r0, r4
   d6fde:	f000 fcd1 	bl	d7984 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6fe2:	2000      	movs	r0, #0
   d6fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6fe8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6fe8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6fea:	2300      	movs	r3, #0
   d6fec:	b087      	sub	sp, #28
   d6fee:	460c      	mov	r4, r1
   d6ff0:	f3bf 8f5f 	dmb	sy
   d6ff4:	e850 6f00 	ldrex	r6, [r0]
   d6ff8:	e840 3200 	strex	r2, r3, [r0]
   d6ffc:	2a00      	cmp	r2, #0
   d6ffe:	d1f9      	bne.n	d6ff4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7000:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7004:	2e00      	cmp	r6, #0
   d7006:	d03f      	beq.n	d7088 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7008:	4618      	mov	r0, r3
   d700a:	f7ff f92f 	bl	d626c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d700e:	4607      	mov	r7, r0
   d7010:	b120      	cbz	r0, d701c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7012:	4621      	mov	r1, r4
   d7014:	4630      	mov	r0, r6
   d7016:	f7ff fe53 	bl	d6cc0 <_ZNKSt8functionIFvRKbEEclES1_>
   d701a:	e02e      	b.n	d707a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d701c:	4631      	mov	r1, r6
   d701e:	a801      	add	r0, sp, #4
   d7020:	f7ff ffaf 	bl	d6f82 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7024:	7823      	ldrb	r3, [r4, #0]
   d7026:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d702a:	2010      	movs	r0, #16
   d702c:	f7fd f835 	bl	d409a <_Znwj>
   d7030:	4605      	mov	r5, r0
   d7032:	b1d0      	cbz	r0, d706a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7034:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7036:	2014      	movs	r0, #20
   d7038:	f7fd f82f 	bl	d409a <_Znwj>
   d703c:	4604      	mov	r4, r0
   d703e:	b178      	cbz	r0, d7060 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7040:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7042:	4601      	mov	r1, r0
   d7044:	a801      	add	r0, sp, #4
   d7046:	f7ff fe06 	bl	d6c56 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d704a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d704c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d704e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7050:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7052:	9203      	str	r2, [sp, #12]
   d7054:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7056:	60e3      	str	r3, [r4, #12]
   d7058:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d705c:	9204      	str	r2, [sp, #16]
   d705e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7060:	4b0a      	ldr	r3, [pc, #40]	; (d708c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7062:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7064:	4b0a      	ldr	r3, [pc, #40]	; (d7090 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7066:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7068:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d706a:	a801      	add	r0, sp, #4
   d706c:	f7ff f96c 	bl	d6348 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7070:	2200      	movs	r2, #0
   d7072:	4629      	mov	r1, r5
   d7074:	4807      	ldr	r0, [pc, #28]	; (d7094 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7076:	f7ff f901 	bl	d627c <application_thread_invoke>
   d707a:	4630      	mov	r0, r6
   d707c:	f7ff f964 	bl	d6348 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7080:	2110      	movs	r1, #16
   d7082:	4630      	mov	r0, r6
   d7084:	f000 fc7e 	bl	d7984 <_ZdlPvj>
        }
    }
   d7088:	b007      	add	sp, #28
   d708a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d708c:	000d6cd3 	.word	0x000d6cd3
   d7090:	000d6fa1 	.word	0x000d6fa1
   d7094:	000d682f 	.word	0x000d682f

000d7098 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7098:	b530      	push	{r4, r5, lr}
   d709a:	b085      	sub	sp, #20
   d709c:	4604      	mov	r4, r0
   d709e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d70a0:	4668      	mov	r0, sp
   d70a2:	4611      	mov	r1, r2
   d70a4:	f7ff fdb9 	bl	d6c1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d70a8:	b17c      	cbz	r4, d70ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d70aa:	b224      	sxth	r4, r4
   d70ac:	4628      	mov	r0, r5
   d70ae:	b10d      	cbz	r5, d70b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d70b0:	f001 fd68 	bl	d8b84 <strdup>
   d70b4:	9002      	str	r0, [sp, #8]
   d70b6:	a902      	add	r1, sp, #8
   d70b8:	4668      	mov	r0, sp
   d70ba:	f8ad 400c 	strh.w	r4, [sp, #12]
   d70be:	f7ff fe1f 	bl	d6d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d70c2:	a802      	add	r0, sp, #8
   d70c4:	f7ff fd6e 	bl	d6ba4 <_ZN8particle5ErrorD1Ev>
   d70c8:	e01d      	b.n	d7106 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d70ca:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d70cc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d70d0:	f04f 0201 	mov.w	r2, #1
   d70d4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d70d8:	42a3      	cmp	r3, r4
   d70da:	d103      	bne.n	d70e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d70dc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d70e0:	2900      	cmp	r1, #0
   d70e2:	d1f7      	bne.n	d70d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d70e4:	d002      	beq.n	d70ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d70e6:	f88d 3008 	strb.w	r3, [sp, #8]
   d70ea:	e00c      	b.n	d7106 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d70ec:	f110 010c 	adds.w	r1, r0, #12
   d70f0:	f04f 0301 	mov.w	r3, #1
   d70f4:	bf18      	it	ne
   d70f6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d70f8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d70fc:	3004      	adds	r0, #4
   d70fe:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7102:	f7ff ff71 	bl	d6fe8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7106:	a801      	add	r0, sp, #4
   d7108:	f7fd f930 	bl	d436c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d710c:	b005      	add	sp, #20
   d710e:	bd30      	pop	{r4, r5, pc}

000d7110 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7110:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7112:	4b0f      	ldr	r3, [pc, #60]	; (d7150 <serialEventRun+0x40>)
   d7114:	b133      	cbz	r3, d7124 <serialEventRun+0x14>
   d7116:	f7ff fc8f 	bl	d6a38 <_Z16_fetch_usbserialv>
   d711a:	6803      	ldr	r3, [r0, #0]
   d711c:	691b      	ldr	r3, [r3, #16]
   d711e:	4798      	blx	r3
   d7120:	2800      	cmp	r0, #0
   d7122:	dc0d      	bgt.n	d7140 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7124:	4b0b      	ldr	r3, [pc, #44]	; (d7154 <serialEventRun+0x44>)
   d7126:	b133      	cbz	r3, d7136 <serialEventRun+0x26>
   d7128:	f7ff fbf6 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d712c:	6803      	ldr	r3, [r0, #0]
   d712e:	691b      	ldr	r3, [r3, #16]
   d7130:	4798      	blx	r3
   d7132:	2800      	cmp	r0, #0
   d7134:	dc07      	bgt.n	d7146 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d7136:	4b08      	ldr	r3, [pc, #32]	; (d7158 <serialEventRun+0x48>)
   d7138:	b143      	cbz	r3, d714c <serialEventRun+0x3c>
   d713a:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d713e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7140:	f3af 8000 	nop.w
   d7144:	e7ee      	b.n	d7124 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7146:	f3af 8000 	nop.w
   d714a:	e7f4      	b.n	d7136 <serialEventRun+0x26>
   d714c:	bd08      	pop	{r3, pc}
   d714e:	bf00      	nop
	...

000d715c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d715c:	b508      	push	{r3, lr}
	serialEventRun();
   d715e:	f7ff ffd7 	bl	d7110 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7162:	f7fe ff43 	bl	d5fec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7166:	4b01      	ldr	r3, [pc, #4]	; (d716c <_post_loop+0x10>)
   d7168:	6018      	str	r0, [r3, #0]
   d716a:	bd08      	pop	{r3, pc}
   d716c:	2003e73c 	.word	0x2003e73c

000d7170 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7170:	4802      	ldr	r0, [pc, #8]	; (d717c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7172:	4a03      	ldr	r2, [pc, #12]	; (d7180 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7174:	4903      	ldr	r1, [pc, #12]	; (d7184 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7176:	1a12      	subs	r2, r2, r0
   d7178:	f001 bcc0 	b.w	d8afc <memcpy>
   d717c:	2003f400 	.word	0x2003f400
   d7180:	2003f404 	.word	0x2003f404
   d7184:	000d9670 	.word	0x000d9670

000d7188 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7188:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d718a:	2300      	movs	r3, #0
   d718c:	9300      	str	r3, [sp, #0]
   d718e:	461a      	mov	r2, r3
   d7190:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7194:	f7ff f884 	bl	d62a0 <system_ctrl_set_result>
}
   d7198:	b003      	add	sp, #12
   d719a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d71a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d71a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d71a2:	8843      	ldrh	r3, [r0, #2]
   d71a4:	2b0a      	cmp	r3, #10
   d71a6:	d008      	beq.n	d71ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d71a8:	2b50      	cmp	r3, #80	; 0x50
   d71aa:	d109      	bne.n	d71c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d71ac:	4b09      	ldr	r3, [pc, #36]	; (d71d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d71ae:	681b      	ldr	r3, [r3, #0]
   d71b0:	b13b      	cbz	r3, d71c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d71b2:	b003      	add	sp, #12
   d71b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d71b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d71ba:	f7ff ffe5 	bl	d7188 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d71be:	e006      	b.n	d71ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71c0:	2300      	movs	r3, #0
   d71c2:	9300      	str	r3, [sp, #0]
   d71c4:	461a      	mov	r2, r3
   d71c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71ca:	f7ff f869 	bl	d62a0 <system_ctrl_set_result>
        break;
    }
}
   d71ce:	b003      	add	sp, #12
   d71d0:	f85d fb04 	ldr.w	pc, [sp], #4
   d71d4:	2003e6ec 	.word	0x2003e6ec

000d71d8 <module_user_init_hook>:

void module_user_init_hook()
{
   d71d8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d71da:	4c10      	ldr	r4, [pc, #64]	; (d721c <module_user_init_hook+0x44>)
   d71dc:	4d10      	ldr	r5, [pc, #64]	; (d7220 <module_user_init_hook+0x48>)
   d71de:	6823      	ldr	r3, [r4, #0]
   d71e0:	42ab      	cmp	r3, r5
   d71e2:	4b10      	ldr	r3, [pc, #64]	; (d7224 <module_user_init_hook+0x4c>)
   d71e4:	bf0c      	ite	eq
   d71e6:	2201      	moveq	r2, #1
   d71e8:	2200      	movne	r2, #0
   d71ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d71ec:	d002      	beq.n	d71f4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d71ee:	f7ff ffbf 	bl	d7170 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d71f2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d71f4:	f7fe fef2 	bl	d5fdc <HAL_RNG_GetRandomNumber>
   d71f8:	4604      	mov	r4, r0
    srand(seed);
   d71fa:	f001 fc93 	bl	d8b24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d71fe:	4b0a      	ldr	r3, [pc, #40]	; (d7228 <module_user_init_hook+0x50>)
   d7200:	b113      	cbz	r3, d7208 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7202:	4620      	mov	r0, r4
   d7204:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7208:	2100      	movs	r1, #0
   d720a:	4807      	ldr	r0, [pc, #28]	; (d7228 <module_user_init_hook+0x50>)
   d720c:	f7fe ffc6 	bl	d619c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7210:	2100      	movs	r1, #0
   d7212:	4806      	ldr	r0, [pc, #24]	; (d722c <module_user_init_hook+0x54>)
}
   d7214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7218:	f7ff b838 	b.w	d628c <system_ctrl_set_app_request_handler>
   d721c:	2003f400 	.word	0x2003f400
   d7220:	9a271c1e 	.word	0x9a271c1e
   d7224:	2003e6f0 	.word	0x2003e6f0
   d7228:	00000000 	.word	0x00000000
   d722c:	000d71a1 	.word	0x000d71a1

000d7230 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7230:	b510      	push	{r4, lr}
   d7232:	4604      	mov	r4, r0
   d7234:	f7ff f888 	bl	d6348 <_ZNSt14_Function_baseD1Ev>
   d7238:	4620      	mov	r0, r4
   d723a:	bd10      	pop	{r4, pc}

000d723c <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d723c:	b510      	push	{r4, lr}
   d723e:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7240:	f7fe ff7c 	bl	d613c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d7244:	4284      	cmp	r4, r0
   d7246:	d008      	beq.n	d725a <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7248:	b11c      	cbz	r4, d7252 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d724a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d724e:	f7fe bf5d 	b.w	d610c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d7252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d7256:	f7fe bf61 	b.w	d611c <LED_Signaling_Stop>
   d725a:	bd10      	pop	{r4, pc}

000d725c <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d725c:	b570      	push	{r4, r5, r6, lr}
   d725e:	4605      	mov	r5, r0
   d7260:	460e      	mov	r6, r1
   d7262:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7264:	f7fe ff6a 	bl	d613c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d7268:	b150      	cbz	r0, d7280 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d726a:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d726e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d7272:	f7fe ff43 	bl	d60fc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d7276:	20e7      	movs	r0, #231	; 0xe7
}
   d7278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d727c:	f7fe bf66 	b.w	d614c <LED_On>
   d7280:	bd70      	pop	{r4, r5, r6, pc}

000d7282 <_ZN8RGBClass10brightnessEhb>:
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d7282:	b510      	push	{r4, lr}
   d7284:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d7286:	f7fe ff51 	bl	d612c <LED_SetBrightness>

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d728a:	f7fe ff57 	bl	d613c <LED_RGB_IsOverRidden>
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
   d728e:	b128      	cbz	r0, d729c <_ZN8RGBClass10brightnessEhb+0x1a>
   d7290:	b124      	cbz	r4, d729c <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
   d7292:	20e7      	movs	r0, #231	; 0xe7
    }
}
   d7294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
        LED_On(LED_RGB);
   d7298:	f7fe bf58 	b.w	d614c <LED_On>
   d729c:	bd10      	pop	{r4, pc}
	...

000d72a0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d72a0:	4803      	ldr	r0, [pc, #12]	; (d72b0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d72a2:	4a04      	ldr	r2, [pc, #16]	; (d72b4 <_GLOBAL__sub_I_RGB+0x14>)
   d72a4:	4904      	ldr	r1, [pc, #16]	; (d72b8 <_GLOBAL__sub_I_RGB+0x18>)
   d72a6:	2300      	movs	r3, #0
   d72a8:	6083      	str	r3, [r0, #8]
   d72aa:	f000 bb5e 	b.w	d796a <__aeabi_atexit>
   d72ae:	bf00      	nop
   d72b0:	2003e6f4 	.word	0x2003e6f4
   d72b4:	2003d628 	.word	0x2003d628
   d72b8:	000d7231 	.word	0x000d7231

000d72bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d72bc:	2100      	movs	r1, #0
   d72be:	f7fe bfcd 	b.w	d625c <system_delay_ms>
	...

000d72c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d72c4:	4b02      	ldr	r3, [pc, #8]	; (d72d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d72c6:	681a      	ldr	r2, [r3, #0]
   d72c8:	4b02      	ldr	r3, [pc, #8]	; (d72d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d72ca:	601a      	str	r2, [r3, #0]
   d72cc:	4770      	bx	lr
   d72ce:	bf00      	nop
   d72d0:	2003d5bc 	.word	0x2003d5bc
   d72d4:	2003e704 	.word	0x2003e704

000d72d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d72d8:	4b01      	ldr	r3, [pc, #4]	; (d72e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d72da:	4a02      	ldr	r2, [pc, #8]	; (d72e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d72dc:	601a      	str	r2, [r3, #0]
   d72de:	4770      	bx	lr
   d72e0:	2003e708 	.word	0x2003e708
   d72e4:	000d94f6 	.word	0x000d94f6

000d72e8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d72e8:	b510      	push	{r4, lr}
   d72ea:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d72ec:	f7fe fe7e 	bl	d5fec <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d72f0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d72f2:	6823      	ldr	r3, [r4, #0]
   d72f4:	4620      	mov	r0, r4
   d72f6:	695b      	ldr	r3, [r3, #20]
   d72f8:	4798      	blx	r3
    if (c >= 0) return c;
   d72fa:	2800      	cmp	r0, #0
   d72fc:	da08      	bge.n	d7310 <_ZN6Stream9timedReadEv+0x28>
   d72fe:	f7fe fe75 	bl	d5fec <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d7302:	68e3      	ldr	r3, [r4, #12]
   d7304:	1ac0      	subs	r0, r0, r3
   d7306:	68a3      	ldr	r3, [r4, #8]
   d7308:	4298      	cmp	r0, r3
   d730a:	d3f2      	bcc.n	d72f2 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d730c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7310:	bd10      	pop	{r4, pc}

000d7312 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   d7312:	6081      	str	r1, [r0, #8]
   d7314:	4770      	bx	lr
	...

000d7318 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d7318:	b570      	push	{r4, r5, r6, lr}
   d731a:	460d      	mov	r5, r1
  String ret;
   d731c:	4909      	ldr	r1, [pc, #36]	; (d7344 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d731e:	4604      	mov	r4, r0
   d7320:	4616      	mov	r6, r2
  String ret;
   d7322:	f000 f912 	bl	d754a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d7326:	4628      	mov	r0, r5
   d7328:	f7ff ffde 	bl	d72e8 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d732c:	2800      	cmp	r0, #0
   d732e:	db06      	blt.n	d733e <_ZN6Stream15readStringUntilEc+0x26>
   d7330:	42b0      	cmp	r0, r6
   d7332:	d004      	beq.n	d733e <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d7334:	b2c1      	uxtb	r1, r0
   d7336:	4620      	mov	r0, r4
   d7338:	f000 f956 	bl	d75e8 <_ZN6String6concatEc>
   d733c:	e7f3      	b.n	d7326 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d733e:	4620      	mov	r0, r4
   d7340:	bd70      	pop	{r4, r5, r6, pc}
   d7342:	bf00      	nop
   d7344:	000d8f07 	.word	0x000d8f07

000d7348 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d734a:	4606      	mov	r6, r0
   d734c:	460d      	mov	r5, r1
   d734e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7350:	2400      	movs	r4, #0
  while (size--) {
   d7352:	42bd      	cmp	r5, r7
   d7354:	d00c      	beq.n	d7370 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7356:	6833      	ldr	r3, [r6, #0]
   d7358:	f815 1b01 	ldrb.w	r1, [r5], #1
   d735c:	689b      	ldr	r3, [r3, #8]
   d735e:	4630      	mov	r0, r6
   d7360:	4798      	blx	r3
     if (chunk>=0)
   d7362:	2800      	cmp	r0, #0
   d7364:	db01      	blt.n	d736a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7366:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7368:	e7f3      	b.n	d7352 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d736a:	2c00      	cmp	r4, #0
   d736c:	bf08      	it	eq
   d736e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7370:	4620      	mov	r0, r4
   d7372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7374 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7374:	b570      	push	{r4, r5, r6, lr}
   d7376:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7378:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d737a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d737c:	b149      	cbz	r1, d7392 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d737e:	f001 fc1c 	bl	d8bba <strlen>
   d7382:	682b      	ldr	r3, [r5, #0]
   d7384:	4602      	mov	r2, r0
   d7386:	4621      	mov	r1, r4
   d7388:	4628      	mov	r0, r5
   d738a:	68db      	ldr	r3, [r3, #12]
    }
   d738c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7390:	4718      	bx	r3
    }
   d7392:	bd70      	pop	{r4, r5, r6, pc}

000d7394 <_ZN5Print5printEPKc>:
   d7394:	b508      	push	{r3, lr}
   d7396:	f7ff ffed 	bl	d7374 <_ZN5Print5writeEPKc>
   d739a:	bd08      	pop	{r3, pc}

000d739c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d739c:	6803      	ldr	r3, [r0, #0]
   d739e:	689b      	ldr	r3, [r3, #8]
   d73a0:	4718      	bx	r3

000d73a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d73a4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d73a8:	f7ff fff8 	bl	d739c <_ZN5Print5printEc>
  n += print('\n');
   d73ac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d73ae:	4604      	mov	r4, r0
  n += print('\n');
   d73b0:	4628      	mov	r0, r5
   d73b2:	f7ff fff3 	bl	d739c <_ZN5Print5printEc>
  return n;
}
   d73b6:	4420      	add	r0, r4
   d73b8:	bd38      	pop	{r3, r4, r5, pc}

000d73ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d73ba:	b538      	push	{r3, r4, r5, lr}
   d73bc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d73be:	f7ff ffd9 	bl	d7374 <_ZN5Print5writeEPKc>
   d73c2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d73c4:	4628      	mov	r0, r5
   d73c6:	f7ff ffec 	bl	d73a2 <_ZN5Print7printlnEv>
  return n;
}
   d73ca:	4420      	add	r0, r4
   d73cc:	bd38      	pop	{r3, r4, r5, pc}

000d73ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d73ce:	b530      	push	{r4, r5, lr}
   d73d0:	b08b      	sub	sp, #44	; 0x2c
   d73d2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d73d4:	2100      	movs	r1, #0
   d73d6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d73da:	2a01      	cmp	r2, #1
   d73dc:	bf98      	it	ls
   d73de:	220a      	movls	r2, #10
   d73e0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d73e4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d73e8:	fb05 3312 	mls	r3, r5, r2, r3
   d73ec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d73f0:	2b09      	cmp	r3, #9
   d73f2:	bf94      	ite	ls
   d73f4:	3330      	addls	r3, #48	; 0x30
   d73f6:	3337      	addhi	r3, #55	; 0x37
   d73f8:	b2db      	uxtb	r3, r3
   d73fa:	4621      	mov	r1, r4
   d73fc:	f804 3901 	strb.w	r3, [r4], #-1
   d7400:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7402:	2d00      	cmp	r5, #0
   d7404:	d1ee      	bne.n	d73e4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7406:	f7ff ffb5 	bl	d7374 <_ZN5Print5writeEPKc>
}
   d740a:	b00b      	add	sp, #44	; 0x2c
   d740c:	bd30      	pop	{r4, r5, pc}

000d740e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d740e:	b40c      	push	{r2, r3}
   d7410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7414:	b087      	sub	sp, #28
   d7416:	af00      	add	r7, sp, #0
   d7418:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d741c:	4605      	mov	r5, r0
   d741e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7422:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7424:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7426:	4623      	mov	r3, r4
   d7428:	464a      	mov	r2, r9
   d742a:	2114      	movs	r1, #20
   d742c:	1d38      	adds	r0, r7, #4
   d742e:	f7fe ff6b 	bl	d6308 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7432:	2813      	cmp	r0, #19
   d7434:	d805      	bhi.n	d7442 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7436:	1d39      	adds	r1, r7, #4
   d7438:	4628      	mov	r0, r5
   d743a:	f7ff ff9b 	bl	d7374 <_ZN5Print5writeEPKc>
   d743e:	4604      	mov	r4, r0
   d7440:	e013      	b.n	d746a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7442:	f100 0308 	add.w	r3, r0, #8
   d7446:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d744a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d744c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7450:	1c41      	adds	r1, r0, #1
   d7452:	4623      	mov	r3, r4
   d7454:	464a      	mov	r2, r9
   d7456:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7458:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d745a:	f7fe ff55 	bl	d6308 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d745e:	4669      	mov	r1, sp
   d7460:	4628      	mov	r0, r5
   d7462:	f7ff ff87 	bl	d7374 <_ZN5Print5writeEPKc>
   d7466:	4604      	mov	r4, r0
   d7468:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d746a:	b11e      	cbz	r6, d7474 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d746c:	4628      	mov	r0, r5
   d746e:	f7ff ff98 	bl	d73a2 <_ZN5Print7printlnEv>
   d7472:	4404      	add	r4, r0
    return n;
}
   d7474:	4620      	mov	r0, r4
   d7476:	371c      	adds	r7, #28
   d7478:	46bd      	mov	sp, r7
   d747a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d747e:	b002      	add	sp, #8
   d7480:	4770      	bx	lr

000d7482 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d7482:	b510      	push	{r4, lr}
   d7484:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7486:	6800      	ldr	r0, [r0, #0]
   d7488:	b108      	cbz	r0, d748e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d748a:	f7fe fd97 	bl	d5fbc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d748e:	4620      	mov	r0, r4
   d7490:	bd10      	pop	{r4, pc}
	...

000d7494 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7494:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7496:	4c06      	ldr	r4, [pc, #24]	; (d74b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7498:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d749a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d749c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d749e:	f7fe fd85 	bl	d5fac <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d74a2:	4620      	mov	r0, r4
   d74a4:	4a03      	ldr	r2, [pc, #12]	; (d74b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d74a6:	4904      	ldr	r1, [pc, #16]	; (d74b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d74a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d74ac:	f000 ba5d 	b.w	d796a <__aeabi_atexit>
   d74b0:	2003e70c 	.word	0x2003e70c
   d74b4:	2003d628 	.word	0x2003d628
   d74b8:	000d7483 	.word	0x000d7483

000d74bc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d74bc:	b510      	push	{r4, lr}
   d74be:	4604      	mov	r4, r0
{
	free(buffer);
   d74c0:	6800      	ldr	r0, [r0, #0]
   d74c2:	f7fe ff09 	bl	d62d8 <free>
}
   d74c6:	4620      	mov	r0, r4
   d74c8:	bd10      	pop	{r4, pc}

000d74ca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d74ca:	b510      	push	{r4, lr}
   d74cc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d74ce:	6800      	ldr	r0, [r0, #0]
   d74d0:	b108      	cbz	r0, d74d6 <_ZN6String10invalidateEv+0xc>
   d74d2:	f7fe ff01 	bl	d62d8 <free>
	buffer = NULL;
   d74d6:	2300      	movs	r3, #0
   d74d8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d74da:	60a3      	str	r3, [r4, #8]
   d74dc:	6063      	str	r3, [r4, #4]
   d74de:	bd10      	pop	{r4, pc}

000d74e0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d74e0:	b538      	push	{r3, r4, r5, lr}
   d74e2:	4604      	mov	r4, r0
   d74e4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d74e6:	6800      	ldr	r0, [r0, #0]
   d74e8:	3101      	adds	r1, #1
   d74ea:	f7fe fefd 	bl	d62e8 <realloc>
	if (newbuffer) {
   d74ee:	b110      	cbz	r0, d74f6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d74f0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d74f4:	2001      	movs	r0, #1
	}
	return 0;
}
   d74f6:	bd38      	pop	{r3, r4, r5, pc}

000d74f8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d74f8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d74fa:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d74fc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d74fe:	b113      	cbz	r3, d7506 <_ZN6String7reserveEj+0xe>
   d7500:	6843      	ldr	r3, [r0, #4]
   d7502:	428b      	cmp	r3, r1
   d7504:	d207      	bcs.n	d7516 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7506:	4620      	mov	r0, r4
   d7508:	f7ff ffea 	bl	d74e0 <_ZN6String12changeBufferEj>
   d750c:	b120      	cbz	r0, d7518 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d750e:	68a3      	ldr	r3, [r4, #8]
   d7510:	b90b      	cbnz	r3, d7516 <_ZN6String7reserveEj+0x1e>
   d7512:	6822      	ldr	r2, [r4, #0]
   d7514:	7013      	strb	r3, [r2, #0]
   d7516:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7518:	bd10      	pop	{r4, pc}

000d751a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d751a:	b570      	push	{r4, r5, r6, lr}
   d751c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d751e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7520:	4604      	mov	r4, r0
   d7522:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7524:	f7ff ffe8 	bl	d74f8 <_ZN6String7reserveEj>
   d7528:	b918      	cbnz	r0, d7532 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d752a:	4620      	mov	r0, r4
   d752c:	f7ff ffcd 	bl	d74ca <_ZN6String10invalidateEv>
		return *this;
   d7530:	e009      	b.n	d7546 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7532:	462a      	mov	r2, r5
   d7534:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7536:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7538:	6820      	ldr	r0, [r4, #0]
   d753a:	f001 fadf 	bl	d8afc <memcpy>
	buffer[len] = 0;
   d753e:	6822      	ldr	r2, [r4, #0]
   d7540:	68a3      	ldr	r3, [r4, #8]
   d7542:	2100      	movs	r1, #0
   d7544:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7546:	4620      	mov	r0, r4
   d7548:	bd70      	pop	{r4, r5, r6, pc}

000d754a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d754a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d754c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d754e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7550:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7552:	6043      	str	r3, [r0, #4]
	len = 0;
   d7554:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7556:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7558:	460d      	mov	r5, r1
   d755a:	b139      	cbz	r1, d756c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d755c:	4608      	mov	r0, r1
   d755e:	f001 fb2c 	bl	d8bba <strlen>
   d7562:	4629      	mov	r1, r5
   d7564:	4602      	mov	r2, r0
   d7566:	4620      	mov	r0, r4
   d7568:	f7ff ffd7 	bl	d751a <_ZN6String4copyEPKcj>
}
   d756c:	4620      	mov	r0, r4
   d756e:	bd38      	pop	{r3, r4, r5, pc}

000d7570 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7570:	b538      	push	{r3, r4, r5, lr}
   d7572:	4605      	mov	r5, r0
	if (buffer) {
   d7574:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7576:	460c      	mov	r4, r1
	if (buffer) {
   d7578:	b160      	cbz	r0, d7594 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d757a:	686a      	ldr	r2, [r5, #4]
   d757c:	688b      	ldr	r3, [r1, #8]
   d757e:	429a      	cmp	r2, r3
   d7580:	d306      	bcc.n	d7590 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d7582:	6809      	ldr	r1, [r1, #0]
   d7584:	f001 faf6 	bl	d8b74 <strcpy>
			len = rhs.len;
   d7588:	68a3      	ldr	r3, [r4, #8]
   d758a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d758c:	2300      	movs	r3, #0
   d758e:	e00a      	b.n	d75a6 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d7590:	f7fe fea2 	bl	d62d8 <free>
		}
	}
	buffer = rhs.buffer;
   d7594:	6823      	ldr	r3, [r4, #0]
   d7596:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d7598:	6863      	ldr	r3, [r4, #4]
   d759a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d759c:	68a3      	ldr	r3, [r4, #8]
   d759e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d75a0:	2300      	movs	r3, #0
   d75a2:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d75a4:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d75a6:	60a3      	str	r3, [r4, #8]
   d75a8:	bd38      	pop	{r3, r4, r5, pc}

000d75aa <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d75aa:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d75ac:	b510      	push	{r4, lr}
   d75ae:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d75b0:	d001      	beq.n	d75b6 <_ZN6StringaSEOS_+0xc>
   d75b2:	f7ff ffdd 	bl	d7570 <_ZN6String4moveERS_>
	return *this;
}
   d75b6:	4620      	mov	r0, r4
   d75b8:	bd10      	pop	{r4, pc}

000d75ba <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d75ba:	b570      	push	{r4, r5, r6, lr}
   d75bc:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d75be:	460e      	mov	r6, r1
   d75c0:	b909      	cbnz	r1, d75c6 <_ZN6String6concatEPKcj+0xc>
   d75c2:	2000      	movs	r0, #0
   d75c4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d75c6:	b16a      	cbz	r2, d75e4 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d75c8:	6883      	ldr	r3, [r0, #8]
   d75ca:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d75cc:	4629      	mov	r1, r5
   d75ce:	f7ff ff93 	bl	d74f8 <_ZN6String7reserveEj>
   d75d2:	2800      	cmp	r0, #0
   d75d4:	d0f5      	beq.n	d75c2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d75d6:	6820      	ldr	r0, [r4, #0]
   d75d8:	68a3      	ldr	r3, [r4, #8]
   d75da:	4631      	mov	r1, r6
   d75dc:	4418      	add	r0, r3
   d75de:	f001 fac9 	bl	d8b74 <strcpy>
	len = newlen;
   d75e2:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d75e4:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d75e6:	bd70      	pop	{r4, r5, r6, pc}

000d75e8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d75e8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d75ea:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d75ec:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d75f0:	2201      	movs	r2, #1
   d75f2:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d75f4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d75f8:	f7ff ffdf 	bl	d75ba <_ZN6String6concatEPKcj>
}
   d75fc:	b003      	add	sp, #12
   d75fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d7602 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7602:	b510      	push	{r4, lr}
   d7604:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7606:	6800      	ldr	r0, [r0, #0]
   d7608:	b118      	cbz	r0, d7612 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d760a:	f7fe fe65 	bl	d62d8 <free>
            wakeupSource_ = nullptr;
   d760e:	2300      	movs	r3, #0
   d7610:	6023      	str	r3, [r4, #0]
   d7612:	bd10      	pop	{r4, pc}

000d7614 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7614:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7616:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d761a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d761c:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d761e:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7620:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7624:	f8c0 2006 	str.w	r2, [r0, #6]
   d7628:	889b      	ldrh	r3, [r3, #4]
   d762a:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d762c:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d762e:	f7ff ffe8 	bl	d7602 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d7632:	682b      	ldr	r3, [r5, #0]
   d7634:	b113      	cbz	r3, d763c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7636:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7638:	2300      	movs	r3, #0
   d763a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d763c:	4620      	mov	r0, r4
   d763e:	bd38      	pop	{r3, r4, r5, pc}

000d7640 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d7640:	b538      	push	{r3, r4, r5, lr}
   d7642:	460c      	mov	r4, r1
   d7644:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d7646:	f7ff ffdc 	bl	d7602 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d764a:	b144      	cbz	r4, d765e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d764c:	8820      	ldrh	r0, [r4, #0]
   d764e:	f7fe fe3b 	bl	d62c8 <malloc>
   d7652:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7654:	b128      	cbz	r0, d7662 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7656:	8822      	ldrh	r2, [r4, #0]
   d7658:	4621      	mov	r1, r4
   d765a:	f001 fa4f 	bl	d8afc <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d765e:	2000      	movs	r0, #0
   d7660:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d7662:	4801      	ldr	r0, [pc, #4]	; (d7668 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d7664:	bd38      	pop	{r3, r4, r5, pc}
   d7666:	bf00      	nop
   d7668:	fffffefc 	.word	0xfffffefc

000d766c <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d766c:	4601      	mov	r1, r0
   d766e:	2200      	movs	r2, #0
   d7670:	208c      	movs	r0, #140	; 0x8c
   d7672:	f7fe bcab 	b.w	d5fcc <HAL_Core_System_Reset_Ex>

000d7676 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d7676:	2000      	movs	r0, #0
   d7678:	f7ff bff8 	b.w	d766c <_ZN11SystemClass5resetEm>

000d767c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d767c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d767e:	4d30      	ldr	r5, [pc, #192]	; (d7740 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7680:	7d0b      	ldrb	r3, [r1, #20]
   d7682:	4604      	mov	r4, r0
   d7684:	b08b      	sub	sp, #44	; 0x2c
   d7686:	4608      	mov	r0, r1
   d7688:	1daf      	adds	r7, r5, #6
   d768a:	b313      	cbz	r3, d76d2 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d768c:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d768e:	791b      	ldrb	r3, [r3, #4]
   d7690:	b1fb      	cbz	r3, d76d2 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7692:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7694:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7698:	a902      	add	r1, sp, #8
   d769a:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d769c:	9202      	str	r2, [sp, #8]
   d769e:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76a2:	f88d 200e 	strb.w	r2, [sp, #14]
   d76a6:	f8ad 2010 	strh.w	r2, [sp, #16]
   d76aa:	f8ad 3012 	strh.w	r3, [sp, #18]
   d76ae:	f7fe fe01 	bl	d62b4 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d76b2:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d76b4:	b200      	sxth	r0, r0
   d76b6:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d76ba:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d76be:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d76c0:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d76c2:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d76c6:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d76c8:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d76ca:	4628      	mov	r0, r5
   d76cc:	f7ff ffb8 	bl	d7640 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d76d0:	e01c      	b.n	d770c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d76d2:	2320      	movs	r3, #32
   d76d4:	2600      	movs	r6, #0
   d76d6:	9302      	str	r3, [sp, #8]
   d76d8:	4b1a      	ldr	r3, [pc, #104]	; (d7744 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d76da:	9300      	str	r3, [sp, #0]
   d76dc:	491a      	ldr	r1, [pc, #104]	; (d7748 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d76de:	9603      	str	r6, [sp, #12]
   d76e0:	4633      	mov	r3, r6
   d76e2:	2032      	movs	r0, #50	; 0x32
   d76e4:	aa02      	add	r2, sp, #8
   d76e6:	f7fe fd39 	bl	d615c <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d76ee:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d76f2:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d76f4:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d76f8:	4811      	ldr	r0, [pc, #68]	; (d7740 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d76fa:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76fc:	f88d 600e 	strb.w	r6, [sp, #14]
   d7700:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d7704:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7708:	f7ff ff84 	bl	d7614 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d770c:	a802      	add	r0, sp, #8
   d770e:	f7ff ff78 	bl	d7602 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7712:	2300      	movs	r3, #0
   d7714:	6023      	str	r3, [r4, #0]
   d7716:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7718:	71a3      	strb	r3, [r4, #6]
   d771a:	8123      	strh	r3, [r4, #8]
   d771c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7720:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d7722:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d7726:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7728:	683b      	ldr	r3, [r7, #0]
   d772a:	f8c4 3006 	str.w	r3, [r4, #6]
   d772e:	88bb      	ldrh	r3, [r7, #4]
   d7730:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7732:	6829      	ldr	r1, [r5, #0]
   d7734:	4620      	mov	r0, r4
   d7736:	f7ff ff83 	bl	d7640 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d773a:	4620      	mov	r0, r4
   d773c:	b00b      	add	sp, #44	; 0x2c
   d773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7740:	2003e710 	.word	0x2003e710
   d7744:	000d9565 	.word	0x000d9565
   d7748:	000d955e 	.word	0x000d955e

000d774c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d774c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d774e:	4c09      	ldr	r4, [pc, #36]	; (d7774 <_GLOBAL__sub_I_System+0x28>)
   d7750:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7752:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7756:	6020      	str	r0, [r4, #0]
   d7758:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d775a:	71a0      	strb	r0, [r4, #6]
   d775c:	8120      	strh	r0, [r4, #8]
   d775e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7760:	f7fe fd74 	bl	d624c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7764:	4620      	mov	r0, r4
   d7766:	4a04      	ldr	r2, [pc, #16]	; (d7778 <_GLOBAL__sub_I_System+0x2c>)
   d7768:	4904      	ldr	r1, [pc, #16]	; (d777c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d776e:	f000 b8fc 	b.w	d796a <__aeabi_atexit>
   d7772:	bf00      	nop
   d7774:	2003e710 	.word	0x2003e710
   d7778:	2003d628 	.word	0x2003d628
   d777c:	000d40ed 	.word	0x000d40ed

000d7780 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7780:	2200      	movs	r2, #0
   d7782:	4611      	mov	r1, r2
   d7784:	6840      	ldr	r0, [r0, #4]
   d7786:	f7fe bd49 	b.w	d621c <network_listening>

000d778a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d778a:	2200      	movs	r2, #0
   d778c:	4611      	mov	r1, r2
   d778e:	6840      	ldr	r0, [r0, #4]
   d7790:	f7fe bd54 	b.w	d623c <network_get_listen_timeout>

000d7794 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7794:	2200      	movs	r2, #0
   d7796:	6840      	ldr	r0, [r0, #4]
   d7798:	f7fe bd48 	b.w	d622c <network_set_listen_timeout>

000d779c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d779c:	2200      	movs	r2, #0
   d779e:	f081 0101 	eor.w	r1, r1, #1
   d77a2:	6840      	ldr	r0, [r0, #4]
   d77a4:	f7fe bd32 	b.w	d620c <network_listen>

000d77a8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d77a8:	2300      	movs	r3, #0
   d77aa:	461a      	mov	r2, r3
   d77ac:	4619      	mov	r1, r3
   d77ae:	6840      	ldr	r0, [r0, #4]
   d77b0:	f7fe bd24 	b.w	d61fc <network_off>

000d77b4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d77b4:	2300      	movs	r3, #0
   d77b6:	461a      	mov	r2, r3
   d77b8:	4619      	mov	r1, r3
   d77ba:	6840      	ldr	r0, [r0, #4]
   d77bc:	f7fe bd16 	b.w	d61ec <network_on>

000d77c0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d77c0:	2200      	movs	r2, #0
   d77c2:	4611      	mov	r1, r2
   d77c4:	6840      	ldr	r0, [r0, #4]
   d77c6:	f7fe bd09 	b.w	d61dc <network_ready>

000d77ca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d77ca:	2200      	movs	r2, #0
   d77cc:	4611      	mov	r1, r2
   d77ce:	6840      	ldr	r0, [r0, #4]
   d77d0:	f7fe bcf4 	b.w	d61bc <network_connecting>

000d77d4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d77d4:	2200      	movs	r2, #0
   d77d6:	2102      	movs	r1, #2
   d77d8:	6840      	ldr	r0, [r0, #4]
   d77da:	f7fe bcf7 	b.w	d61cc <network_disconnect>

000d77de <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d77de:	2300      	movs	r3, #0
   d77e0:	461a      	mov	r2, r3
   d77e2:	6840      	ldr	r0, [r0, #4]
   d77e4:	f7fe bce2 	b.w	d61ac <network_connect>

000d77e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d77e8:	4b02      	ldr	r3, [pc, #8]	; (d77f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d77ea:	2203      	movs	r2, #3
   d77ec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d77ee:	4a02      	ldr	r2, [pc, #8]	; (d77f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d77f0:	601a      	str	r2, [r3, #0]
   d77f2:	4770      	bx	lr
   d77f4:	2003e71c 	.word	0x2003e71c
   d77f8:	000d9594 	.word	0x000d9594

000d77fc <_Z17acquireWireBufferv>:
   d77fc:	b570      	push	{r4, r5, r6, lr}
   d77fe:	4604      	mov	r4, r0
   d7800:	2514      	movs	r5, #20
   d7802:	462a      	mov	r2, r5
   d7804:	4e09      	ldr	r6, [pc, #36]	; (d782c <_Z17acquireWireBufferv+0x30>)
   d7806:	2100      	movs	r1, #0
   d7808:	f001 f983 	bl	d8b12 <memset>
   d780c:	8025      	strh	r5, [r4, #0]
   d780e:	2520      	movs	r5, #32
   d7810:	4631      	mov	r1, r6
   d7812:	60a5      	str	r5, [r4, #8]
   d7814:	6125      	str	r5, [r4, #16]
   d7816:	4628      	mov	r0, r5
   d7818:	f000 f8b6 	bl	d7988 <_ZnajRKSt9nothrow_t>
   d781c:	4631      	mov	r1, r6
   d781e:	6060      	str	r0, [r4, #4]
   d7820:	4628      	mov	r0, r5
   d7822:	f000 f8b1 	bl	d7988 <_ZnajRKSt9nothrow_t>
   d7826:	60e0      	str	r0, [r4, #12]
   d7828:	4620      	mov	r0, r4
   d782a:	bd70      	pop	{r4, r5, r6, pc}
   d782c:	000d95c0 	.word	0x000d95c0

000d7830 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7830:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7832:	4d0e      	ldr	r5, [pc, #56]	; (d786c <_Z19__fetch_global_Wirev+0x3c>)
   d7834:	6829      	ldr	r1, [r5, #0]
   d7836:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d783a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d783c:	d113      	bne.n	d7866 <_Z19__fetch_global_Wirev+0x36>
   d783e:	4628      	mov	r0, r5
   d7840:	f7fc fc31 	bl	d40a6 <__cxa_guard_acquire>
   d7844:	b178      	cbz	r0, d7866 <_Z19__fetch_global_Wirev+0x36>
   d7846:	a801      	add	r0, sp, #4
   d7848:	f7ff ffd8 	bl	d77fc <_Z17acquireWireBufferv>
   d784c:	aa01      	add	r2, sp, #4
   d784e:	4621      	mov	r1, r4
   d7850:	4807      	ldr	r0, [pc, #28]	; (d7870 <_Z19__fetch_global_Wirev+0x40>)
   d7852:	f7fe ffc5 	bl	d67e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7856:	4628      	mov	r0, r5
   d7858:	f7fc fc2a 	bl	d40b0 <__cxa_guard_release>
   d785c:	4a05      	ldr	r2, [pc, #20]	; (d7874 <_Z19__fetch_global_Wirev+0x44>)
   d785e:	4906      	ldr	r1, [pc, #24]	; (d7878 <_Z19__fetch_global_Wirev+0x48>)
   d7860:	4803      	ldr	r0, [pc, #12]	; (d7870 <_Z19__fetch_global_Wirev+0x40>)
   d7862:	f000 f882 	bl	d796a <__aeabi_atexit>
	return wire;
}
   d7866:	4802      	ldr	r0, [pc, #8]	; (d7870 <_Z19__fetch_global_Wirev+0x40>)
   d7868:	b007      	add	sp, #28
   d786a:	bd30      	pop	{r4, r5, pc}
   d786c:	2003e724 	.word	0x2003e724
   d7870:	2003e728 	.word	0x2003e728
   d7874:	2003d628 	.word	0x2003d628
   d7878:	000d6787 	.word	0x000d6787

000d787c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d787c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d787e:	4e18      	ldr	r6, [pc, #96]	; (d78e0 <pinAvailable+0x64>)
   d7880:	6831      	ldr	r1, [r6, #0]
   d7882:	f011 0501 	ands.w	r5, r1, #1
   d7886:	4604      	mov	r4, r0
   d7888:	d10a      	bne.n	d78a0 <pinAvailable+0x24>
   d788a:	4630      	mov	r0, r6
   d788c:	f7fc fc0b 	bl	d40a6 <__cxa_guard_acquire>
   d7890:	b130      	cbz	r0, d78a0 <pinAvailable+0x24>
   d7892:	4629      	mov	r1, r5
   d7894:	4813      	ldr	r0, [pc, #76]	; (d78e4 <pinAvailable+0x68>)
   d7896:	f7fe fec9 	bl	d662c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d789a:	4630      	mov	r0, r6
   d789c:	f7fc fc08 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d78a0:	4810      	ldr	r0, [pc, #64]	; (d78e4 <pinAvailable+0x68>)
   d78a2:	f7fe ff6d 	bl	d6780 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d78a6:	b128      	cbz	r0, d78b4 <pinAvailable+0x38>
   d78a8:	f1a4 030b 	sub.w	r3, r4, #11
   d78ac:	2b02      	cmp	r3, #2
   d78ae:	d801      	bhi.n	d78b4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d78b0:	2000      	movs	r0, #0
   d78b2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d78b4:	f7ff ffbc 	bl	d7830 <_Z19__fetch_global_Wirev>
   d78b8:	f7fe ffb5 	bl	d6826 <_ZN7TwoWire9isEnabledEv>
   d78bc:	b108      	cbz	r0, d78c2 <pinAvailable+0x46>
   d78be:	2c01      	cmp	r4, #1
   d78c0:	d9f6      	bls.n	d78b0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d78c2:	f7ff f829 	bl	d6918 <_Z22__fetch_global_Serial1v>
   d78c6:	f7ff f824 	bl	d6912 <_ZN11USARTSerial9isEnabledEv>
   d78ca:	b118      	cbz	r0, d78d4 <pinAvailable+0x58>
   d78cc:	f1a4 0309 	sub.w	r3, r4, #9
   d78d0:	2b01      	cmp	r3, #1
   d78d2:	d9ed      	bls.n	d78b0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d78d4:	2c1e      	cmp	r4, #30
   d78d6:	bf8c      	ite	hi
   d78d8:	2000      	movhi	r0, #0
   d78da:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d78dc:	bd70      	pop	{r4, r5, r6, pc}
   d78de:	bf00      	nop
   d78e0:	2003e740 	.word	0x2003e740
   d78e4:	2003e744 	.word	0x2003e744

000d78e8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d78e8:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d78ea:	b538      	push	{r3, r4, r5, lr}
   d78ec:	4604      	mov	r4, r0
   d78ee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d78f0:	d80a      	bhi.n	d7908 <pinMode+0x20>
   d78f2:	29ff      	cmp	r1, #255	; 0xff
   d78f4:	d008      	beq.n	d7908 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d78f6:	f7ff ffc1 	bl	d787c <pinAvailable>
   d78fa:	b128      	cbz	r0, d7908 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d78fc:	4629      	mov	r1, r5
   d78fe:	4620      	mov	r0, r4
}
   d7900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7904:	f7fe bbca 	b.w	d609c <HAL_Pin_Mode>
   d7908:	bd38      	pop	{r3, r4, r5, pc}

000d790a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d790a:	b538      	push	{r3, r4, r5, lr}
   d790c:	4604      	mov	r4, r0
   d790e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7910:	f7fe fbcc 	bl	d60ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7914:	28ff      	cmp	r0, #255	; 0xff
   d7916:	d010      	beq.n	d793a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7918:	2806      	cmp	r0, #6
   d791a:	d804      	bhi.n	d7926 <digitalWrite+0x1c>
   d791c:	234d      	movs	r3, #77	; 0x4d
   d791e:	fa23 f000 	lsr.w	r0, r3, r0
   d7922:	07c3      	lsls	r3, r0, #31
   d7924:	d409      	bmi.n	d793a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7926:	4620      	mov	r0, r4
   d7928:	f7ff ffa8 	bl	d787c <pinAvailable>
   d792c:	b128      	cbz	r0, d793a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d792e:	4629      	mov	r1, r5
   d7930:	4620      	mov	r0, r4
}
   d7932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7936:	f7fe bbc1 	b.w	d60bc <HAL_GPIO_Write>
   d793a:	bd38      	pop	{r3, r4, r5, pc}

000d793c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d793c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d793e:	b510      	push	{r4, lr}
   d7940:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7942:	bf9c      	itt	ls
   d7944:	340e      	addls	r4, #14
   d7946:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7948:	4620      	mov	r0, r4
   d794a:	f7ff ff97 	bl	d787c <pinAvailable>
   d794e:	b150      	cbz	r0, d7966 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7950:	2103      	movs	r1, #3
   d7952:	4620      	mov	r0, r4
   d7954:	f7fe fb9a 	bl	d608c <HAL_Validate_Pin_Function>
   d7958:	2803      	cmp	r0, #3
   d795a:	d104      	bne.n	d7966 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d795c:	4620      	mov	r0, r4
}
   d795e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7962:	f7fe bbb3 	b.w	d60cc <HAL_ADC_Read>
}
   d7966:	2000      	movs	r0, #0
   d7968:	bd10      	pop	{r4, pc}

000d796a <__aeabi_atexit>:
   d796a:	460b      	mov	r3, r1
   d796c:	4601      	mov	r1, r0
   d796e:	4618      	mov	r0, r3
   d7970:	f001 b8b6 	b.w	d8ae0 <__cxa_atexit>

000d7974 <_ZSt15get_new_handlerv>:
   d7974:	4b02      	ldr	r3, [pc, #8]	; (d7980 <_ZSt15get_new_handlerv+0xc>)
   d7976:	6818      	ldr	r0, [r3, #0]
   d7978:	f3bf 8f5f 	dmb	sy
   d797c:	4770      	bx	lr
   d797e:	bf00      	nop
   d7980:	2003e74c 	.word	0x2003e74c

000d7984 <_ZdlPvj>:
   d7984:	f7fc bb8b 	b.w	d409e <_ZdlPv>

000d7988 <_ZnajRKSt9nothrow_t>:
   d7988:	f000 b800 	b.w	d798c <_ZnwjRKSt9nothrow_t>

000d798c <_ZnwjRKSt9nothrow_t>:
   d798c:	b510      	push	{r4, lr}
   d798e:	2800      	cmp	r0, #0
   d7990:	bf14      	ite	ne
   d7992:	4604      	movne	r4, r0
   d7994:	2401      	moveq	r4, #1
   d7996:	4620      	mov	r0, r4
   d7998:	f7fe fc96 	bl	d62c8 <malloc>
   d799c:	b920      	cbnz	r0, d79a8 <_ZnwjRKSt9nothrow_t+0x1c>
   d799e:	f7ff ffe9 	bl	d7974 <_ZSt15get_new_handlerv>
   d79a2:	b108      	cbz	r0, d79a8 <_ZnwjRKSt9nothrow_t+0x1c>
   d79a4:	4780      	blx	r0
   d79a6:	e7f6      	b.n	d7996 <_ZnwjRKSt9nothrow_t+0xa>
   d79a8:	bd10      	pop	{r4, pc}

000d79aa <_ZSt25__throw_bad_function_callv>:
   d79aa:	b508      	push	{r3, lr}
   d79ac:	f7fe fcb4 	bl	d6318 <abort>

000d79b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d79b0:	4b18      	ldr	r3, [pc, #96]	; (d7a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d79b2:	681a      	ldr	r2, [r3, #0]
   d79b4:	07d1      	lsls	r1, r2, #31
   d79b6:	bf5c      	itt	pl
   d79b8:	2201      	movpl	r2, #1
   d79ba:	601a      	strpl	r2, [r3, #0]
   d79bc:	4b16      	ldr	r3, [pc, #88]	; (d7a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d79be:	681a      	ldr	r2, [r3, #0]
   d79c0:	07d2      	lsls	r2, r2, #31
   d79c2:	bf5c      	itt	pl
   d79c4:	2201      	movpl	r2, #1
   d79c6:	601a      	strpl	r2, [r3, #0]
   d79c8:	4b14      	ldr	r3, [pc, #80]	; (d7a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d79ca:	681a      	ldr	r2, [r3, #0]
   d79cc:	07d0      	lsls	r0, r2, #31
   d79ce:	bf5c      	itt	pl
   d79d0:	2201      	movpl	r2, #1
   d79d2:	601a      	strpl	r2, [r3, #0]
   d79d4:	4b12      	ldr	r3, [pc, #72]	; (d7a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d79d6:	681a      	ldr	r2, [r3, #0]
   d79d8:	07d1      	lsls	r1, r2, #31
   d79da:	bf5c      	itt	pl
   d79dc:	2201      	movpl	r2, #1
   d79de:	601a      	strpl	r2, [r3, #0]
   d79e0:	4b10      	ldr	r3, [pc, #64]	; (d7a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	07d2      	lsls	r2, r2, #31
   d79e6:	bf5c      	itt	pl
   d79e8:	2201      	movpl	r2, #1
   d79ea:	601a      	strpl	r2, [r3, #0]
   d79ec:	4b0e      	ldr	r3, [pc, #56]	; (d7a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d79ee:	681a      	ldr	r2, [r3, #0]
   d79f0:	07d0      	lsls	r0, r2, #31
   d79f2:	bf5c      	itt	pl
   d79f4:	2201      	movpl	r2, #1
   d79f6:	601a      	strpl	r2, [r3, #0]
   d79f8:	4b0c      	ldr	r3, [pc, #48]	; (d7a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d79fa:	681a      	ldr	r2, [r3, #0]
   d79fc:	07d1      	lsls	r1, r2, #31
   d79fe:	bf5c      	itt	pl
   d7a00:	2201      	movpl	r2, #1
   d7a02:	601a      	strpl	r2, [r3, #0]
   d7a04:	4b0a      	ldr	r3, [pc, #40]	; (d7a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a06:	681a      	ldr	r2, [r3, #0]
   d7a08:	07d2      	lsls	r2, r2, #31
   d7a0a:	bf5c      	itt	pl
   d7a0c:	2201      	movpl	r2, #1
   d7a0e:	601a      	strpl	r2, [r3, #0]
   d7a10:	4770      	bx	lr
   d7a12:	bf00      	nop
   d7a14:	2003e76c 	.word	0x2003e76c
   d7a18:	2003e768 	.word	0x2003e768
   d7a1c:	2003e764 	.word	0x2003e764
   d7a20:	2003e760 	.word	0x2003e760
   d7a24:	2003e75c 	.word	0x2003e75c
   d7a28:	2003e758 	.word	0x2003e758
   d7a2c:	2003e754 	.word	0x2003e754
   d7a30:	2003e750 	.word	0x2003e750

000d7a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7a34:	4b24      	ldr	r3, [pc, #144]	; (d7ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7a36:	681a      	ldr	r2, [r3, #0]
   d7a38:	07d0      	lsls	r0, r2, #31
   d7a3a:	bf5c      	itt	pl
   d7a3c:	2201      	movpl	r2, #1
   d7a3e:	601a      	strpl	r2, [r3, #0]
   d7a40:	4b22      	ldr	r3, [pc, #136]	; (d7acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7a42:	681a      	ldr	r2, [r3, #0]
   d7a44:	07d1      	lsls	r1, r2, #31
   d7a46:	bf5c      	itt	pl
   d7a48:	2201      	movpl	r2, #1
   d7a4a:	601a      	strpl	r2, [r3, #0]
   d7a4c:	4b20      	ldr	r3, [pc, #128]	; (d7ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7a4e:	681a      	ldr	r2, [r3, #0]
   d7a50:	07d2      	lsls	r2, r2, #31
   d7a52:	bf5c      	itt	pl
   d7a54:	2201      	movpl	r2, #1
   d7a56:	601a      	strpl	r2, [r3, #0]
   d7a58:	4b1e      	ldr	r3, [pc, #120]	; (d7ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7a5a:	681a      	ldr	r2, [r3, #0]
   d7a5c:	07d0      	lsls	r0, r2, #31
   d7a5e:	bf5c      	itt	pl
   d7a60:	2201      	movpl	r2, #1
   d7a62:	601a      	strpl	r2, [r3, #0]
   d7a64:	4b1c      	ldr	r3, [pc, #112]	; (d7ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7a66:	681a      	ldr	r2, [r3, #0]
   d7a68:	07d1      	lsls	r1, r2, #31
   d7a6a:	bf5c      	itt	pl
   d7a6c:	2201      	movpl	r2, #1
   d7a6e:	601a      	strpl	r2, [r3, #0]
   d7a70:	4b1a      	ldr	r3, [pc, #104]	; (d7adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7a72:	681a      	ldr	r2, [r3, #0]
   d7a74:	07d2      	lsls	r2, r2, #31
   d7a76:	bf5c      	itt	pl
   d7a78:	2201      	movpl	r2, #1
   d7a7a:	601a      	strpl	r2, [r3, #0]
   d7a7c:	4b18      	ldr	r3, [pc, #96]	; (d7ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7a7e:	681a      	ldr	r2, [r3, #0]
   d7a80:	07d0      	lsls	r0, r2, #31
   d7a82:	bf5c      	itt	pl
   d7a84:	2201      	movpl	r2, #1
   d7a86:	601a      	strpl	r2, [r3, #0]
   d7a88:	4b16      	ldr	r3, [pc, #88]	; (d7ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7a8a:	681a      	ldr	r2, [r3, #0]
   d7a8c:	07d1      	lsls	r1, r2, #31
   d7a8e:	bf5c      	itt	pl
   d7a90:	2201      	movpl	r2, #1
   d7a92:	601a      	strpl	r2, [r3, #0]
   d7a94:	4b14      	ldr	r3, [pc, #80]	; (d7ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7a96:	681a      	ldr	r2, [r3, #0]
   d7a98:	07d2      	lsls	r2, r2, #31
   d7a9a:	bf5c      	itt	pl
   d7a9c:	2201      	movpl	r2, #1
   d7a9e:	601a      	strpl	r2, [r3, #0]
   d7aa0:	4b12      	ldr	r3, [pc, #72]	; (d7aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7aa2:	681a      	ldr	r2, [r3, #0]
   d7aa4:	07d0      	lsls	r0, r2, #31
   d7aa6:	bf5c      	itt	pl
   d7aa8:	2201      	movpl	r2, #1
   d7aaa:	601a      	strpl	r2, [r3, #0]
   d7aac:	4b10      	ldr	r3, [pc, #64]	; (d7af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7aae:	681a      	ldr	r2, [r3, #0]
   d7ab0:	07d1      	lsls	r1, r2, #31
   d7ab2:	bf5c      	itt	pl
   d7ab4:	2201      	movpl	r2, #1
   d7ab6:	601a      	strpl	r2, [r3, #0]
   d7ab8:	4b0e      	ldr	r3, [pc, #56]	; (d7af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7aba:	681a      	ldr	r2, [r3, #0]
   d7abc:	07d2      	lsls	r2, r2, #31
   d7abe:	bf5c      	itt	pl
   d7ac0:	2201      	movpl	r2, #1
   d7ac2:	601a      	strpl	r2, [r3, #0]
   d7ac4:	4770      	bx	lr
   d7ac6:	bf00      	nop
   d7ac8:	2003e79c 	.word	0x2003e79c
   d7acc:	2003e798 	.word	0x2003e798
   d7ad0:	2003e794 	.word	0x2003e794
   d7ad4:	2003e790 	.word	0x2003e790
   d7ad8:	2003e78c 	.word	0x2003e78c
   d7adc:	2003e788 	.word	0x2003e788
   d7ae0:	2003e784 	.word	0x2003e784
   d7ae4:	2003e780 	.word	0x2003e780
   d7ae8:	2003e77c 	.word	0x2003e77c
   d7aec:	2003e778 	.word	0x2003e778
   d7af0:	2003e774 	.word	0x2003e774
   d7af4:	2003e770 	.word	0x2003e770

000d7af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7af8:	4b24      	ldr	r3, [pc, #144]	; (d7b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7afa:	681a      	ldr	r2, [r3, #0]
   d7afc:	07d0      	lsls	r0, r2, #31
   d7afe:	bf5c      	itt	pl
   d7b00:	2201      	movpl	r2, #1
   d7b02:	601a      	strpl	r2, [r3, #0]
   d7b04:	4b22      	ldr	r3, [pc, #136]	; (d7b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7b06:	681a      	ldr	r2, [r3, #0]
   d7b08:	07d1      	lsls	r1, r2, #31
   d7b0a:	bf5c      	itt	pl
   d7b0c:	2201      	movpl	r2, #1
   d7b0e:	601a      	strpl	r2, [r3, #0]
   d7b10:	4b20      	ldr	r3, [pc, #128]	; (d7b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7b12:	681a      	ldr	r2, [r3, #0]
   d7b14:	07d2      	lsls	r2, r2, #31
   d7b16:	bf5c      	itt	pl
   d7b18:	2201      	movpl	r2, #1
   d7b1a:	601a      	strpl	r2, [r3, #0]
   d7b1c:	4b1e      	ldr	r3, [pc, #120]	; (d7b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7b1e:	681a      	ldr	r2, [r3, #0]
   d7b20:	07d0      	lsls	r0, r2, #31
   d7b22:	bf5c      	itt	pl
   d7b24:	2201      	movpl	r2, #1
   d7b26:	601a      	strpl	r2, [r3, #0]
   d7b28:	4b1c      	ldr	r3, [pc, #112]	; (d7b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7b2a:	681a      	ldr	r2, [r3, #0]
   d7b2c:	07d1      	lsls	r1, r2, #31
   d7b2e:	bf5c      	itt	pl
   d7b30:	2201      	movpl	r2, #1
   d7b32:	601a      	strpl	r2, [r3, #0]
   d7b34:	4b1a      	ldr	r3, [pc, #104]	; (d7ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7b36:	681a      	ldr	r2, [r3, #0]
   d7b38:	07d2      	lsls	r2, r2, #31
   d7b3a:	bf5c      	itt	pl
   d7b3c:	2201      	movpl	r2, #1
   d7b3e:	601a      	strpl	r2, [r3, #0]
   d7b40:	4b18      	ldr	r3, [pc, #96]	; (d7ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7b42:	681a      	ldr	r2, [r3, #0]
   d7b44:	07d0      	lsls	r0, r2, #31
   d7b46:	bf5c      	itt	pl
   d7b48:	2201      	movpl	r2, #1
   d7b4a:	601a      	strpl	r2, [r3, #0]
   d7b4c:	4b16      	ldr	r3, [pc, #88]	; (d7ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7b4e:	681a      	ldr	r2, [r3, #0]
   d7b50:	07d1      	lsls	r1, r2, #31
   d7b52:	bf5c      	itt	pl
   d7b54:	2201      	movpl	r2, #1
   d7b56:	601a      	strpl	r2, [r3, #0]
   d7b58:	4b14      	ldr	r3, [pc, #80]	; (d7bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7b5a:	681a      	ldr	r2, [r3, #0]
   d7b5c:	07d2      	lsls	r2, r2, #31
   d7b5e:	bf5c      	itt	pl
   d7b60:	2201      	movpl	r2, #1
   d7b62:	601a      	strpl	r2, [r3, #0]
   d7b64:	4b12      	ldr	r3, [pc, #72]	; (d7bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7b66:	681a      	ldr	r2, [r3, #0]
   d7b68:	07d0      	lsls	r0, r2, #31
   d7b6a:	bf5c      	itt	pl
   d7b6c:	2201      	movpl	r2, #1
   d7b6e:	601a      	strpl	r2, [r3, #0]
   d7b70:	4b10      	ldr	r3, [pc, #64]	; (d7bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7b72:	681a      	ldr	r2, [r3, #0]
   d7b74:	07d1      	lsls	r1, r2, #31
   d7b76:	bf5c      	itt	pl
   d7b78:	2201      	movpl	r2, #1
   d7b7a:	601a      	strpl	r2, [r3, #0]
   d7b7c:	4b0e      	ldr	r3, [pc, #56]	; (d7bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7b7e:	681a      	ldr	r2, [r3, #0]
   d7b80:	07d2      	lsls	r2, r2, #31
   d7b82:	bf5c      	itt	pl
   d7b84:	2201      	movpl	r2, #1
   d7b86:	601a      	strpl	r2, [r3, #0]
   d7b88:	4770      	bx	lr
   d7b8a:	bf00      	nop
   d7b8c:	2003e7cc 	.word	0x2003e7cc
   d7b90:	2003e7c8 	.word	0x2003e7c8
   d7b94:	2003e7c4 	.word	0x2003e7c4
   d7b98:	2003e7c0 	.word	0x2003e7c0
   d7b9c:	2003e7bc 	.word	0x2003e7bc
   d7ba0:	2003e7b8 	.word	0x2003e7b8
   d7ba4:	2003e7b4 	.word	0x2003e7b4
   d7ba8:	2003e7b0 	.word	0x2003e7b0
   d7bac:	2003e7ac 	.word	0x2003e7ac
   d7bb0:	2003e7a8 	.word	0x2003e7a8
   d7bb4:	2003e7a4 	.word	0x2003e7a4
   d7bb8:	2003e7a0 	.word	0x2003e7a0

000d7bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7bbc:	4b18      	ldr	r3, [pc, #96]	; (d7c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7bbe:	681a      	ldr	r2, [r3, #0]
   d7bc0:	07d1      	lsls	r1, r2, #31
   d7bc2:	bf5c      	itt	pl
   d7bc4:	2201      	movpl	r2, #1
   d7bc6:	601a      	strpl	r2, [r3, #0]
   d7bc8:	4b16      	ldr	r3, [pc, #88]	; (d7c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7bca:	681a      	ldr	r2, [r3, #0]
   d7bcc:	07d2      	lsls	r2, r2, #31
   d7bce:	bf5c      	itt	pl
   d7bd0:	2201      	movpl	r2, #1
   d7bd2:	601a      	strpl	r2, [r3, #0]
   d7bd4:	4b14      	ldr	r3, [pc, #80]	; (d7c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7bd6:	681a      	ldr	r2, [r3, #0]
   d7bd8:	07d0      	lsls	r0, r2, #31
   d7bda:	bf5c      	itt	pl
   d7bdc:	2201      	movpl	r2, #1
   d7bde:	601a      	strpl	r2, [r3, #0]
   d7be0:	4b12      	ldr	r3, [pc, #72]	; (d7c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7be2:	681a      	ldr	r2, [r3, #0]
   d7be4:	07d1      	lsls	r1, r2, #31
   d7be6:	bf5c      	itt	pl
   d7be8:	2201      	movpl	r2, #1
   d7bea:	601a      	strpl	r2, [r3, #0]
   d7bec:	4b10      	ldr	r3, [pc, #64]	; (d7c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7bee:	681a      	ldr	r2, [r3, #0]
   d7bf0:	07d2      	lsls	r2, r2, #31
   d7bf2:	bf5c      	itt	pl
   d7bf4:	2201      	movpl	r2, #1
   d7bf6:	601a      	strpl	r2, [r3, #0]
   d7bf8:	4b0e      	ldr	r3, [pc, #56]	; (d7c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7bfa:	681a      	ldr	r2, [r3, #0]
   d7bfc:	07d0      	lsls	r0, r2, #31
   d7bfe:	bf5c      	itt	pl
   d7c00:	2201      	movpl	r2, #1
   d7c02:	601a      	strpl	r2, [r3, #0]
   d7c04:	4b0c      	ldr	r3, [pc, #48]	; (d7c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c06:	681a      	ldr	r2, [r3, #0]
   d7c08:	07d1      	lsls	r1, r2, #31
   d7c0a:	bf5c      	itt	pl
   d7c0c:	2201      	movpl	r2, #1
   d7c0e:	601a      	strpl	r2, [r3, #0]
   d7c10:	4b0a      	ldr	r3, [pc, #40]	; (d7c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7c12:	681a      	ldr	r2, [r3, #0]
   d7c14:	07d2      	lsls	r2, r2, #31
   d7c16:	bf5c      	itt	pl
   d7c18:	2201      	movpl	r2, #1
   d7c1a:	601a      	strpl	r2, [r3, #0]
   d7c1c:	4770      	bx	lr
   d7c1e:	bf00      	nop
   d7c20:	2003e7ec 	.word	0x2003e7ec
   d7c24:	2003e7e8 	.word	0x2003e7e8
   d7c28:	2003e7e4 	.word	0x2003e7e4
   d7c2c:	2003e7e0 	.word	0x2003e7e0
   d7c30:	2003e7dc 	.word	0x2003e7dc
   d7c34:	2003e7d8 	.word	0x2003e7d8
   d7c38:	2003e7d4 	.word	0x2003e7d4
   d7c3c:	2003e7d0 	.word	0x2003e7d0

000d7c40 <log>:
   d7c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c44:	ed2d 8b02 	vpush	{d8}
   d7c48:	b08b      	sub	sp, #44	; 0x2c
   d7c4a:	ec55 4b10 	vmov	r4, r5, d0
   d7c4e:	f000 f87f 	bl	d7d50 <__ieee754_log>
   d7c52:	4b3a      	ldr	r3, [pc, #232]	; (d7d3c <log+0xfc>)
   d7c54:	eeb0 8a40 	vmov.f32	s16, s0
   d7c58:	eef0 8a60 	vmov.f32	s17, s1
   d7c5c:	f993 6000 	ldrsb.w	r6, [r3]
   d7c60:	1c73      	adds	r3, r6, #1
   d7c62:	d00d      	beq.n	d7c80 <log+0x40>
   d7c64:	4622      	mov	r2, r4
   d7c66:	462b      	mov	r3, r5
   d7c68:	4620      	mov	r0, r4
   d7c6a:	4629      	mov	r1, r5
   d7c6c:	f000 fed2 	bl	d8a14 <__aeabi_dcmpun>
   d7c70:	b930      	cbnz	r0, d7c80 <log+0x40>
   d7c72:	2200      	movs	r2, #0
   d7c74:	2300      	movs	r3, #0
   d7c76:	4620      	mov	r0, r4
   d7c78:	4629      	mov	r1, r5
   d7c7a:	f000 fec1 	bl	d8a00 <__aeabi_dcmpgt>
   d7c7e:	b140      	cbz	r0, d7c92 <log+0x52>
   d7c80:	eeb0 0a48 	vmov.f32	s0, s16
   d7c84:	eef0 0a68 	vmov.f32	s1, s17
   d7c88:	b00b      	add	sp, #44	; 0x2c
   d7c8a:	ecbd 8b02 	vpop	{d8}
   d7c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7c92:	4b2b      	ldr	r3, [pc, #172]	; (d7d40 <log+0x100>)
   d7c94:	9008      	str	r0, [sp, #32]
   d7c96:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d7c9a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7c9e:	9301      	str	r3, [sp, #4]
   d7ca0:	b9de      	cbnz	r6, d7cda <log+0x9a>
   d7ca2:	4f28      	ldr	r7, [pc, #160]	; (d7d44 <log+0x104>)
   d7ca4:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   d7ca8:	4620      	mov	r0, r4
   d7caa:	4629      	mov	r1, r5
   d7cac:	2200      	movs	r2, #0
   d7cae:	2300      	movs	r3, #0
   d7cb0:	e9cd 6706 	strd	r6, r7, [sp, #24]
   d7cb4:	f000 fe7c 	bl	d89b0 <__aeabi_dcmpeq>
   d7cb8:	2800      	cmp	r0, #0
   d7cba:	d037      	beq.n	d7d2c <log+0xec>
   d7cbc:	2302      	movs	r3, #2
   d7cbe:	9300      	str	r3, [sp, #0]
   d7cc0:	4668      	mov	r0, sp
   d7cc2:	f000 fa49 	bl	d8158 <matherr>
   d7cc6:	b1c8      	cbz	r0, d7cfc <log+0xbc>
   d7cc8:	9b08      	ldr	r3, [sp, #32]
   d7cca:	b9e3      	cbnz	r3, d7d06 <log+0xc6>
   d7ccc:	ed9d 0b06 	vldr	d0, [sp, #24]
   d7cd0:	b00b      	add	sp, #44	; 0x2c
   d7cd2:	ecbd 8b02 	vpop	{d8}
   d7cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7cda:	f8df 9070 	ldr.w	r9, [pc, #112]	; d7d4c <log+0x10c>
   d7cde:	f04f 0800 	mov.w	r8, #0
   d7ce2:	4620      	mov	r0, r4
   d7ce4:	4629      	mov	r1, r5
   d7ce6:	2200      	movs	r2, #0
   d7ce8:	2300      	movs	r3, #0
   d7cea:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7cee:	f000 fe5f 	bl	d89b0 <__aeabi_dcmpeq>
   d7cf2:	b168      	cbz	r0, d7d10 <log+0xd0>
   d7cf4:	2302      	movs	r3, #2
   d7cf6:	429e      	cmp	r6, r3
   d7cf8:	9300      	str	r3, [sp, #0]
   d7cfa:	d1e1      	bne.n	d7cc0 <log+0x80>
   d7cfc:	f7fe fb1c 	bl	d6338 <__errno>
   d7d00:	2322      	movs	r3, #34	; 0x22
   d7d02:	6003      	str	r3, [r0, #0]
   d7d04:	e7e0      	b.n	d7cc8 <log+0x88>
   d7d06:	f7fe fb17 	bl	d6338 <__errno>
   d7d0a:	9b08      	ldr	r3, [sp, #32]
   d7d0c:	6003      	str	r3, [r0, #0]
   d7d0e:	e7dd      	b.n	d7ccc <log+0x8c>
   d7d10:	2301      	movs	r3, #1
   d7d12:	2e02      	cmp	r6, #2
   d7d14:	9300      	str	r3, [sp, #0]
   d7d16:	d10b      	bne.n	d7d30 <log+0xf0>
   d7d18:	f7fe fb0e 	bl	d6338 <__errno>
   d7d1c:	2321      	movs	r3, #33	; 0x21
   d7d1e:	6003      	str	r3, [r0, #0]
   d7d20:	4809      	ldr	r0, [pc, #36]	; (d7d48 <log+0x108>)
   d7d22:	f000 fa1d 	bl	d8160 <nan>
   d7d26:	ed8d 0b06 	vstr	d0, [sp, #24]
   d7d2a:	e7cd      	b.n	d7cc8 <log+0x88>
   d7d2c:	2301      	movs	r3, #1
   d7d2e:	9300      	str	r3, [sp, #0]
   d7d30:	4668      	mov	r0, sp
   d7d32:	f000 fa11 	bl	d8158 <matherr>
   d7d36:	2800      	cmp	r0, #0
   d7d38:	d1f2      	bne.n	d7d20 <log+0xe0>
   d7d3a:	e7ed      	b.n	d7d18 <log+0xd8>
   d7d3c:	2003d5c0 	.word	0x2003d5c0
   d7d40:	000d95c4 	.word	0x000d95c4
   d7d44:	c7efffff 	.word	0xc7efffff
   d7d48:	000d95c8 	.word	0x000d95c8
   d7d4c:	fff00000 	.word	0xfff00000

000d7d50 <__ieee754_log>:
   d7d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d54:	ec51 0b10 	vmov	r0, r1, d0
   d7d58:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7d5c:	b085      	sub	sp, #20
   d7d5e:	460b      	mov	r3, r1
   d7d60:	da59      	bge.n	d7e16 <__ieee754_log+0xc6>
   d7d62:	ee10 2a10 	vmov	r2, s0
   d7d66:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   d7d6a:	4322      	orrs	r2, r4
   d7d6c:	f000 80f8 	beq.w	d7f60 <__ieee754_log+0x210>
   d7d70:	2900      	cmp	r1, #0
   d7d72:	f2c0 8180 	blt.w	d8076 <__ieee754_log+0x326>
   d7d76:	2200      	movs	r2, #0
   d7d78:	4bdd      	ldr	r3, [pc, #884]	; (d80f0 <__ieee754_log+0x3a0>)
   d7d7a:	4cde      	ldr	r4, [pc, #888]	; (d80f4 <__ieee754_log+0x3a4>)
   d7d7c:	f000 fbb0 	bl	d84e0 <__aeabi_dmul>
   d7d80:	460b      	mov	r3, r1
   d7d82:	42a3      	cmp	r3, r4
   d7d84:	f06f 0235 	mvn.w	r2, #53	; 0x35
   d7d88:	dc4a      	bgt.n	d7e20 <__ieee754_log+0xd0>
   d7d8a:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d7d8e:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   d7d92:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   d7d96:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   d7d9a:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   d7d9e:	151b      	asrs	r3, r3, #20
   d7da0:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   d7da4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7da8:	ea44 0105 	orr.w	r1, r4, r5
   d7dac:	189c      	adds	r4, r3, r2
   d7dae:	2200      	movs	r2, #0
   d7db0:	4bd1      	ldr	r3, [pc, #836]	; (d80f8 <__ieee754_log+0x3a8>)
   d7db2:	f000 f9e1 	bl	d8178 <__aeabi_dsub>
   d7db6:	1cab      	adds	r3, r5, #2
   d7db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d7dbc:	2b02      	cmp	r3, #2
   d7dbe:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   d7dc2:	4682      	mov	sl, r0
   d7dc4:	468b      	mov	fp, r1
   d7dc6:	f04f 0200 	mov.w	r2, #0
   d7dca:	dc32      	bgt.n	d7e32 <__ieee754_log+0xe2>
   d7dcc:	2300      	movs	r3, #0
   d7dce:	f000 fdef 	bl	d89b0 <__aeabi_dcmpeq>
   d7dd2:	2800      	cmp	r0, #0
   d7dd4:	f000 80cf 	beq.w	d7f76 <__ieee754_log+0x226>
   d7dd8:	2c00      	cmp	r4, #0
   d7dda:	f000 8158 	beq.w	d808e <__ieee754_log+0x33e>
   d7dde:	4620      	mov	r0, r4
   d7de0:	f000 fb18 	bl	d8414 <__aeabi_i2d>
   d7de4:	a3ac      	add	r3, pc, #688	; (adr r3, d8098 <__ieee754_log+0x348>)
   d7de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7dea:	4606      	mov	r6, r0
   d7dec:	460f      	mov	r7, r1
   d7dee:	f000 fb77 	bl	d84e0 <__aeabi_dmul>
   d7df2:	a3ab      	add	r3, pc, #684	; (adr r3, d80a0 <__ieee754_log+0x350>)
   d7df4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7df8:	4604      	mov	r4, r0
   d7dfa:	460d      	mov	r5, r1
   d7dfc:	4630      	mov	r0, r6
   d7dfe:	4639      	mov	r1, r7
   d7e00:	f000 fb6e 	bl	d84e0 <__aeabi_dmul>
   d7e04:	4602      	mov	r2, r0
   d7e06:	460b      	mov	r3, r1
   d7e08:	4620      	mov	r0, r4
   d7e0a:	4629      	mov	r1, r5
   d7e0c:	f000 f9b6 	bl	d817c <__adddf3>
   d7e10:	ec41 0b10 	vmov	d0, r0, r1
   d7e14:	e00a      	b.n	d7e2c <__ieee754_log+0xdc>
   d7e16:	4cb7      	ldr	r4, [pc, #732]	; (d80f4 <__ieee754_log+0x3a4>)
   d7e18:	42a3      	cmp	r3, r4
   d7e1a:	f04f 0200 	mov.w	r2, #0
   d7e1e:	ddb4      	ble.n	d7d8a <__ieee754_log+0x3a>
   d7e20:	4602      	mov	r2, r0
   d7e22:	460b      	mov	r3, r1
   d7e24:	f000 f9aa 	bl	d817c <__adddf3>
   d7e28:	ec41 0b10 	vmov	d0, r0, r1
   d7e2c:	b005      	add	sp, #20
   d7e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7e36:	f000 f9a1 	bl	d817c <__adddf3>
   d7e3a:	4602      	mov	r2, r0
   d7e3c:	460b      	mov	r3, r1
   d7e3e:	4650      	mov	r0, sl
   d7e40:	4659      	mov	r1, fp
   d7e42:	f000 fc77 	bl	d8734 <__aeabi_ddiv>
   d7e46:	4606      	mov	r6, r0
   d7e48:	4620      	mov	r0, r4
   d7e4a:	460f      	mov	r7, r1
   d7e4c:	f000 fae2 	bl	d8414 <__aeabi_i2d>
   d7e50:	4632      	mov	r2, r6
   d7e52:	e9cd 0100 	strd	r0, r1, [sp]
   d7e56:	463b      	mov	r3, r7
   d7e58:	4630      	mov	r0, r6
   d7e5a:	4639      	mov	r1, r7
   d7e5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7e60:	f000 fb3e 	bl	d84e0 <__aeabi_dmul>
   d7e64:	4602      	mov	r2, r0
   d7e66:	460b      	mov	r3, r1
   d7e68:	4680      	mov	r8, r0
   d7e6a:	4689      	mov	r9, r1
   d7e6c:	f000 fb38 	bl	d84e0 <__aeabi_dmul>
   d7e70:	a38d      	add	r3, pc, #564	; (adr r3, d80a8 <__ieee754_log+0x358>)
   d7e72:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e76:	4606      	mov	r6, r0
   d7e78:	460f      	mov	r7, r1
   d7e7a:	f000 fb31 	bl	d84e0 <__aeabi_dmul>
   d7e7e:	a38c      	add	r3, pc, #560	; (adr r3, d80b0 <__ieee754_log+0x360>)
   d7e80:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e84:	f000 f97a 	bl	d817c <__adddf3>
   d7e88:	4632      	mov	r2, r6
   d7e8a:	463b      	mov	r3, r7
   d7e8c:	f000 fb28 	bl	d84e0 <__aeabi_dmul>
   d7e90:	a389      	add	r3, pc, #548	; (adr r3, d80b8 <__ieee754_log+0x368>)
   d7e92:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e96:	f000 f971 	bl	d817c <__adddf3>
   d7e9a:	4632      	mov	r2, r6
   d7e9c:	463b      	mov	r3, r7
   d7e9e:	f000 fb1f 	bl	d84e0 <__aeabi_dmul>
   d7ea2:	a387      	add	r3, pc, #540	; (adr r3, d80c0 <__ieee754_log+0x370>)
   d7ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ea8:	f000 f968 	bl	d817c <__adddf3>
   d7eac:	4642      	mov	r2, r8
   d7eae:	464b      	mov	r3, r9
   d7eb0:	f000 fb16 	bl	d84e0 <__aeabi_dmul>
   d7eb4:	a384      	add	r3, pc, #528	; (adr r3, d80c8 <__ieee754_log+0x378>)
   d7eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7eba:	4680      	mov	r8, r0
   d7ebc:	4689      	mov	r9, r1
   d7ebe:	4630      	mov	r0, r6
   d7ec0:	4639      	mov	r1, r7
   d7ec2:	f000 fb0d 	bl	d84e0 <__aeabi_dmul>
   d7ec6:	a382      	add	r3, pc, #520	; (adr r3, d80d0 <__ieee754_log+0x380>)
   d7ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ecc:	f000 f956 	bl	d817c <__adddf3>
   d7ed0:	4632      	mov	r2, r6
   d7ed2:	463b      	mov	r3, r7
   d7ed4:	f000 fb04 	bl	d84e0 <__aeabi_dmul>
   d7ed8:	a37f      	add	r3, pc, #508	; (adr r3, d80d8 <__ieee754_log+0x388>)
   d7eda:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ede:	f000 f94d 	bl	d817c <__adddf3>
   d7ee2:	4632      	mov	r2, r6
   d7ee4:	463b      	mov	r3, r7
   d7ee6:	f000 fafb 	bl	d84e0 <__aeabi_dmul>
   d7eea:	460b      	mov	r3, r1
   d7eec:	4602      	mov	r2, r0
   d7eee:	4649      	mov	r1, r9
   d7ef0:	4640      	mov	r0, r8
   d7ef2:	f000 f943 	bl	d817c <__adddf3>
   d7ef6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   d7efa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   d7efe:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   d7f02:	3551      	adds	r5, #81	; 0x51
   d7f04:	431d      	orrs	r5, r3
   d7f06:	2d00      	cmp	r5, #0
   d7f08:	4680      	mov	r8, r0
   d7f0a:	4689      	mov	r9, r1
   d7f0c:	dd5c      	ble.n	d7fc8 <__ieee754_log+0x278>
   d7f0e:	2200      	movs	r2, #0
   d7f10:	4b7a      	ldr	r3, [pc, #488]	; (d80fc <__ieee754_log+0x3ac>)
   d7f12:	4650      	mov	r0, sl
   d7f14:	4659      	mov	r1, fp
   d7f16:	f000 fae3 	bl	d84e0 <__aeabi_dmul>
   d7f1a:	4652      	mov	r2, sl
   d7f1c:	465b      	mov	r3, fp
   d7f1e:	f000 fadf 	bl	d84e0 <__aeabi_dmul>
   d7f22:	4606      	mov	r6, r0
   d7f24:	460f      	mov	r7, r1
   d7f26:	2c00      	cmp	r4, #0
   d7f28:	d16e      	bne.n	d8008 <__ieee754_log+0x2b8>
   d7f2a:	4632      	mov	r2, r6
   d7f2c:	463b      	mov	r3, r7
   d7f2e:	4640      	mov	r0, r8
   d7f30:	4649      	mov	r1, r9
   d7f32:	f000 f923 	bl	d817c <__adddf3>
   d7f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7f3a:	f000 fad1 	bl	d84e0 <__aeabi_dmul>
   d7f3e:	4602      	mov	r2, r0
   d7f40:	460b      	mov	r3, r1
   d7f42:	4630      	mov	r0, r6
   d7f44:	4639      	mov	r1, r7
   d7f46:	f000 f917 	bl	d8178 <__aeabi_dsub>
   d7f4a:	4602      	mov	r2, r0
   d7f4c:	460b      	mov	r3, r1
   d7f4e:	4650      	mov	r0, sl
   d7f50:	4659      	mov	r1, fp
   d7f52:	f000 f911 	bl	d8178 <__aeabi_dsub>
   d7f56:	ec41 0b10 	vmov	d0, r0, r1
   d7f5a:	b005      	add	sp, #20
   d7f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f60:	2200      	movs	r2, #0
   d7f62:	2300      	movs	r3, #0
   d7f64:	2000      	movs	r0, #0
   d7f66:	4966      	ldr	r1, [pc, #408]	; (d8100 <__ieee754_log+0x3b0>)
   d7f68:	f000 fbe4 	bl	d8734 <__aeabi_ddiv>
   d7f6c:	ec41 0b10 	vmov	d0, r0, r1
   d7f70:	b005      	add	sp, #20
   d7f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f76:	a35a      	add	r3, pc, #360	; (adr r3, d80e0 <__ieee754_log+0x390>)
   d7f78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f7c:	4650      	mov	r0, sl
   d7f7e:	4659      	mov	r1, fp
   d7f80:	f000 faae 	bl	d84e0 <__aeabi_dmul>
   d7f84:	4602      	mov	r2, r0
   d7f86:	460b      	mov	r3, r1
   d7f88:	2000      	movs	r0, #0
   d7f8a:	495c      	ldr	r1, [pc, #368]	; (d80fc <__ieee754_log+0x3ac>)
   d7f8c:	f000 f8f4 	bl	d8178 <__aeabi_dsub>
   d7f90:	4652      	mov	r2, sl
   d7f92:	4606      	mov	r6, r0
   d7f94:	460f      	mov	r7, r1
   d7f96:	465b      	mov	r3, fp
   d7f98:	4650      	mov	r0, sl
   d7f9a:	4659      	mov	r1, fp
   d7f9c:	f000 faa0 	bl	d84e0 <__aeabi_dmul>
   d7fa0:	4602      	mov	r2, r0
   d7fa2:	460b      	mov	r3, r1
   d7fa4:	4630      	mov	r0, r6
   d7fa6:	4639      	mov	r1, r7
   d7fa8:	f000 fa9a 	bl	d84e0 <__aeabi_dmul>
   d7fac:	4606      	mov	r6, r0
   d7fae:	460f      	mov	r7, r1
   d7fb0:	2c00      	cmp	r4, #0
   d7fb2:	f040 80a7 	bne.w	d8104 <__ieee754_log+0x3b4>
   d7fb6:	4602      	mov	r2, r0
   d7fb8:	460b      	mov	r3, r1
   d7fba:	4650      	mov	r0, sl
   d7fbc:	4659      	mov	r1, fp
   d7fbe:	f000 f8db 	bl	d8178 <__aeabi_dsub>
   d7fc2:	ec41 0b10 	vmov	d0, r0, r1
   d7fc6:	e731      	b.n	d7e2c <__ieee754_log+0xdc>
   d7fc8:	2c00      	cmp	r4, #0
   d7fca:	f000 80af 	beq.w	d812c <__ieee754_log+0x3dc>
   d7fce:	a332      	add	r3, pc, #200	; (adr r3, d8098 <__ieee754_log+0x348>)
   d7fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7fd8:	f000 fa82 	bl	d84e0 <__aeabi_dmul>
   d7fdc:	4642      	mov	r2, r8
   d7fde:	464b      	mov	r3, r9
   d7fe0:	4604      	mov	r4, r0
   d7fe2:	460d      	mov	r5, r1
   d7fe4:	4650      	mov	r0, sl
   d7fe6:	4659      	mov	r1, fp
   d7fe8:	f000 f8c6 	bl	d8178 <__aeabi_dsub>
   d7fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7ff0:	f000 fa76 	bl	d84e0 <__aeabi_dmul>
   d7ff4:	a32a      	add	r3, pc, #168	; (adr r3, d80a0 <__ieee754_log+0x350>)
   d7ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ffa:	4606      	mov	r6, r0
   d7ffc:	460f      	mov	r7, r1
   d7ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8002:	f000 fa6d 	bl	d84e0 <__aeabi_dmul>
   d8006:	e021      	b.n	d804c <__ieee754_log+0x2fc>
   d8008:	a323      	add	r3, pc, #140	; (adr r3, d8098 <__ieee754_log+0x348>)
   d800a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d800e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8012:	f000 fa65 	bl	d84e0 <__aeabi_dmul>
   d8016:	4632      	mov	r2, r6
   d8018:	463b      	mov	r3, r7
   d801a:	4604      	mov	r4, r0
   d801c:	460d      	mov	r5, r1
   d801e:	4640      	mov	r0, r8
   d8020:	4649      	mov	r1, r9
   d8022:	f000 f8ab 	bl	d817c <__adddf3>
   d8026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d802a:	f000 fa59 	bl	d84e0 <__aeabi_dmul>
   d802e:	a31c      	add	r3, pc, #112	; (adr r3, d80a0 <__ieee754_log+0x350>)
   d8030:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8034:	4680      	mov	r8, r0
   d8036:	4689      	mov	r9, r1
   d8038:	e9dd 0100 	ldrd	r0, r1, [sp]
   d803c:	f000 fa50 	bl	d84e0 <__aeabi_dmul>
   d8040:	4602      	mov	r2, r0
   d8042:	460b      	mov	r3, r1
   d8044:	4640      	mov	r0, r8
   d8046:	4649      	mov	r1, r9
   d8048:	f000 f898 	bl	d817c <__adddf3>
   d804c:	4602      	mov	r2, r0
   d804e:	460b      	mov	r3, r1
   d8050:	4630      	mov	r0, r6
   d8052:	4639      	mov	r1, r7
   d8054:	f000 f890 	bl	d8178 <__aeabi_dsub>
   d8058:	4652      	mov	r2, sl
   d805a:	465b      	mov	r3, fp
   d805c:	f000 f88c 	bl	d8178 <__aeabi_dsub>
   d8060:	4602      	mov	r2, r0
   d8062:	460b      	mov	r3, r1
   d8064:	4620      	mov	r0, r4
   d8066:	4629      	mov	r1, r5
   d8068:	f000 f886 	bl	d8178 <__aeabi_dsub>
   d806c:	ec41 0b10 	vmov	d0, r0, r1
   d8070:	b005      	add	sp, #20
   d8072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8076:	ee10 2a10 	vmov	r2, s0
   d807a:	460b      	mov	r3, r1
   d807c:	f000 f87c 	bl	d8178 <__aeabi_dsub>
   d8080:	2200      	movs	r2, #0
   d8082:	2300      	movs	r3, #0
   d8084:	f000 fb56 	bl	d8734 <__aeabi_ddiv>
   d8088:	ec41 0b10 	vmov	d0, r0, r1
   d808c:	e6ce      	b.n	d7e2c <__ieee754_log+0xdc>
   d808e:	ed9f 0b16 	vldr	d0, [pc, #88]	; d80e8 <__ieee754_log+0x398>
   d8092:	e6cb      	b.n	d7e2c <__ieee754_log+0xdc>
   d8094:	f3af 8000 	nop.w
   d8098:	fee00000 	.word	0xfee00000
   d809c:	3fe62e42 	.word	0x3fe62e42
   d80a0:	35793c76 	.word	0x35793c76
   d80a4:	3dea39ef 	.word	0x3dea39ef
   d80a8:	df3e5244 	.word	0xdf3e5244
   d80ac:	3fc2f112 	.word	0x3fc2f112
   d80b0:	96cb03de 	.word	0x96cb03de
   d80b4:	3fc74664 	.word	0x3fc74664
   d80b8:	94229359 	.word	0x94229359
   d80bc:	3fd24924 	.word	0x3fd24924
   d80c0:	55555593 	.word	0x55555593
   d80c4:	3fe55555 	.word	0x3fe55555
   d80c8:	d078c69f 	.word	0xd078c69f
   d80cc:	3fc39a09 	.word	0x3fc39a09
   d80d0:	1d8e78af 	.word	0x1d8e78af
   d80d4:	3fcc71c5 	.word	0x3fcc71c5
   d80d8:	9997fa04 	.word	0x9997fa04
   d80dc:	3fd99999 	.word	0x3fd99999
   d80e0:	55555555 	.word	0x55555555
   d80e4:	3fd55555 	.word	0x3fd55555
	...
   d80f0:	43500000 	.word	0x43500000
   d80f4:	7fefffff 	.word	0x7fefffff
   d80f8:	3ff00000 	.word	0x3ff00000
   d80fc:	3fe00000 	.word	0x3fe00000
   d8100:	c3500000 	.word	0xc3500000
   d8104:	4620      	mov	r0, r4
   d8106:	f000 f985 	bl	d8414 <__aeabi_i2d>
   d810a:	a30f      	add	r3, pc, #60	; (adr r3, d8148 <__ieee754_log+0x3f8>)
   d810c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8110:	4680      	mov	r8, r0
   d8112:	4689      	mov	r9, r1
   d8114:	f000 f9e4 	bl	d84e0 <__aeabi_dmul>
   d8118:	a30d      	add	r3, pc, #52	; (adr r3, d8150 <__ieee754_log+0x400>)
   d811a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d811e:	4604      	mov	r4, r0
   d8120:	460d      	mov	r5, r1
   d8122:	4640      	mov	r0, r8
   d8124:	4649      	mov	r1, r9
   d8126:	f000 f9db 	bl	d84e0 <__aeabi_dmul>
   d812a:	e78f      	b.n	d804c <__ieee754_log+0x2fc>
   d812c:	4602      	mov	r2, r0
   d812e:	460b      	mov	r3, r1
   d8130:	4650      	mov	r0, sl
   d8132:	4659      	mov	r1, fp
   d8134:	f000 f820 	bl	d8178 <__aeabi_dsub>
   d8138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d813c:	f000 f9d0 	bl	d84e0 <__aeabi_dmul>
   d8140:	e703      	b.n	d7f4a <__ieee754_log+0x1fa>
   d8142:	bf00      	nop
   d8144:	f3af 8000 	nop.w
   d8148:	fee00000 	.word	0xfee00000
   d814c:	3fe62e42 	.word	0x3fe62e42
   d8150:	35793c76 	.word	0x35793c76
   d8154:	3dea39ef 	.word	0x3dea39ef

000d8158 <matherr>:
   d8158:	2000      	movs	r0, #0
   d815a:	4770      	bx	lr
   d815c:	0000      	movs	r0, r0
	...

000d8160 <nan>:
   d8160:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8168 <nan+0x8>
   d8164:	4770      	bx	lr
   d8166:	bf00      	nop
   d8168:	00000000 	.word	0x00000000
   d816c:	7ff80000 	.word	0x7ff80000

000d8170 <__aeabi_drsub>:
   d8170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8174:	e002      	b.n	d817c <__adddf3>
   d8176:	bf00      	nop

000d8178 <__aeabi_dsub>:
   d8178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d817c <__adddf3>:
   d817c:	b530      	push	{r4, r5, lr}
   d817e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8182:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8186:	ea94 0f05 	teq	r4, r5
   d818a:	bf08      	it	eq
   d818c:	ea90 0f02 	teqeq	r0, r2
   d8190:	bf1f      	itttt	ne
   d8192:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8196:	ea55 0c02 	orrsne.w	ip, r5, r2
   d819a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d819e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d81a2:	f000 80e2 	beq.w	d836a <__adddf3+0x1ee>
   d81a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d81aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d81ae:	bfb8      	it	lt
   d81b0:	426d      	neglt	r5, r5
   d81b2:	dd0c      	ble.n	d81ce <__adddf3+0x52>
   d81b4:	442c      	add	r4, r5
   d81b6:	ea80 0202 	eor.w	r2, r0, r2
   d81ba:	ea81 0303 	eor.w	r3, r1, r3
   d81be:	ea82 0000 	eor.w	r0, r2, r0
   d81c2:	ea83 0101 	eor.w	r1, r3, r1
   d81c6:	ea80 0202 	eor.w	r2, r0, r2
   d81ca:	ea81 0303 	eor.w	r3, r1, r3
   d81ce:	2d36      	cmp	r5, #54	; 0x36
   d81d0:	bf88      	it	hi
   d81d2:	bd30      	pophi	{r4, r5, pc}
   d81d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d81d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d81dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d81e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d81e4:	d002      	beq.n	d81ec <__adddf3+0x70>
   d81e6:	4240      	negs	r0, r0
   d81e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d81f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d81f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d81f8:	d002      	beq.n	d8200 <__adddf3+0x84>
   d81fa:	4252      	negs	r2, r2
   d81fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8200:	ea94 0f05 	teq	r4, r5
   d8204:	f000 80a7 	beq.w	d8356 <__adddf3+0x1da>
   d8208:	f1a4 0401 	sub.w	r4, r4, #1
   d820c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8210:	db0d      	blt.n	d822e <__adddf3+0xb2>
   d8212:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8216:	fa22 f205 	lsr.w	r2, r2, r5
   d821a:	1880      	adds	r0, r0, r2
   d821c:	f141 0100 	adc.w	r1, r1, #0
   d8220:	fa03 f20e 	lsl.w	r2, r3, lr
   d8224:	1880      	adds	r0, r0, r2
   d8226:	fa43 f305 	asr.w	r3, r3, r5
   d822a:	4159      	adcs	r1, r3
   d822c:	e00e      	b.n	d824c <__adddf3+0xd0>
   d822e:	f1a5 0520 	sub.w	r5, r5, #32
   d8232:	f10e 0e20 	add.w	lr, lr, #32
   d8236:	2a01      	cmp	r2, #1
   d8238:	fa03 fc0e 	lsl.w	ip, r3, lr
   d823c:	bf28      	it	cs
   d823e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8242:	fa43 f305 	asr.w	r3, r3, r5
   d8246:	18c0      	adds	r0, r0, r3
   d8248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d824c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8250:	d507      	bpl.n	d8262 <__adddf3+0xe6>
   d8252:	f04f 0e00 	mov.w	lr, #0
   d8256:	f1dc 0c00 	rsbs	ip, ip, #0
   d825a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d825e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8266:	d31b      	bcc.n	d82a0 <__adddf3+0x124>
   d8268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d826c:	d30c      	bcc.n	d8288 <__adddf3+0x10c>
   d826e:	0849      	lsrs	r1, r1, #1
   d8270:	ea5f 0030 	movs.w	r0, r0, rrx
   d8274:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8278:	f104 0401 	add.w	r4, r4, #1
   d827c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8284:	f080 809a 	bcs.w	d83bc <__adddf3+0x240>
   d8288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d828c:	bf08      	it	eq
   d828e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8292:	f150 0000 	adcs.w	r0, r0, #0
   d8296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d829a:	ea41 0105 	orr.w	r1, r1, r5
   d829e:	bd30      	pop	{r4, r5, pc}
   d82a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d82a4:	4140      	adcs	r0, r0
   d82a6:	eb41 0101 	adc.w	r1, r1, r1
   d82aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d82ae:	f1a4 0401 	sub.w	r4, r4, #1
   d82b2:	d1e9      	bne.n	d8288 <__adddf3+0x10c>
   d82b4:	f091 0f00 	teq	r1, #0
   d82b8:	bf04      	itt	eq
   d82ba:	4601      	moveq	r1, r0
   d82bc:	2000      	moveq	r0, #0
   d82be:	fab1 f381 	clz	r3, r1
   d82c2:	bf08      	it	eq
   d82c4:	3320      	addeq	r3, #32
   d82c6:	f1a3 030b 	sub.w	r3, r3, #11
   d82ca:	f1b3 0220 	subs.w	r2, r3, #32
   d82ce:	da0c      	bge.n	d82ea <__adddf3+0x16e>
   d82d0:	320c      	adds	r2, #12
   d82d2:	dd08      	ble.n	d82e6 <__adddf3+0x16a>
   d82d4:	f102 0c14 	add.w	ip, r2, #20
   d82d8:	f1c2 020c 	rsb	r2, r2, #12
   d82dc:	fa01 f00c 	lsl.w	r0, r1, ip
   d82e0:	fa21 f102 	lsr.w	r1, r1, r2
   d82e4:	e00c      	b.n	d8300 <__adddf3+0x184>
   d82e6:	f102 0214 	add.w	r2, r2, #20
   d82ea:	bfd8      	it	le
   d82ec:	f1c2 0c20 	rsble	ip, r2, #32
   d82f0:	fa01 f102 	lsl.w	r1, r1, r2
   d82f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d82f8:	bfdc      	itt	le
   d82fa:	ea41 010c 	orrle.w	r1, r1, ip
   d82fe:	4090      	lslle	r0, r2
   d8300:	1ae4      	subs	r4, r4, r3
   d8302:	bfa2      	ittt	ge
   d8304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8308:	4329      	orrge	r1, r5
   d830a:	bd30      	popge	{r4, r5, pc}
   d830c:	ea6f 0404 	mvn.w	r4, r4
   d8310:	3c1f      	subs	r4, #31
   d8312:	da1c      	bge.n	d834e <__adddf3+0x1d2>
   d8314:	340c      	adds	r4, #12
   d8316:	dc0e      	bgt.n	d8336 <__adddf3+0x1ba>
   d8318:	f104 0414 	add.w	r4, r4, #20
   d831c:	f1c4 0220 	rsb	r2, r4, #32
   d8320:	fa20 f004 	lsr.w	r0, r0, r4
   d8324:	fa01 f302 	lsl.w	r3, r1, r2
   d8328:	ea40 0003 	orr.w	r0, r0, r3
   d832c:	fa21 f304 	lsr.w	r3, r1, r4
   d8330:	ea45 0103 	orr.w	r1, r5, r3
   d8334:	bd30      	pop	{r4, r5, pc}
   d8336:	f1c4 040c 	rsb	r4, r4, #12
   d833a:	f1c4 0220 	rsb	r2, r4, #32
   d833e:	fa20 f002 	lsr.w	r0, r0, r2
   d8342:	fa01 f304 	lsl.w	r3, r1, r4
   d8346:	ea40 0003 	orr.w	r0, r0, r3
   d834a:	4629      	mov	r1, r5
   d834c:	bd30      	pop	{r4, r5, pc}
   d834e:	fa21 f004 	lsr.w	r0, r1, r4
   d8352:	4629      	mov	r1, r5
   d8354:	bd30      	pop	{r4, r5, pc}
   d8356:	f094 0f00 	teq	r4, #0
   d835a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d835e:	bf06      	itte	eq
   d8360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8364:	3401      	addeq	r4, #1
   d8366:	3d01      	subne	r5, #1
   d8368:	e74e      	b.n	d8208 <__adddf3+0x8c>
   d836a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d836e:	bf18      	it	ne
   d8370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8374:	d029      	beq.n	d83ca <__adddf3+0x24e>
   d8376:	ea94 0f05 	teq	r4, r5
   d837a:	bf08      	it	eq
   d837c:	ea90 0f02 	teqeq	r0, r2
   d8380:	d005      	beq.n	d838e <__adddf3+0x212>
   d8382:	ea54 0c00 	orrs.w	ip, r4, r0
   d8386:	bf04      	itt	eq
   d8388:	4619      	moveq	r1, r3
   d838a:	4610      	moveq	r0, r2
   d838c:	bd30      	pop	{r4, r5, pc}
   d838e:	ea91 0f03 	teq	r1, r3
   d8392:	bf1e      	ittt	ne
   d8394:	2100      	movne	r1, #0
   d8396:	2000      	movne	r0, #0
   d8398:	bd30      	popne	{r4, r5, pc}
   d839a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d839e:	d105      	bne.n	d83ac <__adddf3+0x230>
   d83a0:	0040      	lsls	r0, r0, #1
   d83a2:	4149      	adcs	r1, r1
   d83a4:	bf28      	it	cs
   d83a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d83aa:	bd30      	pop	{r4, r5, pc}
   d83ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d83b0:	bf3c      	itt	cc
   d83b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d83b6:	bd30      	popcc	{r4, r5, pc}
   d83b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d83bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d83c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d83c4:	f04f 0000 	mov.w	r0, #0
   d83c8:	bd30      	pop	{r4, r5, pc}
   d83ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d83ce:	bf1a      	itte	ne
   d83d0:	4619      	movne	r1, r3
   d83d2:	4610      	movne	r0, r2
   d83d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d83d8:	bf1c      	itt	ne
   d83da:	460b      	movne	r3, r1
   d83dc:	4602      	movne	r2, r0
   d83de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d83e2:	bf06      	itte	eq
   d83e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d83e8:	ea91 0f03 	teqeq	r1, r3
   d83ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d83f0:	bd30      	pop	{r4, r5, pc}
   d83f2:	bf00      	nop

000d83f4 <__aeabi_ui2d>:
   d83f4:	f090 0f00 	teq	r0, #0
   d83f8:	bf04      	itt	eq
   d83fa:	2100      	moveq	r1, #0
   d83fc:	4770      	bxeq	lr
   d83fe:	b530      	push	{r4, r5, lr}
   d8400:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8404:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8408:	f04f 0500 	mov.w	r5, #0
   d840c:	f04f 0100 	mov.w	r1, #0
   d8410:	e750      	b.n	d82b4 <__adddf3+0x138>
   d8412:	bf00      	nop

000d8414 <__aeabi_i2d>:
   d8414:	f090 0f00 	teq	r0, #0
   d8418:	bf04      	itt	eq
   d841a:	2100      	moveq	r1, #0
   d841c:	4770      	bxeq	lr
   d841e:	b530      	push	{r4, r5, lr}
   d8420:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8424:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d842c:	bf48      	it	mi
   d842e:	4240      	negmi	r0, r0
   d8430:	f04f 0100 	mov.w	r1, #0
   d8434:	e73e      	b.n	d82b4 <__adddf3+0x138>
   d8436:	bf00      	nop

000d8438 <__aeabi_f2d>:
   d8438:	0042      	lsls	r2, r0, #1
   d843a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d843e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8442:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8446:	bf1f      	itttt	ne
   d8448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d844c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8454:	4770      	bxne	lr
   d8456:	f092 0f00 	teq	r2, #0
   d845a:	bf14      	ite	ne
   d845c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8460:	4770      	bxeq	lr
   d8462:	b530      	push	{r4, r5, lr}
   d8464:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d846c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8470:	e720      	b.n	d82b4 <__adddf3+0x138>
   d8472:	bf00      	nop

000d8474 <__aeabi_ul2d>:
   d8474:	ea50 0201 	orrs.w	r2, r0, r1
   d8478:	bf08      	it	eq
   d847a:	4770      	bxeq	lr
   d847c:	b530      	push	{r4, r5, lr}
   d847e:	f04f 0500 	mov.w	r5, #0
   d8482:	e00a      	b.n	d849a <__aeabi_l2d+0x16>

000d8484 <__aeabi_l2d>:
   d8484:	ea50 0201 	orrs.w	r2, r0, r1
   d8488:	bf08      	it	eq
   d848a:	4770      	bxeq	lr
   d848c:	b530      	push	{r4, r5, lr}
   d848e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8492:	d502      	bpl.n	d849a <__aeabi_l2d+0x16>
   d8494:	4240      	negs	r0, r0
   d8496:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d849a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d849e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d84a6:	f43f aedc 	beq.w	d8262 <__adddf3+0xe6>
   d84aa:	f04f 0203 	mov.w	r2, #3
   d84ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d84b2:	bf18      	it	ne
   d84b4:	3203      	addne	r2, #3
   d84b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d84ba:	bf18      	it	ne
   d84bc:	3203      	addne	r2, #3
   d84be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d84c2:	f1c2 0320 	rsb	r3, r2, #32
   d84c6:	fa00 fc03 	lsl.w	ip, r0, r3
   d84ca:	fa20 f002 	lsr.w	r0, r0, r2
   d84ce:	fa01 fe03 	lsl.w	lr, r1, r3
   d84d2:	ea40 000e 	orr.w	r0, r0, lr
   d84d6:	fa21 f102 	lsr.w	r1, r1, r2
   d84da:	4414      	add	r4, r2
   d84dc:	e6c1      	b.n	d8262 <__adddf3+0xe6>
   d84de:	bf00      	nop

000d84e0 <__aeabi_dmul>:
   d84e0:	b570      	push	{r4, r5, r6, lr}
   d84e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d84e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d84ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d84ee:	bf1d      	ittte	ne
   d84f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d84f4:	ea94 0f0c 	teqne	r4, ip
   d84f8:	ea95 0f0c 	teqne	r5, ip
   d84fc:	f000 f8de 	bleq	d86bc <__aeabi_dmul+0x1dc>
   d8500:	442c      	add	r4, r5
   d8502:	ea81 0603 	eor.w	r6, r1, r3
   d8506:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d850a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d850e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8512:	bf18      	it	ne
   d8514:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d851c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8520:	d038      	beq.n	d8594 <__aeabi_dmul+0xb4>
   d8522:	fba0 ce02 	umull	ip, lr, r0, r2
   d8526:	f04f 0500 	mov.w	r5, #0
   d852a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d852e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8532:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8536:	f04f 0600 	mov.w	r6, #0
   d853a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d853e:	f09c 0f00 	teq	ip, #0
   d8542:	bf18      	it	ne
   d8544:	f04e 0e01 	orrne.w	lr, lr, #1
   d8548:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d854c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8550:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8554:	d204      	bcs.n	d8560 <__aeabi_dmul+0x80>
   d8556:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d855a:	416d      	adcs	r5, r5
   d855c:	eb46 0606 	adc.w	r6, r6, r6
   d8560:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8564:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8568:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d856c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8570:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8574:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8578:	bf88      	it	hi
   d857a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d857e:	d81e      	bhi.n	d85be <__aeabi_dmul+0xde>
   d8580:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8584:	bf08      	it	eq
   d8586:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d858a:	f150 0000 	adcs.w	r0, r0, #0
   d858e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8592:	bd70      	pop	{r4, r5, r6, pc}
   d8594:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8598:	ea46 0101 	orr.w	r1, r6, r1
   d859c:	ea40 0002 	orr.w	r0, r0, r2
   d85a0:	ea81 0103 	eor.w	r1, r1, r3
   d85a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d85a8:	bfc2      	ittt	gt
   d85aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d85ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d85b2:	bd70      	popgt	{r4, r5, r6, pc}
   d85b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85b8:	f04f 0e00 	mov.w	lr, #0
   d85bc:	3c01      	subs	r4, #1
   d85be:	f300 80ab 	bgt.w	d8718 <__aeabi_dmul+0x238>
   d85c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d85c6:	bfde      	ittt	le
   d85c8:	2000      	movle	r0, #0
   d85ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d85ce:	bd70      	pople	{r4, r5, r6, pc}
   d85d0:	f1c4 0400 	rsb	r4, r4, #0
   d85d4:	3c20      	subs	r4, #32
   d85d6:	da35      	bge.n	d8644 <__aeabi_dmul+0x164>
   d85d8:	340c      	adds	r4, #12
   d85da:	dc1b      	bgt.n	d8614 <__aeabi_dmul+0x134>
   d85dc:	f104 0414 	add.w	r4, r4, #20
   d85e0:	f1c4 0520 	rsb	r5, r4, #32
   d85e4:	fa00 f305 	lsl.w	r3, r0, r5
   d85e8:	fa20 f004 	lsr.w	r0, r0, r4
   d85ec:	fa01 f205 	lsl.w	r2, r1, r5
   d85f0:	ea40 0002 	orr.w	r0, r0, r2
   d85f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d85f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d85fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8600:	fa21 f604 	lsr.w	r6, r1, r4
   d8604:	eb42 0106 	adc.w	r1, r2, r6
   d8608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d860c:	bf08      	it	eq
   d860e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8612:	bd70      	pop	{r4, r5, r6, pc}
   d8614:	f1c4 040c 	rsb	r4, r4, #12
   d8618:	f1c4 0520 	rsb	r5, r4, #32
   d861c:	fa00 f304 	lsl.w	r3, r0, r4
   d8620:	fa20 f005 	lsr.w	r0, r0, r5
   d8624:	fa01 f204 	lsl.w	r2, r1, r4
   d8628:	ea40 0002 	orr.w	r0, r0, r2
   d862c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8634:	f141 0100 	adc.w	r1, r1, #0
   d8638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d863c:	bf08      	it	eq
   d863e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8642:	bd70      	pop	{r4, r5, r6, pc}
   d8644:	f1c4 0520 	rsb	r5, r4, #32
   d8648:	fa00 f205 	lsl.w	r2, r0, r5
   d864c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8650:	fa20 f304 	lsr.w	r3, r0, r4
   d8654:	fa01 f205 	lsl.w	r2, r1, r5
   d8658:	ea43 0302 	orr.w	r3, r3, r2
   d865c:	fa21 f004 	lsr.w	r0, r1, r4
   d8660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8664:	fa21 f204 	lsr.w	r2, r1, r4
   d8668:	ea20 0002 	bic.w	r0, r0, r2
   d866c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8674:	bf08      	it	eq
   d8676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d867a:	bd70      	pop	{r4, r5, r6, pc}
   d867c:	f094 0f00 	teq	r4, #0
   d8680:	d10f      	bne.n	d86a2 <__aeabi_dmul+0x1c2>
   d8682:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8686:	0040      	lsls	r0, r0, #1
   d8688:	eb41 0101 	adc.w	r1, r1, r1
   d868c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8690:	bf08      	it	eq
   d8692:	3c01      	subeq	r4, #1
   d8694:	d0f7      	beq.n	d8686 <__aeabi_dmul+0x1a6>
   d8696:	ea41 0106 	orr.w	r1, r1, r6
   d869a:	f095 0f00 	teq	r5, #0
   d869e:	bf18      	it	ne
   d86a0:	4770      	bxne	lr
   d86a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d86a6:	0052      	lsls	r2, r2, #1
   d86a8:	eb43 0303 	adc.w	r3, r3, r3
   d86ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d86b0:	bf08      	it	eq
   d86b2:	3d01      	subeq	r5, #1
   d86b4:	d0f7      	beq.n	d86a6 <__aeabi_dmul+0x1c6>
   d86b6:	ea43 0306 	orr.w	r3, r3, r6
   d86ba:	4770      	bx	lr
   d86bc:	ea94 0f0c 	teq	r4, ip
   d86c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d86c4:	bf18      	it	ne
   d86c6:	ea95 0f0c 	teqne	r5, ip
   d86ca:	d00c      	beq.n	d86e6 <__aeabi_dmul+0x206>
   d86cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d86d0:	bf18      	it	ne
   d86d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d86d6:	d1d1      	bne.n	d867c <__aeabi_dmul+0x19c>
   d86d8:	ea81 0103 	eor.w	r1, r1, r3
   d86dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86e0:	f04f 0000 	mov.w	r0, #0
   d86e4:	bd70      	pop	{r4, r5, r6, pc}
   d86e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d86ea:	bf06      	itte	eq
   d86ec:	4610      	moveq	r0, r2
   d86ee:	4619      	moveq	r1, r3
   d86f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d86f4:	d019      	beq.n	d872a <__aeabi_dmul+0x24a>
   d86f6:	ea94 0f0c 	teq	r4, ip
   d86fa:	d102      	bne.n	d8702 <__aeabi_dmul+0x222>
   d86fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8700:	d113      	bne.n	d872a <__aeabi_dmul+0x24a>
   d8702:	ea95 0f0c 	teq	r5, ip
   d8706:	d105      	bne.n	d8714 <__aeabi_dmul+0x234>
   d8708:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d870c:	bf1c      	itt	ne
   d870e:	4610      	movne	r0, r2
   d8710:	4619      	movne	r1, r3
   d8712:	d10a      	bne.n	d872a <__aeabi_dmul+0x24a>
   d8714:	ea81 0103 	eor.w	r1, r1, r3
   d8718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d871c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8724:	f04f 0000 	mov.w	r0, #0
   d8728:	bd70      	pop	{r4, r5, r6, pc}
   d872a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d872e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8732:	bd70      	pop	{r4, r5, r6, pc}

000d8734 <__aeabi_ddiv>:
   d8734:	b570      	push	{r4, r5, r6, lr}
   d8736:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d873a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d873e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8742:	bf1d      	ittte	ne
   d8744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8748:	ea94 0f0c 	teqne	r4, ip
   d874c:	ea95 0f0c 	teqne	r5, ip
   d8750:	f000 f8a7 	bleq	d88a2 <__aeabi_ddiv+0x16e>
   d8754:	eba4 0405 	sub.w	r4, r4, r5
   d8758:	ea81 0e03 	eor.w	lr, r1, r3
   d875c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8760:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8764:	f000 8088 	beq.w	d8878 <__aeabi_ddiv+0x144>
   d8768:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d876c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8770:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8774:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8778:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d877c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8780:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8784:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8788:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d878c:	429d      	cmp	r5, r3
   d878e:	bf08      	it	eq
   d8790:	4296      	cmpeq	r6, r2
   d8792:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8796:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d879a:	d202      	bcs.n	d87a2 <__aeabi_ddiv+0x6e>
   d879c:	085b      	lsrs	r3, r3, #1
   d879e:	ea4f 0232 	mov.w	r2, r2, rrx
   d87a2:	1ab6      	subs	r6, r6, r2
   d87a4:	eb65 0503 	sbc.w	r5, r5, r3
   d87a8:	085b      	lsrs	r3, r3, #1
   d87aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d87ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d87b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d87b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d87ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87be:	bf22      	ittt	cs
   d87c0:	1ab6      	subcs	r6, r6, r2
   d87c2:	4675      	movcs	r5, lr
   d87c4:	ea40 000c 	orrcs.w	r0, r0, ip
   d87c8:	085b      	lsrs	r3, r3, #1
   d87ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d87ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d87d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87d6:	bf22      	ittt	cs
   d87d8:	1ab6      	subcs	r6, r6, r2
   d87da:	4675      	movcs	r5, lr
   d87dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d87e0:	085b      	lsrs	r3, r3, #1
   d87e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d87e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d87ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87ee:	bf22      	ittt	cs
   d87f0:	1ab6      	subcs	r6, r6, r2
   d87f2:	4675      	movcs	r5, lr
   d87f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d87f8:	085b      	lsrs	r3, r3, #1
   d87fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d87fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8802:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8806:	bf22      	ittt	cs
   d8808:	1ab6      	subcs	r6, r6, r2
   d880a:	4675      	movcs	r5, lr
   d880c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8810:	ea55 0e06 	orrs.w	lr, r5, r6
   d8814:	d018      	beq.n	d8848 <__aeabi_ddiv+0x114>
   d8816:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d881a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d881e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8822:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8826:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d882a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d882e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8832:	d1c0      	bne.n	d87b6 <__aeabi_ddiv+0x82>
   d8834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8838:	d10b      	bne.n	d8852 <__aeabi_ddiv+0x11e>
   d883a:	ea41 0100 	orr.w	r1, r1, r0
   d883e:	f04f 0000 	mov.w	r0, #0
   d8842:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8846:	e7b6      	b.n	d87b6 <__aeabi_ddiv+0x82>
   d8848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d884c:	bf04      	itt	eq
   d884e:	4301      	orreq	r1, r0
   d8850:	2000      	moveq	r0, #0
   d8852:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8856:	bf88      	it	hi
   d8858:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d885c:	f63f aeaf 	bhi.w	d85be <__aeabi_dmul+0xde>
   d8860:	ebb5 0c03 	subs.w	ip, r5, r3
   d8864:	bf04      	itt	eq
   d8866:	ebb6 0c02 	subseq.w	ip, r6, r2
   d886a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d886e:	f150 0000 	adcs.w	r0, r0, #0
   d8872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8876:	bd70      	pop	{r4, r5, r6, pc}
   d8878:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d887c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8880:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8884:	bfc2      	ittt	gt
   d8886:	ebd4 050c 	rsbsgt	r5, r4, ip
   d888a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d888e:	bd70      	popgt	{r4, r5, r6, pc}
   d8890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8894:	f04f 0e00 	mov.w	lr, #0
   d8898:	3c01      	subs	r4, #1
   d889a:	e690      	b.n	d85be <__aeabi_dmul+0xde>
   d889c:	ea45 0e06 	orr.w	lr, r5, r6
   d88a0:	e68d      	b.n	d85be <__aeabi_dmul+0xde>
   d88a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d88a6:	ea94 0f0c 	teq	r4, ip
   d88aa:	bf08      	it	eq
   d88ac:	ea95 0f0c 	teqeq	r5, ip
   d88b0:	f43f af3b 	beq.w	d872a <__aeabi_dmul+0x24a>
   d88b4:	ea94 0f0c 	teq	r4, ip
   d88b8:	d10a      	bne.n	d88d0 <__aeabi_ddiv+0x19c>
   d88ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d88be:	f47f af34 	bne.w	d872a <__aeabi_dmul+0x24a>
   d88c2:	ea95 0f0c 	teq	r5, ip
   d88c6:	f47f af25 	bne.w	d8714 <__aeabi_dmul+0x234>
   d88ca:	4610      	mov	r0, r2
   d88cc:	4619      	mov	r1, r3
   d88ce:	e72c      	b.n	d872a <__aeabi_dmul+0x24a>
   d88d0:	ea95 0f0c 	teq	r5, ip
   d88d4:	d106      	bne.n	d88e4 <__aeabi_ddiv+0x1b0>
   d88d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d88da:	f43f aefd 	beq.w	d86d8 <__aeabi_dmul+0x1f8>
   d88de:	4610      	mov	r0, r2
   d88e0:	4619      	mov	r1, r3
   d88e2:	e722      	b.n	d872a <__aeabi_dmul+0x24a>
   d88e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88e8:	bf18      	it	ne
   d88ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88ee:	f47f aec5 	bne.w	d867c <__aeabi_dmul+0x19c>
   d88f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d88f6:	f47f af0d 	bne.w	d8714 <__aeabi_dmul+0x234>
   d88fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d88fe:	f47f aeeb 	bne.w	d86d8 <__aeabi_dmul+0x1f8>
   d8902:	e712      	b.n	d872a <__aeabi_dmul+0x24a>

000d8904 <__gedf2>:
   d8904:	f04f 3cff 	mov.w	ip, #4294967295
   d8908:	e006      	b.n	d8918 <__cmpdf2+0x4>
   d890a:	bf00      	nop

000d890c <__ledf2>:
   d890c:	f04f 0c01 	mov.w	ip, #1
   d8910:	e002      	b.n	d8918 <__cmpdf2+0x4>
   d8912:	bf00      	nop

000d8914 <__cmpdf2>:
   d8914:	f04f 0c01 	mov.w	ip, #1
   d8918:	f84d cd04 	str.w	ip, [sp, #-4]!
   d891c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8924:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8928:	bf18      	it	ne
   d892a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d892e:	d01b      	beq.n	d8968 <__cmpdf2+0x54>
   d8930:	b001      	add	sp, #4
   d8932:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8936:	bf0c      	ite	eq
   d8938:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d893c:	ea91 0f03 	teqne	r1, r3
   d8940:	bf02      	ittt	eq
   d8942:	ea90 0f02 	teqeq	r0, r2
   d8946:	2000      	moveq	r0, #0
   d8948:	4770      	bxeq	lr
   d894a:	f110 0f00 	cmn.w	r0, #0
   d894e:	ea91 0f03 	teq	r1, r3
   d8952:	bf58      	it	pl
   d8954:	4299      	cmppl	r1, r3
   d8956:	bf08      	it	eq
   d8958:	4290      	cmpeq	r0, r2
   d895a:	bf2c      	ite	cs
   d895c:	17d8      	asrcs	r0, r3, #31
   d895e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8962:	f040 0001 	orr.w	r0, r0, #1
   d8966:	4770      	bx	lr
   d8968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d896c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8970:	d102      	bne.n	d8978 <__cmpdf2+0x64>
   d8972:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8976:	d107      	bne.n	d8988 <__cmpdf2+0x74>
   d8978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d897c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8980:	d1d6      	bne.n	d8930 <__cmpdf2+0x1c>
   d8982:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8986:	d0d3      	beq.n	d8930 <__cmpdf2+0x1c>
   d8988:	f85d 0b04 	ldr.w	r0, [sp], #4
   d898c:	4770      	bx	lr
   d898e:	bf00      	nop

000d8990 <__aeabi_cdrcmple>:
   d8990:	4684      	mov	ip, r0
   d8992:	4610      	mov	r0, r2
   d8994:	4662      	mov	r2, ip
   d8996:	468c      	mov	ip, r1
   d8998:	4619      	mov	r1, r3
   d899a:	4663      	mov	r3, ip
   d899c:	e000      	b.n	d89a0 <__aeabi_cdcmpeq>
   d899e:	bf00      	nop

000d89a0 <__aeabi_cdcmpeq>:
   d89a0:	b501      	push	{r0, lr}
   d89a2:	f7ff ffb7 	bl	d8914 <__cmpdf2>
   d89a6:	2800      	cmp	r0, #0
   d89a8:	bf48      	it	mi
   d89aa:	f110 0f00 	cmnmi.w	r0, #0
   d89ae:	bd01      	pop	{r0, pc}

000d89b0 <__aeabi_dcmpeq>:
   d89b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89b4:	f7ff fff4 	bl	d89a0 <__aeabi_cdcmpeq>
   d89b8:	bf0c      	ite	eq
   d89ba:	2001      	moveq	r0, #1
   d89bc:	2000      	movne	r0, #0
   d89be:	f85d fb08 	ldr.w	pc, [sp], #8
   d89c2:	bf00      	nop

000d89c4 <__aeabi_dcmplt>:
   d89c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89c8:	f7ff ffea 	bl	d89a0 <__aeabi_cdcmpeq>
   d89cc:	bf34      	ite	cc
   d89ce:	2001      	movcc	r0, #1
   d89d0:	2000      	movcs	r0, #0
   d89d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d89d6:	bf00      	nop

000d89d8 <__aeabi_dcmple>:
   d89d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89dc:	f7ff ffe0 	bl	d89a0 <__aeabi_cdcmpeq>
   d89e0:	bf94      	ite	ls
   d89e2:	2001      	movls	r0, #1
   d89e4:	2000      	movhi	r0, #0
   d89e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d89ea:	bf00      	nop

000d89ec <__aeabi_dcmpge>:
   d89ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89f0:	f7ff ffce 	bl	d8990 <__aeabi_cdrcmple>
   d89f4:	bf94      	ite	ls
   d89f6:	2001      	movls	r0, #1
   d89f8:	2000      	movhi	r0, #0
   d89fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d89fe:	bf00      	nop

000d8a00 <__aeabi_dcmpgt>:
   d8a00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a04:	f7ff ffc4 	bl	d8990 <__aeabi_cdrcmple>
   d8a08:	bf34      	ite	cc
   d8a0a:	2001      	movcc	r0, #1
   d8a0c:	2000      	movcs	r0, #0
   d8a0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a12:	bf00      	nop

000d8a14 <__aeabi_dcmpun>:
   d8a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a1c:	d102      	bne.n	d8a24 <__aeabi_dcmpun+0x10>
   d8a1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8a22:	d10a      	bne.n	d8a3a <__aeabi_dcmpun+0x26>
   d8a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a2c:	d102      	bne.n	d8a34 <__aeabi_dcmpun+0x20>
   d8a2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8a32:	d102      	bne.n	d8a3a <__aeabi_dcmpun+0x26>
   d8a34:	f04f 0000 	mov.w	r0, #0
   d8a38:	4770      	bx	lr
   d8a3a:	f04f 0001 	mov.w	r0, #1
   d8a3e:	4770      	bx	lr

000d8a40 <__aeabi_d2f>:
   d8a40:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8a44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8a48:	bf24      	itt	cs
   d8a4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8a4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8a52:	d90d      	bls.n	d8a70 <__aeabi_d2f+0x30>
   d8a54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8a58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8a5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8a60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8a64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8a68:	bf08      	it	eq
   d8a6a:	f020 0001 	biceq.w	r0, r0, #1
   d8a6e:	4770      	bx	lr
   d8a70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8a74:	d121      	bne.n	d8aba <__aeabi_d2f+0x7a>
   d8a76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8a7a:	bfbc      	itt	lt
   d8a7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8a80:	4770      	bxlt	lr
   d8a82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a86:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8a8a:	f1c2 0218 	rsb	r2, r2, #24
   d8a8e:	f1c2 0c20 	rsb	ip, r2, #32
   d8a92:	fa10 f30c 	lsls.w	r3, r0, ip
   d8a96:	fa20 f002 	lsr.w	r0, r0, r2
   d8a9a:	bf18      	it	ne
   d8a9c:	f040 0001 	orrne.w	r0, r0, #1
   d8aa0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8aa4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8aa8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8aac:	ea40 000c 	orr.w	r0, r0, ip
   d8ab0:	fa23 f302 	lsr.w	r3, r3, r2
   d8ab4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8ab8:	e7cc      	b.n	d8a54 <__aeabi_d2f+0x14>
   d8aba:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8abe:	d107      	bne.n	d8ad0 <__aeabi_d2f+0x90>
   d8ac0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8ac4:	bf1e      	ittt	ne
   d8ac6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8aca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8ace:	4770      	bxne	lr
   d8ad0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8ad4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8ad8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8adc:	4770      	bx	lr
   d8ade:	bf00      	nop

000d8ae0 <__cxa_atexit>:
   d8ae0:	b510      	push	{r4, lr}
   d8ae2:	4c05      	ldr	r4, [pc, #20]	; (d8af8 <__cxa_atexit+0x18>)
   d8ae4:	4613      	mov	r3, r2
   d8ae6:	b12c      	cbz	r4, d8af4 <__cxa_atexit+0x14>
   d8ae8:	460a      	mov	r2, r1
   d8aea:	4601      	mov	r1, r0
   d8aec:	2002      	movs	r0, #2
   d8aee:	f3af 8000 	nop.w
   d8af2:	bd10      	pop	{r4, pc}
   d8af4:	4620      	mov	r0, r4
   d8af6:	bd10      	pop	{r4, pc}
   d8af8:	00000000 	.word	0x00000000

000d8afc <memcpy>:
   d8afc:	b510      	push	{r4, lr}
   d8afe:	1e43      	subs	r3, r0, #1
   d8b00:	440a      	add	r2, r1
   d8b02:	4291      	cmp	r1, r2
   d8b04:	d004      	beq.n	d8b10 <memcpy+0x14>
   d8b06:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b0e:	e7f8      	b.n	d8b02 <memcpy+0x6>
   d8b10:	bd10      	pop	{r4, pc}

000d8b12 <memset>:
   d8b12:	4402      	add	r2, r0
   d8b14:	4603      	mov	r3, r0
   d8b16:	4293      	cmp	r3, r2
   d8b18:	d002      	beq.n	d8b20 <memset+0xe>
   d8b1a:	f803 1b01 	strb.w	r1, [r3], #1
   d8b1e:	e7fa      	b.n	d8b16 <memset+0x4>
   d8b20:	4770      	bx	lr
	...

000d8b24 <srand>:
   d8b24:	b538      	push	{r3, r4, r5, lr}
   d8b26:	4b12      	ldr	r3, [pc, #72]	; (d8b70 <srand+0x4c>)
   d8b28:	681c      	ldr	r4, [r3, #0]
   d8b2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b2c:	4605      	mov	r5, r0
   d8b2e:	b9d3      	cbnz	r3, d8b66 <srand+0x42>
   d8b30:	2018      	movs	r0, #24
   d8b32:	f7fd fbc9 	bl	d62c8 <malloc>
   d8b36:	f243 330e 	movw	r3, #13070	; 0x330e
   d8b3a:	63a0      	str	r0, [r4, #56]	; 0x38
   d8b3c:	8003      	strh	r3, [r0, #0]
   d8b3e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8b42:	8043      	strh	r3, [r0, #2]
   d8b44:	f241 2334 	movw	r3, #4660	; 0x1234
   d8b48:	8083      	strh	r3, [r0, #4]
   d8b4a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8b4e:	80c3      	strh	r3, [r0, #6]
   d8b50:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8b54:	8103      	strh	r3, [r0, #8]
   d8b56:	2305      	movs	r3, #5
   d8b58:	8143      	strh	r3, [r0, #10]
   d8b5a:	230b      	movs	r3, #11
   d8b5c:	8183      	strh	r3, [r0, #12]
   d8b5e:	2201      	movs	r2, #1
   d8b60:	2300      	movs	r3, #0
   d8b62:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b68:	2200      	movs	r2, #0
   d8b6a:	611d      	str	r5, [r3, #16]
   d8b6c:	615a      	str	r2, [r3, #20]
   d8b6e:	bd38      	pop	{r3, r4, r5, pc}
   d8b70:	2003d624 	.word	0x2003d624

000d8b74 <strcpy>:
   d8b74:	4603      	mov	r3, r0
   d8b76:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8b7a:	f803 2b01 	strb.w	r2, [r3], #1
   d8b7e:	2a00      	cmp	r2, #0
   d8b80:	d1f9      	bne.n	d8b76 <strcpy+0x2>
   d8b82:	4770      	bx	lr

000d8b84 <strdup>:
   d8b84:	4b02      	ldr	r3, [pc, #8]	; (d8b90 <strdup+0xc>)
   d8b86:	4601      	mov	r1, r0
   d8b88:	6818      	ldr	r0, [r3, #0]
   d8b8a:	f000 b803 	b.w	d8b94 <_strdup_r>
   d8b8e:	bf00      	nop
   d8b90:	2003d624 	.word	0x2003d624

000d8b94 <_strdup_r>:
   d8b94:	b570      	push	{r4, r5, r6, lr}
   d8b96:	4606      	mov	r6, r0
   d8b98:	4608      	mov	r0, r1
   d8b9a:	460c      	mov	r4, r1
   d8b9c:	f000 f80d 	bl	d8bba <strlen>
   d8ba0:	1c45      	adds	r5, r0, #1
   d8ba2:	4629      	mov	r1, r5
   d8ba4:	4630      	mov	r0, r6
   d8ba6:	f7fd fbbf 	bl	d6328 <_malloc_r>
   d8baa:	4606      	mov	r6, r0
   d8bac:	b118      	cbz	r0, d8bb6 <_strdup_r+0x22>
   d8bae:	462a      	mov	r2, r5
   d8bb0:	4621      	mov	r1, r4
   d8bb2:	f7ff ffa3 	bl	d8afc <memcpy>
   d8bb6:	4630      	mov	r0, r6
   d8bb8:	bd70      	pop	{r4, r5, r6, pc}

000d8bba <strlen>:
   d8bba:	4603      	mov	r3, r0
   d8bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8bc0:	2a00      	cmp	r2, #0
   d8bc2:	d1fb      	bne.n	d8bbc <strlen+0x2>
   d8bc4:	1a18      	subs	r0, r3, r0
   d8bc6:	3801      	subs	r0, #1
   d8bc8:	4770      	bx	lr

000d8bca <link_code_end>:
	...

000d8bcc <dynalib_user>:
   d8bcc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d8bdc:	0000 0000 6954 656d 203a 3025 6932 253a     ....Time: %02i:%
   d8bec:	3230 3a69 3025 6932 253a 3330 0a69 4400     02i:%02i:%03i..D
   d8bfc:	7461 7365 203a 3025 6932 252d 3230 2d69     ates: %02i-%02i-
   d8c0c:	3025 6932 000a 6946 3a78 2520 2c69 5120     %02i..Fix: %i, Q
   d8c1c:	6175 696c 7974 203a 6925 7400 6d65 4370     uality: %i.tempC
   d8c2c:	203a 6625 7420 6d65 4670 203a 6625 6320     : %f tempF: %f c
   d8c3c:	756f 746e 7265 203a 6925 6420 7665 6369     ounter: %i devic
   d8c4c:	4965 3a44 2520 0a73 7600 6c6f 6174 6567     eID: %s..voltage
   d8c5c:	203a 6625 000a 6573 646e 7220 7065 796c     : %f..send reply
   d8c6c:	203a 7325 000a 6573 646e 6144 6174 2928     : %s..sendData()
   d8c7c:	4100 2b54 4553 444e 253d 2c69 6925 252c     .AT+SEND=%i,%i,%
   d8c8c:	2e30 6632 252c 2e30 6632 252c 0d69 000a     0.2f,%0.2f,%i...
   d8c9c:	7263 6165 6574 7542 6666 7265 203a 7325     createBuffer: %s
   d8cac:	6300 6572 7461 4265 6675 6566 2872 0029     .createBuffer().
   d8cbc:	5441 532b 4e45 3d44 6925 362c 2c30 6625     AT+SEND=%i,60,%f
   d8ccc:	252c 2c66 6925 0a0d 5300 6e65 2064 6572     ,%f,%i...Send re
   d8cdc:	6c70 3a79 2520 0a73 4100 2b54 4f4d 4544     ply: %s..AT+MODE
   d8cec:	303d 0a0d 4100 6177 7469 6e69 2067 6552     =0...Awaiting Re
   d8cfc:	6c70 2079 7266 6d6f 7220 7965 7861 6e4f     ply from reyaxOn
   d8d0c:	2928 000a 6552 6c70 3a79 2520 0a73 4100     ()..Reply: %s..A
   d8d1c:	2b54 4f4d 4544 0d3f 000a 7741 6961 6974     T+MODE?...Awaiti
   d8d2c:	676e 5220 7065 796c 6620 6f72 206d 6f6d     ng Reply from mo
   d8d3c:	6564 0a3f 4100 2b54 4f4d 4544 313d 0a0d     de?..AT+MODE=1..
   d8d4c:	5000 776f 7265 6e69 2067 6f64 6e77 2e2e     .Powering down..
   d8d5c:	0a2e 5300 6174 7472 6e69 2067 6353 6e61     ...Starting Scan
   d8d6c:	203a 2d0a 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     : .-------------
   d8d7c:	202d 000a 3249 2043 6564 6976 6563 6620     - ..I2C device f
   d8d8c:	756f 646e 6120 2074 6461 7264 7365 2073     ound at address 
   d8d9c:	7830 3025 7832 0a20 5500 6b6e 6f6e 6e77     0x%02x ..Unknown
   d8dac:	6520 7272 726f 6120 2074 6461 7264 7365      error at addres
   d8dbc:	2073 7830 3025 7832 0a20 4e00 206f 3249     s 0x%02x ..No I2
   d8dcc:	2043 6564 6976 6563 2073 6f66 6e75 0a64     C devices found.
   d8ddc:	2d00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 202d     .-------------- 
   d8dec:	530a 6163 206e 6f43 706d 656c 6574 0a21     .Scan Complete!.
   d8dfc:	4100 0d54 000a 7461 6554 7473 7220 7065     .AT...atTest rep
   d8e0c:	796c 203a 7325 000a 7461 6554 7473 2928     ly: %s..atTest()
   d8e1c:	4100 2b54 4552 4553 0d54 000a 6f73 7466     .AT+RESET...soft
   d8e2c:	6177 6572 6552 6573 2874 0029 6f73 7466     wareReset().soft
   d8e3c:	6177 6572 6552 6573 2874 3229 6100 4d74     wareReset()2.atM
   d8e4c:	646f 2065 6572 6c70 3a79 2520 2073 6572     ode reply: %s re
   d8e5c:	6c70 3279 203a 7325 000a 7461 6f4d 6564     ply2: %s..atMode
   d8e6c:	2928 4100 6177 7469 6e69 2067 6552 6c70     ().Awaiting Repl
   d8e7c:	0a79 5200 7065 796c 4120 2b54 4f4d 4544     y..Reply AT+MODE
   d8e8c:	3a3f 2520 0a73 4100 2b54 4f4d 4544 003f     ?: %s..AT+MODE?.
   d8e9c:	5441 502b 5241 4d41 5445 5245 313d 2c32     AT+PARAMETER=12,
   d8eac:	2c37 2c31 0d37 000a 6573 5274 6461 6f69     7,1,7...setRadio
   d8ebc:	4100 2b54 4150 4152 454d 4554 3f52 0a0d     .AT+PARAMETER?..
   d8ecc:	5200 7065 796c 4120 2b54 4150 4152 454d     .Reply AT+PARAME
   d8edc:	4554 3f52 203a 7325 000a 6573 5074 7261     TER?: %s..setPar
   d8eec:	6d61 7465 7265 003f 5441 422b 4e41 3d44     ameter?.AT+BAND=
   d8efc:	3139 3035 3030 3030 0d30 000a 5441 422b     915000000...AT+B
   d8f0c:	4e41 3d44 3638 3538 3030 3030 0d30 000a     AND=868500000...
   d8f1c:	6573 4274 6e61 0064 5441 422b 4e41 3f44     setBand.AT+BAND?
   d8f2c:	0a0d 5200 7065 796c 4120 2b54 4142 444e     ...Reply AT+BAND
   d8f3c:	3a3f 2520 0a73 4100 2b54 4142 444e 003f     ?: %s..AT+BAND?.
   d8f4c:	4142 3134 3430 3330 3932 3836 4142 3131     BA4104032968BA11
   d8f5c:	3431 3932 3039 3937 3230 3531 3439 4141     14299079021594AA
   d8f6c:	4100 2b54 5043 4e49 253d 0d73 000a 6573     .AT+CPIN=%s...se
   d8f7c:	4374 4950 004e 5441 432b 4950 3f4e 0a0d     tCPIN.AT+CPIN?..
   d8f8c:	5200 7065 796c 4320 4950 3a4e 2520 0a73     .Reply CPIN: %s.
   d8f9c:	4100 2b54 5043 4e49 003f 5441 532b 4e45     .AT+CPIN?.AT+SEN
   d8fac:	0044 5441 532b 4e45 3f44 0a0d 5200 7065     D.AT+SEND?...Rep
   d8fbc:	796c 4120 2b54 4553 444e 3a3f 2520 0a73     ly AT+SEND?: %s.
   d8fcc:	4100 2b54 4553 444e 003f 7441 562b 5245     .AT+SEND?.At+VER
   d8fdc:	0d3f 000a 6572 6c70 2079 7361 566b 5245     ?...reply askVER
   d8fec:	2928 203a 7325 000a 7361 566b 5245 4100     (): %s..askVER.A
   d8ffc:	2b74 4955 3f44 0a0d 7200 7065 796c 6120     t+UID?...reply a
   d900c:	6b73 4955 2844 3a29 2520 0a73 6100 6b73     skUID(): %s..ask
   d901c:	4955 0044 5441 462b 4341 4f54 5952 0a0d     UID.AT+FACTORY..
   d902c:	7200 7065 796c 4120 2b54 4146 5443 524f     .reply AT+FACTOR
   d903c:	3a59 2520 0a73 4100 2b54 4146 5443 524f     Y: %s..AT+FACTOR
   d904c:	0059 5441 492b 5250 253d 0d69 000a 6573     Y.AT+IPR=%i...se
   d905c:	4974 5250 4100 2b54 5049 3f52 0a0d 5200     tIPR.AT+IPR?...R
   d906c:	7065 796c 4120 2b54 5049 3f52 203a 7325     eply AT+IPR?: %s
   d907c:	000a 5441 492b 5250 003f 5441 412b 4444     ..AT+IPR?.AT+ADD
   d908c:	4552 5353 253d 0d69 000a 6573 4174 6464     RESS=%i...setAdd
   d909c:	6572 7373 4100 2b54 4441 5244 5345 3f53     ress.AT+ADDRESS?
   d90ac:	0a0d 5200 7065 796c 6720 7465 6120 6464     ...Reply get add
   d90bc:	6572 7373 203a 7325 000a 5441 412b 4444     ress: %s..AT+ADD
   d90cc:	4552 5353 003f 5441 4e2b 5445 4f57 4b52     RESS?.AT+NETWORK
   d90dc:	4449 253d 0d69 000a 5441 4e2b 5445 4f57     ID=%i...AT+NETWO
   d90ec:	4b52 4449 0d3f 000a 6552 6c70 2079 5441     RKID?...Reply AT
   d90fc:	4e2b 5445 4f57 4b52 4449 203f 7325 000a     +NETWORKID? %s..
   d910c:	5441 4e2b 5445 4f57 4b52 4449 003f 5441     AT+NETWORKID?.AT
   d911c:	432b 4652 504f 253d 0d69 000a 5441 432b     +CRFOP=%i...AT+C
   d912c:	4652 504f 4100 2b54 5243 4f46 3f50 0a0d     RFOP.AT+CRFOP?..
   d913c:	5200 7065 796c 4120 2b54 5243 4f46 3f50     .Reply AT+CRFOP?
   d914c:	203a 7325 000a 5441 432b 4652 504f 003f     : %s..AT+CRFOP?.
   d915c:	7047 2073 7473 7461 7375 6920 2073 6925     Gps status is %i
   d916c:	000a 5024 544d 334b 3431 302c 312c 302c     ..$PMTK314,0,1,0
   d917c:	312c 302c 302c 302c 302c 302c 302c 302c     ,1,0,0,0,0,0,0,0
   d918c:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
   d919c:	322a 0038 5024 544d 324b 3032 312c 3030     *28.$PMTK220,100
   d91ac:	2a30 4631 2400 4750 4d43 2c44 3333 312c     0*1F.$PGCMD,33,1
   d91bc:	362a 0043                                   *6C.

000d91c0 <_ZTVN8particle13__SPISettingsE>:
	...
   d91c8:	52f1 000d 9322 000d 9325 000d 9328 000d     .R.."...%...(...
   d91d8:	932b 000d 932e 000d 9329 000d 9291 000d     +.......).......

000d91e8 <_ZTV12Adafruit_GPS>:
	...
   d91f0:	5349 000d 5369 000d 537f 000d 7349 000d     IS..iS...S..Is..
   d9200:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d9210:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d9220:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d9230:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d9240:	2545 3e64 4700 4147 4700 4c4c 4700 4153     E%d>.GGA.GLL.GSA
   d9250:	5200 434d 4400 5442 4800 4d44 4800 5444     .RMC.DBT.HDM.HDT
   d9260:	4d00 4144 4d00 5754 4d00 5657 5200 424d     .MDA.MTW.MWV.RMB
   d9270:	5400 504f 5400 5458 5600 5748 5600 574c     .TOP.TXT.VHW.VLW
   d9280:	5600 5750 5600 5257 5700 5643 5800 4554     .VPW.VWR.WCV.XTE
   d9290:	5a00 5a5a 4100 4250 4400 5450 4700 5653     .ZZZ.APB.DPT.GSV
   d92a0:	4800 4744 4d00 4457 5200 544f 5200 4d50     .HDG.MWD.ROT.RPM
   d92b0:	5200 4153 5600 5244 5600 4754 5a00 4144     .RSA.VDR.VTG.ZDA
   d92c0:	2400 4d50 4b54 3831 2c35 2a30 3232 2400     .$PMTK185,0*22.$
   d92d0:	4d50 4b54 3030 2c31 3831 2c35 2a33 4333     PMTK001,185,3*3C
   d92e0:	2400 4d50 4b54 3831 2c35 2a31 3332 2400     .$PMTK185,1*23.$
   d92f0:	4d50 4b54 3831 2a33 3833 2400 4d50 4b54     PMTK183*38.$PMTK
   d9300:	4f4c 0047 5024 544d 314b 3136 302c 322a     LOG.$PMTK161,0*2
   d9310:	0038 5024 544d 304b 3031 302c 3230 322a     8.$PMTK010,002*2
   d9320:	0044 4949 5700 0049 5047 5000 0047 4e47     D.II.WI.GP.PG.GN
   d9330:	0000 0000                                   ....

000d9334 <_ZTVN5spark12NetworkClassE>:
	...
   d933c:	635b 000d 6365 000d 636f 000d 6379 000d     [c..ec..oc..yc..
   d934c:	6383 000d 638f 000d 639b 000d 63a7 000d     .c...c...c...c..
   d935c:	63af 000d 63b9 000d 63c3 000d               .c...c...c..

000d9368 <_ZTVN5spark9MeshClassE>:
	...
   d9370:	6503 000d 64f9 000d 64ef 000d 64e5 000d     .e...d...d...d..
   d9380:	64d9 000d 64cd 000d 64c1 000d 64b9 000d     .d...d...d...d..
   d9390:	64af 000d 64a5 000d 63c3 000d               .d...d...c..

000d939c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d939c:	0800 1810 2820 3830                         .... (08

000d93a4 <_ZTV7TwoWire>:
	...
   d93ac:	6787 000d 67d1 000d 67a9 000d 6789 000d     .g...g...g...g..
   d93bc:	67b1 000d 67b9 000d 67c1 000d 67c9 000d     .g...g...g...g..

000d93cc <_ZTV11USARTSerial>:
	...
   d93d4:	6857 000d 68a7 000d 68b5 000d 7349 000d     Wh...h...h..Is..
   d93e4:	686b 000d 688d 000d 6879 000d 68a1 000d     kh...h..yh...h..
   d93f4:	6859 000d 685d 000d                         Yh..]h..

000d93fc <_ZTV9USBSerial>:
	...
   d9404:	6977 000d 69c7 000d 69d5 000d 7349 000d     wi...i...i..Is..
   d9414:	69b3 000d 6979 000d 698f 000d 69c1 000d     .i..yi...i...i..
   d9424:	69a5 000d 6973 000d                         .i..si..

000d942c <_ZTV9IPAddress>:
	...
   d9434:	6a95 000d 6a85 000d 6a87 000d               .j...j...j..

000d9440 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9448:	6b69 000d 6b6f 000d 6bb3 000d 6b7d 000d     ik..ok...k..}k..
   d9458:	6b6b 000d 2b25 3330 3a64 3025 7532 2500     kk..%+03d:%02u.%
   d9468:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d9478:	7a25 6100 6373 6974 656d 6200 7561 0064     %z.asctime.baud.
   d9488:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   d9498:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   d94a8:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   d94b8:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   d94c8:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   d94d8:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   d94e8:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d94f8:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
   d9508:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d9518:	0020 6564 6174 6c69 2073 203d 6600 6c00      .details = .f.l
   d9528:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   d9538:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d9548:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d9558:	0063 6c61 006c 6977 6972 676e 5300 7379     c.all.wiring.Sys
   d9568:	6574 206d 6c73 6565 2070 6f63 666e 6769     tem sleep config
   d9578:	7275 7461 6f69 206e 7369 6920 766e 6c61     uration is inval
   d9588:	6469 002e                                   id..

000d958c <_ZTVN5spark13EthernetClassE>:
	...
   d9594:	77df 000d 77d5 000d 77cb 000d 77c1 000d     .w...w...w...w..
   d95a4:	77b5 000d 77a9 000d 779d 000d 7795 000d     .w...w...w...w..
   d95b4:	778b 000d 7781 000d 63c3 000d               .w...w...c..

000d95c0 <_ZSt7nothrow>:
   d95c0:	0000 0000 6f6c 0067 0000 0000               ....log.....

000d95cc <__sf_fake_stdin>:
	...

000d95ec <__sf_fake_stdout>:
	...

000d960c <__sf_fake_stderr>:
	...

000d962c <link_const_variable_data_end>:
   d962c:	000d5261 	.word	0x000d5261
   d9630:	000d5899 	.word	0x000d5899
   d9634:	000d589d 	.word	0x000d589d
   d9638:	000d58a1 	.word	0x000d58a1
   d963c:	000d5dc7 	.word	0x000d5dc7
   d9640:	000d6491 	.word	0x000d6491
   d9644:	000d65d1 	.word	0x000d65d1
   d9648:	000d72a1 	.word	0x000d72a1
   d964c:	000d72c5 	.word	0x000d72c5
   d9650:	000d72d9 	.word	0x000d72d9
   d9654:	000d7495 	.word	0x000d7495
   d9658:	000d774d 	.word	0x000d774d
   d965c:	000d77e9 	.word	0x000d77e9
   d9660:	000d79b1 	.word	0x000d79b1
   d9664:	000d7a35 	.word	0x000d7a35
   d9668:	000d7af9 	.word	0x000d7af9
   d966c:	000d7bbd 	.word	0x000d7bbd
