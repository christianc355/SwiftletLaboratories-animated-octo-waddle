
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/superGPS/target/2.3.0/argon/superGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8b40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000250  2003d5a8  000d8b44  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ff8  2003d7f8  2003d7f8  0002d7f8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8d94  000d8d94  00028d94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8dbc  000d8dbc  00028dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018a5b8  00000000  00000000  00028dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019a5f  00000000  00000000  001b3378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002b68  00000000  00000000  001ccdd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003c82a  00000000  00000000  001cf93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00040c1f  00000000  00000000  0020c169  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00118518  00000000  00000000  0024cd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00030a8b  00000000  00000000  003652a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00008450  00000000  00000000  00395d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000079b0  00000000  00000000  0039e17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 f89d 	bl	d8170 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 f8a5 	bl	d818c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d5a8 	.word	0x2003d5a8
   d404c:	000d8b44 	.word	0x000d8b44
   d4050:	2003d7f8 	.word	0x2003d7f8
   d4054:	2003d7f8 	.word	0x2003d7f8
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 ff1b 	bl	d6e9c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d8b14 	.word	0x000d8b14
   d4080:	000d8b38 	.word	0x000d8b38

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bffe 	b.w	d5084 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb91 	bl	d47b0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bebb 	b.w	d6e0c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b819 	b.w	d60cc <malloc>

000d409a <_Znaj>:
   d409a:	f002 b817 	b.w	d60cc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b81d 	b.w	d60dc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b4:	b513      	push	{r0, r1, r4, lr}
   d40b6:	4b05      	ldr	r3, [pc, #20]	; (d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40b8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ba:	f88d 3000 	strb.w	r3, [sp]
   d40be:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c2:	f002 fd0b 	bl	d6adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40c6:	4620      	mov	r0, r4
   d40c8:	b002      	add	sp, #8
   d40ca:	bd10      	pop	{r4, pc}
   d40cc:	2003e384 	.word	0x2003e384

000d40d0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40d0:	b40e      	push	{r1, r2, r3}
   d40d2:	b503      	push	{r0, r1, lr}
   d40d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40d6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40de:	f002 fff0 	bl	d70c2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40e2:	b002      	add	sp, #8
   d40e4:	f85d eb04 	ldr.w	lr, [sp], #4
   d40e8:	b003      	add	sp, #12
   d40ea:	4770      	bx	lr

000d40ec <_Z6getGPSPfS_S_Pi>:
    System.reset();
  }
}

void getGPS(float *latitude, float *longitude, float *altitude, int *satellites)
{
   d40ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int theHour;

  theHour = GPS.hour + TIMEZONE;
   d40f0:	4c1e      	ldr	r4, [pc, #120]	; (d416c <_Z6getGPSPfS_S_Pi+0x80>)
{
   d40f2:	4605      	mov	r5, r0
  theHour = GPS.hour + TIMEZONE;
   d40f4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
  if (theHour < 0)
   d40f8:	1f86      	subs	r6, r0, #6
  {
    theHour = theHour + 24;
   d40fa:	bf48      	it	mi
   d40fc:	f100 0612 	addmi.w	r6, r0, #18
{
   d4100:	4689      	mov	r9, r1
   d4102:	4690      	mov	r8, r2
   d4104:	461f      	mov	r7, r3
  }

  Serial.printf("Time: %02i:%02i:%02i:%03i\n", theHour, GPS.minute, GPS.seconds, GPS.milliseconds);
   d4106:	f002 fb19 	bl	d673c <_Z16_fetch_usbserialv>
   d410a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   d410c:	9301      	str	r3, [sp, #4]
   d410e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d4112:	4917      	ldr	r1, [pc, #92]	; (d4170 <_Z6getGPSPfS_S_Pi+0x84>)
   d4114:	9300      	str	r3, [sp, #0]
   d4116:	4632      	mov	r2, r6
   d4118:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   d411c:	f7ff ffd8 	bl	d40d0 <_ZN5Print6printfEPKcz>
  Serial.printf("Dates: %02i-%02i-%02i\n", GPS.month, GPS.day, GPS.year);
   d4120:	f002 fb0c 	bl	d673c <_Z16_fetch_usbserialv>
   d4124:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   d4128:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   d412c:	4911      	ldr	r1, [pc, #68]	; (d4174 <_Z6getGPSPfS_S_Pi+0x88>)
   d412e:	9300      	str	r3, [sp, #0]
   d4130:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   d4134:	f7ff ffcc 	bl	d40d0 <_ZN5Print6printfEPKcz>
  Serial.printf("Fix: %i, Quality: %i", (int)GPS.fix, (int)GPS.fixquality);
   d4138:	f002 fb00 	bl	d673c <_Z16_fetch_usbserialv>
   d413c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   d4140:	f894 207f 	ldrb.w	r2, [r4, #127]	; 0x7f
   d4144:	490c      	ldr	r1, [pc, #48]	; (d4178 <_Z6getGPSPfS_S_Pi+0x8c>)
   d4146:	f7ff ffc3 	bl	d40d0 <_ZN5Print6printfEPKcz>
  if (GPS.fix)
   d414a:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
   d414e:	b153      	cbz	r3, d4166 <_Z6getGPSPfS_S_Pi+0x7a>
  {
    *latitude = GPS.latitudeDegrees;
   d4150:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4152:	602b      	str	r3, [r5, #0]
    *longitude = GPS.longitudeDegrees;
   d4154:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d4156:	f8c9 3000 	str.w	r3, [r9]
    *altitude = GPS.altitude;
   d415a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d415c:	f8c8 3000 	str.w	r3, [r8]
    *satellites = (int)GPS.satellites;
   d4160:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   d4164:	603b      	str	r3, [r7, #0]
    // Serial.printf("Lat: %0.6f, Lon: %0.6f, Alt: %0.6f\n",*latitude, *longitude, *altitude);
    // Serial.printf("Speed (m/s): %0.2f\n",GPS.speed/1.944);
    // Serial.printf("Angle: %0.2f\n",GPS.angle);
    // Serial.printf("Satellites: %i\n",*satellites);
  }
}
   d4166:	b003      	add	sp, #12
   d4168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d416c:	2003d7f8 	.word	0x2003d7f8
   d4170:	000d8320 	.word	0x000d8320
   d4174:	000d833b 	.word	0x000d833b
   d4178:	000d8352 	.word	0x000d8352

000d417c <_Z11sendGPSDatav>:

void sendGPSData()
{
   d417c:	b500      	push	{lr}
  char buffer[60];
  // sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
  sprintf(buffer, "AT+SEND=%i,60,%f,%f,%i\r\n", sendID, lat, lon, probeNumber);
   d417e:	4b1a      	ldr	r3, [pc, #104]	; (d41e8 <_Z11sendGPSDatav+0x6c>)
{
   d4180:	b09b      	sub	sp, #108	; 0x6c
  sprintf(buffer, "AT+SEND=%i,60,%f,%f,%i\r\n", sendID, lat, lon, probeNumber);
   d4182:	681b      	ldr	r3, [r3, #0]
   d4184:	9304      	str	r3, [sp, #16]
   d4186:	4b19      	ldr	r3, [pc, #100]	; (d41ec <_Z11sendGPSDatav+0x70>)
   d4188:	6818      	ldr	r0, [r3, #0]
   d418a:	f003 fd31 	bl	d7bf0 <__aeabi_f2d>
   d418e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4192:	4b17      	ldr	r3, [pc, #92]	; (d41f0 <_Z11sendGPSDatav+0x74>)
   d4194:	6818      	ldr	r0, [r3, #0]
   d4196:	f003 fd2b 	bl	d7bf0 <__aeabi_f2d>
   d419a:	e9cd 0100 	strd	r0, r1, [sp]
   d419e:	4b15      	ldr	r3, [pc, #84]	; (d41f4 <_Z11sendGPSDatav+0x78>)
   d41a0:	4915      	ldr	r1, [pc, #84]	; (d41f8 <_Z11sendGPSDatav+0x7c>)
   d41a2:	681a      	ldr	r2, [r3, #0]
   d41a4:	a80b      	add	r0, sp, #44	; 0x2c
   d41a6:	f001 ffa9 	bl	d60fc <sprintf>
  Serial1.printf("%s", buffer);
   d41aa:	f002 fa3b 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d41ae:	aa0b      	add	r2, sp, #44	; 0x2c
   d41b0:	4912      	ldr	r1, [pc, #72]	; (d41fc <_Z11sendGPSDatav+0x80>)
   d41b2:	f7ff ff8d 	bl	d40d0 <_ZN5Print6printfEPKcz>
  Serial1.setTimeout(20000);
   d41b6:	f002 fa35 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d41ba:	f644 6120 	movw	r1, #20000	; 0x4e20
   d41be:	f002 ff02 	bl	d6fc6 <_ZN6Stream10setTimeoutEm>
  String reply = Serial1.readStringUntil('\n');
   d41c2:	f002 fa2f 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d41c6:	220a      	movs	r2, #10
   d41c8:	4601      	mov	r1, r0
   d41ca:	a807      	add	r0, sp, #28
   d41cc:	f002 fefe 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
  Serial.printf("Send reply: %s\n", reply.c_str());
   d41d0:	f002 fab4 	bl	d673c <_Z16_fetch_usbserialv>
   d41d4:	9a07      	ldr	r2, [sp, #28]
   d41d6:	490a      	ldr	r1, [pc, #40]	; (d4200 <_Z11sendGPSDatav+0x84>)
   d41d8:	f7ff ff7a 	bl	d40d0 <_ZN5Print6printfEPKcz>
  String reply = Serial1.readStringUntil('\n');
   d41dc:	a807      	add	r0, sp, #28
   d41de:	f002 ffa9 	bl	d7134 <_ZN6StringD1Ev>
}
   d41e2:	b01b      	add	sp, #108	; 0x6c
   d41e4:	f85d fb04 	ldr.w	pc, [sp], #4
   d41e8:	2003d5c0 	.word	0x2003d5c0
   d41ec:	2003e3fc 	.word	0x2003e3fc
   d41f0:	2003e3f8 	.word	0x2003e3f8
   d41f4:	2003d5c4 	.word	0x2003d5c4
   d41f8:	000d8367 	.word	0x000d8367
   d41fc:	000d852b 	.word	0x000d852b
   d4200:	000d8380 	.word	0x000d8380

000d4204 <_Z7i2cScanv>:

void i2cScan()
{
   d4204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  byte status;
  byte address;
  int nDevices;
  unsigned long delayTime = 2000;
  Serial.printf("Starting Scan: \n-------------- \n");
   d4208:	f002 fa98 	bl	d673c <_Z16_fetch_usbserialv>
   d420c:	491d      	ldr	r1, [pc, #116]	; (d4284 <_Z7i2cScanv+0x80>)
      nDevices++;
      gpsOn = true;
    }
    else if (status == 4)
    {
      Serial.printf("Unknown error at address 0x%02x \n", address);
   d420e:	4e1e      	ldr	r6, [pc, #120]	; (d4288 <_Z7i2cScanv+0x84>)
      Serial.printf("I2C device found at address 0x%02x \n", address);
   d4210:	4f1e      	ldr	r7, [pc, #120]	; (d428c <_Z7i2cScanv+0x88>)
      gpsOn = true;
   d4212:	f8df 8080 	ldr.w	r8, [pc, #128]	; d4294 <_Z7i2cScanv+0x90>
  Serial.printf("Starting Scan: \n-------------- \n");
   d4216:	f7ff ff5b 	bl	d40d0 <_ZN5Print6printfEPKcz>
   d421a:	2401      	movs	r4, #1
  nDevices = 0;
   d421c:	2500      	movs	r5, #0
    Wire.beginTransmission(address);
   d421e:	f003 f949 	bl	d74b4 <_Z19__fetch_global_Wirev>
   d4222:	b2e1      	uxtb	r1, r4
   d4224:	f002 f982 	bl	d652c <_ZN7TwoWire17beginTransmissionEh>
    status = Wire.endTransmission();
   d4228:	f003 f944 	bl	d74b4 <_Z19__fetch_global_Wirev>
   d422c:	f002 f986 	bl	d653c <_ZN7TwoWire15endTransmissionEv>
    if (status == 0)
   d4230:	b9f8      	cbnz	r0, d4272 <_Z7i2cScanv+0x6e>
      Serial.printf("I2C device found at address 0x%02x \n", address);
   d4232:	f002 fa83 	bl	d673c <_Z16_fetch_usbserialv>
   d4236:	4622      	mov	r2, r4
   d4238:	4639      	mov	r1, r7
   d423a:	f7ff ff49 	bl	d40d0 <_ZN5Print6printfEPKcz>
      gpsOn = true;
   d423e:	2301      	movs	r3, #1
      nDevices++;
   d4240:	3501      	adds	r5, #1
      gpsOn = true;
   d4242:	f888 3000 	strb.w	r3, [r8]
  for (address = 1; address < 127; address++)
   d4246:	3401      	adds	r4, #1
   d4248:	2c7f      	cmp	r4, #127	; 0x7f
   d424a:	d1e8      	bne.n	d421e <_Z7i2cScanv+0x1a>
    }
  }
  if (nDevices == 0)
   d424c:	b935      	cbnz	r5, d425c <_Z7i2cScanv+0x58>
  {
    Serial.printf("No I2C devices found\n");
   d424e:	f002 fa75 	bl	d673c <_Z16_fetch_usbserialv>
   d4252:	490f      	ldr	r1, [pc, #60]	; (d4290 <_Z7i2cScanv+0x8c>)
   d4254:	f7ff ff3c 	bl	d40d0 <_ZN5Print6printfEPKcz>
    gpsOn = false;
   d4258:	4b0e      	ldr	r3, [pc, #56]	; (d4294 <_Z7i2cScanv+0x90>)
   d425a:	701d      	strb	r5, [r3, #0]
  }
  Serial.printf("-------------- \nScan Complete!\n");
   d425c:	f002 fa6e 	bl	d673c <_Z16_fetch_usbserialv>
   d4260:	490d      	ldr	r1, [pc, #52]	; (d4298 <_Z7i2cScanv+0x94>)
   d4262:	f7ff ff35 	bl	d40d0 <_ZN5Print6printfEPKcz>
  delay(delayTime);
}
   d4266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  delay(delayTime);
   d426a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d426e:	f002 be7f 	b.w	d6f70 <delay>
    else if (status == 4)
   d4272:	2804      	cmp	r0, #4
   d4274:	d1e7      	bne.n	d4246 <_Z7i2cScanv+0x42>
      Serial.printf("Unknown error at address 0x%02x \n", address);
   d4276:	f002 fa61 	bl	d673c <_Z16_fetch_usbserialv>
   d427a:	4622      	mov	r2, r4
   d427c:	4631      	mov	r1, r6
   d427e:	f7ff ff27 	bl	d40d0 <_ZN5Print6printfEPKcz>
   d4282:	e7e0      	b.n	d4246 <_Z7i2cScanv+0x42>
   d4284:	000d8390 	.word	0x000d8390
   d4288:	000d83d6 	.word	0x000d83d6
   d428c:	000d83b1 	.word	0x000d83b1
   d4290:	000d83f8 	.word	0x000d83f8
   d4294:	2003e3f0 	.word	0x2003e3f0
   d4298:	000d840e 	.word	0x000d840e
   d429c:	00000000 	.word	0x00000000

000d42a0 <_Z11takeSamplesv>:

void takeSamples()
{
   d42a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42a2:	ed2d 8b02 	vpush	{d8}
   d42a6:	4d5e      	ldr	r5, [pc, #376]	; (d4420 <_Z11takeSamplesv+0x180>)
   d42a8:	b08b      	sub	sp, #44	; 0x2c
   d42aa:	462e      	mov	r6, r5
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
   d42ac:	2400      	movs	r4, #0
  {
    samples[i] = analogRead(THERMISTORPIN);
   d42ae:	2013      	movs	r0, #19
   d42b0:	f003 f98c 	bl	d75cc <analogRead>
   d42b4:	ee07 0a90 	vmov	s15, r0
   d42b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (i = 0; i < NUMSAMPLES; i++)
   d42bc:	3401      	adds	r4, #1
    samples[i] = analogRead(THERMISTORPIN);
   d42be:	ece6 7a01 	vstmia	r6!, {s15}
    delay(10);
   d42c2:	200a      	movs	r0, #10
  for (i = 0; i < NUMSAMPLES; i++)
   d42c4:	b2e4      	uxtb	r4, r4
    delay(10);
   d42c6:	f002 fe53 	bl	d6f70 <delay>
  for (i = 0; i < NUMSAMPLES; i++)
   d42ca:	2c64      	cmp	r4, #100	; 0x64
   d42cc:	d1ef      	bne.n	d42ae <_Z11takeSamplesv+0xe>
   d42ce:	eddf 7a55 	vldr	s15, [pc, #340]	; d4424 <_Z11takeSamplesv+0x184>
  }

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
   d42d2:	2300      	movs	r3, #0
   d42d4:	3301      	adds	r3, #1
  {
    average += samples[i];
   d42d6:	ecb5 7a01 	vldmia	r5!, {s14}
  for (i = 0; i < NUMSAMPLES; i++)
   d42da:	b2db      	uxtb	r3, r3
   d42dc:	2b64      	cmp	r3, #100	; 0x64
    average += samples[i];
   d42de:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (i = 0; i < NUMSAMPLES; i++)
   d42e2:	d1f7      	bne.n	d42d4 <_Z11takeSamplesv+0x34>
  }
  average /= NUMSAMPLES;
   d42e4:	eddf 6a50 	vldr	s13, [pc, #320]	; d4428 <_Z11takeSamplesv+0x188>
   d42e8:	4b50      	ldr	r3, [pc, #320]	; (d442c <_Z11takeSamplesv+0x18c>)

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d42ea:	4d51      	ldr	r5, [pc, #324]	; (d4430 <_Z11takeSamplesv+0x190>)
  tempC /= BCOEFFICIENT;                         // 1/B * ln(R/Ro)
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
  tempC = 1.0 / tempC;                           // Invert
  tempC -= 273.15;                               // convert absolute temp to C

  tempF = tempC * 1.8 + 32;
   d42ec:	4e51      	ldr	r6, [pc, #324]	; (d4434 <_Z11takeSamplesv+0x194>)
  average /= NUMSAMPLES;
   d42ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  averageResistance = 4095 / average - 1;
   d42f2:	eddf 6a51 	vldr	s13, [pc, #324]	; d4438 <_Z11takeSamplesv+0x198>
  average /= NUMSAMPLES;
   d42f6:	ed83 7a00 	vstr	s14, [r3]
  averageResistance = 4095 / average - 1;
   d42fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
  averageResistance = SERIESRESISTOR / averageResistance;
   d42fe:	4b4f      	ldr	r3, [pc, #316]	; (d443c <_Z11takeSamplesv+0x19c>)
  averageResistance = 4095 / average - 1;
   d4300:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  averageResistance = SERIESRESISTOR / averageResistance;
   d4304:	ed9f 7a4e 	vldr	s14, [pc, #312]	; d4440 <_Z11takeSamplesv+0x1a0>
  averageResistance = 4095 / average - 1;
   d4308:	ee77 7ac8 	vsub.f32	s15, s15, s16
  averageResistance = SERIESRESISTOR / averageResistance;
   d430c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d4310:	ee86 0a87 	vdiv.f32	s0, s13, s14
  averageResistance = SERIESRESISTOR / averageResistance;
   d4314:	edc3 6a00 	vstr	s13, [r3]
  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d4318:	ed85 0a00 	vstr	s0, [r5]
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
   d431c:	f003 f976 	bl	d760c <logf>
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
   d4320:	eddf 7a48 	vldr	s15, [pc, #288]	; d4444 <_Z11takeSamplesv+0x1a4>
   d4324:	eec0 7a27 	vdiv.f32	s15, s0, s15
   d4328:	ee17 0a90 	vmov	r0, s15
   d432c:	f003 fc60 	bl	d7bf0 <__aeabi_f2d>
   d4330:	a333      	add	r3, pc, #204	; (adr r3, d4400 <_Z11takeSamplesv+0x160>)
   d4332:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4336:	f003 fafd 	bl	d7934 <__adddf3>
   d433a:	f003 fec3 	bl	d80c4 <__aeabi_d2f>
  tempC -= 273.15;                               // convert absolute temp to C
   d433e:	ee07 0a90 	vmov	s15, r0
   d4342:	eec8 7a27 	vdiv.f32	s15, s16, s15
   d4346:	ee17 0a90 	vmov	r0, s15
   d434a:	f003 fc51 	bl	d7bf0 <__aeabi_f2d>
   d434e:	a32e      	add	r3, pc, #184	; (adr r3, d4408 <_Z11takeSamplesv+0x168>)
   d4350:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4354:	f003 faec 	bl	d7930 <__aeabi_dsub>
   d4358:	f003 feb4 	bl	d80c4 <__aeabi_d2f>
   d435c:	6028      	str	r0, [r5, #0]
  tempF = tempC * 1.8 + 32;
   d435e:	f003 fc47 	bl	d7bf0 <__aeabi_f2d>
   d4362:	a32b      	add	r3, pc, #172	; (adr r3, d4410 <_Z11takeSamplesv+0x170>)
   d4364:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4368:	f003 fc9a 	bl	d7ca0 <__aeabi_dmul>
   d436c:	4b36      	ldr	r3, [pc, #216]	; (d4448 <_Z11takeSamplesv+0x1a8>)
   d436e:	2200      	movs	r2, #0
   d4370:	f003 fae0 	bl	d7934 <__adddf3>
   d4374:	f003 fea6 	bl	d80c4 <__aeabi_d2f>
   d4378:	6030      	str	r0, [r6, #0]

  // tempF = random(0,23000)/100.0;

  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   d437a:	f002 f9df 	bl	d673c <_Z16_fetch_usbserialv>
   d437e:	4604      	mov	r4, r0
   d4380:	6828      	ldr	r0, [r5, #0]
   d4382:	f003 fc35 	bl	d7bf0 <__aeabi_f2d>
   d4386:	4602      	mov	r2, r0
   d4388:	460b      	mov	r3, r1
   d438a:	6830      	ldr	r0, [r6, #0]
   d438c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d4390:	f003 fc2e 	bl	d7bf0 <__aeabi_f2d>
   d4394:	460f      	mov	r7, r1
   d4396:	492d      	ldr	r1, [pc, #180]	; (d444c <_Z11takeSamplesv+0x1ac>)
   d4398:	4606      	mov	r6, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d439a:	a806      	add	r0, sp, #24
   d439c:	680d      	ldr	r5, [r1, #0]
   d439e:	f001 fdd5 	bl	d5f4c <spark_deviceID>
   d43a2:	9906      	ldr	r1, [sp, #24]
   d43a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d43a8:	e9cd 5102 	strd	r5, r1, [sp, #8]
   d43ac:	e9cd 6700 	strd	r6, r7, [sp]
   d43b0:	4927      	ldr	r1, [pc, #156]	; (d4450 <_Z11takeSamplesv+0x1b0>)

  batteryVoltage = analogRead(BATT) * 0.0011224;
   d43b2:	4d28      	ldr	r5, [pc, #160]	; (d4454 <_Z11takeSamplesv+0x1b4>)
  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   d43b4:	4620      	mov	r0, r4
   d43b6:	f7ff fe8b 	bl	d40d0 <_ZN5Print6printfEPKcz>
   d43ba:	a806      	add	r0, sp, #24
   d43bc:	f002 feba 	bl	d7134 <_ZN6StringD1Ev>
  batteryVoltage = analogRead(BATT) * 0.0011224;
   d43c0:	2021      	movs	r0, #33	; 0x21
   d43c2:	f003 f903 	bl	d75cc <analogRead>
   d43c6:	f003 fc01 	bl	d7bcc <__aeabi_i2d>
   d43ca:	a313      	add	r3, pc, #76	; (adr r3, d4418 <_Z11takeSamplesv+0x178>)
   d43cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43d0:	f003 fc66 	bl	d7ca0 <__aeabi_dmul>
   d43d4:	f003 fe76 	bl	d80c4 <__aeabi_d2f>
   d43d8:	6028      	str	r0, [r5, #0]
  Serial.printf("voltage: %f\n", batteryVoltage);
   d43da:	f002 f9af 	bl	d673c <_Z16_fetch_usbserialv>
   d43de:	4604      	mov	r4, r0
   d43e0:	6828      	ldr	r0, [r5, #0]
   d43e2:	f003 fc05 	bl	d7bf0 <__aeabi_f2d>
   d43e6:	4602      	mov	r2, r0
   d43e8:	460b      	mov	r3, r1
   d43ea:	4620      	mov	r0, r4
   d43ec:	491a      	ldr	r1, [pc, #104]	; (d4458 <_Z11takeSamplesv+0x1b8>)
   d43ee:	f7ff fe6f 	bl	d40d0 <_ZN5Print6printfEPKcz>

  // delay(1000);
}
   d43f2:	b00b      	add	sp, #44	; 0x2c
   d43f4:	ecbd 8b02 	vpop	{d8}
   d43f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43fa:	bf00      	nop
   d43fc:	f3af 8000 	nop.w
   d4400:	dcb5db83 	.word	0xdcb5db83
   d4404:	3f6b79e1 	.word	0x3f6b79e1
   d4408:	66666666 	.word	0x66666666
   d440c:	40711266 	.word	0x40711266
   d4410:	cccccccd 	.word	0xcccccccd
   d4414:	3ffccccc 	.word	0x3ffccccc
   d4418:	d2c10294 	.word	0xd2c10294
   d441c:	3f5263af 	.word	0x3f5263af
   d4420:	2003e408 	.word	0x2003e408
   d4424:	00000000 	.word	0x00000000
   d4428:	42c80000 	.word	0x42c80000
   d442c:	2003e390 	.word	0x2003e390
   d4430:	2003e5a0 	.word	0x2003e5a0
   d4434:	2003e5a4 	.word	0x2003e5a4
   d4438:	457ff000 	.word	0x457ff000
   d443c:	2003e394 	.word	0x2003e394
   d4440:	461c4000 	.word	0x461c4000
   d4444:	4576e000 	.word	0x4576e000
   d4448:	40400000 	.word	0x40400000
   d444c:	2003e3ec 	.word	0x2003e3ec
   d4450:	000d842e 	.word	0x000d842e
   d4454:	2003e39c 	.word	0x2003e39c
   d4458:	000d845c 	.word	0x000d845c

000d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d445c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d445e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4460:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4462:	b17c      	cbz	r4, d4484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4464:	6863      	ldr	r3, [r4, #4]
   d4466:	3b01      	subs	r3, #1
   d4468:	6063      	str	r3, [r4, #4]
   d446a:	b95b      	cbnz	r3, d4484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d446c:	6823      	ldr	r3, [r4, #0]
   d446e:	4620      	mov	r0, r4
   d4470:	689b      	ldr	r3, [r3, #8]
   d4472:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4474:	68a3      	ldr	r3, [r4, #8]
   d4476:	3b01      	subs	r3, #1
   d4478:	60a3      	str	r3, [r4, #8]
   d447a:	b91b      	cbnz	r3, d4484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d447c:	6823      	ldr	r3, [r4, #0]
   d447e:	4620      	mov	r0, r4
   d4480:	68db      	ldr	r3, [r3, #12]
   d4482:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4484:	4628      	mov	r0, r5
   d4486:	bd38      	pop	{r3, r4, r5, pc}

000d4488 <_Z8sendDatav>:

void sendData()
{
   d4488:	b500      	push	{lr}
   d448a:	b089      	sub	sp, #36	; 0x24
  String reply;
   d448c:	4922      	ldr	r1, [pc, #136]	; (d4518 <_Z8sendDatav+0x90>)
   d448e:	4668      	mov	r0, sp
   d4490:	f002 fe9b 	bl	d71ca <_ZN6StringC1EPKc>
  Serial1.println(buffer);
   d4494:	f002 f8c6 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4498:	4920      	ldr	r1, [pc, #128]	; (d451c <_Z8sendDatav+0x94>)
   d449a:	f002 fdea 	bl	d7072 <_ZN5Print7printlnEPKc>
  Serial1.flush();
   d449e:	f002 f8c1 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d44a2:	6803      	ldr	r3, [r0, #0]
   d44a4:	69db      	ldr	r3, [r3, #28]
   d44a6:	4798      	blx	r3
  delay(2300);
   d44a8:	f640 00fc 	movw	r0, #2300	; 0x8fc
   d44ac:	f002 fd60 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d44b0:	f002 f8b8 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d44b4:	6803      	ldr	r3, [r0, #0]
   d44b6:	691b      	ldr	r3, [r3, #16]
   d44b8:	4798      	blx	r3
   d44ba:	2800      	cmp	r0, #0
   d44bc:	dd26      	ble.n	d450c <_Z8sendDatav+0x84>
  {
    reply = Serial1.readStringUntil('\n');
   d44be:	f002 f8b1 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d44c2:	220a      	movs	r2, #10
   d44c4:	4601      	mov	r1, r0
   d44c6:	a804      	add	r0, sp, #16
   d44c8:	f002 fd80 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d44cc:	a904      	add	r1, sp, #16
   d44ce:	4668      	mov	r0, sp
   d44d0:	f002 feac 	bl	d722c <_ZN6StringaSEOS_>
   d44d4:	a804      	add	r0, sp, #16
   d44d6:	f002 fe2d 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint == true)
   d44da:	4b11      	ldr	r3, [pc, #68]	; (d4520 <_Z8sendDatav+0x98>)
   d44dc:	781b      	ldrb	r3, [r3, #0]
   d44de:	b153      	cbz	r3, d44f6 <_Z8sendDatav+0x6e>
    {
      Serial.printf("send reply: %s\n", reply.c_str()); //+OK
   d44e0:	f002 f92c 	bl	d673c <_Z16_fetch_usbserialv>
   d44e4:	9a00      	ldr	r2, [sp, #0]
   d44e6:	490f      	ldr	r1, [pc, #60]	; (d4524 <_Z8sendDatav+0x9c>)
   d44e8:	f7ff fdf2 	bl	d40d0 <_ZN5Print6printfEPKcz>
      Serial.flush();
   d44ec:	f002 f926 	bl	d673c <_Z16_fetch_usbserialv>
   d44f0:	6803      	ldr	r3, [r0, #0]
   d44f2:	69db      	ldr	r3, [r3, #28]
   d44f4:	4798      	blx	r3
    }
    if (particlePublish)
   d44f6:	4b0c      	ldr	r3, [pc, #48]	; (d4528 <_Z8sendDatav+0xa0>)
   d44f8:	781b      	ldrb	r3, [r3, #0]
   d44fa:	b13b      	cbz	r3, d450c <_Z8sendDatav+0x84>
    {
      Particle.publish("sendData()", reply);
   d44fc:	a804      	add	r0, sp, #16
   d44fe:	9a00      	ldr	r2, [sp, #0]
   d4500:	490a      	ldr	r1, [pc, #40]	; (d452c <_Z8sendDatav+0xa4>)
   d4502:	f7ff fdd7 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4506:	a805      	add	r0, sp, #20
   d4508:	f7ff ffa8 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d450c:	4668      	mov	r0, sp
   d450e:	f002 fe11 	bl	d7134 <_ZN6StringD1Ev>
    }
  }
}
   d4512:	b009      	add	sp, #36	; 0x24
   d4514:	f85d fb04 	ldr.w	pc, [sp], #4
   d4518:	000d8653 	.word	0x000d8653
   d451c:	2003e3a0 	.word	0x2003e3a0
   d4520:	2003e59c 	.word	0x2003e59c
   d4524:	000d84e3 	.word	0x000d84e3
   d4528:	2003e400 	.word	0x2003e400
   d452c:	000d84f3 	.word	0x000d84f3

000d4530 <_Z12createBufferiiff>:
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d4530:	b510      	push	{r4, lr}
   d4532:	b08a      	sub	sp, #40	; 0x28
   d4534:	ee10 4a10 	vmov	r4, s0
   d4538:	9106      	str	r1, [sp, #24]
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d453a:	4915      	ldr	r1, [pc, #84]	; (d4590 <_Z12createBufferiiff+0x60>)
{
   d453c:	9007      	str	r0, [sp, #28]
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d453e:	6809      	ldr	r1, [r1, #0]
   d4540:	9104      	str	r1, [sp, #16]
{
   d4542:	ee10 0a90 	vmov	r0, s1
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d4546:	f003 fb53 	bl	d7bf0 <__aeabi_f2d>
   d454a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d454e:	4620      	mov	r0, r4
   d4550:	f003 fb4e 	bl	d7bf0 <__aeabi_f2d>
   d4554:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   d4558:	e9cd 0100 	strd	r0, r1, [sp]
   d455c:	490d      	ldr	r1, [pc, #52]	; (d4594 <_Z12createBufferiiff+0x64>)
   d455e:	480e      	ldr	r0, [pc, #56]	; (d4598 <_Z12createBufferiiff+0x68>)
   d4560:	f001 fdcc 	bl	d60fc <sprintf>
  if (serialPrint)
   d4564:	4b0d      	ldr	r3, [pc, #52]	; (d459c <_Z12createBufferiiff+0x6c>)
   d4566:	781b      	ldrb	r3, [r3, #0]
   d4568:	b12b      	cbz	r3, d4576 <_Z12createBufferiiff+0x46>
  {
    Serial.printf("createBuffer: %s", buffer);
   d456a:	f002 f8e7 	bl	d673c <_Z16_fetch_usbserialv>
   d456e:	4a0a      	ldr	r2, [pc, #40]	; (d4598 <_Z12createBufferiiff+0x68>)
   d4570:	490b      	ldr	r1, [pc, #44]	; (d45a0 <_Z12createBufferiiff+0x70>)
   d4572:	f7ff fdad 	bl	d40d0 <_ZN5Print6printfEPKcz>
  }
  if (particlePublish)
   d4576:	4b0b      	ldr	r3, [pc, #44]	; (d45a4 <_Z12createBufferiiff+0x74>)
   d4578:	781b      	ldrb	r3, [r3, #0]
   d457a:	b13b      	cbz	r3, d458c <_Z12createBufferiiff+0x5c>
  {
    Particle.publish("createBuffer()", buffer);
   d457c:	a808      	add	r0, sp, #32
   d457e:	4a06      	ldr	r2, [pc, #24]	; (d4598 <_Z12createBufferiiff+0x68>)
   d4580:	4909      	ldr	r1, [pc, #36]	; (d45a8 <_Z12createBufferiiff+0x78>)
   d4582:	f7ff fd97 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4586:	a809      	add	r0, sp, #36	; 0x24
   d4588:	f7ff ff68 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d458c:	b00a      	add	sp, #40	; 0x28
   d458e:	bd10      	pop	{r4, pc}
   d4590:	2003d5c0 	.word	0x2003d5c0
   d4594:	000d84fe 	.word	0x000d84fe
   d4598:	2003e3a0 	.word	0x2003e3a0
   d459c:	2003e59c 	.word	0x2003e59c
   d45a0:	000d851d 	.word	0x000d851d
   d45a4:	2003e400 	.word	0x2003e400
   d45a8:	000d852e 	.word	0x000d852e

000d45ac <_Z6atTestv>:

void atTest() // 1
{             // test if module responds to commands
   d45ac:	b500      	push	{lr}
   d45ae:	b089      	sub	sp, #36	; 0x24
  String reply;
   d45b0:	491b      	ldr	r1, [pc, #108]	; (d4620 <_Z6atTestv+0x74>)
   d45b2:	4668      	mov	r0, sp
   d45b4:	f002 fe09 	bl	d71ca <_ZN6StringC1EPKc>
  Serial1.printf("AT\r\n");
   d45b8:	f002 f834 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d45bc:	4919      	ldr	r1, [pc, #100]	; (d4624 <_Z6atTestv+0x78>)
   d45be:	f7ff fd87 	bl	d40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   d45c2:	20c8      	movs	r0, #200	; 0xc8
   d45c4:	f002 fcd4 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d45c8:	f002 f82c 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d45cc:	6803      	ldr	r3, [r0, #0]
   d45ce:	691b      	ldr	r3, [r3, #16]
   d45d0:	4798      	blx	r3
   d45d2:	2800      	cmp	r0, #0
   d45d4:	dd1e      	ble.n	d4614 <_Z6atTestv+0x68>
  {
    reply = Serial1.readStringUntil('\n');
   d45d6:	f002 f825 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d45da:	220a      	movs	r2, #10
   d45dc:	4601      	mov	r1, r0
   d45de:	a804      	add	r0, sp, #16
   d45e0:	f002 fcf4 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d45e4:	a904      	add	r1, sp, #16
   d45e6:	4668      	mov	r0, sp
   d45e8:	f002 fe20 	bl	d722c <_ZN6StringaSEOS_>
   d45ec:	a804      	add	r0, sp, #16
   d45ee:	f002 fda1 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint == true)
   d45f2:	4b0d      	ldr	r3, [pc, #52]	; (d4628 <_Z6atTestv+0x7c>)
   d45f4:	781b      	ldrb	r3, [r3, #0]
   d45f6:	b12b      	cbz	r3, d4604 <_Z6atTestv+0x58>
    {
      Serial.printf("atTest reply: %s\n", reply.c_str()); //+OK
   d45f8:	f002 f8a0 	bl	d673c <_Z16_fetch_usbserialv>
   d45fc:	9a00      	ldr	r2, [sp, #0]
   d45fe:	490b      	ldr	r1, [pc, #44]	; (d462c <_Z6atTestv+0x80>)
   d4600:	f7ff fd66 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish == true)
      ;
    {
      Particle.publish("atTest()", reply);
   d4604:	a804      	add	r0, sp, #16
   d4606:	9a00      	ldr	r2, [sp, #0]
   d4608:	4909      	ldr	r1, [pc, #36]	; (d4630 <_Z6atTestv+0x84>)
   d460a:	f7ff fd53 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d460e:	a805      	add	r0, sp, #20
   d4610:	f7ff ff24 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4614:	4668      	mov	r0, sp
   d4616:	f002 fd8d 	bl	d7134 <_ZN6StringD1Ev>
    }
  }
}
   d461a:	b009      	add	sp, #36	; 0x24
   d461c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4620:	000d8653 	.word	0x000d8653
   d4624:	000d853d 	.word	0x000d853d
   d4628:	2003e59c 	.word	0x2003e59c
   d462c:	000d8542 	.word	0x000d8542
   d4630:	000d8554 	.word	0x000d8554

000d4634 <_Z7setModei>:
    }
  }
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
   d4634:	b510      	push	{r4, lr}
   d4636:	b08c      	sub	sp, #48	; 0x30
  String reply;
   d4638:	4951      	ldr	r1, [pc, #324]	; (d4780 <_Z7setModei+0x14c>)
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
   d463a:	4604      	mov	r4, r0
  String reply;
   d463c:	4668      	mov	r0, sp
   d463e:	f002 fdc4 	bl	d71ca <_ZN6StringC1EPKc>
  String reply2;
   d4642:	494f      	ldr	r1, [pc, #316]	; (d4780 <_Z7setModei+0x14c>)
   d4644:	a804      	add	r0, sp, #16
   d4646:	f002 fdc0 	bl	d71ca <_ZN6StringC1EPKc>
  if (modeParameter == 1)
   d464a:	2c01      	cmp	r4, #1
   d464c:	f040 808e 	bne.w	d476c <_Z7setModei+0x138>
  {
    Serial1.printf("AT+MODE=1\r\n");
   d4650:	f001 ffe8 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4654:	494b      	ldr	r1, [pc, #300]	; (d4784 <_Z7setModei+0x150>)
   d4656:	f7ff fd3b 	bl	d40d0 <_ZN5Print6printfEPKcz>
    Serial.printf("AT+MODE=1\r\n");
   d465a:	f002 f86f 	bl	d673c <_Z16_fetch_usbserialv>
   d465e:	4949      	ldr	r1, [pc, #292]	; (d4784 <_Z7setModei+0x150>)
    Serial1.flush();
  }
  else
  {
    Serial1.printf("AT+MODE=0\r\n");
    Serial.printf("AT+MODE=0\r\n");
   d4660:	f7ff fd36 	bl	d40d0 <_ZN5Print6printfEPKcz>
    Serial.flush();
   d4664:	f002 f86a 	bl	d673c <_Z16_fetch_usbserialv>
   d4668:	6803      	ldr	r3, [r0, #0]
   d466a:	69db      	ldr	r3, [r3, #28]
   d466c:	4798      	blx	r3
    Serial1.flush();
   d466e:	f001 ffd9 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4672:	6803      	ldr	r3, [r0, #0]
   d4674:	69db      	ldr	r3, [r3, #28]
   d4676:	4798      	blx	r3
  }
  delay(200);
   d4678:	20c8      	movs	r0, #200	; 0xc8
   d467a:	f002 fc79 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d467e:	f001 ffd1 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4682:	6803      	ldr	r3, [r0, #0]
   d4684:	691b      	ldr	r3, [r3, #16]
   d4686:	4798      	blx	r3
   d4688:	2800      	cmp	r0, #0
   d468a:	dd30      	ble.n	d46ee <_Z7setModei+0xba>
  {
    reply = Serial1.readStringUntil('\n');
   d468c:	f001 ffca 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4690:	220a      	movs	r2, #10
   d4692:	4601      	mov	r1, r0
   d4694:	a808      	add	r0, sp, #32
   d4696:	f002 fc99 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d469a:	a908      	add	r1, sp, #32
   d469c:	4668      	mov	r0, sp
   d469e:	f002 fdc5 	bl	d722c <_ZN6StringaSEOS_>
   d46a2:	a808      	add	r0, sp, #32
   d46a4:	f002 fd46 	bl	d7134 <_ZN6StringD1Ev>
    reply2 = Serial1.readStringUntil('\n');
   d46a8:	f001 ffbc 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d46ac:	220a      	movs	r2, #10
   d46ae:	4601      	mov	r1, r0
   d46b0:	a808      	add	r0, sp, #32
   d46b2:	f002 fc8b 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d46b6:	a908      	add	r1, sp, #32
   d46b8:	a804      	add	r0, sp, #16
   d46ba:	f002 fdb7 	bl	d722c <_ZN6StringaSEOS_>
   d46be:	a808      	add	r0, sp, #32
   d46c0:	f002 fd38 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d46c4:	4b30      	ldr	r3, [pc, #192]	; (d4788 <_Z7setModei+0x154>)
   d46c6:	781b      	ldrb	r3, [r3, #0]
   d46c8:	b133      	cbz	r3, d46d8 <_Z7setModei+0xa4>
    {
      Serial.printf("atMode reply: %s reply2: %s\n", reply.c_str(), reply2.c_str());
   d46ca:	f002 f837 	bl	d673c <_Z16_fetch_usbserialv>
   d46ce:	9b04      	ldr	r3, [sp, #16]
   d46d0:	9a00      	ldr	r2, [sp, #0]
   d46d2:	492e      	ldr	r1, [pc, #184]	; (d478c <_Z7setModei+0x158>)
   d46d4:	f7ff fcfc 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d46d8:	4b2d      	ldr	r3, [pc, #180]	; (d4790 <_Z7setModei+0x15c>)
   d46da:	781b      	ldrb	r3, [r3, #0]
   d46dc:	b13b      	cbz	r3, d46ee <_Z7setModei+0xba>
    {
      Particle.publish("atMode()", reply);
   d46de:	a808      	add	r0, sp, #32
   d46e0:	9a00      	ldr	r2, [sp, #0]
   d46e2:	492c      	ldr	r1, [pc, #176]	; (d4794 <_Z7setModei+0x160>)
   d46e4:	f7ff fce6 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d46e8:	a809      	add	r0, sp, #36	; 0x24
   d46ea:	f7ff feb7 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d46ee:	4b2a      	ldr	r3, [pc, #168]	; (d4798 <_Z7setModei+0x164>)
   d46f0:	781b      	ldrb	r3, [r3, #0]
   d46f2:	2b00      	cmp	r3, #0
   d46f4:	d032      	beq.n	d475c <_Z7setModei+0x128>
  {
    Serial1.printf("AT+MODE?\r\n"); // correct
   d46f6:	f001 ff95 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d46fa:	4928      	ldr	r1, [pc, #160]	; (d479c <_Z7setModei+0x168>)
   d46fc:	f7ff fce8 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d4700:	20c8      	movs	r0, #200	; 0xc8
   d4702:	f002 fc35 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d4706:	f001 ff8d 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d470a:	6803      	ldr	r3, [r0, #0]
   d470c:	691b      	ldr	r3, [r3, #16]
   d470e:	4798      	blx	r3
   d4710:	2800      	cmp	r0, #0
   d4712:	dd23      	ble.n	d475c <_Z7setModei+0x128>
    {
      Serial.printf("Awaiting Reply\n");
   d4714:	f002 f812 	bl	d673c <_Z16_fetch_usbserialv>
   d4718:	4921      	ldr	r1, [pc, #132]	; (d47a0 <_Z7setModei+0x16c>)
   d471a:	f7ff fcd9 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d471e:	f001 ff81 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4722:	220a      	movs	r2, #10
   d4724:	4601      	mov	r1, r0
   d4726:	a808      	add	r0, sp, #32
   d4728:	f002 fc50 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d472c:	a908      	add	r1, sp, #32
   d472e:	4668      	mov	r0, sp
   d4730:	f002 fd7c 	bl	d722c <_ZN6StringaSEOS_>
   d4734:	a808      	add	r0, sp, #32
   d4736:	f002 fcfd 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+MODE?: %s\n", reply.c_str());
   d473a:	f001 ffff 	bl	d673c <_Z16_fetch_usbserialv>
   d473e:	9a00      	ldr	r2, [sp, #0]
   d4740:	4918      	ldr	r1, [pc, #96]	; (d47a4 <_Z7setModei+0x170>)
   d4742:	f7ff fcc5 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4746:	4b12      	ldr	r3, [pc, #72]	; (d4790 <_Z7setModei+0x15c>)
   d4748:	781b      	ldrb	r3, [r3, #0]
   d474a:	b13b      	cbz	r3, d475c <_Z7setModei+0x128>
      {
        Particle.publish("AT+MODE?", reply);
   d474c:	a808      	add	r0, sp, #32
   d474e:	9a00      	ldr	r2, [sp, #0]
   d4750:	4915      	ldr	r1, [pc, #84]	; (d47a8 <_Z7setModei+0x174>)
   d4752:	f7ff fcaf 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4756:	a809      	add	r0, sp, #36	; 0x24
   d4758:	f7ff fe80 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply2;
   d475c:	a804      	add	r0, sp, #16
   d475e:	f002 fce9 	bl	d7134 <_ZN6StringD1Ev>
  String reply;
   d4762:	4668      	mov	r0, sp
   d4764:	f002 fce6 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d4768:	b00c      	add	sp, #48	; 0x30
   d476a:	bd10      	pop	{r4, pc}
    Serial1.printf("AT+MODE=0\r\n");
   d476c:	f001 ff5a 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4770:	490e      	ldr	r1, [pc, #56]	; (d47ac <_Z7setModei+0x178>)
   d4772:	f7ff fcad 	bl	d40d0 <_ZN5Print6printfEPKcz>
    Serial.printf("AT+MODE=0\r\n");
   d4776:	f001 ffe1 	bl	d673c <_Z16_fetch_usbserialv>
   d477a:	490c      	ldr	r1, [pc, #48]	; (d47ac <_Z7setModei+0x178>)
   d477c:	e770      	b.n	d4660 <_Z7setModei+0x2c>
   d477e:	bf00      	nop
   d4780:	000d8653 	.word	0x000d8653
   d4784:	000d84c5 	.word	0x000d84c5
   d4788:	2003e59c 	.word	0x2003e59c
   d478c:	000d855d 	.word	0x000d855d
   d4790:	2003e400 	.word	0x2003e400
   d4794:	000d857a 	.word	0x000d857a
   d4798:	2003e38c 	.word	0x2003e38c
   d479c:	000d849f 	.word	0x000d849f
   d47a0:	000d8583 	.word	0x000d8583
   d47a4:	000d8593 	.word	0x000d8593
   d47a8:	000d85a7 	.word	0x000d85a7
   d47ac:	000d8469 	.word	0x000d8469

000d47b0 <loop>:
{
   d47b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (gpsOn)
   d47b2:	4b22      	ldr	r3, [pc, #136]	; (d483c <loop+0x8c>)
   d47b4:	7818      	ldrb	r0, [r3, #0]
   d47b6:	b1a8      	cbz	r0, d47e4 <loop+0x34>
    if (millis() - lastGPS > 15000)
   d47b8:	4c21      	ldr	r4, [pc, #132]	; (d4840 <loop+0x90>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d47ba:	f001 fb47 	bl	d5e4c <HAL_Timer_Get_Milli_Seconds>
   d47be:	6823      	ldr	r3, [r4, #0]
   d47c0:	1ac0      	subs	r0, r0, r3
   d47c2:	f643 2398 	movw	r3, #15000	; 0x3a98
   d47c6:	4298      	cmp	r0, r3
   d47c8:	d90a      	bls.n	d47e0 <loop+0x30>
      getGPS(&lat, &lon, &alt, &sat);
   d47ca:	4b1e      	ldr	r3, [pc, #120]	; (d4844 <loop+0x94>)
   d47cc:	4a1e      	ldr	r2, [pc, #120]	; (d4848 <loop+0x98>)
   d47ce:	491f      	ldr	r1, [pc, #124]	; (d484c <loop+0x9c>)
   d47d0:	481f      	ldr	r0, [pc, #124]	; (d4850 <loop+0xa0>)
   d47d2:	f7ff fc8b 	bl	d40ec <_Z6getGPSPfS_S_Pi>
      sendGPSData();
   d47d6:	f7ff fcd1 	bl	d417c <_Z11sendGPSDatav>
   d47da:	f001 fb37 	bl	d5e4c <HAL_Timer_Get_Milli_Seconds>
      lastGPS = millis();
   d47de:	6020      	str	r0, [r4, #0]
}
   d47e0:	b004      	add	sp, #16
   d47e2:	bd10      	pop	{r4, pc}
    setMode(0);
   d47e4:	f7ff ff26 	bl	d4634 <_Z7setModei>
    delay(500);
   d47e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d47ec:	f002 fbc0 	bl	d6f70 <delay>
    takeSamples();
   d47f0:	f7ff fd56 	bl	d42a0 <_Z11takeSamplesv>
    createBuffer(sendID, bufferLength, tempF, batteryVoltage);
   d47f4:	4b17      	ldr	r3, [pc, #92]	; (d4854 <loop+0xa4>)
   d47f6:	edd3 0a00 	vldr	s1, [r3]
   d47fa:	4b17      	ldr	r3, [pc, #92]	; (d4858 <loop+0xa8>)
   d47fc:	ed93 0a00 	vldr	s0, [r3]
   d4800:	4b16      	ldr	r3, [pc, #88]	; (d485c <loop+0xac>)
   d4802:	6819      	ldr	r1, [r3, #0]
   d4804:	4b16      	ldr	r3, [pc, #88]	; (d4860 <loop+0xb0>)
   d4806:	6818      	ldr	r0, [r3, #0]
   d4808:	f7ff fe92 	bl	d4530 <_Z12createBufferiiff>
    sendData();
   d480c:	f7ff fe3c 	bl	d4488 <_Z8sendDatav>
    delay(1000);
   d4810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4814:	f002 fbac 	bl	d6f70 <delay>
    setMode(1);
   d4818:	2001      	movs	r0, #1
   d481a:	f7ff ff0b 	bl	d4634 <_Z7setModei>
    delay(500);
   d481e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4822:	f002 fba5 	bl	d6f70 <delay>
    System.sleep(config);
   d4826:	a801      	add	r0, sp, #4
   d4828:	490e      	ldr	r1, [pc, #56]	; (d4864 <loop+0xb4>)
   d482a:	f002 fd75 	bl	d7318 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d482e:	9801      	ldr	r0, [sp, #4]
   d4830:	b108      	cbz	r0, d4836 <loop+0x86>
            free(wakeupSource_);
   d4832:	f001 fc53 	bl	d60dc <free>
    System.reset();
   d4836:	f002 fd6b 	bl	d7310 <_ZN11SystemClass5resetEv>
}
   d483a:	e7d1      	b.n	d47e0 <loop+0x30>
   d483c:	2003e3f0 	.word	0x2003e3f0
   d4840:	2003e3f4 	.word	0x2003e3f4
   d4844:	2003e598 	.word	0x2003e598
   d4848:	2003e388 	.word	0x2003e388
   d484c:	2003e3fc 	.word	0x2003e3fc
   d4850:	2003e3f8 	.word	0x2003e3f8
   d4854:	2003e39c 	.word	0x2003e39c
   d4858:	2003e5a4 	.word	0x2003e5a4
   d485c:	2003d5b0 	.word	0x2003d5b0
   d4860:	2003d5c4 	.word	0x2003d5c4
   d4864:	2003e3d4 	.word	0x2003e3d4

000d4868 <_Z6setIPRi>:

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
   d4868:	b500      	push	{lr}
   d486a:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   d486c:	4939      	ldr	r1, [pc, #228]	; (d4954 <_Z6setIPRi+0xec>)
{                          //  Set UART Baud rate
   d486e:	9001      	str	r0, [sp, #4]
  String reply;
   d4870:	a802      	add	r0, sp, #8
   d4872:	f002 fcaa 	bl	d71ca <_ZN6StringC1EPKc>
  Serial1.printf("AT+IPR=%i\r\n", _baudRate);
   d4876:	f001 fed5 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d487a:	9a01      	ldr	r2, [sp, #4]
   d487c:	4936      	ldr	r1, [pc, #216]	; (d4958 <_Z6setIPRi+0xf0>)
   d487e:	f7ff fc27 	bl	d40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   d4882:	20c8      	movs	r0, #200	; 0xc8
   d4884:	f002 fb74 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d4888:	f001 fecc 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d488c:	6803      	ldr	r3, [r0, #0]
   d488e:	691b      	ldr	r3, [r3, #16]
   d4890:	4798      	blx	r3
   d4892:	2800      	cmp	r0, #0
   d4894:	dd21      	ble.n	d48da <_Z6setIPRi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4896:	f001 fec5 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d489a:	220a      	movs	r2, #10
   d489c:	4601      	mov	r1, r0
   d489e:	a806      	add	r0, sp, #24
   d48a0:	f002 fb94 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d48a4:	a906      	add	r1, sp, #24
   d48a6:	a802      	add	r0, sp, #8
   d48a8:	f002 fcc0 	bl	d722c <_ZN6StringaSEOS_>
   d48ac:	a806      	add	r0, sp, #24
   d48ae:	f002 fc41 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d48b2:	4b2a      	ldr	r3, [pc, #168]	; (d495c <_Z6setIPRi+0xf4>)
   d48b4:	781b      	ldrb	r3, [r3, #0]
   d48b6:	b12b      	cbz	r3, d48c4 <_Z6setIPRi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   d48b8:	f001 ff40 	bl	d673c <_Z16_fetch_usbserialv>
   d48bc:	9a02      	ldr	r2, [sp, #8]
   d48be:	4928      	ldr	r1, [pc, #160]	; (d4960 <_Z6setIPRi+0xf8>)
   d48c0:	f7ff fc06 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d48c4:	4b27      	ldr	r3, [pc, #156]	; (d4964 <_Z6setIPRi+0xfc>)
   d48c6:	781b      	ldrb	r3, [r3, #0]
   d48c8:	b13b      	cbz	r3, d48da <_Z6setIPRi+0x72>
    {
      Particle.publish("setIPR", reply);
   d48ca:	a806      	add	r0, sp, #24
   d48cc:	9a02      	ldr	r2, [sp, #8]
   d48ce:	4926      	ldr	r1, [pc, #152]	; (d4968 <_Z6setIPRi+0x100>)
   d48d0:	f7ff fbf0 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d48d4:	a807      	add	r0, sp, #28
   d48d6:	f7ff fdc1 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d48da:	4b24      	ldr	r3, [pc, #144]	; (d496c <_Z6setIPRi+0x104>)
   d48dc:	781b      	ldrb	r3, [r3, #0]
   d48de:	2b00      	cmp	r3, #0
   d48e0:	d032      	beq.n	d4948 <_Z6setIPRi+0xe0>
  {
    Serial1.printf("AT+IPR?\r\n"); // correct
   d48e2:	f001 fe9f 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d48e6:	4922      	ldr	r1, [pc, #136]	; (d4970 <_Z6setIPRi+0x108>)
   d48e8:	f7ff fbf2 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d48ec:	20c8      	movs	r0, #200	; 0xc8
   d48ee:	f002 fb3f 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d48f2:	f001 fe97 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d48f6:	6803      	ldr	r3, [r0, #0]
   d48f8:	691b      	ldr	r3, [r3, #16]
   d48fa:	4798      	blx	r3
   d48fc:	2800      	cmp	r0, #0
   d48fe:	dd23      	ble.n	d4948 <_Z6setIPRi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4900:	f001 ff1c 	bl	d673c <_Z16_fetch_usbserialv>
   d4904:	491b      	ldr	r1, [pc, #108]	; (d4974 <_Z6setIPRi+0x10c>)
   d4906:	f7ff fbe3 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d490a:	f001 fe8b 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d490e:	220a      	movs	r2, #10
   d4910:	4601      	mov	r1, r0
   d4912:	a806      	add	r0, sp, #24
   d4914:	f002 fb5a 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4918:	a906      	add	r1, sp, #24
   d491a:	a802      	add	r0, sp, #8
   d491c:	f002 fc86 	bl	d722c <_ZN6StringaSEOS_>
   d4920:	a806      	add	r0, sp, #24
   d4922:	f002 fc07 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+IPR?: %s\n", reply.c_str());
   d4926:	f001 ff09 	bl	d673c <_Z16_fetch_usbserialv>
   d492a:	9a02      	ldr	r2, [sp, #8]
   d492c:	4912      	ldr	r1, [pc, #72]	; (d4978 <_Z6setIPRi+0x110>)
   d492e:	f7ff fbcf 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4932:	4b0c      	ldr	r3, [pc, #48]	; (d4964 <_Z6setIPRi+0xfc>)
   d4934:	781b      	ldrb	r3, [r3, #0]
   d4936:	b13b      	cbz	r3, d4948 <_Z6setIPRi+0xe0>
      {
        Particle.publish("AT+IPR?", reply);
   d4938:	a806      	add	r0, sp, #24
   d493a:	9a02      	ldr	r2, [sp, #8]
   d493c:	490f      	ldr	r1, [pc, #60]	; (d497c <_Z6setIPRi+0x114>)
   d493e:	f7ff fbb9 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4942:	a807      	add	r0, sp, #28
   d4944:	f7ff fd8a 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4948:	a802      	add	r0, sp, #8
   d494a:	f002 fbf3 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d494e:	b00b      	add	sp, #44	; 0x2c
   d4950:	f85d fb04 	ldr.w	pc, [sp], #4
   d4954:	000d8653 	.word	0x000d8653
   d4958:	000d85b0 	.word	0x000d85b0
   d495c:	2003e59c 	.word	0x2003e59c
   d4960:	000d8384 	.word	0x000d8384
   d4964:	2003e400 	.word	0x2003e400
   d4968:	000d85bc 	.word	0x000d85bc
   d496c:	2003e38c 	.word	0x2003e38c
   d4970:	000d85c3 	.word	0x000d85c3
   d4974:	000d8583 	.word	0x000d8583
   d4978:	000d85cd 	.word	0x000d85cd
   d497c:	000d85e0 	.word	0x000d85e0

000d4980 <_Z12setParameteri>:

//************************** TEST RADIO PARAMETERS
void setParameter(int radioParameter) // 5
{                                     //  Set the Radio Frequency parameters
   d4980:	b500      	push	{lr}
   d4982:	b089      	sub	sp, #36	; 0x24
  String reply;
   d4984:	4938      	ldr	r1, [pc, #224]	; (d4a68 <_Z12setParameteri+0xe8>)
   d4986:	4668      	mov	r0, sp
   d4988:	f002 fc1f 	bl	d71ca <_ZN6StringC1EPKc>
  // Serial1.printf("AT+PARAMETER=12,7,1,4\r\n"); // default working with v1 home base
  Serial1.printf("AT+PARAMETER=12,7,1,7\r\n"); // working with v1 home base
   d498c:	f001 fe4a 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4990:	4936      	ldr	r1, [pc, #216]	; (d4a6c <_Z12setParameteri+0xec>)
   d4992:	f7ff fb9d 	bl	d40d0 <_ZN5Print6printfEPKcz>
  // }
  // else if (radioParameter == 1)
  // {
  //     Serial1.printf("AT+PARAMETER=12,4,1,7\r\n"); // more than 3km //not working with v1 home base
  // }
  delay(200);
   d4996:	20c8      	movs	r0, #200	; 0xc8
   d4998:	f002 faea 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d499c:	f001 fe42 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d49a0:	6803      	ldr	r3, [r0, #0]
   d49a2:	691b      	ldr	r3, [r3, #16]
   d49a4:	4798      	blx	r3
   d49a6:	2800      	cmp	r0, #0
   d49a8:	dd21      	ble.n	d49ee <_Z12setParameteri+0x6e>
  {
    reply = Serial1.readStringUntil('\n');
   d49aa:	f001 fe3b 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d49ae:	220a      	movs	r2, #10
   d49b0:	4601      	mov	r1, r0
   d49b2:	a804      	add	r0, sp, #16
   d49b4:	f002 fb0a 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d49b8:	a904      	add	r1, sp, #16
   d49ba:	4668      	mov	r0, sp
   d49bc:	f002 fc36 	bl	d722c <_ZN6StringaSEOS_>
   d49c0:	a804      	add	r0, sp, #16
   d49c2:	f002 fbb7 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d49c6:	4b2a      	ldr	r3, [pc, #168]	; (d4a70 <_Z12setParameteri+0xf0>)
   d49c8:	781b      	ldrb	r3, [r3, #0]
   d49ca:	b12b      	cbz	r3, d49d8 <_Z12setParameteri+0x58>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   d49cc:	f001 feb6 	bl	d673c <_Z16_fetch_usbserialv>
   d49d0:	9a00      	ldr	r2, [sp, #0]
   d49d2:	4928      	ldr	r1, [pc, #160]	; (d4a74 <_Z12setParameteri+0xf4>)
   d49d4:	f7ff fb7c 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d49d8:	4b27      	ldr	r3, [pc, #156]	; (d4a78 <_Z12setParameteri+0xf8>)
   d49da:	781b      	ldrb	r3, [r3, #0]
   d49dc:	b13b      	cbz	r3, d49ee <_Z12setParameteri+0x6e>
    {
      Particle.publish("setRadio", reply);
   d49de:	a804      	add	r0, sp, #16
   d49e0:	9a00      	ldr	r2, [sp, #0]
   d49e2:	4926      	ldr	r1, [pc, #152]	; (d4a7c <_Z12setParameteri+0xfc>)
   d49e4:	f7ff fb66 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d49e8:	a805      	add	r0, sp, #20
   d49ea:	f7ff fd37 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d49ee:	4b24      	ldr	r3, [pc, #144]	; (d4a80 <_Z12setParameteri+0x100>)
   d49f0:	781b      	ldrb	r3, [r3, #0]
   d49f2:	2b00      	cmp	r3, #0
   d49f4:	d032      	beq.n	d4a5c <_Z12setParameteri+0xdc>
  {
    Serial1.printf("AT+PARAMETER?\r\n");
   d49f6:	f001 fe15 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d49fa:	4922      	ldr	r1, [pc, #136]	; (d4a84 <_Z12setParameteri+0x104>)
   d49fc:	f7ff fb68 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d4a00:	20c8      	movs	r0, #200	; 0xc8
   d4a02:	f002 fab5 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d4a06:	f001 fe0d 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4a0a:	6803      	ldr	r3, [r0, #0]
   d4a0c:	691b      	ldr	r3, [r3, #16]
   d4a0e:	4798      	blx	r3
   d4a10:	2800      	cmp	r0, #0
   d4a12:	dd23      	ble.n	d4a5c <_Z12setParameteri+0xdc>
    {
      Serial.printf("Awaiting Reply\n");
   d4a14:	f001 fe92 	bl	d673c <_Z16_fetch_usbserialv>
   d4a18:	491b      	ldr	r1, [pc, #108]	; (d4a88 <_Z12setParameteri+0x108>)
   d4a1a:	f7ff fb59 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d4a1e:	f001 fe01 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4a22:	220a      	movs	r2, #10
   d4a24:	4601      	mov	r1, r0
   d4a26:	a804      	add	r0, sp, #16
   d4a28:	f002 fad0 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4a2c:	a904      	add	r1, sp, #16
   d4a2e:	4668      	mov	r0, sp
   d4a30:	f002 fbfc 	bl	d722c <_ZN6StringaSEOS_>
   d4a34:	a804      	add	r0, sp, #16
   d4a36:	f002 fb7d 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+PARAMETER?: %s\n", reply.c_str()); //+PARAMETER=" "
   d4a3a:	f001 fe7f 	bl	d673c <_Z16_fetch_usbserialv>
   d4a3e:	9a00      	ldr	r2, [sp, #0]
   d4a40:	4912      	ldr	r1, [pc, #72]	; (d4a8c <_Z12setParameteri+0x10c>)
   d4a42:	f7ff fb45 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4a46:	4b0c      	ldr	r3, [pc, #48]	; (d4a78 <_Z12setParameteri+0xf8>)
   d4a48:	781b      	ldrb	r3, [r3, #0]
   d4a4a:	b13b      	cbz	r3, d4a5c <_Z12setParameteri+0xdc>
      {
        Particle.publish("setParameter?", reply);
   d4a4c:	a804      	add	r0, sp, #16
   d4a4e:	9a00      	ldr	r2, [sp, #0]
   d4a50:	490f      	ldr	r1, [pc, #60]	; (d4a90 <_Z12setParameteri+0x110>)
   d4a52:	f7ff fb2f 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4a56:	a805      	add	r0, sp, #20
   d4a58:	f7ff fd00 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4a5c:	4668      	mov	r0, sp
   d4a5e:	f002 fb69 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d4a62:	b009      	add	sp, #36	; 0x24
   d4a64:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a68:	000d8653 	.word	0x000d8653
   d4a6c:	000d85e8 	.word	0x000d85e8
   d4a70:	2003e59c 	.word	0x2003e59c
   d4a74:	000d8384 	.word	0x000d8384
   d4a78:	2003e400 	.word	0x2003e400
   d4a7c:	000d8600 	.word	0x000d8600
   d4a80:	2003e38c 	.word	0x2003e38c
   d4a84:	000d8609 	.word	0x000d8609
   d4a88:	000d8583 	.word	0x000d8583
   d4a8c:	000d8619 	.word	0x000d8619
   d4a90:	000d8632 	.word	0x000d8632

000d4a94 <_Z7setBandi>:

//************************* Check band before sending to england
void setBand(int bandParameter) // 6
{                               //  Set RF Band
   d4a94:	b510      	push	{r4, lr}
   d4a96:	b088      	sub	sp, #32
   d4a98:	4604      	mov	r4, r0
  String reply;
   d4a9a:	493b      	ldr	r1, [pc, #236]	; (d4b88 <_Z7setBandi+0xf4>)
   d4a9c:	4668      	mov	r0, sp
   d4a9e:	f002 fb94 	bl	d71ca <_ZN6StringC1EPKc>
  if (bandParameter == 0)
   d4aa2:	b924      	cbnz	r4, d4aae <_Z7setBandi+0x1a>
  {
    Serial1.printf("AT+BAND=915000000\r\n"); // united states
   d4aa4:	f001 fdbe 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4aa8:	4938      	ldr	r1, [pc, #224]	; (d4b8c <_Z7setBandi+0xf8>)
   d4aaa:	f7ff fb11 	bl	d40d0 <_ZN5Print6printfEPKcz>
  }
  else if (bandParameter == 1)
    ;
  {
    Serial1.printf("AT+BAND=868500000\r\n"); // europe
   d4aae:	f001 fdb9 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4ab2:	4937      	ldr	r1, [pc, #220]	; (d4b90 <_Z7setBandi+0xfc>)
   d4ab4:	f7ff fb0c 	bl	d40d0 <_ZN5Print6printfEPKcz>
  }

  delay(200);
   d4ab8:	20c8      	movs	r0, #200	; 0xc8
   d4aba:	f002 fa59 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d4abe:	f001 fdb1 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4ac2:	6803      	ldr	r3, [r0, #0]
   d4ac4:	691b      	ldr	r3, [r3, #16]
   d4ac6:	4798      	blx	r3
   d4ac8:	2800      	cmp	r0, #0
   d4aca:	dd21      	ble.n	d4b10 <_Z7setBandi+0x7c>
  {
    reply = Serial1.readStringUntil('\n');
   d4acc:	f001 fdaa 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4ad0:	220a      	movs	r2, #10
   d4ad2:	4601      	mov	r1, r0
   d4ad4:	a804      	add	r0, sp, #16
   d4ad6:	f002 fa79 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4ada:	a904      	add	r1, sp, #16
   d4adc:	4668      	mov	r0, sp
   d4ade:	f002 fba5 	bl	d722c <_ZN6StringaSEOS_>
   d4ae2:	a804      	add	r0, sp, #16
   d4ae4:	f002 fb26 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d4ae8:	4b2a      	ldr	r3, [pc, #168]	; (d4b94 <_Z7setBandi+0x100>)
   d4aea:	781b      	ldrb	r3, [r3, #0]
   d4aec:	b12b      	cbz	r3, d4afa <_Z7setBandi+0x66>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   d4aee:	f001 fe25 	bl	d673c <_Z16_fetch_usbserialv>
   d4af2:	9a00      	ldr	r2, [sp, #0]
   d4af4:	4928      	ldr	r1, [pc, #160]	; (d4b98 <_Z7setBandi+0x104>)
   d4af6:	f7ff faeb 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d4afa:	4b28      	ldr	r3, [pc, #160]	; (d4b9c <_Z7setBandi+0x108>)
   d4afc:	781b      	ldrb	r3, [r3, #0]
   d4afe:	b13b      	cbz	r3, d4b10 <_Z7setBandi+0x7c>
    {
      Particle.publish("setBand", reply);
   d4b00:	a804      	add	r0, sp, #16
   d4b02:	9a00      	ldr	r2, [sp, #0]
   d4b04:	4926      	ldr	r1, [pc, #152]	; (d4ba0 <_Z7setBandi+0x10c>)
   d4b06:	f7ff fad5 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4b0a:	a805      	add	r0, sp, #20
   d4b0c:	f7ff fca6 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4b10:	4b24      	ldr	r3, [pc, #144]	; (d4ba4 <_Z7setBandi+0x110>)
   d4b12:	781b      	ldrb	r3, [r3, #0]
   d4b14:	2b00      	cmp	r3, #0
   d4b16:	d032      	beq.n	d4b7e <_Z7setBandi+0xea>
  {
    Serial1.printf("AT+BAND?\r\n"); // correct
   d4b18:	f001 fd84 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4b1c:	4922      	ldr	r1, [pc, #136]	; (d4ba8 <_Z7setBandi+0x114>)
   d4b1e:	f7ff fad7 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d4b22:	20c8      	movs	r0, #200	; 0xc8
   d4b24:	f002 fa24 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d4b28:	f001 fd7c 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4b2c:	6803      	ldr	r3, [r0, #0]
   d4b2e:	691b      	ldr	r3, [r3, #16]
   d4b30:	4798      	blx	r3
   d4b32:	2800      	cmp	r0, #0
   d4b34:	dd23      	ble.n	d4b7e <_Z7setBandi+0xea>
    {
      Serial.printf("Awaiting Reply\n");
   d4b36:	f001 fe01 	bl	d673c <_Z16_fetch_usbserialv>
   d4b3a:	491c      	ldr	r1, [pc, #112]	; (d4bac <_Z7setBandi+0x118>)
   d4b3c:	f7ff fac8 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d4b40:	f001 fd70 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4b44:	220a      	movs	r2, #10
   d4b46:	4601      	mov	r1, r0
   d4b48:	a804      	add	r0, sp, #16
   d4b4a:	f002 fa3f 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4b4e:	a904      	add	r1, sp, #16
   d4b50:	4668      	mov	r0, sp
   d4b52:	f002 fb6b 	bl	d722c <_ZN6StringaSEOS_>
   d4b56:	a804      	add	r0, sp, #16
   d4b58:	f002 faec 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+BAND?: %s\n", reply.c_str());
   d4b5c:	f001 fdee 	bl	d673c <_Z16_fetch_usbserialv>
   d4b60:	9a00      	ldr	r2, [sp, #0]
   d4b62:	4913      	ldr	r1, [pc, #76]	; (d4bb0 <_Z7setBandi+0x11c>)
   d4b64:	f7ff fab4 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4b68:	4b0c      	ldr	r3, [pc, #48]	; (d4b9c <_Z7setBandi+0x108>)
   d4b6a:	781b      	ldrb	r3, [r3, #0]
   d4b6c:	b13b      	cbz	r3, d4b7e <_Z7setBandi+0xea>
      {
        Particle.publish("AT+BAND?", reply);
   d4b6e:	a804      	add	r0, sp, #16
   d4b70:	9a00      	ldr	r2, [sp, #0]
   d4b72:	4910      	ldr	r1, [pc, #64]	; (d4bb4 <_Z7setBandi+0x120>)
   d4b74:	f7ff fa9e 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4b78:	a805      	add	r0, sp, #20
   d4b7a:	f7ff fc6f 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4b7e:	4668      	mov	r0, sp
   d4b80:	f002 fad8 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d4b84:	b008      	add	sp, #32
   d4b86:	bd10      	pop	{r4, pc}
   d4b88:	000d8653 	.word	0x000d8653
   d4b8c:	000d8640 	.word	0x000d8640
   d4b90:	000d8654 	.word	0x000d8654
   d4b94:	2003e59c 	.word	0x2003e59c
   d4b98:	000d8384 	.word	0x000d8384
   d4b9c:	2003e400 	.word	0x2003e400
   d4ba0:	000d8668 	.word	0x000d8668
   d4ba4:	2003e38c 	.word	0x2003e38c
   d4ba8:	000d8670 	.word	0x000d8670
   d4bac:	000d8583 	.word	0x000d8583
   d4bb0:	000d867b 	.word	0x000d867b
   d4bb4:	000d868f 	.word	0x000d868f

000d4bb8 <_Z10setAddressi>:

void setAddress(int address) // 7
{                            //  Set set module address
   d4bb8:	b500      	push	{lr}
   d4bba:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   d4bbc:	4939      	ldr	r1, [pc, #228]	; (d4ca4 <_Z10setAddressi+0xec>)
{                            //  Set set module address
   d4bbe:	9001      	str	r0, [sp, #4]
  String reply;
   d4bc0:	a802      	add	r0, sp, #8
   d4bc2:	f002 fb02 	bl	d71ca <_ZN6StringC1EPKc>
  Serial1.printf("AT+ADDRESS=%i\r\n", address);
   d4bc6:	f001 fd2d 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4bca:	9a01      	ldr	r2, [sp, #4]
   d4bcc:	4936      	ldr	r1, [pc, #216]	; (d4ca8 <_Z10setAddressi+0xf0>)
   d4bce:	f7ff fa7f 	bl	d40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   d4bd2:	20c8      	movs	r0, #200	; 0xc8
   d4bd4:	f002 f9cc 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d4bd8:	f001 fd24 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4bdc:	6803      	ldr	r3, [r0, #0]
   d4bde:	691b      	ldr	r3, [r3, #16]
   d4be0:	4798      	blx	r3
   d4be2:	2800      	cmp	r0, #0
   d4be4:	dd21      	ble.n	d4c2a <_Z10setAddressi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4be6:	f001 fd1d 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4bea:	220a      	movs	r2, #10
   d4bec:	4601      	mov	r1, r0
   d4bee:	a806      	add	r0, sp, #24
   d4bf0:	f002 f9ec 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4bf4:	a906      	add	r1, sp, #24
   d4bf6:	a802      	add	r0, sp, #8
   d4bf8:	f002 fb18 	bl	d722c <_ZN6StringaSEOS_>
   d4bfc:	a806      	add	r0, sp, #24
   d4bfe:	f002 fa99 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d4c02:	4b2a      	ldr	r3, [pc, #168]	; (d4cac <_Z10setAddressi+0xf4>)
   d4c04:	781b      	ldrb	r3, [r3, #0]
   d4c06:	b12b      	cbz	r3, d4c14 <_Z10setAddressi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4c08:	f001 fd98 	bl	d673c <_Z16_fetch_usbserialv>
   d4c0c:	9a02      	ldr	r2, [sp, #8]
   d4c0e:	4928      	ldr	r1, [pc, #160]	; (d4cb0 <_Z10setAddressi+0xf8>)
   d4c10:	f7ff fa5e 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d4c14:	4b27      	ldr	r3, [pc, #156]	; (d4cb4 <_Z10setAddressi+0xfc>)
   d4c16:	781b      	ldrb	r3, [r3, #0]
   d4c18:	b13b      	cbz	r3, d4c2a <_Z10setAddressi+0x72>
    {
      Particle.publish("setAddress", reply);
   d4c1a:	a806      	add	r0, sp, #24
   d4c1c:	9a02      	ldr	r2, [sp, #8]
   d4c1e:	4926      	ldr	r1, [pc, #152]	; (d4cb8 <_Z10setAddressi+0x100>)
   d4c20:	f7ff fa48 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4c24:	a807      	add	r0, sp, #28
   d4c26:	f7ff fc19 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4c2a:	4b24      	ldr	r3, [pc, #144]	; (d4cbc <_Z10setAddressi+0x104>)
   d4c2c:	781b      	ldrb	r3, [r3, #0]
   d4c2e:	2b00      	cmp	r3, #0
   d4c30:	d032      	beq.n	d4c98 <_Z10setAddressi+0xe0>
  {
    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   d4c32:	f001 fcf7 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4c36:	4922      	ldr	r1, [pc, #136]	; (d4cc0 <_Z10setAddressi+0x108>)
   d4c38:	f7ff fa4a 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d4c3c:	20c8      	movs	r0, #200	; 0xc8
   d4c3e:	f002 f997 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d4c42:	f001 fcef 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4c46:	6803      	ldr	r3, [r0, #0]
   d4c48:	691b      	ldr	r3, [r3, #16]
   d4c4a:	4798      	blx	r3
   d4c4c:	2800      	cmp	r0, #0
   d4c4e:	dd23      	ble.n	d4c98 <_Z10setAddressi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4c50:	f001 fd74 	bl	d673c <_Z16_fetch_usbserialv>
   d4c54:	491b      	ldr	r1, [pc, #108]	; (d4cc4 <_Z10setAddressi+0x10c>)
   d4c56:	f7ff fa3b 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d4c5a:	f001 fce3 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4c5e:	220a      	movs	r2, #10
   d4c60:	4601      	mov	r1, r0
   d4c62:	a806      	add	r0, sp, #24
   d4c64:	f002 f9b2 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4c68:	a906      	add	r1, sp, #24
   d4c6a:	a802      	add	r0, sp, #8
   d4c6c:	f002 fade 	bl	d722c <_ZN6StringaSEOS_>
   d4c70:	a806      	add	r0, sp, #24
   d4c72:	f002 fa5f 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply get address: %s\n", reply.c_str());
   d4c76:	f001 fd61 	bl	d673c <_Z16_fetch_usbserialv>
   d4c7a:	9a02      	ldr	r2, [sp, #8]
   d4c7c:	4912      	ldr	r1, [pc, #72]	; (d4cc8 <_Z10setAddressi+0x110>)
   d4c7e:	f7ff fa27 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4c82:	4b0c      	ldr	r3, [pc, #48]	; (d4cb4 <_Z10setAddressi+0xfc>)
   d4c84:	781b      	ldrb	r3, [r3, #0]
   d4c86:	b13b      	cbz	r3, d4c98 <_Z10setAddressi+0xe0>
      {
        Particle.publish("AT+ADDRESS?", reply);
   d4c88:	a806      	add	r0, sp, #24
   d4c8a:	9a02      	ldr	r2, [sp, #8]
   d4c8c:	490f      	ldr	r1, [pc, #60]	; (d4ccc <_Z10setAddressi+0x114>)
   d4c8e:	f7ff fa11 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4c92:	a807      	add	r0, sp, #28
   d4c94:	f7ff fbe2 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4c98:	a802      	add	r0, sp, #8
   d4c9a:	f002 fa4b 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d4c9e:	b00b      	add	sp, #44	; 0x2c
   d4ca0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ca4:	000d8653 	.word	0x000d8653
   d4ca8:	000d8698 	.word	0x000d8698
   d4cac:	2003e59c 	.word	0x2003e59c
   d4cb0:	000d8384 	.word	0x000d8384
   d4cb4:	2003e400 	.word	0x2003e400
   d4cb8:	000d86a8 	.word	0x000d86a8
   d4cbc:	2003e38c 	.word	0x2003e38c
   d4cc0:	000d86b3 	.word	0x000d86b3
   d4cc4:	000d8583 	.word	0x000d8583
   d4cc8:	000d86c1 	.word	0x000d86c1
   d4ccc:	000d86d8 	.word	0x000d86d8

000d4cd0 <_Z12setNetworkIDi>:

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
   d4cd0:	b500      	push	{lr}
   d4cd2:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   d4cd4:	4939      	ldr	r1, [pc, #228]	; (d4dbc <_Z12setNetworkIDi+0xec>)
{                                //  Set set module network ID
   d4cd6:	9001      	str	r0, [sp, #4]
  String reply;
   d4cd8:	a802      	add	r0, sp, #8
   d4cda:	f002 fa76 	bl	d71ca <_ZN6StringC1EPKc>
  Serial1.printf("AT+NETWORKID=%i\r\n", networkID);
   d4cde:	f001 fca1 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4ce2:	9a01      	ldr	r2, [sp, #4]
   d4ce4:	4936      	ldr	r1, [pc, #216]	; (d4dc0 <_Z12setNetworkIDi+0xf0>)
   d4ce6:	f7ff f9f3 	bl	d40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   d4cea:	20c8      	movs	r0, #200	; 0xc8
   d4cec:	f002 f940 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d4cf0:	f001 fc98 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4cf4:	6803      	ldr	r3, [r0, #0]
   d4cf6:	691b      	ldr	r3, [r3, #16]
   d4cf8:	4798      	blx	r3
   d4cfa:	2800      	cmp	r0, #0
   d4cfc:	dd21      	ble.n	d4d42 <_Z12setNetworkIDi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4cfe:	f001 fc91 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4d02:	220a      	movs	r2, #10
   d4d04:	4601      	mov	r1, r0
   d4d06:	a806      	add	r0, sp, #24
   d4d08:	f002 f960 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4d0c:	a906      	add	r1, sp, #24
   d4d0e:	a802      	add	r0, sp, #8
   d4d10:	f002 fa8c 	bl	d722c <_ZN6StringaSEOS_>
   d4d14:	a806      	add	r0, sp, #24
   d4d16:	f002 fa0d 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d4d1a:	4b2a      	ldr	r3, [pc, #168]	; (d4dc4 <_Z12setNetworkIDi+0xf4>)
   d4d1c:	781b      	ldrb	r3, [r3, #0]
   d4d1e:	b12b      	cbz	r3, d4d2c <_Z12setNetworkIDi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   d4d20:	f001 fd0c 	bl	d673c <_Z16_fetch_usbserialv>
   d4d24:	9a02      	ldr	r2, [sp, #8]
   d4d26:	4928      	ldr	r1, [pc, #160]	; (d4dc8 <_Z12setNetworkIDi+0xf8>)
   d4d28:	f7ff f9d2 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d4d2c:	4b27      	ldr	r3, [pc, #156]	; (d4dcc <_Z12setNetworkIDi+0xfc>)
   d4d2e:	781b      	ldrb	r3, [r3, #0]
   d4d30:	b13b      	cbz	r3, d4d42 <_Z12setNetworkIDi+0x72>
    {
      Particle.publish("setAddress", reply);
   d4d32:	a806      	add	r0, sp, #24
   d4d34:	9a02      	ldr	r2, [sp, #8]
   d4d36:	4926      	ldr	r1, [pc, #152]	; (d4dd0 <_Z12setNetworkIDi+0x100>)
   d4d38:	f7ff f9bc 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4d3c:	a807      	add	r0, sp, #28
   d4d3e:	f7ff fb8d 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4d42:	4b24      	ldr	r3, [pc, #144]	; (d4dd4 <_Z12setNetworkIDi+0x104>)
   d4d44:	781b      	ldrb	r3, [r3, #0]
   d4d46:	2b00      	cmp	r3, #0
   d4d48:	d032      	beq.n	d4db0 <_Z12setNetworkIDi+0xe0>
  {
    Serial1.printf("AT+NETWORKID?\r\n");
   d4d4a:	f001 fc6b 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4d4e:	4922      	ldr	r1, [pc, #136]	; (d4dd8 <_Z12setNetworkIDi+0x108>)
   d4d50:	f7ff f9be 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d4d54:	20c8      	movs	r0, #200	; 0xc8
   d4d56:	f002 f90b 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d4d5a:	f001 fc63 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4d5e:	6803      	ldr	r3, [r0, #0]
   d4d60:	691b      	ldr	r3, [r3, #16]
   d4d62:	4798      	blx	r3
   d4d64:	2800      	cmp	r0, #0
   d4d66:	dd23      	ble.n	d4db0 <_Z12setNetworkIDi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4d68:	f001 fce8 	bl	d673c <_Z16_fetch_usbserialv>
   d4d6c:	491b      	ldr	r1, [pc, #108]	; (d4ddc <_Z12setNetworkIDi+0x10c>)
   d4d6e:	f7ff f9af 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d4d72:	f001 fc57 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4d76:	220a      	movs	r2, #10
   d4d78:	4601      	mov	r1, r0
   d4d7a:	a806      	add	r0, sp, #24
   d4d7c:	f002 f926 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4d80:	a906      	add	r1, sp, #24
   d4d82:	a802      	add	r0, sp, #8
   d4d84:	f002 fa52 	bl	d722c <_ZN6StringaSEOS_>
   d4d88:	a806      	add	r0, sp, #24
   d4d8a:	f002 f9d3 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+NETWORKID? %s\n", reply.c_str());
   d4d8e:	f001 fcd5 	bl	d673c <_Z16_fetch_usbserialv>
   d4d92:	9a02      	ldr	r2, [sp, #8]
   d4d94:	4912      	ldr	r1, [pc, #72]	; (d4de0 <_Z12setNetworkIDi+0x110>)
   d4d96:	f7ff f99b 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4d9a:	4b0c      	ldr	r3, [pc, #48]	; (d4dcc <_Z12setNetworkIDi+0xfc>)
   d4d9c:	781b      	ldrb	r3, [r3, #0]
   d4d9e:	b13b      	cbz	r3, d4db0 <_Z12setNetworkIDi+0xe0>
      {
        Particle.publish("AT+NETWORKID?", reply);
   d4da0:	a806      	add	r0, sp, #24
   d4da2:	9a02      	ldr	r2, [sp, #8]
   d4da4:	490f      	ldr	r1, [pc, #60]	; (d4de4 <_Z12setNetworkIDi+0x114>)
   d4da6:	f7ff f985 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4daa:	a807      	add	r0, sp, #28
   d4dac:	f7ff fb56 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4db0:	a802      	add	r0, sp, #8
   d4db2:	f002 f9bf 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d4db6:	b00b      	add	sp, #44	; 0x2c
   d4db8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4dbc:	000d8653 	.word	0x000d8653
   d4dc0:	000d86e4 	.word	0x000d86e4
   d4dc4:	2003e59c 	.word	0x2003e59c
   d4dc8:	000d8384 	.word	0x000d8384
   d4dcc:	2003e400 	.word	0x2003e400
   d4dd0:	000d86a8 	.word	0x000d86a8
   d4dd4:	2003e38c 	.word	0x2003e38c
   d4dd8:	000d86f6 	.word	0x000d86f6
   d4ddc:	000d8583 	.word	0x000d8583
   d4de0:	000d8706 	.word	0x000d8706
   d4de4:	000d871e 	.word	0x000d871e

000d4de8 <_Z7setCPINv>:

void setCPIN() // 9
{              //  set password
   d4de8:	b500      	push	{lr}
   d4dea:	b08d      	sub	sp, #52	; 0x34
  String CPIN = "BA4104032968BA1114299079021594AA";
   d4dec:	493c      	ldr	r1, [pc, #240]	; (d4ee0 <_Z7setCPINv+0xf8>)
   d4dee:	4668      	mov	r0, sp
   d4df0:	f002 f9eb 	bl	d71ca <_ZN6StringC1EPKc>
  String reply;
   d4df4:	493b      	ldr	r1, [pc, #236]	; (d4ee4 <_Z7setCPINv+0xfc>)
   d4df6:	a804      	add	r0, sp, #16
   d4df8:	f002 f9e7 	bl	d71ca <_ZN6StringC1EPKc>
  Serial1.printf("AT+CPIN=%s\r\n", CPIN.c_str());
   d4dfc:	f001 fc12 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4e00:	9a00      	ldr	r2, [sp, #0]
   d4e02:	4939      	ldr	r1, [pc, #228]	; (d4ee8 <_Z7setCPINv+0x100>)
   d4e04:	f7ff f964 	bl	d40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   d4e08:	20c8      	movs	r0, #200	; 0xc8
   d4e0a:	f002 f8b1 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d4e0e:	f001 fc09 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4e12:	6803      	ldr	r3, [r0, #0]
   d4e14:	691b      	ldr	r3, [r3, #16]
   d4e16:	4798      	blx	r3
   d4e18:	2800      	cmp	r0, #0
   d4e1a:	dd21      	ble.n	d4e60 <_Z7setCPINv+0x78>
  {
    reply = Serial1.readStringUntil('\n');
   d4e1c:	f001 fc02 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4e20:	220a      	movs	r2, #10
   d4e22:	4601      	mov	r1, r0
   d4e24:	a808      	add	r0, sp, #32
   d4e26:	f002 f8d1 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4e2a:	a908      	add	r1, sp, #32
   d4e2c:	a804      	add	r0, sp, #16
   d4e2e:	f002 f9fd 	bl	d722c <_ZN6StringaSEOS_>
   d4e32:	a808      	add	r0, sp, #32
   d4e34:	f002 f97e 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d4e38:	4b2c      	ldr	r3, [pc, #176]	; (d4eec <_Z7setCPINv+0x104>)
   d4e3a:	781b      	ldrb	r3, [r3, #0]
   d4e3c:	b12b      	cbz	r3, d4e4a <_Z7setCPINv+0x62>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4e3e:	f001 fc7d 	bl	d673c <_Z16_fetch_usbserialv>
   d4e42:	9a04      	ldr	r2, [sp, #16]
   d4e44:	492a      	ldr	r1, [pc, #168]	; (d4ef0 <_Z7setCPINv+0x108>)
   d4e46:	f7ff f943 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d4e4a:	4b2a      	ldr	r3, [pc, #168]	; (d4ef4 <_Z7setCPINv+0x10c>)
   d4e4c:	781b      	ldrb	r3, [r3, #0]
   d4e4e:	b13b      	cbz	r3, d4e60 <_Z7setCPINv+0x78>
    {
      Particle.publish("setCPIN", reply);
   d4e50:	a808      	add	r0, sp, #32
   d4e52:	9a04      	ldr	r2, [sp, #16]
   d4e54:	4928      	ldr	r1, [pc, #160]	; (d4ef8 <_Z7setCPINv+0x110>)
   d4e56:	f7ff f92d 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4e5a:	a809      	add	r0, sp, #36	; 0x24
   d4e5c:	f7ff fafe 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4e60:	4b26      	ldr	r3, [pc, #152]	; (d4efc <_Z7setCPINv+0x114>)
   d4e62:	781b      	ldrb	r3, [r3, #0]
   d4e64:	2b00      	cmp	r3, #0
   d4e66:	d032      	beq.n	d4ece <_Z7setCPINv+0xe6>
  {
    Serial1.printf("AT+CPIN?\r\n");
   d4e68:	f001 fbdc 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4e6c:	4924      	ldr	r1, [pc, #144]	; (d4f00 <_Z7setCPINv+0x118>)
   d4e6e:	f7ff f92f 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d4e72:	20c8      	movs	r0, #200	; 0xc8
   d4e74:	f002 f87c 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d4e78:	f001 fbd4 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4e7c:	6803      	ldr	r3, [r0, #0]
   d4e7e:	691b      	ldr	r3, [r3, #16]
   d4e80:	4798      	blx	r3
   d4e82:	2800      	cmp	r0, #0
   d4e84:	dd23      	ble.n	d4ece <_Z7setCPINv+0xe6>
    {
      Serial.printf("Awaiting Reply\n");
   d4e86:	f001 fc59 	bl	d673c <_Z16_fetch_usbserialv>
   d4e8a:	491e      	ldr	r1, [pc, #120]	; (d4f04 <_Z7setCPINv+0x11c>)
   d4e8c:	f7ff f920 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d4e90:	f001 fbc8 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4e94:	220a      	movs	r2, #10
   d4e96:	4601      	mov	r1, r0
   d4e98:	a808      	add	r0, sp, #32
   d4e9a:	f002 f897 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4e9e:	a908      	add	r1, sp, #32
   d4ea0:	a804      	add	r0, sp, #16
   d4ea2:	f002 f9c3 	bl	d722c <_ZN6StringaSEOS_>
   d4ea6:	a808      	add	r0, sp, #32
   d4ea8:	f002 f944 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply CPIN: %s\n", reply.c_str());
   d4eac:	f001 fc46 	bl	d673c <_Z16_fetch_usbserialv>
   d4eb0:	9a04      	ldr	r2, [sp, #16]
   d4eb2:	4915      	ldr	r1, [pc, #84]	; (d4f08 <_Z7setCPINv+0x120>)
   d4eb4:	f7ff f90c 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4eb8:	4b0e      	ldr	r3, [pc, #56]	; (d4ef4 <_Z7setCPINv+0x10c>)
   d4eba:	781b      	ldrb	r3, [r3, #0]
   d4ebc:	b13b      	cbz	r3, d4ece <_Z7setCPINv+0xe6>
      {
        Particle.publish("AT+CPIN?", reply);
   d4ebe:	a808      	add	r0, sp, #32
   d4ec0:	9a04      	ldr	r2, [sp, #16]
   d4ec2:	4912      	ldr	r1, [pc, #72]	; (d4f0c <_Z7setCPINv+0x124>)
   d4ec4:	f7ff f8f6 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4ec8:	a809      	add	r0, sp, #36	; 0x24
   d4eca:	f7ff fac7 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4ece:	a804      	add	r0, sp, #16
   d4ed0:	f002 f930 	bl	d7134 <_ZN6StringD1Ev>
  String CPIN = "BA4104032968BA1114299079021594AA";
   d4ed4:	4668      	mov	r0, sp
   d4ed6:	f002 f92d 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d4eda:	b00d      	add	sp, #52	; 0x34
   d4edc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ee0:	000d872c 	.word	0x000d872c
   d4ee4:	000d8653 	.word	0x000d8653
   d4ee8:	000d874d 	.word	0x000d874d
   d4eec:	2003e59c 	.word	0x2003e59c
   d4ef0:	000d8384 	.word	0x000d8384
   d4ef4:	2003e400 	.word	0x2003e400
   d4ef8:	000d875a 	.word	0x000d875a
   d4efc:	2003e38c 	.word	0x2003e38c
   d4f00:	000d8762 	.word	0x000d8762
   d4f04:	000d8583 	.word	0x000d8583
   d4f08:	000d876d 	.word	0x000d876d
   d4f0c:	000d877d 	.word	0x000d877d

000d4f10 <_Z8setCRFOPi>:

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
   d4f10:	b500      	push	{lr}
   d4f12:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   d4f14:	4939      	ldr	r1, [pc, #228]	; (d4ffc <_Z8setCRFOPi+0xec>)
{                              //  set RF output power
   d4f16:	9001      	str	r0, [sp, #4]
  String reply;
   d4f18:	a802      	add	r0, sp, #8
   d4f1a:	f002 f956 	bl	d71ca <_ZN6StringC1EPKc>
  Serial1.printf("AT+CRFOP=%i\r\n", outputPower);
   d4f1e:	f001 fb81 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4f22:	9a01      	ldr	r2, [sp, #4]
   d4f24:	4936      	ldr	r1, [pc, #216]	; (d5000 <_Z8setCRFOPi+0xf0>)
   d4f26:	f7ff f8d3 	bl	d40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   d4f2a:	20c8      	movs	r0, #200	; 0xc8
   d4f2c:	f002 f820 	bl	d6f70 <delay>
  if (Serial1.available() > 0)
   d4f30:	f001 fb78 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4f34:	6803      	ldr	r3, [r0, #0]
   d4f36:	691b      	ldr	r3, [r3, #16]
   d4f38:	4798      	blx	r3
   d4f3a:	2800      	cmp	r0, #0
   d4f3c:	dd21      	ble.n	d4f82 <_Z8setCRFOPi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4f3e:	f001 fb71 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4f42:	220a      	movs	r2, #10
   d4f44:	4601      	mov	r1, r0
   d4f46:	a806      	add	r0, sp, #24
   d4f48:	f002 f840 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4f4c:	a906      	add	r1, sp, #24
   d4f4e:	a802      	add	r0, sp, #8
   d4f50:	f002 f96c 	bl	d722c <_ZN6StringaSEOS_>
   d4f54:	a806      	add	r0, sp, #24
   d4f56:	f002 f8ed 	bl	d7134 <_ZN6StringD1Ev>

    if (serialPrint)
   d4f5a:	4b2a      	ldr	r3, [pc, #168]	; (d5004 <_Z8setCRFOPi+0xf4>)
   d4f5c:	781b      	ldrb	r3, [r3, #0]
   d4f5e:	b12b      	cbz	r3, d4f6c <_Z8setCRFOPi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4f60:	f001 fbec 	bl	d673c <_Z16_fetch_usbserialv>
   d4f64:	9a02      	ldr	r2, [sp, #8]
   d4f66:	4928      	ldr	r1, [pc, #160]	; (d5008 <_Z8setCRFOPi+0xf8>)
   d4f68:	f7ff f8b2 	bl	d40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   d4f6c:	4b27      	ldr	r3, [pc, #156]	; (d500c <_Z8setCRFOPi+0xfc>)
   d4f6e:	781b      	ldrb	r3, [r3, #0]
   d4f70:	b13b      	cbz	r3, d4f82 <_Z8setCRFOPi+0x72>
    {
      Particle.publish("AT+CRFOP", reply);
   d4f72:	a806      	add	r0, sp, #24
   d4f74:	9a02      	ldr	r2, [sp, #8]
   d4f76:	4926      	ldr	r1, [pc, #152]	; (d5010 <_Z8setCRFOPi+0x100>)
   d4f78:	f7ff f89c 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4f7c:	a807      	add	r0, sp, #28
   d4f7e:	f7ff fa6d 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4f82:	4b24      	ldr	r3, [pc, #144]	; (d5014 <_Z8setCRFOPi+0x104>)
   d4f84:	781b      	ldrb	r3, [r3, #0]
   d4f86:	2b00      	cmp	r3, #0
   d4f88:	d032      	beq.n	d4ff0 <_Z8setCRFOPi+0xe0>
  {
    Serial1.printf("AT+CRFOP?\r\n");
   d4f8a:	f001 fb4b 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4f8e:	4922      	ldr	r1, [pc, #136]	; (d5018 <_Z8setCRFOPi+0x108>)
   d4f90:	f7ff f89e 	bl	d40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   d4f94:	20c8      	movs	r0, #200	; 0xc8
   d4f96:	f001 ffeb 	bl	d6f70 <delay>
    if (Serial1.available() > 0)
   d4f9a:	f001 fb43 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4f9e:	6803      	ldr	r3, [r0, #0]
   d4fa0:	691b      	ldr	r3, [r3, #16]
   d4fa2:	4798      	blx	r3
   d4fa4:	2800      	cmp	r0, #0
   d4fa6:	dd23      	ble.n	d4ff0 <_Z8setCRFOPi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4fa8:	f001 fbc8 	bl	d673c <_Z16_fetch_usbserialv>
   d4fac:	491b      	ldr	r1, [pc, #108]	; (d501c <_Z8setCRFOPi+0x10c>)
   d4fae:	f7ff f88f 	bl	d40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   d4fb2:	f001 fb37 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d4fb6:	220a      	movs	r2, #10
   d4fb8:	4601      	mov	r1, r0
   d4fba:	a806      	add	r0, sp, #24
   d4fbc:	f002 f806 	bl	d6fcc <_ZN6Stream15readStringUntilEc>
   d4fc0:	a906      	add	r1, sp, #24
   d4fc2:	a802      	add	r0, sp, #8
   d4fc4:	f002 f932 	bl	d722c <_ZN6StringaSEOS_>
   d4fc8:	a806      	add	r0, sp, #24
   d4fca:	f002 f8b3 	bl	d7134 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+CRFOP?: %s\n", reply.c_str());
   d4fce:	f001 fbb5 	bl	d673c <_Z16_fetch_usbserialv>
   d4fd2:	9a02      	ldr	r2, [sp, #8]
   d4fd4:	4912      	ldr	r1, [pc, #72]	; (d5020 <_Z8setCRFOPi+0x110>)
   d4fd6:	f7ff f87b 	bl	d40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   d4fda:	4b0c      	ldr	r3, [pc, #48]	; (d500c <_Z8setCRFOPi+0xfc>)
   d4fdc:	781b      	ldrb	r3, [r3, #0]
   d4fde:	b13b      	cbz	r3, d4ff0 <_Z8setCRFOPi+0xe0>
      {
        Particle.publish("AT+CRFOP?", reply);
   d4fe0:	a806      	add	r0, sp, #24
   d4fe2:	9a02      	ldr	r2, [sp, #8]
   d4fe4:	490f      	ldr	r1, [pc, #60]	; (d5024 <_Z8setCRFOPi+0x114>)
   d4fe6:	f7ff f865 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4fea:	a807      	add	r0, sp, #28
   d4fec:	f7ff fa36 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   d4ff0:	a802      	add	r0, sp, #8
   d4ff2:	f002 f89f 	bl	d7134 <_ZN6StringD1Ev>
      }
    }
  }
}
   d4ff6:	b00b      	add	sp, #44	; 0x2c
   d4ff8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ffc:	000d8653 	.word	0x000d8653
   d5000:	000d8786 	.word	0x000d8786
   d5004:	2003e59c 	.word	0x2003e59c
   d5008:	000d8384 	.word	0x000d8384
   d500c:	2003e400 	.word	0x2003e400
   d5010:	000d8794 	.word	0x000d8794
   d5014:	2003e38c 	.word	0x2003e38c
   d5018:	000d879d 	.word	0x000d879d
   d501c:	000d8583 	.word	0x000d8583
   d5020:	000d87a9 	.word	0x000d87a9
   d5024:	000d87be 	.word	0x000d87be

000d5028 <_Z10radioSetupv>:
{
   d5028:	b508      	push	{r3, lr}
  setMode(0); // turn on transmit and receive mode
   d502a:	2000      	movs	r0, #0
   d502c:	f7ff fb02 	bl	d4634 <_Z7setModei>
  atTest();
   d5030:	f7ff fabc 	bl	d45ac <_Z6atTestv>
  setAddress(address); // between 0-65535
   d5034:	4b0d      	ldr	r3, [pc, #52]	; (d506c <_Z10radioSetupv+0x44>)
   d5036:	6818      	ldr	r0, [r3, #0]
   d5038:	f7ff fdbe 	bl	d4bb8 <_Z10setAddressi>
  setNetworkID(networkID);
   d503c:	4b0c      	ldr	r3, [pc, #48]	; (d5070 <_Z10radioSetupv+0x48>)
   d503e:	6818      	ldr	r0, [r3, #0]
   d5040:	f7ff fe46 	bl	d4cd0 <_Z12setNetworkIDi>
  setBand(bandParameter);
   d5044:	4b0b      	ldr	r3, [pc, #44]	; (d5074 <_Z10radioSetupv+0x4c>)
   d5046:	6818      	ldr	r0, [r3, #0]
   d5048:	f7ff fd24 	bl	d4a94 <_Z7setBandi>
  setParameter(radioParameter);
   d504c:	4b0a      	ldr	r3, [pc, #40]	; (d5078 <_Z10radioSetupv+0x50>)
   d504e:	6818      	ldr	r0, [r3, #0]
   d5050:	f7ff fc96 	bl	d4980 <_Z12setParameteri>
  setIPR(baudRate);
   d5054:	4b09      	ldr	r3, [pc, #36]	; (d507c <_Z10radioSetupv+0x54>)
   d5056:	6818      	ldr	r0, [r3, #0]
   d5058:	f7ff fc06 	bl	d4868 <_Z6setIPRi>
  setCRFOP(outputPower);
   d505c:	4b08      	ldr	r3, [pc, #32]	; (d5080 <_Z10radioSetupv+0x58>)
   d505e:	6818      	ldr	r0, [r3, #0]
   d5060:	f7ff ff56 	bl	d4f10 <_Z8setCRFOPi>
}
   d5064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setCPIN();
   d5068:	f7ff bebe 	b.w	d4de8 <_Z7setCPINv>
   d506c:	2003d5a8 	.word	0x2003d5a8
   d5070:	2003d5b8 	.word	0x2003d5b8
   d5074:	2003e398 	.word	0x2003e398
   d5078:	2003e404 	.word	0x2003e404
   d507c:	2003d5ac 	.word	0x2003d5ac
   d5080:	2003d5bc 	.word	0x2003d5bc

000d5084 <setup>:
{
   d5084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RGB.control(TRUE);
   d5086:	2001      	movs	r0, #1
  switch (probeNumber)
   d5088:	4e4f      	ldr	r6, [pc, #316]	; (d51c8 <setup+0x144>)
  RGB.control(TRUE);
   d508a:	f001 ff39 	bl	d6f00 <_ZN8RGBClass7controlEb>
  RGB.brightness(10);
   d508e:	2101      	movs	r1, #1
   d5090:	200a      	movs	r0, #10
   d5092:	f001 ff58 	bl	d6f46 <_ZN8RGBClass10brightnessEhb>
  switch (probeNumber)
   d5096:	6833      	ldr	r3, [r6, #0]
   d5098:	2b07      	cmp	r3, #7
   d509a:	d855      	bhi.n	d5148 <setup+0xc4>
   d509c:	e8df f003 	tbb	[pc, r3]
   d50a0:	433f0704 	.word	0x433f0704
   d50a4:	514d4b47 	.word	0x514d4b47
    RGB.color(255, 255, 255); // 
   d50a8:	22ff      	movs	r2, #255	; 0xff
    RGB.color(255, 0, 0); // red!
   d50aa:	4611      	mov	r1, r2
   d50ac:	e03d      	b.n	d512a <setup+0xa6>
    RGB.color(0, 0, 255); // blue!
   d50ae:	22ff      	movs	r2, #255	; 0xff
   d50b0:	2100      	movs	r1, #0
   d50b2:	4608      	mov	r0, r1
   d50b4:	f001 ff34 	bl	d6f20 <_ZN8RGBClass5colorEiii>
  Serial.begin(9600);
   d50b8:	f001 fb40 	bl	d673c <_Z16_fetch_usbserialv>
   d50bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d50c0:	f001 fb30 	bl	d6724 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d50c4:	f001 faae 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d50c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d50cc:	f001 faa6 	bl	d661c <_ZN11USARTSerial5beginEm>
  delay(1000);
   d50d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d50d4:	f001 ff4c 	bl	d6f70 <delay>
  pinMode(THERMISTORPIN, INPUT);
   d50d8:	2100      	movs	r1, #0
   d50da:	2013      	movs	r0, #19
   d50dc:	f002 fa4c 	bl	d7578 <pinMode>
  serialPrint = true;      // serial print to screen
   d50e0:	4b3a      	ldr	r3, [pc, #232]	; (d51cc <setup+0x148>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d50e2:	4d3b      	ldr	r5, [pc, #236]	; (d51d0 <setup+0x14c>)
   d50e4:	2201      	movs	r2, #1
   d50e6:	701a      	strb	r2, [r3, #0]
  particlePublish = false; // publish to particle cloud
   d50e8:	4a3a      	ldr	r2, [pc, #232]	; (d51d4 <setup+0x150>)
   d50ea:	2300      	movs	r3, #0
   d50ec:	7013      	strb	r3, [r2, #0]
  askSetting = false;      // ask lora setting values
   d50ee:	4a3a      	ldr	r2, [pc, #232]	; (d51d8 <setup+0x154>)
   d50f0:	7013      	strb	r3, [r2, #0]
  atTest();
   d50f2:	f7ff fa5b 	bl	d45ac <_Z6atTestv>
  radioSetup(); // start lora module
   d50f6:	f7ff ff97 	bl	d5028 <_Z10radioSetupv>
   d50fa:	7d2b      	ldrb	r3, [r5, #20]
   d50fc:	2b00      	cmp	r3, #0
   d50fe:	d03a      	beq.n	d5176 <setup+0xf2>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5100:	2302      	movs	r3, #2
   d5102:	722b      	strb	r3, [r5, #8]
      .duration(lowPowerTime * 60000); // minutes to milliseconds
   d5104:	4b35      	ldr	r3, [pc, #212]	; (d51dc <setup+0x158>)
   d5106:	681b      	ldr	r3, [r3, #0]
   d5108:	f64e 2760 	movw	r7, #60000	; 0xea60
   d510c:	435f      	muls	r7, r3
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d510e:	682b      	ldr	r3, [r5, #0]
   d5110:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d5112:	b1eb      	cbz	r3, d5150 <setup+0xcc>
            if (start->type == type) {
   d5114:	889a      	ldrh	r2, [r3, #4]
   d5116:	2a04      	cmp	r2, #4
   d5118:	d053      	beq.n	d51c2 <setup+0x13e>
            start = start->next;
   d511a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d511c:	e7f9      	b.n	d5112 <setup+0x8e>
    RGB.color(25, 255, 88); // green!
   d511e:	2258      	movs	r2, #88	; 0x58
   d5120:	21ff      	movs	r1, #255	; 0xff
   d5122:	2019      	movs	r0, #25
   d5124:	e7c6      	b.n	d50b4 <setup+0x30>
    RGB.color(255, 69, 0); // orange!
   d5126:	2200      	movs	r2, #0
   d5128:	2145      	movs	r1, #69	; 0x45
    RGB.color(255, 0, 0); // red!
   d512a:	20ff      	movs	r0, #255	; 0xff
   d512c:	e7c2      	b.n	d50b4 <setup+0x30>
    RGB.color(160, 32, 240); // purple!
   d512e:	22f0      	movs	r2, #240	; 0xf0
   d5130:	2120      	movs	r1, #32
   d5132:	20a0      	movs	r0, #160	; 0xa0
   d5134:	e7be      	b.n	d50b4 <setup+0x30>
    RGB.color(255, 0, 0); // red!
   d5136:	2200      	movs	r2, #0
   d5138:	e7b7      	b.n	d50aa <setup+0x26>
    RGB.color(115, 147, 179); // grey!
   d513a:	22b3      	movs	r2, #179	; 0xb3
   d513c:	2193      	movs	r1, #147	; 0x93
   d513e:	2073      	movs	r0, #115	; 0x73
   d5140:	e7b8      	b.n	d50b4 <setup+0x30>
    RGB.color(255, 255, 0); // yellow
   d5142:	2200      	movs	r2, #0
   d5144:	21ff      	movs	r1, #255	; 0xff
   d5146:	e7b4      	b.n	d50b2 <setup+0x2e>
    RGB.control(FALSE);
   d5148:	2000      	movs	r0, #0
   d514a:	f001 fed9 	bl	d6f00 <_ZN8RGBClass7controlEb>
    break;
   d514e:	e7b3      	b.n	d50b8 <setup+0x34>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d5150:	4923      	ldr	r1, [pc, #140]	; (d51e0 <setup+0x15c>)
   d5152:	2010      	movs	r0, #16
   d5154:	f002 fa53 	bl	d75fe <_ZnwjRKSt9nothrow_t>
   d5158:	4604      	mov	r4, r0
   d515a:	2800      	cmp	r0, #0
   d515c:	d02f      	beq.n	d51be <setup+0x13a>
   d515e:	2210      	movs	r2, #16
   d5160:	2100      	movs	r1, #0
   d5162:	f003 f813 	bl	d818c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d5166:	4b1f      	ldr	r3, [pc, #124]	; (d51e4 <setup+0x160>)
   d5168:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d516a:	2304      	movs	r3, #4
   d516c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d516e:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d5170:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d5172:	e9c4 3702 	strd	r3, r7, [r4, #8]
  counter = 0;
   d5176:	4b1c      	ldr	r3, [pc, #112]	; (d51e8 <setup+0x164>)
  Serial.printf("Gps status is %i\n", gpsOn);
   d5178:	4d1c      	ldr	r5, [pc, #112]	; (d51ec <setup+0x168>)
  counter = 0;
   d517a:	2400      	movs	r4, #0
   d517c:	601c      	str	r4, [r3, #0]
  Wire.begin();
   d517e:	f002 f999 	bl	d74b4 <_Z19__fetch_global_Wirev>
   d5182:	f001 f9cd 	bl	d6520 <_ZN7TwoWire5beginEv>
  i2cScan();
   d5186:	f7ff f83d 	bl	d4204 <_Z7i2cScanv>
  Serial.printf("Gps status is %i\n", gpsOn);
   d518a:	f001 fad7 	bl	d673c <_Z16_fetch_usbserialv>
   d518e:	782a      	ldrb	r2, [r5, #0]
   d5190:	4917      	ldr	r1, [pc, #92]	; (d51f0 <setup+0x16c>)
   d5192:	f7fe ff9d 	bl	d40d0 <_ZN5Print6printfEPKcz>
  if (gpsOn)
   d5196:	782b      	ldrb	r3, [r5, #0]
   d5198:	b183      	cbz	r3, d51bc <setup+0x138>
    GPS.begin(0x10); // The I2C address to use is 0x10
   d519a:	2110      	movs	r1, #16
   d519c:	4815      	ldr	r0, [pc, #84]	; (d51f4 <setup+0x170>)
   d519e:	f000 f8fb 	bl	d5398 <_ZN12Adafruit_GPS5beginEm>
    GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d51a2:	4915      	ldr	r1, [pc, #84]	; (d51f8 <setup+0x174>)
   d51a4:	4813      	ldr	r0, [pc, #76]	; (d51f4 <setup+0x170>)
   d51a6:	f000 fa9f 	bl	d56e8 <_ZN12Adafruit_GPS11sendCommandEPKc>
    GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
   d51aa:	4914      	ldr	r1, [pc, #80]	; (d51fc <setup+0x178>)
   d51ac:	4811      	ldr	r0, [pc, #68]	; (d51f4 <setup+0x170>)
   d51ae:	f000 fa9b 	bl	d56e8 <_ZN12Adafruit_GPS11sendCommandEPKc>
    GPS.sendCommand(PGCMD_ANTENNA);
   d51b2:	4913      	ldr	r1, [pc, #76]	; (d5200 <setup+0x17c>)
   d51b4:	480f      	ldr	r0, [pc, #60]	; (d51f4 <setup+0x170>)
   d51b6:	f000 fa97 	bl	d56e8 <_ZN12Adafruit_GPS11sendCommandEPKc>
    probeNumber = 0;
   d51ba:	6034      	str	r4, [r6, #0]
}
   d51bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                valid_ = false;
   d51be:	7528      	strb	r0, [r5, #20]
                return *this;
   d51c0:	e7d9      	b.n	d5176 <setup+0xf2>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d51c2:	60df      	str	r7, [r3, #12]
                return *this;
   d51c4:	e7d7      	b.n	d5176 <setup+0xf2>
   d51c6:	bf00      	nop
   d51c8:	2003d5c0 	.word	0x2003d5c0
   d51cc:	2003e59c 	.word	0x2003e59c
   d51d0:	2003e3d4 	.word	0x2003e3d4
   d51d4:	2003e400 	.word	0x2003e400
   d51d8:	2003e38c 	.word	0x2003e38c
   d51dc:	2003d5b4 	.word	0x2003d5b4
   d51e0:	000d8b08 	.word	0x000d8b08
   d51e4:	00030010 	.word	0x00030010
   d51e8:	2003e3ec 	.word	0x2003e3ec
   d51ec:	2003e3f0 	.word	0x2003e3f0
   d51f0:	000d87c8 	.word	0x000d87c8
   d51f4:	2003d7f8 	.word	0x2003d7f8
   d51f8:	000d87da 	.word	0x000d87da
   d51fc:	000d880c 	.word	0x000d880c
   d5200:	000d881d 	.word	0x000d881d

000d5204 <_GLOBAL__sub_I_GPS>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5204:	4b11      	ldr	r3, [pc, #68]	; (d524c <_GLOBAL__sub_I_GPS+0x48>)
  //   Serial.printf("Awaiting Reply from mode?\n");
  //   reply = Serial1.readStringUntil('\n');
  //   Serial.printf("Reply: %s\n", reply.c_str());
  //   delay(1000);
  // }
   d5206:	b510      	push	{r4, lr}
   d5208:	2400      	movs	r4, #0
   d520a:	701c      	strb	r4, [r3, #0]
Adafruit_GPS GPS(&Wire);
   d520c:	f002 f952 	bl	d74b4 <_Z19__fetch_global_Wirev>
   d5210:	4601      	mov	r1, r0
   d5212:	480f      	ldr	r0, [pc, #60]	; (d5250 <_GLOBAL__sub_I_GPS+0x4c>)
   d5214:	f000 f92c 	bl	d5470 <_ZN12Adafruit_GPSC1EP7TwoWire>
        : config_(config) {
   d5218:	4b0e      	ldr	r3, [pc, #56]	; (d5254 <_GLOBAL__sub_I_GPS+0x50>)
   d521a:	461a      	mov	r2, r3
   d521c:	1d19      	adds	r1, r3, #4
   d521e:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d5222:	f8a3 4009 	strh.w	r4, [r3, #9]
   d5226:	7094      	strb	r4, [r2, #2]
   d5228:	2201      	movs	r2, #1
   d522a:	751a      	strb	r2, [r3, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d522c:	4a0a      	ldr	r2, [pc, #40]	; (d5258 <_GLOBAL__sub_I_GPS+0x54>)
   d522e:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5230:	721c      	strb	r4, [r3, #8]
        config_.wakeup_sources = nullptr;
   d5232:	e9c3 4403 	strd	r4, r4, [r3, #12]
              error_(SYSTEM_ERROR_NONE) {
   d5236:	4b09      	ldr	r3, [pc, #36]	; (d525c <_GLOBAL__sub_I_GPS+0x58>)
    SleepResult() {}
   d5238:	4a09      	ldr	r2, [pc, #36]	; (d5260 <_GLOBAL__sub_I_GPS+0x5c>)
              error_(SYSTEM_ERROR_NONE) {
   d523a:	601c      	str	r4, [r3, #0]
   d523c:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d523e:	719c      	strb	r4, [r3, #6]
   d5240:	609a      	str	r2, [r3, #8]
   d5242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        set_system_mode(mode);
   d5246:	2002      	movs	r0, #2
   d5248:	f000 bef8 	b.w	d603c <set_system_mode>
   d524c:	2003e384 	.word	0x2003e384
   d5250:	2003d7f8 	.word	0x2003d7f8
   d5254:	2003e3d4 	.word	0x2003e3d4
   d5258:	00030010 	.word	0x00030010
   d525c:	2003e378 	.word	0x2003e378
   d5260:	ffff0000 	.word	0xffff0000

000d5264 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5264:	4770      	bx	lr

000d5266 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5266:	b510      	push	{r4, lr}
  }
   d5268:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d526a:	4604      	mov	r4, r0
  }
   d526c:	f002 f9c5 	bl	d75fa <_ZdlPvj>
   d5270:	4620      	mov	r0, r4
   d5272:	bd10      	pop	{r4, pc}

000d5274 <_ZN12Adafruit_GPSD1Ev>:
/*!
    @brief    Destroy the object.
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
   d5274:	4b06      	ldr	r3, [pc, #24]	; (d5290 <_ZN12Adafruit_GPSD1Ev+0x1c>)
   d5276:	b513      	push	{r0, r1, r4, lr}
   d5278:	6003      	str	r3, [r0, #0]
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
   d527a:	2400      	movs	r4, #0
    removeHistory((nmea_index_t)i); // to free any history mallocs
   d527c:	b2e1      	uxtb	r1, r4
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
   d527e:	3401      	adds	r4, #1
    removeHistory((nmea_index_t)i); // to free any history mallocs
   d5280:	9001      	str	r0, [sp, #4]
   d5282:	f000 fca7 	bl	d5bd4 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
   d5286:	2c40      	cmp	r4, #64	; 0x40
   d5288:	9801      	ldr	r0, [sp, #4]
   d528a:	d1f7      	bne.n	d527c <_ZN12Adafruit_GPSD1Ev+0x8>
#endif
}
   d528c:	b002      	add	sp, #8
   d528e:	bd10      	pop	{r4, pc}
   d5290:	000d8934 	.word	0x000d8934

000d5294 <_ZN12Adafruit_GPSD0Ev>:
Adafruit_GPS::~Adafruit_GPS() {
   d5294:	b510      	push	{r4, lr}
   d5296:	4604      	mov	r4, r0
}
   d5298:	f7ff ffec 	bl	d5274 <_ZN12Adafruit_GPSD1Ev>
   d529c:	4620      	mov	r0, r4
   d529e:	f44f 6138 	mov.w	r1, #2944	; 0xb80
   d52a2:	f002 f9aa 	bl	d75fa <_ZdlPvj>
   d52a6:	4620      	mov	r0, r4
   d52a8:	bd10      	pop	{r4, pc}

000d52aa <_ZN12Adafruit_GPS5writeEh>:
   functionality
    @param c A single byte to send
    @return Bytes written - 1 on success, 0 on failure
*/
/**************************************************************************/
size_t Adafruit_GPS::write(uint8_t c) {
   d52aa:	b570      	push	{r4, r5, r6, lr}
   d52ac:	4604      	mov	r4, r0
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    return gpsSwSerial->write(c);
  }
#endif
  if (gpsHwSerial) {
   d52ae:	f8d0 09d4 	ldr.w	r0, [r0, #2516]	; 0x9d4
size_t Adafruit_GPS::write(uint8_t c) {
   d52b2:	460e      	mov	r6, r1
  if (gpsHwSerial) {
   d52b4:	b120      	cbz	r0, d52c0 <_ZN12Adafruit_GPS5writeEh+0x16>
    return gpsHwSerial->write(c);
  }
  if (gpsStream) {
    return gpsStream->write(c);
   d52b6:	6803      	ldr	r3, [r0, #0]
    gpsSPI->endTransaction();
    return 1;
  }

  return 0;
}
   d52b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return gpsStream->write(c);
   d52bc:	689b      	ldr	r3, [r3, #8]
   d52be:	4718      	bx	r3
  if (gpsStream) {
   d52c0:	f8d4 09d8 	ldr.w	r0, [r4, #2520]	; 0x9d8
   d52c4:	2800      	cmp	r0, #0
   d52c6:	d1f6      	bne.n	d52b6 <_ZN12Adafruit_GPS5writeEh+0xc>
  if (gpsI2C) {
   d52c8:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d52cc:	bb08      	cbnz	r0, d5312 <_ZN12Adafruit_GPS5writeEh+0x68>
  if (gpsSPI) {
   d52ce:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d52d2:	b358      	cbz	r0, d532c <_ZN12Adafruit_GPS5writeEh+0x82>
    gpsSPI->beginTransaction(gpsSPI_settings);
   d52d4:	f604 11e8 	addw	r1, r4, #2536	; 0x9e8
   d52d8:	f001 f870 	bl	d63bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    if (gpsSPI_cs >= 0) {
   d52dc:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
   d52e0:	2800      	cmp	r0, #0
   d52e2:	db03      	blt.n	d52ec <_ZN12Adafruit_GPS5writeEh+0x42>
      digitalWrite(gpsSPI_cs, LOW);
   d52e4:	2100      	movs	r1, #0
   d52e6:	b280      	uxth	r0, r0
   d52e8:	f002 f957 	bl	d759a <digitalWrite>
    c = gpsSPI->transfer(c);
   d52ec:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d52f0:	4631      	mov	r1, r6
   d52f2:	f001 f8d1 	bl	d6498 <_ZN8SPIClass8transferEh>
    if (gpsSPI_cs >= 0) {
   d52f6:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
   d52fa:	2800      	cmp	r0, #0
   d52fc:	db03      	blt.n	d5306 <_ZN12Adafruit_GPS5writeEh+0x5c>
      digitalWrite(gpsSPI_cs, HIGH);
   d52fe:	2101      	movs	r1, #1
   d5300:	b280      	uxth	r0, r0
   d5302:	f002 f94a 	bl	d759a <digitalWrite>
    gpsSPI->endTransaction();
   d5306:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d530a:	f001 f83e 	bl	d638a <_ZN8SPIClass14endTransactionEv>
    return 1;
   d530e:	2501      	movs	r5, #1
   d5310:	e00d      	b.n	d532e <_ZN12Adafruit_GPS5writeEh+0x84>
    gpsI2C->beginTransmission(_i2caddr);
   d5312:	f894 1a5c 	ldrb.w	r1, [r4, #2652]	; 0xa5c
   d5316:	f001 f909 	bl	d652c <_ZN7TwoWire17beginTransmissionEh>
    if (gpsI2C->write(c) != 1) {
   d531a:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d531e:	6803      	ldr	r3, [r0, #0]
   d5320:	4631      	mov	r1, r6
   d5322:	689b      	ldr	r3, [r3, #8]
   d5324:	4798      	blx	r3
   d5326:	2801      	cmp	r0, #1
   d5328:	4605      	mov	r5, r0
   d532a:	d002      	beq.n	d5332 <_ZN12Adafruit_GPS5writeEh+0x88>
      return 0;
   d532c:	2500      	movs	r5, #0
}
   d532e:	4628      	mov	r0, r5
   d5330:	bd70      	pop	{r4, r5, r6, pc}
    if (gpsI2C->endTransmission(true) == 0) {
   d5332:	4601      	mov	r1, r0
   d5334:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d5338:	f001 f8fc 	bl	d6534 <_ZN7TwoWire15endTransmissionEh>
   d533c:	2800      	cmp	r0, #0
   d533e:	d1c6      	bne.n	d52ce <_ZN12Adafruit_GPS5writeEh+0x24>
   d5340:	e7f5      	b.n	d532e <_ZN12Adafruit_GPS5writeEh+0x84>
	...

000d5344 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5344:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5346:	4604      	mov	r4, r0
   d5348:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d534a:	7922      	ldrb	r2, [r4, #4]
   d534c:	68a3      	ldr	r3, [r4, #8]
   d534e:	b132      	cbz	r2, d535e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5350:	b9a3      	cbnz	r3, d537c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5352:	490b      	ldr	r1, [pc, #44]	; (d5380 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5354:	b002      	add	sp, #8
   d5356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d535a:	f001 be77 	b.w	d704c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d535e:	4a09      	ldr	r2, [pc, #36]	; (d5384 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5360:	7b26      	ldrb	r6, [r4, #12]
   d5362:	4d09      	ldr	r5, [pc, #36]	; (d5388 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5364:	4909      	ldr	r1, [pc, #36]	; (d538c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5366:	7b64      	ldrb	r4, [r4, #13]
   d5368:	2e01      	cmp	r6, #1
   d536a:	bf18      	it	ne
   d536c:	4629      	movne	r1, r5
   d536e:	e9cd 1400 	strd	r1, r4, [sp]
   d5372:	4907      	ldr	r1, [pc, #28]	; (d5390 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5374:	f7fe feac 	bl	d40d0 <_ZN5Print6printfEPKcz>
  }
   d5378:	b002      	add	sp, #8
   d537a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d537c:	4a05      	ldr	r2, [pc, #20]	; (d5394 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d537e:	e7ef      	b.n	d5360 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5380:	000d8850 	.word	0x000d8850
   d5384:	000d8653 	.word	0x000d8653
   d5388:	000d884c 	.word	0x000d884c
   d538c:	000d8848 	.word	0x000d8848
   d5390:	000d8866 	.word	0x000d8866
   d5394:	000d883f 	.word	0x000d883f

000d5398 <_ZN12Adafruit_GPS5beginEm>:
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
   d5398:	b570      	push	{r4, r5, r6, lr}
   d539a:	4604      	mov	r4, r0
  if (gpsHwSerial) {
   d539c:	f8d0 09d4 	ldr.w	r0, [r0, #2516]	; 0x9d4
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
   d53a0:	460d      	mov	r5, r1
  if (gpsHwSerial) {
   d53a2:	b108      	cbz	r0, d53a8 <_ZN12Adafruit_GPS5beginEm+0x10>
    gpsHwSerial->begin(baud_or_i2caddr);
   d53a4:	f001 f93a 	bl	d661c <_ZN11USARTSerial5beginEm>
  if (gpsI2C) {
   d53a8:	f8d4 69dc 	ldr.w	r6, [r4, #2524]	; 0x9dc
   d53ac:	b1a6      	cbz	r6, d53d8 <_ZN12Adafruit_GPS5beginEm+0x40>
    gpsI2C->begin();
   d53ae:	4630      	mov	r0, r6
   d53b0:	f001 f8b6 	bl	d6520 <_ZN7TwoWire5beginEv>
    if (baud_or_i2caddr > 0x7F) {
   d53b4:	2d80      	cmp	r5, #128	; 0x80
   d53b6:	bf28      	it	cs
   d53b8:	2510      	movcs	r5, #16
   d53ba:	b2e9      	uxtb	r1, r5
    gpsI2C->beginTransmission(_i2caddr);
   d53bc:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d53c0:	f884 1a5c 	strb.w	r1, [r4, #2652]	; 0xa5c
   d53c4:	f001 f8b2 	bl	d652c <_ZN7TwoWire17beginTransmissionEh>
    return (gpsI2C->endTransmission() == 0);
   d53c8:	f8d4 09dc 	ldr.w	r0, [r4, #2524]	; 0x9dc
   d53cc:	f001 f8b6 	bl	d653c <_ZN7TwoWire15endTransmissionEv>
   d53d0:	fab0 f080 	clz	r0, r0
   d53d4:	0940      	lsrs	r0, r0, #5
}
   d53d6:	bd70      	pop	{r4, r5, r6, pc}
  if (gpsSPI) {
   d53d8:	f8d4 09e0 	ldr.w	r0, [r4, #2528]	; 0x9e0
   d53dc:	b1a8      	cbz	r0, d540a <_ZN12Adafruit_GPS5beginEm+0x72>
    gpsSPI->begin();
   d53de:	f000 ffc3 	bl	d6368 <_ZN8SPIClass5beginEv>
    if (gpsSPI_cs >= 0) {
   d53e2:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
class SPISettings : public Printable {
   d53e6:	f884 69ec 	strb.w	r6, [r4, #2540]	; 0x9ec
   d53ea:	2101      	movs	r1, #1
   d53ec:	2800      	cmp	r0, #0
   d53ee:	f8c4 59f0 	str.w	r5, [r4, #2544]	; 0x9f0
   d53f2:	f8a4 19f4 	strh.w	r1, [r4, #2548]	; 0x9f4
   d53f6:	db08      	blt.n	d540a <_ZN12Adafruit_GPS5beginEm+0x72>
      pinMode(gpsSPI_cs, OUTPUT);
   d53f8:	b280      	uxth	r0, r0
   d53fa:	f002 f8bd 	bl	d7578 <pinMode>
      digitalWrite(gpsSPI_cs, HIGH);
   d53fe:	f994 09e4 	ldrsb.w	r0, [r4, #2532]	; 0x9e4
   d5402:	2101      	movs	r1, #1
   d5404:	b280      	uxth	r0, r0
   d5406:	f002 f8c8 	bl	d759a <digitalWrite>
  delay(10);
   d540a:	200a      	movs	r0, #10
   d540c:	f001 fdb0 	bl	d6f70 <delay>
   d5410:	2001      	movs	r0, #1
   d5412:	e7e0      	b.n	d53d6 <_ZN12Adafruit_GPS5beginEm+0x3e>

000d5414 <_ZN12Adafruit_GPS11common_initEv>:
  currentline = line1;
   d5414:	f500 6128 	add.w	r1, r0, #2688	; 0xa80
   d5418:	f8c0 1b74 	str.w	r1, [r0, #2932]	; 0xb74
  lastline = line2;
   d541c:	f600 21f8 	addw	r1, r0, #2808	; 0xaf8
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d5420:	2200      	movs	r2, #0
  lastline = line2;
   d5422:	f8c0 1b78 	str.w	r1, [r0, #2936]	; 0xb78
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
   d5426:	2100      	movs	r1, #0
  recvdflag = false;
   d5428:	f880 2b7c 	strb.w	r2, [r0, #2940]	; 0xb7c
  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
   d542c:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d5430:	f8c0 29d4 	str.w	r2, [r0, #2516]	; 0x9d4
  gpsStream = NULL;   // port pointer in corresponding constructor
   d5434:	f8c0 29d8 	str.w	r2, [r0, #2520]	; 0x9d8
  gpsI2C = NULL;
   d5438:	f8c0 29dc 	str.w	r2, [r0, #2524]	; 0x9dc
  gpsSPI = NULL;
   d543c:	f8c0 29e0 	str.w	r2, [r0, #2528]	; 0x9e0
  paused = false;
   d5440:	f880 29d0 	strb.w	r2, [r0, #2512]	; 0x9d0
  lineidx = 0;
   d5444:	f880 2b70 	strb.w	r2, [r0, #2928]	; 0xb70
  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
   d5448:	8742      	strh	r2, [r0, #58]	; 0x3a
   d544a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  milliseconds = 0;             // uint16_t
   d544e:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
   d5450:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
   d5454:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
   d5458:	65c1      	str	r1, [r0, #92]	; 0x5c
   d545a:	6601      	str	r1, [r0, #96]	; 0x60
   d545c:	6641      	str	r1, [r0, #100]	; 0x64
   d545e:	6681      	str	r1, [r0, #104]	; 0x68
   d5460:	66c1      	str	r1, [r0, #108]	; 0x6c
      HDOP = VDOP = PDOP = 0.0; // nmea_float_t
   d5462:	6701      	str	r1, [r0, #112]	; 0x70
   d5464:	6741      	str	r1, [r0, #116]	; 0x74
   d5466:	6781      	str	r1, [r0, #120]	; 0x78
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
   d5468:	6481      	str	r1, [r0, #72]	; 0x48
   d546a:	6441      	str	r1, [r0, #68]	; 0x44
  data_init();
   d546c:	f000 b976 	b.w	d575c <_ZN12Adafruit_GPS9data_initEv>

000d5470 <_ZN12Adafruit_GPSC1EP7TwoWire>:
Adafruit_GPS::Adafruit_GPS(TwoWire *theWire) {
   d5470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5474:	4b77      	ldr	r3, [pc, #476]	; (d5654 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1e4>)
   d5476:	6003      	str	r3, [r0, #0]
   d5478:	4604      	mov	r4, r0
    Print() : write_error(0) {}
   d547a:	2500      	movs	r5, #0
   d547c:	6045      	str	r5, [r0, #4]
   d547e:	6085      	str	r5, [r0, #8]
   d5480:	8185      	strh	r5, [r0, #12]
   d5482:	7385      	strb	r5, [r0, #14]
   d5484:	2214      	movs	r2, #20
   d5486:	4688      	mov	r8, r1
   d5488:	300f      	adds	r0, #15
   d548a:	4629      	mov	r1, r5
   d548c:	f002 fe7e 	bl	d818c <memset>
   d5490:	2214      	movs	r2, #20
   d5492:	4629      	mov	r1, r5
   d5494:	f8a4 5023 	strh.w	r5, [r4, #35]	; 0x23
   d5498:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
   d549c:	f104 0026 	add.w	r0, r4, #38	; 0x26
   d54a0:	f002 fe74 	bl	d818c <memset>
   d54a4:	f645 0358 	movw	r3, #22616	; 0x5858
   d54a8:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
   d54ac:	2358      	movs	r3, #88	; 0x58
   d54ae:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
   d54b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d54b6:	4629      	mov	r1, r5
   d54b8:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d54bc:	f002 fe66 	bl	d818c <memset>
   d54c0:	4623      	mov	r3, r4
   d54c2:	f504 6200 	add.w	r2, r4, #2048	; 0x800
   d54c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d54ca:	f8a3 109c 	strh.w	r1, [r3, #156]	; 0x9c
   d54ce:	3320      	adds	r3, #32
   d54d0:	4293      	cmp	r3, r2
   d54d2:	d1fa      	bne.n	d54ca <_ZN12Adafruit_GPSC1EP7TwoWire+0x5a>
   d54d4:	f504 6309 	add.w	r3, r4, #2192	; 0x890
   d54d8:	4a5f      	ldr	r2, [pc, #380]	; (d5658 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1e8>)
   d54da:	601a      	str	r2, [r3, #0]
   d54dc:	f604 0394 	addw	r3, r4, #2196	; 0x894
   d54e0:	2200      	movs	r2, #0
   d54e2:	601a      	str	r2, [r3, #0]
   d54e4:	2100      	movs	r1, #0
   d54e6:	2214      	movs	r2, #20
   d54e8:	f604 0098 	addw	r0, r4, #2200	; 0x898
   d54ec:	f002 fe4e 	bl	d818c <memset>
   d54f0:	4f5a      	ldr	r7, [pc, #360]	; (d565c <_ZN12Adafruit_GPSC1EP7TwoWire+0x1ec>)
   d54f2:	2214      	movs	r2, #20
   d54f4:	2100      	movs	r1, #0
   d54f6:	f604 00ac 	addw	r0, r4, #2220	; 0x8ac
   d54fa:	f002 fe47 	bl	d818c <memset>
   d54fe:	223f      	movs	r2, #63	; 0x3f
   d5500:	2100      	movs	r1, #0
   d5502:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
   d5506:	f002 fe41 	bl	d818c <memset>
   d550a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d550c:	2500      	movs	r5, #0
   d550e:	f604 160c 	addw	r6, r4, #2316	; 0x90c
   d5512:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
   d5516:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
   d551a:	f8c4 5908 	str.w	r5, [r4, #2312]	; 0x908
   d551e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5520:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   d5524:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   d5528:	4629      	mov	r1, r5
   d552a:	2254      	movs	r2, #84	; 0x54
   d552c:	f604 1028 	addw	r0, r4, #2344	; 0x928
   d5530:	f002 fe2c 	bl	d818c <memset>
   d5534:	4b4a      	ldr	r3, [pc, #296]	; (d5660 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1f0>)
   d5536:	f8c4 3928 	str.w	r3, [r4, #2344]	; 0x928
   d553a:	4b4a      	ldr	r3, [pc, #296]	; (d5664 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1f4>)
   d553c:	f8c4 392c 	str.w	r3, [r4, #2348]	; 0x92c
   d5540:	4b49      	ldr	r3, [pc, #292]	; (d5668 <_ZN12Adafruit_GPSC1EP7TwoWire+0x1f8>)
   d5542:	f8c4 3930 	str.w	r3, [r4, #2352]	; 0x930
   d5546:	4b49      	ldr	r3, [pc, #292]	; (d566c <_ZN12Adafruit_GPSC1EP7TwoWire+0x1fc>)
   d5548:	f8c4 3934 	str.w	r3, [r4, #2356]	; 0x934
   d554c:	4b48      	ldr	r3, [pc, #288]	; (d5670 <_ZN12Adafruit_GPSC1EP7TwoWire+0x200>)
   d554e:	f8c4 3938 	str.w	r3, [r4, #2360]	; 0x938
   d5552:	4b48      	ldr	r3, [pc, #288]	; (d5674 <_ZN12Adafruit_GPSC1EP7TwoWire+0x204>)
   d5554:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
   d5558:	4b47      	ldr	r3, [pc, #284]	; (d5678 <_ZN12Adafruit_GPSC1EP7TwoWire+0x208>)
   d555a:	f8c4 3940 	str.w	r3, [r4, #2368]	; 0x940
   d555e:	4b47      	ldr	r3, [pc, #284]	; (d567c <_ZN12Adafruit_GPSC1EP7TwoWire+0x20c>)
   d5560:	f8c4 3944 	str.w	r3, [r4, #2372]	; 0x944
   d5564:	4b46      	ldr	r3, [pc, #280]	; (d5680 <_ZN12Adafruit_GPSC1EP7TwoWire+0x210>)
   d5566:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
   d556a:	4b46      	ldr	r3, [pc, #280]	; (d5684 <_ZN12Adafruit_GPSC1EP7TwoWire+0x214>)
   d556c:	f8c4 394c 	str.w	r3, [r4, #2380]	; 0x94c
   d5570:	4b45      	ldr	r3, [pc, #276]	; (d5688 <_ZN12Adafruit_GPSC1EP7TwoWire+0x218>)
   d5572:	f8c4 3950 	str.w	r3, [r4, #2384]	; 0x950
   d5576:	4b45      	ldr	r3, [pc, #276]	; (d568c <_ZN12Adafruit_GPSC1EP7TwoWire+0x21c>)
   d5578:	f8c4 3954 	str.w	r3, [r4, #2388]	; 0x954
   d557c:	4b44      	ldr	r3, [pc, #272]	; (d5690 <_ZN12Adafruit_GPSC1EP7TwoWire+0x220>)
   d557e:	f8c4 3958 	str.w	r3, [r4, #2392]	; 0x958
   d5582:	4b44      	ldr	r3, [pc, #272]	; (d5694 <_ZN12Adafruit_GPSC1EP7TwoWire+0x224>)
   d5584:	f8c4 395c 	str.w	r3, [r4, #2396]	; 0x95c
   d5588:	4b43      	ldr	r3, [pc, #268]	; (d5698 <_ZN12Adafruit_GPSC1EP7TwoWire+0x228>)
   d558a:	f8c4 3960 	str.w	r3, [r4, #2400]	; 0x960
   d558e:	4b43      	ldr	r3, [pc, #268]	; (d569c <_ZN12Adafruit_GPSC1EP7TwoWire+0x22c>)
   d5590:	f8c4 3964 	str.w	r3, [r4, #2404]	; 0x964
   d5594:	4b42      	ldr	r3, [pc, #264]	; (d56a0 <_ZN12Adafruit_GPSC1EP7TwoWire+0x230>)
   d5596:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
   d559a:	4b42      	ldr	r3, [pc, #264]	; (d56a4 <_ZN12Adafruit_GPSC1EP7TwoWire+0x234>)
   d559c:	4e42      	ldr	r6, [pc, #264]	; (d56a8 <_ZN12Adafruit_GPSC1EP7TwoWire+0x238>)
   d559e:	f8c4 396c 	str.w	r3, [r4, #2412]	; 0x96c
   d55a2:	4b42      	ldr	r3, [pc, #264]	; (d56ac <_ZN12Adafruit_GPSC1EP7TwoWire+0x23c>)
   d55a4:	f8c4 3970 	str.w	r3, [r4, #2416]	; 0x970
   d55a8:	4629      	mov	r1, r5
   d55aa:	f8c4 6974 	str.w	r6, [r4, #2420]	; 0x974
   d55ae:	223c      	movs	r2, #60	; 0x3c
   d55b0:	f604 107c 	addw	r0, r4, #2428	; 0x97c
   d55b4:	f002 fdea 	bl	d818c <memset>
   d55b8:	4b3d      	ldr	r3, [pc, #244]	; (d56b0 <_ZN12Adafruit_GPSC1EP7TwoWire+0x240>)
   d55ba:	f8c4 397c 	str.w	r3, [r4, #2428]	; 0x97c
   d55be:	4b3d      	ldr	r3, [pc, #244]	; (d56b4 <_ZN12Adafruit_GPSC1EP7TwoWire+0x244>)
   d55c0:	f8c4 3980 	str.w	r3, [r4, #2432]	; 0x980
   d55c4:	4b3c      	ldr	r3, [pc, #240]	; (d56b8 <_ZN12Adafruit_GPSC1EP7TwoWire+0x248>)
   d55c6:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
   d55ca:	4b3c      	ldr	r3, [pc, #240]	; (d56bc <_ZN12Adafruit_GPSC1EP7TwoWire+0x24c>)
   d55cc:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
   d55d0:	4b3b      	ldr	r3, [pc, #236]	; (d56c0 <_ZN12Adafruit_GPSC1EP7TwoWire+0x250>)
   d55d2:	f8c4 398c 	str.w	r3, [r4, #2444]	; 0x98c
   d55d6:	4b3b      	ldr	r3, [pc, #236]	; (d56c4 <_ZN12Adafruit_GPSC1EP7TwoWire+0x254>)
   d55d8:	f8c4 3990 	str.w	r3, [r4, #2448]	; 0x990
   d55dc:	4b3a      	ldr	r3, [pc, #232]	; (d56c8 <_ZN12Adafruit_GPSC1EP7TwoWire+0x258>)
   d55de:	f8c4 3994 	str.w	r3, [r4, #2452]	; 0x994
   d55e2:	4b3a      	ldr	r3, [pc, #232]	; (d56cc <_ZN12Adafruit_GPSC1EP7TwoWire+0x25c>)
   d55e4:	f8c4 3998 	str.w	r3, [r4, #2456]	; 0x998
   d55e8:	4b39      	ldr	r3, [pc, #228]	; (d56d0 <_ZN12Adafruit_GPSC1EP7TwoWire+0x260>)
   d55ea:	f8c4 399c 	str.w	r3, [r4, #2460]	; 0x99c
   d55ee:	4b39      	ldr	r3, [pc, #228]	; (d56d4 <_ZN12Adafruit_GPSC1EP7TwoWire+0x264>)
   d55f0:	f8c4 39a0 	str.w	r3, [r4, #2464]	; 0x9a0
      dataMode_{dataMode}
   d55f4:	4a38      	ldr	r2, [pc, #224]	; (d56d8 <_ZN12Adafruit_GPSC1EP7TwoWire+0x268>)
   d55f6:	4b39      	ldr	r3, [pc, #228]	; (d56dc <_ZN12Adafruit_GPSC1EP7TwoWire+0x26c>)
   d55f8:	f8c4 39a4 	str.w	r3, [r4, #2468]	; 0x9a4
   d55fc:	f8c4 29e8 	str.w	r2, [r4, #2536]	; 0x9e8
   d5600:	4b37      	ldr	r3, [pc, #220]	; (d56e0 <_ZN12Adafruit_GPSC1EP7TwoWire+0x270>)
   d5602:	4a38      	ldr	r2, [pc, #224]	; (d56e4 <_ZN12Adafruit_GPSC1EP7TwoWire+0x274>)
   d5604:	f8c4 39b8 	str.w	r3, [r4, #2488]	; 0x9b8
   d5608:	f8c4 39bc 	str.w	r3, [r4, #2492]	; 0x9bc
   d560c:	f8c4 39c0 	str.w	r3, [r4, #2496]	; 0x9c0
   d5610:	f8c4 39c4 	str.w	r3, [r4, #2500]	; 0x9c4
   d5614:	f8c4 39c8 	str.w	r3, [r4, #2504]	; 0x9c8
   d5618:	f8c4 39cc 	str.w	r3, [r4, #2508]	; 0x9cc
   d561c:	f8c4 29f0 	str.w	r2, [r4, #2544]	; 0x9f0
   d5620:	23ff      	movs	r3, #255	; 0xff
   d5622:	2201      	movs	r2, #1
  common_init();    // Set everything to common state, then...
   d5624:	4620      	mov	r0, r4
Adafruit_GPS::Adafruit_GPS(TwoWire *theWire) {
   d5626:	f8c4 69a8 	str.w	r6, [r4, #2472]	; 0x9a8
   d562a:	f884 59d1 	strb.w	r5, [r4, #2513]	; 0x9d1
   d562e:	f884 39e4 	strb.w	r3, [r4, #2532]	; 0x9e4
   d5632:	f884 59ec 	strb.w	r5, [r4, #2540]	; 0x9ec
   d5636:	f8a4 29f4 	strh.w	r2, [r4, #2548]	; 0x9f4
   d563a:	f884 3a7d 	strb.w	r3, [r4, #2685]	; 0xa7d
   d563e:	f8a4 5a7e 	strh.w	r5, [r4, #2686]	; 0xa7e
   d5642:	f884 5b70 	strb.w	r5, [r4, #2928]	; 0xb70
  common_init();    // Set everything to common state, then...
   d5646:	f7ff fee5 	bl	d5414 <_ZN12Adafruit_GPS11common_initEv>
  gpsI2C = theWire; // ...override gpsI2C
   d564a:	f8c4 89dc 	str.w	r8, [r4, #2524]	; 0x9dc
}
   d564e:	4620      	mov	r0, r4
   d5650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5654:	000d8934 	.word	0x000d8934
   d5658:	4019999a 	.word	0x4019999a
   d565c:	000d8910 	.word	0x000d8910
   d5660:	000d8883 	.word	0x000d8883
   d5664:	000d8887 	.word	0x000d8887
   d5668:	000d888b 	.word	0x000d888b
   d566c:	000d888f 	.word	0x000d888f
   d5670:	000d8893 	.word	0x000d8893
   d5674:	000d8897 	.word	0x000d8897
   d5678:	000d889b 	.word	0x000d889b
   d567c:	000d889f 	.word	0x000d889f
   d5680:	000d88a3 	.word	0x000d88a3
   d5684:	000d88a7 	.word	0x000d88a7
   d5688:	000d88ab 	.word	0x000d88ab
   d568c:	000d88af 	.word	0x000d88af
   d5690:	000d88b3 	.word	0x000d88b3
   d5694:	000d88b7 	.word	0x000d88b7
   d5698:	000d88bb 	.word	0x000d88bb
   d569c:	000d88bf 	.word	0x000d88bf
   d56a0:	000d88c3 	.word	0x000d88c3
   d56a4:	000d88c7 	.word	0x000d88c7
   d56a8:	000d883b 	.word	0x000d883b
   d56ac:	000d88cb 	.word	0x000d88cb
   d56b0:	000d88cf 	.word	0x000d88cf
   d56b4:	000d88d3 	.word	0x000d88d3
   d56b8:	000d88d7 	.word	0x000d88d7
   d56bc:	000d88db 	.word	0x000d88db
   d56c0:	000d88df 	.word	0x000d88df
   d56c4:	000d88e3 	.word	0x000d88e3
   d56c8:	000d88e7 	.word	0x000d88e7
   d56cc:	000d88eb 	.word	0x000d88eb
   d56d0:	000d88ef 	.word	0x000d88ef
   d56d4:	000d88f3 	.word	0x000d88f3
   d56d8:	000d8904 	.word	0x000d8904
   d56dc:	000d88f7 	.word	0x000d88f7
   d56e0:	77359400 	.word	0x77359400
   d56e4:	000f4240 	.word	0x000f4240

000d56e8 <_ZN12Adafruit_GPS11sendCommandEPKc>:
/*!
    @brief Send a command to the GPS device
    @param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void Adafruit_GPS::sendCommand(const char *str) { println(str); }
   d56e8:	f001 bcc3 	b.w	d7072 <_ZN5Print7printlnEPKc>

000d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>:
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::initDataValue(nmea_index_t idx, char *label, char *fmt,
                                 char *unit, unsigned long response,
                                 nmea_value_type_t type) {
   d56ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56ee:	b085      	sub	sp, #20
   d56f0:	4605      	mov	r5, r0
   d56f2:	e9dd 070a 	ldrd	r0, r7, [sp, #40]	; 0x28
   d56f6:	460c      	mov	r4, r1
   d56f8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    if (response)
      val[idx].response = response;
    val[idx].type = type;
    if ((int)(val[idx].type / 10) ==
        1) { // angle with sin/cos component recording
      initDataValue((nmea_index_t)(
   d56fc:	2600      	movs	r6, #0
  if (idx < NMEA_MAX_INDEX) {
   d56fe:	2c3f      	cmp	r4, #63	; 0x3f
   d5700:	d82a      	bhi.n	d5758 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
    if (label)
   d5702:	b11a      	cbz	r2, d570c <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x20>
      val[idx].label = label;
   d5704:	eb05 1c44 	add.w	ip, r5, r4, lsl #5
   d5708:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    if (fmt)
   d570c:	0162      	lsls	r2, r4, #5
   d570e:	b11b      	cbz	r3, d5718 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x2c>
      val[idx].fmt = fmt;
   d5710:	eb05 0c02 	add.w	ip, r5, r2
   d5714:	f8cc 30ac 	str.w	r3, [ip, #172]	; 0xac
    if (unit)
   d5718:	b110      	cbz	r0, d5720 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x34>
      val[idx].unit = unit;
   d571a:	18ab      	adds	r3, r5, r2
   d571c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    if (response)
   d5720:	b117      	cbz	r7, d5728 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x3c>
      val[idx].response = response;
   d5722:	18ab      	adds	r3, r5, r2
   d5724:	f8a3 709c 	strh.w	r7, [r3, #156]	; 0x9c
    val[idx].type = type;
   d5728:	442a      	add	r2, r5
   d572a:	f882 109e 	strb.w	r1, [r2, #158]	; 0x9e
    if ((int)(val[idx].type / 10) ==
   d572e:	390a      	subs	r1, #10
   d5730:	2909      	cmp	r1, #9
   d5732:	d811      	bhi.n	d5758 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
      initDataValue((nmea_index_t)(
   d5734:	2300      	movs	r3, #0
   d5736:	1c61      	adds	r1, r4, #1
   d5738:	461a      	mov	r2, r3
   d573a:	b2c9      	uxtb	r1, r1
   d573c:	4628      	mov	r0, r5
   d573e:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d5742:	9600      	str	r6, [sp, #0]
   d5744:	f7ff ffd2 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
          idx + 1)); // initialize the next two data values as well
      initDataValue((nmea_index_t)(idx + 2));
   d5748:	3402      	adds	r4, #2
   d574a:	2100      	movs	r1, #0
   d574c:	b2e4      	uxtb	r4, r4
   d574e:	460f      	mov	r7, r1
   d5750:	4608      	mov	r0, r1
   d5752:	460b      	mov	r3, r1
   d5754:	460a      	mov	r2, r1
   d5756:	e7d2      	b.n	d56fe <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x12>
    }
  }
}
   d5758:	b005      	add	sp, #20
   d575a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d575c <_ZN12Adafruit_GPS9data_initEv>:
void Adafruit_GPS::data_init() {
   d575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
   d5760:	2600      	movs	r6, #0
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
   d5762:	4fc5      	ldr	r7, [pc, #788]	; (d5a78 <_ZN12Adafruit_GPS9data_initEv+0x31c>)
void Adafruit_GPS::data_init() {
   d5764:	b085      	sub	sp, #20
   d5766:	4605      	mov	r5, r0
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
   d5768:	4634      	mov	r4, r6
   d576a:	b2f1      	uxtb	r1, r6
   d576c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5770:	9400      	str	r4, [sp, #0]
   d5772:	2300      	movs	r3, #0
   d5774:	463a      	mov	r2, r7
   d5776:	4628      	mov	r0, r5
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
   d5778:	3601      	adds	r6, #1
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
   d577a:	f7ff ffb7 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
   d577e:	2e40      	cmp	r6, #64	; 0x40
   d5780:	d1f3      	bne.n	d576a <_ZN12Adafruit_GPS9data_initEv+0xe>
  initDataValue(NMEA_HDOP, HDOPlabel);
   d5782:	2300      	movs	r3, #0
  initDataValue(
   d5784:	2602      	movs	r6, #2
   d5786:	4fbd      	ldr	r7, [pc, #756]	; (d5a7c <_ZN12Adafruit_GPS9data_initEv+0x320>)
  initDataValue(NMEA_HDOP, HDOPlabel);
   d5788:	4abd      	ldr	r2, [pc, #756]	; (d5a80 <_ZN12Adafruit_GPS9data_initEv+0x324>)
   d578a:	9400      	str	r4, [sp, #0]
   d578c:	4619      	mov	r1, r3
   d578e:	4628      	mov	r0, r5
   d5790:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5794:	f7ff ffaa 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(
   d5798:	e9cd 4601 	strd	r4, r6, [sp, #4]
   d579c:	9700      	str	r7, [sp, #0]
   d579e:	4628      	mov	r0, r5
   d57a0:	4bb8      	ldr	r3, [pc, #736]	; (d5a84 <_ZN12Adafruit_GPS9data_initEv+0x328>)
   d57a2:	4ab9      	ldr	r2, [pc, #740]	; (d5a88 <_ZN12Adafruit_GPS9data_initEv+0x32c>)
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
   d57a4:	f8df 93d4 	ldr.w	r9, [pc, #980]	; d5b7c <_ZN12Adafruit_GPS9data_initEv+0x420>
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
   d57a8:	f8df a3d4 	ldr.w	sl, [pc, #980]	; d5b80 <_ZN12Adafruit_GPS9data_initEv+0x424>
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
   d57ac:	f8df b3d4 	ldr.w	fp, [pc, #980]	; d5b84 <_ZN12Adafruit_GPS9data_initEv+0x428>
  initDataValue(
   d57b0:	2101      	movs	r1, #1
   d57b2:	f7ff ff9b 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LON, LONlabel, LATfmt, LATunit, 0,
   d57b6:	e9cd 4601 	strd	r4, r6, [sp, #4]
   d57ba:	9700      	str	r7, [sp, #0]
   d57bc:	4631      	mov	r1, r6
   d57be:	4628      	mov	r0, r5
   d57c0:	4bb0      	ldr	r3, [pc, #704]	; (d5a84 <_ZN12Adafruit_GPS9data_initEv+0x328>)
   d57c2:	4ab2      	ldr	r2, [pc, #712]	; (d5a8c <_ZN12Adafruit_GPS9data_initEv+0x330>)
   d57c4:	f7ff ff92 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LATWP, LATWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
   d57c8:	e9cd 4601 	strd	r4, r6, [sp, #4]
   d57cc:	9700      	str	r7, [sp, #0]
   d57ce:	4628      	mov	r0, r5
   d57d0:	4bac      	ldr	r3, [pc, #688]	; (d5a84 <_ZN12Adafruit_GPS9data_initEv+0x328>)
   d57d2:	4aaf      	ldr	r2, [pc, #700]	; (d5a90 <_ZN12Adafruit_GPS9data_initEv+0x334>)
   d57d4:	2103      	movs	r1, #3
   d57d6:	f7ff ff89 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
   d57da:	e9cd 4601 	strd	r4, r6, [sp, #4]
   d57de:	9700      	str	r7, [sp, #0]
   d57e0:	4628      	mov	r0, r5
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
   d57e2:	4fac      	ldr	r7, [pc, #688]	; (d5a94 <_ZN12Adafruit_GPS9data_initEv+0x338>)
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
   d57e4:	4ba7      	ldr	r3, [pc, #668]	; (d5a84 <_ZN12Adafruit_GPS9data_initEv+0x328>)
   d57e6:	4aac      	ldr	r2, [pc, #688]	; (d5a98 <_ZN12Adafruit_GPS9data_initEv+0x33c>)
   d57e8:	2104      	movs	r1, #4
   d57ea:	f7ff ff7f 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
   d57ee:	f04f 080b 	mov.w	r8, #11
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
   d57f2:	9700      	str	r7, [sp, #0]
   d57f4:	4628      	mov	r0, r5
   d57f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d57fa:	4ba8      	ldr	r3, [pc, #672]	; (d5a9c <_ZN12Adafruit_GPS9data_initEv+0x340>)
   d57fc:	4aa8      	ldr	r2, [pc, #672]	; (d5aa0 <_ZN12Adafruit_GPS9data_initEv+0x344>)
   d57fe:	2105      	movs	r1, #5
   d5800:	f7ff ff74 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
   d5804:	e9cd 4801 	strd	r4, r8, [sp, #4]
   d5808:	f8cd 9000 	str.w	r9, [sp]
   d580c:	4628      	mov	r0, r5
   d580e:	4ba5      	ldr	r3, [pc, #660]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d5810:	4aa5      	ldr	r2, [pc, #660]	; (d5aa8 <_ZN12Adafruit_GPS9data_initEv+0x34c>)
   d5812:	2106      	movs	r1, #6
   d5814:	f7ff ff6a 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_COGWP, COGWPlabel, Anglefmt, TrueAngleunit, 0,
   d5818:	2301      	movs	r3, #1
   d581a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   d581e:	f8cd 9000 	str.w	r9, [sp]
   d5822:	4628      	mov	r0, r5
   d5824:	4b9f      	ldr	r3, [pc, #636]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d5826:	4aa1      	ldr	r2, [pc, #644]	; (d5aac <_ZN12Adafruit_GPS9data_initEv+0x350>)
   d5828:	2109      	movs	r1, #9
   d582a:	f7ff ff5f 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
   d582e:	f8cd a000 	str.w	sl, [sp]
   d5832:	4628      	mov	r0, r5
   d5834:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5838:	4b9d      	ldr	r3, [pc, #628]	; (d5ab0 <_ZN12Adafruit_GPS9data_initEv+0x354>)
   d583a:	4a9e      	ldr	r2, [pc, #632]	; (d5ab4 <_ZN12Adafruit_GPS9data_initEv+0x358>)
   d583c:	210a      	movs	r1, #10
   d583e:	f7ff ff55 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
   d5842:	f8cd a000 	str.w	sl, [sp]
   d5846:	4641      	mov	r1, r8
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
   d5848:	f04f 0a0c 	mov.w	sl, #12
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
   d584c:	4628      	mov	r0, r5
   d584e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5852:	4b97      	ldr	r3, [pc, #604]	; (d5ab0 <_ZN12Adafruit_GPS9data_initEv+0x354>)
   d5854:	4a98      	ldr	r2, [pc, #608]	; (d5ab8 <_ZN12Adafruit_GPS9data_initEv+0x35c>)
   d5856:	f7ff ff49 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
   d585a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
   d585e:	4651      	mov	r1, sl
   d5860:	4628      	mov	r0, r5
   d5862:	4b90      	ldr	r3, [pc, #576]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d5864:	4a95      	ldr	r2, [pc, #596]	; (d5abc <_ZN12Adafruit_GPS9data_initEv+0x360>)
   d5866:	f8cd b000 	str.w	fp, [sp]
   d586a:	f7ff ff3f 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_AWS, AWSlabel, WindSpeedfmt, Speedunit);
   d586e:	9700      	str	r7, [sp, #0]
   d5870:	4628      	mov	r0, r5
   d5872:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5876:	4b92      	ldr	r3, [pc, #584]	; (d5ac0 <_ZN12Adafruit_GPS9data_initEv+0x364>)
   d5878:	4a92      	ldr	r2, [pc, #584]	; (d5ac4 <_ZN12Adafruit_GPS9data_initEv+0x368>)
   d587a:	210f      	movs	r1, #15
   d587c:	f7ff ff36 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TWA, TWAlabel, Anglefmt, BoatAngleunit, 0,
   d5880:	e9cd 4a01 	strd	r4, sl, [sp, #4]
   d5884:	4628      	mov	r0, r5
   d5886:	4b87      	ldr	r3, [pc, #540]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d5888:	4a8f      	ldr	r2, [pc, #572]	; (d5ac8 <_ZN12Adafruit_GPS9data_initEv+0x36c>)
   d588a:	f8cd b000 	str.w	fp, [sp]
   d588e:	2110      	movs	r1, #16
   d5890:	f7ff ff2c 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TWD, TWDlabel, Anglefmt, TrueAngleunit, 0,
   d5894:	e9cd 4801 	strd	r4, r8, [sp, #4]
   d5898:	f8cd 9000 	str.w	r9, [sp]
   d589c:	4628      	mov	r0, r5
   d589e:	4b81      	ldr	r3, [pc, #516]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d58a0:	4a8a      	ldr	r2, [pc, #552]	; (d5acc <_ZN12Adafruit_GPS9data_initEv+0x370>)
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
   d58a2:	f8df a2e4 	ldr.w	sl, [pc, #740]	; d5b88 <_ZN12Adafruit_GPS9data_initEv+0x42c>
  initDataValue(NMEA_TWD, TWDlabel, Anglefmt, TrueAngleunit, 0,
   d58a6:	2113      	movs	r1, #19
   d58a8:	f7ff ff20 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TWS, TWSlabel, WindSpeedfmt, Speedunit);
   d58ac:	9700      	str	r7, [sp, #0]
   d58ae:	4628      	mov	r0, r5
   d58b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d58b4:	4b82      	ldr	r3, [pc, #520]	; (d5ac0 <_ZN12Adafruit_GPS9data_initEv+0x364>)
   d58b6:	4a86      	ldr	r2, [pc, #536]	; (d5ad0 <_ZN12Adafruit_GPS9data_initEv+0x374>)
   d58b8:	2116      	movs	r1, #22
   d58ba:	f7ff ff17 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VMG, VMGlabel, BoatSpeedfmt, Speedunit);
   d58be:	9700      	str	r7, [sp, #0]
   d58c0:	4628      	mov	r0, r5
   d58c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d58c6:	4b75      	ldr	r3, [pc, #468]	; (d5a9c <_ZN12Adafruit_GPS9data_initEv+0x340>)
   d58c8:	4a82      	ldr	r2, [pc, #520]	; (d5ad4 <_ZN12Adafruit_GPS9data_initEv+0x378>)
   d58ca:	2117      	movs	r1, #23
   d58cc:	f7ff ff0e 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VMGWP, VMGWPlabel, BoatSpeedfmt, Speedunit);
   d58d0:	9700      	str	r7, [sp, #0]
   d58d2:	4628      	mov	r0, r5
   d58d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d58d8:	4b70      	ldr	r3, [pc, #448]	; (d5a9c <_ZN12Adafruit_GPS9data_initEv+0x340>)
   d58da:	4a7f      	ldr	r2, [pc, #508]	; (d5ad8 <_ZN12Adafruit_GPS9data_initEv+0x37c>)
   d58dc:	2118      	movs	r1, #24
   d58de:	f7ff ff05 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_HEEL, HEELlabel, Anglefmt, HEELunit, 0,
   d58e2:	4b7e      	ldr	r3, [pc, #504]	; (d5adc <_ZN12Adafruit_GPS9data_initEv+0x380>)
   d58e4:	9300      	str	r3, [sp, #0]
   d58e6:	e9cd 4601 	strd	r4, r6, [sp, #4]
   d58ea:	4628      	mov	r0, r5
   d58ec:	4b6d      	ldr	r3, [pc, #436]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d58ee:	4a7c      	ldr	r2, [pc, #496]	; (d5ae0 <_ZN12Adafruit_GPS9data_initEv+0x384>)
   d58f0:	2119      	movs	r1, #25
   d58f2:	f7ff fefb 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_PITCH, PITCHlabel, Anglefmt, PITCHunit, 0,
   d58f6:	4b7b      	ldr	r3, [pc, #492]	; (d5ae4 <_ZN12Adafruit_GPS9data_initEv+0x388>)
   d58f8:	9300      	str	r3, [sp, #0]
   d58fa:	e9cd 4601 	strd	r4, r6, [sp, #4]
   d58fe:	4628      	mov	r0, r5
   d5900:	4b68      	ldr	r3, [pc, #416]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d5902:	4a79      	ldr	r2, [pc, #484]	; (d5ae8 <_ZN12Adafruit_GPS9data_initEv+0x38c>)
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
   d5904:	4e79      	ldr	r6, [pc, #484]	; (d5aec <_ZN12Adafruit_GPS9data_initEv+0x390>)
  initDataValue(NMEA_PITCH, PITCHlabel, Anglefmt, PITCHunit, 0,
   d5906:	211a      	movs	r1, #26
   d5908:	f7ff fef0 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_HDG, HDGlabel, Anglefmt, MagAngleunit, 0,
   d590c:	4b78      	ldr	r3, [pc, #480]	; (d5af0 <_ZN12Adafruit_GPS9data_initEv+0x394>)
   d590e:	9300      	str	r3, [sp, #0]
   d5910:	e9cd 4801 	strd	r4, r8, [sp, #4]
   d5914:	4628      	mov	r0, r5
   d5916:	4b63      	ldr	r3, [pc, #396]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d5918:	4a76      	ldr	r2, [pc, #472]	; (d5af4 <_ZN12Adafruit_GPS9data_initEv+0x398>)
   d591a:	211b      	movs	r1, #27
   d591c:	f7ff fee6 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_HDT, HDTlabel, Anglefmt, TrueAngleunit, 0,
   d5920:	e9cd 4801 	strd	r4, r8, [sp, #4]
   d5924:	f8cd 9000 	str.w	r9, [sp]
   d5928:	4628      	mov	r0, r5
   d592a:	4b5e      	ldr	r3, [pc, #376]	; (d5aa4 <_ZN12Adafruit_GPS9data_initEv+0x348>)
   d592c:	4a72      	ldr	r2, [pc, #456]	; (d5af8 <_ZN12Adafruit_GPS9data_initEv+0x39c>)
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
   d592e:	f8df 925c 	ldr.w	r9, [pc, #604]	; d5b8c <_ZN12Adafruit_GPS9data_initEv+0x430>
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
   d5932:	f8df 825c 	ldr.w	r8, [pc, #604]	; d5b90 <_ZN12Adafruit_GPS9data_initEv+0x434>
  initDataValue(NMEA_HDT, HDTlabel, Anglefmt, TrueAngleunit, 0,
   d5936:	211e      	movs	r1, #30
   d5938:	f7ff fed8 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);
   d593c:	9700      	str	r7, [sp, #0]
   d593e:	4628      	mov	r0, r5
   d5940:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5944:	4b55      	ldr	r3, [pc, #340]	; (d5a9c <_ZN12Adafruit_GPS9data_initEv+0x340>)
   d5946:	4a6d      	ldr	r2, [pc, #436]	; (d5afc <_ZN12Adafruit_GPS9data_initEv+0x3a0>)
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
   d5948:	4f6d      	ldr	r7, [pc, #436]	; (d5b00 <_ZN12Adafruit_GPS9data_initEv+0x3a4>)
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);
   d594a:	2121      	movs	r1, #33	; 0x21
   d594c:	f7ff fece 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
   d5950:	9600      	str	r6, [sp, #0]
   d5952:	4628      	mov	r0, r5
   d5954:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5958:	4b6a      	ldr	r3, [pc, #424]	; (d5b04 <_ZN12Adafruit_GPS9data_initEv+0x3a8>)
   d595a:	4a6b      	ldr	r2, [pc, #428]	; (d5b08 <_ZN12Adafruit_GPS9data_initEv+0x3ac>)
   d595c:	2122      	movs	r1, #34	; 0x22
   d595e:	f7ff fec5 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);
   d5962:	9600      	str	r6, [sp, #0]
   d5964:	4628      	mov	r0, r5
   d5966:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d596a:	4b68      	ldr	r3, [pc, #416]	; (d5b0c <_ZN12Adafruit_GPS9data_initEv+0x3b0>)
   d596c:	4a68      	ldr	r2, [pc, #416]	; (d5b10 <_ZN12Adafruit_GPS9data_initEv+0x3b4>)
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
   d596e:	4e69      	ldr	r6, [pc, #420]	; (d5b14 <_ZN12Adafruit_GPS9data_initEv+0x3b8>)
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);
   d5970:	2122      	movs	r1, #34	; 0x22
   d5972:	f7ff febb 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
   d5976:	4b68      	ldr	r3, [pc, #416]	; (d5b18 <_ZN12Adafruit_GPS9data_initEv+0x3bc>)
   d5978:	9300      	str	r3, [sp, #0]
   d597a:	4628      	mov	r0, r5
   d597c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5980:	4b66      	ldr	r3, [pc, #408]	; (d5b1c <_ZN12Adafruit_GPS9data_initEv+0x3c0>)
   d5982:	4a67      	ldr	r2, [pc, #412]	; (d5b20 <_ZN12Adafruit_GPS9data_initEv+0x3c4>)
   d5984:	2124      	movs	r1, #36	; 0x24
   d5986:	f7ff feb1 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
   d598a:	4628      	mov	r0, r5
   d598c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5990:	4b64      	ldr	r3, [pc, #400]	; (d5b24 <_ZN12Adafruit_GPS9data_initEv+0x3c8>)
   d5992:	4a65      	ldr	r2, [pc, #404]	; (d5b28 <_ZN12Adafruit_GPS9data_initEv+0x3cc>)
   d5994:	f8cd a000 	str.w	sl, [sp]
   d5998:	2125      	movs	r1, #37	; 0x25
   d599a:	f7ff fea7 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
   d599e:	4628      	mov	r0, r5
   d59a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d59a4:	4b61      	ldr	r3, [pc, #388]	; (d5b2c <_ZN12Adafruit_GPS9data_initEv+0x3d0>)
   d59a6:	4a62      	ldr	r2, [pc, #392]	; (d5b30 <_ZN12Adafruit_GPS9data_initEv+0x3d4>)
   d59a8:	f8cd 9000 	str.w	r9, [sp]
   d59ac:	2126      	movs	r1, #38	; 0x26
   d59ae:	f7ff fe9d 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
   d59b2:	4628      	mov	r0, r5
   d59b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d59b8:	4b5e      	ldr	r3, [pc, #376]	; (d5b34 <_ZN12Adafruit_GPS9data_initEv+0x3d8>)
   d59ba:	4a5f      	ldr	r2, [pc, #380]	; (d5b38 <_ZN12Adafruit_GPS9data_initEv+0x3dc>)
   d59bc:	f8cd 8000 	str.w	r8, [sp]
   d59c0:	2127      	movs	r1, #39	; 0x27
   d59c2:	f7ff fe93 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
   d59c6:	4628      	mov	r0, r5
   d59c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d59cc:	4b5b      	ldr	r3, [pc, #364]	; (d5b3c <_ZN12Adafruit_GPS9data_initEv+0x3e0>)
   d59ce:	4a5c      	ldr	r2, [pc, #368]	; (d5b40 <_ZN12Adafruit_GPS9data_initEv+0x3e4>)
   d59d0:	9700      	str	r7, [sp, #0]
   d59d2:	2128      	movs	r1, #40	; 0x28
   d59d4:	f7ff fe8a 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
   d59d8:	4628      	mov	r0, r5
   d59da:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d59de:	4b59      	ldr	r3, [pc, #356]	; (d5b44 <_ZN12Adafruit_GPS9data_initEv+0x3e8>)
   d59e0:	4a59      	ldr	r2, [pc, #356]	; (d5b48 <_ZN12Adafruit_GPS9data_initEv+0x3ec>)
   d59e2:	9600      	str	r6, [sp, #0]
   d59e4:	2129      	movs	r1, #41	; 0x29
   d59e6:	f7ff fe81 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_RPM_M2, RPM_M2label, RPM_M1fmt, RPM_M1unit);
   d59ea:	4628      	mov	r0, r5
   d59ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d59f0:	4b4c      	ldr	r3, [pc, #304]	; (d5b24 <_ZN12Adafruit_GPS9data_initEv+0x3c8>)
   d59f2:	4a56      	ldr	r2, [pc, #344]	; (d5b4c <_ZN12Adafruit_GPS9data_initEv+0x3f0>)
   d59f4:	f8cd a000 	str.w	sl, [sp]
   d59f8:	212a      	movs	r1, #42	; 0x2a
   d59fa:	f7ff fe77 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TEMPERATURE_M2, TEMPERATURE_M2label, TEMPERATURE_M1fmt,
   d59fe:	4628      	mov	r0, r5
   d5a00:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5a04:	4b49      	ldr	r3, [pc, #292]	; (d5b2c <_ZN12Adafruit_GPS9data_initEv+0x3d0>)
   d5a06:	4a52      	ldr	r2, [pc, #328]	; (d5b50 <_ZN12Adafruit_GPS9data_initEv+0x3f4>)
   d5a08:	f8cd 9000 	str.w	r9, [sp]
   d5a0c:	212b      	movs	r1, #43	; 0x2b
   d5a0e:	f7ff fe6d 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_PRESSURE_M2, PRESSURE_M2label, PRESSURE_M1fmt,
   d5a12:	4628      	mov	r0, r5
   d5a14:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5a18:	4b46      	ldr	r3, [pc, #280]	; (d5b34 <_ZN12Adafruit_GPS9data_initEv+0x3d8>)
   d5a1a:	4a4e      	ldr	r2, [pc, #312]	; (d5b54 <_ZN12Adafruit_GPS9data_initEv+0x3f8>)
   d5a1c:	f8cd 8000 	str.w	r8, [sp]
   d5a20:	212c      	movs	r1, #44	; 0x2c
   d5a22:	f7ff fe63 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VOLTAGE_M2, VOLTAGE_M2label, VOLTAGE_M1fmt,
   d5a26:	4628      	mov	r0, r5
   d5a28:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5a2c:	4b43      	ldr	r3, [pc, #268]	; (d5b3c <_ZN12Adafruit_GPS9data_initEv+0x3e0>)
   d5a2e:	4a4a      	ldr	r2, [pc, #296]	; (d5b58 <_ZN12Adafruit_GPS9data_initEv+0x3fc>)
   d5a30:	9700      	str	r7, [sp, #0]
   d5a32:	212d      	movs	r1, #45	; 0x2d
   d5a34:	f7ff fe5a 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_CURRENT_M2, CURRENT_M2label, CURRENT_M1fmt,
   d5a38:	4628      	mov	r0, r5
   d5a3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5a3e:	4b41      	ldr	r3, [pc, #260]	; (d5b44 <_ZN12Adafruit_GPS9data_initEv+0x3e8>)
   d5a40:	4a46      	ldr	r2, [pc, #280]	; (d5b5c <_ZN12Adafruit_GPS9data_initEv+0x400>)
   d5a42:	9600      	str	r6, [sp, #0]
   d5a44:	212e      	movs	r1, #46	; 0x2e
   d5a46:	f7ff fe51 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TEMPERATURE_AIR, TEMPERATURE_AIRlabel, TEMPERATURE_AIRfmt,
   d5a4a:	4b45      	ldr	r3, [pc, #276]	; (d5b60 <_ZN12Adafruit_GPS9data_initEv+0x404>)
   d5a4c:	9300      	str	r3, [sp, #0]
   d5a4e:	4628      	mov	r0, r5
   d5a50:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5a54:	4b43      	ldr	r3, [pc, #268]	; (d5b64 <_ZN12Adafruit_GPS9data_initEv+0x408>)
   d5a56:	4a44      	ldr	r2, [pc, #272]	; (d5b68 <_ZN12Adafruit_GPS9data_initEv+0x40c>)
   d5a58:	212f      	movs	r1, #47	; 0x2f
   d5a5a:	f7ff fe47 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_TEMPERATURE_WATER, TEMPERATURE_WATERlabel,
   d5a5e:	4b43      	ldr	r3, [pc, #268]	; (d5b6c <_ZN12Adafruit_GPS9data_initEv+0x410>)
   d5a60:	9300      	str	r3, [sp, #0]
   d5a62:	4628      	mov	r0, r5
   d5a64:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5a68:	4b41      	ldr	r3, [pc, #260]	; (d5b70 <_ZN12Adafruit_GPS9data_initEv+0x414>)
   d5a6a:	4a42      	ldr	r2, [pc, #264]	; (d5b74 <_ZN12Adafruit_GPS9data_initEv+0x418>)
   d5a6c:	2130      	movs	r1, #48	; 0x30
   d5a6e:	f7ff fe3d 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_HUMIDITY, HUMIDITYlabel, HUMIDITYfmt, HUMIDITYunit);
   d5a72:	4b41      	ldr	r3, [pc, #260]	; (d5b78 <_ZN12Adafruit_GPS9data_initEv+0x41c>)
   d5a74:	9300      	str	r3, [sp, #0]
   d5a76:	e08d      	b.n	d5b94 <_ZN12Adafruit_GPS9data_initEv+0x438>
   d5a78:	2003d6cb 	.word	0x2003d6cb
   d5a7c:	2003d6f7 	.word	0x2003d6f7
   d5a80:	2003d75f 	.word	0x2003d75f
   d5a84:	2003d6e5 	.word	0x2003d6e5
   d5a88:	2003d735 	.word	0x2003d735
   d5a8c:	2003d73d 	.word	0x2003d73d
   d5a90:	2003d5d5 	.word	0x2003d5d5
   d5a94:	2003d77f 	.word	0x2003d77f
   d5a98:	2003d5dc 	.word	0x2003d5dc
   d5a9c:	2003d618 	.word	0x2003d618
   d5aa0:	2003d741 	.word	0x2003d741
   d5aa4:	2003d714 	.word	0x2003d714
   d5aa8:	2003d71a 	.word	0x2003d71a
   d5aac:	2003d5c8 	.word	0x2003d5c8
   d5ab0:	2003d6f1 	.word	0x2003d6f1
   d5ab4:	2003d759 	.word	0x2003d759
   d5ab8:	2003d5f4 	.word	0x2003d5f4
   d5abc:	2003d70c 	.word	0x2003d70c
   d5ac0:	2003d62b 	.word	0x2003d62b
   d5ac4:	2003d710 	.word	0x2003d710
   d5ac8:	2003d745 	.word	0x2003d745
   d5acc:	2003d749 	.word	0x2003d749
   d5ad0:	2003d74d 	.word	0x2003d74d
   d5ad4:	2003d751 	.word	0x2003d751
   d5ad8:	2003d5ed 	.word	0x2003d5ed
   d5adc:	2003d72c 	.word	0x2003d72c
   d5ae0:	2003d764 	.word	0x2003d764
   d5ae4:	2003d76e 	.word	0x2003d76e
   d5ae8:	2003d5e3 	.word	0x2003d5e3
   d5aec:	2003d706 	.word	0x2003d706
   d5af0:	2003d623 	.word	0x2003d623
   d5af4:	2003d724 	.word	0x2003d724
   d5af8:	2003d728 	.word	0x2003d728
   d5afc:	2003d755 	.word	0x2003d755
   d5b00:	2003d66f 	.word	0x2003d66f
   d5b04:	2003d6eb 	.word	0x2003d6eb
   d5b08:	2003d739 	.word	0x2003d739
   d5b0c:	2003d700 	.word	0x2003d700
   d5b10:	2003d769 	.word	0x2003d769
   d5b14:	2003d664 	.word	0x2003d664
   d5b18:	2003d75d 	.word	0x2003d75d
   d5b1c:	2003d71e 	.word	0x2003d71e
   d5b20:	2003d5cf 	.word	0x2003d5cf
   d5b24:	2003d779 	.word	0x2003d779
   d5b28:	2003d602 	.word	0x2003d602
   d5b2c:	2003d6a5 	.word	0x2003d6a5
   d5b30:	2003d6bd 	.word	0x2003d6bd
   d5b34:	2003d669 	.word	0x2003d669
   d5b38:	2003d699 	.word	0x2003d699
   d5b3c:	2003d654 	.word	0x2003d654
   d5b40:	2003d689 	.word	0x2003d689
   d5b44:	2003d63c 	.word	0x2003d63c
   d5b48:	2003d675 	.word	0x2003d675
   d5b4c:	2003d60a 	.word	0x2003d60a
   d5b50:	2003d6c4 	.word	0x2003d6c4
   d5b54:	2003d69f 	.word	0x2003d69f
   d5b58:	2003d691 	.word	0x2003d691
   d5b5c:	2003d67d 	.word	0x2003d67d
   d5b60:	2003d6b7 	.word	0x2003d6b7
   d5b64:	2003d6ab 	.word	0x2003d6ab
   d5b68:	2003d6cf 	.word	0x2003d6cf
   d5b6c:	2003d6d9 	.word	0x2003d6d9
   d5b70:	2003d6d3 	.word	0x2003d6d3
   d5b74:	2003d6df 	.word	0x2003d6df
   d5b78:	2003d61e 	.word	0x2003d61e
   d5b7c:	2003d64b 	.word	0x2003d64b
   d5b80:	2003d709 	.word	0x2003d709
   d5b84:	2003d634 	.word	0x2003d634
   d5b88:	2003d5e9 	.word	0x2003d5e9
   d5b8c:	2003d6b1 	.word	0x2003d6b1
   d5b90:	2003d685 	.word	0x2003d685
   d5b94:	4628      	mov	r0, r5
   d5b96:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5b9a:	4b09      	ldr	r3, [pc, #36]	; (d5bc0 <_ZN12Adafruit_GPS9data_initEv+0x464>)
   d5b9c:	4a09      	ldr	r2, [pc, #36]	; (d5bc4 <_ZN12Adafruit_GPS9data_initEv+0x468>)
   d5b9e:	2131      	movs	r1, #49	; 0x31
   d5ba0:	f7ff fda4 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_BAROMETER, BAROMETERlabel, BAROMETERfmt, BAROMETERunit);
   d5ba4:	4b08      	ldr	r3, [pc, #32]	; (d5bc8 <_ZN12Adafruit_GPS9data_initEv+0x46c>)
   d5ba6:	9300      	str	r3, [sp, #0]
   d5ba8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5bac:	4b07      	ldr	r3, [pc, #28]	; (d5bcc <_ZN12Adafruit_GPS9data_initEv+0x470>)
   d5bae:	4a08      	ldr	r2, [pc, #32]	; (d5bd0 <_ZN12Adafruit_GPS9data_initEv+0x474>)
   d5bb0:	2132      	movs	r1, #50	; 0x32
   d5bb2:	4628      	mov	r0, r5
   d5bb4:	f7ff fd9a 	bl	d56ec <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
}
   d5bb8:	b005      	add	sp, #20
   d5bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bbe:	bf00      	nop
   d5bc0:	2003d5fc 	.word	0x2003d5fc
   d5bc4:	2003d642 	.word	0x2003d642
   d5bc8:	2003d631 	.word	0x2003d631
   d5bcc:	2003d612 	.word	0x2003d612
   d5bd0:	2003d65a 	.word	0x2003d65a

000d5bd4 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>:
    @param idx The data index for the value to have history removed
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
  if (idx < NMEA_MAX_INDEX) {
   d5bd4:	293f      	cmp	r1, #63	; 0x3f
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
   d5bd6:	b510      	push	{r4, lr}
  if (idx < NMEA_MAX_INDEX) {
   d5bd8:	d80e      	bhi.n	d5bf8 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
    if (val[idx].hist == NULL)
   d5bda:	eb00 1441 	add.w	r4, r0, r1, lsl #5
   d5bde:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d5be2:	b14b      	cbz	r3, d5bf8 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
      return;
    free(val[idx].hist->data);
   d5be4:	6818      	ldr	r0, [r3, #0]
   d5be6:	f000 fa79 	bl	d60dc <free>
    free(val[idx].hist);
   d5bea:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d5bee:	f000 fa75 	bl	d60dc <free>
    val[idx].hist = NULL;
   d5bf2:	2300      	movs	r3, #0
   d5bf4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  }
}
   d5bf8:	bd10      	pop	{r4, pc}
	...

000d5bfc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <HAL_USB_USART_Init+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	681b      	ldr	r3, [r3, #0]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	0003024c 	.word	0x0003024c

000d5c0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <HAL_USB_USART_Begin+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	685b      	ldr	r3, [r3, #4]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	0003024c 	.word	0x0003024c

000d5c1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <HAL_USB_USART_Available_Data+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	691b      	ldr	r3, [r3, #16]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	0003024c 	.word	0x0003024c

000d5c2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	695b      	ldr	r3, [r3, #20]
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	0003024c 	.word	0x0003024c

000d5c3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <HAL_USB_USART_Receive_Data+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	699b      	ldr	r3, [r3, #24]
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	0003024c 	.word	0x0003024c

000d5c4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <HAL_USB_USART_Send_Data+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	69db      	ldr	r3, [r3, #28]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	0003024c 	.word	0x0003024c

000d5c5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <HAL_USB_USART_Flush_Data+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	6a1b      	ldr	r3, [r3, #32]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	0003024c 	.word	0x0003024c

000d5c6c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <hal_i2c_begin+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	68db      	ldr	r3, [r3, #12]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030228 	.word	0x00030228

000d5c7c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <hal_i2c_begin_transmission+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	699b      	ldr	r3, [r3, #24]
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030228 	.word	0x00030228

000d5c8c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <hal_i2c_end_transmission+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	69db      	ldr	r3, [r3, #28]
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030228 	.word	0x00030228

000d5c9c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <hal_i2c_write+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	6a1b      	ldr	r3, [r3, #32]
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030228 	.word	0x00030228

000d5cac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <hal_i2c_available+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	00030228 	.word	0x00030228

000d5cbc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <hal_i2c_read+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	00030228 	.word	0x00030228

000d5ccc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <hal_i2c_peek+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	00030228 	.word	0x00030228

000d5cdc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <hal_i2c_flush+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	00030228 	.word	0x00030228

000d5cec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <hal_i2c_is_enabled+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	00030228 	.word	0x00030228

000d5cfc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <hal_i2c_init+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	00030228 	.word	0x00030228

000d5d0c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <hal_spi_begin+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	681b      	ldr	r3, [r3, #0]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	00030230 	.word	0x00030230

000d5d1c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <hal_spi_transfer+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	695b      	ldr	r3, [r3, #20]
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	00030230 	.word	0x00030230

000d5d2c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <hal_spi_init+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	69db      	ldr	r3, [r3, #28]
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030230 	.word	0x00030230

000d5d3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <hal_spi_is_enabled+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	6a1b      	ldr	r3, [r3, #32]
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030230 	.word	0x00030230

000d5d4c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <hal_spi_info+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030230 	.word	0x00030230

000d5d5c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <hal_spi_set_settings+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030230 	.word	0x00030230

000d5d6c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <hal_spi_acquire+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	00030230 	.word	0x00030230

000d5d7c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <hal_spi_release+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	00030230 	.word	0x00030230

000d5d8c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <hal_usart_init+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	681b      	ldr	r3, [r3, #0]
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	0003023c 	.word	0x0003023c

000d5d9c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <hal_usart_write+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	68db      	ldr	r3, [r3, #12]
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	0003023c 	.word	0x0003023c

000d5dac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <hal_usart_available+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	691b      	ldr	r3, [r3, #16]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	0003023c 	.word	0x0003023c

000d5dbc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <hal_usart_read+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	695b      	ldr	r3, [r3, #20]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	0003023c 	.word	0x0003023c

000d5dcc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <hal_usart_peek+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	699b      	ldr	r3, [r3, #24]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	0003023c 	.word	0x0003023c

000d5ddc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <hal_usart_flush+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	69db      	ldr	r3, [r3, #28]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003023c 	.word	0x0003023c

000d5dec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <hal_usart_is_enabled+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	6a1b      	ldr	r3, [r3, #32]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003023c 	.word	0x0003023c

000d5dfc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <hal_usart_available_data_for_write+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003023c 	.word	0x0003023c

000d5e0c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <hal_usart_begin_config+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003023c 	.word	0x0003023c

000d5e1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <inet_inet_ntop+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	695b      	ldr	r3, [r3, #20]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	00030264 	.word	0x00030264

000d5e2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <os_mutex_recursive_create+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	00030248 	.word	0x00030248

000d5e3c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <HAL_RNG_GetRandomNumber+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	685b      	ldr	r3, [r3, #4]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030218 	.word	0x00030218

000d5e4c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	695b      	ldr	r3, [r3, #20]
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030218 	.word	0x00030218

000d5e5c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <HAL_Validate_Pin_Function+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	685b      	ldr	r3, [r3, #4]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	0003022c 	.word	0x0003022c

000d5e6c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <HAL_Pin_Mode+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	689b      	ldr	r3, [r3, #8]
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	0003022c 	.word	0x0003022c

000d5e7c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <HAL_Get_Pin_Mode+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	68db      	ldr	r3, [r3, #12]
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	0003022c 	.word	0x0003022c

000d5e8c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <HAL_GPIO_Write+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	691b      	ldr	r3, [r3, #16]
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	0003022c 	.word	0x0003022c

000d5e9c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <hal_adc_read+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	0003022c 	.word	0x0003022c

000d5eac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <netdb_freeaddrinfo+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	689b      	ldr	r3, [r3, #8]
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030268 	.word	0x00030268

000d5ebc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <netdb_getaddrinfo+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	68db      	ldr	r3, [r3, #12]
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030268 	.word	0x00030268

000d5ecc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <LED_SetSignalingColor+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	685b      	ldr	r3, [r3, #4]
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030260 	.word	0x00030260

000d5edc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <LED_Signaling_Start+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	689b      	ldr	r3, [r3, #8]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030260 	.word	0x00030260

000d5eec <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <LED_Signaling_Stop+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	68db      	ldr	r3, [r3, #12]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	00030260 	.word	0x00030260

000d5efc <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <LED_SetBrightness+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	691b      	ldr	r3, [r3, #16]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030260 	.word	0x00030260

000d5f0c <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <LED_RGB_IsOverRidden+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	699b      	ldr	r3, [r3, #24]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030260 	.word	0x00030260

000d5f1c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <LED_On+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	69db      	ldr	r3, [r3, #28]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030260 	.word	0x00030260

000d5f2c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <log_message+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030260 	.word	0x00030260

000d5f3c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <spark_cloud_flag_connected+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	695b      	ldr	r3, [r3, #20]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030244 	.word	0x00030244

000d5f4c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <spark_deviceID+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	69db      	ldr	r3, [r3, #28]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030244 	.word	0x00030244

000d5f5c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <spark_send_event+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	6a1b      	ldr	r3, [r3, #32]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030244 	.word	0x00030244

000d5f6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030244 	.word	0x00030244

000d5f7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <network_connect+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	685b      	ldr	r3, [r3, #4]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030240 	.word	0x00030240

000d5f8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <network_connecting+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	689b      	ldr	r3, [r3, #8]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030240 	.word	0x00030240

000d5f9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <network_disconnect+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	68db      	ldr	r3, [r3, #12]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030240 	.word	0x00030240

000d5fac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <network_ready+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	691b      	ldr	r3, [r3, #16]
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030240 	.word	0x00030240

000d5fbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <network_on+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	695b      	ldr	r3, [r3, #20]
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030240 	.word	0x00030240

000d5fcc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <network_off+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	699b      	ldr	r3, [r3, #24]
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030240 	.word	0x00030240

000d5fdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <network_listen+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	69db      	ldr	r3, [r3, #28]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030240 	.word	0x00030240

000d5fec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <network_listening+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	6a1b      	ldr	r3, [r3, #32]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030240 	.word	0x00030240

000d5ffc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <network_set_listen_timeout+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030240 	.word	0x00030240

000d600c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <network_get_listen_timeout+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030240 	.word	0x00030240

000d601c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <network_is_on+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030240 	.word	0x00030240

000d602c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <network_is_off+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030240 	.word	0x00030240

000d603c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <set_system_mode+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	685b      	ldr	r3, [r3, #4]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030220 	.word	0x00030220

000d604c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <system_delay_ms+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	695b      	ldr	r3, [r3, #20]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030220 	.word	0x00030220

000d605c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <application_thread_current+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030220 	.word	0x00030220

000d606c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <application_thread_invoke+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030220 	.word	0x00030220

000d607c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b03      	ldr	r3, [pc, #12]	; (d608c <system_ctrl_set_app_request_handler+0x10>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6086:	9301      	str	r3, [sp, #4]
   d6088:	bd08      	pop	{r3, pc}
   d608a:	0000      	.short	0x0000
   d608c:	00030220 	.word	0x00030220

000d6090 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6090:	b508      	push	{r3, lr}
   d6092:	4b03      	ldr	r3, [pc, #12]	; (d60a0 <system_ctrl_set_result+0x10>)
   d6094:	681b      	ldr	r3, [r3, #0]
   d6096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d609a:	9301      	str	r3, [sp, #4]
   d609c:	bd08      	pop	{r3, pc}
   d609e:	0000      	.short	0x0000
   d60a0:	00030220 	.word	0x00030220

000d60a4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b03      	ldr	r3, [pc, #12]	; (d60b4 <system_sleep_ext+0x10>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d60ae:	9301      	str	r3, [sp, #4]
   d60b0:	bd08      	pop	{r3, pc}
   d60b2:	0000      	.short	0x0000
   d60b4:	00030220 	.word	0x00030220

000d60b8 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b03      	ldr	r3, [pc, #12]	; (d60c8 <system_reset+0x10>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d60c2:	9301      	str	r3, [sp, #4]
   d60c4:	bd08      	pop	{r3, pc}
   d60c6:	0000      	.short	0x0000
   d60c8:	00030220 	.word	0x00030220

000d60cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <malloc+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	681b      	ldr	r3, [r3, #0]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003021c 	.word	0x0003021c

000d60dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <free+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	685b      	ldr	r3, [r3, #4]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	0003021c 	.word	0x0003021c

000d60ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <realloc+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	689b      	ldr	r3, [r3, #8]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	0003021c 	.word	0x0003021c

000d60fc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <sprintf+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	68db      	ldr	r3, [r3, #12]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	0003021c 	.word	0x0003021c

000d610c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <vsnprintf+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	0003021c 	.word	0x0003021c

000d611c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <abort+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	0003021c 	.word	0x0003021c

000d612c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <_malloc_r+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	0003021c 	.word	0x0003021c

000d613c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <__errno+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	0003021c 	.word	0x0003021c

000d614c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <newlib_impure_ptr_callback+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	0003021c 	.word	0x0003021c

000d615c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d615c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d615e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6160:	4604      	mov	r4, r0
      if (_M_manager)
   d6162:	b113      	cbz	r3, d616a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6164:	2203      	movs	r2, #3
   d6166:	4601      	mov	r1, r0
   d6168:	4798      	blx	r3
    }
   d616a:	4620      	mov	r0, r4
   d616c:	bd10      	pop	{r4, pc}

000d616e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d616e:	2300      	movs	r3, #0
   d6170:	6840      	ldr	r0, [r0, #4]
   d6172:	461a      	mov	r2, r3
   d6174:	f7ff bf02 	b.w	d5f7c <network_connect>

000d6178 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6178:	6840      	ldr	r0, [r0, #4]
   d617a:	2200      	movs	r2, #0
   d617c:	2102      	movs	r1, #2
   d617e:	f7ff bf0d 	b.w	d5f9c <network_disconnect>

000d6182 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6182:	2200      	movs	r2, #0
   d6184:	6840      	ldr	r0, [r0, #4]
   d6186:	4611      	mov	r1, r2
   d6188:	f7ff bf00 	b.w	d5f8c <network_connecting>

000d618c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d618c:	2200      	movs	r2, #0
   d618e:	6840      	ldr	r0, [r0, #4]
   d6190:	4611      	mov	r1, r2
   d6192:	f7ff bf0b 	b.w	d5fac <network_ready>

000d6196 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6196:	2300      	movs	r3, #0
   d6198:	6840      	ldr	r0, [r0, #4]
   d619a:	461a      	mov	r2, r3
   d619c:	4619      	mov	r1, r3
   d619e:	f7ff bf0d 	b.w	d5fbc <network_on>

000d61a2 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d61a2:	2300      	movs	r3, #0
   d61a4:	6840      	ldr	r0, [r0, #4]
   d61a6:	461a      	mov	r2, r3
   d61a8:	4619      	mov	r1, r3
   d61aa:	f7ff bf0f 	b.w	d5fcc <network_off>

000d61ae <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d61ae:	6840      	ldr	r0, [r0, #4]
   d61b0:	2100      	movs	r1, #0
   d61b2:	f7ff bf33 	b.w	d601c <network_is_on>

000d61b6 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d61b6:	6840      	ldr	r0, [r0, #4]
   d61b8:	2100      	movs	r1, #0
   d61ba:	f7ff bf37 	b.w	d602c <network_is_off>

000d61be <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d61be:	6840      	ldr	r0, [r0, #4]
   d61c0:	2200      	movs	r2, #0
   d61c2:	f081 0101 	eor.w	r1, r1, #1
   d61c6:	f7ff bf09 	b.w	d5fdc <network_listen>

000d61ca <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d61ca:	6840      	ldr	r0, [r0, #4]
   d61cc:	2200      	movs	r2, #0
   d61ce:	f7ff bf15 	b.w	d5ffc <network_set_listen_timeout>

000d61d2 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d61d2:	2200      	movs	r2, #0
   d61d4:	6840      	ldr	r0, [r0, #4]
   d61d6:	4611      	mov	r1, r2
   d61d8:	f7ff bf18 	b.w	d600c <network_get_listen_timeout>

000d61dc <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d61dc:	2200      	movs	r2, #0
   d61de:	6840      	ldr	r0, [r0, #4]
   d61e0:	4611      	mov	r1, r2
   d61e2:	f7ff bf03 	b.w	d5fec <network_listening>

000d61e6 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d61e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61ea:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d61ec:	b095      	sub	sp, #84	; 0x54
   d61ee:	4616      	mov	r6, r2
   d61f0:	460d      	mov	r5, r1
   d61f2:	4607      	mov	r7, r0
    IPAddress addr;
   d61f4:	f000 fb02 	bl	d67fc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d61f8:	4621      	mov	r1, r4
   d61fa:	2218      	movs	r2, #24
   d61fc:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d61fe:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6200:	f001 ffc4 	bl	d818c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6204:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6206:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d620a:	4621      	mov	r1, r4
   d620c:	466b      	mov	r3, sp
   d620e:	aa0c      	add	r2, sp, #48	; 0x30
   d6210:	4630      	mov	r0, r6
   d6212:	f7ff fe53 	bl	d5ebc <netdb_getaddrinfo>
    if (!r) {
   d6216:	4604      	mov	r4, r0
   d6218:	2800      	cmp	r0, #0
   d621a:	d146      	bne.n	d62aa <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d621c:	4602      	mov	r2, r0
   d621e:	2101      	movs	r1, #1
   d6220:	6868      	ldr	r0, [r5, #4]
   d6222:	f7ff fec3 	bl	d5fac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6226:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6228:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d622a:	4622      	mov	r2, r4
   d622c:	6868      	ldr	r0, [r5, #4]
   d622e:	f7ff febd 	bl	d5fac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6232:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6234:	4681      	mov	r9, r0
        bool ok = false;
   d6236:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6238:	2e00      	cmp	r6, #0
   d623a:	d036      	beq.n	d62aa <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d623c:	2900      	cmp	r1, #0
   d623e:	d134      	bne.n	d62aa <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6240:	6873      	ldr	r3, [r6, #4]
   d6242:	2b02      	cmp	r3, #2
   d6244:	d003      	beq.n	d624e <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6246:	2b0a      	cmp	r3, #10
   d6248:	d00b      	beq.n	d6262 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d624a:	69f6      	ldr	r6, [r6, #28]
   d624c:	e7f4      	b.n	d6238 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d624e:	f1b8 0f00 	cmp.w	r8, #0
   d6252:	d004      	beq.n	d625e <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6254:	6971      	ldr	r1, [r6, #20]
   d6256:	4638      	mov	r0, r7
   d6258:	3104      	adds	r1, #4
   d625a:	f000 fafc 	bl	d6856 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d625e:	4641      	mov	r1, r8
   d6260:	e7f3      	b.n	d624a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6262:	f1b9 0f00 	cmp.w	r9, #0
   d6266:	d101      	bne.n	d626c <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6268:	4649      	mov	r1, r9
   d626a:	e7ee      	b.n	d624a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d626c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d626e:	2210      	movs	r2, #16
   d6270:	a801      	add	r0, sp, #4
   d6272:	f001 ff8b 	bl	d818c <memset>
                    a.v = 6;
   d6276:	2306      	movs	r3, #6
   d6278:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d627c:	ad01      	add	r5, sp, #4
   d627e:	f104 0308 	add.w	r3, r4, #8
   d6282:	3418      	adds	r4, #24
   d6284:	6818      	ldr	r0, [r3, #0]
   d6286:	6859      	ldr	r1, [r3, #4]
   d6288:	462a      	mov	r2, r5
   d628a:	c203      	stmia	r2!, {r0, r1}
   d628c:	3308      	adds	r3, #8
   d628e:	42a3      	cmp	r3, r4
   d6290:	4615      	mov	r5, r2
   d6292:	d1f7      	bne.n	d6284 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6294:	a901      	add	r1, sp, #4
   d6296:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6298:	ad07      	add	r5, sp, #28
   d629a:	f000 fabd 	bl	d6818 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d629e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62a0:	1d3c      	adds	r4, r7, #4
   d62a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62a4:	682b      	ldr	r3, [r5, #0]
   d62a6:	7023      	strb	r3, [r4, #0]
   d62a8:	e7de      	b.n	d6268 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d62aa:	9800      	ldr	r0, [sp, #0]
   d62ac:	f7ff fdfe 	bl	d5eac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d62b0:	4638      	mov	r0, r7
   d62b2:	b015      	add	sp, #84	; 0x54
   d62b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d62b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d62b8:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d62ba:	4a03      	ldr	r2, [pc, #12]	; (d62c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d62bc:	601a      	str	r2, [r3, #0]
   d62be:	2200      	movs	r2, #0
   d62c0:	605a      	str	r2, [r3, #4]

} // spark
   d62c2:	4770      	bx	lr
   d62c4:	2003e5a8 	.word	0x2003e5a8
   d62c8:	000d894c 	.word	0x000d894c

000d62cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d62cc:	2200      	movs	r2, #0
   d62ce:	6840      	ldr	r0, [r0, #4]
   d62d0:	4611      	mov	r1, r2
   d62d2:	f7ff be6b 	b.w	d5fac <network_ready>

000d62d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62d6:	2200      	movs	r2, #0
   d62d8:	6840      	ldr	r0, [r0, #4]
   d62da:	4611      	mov	r1, r2
   d62dc:	f7ff be86 	b.w	d5fec <network_listening>

000d62e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d62e0:	2200      	movs	r2, #0
   d62e2:	6840      	ldr	r0, [r0, #4]
   d62e4:	4611      	mov	r1, r2
   d62e6:	f7ff be91 	b.w	d600c <network_get_listen_timeout>

000d62ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d62ea:	6840      	ldr	r0, [r0, #4]
   d62ec:	2200      	movs	r2, #0
   d62ee:	f7ff be85 	b.w	d5ffc <network_set_listen_timeout>

000d62f2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d62f2:	6840      	ldr	r0, [r0, #4]
   d62f4:	2200      	movs	r2, #0
   d62f6:	f081 0101 	eor.w	r1, r1, #1
   d62fa:	f7ff be6f 	b.w	d5fdc <network_listen>

000d62fe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d62fe:	2300      	movs	r3, #0
   d6300:	6840      	ldr	r0, [r0, #4]
   d6302:	461a      	mov	r2, r3
   d6304:	4619      	mov	r1, r3
   d6306:	f7ff be61 	b.w	d5fcc <network_off>

000d630a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d630a:	2300      	movs	r3, #0
   d630c:	6840      	ldr	r0, [r0, #4]
   d630e:	461a      	mov	r2, r3
   d6310:	4619      	mov	r1, r3
   d6312:	f7ff be53 	b.w	d5fbc <network_on>

000d6316 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6316:	2200      	movs	r2, #0
   d6318:	6840      	ldr	r0, [r0, #4]
   d631a:	4611      	mov	r1, r2
   d631c:	f7ff be36 	b.w	d5f8c <network_connecting>

000d6320 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6320:	6840      	ldr	r0, [r0, #4]
   d6322:	2200      	movs	r2, #0
   d6324:	2102      	movs	r1, #2
   d6326:	f7ff be39 	b.w	d5f9c <network_disconnect>

000d632a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d632a:	2300      	movs	r3, #0
   d632c:	6840      	ldr	r0, [r0, #4]
   d632e:	461a      	mov	r2, r3
   d6330:	f7ff be24 	b.w	d5f7c <network_connect>

000d6334 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6334:	4b02      	ldr	r3, [pc, #8]	; (d6340 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6336:	2204      	movs	r2, #4
   d6338:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d633a:	4a02      	ldr	r2, [pc, #8]	; (d6344 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d633c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d633e:	4770      	bx	lr
   d6340:	2003e5b0 	.word	0x2003e5b0
   d6344:	000d8988 	.word	0x000d8988

000d6348 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6348:	2100      	movs	r1, #0
   d634a:	f7ff bd0f 	b.w	d5d6c <hal_spi_acquire>

000d634e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d634e:	2100      	movs	r1, #0
   d6350:	f7ff bd14 	b.w	d5d7c <hal_spi_release>

000d6354 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6354:	b510      	push	{r4, lr}
   d6356:	4604      	mov	r4, r0
   d6358:	4608      	mov	r0, r1
{
    _spi = spi;
   d635a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d635c:	f7ff fce6 	bl	d5d2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6360:	2300      	movs	r3, #0
   d6362:	6063      	str	r3, [r4, #4]
}
   d6364:	4620      	mov	r0, r4
   d6366:	bd10      	pop	{r4, pc}

000d6368 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6368:	b510      	push	{r4, lr}
   d636a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d636c:	7800      	ldrb	r0, [r0, #0]
   d636e:	f7ff ffeb 	bl	d6348 <_ZN8SPIClass4lockEv.isra.0>
   d6372:	b948      	cbnz	r0, d6388 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6374:	7820      	ldrb	r0, [r4, #0]
   d6376:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d637a:	f7ff fcc7 	bl	d5d0c <hal_spi_begin>
        unlock();
   d637e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6384:	f7ff bfe3 	b.w	d634e <_ZN8SPIClass6unlockEv.isra.0>
}
   d6388:	bd10      	pop	{r4, pc}

000d638a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d638a:	7800      	ldrb	r0, [r0, #0]
   d638c:	f7ff bfdf 	b.w	d634e <_ZN8SPIClass6unlockEv.isra.0>

000d6390 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6390:	0840      	lsrs	r0, r0, #1
{
   d6392:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6394:	6018      	str	r0, [r3, #0]
   d6396:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6398:	6818      	ldr	r0, [r3, #0]
   d639a:	4288      	cmp	r0, r1
   d639c:	b2e5      	uxtb	r5, r4
   d639e:	d906      	bls.n	d63ae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d63a0:	3401      	adds	r4, #1
   d63a2:	2c08      	cmp	r4, #8
   d63a4:	d002      	beq.n	d63ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d63a6:	0840      	lsrs	r0, r0, #1
   d63a8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d63aa:	e7f5      	b.n	d6398 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d63ac:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d63b0:	5d5b      	ldrb	r3, [r3, r5]
   d63b2:	7013      	strb	r3, [r2, #0]
}
   d63b4:	bd30      	pop	{r4, r5, pc}
   d63b6:	bf00      	nop
   d63b8:	000d89bc 	.word	0x000d89bc

000d63bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d63bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63c0:	4606      	mov	r6, r0
   d63c2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d63c4:	7800      	ldrb	r0, [r0, #0]
{
   d63c6:	460c      	mov	r4, r1
    CHECK(lock());
   d63c8:	f7ff ffbe 	bl	d6348 <_ZN8SPIClass4lockEv.isra.0>
   d63cc:	2800      	cmp	r0, #0
   d63ce:	db1b      	blt.n	d6408 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d63d0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d63d2:	2214      	movs	r2, #20
   d63d4:	2100      	movs	r1, #0
   d63d6:	a809      	add	r0, sp, #36	; 0x24
   d63d8:	f001 fed8 	bl	d818c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d63dc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d63de:	2200      	movs	r2, #0
   d63e0:	a909      	add	r1, sp, #36	; 0x24
   d63e2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d63e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d63e8:	f7ff fcb0 	bl	d5d4c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d63ec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d63f0:	b113      	cbz	r3, d63f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d63f2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d63f6:	b155      	cbz	r5, d640e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d63f8:	2700      	movs	r7, #0
   d63fa:	46b9      	mov	r9, r7
   d63fc:	46b8      	mov	r8, r7
   d63fe:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d6400:	7923      	ldrb	r3, [r4, #4]
   d6402:	b15d      	cbz	r5, d641c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d6404:	b1c3      	cbz	r3, d6438 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d6406:	2000      	movs	r0, #0
}
   d6408:	b00f      	add	sp, #60	; 0x3c
   d640a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d640e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6412:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6416:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d641a:	e7f1      	b.n	d6400 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d641c:	2b00      	cmp	r3, #0
   d641e:	d135      	bne.n	d648c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6420:	68a3      	ldr	r3, [r4, #8]
   d6422:	4543      	cmp	r3, r8
   d6424:	d108      	bne.n	d6438 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d6426:	f88d 9020 	strb.w	r9, [sp, #32]
   d642a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d642e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6432:	89a3      	ldrh	r3, [r4, #12]
   d6434:	429a      	cmp	r2, r3
   d6436:	d0e6      	beq.n	d6406 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d6438:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d643a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d643c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6440:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6442:	ab04      	add	r3, sp, #16
   d6444:	f10d 020f 	add.w	r2, sp, #15
   d6448:	f7ff ffa2 	bl	d6390 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d644c:	7921      	ldrb	r1, [r4, #4]
   d644e:	b985      	cbnz	r5, d6472 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6450:	b989      	cbnz	r1, d6476 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6452:	68a3      	ldr	r3, [r4, #8]
   d6454:	4543      	cmp	r3, r8
   d6456:	d30e      	bcc.n	d6476 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d6458:	f88d 9020 	strb.w	r9, [sp, #32]
   d645c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6460:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6464:	89a3      	ldrh	r3, [r4, #12]
   d6466:	429a      	cmp	r2, r3
   d6468:	d105      	bne.n	d6476 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d646a:	9b04      	ldr	r3, [sp, #16]
   d646c:	4543      	cmp	r3, r8
   d646e:	d102      	bne.n	d6476 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6470:	e7c9      	b.n	d6406 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6472:	2900      	cmp	r1, #0
   d6474:	d1f9      	bne.n	d646a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d6476:	2300      	movs	r3, #0
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	7b63      	ldrb	r3, [r4, #13]
   d647c:	9300      	str	r3, [sp, #0]
   d647e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6482:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6484:	7830      	ldrb	r0, [r6, #0]
   d6486:	f7ff fc69 	bl	d5d5c <hal_spi_set_settings>
   d648a:	e7bc      	b.n	d6406 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d648c:	e9cd 5500 	strd	r5, r5, [sp]
   d6490:	462b      	mov	r3, r5
   d6492:	462a      	mov	r2, r5
   d6494:	2101      	movs	r1, #1
   d6496:	e7f5      	b.n	d6484 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6498 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6498:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d649a:	7800      	ldrb	r0, [r0, #0]
   d649c:	f7ff fc3e 	bl	d5d1c <hal_spi_transfer>
}
   d64a0:	b2c0      	uxtb	r0, r0
   d64a2:	bd08      	pop	{r3, pc}

000d64a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d64a4:	4770      	bx	lr

000d64a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d64a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64a8:	4606      	mov	r6, r0
   d64aa:	4615      	mov	r5, r2
   d64ac:	460c      	mov	r4, r1
   d64ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d64b0:	42bc      	cmp	r4, r7
   d64b2:	d006      	beq.n	d64c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d64b4:	6833      	ldr	r3, [r6, #0]
   d64b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d64ba:	689b      	ldr	r3, [r3, #8]
   d64bc:	4630      	mov	r0, r6
   d64be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d64c0:	e7f6      	b.n	d64b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d64c2:	4628      	mov	r0, r5
   d64c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d64c6:	7c00      	ldrb	r0, [r0, #16]
   d64c8:	2200      	movs	r2, #0
   d64ca:	f7ff bbe7 	b.w	d5c9c <hal_i2c_write>

000d64ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d64ce:	7c00      	ldrb	r0, [r0, #16]
   d64d0:	2100      	movs	r1, #0
   d64d2:	f7ff bbeb 	b.w	d5cac <hal_i2c_available>

000d64d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d64d6:	7c00      	ldrb	r0, [r0, #16]
   d64d8:	2100      	movs	r1, #0
   d64da:	f7ff bbef 	b.w	d5cbc <hal_i2c_read>

000d64de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d64de:	7c00      	ldrb	r0, [r0, #16]
   d64e0:	2100      	movs	r1, #0
   d64e2:	f7ff bbf3 	b.w	d5ccc <hal_i2c_peek>

000d64e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d64e6:	7c00      	ldrb	r0, [r0, #16]
   d64e8:	2100      	movs	r1, #0
   d64ea:	f7ff bbf7 	b.w	d5cdc <hal_i2c_flush>

000d64ee <_ZN7TwoWireD0Ev>:
   d64ee:	b510      	push	{r4, lr}
   d64f0:	2114      	movs	r1, #20
   d64f2:	4604      	mov	r4, r0
   d64f4:	f001 f881 	bl	d75fa <_ZdlPvj>
   d64f8:	4620      	mov	r0, r4
   d64fa:	bd10      	pop	{r4, pc}

000d64fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d64fc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d64fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6502:	4604      	mov	r4, r0
   d6504:	4608      	mov	r0, r1
   d6506:	2100      	movs	r1, #0
   d6508:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d650c:	4b03      	ldr	r3, [pc, #12]	; (d651c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d650e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6510:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6512:	4611      	mov	r1, r2
   d6514:	f7ff fbf2 	bl	d5cfc <hal_i2c_init>
}
   d6518:	4620      	mov	r0, r4
   d651a:	bd10      	pop	{r4, pc}
   d651c:	000d89cc 	.word	0x000d89cc

000d6520 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6520:	2300      	movs	r3, #0
   d6522:	7c00      	ldrb	r0, [r0, #16]
   d6524:	461a      	mov	r2, r3
   d6526:	4619      	mov	r1, r3
   d6528:	f7ff bba0 	b.w	d5c6c <hal_i2c_begin>

000d652c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d652c:	7c00      	ldrb	r0, [r0, #16]
   d652e:	2200      	movs	r2, #0
   d6530:	f7ff bba4 	b.w	d5c7c <hal_i2c_begin_transmission>

000d6534 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6534:	7c00      	ldrb	r0, [r0, #16]
   d6536:	2200      	movs	r2, #0
   d6538:	f7ff bba8 	b.w	d5c8c <hal_i2c_end_transmission>

000d653c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d653c:	2101      	movs	r1, #1
   d653e:	f7ff bff9 	b.w	d6534 <_ZN7TwoWire15endTransmissionEh>

000d6542 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6542:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6544:	6883      	ldr	r3, [r0, #8]
   d6546:	4604      	mov	r4, r0
   d6548:	b90b      	cbnz	r3, d654e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d654a:	f001 f85c 	bl	d7606 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d654e:	68c3      	ldr	r3, [r0, #12]
   d6550:	4798      	blx	r3
      if (_M_manager)
   d6552:	68a3      	ldr	r3, [r4, #8]
   d6554:	b11b      	cbz	r3, d655e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6556:	2203      	movs	r2, #3
   d6558:	4621      	mov	r1, r4
   d655a:	4620      	mov	r0, r4
   d655c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d655e:	4620      	mov	r0, r4
   d6560:	2110      	movs	r1, #16
}
   d6562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6566:	f001 b848 	b.w	d75fa <_ZdlPvj>

000d656a <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d656a:	4770      	bx	lr

000d656c <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d656c:	7441      	strb	r1, [r0, #17]
}
   d656e:	4770      	bx	lr

000d6570 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6570:	4770      	bx	lr

000d6572 <_ZN11USARTSerial17availableForWriteEv>:
{
   d6572:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6574:	7c00      	ldrb	r0, [r0, #16]
   d6576:	f7ff fc41 	bl	d5dfc <hal_usart_available_data_for_write>
}
   d657a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d657e:	bd08      	pop	{r3, pc}

000d6580 <_ZN11USARTSerial9availableEv>:
{
   d6580:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6582:	7c00      	ldrb	r0, [r0, #16]
   d6584:	f7ff fc12 	bl	d5dac <hal_usart_available>
}
   d6588:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d658c:	bd08      	pop	{r3, pc}

000d658e <_ZN11USARTSerial4peekEv>:
{
   d658e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6590:	7c00      	ldrb	r0, [r0, #16]
   d6592:	f7ff fc1b 	bl	d5dcc <hal_usart_peek>
}
   d6596:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d659a:	bd08      	pop	{r3, pc}

000d659c <_ZN11USARTSerial4readEv>:
{
   d659c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d659e:	7c00      	ldrb	r0, [r0, #16]
   d65a0:	f7ff fc0c 	bl	d5dbc <hal_usart_read>
}
   d65a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65a8:	bd08      	pop	{r3, pc}

000d65aa <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d65aa:	7c00      	ldrb	r0, [r0, #16]
   d65ac:	f7ff bc16 	b.w	d5ddc <hal_usart_flush>

000d65b0 <_ZN11USARTSerial5writeEh>:
{
   d65b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d65b2:	7c45      	ldrb	r5, [r0, #17]
{
   d65b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d65b6:	b12d      	cbz	r5, d65c4 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d65b8:	7c20      	ldrb	r0, [r4, #16]
}
   d65ba:	b003      	add	sp, #12
   d65bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d65c0:	f7ff bbec 	b.w	d5d9c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d65c4:	7c00      	ldrb	r0, [r0, #16]
   d65c6:	9101      	str	r1, [sp, #4]
   d65c8:	f7ff fc18 	bl	d5dfc <hal_usart_available_data_for_write>
   d65cc:	2800      	cmp	r0, #0
   d65ce:	9901      	ldr	r1, [sp, #4]
   d65d0:	dcf2      	bgt.n	d65b8 <_ZN11USARTSerial5writeEh+0x8>
}
   d65d2:	4628      	mov	r0, r5
   d65d4:	b003      	add	sp, #12
   d65d6:	bd30      	pop	{r4, r5, pc}

000d65d8 <_ZN11USARTSerialD0Ev>:
   d65d8:	b510      	push	{r4, lr}
   d65da:	2114      	movs	r1, #20
   d65dc:	4604      	mov	r4, r0
   d65de:	f001 f80c 	bl	d75fa <_ZdlPvj>
   d65e2:	4620      	mov	r0, r4
   d65e4:	bd10      	pop	{r4, pc}
	...

000d65e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d65e8:	b510      	push	{r4, lr}
   d65ea:	f04f 0c00 	mov.w	ip, #0
   d65ee:	4604      	mov	r4, r0
   d65f0:	4608      	mov	r0, r1
   d65f2:	4611      	mov	r1, r2
   d65f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d65f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d65fc:	4a04      	ldr	r2, [pc, #16]	; (d6610 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d65fe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6600:	2201      	movs	r2, #1
  _serial = serial;
   d6602:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6604:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6606:	461a      	mov	r2, r3
   d6608:	f7ff fbc0 	bl	d5d8c <hal_usart_init>
}
   d660c:	4620      	mov	r0, r4
   d660e:	bd10      	pop	{r4, pc}
   d6610:	000d89f4 	.word	0x000d89f4

000d6614 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6614:	7c00      	ldrb	r0, [r0, #16]
   d6616:	2300      	movs	r3, #0
   d6618:	f7ff bbf8 	b.w	d5e0c <hal_usart_begin_config>

000d661c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d661c:	2200      	movs	r2, #0
   d661e:	f7ff bff9 	b.w	d6614 <_ZN11USARTSerial5beginEmm>
	...

000d6624 <_Z22__fetch_global_Serial1v>:
{
   d6624:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6626:	4c0d      	ldr	r4, [pc, #52]	; (d665c <_Z22__fetch_global_Serial1v+0x38>)
   d6628:	7821      	ldrb	r1, [r4, #0]
   d662a:	f3bf 8f5b 	dmb	ish
   d662e:	f011 0101 	ands.w	r1, r1, #1
   d6632:	d110      	bne.n	d6656 <_Z22__fetch_global_Serial1v+0x32>
   d6634:	4620      	mov	r0, r4
   d6636:	9101      	str	r1, [sp, #4]
   d6638:	f7fd fd33 	bl	d40a2 <__cxa_guard_acquire>
   d663c:	9901      	ldr	r1, [sp, #4]
   d663e:	b150      	cbz	r0, d6656 <_Z22__fetch_global_Serial1v+0x32>
   d6640:	4b07      	ldr	r3, [pc, #28]	; (d6660 <_Z22__fetch_global_Serial1v+0x3c>)
   d6642:	4a08      	ldr	r2, [pc, #32]	; (d6664 <_Z22__fetch_global_Serial1v+0x40>)
   d6644:	4808      	ldr	r0, [pc, #32]	; (d6668 <_Z22__fetch_global_Serial1v+0x44>)
   d6646:	f7ff ffcf 	bl	d65e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d664a:	4620      	mov	r0, r4
   d664c:	f7fd fd2e 	bl	d40ac <__cxa_guard_release>
   d6650:	4806      	ldr	r0, [pc, #24]	; (d666c <_Z22__fetch_global_Serial1v+0x48>)
   d6652:	f001 fd87 	bl	d8164 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6656:	4804      	ldr	r0, [pc, #16]	; (d6668 <_Z22__fetch_global_Serial1v+0x44>)
   d6658:	b002      	add	sp, #8
   d665a:	bd10      	pop	{r4, pc}
   d665c:	2003e5b8 	.word	0x2003e5b8
   d6660:	2003e640 	.word	0x2003e640
   d6664:	2003e5bc 	.word	0x2003e5bc
   d6668:	2003e6c4 	.word	0x2003e6c4
   d666c:	000d6571 	.word	0x000d6571

000d6670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6670:	680b      	ldr	r3, [r1, #0]
   d6672:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6674:	b113      	cbz	r3, d667c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6676:	685a      	ldr	r2, [r3, #4]
   d6678:	3201      	adds	r2, #1
   d667a:	605a      	str	r2, [r3, #4]
      }
   d667c:	4770      	bx	lr

000d667e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d667e:	7441      	strb	r1, [r0, #17]
}
   d6680:	4770      	bx	lr

000d6682 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6682:	4770      	bx	lr

000d6684 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6684:	4770      	bx	lr

000d6686 <_ZN9USBSerial4readEv>:
{
   d6686:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6688:	2100      	movs	r1, #0
   d668a:	7c00      	ldrb	r0, [r0, #16]
   d668c:	f7ff fad6 	bl	d5c3c <HAL_USB_USART_Receive_Data>
}
   d6690:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6694:	bd08      	pop	{r3, pc}

000d6696 <_ZN9USBSerial4peekEv>:
{
   d6696:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6698:	2101      	movs	r1, #1
   d669a:	7c00      	ldrb	r0, [r0, #16]
   d669c:	f7ff face 	bl	d5c3c <HAL_USB_USART_Receive_Data>
}
   d66a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66a4:	bd08      	pop	{r3, pc}

000d66a6 <_ZN9USBSerial17availableForWriteEv>:
{
   d66a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d66a8:	7c00      	ldrb	r0, [r0, #16]
   d66aa:	f7ff fabf 	bl	d5c2c <HAL_USB_USART_Available_Data_For_Write>
}
   d66ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66b2:	bd08      	pop	{r3, pc}

000d66b4 <_ZN9USBSerial9availableEv>:
{
   d66b4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d66b6:	7c00      	ldrb	r0, [r0, #16]
   d66b8:	f7ff fab0 	bl	d5c1c <HAL_USB_USART_Available_Data>
}
   d66bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66c0:	bd08      	pop	{r3, pc}

000d66c2 <_ZN9USBSerial5writeEh>:
{
   d66c2:	b513      	push	{r0, r1, r4, lr}
   d66c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66c6:	7c00      	ldrb	r0, [r0, #16]
{
   d66c8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66ca:	f7ff faaf 	bl	d5c2c <HAL_USB_USART_Available_Data_For_Write>
   d66ce:	2800      	cmp	r0, #0
   d66d0:	9901      	ldr	r1, [sp, #4]
   d66d2:	dc01      	bgt.n	d66d8 <_ZN9USBSerial5writeEh+0x16>
   d66d4:	7c60      	ldrb	r0, [r4, #17]
   d66d6:	b120      	cbz	r0, d66e2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d66d8:	7c20      	ldrb	r0, [r4, #16]
   d66da:	f7ff fab7 	bl	d5c4c <HAL_USB_USART_Send_Data>
   d66de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d66e2:	b002      	add	sp, #8
   d66e4:	bd10      	pop	{r4, pc}

000d66e6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d66e6:	7c00      	ldrb	r0, [r0, #16]
   d66e8:	f7ff bab8 	b.w	d5c5c <HAL_USB_USART_Flush_Data>

000d66ec <_ZN9USBSerialD0Ev>:
   d66ec:	b510      	push	{r4, lr}
   d66ee:	2114      	movs	r1, #20
   d66f0:	4604      	mov	r4, r0
   d66f2:	f000 ff82 	bl	d75fa <_ZdlPvj>
   d66f6:	4620      	mov	r0, r4
   d66f8:	bd10      	pop	{r4, pc}
	...

000d66fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d66fc:	b510      	push	{r4, lr}
   d66fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6702:	4604      	mov	r4, r0
   d6704:	4608      	mov	r0, r1
   d6706:	2100      	movs	r1, #0
   d6708:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d670c:	4b04      	ldr	r3, [pc, #16]	; (d6720 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d670e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6710:	2301      	movs	r3, #1
  _serial = serial;
   d6712:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6714:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6716:	4611      	mov	r1, r2
   d6718:	f7ff fa70 	bl	d5bfc <HAL_USB_USART_Init>
}
   d671c:	4620      	mov	r0, r4
   d671e:	bd10      	pop	{r4, pc}
   d6720:	000d8a24 	.word	0x000d8a24

000d6724 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6724:	7c00      	ldrb	r0, [r0, #16]
   d6726:	2200      	movs	r2, #0
   d6728:	f7ff ba70 	b.w	d5c0c <HAL_USB_USART_Begin>

000d672c <_Z19acquireSerialBufferv>:
{
   d672c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d672e:	2214      	movs	r2, #20
{
   d6730:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6732:	2100      	movs	r1, #0
   d6734:	f001 fd2a 	bl	d818c <memset>
}
   d6738:	4620      	mov	r0, r4
   d673a:	bd10      	pop	{r4, pc}

000d673c <_Z16_fetch_usbserialv>:
{
   d673c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d673e:	4c0f      	ldr	r4, [pc, #60]	; (d677c <_Z16_fetch_usbserialv+0x40>)
{
   d6740:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6742:	a803      	add	r0, sp, #12
   d6744:	f7ff fff2 	bl	d672c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6748:	7821      	ldrb	r1, [r4, #0]
   d674a:	f3bf 8f5b 	dmb	ish
   d674e:	f011 0101 	ands.w	r1, r1, #1
   d6752:	d10f      	bne.n	d6774 <_Z16_fetch_usbserialv+0x38>
   d6754:	4620      	mov	r0, r4
   d6756:	9101      	str	r1, [sp, #4]
   d6758:	f7fd fca3 	bl	d40a2 <__cxa_guard_acquire>
   d675c:	9901      	ldr	r1, [sp, #4]
   d675e:	b148      	cbz	r0, d6774 <_Z16_fetch_usbserialv+0x38>
   d6760:	aa03      	add	r2, sp, #12
   d6762:	4807      	ldr	r0, [pc, #28]	; (d6780 <_Z16_fetch_usbserialv+0x44>)
   d6764:	f7ff ffca 	bl	d66fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6768:	4620      	mov	r0, r4
   d676a:	f7fd fc9f 	bl	d40ac <__cxa_guard_release>
   d676e:	4805      	ldr	r0, [pc, #20]	; (d6784 <_Z16_fetch_usbserialv+0x48>)
   d6770:	f001 fcf8 	bl	d8164 <atexit>
	return _usbserial;
}
   d6774:	4802      	ldr	r0, [pc, #8]	; (d6780 <_Z16_fetch_usbserialv+0x44>)
   d6776:	b008      	add	sp, #32
   d6778:	bd10      	pop	{r4, pc}
   d677a:	bf00      	nop
   d677c:	2003e6d8 	.word	0x2003e6d8
   d6780:	2003e6dc 	.word	0x2003e6dc
   d6784:	000d6683 	.word	0x000d6683

000d6788 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6788:	4770      	bx	lr

000d678a <_ZN9IPAddressD0Ev>:
   d678a:	b510      	push	{r4, lr}
   d678c:	2118      	movs	r1, #24
   d678e:	4604      	mov	r4, r0
   d6790:	f000 ff33 	bl	d75fa <_ZdlPvj>
   d6794:	4620      	mov	r0, r4
   d6796:	bd10      	pop	{r4, pc}

000d6798 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6798:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d679a:	7d03      	ldrb	r3, [r0, #20]
   d679c:	2b06      	cmp	r3, #6
{
   d679e:	b08d      	sub	sp, #52	; 0x34
   d67a0:	460e      	mov	r6, r1
   d67a2:	f100 0704 	add.w	r7, r0, #4
   d67a6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d67aa:	d012      	beq.n	d67d2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d67ac:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d67b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d67b4:	220a      	movs	r2, #10
   d67b6:	4630      	mov	r0, r6
   d67b8:	f000 fc65 	bl	d7086 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67bc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67be:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d67c0:	d019      	beq.n	d67f6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d67c2:	2c00      	cmp	r4, #0
   d67c4:	d0f4      	beq.n	d67b0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d67c6:	212e      	movs	r1, #46	; 0x2e
   d67c8:	4630      	mov	r0, r6
   d67ca:	f000 fc43 	bl	d7054 <_ZN5Print5printEc>
   d67ce:	4404      	add	r4, r0
   d67d0:	e7ee      	b.n	d67b0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d67d2:	232f      	movs	r3, #47	; 0x2f
   d67d4:	466a      	mov	r2, sp
   d67d6:	4639      	mov	r1, r7
   d67d8:	200a      	movs	r0, #10
		buf[0] = 0;
   d67da:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d67de:	f7ff fb1d 	bl	d5e1c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d67e2:	4668      	mov	r0, sp
   d67e4:	f001 fd23 	bl	d822e <strlen>
   d67e8:	6833      	ldr	r3, [r6, #0]
   d67ea:	4602      	mov	r2, r0
   d67ec:	68db      	ldr	r3, [r3, #12]
   d67ee:	4669      	mov	r1, sp
   d67f0:	4630      	mov	r0, r6
   d67f2:	4798      	blx	r3
   d67f4:	4604      	mov	r4, r0
    }
    return n;
}
   d67f6:	4620      	mov	r0, r4
   d67f8:	b00d      	add	sp, #52	; 0x34
   d67fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d67fc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d67fc:	b510      	push	{r4, lr}
   d67fe:	4b05      	ldr	r3, [pc, #20]	; (d6814 <_ZN9IPAddressC1Ev+0x18>)
   d6800:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6802:	2211      	movs	r2, #17
   d6804:	f840 3b04 	str.w	r3, [r0], #4
   d6808:	2100      	movs	r1, #0
   d680a:	f001 fcbf 	bl	d818c <memset>
}
   d680e:	4620      	mov	r0, r4
   d6810:	bd10      	pop	{r4, pc}
   d6812:	bf00      	nop
   d6814:	000d8a54 	.word	0x000d8a54

000d6818 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6818:	4603      	mov	r3, r0
   d681a:	4a07      	ldr	r2, [pc, #28]	; (d6838 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d681c:	b510      	push	{r4, lr}
   d681e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6822:	f101 0210 	add.w	r2, r1, #16
   d6826:	f851 4b04 	ldr.w	r4, [r1], #4
   d682a:	f843 4b04 	str.w	r4, [r3], #4
   d682e:	4291      	cmp	r1, r2
   d6830:	d1f9      	bne.n	d6826 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6832:	780a      	ldrb	r2, [r1, #0]
   d6834:	701a      	strb	r2, [r3, #0]
}
   d6836:	bd10      	pop	{r4, pc}
   d6838:	000d8a54 	.word	0x000d8a54

000d683c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d683c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d683e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6842:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6846:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d684a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d684e:	2304      	movs	r3, #4
   d6850:	6041      	str	r1, [r0, #4]
   d6852:	7503      	strb	r3, [r0, #20]
}
   d6854:	bd10      	pop	{r4, pc}

000d6856 <_ZN9IPAddressaSEPKh>:
{
   d6856:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6858:	78cb      	ldrb	r3, [r1, #3]
   d685a:	9300      	str	r3, [sp, #0]
   d685c:	788b      	ldrb	r3, [r1, #2]
   d685e:	784a      	ldrb	r2, [r1, #1]
   d6860:	7809      	ldrb	r1, [r1, #0]
   d6862:	f7ff ffeb 	bl	d683c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6866:	b002      	add	sp, #8
   d6868:	bd10      	pop	{r4, pc}

000d686a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d686a:	4770      	bx	lr

000d686c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d686c:	2000      	movs	r0, #0
   d686e:	4770      	bx	lr

000d6870 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6870:	b510      	push	{r4, lr}
   d6872:	2110      	movs	r1, #16
   d6874:	4604      	mov	r4, r0
   d6876:	f000 fec0 	bl	d75fa <_ZdlPvj>
   d687a:	4620      	mov	r0, r4
   d687c:	bd10      	pop	{r4, pc}

000d687e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d687e:	b508      	push	{r3, lr}
      { delete this; }
   d6880:	f7ff fff6 	bl	d6870 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6884:	bd08      	pop	{r3, pc}

000d6886 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6886:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6888:	2200      	movs	r2, #0
   d688a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d688e:	6002      	str	r2, [r0, #0]
   d6890:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6892:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6894:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6896:	680c      	ldr	r4, [r1, #0]
   d6898:	8085      	strh	r5, [r0, #4]
   d689a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d689c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d689e:	bd30      	pop	{r4, r5, pc}

000d68a0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d68a0:	b510      	push	{r4, lr}
   d68a2:	4604      	mov	r4, r0
    free((void*)msg_);
   d68a4:	6800      	ldr	r0, [r0, #0]
   d68a6:	f7ff fc19 	bl	d60dc <free>
}
   d68aa:	4620      	mov	r0, r4
   d68ac:	bd10      	pop	{r4, pc}

000d68ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d68ae:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d68b0:	68c4      	ldr	r4, [r0, #12]
   d68b2:	b1f4      	cbz	r4, d68f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d68b4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d68b6:	2b02      	cmp	r3, #2
   d68b8:	d103      	bne.n	d68c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d68ba:	f104 000c 	add.w	r0, r4, #12
   d68be:	f7ff ffef 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d68c2:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d68c4:	b135      	cbz	r5, d68d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d68c6:	4628      	mov	r0, r5
   d68c8:	f7ff fc48 	bl	d615c <_ZNSt14_Function_baseD1Ev>
   d68cc:	2110      	movs	r1, #16
   d68ce:	4628      	mov	r0, r5
   d68d0:	f000 fe93 	bl	d75fa <_ZdlPvj>
   d68d4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d68d6:	b135      	cbz	r5, d68e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d68d8:	4628      	mov	r0, r5
   d68da:	f7ff fc3f 	bl	d615c <_ZNSt14_Function_baseD1Ev>
   d68de:	2110      	movs	r1, #16
   d68e0:	4628      	mov	r0, r5
   d68e2:	f000 fe8a 	bl	d75fa <_ZdlPvj>
   d68e6:	4620      	mov	r0, r4
   d68e8:	2114      	movs	r1, #20
   d68ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d68ee:	f000 be84 	b.w	d75fa <_ZdlPvj>
   d68f2:	bd38      	pop	{r3, r4, r5, pc}

000d68f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d68f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d68f6:	460e      	mov	r6, r1
   d68f8:	4604      	mov	r4, r0
   d68fa:	f856 3b04 	ldr.w	r3, [r6], #4
   d68fe:	9300      	str	r3, [sp, #0]
   d6900:	460d      	mov	r5, r1
   d6902:	a801      	add	r0, sp, #4
   d6904:	4631      	mov	r1, r6
   d6906:	f7ff feb3 	bl	d6670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d690a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d690c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d690e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6910:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6912:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6914:	2300      	movs	r3, #0
   d6916:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6918:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d691a:	f7fd fd9f 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d691e:	4630      	mov	r0, r6
   d6920:	f7fd fd9c 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6924:	4628      	mov	r0, r5
   d6926:	2108      	movs	r1, #8
   d6928:	f000 fe67 	bl	d75fa <_ZdlPvj>
        return p;
    }
   d692c:	4620      	mov	r0, r4
   d692e:	b002      	add	sp, #8
   d6930:	bd70      	pop	{r4, r5, r6, pc}

000d6932 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6932:	b513      	push	{r0, r1, r4, lr}
   d6934:	460b      	mov	r3, r1
   d6936:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6938:	e9d0 0100 	ldrd	r0, r1, [r0]
   d693c:	466c      	mov	r4, sp
   d693e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6942:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6946:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d694a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d694e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6952:	b002      	add	sp, #8
   d6954:	bd10      	pop	{r4, pc}

000d6956 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6956:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6958:	b510      	push	{r4, lr}
      if (_M_empty())
   d695a:	b90a      	cbnz	r2, d6960 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d695c:	f000 fe53 	bl	d7606 <_ZSt25__throw_bad_function_callv>
    }
   d6960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6964:	68c3      	ldr	r3, [r0, #12]
   d6966:	4718      	bx	r3

000d6968 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6968:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d696a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d696c:	f100 0110 	add.w	r1, r0, #16
   d6970:	f7ff fff1 	bl	d6956 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6974:	bd08      	pop	{r3, pc}

000d6976 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6976:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6978:	b510      	push	{r4, lr}
      if (_M_empty())
   d697a:	b90a      	cbnz	r2, d6980 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d697c:	f000 fe43 	bl	d7606 <_ZSt25__throw_bad_function_callv>
    }
   d6980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6984:	68c3      	ldr	r3, [r0, #12]
   d6986:	4718      	bx	r3

000d6988 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6988:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d698a:	6800      	ldr	r0, [r0, #0]
   d698c:	f100 0110 	add.w	r1, r0, #16
   d6990:	f7ff fff1 	bl	d6976 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6994:	bd08      	pop	{r3, pc}
	...

000d6998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6998:	b538      	push	{r3, r4, r5, lr}
   d699a:	2300      	movs	r3, #0
   d699c:	4604      	mov	r4, r0
   d699e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69a0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d69a2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69a4:	f7fd fb77 	bl	d4096 <_Znwj>
   d69a8:	b128      	cbz	r0, d69b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d69aa:	2301      	movs	r3, #1
   d69ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d69b0:	4b02      	ldr	r3, [pc, #8]	; (d69bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d69b2:	6003      	str	r3, [r0, #0]
   d69b4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69b6:	6020      	str	r0, [r4, #0]
	}
   d69b8:	4620      	mov	r0, r4
   d69ba:	bd38      	pop	{r3, r4, r5, pc}
   d69bc:	000d8a68 	.word	0x000d8a68

000d69c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d69c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d69c2:	2300      	movs	r3, #0
   d69c4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d69c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d69c8:	4604      	mov	r4, r0
   d69ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d69cc:	b12b      	cbz	r3, d69da <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d69ce:	2202      	movs	r2, #2
   d69d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d69d2:	68eb      	ldr	r3, [r5, #12]
   d69d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d69d6:	68ab      	ldr	r3, [r5, #8]
   d69d8:	60a3      	str	r3, [r4, #8]
    }
   d69da:	4620      	mov	r0, r4
   d69dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d69e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69e2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d69e4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d69e6:	4668      	mov	r0, sp
   d69e8:	f7ff ff4d 	bl	d6886 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d69ec:	f04f 0302 	mov.w	r3, #2
   d69f0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d69f4:	2a00      	cmp	r2, #0
   d69f6:	d103      	bne.n	d6a00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d69f8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d69fc:	2900      	cmp	r1, #0
   d69fe:	d1f7      	bne.n	d69f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6a00:	d125      	bne.n	d6a4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6a02:	f104 050c 	add.w	r5, r4, #12
   d6a06:	4669      	mov	r1, sp
   d6a08:	4628      	mov	r0, r5
   d6a0a:	f7ff ff3c 	bl	d6886 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6a0e:	f3bf 8f5b 	dmb	ish
   d6a12:	2301      	movs	r3, #1
   d6a14:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6a16:	2000      	movs	r0, #0
   d6a18:	f104 0308 	add.w	r3, r4, #8
   d6a1c:	f3bf 8f5b 	dmb	ish
   d6a20:	e853 6f00 	ldrex	r6, [r3]
   d6a24:	e843 0200 	strex	r2, r0, [r3]
   d6a28:	2a00      	cmp	r2, #0
   d6a2a:	d1f9      	bne.n	d6a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6a2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6a30:	b16e      	cbz	r6, d6a4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6a32:	f7ff fb13 	bl	d605c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6a36:	b178      	cbz	r0, d6a58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6a38:	4629      	mov	r1, r5
   d6a3a:	4630      	mov	r0, r6
   d6a3c:	f7ff ff8b 	bl	d6956 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6a40:	4630      	mov	r0, r6
   d6a42:	f7ff fb8b 	bl	d615c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6a46:	2110      	movs	r1, #16
   d6a48:	4630      	mov	r0, r6
   d6a4a:	f000 fdd6 	bl	d75fa <_ZdlPvj>
        p_->setError(std::move(error));
   d6a4e:	4668      	mov	r0, sp
   d6a50:	f7ff ff26 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
    }
   d6a54:	b009      	add	sp, #36	; 0x24
   d6a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6a58:	4631      	mov	r1, r6
   d6a5a:	a802      	add	r0, sp, #8
   d6a5c:	f7ff ffb0 	bl	d69c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6a60:	68e0      	ldr	r0, [r4, #12]
   d6a62:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6a66:	b108      	cbz	r0, d6a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6a68:	f001 fbc4 	bl	d81f4 <strdup>
        type_(type) {
   d6a6c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6a6e:	2010      	movs	r0, #16
   d6a70:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6a74:	f7fd fb0f 	bl	d4096 <_Znwj>
   d6a78:	4605      	mov	r5, r0
   d6a7a:	b1e8      	cbz	r0, d6ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6a7c:	2700      	movs	r7, #0
   d6a7e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a80:	2018      	movs	r0, #24
   d6a82:	f7fd fb08 	bl	d4096 <_Znwj>
   d6a86:	4604      	mov	r4, r0
   d6a88:	b188      	cbz	r0, d6aae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6a8a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6a8c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6a8e:	a802      	add	r0, sp, #8
   d6a90:	f7ff ff4f 	bl	d6932 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a94:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6a96:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a98:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a9a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6a9c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6a9e:	a906      	add	r1, sp, #24
   d6aa0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6aa2:	60e3      	str	r3, [r4, #12]
   d6aa4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6aa8:	9205      	str	r2, [sp, #20]
   d6aaa:	f7ff feec 	bl	d6886 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6aae:	4b08      	ldr	r3, [pc, #32]	; (d6ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6ab0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6ab2:	4b08      	ldr	r3, [pc, #32]	; (d6ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ab4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6ab6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6ab8:	a806      	add	r0, sp, #24
   d6aba:	f7ff fef1 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6abe:	a802      	add	r0, sp, #8
   d6ac0:	f7ff fb4c 	bl	d615c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6ac4:	2200      	movs	r2, #0
   d6ac6:	4629      	mov	r1, r5
   d6ac8:	4803      	ldr	r0, [pc, #12]	; (d6ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6aca:	f7ff facf 	bl	d606c <application_thread_invoke>
   d6ace:	e7b7      	b.n	d6a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6ad0:	000d6969 	.word	0x000d6969
   d6ad4:	000d6c01 	.word	0x000d6c01
   d6ad8:	000d6543 	.word	0x000d6543

000d6adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ae0:	b08a      	sub	sp, #40	; 0x28
   d6ae2:	4605      	mov	r5, r0
   d6ae4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6ae8:	460c      	mov	r4, r1
   d6aea:	4617      	mov	r7, r2
   d6aec:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6aee:	f7ff fa25 	bl	d5f3c <spark_cloud_flag_connected>
   d6af2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6af4:	4682      	mov	sl, r0
   d6af6:	bb38      	cbnz	r0, d6b48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6af8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6afc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6afe:	a905      	add	r1, sp, #20
   d6b00:	4630      	mov	r0, r6
   d6b02:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6b06:	f7ff febe 	bl	d6886 <_ZN8particle5ErrorC1EOS0_>
   d6b0a:	2014      	movs	r0, #20
   d6b0c:	f7fd fac3 	bl	d4096 <_Znwj>
   d6b10:	4604      	mov	r4, r0
   d6b12:	b148      	cbz	r0, d6b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6b14:	2302      	movs	r3, #2
   d6b16:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b18:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b1a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b1e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6b20:	4631      	mov	r1, r6
   d6b22:	300c      	adds	r0, #12
   d6b24:	f7ff feaf 	bl	d6886 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6b28:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6b2a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6b2c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6b30:	f7ff ff32 	bl	d6998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6b34:	4630      	mov	r0, r6
   d6b36:	f7ff feb3 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6b3a:	a805      	add	r0, sp, #20
   d6b3c:	f7ff feb0 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6b40:	4628      	mov	r0, r5
   d6b42:	b00a      	add	sp, #40	; 0x28
   d6b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6b48:	230c      	movs	r3, #12
   d6b4a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6b4e:	2014      	movs	r0, #20
   d6b50:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6b54:	9307      	str	r3, [sp, #28]
   d6b56:	f7fd fa9e 	bl	d4096 <_Znwj>
   d6b5a:	4601      	mov	r1, r0
   d6b5c:	b128      	cbz	r0, d6b6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b5e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6b62:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b66:	f880 a001 	strb.w	sl, [r0, #1]
   d6b6a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6b6c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6b6e:	f7ff ff13 	bl	d6998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6b72:	4b22      	ldr	r3, [pc, #136]	; (d6bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6b74:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6b76:	2008      	movs	r0, #8
   d6b78:	f7fd fa8d 	bl	d4096 <_Znwj>
   d6b7c:	4682      	mov	sl, r0
   d6b7e:	b128      	cbz	r0, d6b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b80:	9b03      	ldr	r3, [sp, #12]
   d6b82:	f840 3b04 	str.w	r3, [r0], #4
   d6b86:	a904      	add	r1, sp, #16
   d6b88:	f7ff fd72 	bl	d6670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6b8c:	9600      	str	r6, [sp, #0]
   d6b8e:	fa5f f389 	uxtb.w	r3, r9
   d6b92:	4642      	mov	r2, r8
   d6b94:	4639      	mov	r1, r7
   d6b96:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6b98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6b9c:	f7ff f9de 	bl	d5f5c <spark_send_event>
   d6ba0:	b9b8      	cbnz	r0, d6bd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6ba2:	9b03      	ldr	r3, [sp, #12]
   d6ba4:	785b      	ldrb	r3, [r3, #1]
   d6ba6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6baa:	b993      	cbnz	r3, d6bd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6bac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6bb0:	a905      	add	r1, sp, #20
   d6bb2:	a803      	add	r0, sp, #12
   d6bb4:	9205      	str	r2, [sp, #20]
   d6bb6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6bba:	f7ff ff11 	bl	d69e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6bbe:	a805      	add	r0, sp, #20
   d6bc0:	f7ff fe6e 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6bc4:	a805      	add	r0, sp, #20
   d6bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6bc8:	f7ff fe94 	bl	d68f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6bcc:	a806      	add	r0, sp, #24
   d6bce:	f7fd fc45 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bd2:	9b03      	ldr	r3, [sp, #12]
   d6bd4:	9305      	str	r3, [sp, #20]
   d6bd6:	a904      	add	r1, sp, #16
   d6bd8:	a806      	add	r0, sp, #24
   d6bda:	f7ff fd49 	bl	d6670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6bde:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6be0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6be2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6be4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6be6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6be8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6bea:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6bec:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6bee:	f7fd fc35 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bf2:	a804      	add	r0, sp, #16
   d6bf4:	f7fd fc32 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6bf8:	e7a2      	b.n	d6b40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6bfa:	bf00      	nop
   d6bfc:	000d6cc5 	.word	0x000d6cc5

000d6c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6c00:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c04:	4605      	mov	r5, r0
	  switch (__op)
   d6c06:	d007      	beq.n	d6c18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6c08:	2a03      	cmp	r2, #3
   d6c0a:	d018      	beq.n	d6c3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6c0c:	2a01      	cmp	r2, #1
   d6c0e:	d101      	bne.n	d6c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c10:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c12:	6003      	str	r3, [r0, #0]
	}
   d6c14:	2000      	movs	r0, #0
   d6c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c18:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6c1a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c1c:	f7fd fa3b 	bl	d4096 <_Znwj>
   d6c20:	4604      	mov	r4, r0
   d6c22:	b150      	cbz	r0, d6c3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6c24:	4631      	mov	r1, r6
   d6c26:	f7ff fecb 	bl	d69c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6c2a:	6930      	ldr	r0, [r6, #16]
   d6c2c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6c30:	b108      	cbz	r0, d6c36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6c32:	f001 fadf 	bl	d81f4 <strdup>
        type_(type) {
   d6c36:	6120      	str	r0, [r4, #16]
   d6c38:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6c3a:	602c      	str	r4, [r5, #0]
	}
   d6c3c:	e7ea      	b.n	d6c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6c3e:	6804      	ldr	r4, [r0, #0]
   d6c40:	2c00      	cmp	r4, #0
   d6c42:	d0e7      	beq.n	d6c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6c44:	f104 0010 	add.w	r0, r4, #16
   d6c48:	f7ff fe2a 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6c4c:	4620      	mov	r0, r4
   d6c4e:	f7ff fa85 	bl	d615c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6c52:	2118      	movs	r1, #24
   d6c54:	4620      	mov	r0, r4
   d6c56:	f000 fcd0 	bl	d75fa <_ZdlPvj>
   d6c5a:	e7db      	b.n	d6c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6c5c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6c5c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6c5e:	2300      	movs	r3, #0
   d6c60:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6c62:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6c64:	4604      	mov	r4, r0
   d6c66:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6c68:	b12b      	cbz	r3, d6c76 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6c6a:	2202      	movs	r2, #2
   d6c6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6c6e:	68eb      	ldr	r3, [r5, #12]
   d6c70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6c72:	68ab      	ldr	r3, [r5, #8]
   d6c74:	60a3      	str	r3, [r4, #8]
    }
   d6c76:	4620      	mov	r0, r4
   d6c78:	bd38      	pop	{r3, r4, r5, pc}

000d6c7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6c7a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c7c:	b570      	push	{r4, r5, r6, lr}
   d6c7e:	4604      	mov	r4, r0
	  switch (__op)
   d6c80:	d007      	beq.n	d6c92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6c82:	2a03      	cmp	r2, #3
   d6c84:	d012      	beq.n	d6cac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6c86:	2a01      	cmp	r2, #1
   d6c88:	d101      	bne.n	d6c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c8a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c8c:	6003      	str	r3, [r0, #0]
	}
   d6c8e:	2000      	movs	r0, #0
   d6c90:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c92:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6c94:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c96:	f7fd f9fe 	bl	d4096 <_Znwj>
   d6c9a:	4605      	mov	r5, r0
   d6c9c:	b120      	cbz	r0, d6ca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6c9e:	4631      	mov	r1, r6
   d6ca0:	f7ff ffdc 	bl	d6c5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6ca4:	7c33      	ldrb	r3, [r6, #16]
   d6ca6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6ca8:	6025      	str	r5, [r4, #0]
	}
   d6caa:	e7f0      	b.n	d6c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6cac:	6804      	ldr	r4, [r0, #0]
   d6cae:	2c00      	cmp	r4, #0
   d6cb0:	d0ed      	beq.n	d6c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	f7ff fa52 	bl	d615c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6cb8:	2114      	movs	r1, #20
   d6cba:	4620      	mov	r0, r4
   d6cbc:	f000 fc9d 	bl	d75fa <_ZdlPvj>
   d6cc0:	e7e5      	b.n	d6c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6cc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6cc6:	b089      	sub	sp, #36	; 0x24
   d6cc8:	4604      	mov	r4, r0
   d6cca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6ccc:	a801      	add	r0, sp, #4
   d6cce:	4611      	mov	r1, r2
   d6cd0:	f7ff fe10 	bl	d68f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6cd4:	b1a4      	cbz	r4, d6d00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6cd6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6cd8:	b11d      	cbz	r5, d6ce2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6cda:	4628      	mov	r0, r5
   d6cdc:	f001 fa8a 	bl	d81f4 <strdup>
   d6ce0:	4605      	mov	r5, r0
   d6ce2:	a801      	add	r0, sp, #4
   d6ce4:	a903      	add	r1, sp, #12
        type_(type) {
   d6ce6:	9503      	str	r5, [sp, #12]
   d6ce8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6cec:	f7ff fe78 	bl	d69e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6cf0:	a803      	add	r0, sp, #12
   d6cf2:	f7ff fdd5 	bl	d68a0 <_ZN8particle5ErrorD1Ev>
   d6cf6:	a802      	add	r0, sp, #8
   d6cf8:	f7fd fbb0 	bl	d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6cfc:	b009      	add	sp, #36	; 0x24
   d6cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6d00:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6d02:	2301      	movs	r3, #1
   d6d04:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6d08:	2a00      	cmp	r2, #0
   d6d0a:	d103      	bne.n	d6d14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6d0c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6d10:	2900      	cmp	r1, #0
   d6d12:	d1f7      	bne.n	d6d04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6d14:	d1ef      	bne.n	d6cf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6d16:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6d18:	f3bf 8f5b 	dmb	ish
   d6d1c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6d1e:	1d2b      	adds	r3, r5, #4
   d6d20:	f3bf 8f5b 	dmb	ish
   d6d24:	e853 6f00 	ldrex	r6, [r3]
   d6d28:	e843 4200 	strex	r2, r4, [r3]
   d6d2c:	2a00      	cmp	r2, #0
   d6d2e:	d1f9      	bne.n	d6d24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6d30:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6d34:	2e00      	cmp	r6, #0
   d6d36:	d0de      	beq.n	d6cf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6d38:	4620      	mov	r0, r4
   d6d3a:	f7ff f98f 	bl	d605c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6d3e:	4607      	mov	r7, r0
   d6d40:	b160      	cbz	r0, d6d5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d42:	f105 010c 	add.w	r1, r5, #12
   d6d46:	4630      	mov	r0, r6
   d6d48:	f7ff fe15 	bl	d6976 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6d4c:	4630      	mov	r0, r6
   d6d4e:	f7ff fa05 	bl	d615c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6d52:	2110      	movs	r1, #16
   d6d54:	4630      	mov	r0, r6
   d6d56:	f000 fc50 	bl	d75fa <_ZdlPvj>
   d6d5a:	e7cc      	b.n	d6cf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d5c:	4631      	mov	r1, r6
   d6d5e:	a803      	add	r0, sp, #12
   d6d60:	f7ff ff7c 	bl	d6c5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6d64:	7b2b      	ldrb	r3, [r5, #12]
   d6d66:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d6a:	2010      	movs	r0, #16
   d6d6c:	f7fd f993 	bl	d4096 <_Znwj>
   d6d70:	4605      	mov	r5, r0
   d6d72:	b1d0      	cbz	r0, d6daa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6d74:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d76:	2014      	movs	r0, #20
   d6d78:	f7fd f98d 	bl	d4096 <_Znwj>
   d6d7c:	4604      	mov	r4, r0
   d6d7e:	b178      	cbz	r0, d6da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6d80:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6d82:	4601      	mov	r1, r0
   d6d84:	a803      	add	r0, sp, #12
   d6d86:	f7ff fdd4 	bl	d6932 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6d8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d8e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d90:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6d92:	9205      	str	r2, [sp, #20]
   d6d94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d96:	60e3      	str	r3, [r4, #12]
   d6d98:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6d9c:	9206      	str	r2, [sp, #24]
   d6d9e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6da0:	4b06      	ldr	r3, [pc, #24]	; (d6dbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6da2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6da4:	4b06      	ldr	r3, [pc, #24]	; (d6dc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6da6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6da8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6daa:	a803      	add	r0, sp, #12
   d6dac:	f7ff f9d6 	bl	d615c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6db0:	2200      	movs	r2, #0
   d6db2:	4629      	mov	r1, r5
   d6db4:	4803      	ldr	r0, [pc, #12]	; (d6dc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6db6:	f7ff f959 	bl	d606c <application_thread_invoke>
   d6dba:	e7c7      	b.n	d6d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6dbc:	000d6989 	.word	0x000d6989
   d6dc0:	000d6c7b 	.word	0x000d6c7b
   d6dc4:	000d6543 	.word	0x000d6543

000d6dc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6dc8:	4b01      	ldr	r3, [pc, #4]	; (d6dd0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6dca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6dcc:	4770      	bx	lr
   d6dce:	bf00      	nop
   d6dd0:	2003d790 	.word	0x2003d790

000d6dd4 <serialEventRun>:
{
   d6dd4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6dd6:	4b0b      	ldr	r3, [pc, #44]	; (d6e04 <serialEventRun+0x30>)
   d6dd8:	b143      	cbz	r3, d6dec <serialEventRun+0x18>
   d6dda:	f7ff fcaf 	bl	d673c <_Z16_fetch_usbserialv>
   d6dde:	6803      	ldr	r3, [r0, #0]
   d6de0:	691b      	ldr	r3, [r3, #16]
   d6de2:	4798      	blx	r3
   d6de4:	2800      	cmp	r0, #0
   d6de6:	dd01      	ble.n	d6dec <serialEventRun+0x18>
        serialEvent();
   d6de8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6dec:	4b06      	ldr	r3, [pc, #24]	; (d6e08 <serialEventRun+0x34>)
   d6dee:	b143      	cbz	r3, d6e02 <serialEventRun+0x2e>
   d6df0:	f7ff fc18 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d6df4:	6803      	ldr	r3, [r0, #0]
   d6df6:	691b      	ldr	r3, [r3, #16]
   d6df8:	4798      	blx	r3
   d6dfa:	2800      	cmp	r0, #0
   d6dfc:	dd01      	ble.n	d6e02 <serialEventRun+0x2e>
        serialEvent1();
   d6dfe:	f3af 8000 	nop.w
}
   d6e02:	bd08      	pop	{r3, pc}
	...

000d6e0c <_post_loop>:
{
   d6e0c:	b508      	push	{r3, lr}
	serialEventRun();
   d6e0e:	f7ff ffe1 	bl	d6dd4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6e12:	f7ff f81b 	bl	d5e4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6e16:	4b01      	ldr	r3, [pc, #4]	; (d6e1c <_post_loop+0x10>)
   d6e18:	6018      	str	r0, [r3, #0]
}
   d6e1a:	bd08      	pop	{r3, pc}
   d6e1c:	2003e744 	.word	0x2003e744

000d6e20 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6e20:	4805      	ldr	r0, [pc, #20]	; (d6e38 <_Z33system_initialize_user_backup_ramv+0x18>)
   d6e22:	4a06      	ldr	r2, [pc, #24]	; (d6e3c <_Z33system_initialize_user_backup_ramv+0x1c>)
   d6e24:	4906      	ldr	r1, [pc, #24]	; (d6e40 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d6e26:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6e28:	1a12      	subs	r2, r2, r0
   d6e2a:	f001 f9a1 	bl	d8170 <memcpy>
    __backup_sram_signature = signature;
   d6e2e:	4b05      	ldr	r3, [pc, #20]	; (d6e44 <_Z33system_initialize_user_backup_ramv+0x24>)
   d6e30:	4a05      	ldr	r2, [pc, #20]	; (d6e48 <_Z33system_initialize_user_backup_ramv+0x28>)
   d6e32:	601a      	str	r2, [r3, #0]
}
   d6e34:	bd08      	pop	{r3, pc}
   d6e36:	bf00      	nop
   d6e38:	2003f400 	.word	0x2003f400
   d6e3c:	2003f404 	.word	0x2003f404
   d6e40:	000d8b40 	.word	0x000d8b40
   d6e44:	2003f400 	.word	0x2003f400
   d6e48:	9a271c1e 	.word	0x9a271c1e

000d6e4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6e4c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e4e:	2300      	movs	r3, #0
   d6e50:	9300      	str	r3, [sp, #0]
   d6e52:	461a      	mov	r2, r3
   d6e54:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e58:	f7ff f91a 	bl	d6090 <system_ctrl_set_result>
}
   d6e5c:	b003      	add	sp, #12
   d6e5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e64 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6e64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6e66:	8843      	ldrh	r3, [r0, #2]
   d6e68:	2b0a      	cmp	r3, #10
   d6e6a:	d008      	beq.n	d6e7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6e6c:	2b50      	cmp	r3, #80	; 0x50
   d6e6e:	d10b      	bne.n	d6e88 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6e70:	4b09      	ldr	r3, [pc, #36]	; (d6e98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6e72:	681b      	ldr	r3, [r3, #0]
   d6e74:	b14b      	cbz	r3, d6e8a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6e76:	b003      	add	sp, #12
   d6e78:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6e7c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6e7e:	f7ff ffe5 	bl	d6e4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6e82:	b003      	add	sp, #12
   d6e84:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e88:	2300      	movs	r3, #0
   d6e8a:	9300      	str	r3, [sp, #0]
   d6e8c:	461a      	mov	r2, r3
   d6e8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e92:	f7ff f8fd 	bl	d6090 <system_ctrl_set_result>
}
   d6e96:	e7f4      	b.n	d6e82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6e98:	2003e6f4 	.word	0x2003e6f4

000d6e9c <module_user_init_hook>:
{
   d6e9c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6e9e:	4812      	ldr	r0, [pc, #72]	; (d6ee8 <module_user_init_hook+0x4c>)
   d6ea0:	2100      	movs	r1, #0
   d6ea2:	f7ff f953 	bl	d614c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d6ea6:	4b11      	ldr	r3, [pc, #68]	; (d6eec <module_user_init_hook+0x50>)
   d6ea8:	681a      	ldr	r2, [r3, #0]
   d6eaa:	4b11      	ldr	r3, [pc, #68]	; (d6ef0 <module_user_init_hook+0x54>)
   d6eac:	429a      	cmp	r2, r3
   d6eae:	4b11      	ldr	r3, [pc, #68]	; (d6ef4 <module_user_init_hook+0x58>)
   d6eb0:	bf0c      	ite	eq
   d6eb2:	2201      	moveq	r2, #1
   d6eb4:	2200      	movne	r2, #0
   d6eb6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6eb8:	d001      	beq.n	d6ebe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d6eba:	f7ff ffb1 	bl	d6e20 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6ebe:	f7fe ffbd 	bl	d5e3c <HAL_RNG_GetRandomNumber>
   d6ec2:	4604      	mov	r4, r0
    srand(seed);
   d6ec4:	f001 f96a 	bl	d819c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6ec8:	4b0b      	ldr	r3, [pc, #44]	; (d6ef8 <module_user_init_hook+0x5c>)
   d6eca:	b113      	cbz	r3, d6ed2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6ecc:	4620      	mov	r0, r4
   d6ece:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6ed2:	2100      	movs	r1, #0
   d6ed4:	4808      	ldr	r0, [pc, #32]	; (d6ef8 <module_user_init_hook+0x5c>)
   d6ed6:	f7ff f849 	bl	d5f6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6ede:	4807      	ldr	r0, [pc, #28]	; (d6efc <module_user_init_hook+0x60>)
   d6ee0:	2100      	movs	r1, #0
   d6ee2:	f7ff b8cb 	b.w	d607c <system_ctrl_set_app_request_handler>
   d6ee6:	bf00      	nop
   d6ee8:	000d6dc9 	.word	0x000d6dc9
   d6eec:	2003f400 	.word	0x2003f400
   d6ef0:	9a271c1e 	.word	0x9a271c1e
   d6ef4:	2003e6f0 	.word	0x2003e6f0
   d6ef8:	00000000 	.word	0x00000000
   d6efc:	000d6e65 	.word	0x000d6e65

000d6f00 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d6f00:	b510      	push	{r4, lr}
   d6f02:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d6f04:	f7ff f802 	bl	d5f0c <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d6f08:	4284      	cmp	r4, r0
   d6f0a:	d008      	beq.n	d6f1e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d6f0c:	b11c      	cbz	r4, d6f16 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d6f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d6f12:	f7fe bfe3 	b.w	d5edc <LED_Signaling_Start>
}
   d6f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d6f1a:	f7fe bfe7 	b.w	d5eec <LED_Signaling_Stop>
}
   d6f1e:	bd10      	pop	{r4, pc}

000d6f20 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d6f20:	b570      	push	{r4, r5, r6, lr}
   d6f22:	4605      	mov	r5, r0
   d6f24:	460e      	mov	r6, r1
   d6f26:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d6f28:	f7fe fff0 	bl	d5f0c <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d6f2c:	b150      	cbz	r0, d6f44 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d6f2e:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d6f32:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d6f36:	f7fe ffc9 	bl	d5ecc <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d6f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d6f3e:	20e7      	movs	r0, #231	; 0xe7
   d6f40:	f7fe bfec 	b.w	d5f1c <LED_On>
}
   d6f44:	bd70      	pop	{r4, r5, r6, pc}

000d6f46 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d6f46:	b510      	push	{r4, lr}
   d6f48:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d6f4a:	f7fe ffd7 	bl	d5efc <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d6f4e:	f7fe ffdd 	bl	d5f0c <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d6f52:	b128      	cbz	r0, d6f60 <_ZN8RGBClass10brightnessEhb+0x1a>
   d6f54:	b124      	cbz	r4, d6f60 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d6f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d6f5a:	20e7      	movs	r0, #231	; 0xe7
   d6f5c:	f7fe bfde 	b.w	d5f1c <LED_On>
}
   d6f60:	bd10      	pop	{r4, pc}
	...

000d6f64 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6f64:	4b01      	ldr	r3, [pc, #4]	; (d6f6c <_GLOBAL__sub_I_RGB+0x8>)
   d6f66:	2200      	movs	r2, #0
   d6f68:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d6f6a:	4770      	bx	lr
   d6f6c:	2003e6f8 	.word	0x2003e6f8

000d6f70 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6f70:	2100      	movs	r1, #0
   d6f72:	f7ff b86b 	b.w	d604c <system_delay_ms>
	...

000d6f78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6f78:	4b02      	ldr	r3, [pc, #8]	; (d6f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6f7a:	681a      	ldr	r2, [r3, #0]
   d6f7c:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6f7e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6f80:	4770      	bx	lr
   d6f82:	bf00      	nop
   d6f84:	2003d788 	.word	0x2003d788
   d6f88:	2003e708 	.word	0x2003e708

000d6f8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6f8c:	4b01      	ldr	r3, [pc, #4]	; (d6f94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6f8e:	4a02      	ldr	r2, [pc, #8]	; (d6f98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6f90:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6f92:	4770      	bx	lr
   d6f94:	2003e70c 	.word	0x2003e70c
   d6f98:	000d8a98 	.word	0x000d8a98

000d6f9c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6f9c:	b510      	push	{r4, lr}
   d6f9e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6fa0:	f7fe ff54 	bl	d5e4c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6fa4:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6fa6:	6823      	ldr	r3, [r4, #0]
   d6fa8:	4620      	mov	r0, r4
   d6faa:	695b      	ldr	r3, [r3, #20]
   d6fac:	4798      	blx	r3
    if (c >= 0) return c;
   d6fae:	2800      	cmp	r0, #0
   d6fb0:	da08      	bge.n	d6fc4 <_ZN6Stream9timedReadEv+0x28>
   d6fb2:	f7fe ff4b 	bl	d5e4c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6fb6:	68e3      	ldr	r3, [r4, #12]
   d6fb8:	1ac0      	subs	r0, r0, r3
   d6fba:	68a3      	ldr	r3, [r4, #8]
   d6fbc:	4298      	cmp	r0, r3
   d6fbe:	d3f2      	bcc.n	d6fa6 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d6fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6fc4:	bd10      	pop	{r4, pc}

000d6fc6 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   d6fc6:	6081      	str	r1, [r0, #8]
}
   d6fc8:	4770      	bx	lr
	...

000d6fcc <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d6fcc:	b570      	push	{r4, r5, r6, lr}
   d6fce:	460d      	mov	r5, r1
  String ret;
   d6fd0:	4909      	ldr	r1, [pc, #36]	; (d6ff8 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   d6fd2:	4604      	mov	r4, r0
   d6fd4:	4616      	mov	r6, r2
  String ret;
   d6fd6:	f000 f8f8 	bl	d71ca <_ZN6StringC1EPKc>
  int c = timedRead();
   d6fda:	4628      	mov	r0, r5
   d6fdc:	f7ff ffde 	bl	d6f9c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d6fe0:	2800      	cmp	r0, #0
   d6fe2:	db06      	blt.n	d6ff2 <_ZN6Stream15readStringUntilEc+0x26>
   d6fe4:	4286      	cmp	r6, r0
   d6fe6:	d004      	beq.n	d6ff2 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d6fe8:	b2c1      	uxtb	r1, r0
   d6fea:	4620      	mov	r0, r4
   d6fec:	f000 f93d 	bl	d726a <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d6ff0:	e7f3      	b.n	d6fda <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   d6ff2:	4620      	mov	r0, r4
   d6ff4:	bd70      	pop	{r4, r5, r6, pc}
   d6ff6:	bf00      	nop
   d6ff8:	000d8653 	.word	0x000d8653

000d6ffc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ffe:	4606      	mov	r6, r0
   d7000:	460d      	mov	r5, r1
  size_t n = 0;
   d7002:	188f      	adds	r7, r1, r2
   d7004:	2400      	movs	r4, #0
  while (size--) {
   d7006:	42bd      	cmp	r5, r7
   d7008:	d00c      	beq.n	d7024 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d700a:	6833      	ldr	r3, [r6, #0]
   d700c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7010:	689b      	ldr	r3, [r3, #8]
   d7012:	4630      	mov	r0, r6
   d7014:	4798      	blx	r3
     if (chunk>=0)
   d7016:	1e03      	subs	r3, r0, #0
   d7018:	db01      	blt.n	d701e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d701a:	441c      	add	r4, r3
  while (size--) {
   d701c:	e7f3      	b.n	d7006 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d701e:	2c00      	cmp	r4, #0
   d7020:	bf08      	it	eq
   d7022:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7024:	4620      	mov	r0, r4
   d7026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7028 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7028:	b513      	push	{r0, r1, r4, lr}
   d702a:	4604      	mov	r4, r0
    }
   d702c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d702e:	b159      	cbz	r1, d7048 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7030:	9101      	str	r1, [sp, #4]
   d7032:	f001 f8fc 	bl	d822e <strlen>
   d7036:	6823      	ldr	r3, [r4, #0]
   d7038:	9901      	ldr	r1, [sp, #4]
   d703a:	68db      	ldr	r3, [r3, #12]
   d703c:	4602      	mov	r2, r0
   d703e:	4620      	mov	r0, r4
    }
   d7040:	b002      	add	sp, #8
   d7042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7046:	4718      	bx	r3
    }
   d7048:	b002      	add	sp, #8
   d704a:	bd10      	pop	{r4, pc}

000d704c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d704c:	b508      	push	{r3, lr}
  return write(str);
   d704e:	f7ff ffeb 	bl	d7028 <_ZN5Print5writeEPKc>
}
   d7052:	bd08      	pop	{r3, pc}

000d7054 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7054:	6803      	ldr	r3, [r0, #0]
   d7056:	689b      	ldr	r3, [r3, #8]
   d7058:	4718      	bx	r3

000d705a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d705a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d705c:	210d      	movs	r1, #13
{
   d705e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7060:	f7ff fff8 	bl	d7054 <_ZN5Print5printEc>
  n += print('\n');
   d7064:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7066:	4604      	mov	r4, r0
  n += print('\n');
   d7068:	4628      	mov	r0, r5
   d706a:	f7ff fff3 	bl	d7054 <_ZN5Print5printEc>
  return n;
}
   d706e:	4420      	add	r0, r4
   d7070:	bd38      	pop	{r3, r4, r5, pc}

000d7072 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7072:	b538      	push	{r3, r4, r5, lr}
   d7074:	4605      	mov	r5, r0
  return write(str);
   d7076:	f7ff ffd7 	bl	d7028 <_ZN5Print5writeEPKc>
   d707a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d707c:	4628      	mov	r0, r5
   d707e:	f7ff ffec 	bl	d705a <_ZN5Print7printlnEv>
  return n;
}
   d7082:	4420      	add	r0, r4
   d7084:	bd38      	pop	{r3, r4, r5, pc}

000d7086 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7086:	b530      	push	{r4, r5, lr}
   d7088:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d708a:	2300      	movs	r3, #0
   d708c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7090:	2a01      	cmp	r2, #1
   d7092:	bf98      	it	ls
   d7094:	220a      	movls	r2, #10
   d7096:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7098:	460d      	mov	r5, r1
   d709a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d709e:	fb01 5312 	mls	r3, r1, r2, r5
   d70a2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d70a6:	2b09      	cmp	r3, #9
   d70a8:	bf94      	ite	ls
   d70aa:	3330      	addls	r3, #48	; 0x30
   d70ac:	3337      	addhi	r3, #55	; 0x37
   d70ae:	b2db      	uxtb	r3, r3
  } while(n);
   d70b0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d70b2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d70b6:	d9ef      	bls.n	d7098 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d70b8:	4621      	mov	r1, r4
   d70ba:	f7ff ffb5 	bl	d7028 <_ZN5Print5writeEPKc>
}
   d70be:	b00b      	add	sp, #44	; 0x2c
   d70c0:	bd30      	pop	{r4, r5, pc}

000d70c2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d70c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70c6:	b086      	sub	sp, #24
   d70c8:	af00      	add	r7, sp, #0
   d70ca:	4605      	mov	r5, r0
   d70cc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d70ce:	1d38      	adds	r0, r7, #4
   d70d0:	2114      	movs	r1, #20
{
   d70d2:	4614      	mov	r4, r2
    va_copy(args2, args);
   d70d4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d70d6:	f7ff f819 	bl	d610c <vsnprintf>

    if (n<bufsize)
   d70da:	2813      	cmp	r0, #19
   d70dc:	d80e      	bhi.n	d70fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d70de:	1d39      	adds	r1, r7, #4
   d70e0:	4628      	mov	r0, r5
   d70e2:	f7ff ffa1 	bl	d7028 <_ZN5Print5writeEPKc>
   d70e6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d70e8:	b11e      	cbz	r6, d70f2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d70ea:	4628      	mov	r0, r5
   d70ec:	f7ff ffb5 	bl	d705a <_ZN5Print7printlnEv>
   d70f0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d70f2:	4620      	mov	r0, r4
   d70f4:	3718      	adds	r7, #24
   d70f6:	46bd      	mov	sp, r7
   d70f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d70fc:	f100 0308 	add.w	r3, r0, #8
   d7100:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7104:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7106:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d710a:	4622      	mov	r2, r4
   d710c:	1c41      	adds	r1, r0, #1
   d710e:	683b      	ldr	r3, [r7, #0]
   d7110:	4668      	mov	r0, sp
   d7112:	f7fe fffb 	bl	d610c <vsnprintf>
  return write(str);
   d7116:	4669      	mov	r1, sp
   d7118:	4628      	mov	r0, r5
   d711a:	f7ff ff85 	bl	d7028 <_ZN5Print5writeEPKc>
   d711e:	4604      	mov	r4, r0
   d7120:	46c5      	mov	sp, r8
   d7122:	e7e1      	b.n	d70e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7124 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7124:	4802      	ldr	r0, [pc, #8]	; (d7130 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7126:	2300      	movs	r3, #0
   d7128:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d712a:	f7fe be7f 	b.w	d5e2c <os_mutex_recursive_create>
   d712e:	bf00      	nop
   d7130:	2003e710 	.word	0x2003e710

000d7134 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7134:	b510      	push	{r4, lr}
   d7136:	4604      	mov	r4, r0
{
	free(buffer);
   d7138:	6800      	ldr	r0, [r0, #0]
   d713a:	f7fe ffcf 	bl	d60dc <free>
}
   d713e:	4620      	mov	r0, r4
   d7140:	bd10      	pop	{r4, pc}

000d7142 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7142:	b510      	push	{r4, lr}
   d7144:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7146:	6800      	ldr	r0, [r0, #0]
   d7148:	b108      	cbz	r0, d714e <_ZN6String10invalidateEv+0xc>
   d714a:	f7fe ffc7 	bl	d60dc <free>
	buffer = NULL;
   d714e:	2300      	movs	r3, #0
	capacity = len = 0;
   d7150:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7154:	6023      	str	r3, [r4, #0]
}
   d7156:	bd10      	pop	{r4, pc}

000d7158 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7158:	b538      	push	{r3, r4, r5, lr}
   d715a:	4604      	mov	r4, r0
   d715c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d715e:	6800      	ldr	r0, [r0, #0]
   d7160:	3101      	adds	r1, #1
   d7162:	f7fe ffc3 	bl	d60ec <realloc>
	if (newbuffer) {
   d7166:	b110      	cbz	r0, d716e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7168:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d716c:	2001      	movs	r0, #1
	}
	return 0;
}
   d716e:	bd38      	pop	{r3, r4, r5, pc}

000d7170 <_ZN6String7reserveEj>:
{
   d7170:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7172:	6803      	ldr	r3, [r0, #0]
{
   d7174:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7176:	b123      	cbz	r3, d7182 <_ZN6String7reserveEj+0x12>
   d7178:	6843      	ldr	r3, [r0, #4]
   d717a:	428b      	cmp	r3, r1
   d717c:	d301      	bcc.n	d7182 <_ZN6String7reserveEj+0x12>
   d717e:	2001      	movs	r0, #1
}
   d7180:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7182:	4620      	mov	r0, r4
   d7184:	f7ff ffe8 	bl	d7158 <_ZN6String12changeBufferEj>
   d7188:	2800      	cmp	r0, #0
   d718a:	d0f9      	beq.n	d7180 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d718c:	68a3      	ldr	r3, [r4, #8]
   d718e:	2b00      	cmp	r3, #0
   d7190:	d1f5      	bne.n	d717e <_ZN6String7reserveEj+0xe>
   d7192:	6822      	ldr	r2, [r4, #0]
   d7194:	7013      	strb	r3, [r2, #0]
   d7196:	e7f2      	b.n	d717e <_ZN6String7reserveEj+0xe>

000d7198 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7198:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d719a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d719c:	4611      	mov	r1, r2
   d719e:	9201      	str	r2, [sp, #4]
{
   d71a0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d71a2:	f7ff ffe5 	bl	d7170 <_ZN6String7reserveEj>
   d71a6:	9a01      	ldr	r2, [sp, #4]
   d71a8:	b928      	cbnz	r0, d71b6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d71aa:	4620      	mov	r0, r4
   d71ac:	f7ff ffc9 	bl	d7142 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d71b0:	4620      	mov	r0, r4
   d71b2:	b003      	add	sp, #12
   d71b4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d71b6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d71b8:	4629      	mov	r1, r5
   d71ba:	6820      	ldr	r0, [r4, #0]
   d71bc:	f000 ffd8 	bl	d8170 <memcpy>
	buffer[len] = 0;
   d71c0:	6822      	ldr	r2, [r4, #0]
   d71c2:	68a3      	ldr	r3, [r4, #8]
   d71c4:	2100      	movs	r1, #0
   d71c6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d71c8:	e7f2      	b.n	d71b0 <_ZN6String4copyEPKcj+0x18>

000d71ca <_ZN6StringC1EPKc>:
	buffer = NULL;
   d71ca:	2300      	movs	r3, #0
String::String(const char *cstr)
   d71cc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d71ce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d71d2:	4604      	mov	r4, r0
	len = 0;
   d71d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d71d6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d71d8:	b141      	cbz	r1, d71ec <_ZN6StringC1EPKc+0x22>
   d71da:	4608      	mov	r0, r1
   d71dc:	9101      	str	r1, [sp, #4]
   d71de:	f001 f826 	bl	d822e <strlen>
   d71e2:	9901      	ldr	r1, [sp, #4]
   d71e4:	4602      	mov	r2, r0
   d71e6:	4620      	mov	r0, r4
   d71e8:	f7ff ffd6 	bl	d7198 <_ZN6String4copyEPKcj>
}
   d71ec:	4620      	mov	r0, r4
   d71ee:	b002      	add	sp, #8
   d71f0:	bd10      	pop	{r4, pc}

000d71f2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d71f2:	b538      	push	{r3, r4, r5, lr}
   d71f4:	4605      	mov	r5, r0
	if (buffer) {
   d71f6:	6800      	ldr	r0, [r0, #0]
{
   d71f8:	460c      	mov	r4, r1
	if (buffer) {
   d71fa:	b168      	cbz	r0, d7218 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d71fc:	686a      	ldr	r2, [r5, #4]
   d71fe:	688b      	ldr	r3, [r1, #8]
   d7200:	429a      	cmp	r2, r3
   d7202:	d307      	bcc.n	d7214 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d7204:	6809      	ldr	r1, [r1, #0]
   d7206:	f000 ffed 	bl	d81e4 <strcpy>
			len = rhs.len;
   d720a:	68a3      	ldr	r3, [r4, #8]
   d720c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d720e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d7210:	60a3      	str	r3, [r4, #8]
}
   d7212:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d7214:	f7fe ff62 	bl	d60dc <free>
	buffer = rhs.buffer;
   d7218:	6823      	ldr	r3, [r4, #0]
   d721a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d721c:	6863      	ldr	r3, [r4, #4]
   d721e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7220:	68a3      	ldr	r3, [r4, #8]
   d7222:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7224:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d7226:	e9c4 3300 	strd	r3, r3, [r4]
   d722a:	e7f1      	b.n	d7210 <_ZN6String4moveERS_+0x1e>

000d722c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d722c:	4288      	cmp	r0, r1
{
   d722e:	b510      	push	{r4, lr}
   d7230:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7232:	d001      	beq.n	d7238 <_ZN6StringaSEOS_+0xc>
   d7234:	f7ff ffdd 	bl	d71f2 <_ZN6String4moveERS_>
	return *this;
}
   d7238:	4620      	mov	r0, r4
   d723a:	bd10      	pop	{r4, pc}

000d723c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d723c:	b570      	push	{r4, r5, r6, lr}
   d723e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7240:	460e      	mov	r6, r1
   d7242:	b909      	cbnz	r1, d7248 <_ZN6String6concatEPKcj+0xc>
   d7244:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7246:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7248:	b16a      	cbz	r2, d7266 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d724a:	6884      	ldr	r4, [r0, #8]
   d724c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d724e:	4621      	mov	r1, r4
   d7250:	f7ff ff8e 	bl	d7170 <_ZN6String7reserveEj>
   d7254:	2800      	cmp	r0, #0
   d7256:	d0f5      	beq.n	d7244 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7258:	6828      	ldr	r0, [r5, #0]
   d725a:	68ab      	ldr	r3, [r5, #8]
   d725c:	4631      	mov	r1, r6
   d725e:	4418      	add	r0, r3
   d7260:	f000 ffc0 	bl	d81e4 <strcpy>
	len = newlen;
   d7264:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d7266:	2001      	movs	r0, #1
   d7268:	e7ed      	b.n	d7246 <_ZN6String6concatEPKcj+0xa>

000d726a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d726a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d726c:	2300      	movs	r3, #0
	buf[0] = c;
   d726e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d7272:	2201      	movs	r2, #1
   d7274:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d7276:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d727a:	f7ff ffdf 	bl	d723c <_ZN6String6concatEPKcj>
}
   d727e:	b003      	add	sp, #12
   d7280:	f85d fb04 	ldr.w	pc, [sp], #4

000d7284 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7284:	b510      	push	{r4, lr}
   d7286:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7288:	6800      	ldr	r0, [r0, #0]
   d728a:	b118      	cbz	r0, d7294 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d728c:	f7fe ff26 	bl	d60dc <free>
            wakeupSource_ = nullptr;
   d7290:	2300      	movs	r3, #0
   d7292:	6023      	str	r3, [r4, #0]
        }
    }
   d7294:	bd10      	pop	{r4, pc}

000d7296 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7296:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7298:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d729c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d729e:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d72a0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d72a2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d72a6:	f8c0 2006 	str.w	r2, [r0, #6]
   d72aa:	889b      	ldrh	r3, [r3, #4]
   d72ac:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d72ae:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d72b0:	f7ff ffe8 	bl	d7284 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d72b4:	682b      	ldr	r3, [r5, #0]
   d72b6:	b113      	cbz	r3, d72be <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d72b8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d72ba:	2300      	movs	r3, #0
   d72bc:	602b      	str	r3, [r5, #0]
    }
   d72be:	4620      	mov	r0, r4
   d72c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d72c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d72c4:	b538      	push	{r3, r4, r5, lr}
   d72c6:	460c      	mov	r4, r1
   d72c8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d72ca:	f7ff ffdb 	bl	d7284 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d72ce:	b144      	cbz	r4, d72e2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d72d0:	8820      	ldrh	r0, [r4, #0]
   d72d2:	f7fe fefb 	bl	d60cc <malloc>
   d72d6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d72d8:	b128      	cbz	r0, d72e6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d72da:	8822      	ldrh	r2, [r4, #0]
   d72dc:	4621      	mov	r1, r4
   d72de:	f000 ff47 	bl	d8170 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d72e2:	2000      	movs	r0, #0
    }
   d72e4:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d72e6:	4801      	ldr	r0, [pc, #4]	; (d72ec <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d72e8:	e7fc      	b.n	d72e4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d72ea:	bf00      	nop
   d72ec:	fffffefc 	.word	0xfffffefc

000d72f0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d72f0:	b507      	push	{r0, r1, r2, lr}
   d72f2:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d72f4:	2100      	movs	r1, #0
{
   d72f6:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d72f8:	9100      	str	r1, [sp, #0]
   d72fa:	2001      	movs	r0, #1
   d72fc:	218c      	movs	r1, #140	; 0x8c
   d72fe:	f7fe fedb 	bl	d60b8 <system_reset>
}
   d7302:	b003      	add	sp, #12
   d7304:	f85d fb04 	ldr.w	pc, [sp], #4

000d7308 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7308:	4601      	mov	r1, r0
    reset(0, flags);
   d730a:	2000      	movs	r0, #0
   d730c:	f7ff bff0 	b.w	d72f0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d7310 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d7310:	2000      	movs	r0, #0
   d7312:	f7ff bff9 	b.w	d7308 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d7318 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d7318:	b5f0      	push	{r4, r5, r6, r7, lr}
   d731a:	4d2d      	ldr	r5, [pc, #180]	; (d73d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d731c:	7d0b      	ldrb	r3, [r1, #20]
   d731e:	4604      	mov	r4, r0
   d7320:	b08b      	sub	sp, #44	; 0x2c
   d7322:	4608      	mov	r0, r1
   d7324:	1daf      	adds	r7, r5, #6
   d7326:	2b00      	cmp	r3, #0
   d7328:	d038      	beq.n	d739c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d732a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d732c:	791b      	ldrb	r3, [r3, #4]
   d732e:	2b00      	cmp	r3, #0
   d7330:	d034      	beq.n	d739c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d7332:	2200      	movs	r2, #0
    SleepResult() {}
   d7334:	4b27      	ldr	r3, [pc, #156]	; (d73d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7336:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7338:	a902      	add	r1, sp, #8
   d733a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d733c:	9202      	str	r2, [sp, #8]
   d733e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d7342:	f88d 200e 	strb.w	r2, [sp, #14]
   d7346:	f7fe fead 	bl	d60a4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d734a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d734e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d7352:	b200      	sxth	r0, r0
   d7354:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d7358:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d735c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d735e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d7360:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7362:	4628      	mov	r0, r5
   d7364:	f7ff ffae 	bl	d72c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d7368:	a802      	add	r0, sp, #8
   d736a:	f7ff ff8b 	bl	d7284 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d736e:	2300      	movs	r3, #0
   d7370:	6023      	str	r3, [r4, #0]
   d7372:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d7374:	71a3      	strb	r3, [r4, #6]
   d7376:	8123      	strh	r3, [r4, #8]
   d7378:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d737c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d737e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d7382:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7384:	683b      	ldr	r3, [r7, #0]
   d7386:	f8c4 3006 	str.w	r3, [r4, #6]
   d738a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d738c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d738e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7390:	4620      	mov	r0, r4
   d7392:	f7ff ff97 	bl	d72c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d7396:	4620      	mov	r0, r4
   d7398:	b00b      	add	sp, #44	; 0x2c
   d739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d739c:	2600      	movs	r6, #0
   d739e:	2320      	movs	r3, #32
   d73a0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d73a4:	4b0c      	ldr	r3, [pc, #48]	; (d73d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d73a6:	9300      	str	r3, [sp, #0]
   d73a8:	490c      	ldr	r1, [pc, #48]	; (d73dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d73aa:	4633      	mov	r3, r6
   d73ac:	aa02      	add	r2, sp, #8
   d73ae:	2032      	movs	r0, #50	; 0x32
   d73b0:	f7fe fdbc 	bl	d5f2c <log_message>
    SleepResult() {}
   d73b4:	4b07      	ldr	r3, [pc, #28]	; (d73d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d73b6:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d73b8:	a902      	add	r1, sp, #8
        error_ = error;
   d73ba:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d73be:	4804      	ldr	r0, [pc, #16]	; (d73d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d73c0:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d73c2:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d73c6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d73ca:	f7ff ff64 	bl	d7296 <_ZN17SystemSleepResultaSEOS_>
   d73ce:	e7cb      	b.n	d7368 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d73d0:	2003e714 	.word	0x2003e714
   d73d4:	ffff0000 	.word	0xffff0000
   d73d8:	000d8aa3 	.word	0x000d8aa3
   d73dc:	000d8a9c 	.word	0x000d8a9c

000d73e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d73e0:	4b05      	ldr	r3, [pc, #20]	; (d73f8 <_GLOBAL__sub_I_System+0x18>)
   d73e2:	2202      	movs	r2, #2
   d73e4:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d73e6:	4b05      	ldr	r3, [pc, #20]	; (d73fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d73e8:	4a05      	ldr	r2, [pc, #20]	; (d7400 <_GLOBAL__sub_I_System+0x20>)
   d73ea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d73ec:	2000      	movs	r0, #0
   d73ee:	6018      	str	r0, [r3, #0]
   d73f0:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d73f2:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d73f4:	f7fe be22 	b.w	d603c <set_system_mode>
   d73f8:	2003e720 	.word	0x2003e720
   d73fc:	2003e714 	.word	0x2003e714
   d7400:	ffff0000 	.word	0xffff0000

000d7404 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7404:	2200      	movs	r2, #0
   d7406:	6840      	ldr	r0, [r0, #4]
   d7408:	4611      	mov	r1, r2
   d740a:	f7fe bdef 	b.w	d5fec <network_listening>

000d740e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d740e:	2200      	movs	r2, #0
   d7410:	6840      	ldr	r0, [r0, #4]
   d7412:	4611      	mov	r1, r2
   d7414:	f7fe bdfa 	b.w	d600c <network_get_listen_timeout>

000d7418 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7418:	6840      	ldr	r0, [r0, #4]
   d741a:	2200      	movs	r2, #0
   d741c:	f7fe bdee 	b.w	d5ffc <network_set_listen_timeout>

000d7420 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7420:	6840      	ldr	r0, [r0, #4]
   d7422:	2200      	movs	r2, #0
   d7424:	f081 0101 	eor.w	r1, r1, #1
   d7428:	f7fe bdd8 	b.w	d5fdc <network_listen>

000d742c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d742c:	2300      	movs	r3, #0
   d742e:	6840      	ldr	r0, [r0, #4]
   d7430:	461a      	mov	r2, r3
   d7432:	4619      	mov	r1, r3
   d7434:	f7fe bdca 	b.w	d5fcc <network_off>

000d7438 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7438:	2300      	movs	r3, #0
   d743a:	6840      	ldr	r0, [r0, #4]
   d743c:	461a      	mov	r2, r3
   d743e:	4619      	mov	r1, r3
   d7440:	f7fe bdbc 	b.w	d5fbc <network_on>

000d7444 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7444:	2200      	movs	r2, #0
   d7446:	6840      	ldr	r0, [r0, #4]
   d7448:	4611      	mov	r1, r2
   d744a:	f7fe bdaf 	b.w	d5fac <network_ready>

000d744e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d744e:	2200      	movs	r2, #0
   d7450:	6840      	ldr	r0, [r0, #4]
   d7452:	4611      	mov	r1, r2
   d7454:	f7fe bd9a 	b.w	d5f8c <network_connecting>

000d7458 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7458:	6840      	ldr	r0, [r0, #4]
   d745a:	2200      	movs	r2, #0
   d745c:	2102      	movs	r1, #2
   d745e:	f7fe bd9d 	b.w	d5f9c <network_disconnect>

000d7462 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7462:	2300      	movs	r3, #0
   d7464:	6840      	ldr	r0, [r0, #4]
   d7466:	461a      	mov	r2, r3
   d7468:	f7fe bd88 	b.w	d5f7c <network_connect>

000d746c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d746c:	4b02      	ldr	r3, [pc, #8]	; (d7478 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d746e:	2203      	movs	r2, #3
   d7470:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7472:	4a02      	ldr	r2, [pc, #8]	; (d747c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7474:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7476:	4770      	bx	lr
   d7478:	2003e724 	.word	0x2003e724
   d747c:	000d8ad4 	.word	0x000d8ad4

000d7480 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7480:	4770      	bx	lr
	...

000d7484 <_Z17acquireWireBufferv>:
{
   d7484:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7486:	2300      	movs	r3, #0
   d7488:	2520      	movs	r5, #32
   d748a:	8043      	strh	r3, [r0, #2]
   d748c:	2314      	movs	r3, #20
{
   d748e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7490:	8003      	strh	r3, [r0, #0]
   d7492:	6085      	str	r5, [r0, #8]
   d7494:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7496:	4906      	ldr	r1, [pc, #24]	; (d74b0 <_Z17acquireWireBufferv+0x2c>)
   d7498:	4628      	mov	r0, r5
   d749a:	f000 f8b2 	bl	d7602 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d749e:	4904      	ldr	r1, [pc, #16]	; (d74b0 <_Z17acquireWireBufferv+0x2c>)
	};
   d74a0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d74a2:	4628      	mov	r0, r5
   d74a4:	f000 f8ad 	bl	d7602 <_ZnajRKSt9nothrow_t>
	};
   d74a8:	60e0      	str	r0, [r4, #12]
}
   d74aa:	4620      	mov	r0, r4
   d74ac:	bd38      	pop	{r3, r4, r5, pc}
   d74ae:	bf00      	nop
   d74b0:	000d8b08 	.word	0x000d8b08

000d74b4 <_Z19__fetch_global_Wirev>:
{
   d74b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d74b6:	4d0e      	ldr	r5, [pc, #56]	; (d74f0 <_Z19__fetch_global_Wirev+0x3c>)
   d74b8:	7829      	ldrb	r1, [r5, #0]
   d74ba:	f3bf 8f5b 	dmb	ish
   d74be:	f011 0401 	ands.w	r4, r1, #1
{
   d74c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d74c4:	d111      	bne.n	d74ea <_Z19__fetch_global_Wirev+0x36>
   d74c6:	4628      	mov	r0, r5
   d74c8:	f7fc fdeb 	bl	d40a2 <__cxa_guard_acquire>
   d74cc:	b168      	cbz	r0, d74ea <_Z19__fetch_global_Wirev+0x36>
   d74ce:	a801      	add	r0, sp, #4
   d74d0:	f7ff ffd8 	bl	d7484 <_Z17acquireWireBufferv>
   d74d4:	aa01      	add	r2, sp, #4
   d74d6:	4621      	mov	r1, r4
   d74d8:	4806      	ldr	r0, [pc, #24]	; (d74f4 <_Z19__fetch_global_Wirev+0x40>)
   d74da:	f7ff f80f 	bl	d64fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d74de:	4628      	mov	r0, r5
   d74e0:	f7fc fde4 	bl	d40ac <__cxa_guard_release>
   d74e4:	4804      	ldr	r0, [pc, #16]	; (d74f8 <_Z19__fetch_global_Wirev+0x44>)
   d74e6:	f000 fe3d 	bl	d8164 <atexit>
	return wire;
}
   d74ea:	4802      	ldr	r0, [pc, #8]	; (d74f4 <_Z19__fetch_global_Wirev+0x40>)
   d74ec:	b007      	add	sp, #28
   d74ee:	bd30      	pop	{r4, r5, pc}
   d74f0:	2003e72c 	.word	0x2003e72c
   d74f4:	2003e730 	.word	0x2003e730
   d74f8:	000d7481 	.word	0x000d7481

000d74fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d74fc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d74fe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7500:	d902      	bls.n	d7508 <pinAvailable+0xc>
    return false;
   d7502:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7504:	b002      	add	sp, #8
   d7506:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7508:	f1a0 030b 	sub.w	r3, r0, #11
   d750c:	2b02      	cmp	r3, #2
   d750e:	d81a      	bhi.n	d7546 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7510:	4c17      	ldr	r4, [pc, #92]	; (d7570 <pinAvailable+0x74>)
   d7512:	7821      	ldrb	r1, [r4, #0]
   d7514:	f3bf 8f5b 	dmb	ish
   d7518:	f011 0101 	ands.w	r1, r1, #1
   d751c:	d10b      	bne.n	d7536 <pinAvailable+0x3a>
   d751e:	4620      	mov	r0, r4
   d7520:	9101      	str	r1, [sp, #4]
   d7522:	f7fc fdbe 	bl	d40a2 <__cxa_guard_acquire>
   d7526:	9901      	ldr	r1, [sp, #4]
   d7528:	b128      	cbz	r0, d7536 <pinAvailable+0x3a>
   d752a:	4812      	ldr	r0, [pc, #72]	; (d7574 <pinAvailable+0x78>)
   d752c:	f7fe ff12 	bl	d6354 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7530:	4620      	mov	r0, r4
   d7532:	f7fc fdbb 	bl	d40ac <__cxa_guard_release>
   d7536:	4b0f      	ldr	r3, [pc, #60]	; (d7574 <pinAvailable+0x78>)
   d7538:	7818      	ldrb	r0, [r3, #0]
   d753a:	f7fe fbff 	bl	d5d3c <hal_spi_is_enabled>
   d753e:	2800      	cmp	r0, #0
   d7540:	d1df      	bne.n	d7502 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7542:	2001      	movs	r0, #1
   d7544:	e7de      	b.n	d7504 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7546:	2801      	cmp	r0, #1
   d7548:	d809      	bhi.n	d755e <pinAvailable+0x62>
   d754a:	f7ff ffb3 	bl	d74b4 <_Z19__fetch_global_Wirev>
   d754e:	2100      	movs	r1, #0
   d7550:	7c00      	ldrb	r0, [r0, #16]
   d7552:	f7fe fbcb 	bl	d5cec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7556:	f080 0001 	eor.w	r0, r0, #1
   d755a:	b2c0      	uxtb	r0, r0
   d755c:	e7d2      	b.n	d7504 <pinAvailable+0x8>
   d755e:	3809      	subs	r0, #9
   d7560:	2801      	cmp	r0, #1
   d7562:	d8ee      	bhi.n	d7542 <pinAvailable+0x46>
   d7564:	f7ff f85e 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d7568:	7c00      	ldrb	r0, [r0, #16]
   d756a:	f7fe fc3f 	bl	d5dec <hal_usart_is_enabled>
   d756e:	e7f2      	b.n	d7556 <pinAvailable+0x5a>
   d7570:	2003e748 	.word	0x2003e748
   d7574:	2003e74c 	.word	0x2003e74c

000d7578 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7578:	2823      	cmp	r0, #35	; 0x23
{
   d757a:	b538      	push	{r3, r4, r5, lr}
   d757c:	4604      	mov	r4, r0
   d757e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7580:	d80a      	bhi.n	d7598 <pinMode+0x20>
   d7582:	29ff      	cmp	r1, #255	; 0xff
   d7584:	d008      	beq.n	d7598 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7586:	f7ff ffb9 	bl	d74fc <pinAvailable>
   d758a:	b128      	cbz	r0, d7598 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d758c:	4629      	mov	r1, r5
   d758e:	4620      	mov	r0, r4
}
   d7590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7594:	f7fe bc6a 	b.w	d5e6c <HAL_Pin_Mode>
}
   d7598:	bd38      	pop	{r3, r4, r5, pc}

000d759a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d759a:	b538      	push	{r3, r4, r5, lr}
   d759c:	4604      	mov	r4, r0
   d759e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d75a0:	f7fe fc6c 	bl	d5e7c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d75a4:	28ff      	cmp	r0, #255	; 0xff
   d75a6:	d010      	beq.n	d75ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d75a8:	2806      	cmp	r0, #6
   d75aa:	d804      	bhi.n	d75b6 <digitalWrite+0x1c>
   d75ac:	234d      	movs	r3, #77	; 0x4d
   d75ae:	fa23 f000 	lsr.w	r0, r3, r0
   d75b2:	07c3      	lsls	r3, r0, #31
   d75b4:	d409      	bmi.n	d75ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d75b6:	4620      	mov	r0, r4
   d75b8:	f7ff ffa0 	bl	d74fc <pinAvailable>
   d75bc:	b128      	cbz	r0, d75ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d75be:	4629      	mov	r1, r5
   d75c0:	4620      	mov	r0, r4
}
   d75c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d75c6:	f7fe bc61 	b.w	d5e8c <HAL_GPIO_Write>
}
   d75ca:	bd38      	pop	{r3, r4, r5, pc}

000d75cc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d75cc:	280d      	cmp	r0, #13
{
   d75ce:	b510      	push	{r4, lr}
   d75d0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d75d2:	bf9c      	itt	ls
   d75d4:	340e      	addls	r4, #14
   d75d6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d75d8:	4620      	mov	r0, r4
   d75da:	f7ff ff8f 	bl	d74fc <pinAvailable>
   d75de:	b150      	cbz	r0, d75f6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d75e0:	2103      	movs	r1, #3
   d75e2:	4620      	mov	r0, r4
   d75e4:	f7fe fc3a 	bl	d5e5c <HAL_Validate_Pin_Function>
   d75e8:	2803      	cmp	r0, #3
   d75ea:	d104      	bne.n	d75f6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d75ec:	4620      	mov	r0, r4
}
   d75ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d75f2:	f7fe bc53 	b.w	d5e9c <hal_adc_read>
}
   d75f6:	2000      	movs	r0, #0
   d75f8:	bd10      	pop	{r4, pc}

000d75fa <_ZdlPvj>:
   d75fa:	f7fc bd50 	b.w	d409e <_ZdlPv>

000d75fe <_ZnwjRKSt9nothrow_t>:
   d75fe:	f7fc bd4a 	b.w	d4096 <_Znwj>

000d7602 <_ZnajRKSt9nothrow_t>:
   d7602:	f7fc bd4a 	b.w	d409a <_Znaj>

000d7606 <_ZSt25__throw_bad_function_callv>:
   d7606:	b508      	push	{r3, lr}
   d7608:	f7fe fd88 	bl	d611c <abort>

000d760c <logf>:
   d760c:	b510      	push	{r4, lr}
   d760e:	ed2d 8b02 	vpush	{d8}
   d7612:	b08a      	sub	sp, #40	; 0x28
   d7614:	eeb0 8a40 	vmov.f32	s16, s0
   d7618:	f000 f87a 	bl	d7710 <__ieee754_logf>
   d761c:	4b37      	ldr	r3, [pc, #220]	; (d76fc <logf+0xf0>)
   d761e:	f993 4000 	ldrsb.w	r4, [r3]
   d7622:	1c63      	adds	r3, r4, #1
   d7624:	d033      	beq.n	d768e <logf+0x82>
   d7626:	eeb4 8a48 	vcmp.f32	s16, s16
   d762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d762e:	d62e      	bvs.n	d768e <logf+0x82>
   d7630:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d7634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7638:	dc29      	bgt.n	d768e <logf+0x82>
   d763a:	4b31      	ldr	r3, [pc, #196]	; (d7700 <logf+0xf4>)
   d763c:	9301      	str	r3, [sp, #4]
   d763e:	ee18 0a10 	vmov	r0, s16
   d7642:	2300      	movs	r3, #0
   d7644:	9308      	str	r3, [sp, #32]
   d7646:	f000 fad3 	bl	d7bf0 <__aeabi_f2d>
   d764a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d764e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7652:	b304      	cbz	r4, d7696 <logf+0x8a>
   d7654:	4b2b      	ldr	r3, [pc, #172]	; (d7704 <logf+0xf8>)
   d7656:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d765a:	2200      	movs	r2, #0
   d765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7660:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7664:	d141      	bne.n	d76ea <logf+0xde>
   d7666:	2302      	movs	r3, #2
   d7668:	429c      	cmp	r4, r3
   d766a:	9300      	str	r3, [sp, #0]
   d766c:	d137      	bne.n	d76de <logf+0xd2>
   d766e:	f7fe fd65 	bl	d613c <__errno>
   d7672:	2322      	movs	r3, #34	; 0x22
   d7674:	6003      	str	r3, [r0, #0]
   d7676:	9b08      	ldr	r3, [sp, #32]
   d7678:	b32b      	cbz	r3, d76c6 <logf+0xba>
   d767a:	f7fe fd5f 	bl	d613c <__errno>
   d767e:	9b08      	ldr	r3, [sp, #32]
   d7680:	6003      	str	r3, [r0, #0]
   d7682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7686:	f000 fd1d 	bl	d80c4 <__aeabi_d2f>
   d768a:	ee00 0a10 	vmov	s0, r0
   d768e:	b00a      	add	sp, #40	; 0x28
   d7690:	ecbd 8b02 	vpop	{d8}
   d7694:	bd10      	pop	{r4, pc}
   d7696:	4b1c      	ldr	r3, [pc, #112]	; (d7708 <logf+0xfc>)
   d7698:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d769c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d76a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d76a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d76a8:	d017      	beq.n	d76da <logf+0xce>
   d76aa:	2301      	movs	r3, #1
   d76ac:	9300      	str	r3, [sp, #0]
   d76ae:	4668      	mov	r0, sp
   d76b0:	f000 f92e 	bl	d7910 <matherr>
   d76b4:	b1e8      	cbz	r0, d76f2 <logf+0xe6>
   d76b6:	4815      	ldr	r0, [pc, #84]	; (d770c <logf+0x100>)
   d76b8:	f000 f92e 	bl	d7918 <nan>
   d76bc:	ed8d 0b06 	vstr	d0, [sp, #24]
   d76c0:	9b08      	ldr	r3, [sp, #32]
   d76c2:	2b00      	cmp	r3, #0
   d76c4:	d1d9      	bne.n	d767a <logf+0x6e>
   d76c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d76ca:	f000 fcfb 	bl	d80c4 <__aeabi_d2f>
   d76ce:	ee00 0a10 	vmov	s0, r0
   d76d2:	b00a      	add	sp, #40	; 0x28
   d76d4:	ecbd 8b02 	vpop	{d8}
   d76d8:	bd10      	pop	{r4, pc}
   d76da:	2302      	movs	r3, #2
   d76dc:	9300      	str	r3, [sp, #0]
   d76de:	4668      	mov	r0, sp
   d76e0:	f000 f916 	bl	d7910 <matherr>
   d76e4:	2800      	cmp	r0, #0
   d76e6:	d1eb      	bne.n	d76c0 <logf+0xb4>
   d76e8:	e7c1      	b.n	d766e <logf+0x62>
   d76ea:	2301      	movs	r3, #1
   d76ec:	2c02      	cmp	r4, #2
   d76ee:	9300      	str	r3, [sp, #0]
   d76f0:	d1dd      	bne.n	d76ae <logf+0xa2>
   d76f2:	f7fe fd23 	bl	d613c <__errno>
   d76f6:	2321      	movs	r3, #33	; 0x21
   d76f8:	6003      	str	r3, [r0, #0]
   d76fa:	e7dc      	b.n	d76b6 <logf+0xaa>
   d76fc:	2003d78c 	.word	0x2003d78c
   d7700:	000d8b0c 	.word	0x000d8b0c
   d7704:	fff00000 	.word	0xfff00000
   d7708:	c7efffff 	.word	0xc7efffff
   d770c:	000d8b10 	.word	0x000d8b10

000d7710 <__ieee754_logf>:
   d7710:	ee10 3a10 	vmov	r3, s0
   d7714:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   d7718:	d02d      	beq.n	d7776 <__ieee754_logf+0x66>
   d771a:	2b00      	cmp	r3, #0
   d771c:	db32      	blt.n	d7784 <__ieee754_logf+0x74>
   d771e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d7722:	da3f      	bge.n	d77a4 <__ieee754_logf+0x94>
   d7724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   d7728:	b430      	push	{r4, r5}
   d772a:	db32      	blt.n	d7792 <__ieee754_logf+0x82>
   d772c:	2500      	movs	r5, #0
   d772e:	4868      	ldr	r0, [pc, #416]	; (d78d0 <__ieee754_logf+0x1c0>)
   d7730:	4c68      	ldr	r4, [pc, #416]	; (d78d4 <__ieee754_logf+0x1c4>)
   d7732:	f3c3 0116 	ubfx	r1, r3, #0, #23
   d7736:	4408      	add	r0, r1
   d7738:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   d773c:	15db      	asrs	r3, r3, #23
   d773e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   d7742:	3b7f      	subs	r3, #127	; 0x7f
   d7744:	430a      	orrs	r2, r1
   d7746:	442b      	add	r3, r5
   d7748:	ee00 2a10 	vmov	s0, r2
   d774c:	f101 050f 	add.w	r5, r1, #15
   d7750:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d7754:	402c      	ands	r4, r5
   d7756:	ee30 0a67 	vsub.f32	s0, s0, s15
   d775a:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   d775e:	bb24      	cbnz	r4, d77aa <__ieee754_logf+0x9a>
   d7760:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d7764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7768:	d161      	bne.n	d782e <__ieee754_logf+0x11e>
   d776a:	2b00      	cmp	r3, #0
   d776c:	f040 8093 	bne.w	d7896 <__ieee754_logf+0x186>
   d7770:	ed9f 0a59 	vldr	s0, [pc, #356]	; d78d8 <__ieee754_logf+0x1c8>
   d7774:	e059      	b.n	d782a <__ieee754_logf+0x11a>
   d7776:	ed9f 7a59 	vldr	s14, [pc, #356]	; d78dc <__ieee754_logf+0x1cc>
   d777a:	eddf 7a57 	vldr	s15, [pc, #348]	; d78d8 <__ieee754_logf+0x1c8>
   d777e:	ee87 0a27 	vdiv.f32	s0, s14, s15
   d7782:	4770      	bx	lr
   d7784:	ee70 7a40 	vsub.f32	s15, s0, s0
   d7788:	ed9f 7a53 	vldr	s14, [pc, #332]	; d78d8 <__ieee754_logf+0x1c8>
   d778c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7790:	4770      	bx	lr
   d7792:	eddf 7a53 	vldr	s15, [pc, #332]	; d78e0 <__ieee754_logf+0x1d0>
   d7796:	ee60 7a27 	vmul.f32	s15, s0, s15
   d779a:	f06f 0518 	mvn.w	r5, #24
   d779e:	ee17 3a90 	vmov	r3, s15
   d77a2:	e7c4      	b.n	d772e <__ieee754_logf+0x1e>
   d77a4:	ee30 0a00 	vadd.f32	s0, s0, s0
   d77a8:	4770      	bx	lr
   d77aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d77ae:	ee30 7a07 	vadd.f32	s14, s0, s14
   d77b2:	ed9f 3a4c 	vldr	s6, [pc, #304]	; d78e4 <__ieee754_logf+0x1d4>
   d77b6:	eddf 4a4c 	vldr	s9, [pc, #304]	; d78e8 <__ieee754_logf+0x1d8>
   d77ba:	eddf 5a4c 	vldr	s11, [pc, #304]	; d78ec <__ieee754_logf+0x1dc>
   d77be:	eddf 3a4c 	vldr	s7, [pc, #304]	; d78f0 <__ieee754_logf+0x1e0>
   d77c2:	ed9f 5a4c 	vldr	s10, [pc, #304]	; d78f4 <__ieee754_logf+0x1e4>
   d77c6:	eddf 7a4c 	vldr	s15, [pc, #304]	; d78f8 <__ieee754_logf+0x1e8>
   d77ca:	eddf 6a4c 	vldr	s13, [pc, #304]	; d78fc <__ieee754_logf+0x1ec>
   d77ce:	484c      	ldr	r0, [pc, #304]	; (d7900 <__ieee754_logf+0x1f0>)
   d77d0:	ee80 4a07 	vdiv.f32	s8, s0, s14
   d77d4:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   d77d8:	4408      	add	r0, r1
   d77da:	f502 7222 	add.w	r2, r2, #648	; 0x288
   d77de:	4302      	orrs	r2, r0
   d77e0:	2a00      	cmp	r2, #0
   d77e2:	ee07 3a10 	vmov	s14, r3
   d77e6:	ee24 6a04 	vmul.f32	s12, s8, s8
   d77ea:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   d77ee:	ee26 7a06 	vmul.f32	s14, s12, s12
   d77f2:	eee7 4a03 	vfma.f32	s9, s14, s6
   d77f6:	eea7 5a23 	vfma.f32	s10, s14, s7
   d77fa:	eee4 5a87 	vfma.f32	s11, s9, s14
   d77fe:	eee5 6a07 	vfma.f32	s13, s10, s14
   d7802:	eee5 7a87 	vfma.f32	s15, s11, s14
   d7806:	ee67 7a86 	vmul.f32	s15, s15, s12
   d780a:	eee6 7a87 	vfma.f32	s15, s13, s14
   d780e:	dd2b      	ble.n	d7868 <__ieee754_logf+0x158>
   d7810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d7814:	ee20 7a07 	vmul.f32	s14, s0, s14
   d7818:	ee27 7a00 	vmul.f32	s14, s14, s0
   d781c:	bb53      	cbnz	r3, d7874 <__ieee754_logf+0x164>
   d781e:	ee77 7a87 	vadd.f32	s15, s15, s14
   d7822:	eea7 7ac4 	vfms.f32	s14, s15, s8
   d7826:	ee30 0a47 	vsub.f32	s0, s0, s14
   d782a:	bc30      	pop	{r4, r5}
   d782c:	4770      	bx	lr
   d782e:	eddf 7a35 	vldr	s15, [pc, #212]	; d7904 <__ieee754_logf+0x1f4>
   d7832:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d7836:	eea0 7a67 	vfms.f32	s14, s0, s15
   d783a:	eef0 7a47 	vmov.f32	s15, s14
   d783e:	ee20 7a00 	vmul.f32	s14, s0, s0
   d7842:	ee27 7a27 	vmul.f32	s14, s14, s15
   d7846:	2b00      	cmp	r3, #0
   d7848:	d0ed      	beq.n	d7826 <__ieee754_logf+0x116>
   d784a:	ee07 3a90 	vmov	s15, r3
   d784e:	ed9f 6a2e 	vldr	s12, [pc, #184]	; d7908 <__ieee754_logf+0x1f8>
   d7852:	eddf 6a2e 	vldr	s13, [pc, #184]	; d790c <__ieee754_logf+0x1fc>
   d7856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d785a:	eea7 7ac6 	vfms.f32	s14, s15, s12
   d785e:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7862:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   d7866:	e7e0      	b.n	d782a <__ieee754_logf+0x11a>
   d7868:	bb13      	cbnz	r3, d78b0 <__ieee754_logf+0x1a0>
   d786a:	ee70 7a67 	vsub.f32	s15, s0, s15
   d786e:	eea7 0ac4 	vfms.f32	s0, s15, s8
   d7872:	e7da      	b.n	d782a <__ieee754_logf+0x11a>
   d7874:	eddf 6a24 	vldr	s13, [pc, #144]	; d7908 <__ieee754_logf+0x1f8>
   d7878:	ed9f 6a24 	vldr	s12, [pc, #144]	; d790c <__ieee754_logf+0x1fc>
   d787c:	ee77 7a87 	vadd.f32	s15, s15, s14
   d7880:	ee62 6aa6 	vmul.f32	s13, s5, s13
   d7884:	eee7 6a84 	vfma.f32	s13, s15, s8
   d7888:	ee37 7a66 	vsub.f32	s14, s14, s13
   d788c:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7890:	ee92 0a86 	vfnms.f32	s0, s5, s12
   d7894:	e7c9      	b.n	d782a <__ieee754_logf+0x11a>
   d7896:	ee07 3a90 	vmov	s15, r3
   d789a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d7908 <__ieee754_logf+0x1f8>
   d789e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d790c <__ieee754_logf+0x1fc>
   d78a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d78a6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d78aa:	eea7 0a87 	vfma.f32	s0, s15, s14
   d78ae:	e7bc      	b.n	d782a <__ieee754_logf+0x11a>
   d78b0:	ed9f 7a15 	vldr	s14, [pc, #84]	; d7908 <__ieee754_logf+0x1f8>
   d78b4:	eddf 6a15 	vldr	s13, [pc, #84]	; d790c <__ieee754_logf+0x1fc>
   d78b8:	ee70 7a67 	vsub.f32	s15, s0, s15
   d78bc:	ee27 7a62 	vnmul.f32	s14, s14, s5
   d78c0:	eea7 7a84 	vfma.f32	s14, s15, s8
   d78c4:	ee37 0a40 	vsub.f32	s0, s14, s0
   d78c8:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   d78cc:	e7ad      	b.n	d782a <__ieee754_logf+0x11a>
   d78ce:	bf00      	nop
   d78d0:	004afb20 	.word	0x004afb20
   d78d4:	007ffff0 	.word	0x007ffff0
   d78d8:	00000000 	.word	0x00000000
   d78dc:	cc000000 	.word	0xcc000000
   d78e0:	4c000000 	.word	0x4c000000
   d78e4:	3e178897 	.word	0x3e178897
   d78e8:	3e3a3325 	.word	0x3e3a3325
   d78ec:	3e924925 	.word	0x3e924925
   d78f0:	3e1cd04f 	.word	0x3e1cd04f
   d78f4:	3e638e29 	.word	0x3e638e29
   d78f8:	3f2aaaab 	.word	0x3f2aaaab
   d78fc:	3ecccccd 	.word	0x3ecccccd
   d7900:	ffcf5c30 	.word	0xffcf5c30
   d7904:	3eaaaaab 	.word	0x3eaaaaab
   d7908:	3717f7d1 	.word	0x3717f7d1
   d790c:	3f317180 	.word	0x3f317180

000d7910 <matherr>:
   d7910:	2000      	movs	r0, #0
   d7912:	4770      	bx	lr
   d7914:	0000      	movs	r0, r0
	...

000d7918 <nan>:
   d7918:	ed9f 0b01 	vldr	d0, [pc, #4]	; d7920 <nan+0x8>
   d791c:	4770      	bx	lr
   d791e:	bf00      	nop
   d7920:	00000000 	.word	0x00000000
   d7924:	7ff80000 	.word	0x7ff80000

000d7928 <__aeabi_drsub>:
   d7928:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d792c:	e002      	b.n	d7934 <__adddf3>
   d792e:	bf00      	nop

000d7930 <__aeabi_dsub>:
   d7930:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7934 <__adddf3>:
   d7934:	b530      	push	{r4, r5, lr}
   d7936:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d793a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d793e:	ea94 0f05 	teq	r4, r5
   d7942:	bf08      	it	eq
   d7944:	ea90 0f02 	teqeq	r0, r2
   d7948:	bf1f      	itttt	ne
   d794a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d794e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7952:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7956:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d795a:	f000 80e2 	beq.w	d7b22 <__adddf3+0x1ee>
   d795e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7962:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7966:	bfb8      	it	lt
   d7968:	426d      	neglt	r5, r5
   d796a:	dd0c      	ble.n	d7986 <__adddf3+0x52>
   d796c:	442c      	add	r4, r5
   d796e:	ea80 0202 	eor.w	r2, r0, r2
   d7972:	ea81 0303 	eor.w	r3, r1, r3
   d7976:	ea82 0000 	eor.w	r0, r2, r0
   d797a:	ea83 0101 	eor.w	r1, r3, r1
   d797e:	ea80 0202 	eor.w	r2, r0, r2
   d7982:	ea81 0303 	eor.w	r3, r1, r3
   d7986:	2d36      	cmp	r5, #54	; 0x36
   d7988:	bf88      	it	hi
   d798a:	bd30      	pophi	{r4, r5, pc}
   d798c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7990:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7994:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7998:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d799c:	d002      	beq.n	d79a4 <__adddf3+0x70>
   d799e:	4240      	negs	r0, r0
   d79a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d79a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d79a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d79ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d79b0:	d002      	beq.n	d79b8 <__adddf3+0x84>
   d79b2:	4252      	negs	r2, r2
   d79b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d79b8:	ea94 0f05 	teq	r4, r5
   d79bc:	f000 80a7 	beq.w	d7b0e <__adddf3+0x1da>
   d79c0:	f1a4 0401 	sub.w	r4, r4, #1
   d79c4:	f1d5 0e20 	rsbs	lr, r5, #32
   d79c8:	db0d      	blt.n	d79e6 <__adddf3+0xb2>
   d79ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d79ce:	fa22 f205 	lsr.w	r2, r2, r5
   d79d2:	1880      	adds	r0, r0, r2
   d79d4:	f141 0100 	adc.w	r1, r1, #0
   d79d8:	fa03 f20e 	lsl.w	r2, r3, lr
   d79dc:	1880      	adds	r0, r0, r2
   d79de:	fa43 f305 	asr.w	r3, r3, r5
   d79e2:	4159      	adcs	r1, r3
   d79e4:	e00e      	b.n	d7a04 <__adddf3+0xd0>
   d79e6:	f1a5 0520 	sub.w	r5, r5, #32
   d79ea:	f10e 0e20 	add.w	lr, lr, #32
   d79ee:	2a01      	cmp	r2, #1
   d79f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d79f4:	bf28      	it	cs
   d79f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d79fa:	fa43 f305 	asr.w	r3, r3, r5
   d79fe:	18c0      	adds	r0, r0, r3
   d7a00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7a04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7a08:	d507      	bpl.n	d7a1a <__adddf3+0xe6>
   d7a0a:	f04f 0e00 	mov.w	lr, #0
   d7a0e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7a12:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7a16:	eb6e 0101 	sbc.w	r1, lr, r1
   d7a1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7a1e:	d31b      	bcc.n	d7a58 <__adddf3+0x124>
   d7a20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7a24:	d30c      	bcc.n	d7a40 <__adddf3+0x10c>
   d7a26:	0849      	lsrs	r1, r1, #1
   d7a28:	ea5f 0030 	movs.w	r0, r0, rrx
   d7a2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7a30:	f104 0401 	add.w	r4, r4, #1
   d7a34:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7a38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7a3c:	f080 809a 	bcs.w	d7b74 <__adddf3+0x240>
   d7a40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7a44:	bf08      	it	eq
   d7a46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7a4a:	f150 0000 	adcs.w	r0, r0, #0
   d7a4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7a52:	ea41 0105 	orr.w	r1, r1, r5
   d7a56:	bd30      	pop	{r4, r5, pc}
   d7a58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7a5c:	4140      	adcs	r0, r0
   d7a5e:	eb41 0101 	adc.w	r1, r1, r1
   d7a62:	3c01      	subs	r4, #1
   d7a64:	bf28      	it	cs
   d7a66:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7a6a:	d2e9      	bcs.n	d7a40 <__adddf3+0x10c>
   d7a6c:	f091 0f00 	teq	r1, #0
   d7a70:	bf04      	itt	eq
   d7a72:	4601      	moveq	r1, r0
   d7a74:	2000      	moveq	r0, #0
   d7a76:	fab1 f381 	clz	r3, r1
   d7a7a:	bf08      	it	eq
   d7a7c:	3320      	addeq	r3, #32
   d7a7e:	f1a3 030b 	sub.w	r3, r3, #11
   d7a82:	f1b3 0220 	subs.w	r2, r3, #32
   d7a86:	da0c      	bge.n	d7aa2 <__adddf3+0x16e>
   d7a88:	320c      	adds	r2, #12
   d7a8a:	dd08      	ble.n	d7a9e <__adddf3+0x16a>
   d7a8c:	f102 0c14 	add.w	ip, r2, #20
   d7a90:	f1c2 020c 	rsb	r2, r2, #12
   d7a94:	fa01 f00c 	lsl.w	r0, r1, ip
   d7a98:	fa21 f102 	lsr.w	r1, r1, r2
   d7a9c:	e00c      	b.n	d7ab8 <__adddf3+0x184>
   d7a9e:	f102 0214 	add.w	r2, r2, #20
   d7aa2:	bfd8      	it	le
   d7aa4:	f1c2 0c20 	rsble	ip, r2, #32
   d7aa8:	fa01 f102 	lsl.w	r1, r1, r2
   d7aac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7ab0:	bfdc      	itt	le
   d7ab2:	ea41 010c 	orrle.w	r1, r1, ip
   d7ab6:	4090      	lslle	r0, r2
   d7ab8:	1ae4      	subs	r4, r4, r3
   d7aba:	bfa2      	ittt	ge
   d7abc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7ac0:	4329      	orrge	r1, r5
   d7ac2:	bd30      	popge	{r4, r5, pc}
   d7ac4:	ea6f 0404 	mvn.w	r4, r4
   d7ac8:	3c1f      	subs	r4, #31
   d7aca:	da1c      	bge.n	d7b06 <__adddf3+0x1d2>
   d7acc:	340c      	adds	r4, #12
   d7ace:	dc0e      	bgt.n	d7aee <__adddf3+0x1ba>
   d7ad0:	f104 0414 	add.w	r4, r4, #20
   d7ad4:	f1c4 0220 	rsb	r2, r4, #32
   d7ad8:	fa20 f004 	lsr.w	r0, r0, r4
   d7adc:	fa01 f302 	lsl.w	r3, r1, r2
   d7ae0:	ea40 0003 	orr.w	r0, r0, r3
   d7ae4:	fa21 f304 	lsr.w	r3, r1, r4
   d7ae8:	ea45 0103 	orr.w	r1, r5, r3
   d7aec:	bd30      	pop	{r4, r5, pc}
   d7aee:	f1c4 040c 	rsb	r4, r4, #12
   d7af2:	f1c4 0220 	rsb	r2, r4, #32
   d7af6:	fa20 f002 	lsr.w	r0, r0, r2
   d7afa:	fa01 f304 	lsl.w	r3, r1, r4
   d7afe:	ea40 0003 	orr.w	r0, r0, r3
   d7b02:	4629      	mov	r1, r5
   d7b04:	bd30      	pop	{r4, r5, pc}
   d7b06:	fa21 f004 	lsr.w	r0, r1, r4
   d7b0a:	4629      	mov	r1, r5
   d7b0c:	bd30      	pop	{r4, r5, pc}
   d7b0e:	f094 0f00 	teq	r4, #0
   d7b12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7b16:	bf06      	itte	eq
   d7b18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7b1c:	3401      	addeq	r4, #1
   d7b1e:	3d01      	subne	r5, #1
   d7b20:	e74e      	b.n	d79c0 <__adddf3+0x8c>
   d7b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7b26:	bf18      	it	ne
   d7b28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b2c:	d029      	beq.n	d7b82 <__adddf3+0x24e>
   d7b2e:	ea94 0f05 	teq	r4, r5
   d7b32:	bf08      	it	eq
   d7b34:	ea90 0f02 	teqeq	r0, r2
   d7b38:	d005      	beq.n	d7b46 <__adddf3+0x212>
   d7b3a:	ea54 0c00 	orrs.w	ip, r4, r0
   d7b3e:	bf04      	itt	eq
   d7b40:	4619      	moveq	r1, r3
   d7b42:	4610      	moveq	r0, r2
   d7b44:	bd30      	pop	{r4, r5, pc}
   d7b46:	ea91 0f03 	teq	r1, r3
   d7b4a:	bf1e      	ittt	ne
   d7b4c:	2100      	movne	r1, #0
   d7b4e:	2000      	movne	r0, #0
   d7b50:	bd30      	popne	{r4, r5, pc}
   d7b52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7b56:	d105      	bne.n	d7b64 <__adddf3+0x230>
   d7b58:	0040      	lsls	r0, r0, #1
   d7b5a:	4149      	adcs	r1, r1
   d7b5c:	bf28      	it	cs
   d7b5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7b62:	bd30      	pop	{r4, r5, pc}
   d7b64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7b68:	bf3c      	itt	cc
   d7b6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7b6e:	bd30      	popcc	{r4, r5, pc}
   d7b70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7b74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7b78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7b7c:	f04f 0000 	mov.w	r0, #0
   d7b80:	bd30      	pop	{r4, r5, pc}
   d7b82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7b86:	bf1a      	itte	ne
   d7b88:	4619      	movne	r1, r3
   d7b8a:	4610      	movne	r0, r2
   d7b8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7b90:	bf1c      	itt	ne
   d7b92:	460b      	movne	r3, r1
   d7b94:	4602      	movne	r2, r0
   d7b96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7b9a:	bf06      	itte	eq
   d7b9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7ba0:	ea91 0f03 	teqeq	r1, r3
   d7ba4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7ba8:	bd30      	pop	{r4, r5, pc}
   d7baa:	bf00      	nop

000d7bac <__aeabi_ui2d>:
   d7bac:	f090 0f00 	teq	r0, #0
   d7bb0:	bf04      	itt	eq
   d7bb2:	2100      	moveq	r1, #0
   d7bb4:	4770      	bxeq	lr
   d7bb6:	b530      	push	{r4, r5, lr}
   d7bb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7bbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7bc0:	f04f 0500 	mov.w	r5, #0
   d7bc4:	f04f 0100 	mov.w	r1, #0
   d7bc8:	e750      	b.n	d7a6c <__adddf3+0x138>
   d7bca:	bf00      	nop

000d7bcc <__aeabi_i2d>:
   d7bcc:	f090 0f00 	teq	r0, #0
   d7bd0:	bf04      	itt	eq
   d7bd2:	2100      	moveq	r1, #0
   d7bd4:	4770      	bxeq	lr
   d7bd6:	b530      	push	{r4, r5, lr}
   d7bd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7bdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7be0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7be4:	bf48      	it	mi
   d7be6:	4240      	negmi	r0, r0
   d7be8:	f04f 0100 	mov.w	r1, #0
   d7bec:	e73e      	b.n	d7a6c <__adddf3+0x138>
   d7bee:	bf00      	nop

000d7bf0 <__aeabi_f2d>:
   d7bf0:	0042      	lsls	r2, r0, #1
   d7bf2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7bf6:	ea4f 0131 	mov.w	r1, r1, rrx
   d7bfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7bfe:	bf1f      	itttt	ne
   d7c00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7c04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7c0c:	4770      	bxne	lr
   d7c0e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7c12:	bf08      	it	eq
   d7c14:	4770      	bxeq	lr
   d7c16:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d7c1a:	bf04      	itt	eq
   d7c1c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7c20:	4770      	bxeq	lr
   d7c22:	b530      	push	{r4, r5, lr}
   d7c24:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7c28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7c30:	e71c      	b.n	d7a6c <__adddf3+0x138>
   d7c32:	bf00      	nop

000d7c34 <__aeabi_ul2d>:
   d7c34:	ea50 0201 	orrs.w	r2, r0, r1
   d7c38:	bf08      	it	eq
   d7c3a:	4770      	bxeq	lr
   d7c3c:	b530      	push	{r4, r5, lr}
   d7c3e:	f04f 0500 	mov.w	r5, #0
   d7c42:	e00a      	b.n	d7c5a <__aeabi_l2d+0x16>

000d7c44 <__aeabi_l2d>:
   d7c44:	ea50 0201 	orrs.w	r2, r0, r1
   d7c48:	bf08      	it	eq
   d7c4a:	4770      	bxeq	lr
   d7c4c:	b530      	push	{r4, r5, lr}
   d7c4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7c52:	d502      	bpl.n	d7c5a <__aeabi_l2d+0x16>
   d7c54:	4240      	negs	r0, r0
   d7c56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7c5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7c66:	f43f aed8 	beq.w	d7a1a <__adddf3+0xe6>
   d7c6a:	f04f 0203 	mov.w	r2, #3
   d7c6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7c72:	bf18      	it	ne
   d7c74:	3203      	addne	r2, #3
   d7c76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7c7a:	bf18      	it	ne
   d7c7c:	3203      	addne	r2, #3
   d7c7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7c82:	f1c2 0320 	rsb	r3, r2, #32
   d7c86:	fa00 fc03 	lsl.w	ip, r0, r3
   d7c8a:	fa20 f002 	lsr.w	r0, r0, r2
   d7c8e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7c92:	ea40 000e 	orr.w	r0, r0, lr
   d7c96:	fa21 f102 	lsr.w	r1, r1, r2
   d7c9a:	4414      	add	r4, r2
   d7c9c:	e6bd      	b.n	d7a1a <__adddf3+0xe6>
   d7c9e:	bf00      	nop

000d7ca0 <__aeabi_dmul>:
   d7ca0:	b570      	push	{r4, r5, r6, lr}
   d7ca2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7ca6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7caa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7cae:	bf1d      	ittte	ne
   d7cb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7cb4:	ea94 0f0c 	teqne	r4, ip
   d7cb8:	ea95 0f0c 	teqne	r5, ip
   d7cbc:	f000 f8de 	bleq	d7e7c <__aeabi_dmul+0x1dc>
   d7cc0:	442c      	add	r4, r5
   d7cc2:	ea81 0603 	eor.w	r6, r1, r3
   d7cc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7cca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7cce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7cd2:	bf18      	it	ne
   d7cd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7ce0:	d038      	beq.n	d7d54 <__aeabi_dmul+0xb4>
   d7ce2:	fba0 ce02 	umull	ip, lr, r0, r2
   d7ce6:	f04f 0500 	mov.w	r5, #0
   d7cea:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7cee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7cf2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7cf6:	f04f 0600 	mov.w	r6, #0
   d7cfa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7cfe:	f09c 0f00 	teq	ip, #0
   d7d02:	bf18      	it	ne
   d7d04:	f04e 0e01 	orrne.w	lr, lr, #1
   d7d08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7d0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7d10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7d14:	d204      	bcs.n	d7d20 <__aeabi_dmul+0x80>
   d7d16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7d1a:	416d      	adcs	r5, r5
   d7d1c:	eb46 0606 	adc.w	r6, r6, r6
   d7d20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7d24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7d28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7d2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7d30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7d34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7d38:	bf88      	it	hi
   d7d3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7d3e:	d81e      	bhi.n	d7d7e <__aeabi_dmul+0xde>
   d7d40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7d44:	bf08      	it	eq
   d7d46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7d4a:	f150 0000 	adcs.w	r0, r0, #0
   d7d4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7d52:	bd70      	pop	{r4, r5, r6, pc}
   d7d54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7d58:	ea46 0101 	orr.w	r1, r6, r1
   d7d5c:	ea40 0002 	orr.w	r0, r0, r2
   d7d60:	ea81 0103 	eor.w	r1, r1, r3
   d7d64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7d68:	bfc2      	ittt	gt
   d7d6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7d6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7d72:	bd70      	popgt	{r4, r5, r6, pc}
   d7d74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d78:	f04f 0e00 	mov.w	lr, #0
   d7d7c:	3c01      	subs	r4, #1
   d7d7e:	f300 80ab 	bgt.w	d7ed8 <__aeabi_dmul+0x238>
   d7d82:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7d86:	bfde      	ittt	le
   d7d88:	2000      	movle	r0, #0
   d7d8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7d8e:	bd70      	pople	{r4, r5, r6, pc}
   d7d90:	f1c4 0400 	rsb	r4, r4, #0
   d7d94:	3c20      	subs	r4, #32
   d7d96:	da35      	bge.n	d7e04 <__aeabi_dmul+0x164>
   d7d98:	340c      	adds	r4, #12
   d7d9a:	dc1b      	bgt.n	d7dd4 <__aeabi_dmul+0x134>
   d7d9c:	f104 0414 	add.w	r4, r4, #20
   d7da0:	f1c4 0520 	rsb	r5, r4, #32
   d7da4:	fa00 f305 	lsl.w	r3, r0, r5
   d7da8:	fa20 f004 	lsr.w	r0, r0, r4
   d7dac:	fa01 f205 	lsl.w	r2, r1, r5
   d7db0:	ea40 0002 	orr.w	r0, r0, r2
   d7db4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7db8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7dbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7dc0:	fa21 f604 	lsr.w	r6, r1, r4
   d7dc4:	eb42 0106 	adc.w	r1, r2, r6
   d7dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7dcc:	bf08      	it	eq
   d7dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7dd2:	bd70      	pop	{r4, r5, r6, pc}
   d7dd4:	f1c4 040c 	rsb	r4, r4, #12
   d7dd8:	f1c4 0520 	rsb	r5, r4, #32
   d7ddc:	fa00 f304 	lsl.w	r3, r0, r4
   d7de0:	fa20 f005 	lsr.w	r0, r0, r5
   d7de4:	fa01 f204 	lsl.w	r2, r1, r4
   d7de8:	ea40 0002 	orr.w	r0, r0, r2
   d7dec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7df0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7df4:	f141 0100 	adc.w	r1, r1, #0
   d7df8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7dfc:	bf08      	it	eq
   d7dfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e02:	bd70      	pop	{r4, r5, r6, pc}
   d7e04:	f1c4 0520 	rsb	r5, r4, #32
   d7e08:	fa00 f205 	lsl.w	r2, r0, r5
   d7e0c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7e10:	fa20 f304 	lsr.w	r3, r0, r4
   d7e14:	fa01 f205 	lsl.w	r2, r1, r5
   d7e18:	ea43 0302 	orr.w	r3, r3, r2
   d7e1c:	fa21 f004 	lsr.w	r0, r1, r4
   d7e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e24:	fa21 f204 	lsr.w	r2, r1, r4
   d7e28:	ea20 0002 	bic.w	r0, r0, r2
   d7e2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7e30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e34:	bf08      	it	eq
   d7e36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e3a:	bd70      	pop	{r4, r5, r6, pc}
   d7e3c:	f094 0f00 	teq	r4, #0
   d7e40:	d10f      	bne.n	d7e62 <__aeabi_dmul+0x1c2>
   d7e42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7e46:	0040      	lsls	r0, r0, #1
   d7e48:	eb41 0101 	adc.w	r1, r1, r1
   d7e4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7e50:	bf08      	it	eq
   d7e52:	3c01      	subeq	r4, #1
   d7e54:	d0f7      	beq.n	d7e46 <__aeabi_dmul+0x1a6>
   d7e56:	ea41 0106 	orr.w	r1, r1, r6
   d7e5a:	f095 0f00 	teq	r5, #0
   d7e5e:	bf18      	it	ne
   d7e60:	4770      	bxne	lr
   d7e62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7e66:	0052      	lsls	r2, r2, #1
   d7e68:	eb43 0303 	adc.w	r3, r3, r3
   d7e6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7e70:	bf08      	it	eq
   d7e72:	3d01      	subeq	r5, #1
   d7e74:	d0f7      	beq.n	d7e66 <__aeabi_dmul+0x1c6>
   d7e76:	ea43 0306 	orr.w	r3, r3, r6
   d7e7a:	4770      	bx	lr
   d7e7c:	ea94 0f0c 	teq	r4, ip
   d7e80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7e84:	bf18      	it	ne
   d7e86:	ea95 0f0c 	teqne	r5, ip
   d7e8a:	d00c      	beq.n	d7ea6 <__aeabi_dmul+0x206>
   d7e8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7e90:	bf18      	it	ne
   d7e92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7e96:	d1d1      	bne.n	d7e3c <__aeabi_dmul+0x19c>
   d7e98:	ea81 0103 	eor.w	r1, r1, r3
   d7e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ea0:	f04f 0000 	mov.w	r0, #0
   d7ea4:	bd70      	pop	{r4, r5, r6, pc}
   d7ea6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7eaa:	bf06      	itte	eq
   d7eac:	4610      	moveq	r0, r2
   d7eae:	4619      	moveq	r1, r3
   d7eb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7eb4:	d019      	beq.n	d7eea <__aeabi_dmul+0x24a>
   d7eb6:	ea94 0f0c 	teq	r4, ip
   d7eba:	d102      	bne.n	d7ec2 <__aeabi_dmul+0x222>
   d7ebc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7ec0:	d113      	bne.n	d7eea <__aeabi_dmul+0x24a>
   d7ec2:	ea95 0f0c 	teq	r5, ip
   d7ec6:	d105      	bne.n	d7ed4 <__aeabi_dmul+0x234>
   d7ec8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7ecc:	bf1c      	itt	ne
   d7ece:	4610      	movne	r0, r2
   d7ed0:	4619      	movne	r1, r3
   d7ed2:	d10a      	bne.n	d7eea <__aeabi_dmul+0x24a>
   d7ed4:	ea81 0103 	eor.w	r1, r1, r3
   d7ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7edc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7ee0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7ee4:	f04f 0000 	mov.w	r0, #0
   d7ee8:	bd70      	pop	{r4, r5, r6, pc}
   d7eea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7eee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7ef2:	bd70      	pop	{r4, r5, r6, pc}

000d7ef4 <__aeabi_ddiv>:
   d7ef4:	b570      	push	{r4, r5, r6, lr}
   d7ef6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7efa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7efe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f02:	bf1d      	ittte	ne
   d7f04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7f08:	ea94 0f0c 	teqne	r4, ip
   d7f0c:	ea95 0f0c 	teqne	r5, ip
   d7f10:	f000 f8a7 	bleq	d8062 <__aeabi_ddiv+0x16e>
   d7f14:	eba4 0405 	sub.w	r4, r4, r5
   d7f18:	ea81 0e03 	eor.w	lr, r1, r3
   d7f1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7f20:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f24:	f000 8088 	beq.w	d8038 <__aeabi_ddiv+0x144>
   d7f28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7f30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7f34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7f38:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7f3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7f40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7f44:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7f48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7f4c:	429d      	cmp	r5, r3
   d7f4e:	bf08      	it	eq
   d7f50:	4296      	cmpeq	r6, r2
   d7f52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7f56:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7f5a:	d202      	bcs.n	d7f62 <__aeabi_ddiv+0x6e>
   d7f5c:	085b      	lsrs	r3, r3, #1
   d7f5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7f62:	1ab6      	subs	r6, r6, r2
   d7f64:	eb65 0503 	sbc.w	r5, r5, r3
   d7f68:	085b      	lsrs	r3, r3, #1
   d7f6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7f6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7f72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7f76:	ebb6 0e02 	subs.w	lr, r6, r2
   d7f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7f7e:	bf22      	ittt	cs
   d7f80:	1ab6      	subcs	r6, r6, r2
   d7f82:	4675      	movcs	r5, lr
   d7f84:	ea40 000c 	orrcs.w	r0, r0, ip
   d7f88:	085b      	lsrs	r3, r3, #1
   d7f8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7f8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7f92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7f96:	bf22      	ittt	cs
   d7f98:	1ab6      	subcs	r6, r6, r2
   d7f9a:	4675      	movcs	r5, lr
   d7f9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7fa0:	085b      	lsrs	r3, r3, #1
   d7fa2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fa6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7faa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fae:	bf22      	ittt	cs
   d7fb0:	1ab6      	subcs	r6, r6, r2
   d7fb2:	4675      	movcs	r5, lr
   d7fb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7fb8:	085b      	lsrs	r3, r3, #1
   d7fba:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fc6:	bf22      	ittt	cs
   d7fc8:	1ab6      	subcs	r6, r6, r2
   d7fca:	4675      	movcs	r5, lr
   d7fcc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7fd0:	ea55 0e06 	orrs.w	lr, r5, r6
   d7fd4:	d018      	beq.n	d8008 <__aeabi_ddiv+0x114>
   d7fd6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7fda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7fde:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7fe2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7fe6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7fea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7fee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7ff2:	d1c0      	bne.n	d7f76 <__aeabi_ddiv+0x82>
   d7ff4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ff8:	d10b      	bne.n	d8012 <__aeabi_ddiv+0x11e>
   d7ffa:	ea41 0100 	orr.w	r1, r1, r0
   d7ffe:	f04f 0000 	mov.w	r0, #0
   d8002:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8006:	e7b6      	b.n	d7f76 <__aeabi_ddiv+0x82>
   d8008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d800c:	bf04      	itt	eq
   d800e:	4301      	orreq	r1, r0
   d8010:	2000      	moveq	r0, #0
   d8012:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8016:	bf88      	it	hi
   d8018:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d801c:	f63f aeaf 	bhi.w	d7d7e <__aeabi_dmul+0xde>
   d8020:	ebb5 0c03 	subs.w	ip, r5, r3
   d8024:	bf04      	itt	eq
   d8026:	ebb6 0c02 	subseq.w	ip, r6, r2
   d802a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d802e:	f150 0000 	adcs.w	r0, r0, #0
   d8032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8036:	bd70      	pop	{r4, r5, r6, pc}
   d8038:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d803c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8040:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8044:	bfc2      	ittt	gt
   d8046:	ebd4 050c 	rsbsgt	r5, r4, ip
   d804a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d804e:	bd70      	popgt	{r4, r5, r6, pc}
   d8050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8054:	f04f 0e00 	mov.w	lr, #0
   d8058:	3c01      	subs	r4, #1
   d805a:	e690      	b.n	d7d7e <__aeabi_dmul+0xde>
   d805c:	ea45 0e06 	orr.w	lr, r5, r6
   d8060:	e68d      	b.n	d7d7e <__aeabi_dmul+0xde>
   d8062:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8066:	ea94 0f0c 	teq	r4, ip
   d806a:	bf08      	it	eq
   d806c:	ea95 0f0c 	teqeq	r5, ip
   d8070:	f43f af3b 	beq.w	d7eea <__aeabi_dmul+0x24a>
   d8074:	ea94 0f0c 	teq	r4, ip
   d8078:	d10a      	bne.n	d8090 <__aeabi_ddiv+0x19c>
   d807a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d807e:	f47f af34 	bne.w	d7eea <__aeabi_dmul+0x24a>
   d8082:	ea95 0f0c 	teq	r5, ip
   d8086:	f47f af25 	bne.w	d7ed4 <__aeabi_dmul+0x234>
   d808a:	4610      	mov	r0, r2
   d808c:	4619      	mov	r1, r3
   d808e:	e72c      	b.n	d7eea <__aeabi_dmul+0x24a>
   d8090:	ea95 0f0c 	teq	r5, ip
   d8094:	d106      	bne.n	d80a4 <__aeabi_ddiv+0x1b0>
   d8096:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d809a:	f43f aefd 	beq.w	d7e98 <__aeabi_dmul+0x1f8>
   d809e:	4610      	mov	r0, r2
   d80a0:	4619      	mov	r1, r3
   d80a2:	e722      	b.n	d7eea <__aeabi_dmul+0x24a>
   d80a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80a8:	bf18      	it	ne
   d80aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80ae:	f47f aec5 	bne.w	d7e3c <__aeabi_dmul+0x19c>
   d80b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d80b6:	f47f af0d 	bne.w	d7ed4 <__aeabi_dmul+0x234>
   d80ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d80be:	f47f aeeb 	bne.w	d7e98 <__aeabi_dmul+0x1f8>
   d80c2:	e712      	b.n	d7eea <__aeabi_dmul+0x24a>

000d80c4 <__aeabi_d2f>:
   d80c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d80c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d80cc:	bf24      	itt	cs
   d80ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d80d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d80d6:	d90d      	bls.n	d80f4 <__aeabi_d2f+0x30>
   d80d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d80dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d80e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d80e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d80e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d80ec:	bf08      	it	eq
   d80ee:	f020 0001 	biceq.w	r0, r0, #1
   d80f2:	4770      	bx	lr
   d80f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d80f8:	d121      	bne.n	d813e <__aeabi_d2f+0x7a>
   d80fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d80fe:	bfbc      	itt	lt
   d8100:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8104:	4770      	bxlt	lr
   d8106:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d810a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d810e:	f1c2 0218 	rsb	r2, r2, #24
   d8112:	f1c2 0c20 	rsb	ip, r2, #32
   d8116:	fa10 f30c 	lsls.w	r3, r0, ip
   d811a:	fa20 f002 	lsr.w	r0, r0, r2
   d811e:	bf18      	it	ne
   d8120:	f040 0001 	orrne.w	r0, r0, #1
   d8124:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8128:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d812c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8130:	ea40 000c 	orr.w	r0, r0, ip
   d8134:	fa23 f302 	lsr.w	r3, r3, r2
   d8138:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d813c:	e7cc      	b.n	d80d8 <__aeabi_d2f+0x14>
   d813e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8142:	d107      	bne.n	d8154 <__aeabi_d2f+0x90>
   d8144:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8148:	bf1e      	ittt	ne
   d814a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d814e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8152:	4770      	bxne	lr
   d8154:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8158:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d815c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8160:	4770      	bx	lr
   d8162:	bf00      	nop

000d8164 <atexit>:
   d8164:	2300      	movs	r3, #0
   d8166:	4601      	mov	r1, r0
   d8168:	461a      	mov	r2, r3
   d816a:	4618      	mov	r0, r3
   d816c:	f000 b868 	b.w	d8240 <__register_exitproc>

000d8170 <memcpy>:
   d8170:	440a      	add	r2, r1
   d8172:	4291      	cmp	r1, r2
   d8174:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8178:	d100      	bne.n	d817c <memcpy+0xc>
   d817a:	4770      	bx	lr
   d817c:	b510      	push	{r4, lr}
   d817e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8182:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8186:	4291      	cmp	r1, r2
   d8188:	d1f9      	bne.n	d817e <memcpy+0xe>
   d818a:	bd10      	pop	{r4, pc}

000d818c <memset>:
   d818c:	4402      	add	r2, r0
   d818e:	4603      	mov	r3, r0
   d8190:	4293      	cmp	r3, r2
   d8192:	d100      	bne.n	d8196 <memset+0xa>
   d8194:	4770      	bx	lr
   d8196:	f803 1b01 	strb.w	r1, [r3], #1
   d819a:	e7f9      	b.n	d8190 <memset+0x4>

000d819c <srand>:
   d819c:	b538      	push	{r3, r4, r5, lr}
   d819e:	4b0d      	ldr	r3, [pc, #52]	; (d81d4 <srand+0x38>)
   d81a0:	681d      	ldr	r5, [r3, #0]
   d81a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d81a4:	4604      	mov	r4, r0
   d81a6:	b97b      	cbnz	r3, d81c8 <srand+0x2c>
   d81a8:	2018      	movs	r0, #24
   d81aa:	f7fd ff8f 	bl	d60cc <malloc>
   d81ae:	4a0a      	ldr	r2, [pc, #40]	; (d81d8 <srand+0x3c>)
   d81b0:	4b0a      	ldr	r3, [pc, #40]	; (d81dc <srand+0x40>)
   d81b2:	63a8      	str	r0, [r5, #56]	; 0x38
   d81b4:	e9c0 2300 	strd	r2, r3, [r0]
   d81b8:	4b09      	ldr	r3, [pc, #36]	; (d81e0 <srand+0x44>)
   d81ba:	6083      	str	r3, [r0, #8]
   d81bc:	230b      	movs	r3, #11
   d81be:	8183      	strh	r3, [r0, #12]
   d81c0:	2201      	movs	r2, #1
   d81c2:	2300      	movs	r3, #0
   d81c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d81c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d81ca:	2200      	movs	r2, #0
   d81cc:	611c      	str	r4, [r3, #16]
   d81ce:	615a      	str	r2, [r3, #20]
   d81d0:	bd38      	pop	{r3, r4, r5, pc}
   d81d2:	bf00      	nop
   d81d4:	2003d790 	.word	0x2003d790
   d81d8:	abcd330e 	.word	0xabcd330e
   d81dc:	e66d1234 	.word	0xe66d1234
   d81e0:	0005deec 	.word	0x0005deec

000d81e4 <strcpy>:
   d81e4:	4603      	mov	r3, r0
   d81e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d81ea:	f803 2b01 	strb.w	r2, [r3], #1
   d81ee:	2a00      	cmp	r2, #0
   d81f0:	d1f9      	bne.n	d81e6 <strcpy+0x2>
   d81f2:	4770      	bx	lr

000d81f4 <strdup>:
   d81f4:	4b02      	ldr	r3, [pc, #8]	; (d8200 <strdup+0xc>)
   d81f6:	4601      	mov	r1, r0
   d81f8:	6818      	ldr	r0, [r3, #0]
   d81fa:	f000 b803 	b.w	d8204 <_strdup_r>
   d81fe:	bf00      	nop
   d8200:	2003d790 	.word	0x2003d790

000d8204 <_strdup_r>:
   d8204:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8206:	4604      	mov	r4, r0
   d8208:	4608      	mov	r0, r1
   d820a:	460d      	mov	r5, r1
   d820c:	f000 f80f 	bl	d822e <strlen>
   d8210:	1c42      	adds	r2, r0, #1
   d8212:	4611      	mov	r1, r2
   d8214:	4620      	mov	r0, r4
   d8216:	9201      	str	r2, [sp, #4]
   d8218:	f7fd ff88 	bl	d612c <_malloc_r>
   d821c:	4604      	mov	r4, r0
   d821e:	b118      	cbz	r0, d8228 <_strdup_r+0x24>
   d8220:	9a01      	ldr	r2, [sp, #4]
   d8222:	4629      	mov	r1, r5
   d8224:	f7ff ffa4 	bl	d8170 <memcpy>
   d8228:	4620      	mov	r0, r4
   d822a:	b003      	add	sp, #12
   d822c:	bd30      	pop	{r4, r5, pc}

000d822e <strlen>:
   d822e:	4603      	mov	r3, r0
   d8230:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8234:	2a00      	cmp	r2, #0
   d8236:	d1fb      	bne.n	d8230 <strlen+0x2>
   d8238:	1a18      	subs	r0, r3, r0
   d823a:	3801      	subs	r0, #1
   d823c:	4770      	bx	lr
	...

000d8240 <__register_exitproc>:
   d8240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8244:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d8300 <__register_exitproc+0xc0>
   d8248:	4606      	mov	r6, r0
   d824a:	f8d8 0000 	ldr.w	r0, [r8]
   d824e:	461f      	mov	r7, r3
   d8250:	460d      	mov	r5, r1
   d8252:	4691      	mov	r9, r2
   d8254:	f000 f856 	bl	d8304 <__retarget_lock_acquire_recursive>
   d8258:	4b25      	ldr	r3, [pc, #148]	; (d82f0 <__register_exitproc+0xb0>)
   d825a:	681c      	ldr	r4, [r3, #0]
   d825c:	b934      	cbnz	r4, d826c <__register_exitproc+0x2c>
   d825e:	4c25      	ldr	r4, [pc, #148]	; (d82f4 <__register_exitproc+0xb4>)
   d8260:	601c      	str	r4, [r3, #0]
   d8262:	4b25      	ldr	r3, [pc, #148]	; (d82f8 <__register_exitproc+0xb8>)
   d8264:	b113      	cbz	r3, d826c <__register_exitproc+0x2c>
   d8266:	681b      	ldr	r3, [r3, #0]
   d8268:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d826c:	6863      	ldr	r3, [r4, #4]
   d826e:	2b1f      	cmp	r3, #31
   d8270:	dd07      	ble.n	d8282 <__register_exitproc+0x42>
   d8272:	f8d8 0000 	ldr.w	r0, [r8]
   d8276:	f000 f847 	bl	d8308 <__retarget_lock_release_recursive>
   d827a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d827e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8282:	b34e      	cbz	r6, d82d8 <__register_exitproc+0x98>
   d8284:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d8288:	b988      	cbnz	r0, d82ae <__register_exitproc+0x6e>
   d828a:	4b1c      	ldr	r3, [pc, #112]	; (d82fc <__register_exitproc+0xbc>)
   d828c:	b923      	cbnz	r3, d8298 <__register_exitproc+0x58>
   d828e:	f8d8 0000 	ldr.w	r0, [r8]
   d8292:	f000 f838 	bl	d8306 <__retarget_lock_release>
   d8296:	e7f0      	b.n	d827a <__register_exitproc+0x3a>
   d8298:	f44f 7084 	mov.w	r0, #264	; 0x108
   d829c:	f7fd ff16 	bl	d60cc <malloc>
   d82a0:	2800      	cmp	r0, #0
   d82a2:	d0f4      	beq.n	d828e <__register_exitproc+0x4e>
   d82a4:	2300      	movs	r3, #0
   d82a6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d82aa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d82ae:	6863      	ldr	r3, [r4, #4]
   d82b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d82b4:	2201      	movs	r2, #1
   d82b6:	409a      	lsls	r2, r3
   d82b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d82bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d82c0:	4313      	orrs	r3, r2
   d82c2:	2e02      	cmp	r6, #2
   d82c4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d82c8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d82cc:	bf02      	ittt	eq
   d82ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d82d2:	431a      	orreq	r2, r3
   d82d4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d82d8:	6863      	ldr	r3, [r4, #4]
   d82da:	f8d8 0000 	ldr.w	r0, [r8]
   d82de:	1c5a      	adds	r2, r3, #1
   d82e0:	3302      	adds	r3, #2
   d82e2:	6062      	str	r2, [r4, #4]
   d82e4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d82e8:	f000 f80e 	bl	d8308 <__retarget_lock_release_recursive>
   d82ec:	2000      	movs	r0, #0
   d82ee:	e7c6      	b.n	d827e <__register_exitproc+0x3e>
   d82f0:	2003e7e0 	.word	0x2003e7e0
   d82f4:	2003e754 	.word	0x2003e754
   d82f8:	00000000 	.word	0x00000000
   d82fc:	000d60cd 	.word	0x000d60cd
   d8300:	2003d7f4 	.word	0x2003d7f4

000d8304 <__retarget_lock_acquire_recursive>:
   d8304:	4770      	bx	lr

000d8306 <__retarget_lock_release>:
   d8306:	4770      	bx	lr

000d8308 <__retarget_lock_release_recursive>:
   d8308:	4770      	bx	lr

000d830a <link_code_end>:
	...

000d830c <dynalib_user>:
   d830c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d831c:	0000 0000 6954 656d 203a 3025 6932 253a     ....Time: %02i:%
   d832c:	3230 3a69 3025 6932 253a 3330 0a69 4400     02i:%02i:%03i..D
   d833c:	7461 7365 203a 3025 6932 252d 3230 2d69     ates: %02i-%02i-
   d834c:	3025 6932 000a 6946 3a78 2520 2c69 5120     %02i..Fix: %i, Q
   d835c:	6175 696c 7974 203a 6925 4100 2b54 4553     uality: %i.AT+SE
   d836c:	444e 253d 2c69 3036 252c 2c66 6625 252c     ND=%i,60,%f,%f,%
   d837c:	0d69 000a 6553 646e 7220 7065 796c 203a     i...Send reply: 
   d838c:	7325 000a 7453 7261 6974 676e 5320 6163     %s..Starting Sca
   d839c:	3a6e 0a20 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     n: .------------
   d83ac:	2d2d 0a20 4900 4332 6420 7665 6369 2065     -- ..I2C device 
   d83bc:	6f66 6e75 2064 7461 6120 6464 6572 7373     found at address
   d83cc:	3020 2578 3230 2078 000a 6e55 6e6b 776f      0x%02x ..Unknow
   d83dc:	206e 7265 6f72 2072 7461 6120 6464 6572     n error at addre
   d83ec:	7373 3020 2578 3230 2078 000a 6f4e 4920     ss 0x%02x ..No I
   d83fc:	4332 6420 7665 6369 7365 6620 756f 646e     2C devices found
   d840c:	000a 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ..--------------
   d841c:	0a20 6353 6e61 4320 6d6f 6c70 7465 2165      .Scan Complete!
   d842c:	000a 6574 706d 3a43 2520 2066 6574 706d     ..tempC: %f temp
   d843c:	3a46 2520 2066 6f63 6e75 6574 3a72 2520     F: %f counter: %
   d844c:	2069 6564 6976 6563 4449 203a 7325 000a     i deviceID: %s..
   d845c:	6f76 746c 6761 3a65 2520 0a66 4100 2b54     voltage: %f..AT+
   d846c:	4f4d 4544 303d 0a0d 4100 6177 7469 6e69     MODE=0...Awaitin
   d847c:	2067 6552 6c70 2079 7266 6d6f 7220 7965     g Reply from rey
   d848c:	7861 6e4f 2928 000a 6552 6c70 3a79 2520     axOn()..Reply: %
   d849c:	0a73 4100 2b54 4f4d 4544 0d3f 000a 7741     s..AT+MODE?...Aw
   d84ac:	6961 6974 676e 5220 7065 796c 6620 6f72     aiting Reply fro
   d84bc:	206d 6f6d 6564 0a3f 4100 2b54 4f4d 4544     m mode?..AT+MODE
   d84cc:	313d 0a0d 5000 776f 7265 6e69 2067 6f64     =1...Powering do
   d84dc:	6e77 2e2e 0a2e 7300 6e65 2064 6572 6c70     wn.....send repl
   d84ec:	3a79 2520 0a73 7300 6e65 4464 7461 2861     y: %s..sendData(
   d84fc:	0029 5441 532b 4e45 3d44 6925 252c 2c69     ).AT+SEND=%i,%i,
   d850c:	3025 322e 2c66 3025 322e 2c66 6925 0a0d     %0.2f,%0.2f,%i..
   d851c:	6300 6572 7461 4265 6675 6566 3a72 2520     .createBuffer: %
   d852c:	0073 7263 6165 6574 7542 6666 7265 2928     s.createBuffer()
   d853c:	4100 0d54 000a 7461 6554 7473 7220 7065     .AT...atTest rep
   d854c:	796c 203a 7325 000a 7461 6554 7473 2928     ly: %s..atTest()
   d855c:	6100 4d74 646f 2065 6572 6c70 3a79 2520     .atMode reply: %
   d856c:	2073 6572 6c70 3279 203a 7325 000a 7461     s reply2: %s..at
   d857c:	6f4d 6564 2928 4100 6177 7469 6e69 2067     Mode().Awaiting 
   d858c:	6552 6c70 0a79 5200 7065 796c 4120 2b54     Reply..Reply AT+
   d859c:	4f4d 4544 3a3f 2520 0a73 4100 2b54 4f4d     MODE?: %s..AT+MO
   d85ac:	4544 003f 5441 492b 5250 253d 0d69 000a     DE?.AT+IPR=%i...
   d85bc:	6573 4974 5250 4100 2b54 5049 3f52 0a0d     setIPR.AT+IPR?..
   d85cc:	5200 7065 796c 4120 2b54 5049 3f52 203a     .Reply AT+IPR?: 
   d85dc:	7325 000a 5441 492b 5250 003f 5441 502b     %s..AT+IPR?.AT+P
   d85ec:	5241 4d41 5445 5245 313d 2c32 2c37 2c31     ARAMETER=12,7,1,
   d85fc:	0d37 000a 6573 5274 6461 6f69 4100 2b54     7...setRadio.AT+
   d860c:	4150 4152 454d 4554 3f52 0a0d 5200 7065     PARAMETER?...Rep
   d861c:	796c 4120 2b54 4150 4152 454d 4554 3f52     ly AT+PARAMETER?
   d862c:	203a 7325 000a 6573 5074 7261 6d61 7465     : %s..setParamet
   d863c:	7265 003f 5441 422b 4e41 3d44 3139 3035     er?.AT+BAND=9150
   d864c:	3030 3030 0d30 000a 5441 422b 4e41 3d44     00000...AT+BAND=
   d865c:	3638 3538 3030 3030 0d30 000a 6573 4274     868500000...setB
   d866c:	6e61 0064 5441 422b 4e41 3f44 0a0d 5200     and.AT+BAND?...R
   d867c:	7065 796c 4120 2b54 4142 444e 3a3f 2520     eply AT+BAND?: %
   d868c:	0a73 4100 2b54 4142 444e 003f 5441 412b     s..AT+BAND?.AT+A
   d869c:	4444 4552 5353 253d 0d69 000a 6573 4174     DDRESS=%i...setA
   d86ac:	6464 6572 7373 4100 2b54 4441 5244 5345     ddress.AT+ADDRES
   d86bc:	3f53 0a0d 5200 7065 796c 6720 7465 6120     S?...Reply get a
   d86cc:	6464 6572 7373 203a 7325 000a 5441 412b     ddress: %s..AT+A
   d86dc:	4444 4552 5353 003f 5441 4e2b 5445 4f57     DDRESS?.AT+NETWO
   d86ec:	4b52 4449 253d 0d69 000a 5441 4e2b 5445     RKID=%i...AT+NET
   d86fc:	4f57 4b52 4449 0d3f 000a 6552 6c70 2079     WORKID?...Reply 
   d870c:	5441 4e2b 5445 4f57 4b52 4449 203f 7325     AT+NETWORKID? %s
   d871c:	000a 5441 4e2b 5445 4f57 4b52 4449 003f     ..AT+NETWORKID?.
   d872c:	4142 3134 3430 3330 3932 3836 4142 3131     BA4104032968BA11
   d873c:	3431 3932 3039 3937 3230 3531 3439 4141     14299079021594AA
   d874c:	4100 2b54 5043 4e49 253d 0d73 000a 6573     .AT+CPIN=%s...se
   d875c:	4374 4950 004e 5441 432b 4950 3f4e 0a0d     tCPIN.AT+CPIN?..
   d876c:	5200 7065 796c 4320 4950 3a4e 2520 0a73     .Reply CPIN: %s.
   d877c:	4100 2b54 5043 4e49 003f 5441 432b 4652     .AT+CPIN?.AT+CRF
   d878c:	504f 253d 0d69 000a 5441 432b 4652 504f     OP=%i...AT+CRFOP
   d879c:	4100 2b54 5243 4f46 3f50 0a0d 5200 7065     .AT+CRFOP?...Rep
   d87ac:	796c 4120 2b54 5243 4f46 3f50 203a 7325     ly AT+CRFOP?: %s
   d87bc:	000a 5441 432b 4652 504f 003f 7047 2073     ..AT+CRFOP?.Gps 
   d87cc:	7473 7461 7375 6920 2073 6925 000a 5024     status is %i..$P
   d87dc:	544d 334b 3431 302c 312c 302c 312c 302c     MTK314,0,1,0,1,0
   d87ec:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
   d87fc:	302c 302c 302c 302c 302c 302c 322a 0038     ,0,0,0,0,0,0*28.
   d880c:	5024 544d 324b 3032 312c 3030 2a30 4631     $PMTK220,1000*1F
   d881c:	2400 4750 4d43 2c44 3333 312c 362a 0043     .$PGCMD,33,1*6C.
   d882c:	4949 5700 0049 5047 5000 0047 4e47 5a00     II.WI.GP.PG.GN.Z
   d883c:	5a5a 6400 6665 7561 746c 0020 534d 0042     ZZ.default .MSB.
   d884c:	534c 0042 533c 4950 6553 7474 6e69 7367     LSB.<SPISettings
   d885c:	6420 6665 7561 746c 003e 533c 4950 6553      default>.<SPISe
   d886c:	7474 6e69 7367 2520 2573 2075 7325 4d20     ttings %s%u %s M
   d887c:	444f 2545 3e75 4700 4147 4700 4c4c 4700     ODE%u>.GGA.GLL.G
   d888c:	4153 5200 434d 4400 5442 4800 4d44 4800     SA.RMC.DBT.HDM.H
   d889c:	5444 4d00 4144 4d00 5754 4d00 5657 5200     DT.MDA.MTW.MWV.R
   d88ac:	424d 5400 504f 5400 5458 5600 5748 5600     MB.TOP.TXT.VHW.V
   d88bc:	574c 5600 5750 5600 5257 5700 5643 5800     LW.VPW.VWR.WCV.X
   d88cc:	4554 4100 4250 4400 5450 4700 5653 4800     TE.APB.DPT.GSV.H
   d88dc:	4744 4d00 4457 5200 544f 5200 4d50 5200     DG.MWD.ROT.RPM.R
   d88ec:	4153 5600 5244 5600 4754 5a00 4144 0000     SA.VDR.VTG.ZDA..

000d88fc <_ZTVN8particle11SPISettingsE>:
	...
   d8904:	5345 000d 5265 000d 5267 000d 882c 000d     ES..eR..gR..,...
   d8914:	882f 000d 8832 000d 8835 000d 8838 000d     /...2...5...8...
   d8924:	8833 000d 883b 000d                         3...;...

000d892c <_ZTV12Adafruit_GPS>:
	...
   d8934:	5275 000d 5295 000d 52ab 000d 6ffd 000d     uR...R...R...o..

000d8944 <_ZTVN5spark12NetworkClassE>:
	...
   d894c:	616f 000d 6179 000d 6183 000d 618d 000d     oa..ya...a...a..
   d895c:	6197 000d 61a3 000d 61af 000d 61b7 000d     .a...a...a...a..
   d896c:	61bf 000d 61cb 000d 61d3 000d 61dd 000d     .a...a...a...a..
   d897c:	61e7 000d                                   .a..

000d8980 <_ZTVN5spark9WiFiClassE>:
	...
   d8988:	632b 000d 6321 000d 6317 000d 62cd 000d     +c..!c...c...b..
   d8998:	630b 000d 62ff 000d 61af 000d 61b7 000d     .c...b...a...a..
   d89a8:	62f3 000d 62eb 000d 62e1 000d 62d7 000d     .b...b...b...b..
   d89b8:	61e7 000d                                   .a..

000d89bc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d89bc:	0800 1810 2820 3830                         .... (08

000d89c4 <_ZTV7TwoWire>:
	...
   d89cc:	64a5 000d 64ef 000d 64c7 000d 64a7 000d     .d...d...d...d..
   d89dc:	64cf 000d 64d7 000d 64df 000d 64e7 000d     .d...d...d...d..

000d89ec <_ZTV11USARTSerial>:
	...
   d89f4:	656b 000d 65d9 000d 65b1 000d 6ffd 000d     ke...e...e...o..
   d8a04:	6581 000d 659d 000d 658f 000d 65ab 000d     .e...e...e...e..
   d8a14:	656d 000d 6573 000d                         me..se..

000d8a1c <_ZTV9USBSerial>:
	...
   d8a24:	6685 000d 66ed 000d 66c3 000d 6ffd 000d     .f...f...f...o..
   d8a34:	66b5 000d 6687 000d 6697 000d 66e7 000d     .f...f...f...f..
   d8a44:	66a7 000d 667f 000d                         .f...f..

000d8a4c <_ZTV9IPAddress>:
	...
   d8a54:	6799 000d 6789 000d 678b 000d               .g...g...g..

000d8a60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8a68:	686b 000d 6871 000d 68af 000d 687f 000d     kh..qh...h...h..
   d8a78:	686d 000d 5925 252d 2d6d 6425 2554 3a48     mh..%Y-%m-%dT%H:
   d8a88:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   d8a98:	7061 0070 6977 6972 676e 5300 7379 6574     app.wiring.Syste
   d8aa8:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   d8ab8:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   d8ac8:	002e 0000                                   ....

000d8acc <_ZTVN5spark13EthernetClassE>:
	...
   d8ad4:	7463 000d 7459 000d 744f 000d 7445 000d     ct..Yt..Ot..Et..
   d8ae4:	7439 000d 742d 000d 61af 000d 61b7 000d     9t..-t...a...a..
   d8af4:	7421 000d 7419 000d 740f 000d 7405 000d     !t...t...t...t..
   d8b04:	61e7 000d                                   .a..

000d8b08 <_ZSt7nothrow>:
   d8b08:	0000 0000 6f6c 6667                          ....logf.

000d8b11 <link_const_variable_data_end>:
   d8b11:	00          	.byte	0x00
	...

000d8b14 <link_constructors_location>:
   d8b14:	000d5205 	.word	0x000d5205
   d8b18:	000d62b9 	.word	0x000d62b9
   d8b1c:	000d6335 	.word	0x000d6335
   d8b20:	000d6f65 	.word	0x000d6f65
   d8b24:	000d6f79 	.word	0x000d6f79
   d8b28:	000d6f8d 	.word	0x000d6f8d
   d8b2c:	000d7125 	.word	0x000d7125
   d8b30:	000d73e1 	.word	0x000d73e1
   d8b34:	000d746d 	.word	0x000d746d

000d8b38 <link_constructors_end>:
	...
