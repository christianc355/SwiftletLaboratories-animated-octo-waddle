
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/myGateway/target/4.0.0/boron/myGateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000096b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd6d0  000bd6d0  0000d6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd6f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  2003dfa8  000bd6f8  0001dfa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000658  2003e198  2003e198  0002e198  2**2
                  ALLOC
  7 .module_info_suffix 0000002c  000bd8e8  000bd8e8  0002d8e8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bd914  000bd914  0002d914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001bfb79  00000000  00000000  0002d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001eacb  00000000  00000000  001ed491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000037c8  00000000  00000000  0020bf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0004846c  00000000  00000000  0020f724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0005f560  00000000  00000000  00257b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    001521b8  00000000  00000000  002b70f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00049bad  00000000  00000000  004092a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000d3d0  00000000  00000000  00452e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000aa30  00000000  00000000  00460228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f98c 	bl	ba34e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f994 	bl	ba36a <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dfa8 	.word	0x2003dfa8
   b404c:	000bd6f8 	.word	0x000bd6f8
   b4050:	2003e198 	.word	0x2003e198
   b4054:	2003e198 	.word	0x2003e198
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fbcd 	bl	b8800 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd68c 	.word	0x000bd68c
   b4080:	000bd6c4 	.word	0x000bd6c4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc72 	b.w	b496c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fd99 	bl	b4bc0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bb6d 	b.w	b8770 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 ba65 	b.w	b7564 <malloc>

000b409a <_Znaj>:
   b409a:	f003 ba63 	b.w	b7564 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 ba69 	b.w	b7574 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   b40b2:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b40b4:	f003 f958 	bl	b7368 <spark_cloud_flag_connected>
        if (!connected()) {
   b40b8:	b120      	cbz	r0, b40c4 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   b40ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   b40be:	2000      	movs	r0, #0
   b40c0:	f003 b96a 	b.w	b7398 <spark_sync_time>
    }
   b40c4:	bd08      	pop	{r3, pc}
	...

000b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   b40c8:	b510      	push	{r4, lr}
   b40ca:	b086      	sub	sp, #24
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b40cc:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b40ce:	a902      	add	r1, sp, #8
   b40d0:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b40d2:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   b40d4:	f003 f92e 	bl	b7334 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b40d8:	b9e0      	cbnz	r0, b4114 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x4c>
        return ret;
    }
    return get(src, val);
   b40da:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   b40dc:	b10c      	cbz	r4, b40e2 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1a>
   b40de:	6923      	ldr	r3, [r4, #16]
   b40e0:	b923      	cbnz	r3, b40ec <_ZNK11SystemClass13batteryChargeEv.isra.0+0x24>
   b40e2:	4a0e      	ldr	r2, [pc, #56]	; (b411c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x54>)
   b40e4:	490e      	ldr	r1, [pc, #56]	; (b4120 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x58>)
   b40e6:	200a      	movs	r0, #10
   b40e8:	f003 f914 	bl	b7314 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b40ec:	230c      	movs	r3, #12
   b40ee:	9303      	str	r3, [sp, #12]
   b40f0:	ab01      	add	r3, sp, #4
   b40f2:	9304      	str	r3, [sp, #16]
   b40f4:	2304      	movs	r3, #4
   b40f6:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b40f8:	aa03      	add	r2, sp, #12
   b40fa:	6923      	ldr	r3, [r4, #16]
   b40fc:	2101      	movs	r1, #1
   b40fe:	4620      	mov	r0, r4
   b4100:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b4102:	b938      	cbnz	r0, b4114 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x4c>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4104:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b4108:	ee00 3a10 	vmov	s0, r3
   b410c:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   b4110:	b006      	add	sp, #24
   b4112:	bd10      	pop	{r4, pc}
            return -1.0f;
   b4114:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b4118:	e7fa      	b.n	b4110 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x48>
   b411a:	bf00      	nop
   b411c:	000b7235 	.word	0x000b7235
   b4120:	000bc568 	.word	0x000bc568

000b4124 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	b40e      	push	{r1, r2, r3}
   b4126:	b503      	push	{r0, r1, lr}
   b4128:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b412a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b412c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4130:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4132:	f004 fcba 	bl	b8aaa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4136:	b002      	add	sp, #8
   b4138:	f85d eb04 	ldr.w	lr, [sp], #4
   b413c:	b003      	add	sp, #12
   b413e:	4770      	bx	lr

000b4140 <_Z12plumeConnectv>:
  }
  plume.loop();
}

void plumeConnect()
{
   b4140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!plume.connected())
   b4142:	4d13      	ldr	r5, [pc, #76]	; (b4190 <_Z12plumeConnectv+0x50>)
  {
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4144:	4e13      	ldr	r6, [pc, #76]	; (b4194 <_Z12plumeConnectv+0x54>)
    if (plume.connect("myBoron", TOKEN, NULL)) // ClientID, User, PW
   b4146:	4f14      	ldr	r7, [pc, #80]	; (b4198 <_Z12plumeConnectv+0x58>)
  while (!plume.connected())
   b4148:	4811      	ldr	r0, [pc, #68]	; (b4190 <_Z12plumeConnectv+0x50>)
   b414a:	f002 fd48 	bl	b6bde <_ZN12PubSubClient9connectedEv>
   b414e:	4604      	mov	r4, r0
   b4150:	b9e0      	cbnz	r0, b418c <_Z12plumeConnectv+0x4c>
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4152:	f003 ff61 	bl	b8018 <_Z16_fetch_usbserialv>
   b4156:	4631      	mov	r1, r6
   b4158:	f004 fc7f 	bl	b8a5a <_ZN5Print7printlnEPKc>
    if (plume.connect("myBoron", TOKEN, NULL)) // ClientID, User, PW
   b415c:	490f      	ldr	r1, [pc, #60]	; (b419c <_Z12plumeConnectv+0x5c>)
   b415e:	4623      	mov	r3, r4
   b4160:	463a      	mov	r2, r7
   b4162:	4628      	mov	r0, r5
   b4164:	f002 fe1a 	bl	b6d9c <_ZN12PubSubClient7connectEPKcS1_S1_>
   b4168:	b130      	cbz	r0, b4178 <_Z12plumeConnectv+0x38>
    {
      Serial.println("plumeConnect(): Connected");
   b416a:	f003 ff55 	bl	b8018 <_Z16_fetch_usbserialv>
    }
    else
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
    delay(3000);
  }
}
   b416e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      Serial.println("plumeConnect(): Connected");
   b4172:	490b      	ldr	r1, [pc, #44]	; (b41a0 <_Z12plumeConnectv+0x60>)
   b4174:	f004 bc71 	b.w	b8a5a <_ZN5Print7printlnEPKc>
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   b4178:	f003 ff4e 	bl	b8018 <_Z16_fetch_usbserialv>
   b417c:	4909      	ldr	r1, [pc, #36]	; (b41a4 <_Z12plumeConnectv+0x64>)
   b417e:	f004 fc6c 	bl	b8a5a <_ZN5Print7printlnEPKc>
    delay(3000);
   b4182:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4186:	f004 fb9b 	bl	b88c0 <delay>
  while (!plume.connected())
   b418a:	e7dd      	b.n	b4148 <_Z12plumeConnectv+0x8>
}
   b418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b418e:	bf00      	nop
   b4190:	2003e2f0 	.word	0x2003e2f0
   b4194:	000bc58e 	.word	0x000bc58e
   b4198:	000bc5ca 	.word	0x000bc5ca
   b419c:	000bc5df 	.word	0x000bc5df
   b41a0:	000bc5e7 	.word	0x000bc5e7
   b41a4:	000bc601 	.word	0x000bc601

000b41a8 <_Z12plumePublishv>:
{
   b41a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!plume.connected())
   b41ac:	48b9      	ldr	r0, [pc, #740]	; (b4494 <_Z12plumePublishv+0x2ec>)
{
   b41ae:	b087      	sub	sp, #28
  if (!plume.connected())
   b41b0:	f002 fd15 	bl	b6bde <_ZN12PubSubClient9connectedEv>
   b41b4:	b908      	cbnz	r0, b41ba <_Z12plumePublishv+0x12>
    plumeConnect();
   b41b6:	f7ff ffc3 	bl	b4140 <_Z12plumeConnectv>
  float batterySoc = System.batteryCharge();
   b41ba:	f7ff ff85 	bl	b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   b41be:	ee10 0a10 	vmov	r0, s0
  snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values\":{\"b\":%.2f}}", timeBuf, batterySoc);
   b41c2:	f005 fd37 	bl	b9c34 <__aeabi_f2d>
   b41c6:	4bb4      	ldr	r3, [pc, #720]	; (b4498 <_Z12plumePublishv+0x2f0>)
   b41c8:	4ab4      	ldr	r2, [pc, #720]	; (b449c <_Z12plumePublishv+0x2f4>)
  x1 = true;
   b41ca:	f8df a33c 	ldr.w	sl, [pc, #828]	; b4508 <_Z12plumePublishv+0x360>
  x2 = true;
   b41ce:	f8df 933c 	ldr.w	r9, [pc, #828]	; b450c <_Z12plumePublishv+0x364>
  x3 = true;
   b41d2:	f8df 833c 	ldr.w	r8, [pc, #828]	; b4510 <_Z12plumePublishv+0x368>
  x4 = true;
   b41d6:	4fb2      	ldr	r7, [pc, #712]	; (b44a0 <_Z12plumePublishv+0x2f8>)
  x5 = true;
   b41d8:	4db2      	ldr	r5, [pc, #712]	; (b44a4 <_Z12plumePublishv+0x2fc>)
  x6 = true;
   b41da:	4cb3      	ldr	r4, [pc, #716]	; (b44a8 <_Z12plumePublishv+0x300>)
  x7 = true;
   b41dc:	f8df b334 	ldr.w	fp, [pc, #820]	; b4514 <_Z12plumePublishv+0x36c>
  t5 = random(70000, 170000) / 1000.0;
   b41e0:	4eb2      	ldr	r6, [pc, #712]	; (b44ac <_Z12plumePublishv+0x304>)
  snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values\":{\"b\":%.2f}}", timeBuf, batterySoc);
   b41e2:	e9cd 0100 	strd	r0, r1, [sp]
   b41e6:	2180      	movs	r1, #128	; 0x80
   b41e8:	48b1      	ldr	r0, [pc, #708]	; (b44b0 <_Z12plumePublishv+0x308>)
   b41ea:	f003 f9db 	bl	b75a4 <snprintf>
  plume.publish("v1/devices/me/telemetry", mqttBuf);
   b41ee:	4ab0      	ldr	r2, [pc, #704]	; (b44b0 <_Z12plumePublishv+0x308>)
   b41f0:	49b0      	ldr	r1, [pc, #704]	; (b44b4 <_Z12plumePublishv+0x30c>)
   b41f2:	48a8      	ldr	r0, [pc, #672]	; (b4494 <_Z12plumePublishv+0x2ec>)
   b41f4:	f002 fec0 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
  x1 = true;
   b41f8:	2301      	movs	r3, #1
  t1 = random(70000, 170000) / 1000.0;
   b41fa:	49af      	ldr	r1, [pc, #700]	; (b44b8 <_Z12plumePublishv+0x310>)
   b41fc:	48af      	ldr	r0, [pc, #700]	; (b44bc <_Z12plumePublishv+0x314>)
  x1 = true;
   b41fe:	f88a 3000 	strb.w	r3, [sl]
  x2 = true;
   b4202:	f889 3000 	strb.w	r3, [r9]
  x3 = true;
   b4206:	f888 3000 	strb.w	r3, [r8]
  x4 = true;
   b420a:	703b      	strb	r3, [r7, #0]
  x5 = true;
   b420c:	702b      	strb	r3, [r5, #0]
  x6 = true;
   b420e:	7023      	strb	r3, [r4, #0]
  x7 = true;
   b4210:	f88b 3000 	strb.w	r3, [fp]
  t1 = random(70000, 170000) / 1000.0;
   b4214:	f003 fd97 	bl	b7d46 <_Z6randomii>
   b4218:	f005 fcfa 	bl	b9c10 <__aeabi_i2d>
   b421c:	2200      	movs	r2, #0
   b421e:	4ba8      	ldr	r3, [pc, #672]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4220:	f005 fe8a 	bl	b9f38 <__aeabi_ddiv>
   b4224:	f006 f818 	bl	ba258 <__aeabi_d2f>
   b4228:	4ba6      	ldr	r3, [pc, #664]	; (b44c4 <_Z12plumePublishv+0x31c>)
  t2 = random(70000, 170000) / 1000.0;
   b422a:	49a3      	ldr	r1, [pc, #652]	; (b44b8 <_Z12plumePublishv+0x310>)
  t1 = random(70000, 170000) / 1000.0;
   b422c:	6018      	str	r0, [r3, #0]
  t2 = random(70000, 170000) / 1000.0;
   b422e:	48a3      	ldr	r0, [pc, #652]	; (b44bc <_Z12plumePublishv+0x314>)
   b4230:	f003 fd89 	bl	b7d46 <_Z6randomii>
   b4234:	f005 fcec 	bl	b9c10 <__aeabi_i2d>
   b4238:	2200      	movs	r2, #0
   b423a:	4ba1      	ldr	r3, [pc, #644]	; (b44c0 <_Z12plumePublishv+0x318>)
   b423c:	f005 fe7c 	bl	b9f38 <__aeabi_ddiv>
   b4240:	f006 f80a 	bl	ba258 <__aeabi_d2f>
   b4244:	4ba0      	ldr	r3, [pc, #640]	; (b44c8 <_Z12plumePublishv+0x320>)
  t3 = random(70000, 170000) / 1000.0;
   b4246:	499c      	ldr	r1, [pc, #624]	; (b44b8 <_Z12plumePublishv+0x310>)
  t2 = random(70000, 170000) / 1000.0;
   b4248:	6018      	str	r0, [r3, #0]
  t3 = random(70000, 170000) / 1000.0;
   b424a:	489c      	ldr	r0, [pc, #624]	; (b44bc <_Z12plumePublishv+0x314>)
   b424c:	f003 fd7b 	bl	b7d46 <_Z6randomii>
   b4250:	f005 fcde 	bl	b9c10 <__aeabi_i2d>
   b4254:	2200      	movs	r2, #0
   b4256:	4b9a      	ldr	r3, [pc, #616]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4258:	f005 fe6e 	bl	b9f38 <__aeabi_ddiv>
   b425c:	f005 fffc 	bl	ba258 <__aeabi_d2f>
   b4260:	4b9a      	ldr	r3, [pc, #616]	; (b44cc <_Z12plumePublishv+0x324>)
  t4 = random(70000, 170000) / 1000.0;
   b4262:	4995      	ldr	r1, [pc, #596]	; (b44b8 <_Z12plumePublishv+0x310>)
  t3 = random(70000, 170000) / 1000.0;
   b4264:	6018      	str	r0, [r3, #0]
  t4 = random(70000, 170000) / 1000.0;
   b4266:	4895      	ldr	r0, [pc, #596]	; (b44bc <_Z12plumePublishv+0x314>)
   b4268:	f003 fd6d 	bl	b7d46 <_Z6randomii>
   b426c:	f005 fcd0 	bl	b9c10 <__aeabi_i2d>
   b4270:	2200      	movs	r2, #0
   b4272:	4b93      	ldr	r3, [pc, #588]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4274:	f005 fe60 	bl	b9f38 <__aeabi_ddiv>
   b4278:	f005 ffee 	bl	ba258 <__aeabi_d2f>
   b427c:	4b94      	ldr	r3, [pc, #592]	; (b44d0 <_Z12plumePublishv+0x328>)
  t5 = random(70000, 170000) / 1000.0;
   b427e:	498e      	ldr	r1, [pc, #568]	; (b44b8 <_Z12plumePublishv+0x310>)
  t4 = random(70000, 170000) / 1000.0;
   b4280:	6018      	str	r0, [r3, #0]
  t5 = random(70000, 170000) / 1000.0;
   b4282:	488e      	ldr	r0, [pc, #568]	; (b44bc <_Z12plumePublishv+0x314>)
   b4284:	f003 fd5f 	bl	b7d46 <_Z6randomii>
   b4288:	f005 fcc2 	bl	b9c10 <__aeabi_i2d>
   b428c:	4b8c      	ldr	r3, [pc, #560]	; (b44c0 <_Z12plumePublishv+0x318>)
   b428e:	2200      	movs	r2, #0
   b4290:	f005 fe52 	bl	b9f38 <__aeabi_ddiv>
   b4294:	f005 ffe0 	bl	ba258 <__aeabi_d2f>
  t6 = random(70000, 170000) / 1000.0;
   b4298:	4987      	ldr	r1, [pc, #540]	; (b44b8 <_Z12plumePublishv+0x310>)
  t5 = random(70000, 170000) / 1000.0;
   b429a:	6030      	str	r0, [r6, #0]
  t6 = random(70000, 170000) / 1000.0;
   b429c:	4887      	ldr	r0, [pc, #540]	; (b44bc <_Z12plumePublishv+0x314>)
   b429e:	f003 fd52 	bl	b7d46 <_Z6randomii>
   b42a2:	f005 fcb5 	bl	b9c10 <__aeabi_i2d>
   b42a6:	2200      	movs	r2, #0
   b42a8:	4b85      	ldr	r3, [pc, #532]	; (b44c0 <_Z12plumePublishv+0x318>)
   b42aa:	f005 fe45 	bl	b9f38 <__aeabi_ddiv>
   b42ae:	f005 ffd3 	bl	ba258 <__aeabi_d2f>
   b42b2:	4b88      	ldr	r3, [pc, #544]	; (b44d4 <_Z12plumePublishv+0x32c>)
  t7 = random(70000, 170000) / 1000.0;
   b42b4:	4980      	ldr	r1, [pc, #512]	; (b44b8 <_Z12plumePublishv+0x310>)
  t6 = random(70000, 170000) / 1000.0;
   b42b6:	6018      	str	r0, [r3, #0]
  t7 = random(70000, 170000) / 1000.0;
   b42b8:	4880      	ldr	r0, [pc, #512]	; (b44bc <_Z12plumePublishv+0x314>)
   b42ba:	f003 fd44 	bl	b7d46 <_Z6randomii>
   b42be:	f005 fca7 	bl	b9c10 <__aeabi_i2d>
   b42c2:	2200      	movs	r2, #0
   b42c4:	4b7e      	ldr	r3, [pc, #504]	; (b44c0 <_Z12plumePublishv+0x318>)
   b42c6:	f005 fe37 	bl	b9f38 <__aeabi_ddiv>
   b42ca:	f005 ffc5 	bl	ba258 <__aeabi_d2f>
   b42ce:	4b82      	ldr	r3, [pc, #520]	; (b44d8 <_Z12plumePublishv+0x330>)
  v1 = random(3000, 4700) / 1000.0;
   b42d0:	f241 215c 	movw	r1, #4700	; 0x125c
  t7 = random(70000, 170000) / 1000.0;
   b42d4:	6018      	str	r0, [r3, #0]
  v1 = random(3000, 4700) / 1000.0;
   b42d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b42da:	f003 fd34 	bl	b7d46 <_Z6randomii>
   b42de:	f005 fc97 	bl	b9c10 <__aeabi_i2d>
   b42e2:	2200      	movs	r2, #0
   b42e4:	4b76      	ldr	r3, [pc, #472]	; (b44c0 <_Z12plumePublishv+0x318>)
   b42e6:	f005 fe27 	bl	b9f38 <__aeabi_ddiv>
   b42ea:	f005 ffb5 	bl	ba258 <__aeabi_d2f>
   b42ee:	4b7b      	ldr	r3, [pc, #492]	; (b44dc <_Z12plumePublishv+0x334>)
  v2 = random(3000, 4700) / 1000.0;
   b42f0:	f241 215c 	movw	r1, #4700	; 0x125c
  v1 = random(3000, 4700) / 1000.0;
   b42f4:	6018      	str	r0, [r3, #0]
  v2 = random(3000, 4700) / 1000.0;
   b42f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b42fa:	f003 fd24 	bl	b7d46 <_Z6randomii>
   b42fe:	f005 fc87 	bl	b9c10 <__aeabi_i2d>
   b4302:	2200      	movs	r2, #0
   b4304:	4b6e      	ldr	r3, [pc, #440]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4306:	f005 fe17 	bl	b9f38 <__aeabi_ddiv>
   b430a:	f005 ffa5 	bl	ba258 <__aeabi_d2f>
   b430e:	4b74      	ldr	r3, [pc, #464]	; (b44e0 <_Z12plumePublishv+0x338>)
  v3 = random(3000, 4700) / 1000.0;
   b4310:	f241 215c 	movw	r1, #4700	; 0x125c
  v2 = random(3000, 4700) / 1000.0;
   b4314:	6018      	str	r0, [r3, #0]
  v3 = random(3000, 4700) / 1000.0;
   b4316:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b431a:	f003 fd14 	bl	b7d46 <_Z6randomii>
   b431e:	f005 fc77 	bl	b9c10 <__aeabi_i2d>
   b4322:	2200      	movs	r2, #0
   b4324:	4b66      	ldr	r3, [pc, #408]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4326:	f005 fe07 	bl	b9f38 <__aeabi_ddiv>
   b432a:	f005 ff95 	bl	ba258 <__aeabi_d2f>
   b432e:	4b6d      	ldr	r3, [pc, #436]	; (b44e4 <_Z12plumePublishv+0x33c>)
  v4 = random(3000, 4700) / 1000.0;
   b4330:	f241 215c 	movw	r1, #4700	; 0x125c
  v3 = random(3000, 4700) / 1000.0;
   b4334:	6018      	str	r0, [r3, #0]
  v4 = random(3000, 4700) / 1000.0;
   b4336:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b433a:	f003 fd04 	bl	b7d46 <_Z6randomii>
   b433e:	f005 fc67 	bl	b9c10 <__aeabi_i2d>
   b4342:	2200      	movs	r2, #0
   b4344:	4b5e      	ldr	r3, [pc, #376]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4346:	f005 fdf7 	bl	b9f38 <__aeabi_ddiv>
   b434a:	f005 ff85 	bl	ba258 <__aeabi_d2f>
   b434e:	4b66      	ldr	r3, [pc, #408]	; (b44e8 <_Z12plumePublishv+0x340>)
  v5 = random(3000, 4700) / 1000.0;
   b4350:	f241 215c 	movw	r1, #4700	; 0x125c
  v4 = random(3000, 4700) / 1000.0;
   b4354:	6018      	str	r0, [r3, #0]
  v5 = random(3000, 4700) / 1000.0;
   b4356:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b435a:	f003 fcf4 	bl	b7d46 <_Z6randomii>
   b435e:	f005 fc57 	bl	b9c10 <__aeabi_i2d>
   b4362:	2200      	movs	r2, #0
   b4364:	4b56      	ldr	r3, [pc, #344]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4366:	f005 fde7 	bl	b9f38 <__aeabi_ddiv>
   b436a:	f005 ff75 	bl	ba258 <__aeabi_d2f>
   b436e:	4b5f      	ldr	r3, [pc, #380]	; (b44ec <_Z12plumePublishv+0x344>)
  v6 = random(3000, 4700) / 1000.0;
   b4370:	f241 215c 	movw	r1, #4700	; 0x125c
  v5 = random(3000, 4700) / 1000.0;
   b4374:	6018      	str	r0, [r3, #0]
  v6 = random(3000, 4700) / 1000.0;
   b4376:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b437a:	f003 fce4 	bl	b7d46 <_Z6randomii>
   b437e:	f005 fc47 	bl	b9c10 <__aeabi_i2d>
   b4382:	2200      	movs	r2, #0
   b4384:	4b4e      	ldr	r3, [pc, #312]	; (b44c0 <_Z12plumePublishv+0x318>)
   b4386:	f005 fdd7 	bl	b9f38 <__aeabi_ddiv>
   b438a:	f005 ff65 	bl	ba258 <__aeabi_d2f>
   b438e:	4b58      	ldr	r3, [pc, #352]	; (b44f0 <_Z12plumePublishv+0x348>)
  v7 = random(3000, 4700) / 1000.0;
   b4390:	f241 215c 	movw	r1, #4700	; 0x125c
  v6 = random(3000, 4700) / 1000.0;
   b4394:	6018      	str	r0, [r3, #0]
  v7 = random(3000, 4700) / 1000.0;
   b4396:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b439a:	f003 fcd4 	bl	b7d46 <_Z6randomii>
   b439e:	f005 fc37 	bl	b9c10 <__aeabi_i2d>
   b43a2:	4b47      	ldr	r3, [pc, #284]	; (b44c0 <_Z12plumePublishv+0x318>)
   b43a4:	2200      	movs	r2, #0
   b43a6:	f005 fdc7 	bl	b9f38 <__aeabi_ddiv>
   b43aa:	f005 ff55 	bl	ba258 <__aeabi_d2f>
   b43ae:	4b51      	ldr	r3, [pc, #324]	; (b44f4 <_Z12plumePublishv+0x34c>)
   b43b0:	6018      	str	r0, [r3, #0]
  plume.loop();
   b43b2:	4838      	ldr	r0, [pc, #224]	; (b4494 <_Z12plumePublishv+0x2ec>)
   b43b4:	f002 fcfc 	bl	b6db0 <_ZN12PubSubClient4loopEv>
  if (x1)
   b43b8:	f89a 3000 	ldrb.w	r3, [sl]
   b43bc:	b1c3      	cbz	r3, b43f0 <_Z12plumePublishv+0x248>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f, \"v1\":%.2f}", t1, v1);
   b43be:	4b47      	ldr	r3, [pc, #284]	; (b44dc <_Z12plumePublishv+0x334>)
   b43c0:	6818      	ldr	r0, [r3, #0]
   b43c2:	f005 fc37 	bl	b9c34 <__aeabi_f2d>
   b43c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b43ca:	4b3e      	ldr	r3, [pc, #248]	; (b44c4 <_Z12plumePublishv+0x31c>)
   b43cc:	6818      	ldr	r0, [r3, #0]
   b43ce:	f005 fc31 	bl	b9c34 <__aeabi_f2d>
   b43d2:	4a49      	ldr	r2, [pc, #292]	; (b44f8 <_Z12plumePublishv+0x350>)
   b43d4:	e9cd 0100 	strd	r0, r1, [sp]
   b43d8:	2180      	movs	r1, #128	; 0x80
   b43da:	4835      	ldr	r0, [pc, #212]	; (b44b0 <_Z12plumePublishv+0x308>)
   b43dc:	f003 f8e2 	bl	b75a4 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b43e0:	4a33      	ldr	r2, [pc, #204]	; (b44b0 <_Z12plumePublishv+0x308>)
   b43e2:	4934      	ldr	r1, [pc, #208]	; (b44b4 <_Z12plumePublishv+0x30c>)
   b43e4:	482b      	ldr	r0, [pc, #172]	; (b4494 <_Z12plumePublishv+0x2ec>)
   b43e6:	f002 fdc7 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
    x1 = false;
   b43ea:	2300      	movs	r3, #0
   b43ec:	f88a 3000 	strb.w	r3, [sl]
  if (x2)
   b43f0:	f899 3000 	ldrb.w	r3, [r9]
   b43f4:	b1c3      	cbz	r3, b4428 <_Z12plumePublishv+0x280>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t2\":%.2f,\"v2\":%.2f}", t2, v2);
   b43f6:	4b3a      	ldr	r3, [pc, #232]	; (b44e0 <_Z12plumePublishv+0x338>)
   b43f8:	6818      	ldr	r0, [r3, #0]
   b43fa:	f005 fc1b 	bl	b9c34 <__aeabi_f2d>
   b43fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4402:	4b31      	ldr	r3, [pc, #196]	; (b44c8 <_Z12plumePublishv+0x320>)
   b4404:	6818      	ldr	r0, [r3, #0]
   b4406:	f005 fc15 	bl	b9c34 <__aeabi_f2d>
   b440a:	4a3c      	ldr	r2, [pc, #240]	; (b44fc <_Z12plumePublishv+0x354>)
   b440c:	e9cd 0100 	strd	r0, r1, [sp]
   b4410:	2180      	movs	r1, #128	; 0x80
   b4412:	4827      	ldr	r0, [pc, #156]	; (b44b0 <_Z12plumePublishv+0x308>)
   b4414:	f003 f8c6 	bl	b75a4 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4418:	4a25      	ldr	r2, [pc, #148]	; (b44b0 <_Z12plumePublishv+0x308>)
   b441a:	4926      	ldr	r1, [pc, #152]	; (b44b4 <_Z12plumePublishv+0x30c>)
   b441c:	481d      	ldr	r0, [pc, #116]	; (b4494 <_Z12plumePublishv+0x2ec>)
   b441e:	f002 fdab 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
    x2 = false;
   b4422:	2300      	movs	r3, #0
   b4424:	f889 3000 	strb.w	r3, [r9]
  if (x3)
   b4428:	f898 3000 	ldrb.w	r3, [r8]
   b442c:	b1c3      	cbz	r3, b4460 <_Z12plumePublishv+0x2b8>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t3\":%.2f,\"v3\":%.2f}", t3, v3);
   b442e:	4b2d      	ldr	r3, [pc, #180]	; (b44e4 <_Z12plumePublishv+0x33c>)
   b4430:	6818      	ldr	r0, [r3, #0]
   b4432:	f005 fbff 	bl	b9c34 <__aeabi_f2d>
   b4436:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b443a:	4b24      	ldr	r3, [pc, #144]	; (b44cc <_Z12plumePublishv+0x324>)
   b443c:	6818      	ldr	r0, [r3, #0]
   b443e:	f005 fbf9 	bl	b9c34 <__aeabi_f2d>
   b4442:	4a2f      	ldr	r2, [pc, #188]	; (b4500 <_Z12plumePublishv+0x358>)
   b4444:	e9cd 0100 	strd	r0, r1, [sp]
   b4448:	2180      	movs	r1, #128	; 0x80
   b444a:	4819      	ldr	r0, [pc, #100]	; (b44b0 <_Z12plumePublishv+0x308>)
   b444c:	f003 f8aa 	bl	b75a4 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4450:	4a17      	ldr	r2, [pc, #92]	; (b44b0 <_Z12plumePublishv+0x308>)
   b4452:	4918      	ldr	r1, [pc, #96]	; (b44b4 <_Z12plumePublishv+0x30c>)
   b4454:	480f      	ldr	r0, [pc, #60]	; (b4494 <_Z12plumePublishv+0x2ec>)
   b4456:	f002 fd8f 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
    x3 = false;
   b445a:	2300      	movs	r3, #0
   b445c:	f888 3000 	strb.w	r3, [r8]
  if (x4)
   b4460:	783b      	ldrb	r3, [r7, #0]
   b4462:	2b00      	cmp	r3, #0
   b4464:	d05a      	beq.n	b451c <_Z12plumePublishv+0x374>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t4\":%.2f,\"v4\":%.2f}", t4, v4);
   b4466:	4b20      	ldr	r3, [pc, #128]	; (b44e8 <_Z12plumePublishv+0x340>)
   b4468:	6818      	ldr	r0, [r3, #0]
   b446a:	f005 fbe3 	bl	b9c34 <__aeabi_f2d>
   b446e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4472:	4b17      	ldr	r3, [pc, #92]	; (b44d0 <_Z12plumePublishv+0x328>)
   b4474:	6818      	ldr	r0, [r3, #0]
   b4476:	f005 fbdd 	bl	b9c34 <__aeabi_f2d>
   b447a:	4a22      	ldr	r2, [pc, #136]	; (b4504 <_Z12plumePublishv+0x35c>)
   b447c:	e9cd 0100 	strd	r0, r1, [sp]
   b4480:	2180      	movs	r1, #128	; 0x80
   b4482:	480b      	ldr	r0, [pc, #44]	; (b44b0 <_Z12plumePublishv+0x308>)
   b4484:	f003 f88e 	bl	b75a4 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4488:	4a09      	ldr	r2, [pc, #36]	; (b44b0 <_Z12plumePublishv+0x308>)
   b448a:	490a      	ldr	r1, [pc, #40]	; (b44b4 <_Z12plumePublishv+0x30c>)
   b448c:	4801      	ldr	r0, [pc, #4]	; (b4494 <_Z12plumePublishv+0x2ec>)
   b448e:	f002 fd73 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
   b4492:	e041      	b.n	b4518 <_Z12plumePublishv+0x370>
   b4494:	2003e2f0 	.word	0x2003e2f0
   b4498:	2003e40c 	.word	0x2003e40c
   b449c:	000bc637 	.word	0x000bc637
   b44a0:	2003e4d7 	.word	0x2003e4d7
   b44a4:	2003e4d8 	.word	0x2003e4d8
   b44a8:	2003e4d9 	.word	0x2003e4d9
   b44ac:	2003e3e0 	.word	0x2003e3e0
   b44b0:	2003e21c 	.word	0x2003e21c
   b44b4:	000bc656 	.word	0x000bc656
   b44b8:	00029810 	.word	0x00029810
   b44bc:	00011170 	.word	0x00011170
   b44c0:	408f4000 	.word	0x408f4000
   b44c4:	2003e3d0 	.word	0x2003e3d0
   b44c8:	2003e3d4 	.word	0x2003e3d4
   b44cc:	2003e3d8 	.word	0x2003e3d8
   b44d0:	2003e3dc 	.word	0x2003e3dc
   b44d4:	2003e3e4 	.word	0x2003e3e4
   b44d8:	2003e3e8 	.word	0x2003e3e8
   b44dc:	2003e498 	.word	0x2003e498
   b44e0:	2003e49c 	.word	0x2003e49c
   b44e4:	2003e4a0 	.word	0x2003e4a0
   b44e8:	2003e4a4 	.word	0x2003e4a4
   b44ec:	2003e4a8 	.word	0x2003e4a8
   b44f0:	2003e4ac 	.word	0x2003e4ac
   b44f4:	2003e4b0 	.word	0x2003e4b0
   b44f8:	000bc66e 	.word	0x000bc66e
   b44fc:	000bc685 	.word	0x000bc685
   b4500:	000bc69b 	.word	0x000bc69b
   b4504:	000bc6b1 	.word	0x000bc6b1
   b4508:	2003e4d4 	.word	0x2003e4d4
   b450c:	2003e4d5 	.word	0x2003e4d5
   b4510:	2003e4d6 	.word	0x2003e4d6
   b4514:	2003e4da 	.word	0x2003e4da
    x4 = false;
   b4518:	2300      	movs	r3, #0
   b451a:	703b      	strb	r3, [r7, #0]
  if (x5)
   b451c:	782b      	ldrb	r3, [r5, #0]
   b451e:	b37b      	cbz	r3, b4580 <_Z12plumePublishv+0x3d8>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t5\":%.2f,\"v5\":%.2f}", t5, v5);
   b4520:	f8df 8100 	ldr.w	r8, [pc, #256]	; b4624 <_Z12plumePublishv+0x47c>
   b4524:	f8d8 0000 	ldr.w	r0, [r8]
   b4528:	f005 fb84 	bl	b9c34 <__aeabi_f2d>
   b452c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4530:	6830      	ldr	r0, [r6, #0]
   b4532:	f005 fb7f 	bl	b9c34 <__aeabi_f2d>
   b4536:	4a30      	ldr	r2, [pc, #192]	; (b45f8 <_Z12plumePublishv+0x450>)
   b4538:	e9cd 0100 	strd	r0, r1, [sp]
   b453c:	2180      	movs	r1, #128	; 0x80
   b453e:	482f      	ldr	r0, [pc, #188]	; (b45fc <_Z12plumePublishv+0x454>)
   b4540:	f003 f830 	bl	b75a4 <snprintf>
    if(plume.publish("v1/devices/me/telemetry", mqttBuf)){
   b4544:	4a2d      	ldr	r2, [pc, #180]	; (b45fc <_Z12plumePublishv+0x454>)
   b4546:	492e      	ldr	r1, [pc, #184]	; (b4600 <_Z12plumePublishv+0x458>)
   b4548:	482e      	ldr	r0, [pc, #184]	; (b4604 <_Z12plumePublishv+0x45c>)
   b454a:	f002 fd15 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
   b454e:	b1a8      	cbz	r0, b457c <_Z12plumePublishv+0x3d4>
      Serial.printf("x5 plume.publish t5: %f v5 %f\n",t5,v5);
   b4550:	f003 fd62 	bl	b8018 <_Z16_fetch_usbserialv>
   b4554:	4607      	mov	r7, r0
   b4556:	6830      	ldr	r0, [r6, #0]
   b4558:	f005 fb6c 	bl	b9c34 <__aeabi_f2d>
   b455c:	4602      	mov	r2, r0
   b455e:	460b      	mov	r3, r1
   b4560:	f8d8 0000 	ldr.w	r0, [r8]
   b4564:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b4568:	f005 fb64 	bl	b9c34 <__aeabi_f2d>
   b456c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4570:	e9cd 0100 	strd	r0, r1, [sp]
   b4574:	4924      	ldr	r1, [pc, #144]	; (b4608 <_Z12plumePublishv+0x460>)
   b4576:	4638      	mov	r0, r7
   b4578:	f7ff fdd4 	bl	b4124 <_ZN5Print6printfEPKcz>
    x5 = false;
   b457c:	2300      	movs	r3, #0
   b457e:	702b      	strb	r3, [r5, #0]
  if (x6)
   b4580:	7823      	ldrb	r3, [r4, #0]
   b4582:	b1bb      	cbz	r3, b45b4 <_Z12plumePublishv+0x40c>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t6\":%.2f,\"v6\":%.2f}", t6, v6);
   b4584:	4b21      	ldr	r3, [pc, #132]	; (b460c <_Z12plumePublishv+0x464>)
   b4586:	6818      	ldr	r0, [r3, #0]
   b4588:	f005 fb54 	bl	b9c34 <__aeabi_f2d>
   b458c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4590:	4b1f      	ldr	r3, [pc, #124]	; (b4610 <_Z12plumePublishv+0x468>)
   b4592:	6818      	ldr	r0, [r3, #0]
   b4594:	f005 fb4e 	bl	b9c34 <__aeabi_f2d>
   b4598:	4a1e      	ldr	r2, [pc, #120]	; (b4614 <_Z12plumePublishv+0x46c>)
   b459a:	e9cd 0100 	strd	r0, r1, [sp]
   b459e:	2180      	movs	r1, #128	; 0x80
   b45a0:	4816      	ldr	r0, [pc, #88]	; (b45fc <_Z12plumePublishv+0x454>)
   b45a2:	f002 ffff 	bl	b75a4 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b45a6:	4a15      	ldr	r2, [pc, #84]	; (b45fc <_Z12plumePublishv+0x454>)
   b45a8:	4915      	ldr	r1, [pc, #84]	; (b4600 <_Z12plumePublishv+0x458>)
   b45aa:	4816      	ldr	r0, [pc, #88]	; (b4604 <_Z12plumePublishv+0x45c>)
   b45ac:	f002 fce4 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
    x6 = false;
   b45b0:	2300      	movs	r3, #0
   b45b2:	7023      	strb	r3, [r4, #0]
  if (x7)
   b45b4:	f89b 3000 	ldrb.w	r3, [fp]
   b45b8:	b1c3      	cbz	r3, b45ec <_Z12plumePublishv+0x444>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t7\":%.2f,\"v7\":%.2f}", t7, v7);
   b45ba:	4b17      	ldr	r3, [pc, #92]	; (b4618 <_Z12plumePublishv+0x470>)
   b45bc:	6818      	ldr	r0, [r3, #0]
   b45be:	f005 fb39 	bl	b9c34 <__aeabi_f2d>
   b45c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b45c6:	4b15      	ldr	r3, [pc, #84]	; (b461c <_Z12plumePublishv+0x474>)
   b45c8:	6818      	ldr	r0, [r3, #0]
   b45ca:	f005 fb33 	bl	b9c34 <__aeabi_f2d>
   b45ce:	4a14      	ldr	r2, [pc, #80]	; (b4620 <_Z12plumePublishv+0x478>)
   b45d0:	e9cd 0100 	strd	r0, r1, [sp]
   b45d4:	2180      	movs	r1, #128	; 0x80
   b45d6:	4809      	ldr	r0, [pc, #36]	; (b45fc <_Z12plumePublishv+0x454>)
   b45d8:	f002 ffe4 	bl	b75a4 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b45dc:	4a07      	ldr	r2, [pc, #28]	; (b45fc <_Z12plumePublishv+0x454>)
   b45de:	4908      	ldr	r1, [pc, #32]	; (b4600 <_Z12plumePublishv+0x458>)
   b45e0:	4808      	ldr	r0, [pc, #32]	; (b4604 <_Z12plumePublishv+0x45c>)
   b45e2:	f002 fcc9 	bl	b6f78 <_ZN12PubSubClient7publishEPKcS1_>
    x7 = false;
   b45e6:	2300      	movs	r3, #0
   b45e8:	f88b 3000 	strb.w	r3, [fp]
  plume.loop();
   b45ec:	4805      	ldr	r0, [pc, #20]	; (b4604 <_Z12plumePublishv+0x45c>)
}
   b45ee:	b007      	add	sp, #28
   b45f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  plume.loop();
   b45f4:	f002 bbdc 	b.w	b6db0 <_ZN12PubSubClient4loopEv>
   b45f8:	000bc6c7 	.word	0x000bc6c7
   b45fc:	2003e21c 	.word	0x2003e21c
   b4600:	000bc656 	.word	0x000bc656
   b4604:	2003e2f0 	.word	0x2003e2f0
   b4608:	000bc6dd 	.word	0x000bc6dd
   b460c:	2003e4ac 	.word	0x2003e4ac
   b4610:	2003e3e4 	.word	0x2003e3e4
   b4614:	000bc6fc 	.word	0x000bc6fc
   b4618:	2003e4b0 	.word	0x2003e4b0
   b461c:	2003e3e8 	.word	0x2003e3e8
   b4620:	000bc712 	.word	0x000bc712
   b4624:	2003e4a8 	.word	0x2003e4a8

000b4628 <_Z8goOnlinev>:

void goOnline()
{
   b4628:	b570      	push	{r4, r5, r6, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b462a:	f002 fe95 	bl	b7358 <spark_cloud_flag_connect>
  Particle.connect();
  Particle.syncTime();
   b462e:	f7ff fd40 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
        return hal_timer_millis(nullptr);
   b4632:	2000      	movs	r0, #0
   b4634:	f002 fe16 	bl	b7264 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4638:	4d1c      	ldr	r5, [pc, #112]	; (b46ac <_Z8goOnlinev+0x84>)
        return hal_timer_millis(nullptr);
   b463a:	4604      	mov	r4, r0
   b463c:	2600      	movs	r6, #0
   b463e:	2000      	movs	r0, #0
   b4640:	f002 fe10 	bl	b7264 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4644:	1b00      	subs	r0, r0, r4
   b4646:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b464a:	4285      	cmp	r5, r0
   b464c:	eb76 0301 	sbcs.w	r3, r6, r1
   b4650:	d305      	bcc.n	b465e <_Z8goOnlinev+0x36>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4652:	f002 fe89 	bl	b7368 <spark_cloud_flag_connected>
   b4656:	b910      	cbnz	r0, b465e <_Z8goOnlinev+0x36>
            spark_process();
   b4658:	f002 fe76 	bl	b7348 <spark_process>
        while (_while() && !_condition()) {
   b465c:	e7ef      	b.n	b463e <_Z8goOnlinev+0x16>
   b465e:	f002 fe83 	bl	b7368 <spark_cloud_flag_connected>
  // Serial.printf("Particle going online...\n");
  waitFor(Particle.connected, 240000);
  // Serial.printf("Particle online...\n");
  // Particle.publish("connected");
  // delay(1200);
  Particle.syncTime();
   b4662:	f7ff fd26 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
        return hal_timer_millis(nullptr);
   b4666:	2000      	movs	r0, #0
   b4668:	f002 fdfc 	bl	b7264 <hal_timer_millis>
        while (_while() && !_condition()) {
   b466c:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b4670:	4604      	mov	r4, r0
   b4672:	2000      	movs	r0, #0
   b4674:	f002 fdf6 	bl	b7264 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4678:	1b00      	subs	r0, r0, r4
   b467a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b467e:	42a8      	cmp	r0, r5
   b4680:	f171 0300 	sbcs.w	r3, r1, #0
   b4684:	d209      	bcs.n	b469a <_Z8goOnlinev+0x72>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4686:	2000      	movs	r0, #0
   b4688:	f002 fe8e 	bl	b73a8 <spark_sync_time_pending>
   b468c:	b128      	cbz	r0, b469a <_Z8goOnlinev+0x72>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b468e:	f002 fe6b 	bl	b7368 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4692:	b110      	cbz	r0, b469a <_Z8goOnlinev+0x72>
            spark_process();
   b4694:	f002 fe58 	bl	b7348 <spark_process>
        while (_while() && !_condition()) {
   b4698:	e7eb      	b.n	b4672 <_Z8goOnlinev+0x4a>
   b469a:	2000      	movs	r0, #0
   b469c:	f002 fe84 	bl	b73a8 <spark_sync_time_pending>
   b46a0:	b118      	cbz	r0, b46aa <_Z8goOnlinev+0x82>
  waitFor(Particle.syncTimeDone, 30000);
  // Serial.printf("Time synced...\n");
}
   b46a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46a6:	f002 be5f 	b.w	b7368 <spark_cloud_flag_connected>
   b46aa:	bd70      	pop	{r4, r5, r6, pc}
   b46ac:	0003a97f 	.word	0x0003a97f

000b46b0 <_Z12checkUpdatesv>:
  counter++;
  // System.sleep(config);
}

void checkUpdates()
{
   b46b0:	b573      	push	{r0, r1, r4, r5, r6, lr}

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   b46b2:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b46b4:	4622      	mov	r2, r4
   b46b6:	f10d 0107 	add.w	r1, sp, #7
   b46ba:	4620      	mov	r0, r4
        uint8_t value = 0;
   b46bc:	f88d 4007 	strb.w	r4, [sp, #7]
        system_get_flag(flag, &value, nullptr);
   b46c0:	f002 ff12 	bl	b74e8 <system_get_flag>
        return value;
   b46c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (System.updatesPending())
   b46c8:	b1cb      	cbz	r3, b46fe <_Z12checkUpdatesv+0x4e>
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b46ca:	2101      	movs	r1, #1
   b46cc:	4622      	mov	r2, r4
   b46ce:	4608      	mov	r0, r1
   b46d0:	f002 ff02 	bl	b74d8 <system_set_flag>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b46d4:	f002 fdb6 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
  {
    System.enableUpdates();
    unsigned int start = millis();
    while (millis() - start < 120000)
   b46d8:	4e0a      	ldr	r6, [pc, #40]	; (b4704 <_Z12checkUpdatesv+0x54>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b46da:	4d0b      	ldr	r5, [pc, #44]	; (b4708 <_Z12checkUpdatesv+0x58>)
   b46dc:	4604      	mov	r4, r0
   b46de:	f002 fdb1 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
   b46e2:	1b00      	subs	r0, r0, r4
   b46e4:	42b0      	cmp	r0, r6
   b46e6:	d805      	bhi.n	b46f4 <_Z12checkUpdatesv+0x44>
		return HAL_Timer_Get_Milli_Seconds();
   b46e8:	f002 fdac 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b46ec:	6028      	str	r0, [r5, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b46ee:	f002 fe2b 	bl	b7348 <spark_process>
    }
   b46f2:	e7f4      	b.n	b46de <_Z12checkUpdatesv+0x2e>
    {
      Particle.process();
    }
    System.reset();
  }
}
   b46f4:	b002      	add	sp, #8
   b46f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    System.reset();
   b46fa:	f004 baf7 	b.w	b8cec <_ZN11SystemClass5resetEv>
}
   b46fe:	b002      	add	sp, #8
   b4700:	bd70      	pop	{r4, r5, r6, pc}
   b4702:	bf00      	nop
   b4704:	0001d4bf 	.word	0x0001d4bf
   b4708:	2003e734 	.word	0x2003e734

000b470c <_Z10reyaxSetupv>:

void reyaxSetup()
{
   b470c:	b500      	push	{lr}
   b470e:	b093      	sub	sp, #76	; 0x4c
  String password = "BA4104032968BA1114299079021594AA";
   b4710:	4984      	ldr	r1, [pc, #528]	; (b4924 <_Z10reyaxSetupv+0x218>)
   b4712:	4668      	mov	r0, sp
   b4714:	f004 fa4d 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
  String reply;
   b4718:	4983      	ldr	r1, [pc, #524]	; (b4928 <_Z10reyaxSetupv+0x21c>)
   b471a:	a804      	add	r0, sp, #16
   b471c:	f004 fa49 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
  int addr = 23;
  int net = 6;
  byte buf[40];

  Serial1.printf("AT+CPIN=%s\r\n", password.c_str()); // correct
   b4720:	f004 fece 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4724:	9a00      	ldr	r2, [sp, #0]
   b4726:	4981      	ldr	r1, [pc, #516]	; (b492c <_Z10reyaxSetupv+0x220>)
   b4728:	f7ff fcfc 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b472c:	20c8      	movs	r0, #200	; 0xc8
   b472e:	f004 f8c7 	bl	b88c0 <delay>
  if (Serial1.available() > 0)
   b4732:	f004 fec5 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4736:	6803      	ldr	r3, [r0, #0]
   b4738:	691b      	ldr	r3, [r3, #16]
   b473a:	4798      	blx	r3
   b473c:	2800      	cmp	r0, #0
   b473e:	dd18      	ble.n	b4772 <_Z10reyaxSetupv+0x66>
  {
    Serial.printf("Awaiting Reply from password\n");
   b4740:	f003 fc6a 	bl	b8018 <_Z16_fetch_usbserialv>
   b4744:	497a      	ldr	r1, [pc, #488]	; (b4930 <_Z10reyaxSetupv+0x224>)
   b4746:	f7ff fced 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b474a:	f004 feb9 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b474e:	220a      	movs	r2, #10
   b4750:	4601      	mov	r1, r0
   b4752:	a808      	add	r0, sp, #32
   b4754:	f004 f92e 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b4758:	a908      	add	r1, sp, #32
   b475a:	a804      	add	r0, sp, #16
   b475c:	f004 fa5a 	bl	b8c14 <_ZN6StringaSEOS_>
   b4760:	a808      	add	r0, sp, #32
   b4762:	f004 f9db 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("Reply: %s\n", reply.c_str());
   b4766:	f003 fc57 	bl	b8018 <_Z16_fetch_usbserialv>
   b476a:	9a04      	ldr	r2, [sp, #16]
   b476c:	4971      	ldr	r1, [pc, #452]	; (b4934 <_Z10reyaxSetupv+0x228>)
   b476e:	f7ff fcd9 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+ADDRESS=%i\r\n", addr); // correct
   b4772:	f004 fea5 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4776:	4970      	ldr	r1, [pc, #448]	; (b4938 <_Z10reyaxSetupv+0x22c>)
   b4778:	2217      	movs	r2, #23
   b477a:	f7ff fcd3 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b477e:	20c8      	movs	r0, #200	; 0xc8
   b4780:	f004 f89e 	bl	b88c0 <delay>
  if (Serial1.available() > 0)
   b4784:	f004 fe9c 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4788:	6803      	ldr	r3, [r0, #0]
   b478a:	691b      	ldr	r3, [r3, #16]
   b478c:	4798      	blx	r3
   b478e:	2800      	cmp	r0, #0
   b4790:	dd18      	ble.n	b47c4 <_Z10reyaxSetupv+0xb8>
  {
    Serial.printf("Awaiting Reply from address\n");
   b4792:	f003 fc41 	bl	b8018 <_Z16_fetch_usbserialv>
   b4796:	4969      	ldr	r1, [pc, #420]	; (b493c <_Z10reyaxSetupv+0x230>)
   b4798:	f7ff fcc4 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b479c:	f004 fe90 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b47a0:	220a      	movs	r2, #10
   b47a2:	4601      	mov	r1, r0
   b47a4:	a808      	add	r0, sp, #32
   b47a6:	f004 f905 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b47aa:	a908      	add	r1, sp, #32
   b47ac:	a804      	add	r0, sp, #16
   b47ae:	f004 fa31 	bl	b8c14 <_ZN6StringaSEOS_>
   b47b2:	a808      	add	r0, sp, #32
   b47b4:	f004 f9b2 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("Reply address: %s\n", reply.c_str());
   b47b8:	f003 fc2e 	bl	b8018 <_Z16_fetch_usbserialv>
   b47bc:	9a04      	ldr	r2, [sp, #16]
   b47be:	4960      	ldr	r1, [pc, #384]	; (b4940 <_Z10reyaxSetupv+0x234>)
   b47c0:	f7ff fcb0 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+NETWORKID=%i\r\n", net); // correct
   b47c4:	f004 fe7c 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b47c8:	495e      	ldr	r1, [pc, #376]	; (b4944 <_Z10reyaxSetupv+0x238>)
   b47ca:	2206      	movs	r2, #6
   b47cc:	f7ff fcaa 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b47d0:	20c8      	movs	r0, #200	; 0xc8
   b47d2:	f004 f875 	bl	b88c0 <delay>
  if (Serial1.available() > 0)
   b47d6:	f004 fe73 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b47da:	6803      	ldr	r3, [r0, #0]
   b47dc:	691b      	ldr	r3, [r3, #16]
   b47de:	4798      	blx	r3
   b47e0:	2800      	cmp	r0, #0
   b47e2:	dd18      	ble.n	b4816 <_Z10reyaxSetupv+0x10a>
  {
    Serial.printf("Awaiting Reply from networkid\n");
   b47e4:	f003 fc18 	bl	b8018 <_Z16_fetch_usbserialv>
   b47e8:	4957      	ldr	r1, [pc, #348]	; (b4948 <_Z10reyaxSetupv+0x23c>)
   b47ea:	f7ff fc9b 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b47ee:	f004 fe67 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b47f2:	220a      	movs	r2, #10
   b47f4:	4601      	mov	r1, r0
   b47f6:	a808      	add	r0, sp, #32
   b47f8:	f004 f8dc 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b47fc:	a908      	add	r1, sp, #32
   b47fe:	a804      	add	r0, sp, #16
   b4800:	f004 fa08 	bl	b8c14 <_ZN6StringaSEOS_>
   b4804:	a808      	add	r0, sp, #32
   b4806:	f004 f989 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("Reply network: %s\n", reply.c_str());
   b480a:	f003 fc05 	bl	b8018 <_Z16_fetch_usbserialv>
   b480e:	9a04      	ldr	r2, [sp, #16]
   b4810:	494e      	ldr	r1, [pc, #312]	; (b494c <_Z10reyaxSetupv+0x240>)
   b4812:	f7ff fc87 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b4816:	f004 fe53 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b481a:	494d      	ldr	r1, [pc, #308]	; (b4950 <_Z10reyaxSetupv+0x244>)
   b481c:	f7ff fc82 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4820:	20c8      	movs	r0, #200	; 0xc8
   b4822:	f004 f84d 	bl	b88c0 <delay>
  if (Serial1.available() > 0)
   b4826:	f004 fe4b 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b482a:	6803      	ldr	r3, [r0, #0]
   b482c:	691b      	ldr	r3, [r3, #16]
   b482e:	4798      	blx	r3
   b4830:	2800      	cmp	r0, #0
   b4832:	dd18      	ble.n	b4866 <_Z10reyaxSetupv+0x15a>
  {
    Serial.printf("Awaiting Reply\n");
   b4834:	f003 fbf0 	bl	b8018 <_Z16_fetch_usbserialv>
   b4838:	4946      	ldr	r1, [pc, #280]	; (b4954 <_Z10reyaxSetupv+0x248>)
   b483a:	f7ff fc73 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b483e:	f004 fe3f 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4842:	220a      	movs	r2, #10
   b4844:	4601      	mov	r1, r0
   b4846:	a808      	add	r0, sp, #32
   b4848:	f004 f8b4 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b484c:	a908      	add	r1, sp, #32
   b484e:	a804      	add	r0, sp, #16
   b4850:	f004 f9e0 	bl	b8c14 <_ZN6StringaSEOS_>
   b4854:	a808      	add	r0, sp, #32
   b4856:	f004 f961 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("Reply get address: %s\n", reply.c_str());
   b485a:	f003 fbdd 	bl	b8018 <_Z16_fetch_usbserialv>
   b485e:	9a04      	ldr	r2, [sp, #16]
   b4860:	493d      	ldr	r1, [pc, #244]	; (b4958 <_Z10reyaxSetupv+0x24c>)
   b4862:	f7ff fc5f 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+NETWORKID?\r\n"); // correct
   b4866:	f004 fe2b 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b486a:	493c      	ldr	r1, [pc, #240]	; (b495c <_Z10reyaxSetupv+0x250>)
   b486c:	f7ff fc5a 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4870:	20c8      	movs	r0, #200	; 0xc8
   b4872:	f004 f825 	bl	b88c0 <delay>
  if (Serial1.available() > 0)
   b4876:	f004 fe23 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b487a:	6803      	ldr	r3, [r0, #0]
   b487c:	691b      	ldr	r3, [r3, #16]
   b487e:	4798      	blx	r3
   b4880:	2800      	cmp	r0, #0
   b4882:	dd18      	ble.n	b48b6 <_Z10reyaxSetupv+0x1aa>
  {
    Serial.printf("Awaiting Reply\n");
   b4884:	f003 fbc8 	bl	b8018 <_Z16_fetch_usbserialv>
   b4888:	4932      	ldr	r1, [pc, #200]	; (b4954 <_Z10reyaxSetupv+0x248>)
   b488a:	f7ff fc4b 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b488e:	f004 fe17 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4892:	220a      	movs	r2, #10
   b4894:	4601      	mov	r1, r0
   b4896:	a808      	add	r0, sp, #32
   b4898:	f004 f88c 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b489c:	a908      	add	r1, sp, #32
   b489e:	a804      	add	r0, sp, #16
   b48a0:	f004 f9b8 	bl	b8c14 <_ZN6StringaSEOS_>
   b48a4:	a808      	add	r0, sp, #32
   b48a6:	f004 f939 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("Reply get network: %s\n", reply.c_str());
   b48aa:	f003 fbb5 	bl	b8018 <_Z16_fetch_usbserialv>
   b48ae:	9a04      	ldr	r2, [sp, #16]
   b48b0:	492b      	ldr	r1, [pc, #172]	; (b4960 <_Z10reyaxSetupv+0x254>)
   b48b2:	f7ff fc37 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+CPIN?\r\n"); // correct
   b48b6:	f004 fe03 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b48ba:	492a      	ldr	r1, [pc, #168]	; (b4964 <_Z10reyaxSetupv+0x258>)
   b48bc:	f7ff fc32 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b48c0:	20c8      	movs	r0, #200	; 0xc8
   b48c2:	f003 fffd 	bl	b88c0 <delay>
  if (Serial1.available() > 0)
   b48c6:	f004 fdfb 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b48ca:	6803      	ldr	r3, [r0, #0]
   b48cc:	691b      	ldr	r3, [r3, #16]
   b48ce:	4798      	blx	r3
   b48d0:	2800      	cmp	r0, #0
   b48d2:	dd1e      	ble.n	b4912 <_Z10reyaxSetupv+0x206>
  {
    Serial.printf("Awaiting Reply\n");
   b48d4:	f003 fba0 	bl	b8018 <_Z16_fetch_usbserialv>
   b48d8:	491e      	ldr	r1, [pc, #120]	; (b4954 <_Z10reyaxSetupv+0x248>)
   b48da:	f7ff fc23 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b48de:	f004 fdef 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b48e2:	220a      	movs	r2, #10
   b48e4:	4601      	mov	r1, r0
   b48e6:	a808      	add	r0, sp, #32
   b48e8:	f004 f864 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b48ec:	a908      	add	r1, sp, #32
   b48ee:	a804      	add	r0, sp, #16
   b48f0:	f004 f990 	bl	b8c14 <_ZN6StringaSEOS_>
   b48f4:	a808      	add	r0, sp, #32
   b48f6:	f004 f911 	bl	b8b1c <_ZN6StringD1Ev>
    reply.getBytes(buf, 40);
   b48fa:	2228      	movs	r2, #40	; 0x28
   b48fc:	a908      	add	r1, sp, #32
   b48fe:	2300      	movs	r3, #0
   b4900:	a804      	add	r0, sp, #16
   b4902:	f004 f9b3 	bl	b8c6c <_ZNK6String8getBytesEPhjj>
    Serial.printf("Reply get password: %s\n", (char *)buf);
   b4906:	f003 fb87 	bl	b8018 <_Z16_fetch_usbserialv>
   b490a:	4917      	ldr	r1, [pc, #92]	; (b4968 <_Z10reyaxSetupv+0x25c>)
   b490c:	aa08      	add	r2, sp, #32
   b490e:	f7ff fc09 	bl	b4124 <_ZN5Print6printfEPKcz>
  String reply;
   b4912:	a804      	add	r0, sp, #16
   b4914:	f004 f902 	bl	b8b1c <_ZN6StringD1Ev>
  String password = "BA4104032968BA1114299079021594AA";
   b4918:	4668      	mov	r0, sp
   b491a:	f004 f8ff 	bl	b8b1c <_ZN6StringD1Ev>
  }
}
   b491e:	b013      	add	sp, #76	; 0x4c
   b4920:	f85d fb04 	ldr.w	pc, [sp], #4
   b4924:	000bc728 	.word	0x000bc728
   b4928:	000bcc8b 	.word	0x000bcc8b
   b492c:	000bc749 	.word	0x000bc749
   b4930:	000bc756 	.word	0x000bc756
   b4934:	000bc774 	.word	0x000bc774
   b4938:	000bc77f 	.word	0x000bc77f
   b493c:	000bc78f 	.word	0x000bc78f
   b4940:	000bc7ac 	.word	0x000bc7ac
   b4944:	000bc7bf 	.word	0x000bc7bf
   b4948:	000bc7d1 	.word	0x000bc7d1
   b494c:	000bc7f0 	.word	0x000bc7f0
   b4950:	000bc803 	.word	0x000bc803
   b4954:	000bc811 	.word	0x000bc811
   b4958:	000bc821 	.word	0x000bc821
   b495c:	000bc838 	.word	0x000bc838
   b4960:	000bc848 	.word	0x000bc848
   b4964:	000bc85f 	.word	0x000bc85f
   b4968:	000bc86a 	.word	0x000bc86a

000b496c <setup>:
{
   b496c:	b530      	push	{r4, r5, lr}
  RGB.brightness(255);
   b496e:	2101      	movs	r1, #1
{
   b4970:	b085      	sub	sp, #20
  RGB.brightness(255);
   b4972:	20ff      	movs	r0, #255	; 0xff
   b4974:	f003 ff8f 	bl	b8896 <_ZN8RGBClass10brightnessEhb>
  Serial.begin(9600);
   b4978:	f003 fb4e 	bl	b8018 <_Z16_fetch_usbserialv>
   b497c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4980:	f003 fb3e 	bl	b8000 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   b4984:	f004 fd9c 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4988:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b498c:	f003 fa96 	bl	b7ebc <_ZN11USARTSerial5beginEm>
  delay(3000);
   b4990:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4994:	f003 ff94 	bl	b88c0 <delay>
  reyaxSetup();
   b4998:	f7ff feb8 	bl	b470c <_Z10reyaxSetupv>
  pinMode(D7, OUTPUT);
   b499c:	2101      	movs	r1, #1
   b499e:	2007      	movs	r0, #7
   b49a0:	f004 fdf0 	bl	b9584 <pinMode>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b49a4:	4b19      	ldr	r3, [pc, #100]	; (b4a0c <setup+0xa0>)
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(120000));
   b49a6:	a801      	add	r0, sp, #4
   b49a8:	2403      	movs	r4, #3
        bool clearSession) :
   b49aa:	2501      	movs	r5, #1
    timeout_ = timeout;
   b49ac:	e9cd 4301 	strd	r4, r3, [sp, #4]
        bool clearSession) :
   b49b0:	f8ad 500c 	strh.w	r5, [sp, #12]
   b49b4:	f003 fc39 	bl	b822a <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  goOnline();
   b49b8:	f7ff fe36 	bl	b4628 <_Z8goOnlinev>
  Particle.syncTime();
   b49bc:	f7ff fb79 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
  Particle.publishVitals();
   b49c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b49c4:	4812      	ldr	r0, [pc, #72]	; (b4a10 <setup+0xa4>)
   b49c6:	f003 fc2c 	bl	b8222 <_ZN10CloudClass13publishVitalsEm>
  plume.setServer(thingsboardServer, MQTTPORT);
   b49ca:	f240 725b 	movw	r2, #1883	; 0x75b
   b49ce:	4911      	ldr	r1, [pc, #68]	; (b4a14 <setup+0xa8>)
   b49d0:	4811      	ldr	r0, [pc, #68]	; (b4a18 <setup+0xac>)
   b49d2:	f002 fae2 	bl	b6f9a <_ZN12PubSubClient9setServerEPKct>
  plumeConnect();
   b49d6:	f7ff fbb3 	bl	b4140 <_Z12plumeConnectv>
  plumePublish();
   b49da:	f7ff fbe5 	bl	b41a8 <_Z12plumePublishv>
  delay(3000);
   b49de:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49e2:	f003 ff6d 	bl	b88c0 <delay>
  RGB.brightness(3);
   b49e6:	4629      	mov	r1, r5
   b49e8:	4620      	mov	r0, r4
   b49ea:	f003 ff54 	bl	b8896 <_ZN8RGBClass10brightnessEhb>
   b49ee:	f002 fc29 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
  lastSend = millis();
   b49f2:	4b0a      	ldr	r3, [pc, #40]	; (b4a1c <setup+0xb0>)
  counter = 0;
   b49f4:	4a0a      	ldr	r2, [pc, #40]	; (b4a20 <setup+0xb4>)
  lastSend = millis();
   b49f6:	6018      	str	r0, [r3, #0]
  counter = 0;
   b49f8:	2300      	movs	r3, #0
   b49fa:	6013      	str	r3, [r2, #0]
  dataSent = false;
   b49fc:	4a09      	ldr	r2, [pc, #36]	; (b4a24 <setup+0xb8>)
   b49fe:	7013      	strb	r3, [r2, #0]
   b4a00:	f002 fc20 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
  lastTime = millis();
   b4a04:	4b08      	ldr	r3, [pc, #32]	; (b4a28 <setup+0xbc>)
   b4a06:	6018      	str	r0, [r3, #0]
}
   b4a08:	b005      	add	sp, #20
   b4a0a:	bd30      	pop	{r4, r5, pc}
   b4a0c:	0001d4c0 	.word	0x0001d4c0
   b4a10:	2003e730 	.word	0x2003e730
   b4a14:	2003dfa8 	.word	0x2003dfa8
   b4a18:	2003e2f0 	.word	0x2003e2f0
   b4a1c:	2003e214 	.word	0x2003e214
   b4a20:	2003e1d0 	.word	0x2003e1d0
   b4a24:	2003e1d4 	.word	0x2003e1d4
   b4a28:	2003e218 	.word	0x2003e218

000b4a2c <_Z10reyaxResetv>:

void reyaxReset()
{
   b4a2c:	b500      	push	{lr}
   b4a2e:	b089      	sub	sp, #36	; 0x24
  String reply;
   b4a30:	491a      	ldr	r1, [pc, #104]	; (b4a9c <_Z10reyaxResetv+0x70>)
   b4a32:	4668      	mov	r0, sp
   b4a34:	f004 f8bd 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+RESET\r\n");
   b4a38:	f004 fd42 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4a3c:	4918      	ldr	r1, [pc, #96]	; (b4aa0 <_Z10reyaxResetv+0x74>)
   b4a3e:	f7ff fb71 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(10000);
   b4a42:	f242 7010 	movw	r0, #10000	; 0x2710
   b4a46:	f003 ff3b 	bl	b88c0 <delay>
  if (Serial1.available() > 0)
   b4a4a:	f004 fd39 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4a4e:	6803      	ldr	r3, [r0, #0]
   b4a50:	691b      	ldr	r3, [r3, #16]
   b4a52:	4798      	blx	r3
   b4a54:	2800      	cmp	r0, #0
   b4a56:	dd18      	ble.n	b4a8a <_Z10reyaxResetv+0x5e>
  {
    Serial.printf("Awaiting Reply from address\n");
   b4a58:	f003 fade 	bl	b8018 <_Z16_fetch_usbserialv>
   b4a5c:	4911      	ldr	r1, [pc, #68]	; (b4aa4 <_Z10reyaxResetv+0x78>)
   b4a5e:	f7ff fb61 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4a62:	f004 fd2d 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4a66:	220a      	movs	r2, #10
   b4a68:	4601      	mov	r1, r0
   b4a6a:	a804      	add	r0, sp, #16
   b4a6c:	f003 ffa2 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b4a70:	a904      	add	r1, sp, #16
   b4a72:	4668      	mov	r0, sp
   b4a74:	f004 f8ce 	bl	b8c14 <_ZN6StringaSEOS_>
   b4a78:	a804      	add	r0, sp, #16
   b4a7a:	f004 f84f 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("Reply address: %s\n", reply.c_str());
   b4a7e:	f003 facb 	bl	b8018 <_Z16_fetch_usbserialv>
   b4a82:	9a00      	ldr	r2, [sp, #0]
   b4a84:	4908      	ldr	r1, [pc, #32]	; (b4aa8 <_Z10reyaxResetv+0x7c>)
   b4a86:	f7ff fb4d 	bl	b4124 <_ZN5Print6printfEPKcz>
  }
  System.reset();
   b4a8a:	f004 f92f 	bl	b8cec <_ZN11SystemClass5resetEv>
  String reply;
   b4a8e:	4668      	mov	r0, sp
   b4a90:	f004 f844 	bl	b8b1c <_ZN6StringD1Ev>
}
   b4a94:	b009      	add	sp, #36	; 0x24
   b4a96:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a9a:	bf00      	nop
   b4a9c:	000bcc8b 	.word	0x000bcc8b
   b4aa0:	000bc882 	.word	0x000bc882
   b4aa4:	000bc78f 	.word	0x000bc78f
   b4aa8:	000bc7ac 	.word	0x000bc7ac

000b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4aac:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4aae:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4ab0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4ab2:	b17c      	cbz	r4, b4ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4ab4:	6863      	ldr	r3, [r4, #4]
   b4ab6:	3b01      	subs	r3, #1
   b4ab8:	6063      	str	r3, [r4, #4]
   b4aba:	b95b      	cbnz	r3, b4ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4abc:	6823      	ldr	r3, [r4, #0]
   b4abe:	4620      	mov	r0, r4
   b4ac0:	689b      	ldr	r3, [r3, #8]
   b4ac2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ac4:	68a3      	ldr	r3, [r4, #8]
   b4ac6:	3b01      	subs	r3, #1
   b4ac8:	60a3      	str	r3, [r4, #8]
   b4aca:	b91b      	cbnz	r3, b4ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4acc:	6823      	ldr	r3, [r4, #0]
   b4ace:	4620      	mov	r0, r4
   b4ad0:	68db      	ldr	r3, [r3, #12]
   b4ad2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4ad4:	4628      	mov	r0, r5
   b4ad6:	bd38      	pop	{r3, r4, r5, pc}

000b4ad8 <_Z8sendDatav>:
{
   b4ad8:	b530      	push	{r4, r5, lr}
   b4ada:	ed2d 8b02 	vpush	{d8}
   b4ade:	b085      	sub	sp, #20
  goOnline();
   b4ae0:	f7ff fda2 	bl	b4628 <_Z8goOnlinev>
  ubidots.add("counter", counter);
   b4ae4:	4c2b      	ldr	r4, [pc, #172]	; (b4b94 <_Z8sendDatav+0xbc>)
   b4ae6:	4d2c      	ldr	r5, [pc, #176]	; (b4b98 <_Z8sendDatav+0xc0>)
  delay(1200);
   b4ae8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4aec:	f003 fee8 	bl	b88c0 <delay>
  float batterySoc = System.batteryCharge();
   b4af0:	f7ff faea 	bl	b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  ubidots.add("counter", counter);
   b4af4:	edd4 7a00 	vldr	s15, [r4]
   b4af8:	4928      	ldr	r1, [pc, #160]	; (b4b9c <_Z8sendDatav+0xc4>)
   b4afa:	4829      	ldr	r0, [pc, #164]	; (b4ba0 <_Z8sendDatav+0xc8>)
  float batterySoc = System.batteryCharge();
   b4afc:	eeb0 8a40 	vmov.f32	s16, s0
  ubidots.add("counter", counter);
   b4b00:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b4b04:	f001 f941 	bl	b5d8a <_ZN7Ubidots3addEPcf>
  ubidots.add("homeBattery", batterySoc);
   b4b08:	4926      	ldr	r1, [pc, #152]	; (b4ba4 <_Z8sendDatav+0xcc>)
   b4b0a:	4825      	ldr	r0, [pc, #148]	; (b4ba0 <_Z8sendDatav+0xc8>)
   b4b0c:	eeb0 0a48 	vmov.f32	s0, s16
   b4b10:	f001 f93b 	bl	b5d8a <_ZN7Ubidots3addEPcf>
  bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC);
   b4b14:	4b24      	ldr	r3, [pc, #144]	; (b4ba8 <_Z8sendDatav+0xd0>)
   b4b16:	782a      	ldrb	r2, [r5, #0]
   b4b18:	6819      	ldr	r1, [r3, #0]
   b4b1a:	4821      	ldr	r0, [pc, #132]	; (b4ba0 <_Z8sendDatav+0xc8>)
   b4b1c:	f001 f93e 	bl	b5d9c <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
  if (bufferSent)
   b4b20:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4b22:	f88d 3000 	strb.w	r3, [sp]
   b4b26:	4602      	mov	r2, r0
   b4b28:	233c      	movs	r3, #60	; 0x3c
   b4b2a:	b330      	cbz	r0, b4b7a <_Z8sendDatav+0xa2>
   b4b2c:	2200      	movs	r2, #0
   b4b2e:	491f      	ldr	r1, [pc, #124]	; (b4bac <_Z8sendDatav+0xd4>)
   b4b30:	a802      	add	r0, sp, #8
   b4b32:	f003 fc8f 	bl	b8454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4b36:	a803      	add	r0, sp, #12
   b4b38:	f7ff ffb8 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1200);
   b4b3c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4b40:	f003 febe 	bl	b88c0 <delay>
    dataSent = true;
   b4b44:	4b1a      	ldr	r3, [pc, #104]	; (b4bb0 <_Z8sendDatav+0xd8>)
   b4b46:	2501      	movs	r5, #1
   b4b48:	701d      	strb	r5, [r3, #0]
    checkUpdates();
   b4b4a:	f7ff fdb1 	bl	b46b0 <_Z12checkUpdatesv>
    delay(1000);
   b4b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4b52:	f003 feb5 	bl	b88c0 <delay>
    RGB.brightness(3);
   b4b56:	4629      	mov	r1, r5
   b4b58:	2003      	movs	r0, #3
   b4b5a:	f003 fe9c 	bl	b8896 <_ZN8RGBClass10brightnessEhb>
    onlineNow = false;
   b4b5e:	4b15      	ldr	r3, [pc, #84]	; (b4bb4 <_Z8sendDatav+0xdc>)
   b4b60:	2200      	movs	r2, #0
   b4b62:	701a      	strb	r2, [r3, #0]
   b4b64:	f002 fb6e 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
    lastSend = millis();
   b4b68:	4b13      	ldr	r3, [pc, #76]	; (b4bb8 <_Z8sendDatav+0xe0>)
   b4b6a:	6018      	str	r0, [r3, #0]
  counter++;
   b4b6c:	6823      	ldr	r3, [r4, #0]
   b4b6e:	3301      	adds	r3, #1
   b4b70:	6023      	str	r3, [r4, #0]
}
   b4b72:	b005      	add	sp, #20
   b4b74:	ecbd 8b02 	vpop	{d8}
   b4b78:	bd30      	pop	{r4, r5, pc}
   b4b7a:	4910      	ldr	r1, [pc, #64]	; (b4bbc <_Z8sendDatav+0xe4>)
   b4b7c:	a802      	add	r0, sp, #8
   b4b7e:	f003 fc69 	bl	b8454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4b82:	a803      	add	r0, sp, #12
   b4b84:	f7ff ff92 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1200);
   b4b88:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4b8c:	f003 fe98 	bl	b88c0 <delay>
   b4b90:	e7ec      	b.n	b4b6c <_Z8sendDatav+0x94>
   b4b92:	bf00      	nop
   b4b94:	2003e1d0 	.word	0x2003e1d0
   b4b98:	2003e1b4 	.word	0x2003e1b4
   b4b9c:	000bc88d 	.word	0x000bc88d
   b4ba0:	2003e48c 	.word	0x2003e48c
   b4ba4:	000bc895 	.word	0x000bc895
   b4ba8:	2003e1a4 	.word	0x2003e1a4
   b4bac:	000bc8a1 	.word	0x000bc8a1
   b4bb0:	2003e1d4 	.word	0x2003e1d4
   b4bb4:	2003e29c 	.word	0x2003e29c
   b4bb8:	2003e214 	.word	0x2003e214
   b4bbc:	000bc8b6 	.word	0x000bc8b6

000b4bc0 <loop>:
{
   b4bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (onlineNow) ///////////////
   b4bc2:	4ca6      	ldr	r4, [pc, #664]	; (b4e5c <loop+0x29c>)
   b4bc4:	7823      	ldrb	r3, [r4, #0]
{
   b4bc6:	b087      	sub	sp, #28
  if (onlineNow) ///////////////
   b4bc8:	b113      	cbz	r3, b4bd0 <loop+0x10>
    plume.loop();
   b4bca:	48a5      	ldr	r0, [pc, #660]	; (b4e60 <loop+0x2a0>)
   b4bcc:	f002 f8f0 	bl	b6db0 <_ZN12PubSubClient4loopEv>
   b4bd0:	f002 fb38 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTime > 10000)
   b4bd4:	4ba3      	ldr	r3, [pc, #652]	; (b4e64 <loop+0x2a4>)
   b4bd6:	681b      	ldr	r3, [r3, #0]
   b4bd8:	1ac0      	subs	r0, r0, r3
   b4bda:	f242 7310 	movw	r3, #10000	; 0x2710
   b4bde:	4298      	cmp	r0, r3
   b4be0:	d92b      	bls.n	b4c3a <loop+0x7a>
    onOff = !onOff;
   b4be2:	4ba1      	ldr	r3, [pc, #644]	; (b4e68 <loop+0x2a8>)
   b4be4:	7819      	ldrb	r1, [r3, #0]
    digitalWrite(D7, onOff);
   b4be6:	2007      	movs	r0, #7
    onOff = !onOff;
   b4be8:	f081 0101 	eor.w	r1, r1, #1
   b4bec:	7019      	strb	r1, [r3, #0]
    onlineNow = true;
   b4bee:	2501      	movs	r5, #1
    digitalWrite(D7, onOff);
   b4bf0:	f004 fcd9 	bl	b95a6 <digitalWrite>
    RGB.brightness(3);
   b4bf4:	2101      	movs	r1, #1
   b4bf6:	2003      	movs	r0, #3
   b4bf8:	f003 fe4d 	bl	b8896 <_ZN8RGBClass10brightnessEhb>
    onlineNow = true;
   b4bfc:	7025      	strb	r5, [r4, #0]
    goOnline();
   b4bfe:	f7ff fd13 	bl	b4628 <_Z8goOnlinev>
    earlyBird = true; // we are early
   b4c02:	4c9a      	ldr	r4, [pc, #616]	; (b4e6c <loop+0x2ac>)
    Particle.syncTime();
   b4c04:	f7ff fa55 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
    Particle.publishVitals();
   b4c08:	4899      	ldr	r0, [pc, #612]	; (b4e70 <loop+0x2b0>)
   b4c0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4c0e:	f003 fb08 	bl	b8222 <_ZN10CloudClass13publishVitalsEm>
    if (!plume.connected())
   b4c12:	4893      	ldr	r0, [pc, #588]	; (b4e60 <loop+0x2a0>)
    earlyBird = true; // we are early
   b4c14:	7025      	strb	r5, [r4, #0]
    if (!plume.connected())
   b4c16:	f001 ffe2 	bl	b6bde <_ZN12PubSubClient9connectedEv>
   b4c1a:	b908      	cbnz	r0, b4c20 <loop+0x60>
      plumeConnect();
   b4c1c:	f7ff fa90 	bl	b4140 <_Z12plumeConnectv>
    sprintf(timeBuf, "%i000", Time.now());
   b4c20:	f003 fe7b 	bl	b891a <_ZN9TimeClass3nowEv>
   b4c24:	4993      	ldr	r1, [pc, #588]	; (b4e74 <loop+0x2b4>)
   b4c26:	4602      	mov	r2, r0
   b4c28:	4893      	ldr	r0, [pc, #588]	; (b4e78 <loop+0x2b8>)
   b4c2a:	f002 fcb3 	bl	b7594 <sprintf>
    plumePublish();
   b4c2e:	f7ff fabb 	bl	b41a8 <_Z12plumePublishv>
    sendData();
   b4c32:	f7ff ff51 	bl	b4ad8 <_Z8sendDatav>
    earlyBird = false; // we are too early
   b4c36:	2300      	movs	r3, #0
   b4c38:	7023      	strb	r3, [r4, #0]
  if (Serial1.available())
   b4c3a:	f004 fc41 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4c3e:	6803      	ldr	r3, [r0, #0]
   b4c40:	691b      	ldr	r3, [r3, #16]
   b4c42:	4798      	blx	r3
   b4c44:	2800      	cmp	r0, #0
   b4c46:	f000 80a4 	beq.w	b4d92 <loop+0x1d2>
    parse0 = Serial1.readStringUntil(',');
   b4c4a:	f004 fc39 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4c4e:	222c      	movs	r2, #44	; 0x2c
   b4c50:	4601      	mov	r1, r0
   b4c52:	a802      	add	r0, sp, #8
   b4c54:	f003 feae 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b4c58:	a902      	add	r1, sp, #8
   b4c5a:	4888      	ldr	r0, [pc, #544]	; (b4e7c <loop+0x2bc>)
    tempF = Serial1.readStringUntil(',').toFloat();
   b4c5c:	4d88      	ldr	r5, [pc, #544]	; (b4e80 <loop+0x2c0>)
    voltage = Serial1.readStringUntil(',').toFloat();
   b4c5e:	4c89      	ldr	r4, [pc, #548]	; (b4e84 <loop+0x2c4>)
    probeNumber = Serial1.readStringUntil('\n').toInt();
   b4c60:	4e89      	ldr	r6, [pc, #548]	; (b4e88 <loop+0x2c8>)
    incomingString = Serial1.readString();
   b4c62:	4f8a      	ldr	r7, [pc, #552]	; (b4e8c <loop+0x2cc>)
    parse0 = Serial1.readStringUntil(',');
   b4c64:	f003 ffd6 	bl	b8c14 <_ZN6StringaSEOS_>
   b4c68:	a802      	add	r0, sp, #8
   b4c6a:	f003 ff57 	bl	b8b1c <_ZN6StringD1Ev>
    parse1 = Serial1.readStringUntil(',');
   b4c6e:	f004 fc27 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4c72:	222c      	movs	r2, #44	; 0x2c
   b4c74:	4601      	mov	r1, r0
   b4c76:	a802      	add	r0, sp, #8
   b4c78:	f003 fe9c 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b4c7c:	a902      	add	r1, sp, #8
   b4c7e:	4884      	ldr	r0, [pc, #528]	; (b4e90 <loop+0x2d0>)
   b4c80:	f003 ffc8 	bl	b8c14 <_ZN6StringaSEOS_>
   b4c84:	a802      	add	r0, sp, #8
   b4c86:	f003 ff49 	bl	b8b1c <_ZN6StringD1Ev>
    tempF = Serial1.readStringUntil(',').toFloat();
   b4c8a:	f004 fc19 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4c8e:	222c      	movs	r2, #44	; 0x2c
   b4c90:	4601      	mov	r1, r0
   b4c92:	a802      	add	r0, sp, #8
   b4c94:	f003 fe8e 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b4c98:	a802      	add	r0, sp, #8
   b4c9a:	f004 f805 	bl	b8ca8 <_ZNK6String7toFloatEv>
   b4c9e:	a802      	add	r0, sp, #8
   b4ca0:	ed85 0a00 	vstr	s0, [r5]
   b4ca4:	f003 ff3a 	bl	b8b1c <_ZN6StringD1Ev>
    voltage = Serial1.readStringUntil(',').toFloat();
   b4ca8:	f004 fc0a 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4cac:	222c      	movs	r2, #44	; 0x2c
   b4cae:	4601      	mov	r1, r0
   b4cb0:	a802      	add	r0, sp, #8
   b4cb2:	f003 fe7f 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b4cb6:	a802      	add	r0, sp, #8
   b4cb8:	f003 fff6 	bl	b8ca8 <_ZNK6String7toFloatEv>
   b4cbc:	a802      	add	r0, sp, #8
   b4cbe:	ed84 0a00 	vstr	s0, [r4]
   b4cc2:	f003 ff2b 	bl	b8b1c <_ZN6StringD1Ev>
    probeNumber = Serial1.readStringUntil('\n').toInt();
   b4cc6:	f004 fbfb 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4cca:	220a      	movs	r2, #10
   b4ccc:	4601      	mov	r1, r0
   b4cce:	a802      	add	r0, sp, #8
   b4cd0:	f003 fe70 	bl	b89b4 <_ZN6Stream15readStringUntilEc>
   b4cd4:	a802      	add	r0, sp, #8
   b4cd6:	f003 ffe1 	bl	b8c9c <_ZNK6String5toIntEv>
   b4cda:	6030      	str	r0, [r6, #0]
   b4cdc:	a802      	add	r0, sp, #8
   b4cde:	f003 ff1d 	bl	b8b1c <_ZN6StringD1Ev>
    incomingString = Serial1.readString();
   b4ce2:	f004 fbed 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4ce6:	4601      	mov	r1, r0
   b4ce8:	a802      	add	r0, sp, #8
   b4cea:	f003 fe4f 	bl	b898c <_ZN6Stream10readStringEv>
   b4cee:	a902      	add	r1, sp, #8
   b4cf0:	4638      	mov	r0, r7
   b4cf2:	f003 ff8f 	bl	b8c14 <_ZN6StringaSEOS_>
   b4cf6:	a802      	add	r0, sp, #8
   b4cf8:	f003 ff10 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("incomingString: %s\n", incomingString.c_str());
   b4cfc:	f003 f98c 	bl	b8018 <_Z16_fetch_usbserialv>
   b4d00:	683a      	ldr	r2, [r7, #0]
   b4d02:	4964      	ldr	r1, [pc, #400]	; (b4e94 <loop+0x2d4>)
   b4d04:	f7ff fa0e 	bl	b4124 <_ZN5Print6printfEPKcz>
    Serial.printf("tempF: %.02f, probeNumber: %i\n", tempF, probeNumber);
   b4d08:	f003 f986 	bl	b8018 <_Z16_fetch_usbserialv>
   b4d0c:	4607      	mov	r7, r0
   b4d0e:	6828      	ldr	r0, [r5, #0]
   b4d10:	f004 ff90 	bl	b9c34 <__aeabi_f2d>
   b4d14:	460b      	mov	r3, r1
   b4d16:	6831      	ldr	r1, [r6, #0]
   b4d18:	9100      	str	r1, [sp, #0]
   b4d1a:	4602      	mov	r2, r0
   b4d1c:	495e      	ldr	r1, [pc, #376]	; (b4e98 <loop+0x2d8>)
   b4d1e:	4638      	mov	r0, r7
   b4d20:	f7ff fa00 	bl	b4124 <_ZN5Print6printfEPKcz>
    if (probeNumber == 1)
   b4d24:	6836      	ldr	r6, [r6, #0]
      ubidots.add("tempBlue", tempF);
   b4d26:	ed95 0a00 	vldr	s0, [r5]
    if (probeNumber == 1)
   b4d2a:	2e01      	cmp	r6, #1
   b4d2c:	d133      	bne.n	b4d96 <loop+0x1d6>
      ubidots.add("tempBlue", tempF);
   b4d2e:	495b      	ldr	r1, [pc, #364]	; (b4e9c <loop+0x2dc>)
   b4d30:	485b      	ldr	r0, [pc, #364]	; (b4ea0 <loop+0x2e0>)
   b4d32:	f001 f82a 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageBlue", voltage);
   b4d36:	495b      	ldr	r1, [pc, #364]	; (b4ea4 <loop+0x2e4>)
   b4d38:	ed94 0a00 	vldr	s0, [r4]
   b4d3c:	4858      	ldr	r0, [pc, #352]	; (b4ea0 <loop+0x2e0>)
   b4d3e:	f001 f824 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      tempBlue = tempF;
   b4d42:	4b59      	ldr	r3, [pc, #356]	; (b4ea8 <loop+0x2e8>)
   b4d44:	682a      	ldr	r2, [r5, #0]
      voltageBlue = voltage;
   b4d46:	4959      	ldr	r1, [pc, #356]	; (b4eac <loop+0x2ec>)
      tempBlue = tempF;
   b4d48:	601a      	str	r2, [r3, #0]
      voltageBlue = voltage;
   b4d4a:	6823      	ldr	r3, [r4, #0]
   b4d4c:	600b      	str	r3, [r1, #0]
      t1 = tempF;
   b4d4e:	4958      	ldr	r1, [pc, #352]	; (b4eb0 <loop+0x2f0>)
   b4d50:	600a      	str	r2, [r1, #0]
      v1 = voltage;
   b4d52:	4a58      	ldr	r2, [pc, #352]	; (b4eb4 <loop+0x2f4>)
   b4d54:	6013      	str	r3, [r2, #0]
      x1 = true;
   b4d56:	4b58      	ldr	r3, [pc, #352]	; (b4eb8 <loop+0x2f8>)
   b4d58:	701e      	strb	r6, [r3, #0]
    incomingString2 = Serial1.readString();
   b4d5a:	f004 fbb1 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b4d5e:	4c57      	ldr	r4, [pc, #348]	; (b4ebc <loop+0x2fc>)
   b4d60:	4601      	mov	r1, r0
   b4d62:	a802      	add	r0, sp, #8
   b4d64:	f003 fe12 	bl	b898c <_ZN6Stream10readStringEv>
   b4d68:	a902      	add	r1, sp, #8
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	f003 ff52 	bl	b8c14 <_ZN6StringaSEOS_>
   b4d70:	a802      	add	r0, sp, #8
   b4d72:	f003 fed3 	bl	b8b1c <_ZN6StringD1Ev>
    Serial.printf("incomingString2: %s\n", incomingString2.c_str());
   b4d76:	f003 f94f 	bl	b8018 <_Z16_fetch_usbserialv>
   b4d7a:	6822      	ldr	r2, [r4, #0]
   b4d7c:	4950      	ldr	r1, [pc, #320]	; (b4ec0 <loop+0x300>)
   b4d7e:	f7ff f9d1 	bl	b4124 <_ZN5Print6printfEPKcz>
    Serial.flush();
   b4d82:	f003 f949 	bl	b8018 <_Z16_fetch_usbserialv>
   b4d86:	6803      	ldr	r3, [r0, #0]
   b4d88:	69db      	ldr	r3, [r3, #28]
   b4d8a:	4798      	blx	r3
    dataSent = false;
   b4d8c:	4b4d      	ldr	r3, [pc, #308]	; (b4ec4 <loop+0x304>)
   b4d8e:	2200      	movs	r2, #0
   b4d90:	701a      	strb	r2, [r3, #0]
}
   b4d92:	b007      	add	sp, #28
   b4d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (probeNumber == 2)
   b4d96:	2e02      	cmp	r6, #2
   b4d98:	d117      	bne.n	b4dca <loop+0x20a>
      ubidots.add("tempGreen", tempF);
   b4d9a:	494b      	ldr	r1, [pc, #300]	; (b4ec8 <loop+0x308>)
   b4d9c:	4840      	ldr	r0, [pc, #256]	; (b4ea0 <loop+0x2e0>)
   b4d9e:	f000 fff4 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageGreen", voltage);
   b4da2:	494a      	ldr	r1, [pc, #296]	; (b4ecc <loop+0x30c>)
   b4da4:	ed94 0a00 	vldr	s0, [r4]
   b4da8:	483d      	ldr	r0, [pc, #244]	; (b4ea0 <loop+0x2e0>)
   b4daa:	f000 ffee 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      tempGreen = tempF;
   b4dae:	4b48      	ldr	r3, [pc, #288]	; (b4ed0 <loop+0x310>)
   b4db0:	682a      	ldr	r2, [r5, #0]
      voltageGreen = voltage;
   b4db2:	4948      	ldr	r1, [pc, #288]	; (b4ed4 <loop+0x314>)
      tempGreen = tempF;
   b4db4:	601a      	str	r2, [r3, #0]
      voltageGreen = voltage;
   b4db6:	6823      	ldr	r3, [r4, #0]
   b4db8:	600b      	str	r3, [r1, #0]
      t2 = tempF;
   b4dba:	4947      	ldr	r1, [pc, #284]	; (b4ed8 <loop+0x318>)
   b4dbc:	600a      	str	r2, [r1, #0]
      v2 = voltage;
   b4dbe:	4a47      	ldr	r2, [pc, #284]	; (b4edc <loop+0x31c>)
   b4dc0:	6013      	str	r3, [r2, #0]
      x2 = true;
   b4dc2:	4b47      	ldr	r3, [pc, #284]	; (b4ee0 <loop+0x320>)
      x3 = true;
   b4dc4:	2201      	movs	r2, #1
   b4dc6:	701a      	strb	r2, [r3, #0]
   b4dc8:	e7c7      	b.n	b4d5a <loop+0x19a>
    else if (probeNumber == 3)
   b4dca:	2e03      	cmp	r6, #3
   b4dcc:	d115      	bne.n	b4dfa <loop+0x23a>
      ubidots.add("tempOrange", tempF);
   b4dce:	4945      	ldr	r1, [pc, #276]	; (b4ee4 <loop+0x324>)
   b4dd0:	4833      	ldr	r0, [pc, #204]	; (b4ea0 <loop+0x2e0>)
   b4dd2:	f000 ffda 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageOrange", voltage);
   b4dd6:	4944      	ldr	r1, [pc, #272]	; (b4ee8 <loop+0x328>)
   b4dd8:	ed94 0a00 	vldr	s0, [r4]
   b4ddc:	4830      	ldr	r0, [pc, #192]	; (b4ea0 <loop+0x2e0>)
   b4dde:	f000 ffd4 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      tempOrange = tempF;
   b4de2:	4b42      	ldr	r3, [pc, #264]	; (b4eec <loop+0x32c>)
   b4de4:	682a      	ldr	r2, [r5, #0]
      voltageOrange = voltage;
   b4de6:	4942      	ldr	r1, [pc, #264]	; (b4ef0 <loop+0x330>)
      tempOrange = tempF;
   b4de8:	601a      	str	r2, [r3, #0]
      voltageOrange = voltage;
   b4dea:	6823      	ldr	r3, [r4, #0]
   b4dec:	600b      	str	r3, [r1, #0]
      t3 = tempF;
   b4dee:	4941      	ldr	r1, [pc, #260]	; (b4ef4 <loop+0x334>)
   b4df0:	600a      	str	r2, [r1, #0]
      v3 = voltage;
   b4df2:	4a41      	ldr	r2, [pc, #260]	; (b4ef8 <loop+0x338>)
   b4df4:	6013      	str	r3, [r2, #0]
      x3 = true;
   b4df6:	4b41      	ldr	r3, [pc, #260]	; (b4efc <loop+0x33c>)
   b4df8:	e7e4      	b.n	b4dc4 <loop+0x204>
    else if (probeNumber == 4)
   b4dfa:	2e04      	cmp	r6, #4
   b4dfc:	d115      	bne.n	b4e2a <loop+0x26a>
      ubidots.add("004", tempF);
   b4dfe:	4940      	ldr	r1, [pc, #256]	; (b4f00 <loop+0x340>)
   b4e00:	4827      	ldr	r0, [pc, #156]	; (b4ea0 <loop+0x2e0>)
   b4e02:	f000 ffc2 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      ubidots.add("004Voltage", voltage);
   b4e06:	493f      	ldr	r1, [pc, #252]	; (b4f04 <loop+0x344>)
   b4e08:	ed94 0a00 	vldr	s0, [r4]
   b4e0c:	4824      	ldr	r0, [pc, #144]	; (b4ea0 <loop+0x2e0>)
   b4e0e:	f000 ffbc 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      temp004 = tempF;
   b4e12:	4b3d      	ldr	r3, [pc, #244]	; (b4f08 <loop+0x348>)
   b4e14:	682a      	ldr	r2, [r5, #0]
      voltage004 = voltage;
   b4e16:	493d      	ldr	r1, [pc, #244]	; (b4f0c <loop+0x34c>)
      temp004 = tempF;
   b4e18:	601a      	str	r2, [r3, #0]
      voltage004 = voltage;
   b4e1a:	6823      	ldr	r3, [r4, #0]
   b4e1c:	600b      	str	r3, [r1, #0]
      t4 = tempF;
   b4e1e:	493c      	ldr	r1, [pc, #240]	; (b4f10 <loop+0x350>)
   b4e20:	600a      	str	r2, [r1, #0]
      v4 = voltage;
   b4e22:	4a3c      	ldr	r2, [pc, #240]	; (b4f14 <loop+0x354>)
   b4e24:	6013      	str	r3, [r2, #0]
      x4 = true;
   b4e26:	4b3c      	ldr	r3, [pc, #240]	; (b4f18 <loop+0x358>)
   b4e28:	e7cc      	b.n	b4dc4 <loop+0x204>
    else if (probeNumber == 5)
   b4e2a:	2e05      	cmp	r6, #5
   b4e2c:	f040 8084 	bne.w	b4f38 <loop+0x378>
      ubidots.add("005", tempF);
   b4e30:	493a      	ldr	r1, [pc, #232]	; (b4f1c <loop+0x35c>)
   b4e32:	481b      	ldr	r0, [pc, #108]	; (b4ea0 <loop+0x2e0>)
   b4e34:	f000 ffa9 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      ubidots.add("005Voltage", voltage);
   b4e38:	4939      	ldr	r1, [pc, #228]	; (b4f20 <loop+0x360>)
   b4e3a:	ed94 0a00 	vldr	s0, [r4]
   b4e3e:	4818      	ldr	r0, [pc, #96]	; (b4ea0 <loop+0x2e0>)
   b4e40:	f000 ffa3 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      temp005 = tempF;
   b4e44:	4b37      	ldr	r3, [pc, #220]	; (b4f24 <loop+0x364>)
   b4e46:	682a      	ldr	r2, [r5, #0]
      voltage005 = voltage;
   b4e48:	4937      	ldr	r1, [pc, #220]	; (b4f28 <loop+0x368>)
      temp005 = tempF;
   b4e4a:	601a      	str	r2, [r3, #0]
      voltage005 = voltage;
   b4e4c:	6823      	ldr	r3, [r4, #0]
   b4e4e:	600b      	str	r3, [r1, #0]
      t5 = tempF;
   b4e50:	4936      	ldr	r1, [pc, #216]	; (b4f2c <loop+0x36c>)
   b4e52:	600a      	str	r2, [r1, #0]
      v5 = voltage;
   b4e54:	4a36      	ldr	r2, [pc, #216]	; (b4f30 <loop+0x370>)
   b4e56:	6013      	str	r3, [r2, #0]
      x5 = true;
   b4e58:	4b36      	ldr	r3, [pc, #216]	; (b4f34 <loop+0x374>)
   b4e5a:	e7b3      	b.n	b4dc4 <loop+0x204>
   b4e5c:	2003e29c 	.word	0x2003e29c
   b4e60:	2003e2f0 	.word	0x2003e2f0
   b4e64:	2003e218 	.word	0x2003e218
   b4e68:	2003e1b5 	.word	0x2003e1b5
   b4e6c:	2003e1e8 	.word	0x2003e1e8
   b4e70:	2003e730 	.word	0x2003e730
   b4e74:	000bc8d7 	.word	0x000bc8d7
   b4e78:	2003e40c 	.word	0x2003e40c
   b4e7c:	2003e2a0 	.word	0x2003e2a0
   b4e80:	2003e400 	.word	0x2003e400
   b4e84:	2003e4b4 	.word	0x2003e4b4
   b4e88:	2003e3b0 	.word	0x2003e3b0
   b4e8c:	2003e1f4 	.word	0x2003e1f4
   b4e90:	2003e2b0 	.word	0x2003e2b0
   b4e94:	000bc8dd 	.word	0x000bc8dd
   b4e98:	000bc8f1 	.word	0x000bc8f1
   b4e9c:	000bc910 	.word	0x000bc910
   b4ea0:	2003e48c 	.word	0x2003e48c
   b4ea4:	000bc919 	.word	0x000bc919
   b4ea8:	2003e3fc 	.word	0x2003e3fc
   b4eac:	2003e4c8 	.word	0x2003e4c8
   b4eb0:	2003e3d0 	.word	0x2003e3d0
   b4eb4:	2003e498 	.word	0x2003e498
   b4eb8:	2003e4d4 	.word	0x2003e4d4
   b4ebc:	2003e204 	.word	0x2003e204
   b4ec0:	000bc99c 	.word	0x000bc99c
   b4ec4:	2003e1d4 	.word	0x2003e1d4
   b4ec8:	000bc925 	.word	0x000bc925
   b4ecc:	000bc92f 	.word	0x000bc92f
   b4ed0:	2003e404 	.word	0x2003e404
   b4ed4:	2003e4cc 	.word	0x2003e4cc
   b4ed8:	2003e3d4 	.word	0x2003e3d4
   b4edc:	2003e49c 	.word	0x2003e49c
   b4ee0:	2003e4d5 	.word	0x2003e4d5
   b4ee4:	000bc93c 	.word	0x000bc93c
   b4ee8:	000bc947 	.word	0x000bc947
   b4eec:	2003e408 	.word	0x2003e408
   b4ef0:	2003e4d0 	.word	0x2003e4d0
   b4ef4:	2003e3d8 	.word	0x2003e3d8
   b4ef8:	2003e4a0 	.word	0x2003e4a0
   b4efc:	2003e4d6 	.word	0x2003e4d6
   b4f00:	000bc955 	.word	0x000bc955
   b4f04:	000bc959 	.word	0x000bc959
   b4f08:	2003e3ec 	.word	0x2003e3ec
   b4f0c:	2003e4b8 	.word	0x2003e4b8
   b4f10:	2003e3dc 	.word	0x2003e3dc
   b4f14:	2003e4a4 	.word	0x2003e4a4
   b4f18:	2003e4d7 	.word	0x2003e4d7
   b4f1c:	000bc964 	.word	0x000bc964
   b4f20:	000bc968 	.word	0x000bc968
   b4f24:	2003e3f0 	.word	0x2003e3f0
   b4f28:	2003e4bc 	.word	0x2003e4bc
   b4f2c:	2003e3e0 	.word	0x2003e3e0
   b4f30:	2003e4a8 	.word	0x2003e4a8
   b4f34:	2003e4d8 	.word	0x2003e4d8
    else if (probeNumber == 6)
   b4f38:	2e06      	cmp	r6, #6
   b4f3a:	d115      	bne.n	b4f68 <loop+0x3a8>
      ubidots.add("006", tempF);
   b4f3c:	4918      	ldr	r1, [pc, #96]	; (b4fa0 <loop+0x3e0>)
   b4f3e:	4819      	ldr	r0, [pc, #100]	; (b4fa4 <loop+0x3e4>)
   b4f40:	f000 ff23 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      ubidots.add("006Voltage", voltage);
   b4f44:	4918      	ldr	r1, [pc, #96]	; (b4fa8 <loop+0x3e8>)
   b4f46:	ed94 0a00 	vldr	s0, [r4]
   b4f4a:	4816      	ldr	r0, [pc, #88]	; (b4fa4 <loop+0x3e4>)
   b4f4c:	f000 ff1d 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      temp006 = tempF;
   b4f50:	4b16      	ldr	r3, [pc, #88]	; (b4fac <loop+0x3ec>)
   b4f52:	682a      	ldr	r2, [r5, #0]
      voltage006 = voltage;
   b4f54:	4916      	ldr	r1, [pc, #88]	; (b4fb0 <loop+0x3f0>)
      temp006 = tempF;
   b4f56:	601a      	str	r2, [r3, #0]
      voltage006 = voltage;
   b4f58:	6823      	ldr	r3, [r4, #0]
   b4f5a:	600b      	str	r3, [r1, #0]
      t6 = tempF;
   b4f5c:	4915      	ldr	r1, [pc, #84]	; (b4fb4 <loop+0x3f4>)
   b4f5e:	600a      	str	r2, [r1, #0]
      v6 = voltage;
   b4f60:	4a15      	ldr	r2, [pc, #84]	; (b4fb8 <loop+0x3f8>)
   b4f62:	6013      	str	r3, [r2, #0]
      x6 = true;
   b4f64:	4b15      	ldr	r3, [pc, #84]	; (b4fbc <loop+0x3fc>)
   b4f66:	e72d      	b.n	b4dc4 <loop+0x204>
    else if (probeNumber == 7)
   b4f68:	2e07      	cmp	r6, #7
   b4f6a:	d112      	bne.n	b4f92 <loop+0x3d2>
      ubidots.add("007", tempF);
   b4f6c:	4914      	ldr	r1, [pc, #80]	; (b4fc0 <loop+0x400>)
   b4f6e:	480d      	ldr	r0, [pc, #52]	; (b4fa4 <loop+0x3e4>)
   b4f70:	f000 ff0b 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      ubidots.add("007Voltage", voltage);
   b4f74:	4913      	ldr	r1, [pc, #76]	; (b4fc4 <loop+0x404>)
   b4f76:	ed94 0a00 	vldr	s0, [r4]
   b4f7a:	480a      	ldr	r0, [pc, #40]	; (b4fa4 <loop+0x3e4>)
   b4f7c:	f000 ff05 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      temp007 = tempF;
   b4f80:	4a11      	ldr	r2, [pc, #68]	; (b4fc8 <loop+0x408>)
   b4f82:	682b      	ldr	r3, [r5, #0]
   b4f84:	6013      	str	r3, [r2, #0]
      voltage007 = voltage;
   b4f86:	4a11      	ldr	r2, [pc, #68]	; (b4fcc <loop+0x40c>)
   b4f88:	6821      	ldr	r1, [r4, #0]
   b4f8a:	6011      	str	r1, [r2, #0]
      t7 = tempF; // Serial.printf("deviceID: %s\n", ID.c_str());
   b4f8c:	4a10      	ldr	r2, [pc, #64]	; (b4fd0 <loop+0x410>)
   b4f8e:	6013      	str	r3, [r2, #0]
   b4f90:	e6e3      	b.n	b4d5a <loop+0x19a>
      ubidots.add("extraProbe", tempF);
   b4f92:	4910      	ldr	r1, [pc, #64]	; (b4fd4 <loop+0x414>)
   b4f94:	4803      	ldr	r0, [pc, #12]	; (b4fa4 <loop+0x3e4>)
   b4f96:	f000 fef8 	bl	b5d8a <_ZN7Ubidots3addEPcf>
      reyaxReset();
   b4f9a:	f7ff fd47 	bl	b4a2c <_Z10reyaxResetv>
   b4f9e:	e6dc      	b.n	b4d5a <loop+0x19a>
   b4fa0:	000bc973 	.word	0x000bc973
   b4fa4:	2003e48c 	.word	0x2003e48c
   b4fa8:	000bc977 	.word	0x000bc977
   b4fac:	2003e3f4 	.word	0x2003e3f4
   b4fb0:	2003e4c0 	.word	0x2003e4c0
   b4fb4:	2003e3e4 	.word	0x2003e3e4
   b4fb8:	2003e4ac 	.word	0x2003e4ac
   b4fbc:	2003e4d9 	.word	0x2003e4d9
   b4fc0:	000bc982 	.word	0x000bc982
   b4fc4:	000bc986 	.word	0x000bc986
   b4fc8:	2003e3f8 	.word	0x2003e3f8
   b4fcc:	2003e4c4 	.word	0x2003e4c4
   b4fd0:	2003e3e8 	.word	0x2003e3e8
   b4fd4:	000bc991 	.word	0x000bc991

000b4fd8 <_GLOBAL__sub_I___appProductVersion>:
}
   b4fd8:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4fda:	4b2e      	ldr	r3, [pc, #184]	; (b5094 <_GLOBAL__sub_I___appProductVersion+0xbc>)
String deviceID;
   b4fdc:	4d2e      	ldr	r5, [pc, #184]	; (b5098 <_GLOBAL__sub_I___appProductVersion+0xc0>)
   b4fde:	2400      	movs	r4, #0
   b4fe0:	701c      	strb	r4, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4fe2:	f004 f9c3 	bl	b936c <spark_protocol_instance>
   b4fe6:	4623      	mov	r3, r4
   b4fe8:	4622      	mov	r2, r4
   b4fea:	2101      	movs	r1, #1
   b4fec:	f004 f9ce 	bl	b938c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4ff0:	f004 f9bc 	bl	b936c <spark_protocol_instance>
   b4ff4:	4623      	mov	r3, r4
   b4ff6:	4622      	mov	r2, r4
   b4ff8:	210d      	movs	r1, #13
   b4ffa:	f004 f9bf 	bl	b937c <spark_protocol_set_product_id>
TCPClient pubsub;
   b4ffe:	4927      	ldr	r1, [pc, #156]	; (b509c <_GLOBAL__sub_I___appProductVersion+0xc4>)
   b5000:	4608      	mov	r0, r1
   b5002:	f002 fe77 	bl	b7cf4 <_ZN9TCPClientC1Ev>
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   b5006:	4925      	ldr	r1, [pc, #148]	; (b509c <_GLOBAL__sub_I___appProductVersion+0xc4>)
   b5008:	4825      	ldr	r0, [pc, #148]	; (b50a0 <_GLOBAL__sub_I___appProductVersion+0xc8>)
   b500a:	f001 fcc9 	bl	b69a0 <_ZN12PubSubClientC1ER6Client>
FuelGauge fuel;
   b500e:	4621      	mov	r1, r4
   b5010:	4824      	ldr	r0, [pc, #144]	; (b50a4 <_GLOBAL__sub_I___appProductVersion+0xcc>)
   b5012:	f003 fc33 	bl	b887c <_ZN9FuelGaugeC1Eb>
String deviceID;
   b5016:	4629      	mov	r1, r5
   b5018:	4823      	ldr	r0, [pc, #140]	; (b50a8 <_GLOBAL__sub_I___appProductVersion+0xd0>)
   b501a:	f003 fdca 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
String incomingString;
   b501e:	4629      	mov	r1, r5
   b5020:	4822      	ldr	r0, [pc, #136]	; (b50ac <_GLOBAL__sub_I___appProductVersion+0xd4>)
   b5022:	f003 fdc6 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
String incomingString2;
   b5026:	4629      	mov	r1, r5
   b5028:	4821      	ldr	r0, [pc, #132]	; (b50b0 <_GLOBAL__sub_I___appProductVersion+0xd8>)
   b502a:	f003 fdc2 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
String WEBHOOK_NAME = "customer01";
   b502e:	4921      	ldr	r1, [pc, #132]	; (b50b4 <_GLOBAL__sub_I___appProductVersion+0xdc>)
   b5030:	4821      	ldr	r0, [pc, #132]	; (b50b8 <_GLOBAL__sub_I___appProductVersion+0xe0>)
   b5032:	f003 fdbe 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
Ubidots ubidots("webhook", UBI_PARTICLE);
   b5036:	2203      	movs	r2, #3
   b5038:	4920      	ldr	r1, [pc, #128]	; (b50bc <_GLOBAL__sub_I___appProductVersion+0xe4>)
   b503a:	4821      	ldr	r0, [pc, #132]	; (b50c0 <_GLOBAL__sub_I___appProductVersion+0xe8>)
   b503c:	f000 fe94 	bl	b5d68 <_ZN7UbidotsC1EPc11IotProtocol>
String parse0, parse1, parse2, parse3, parse4;
   b5040:	4629      	mov	r1, r5
   b5042:	4820      	ldr	r0, [pc, #128]	; (b50c4 <_GLOBAL__sub_I___appProductVersion+0xec>)
   b5044:	f003 fdb5 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5048:	4629      	mov	r1, r5
   b504a:	481f      	ldr	r0, [pc, #124]	; (b50c8 <_GLOBAL__sub_I___appProductVersion+0xf0>)
   b504c:	f003 fdb1 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5050:	4629      	mov	r1, r5
   b5052:	481e      	ldr	r0, [pc, #120]	; (b50cc <_GLOBAL__sub_I___appProductVersion+0xf4>)
   b5054:	f003 fdad 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5058:	4629      	mov	r1, r5
   b505a:	481d      	ldr	r0, [pc, #116]	; (b50d0 <_GLOBAL__sub_I___appProductVersion+0xf8>)
   b505c:	f003 fda9 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5060:	4629      	mov	r1, r5
   b5062:	481c      	ldr	r0, [pc, #112]	; (b50d4 <_GLOBAL__sub_I___appProductVersion+0xfc>)
   b5064:	f003 fda5 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b5068:	4b1b      	ldr	r3, [pc, #108]	; (b50d8 <_GLOBAL__sub_I___appProductVersion+0x100>)
   b506a:	1d1a      	adds	r2, r3, #4
   b506c:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b506e:	4a1b      	ldr	r2, [pc, #108]	; (b50dc <_GLOBAL__sub_I___appProductVersion+0x104>)
   b5070:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5072:	2201      	movs	r2, #1
   b5074:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5078:	751a      	strb	r2, [r3, #20]
   b507a:	611c      	str	r4, [r3, #16]
              error_(SYSTEM_ERROR_NONE) {
   b507c:	4b18      	ldr	r3, [pc, #96]	; (b50e0 <_GLOBAL__sub_I___appProductVersion+0x108>)
   b507e:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b5082:	f1a2 1201 	sub.w	r2, r2, #65537	; 0x10001
   b5086:	609a      	str	r2, [r3, #8]
}
   b5088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        set_system_mode(mode);
   b508c:	2002      	movs	r0, #2
   b508e:	f002 ba13 	b.w	b74b8 <set_system_mode>
   b5092:	bf00      	nop
   b5094:	2003e1b4 	.word	0x2003e1b4
   b5098:	000bcc8b 	.word	0x000bcc8b
   b509c:	2003e3b4 	.word	0x2003e3b4
   b50a0:	2003e2f0 	.word	0x2003e2f0
   b50a4:	2003e1ec 	.word	0x2003e1ec
   b50a8:	2003e1d8 	.word	0x2003e1d8
   b50ac:	2003e1f4 	.word	0x2003e1f4
   b50b0:	2003e204 	.word	0x2003e204
   b50b4:	000bc9b1 	.word	0x000bc9b1
   b50b8:	2003e1a4 	.word	0x2003e1a4
   b50bc:	000bc9bc 	.word	0x000bc9bc
   b50c0:	2003e48c 	.word	0x2003e48c
   b50c4:	2003e2a0 	.word	0x2003e2a0
   b50c8:	2003e2b0 	.word	0x2003e2b0
   b50cc:	2003e2c0 	.word	0x2003e2c0
   b50d0:	2003e2d0 	.word	0x2003e2d0
   b50d4:	2003e2e0 	.word	0x2003e2e0
   b50d8:	2003e1b8 	.word	0x2003e1b8
   b50dc:	00030010 	.word	0x00030010
   b50e0:	2003e198 	.word	0x2003e198

000b50e4 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   b50e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; b50ec <_ZN11UbiParticle3getEPKcS1_+0x8>
   b50e8:	4770      	bx	lr
   b50ea:	bf00      	nop
   b50ec:	cda2425f 	.word	0xcda2425f

000b50f0 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   b50f0:	7401      	strb	r1, [r0, #16]
   b50f2:	4770      	bx	lr

000b50f4 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    {
      _M_header._M_color = _S_red;
   b50f4:	2200      	movs	r2, #0

	  _Rb_tree_impl()
	    _GLIBCXX_NOEXCEPT_IF(
		is_nothrow_default_constructible<_Node_allocator>::value
		&& is_nothrow_default_constructible<_Base_key_compare>::value )
	  : _Node_allocator()
   b50f6:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b50f8:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b50fc:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b5100:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b5102:	4770      	bx	lr

000b5104 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5104:	b530      	push	{r4, r5, lr}
   b5106:	b085      	sub	sp, #20
   b5108:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b510a:	9b08      	ldr	r3, [sp, #32]
   b510c:	781b      	ldrb	r3, [r3, #0]
   b510e:	f88d 3000 	strb.w	r3, [sp]
   b5112:	a802      	add	r0, sp, #8
   b5114:	233c      	movs	r3, #60	; 0x3c
   b5116:	f003 f99d 	bl	b8454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b511a:	2000      	movs	r0, #0
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b511c:	9c02      	ldr	r4, [sp, #8]
   b511e:	f002 f9eb 	bl	b74f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5122:	b120      	cbz	r0, b512e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b5124:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b5126:	b913      	cbnz	r3, b512e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   b5128:	f002 f90e 	bl	b7348 <spark_process>
    }
   b512c:	e7fa      	b.n	b5124 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   b512e:	7863      	ldrb	r3, [r4, #1]
   b5130:	f3bf 8f5b 	dmb	ish
   b5134:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b5136:	b9ab      	cbnz	r3, b5164 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   b5138:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   b513a:	9c03      	ldr	r4, [sp, #12]
   b513c:	b17c      	cbz	r4, b515e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   b513e:	6863      	ldr	r3, [r4, #4]
   b5140:	3b01      	subs	r3, #1
   b5142:	6063      	str	r3, [r4, #4]
   b5144:	b95b      	cbnz	r3, b515e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   b5146:	6823      	ldr	r3, [r4, #0]
   b5148:	4620      	mov	r0, r4
   b514a:	689b      	ldr	r3, [r3, #8]
   b514c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b514e:	68a3      	ldr	r3, [r4, #8]
   b5150:	3b01      	subs	r3, #1
   b5152:	60a3      	str	r3, [r4, #8]
   b5154:	b91b      	cbnz	r3, b515e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   b5156:	6823      	ldr	r3, [r4, #0]
   b5158:	4620      	mov	r0, r4
   b515a:	68db      	ldr	r3, [r3, #12]
   b515c:	4798      	blx	r3
}
   b515e:	4628      	mov	r0, r5
   b5160:	b005      	add	sp, #20
   b5162:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b5164:	2000      	movs	r0, #0
   b5166:	f002 f9c7 	bl	b74f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b516a:	b120      	cbz	r0, b5176 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   b516c:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b516e:	b913      	cbnz	r3, b5176 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   b5170:	f002 f8ea 	bl	b7348 <spark_process>
    }
   b5174:	e7fa      	b.n	b516c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5176:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b5178:	2b01      	cmp	r3, #1
   b517a:	d1dd      	bne.n	b5138 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   b517c:	7b25      	ldrb	r5, [r4, #12]
   b517e:	e7dc      	b.n	b513a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000b5180 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b5180:	b510      	push	{r4, lr}
   b5182:	4c04      	ldr	r4, [pc, #16]	; (b5194 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   b5184:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   b5186:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b518a:	2400      	movs	r4, #0
  _token = token;
   b518c:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b518e:	7404      	strb	r4, [r0, #16]
  _token = token;
   b5190:	60c3      	str	r3, [r0, #12]
}
   b5192:	bd10      	pop	{r4, pc}
   b5194:	000bc9cc 	.word	0x000bc9cc

000b5198 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   b5198:	ed9f 0a01 	vldr	s0, [pc, #4]	; b51a0 <_ZN6UbiUDP3getEPKcS1_+0x8>
   b519c:	4770      	bx	lr
   b519e:	bf00      	nop
   b51a0:	cda2425f 	.word	0xcda2425f

000b51a4 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   b51a4:	7501      	strb	r1, [r0, #20]
   b51a6:	4770      	bx	lr

000b51a8 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
   b51a8:	2200      	movs	r2, #0
	  : _Node_allocator()
   b51aa:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b51ac:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b51b0:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b51b4:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   b51b6:	4770      	bx	lr

000b51b8 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b51b8:	b530      	push	{r4, r5, lr}
   b51ba:	4d06      	ldr	r5, [pc, #24]	; (b51d4 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   b51bc:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b51be:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b51c2:	2500      	movs	r5, #0
  _token = token;
   b51c4:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b51c6:	7505      	strb	r5, [r0, #20]
   b51c8:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b51cc:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b51d0:	6185      	str	r5, [r0, #24]
}
   b51d2:	bd30      	pop	{r4, r5, pc}
   b51d4:	000bca90 	.word	0x000bca90

000b51d8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   b51d8:	4801      	ldr	r0, [pc, #4]	; (b51e0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   b51da:	f003 bfe7 	b.w	b91ac <_ZN3UDPC1Ev>
   b51de:	bf00      	nop
   b51e0:	2003e4dc 	.word	0x2003e4dc

000b51e4 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   b51e4:	b510      	push	{r4, lr}
   b51e6:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   b51e8:	684a      	ldr	r2, [r1, #4]
   b51ea:	4902      	ldr	r1, [pc, #8]	; (b51f4 <_ZN6UbiUDP11getServerIpEv+0x10>)
   b51ec:	f002 fa4e 	bl	b768c <_ZN5spark12NetworkClass7resolveEPKc>
}
   b51f0:	4620      	mov	r0, r4
   b51f2:	bd10      	pop	{r4, pc}
   b51f4:	2003e67c 	.word	0x2003e67c

000b51f8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b51f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51fa:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   b51fc:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b51fe:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   b5200:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b5202:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   b5204:	f7ff ffee 	bl	b51e4 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   b5208:	a802      	add	r0, sp, #8
   b520a:	f002 ff85 	bl	b8118 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   b520e:	b9a0      	cbnz	r0, b523a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   b5210:	7d33      	ldrb	r3, [r6, #20]
   b5212:	b123      	cbz	r3, b521e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   b5214:	f002 ff00 	bl	b8018 <_Z16_fetch_usbserialv>
   b5218:	4927      	ldr	r1, [pc, #156]	; (b52b8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   b521a:	f003 fc1e 	bl	b8a5a <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   b521e:	23f3      	movs	r3, #243	; 0xf3
   b5220:	9300      	str	r3, [sp, #0]
   b5222:	2237      	movs	r2, #55	; 0x37
   b5224:	233d      	movs	r3, #61	; 0x3d
   b5226:	21a9      	movs	r1, #169	; 0xa9
   b5228:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   b522a:	ad09      	add	r5, sp, #36	; 0x24
   b522c:	f002 ff98 	bl	b8160 <_ZN9IPAddressC1Ehhhh>
   b5230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5232:	ac03      	add	r4, sp, #12
   b5234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5236:	682b      	ldr	r3, [r5, #0]
   b5238:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   b523a:	2200      	movs	r2, #0
   b523c:	f240 21bd 	movw	r1, #701	; 0x2bd
   b5240:	481e      	ldr	r0, [pc, #120]	; (b52bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b5242:	f003 ffe5 	bl	b9210 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   b5246:	2200      	movs	r2, #0
   b5248:	f242 3134 	movw	r1, #9012	; 0x2334
   b524c:	481b      	ldr	r0, [pc, #108]	; (b52bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b524e:	f003 fdcd 	bl	b8dec <_ZN3UDP5beginEtm>
   b5252:	ad03      	add	r5, sp, #12
   b5254:	4b1a      	ldr	r3, [pc, #104]	; (b52c0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   b5256:	9308      	str	r3, [sp, #32]
   b5258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b525a:	ac09      	add	r4, sp, #36	; 0x24
   b525c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b525e:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b5260:	4816      	ldr	r0, [pc, #88]	; (b52bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b5262:	7023      	strb	r3, [r4, #0]
   b5264:	f242 3234 	movw	r2, #9012	; 0x2334
   b5268:	a908      	add	r1, sp, #32
   b526a:	f003 ffed 	bl	b9248 <_ZN3UDP11beginPacketE9IPAddresst>
   b526e:	b958      	cbnz	r0, b5288 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   b5270:	7d33      	ldrb	r3, [r6, #20]
   b5272:	b123      	cbz	r3, b527e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   b5274:	f002 fed0 	bl	b8018 <_Z16_fetch_usbserialv>
   b5278:	4912      	ldr	r1, [pc, #72]	; (b52c4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   b527a:	f003 fbee 	bl	b8a5a <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   b527e:	480f      	ldr	r0, [pc, #60]	; (b52bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b5280:	f003 fe00 	bl	b8e84 <_ZN3UDP4stopEv>
    return false;
   b5284:	2000      	movs	r0, #0
   b5286:	e014      	b.n	b52b2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   b5288:	2f00      	cmp	r7, #0
   b528a:	d0f1      	beq.n	b5270 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   b528c:	4638      	mov	r0, r7
   b528e:	f005 f91e 	bl	ba4ce <strlen>
   b5292:	4639      	mov	r1, r7
   b5294:	4602      	mov	r2, r0
   b5296:	4809      	ldr	r0, [pc, #36]	; (b52bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b5298:	f003 fe02 	bl	b8ea0 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b529c:	2800      	cmp	r0, #0
   b529e:	d0e7      	beq.n	b5270 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   b52a0:	4806      	ldr	r0, [pc, #24]	; (b52bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b52a2:	f003 fd49 	bl	b8d38 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b52a6:	2800      	cmp	r0, #0
   b52a8:	d0e2      	beq.n	b5270 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   b52aa:	4804      	ldr	r0, [pc, #16]	; (b52bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b52ac:	f003 fdea 	bl	b8e84 <_ZN3UDP4stopEv>
  return true;
   b52b0:	2001      	movs	r0, #1
}
   b52b2:	b00f      	add	sp, #60	; 0x3c
   b52b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b52b6:	bf00      	nop
   b52b8:	000bc9dc 	.word	0x000bc9dc
   b52bc:	2003e4dc 	.word	0x2003e4dc
   b52c0:	000bd004 	.word	0x000bd004
   b52c4:	000bca68 	.word	0x000bca68

000b52c8 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   b52c8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b52ca:	201c      	movs	r0, #28
   b52cc:	f7fe fee3 	bl	b4096 <_Znwj>
   b52d0:	4604      	mov	r4, r0
   b52d2:	b148      	cbz	r0, b52e8 <_Z10builderTcpv+0x20>
   b52d4:	4b06      	ldr	r3, [pc, #24]	; (b52f0 <_Z10builderTcpv+0x28>)
   b52d6:	4907      	ldr	r1, [pc, #28]	; (b52f4 <_Z10builderTcpv+0x2c>)
   b52d8:	681b      	ldr	r3, [r3, #0]
   b52da:	9300      	str	r3, [sp, #0]
   b52dc:	6809      	ldr	r1, [r1, #0]
   b52de:	4b06      	ldr	r3, [pc, #24]	; (b52f8 <_Z10builderTcpv+0x30>)
   b52e0:	f242 3234 	movw	r2, #9012	; 0x2334
   b52e4:	f001 f84c 	bl	b6380 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   b52e8:	4620      	mov	r0, r4
   b52ea:	b002      	add	sp, #8
   b52ec:	bd10      	pop	{r4, pc}
   b52ee:	bf00      	nop
   b52f0:	2003e5b0 	.word	0x2003e5b0
   b52f4:	2003e5ac 	.word	0x2003e5ac
   b52f8:	000bcaa0 	.word	0x000bcaa0

000b52fc <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   b52fc:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   b52fe:	2020      	movs	r0, #32
   b5300:	f7fe fec9 	bl	b4096 <_Znwj>
   b5304:	4604      	mov	r4, r0
   b5306:	b140      	cbz	r0, b531a <_Z11builderHttpv+0x1e>
   b5308:	4b05      	ldr	r3, [pc, #20]	; (b5320 <_Z11builderHttpv+0x24>)
   b530a:	4906      	ldr	r1, [pc, #24]	; (b5324 <_Z11builderHttpv+0x28>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	9300      	str	r3, [sp, #0]
   b5310:	6809      	ldr	r1, [r1, #0]
   b5312:	4b05      	ldr	r3, [pc, #20]	; (b5328 <_Z11builderHttpv+0x2c>)
   b5314:	2250      	movs	r2, #80	; 0x50
   b5316:	f000 fa41 	bl	b579c <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   b531a:	4620      	mov	r0, r4
   b531c:	b002      	add	sp, #8
   b531e:	bd10      	pop	{r4, pc}
   b5320:	2003e5b0 	.word	0x2003e5b0
   b5324:	2003e5ac 	.word	0x2003e5ac
   b5328:	000bcaa0 	.word	0x000bcaa0

000b532c <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   b532c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b532e:	201c      	movs	r0, #28
   b5330:	f7fe feb1 	bl	b4096 <_Znwj>
   b5334:	4604      	mov	r4, r0
   b5336:	b148      	cbz	r0, b534c <_Z10builderUdpv+0x20>
   b5338:	4b06      	ldr	r3, [pc, #24]	; (b5354 <_Z10builderUdpv+0x28>)
   b533a:	4907      	ldr	r1, [pc, #28]	; (b5358 <_Z10builderUdpv+0x2c>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	9300      	str	r3, [sp, #0]
   b5340:	6809      	ldr	r1, [r1, #0]
   b5342:	4b06      	ldr	r3, [pc, #24]	; (b535c <_Z10builderUdpv+0x30>)
   b5344:	f242 3234 	movw	r2, #9012	; 0x2334
   b5348:	f7ff ff36 	bl	b51b8 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   b534c:	4620      	mov	r0, r4
   b534e:	b002      	add	sp, #8
   b5350:	bd10      	pop	{r4, pc}
   b5352:	bf00      	nop
   b5354:	2003e5b0 	.word	0x2003e5b0
   b5358:	2003e5ac 	.word	0x2003e5ac
   b535c:	000bcaa0 	.word	0x000bcaa0

000b5360 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   b5360:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   b5362:	2014      	movs	r0, #20
   b5364:	f7fe fe97 	bl	b4096 <_Znwj>
   b5368:	4604      	mov	r4, r0
   b536a:	b140      	cbz	r0, b537e <_Z15builderParticlev+0x1e>
   b536c:	4b05      	ldr	r3, [pc, #20]	; (b5384 <_Z15builderParticlev+0x24>)
   b536e:	4906      	ldr	r1, [pc, #24]	; (b5388 <_Z15builderParticlev+0x28>)
   b5370:	681b      	ldr	r3, [r3, #0]
   b5372:	9300      	str	r3, [sp, #0]
   b5374:	2300      	movs	r3, #0
   b5376:	6809      	ldr	r1, [r1, #0]
   b5378:	461a      	mov	r2, r3
   b537a:	f7ff ff01 	bl	b5180 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   b537e:	4620      	mov	r0, r4
   b5380:	b002      	add	sp, #8
   b5382:	bd10      	pop	{r4, pc}
   b5384:	2003e5b0 	.word	0x2003e5b0
   b5388:	2003e5ac 	.word	0x2003e5ac

000b538c <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b538c:	2a01      	cmp	r2, #1
   b538e:	d102      	bne.n	b5396 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5390:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b5392:	2000      	movs	r0, #0
   b5394:	4770      	bx	lr
	  switch (__op)
   b5396:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5398:	bf04      	itt	eq
   b539a:	680b      	ldreq	r3, [r1, #0]
   b539c:	6003      	streq	r3, [r0, #0]
	      break;
   b539e:	e7f8      	b.n	b5392 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

000b53a0 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b53a0:	6803      	ldr	r3, [r0, #0]
   b53a2:	4718      	bx	r3

000b53a4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b53a4:	b510      	push	{r4, lr}
      if (_M_manager)
   b53a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b53a8:	4604      	mov	r4, r0
      if (_M_manager)
   b53aa:	b113      	cbz	r3, b53b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b53ac:	2203      	movs	r2, #3
   b53ae:	4601      	mov	r1, r0
   b53b0:	4798      	blx	r3
    }
   b53b2:	4620      	mov	r0, r4
   b53b4:	bd10      	pop	{r4, pc}
	...

000b53b8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   b53b8:	b510      	push	{r4, lr}
   b53ba:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b53bc:	2200      	movs	r2, #0
	operator=(_Functor&& __f)
   b53be:	4603      	mov	r3, r0
    _Function_base() : _M_manager(nullptr) { }
   b53c0:	9204      	str	r2, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   b53c2:	b121      	cbz	r1, b53ce <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b53c4:	4a0f      	ldr	r2, [pc, #60]	; (b5404 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x4c>)
   b53c6:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b53c8:	4a0f      	ldr	r2, [pc, #60]	; (b5408 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x50>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b53ca:	9102      	str	r1, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b53cc:	9204      	str	r2, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53ce:	aa02      	add	r2, sp, #8
   b53d0:	e892 0003 	ldmia.w	r2, {r0, r1}
   b53d4:	466c      	mov	r4, sp
   b53d6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b53da:	e893 0003 	ldmia.w	r3, {r0, r1}
   b53de:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b53e2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b53e6:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53ea:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b53ec:	6898      	ldr	r0, [r3, #8]
   b53ee:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b53f0:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b53f2:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53f4:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b53f6:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b53f8:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b53fa:	4610      	mov	r0, r2
   b53fc:	f7ff ffd2 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
	}
   b5400:	b006      	add	sp, #24
   b5402:	bd10      	pop	{r4, pc}
   b5404:	000b53a1 	.word	0x000b53a1
   b5408:	000b538d 	.word	0x000b538d

000b540c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b540c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b540e:	6984      	ldr	r4, [r0, #24]
   b5410:	4b0a      	ldr	r3, [pc, #40]	; (b543c <_ZN9TCPClientD1Ev+0x30>)
   b5412:	6003      	str	r3, [r0, #0]
   b5414:	4605      	mov	r5, r0
   b5416:	b17c      	cbz	r4, b5438 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5418:	6863      	ldr	r3, [r4, #4]
   b541a:	3b01      	subs	r3, #1
   b541c:	6063      	str	r3, [r4, #4]
   b541e:	b95b      	cbnz	r3, b5438 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5420:	6823      	ldr	r3, [r4, #0]
   b5422:	4620      	mov	r0, r4
   b5424:	689b      	ldr	r3, [r3, #8]
   b5426:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5428:	68a3      	ldr	r3, [r4, #8]
   b542a:	3b01      	subs	r3, #1
   b542c:	60a3      	str	r3, [r4, #8]
   b542e:	b91b      	cbnz	r3, b5438 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b5430:	6823      	ldr	r3, [r4, #0]
   b5432:	4620      	mov	r0, r4
   b5434:	68db      	ldr	r3, [r3, #12]
   b5436:	4798      	blx	r3
   b5438:	4628      	mov	r0, r5
   b543a:	bd38      	pop	{r3, r4, r5, pc}
   b543c:	000bcef4 	.word	0x000bcef4

000b5440 <_ZN9TCPClientD0Ev>:
   b5440:	b510      	push	{r4, lr}
   b5442:	4604      	mov	r4, r0
   b5444:	f7ff ffe2 	bl	b540c <_ZN9TCPClientD1Ev>
   b5448:	4620      	mov	r0, r4
   b544a:	211c      	movs	r1, #28
   b544c:	f7fe fe27 	bl	b409e <_ZdlPvj>
   b5450:	4620      	mov	r0, r4
   b5452:	bd10      	pop	{r4, pc}

000b5454 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   b5454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   b5458:	f100 0108 	add.w	r1, r0, #8
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b545c:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   b545e:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   b5460:	b14a      	cbz	r2, b5476 <_ZN10UbiBuilder7builderEv+0x22>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5462:	7c17      	ldrb	r7, [r2, #16]
   b5464:	7806      	ldrb	r6, [r0, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5466:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b546a:	42b7      	cmp	r7, r6
   b546c:	bf2a      	itet	cs
   b546e:	4613      	movcs	r3, r2
   b5470:	462a      	movcc	r2, r5
   b5472:	4622      	movcs	r2, r4
   b5474:	e7f4      	b.n	b5460 <_ZN10UbiBuilder7builderEv+0xc>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   b5476:	4299      	cmp	r1, r3
   b5478:	d004      	beq.n	b5484 <_ZN10UbiBuilder7builderEv+0x30>
	      || _M_impl._M_key_compare(__k,
   b547a:	7800      	ldrb	r0, [r0, #0]
   b547c:	7c1a      	ldrb	r2, [r3, #16]
   b547e:	4290      	cmp	r0, r2
   b5480:	bf38      	it	cc
   b5482:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5484:	69da      	ldr	r2, [r3, #28]
   b5486:	b90a      	cbnz	r2, b548c <_ZN10UbiBuilder7builderEv+0x38>
	__throw_bad_function_call();
   b5488:	f004 f95b 	bl	b9742 <_ZSt25__throw_bad_function_callv>
}
   b548c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5490:	6a1a      	ldr	r2, [r3, #32]
   b5492:	f103 0014 	add.w	r0, r3, #20
   b5496:	4710      	bx	r2

000b5498 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b549a:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b549c:	4616      	mov	r6, r2
   b549e:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b54a0:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   b54a2:	2201      	movs	r2, #1
      while (__x != 0)
   b54a4:	b163      	cbz	r3, b54c0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x28>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b54a6:	7c1d      	ldrb	r5, [r3, #16]
   b54a8:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b54aa:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b54ae:	4295      	cmp	r5, r2
   b54b0:	bf88      	it	hi
   b54b2:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b54b4:	461d      	mov	r5, r3
   b54b6:	bf96      	itet	ls
   b54b8:	2200      	movls	r2, #0
   b54ba:	463b      	movhi	r3, r7
   b54bc:	4603      	movls	r3, r0
   b54be:	e7f1      	b.n	b54a4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   b54c0:	b192      	cbz	r2, b54e8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x50>
	  if (__j == begin())
   b54c2:	68ca      	ldr	r2, [r1, #12]
   b54c4:	42aa      	cmp	r2, r5
   b54c6:	d103      	bne.n	b54d0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b54c8:	e9c4 3500 	strd	r3, r5, [r4]
    }
   b54cc:	4620      	mov	r0, r4
   b54ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b54d0:	4628      	mov	r0, r5
   b54d2:	f004 f8d9 	bl	b9688 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b54d6:	7833      	ldrb	r3, [r6, #0]
   b54d8:	7c02      	ldrb	r2, [r0, #16]
   b54da:	429a      	cmp	r2, r3
   b54dc:	f04f 0300 	mov.w	r3, #0
   b54e0:	d3f2      	bcc.n	b54c8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b54e2:	e9c4 0300 	strd	r0, r3, [r4]
   b54e6:	e7f1      	b.n	b54cc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
   b54e8:	4628      	mov	r0, r5
   b54ea:	e7f4      	b.n	b54d6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3e>

000b54ec <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   b54ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
      { return &this->_M_impl._M_header; }
   b54f0:	f100 0904 	add.w	r9, r0, #4
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b54f4:	6885      	ldr	r5, [r0, #8]
   b54f6:	4606      	mov	r6, r0
   b54f8:	460f      	mov	r7, r1
      { return &this->_M_impl._M_header; }
   b54fa:	464c      	mov	r4, r9
      while (__x != 0)
   b54fc:	b14d      	cbz	r5, b5512 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x26>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b54fe:	7c28      	ldrb	r0, [r5, #16]
   b5500:	7839      	ldrb	r1, [r7, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5502:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5506:	4288      	cmp	r0, r1
   b5508:	bf2a      	itet	cs
   b550a:	462c      	movcs	r4, r5
   b550c:	4615      	movcc	r5, r2
   b550e:	461d      	movcs	r5, r3
   b5510:	e7f4      	b.n	b54fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b5512:	45a1      	cmp	r9, r4
   b5514:	d003      	beq.n	b551e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x32>
   b5516:	783a      	ldrb	r2, [r7, #0]
   b5518:	7c23      	ldrb	r3, [r4, #16]
   b551a:	429a      	cmp	r2, r3
   b551c:	d22f      	bcs.n	b557e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x92>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b551e:	2024      	movs	r0, #36	; 0x24
   b5520:	f7fe fdb9 	bl	b4096 <_Znwj>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5524:	f897 a000 	ldrb.w	sl, [r7]
   b5528:	f880 a010 	strb.w	sl, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   b552c:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   b552e:	45a1      	cmp	r9, r4
   b5530:	4680      	mov	r8, r0
   b5532:	61c3      	str	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5534:	f100 0210 	add.w	r2, r0, #16
   b5538:	d126      	bne.n	b5588 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x9c>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b553a:	6973      	ldr	r3, [r6, #20]
   b553c:	b11b      	cbz	r3, b5546 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x5a>
   b553e:	6937      	ldr	r7, [r6, #16]
   b5540:	7c3b      	ldrb	r3, [r7, #16]
   b5542:	4553      	cmp	r3, sl
   b5544:	d309      	bcc.n	b555a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6e>
	    return _M_get_insert_unique_pos(__k);
   b5546:	4631      	mov	r1, r6
   b5548:	a802      	add	r0, sp, #8
   b554a:	f7ff ffa5 	bl	b5498 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b554e:	e9dd 4702 	ldrd	r4, r7, [sp, #8]
	    if (__res.second)
   b5552:	2f00      	cmp	r7, #0
   b5554:	d052      	beq.n	b55fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5556:	2c00      	cmp	r4, #0
   b5558:	d14e      	bne.n	b55f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b555a:	45b9      	cmp	r9, r7
   b555c:	d04c      	beq.n	b55f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
			    || _M_impl._M_key_compare(_S_key(__z),
   b555e:	f898 0010 	ldrb.w	r0, [r8, #16]
   b5562:	7c3b      	ldrb	r3, [r7, #16]
   b5564:	4298      	cmp	r0, r3
   b5566:	bf2c      	ite	cs
   b5568:	2000      	movcs	r0, #0
   b556a:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b556c:	464b      	mov	r3, r9
   b556e:	463a      	mov	r2, r7
   b5570:	4641      	mov	r1, r8
   b5572:	f004 f88b 	bl	b968c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b5576:	6973      	ldr	r3, [r6, #20]
   b5578:	3301      	adds	r3, #1
   b557a:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b557c:	4644      	mov	r4, r8
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   b557e:	f104 0014 	add.w	r0, r4, #20
   b5582:	b004      	add	sp, #16
   b5584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return __x < __y; }
   b5588:	7c23      	ldrb	r3, [r4, #16]
   b558a:	9201      	str	r2, [sp, #4]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b558c:	4553      	cmp	r3, sl
   b558e:	d918      	bls.n	b55c2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b5590:	68f3      	ldr	r3, [r6, #12]
   b5592:	429c      	cmp	r4, r3
   b5594:	d009      	beq.n	b55aa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
	_M_node = _Rb_tree_decrement(_M_node);
   b5596:	4620      	mov	r0, r4
   b5598:	f004 f876 	bl	b9688 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b559c:	7c03      	ldrb	r3, [r0, #16]
   b559e:	9a01      	ldr	r2, [sp, #4]
   b55a0:	4553      	cmp	r3, sl
   b55a2:	d205      	bcs.n	b55b0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc4>
      { return static_cast<_Link_type>(__x->_M_right); }
   b55a4:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b55a6:	b953      	cbnz	r3, b55be <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd2>
   b55a8:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b55aa:	4627      	mov	r7, r4
   b55ac:	461c      	mov	r4, r3
   b55ae:	e7d0      	b.n	b5552 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b55b0:	4631      	mov	r1, r6
   b55b2:	a802      	add	r0, sp, #8
   b55b4:	f7ff ff70 	bl	b5498 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b55b8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   b55bc:	e7f5      	b.n	b55aa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
   b55be:	4623      	mov	r3, r4
   b55c0:	e7f3      	b.n	b55aa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b55c2:	d21b      	bcs.n	b55fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
	  if (__pos._M_node == _M_rightmost())
   b55c4:	6937      	ldr	r7, [r6, #16]
   b55c6:	42bc      	cmp	r4, r7
   b55c8:	d00b      	beq.n	b55e2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
	_M_node = _Rb_tree_increment(_M_node);
   b55ca:	4620      	mov	r0, r4
   b55cc:	f004 f85a 	bl	b9684 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b55d0:	7c03      	ldrb	r3, [r0, #16]
   b55d2:	9a01      	ldr	r2, [sp, #4]
   b55d4:	4553      	cmp	r3, sl
	_M_node = _Rb_tree_increment(_M_node);
   b55d6:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b55d8:	d905      	bls.n	b55e6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
   b55da:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b55dc:	b953      	cbnz	r3, b55f4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x108>
   b55de:	4627      	mov	r7, r4
   b55e0:	461d      	mov	r5, r3
   b55e2:	462c      	mov	r4, r5
   b55e4:	e7b5      	b.n	b5552 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b55e6:	4631      	mov	r1, r6
   b55e8:	a802      	add	r0, sp, #8
   b55ea:	f7ff ff55 	bl	b5498 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b55ee:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
   b55f2:	e7f6      	b.n	b55e2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
   b55f4:	4607      	mov	r7, r0
   b55f6:	e7f4      	b.n	b55e2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
			    || _M_impl._M_key_compare(_S_key(__z),
   b55f8:	2001      	movs	r0, #1
   b55fa:	e7b7      	b.n	b556c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x80>
    class function<_Res(_ArgTypes...)>
   b55fc:	f108 0014 	add.w	r0, r8, #20
   b5600:	f7ff fed0 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5604:	4640      	mov	r0, r8
   b5606:	2124      	movs	r1, #36	; 0x24
   b5608:	f7fe fd49 	bl	b409e <_ZdlPvj>
   b560c:	46a0      	mov	r8, r4
   b560e:	e7b5      	b.n	b557c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x90>

000b5610 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   b5610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5614:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   b5616:	2600      	movs	r6, #0
   b5618:	4617      	mov	r7, r2
	  : _Node_allocator()
   b561a:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   b561e:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   b5622:	e9c0 2605 	strd	r2, r6, [r0, #20]
   b5626:	4604      	mov	r4, r0
   b5628:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   b562a:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   b562c:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   b562e:	f10d 0107 	add.w	r1, sp, #7
   b5632:	2301      	movs	r3, #1
   b5634:	4628      	mov	r0, r5
   b5636:	f88d 3007 	strb.w	r3, [sp, #7]
   b563a:	f7ff ff57 	bl	b54ec <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b563e:	4916      	ldr	r1, [pc, #88]	; (b5698 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   b5640:	f7ff feba 	bl	b53b8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   b5644:	f10d 0107 	add.w	r1, sp, #7
   b5648:	4628      	mov	r0, r5
   b564a:	f88d 6007 	strb.w	r6, [sp, #7]
   b564e:	f7ff ff4d 	bl	b54ec <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b5652:	4912      	ldr	r1, [pc, #72]	; (b569c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   b5654:	f7ff feb0 	bl	b53b8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   b5658:	2302      	movs	r3, #2
   b565a:	f10d 0107 	add.w	r1, sp, #7
   b565e:	4628      	mov	r0, r5
   b5660:	f88d 3007 	strb.w	r3, [sp, #7]
   b5664:	f7ff ff42 	bl	b54ec <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b5668:	490d      	ldr	r1, [pc, #52]	; (b56a0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   b566a:	f7ff fea5 	bl	b53b8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   b566e:	2303      	movs	r3, #3
   b5670:	f10d 0107 	add.w	r1, sp, #7
   b5674:	4628      	mov	r0, r5
   b5676:	f88d 3007 	strb.w	r3, [sp, #7]
   b567a:	f7ff ff37 	bl	b54ec <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b567e:	4909      	ldr	r1, [pc, #36]	; (b56a4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   b5680:	f7ff fe9a 	bl	b53b8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   b5684:	4b08      	ldr	r3, [pc, #32]	; (b56a8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   b5686:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   b568a:	4b08      	ldr	r3, [pc, #32]	; (b56ac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   b568c:	4620      	mov	r0, r4
  _token = token;
   b568e:	601f      	str	r7, [r3, #0]
}
   b5690:	b002      	add	sp, #8
   b5692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5696:	bf00      	nop
   b5698:	000b52c9 	.word	0x000b52c9
   b569c:	000b52fd 	.word	0x000b52fd
   b56a0:	000b532d 	.word	0x000b532d
   b56a4:	000b5361 	.word	0x000b5361
   b56a8:	2003e5ac 	.word	0x2003e5ac
   b56ac:	2003e5b0 	.word	0x2003e5b0

000b56b0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   b56b0:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   b56b2:	4805      	ldr	r0, [pc, #20]	; (b56c8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   b56b4:	f002 fb1e 	bl	b7cf4 <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   b56b8:	4804      	ldr	r0, [pc, #16]	; (b56cc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   b56ba:	f002 fb1b 	bl	b7cf4 <_ZN9TCPClientC1Ev>
   b56be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b56c2:	4803      	ldr	r0, [pc, #12]	; (b56d0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   b56c4:	f003 bd72 	b.w	b91ac <_ZN3UDPC1Ev>
   b56c8:	2003e590 	.word	0x2003e590
   b56cc:	2003e528 	.word	0x2003e528
   b56d0:	2003e544 	.word	0x2003e544

000b56d4 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   b56d4:	7501      	strb	r1, [r0, #20]
   b56d6:	4770      	bx	lr

000b56d8 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   b56d8:	2200      	movs	r2, #0
	  : _Node_allocator()
   b56da:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b56dc:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b56e0:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b56e4:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b56e6:	4770      	bx	lr

000b56e8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   b56e8:	b570      	push	{r4, r5, r6, lr}
   b56ea:	4606      	mov	r6, r0
   b56ec:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   b56f0:	2014      	movs	r0, #20
   b56f2:	f001 ff37 	bl	b7564 <malloc>
   b56f6:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   b56f8:	2014      	movs	r0, #20
   b56fa:	f001 ff33 	bl	b7564 <malloc>
   b56fe:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   b5700:	4630      	mov	r0, r6
   b5702:	f004 fee4 	bl	ba4ce <strlen>
    for (int i = 0; i < len - 2; i++) {
   b5706:	4632      	mov	r2, r6
   b5708:	2300      	movs	r3, #0
   b570a:	3802      	subs	r0, #2
   b570c:	4298      	cmp	r0, r3
   b570e:	dd14      	ble.n	b573a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   b5710:	f812 1b01 	ldrb.w	r1, [r2], #1
   b5714:	290d      	cmp	r1, #13
   b5716:	d13a      	bne.n	b578e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5718:	7811      	ldrb	r1, [r2, #0]
   b571a:	290a      	cmp	r1, #10
   b571c:	d137      	bne.n	b578e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b571e:	7851      	ldrb	r1, [r2, #1]
   b5720:	290d      	cmp	r1, #13
   b5722:	d134      	bne.n	b578e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5724:	7891      	ldrb	r1, [r2, #2]
   b5726:	290a      	cmp	r1, #10
   b5728:	d131      	bne.n	b578e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   b572a:	3304      	adds	r3, #4
   b572c:	18f1      	adds	r1, r6, r3
   b572e:	2214      	movs	r2, #20
   b5730:	4628      	mov	r0, r5
   b5732:	f004 fee8 	bl	ba506 <strncpy>
        parsed[20] = '\0';
   b5736:	2300      	movs	r3, #0
   b5738:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   b573a:	210a      	movs	r1, #10
   b573c:	4628      	mov	r0, r5
   b573e:	f004 fe89 	bl	ba454 <strchr>
    if (pch == NULL) {
   b5742:	4606      	mov	r6, r0
   b5744:	b328      	cbz	r0, b5792 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   b5746:	210a      	movs	r1, #10
   b5748:	3001      	adds	r0, #1
   b574a:	f004 fe83 	bl	ba454 <strchr>
    if (pch2 == NULL) {
   b574e:	b300      	cbz	r0, b5792 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   b5750:	4631      	mov	r1, r6
   b5752:	4620      	mov	r0, r4
   b5754:	f004 fe95 	bl	ba482 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   b5758:	4620      	mov	r0, r4
   b575a:	f004 feb8 	bl	ba4ce <strlen>
   b575e:	4420      	add	r0, r4
   b5760:	2300      	movs	r3, #0
   b5762:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   b5766:	4620      	mov	r0, r4
   b5768:	f004 fdea 	bl	ba340 <atof>
   b576c:	ec51 0b10 	vmov	r0, r1, d0
   b5770:	f004 fd72 	bl	ba258 <__aeabi_d2f>
   b5774:	ee08 0a10 	vmov	s16, r0
    free(dst);
   b5778:	4620      	mov	r0, r4
   b577a:	f001 fefb 	bl	b7574 <free>
    free(parsed);
   b577e:	4628      	mov	r0, r5
   b5780:	f001 fef8 	bl	b7574 <free>
}
   b5784:	eeb0 0a48 	vmov.f32	s0, s16
   b5788:	ecbd 8b02 	vpop	{d8}
   b578c:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   b578e:	3301      	adds	r3, #1
   b5790:	e7bc      	b.n	b570c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   b5792:	ed9f 8a01 	vldr	s16, [pc, #4]	; b5798 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   b5796:	e7f5      	b.n	b5784 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   b5798:	cda2425f 	.word	0xcda2425f

000b579c <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b579c:	b530      	push	{r4, r5, lr}
   b579e:	4d07      	ldr	r5, [pc, #28]	; (b57bc <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   b57a0:	6005      	str	r5, [r0, #0]
   b57a2:	2500      	movs	r5, #0
  _user_agent = user_agent;
   b57a4:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b57a8:	7505      	strb	r5, [r0, #20]
  _token = token;
   b57aa:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b57ac:	f241 3588 	movw	r5, #5000	; 0x1388
   b57b0:	6185      	str	r5, [r0, #24]
   b57b2:	2505      	movs	r5, #5
  _port = port;
   b57b4:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b57b8:	7705      	strb	r5, [r0, #28]
}
   b57ba:	bd30      	pop	{r4, r5, pc}
   b57bc:	000bccbc 	.word	0x000bccbc

000b57c0 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   b57c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b57c4:	f8df 808c 	ldr.w	r8, [pc, #140]	; b5854 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   b57c8:	f8df a08c 	ldr.w	sl, [pc, #140]	; b5858 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   b57cc:	f8df b08c 	ldr.w	fp, [pc, #140]	; b585c <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   b57d0:	4604      	mov	r4, r0
   b57d2:	460d      	mov	r5, r1
   b57d4:	4617      	mov	r7, r2
   b57d6:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b57d8:	4640      	mov	r0, r8
   b57da:	fa5f f986 	uxtb.w	r9, r6
   b57de:	f002 f901 	bl	b79e4 <_ZN9TCPClient9connectedEv>
   b57e2:	bb88      	cbnz	r0, b5848 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   b57e4:	7f23      	ldrb	r3, [r4, #28]
   b57e6:	454b      	cmp	r3, r9
   b57e8:	d92e      	bls.n	b5848 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   b57ea:	7d23      	ldrb	r3, [r4, #20]
   b57ec:	b1cb      	cbz	r3, b5822 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   b57ee:	f002 fc13 	bl	b8018 <_Z16_fetch_usbserialv>
   b57f2:	4651      	mov	r1, sl
   b57f4:	f003 f91e 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(host);
   b57f8:	f002 fc0e 	bl	b8018 <_Z16_fetch_usbserialv>
   b57fc:	4629      	mov	r1, r5
   b57fe:	f003 f919 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b5802:	f002 fc09 	bl	b8018 <_Z16_fetch_usbserialv>
   b5806:	4659      	mov	r1, fp
   b5808:	f003 f914 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b580c:	f002 fc04 	bl	b8018 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5810:	220a      	movs	r2, #10
   b5812:	4649      	mov	r1, r9
   b5814:	9001      	str	r0, [sp, #4]
   b5816:	f003 f92a 	bl	b8a6e <_ZN5Print11printNumberEmh>
        n += println();
   b581a:	9b01      	ldr	r3, [sp, #4]
   b581c:	4618      	mov	r0, r3
   b581e:	f003 f910 	bl	b8a42 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   b5822:	2300      	movs	r3, #0
   b5824:	b2ba      	uxth	r2, r7
   b5826:	4629      	mov	r1, r5
   b5828:	4640      	mov	r0, r8
   b582a:	f002 f85d 	bl	b78e8 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   b582e:	7d23      	ldrb	r3, [r4, #20]
   b5830:	b123      	cbz	r3, b583c <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   b5832:	f002 fbf1 	bl	b8018 <_Z16_fetch_usbserialv>
   b5836:	4906      	ldr	r1, [pc, #24]	; (b5850 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   b5838:	f003 f90f 	bl	b8a5a <_ZN5Print7printlnEPKc>
    delay(1000);
   b583c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5840:	f003 f83e 	bl	b88c0 <delay>
   b5844:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5846:	e7c7      	b.n	b57d8 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   b5848:	b003      	add	sp, #12
   b584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b584e:	bf00      	nop
   b5850:	000bcade 	.word	0x000bcade
   b5854:	2003e5b4 	.word	0x2003e5b4
   b5858:	000bcab4 	.word	0x000bcab4
   b585c:	000bcaca 	.word	0x000bcaca

000b5860 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   b5860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5862:	4605      	mov	r5, r0
   b5864:	460c      	mov	r4, r1
    response[i] = '\0';
   b5866:	f240 22bd 	movw	r2, #701	; 0x2bd
   b586a:	2100      	movs	r1, #0
   b586c:	4620      	mov	r0, r4
   b586e:	f004 fd7c 	bl	ba36a <memset>
  if (_debug) {
   b5872:	7d2b      	ldrb	r3, [r5, #20]
   b5874:	b14b      	cbz	r3, b588a <_ZN7UbiHTTP16readServerAnswerEPc+0x2a>
    Serial.println("----------");
   b5876:	f002 fbcf 	bl	b8018 <_Z16_fetch_usbserialv>
   b587a:	4914      	ldr	r1, [pc, #80]	; (b58cc <_ZN7UbiHTTP16readServerAnswerEPc+0x6c>)
   b587c:	f003 f8ed 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b5880:	f002 fbca 	bl	b8018 <_Z16_fetch_usbserialv>
   b5884:	4912      	ldr	r1, [pc, #72]	; (b58d0 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   b5886:	f003 f8e8 	bl	b8a5a <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   b588a:	4e12      	ldr	r6, [pc, #72]	; (b58d4 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   b588c:	f204 27bb 	addw	r7, r4, #699	; 0x2bb
   b5890:	4630      	mov	r0, r6
   b5892:	f002 f985 	bl	b7ba0 <_ZN9TCPClient9availableEv>
   b5896:	b170      	cbz	r0, b58b6 <_ZN7UbiHTTP16readServerAnswerEPc+0x56>
    response[j] = (char)_client_http_ubi.read();
   b5898:	4630      	mov	r0, r6
   b589a:	f001 ff8f 	bl	b77bc <_ZN9TCPClient4readEv>
   b589e:	7020      	strb	r0, [r4, #0]
    if (_debug) {
   b58a0:	7d2b      	ldrb	r3, [r5, #20]
   b58a2:	b12b      	cbz	r3, b58b0 <_ZN7UbiHTTP16readServerAnswerEPc+0x50>
      Serial.write(response[j]);
   b58a4:	f002 fbb8 	bl	b8018 <_Z16_fetch_usbserialv>
   b58a8:	6803      	ldr	r3, [r0, #0]
   b58aa:	7821      	ldrb	r1, [r4, #0]
   b58ac:	689b      	ldr	r3, [r3, #8]
   b58ae:	4798      	blx	r3
    if (j >= MAX_BUFFER_SIZE - 1) {
   b58b0:	3401      	adds	r4, #1
   b58b2:	42a7      	cmp	r7, r4
   b58b4:	d1ec      	bne.n	b5890 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
  if (_debug) {
   b58b6:	7d2b      	ldrb	r3, [r5, #20]
   b58b8:	b133      	cbz	r3, b58c8 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
    Serial.println("\n----------");
   b58ba:	f002 fbad 	bl	b8018 <_Z16_fetch_usbserialv>
}
   b58be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("\n----------");
   b58c2:	4905      	ldr	r1, [pc, #20]	; (b58d8 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   b58c4:	f003 b8c9 	b.w	b8a5a <_ZN5Print7printlnEPKc>
}
   b58c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b58ca:	bf00      	nop
   b58cc:	000bcb03 	.word	0x000bcb03
   b58d0:	000bcaef 	.word	0x000bcaef
   b58d4:	2003e5b4 	.word	0x2003e5b4
   b58d8:	000bcb02 	.word	0x000bcb02

000b58dc <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   b58dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b58de:	4f0e      	ldr	r7, [pc, #56]	; (b5918 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   b58e0:	4604      	mov	r4, r0
  int timeout = 0;
   b58e2:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b58e4:	4638      	mov	r0, r7
   b58e6:	f002 f95b 	bl	b7ba0 <_ZN9TCPClient9availableEv>
   b58ea:	4605      	mov	r5, r0
   b58ec:	b990      	cbnz	r0, b5914 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   b58ee:	69a3      	ldr	r3, [r4, #24]
   b58f0:	42b3      	cmp	r3, r6
   b58f2:	dd0f      	ble.n	b5914 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   b58f4:	2001      	movs	r0, #1
   b58f6:	f002 ffe3 	bl	b88c0 <delay>
    if (timeout > _timeout - 1) {
   b58fa:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b58fc:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b58fe:	42b3      	cmp	r3, r6
   b5900:	dcf0      	bgt.n	b58e4 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
   b5902:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b5904:	b128      	cbz	r0, b5912 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b5906:	f002 fb87 	bl	b8018 <_Z16_fetch_usbserialv>
   b590a:	4904      	ldr	r1, [pc, #16]	; (b591c <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   b590c:	f003 f8a5 	bl	b8a5a <_ZN5Print7printlnEPKc>
   b5910:	4628      	mov	r0, r5
}
   b5912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b5914:	2001      	movs	r0, #1
   b5916:	e7fc      	b.n	b5912 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   b5918:	2003e5b4 	.word	0x2003e5b4
   b591c:	000bcb0e 	.word	0x000bcb0e

000b5920 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5922:	460f      	mov	r7, r1
  reconnect(_host, _port);
   b5924:	6902      	ldr	r2, [r0, #16]
   b5926:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5928:	4604      	mov	r4, r0
   b592a:	461d      	mov	r5, r3
  reconnect(_host, _port);
   b592c:	f7ff ff48 	bl	b57c0 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   b5930:	4878      	ldr	r0, [pc, #480]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5932:	f002 f857 	bl	b79e4 <_ZN9TCPClient9connectedEv>
   b5936:	4606      	mov	r6, r0
   b5938:	2800      	cmp	r0, #0
   b593a:	f000 80e1 	beq.w	b5b00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   b593e:	4976      	ldr	r1, [pc, #472]	; (b5b18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b5940:	4874      	ldr	r0, [pc, #464]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5942:	f003 f877 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b5946:	4639      	mov	r1, r7
   b5948:	4872      	ldr	r0, [pc, #456]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b594a:	f003 f873 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   b594e:	4973      	ldr	r1, [pc, #460]	; (b5b1c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b5950:	4870      	ldr	r0, [pc, #448]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5952:	f003 f86f 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   b5956:	4972      	ldr	r1, [pc, #456]	; (b5b20 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5958:	486e      	ldr	r0, [pc, #440]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b595a:	f003 f86b 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b595e:	6861      	ldr	r1, [r4, #4]
   b5960:	486c      	ldr	r0, [pc, #432]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5962:	f003 f867 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5966:	496f      	ldr	r1, [pc, #444]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5968:	486a      	ldr	r0, [pc, #424]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b596a:	f003 f863 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   b596e:	496e      	ldr	r1, [pc, #440]	; (b5b28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b5970:	4868      	ldr	r0, [pc, #416]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5972:	f003 f85f 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5976:	68a1      	ldr	r1, [r4, #8]
   b5978:	4866      	ldr	r0, [pc, #408]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b597a:	f003 f85b 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b597e:	4969      	ldr	r1, [pc, #420]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5980:	4864      	ldr	r0, [pc, #400]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5982:	f003 f857 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   b5986:	4969      	ldr	r1, [pc, #420]	; (b5b2c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b5988:	4862      	ldr	r0, [pc, #392]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b598a:	f003 f853 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b598e:	68e1      	ldr	r1, [r4, #12]
   b5990:	4860      	ldr	r0, [pc, #384]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5992:	f003 f84f 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5996:	4963      	ldr	r1, [pc, #396]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5998:	485e      	ldr	r0, [pc, #376]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b599a:	f003 f84b 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   b599e:	4964      	ldr	r1, [pc, #400]	; (b5b30 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b59a0:	485c      	ldr	r0, [pc, #368]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59a2:	f003 f847 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   b59a6:	4963      	ldr	r1, [pc, #396]	; (b5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b59a8:	485a      	ldr	r0, [pc, #360]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59aa:	f003 f843 	bl	b8a34 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   b59ae:	4628      	mov	r0, r5
   b59b0:	f004 fd8d 	bl	ba4ce <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   b59b4:	4960      	ldr	r1, [pc, #384]	; (b5b38 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   b59b6:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   b59b8:	4856      	ldr	r0, [pc, #344]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59ba:	f003 f83b 	bl	b8a34 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b59be:	220a      	movs	r2, #10
   b59c0:	4631      	mov	r1, r6
   b59c2:	4854      	ldr	r0, [pc, #336]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59c4:	f003 f853 	bl	b8a6e <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   b59c8:	495c      	ldr	r1, [pc, #368]	; (b5b3c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b59ca:	4852      	ldr	r0, [pc, #328]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59cc:	f003 f832 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   b59d0:	4629      	mov	r1, r5
   b59d2:	4850      	ldr	r0, [pc, #320]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59d4:	f003 f82e 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b59d8:	4952      	ldr	r1, [pc, #328]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b59da:	484e      	ldr	r0, [pc, #312]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59dc:	f003 f82a 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   b59e0:	484c      	ldr	r0, [pc, #304]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b59e2:	f001 ff05 	bl	b77f0 <_ZN9TCPClient5flushEv>
    if (_debug) {
   b59e6:	7d23      	ldrb	r3, [r4, #20]
   b59e8:	2b00      	cmp	r3, #0
   b59ea:	d069      	beq.n	b5ac0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   b59ec:	f002 fb14 	bl	b8018 <_Z16_fetch_usbserialv>
   b59f0:	4953      	ldr	r1, [pc, #332]	; (b5b40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   b59f2:	f003 f832 	bl	b8a5a <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   b59f6:	f002 fb0f 	bl	b8018 <_Z16_fetch_usbserialv>
   b59fa:	4947      	ldr	r1, [pc, #284]	; (b5b18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b59fc:	f003 f81a 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5a00:	f002 fb0a 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a04:	4639      	mov	r1, r7
   b5a06:	f003 f815 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5a0a:	f002 fb05 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a0e:	4943      	ldr	r1, [pc, #268]	; (b5b1c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b5a10:	f003 f810 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5a14:	f002 fb00 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a18:	4941      	ldr	r1, [pc, #260]	; (b5b20 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5a1a:	f003 f80b 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5a1e:	f002 fafb 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a22:	6861      	ldr	r1, [r4, #4]
   b5a24:	f003 f806 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5a28:	f002 faf6 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a2c:	493d      	ldr	r1, [pc, #244]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5a2e:	f003 f801 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5a32:	f002 faf1 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a36:	493c      	ldr	r1, [pc, #240]	; (b5b28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b5a38:	f002 fffc 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5a3c:	f002 faec 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a40:	68a1      	ldr	r1, [r4, #8]
   b5a42:	f002 fff7 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5a46:	f002 fae7 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a4a:	4936      	ldr	r1, [pc, #216]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5a4c:	f002 fff2 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5a50:	f002 fae2 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a54:	4935      	ldr	r1, [pc, #212]	; (b5b2c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b5a56:	f002 ffed 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5a5a:	f002 fadd 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a5e:	68e1      	ldr	r1, [r4, #12]
   b5a60:	f002 ffe8 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5a64:	f002 fad8 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a68:	492e      	ldr	r1, [pc, #184]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5a6a:	f002 ffe3 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   b5a6e:	f002 fad3 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a72:	492f      	ldr	r1, [pc, #188]	; (b5b30 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b5a74:	f002 ffde 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   b5a78:	f002 face 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a7c:	492d      	ldr	r1, [pc, #180]	; (b5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b5a7e:	f002 ffd9 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   b5a82:	f002 fac9 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a86:	492c      	ldr	r1, [pc, #176]	; (b5b38 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   b5a88:	f002 ffd4 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   b5a8c:	f002 fac4 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a90:	220a      	movs	r2, #10
   b5a92:	4631      	mov	r1, r6
   b5a94:	f002 ffeb 	bl	b8a6e <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   b5a98:	f002 fabe 	bl	b8018 <_Z16_fetch_usbserialv>
   b5a9c:	4927      	ldr	r1, [pc, #156]	; (b5b3c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5a9e:	f002 ffc9 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(payload);
   b5aa2:	f002 fab9 	bl	b8018 <_Z16_fetch_usbserialv>
   b5aa6:	4629      	mov	r1, r5
   b5aa8:	f002 ffc4 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5aac:	f002 fab4 	bl	b8018 <_Z16_fetch_usbserialv>
   b5ab0:	491c      	ldr	r1, [pc, #112]	; (b5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5ab2:	f002 ffbf 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   b5ab6:	f002 faaf 	bl	b8018 <_Z16_fetch_usbserialv>
   b5aba:	4922      	ldr	r1, [pc, #136]	; (b5b44 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   b5abc:	f002 ffcd 	bl	b8a5a <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	f7ff ff0b 	bl	b58dc <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   b5ac6:	7d23      	ldrb	r3, [r4, #20]
   b5ac8:	b92b      	cbnz	r3, b5ad6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   b5aca:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   b5acc:	4811      	ldr	r0, [pc, #68]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5ace:	f002 f8c1 	bl	b7c54 <_ZN9TCPClient4stopEv>
}
   b5ad2:	4620      	mov	r0, r4
   b5ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   b5ad6:	f002 fa9f 	bl	b8018 <_Z16_fetch_usbserialv>
   b5ada:	491b      	ldr	r1, [pc, #108]	; (b5b48 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   b5adc:	4d0d      	ldr	r5, [pc, #52]	; (b5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   b5ade:	f002 ffbc 	bl	b8a5a <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   b5ae2:	4628      	mov	r0, r5
   b5ae4:	f002 f85c 	bl	b7ba0 <_ZN9TCPClient9availableEv>
   b5ae8:	2800      	cmp	r0, #0
   b5aea:	d0ee      	beq.n	b5aca <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   b5aec:	4628      	mov	r0, r5
   b5aee:	f001 fe65 	bl	b77bc <_ZN9TCPClient4readEv>
   b5af2:	4604      	mov	r4, r0
        Serial.print(c);
   b5af4:	f002 fa90 	bl	b8018 <_Z16_fetch_usbserialv>
   b5af8:	b2e1      	uxtb	r1, r4
   b5afa:	f002 ff9f 	bl	b8a3c <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   b5afe:	e7f0      	b.n	b5ae2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   b5b00:	7d24      	ldrb	r4, [r4, #20]
   b5b02:	2c00      	cmp	r4, #0
   b5b04:	d0e2      	beq.n	b5acc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   b5b06:	f002 fa87 	bl	b8018 <_Z16_fetch_usbserialv>
   b5b0a:	4910      	ldr	r1, [pc, #64]	; (b5b4c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   b5b0c:	f002 ffa5 	bl	b8a5a <_ZN5Print7printlnEPKc>
  bool result = false;
   b5b10:	4634      	mov	r4, r6
   b5b12:	e7db      	b.n	b5acc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   b5b14:	2003e5b4 	.word	0x2003e5b4
   b5b18:	000bcb41 	.word	0x000bcb41
   b5b1c:	000bcb59 	.word	0x000bcb59
   b5b20:	000bcb65 	.word	0x000bcb65
   b5b24:	000bcc89 	.word	0x000bcc89
   b5b28:	000bcb6c 	.word	0x000bcb6c
   b5b2c:	000bcb79 	.word	0x000bcb79
   b5b30:	000bcb88 	.word	0x000bcb88
   b5b34:	000bcb9c 	.word	0x000bcb9c
   b5b38:	000bcbbd 	.word	0x000bcbbd
   b5b3c:	000bcc87 	.word	0x000bcc87
   b5b40:	000bcbce 	.word	0x000bcbce
   b5b44:	000bcbea 	.word	0x000bcbea
   b5b48:	000bcc08 	.word	0x000bcc08
   b5b4c:	000bcc24 	.word	0x000bcc24

000b5b50 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b5b50:	b570      	push	{r4, r5, r6, lr}
   b5b52:	ed2d 8b02 	vpush	{d8}
   b5b56:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b5b58:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b5b5a:	460e      	mov	r6, r1
   b5b5c:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b5b5e:	6841      	ldr	r1, [r0, #4]
   b5b60:	4866      	ldr	r0, [pc, #408]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b62:	2250      	movs	r2, #80	; 0x50
   b5b64:	f001 fec0 	bl	b78e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   b5b68:	4620      	mov	r0, r4
   b5b6a:	6861      	ldr	r1, [r4, #4]
   b5b6c:	2250      	movs	r2, #80	; 0x50
   b5b6e:	f7ff fe27 	bl	b57c0 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   b5b72:	4862      	ldr	r0, [pc, #392]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b74:	f001 ff36 	bl	b79e4 <_ZN9TCPClient9connectedEv>
   b5b78:	2800      	cmp	r0, #0
   b5b7a:	f000 80b6 	beq.w	b5cea <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   b5b7e:	4960      	ldr	r1, [pc, #384]	; (b5d00 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5b80:	485e      	ldr	r0, [pc, #376]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b82:	f002 ff57 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b5b86:	4631      	mov	r1, r6
   b5b88:	485c      	ldr	r0, [pc, #368]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b8a:	f002 ff53 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   b5b8e:	495d      	ldr	r1, [pc, #372]	; (b5d04 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5b90:	485a      	ldr	r0, [pc, #360]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b92:	f002 ff4f 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   b5b96:	4629      	mov	r1, r5
   b5b98:	4858      	ldr	r0, [pc, #352]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b9a:	f002 ff4b 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   b5b9e:	495a      	ldr	r1, [pc, #360]	; (b5d08 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5ba0:	4856      	ldr	r0, [pc, #344]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5ba2:	f002 ff47 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   b5ba6:	4959      	ldr	r1, [pc, #356]	; (b5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5ba8:	4854      	ldr	r0, [pc, #336]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5baa:	f002 ff43 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   b5bae:	4958      	ldr	r1, [pc, #352]	; (b5d10 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5bb0:	4852      	ldr	r0, [pc, #328]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bb2:	f002 ff3f 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b5bb6:	6861      	ldr	r1, [r4, #4]
   b5bb8:	4850      	ldr	r0, [pc, #320]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bba:	f002 ff3b 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5bbe:	4955      	ldr	r1, [pc, #340]	; (b5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5bc0:	484e      	ldr	r0, [pc, #312]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bc2:	f002 ff37 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   b5bc6:	4954      	ldr	r1, [pc, #336]	; (b5d18 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5bc8:	484c      	ldr	r0, [pc, #304]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bca:	f002 ff33 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5bce:	68a1      	ldr	r1, [r4, #8]
   b5bd0:	484a      	ldr	r0, [pc, #296]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bd2:	f002 ff2f 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5bd6:	494f      	ldr	r1, [pc, #316]	; (b5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5bd8:	4848      	ldr	r0, [pc, #288]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bda:	f002 ff2b 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   b5bde:	494f      	ldr	r1, [pc, #316]	; (b5d1c <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5be0:	4846      	ldr	r0, [pc, #280]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5be2:	f002 ff27 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b5be6:	68e1      	ldr	r1, [r4, #12]
   b5be8:	4844      	ldr	r0, [pc, #272]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bea:	f002 ff23 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5bee:	4949      	ldr	r1, [pc, #292]	; (b5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5bf0:	4842      	ldr	r0, [pc, #264]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bf2:	f002 ff1f 	bl	b8a34 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   b5bf6:	494a      	ldr	r1, [pc, #296]	; (b5d20 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5bf8:	4840      	ldr	r0, [pc, #256]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5bfa:	f002 ff1b 	bl	b8a34 <_ZN5Print5printEPKc>
    if (_debug) {
   b5bfe:	7d23      	ldrb	r3, [r4, #20]
   b5c00:	2b00      	cmp	r3, #0
   b5c02:	d04f      	beq.n	b5ca4 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   b5c04:	f002 fa08 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c08:	493d      	ldr	r1, [pc, #244]	; (b5d00 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5c0a:	f002 ff13 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5c0e:	f002 fa03 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c12:	4631      	mov	r1, r6
   b5c14:	f002 ff0e 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("/");
   b5c18:	f002 f9fe 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c1c:	4939      	ldr	r1, [pc, #228]	; (b5d04 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5c1e:	f002 ff09 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   b5c22:	f002 f9f9 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c26:	4629      	mov	r1, r5
   b5c28:	f002 ff04 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   b5c2c:	f002 f9f4 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c30:	4935      	ldr	r1, [pc, #212]	; (b5d08 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5c32:	f002 feff 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5c36:	f002 f9ef 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c3a:	4934      	ldr	r1, [pc, #208]	; (b5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5c3c:	f002 fefa 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5c40:	f002 f9ea 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c44:	4932      	ldr	r1, [pc, #200]	; (b5d10 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5c46:	f002 fef5 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5c4a:	f002 f9e5 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c4e:	6861      	ldr	r1, [r4, #4]
   b5c50:	f002 fef0 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5c54:	f002 f9e0 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c58:	492e      	ldr	r1, [pc, #184]	; (b5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5c5a:	f002 feeb 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5c5e:	f002 f9db 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c62:	492d      	ldr	r1, [pc, #180]	; (b5d18 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5c64:	f002 fee6 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5c68:	f002 f9d6 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c6c:	68a1      	ldr	r1, [r4, #8]
   b5c6e:	f002 fee1 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5c72:	f002 f9d1 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c76:	4927      	ldr	r1, [pc, #156]	; (b5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5c78:	f002 fedc 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5c7c:	f002 f9cc 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c80:	4926      	ldr	r1, [pc, #152]	; (b5d1c <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5c82:	f002 fed7 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5c86:	f002 f9c7 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c8a:	68e1      	ldr	r1, [r4, #12]
   b5c8c:	f002 fed2 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5c90:	f002 f9c2 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c94:	491f      	ldr	r1, [pc, #124]	; (b5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5c96:	f002 fecd 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   b5c9a:	f002 f9bd 	bl	b8018 <_Z16_fetch_usbserialv>
   b5c9e:	4920      	ldr	r1, [pc, #128]	; (b5d20 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5ca0:	f002 fec8 	bl	b8a34 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   b5ca4:	4620      	mov	r0, r4
   b5ca6:	f7ff fe19 	bl	b58dc <_ZN7UbiHTTP16waitServerAnswerEv>
   b5caa:	b948      	cbnz	r0, b5cc0 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   b5cac:	4813      	ldr	r0, [pc, #76]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   b5cae:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b5d24 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   b5cb2:	f001 ffcf 	bl	b7c54 <_ZN9TCPClient4stopEv>
}
   b5cb6:	eeb0 0a48 	vmov.f32	s0, s16
   b5cba:	ecbd 8b02 	vpop	{d8}
   b5cbe:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5cc0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b5cc4:	f001 fc4e 	bl	b7564 <malloc>
    readServerAnswer(response);
   b5cc8:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5cca:	4605      	mov	r5, r0
    readServerAnswer(response);
   b5ccc:	4620      	mov	r0, r4
   b5cce:	f7ff fdc7 	bl	b5860 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   b5cd2:	4628      	mov	r0, r5
   b5cd4:	f7ff fd08 	bl	b56e8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   b5cd8:	4808      	ldr	r0, [pc, #32]	; (b5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5cda:	eeb0 8a40 	vmov.f32	s16, s0
   b5cde:	f001 ffb9 	bl	b7c54 <_ZN9TCPClient4stopEv>
    free(response);
   b5ce2:	4628      	mov	r0, r5
   b5ce4:	f001 fc46 	bl	b7574 <free>
    return value;
   b5ce8:	e7e5      	b.n	b5cb6 <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   b5cea:	7d23      	ldrb	r3, [r4, #20]
   b5cec:	2b00      	cmp	r3, #0
   b5cee:	d0dd      	beq.n	b5cac <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   b5cf0:	f002 f992 	bl	b8018 <_Z16_fetch_usbserialv>
   b5cf4:	490c      	ldr	r1, [pc, #48]	; (b5d28 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   b5cf6:	f002 feb0 	bl	b8a5a <_ZN5Print7printlnEPKc>
   b5cfa:	e7d7      	b.n	b5cac <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   b5cfc:	2003e5b4 	.word	0x2003e5b4
   b5d00:	000bcc4e 	.word	0x000bcc4e
   b5d04:	000bcc63 	.word	0x000bcc63
   b5d08:	000bcc65 	.word	0x000bcc65
   b5d0c:	000bcb59 	.word	0x000bcb59
   b5d10:	000bcb65 	.word	0x000bcb65
   b5d14:	000bcc89 	.word	0x000bcc89
   b5d18:	000bcb6c 	.word	0x000bcb6c
   b5d1c:	000bcb79 	.word	0x000bcb79
   b5d20:	000bcc69 	.word	0x000bcc69
   b5d24:	cda2425f 	.word	0xcda2425f
   b5d28:	000bcc8c 	.word	0x000bcc8c

000b5d2c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   b5d2c:	4801      	ldr	r0, [pc, #4]	; (b5d34 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   b5d2e:	f001 bfe1 	b.w	b7cf4 <_ZN9TCPClientC1Ev>
   b5d32:	bf00      	nop
   b5d34:	2003e5b4 	.word	0x2003e5b4

000b5d38 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   b5d3a:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5d3c:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b5d3e:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5d40:	e9cd 2100 	strd	r2, r1, [sp]
   b5d44:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b5d46:	f001 fc0d 	bl	b7564 <malloc>
   b5d4a:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   b5d4c:	2014      	movs	r0, #20
   b5d4e:	f7fe f9a2 	bl	b4096 <_Znwj>
   b5d52:	4605      	mov	r5, r0
   b5d54:	b120      	cbz	r0, b5d60 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   b5d56:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5d5a:	4633      	mov	r3, r6
   b5d5c:	f000 f861 	bl	b5e22 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   b5d60:	6025      	str	r5, [r4, #0]
}
   b5d62:	b002      	add	sp, #8
   b5d64:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5d68 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   b5d68:	b538      	push	{r3, r4, r5, lr}
   b5d6a:	2500      	movs	r5, #0
   b5d6c:	4604      	mov	r4, r0
   b5d6e:	4613      	mov	r3, r2
   b5d70:	7245      	strb	r5, [r0, #9]
   b5d72:	7285      	strb	r5, [r0, #10]
   b5d74:	4a02      	ldr	r2, [pc, #8]	; (b5d80 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   b5d76:	f7ff ffdf 	bl	b5d38 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   b5d7a:	4620      	mov	r0, r4
   b5d7c:	bd38      	pop	{r3, r4, r5, pc}
   b5d7e:	bf00      	nop
   b5d80:	000bcccc 	.word	0x000bcccc

000b5d84 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   b5d84:	6800      	ldr	r0, [r0, #0]
   b5d86:	f000 b855 	b.w	b5e34 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000b5d8a <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   b5d8a:	b507      	push	{r0, r1, r2, lr}
   b5d8c:	2300      	movs	r3, #0
   b5d8e:	9300      	str	r3, [sp, #0]
   b5d90:	461a      	mov	r2, r3
   b5d92:	f7ff fff7 	bl	b5d84 <_ZN7Ubidots3addEPcfS0_mj>
   b5d96:	b003      	add	sp, #12
   b5d98:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d9c <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   b5d9c:	6800      	ldr	r0, [r0, #0]
   b5d9e:	f000 ba69 	b.w	b6274 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

000b5da2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5da2:	b538      	push	{r3, r4, r5, lr}
   b5da4:	4604      	mov	r4, r0
      while (__x != 0)
   b5da6:	b184      	cbz	r4, b5dca <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
	  _M_erase(_S_right(__x));
   b5da8:	68e0      	ldr	r0, [r4, #12]
   b5daa:	f7ff fffa 	bl	b5da2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      if (_M_manager)
   b5dae:	69e3      	ldr	r3, [r4, #28]
      { return static_cast<_Link_type>(__x->_M_left); }
   b5db0:	68a5      	ldr	r5, [r4, #8]
   b5db2:	b123      	cbz	r3, b5dbe <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
    class function<_Res(_ArgTypes...)>
   b5db4:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5db8:	2203      	movs	r2, #3
   b5dba:	4608      	mov	r0, r1
   b5dbc:	4798      	blx	r3
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	2124      	movs	r1, #36	; 0x24
   b5dc2:	f7fe f96c 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b5dc6:	462c      	mov	r4, r5
      }
   b5dc8:	e7ed      	b.n	b5da6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
    }
   b5dca:	bd38      	pop	{r3, r4, r5, pc}

000b5dcc <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   b5dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5dce:	b08d      	sub	sp, #52	; 0x34
   b5dd0:	4604      	mov	r4, r0
        return spark_deviceID();
   b5dd2:	a801      	add	r0, sp, #4
   b5dd4:	460d      	mov	r5, r1
   b5dd6:	4617      	mov	r7, r2
   b5dd8:	461e      	mov	r6, r3
   b5dda:	f001 facd 	bl	b7378 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   b5dde:	9803      	ldr	r0, [sp, #12]
   b5de0:	3001      	adds	r0, #1
   b5de2:	f7fe f95a 	bl	b409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   b5de6:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   b5de8:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   b5dea:	f004 fb4a 	bl	ba482 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   b5dee:	462a      	mov	r2, r5
   b5df0:	4639      	mov	r1, r7
   b5df2:	4633      	mov	r3, r6
  _iot_protocol = iot_protocol;
   b5df4:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   b5df6:	a805      	add	r0, sp, #20
   b5df8:	f7ff fc0a 	bl	b5610 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   b5dfc:	20c8      	movs	r0, #200	; 0xc8
   b5dfe:	f001 fbb1 	bl	b7564 <malloc>
   b5e02:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   b5e04:	a805      	add	r0, sp, #20
   b5e06:	f7ff fb25 	bl	b5454 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   b5e0a:	2300      	movs	r3, #0
  _token = token;
   b5e0c:	e9c4 0501 	strd	r0, r5, [r4, #4]
  _current_value = 0;
   b5e10:	7423      	strb	r3, [r4, #16]
      { _M_erase(_M_begin()); }
   b5e12:	9808      	ldr	r0, [sp, #32]
   b5e14:	f7ff ffc5 	bl	b5da2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
  String particle_id_str = System.deviceID();
   b5e18:	a801      	add	r0, sp, #4
   b5e1a:	f002 fe7f 	bl	b8b1c <_ZN6StringD1Ev>
}
   b5e1e:	b00d      	add	sp, #52	; 0x34
   b5e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5e22 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   b5e22:	b538      	push	{r3, r4, r5, lr}
   b5e24:	2500      	movs	r5, #0
   b5e26:	4604      	mov	r4, r0
   b5e28:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   b5e2a:	f7ff ffcf 	bl	b5dcc <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   b5e2e:	4620      	mov	r0, r4
   b5e30:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e34 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   b5e34:	b538      	push	{r3, r4, r5, lr}
   b5e36:	4604      	mov	r4, r0
  _dirty = true;
   b5e38:	2001      	movs	r0, #1
   b5e3a:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   b5e3c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5e40:	68e5      	ldr	r5, [r4, #12]
   b5e42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b5e46:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   b5e4a:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b5e4e:	68e0      	ldr	r0, [r4, #12]
   b5e50:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b5e54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b5e58:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   b5e5c:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b5e60:	68e0      	ldr	r0, [r4, #12]
   b5e62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b5e66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b5e6a:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   b5e6c:	f994 2010 	ldrsb.w	r2, [r4, #16]
   b5e70:	68e1      	ldr	r1, [r4, #12]
   b5e72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b5e76:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b5e7a:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   b5e7c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b5e80:	68e2      	ldr	r2, [r4, #12]
   b5e82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5e86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b5e8a:	9a04      	ldr	r2, [sp, #16]
   b5e8c:	611a      	str	r2, [r3, #16]
  _current_value++;
   b5e8e:	7c23      	ldrb	r3, [r4, #16]
   b5e90:	3301      	adds	r3, #1
   b5e92:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   b5e94:	2b0a      	cmp	r3, #10
  _current_value++;
   b5e96:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   b5e98:	dd08      	ble.n	b5eac <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   b5e9a:	7ca3      	ldrb	r3, [r4, #18]
   b5e9c:	b123      	cbz	r3, b5ea8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   b5e9e:	f002 f8bb 	bl	b8018 <_Z16_fetch_usbserialv>
   b5ea2:	4903      	ldr	r1, [pc, #12]	; (b5eb0 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   b5ea4:	f002 fdd9 	bl	b8a5a <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   b5ea8:	230a      	movs	r3, #10
   b5eaa:	7423      	strb	r3, [r4, #16]
  }
}
   b5eac:	bd38      	pop	{r3, r4, r5, pc}
   b5eae:	bf00      	nop
   b5eb0:	000bcce7 	.word	0x000bcce7

000b5eb4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   b5eb4:	b510      	push	{r4, lr}
   b5eb6:	ee10 0a10 	vmov	r0, s0
   b5eba:	b086      	sub	sp, #24
   b5ebc:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   b5ebe:	f003 feb9 	bl	b9c34 <__aeabi_f2d>
   b5ec2:	4602      	mov	r2, r0
   b5ec4:	460b      	mov	r3, r1
   b5ec6:	a801      	add	r0, sp, #4
   b5ec8:	490a      	ldr	r1, [pc, #40]	; (b5ef4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   b5eca:	f001 fb63 	bl	b7594 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   b5ece:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   b5ed0:	2214      	movs	r2, #20
  uint8_t k = 0;
   b5ed2:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   b5ed4:	f810 1b01 	ldrb.w	r1, [r0], #1
   b5ed8:	2920      	cmp	r1, #32
   b5eda:	d006      	beq.n	b5eea <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b5edc:	54e1      	strb	r1, [r4, r3]
      k++;
   b5ede:	3301      	adds	r3, #1
   b5ee0:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   b5ee2:	b911      	cbnz	r1, b5eea <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b5ee4:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   b5ee6:	b006      	add	sp, #24
   b5ee8:	bd10      	pop	{r4, pc}
  while (j < 20) {
   b5eea:	3a01      	subs	r2, #1
   b5eec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   b5ef0:	d1f0      	bne.n	b5ed4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   b5ef2:	e7f8      	b.n	b5ee6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   b5ef4:	000bcd26 	.word	0x000bcd26

000b5ef8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b5ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5efc:	460c      	mov	r4, r1
   b5efe:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   b5f00:	494d      	ldr	r1, [pc, #308]	; (b6038 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b5f02:	f8df 8158 	ldr.w	r8, [pc, #344]	; b605c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5f06:	f8df 9158 	ldr.w	r9, [pc, #344]	; b6060 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
        sprintf(payload, "%s000", payload);
   b5f0a:	f8df a158 	ldr.w	sl, [pc, #344]	; b6064 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x16c>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b5f0e:	4605      	mov	r5, r0
  sprintf(payload, "{");
   b5f10:	4620      	mov	r0, r4
   b5f12:	f004 fab6 	bl	ba482 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   b5f16:	2600      	movs	r6, #0
   b5f18:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b5f1c:	429e      	cmp	r6, r3
   b5f1e:	da69      	bge.n	b5ff4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfc>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5f20:	68eb      	ldr	r3, [r5, #12]
   b5f22:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b5f26:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b5f2a:	ed93 0a02 	vldr	s0, [r3, #8]
   b5f2e:	a903      	add	r1, sp, #12
   b5f30:	4628      	mov	r0, r5
   b5f32:	f7ff ffbf 	bl	b5eb4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b5f36:	68eb      	ldr	r3, [r5, #12]
   b5f38:	a903      	add	r1, sp, #12
   b5f3a:	9100      	str	r1, [sp, #0]
   b5f3c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b5f40:	4622      	mov	r2, r4
   b5f42:	4641      	mov	r1, r8
   b5f44:	4620      	mov	r0, r4
   b5f46:	f001 fb25 	bl	b7594 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5f4a:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5f4c:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5f50:	443b      	add	r3, r7
   b5f52:	68db      	ldr	r3, [r3, #12]
   b5f54:	b33b      	cbz	r3, b5fa6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5f56:	4649      	mov	r1, r9
   b5f58:	4622      	mov	r2, r4
   b5f5a:	4620      	mov	r0, r4
   b5f5c:	f001 fb1a 	bl	b7594 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b5f60:	68eb      	ldr	r3, [r5, #12]
   b5f62:	443b      	add	r3, r7
   b5f64:	6919      	ldr	r1, [r3, #16]
   b5f66:	2900      	cmp	r1, #0
   b5f68:	d037      	beq.n	b5fda <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe2>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f6a:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f6c:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f6e:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f72:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b5f76:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f7a:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f7e:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f82:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f86:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b5f8a:	b2c9      	uxtb	r1, r1
   b5f8c:	9100      	str	r1, [sp, #0]
   b5f8e:	b2db      	uxtb	r3, r3
   b5f90:	492a      	ldr	r1, [pc, #168]	; (b603c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   b5f92:	b2d2      	uxtb	r2, r2
   b5f94:	a802      	add	r0, sp, #8
   b5f96:	f001 fafd 	bl	b7594 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b5f9a:	4929      	ldr	r1, [pc, #164]	; (b6040 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   b5f9c:	ab02      	add	r3, sp, #8
   b5f9e:	4622      	mov	r2, r4
   b5fa0:	4620      	mov	r0, r4
   b5fa2:	f001 faf7 	bl	b7594 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b5fa6:	68eb      	ldr	r3, [r5, #12]
   b5fa8:	443b      	add	r3, r7
   b5faa:	685b      	ldr	r3, [r3, #4]
   b5fac:	b123      	cbz	r3, b5fb8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc0>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   b5fae:	4925      	ldr	r1, [pc, #148]	; (b6044 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   b5fb0:	4622      	mov	r2, r4
   b5fb2:	4620      	mov	r0, r4
   b5fb4:	f001 faee 	bl	b7594 <sprintf>
    sprintf(payload, "%s}", payload);
   b5fb8:	4622      	mov	r2, r4
   b5fba:	4923      	ldr	r1, [pc, #140]	; (b6048 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	f001 fae9 	bl	b7594 <sprintf>
    i++;
   b5fc2:	3601      	adds	r6, #1
    if (i < _current_value) {
   b5fc4:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b5fc8:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b5fca:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b5fcc:	4622      	mov	r2, r4
    if (i < _current_value) {
   b5fce:	da0a      	bge.n	b5fe6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xee>
      sprintf(payload, "%s,", payload);
   b5fd0:	491e      	ldr	r1, [pc, #120]	; (b604c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   b5fd2:	4620      	mov	r0, r4
   b5fd4:	f001 fade 	bl	b7594 <sprintf>
   b5fd8:	e79e      	b.n	b5f18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   b5fda:	4622      	mov	r2, r4
   b5fdc:	4651      	mov	r1, sl
   b5fde:	4620      	mov	r0, r4
   b5fe0:	f001 fad8 	bl	b7594 <sprintf>
   b5fe4:	e7df      	b.n	b5fa6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s}", payload);
   b5fe6:	4918      	ldr	r1, [pc, #96]	; (b6048 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b5fe8:	4620      	mov	r0, r4
   b5fea:	f001 fad3 	bl	b7594 <sprintf>
      _current_value = 0;
   b5fee:	2300      	movs	r3, #0
   b5ff0:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b5ff2:	e791      	b.n	b5f18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   b5ff4:	7cab      	ldrb	r3, [r5, #18]
   b5ff6:	b1db      	cbz	r3, b6030 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>
    Serial.println("----------");
   b5ff8:	f002 f80e 	bl	b8018 <_Z16_fetch_usbserialv>
   b5ffc:	4914      	ldr	r1, [pc, #80]	; (b6050 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b5ffe:	f002 fd2c 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b6002:	f002 f809 	bl	b8018 <_Z16_fetch_usbserialv>
   b6006:	4913      	ldr	r1, [pc, #76]	; (b6054 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   b6008:	f002 fd27 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b600c:	f002 f804 	bl	b8018 <_Z16_fetch_usbserialv>
   b6010:	4621      	mov	r1, r4
   b6012:	f002 fd22 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b6016:	f001 ffff 	bl	b8018 <_Z16_fetch_usbserialv>
   b601a:	490d      	ldr	r1, [pc, #52]	; (b6050 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b601c:	f002 fd1d 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("");
   b6020:	f001 fffa 	bl	b8018 <_Z16_fetch_usbserialv>
   b6024:	490c      	ldr	r1, [pc, #48]	; (b6058 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>)
}
   b6026:	b009      	add	sp, #36	; 0x24
   b6028:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b602c:	f002 bd15 	b.w	b8a5a <_ZN5Print7printlnEPKc>
}
   b6030:	b009      	add	sp, #36	; 0x24
   b6032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6036:	bf00      	nop
   b6038:	000bcd2b 	.word	0x000bcd2b
   b603c:	000bcd53 	.word	0x000bcd53
   b6040:	000bcd5a 	.word	0x000bcd5a
   b6044:	000bcd65 	.word	0x000bcd65
   b6048:	000bcd74 	.word	0x000bcd74
   b604c:	000bcd78 	.word	0x000bcd78
   b6050:	000bcb03 	.word	0x000bcb03
   b6054:	000bcd7c 	.word	0x000bcd7c
   b6058:	000bcc8b 	.word	0x000bcc8b
   b605c:	000bcd2d 	.word	0x000bcd2d
   b6060:	000bcd40 	.word	0x000bcd40
   b6064:	000bcd5f 	.word	0x000bcd5f

000b6068 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b6068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b606c:	460c      	mov	r4, r1
   b606e:	4605      	mov	r5, r0
   b6070:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   b6072:	4953      	ldr	r1, [pc, #332]	; (b61c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b6074:	f8df 8178 	ldr.w	r8, [pc, #376]	; b61f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b6078:	f8df 9178 	ldr.w	r9, [pc, #376]	; b61f4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x18c>
  sprintf(payload, "");
   b607c:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b607e:	4616      	mov	r6, r2
   b6080:	461f      	mov	r7, r3
  sprintf(payload, "");
   b6082:	f004 f9fe 	bl	ba482 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   b6086:	68ab      	ldr	r3, [r5, #8]
   b6088:	4a4e      	ldr	r2, [pc, #312]	; (b61c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   b608a:	494f      	ldr	r1, [pc, #316]	; (b61c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   b608c:	4620      	mov	r0, r4
   b608e:	f001 fa81 	bl	b7594 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   b6092:	4633      	mov	r3, r6
   b6094:	494d      	ldr	r1, [pc, #308]	; (b61cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
   b6096:	9700      	str	r7, [sp, #0]
   b6098:	4622      	mov	r2, r4
   b609a:	4620      	mov	r0, r4
   b609c:	f001 fa7a 	bl	b7594 <sprintf>
  sprintf(payload, "%s=>", payload);
   b60a0:	494b      	ldr	r1, [pc, #300]	; (b61d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b60a2:	4f4a      	ldr	r7, [pc, #296]	; (b61cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
  sprintf(payload, "%s=>", payload);
   b60a4:	4622      	mov	r2, r4
   b60a6:	4620      	mov	r0, r4
   b60a8:	f001 fa74 	bl	b7594 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   b60ac:	2600      	movs	r6, #0
   b60ae:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b60b2:	429e      	cmp	r6, r3
   b60b4:	da63      	bge.n	b617e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x116>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b60b6:	68eb      	ldr	r3, [r5, #12]
   b60b8:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b60bc:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b60c0:	ed93 0a02 	vldr	s0, [r3, #8]
   b60c4:	a903      	add	r1, sp, #12
   b60c6:	4628      	mov	r0, r5
   b60c8:	f7ff fef4 	bl	b5eb4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b60cc:	68eb      	ldr	r3, [r5, #12]
   b60ce:	a903      	add	r1, sp, #12
   b60d0:	9100      	str	r1, [sp, #0]
   b60d2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b60d6:	4622      	mov	r2, r4
   b60d8:	4639      	mov	r1, r7
   b60da:	4620      	mov	r0, r4
   b60dc:	f001 fa5a 	bl	b7594 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b60e0:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b60e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   b60e6:	4453      	add	r3, sl
   b60e8:	685b      	ldr	r3, [r3, #4]
   b60ea:	b123      	cbz	r3, b60f6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b60ec:	4622      	mov	r2, r4
   b60ee:	4641      	mov	r1, r8
   b60f0:	4620      	mov	r0, r4
   b60f2:	f001 fa4f 	bl	b7594 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b60f6:	68eb      	ldr	r3, [r5, #12]
   b60f8:	4453      	add	r3, sl
   b60fa:	68db      	ldr	r3, [r3, #12]
   b60fc:	b333      	cbz	r3, b614c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b60fe:	4649      	mov	r1, r9
   b6100:	4622      	mov	r2, r4
   b6102:	4620      	mov	r0, r4
   b6104:	f001 fa46 	bl	b7594 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b6108:	68eb      	ldr	r3, [r5, #12]
   b610a:	4453      	add	r3, sl
   b610c:	6919      	ldr	r1, [r3, #16]
   b610e:	b349      	cbz	r1, b6164 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfc>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b6110:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b6112:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b6114:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b6118:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b611c:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b6120:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b6124:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b6128:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b612c:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b6130:	b2c9      	uxtb	r1, r1
   b6132:	9100      	str	r1, [sp, #0]
   b6134:	b2db      	uxtb	r3, r3
   b6136:	4927      	ldr	r1, [pc, #156]	; (b61d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   b6138:	b2d2      	uxtb	r2, r2
   b613a:	a802      	add	r0, sp, #8
   b613c:	f001 fa2a 	bl	b7594 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b6140:	4925      	ldr	r1, [pc, #148]	; (b61d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   b6142:	ab02      	add	r3, sp, #8
   b6144:	4622      	mov	r2, r4
   b6146:	4620      	mov	r0, r4
   b6148:	f001 fa24 	bl	b7594 <sprintf>
    if (i < _current_value) {
   b614c:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b6150:	3601      	adds	r6, #1
   b6152:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b6154:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b6156:	4622      	mov	r2, r4
    if (i < _current_value) {
   b6158:	da0a      	bge.n	b6170 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x108>
      sprintf(payload, "%s,", payload);
   b615a:	4920      	ldr	r1, [pc, #128]	; (b61dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   b615c:	4620      	mov	r0, r4
   b615e:	f001 fa19 	bl	b7594 <sprintf>
   b6162:	e7a4      	b.n	b60ae <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   b6164:	491e      	ldr	r1, [pc, #120]	; (b61e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   b6166:	4622      	mov	r2, r4
   b6168:	4620      	mov	r0, r4
   b616a:	f001 fa13 	bl	b7594 <sprintf>
   b616e:	e7ed      	b.n	b614c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s|end", payload);
   b6170:	491c      	ldr	r1, [pc, #112]	; (b61e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   b6172:	4620      	mov	r0, r4
   b6174:	f001 fa0e 	bl	b7594 <sprintf>
      _current_value = 0;
   b6178:	2300      	movs	r3, #0
   b617a:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b617c:	e797      	b.n	b60ae <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   b617e:	7cab      	ldrb	r3, [r5, #18]
   b6180:	b1db      	cbz	r3, b61ba <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x152>
    Serial.println("----------");
   b6182:	f001 ff49 	bl	b8018 <_Z16_fetch_usbserialv>
   b6186:	4918      	ldr	r1, [pc, #96]	; (b61e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b6188:	f002 fc67 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b618c:	f001 ff44 	bl	b8018 <_Z16_fetch_usbserialv>
   b6190:	4916      	ldr	r1, [pc, #88]	; (b61ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>)
   b6192:	f002 fc62 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b6196:	f001 ff3f 	bl	b8018 <_Z16_fetch_usbserialv>
   b619a:	4621      	mov	r1, r4
   b619c:	f002 fc5d 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b61a0:	f001 ff3a 	bl	b8018 <_Z16_fetch_usbserialv>
   b61a4:	4910      	ldr	r1, [pc, #64]	; (b61e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b61a6:	f002 fc58 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("");
   b61aa:	f001 ff35 	bl	b8018 <_Z16_fetch_usbserialv>
   b61ae:	4904      	ldr	r1, [pc, #16]	; (b61c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
}
   b61b0:	b009      	add	sp, #36	; 0x24
   b61b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b61b6:	f002 bc50 	b.w	b8a5a <_ZN5Print7printlnEPKc>
}
   b61ba:	b009      	add	sp, #36	; 0x24
   b61bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b61c0:	000bcc8b 	.word	0x000bcc8b
   b61c4:	000bcaa0 	.word	0x000bcaa0
   b61c8:	000bcd85 	.word	0x000bcd85
   b61cc:	000bcd91 	.word	0x000bcd91
   b61d0:	000bcd99 	.word	0x000bcd99
   b61d4:	000bcd53 	.word	0x000bcd53
   b61d8:	000bcd5a 	.word	0x000bcd5a
   b61dc:	000bcd78 	.word	0x000bcd78
   b61e0:	000bcd5f 	.word	0x000bcd5f
   b61e4:	000bcdab 	.word	0x000bcdab
   b61e8:	000bcb03 	.word	0x000bcb03
   b61ec:	000bcd7c 	.word	0x000bcd7c
   b61f0:	000bcd9e 	.word	0x000bcd9e
   b61f4:	000bcda4 	.word	0x000bcda4

000b61f8 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b61f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b61fc:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b61fe:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b6202:	461e      	mov	r6, r3
   b6204:	460f      	mov	r7, r1
   b6206:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6208:	f001 f9ac 	bl	b7564 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b620c:	7ce3      	ldrb	r3, [r4, #19]
   b620e:	3b01      	subs	r3, #1
   b6210:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6212:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b6214:	d826      	bhi.n	b6264 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   b6216:	4601      	mov	r1, r0
   b6218:	4643      	mov	r3, r8
   b621a:	463a      	mov	r2, r7
   b621c:	4620      	mov	r0, r4
   b621e:	f7ff ff23 	bl	b6068 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   b6222:	7ca3      	ldrb	r3, [r4, #18]
   b6224:	b123      	cbz	r3, b6230 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   b6226:	f001 fef7 	bl	b8018 <_Z16_fetch_usbserialv>
   b622a:	4911      	ldr	r1, [pc, #68]	; (b6270 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   b622c:	f002 fc15 	bl	b8a5a <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   b6230:	6860      	ldr	r0, [r4, #4]
   b6232:	6803      	ldr	r3, [r0, #0]
   b6234:	9600      	str	r6, [sp, #0]
   b6236:	f8d3 9000 	ldr.w	r9, [r3]
   b623a:	4639      	mov	r1, r7
   b623c:	462b      	mov	r3, r5
   b623e:	4642      	mov	r2, r8
   b6240:	47c8      	blx	r9
   b6242:	4607      	mov	r7, r0
  free(payload);
   b6244:	4628      	mov	r0, r5
   b6246:	f001 f995 	bl	b7574 <free>
  delete flags;
   b624a:	b11e      	cbz	r6, b6254 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   b624c:	2101      	movs	r1, #1
   b624e:	4630      	mov	r0, r6
   b6250:	f7fd ff25 	bl	b409e <_ZdlPvj>
  if (result) {
   b6254:	2300      	movs	r3, #0
   b6256:	b107      	cbz	r7, b625a <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   b6258:	7463      	strb	r3, [r4, #17]
}
   b625a:	4638      	mov	r0, r7
  _current_value = 0;
   b625c:	7423      	strb	r3, [r4, #16]
}
   b625e:	b003      	add	sp, #12
   b6260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   b6264:	4601      	mov	r1, r0
   b6266:	4620      	mov	r0, r4
   b6268:	f7ff fe46 	bl	b5ef8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   b626c:	e7d9      	b.n	b6222 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   b626e:	bf00      	nop
   b6270:	000bcdb2 	.word	0x000bcdb2

000b6274 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b6274:	b570      	push	{r4, r5, r6, lr}
   b6276:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   b6278:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b627a:	460d      	mov	r5, r1
   b627c:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   b627e:	f7fd ff0a 	bl	b4096 <_Znwj>
  flags->particle_flag = flag;
   b6282:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   b6284:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   b6286:	462a      	mov	r2, r5
   b6288:	4629      	mov	r1, r5
   b628a:	4620      	mov	r0, r4
}
   b628c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   b6290:	f7ff bfb2 	b.w	b61f8 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000b6294 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6298:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b629a:	2018      	movs	r0, #24
   b629c:	4615      	mov	r5, r2
   b629e:	460f      	mov	r7, r1
   b62a0:	f7fd fef9 	bl	b4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   b62a4:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   b62a8:	686b      	ldr	r3, [r5, #4]
   b62aa:	f8d5 9000 	ldr.w	r9, [r5]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b62ae:	68ba      	ldr	r2, [r7, #8]
   b62b0:	6143      	str	r3, [r0, #20]
   b62b2:	4606      	mov	r6, r0
   b62b4:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   b62b8:	4655      	mov	r5, sl
      bool __comp = true;
   b62ba:	2301      	movs	r3, #1
      while (__x != 0)
   b62bc:	b152      	cbz	r2, b62d4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b62be:	6913      	ldr	r3, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b62c0:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   b62c4:	454b      	cmp	r3, r9
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b62c6:	4615      	mov	r5, r2
   b62c8:	bfcb      	itete	gt
   b62ca:	2301      	movgt	r3, #1
   b62cc:	2300      	movle	r3, #0
   b62ce:	4602      	movgt	r2, r0
   b62d0:	460a      	movle	r2, r1
   b62d2:	e7f3      	b.n	b62bc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   b62d4:	b1ab      	cbz	r3, b6302 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6e>
	  if (__j == begin())
   b62d6:	68fb      	ldr	r3, [r7, #12]
   b62d8:	42ab      	cmp	r3, r5
   b62da:	d024      	beq.n	b6326 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	_M_node = _Rb_tree_decrement(_M_node);
   b62dc:	4628      	mov	r0, r5
   b62de:	f003 f9d3 	bl	b9688 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b62e2:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b62e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b62e8:	454b      	cmp	r3, r9
   b62ea:	db1c      	blt.n	b6326 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	::operator delete(__p
   b62ec:	2118      	movs	r1, #24
   b62ee:	4630      	mov	r0, r6
   b62f0:	f7fd fed5 	bl	b409e <_ZdlPvj>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b62f4:	f8c4 8000 	str.w	r8, [r4]
   b62f8:	2300      	movs	r3, #0
   b62fa:	7123      	strb	r3, [r4, #4]
      }
   b62fc:	4620      	mov	r0, r4
   b62fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6302:	46a8      	mov	r8, r5
   b6304:	e7ee      	b.n	b62e4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   b6306:	6928      	ldr	r0, [r5, #16]
   b6308:	4581      	cmp	r9, r0
   b630a:	bfac      	ite	ge
   b630c:	2000      	movge	r0, #0
   b630e:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b6310:	4653      	mov	r3, sl
   b6312:	462a      	mov	r2, r5
   b6314:	4631      	mov	r1, r6
   b6316:	f003 f9b9 	bl	b968c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b631a:	697b      	ldr	r3, [r7, #20]
   b631c:	6026      	str	r6, [r4, #0]
   b631e:	3301      	adds	r3, #1
   b6320:	617b      	str	r3, [r7, #20]
   b6322:	2301      	movs	r3, #1
   b6324:	e7e9      	b.n	b62fa <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x66>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b6326:	45aa      	cmp	sl, r5
   b6328:	d1ed      	bne.n	b6306 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x72>
			    || _M_impl._M_key_compare(_S_key(__z),
   b632a:	2001      	movs	r0, #1
   b632c:	e7f0      	b.n	b6310 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7c>
	...

000b6330 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   b6330:	b508      	push	{r3, lr}
        val_(val) {
   b6332:	4b07      	ldr	r3, [pc, #28]	; (b6350 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   b6334:	4807      	ldr	r0, [pc, #28]	; (b6354 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   b6336:	2200      	movs	r2, #0
   b6338:	701a      	strb	r2, [r3, #0]
   b633a:	f001 fcdb 	bl	b7cf4 <_ZN9TCPClientC1Ev>
   b633e:	4806      	ldr	r0, [pc, #24]	; (b6358 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   b6340:	f001 fcd8 	bl	b7cf4 <_ZN9TCPClientC1Ev>
   b6344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6348:	4804      	ldr	r0, [pc, #16]	; (b635c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   b634a:	f002 bf2f 	b.w	b91ac <_ZN3UDPC1Ev>
   b634e:	bf00      	nop
   b6350:	2003e654 	.word	0x2003e654
   b6354:	2003e638 	.word	0x2003e638
   b6358:	2003e5d0 	.word	0x2003e5d0
   b635c:	2003e5ec 	.word	0x2003e5ec

000b6360 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   b6360:	7501      	strb	r1, [r0, #20]
   b6362:	4770      	bx	lr

000b6364 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6364:	b538      	push	{r3, r4, r5, lr}
   b6366:	4604      	mov	r4, r0
      while (__x != 0)
   b6368:	b14c      	cbz	r4, b637e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x1a>
	  _M_erase(_S_right(__x));
   b636a:	68e0      	ldr	r0, [r4, #12]
   b636c:	f7ff fffa 	bl	b6364 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b6370:	68a5      	ldr	r5, [r4, #8]
   b6372:	4620      	mov	r0, r4
   b6374:	2118      	movs	r1, #24
   b6376:	f7fd fe92 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b637a:	462c      	mov	r4, r5
      while (__x != 0)
   b637c:	e7f4      	b.n	b6368 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x4>
    }
   b637e:	bd38      	pop	{r3, r4, r5, pc}

000b6380 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b6380:	b530      	push	{r4, r5, lr}
   b6382:	4d06      	ldr	r5, [pc, #24]	; (b639c <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   b6384:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b6386:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b638a:	2500      	movs	r5, #0
  _token = token;
   b638c:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b638e:	7505      	strb	r5, [r0, #20]
   b6390:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b6394:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b6398:	6185      	str	r5, [r0, #24]
}
   b639a:	bd30      	pop	{r4, r5, pc}
   b639c:	000bce5c 	.word	0x000bce5c

000b63a0 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   b63a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63a4:	460d      	mov	r5, r1
   b63a6:	4617      	mov	r7, r2
   b63a8:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   b63aa:	f001 fe35 	bl	b8018 <_Z16_fetch_usbserialv>
   b63ae:	491e      	ldr	r1, [pc, #120]	; (b6428 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b63b0:	4e1e      	ldr	r6, [pc, #120]	; (b642c <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   b63b2:	f8df a07c 	ldr.w	sl, [pc, #124]	; b6430 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   b63b6:	f8df b07c 	ldr.w	fp, [pc, #124]	; b6434 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   b63ba:	f002 fb4e 	bl	b8a5a <_ZN5Print7printlnEPKc>
   b63be:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b63c0:	4630      	mov	r0, r6
   b63c2:	f001 fc5e 	bl	b7c82 <_ZN9TCPClient6statusEv>
   b63c6:	bb60      	cbnz	r0, b6422 <_ZN6UbiTCP9reconnectEPKci+0x82>
   b63c8:	2c05      	cmp	r4, #5
   b63ca:	d02a      	beq.n	b6422 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   b63cc:	f898 3014 	ldrb.w	r3, [r8, #20]
   b63d0:	b1c3      	cbz	r3, b6404 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   b63d2:	f001 fe21 	bl	b8018 <_Z16_fetch_usbserialv>
   b63d6:	4651      	mov	r1, sl
   b63d8:	f002 fb2c 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(host);
   b63dc:	f001 fe1c 	bl	b8018 <_Z16_fetch_usbserialv>
   b63e0:	4629      	mov	r1, r5
   b63e2:	f002 fb27 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b63e6:	f001 fe17 	bl	b8018 <_Z16_fetch_usbserialv>
   b63ea:	4659      	mov	r1, fp
   b63ec:	f002 fb22 	bl	b8a34 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b63f0:	f001 fe12 	bl	b8018 <_Z16_fetch_usbserialv>
   b63f4:	220a      	movs	r2, #10
   b63f6:	4681      	mov	r9, r0
   b63f8:	4621      	mov	r1, r4
   b63fa:	f002 fb38 	bl	b8a6e <_ZN5Print11printNumberEmh>
        n += println();
   b63fe:	4648      	mov	r0, r9
   b6400:	f002 fb1f 	bl	b8a42 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   b6404:	4630      	mov	r0, r6
   b6406:	f001 fc25 	bl	b7c54 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   b640a:	2300      	movs	r3, #0
   b640c:	b2ba      	uxth	r2, r7
   b640e:	4629      	mov	r1, r5
   b6410:	4630      	mov	r0, r6
   b6412:	f001 fa69 	bl	b78e8 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   b6416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b641a:	f002 fa51 	bl	b88c0 <delay>
   b641e:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b6420:	e7ce      	b.n	b63c0 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   b6422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6426:	bf00      	nop
   b6428:	000bcdc2 	.word	0x000bcdc2
   b642c:	2003e658 	.word	0x2003e658
   b6430:	000bcab4 	.word	0x000bcab4
   b6434:	000bcaca 	.word	0x000bcaca

000b6438 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b6438:	b570      	push	{r4, r5, r6, lr}
   b643a:	4604      	mov	r4, r0
   b643c:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   b643e:	6881      	ldr	r1, [r0, #8]
   b6440:	482e      	ldr	r0, [pc, #184]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b6442:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   b6444:	f002 faf6 	bl	b8a34 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   b6448:	492d      	ldr	r1, [pc, #180]	; (b6500 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b644a:	482c      	ldr	r0, [pc, #176]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b644c:	f002 faf2 	bl	b8a34 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   b6450:	68e1      	ldr	r1, [r4, #12]
   b6452:	482a      	ldr	r0, [pc, #168]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6454:	f002 faee 	bl	b8a34 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   b6458:	492a      	ldr	r1, [pc, #168]	; (b6504 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b645a:	4828      	ldr	r0, [pc, #160]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b645c:	f002 faea 	bl	b8a34 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   b6460:	4631      	mov	r1, r6
   b6462:	4826      	ldr	r0, [pc, #152]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6464:	f002 fae6 	bl	b8a34 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   b6468:	4927      	ldr	r1, [pc, #156]	; (b6508 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b646a:	4824      	ldr	r0, [pc, #144]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b646c:	f002 fae2 	bl	b8a34 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   b6470:	4629      	mov	r1, r5
   b6472:	4822      	ldr	r0, [pc, #136]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6474:	f002 fade 	bl	b8a34 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   b6478:	4924      	ldr	r1, [pc, #144]	; (b650c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b647a:	4820      	ldr	r0, [pc, #128]	; (b64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b647c:	f002 fada 	bl	b8a34 <_ZN5Print5printEPKc>
  if (_debug) {
   b6480:	7d23      	ldrb	r3, [r4, #20]
   b6482:	2b00      	cmp	r3, #0
   b6484:	d038      	beq.n	b64f8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   b6486:	f001 fdc7 	bl	b8018 <_Z16_fetch_usbserialv>
   b648a:	4921      	ldr	r1, [pc, #132]	; (b6510 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   b648c:	f002 fae5 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   b6490:	f001 fdc2 	bl	b8018 <_Z16_fetch_usbserialv>
   b6494:	491f      	ldr	r1, [pc, #124]	; (b6514 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   b6496:	f002 fae0 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   b649a:	f001 fdbd 	bl	b8018 <_Z16_fetch_usbserialv>
   b649e:	68a1      	ldr	r1, [r4, #8]
   b64a0:	f002 fac8 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   b64a4:	f001 fdb8 	bl	b8018 <_Z16_fetch_usbserialv>
   b64a8:	4915      	ldr	r1, [pc, #84]	; (b6500 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b64aa:	f002 fac3 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.print(_token);
   b64ae:	f001 fdb3 	bl	b8018 <_Z16_fetch_usbserialv>
   b64b2:	68e1      	ldr	r1, [r4, #12]
   b64b4:	f002 fabe 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.print("|");
   b64b8:	f001 fdae 	bl	b8018 <_Z16_fetch_usbserialv>
   b64bc:	4911      	ldr	r1, [pc, #68]	; (b6504 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b64be:	f002 fab9 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   b64c2:	f001 fda9 	bl	b8018 <_Z16_fetch_usbserialv>
   b64c6:	4631      	mov	r1, r6
   b64c8:	f002 fab4 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.print(":");
   b64cc:	f001 fda4 	bl	b8018 <_Z16_fetch_usbserialv>
   b64d0:	490d      	ldr	r1, [pc, #52]	; (b6508 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b64d2:	f002 faaf 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   b64d6:	f001 fd9f 	bl	b8018 <_Z16_fetch_usbserialv>
   b64da:	4629      	mov	r1, r5
   b64dc:	f002 faaa 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.print("|end");
   b64e0:	f001 fd9a 	bl	b8018 <_Z16_fetch_usbserialv>
   b64e4:	4909      	ldr	r1, [pc, #36]	; (b650c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b64e6:	f002 faa5 	bl	b8a34 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   b64ea:	f001 fd95 	bl	b8018 <_Z16_fetch_usbserialv>
}
   b64ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   b64f2:	4909      	ldr	r1, [pc, #36]	; (b6518 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   b64f4:	f002 bab1 	b.w	b8a5a <_ZN5Print7printlnEPKc>
}
   b64f8:	bd70      	pop	{r4, r5, r6, pc}
   b64fa:	bf00      	nop
   b64fc:	2003e658 	.word	0x2003e658
   b6500:	000bcdda 	.word	0x000bcdda
   b6504:	000bcddd 	.word	0x000bcddd
   b6508:	000bcd83 	.word	0x000bcd83
   b650c:	000bcdad 	.word	0x000bcdad
   b6510:	000bcdf5 	.word	0x000bcdf5
   b6514:	000bcddf 	.word	0x000bcddf
   b6518:	000bcdf4 	.word	0x000bcdf4

000b651c <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   b651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b651e:	4f0e      	ldr	r7, [pc, #56]	; (b6558 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   b6520:	4604      	mov	r4, r0
  int timeout = 0;
   b6522:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b6524:	4638      	mov	r0, r7
   b6526:	f001 fb3b 	bl	b7ba0 <_ZN9TCPClient9availableEv>
   b652a:	4605      	mov	r5, r0
   b652c:	b990      	cbnz	r0, b6554 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   b652e:	69a3      	ldr	r3, [r4, #24]
   b6530:	42b3      	cmp	r3, r6
   b6532:	dd0f      	ble.n	b6554 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   b6534:	2001      	movs	r0, #1
   b6536:	f002 f9c3 	bl	b88c0 <delay>
    if (timeout > _timeout - 1) {
   b653a:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b653c:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b653e:	42b3      	cmp	r3, r6
   b6540:	dcf0      	bgt.n	b6524 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
   b6542:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b6544:	b128      	cbz	r0, b6552 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b6546:	f001 fd67 	bl	b8018 <_Z16_fetch_usbserialv>
   b654a:	4904      	ldr	r1, [pc, #16]	; (b655c <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   b654c:	f002 fa85 	bl	b8a5a <_ZN5Print7printlnEPKc>
   b6550:	4628      	mov	r0, r5
}
   b6552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b6554:	2001      	movs	r0, #1
   b6556:	e7fc      	b.n	b6552 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   b6558:	2003e658 	.word	0x2003e658
   b655c:	000bcb0e 	.word	0x000bcb0e

000b6560 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b6560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   b6564:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b6566:	4606      	mov	r6, r0
   b6568:	4688      	mov	r8, r1
   b656a:	4614      	mov	r4, r2
  if (_debug) {
   b656c:	b14b      	cbz	r3, b6582 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   b656e:	f001 fd53 	bl	b8018 <_Z16_fetch_usbserialv>
   b6572:	4927      	ldr	r1, [pc, #156]	; (b6610 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   b6574:	f002 fa71 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b6578:	f001 fd4e 	bl	b8018 <_Z16_fetch_usbserialv>
   b657c:	4925      	ldr	r1, [pc, #148]	; (b6614 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   b657e:	f002 fa6c 	bl	b8a5a <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b6582:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6628 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b6586:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6588:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b658c:	4648      	mov	r0, r9
   b658e:	f001 fb07 	bl	b7ba0 <_ZN9TCPClient9availableEv>
   b6592:	b178      	cbz	r0, b65b4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   b6594:	4648      	mov	r0, r9
   b6596:	f001 f911 	bl	b77bc <_ZN9TCPClient4readEv>
    if (_debug) {
   b659a:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   b659c:	b2c7      	uxtb	r7, r0
    if (_debug) {
   b659e:	b12b      	cbz	r3, b65ac <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   b65a0:	f001 fd3a 	bl	b8018 <_Z16_fetch_usbserialv>
   b65a4:	6803      	ldr	r3, [r0, #0]
   b65a6:	4639      	mov	r1, r7
   b65a8:	689b      	ldr	r3, [r3, #8]
   b65aa:	4798      	blx	r3
    response[j] = c;
   b65ac:	5567      	strb	r7, [r4, r5]
    j++;
   b65ae:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b65b0:	4555      	cmp	r5, sl
   b65b2:	d1eb      	bne.n	b658c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   b65b4:	7d33      	ldrb	r3, [r6, #20]
   b65b6:	b123      	cbz	r3, b65c2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   b65b8:	f001 fd2e 	bl	b8018 <_Z16_fetch_usbserialv>
   b65bc:	4916      	ldr	r1, [pc, #88]	; (b6618 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   b65be:	f002 fa4c 	bl	b8a5a <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b65c2:	2300      	movs	r3, #0
   b65c4:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   b65c6:	4915      	ldr	r1, [pc, #84]	; (b661c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   b65c8:	4640      	mov	r0, r8
   b65ca:	f003 ff50 	bl	ba46e <strcmp>
   b65ce:	b968      	cbnz	r0, b65ec <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   b65d0:	4913      	ldr	r1, [pc, #76]	; (b6620 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   b65d2:	4620      	mov	r0, r4
   b65d4:	f003 ffaa 	bl	ba52c <strstr>
      result = 1;
   b65d8:	ed9f 0a12 	vldr	s0, [pc, #72]	; b6624 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b65dc:	2800      	cmp	r0, #0
   b65de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b65e2:	bf18      	it	ne
   b65e4:	eeb0 0a67 	vmovne.f32	s0, s15
}
   b65e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   b65ec:	217c      	movs	r1, #124	; 0x7c
   b65ee:	4620      	mov	r0, r4
   b65f0:	f003 ff30 	bl	ba454 <strchr>
  if (pch != NULL) {
   b65f4:	b148      	cbz	r0, b660a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   b65f6:	3001      	adds	r0, #1
   b65f8:	f003 fea2 	bl	ba340 <atof>
   b65fc:	ec51 0b10 	vmov	r0, r1, d0
   b6600:	f003 fe2a 	bl	ba258 <__aeabi_d2f>
   b6604:	ee00 0a10 	vmov	s0, r0
   b6608:	e7ee      	b.n	b65e8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   b660a:	ed9f 0a06 	vldr	s0, [pc, #24]	; b6624 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b660e:	e7eb      	b.n	b65e8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   b6610:	000bcb03 	.word	0x000bcb03
   b6614:	000bcaef 	.word	0x000bcaef
   b6618:	000bcb02 	.word	0x000bcb02
   b661c:	000bcdfa 	.word	0x000bcdfa
   b6620:	000bcdff 	.word	0x000bcdff
   b6624:	cda2425f 	.word	0xcda2425f
   b6628:	2003e658 	.word	0x2003e658

000b662c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b662c:	b570      	push	{r4, r5, r6, lr}
   b662e:	ed2d 8b02 	vpush	{d8}
   b6632:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6634:	6841      	ldr	r1, [r0, #4]
   b6636:	4822      	ldr	r0, [pc, #136]	; (b66c0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6638:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b663c:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b663e:	2300      	movs	r3, #0
   b6640:	f001 f952 	bl	b78e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6644:	4620      	mov	r0, r4
   b6646:	6861      	ldr	r1, [r4, #4]
   b6648:	f242 3234 	movw	r2, #9012	; 0x2334
   b664c:	f7ff fea8 	bl	b63a0 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b6650:	481b      	ldr	r0, [pc, #108]	; (b66c0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6652:	f001 f9c7 	bl	b79e4 <_ZN9TCPClient9connectedEv>
   b6656:	b180      	cbz	r0, b667a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.print(payload);
   b6658:	4629      	mov	r1, r5
   b665a:	4819      	ldr	r0, [pc, #100]	; (b66c0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b665c:	f002 f9ea 	bl	b8a34 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   b6660:	4620      	mov	r0, r4
   b6662:	f7ff ff5b 	bl	b651c <_ZN6UbiTCP16waitServerAnswerEv>
   b6666:	4605      	mov	r5, r0
   b6668:	b980      	cbnz	r0, b668c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x60>
    _client_tcp_ubi.stop();
   b666a:	4815      	ldr	r0, [pc, #84]	; (b66c0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b666c:	f001 faf2 	bl	b7c54 <_ZN9TCPClient4stopEv>
    return false;
   b6670:	2500      	movs	r5, #0
}
   b6672:	ecbd 8b02 	vpop	{d8}
   b6676:	4628      	mov	r0, r5
   b6678:	bd70      	pop	{r4, r5, r6, pc}
    if (_debug) {
   b667a:	7d23      	ldrb	r3, [r4, #20]
   b667c:	2b00      	cmp	r3, #0
   b667e:	d0f4      	beq.n	b666a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   b6680:	f001 fcca 	bl	b8018 <_Z16_fetch_usbserialv>
   b6684:	490f      	ldr	r1, [pc, #60]	; (b66c4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   b6686:	f002 f9e8 	bl	b8a5a <_ZN5Print7printlnEPKc>
   b668a:	e7ee      	b.n	b666a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
  char* response = (char*)malloc(sizeof(char) * 100);
   b668c:	2064      	movs	r0, #100	; 0x64
   b668e:	f000 ff69 	bl	b7564 <malloc>
  float value = parseTCPAnswer("POST", response);
   b6692:	490d      	ldr	r1, [pc, #52]	; (b66c8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>)
   b6694:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   b6696:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   b6698:	4620      	mov	r0, r4
   b669a:	f7ff ff61 	bl	b6560 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   b669e:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   b66a0:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   b66a4:	f000 ff66 	bl	b7574 <free>
  if (value != ERROR_VALUE) {
   b66a8:	eddf 7a08 	vldr	s15, [pc, #32]	; b66cc <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>
   b66ac:	eeb4 8a67 	vcmp.f32	s16, s15
   b66b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b66b4:	d0d9      	beq.n	b666a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   b66b6:	4802      	ldr	r0, [pc, #8]	; (b66c0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b66b8:	f001 facc 	bl	b7c54 <_ZN9TCPClient4stopEv>
    return true;
   b66bc:	e7d9      	b.n	b6672 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
   b66be:	bf00      	nop
   b66c0:	2003e658 	.word	0x2003e658
   b66c4:	000bce02 	.word	0x000bce02
   b66c8:	000bcdfa 	.word	0x000bcdfa
   b66cc:	cda2425f 	.word	0xcda2425f

000b66d0 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b66d0:	b570      	push	{r4, r5, r6, lr}
   b66d2:	ed2d 8b02 	vpush	{d8}
   b66d6:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b66d8:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b66da:	460d      	mov	r5, r1
   b66dc:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b66de:	6841      	ldr	r1, [r0, #4]
   b66e0:	481e      	ldr	r0, [pc, #120]	; (b675c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b66e2:	f242 3234 	movw	r2, #9012	; 0x2334
   b66e6:	f001 f8ff 	bl	b78e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b66ea:	4620      	mov	r0, r4
   b66ec:	6861      	ldr	r1, [r4, #4]
   b66ee:	f242 3234 	movw	r2, #9012	; 0x2334
   b66f2:	f7ff fe55 	bl	b63a0 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b66f6:	4819      	ldr	r0, [pc, #100]	; (b675c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b66f8:	f001 f974 	bl	b79e4 <_ZN9TCPClient9connectedEv>
   b66fc:	b328      	cbz	r0, b674a <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   b66fe:	4620      	mov	r0, r4
   b6700:	4632      	mov	r2, r6
   b6702:	4629      	mov	r1, r5
   b6704:	f7ff fe98 	bl	b6438 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6708:	4620      	mov	r0, r4
   b670a:	f7ff ff07 	bl	b651c <_ZN6UbiTCP16waitServerAnswerEv>
   b670e:	b948      	cbnz	r0, b6724 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   b6710:	4812      	ldr	r0, [pc, #72]	; (b675c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   b6712:	ed9f 8a13 	vldr	s16, [pc, #76]	; b6760 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   b6716:	f001 fa9d 	bl	b7c54 <_ZN9TCPClient4stopEv>
}
   b671a:	eeb0 0a48 	vmov.f32	s0, s16
   b671e:	ecbd 8b02 	vpop	{d8}
   b6722:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6724:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6728:	f000 ff1c 	bl	b7564 <malloc>
    float value = parseTCPAnswer("LV", response);
   b672c:	490d      	ldr	r1, [pc, #52]	; (b6764 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   b672e:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6730:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   b6732:	4620      	mov	r0, r4
   b6734:	f7ff ff14 	bl	b6560 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   b6738:	4808      	ldr	r0, [pc, #32]	; (b675c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   b673a:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   b673e:	f001 fa89 	bl	b7c54 <_ZN9TCPClient4stopEv>
    free(response);
   b6742:	4628      	mov	r0, r5
   b6744:	f000 ff16 	bl	b7574 <free>
    return value;
   b6748:	e7e7      	b.n	b671a <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   b674a:	7d23      	ldrb	r3, [r4, #20]
   b674c:	2b00      	cmp	r3, #0
   b674e:	d0df      	beq.n	b6710 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   b6750:	f001 fc62 	bl	b8018 <_Z16_fetch_usbserialv>
   b6754:	4904      	ldr	r1, [pc, #16]	; (b6768 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   b6756:	f002 f980 	bl	b8a5a <_ZN5Print7printlnEPKc>
   b675a:	e7d9      	b.n	b6710 <_ZN6UbiTCP3getEPKcS1_+0x40>
   b675c:	2003e658 	.word	0x2003e658
   b6760:	cda2425f 	.word	0xcda2425f
   b6764:	000bce20 	.word	0x000bce20
   b6768:	000bce23 	.word	0x000bce23

000b676c <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   b676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b6770:	460d      	mov	r5, r1
   b6772:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6774:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6778:	f000 fef4 	bl	b7564 <malloc>
  if (_debug) {
   b677c:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b677e:	4607      	mov	r7, r0
  if (_debug) {
   b6780:	b14b      	cbz	r3, b6796 <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   b6782:	f001 fc49 	bl	b8018 <_Z16_fetch_usbserialv>
   b6786:	493a      	ldr	r1, [pc, #232]	; (b6870 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   b6788:	f002 f967 	bl	b8a5a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b678c:	f001 fc44 	bl	b8018 <_Z16_fetch_usbserialv>
   b6790:	4938      	ldr	r1, [pc, #224]	; (b6874 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   b6792:	f002 f962 	bl	b8a5a <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b6796:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b6888 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   b679a:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b679c:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b67a0:	4648      	mov	r0, r9
   b67a2:	f001 f9fd 	bl	b7ba0 <_ZN9TCPClient9availableEv>
   b67a6:	b188      	cbz	r0, b67cc <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   b67a8:	4648      	mov	r0, r9
   b67aa:	f001 f807 	bl	b77bc <_ZN9TCPClient4readEv>
    if (_debug) {
   b67ae:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   b67b0:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   b67b4:	b12b      	cbz	r3, b67c2 <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   b67b6:	f001 fc2f 	bl	b8018 <_Z16_fetch_usbserialv>
   b67ba:	6803      	ldr	r3, [r0, #0]
   b67bc:	4641      	mov	r1, r8
   b67be:	689b      	ldr	r3, [r3, #8]
   b67c0:	4798      	blx	r3
    response[j] = c;
   b67c2:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   b67c6:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b67c8:	4556      	cmp	r6, sl
   b67ca:	d1e9      	bne.n	b67a0 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   b67cc:	7d2b      	ldrb	r3, [r5, #20]
   b67ce:	b123      	cbz	r3, b67da <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   b67d0:	f001 fc22 	bl	b8018 <_Z16_fetch_usbserialv>
   b67d4:	4928      	ldr	r1, [pc, #160]	; (b6878 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   b67d6:	f002 f940 	bl	b8a5a <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b67da:	2500      	movs	r5, #0
	  : _Node_allocator()
   b67dc:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   b67de:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   b67e2:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   b67e6:	4925      	ldr	r1, [pc, #148]	; (b687c <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   b67e8:	7125      	strb	r5, [r4, #4]
   b67ea:	4638      	mov	r0, r7
  response[j] = '\0';
   b67ec:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   b67ee:	f004 fce1 	bl	bb1b4 <strtok>
    if (strcmp(token, "OK") == 0) {
   b67f2:	f8df 9098 	ldr.w	r9, [pc, #152]	; b688c <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   b67f6:	f8df a098 	ldr.w	sl, [pc, #152]	; b6890 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   b67fa:	f8df 8080 	ldr.w	r8, [pc, #128]	; b687c <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   b67fe:	4606      	mov	r6, r0
  while (token != NULL) {
   b6800:	b37e      	cbz	r6, b6862 <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   b6802:	4649      	mov	r1, r9
   b6804:	4630      	mov	r0, r6
   b6806:	f003 fe32 	bl	ba46e <strcmp>
   b680a:	bb00      	cbnz	r0, b684e <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   b680c:	4641      	mov	r1, r8
   b680e:	f004 fcd1 	bl	bb1b4 <strtok>
      if (strcmp(token, "null") == 0) {
   b6812:	491b      	ldr	r1, [pc, #108]	; (b6880 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   b6814:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   b6816:	f003 fe2a 	bl	ba46e <strcmp>
   b681a:	b918      	cbnz	r0, b6824 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b681c:	4b19      	ldr	r3, [pc, #100]	; (b6884 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   b681e:	9500      	str	r5, [sp, #0]
   b6820:	9301      	str	r3, [sp, #4]
   b6822:	e008      	b.n	b6836 <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   b6824:	4630      	mov	r0, r6
   b6826:	f003 fd8b 	bl	ba340 <atof>
   b682a:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b682e:	9500      	str	r5, [sp, #0]
   b6830:	f003 fd12 	bl	ba258 <__aeabi_d2f>
   b6834:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   b6836:	466a      	mov	r2, sp
   b6838:	4621      	mov	r1, r4
   b683a:	a802      	add	r0, sp, #8
   b683c:	f7ff fd2a 	bl	b6294 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   b6840:	4641      	mov	r1, r8
   b6842:	2000      	movs	r0, #0
   b6844:	f004 fcb6 	bl	bb1b4 <strtok>
    mapKey++;
   b6848:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   b684a:	4606      	mov	r6, r0
  while (token != NULL) {
   b684c:	e7d8      	b.n	b6800 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   b684e:	4651      	mov	r1, sl
   b6850:	4630      	mov	r0, r6
   b6852:	f003 fe0c 	bl	ba46e <strcmp>
   b6856:	2800      	cmp	r0, #0
   b6858:	d1f2      	bne.n	b6840 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   b685a:	4641      	mov	r1, r8
   b685c:	f004 fcaa 	bl	bb1b4 <strtok>
   b6860:	e7dc      	b.n	b681c <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   b6862:	4638      	mov	r0, r7
   b6864:	f000 fe86 	bl	b7574 <free>
}
   b6868:	4620      	mov	r0, r4
   b686a:	b004      	add	sp, #16
   b686c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6870:	000bcb03 	.word	0x000bcb03
   b6874:	000bcaef 	.word	0x000bcaef
   b6878:	000bcb02 	.word	0x000bcb02
   b687c:	000bcddd 	.word	0x000bcddd
   b6880:	000bce49 	.word	0x000bce49
   b6884:	cda2425f 	.word	0xcda2425f
   b6888:	2003e658 	.word	0x2003e658
   b688c:	000bcdff 	.word	0x000bcdff
   b6890:	000bce4e 	.word	0x000bce4e

000b6894 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b6894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   b6898:	1d07      	adds	r7, r0, #4
   b689a:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   b689c:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b689e:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   b68a2:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   b68a6:	7103      	strb	r3, [r0, #4]
   b68a8:	460d      	mov	r5, r1
   b68aa:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b68ac:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b68ae:	4604      	mov	r4, r0
   b68b0:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b68b2:	482d      	ldr	r0, [pc, #180]	; (b6968 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b68b4:	f242 3234 	movw	r2, #9012	; 0x2334
   b68b8:	f001 f816 	bl	b78e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b68bc:	4628      	mov	r0, r5
   b68be:	6869      	ldr	r1, [r5, #4]
   b68c0:	f242 3234 	movw	r2, #9012	; 0x2334
   b68c4:	f7ff fd6c 	bl	b63a0 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b68c8:	4827      	ldr	r0, [pc, #156]	; (b6968 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b68ca:	f001 f88b 	bl	b79e4 <_ZN9TCPClient9connectedEv>
   b68ce:	b310      	cbz	r0, b6916 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   b68d0:	4631      	mov	r1, r6
   b68d2:	4642      	mov	r2, r8
   b68d4:	4628      	mov	r0, r5
   b68d6:	f7ff fdaf 	bl	b6438 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b68da:	4628      	mov	r0, r5
   b68dc:	f7ff fe1e 	bl	b651c <_ZN6UbiTCP16waitServerAnswerEv>
   b68e0:	4606      	mov	r6, r0
   b68e2:	b9c0      	cbnz	r0, b6916 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   b68e4:	4820      	ldr	r0, [pc, #128]	; (b6968 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   b68e6:	4f21      	ldr	r7, [pc, #132]	; (b696c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   b68e8:	f001 f9b4 	bl	b7c54 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   b68ec:	4920      	ldr	r1, [pc, #128]	; (b6970 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   b68ee:	4640      	mov	r0, r8
   b68f0:	f004 fc60 	bl	bb1b4 <strtok>
      int mapKey = 0;
   b68f4:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   b68f6:	4e1e      	ldr	r6, [pc, #120]	; (b6970 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
      while (token != NULL) {
   b68f8:	2800      	cmp	r0, #0
   b68fa:	d030      	beq.n	b695e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xca>
   b68fc:	4621      	mov	r1, r4
   b68fe:	a802      	add	r0, sp, #8
   b6900:	466a      	mov	r2, sp
   b6902:	9500      	str	r5, [sp, #0]
   b6904:	9701      	str	r7, [sp, #4]
   b6906:	f7ff fcc5 	bl	b6294 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   b690a:	4631      	mov	r1, r6
   b690c:	2000      	movs	r0, #0
        mapKey++;
   b690e:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   b6910:	f004 fc50 	bl	bb1b4 <strtok>
      while (token != NULL) {
   b6914:	e7f0      	b.n	b68f8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   b6916:	4629      	mov	r1, r5
   b6918:	a802      	add	r0, sp, #8
   b691a:	f7ff ff27 	bl	b676c <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   b691e:	68a0      	ldr	r0, [r4, #8]
   b6920:	f7ff fd20 	bl	b6364 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      if (__x._M_root() != nullptr)
   b6924:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   b6926:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b6928:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   b692c:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   b6930:	b17a      	cbz	r2, b6952 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xbe>
      _M_header._M_color = __from._M_header._M_color;
   b6932:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b6936:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   b6938:	9905      	ldr	r1, [sp, #20]
   b693a:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   b693c:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   b693e:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   b6940:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   b6942:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   b6944:	9a07      	ldr	r2, [sp, #28]
   b6946:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   b6948:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   b694a:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   b694e:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   b6950:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   b6952:	9804      	ldr	r0, [sp, #16]
   b6954:	f7ff fd06 	bl	b6364 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
  _client_tcp_ubi.stop();
   b6958:	4803      	ldr	r0, [pc, #12]	; (b6968 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b695a:	f001 f97b 	bl	b7c54 <_ZN9TCPClient4stopEv>
}
   b695e:	4620      	mov	r0, r4
   b6960:	b008      	add	sp, #32
   b6962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6966:	bf00      	nop
   b6968:	2003e658 	.word	0x2003e658
   b696c:	cda2425f 	.word	0xcda2425f
   b6970:	000bcd7a 	.word	0x000bcd7a

000b6974 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   b6974:	4801      	ldr	r0, [pc, #4]	; (b697c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   b6976:	f001 b9bd 	b.w	b7cf4 <_ZN9TCPClientC1Ev>
   b697a:	bf00      	nop
   b697c:	2003e658 	.word	0x2003e658

000b6980 <_ZN9IPAddressC1ERKS_>:
   b6980:	b570      	push	{r4, r5, r6, lr}
   b6982:	4604      	mov	r4, r0
   b6984:	4b05      	ldr	r3, [pc, #20]	; (b699c <_ZN9IPAddressC1ERKS_+0x1c>)
   b6986:	f844 3b04 	str.w	r3, [r4], #4
   b698a:	1d0d      	adds	r5, r1, #4
   b698c:	4606      	mov	r6, r0
   b698e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6992:	682b      	ldr	r3, [r5, #0]
   b6994:	7023      	strb	r3, [r4, #0]
   b6996:	4630      	mov	r0, r6
   b6998:	bd70      	pop	{r4, r5, r6, pc}
   b699a:	bf00      	nop
   b699c:	000bd004 	.word	0x000bd004

000b69a0 <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   b69a0:	b538      	push	{r3, r4, r5, lr}
   b69a2:	4604      	mov	r4, r0
   b69a4:	3098      	adds	r0, #152	; 0x98
   b69a6:	460d      	mov	r5, r1
   b69a8:	f001 fb96 	bl	b80d8 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   b69ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b69b0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   b69b4:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   b69b6:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   b69b8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   b69bc:	4620      	mov	r0, r4
   b69be:	bd38      	pop	{r3, r4, r5, pc}

000b69c0 <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   b69c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69c4:	4605      	mov	r5, r0
   b69c6:	460e      	mov	r6, r1
   b69c8:	f000 fc3c 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b69cc:	f643 2897 	movw	r8, #14999	; 0x3a97
   b69d0:	4607      	mov	r7, r0
   while(!_client->available()) {
   b69d2:	6828      	ldr	r0, [r5, #0]
   b69d4:	6803      	ldr	r3, [r0, #0]
   b69d6:	691b      	ldr	r3, [r3, #16]
   b69d8:	4798      	blx	r3
   b69da:	4604      	mov	r4, r0
   b69dc:	b930      	cbnz	r0, b69ec <_ZN12PubSubClient8readByteEPh+0x2c>
   b69de:	f000 fc31 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b69e2:	1bc3      	subs	r3, r0, r7
   b69e4:	4543      	cmp	r3, r8
   b69e6:	d9f4      	bls.n	b69d2 <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   b69e8:	4620      	mov	r0, r4
   b69ea:	e005      	b.n	b69f8 <_ZN12PubSubClient8readByteEPh+0x38>
   b69ec:	6828      	ldr	r0, [r5, #0]
   *result = _client->read();
   b69ee:	6803      	ldr	r3, [r0, #0]
   b69f0:	695b      	ldr	r3, [r3, #20]
   b69f2:	4798      	blx	r3
   b69f4:	7030      	strb	r0, [r6, #0]
   b69f6:	2001      	movs	r0, #1
}
   b69f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b69fc <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b69fc:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   b69fe:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   b6a00:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b6a02:	4614      	mov	r4, r2
  if(readByte(write_address)){
   b6a04:	f7ff ffdc 	bl	b69c0 <_ZN12PubSubClient8readByteEPh>
   b6a08:	b108      	cbz	r0, b6a0e <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   b6a0a:	3501      	adds	r5, #1
   b6a0c:	8025      	strh	r5, [r4, #0]
}
   b6a0e:	bd38      	pop	{r3, r4, r5, pc}

000b6a10 <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b6a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   b6a14:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b6a16:	4688      	mov	r8, r1
    uint16_t len = 0;
   b6a18:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   b6a1a:	f10d 0206 	add.w	r2, sp, #6
   b6a1e:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b6a20:	4604      	mov	r4, r0
    uint16_t len = 0;
   b6a22:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   b6a26:	f7ff ffe9 	bl	b69fc <_ZN12PubSubClient8readByteEPhPt>
   b6a2a:	b918      	cbnz	r0, b6a34 <_ZN12PubSubClient10readPacketEPh+0x24>
   b6a2c:	2000      	movs	r0, #0
}
   b6a2e:	b003      	add	sp, #12
   b6a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6a34:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   b6a38:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   b6a3c:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   b6a3e:	f10d 0105 	add.w	r1, sp, #5
   b6a42:	4620      	mov	r0, r4
   b6a44:	f7ff ffbc 	bl	b69c0 <_ZN12PubSubClient8readByteEPh>
   b6a48:	2800      	cmp	r0, #0
   b6a4a:	d0ef      	beq.n	b6a2c <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   b6a4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b6a50:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b6a54:	1c53      	adds	r3, r2, #1
   b6a56:	4422      	add	r2, r4
   b6a58:	b29b      	uxth	r3, r3
   b6a5a:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   b6a5c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   b6a60:	fb12 f206 	smulbb	r2, r2, r6
   b6a64:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   b6a66:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   b6a68:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   b6a6c:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6a6e:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   b6a72:	d4e4      	bmi.n	b6a3e <_ZN12PubSubClient10readPacketEPh+0x2e>
   b6a74:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   b6a78:	3b01      	subs	r3, #1
    if (isPublish) {
   b6a7a:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   b6a7e:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6a82:	d11e      	bne.n	b6ac2 <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   b6a84:	f10d 0206 	add.w	r2, sp, #6
   b6a88:	4629      	mov	r1, r5
   b6a8a:	4620      	mov	r0, r4
   b6a8c:	f7ff ffb6 	bl	b69fc <_ZN12PubSubClient8readByteEPhPt>
   b6a90:	2800      	cmp	r0, #0
   b6a92:	d0cb      	beq.n	b6a2c <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   b6a94:	f10d 0206 	add.w	r2, sp, #6
   b6a98:	4629      	mov	r1, r5
   b6a9a:	4620      	mov	r0, r4
   b6a9c:	f7ff ffae 	bl	b69fc <_ZN12PubSubClient8readByteEPhPt>
   b6aa0:	2800      	cmp	r0, #0
   b6aa2:	d0c3      	beq.n	b6a2c <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b6aa4:	f898 3000 	ldrb.w	r3, [r8]
   b6aa8:	4423      	add	r3, r4
   b6aaa:	795a      	ldrb	r2, [r3, #5]
   b6aac:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   b6aae:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b6ab0:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   b6ab4:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b6ab6:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   b6ab8:	d501      	bpl.n	b6abe <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   b6aba:	3602      	adds	r6, #2
   b6abc:	b2b6      	uxth	r6, r6
        start = 2;
   b6abe:	2502      	movs	r5, #2
   b6ac0:	e001      	b.n	b6ac6 <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   b6ac2:	2500      	movs	r5, #0
    uint16_t skip = 0;
   b6ac4:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   b6ac6:	b2ad      	uxth	r5, r5
   b6ac8:	42bd      	cmp	r5, r7
   b6aca:	d226      	bcs.n	b6b1a <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   b6acc:	f10d 0105 	add.w	r1, sp, #5
   b6ad0:	4620      	mov	r0, r4
   b6ad2:	f7ff ff75 	bl	b69c0 <_ZN12PubSubClient8readByteEPh>
   b6ad6:	2800      	cmp	r0, #0
   b6ad8:	d0a8      	beq.n	b6a2c <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   b6ada:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b6ade:	b178      	cbz	r0, b6b00 <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   b6ae0:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   b6ae4:	d10c      	bne.n	b6b00 <_ZN12PubSubClient10readPacketEPh+0xf0>
   b6ae6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b6aea:	f898 2000 	ldrb.w	r2, [r8]
   b6aee:	1a9b      	subs	r3, r3, r2
   b6af0:	3b02      	subs	r3, #2
   b6af2:	42b3      	cmp	r3, r6
   b6af4:	dd04      	ble.n	b6b00 <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   b6af6:	6803      	ldr	r3, [r0, #0]
   b6af8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b6afc:	689b      	ldr	r3, [r3, #8]
   b6afe:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   b6b00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b6b04:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   b6b06:	bf9e      	ittt	ls
   b6b08:	18e2      	addls	r2, r4, r3
   b6b0a:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   b6b0e:	7111      	strbls	r1, [r2, #4]
        len++;
   b6b10:	3301      	adds	r3, #1
   b6b12:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   b6b16:	3501      	adds	r5, #1
   b6b18:	e7d5      	b.n	b6ac6 <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   b6b1a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b6b1e:	b92b      	cbnz	r3, b6b2c <_ZN12PubSubClient10readPacketEPh+0x11c>
   b6b20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b6b24:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   b6b26:	bf88      	it	hi
   b6b28:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   b6b2c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b6b30:	e77d      	b.n	b6a2e <_ZN12PubSubClient10readPacketEPh+0x1e>

000b6b32 <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6b32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6b36:	4615      	mov	r5, r2
   b6b38:	461e      	mov	r6, r3
    uint16_t len = length;
   b6b3a:	461a      	mov	r2, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6b3c:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6b3e:	2300      	movs	r3, #0
        digit = len % 128;
   b6b40:	4696      	mov	lr, r2
        lenBuf[pos++] = digit;
   b6b42:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6b44:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b6b48:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b6b4c:	f103 0401 	add.w	r4, r3, #1
   b6b50:	4403      	add	r3, r0
            digit |= 0x80;
   b6b52:	bf88      	it	hi
   b6b54:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
    } while(len>0);
   b6b58:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b6b5c:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6b60:	b2e4      	uxtb	r4, r4
   b6b62:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len>0);
   b6b66:	d820      	bhi.n	b6baa <_ZN12PubSubClient5writeEhPht+0x78>
    buf[4-llen] = header;
   b6b68:	f1c4 0304 	rsb	r3, r4, #4
        buf[5-llen+i] = lenBuf[i];
   b6b6c:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6b70:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6b72:	4622      	mov	r2, r4
   b6b74:	a901      	add	r1, sp, #4
   b6b76:	4428      	add	r0, r5
    buf[4-llen] = header;
   b6b78:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b6b7c:	f003 fbe7 	bl	ba34e <memcpy>
    rc = _client->write(buf+(4-llen),length+1+llen);
   b6b80:	6838      	ldr	r0, [r7, #0]
   b6b82:	6803      	ldr	r3, [r0, #0]
   b6b84:	1c72      	adds	r2, r6, #1
   b6b86:	4422      	add	r2, r4
   b6b88:	68db      	ldr	r3, [r3, #12]
   b6b8a:	4641      	mov	r1, r8
   b6b8c:	4798      	blx	r3
   b6b8e:	4605      	mov	r5, r0
   b6b90:	f000 fb58 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   b6b94:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b6b96:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   b6b9a:	4432      	add	r2, r6
   b6b9c:	b2a8      	uxth	r0, r5
}
   b6b9e:	1a13      	subs	r3, r2, r0
   b6ba0:	4258      	negs	r0, r3
   b6ba2:	4158      	adcs	r0, r3
   b6ba4:	b002      	add	sp, #8
   b6ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6baa:	4623      	mov	r3, r4
   b6bac:	e7c8      	b.n	b6b40 <_ZN12PubSubClient5writeEhPht+0xe>

000b6bae <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   b6bae:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b6bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    while (*idp) {
   b6bb2:	3901      	subs	r1, #1
    pos += 2;
   b6bb4:	b29c      	uxth	r4, r3
   b6bb6:	2300      	movs	r3, #0
    while (*idp) {
   b6bb8:	1c5e      	adds	r6, r3, #1
   b6bba:	fa14 f083 	uxtah	r0, r4, r3
   b6bbe:	5d8f      	ldrb	r7, [r1, r6]
   b6bc0:	b29d      	uxth	r5, r3
   b6bc2:	b280      	uxth	r0, r0
   b6bc4:	b117      	cbz	r7, b6bcc <_ZN12PubSubClient11writeStringEPKcPht+0x1e>
        buf[pos++] = *idp++;
   b6bc6:	5417      	strb	r7, [r2, r0]
    while (*idp) {
   b6bc8:	4633      	mov	r3, r6
   b6bca:	e7f5      	b.n	b6bb8 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   b6bcc:	b299      	uxth	r1, r3
   b6bce:	1a41      	subs	r1, r0, r1
   b6bd0:	440a      	add	r2, r1
   b6bd2:	0a29      	lsrs	r1, r5, #8
   b6bd4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b6bd8:	f802 3c01 	strb.w	r3, [r2, #-1]
}
   b6bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6bde <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   b6bde:	b538      	push	{r3, r4, r5, lr}
   b6be0:	4604      	mov	r4, r0
    if (_client == NULL ) {
   b6be2:	6800      	ldr	r0, [r0, #0]
   b6be4:	b908      	cbnz	r0, b6bea <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   b6be6:	2000      	movs	r0, #0
}
   b6be8:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   b6bea:	6803      	ldr	r3, [r0, #0]
   b6bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bee:	4798      	blx	r3
        if (!rc) {
   b6bf0:	b980      	cbnz	r0, b6c14 <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   b6bf2:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   b6bf6:	2d00      	cmp	r5, #0
   b6bf8:	d1f5      	bne.n	b6be6 <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   b6bfa:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   b6bfc:	f06f 0302 	mvn.w	r3, #2
   b6c00:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   b6c04:	6803      	ldr	r3, [r0, #0]
   b6c06:	69db      	ldr	r3, [r3, #28]
   b6c08:	4798      	blx	r3
                _client->stop();
   b6c0a:	6820      	ldr	r0, [r4, #0]
   b6c0c:	6803      	ldr	r3, [r0, #0]
   b6c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c10:	4798      	blx	r3
   b6c12:	e7e8      	b.n	b6be6 <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   b6c14:	2001      	movs	r0, #1
   b6c16:	e7e7      	b.n	b6be8 <_ZN12PubSubClient9connectedEv+0xa>

000b6c18 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   b6c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c1c:	b08b      	sub	sp, #44	; 0x2c
   b6c1e:	4604      	mov	r4, r0
   b6c20:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   b6c24:	4689      	mov	r9, r1
   b6c26:	4617      	mov	r7, r2
   b6c28:	461e      	mov	r6, r3
    if (!connected()) {
   b6c2a:	f7ff ffd8 	bl	b6bde <_ZN12PubSubClient9connectedEv>
   b6c2e:	4605      	mov	r5, r0
   b6c30:	2800      	cmp	r0, #0
   b6c32:	f040 80a5 	bne.w	b6d80 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->domain, this->port);
   b6c36:	f8d4 a000 	ldr.w	sl, [r4]
        if (domain != NULL) {
   b6c3a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
            result = _client->connect(this->domain, this->port);
   b6c3e:	f8da 3000 	ldr.w	r3, [sl]
        if (domain != NULL) {
   b6c42:	2900      	cmp	r1, #0
   b6c44:	d079      	beq.n	b6d3a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x122>
            result = _client->connect(this->domain, this->port);
   b6c46:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b6c4a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b6c4e:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   b6c50:	4650      	mov	r0, sl
   b6c52:	47d8      	blx	fp
        if (result == 1) {
   b6c54:	2801      	cmp	r0, #1
   b6c56:	f040 809a 	bne.w	b6d8e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x176>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6c5a:	4b4f      	ldr	r3, [pc, #316]	; (b6d98 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x180>)
            nextMsgId = 1;
   b6c5c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6c60:	889a      	ldrh	r2, [r3, #4]
   b6c62:	f8ad 2014 	strh.w	r2, [sp, #20]
   b6c66:	6818      	ldr	r0, [r3, #0]
                buffer[length++] = d[j];
   b6c68:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6c6c:	799b      	ldrb	r3, [r3, #6]
   b6c6e:	9004      	str	r0, [sp, #16]
   b6c70:	f88d 3016 	strb.w	r3, [sp, #22]
                buffer[length++] = d[j];
   b6c74:	f8c4 0009 	str.w	r0, [r4, #9]
   b6c78:	f8a4 200d 	strh.w	r2, [r4, #13]
   b6c7c:	73e3      	strb	r3, [r4, #15]
            if (willTopic) {
   b6c7e:	f1b8 0f00 	cmp.w	r8, #0
   b6c82:	d066      	beq.n	b6d52 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13a>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6c84:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b6c88:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b6c8c:	015b      	lsls	r3, r3, #5
   b6c8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   b6c92:	f043 0306 	orr.w	r3, r3, #6
   b6c96:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   b6c98:	b11f      	cbz	r7, b6ca2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
                if(pass != NULL) {
   b6c9a:	2e00      	cmp	r6, #0
   b6c9c:	d15b      	bne.n	b6d56 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13e>
                v = v|0x80;
   b6c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   b6ca2:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   b6ca4:	2300      	movs	r3, #0
   b6ca6:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b6ca8:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   b6caa:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b6cac:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   b6cae:	4649      	mov	r1, r9
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	9201      	str	r2, [sp, #4]
   b6cb4:	f7ff ff7b 	bl	b6bae <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   b6cb8:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   b6cba:	4603      	mov	r3, r0
            if (willTopic) {
   b6cbc:	f1b8 0f00 	cmp.w	r8, #0
   b6cc0:	d00b      	beq.n	b6cda <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xc2>
                length = writeString(willTopic,buffer,length);
   b6cc2:	4641      	mov	r1, r8
   b6cc4:	4620      	mov	r0, r4
   b6cc6:	f7ff ff72 	bl	b6bae <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   b6cca:	9a01      	ldr	r2, [sp, #4]
   b6ccc:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   b6cce:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   b6cd0:	4620      	mov	r0, r4
   b6cd2:	f7ff ff6c 	bl	b6bae <_ZN12PubSubClient11writeStringEPKcPht>
   b6cd6:	9a01      	ldr	r2, [sp, #4]
   b6cd8:	4603      	mov	r3, r0
            if(user != NULL) {
   b6cda:	b16f      	cbz	r7, b6cf8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                length = writeString(user,buffer,length);
   b6cdc:	4639      	mov	r1, r7
   b6cde:	4620      	mov	r0, r4
   b6ce0:	9201      	str	r2, [sp, #4]
   b6ce2:	f7ff ff64 	bl	b6bae <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   b6ce6:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   b6ce8:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6cea:	b12e      	cbz	r6, b6cf8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                    length = writeString(pass,buffer,length);
   b6cec:	4631      	mov	r1, r6
   b6cee:	4620      	mov	r0, r4
   b6cf0:	f7ff ff5d 	bl	b6bae <_ZN12PubSubClient11writeStringEPKcPht>
   b6cf4:	9a01      	ldr	r2, [sp, #4]
   b6cf6:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   b6cf8:	3b05      	subs	r3, #5
   b6cfa:	b29b      	uxth	r3, r3
   b6cfc:	2110      	movs	r1, #16
   b6cfe:	4620      	mov	r0, r4
   b6d00:	f7ff ff17 	bl	b6b32 <_ZN12PubSubClient5writeEhPht>
   b6d04:	f000 fa9e 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6d08:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b6d0c:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   b6d10:	6820      	ldr	r0, [r4, #0]
   b6d12:	6803      	ldr	r3, [r0, #0]
   b6d14:	691b      	ldr	r3, [r3, #16]
   b6d16:	4798      	blx	r3
   b6d18:	bb00      	cbnz	r0, b6d5c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x144>
   b6d1a:	f000 fa93 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b6d1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b6d22:	1ac0      	subs	r0, r0, r3
   b6d24:	42b0      	cmp	r0, r6
   b6d26:	d9f3      	bls.n	b6d10 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xf8>
                    _state = MQTT_CONNECTION_TIMEOUT;
   b6d28:	f06f 0303 	mvn.w	r3, #3
   b6d2c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   b6d30:	6820      	ldr	r0, [r4, #0]
   b6d32:	6803      	ldr	r3, [r0, #0]
   b6d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d36:	4798      	blx	r3
   b6d38:	e022      	b.n	b6d80 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->ip, this->port);
   b6d3a:	f104 0198 	add.w	r1, r4, #152	; 0x98
   b6d3e:	a804      	add	r0, sp, #16
   b6d40:	f8d3 b020 	ldr.w	fp, [r3, #32]
   b6d44:	f7ff fe1c 	bl	b6980 <_ZN9IPAddressC1ERKS_>
   b6d48:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b6d4c:	462b      	mov	r3, r5
   b6d4e:	a904      	add	r1, sp, #16
   b6d50:	e77e      	b.n	b6c50 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   b6d52:	2302      	movs	r3, #2
   b6d54:	e7a0      	b.n	b6c98 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x80>
                    v = v|(0x80>>1);
   b6d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   b6d5a:	e7a2      	b.n	b6ca2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
            uint16_t len = readPacket(&llen);
   b6d5c:	f10d 010f 	add.w	r1, sp, #15
   b6d60:	4620      	mov	r0, r4
   b6d62:	f7ff fe55 	bl	b6a10 <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   b6d66:	2804      	cmp	r0, #4
   b6d68:	d1e2      	bne.n	b6d30 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
                if (buffer[3] == 0) {
   b6d6a:	79e6      	ldrb	r6, [r4, #7]
   b6d6c:	b966      	cbnz	r6, b6d88 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   b6d6e:	f000 fa69 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6d72:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6d74:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   b6d78:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   b6d7c:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   b6d80:	4628      	mov	r0, r5
   b6d82:	b00b      	add	sp, #44	; 0x2c
   b6d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   b6d88:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   b6d8c:	e7d0      	b.n	b6d30 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
            _state = MQTT_CONNECT_FAILED;
   b6d8e:	f06f 0301 	mvn.w	r3, #1
   b6d92:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   b6d96:	e7f3      	b.n	b6d80 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
   b6d98:	000bce6c 	.word	0x000bce6c

000b6d9c <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   b6d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   b6d9e:	2400      	movs	r4, #0
   b6da0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b6da4:	e9cd 4400 	strd	r4, r4, [sp]
   b6da8:	f7ff ff36 	bl	b6c18 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   b6dac:	b004      	add	sp, #16
   b6dae:	bd10      	pop	{r4, pc}

000b6db0 <_ZN12PubSubClient4loopEv>:
boolean PubSubClient::loop() {
   b6db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6db4:	b085      	sub	sp, #20
   b6db6:	af00      	add	r7, sp, #0
   b6db8:	4604      	mov	r4, r0
    if (connected()) {
   b6dba:	f7ff ff10 	bl	b6bde <_ZN12PubSubClient9connectedEv>
   b6dbe:	4681      	mov	r9, r0
   b6dc0:	b1d8      	cbz	r0, b6dfa <_ZN12PubSubClient4loopEv+0x4a>
   b6dc2:	f000 fa3f 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   b6dc6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b6dca:	f643 2298 	movw	r2, #15000	; 0x3a98
   b6dce:	1ac3      	subs	r3, r0, r3
   b6dd0:	4293      	cmp	r3, r2
   b6dd2:	4680      	mov	r8, r0
   b6dd4:	d804      	bhi.n	b6de0 <_ZN12PubSubClient4loopEv+0x30>
   b6dd6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   b6dda:	1ac3      	subs	r3, r0, r3
   b6ddc:	4293      	cmp	r3, r2
   b6dde:	d91e      	bls.n	b6e1e <_ZN12PubSubClient4loopEv+0x6e>
            if (pingOutstanding) {
   b6de0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
                _client->stop();
   b6de4:	6820      	ldr	r0, [r4, #0]
            if (pingOutstanding) {
   b6de6:	b16b      	cbz	r3, b6e04 <_ZN12PubSubClient4loopEv+0x54>
                this->_state = MQTT_CONNECTION_TIMEOUT;
   b6de8:	f06f 0303 	mvn.w	r3, #3
   b6dec:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->stop();
   b6df0:	6803      	ldr	r3, [r0, #0]
   b6df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6df4:	4798      	blx	r3
                return false;
   b6df6:	f04f 0900 	mov.w	r9, #0
}
   b6dfa:	4648      	mov	r0, r9
   b6dfc:	3714      	adds	r7, #20
   b6dfe:	46bd      	mov	sp, r7
   b6e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6e04:	4621      	mov	r1, r4
   b6e06:	23c0      	movs	r3, #192	; 0xc0
   b6e08:	f821 3f04 	strh.w	r3, [r1, #4]!
                _client->write(buffer,2);
   b6e0c:	6803      	ldr	r3, [r0, #0]
   b6e0e:	2202      	movs	r2, #2
   b6e10:	68db      	ldr	r3, [r3, #12]
   b6e12:	4798      	blx	r3
                lastInActivity = t;
   b6e14:	e9c4 8822 	strd	r8, r8, [r4, #136]	; 0x88
                pingOutstanding = true;
   b6e18:	2301      	movs	r3, #1
   b6e1a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        if (_client->available()) {
   b6e1e:	6820      	ldr	r0, [r4, #0]
   b6e20:	6803      	ldr	r3, [r0, #0]
   b6e22:	691b      	ldr	r3, [r3, #16]
   b6e24:	4798      	blx	r3
   b6e26:	2800      	cmp	r0, #0
   b6e28:	d0e7      	beq.n	b6dfa <_ZN12PubSubClient4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
   b6e2a:	f107 010f 	add.w	r1, r7, #15
   b6e2e:	4620      	mov	r0, r4
   b6e30:	f7ff fdee 	bl	b6a10 <_ZN12PubSubClient10readPacketEPh>
            if (len > 0) {
   b6e34:	4605      	mov	r5, r0
   b6e36:	2800      	cmp	r0, #0
   b6e38:	d0df      	beq.n	b6dfa <_ZN12PubSubClient4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
   b6e3a:	7923      	ldrb	r3, [r4, #4]
   b6e3c:	607b      	str	r3, [r7, #4]
   b6e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6e42:	2b30      	cmp	r3, #48	; 0x30
                lastInActivity = t;
   b6e44:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                if (type == MQTTPUBLISH) {
   b6e48:	d14d      	bne.n	b6ee6 <_ZN12PubSubClient4loopEv+0x136>
                    if (callback) {
   b6e4a:	f8d4 a094 	ldr.w	sl, [r4, #148]	; 0x94
   b6e4e:	f1ba 0f00 	cmp.w	sl, #0
   b6e52:	d0d2      	beq.n	b6dfa <_ZN12PubSubClient4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b6e54:	7bfe      	ldrb	r6, [r7, #15]
   b6e56:	19a3      	adds	r3, r4, r6
                        }
   b6e58:	46eb      	mov	fp, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b6e5a:	7959      	ldrb	r1, [r3, #5]
   b6e5c:	799a      	ldrb	r2, [r3, #6]
   b6e5e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   b6e62:	b292      	uxth	r2, r2
                        char topic[tl+1];
   b6e64:	f102 0308 	add.w	r3, r2, #8
   b6e68:	08db      	lsrs	r3, r3, #3
   b6e6a:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
   b6e6e:	469d      	mov	sp, r3
                            topic[i] = buffer[llen+3+i];
   b6e70:	1df1      	adds	r1, r6, #7
   b6e72:	4421      	add	r1, r4
   b6e74:	4668      	mov	r0, sp
   b6e76:	603a      	str	r2, [r7, #0]
   b6e78:	f003 fa69 	bl	ba34e <memcpy>
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6e7c:	6879      	ldr	r1, [r7, #4]
                        topic[tl] = 0;
   b6e7e:	683a      	ldr	r2, [r7, #0]
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6e80:	f001 0106 	and.w	r1, r1, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6e84:	1ba8      	subs	r0, r5, r6
                        topic[tl] = 0;
   b6e86:	2300      	movs	r3, #0
                            callback(topic,payload,len-llen-3-tl-2);
   b6e88:	3803      	subs	r0, #3
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6e8a:	2902      	cmp	r1, #2
   b6e8c:	f106 0103 	add.w	r1, r6, #3
                        topic[tl] = 0;
   b6e90:	f80d 3002 	strb.w	r3, [sp, r2]
                            callback(topic,payload,len-llen-3-tl-2);
   b6e94:	eba0 0002 	sub.w	r0, r0, r2
                _client->write(buffer,2);
   b6e98:	f104 0304 	add.w	r3, r4, #4
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6e9c:	4411      	add	r1, r2
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6e9e:	d11d      	bne.n	b6edc <_ZN12PubSubClient4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6ea0:	4421      	add	r1, r4
                            callback(topic,payload,len-llen-3-tl-2);
   b6ea2:	607b      	str	r3, [r7, #4]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6ea4:	f891 c004 	ldrb.w	ip, [r1, #4]
   b6ea8:	794d      	ldrb	r5, [r1, #5]
                            payload = buffer+llen+3+tl+2;
   b6eaa:	1d71      	adds	r1, r6, #5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6eac:	eb05 250c 	add.w	r5, r5, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
   b6eb0:	4411      	add	r1, r2
                            callback(topic,payload,len-llen-3-tl-2);
   b6eb2:	4419      	add	r1, r3
   b6eb4:	1e82      	subs	r2, r0, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6eb6:	b2ad      	uxth	r5, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6eb8:	4668      	mov	r0, sp
   b6eba:	47d0      	blx	sl
                            buffer[2] = (msgId >> 8);
   b6ebc:	ba6d      	rev16	r5, r5
                            _client->write(buffer,4);
   b6ebe:	6820      	ldr	r0, [r4, #0]
                            buffer[2] = (msgId >> 8);
   b6ec0:	80e5      	strh	r5, [r4, #6]
                            buffer[0] = MQTTPUBACK;
   b6ec2:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6ec6:	80a2      	strh	r2, [r4, #4]
                            _client->write(buffer,4);
   b6ec8:	6802      	ldr	r2, [r0, #0]
   b6eca:	687b      	ldr	r3, [r7, #4]
   b6ecc:	68d5      	ldr	r5, [r2, #12]
   b6ece:	4619      	mov	r1, r3
   b6ed0:	2204      	movs	r2, #4
   b6ed2:	47a8      	blx	r5
                            lastOutActivity = t;
   b6ed4:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
   b6ed8:	46dd      	mov	sp, fp
   b6eda:	e78e      	b.n	b6dfa <_ZN12PubSubClient4loopEv+0x4a>
                            callback(topic,payload,len-llen-3-tl);
   b6edc:	4602      	mov	r2, r0
   b6ede:	4419      	add	r1, r3
   b6ee0:	4668      	mov	r0, sp
   b6ee2:	47d0      	blx	sl
   b6ee4:	e7f8      	b.n	b6ed8 <_ZN12PubSubClient4loopEv+0x128>
                } else if (type == MQTTPINGREQ) {
   b6ee6:	2bc0      	cmp	r3, #192	; 0xc0
   b6ee8:	d109      	bne.n	b6efe <_ZN12PubSubClient4loopEv+0x14e>
                    buffer[0] = MQTTPINGRESP;
   b6eea:	23d0      	movs	r3, #208	; 0xd0
                    _client->write(buffer,2);
   b6eec:	4621      	mov	r1, r4
                    buffer[0] = MQTTPINGRESP;
   b6eee:	80a3      	strh	r3, [r4, #4]
                    _client->write(buffer,2);
   b6ef0:	f851 0b04 	ldr.w	r0, [r1], #4
   b6ef4:	6803      	ldr	r3, [r0, #0]
   b6ef6:	2202      	movs	r2, #2
   b6ef8:	68db      	ldr	r3, [r3, #12]
   b6efa:	4798      	blx	r3
   b6efc:	e77d      	b.n	b6dfa <_ZN12PubSubClient4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
   b6efe:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
   b6f00:	bf04      	itt	eq
   b6f02:	2300      	moveq	r3, #0
   b6f04:	f884 3090 	strbeq.w	r3, [r4, #144]	; 0x90
   b6f08:	e777      	b.n	b6dfa <_ZN12PubSubClient4loopEv+0x4a>

000b6f0a <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   b6f0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6f0e:	4604      	mov	r4, r0
   b6f10:	f89d 7020 	ldrb.w	r7, [sp, #32]
   b6f14:	4688      	mov	r8, r1
   b6f16:	4616      	mov	r6, r2
   b6f18:	461d      	mov	r5, r3
    if (connected()) {
   b6f1a:	f7ff fe60 	bl	b6bde <_ZN12PubSubClient9connectedEv>
   b6f1e:	b338      	cbz	r0, b6f70 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   b6f20:	4640      	mov	r0, r8
   b6f22:	f003 fad4 	bl	ba4ce <strlen>
   b6f26:	1deb      	adds	r3, r5, #7
   b6f28:	4418      	add	r0, r3
   b6f2a:	2880      	cmp	r0, #128	; 0x80
   b6f2c:	d820      	bhi.n	b6f70 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   b6f2e:	1d22      	adds	r2, r4, #4
   b6f30:	2305      	movs	r3, #5
   b6f32:	4641      	mov	r1, r8
   b6f34:	4620      	mov	r0, r4
   b6f36:	9201      	str	r2, [sp, #4]
   b6f38:	f7ff fe39 	bl	b6bae <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   b6f3c:	9a01      	ldr	r2, [sp, #4]
   b6f3e:	2300      	movs	r3, #0
   b6f40:	18c1      	adds	r1, r0, r3
   b6f42:	429d      	cmp	r5, r3
   b6f44:	b289      	uxth	r1, r1
   b6f46:	d907      	bls.n	b6f58 <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   b6f48:	4421      	add	r1, r4
   b6f4a:	f816 c003 	ldrb.w	ip, [r6, r3]
   b6f4e:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   b6f52:	3301      	adds	r3, #1
   b6f54:	b29b      	uxth	r3, r3
   b6f56:	e7f3      	b.n	b6f40 <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   b6f58:	1f4b      	subs	r3, r1, #5
            header |= 1;
   b6f5a:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   b6f5c:	b29b      	uxth	r3, r3
   b6f5e:	bf0c      	ite	eq
   b6f60:	2130      	moveq	r1, #48	; 0x30
   b6f62:	2131      	movne	r1, #49	; 0x31
   b6f64:	4620      	mov	r0, r4
}
   b6f66:	b002      	add	sp, #8
   b6f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   b6f6c:	f7ff bde1 	b.w	b6b32 <_ZN12PubSubClient5writeEhPht>
}
   b6f70:	2000      	movs	r0, #0
   b6f72:	b002      	add	sp, #8
   b6f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6f78 <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b6f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6f7a:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b6f7c:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b6f7e:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b6f80:	9202      	str	r2, [sp, #8]
   b6f82:	f003 faa4 	bl	ba4ce <strlen>
   b6f86:	4603      	mov	r3, r0
   b6f88:	2000      	movs	r0, #0
   b6f8a:	9000      	str	r0, [sp, #0]
   b6f8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b6f90:	4620      	mov	r0, r4
   b6f92:	f7ff ffba 	bl	b6f0a <_ZN12PubSubClient7publishEPKcPKhjb>
}
   b6f96:	b004      	add	sp, #16
   b6f98:	bd10      	pop	{r4, pc}

000b6f9a <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   b6f9a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   b6f9e:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   b6fa2:	4770      	bx	lr

000b6fa4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <HAL_USB_USART_Init+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	681b      	ldr	r3, [r3, #0]
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	0003024c 	.word	0x0003024c

000b6fb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <HAL_USB_USART_Begin+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	685b      	ldr	r3, [r3, #4]
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	0003024c 	.word	0x0003024c

000b6fc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6fc4:	b508      	push	{r3, lr}
   b6fc6:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <HAL_USB_USART_Available_Data+0xc>)
   b6fc8:	681b      	ldr	r3, [r3, #0]
   b6fca:	691b      	ldr	r3, [r3, #16]
   b6fcc:	9301      	str	r3, [sp, #4]
   b6fce:	bd08      	pop	{r3, pc}
   b6fd0:	0003024c 	.word	0x0003024c

000b6fd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6fd4:	b508      	push	{r3, lr}
   b6fd6:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6fd8:	681b      	ldr	r3, [r3, #0]
   b6fda:	695b      	ldr	r3, [r3, #20]
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	bd08      	pop	{r3, pc}
   b6fe0:	0003024c 	.word	0x0003024c

000b6fe4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <HAL_USB_USART_Receive_Data+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	699b      	ldr	r3, [r3, #24]
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	0003024c 	.word	0x0003024c

000b6ff4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <HAL_USB_USART_Send_Data+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	69db      	ldr	r3, [r3, #28]
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	0003024c 	.word	0x0003024c

000b7004 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <HAL_USB_USART_Flush_Data+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	6a1b      	ldr	r3, [r3, #32]
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	0003024c 	.word	0x0003024c

000b7014 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <hal_i2c_write+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	6a1b      	ldr	r3, [r3, #32]
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	00030228 	.word	0x00030228

000b7024 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <hal_i2c_available+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	00030228 	.word	0x00030228

000b7034 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7034:	b508      	push	{r3, lr}
   b7036:	4b02      	ldr	r3, [pc, #8]	; (b7040 <hal_i2c_read+0xc>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b703c:	9301      	str	r3, [sp, #4]
   b703e:	bd08      	pop	{r3, pc}
   b7040:	00030228 	.word	0x00030228

000b7044 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7044:	b508      	push	{r3, lr}
   b7046:	4b02      	ldr	r3, [pc, #8]	; (b7050 <hal_i2c_peek+0xc>)
   b7048:	681b      	ldr	r3, [r3, #0]
   b704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b704c:	9301      	str	r3, [sp, #4]
   b704e:	bd08      	pop	{r3, pc}
   b7050:	00030228 	.word	0x00030228

000b7054 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7054:	b508      	push	{r3, lr}
   b7056:	4b02      	ldr	r3, [pc, #8]	; (b7060 <hal_i2c_flush+0xc>)
   b7058:	681b      	ldr	r3, [r3, #0]
   b705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b705c:	9301      	str	r3, [sp, #4]
   b705e:	bd08      	pop	{r3, pc}
   b7060:	00030228 	.word	0x00030228

000b7064 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7064:	b508      	push	{r3, lr}
   b7066:	4b02      	ldr	r3, [pc, #8]	; (b7070 <hal_i2c_is_enabled+0xc>)
   b7068:	681b      	ldr	r3, [r3, #0]
   b706a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b706c:	9301      	str	r3, [sp, #4]
   b706e:	bd08      	pop	{r3, pc}
   b7070:	00030228 	.word	0x00030228

000b7074 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7074:	b508      	push	{r3, lr}
   b7076:	4b02      	ldr	r3, [pc, #8]	; (b7080 <hal_i2c_init+0xc>)
   b7078:	681b      	ldr	r3, [r3, #0]
   b707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b707c:	9301      	str	r3, [sp, #4]
   b707e:	bd08      	pop	{r3, pc}
   b7080:	00030228 	.word	0x00030228

000b7084 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b7084:	b508      	push	{r3, lr}
   b7086:	4b02      	ldr	r3, [pc, #8]	; (b7090 <hal_i2c_lock+0xc>)
   b7088:	681b      	ldr	r3, [r3, #0]
   b708a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b708c:	9301      	str	r3, [sp, #4]
   b708e:	bd08      	pop	{r3, pc}
   b7090:	00030228 	.word	0x00030228

000b7094 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7094:	b508      	push	{r3, lr}
   b7096:	4b02      	ldr	r3, [pc, #8]	; (b70a0 <hal_spi_init+0xc>)
   b7098:	681b      	ldr	r3, [r3, #0]
   b709a:	69db      	ldr	r3, [r3, #28]
   b709c:	9301      	str	r3, [sp, #4]
   b709e:	bd08      	pop	{r3, pc}
   b70a0:	00030230 	.word	0x00030230

000b70a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b70a4:	b508      	push	{r3, lr}
   b70a6:	4b02      	ldr	r3, [pc, #8]	; (b70b0 <hal_spi_is_enabled+0xc>)
   b70a8:	681b      	ldr	r3, [r3, #0]
   b70aa:	6a1b      	ldr	r3, [r3, #32]
   b70ac:	9301      	str	r3, [sp, #4]
   b70ae:	bd08      	pop	{r3, pc}
   b70b0:	00030230 	.word	0x00030230

000b70b4 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b70b4:	b508      	push	{r3, lr}
   b70b6:	4b02      	ldr	r3, [pc, #8]	; (b70c0 <sock_bind+0xc>)
   b70b8:	681b      	ldr	r3, [r3, #0]
   b70ba:	685b      	ldr	r3, [r3, #4]
   b70bc:	9301      	str	r3, [sp, #4]
   b70be:	bd08      	pop	{r3, pc}
   b70c0:	00030238 	.word	0x00030238

000b70c4 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b70c4:	b508      	push	{r3, lr}
   b70c6:	4b02      	ldr	r3, [pc, #8]	; (b70d0 <sock_setsockopt+0xc>)
   b70c8:	681b      	ldr	r3, [r3, #0]
   b70ca:	699b      	ldr	r3, [r3, #24]
   b70cc:	9301      	str	r3, [sp, #4]
   b70ce:	bd08      	pop	{r3, pc}
   b70d0:	00030238 	.word	0x00030238

000b70d4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b70d4:	b508      	push	{r3, lr}
   b70d6:	4b02      	ldr	r3, [pc, #8]	; (b70e0 <sock_close+0xc>)
   b70d8:	681b      	ldr	r3, [r3, #0]
   b70da:	69db      	ldr	r3, [r3, #28]
   b70dc:	9301      	str	r3, [sp, #4]
   b70de:	bd08      	pop	{r3, pc}
   b70e0:	00030238 	.word	0x00030238

000b70e4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b70e4:	b508      	push	{r3, lr}
   b70e6:	4b02      	ldr	r3, [pc, #8]	; (b70f0 <sock_connect+0xc>)
   b70e8:	681b      	ldr	r3, [r3, #0]
   b70ea:	6a1b      	ldr	r3, [r3, #32]
   b70ec:	9301      	str	r3, [sp, #4]
   b70ee:	bd08      	pop	{r3, pc}
   b70f0:	00030238 	.word	0x00030238

000b70f4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b70f4:	b508      	push	{r3, lr}
   b70f6:	4b02      	ldr	r3, [pc, #8]	; (b7100 <sock_recv+0xc>)
   b70f8:	681b      	ldr	r3, [r3, #0]
   b70fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70fc:	9301      	str	r3, [sp, #4]
   b70fe:	bd08      	pop	{r3, pc}
   b7100:	00030238 	.word	0x00030238

000b7104 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b7104:	b508      	push	{r3, lr}
   b7106:	4b02      	ldr	r3, [pc, #8]	; (b7110 <sock_recvfrom+0xc>)
   b7108:	681b      	ldr	r3, [r3, #0]
   b710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b710c:	9301      	str	r3, [sp, #4]
   b710e:	bd08      	pop	{r3, pc}
   b7110:	00030238 	.word	0x00030238

000b7114 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7114:	b508      	push	{r3, lr}
   b7116:	4b02      	ldr	r3, [pc, #8]	; (b7120 <sock_send+0xc>)
   b7118:	681b      	ldr	r3, [r3, #0]
   b711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b711c:	9301      	str	r3, [sp, #4]
   b711e:	bd08      	pop	{r3, pc}
   b7120:	00030238 	.word	0x00030238

000b7124 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b7124:	b508      	push	{r3, lr}
   b7126:	4b02      	ldr	r3, [pc, #8]	; (b7130 <sock_sendto+0xc>)
   b7128:	681b      	ldr	r3, [r3, #0]
   b712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b712c:	9301      	str	r3, [sp, #4]
   b712e:	bd08      	pop	{r3, pc}
   b7130:	00030238 	.word	0x00030238

000b7134 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7134:	b508      	push	{r3, lr}
   b7136:	4b02      	ldr	r3, [pc, #8]	; (b7140 <sock_socket+0xc>)
   b7138:	681b      	ldr	r3, [r3, #0]
   b713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b713c:	9301      	str	r3, [sp, #4]
   b713e:	bd08      	pop	{r3, pc}
   b7140:	00030238 	.word	0x00030238

000b7144 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7144:	b508      	push	{r3, lr}
   b7146:	4b02      	ldr	r3, [pc, #8]	; (b7150 <hal_usart_write+0xc>)
   b7148:	681b      	ldr	r3, [r3, #0]
   b714a:	68db      	ldr	r3, [r3, #12]
   b714c:	9301      	str	r3, [sp, #4]
   b714e:	bd08      	pop	{r3, pc}
   b7150:	0003023c 	.word	0x0003023c

000b7154 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7154:	b508      	push	{r3, lr}
   b7156:	4b02      	ldr	r3, [pc, #8]	; (b7160 <hal_usart_available+0xc>)
   b7158:	681b      	ldr	r3, [r3, #0]
   b715a:	691b      	ldr	r3, [r3, #16]
   b715c:	9301      	str	r3, [sp, #4]
   b715e:	bd08      	pop	{r3, pc}
   b7160:	0003023c 	.word	0x0003023c

000b7164 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7164:	b508      	push	{r3, lr}
   b7166:	4b02      	ldr	r3, [pc, #8]	; (b7170 <hal_usart_read+0xc>)
   b7168:	681b      	ldr	r3, [r3, #0]
   b716a:	695b      	ldr	r3, [r3, #20]
   b716c:	9301      	str	r3, [sp, #4]
   b716e:	bd08      	pop	{r3, pc}
   b7170:	0003023c 	.word	0x0003023c

000b7174 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7174:	b508      	push	{r3, lr}
   b7176:	4b02      	ldr	r3, [pc, #8]	; (b7180 <hal_usart_peek+0xc>)
   b7178:	681b      	ldr	r3, [r3, #0]
   b717a:	699b      	ldr	r3, [r3, #24]
   b717c:	9301      	str	r3, [sp, #4]
   b717e:	bd08      	pop	{r3, pc}
   b7180:	0003023c 	.word	0x0003023c

000b7184 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7184:	b508      	push	{r3, lr}
   b7186:	4b02      	ldr	r3, [pc, #8]	; (b7190 <hal_usart_flush+0xc>)
   b7188:	681b      	ldr	r3, [r3, #0]
   b718a:	69db      	ldr	r3, [r3, #28]
   b718c:	9301      	str	r3, [sp, #4]
   b718e:	bd08      	pop	{r3, pc}
   b7190:	0003023c 	.word	0x0003023c

000b7194 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7194:	b508      	push	{r3, lr}
   b7196:	4b02      	ldr	r3, [pc, #8]	; (b71a0 <hal_usart_is_enabled+0xc>)
   b7198:	681b      	ldr	r3, [r3, #0]
   b719a:	6a1b      	ldr	r3, [r3, #32]
   b719c:	9301      	str	r3, [sp, #4]
   b719e:	bd08      	pop	{r3, pc}
   b71a0:	0003023c 	.word	0x0003023c

000b71a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b71a4:	b508      	push	{r3, lr}
   b71a6:	4b02      	ldr	r3, [pc, #8]	; (b71b0 <hal_usart_available_data_for_write+0xc>)
   b71a8:	681b      	ldr	r3, [r3, #0]
   b71aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b71ac:	9301      	str	r3, [sp, #4]
   b71ae:	bd08      	pop	{r3, pc}
   b71b0:	0003023c 	.word	0x0003023c

000b71b4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b71b4:	b508      	push	{r3, lr}
   b71b6:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <hal_usart_begin_config+0xc>)
   b71b8:	681b      	ldr	r3, [r3, #0]
   b71ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b71bc:	9301      	str	r3, [sp, #4]
   b71be:	bd08      	pop	{r3, pc}
   b71c0:	0003023c 	.word	0x0003023c

000b71c4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b71c4:	b508      	push	{r3, lr}
   b71c6:	4b02      	ldr	r3, [pc, #8]	; (b71d0 <hal_usart_init_ex+0xc>)
   b71c8:	681b      	ldr	r3, [r3, #0]
   b71ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71cc:	9301      	str	r3, [sp, #4]
   b71ce:	bd08      	pop	{r3, pc}
   b71d0:	0003023c 	.word	0x0003023c

000b71d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b71d4:	b508      	push	{r3, lr}
   b71d6:	4b02      	ldr	r3, [pc, #8]	; (b71e0 <inet_inet_ntop+0xc>)
   b71d8:	681b      	ldr	r3, [r3, #0]
   b71da:	695b      	ldr	r3, [r3, #20]
   b71dc:	9301      	str	r3, [sp, #4]
   b71de:	bd08      	pop	{r3, pc}
   b71e0:	00030264 	.word	0x00030264

000b71e4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b71e4:	b508      	push	{r3, lr}
   b71e6:	4b02      	ldr	r3, [pc, #8]	; (b71f0 <inet_htonl+0xc>)
   b71e8:	681b      	ldr	r3, [r3, #0]
   b71ea:	6a1b      	ldr	r3, [r3, #32]
   b71ec:	9301      	str	r3, [sp, #4]
   b71ee:	bd08      	pop	{r3, pc}
   b71f0:	00030264 	.word	0x00030264

000b71f4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b71f4:	b508      	push	{r3, lr}
   b71f6:	4b02      	ldr	r3, [pc, #8]	; (b7200 <inet_ntohs+0xc>)
   b71f8:	681b      	ldr	r3, [r3, #0]
   b71fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71fc:	9301      	str	r3, [sp, #4]
   b71fe:	bd08      	pop	{r3, pc}
   b7200:	00030264 	.word	0x00030264

000b7204 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7204:	b508      	push	{r3, lr}
   b7206:	4b02      	ldr	r3, [pc, #8]	; (b7210 <inet_htons+0xc>)
   b7208:	681b      	ldr	r3, [r3, #0]
   b720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b720c:	9301      	str	r3, [sp, #4]
   b720e:	bd08      	pop	{r3, pc}
   b7210:	00030264 	.word	0x00030264

000b7214 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7214:	b508      	push	{r3, lr}
   b7216:	4b02      	ldr	r3, [pc, #8]	; (b7220 <os_mutex_recursive_create+0xc>)
   b7218:	681b      	ldr	r3, [r3, #0]
   b721a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b721c:	9301      	str	r3, [sp, #4]
   b721e:	bd08      	pop	{r3, pc}
   b7220:	00030248 	.word	0x00030248

000b7224 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <HAL_RNG_GetRandomNumber+0xc>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	685b      	ldr	r3, [r3, #4]
   b722c:	9301      	str	r3, [sp, #4]
   b722e:	bd08      	pop	{r3, pc}
   b7230:	00030218 	.word	0x00030218

000b7234 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b02      	ldr	r3, [pc, #8]	; (b7240 <HAL_Delay_Microseconds+0xc>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	68db      	ldr	r3, [r3, #12]
   b723c:	9301      	str	r3, [sp, #4]
   b723e:	bd08      	pop	{r3, pc}
   b7240:	00030218 	.word	0x00030218

000b7244 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7244:	b508      	push	{r3, lr}
   b7246:	4b02      	ldr	r3, [pc, #8]	; (b7250 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7248:	681b      	ldr	r3, [r3, #0]
   b724a:	695b      	ldr	r3, [r3, #20]
   b724c:	9301      	str	r3, [sp, #4]
   b724e:	bd08      	pop	{r3, pc}
   b7250:	00030218 	.word	0x00030218

000b7254 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7254:	b508      	push	{r3, lr}
   b7256:	4b02      	ldr	r3, [pc, #8]	; (b7260 <hal_rtc_time_is_valid+0xc>)
   b7258:	681b      	ldr	r3, [r3, #0]
   b725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b725c:	9301      	str	r3, [sp, #4]
   b725e:	bd08      	pop	{r3, pc}
   b7260:	00030218 	.word	0x00030218

000b7264 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <hal_timer_millis+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030218 	.word	0x00030218

000b7274 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <hal_rtc_get_time+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030218 	.word	0x00030218

000b7284 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <if_index_to_name+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	695b      	ldr	r3, [r3, #20]
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	0003026c 	.word	0x0003026c

000b7294 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <HAL_Pin_Mode+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	689b      	ldr	r3, [r3, #8]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	0003022c 	.word	0x0003022c

000b72a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <HAL_Get_Pin_Mode+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	68db      	ldr	r3, [r3, #12]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	0003022c 	.word	0x0003022c

000b72b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <HAL_GPIO_Write+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	691b      	ldr	r3, [r3, #16]
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	0003022c 	.word	0x0003022c

000b72c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <netdb_freeaddrinfo+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	689b      	ldr	r3, [r3, #8]
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	00030268 	.word	0x00030268

000b72d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <netdb_getaddrinfo+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	68db      	ldr	r3, [r3, #12]
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	00030268 	.word	0x00030268

000b72e4 <LED_SetBrightness>:

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <LED_SetBrightness+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	691b      	ldr	r3, [r3, #16]
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	00030260 	.word	0x00030260

000b72f4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <LED_RGB_IsOverRidden+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	699b      	ldr	r3, [r3, #24]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	00030260 	.word	0x00030260

000b7304 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <LED_On+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	69db      	ldr	r3, [r3, #28]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	00030260 	.word	0x00030260

000b7314 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <panic_+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	00030260 	.word	0x00030260

000b7324 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <log_message+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	00030260 	.word	0x00030260

000b7334 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b03      	ldr	r3, [pc, #12]	; (b7344 <diag_get_source+0x10>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b733e:	9301      	str	r3, [sp, #4]
   b7340:	bd08      	pop	{r3, pc}
   b7342:	0000      	.short	0x0000
   b7344:	00030260 	.word	0x00030260

000b7348 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7348:	b508      	push	{r3, lr}
   b734a:	4b02      	ldr	r3, [pc, #8]	; (b7354 <spark_process+0xc>)
   b734c:	681b      	ldr	r3, [r3, #0]
   b734e:	689b      	ldr	r3, [r3, #8]
   b7350:	9301      	str	r3, [sp, #4]
   b7352:	bd08      	pop	{r3, pc}
   b7354:	00030244 	.word	0x00030244

000b7358 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b7358:	b508      	push	{r3, lr}
   b735a:	4b02      	ldr	r3, [pc, #8]	; (b7364 <spark_cloud_flag_connect+0xc>)
   b735c:	681b      	ldr	r3, [r3, #0]
   b735e:	68db      	ldr	r3, [r3, #12]
   b7360:	9301      	str	r3, [sp, #4]
   b7362:	bd08      	pop	{r3, pc}
   b7364:	00030244 	.word	0x00030244

000b7368 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7368:	b508      	push	{r3, lr}
   b736a:	4b02      	ldr	r3, [pc, #8]	; (b7374 <spark_cloud_flag_connected+0xc>)
   b736c:	681b      	ldr	r3, [r3, #0]
   b736e:	695b      	ldr	r3, [r3, #20]
   b7370:	9301      	str	r3, [sp, #4]
   b7372:	bd08      	pop	{r3, pc}
   b7374:	00030244 	.word	0x00030244

000b7378 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7378:	b508      	push	{r3, lr}
   b737a:	4b02      	ldr	r3, [pc, #8]	; (b7384 <spark_deviceID+0xc>)
   b737c:	681b      	ldr	r3, [r3, #0]
   b737e:	69db      	ldr	r3, [r3, #28]
   b7380:	9301      	str	r3, [sp, #4]
   b7382:	bd08      	pop	{r3, pc}
   b7384:	00030244 	.word	0x00030244

000b7388 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7388:	b508      	push	{r3, lr}
   b738a:	4b02      	ldr	r3, [pc, #8]	; (b7394 <spark_send_event+0xc>)
   b738c:	681b      	ldr	r3, [r3, #0]
   b738e:	6a1b      	ldr	r3, [r3, #32]
   b7390:	9301      	str	r3, [sp, #4]
   b7392:	bd08      	pop	{r3, pc}
   b7394:	00030244 	.word	0x00030244

000b7398 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b7398:	b508      	push	{r3, lr}
   b739a:	4b02      	ldr	r3, [pc, #8]	; (b73a4 <spark_sync_time+0xc>)
   b739c:	681b      	ldr	r3, [r3, #0]
   b739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b73a0:	9301      	str	r3, [sp, #4]
   b73a2:	bd08      	pop	{r3, pc}
   b73a4:	00030244 	.word	0x00030244

000b73a8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b73a8:	b508      	push	{r3, lr}
   b73aa:	4b02      	ldr	r3, [pc, #8]	; (b73b4 <spark_sync_time_pending+0xc>)
   b73ac:	681b      	ldr	r3, [r3, #0]
   b73ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73b0:	9301      	str	r3, [sp, #4]
   b73b2:	bd08      	pop	{r3, pc}
   b73b4:	00030244 	.word	0x00030244

000b73b8 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b73b8:	b508      	push	{r3, lr}
   b73ba:	4b02      	ldr	r3, [pc, #8]	; (b73c4 <spark_set_connection_property+0xc>)
   b73bc:	681b      	ldr	r3, [r3, #0]
   b73be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b73c0:	9301      	str	r3, [sp, #4]
   b73c2:	bd08      	pop	{r3, pc}
   b73c4:	00030244 	.word	0x00030244

000b73c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b73c8:	b508      	push	{r3, lr}
   b73ca:	4b02      	ldr	r3, [pc, #8]	; (b73d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b73cc:	681b      	ldr	r3, [r3, #0]
   b73ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b73d0:	9301      	str	r3, [sp, #4]
   b73d2:	bd08      	pop	{r3, pc}
   b73d4:	00030244 	.word	0x00030244

000b73d8 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   b73d8:	b508      	push	{r3, lr}
   b73da:	4b02      	ldr	r3, [pc, #8]	; (b73e4 <spark_publish_vitals+0xc>)
   b73dc:	681b      	ldr	r3, [r3, #0]
   b73de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73e0:	9301      	str	r3, [sp, #4]
   b73e2:	bd08      	pop	{r3, pc}
   b73e4:	00030244 	.word	0x00030244

000b73e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b73e8:	b508      	push	{r3, lr}
   b73ea:	4b02      	ldr	r3, [pc, #8]	; (b73f4 <network_connect+0xc>)
   b73ec:	681b      	ldr	r3, [r3, #0]
   b73ee:	685b      	ldr	r3, [r3, #4]
   b73f0:	9301      	str	r3, [sp, #4]
   b73f2:	bd08      	pop	{r3, pc}
   b73f4:	00030240 	.word	0x00030240

000b73f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b73f8:	b508      	push	{r3, lr}
   b73fa:	4b02      	ldr	r3, [pc, #8]	; (b7404 <network_connecting+0xc>)
   b73fc:	681b      	ldr	r3, [r3, #0]
   b73fe:	689b      	ldr	r3, [r3, #8]
   b7400:	9301      	str	r3, [sp, #4]
   b7402:	bd08      	pop	{r3, pc}
   b7404:	00030240 	.word	0x00030240

000b7408 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7408:	b508      	push	{r3, lr}
   b740a:	4b02      	ldr	r3, [pc, #8]	; (b7414 <network_disconnect+0xc>)
   b740c:	681b      	ldr	r3, [r3, #0]
   b740e:	68db      	ldr	r3, [r3, #12]
   b7410:	9301      	str	r3, [sp, #4]
   b7412:	bd08      	pop	{r3, pc}
   b7414:	00030240 	.word	0x00030240

000b7418 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7418:	b508      	push	{r3, lr}
   b741a:	4b02      	ldr	r3, [pc, #8]	; (b7424 <network_ready+0xc>)
   b741c:	681b      	ldr	r3, [r3, #0]
   b741e:	691b      	ldr	r3, [r3, #16]
   b7420:	9301      	str	r3, [sp, #4]
   b7422:	bd08      	pop	{r3, pc}
   b7424:	00030240 	.word	0x00030240

000b7428 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7428:	b508      	push	{r3, lr}
   b742a:	4b02      	ldr	r3, [pc, #8]	; (b7434 <network_on+0xc>)
   b742c:	681b      	ldr	r3, [r3, #0]
   b742e:	695b      	ldr	r3, [r3, #20]
   b7430:	9301      	str	r3, [sp, #4]
   b7432:	bd08      	pop	{r3, pc}
   b7434:	00030240 	.word	0x00030240

000b7438 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7438:	b508      	push	{r3, lr}
   b743a:	4b02      	ldr	r3, [pc, #8]	; (b7444 <network_off+0xc>)
   b743c:	681b      	ldr	r3, [r3, #0]
   b743e:	699b      	ldr	r3, [r3, #24]
   b7440:	9301      	str	r3, [sp, #4]
   b7442:	bd08      	pop	{r3, pc}
   b7444:	00030240 	.word	0x00030240

000b7448 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7448:	b508      	push	{r3, lr}
   b744a:	4b02      	ldr	r3, [pc, #8]	; (b7454 <network_listen+0xc>)
   b744c:	681b      	ldr	r3, [r3, #0]
   b744e:	69db      	ldr	r3, [r3, #28]
   b7450:	9301      	str	r3, [sp, #4]
   b7452:	bd08      	pop	{r3, pc}
   b7454:	00030240 	.word	0x00030240

000b7458 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7458:	b508      	push	{r3, lr}
   b745a:	4b02      	ldr	r3, [pc, #8]	; (b7464 <network_listening+0xc>)
   b745c:	681b      	ldr	r3, [r3, #0]
   b745e:	6a1b      	ldr	r3, [r3, #32]
   b7460:	9301      	str	r3, [sp, #4]
   b7462:	bd08      	pop	{r3, pc}
   b7464:	00030240 	.word	0x00030240

000b7468 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7468:	b508      	push	{r3, lr}
   b746a:	4b02      	ldr	r3, [pc, #8]	; (b7474 <network_set_listen_timeout+0xc>)
   b746c:	681b      	ldr	r3, [r3, #0]
   b746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7470:	9301      	str	r3, [sp, #4]
   b7472:	bd08      	pop	{r3, pc}
   b7474:	00030240 	.word	0x00030240

000b7478 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7478:	b508      	push	{r3, lr}
   b747a:	4b02      	ldr	r3, [pc, #8]	; (b7484 <network_get_listen_timeout+0xc>)
   b747c:	681b      	ldr	r3, [r3, #0]
   b747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	bd08      	pop	{r3, pc}
   b7484:	00030240 	.word	0x00030240

000b7488 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <network_is_on+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	00030240 	.word	0x00030240

000b7498 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <network_is_off+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	00030240 	.word	0x00030240

000b74a8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <system_mode+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	681b      	ldr	r3, [r3, #0]
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	00030220 	.word	0x00030220

000b74b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b02      	ldr	r3, [pc, #8]	; (b74c4 <set_system_mode+0xc>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	685b      	ldr	r3, [r3, #4]
   b74c0:	9301      	str	r3, [sp, #4]
   b74c2:	bd08      	pop	{r3, pc}
   b74c4:	00030220 	.word	0x00030220

000b74c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b74c8:	b508      	push	{r3, lr}
   b74ca:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <system_delay_ms+0xc>)
   b74cc:	681b      	ldr	r3, [r3, #0]
   b74ce:	695b      	ldr	r3, [r3, #20]
   b74d0:	9301      	str	r3, [sp, #4]
   b74d2:	bd08      	pop	{r3, pc}
   b74d4:	00030220 	.word	0x00030220

000b74d8 <system_set_flag>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b74d8:	b508      	push	{r3, lr}
   b74da:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <system_set_flag+0xc>)
   b74dc:	681b      	ldr	r3, [r3, #0]
   b74de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b74e0:	9301      	str	r3, [sp, #4]
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	00030220 	.word	0x00030220

000b74e8 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <system_get_flag+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	00030220 	.word	0x00030220

000b74f8 <application_thread_current>:
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b02      	ldr	r3, [pc, #8]	; (b7504 <application_thread_current+0xc>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	bd08      	pop	{r3, pc}
   b7504:	00030220 	.word	0x00030220

000b7508 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7508:	b508      	push	{r3, lr}
   b750a:	4b02      	ldr	r3, [pc, #8]	; (b7514 <application_thread_invoke+0xc>)
   b750c:	681b      	ldr	r3, [r3, #0]
   b750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7510:	9301      	str	r3, [sp, #4]
   b7512:	bd08      	pop	{r3, pc}
   b7514:	00030220 	.word	0x00030220

000b7518 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7518:	b508      	push	{r3, lr}
   b751a:	4b02      	ldr	r3, [pc, #8]	; (b7524 <system_thread_get_state+0xc>)
   b751c:	681b      	ldr	r3, [r3, #0]
   b751e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7520:	9301      	str	r3, [sp, #4]
   b7522:	bd08      	pop	{r3, pc}
   b7524:	00030220 	.word	0x00030220

000b7528 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7528:	b508      	push	{r3, lr}
   b752a:	4b03      	ldr	r3, [pc, #12]	; (b7538 <system_ctrl_set_app_request_handler+0x10>)
   b752c:	681b      	ldr	r3, [r3, #0]
   b752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7532:	9301      	str	r3, [sp, #4]
   b7534:	bd08      	pop	{r3, pc}
   b7536:	0000      	.short	0x0000
   b7538:	00030220 	.word	0x00030220

000b753c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b753c:	b508      	push	{r3, lr}
   b753e:	4b03      	ldr	r3, [pc, #12]	; (b754c <system_ctrl_set_result+0x10>)
   b7540:	681b      	ldr	r3, [r3, #0]
   b7542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7546:	9301      	str	r3, [sp, #4]
   b7548:	bd08      	pop	{r3, pc}
   b754a:	0000      	.short	0x0000
   b754c:	00030220 	.word	0x00030220

000b7550 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b7550:	b508      	push	{r3, lr}
   b7552:	4b03      	ldr	r3, [pc, #12]	; (b7560 <system_reset+0x10>)
   b7554:	681b      	ldr	r3, [r3, #0]
   b7556:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b755a:	9301      	str	r3, [sp, #4]
   b755c:	bd08      	pop	{r3, pc}
   b755e:	0000      	.short	0x0000
   b7560:	00030220 	.word	0x00030220

000b7564 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7564:	b508      	push	{r3, lr}
   b7566:	4b02      	ldr	r3, [pc, #8]	; (b7570 <malloc+0xc>)
   b7568:	681b      	ldr	r3, [r3, #0]
   b756a:	681b      	ldr	r3, [r3, #0]
   b756c:	9301      	str	r3, [sp, #4]
   b756e:	bd08      	pop	{r3, pc}
   b7570:	0003021c 	.word	0x0003021c

000b7574 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7574:	b508      	push	{r3, lr}
   b7576:	4b02      	ldr	r3, [pc, #8]	; (b7580 <free+0xc>)
   b7578:	681b      	ldr	r3, [r3, #0]
   b757a:	685b      	ldr	r3, [r3, #4]
   b757c:	9301      	str	r3, [sp, #4]
   b757e:	bd08      	pop	{r3, pc}
   b7580:	0003021c 	.word	0x0003021c

000b7584 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7584:	b508      	push	{r3, lr}
   b7586:	4b02      	ldr	r3, [pc, #8]	; (b7590 <realloc+0xc>)
   b7588:	681b      	ldr	r3, [r3, #0]
   b758a:	689b      	ldr	r3, [r3, #8]
   b758c:	9301      	str	r3, [sp, #4]
   b758e:	bd08      	pop	{r3, pc}
   b7590:	0003021c 	.word	0x0003021c

000b7594 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7594:	b508      	push	{r3, lr}
   b7596:	4b02      	ldr	r3, [pc, #8]	; (b75a0 <sprintf+0xc>)
   b7598:	681b      	ldr	r3, [r3, #0]
   b759a:	68db      	ldr	r3, [r3, #12]
   b759c:	9301      	str	r3, [sp, #4]
   b759e:	bd08      	pop	{r3, pc}
   b75a0:	0003021c 	.word	0x0003021c

000b75a4 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b75a4:	b508      	push	{r3, lr}
   b75a6:	4b02      	ldr	r3, [pc, #8]	; (b75b0 <snprintf+0xc>)
   b75a8:	681b      	ldr	r3, [r3, #0]
   b75aa:	69db      	ldr	r3, [r3, #28]
   b75ac:	9301      	str	r3, [sp, #4]
   b75ae:	bd08      	pop	{r3, pc}
   b75b0:	0003021c 	.word	0x0003021c

000b75b4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b75b4:	b508      	push	{r3, lr}
   b75b6:	4b02      	ldr	r3, [pc, #8]	; (b75c0 <vsnprintf+0xc>)
   b75b8:	681b      	ldr	r3, [r3, #0]
   b75ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b75bc:	9301      	str	r3, [sp, #4]
   b75be:	bd08      	pop	{r3, pc}
   b75c0:	0003021c 	.word	0x0003021c

000b75c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b75c4:	b508      	push	{r3, lr}
   b75c6:	4b02      	ldr	r3, [pc, #8]	; (b75d0 <abort+0xc>)
   b75c8:	681b      	ldr	r3, [r3, #0]
   b75ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b75cc:	9301      	str	r3, [sp, #4]
   b75ce:	bd08      	pop	{r3, pc}
   b75d0:	0003021c 	.word	0x0003021c

000b75d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b75d4:	b508      	push	{r3, lr}
   b75d6:	4b02      	ldr	r3, [pc, #8]	; (b75e0 <_malloc_r+0xc>)
   b75d8:	681b      	ldr	r3, [r3, #0]
   b75da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b75dc:	9301      	str	r3, [sp, #4]
   b75de:	bd08      	pop	{r3, pc}
   b75e0:	0003021c 	.word	0x0003021c

000b75e4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b75e4:	b508      	push	{r3, lr}
   b75e6:	4b02      	ldr	r3, [pc, #8]	; (b75f0 <__errno+0xc>)
   b75e8:	681b      	ldr	r3, [r3, #0]
   b75ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b75ec:	9301      	str	r3, [sp, #4]
   b75ee:	bd08      	pop	{r3, pc}
   b75f0:	0003021c 	.word	0x0003021c

000b75f4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b75f4:	b508      	push	{r3, lr}
   b75f6:	4b02      	ldr	r3, [pc, #8]	; (b7600 <__assert_func+0xc>)
   b75f8:	681b      	ldr	r3, [r3, #0]
   b75fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b75fc:	9301      	str	r3, [sp, #4]
   b75fe:	bd08      	pop	{r3, pc}
   b7600:	0003021c 	.word	0x0003021c

000b7604 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7604:	b508      	push	{r3, lr}
   b7606:	4b02      	ldr	r3, [pc, #8]	; (b7610 <newlib_impure_ptr_callback+0xc>)
   b7608:	681b      	ldr	r3, [r3, #0]
   b760a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b760c:	9301      	str	r3, [sp, #4]
   b760e:	bd08      	pop	{r3, pc}
   b7610:	0003021c 	.word	0x0003021c

000b7614 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7614:	2300      	movs	r3, #0
   b7616:	6840      	ldr	r0, [r0, #4]
   b7618:	461a      	mov	r2, r3
   b761a:	f7ff bee5 	b.w	b73e8 <network_connect>

000b761e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b761e:	6840      	ldr	r0, [r0, #4]
   b7620:	2200      	movs	r2, #0
   b7622:	2102      	movs	r1, #2
   b7624:	f7ff bef0 	b.w	b7408 <network_disconnect>

000b7628 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7628:	2200      	movs	r2, #0
   b762a:	6840      	ldr	r0, [r0, #4]
   b762c:	4611      	mov	r1, r2
   b762e:	f7ff bee3 	b.w	b73f8 <network_connecting>

000b7632 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7632:	2200      	movs	r2, #0
   b7634:	6840      	ldr	r0, [r0, #4]
   b7636:	4611      	mov	r1, r2
   b7638:	f7ff beee 	b.w	b7418 <network_ready>

000b763c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b763c:	2300      	movs	r3, #0
   b763e:	6840      	ldr	r0, [r0, #4]
   b7640:	461a      	mov	r2, r3
   b7642:	4619      	mov	r1, r3
   b7644:	f7ff bef0 	b.w	b7428 <network_on>

000b7648 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7648:	2300      	movs	r3, #0
   b764a:	6840      	ldr	r0, [r0, #4]
   b764c:	461a      	mov	r2, r3
   b764e:	4619      	mov	r1, r3
   b7650:	f7ff bef2 	b.w	b7438 <network_off>

000b7654 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7654:	6840      	ldr	r0, [r0, #4]
   b7656:	2100      	movs	r1, #0
   b7658:	f7ff bf16 	b.w	b7488 <network_is_on>

000b765c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b765c:	6840      	ldr	r0, [r0, #4]
   b765e:	2100      	movs	r1, #0
   b7660:	f7ff bf1a 	b.w	b7498 <network_is_off>

000b7664 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7664:	6840      	ldr	r0, [r0, #4]
   b7666:	2200      	movs	r2, #0
   b7668:	f081 0101 	eor.w	r1, r1, #1
   b766c:	f7ff beec 	b.w	b7448 <network_listen>

000b7670 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7670:	6840      	ldr	r0, [r0, #4]
   b7672:	2200      	movs	r2, #0
   b7674:	f7ff bef8 	b.w	b7468 <network_set_listen_timeout>

000b7678 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7678:	2200      	movs	r2, #0
   b767a:	6840      	ldr	r0, [r0, #4]
   b767c:	4611      	mov	r1, r2
   b767e:	f7ff befb 	b.w	b7478 <network_get_listen_timeout>

000b7682 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7682:	2200      	movs	r2, #0
   b7684:	6840      	ldr	r0, [r0, #4]
   b7686:	4611      	mov	r1, r2
   b7688:	f7ff bee6 	b.w	b7458 <network_listening>

000b768c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b768c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7690:	b095      	sub	sp, #84	; 0x54
   b7692:	4614      	mov	r4, r2
   b7694:	460d      	mov	r5, r1
   b7696:	4607      	mov	r7, r0
    IPAddress addr;
   b7698:	f000 fd1e 	bl	b80d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b769c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b769e:	221c      	movs	r2, #28
   b76a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b76a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b76a4:	f002 fe61 	bl	ba36a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b76a8:	2340      	movs	r3, #64	; 0x40
   b76aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b76ac:	4620      	mov	r0, r4
   b76ae:	466b      	mov	r3, sp
   b76b0:	aa0c      	add	r2, sp, #48	; 0x30
   b76b2:	2100      	movs	r1, #0
   b76b4:	f7ff fe0e 	bl	b72d4 <netdb_getaddrinfo>
    if (!r) {
   b76b8:	4604      	mov	r4, r0
   b76ba:	2800      	cmp	r0, #0
   b76bc:	d14b      	bne.n	b7756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b76be:	4602      	mov	r2, r0
   b76c0:	2101      	movs	r1, #1
   b76c2:	6868      	ldr	r0, [r5, #4]
   b76c4:	f7ff fea8 	bl	b7418 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b76c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b76ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b76cc:	4622      	mov	r2, r4
   b76ce:	6868      	ldr	r0, [r5, #4]
   b76d0:	f7ff fea2 	bl	b7418 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b76d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b76d6:	4681      	mov	r9, r0
        bool ok = false;
   b76d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b76da:	2e00      	cmp	r6, #0
   b76dc:	d03b      	beq.n	b7756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b76de:	2900      	cmp	r1, #0
   b76e0:	d139      	bne.n	b7756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b76e2:	6873      	ldr	r3, [r6, #4]
   b76e4:	2b02      	cmp	r3, #2
   b76e6:	d003      	beq.n	b76f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b76e8:	2b0a      	cmp	r3, #10
   b76ea:	d011      	beq.n	b7710 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b76ec:	69f6      	ldr	r6, [r6, #28]
   b76ee:	e7f4      	b.n	b76da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b76f0:	f1b8 0f00 	cmp.w	r8, #0
   b76f4:	d0fa      	beq.n	b76ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b76f6:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b76f8:	a806      	add	r0, sp, #24
   b76fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b76fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b76fe:	f000 fd3b 	bl	b8178 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7704:	1d3c      	adds	r4, r7, #4
   b7706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7708:	682b      	ldr	r3, [r5, #0]
   b770a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b770c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b770e:	e7ed      	b.n	b76ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7710:	f1b9 0f00 	cmp.w	r9, #0
   b7714:	d0ea      	beq.n	b76ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7716:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7718:	2210      	movs	r2, #16
   b771a:	a801      	add	r0, sp, #4
   b771c:	f002 fe25 	bl	ba36a <memset>
                    a.v = 6;
   b7720:	2306      	movs	r3, #6
   b7722:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7726:	ad01      	add	r5, sp, #4
   b7728:	f104 0308 	add.w	r3, r4, #8
   b772c:	3418      	adds	r4, #24
   b772e:	6818      	ldr	r0, [r3, #0]
   b7730:	6859      	ldr	r1, [r3, #4]
   b7732:	462a      	mov	r2, r5
   b7734:	c203      	stmia	r2!, {r0, r1}
   b7736:	3308      	adds	r3, #8
   b7738:	42a3      	cmp	r3, r4
   b773a:	4615      	mov	r5, r2
   b773c:	d1f7      	bne.n	b772e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b773e:	a901      	add	r1, sp, #4
   b7740:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7742:	ad07      	add	r5, sp, #28
   b7744:	f000 fcd6 	bl	b80f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b774a:	1d3c      	adds	r4, r7, #4
   b774c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b774e:	682b      	ldr	r3, [r5, #0]
   b7750:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7752:	4649      	mov	r1, r9
   b7754:	e7ca      	b.n	b76ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7756:	9800      	ldr	r0, [sp, #0]
   b7758:	f7ff fdb4 	bl	b72c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b775c:	4638      	mov	r0, r7
   b775e:	b015      	add	sp, #84	; 0x54
   b7760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7764 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7764:	4b02      	ldr	r3, [pc, #8]	; (b7770 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7766:	4a03      	ldr	r2, [pc, #12]	; (b7774 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7768:	601a      	str	r2, [r3, #0]
   b776a:	2200      	movs	r2, #0
   b776c:	605a      	str	r2, [r3, #4]

} // spark
   b776e:	4770      	bx	lr
   b7770:	2003e674 	.word	0x2003e674
   b7774:	000bce7c 	.word	0x000bce7c

000b7778 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7778:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b777a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b777c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7780:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7782:	2201      	movs	r2, #1
   b7784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7788:	f10d 0107 	add.w	r1, sp, #7
   b778c:	47a0      	blx	r4
}
   b778e:	b002      	add	sp, #8
   b7790:	bd10      	pop	{r4, pc}

000b7792 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7792:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7794:	6803      	ldr	r3, [r0, #0]
   b7796:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b779c:	46a4      	mov	ip, r4
}
   b779e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b77a2:	4760      	bx	ip

000b77a4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b77a4:	b513      	push	{r0, r1, r4, lr}
   b77a6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b77a8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b77aa:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b77ae:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b77b0:	f10d 0107 	add.w	r1, sp, #7
   b77b4:	2201      	movs	r2, #1
   b77b6:	47a0      	blx	r4
}
   b77b8:	b002      	add	sp, #8
   b77ba:	bd10      	pop	{r4, pc}

000b77bc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b77bc:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b77be:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b77c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b77c4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b77c8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b77ca:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b77cc:	d008      	beq.n	b77e0 <_ZN9TCPClient4readEv+0x24>
   b77ce:	6963      	ldr	r3, [r4, #20]
   b77d0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b77d4:	1c51      	adds	r1, r2, #1
   b77d6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b77da:	4413      	add	r3, r2
   b77dc:	7918      	ldrb	r0, [r3, #4]
}
   b77de:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b77e0:	6803      	ldr	r3, [r0, #0]
   b77e2:	691b      	ldr	r3, [r3, #16]
   b77e4:	4798      	blx	r3
   b77e6:	2800      	cmp	r0, #0
   b77e8:	d1f1      	bne.n	b77ce <_ZN9TCPClient4readEv+0x12>
   b77ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b77ee:	e7f6      	b.n	b77de <_ZN9TCPClient4readEv+0x22>

000b77f0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b77f0:	4770      	bx	lr

000b77f2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b77f2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b77f4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b77f6:	43c0      	mvns	r0, r0
   b77f8:	0fc0      	lsrs	r0, r0, #31
   b77fa:	4770      	bx	lr

000b77fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b77fc:	4770      	bx	lr
	...

000b7800 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7800:	4b06      	ldr	r3, [pc, #24]	; (b781c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7802:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7804:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7806:	f100 040c 	add.w	r4, r0, #12
	    ||
   b780a:	d005      	beq.n	b7818 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b780c:	4608      	mov	r0, r1
   b780e:	f001 ff9b 	bl	b9748 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7812:	2800      	cmp	r0, #0
   b7814:	bf08      	it	eq
   b7816:	2400      	moveq	r4, #0
      }
   b7818:	4620      	mov	r0, r4
   b781a:	bd10      	pop	{r4, pc}
   b781c:	000bcee4 	.word	0x000bcee4

000b7820 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7820:	b510      	push	{r4, lr}
   b7822:	21ac      	movs	r1, #172	; 0xac
   b7824:	4604      	mov	r4, r0
   b7826:	f7fc fc3a 	bl	b409e <_ZdlPvj>
   b782a:	4620      	mov	r0, r4
   b782c:	bd10      	pop	{r4, pc}

000b782e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b782e:	21ac      	movs	r1, #172	; 0xac
   b7830:	f7fc bc35 	b.w	b409e <_ZdlPvj>

000b7834 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b7838:	f04f 0800 	mov.w	r8, #0
   b783c:	b086      	sub	sp, #24
   b783e:	461c      	mov	r4, r3
   b7840:	f8c0 8004 	str.w	r8, [r0, #4]
   b7844:	4605      	mov	r5, r0
   b7846:	460e      	mov	r6, r1
   b7848:	4617      	mov	r7, r2
    struct timeval tv = {};
   b784a:	4641      	mov	r1, r8
   b784c:	2210      	movs	r2, #16
   b784e:	a802      	add	r0, sp, #8
   b7850:	f002 fd8b 	bl	ba36a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7854:	1c63      	adds	r3, r4, #1
   b7856:	d009      	beq.n	b786c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b785c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7860:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7864:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7868:	435c      	muls	r4, r3
   b786a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b786c:	6968      	ldr	r0, [r5, #20]
   b786e:	2310      	movs	r3, #16
   b7870:	9300      	str	r3, [sp, #0]
   b7872:	6800      	ldr	r0, [r0, #0]
   b7874:	ab02      	add	r3, sp, #8
   b7876:	f241 0205 	movw	r2, #4101	; 0x1005
   b787a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b787e:	f7ff fc21 	bl	b70c4 <sock_setsockopt>
    if (ret < 0) {
   b7882:	2800      	cmp	r0, #0
   b7884:	da07      	bge.n	b7896 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7886:	f7ff fead 	bl	b75e4 <__errno>
   b788a:	6803      	ldr	r3, [r0, #0]
   b788c:	606b      	str	r3, [r5, #4]
        return 0;
   b788e:	2000      	movs	r0, #0
}
   b7890:	b006      	add	sp, #24
   b7892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7896:	6968      	ldr	r0, [r5, #20]
   b7898:	2300      	movs	r3, #0
   b789a:	6800      	ldr	r0, [r0, #0]
   b789c:	463a      	mov	r2, r7
   b789e:	4631      	mov	r1, r6
   b78a0:	f7ff fc38 	bl	b7114 <sock_send>
    if (ret < 0) {
   b78a4:	1e03      	subs	r3, r0, #0
   b78a6:	dbee      	blt.n	b7886 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b78a8:	4618      	mov	r0, r3
   b78aa:	e7f1      	b.n	b7890 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b78ac <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b78ac:	b530      	push	{r4, r5, lr}
   b78ae:	b087      	sub	sp, #28
   b78b0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b78b2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b78b4:	4668      	mov	r0, sp
   b78b6:	f000 fc5f 	bl	b8178 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b78ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78bc:	3404      	adds	r4, #4
   b78be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78c0:	682b      	ldr	r3, [r5, #0]
   b78c2:	7023      	strb	r3, [r4, #0]
    }
   b78c4:	b007      	add	sp, #28
   b78c6:	bd30      	pop	{r4, r5, pc}

000b78c8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b78c8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b78ca:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b78cc:	4b05      	ldr	r3, [pc, #20]	; (b78e4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b78ce:	4604      	mov	r4, r0
   b78d0:	358c      	adds	r5, #140	; 0x8c
   b78d2:	f844 3b04 	str.w	r3, [r4], #4
   b78d6:	4606      	mov	r6, r0
   b78d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78dc:	682b      	ldr	r3, [r5, #0]
   b78de:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b78e0:	4630      	mov	r0, r6
   b78e2:	bd70      	pop	{r4, r5, r6, pc}
   b78e4:	000bd004 	.word	0x000bd004

000b78e8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b78ec:	4698      	mov	r8, r3
    stop();
   b78ee:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78f0:	b093      	sub	sp, #76	; 0x4c
   b78f2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b78f4:	2400      	movs	r4, #0
    stop();
   b78f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78f8:	4606      	mov	r6, r0
   b78fa:	4617      	mov	r7, r2
    stop();
   b78fc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b78fe:	4628      	mov	r0, r5
   b7900:	466b      	mov	r3, sp
   b7902:	4622      	mov	r2, r4
   b7904:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7906:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7908:	f7ff fce4 	bl	b72d4 <netdb_getaddrinfo>
   b790c:	4605      	mov	r5, r0
   b790e:	2800      	cmp	r0, #0
   b7910:	d163      	bne.n	b79da <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7912:	9b00      	ldr	r3, [sp, #0]
   b7914:	2b00      	cmp	r3, #0
   b7916:	d04b      	beq.n	b79b0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7918:	695b      	ldr	r3, [r3, #20]
   b791a:	2b00      	cmp	r3, #0
   b791c:	d048      	beq.n	b79b0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b791e:	a806      	add	r0, sp, #24
   b7920:	f000 fbda 	bl	b80d8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7924:	9b00      	ldr	r3, [sp, #0]
   b7926:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7928:	7863      	ldrb	r3, [r4, #1]
   b792a:	2b02      	cmp	r3, #2
   b792c:	d104      	bne.n	b7938 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b792e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7930:	a806      	add	r0, sp, #24
   b7932:	f7ff ffbb 	bl	b78ac <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7936:	e026      	b.n	b7986 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7938:	2b0a      	cmp	r3, #10
   b793a:	d124      	bne.n	b7986 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b793c:	2211      	movs	r2, #17
   b793e:	4629      	mov	r1, r5
   b7940:	a801      	add	r0, sp, #4
   b7942:	f002 fd12 	bl	ba36a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7946:	68a3      	ldr	r3, [r4, #8]
   b7948:	2b00      	cmp	r3, #0
   b794a:	d038      	beq.n	b79be <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b794c:	f104 0308 	add.w	r3, r4, #8
   b7950:	f10d 0c04 	add.w	ip, sp, #4
   b7954:	3418      	adds	r4, #24
   b7956:	6818      	ldr	r0, [r3, #0]
   b7958:	6859      	ldr	r1, [r3, #4]
   b795a:	4662      	mov	r2, ip
   b795c:	c203      	stmia	r2!, {r0, r1}
   b795e:	3308      	adds	r3, #8
   b7960:	42a3      	cmp	r3, r4
   b7962:	4694      	mov	ip, r2
   b7964:	d1f7      	bne.n	b7956 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7966:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7968:	a901      	add	r1, sp, #4
   b796a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b796c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7970:	f000 fbc0 	bl	b80f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7974:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7978:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b797c:	ac07      	add	r4, sp, #28
   b797e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7980:	f8dc 3000 	ldr.w	r3, [ip]
   b7984:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7986:	a806      	add	r0, sp, #24
   b7988:	f000 fbc6 	bl	b8118 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b798c:	b180      	cbz	r0, b79b0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b798e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7990:	ad07      	add	r5, sp, #28
   b7992:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7996:	4b12      	ldr	r3, [pc, #72]	; (b79e0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7998:	930c      	str	r3, [sp, #48]	; 0x30
   b799a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b799c:	ac0d      	add	r4, sp, #52	; 0x34
   b799e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b79a0:	682b      	ldr	r3, [r5, #0]
   b79a2:	7023      	strb	r3, [r4, #0]
   b79a4:	463a      	mov	r2, r7
   b79a6:	4643      	mov	r3, r8
   b79a8:	a90c      	add	r1, sp, #48	; 0x30
   b79aa:	4630      	mov	r0, r6
   b79ac:	47c8      	blx	r9
   b79ae:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b79b0:	9800      	ldr	r0, [sp, #0]
   b79b2:	f7ff fc87 	bl	b72c4 <netdb_freeaddrinfo>
}
   b79b6:	4628      	mov	r0, r5
   b79b8:	b013      	add	sp, #76	; 0x4c
   b79ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b79be:	68e3      	ldr	r3, [r4, #12]
   b79c0:	2b00      	cmp	r3, #0
   b79c2:	d1c3      	bne.n	b794c <_ZN9TCPClient7connectEPKctm+0x64>
   b79c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b79c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b79cc:	f7ff fc0a 	bl	b71e4 <inet_htonl>
   b79d0:	4581      	cmp	r9, r0
   b79d2:	d1bb      	bne.n	b794c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b79d4:	f104 0114 	add.w	r1, r4, #20
   b79d8:	e7aa      	b.n	b7930 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b79da:	4625      	mov	r5, r4
   b79dc:	e7e8      	b.n	b79b0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b79de:	bf00      	nop
   b79e0:	000bd004 	.word	0x000bd004

000b79e4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b79e4:	b538      	push	{r3, r4, r5, lr}
   b79e6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b79e8:	681a      	ldr	r2, [r3, #0]
   b79ea:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b79ec:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b79ee:	da10      	bge.n	b7a12 <_ZN9TCPClient9connectedEv+0x2e>
   b79f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79f8:	429a      	cmp	r2, r3
   b79fa:	d10a      	bne.n	b7a12 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b79fc:	6803      	ldr	r3, [r0, #0]
   b79fe:	691b      	ldr	r3, [r3, #16]
   b7a00:	4798      	blx	r3
        if (!rv) {
   b7a02:	4604      	mov	r4, r0
   b7a04:	b928      	cbnz	r0, b7a12 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7a06:	682b      	ldr	r3, [r5, #0]
   b7a08:	4628      	mov	r0, r5
   b7a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7a0c:	4798      	blx	r3
        rv = available();
   b7a0e:	4620      	mov	r0, r4
}
   b7a10:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7a12:	2001      	movs	r0, #1
   b7a14:	e7fc      	b.n	b7a10 <_ZN9TCPClient9connectedEv+0x2c>

000b7a16 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7a16:	b510      	push	{r4, lr}
   b7a18:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7a1a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a1e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7a22:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7a24:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7a26:	d005      	beq.n	b7a34 <_ZN9TCPClient4peekEv+0x1e>
   b7a28:	6963      	ldr	r3, [r4, #20]
   b7a2a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7a2e:	4413      	add	r3, r2
   b7a30:	7918      	ldrb	r0, [r3, #4]
}
   b7a32:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7a34:	6803      	ldr	r3, [r0, #0]
   b7a36:	691b      	ldr	r3, [r3, #16]
   b7a38:	4798      	blx	r3
   b7a3a:	2800      	cmp	r0, #0
   b7a3c:	d1f4      	bne.n	b7a28 <_ZN9TCPClient4peekEv+0x12>
   b7a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7a42:	e7f6      	b.n	b7a32 <_ZN9TCPClient4peekEv+0x1c>

000b7a44 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a46:	6943      	ldr	r3, [r0, #20]
   b7a48:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7a4a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a4e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7a52:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7a54:	4605      	mov	r5, r0
   b7a56:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7a58:	d016      	beq.n	b7a88 <_ZN9TCPClient4readEPhj+0x44>
   b7a5a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7a5c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7a60:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7a64:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7a66:	42bc      	cmp	r4, r7
   b7a68:	bf28      	it	cs
   b7a6a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7a6c:	3304      	adds	r3, #4
   b7a6e:	4622      	mov	r2, r4
   b7a70:	4419      	add	r1, r3
   b7a72:	4630      	mov	r0, r6
   b7a74:	f002 fc6b 	bl	ba34e <memcpy>
   b7a78:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7a7a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7a7e:	4423      	add	r3, r4
   b7a80:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7a84:	4620      	mov	r0, r4
   b7a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7a88:	6803      	ldr	r3, [r0, #0]
   b7a8a:	691b      	ldr	r3, [r3, #16]
   b7a8c:	4798      	blx	r3
   b7a8e:	2800      	cmp	r0, #0
   b7a90:	d1e3      	bne.n	b7a5a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7a92:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7a96:	e7f5      	b.n	b7a84 <_ZN9TCPClient4readEPhj+0x40>

000b7a98 <_ZN9TCPClient12flush_bufferEv>:
   b7a98:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7a9a:	2300      	movs	r3, #0
   b7a9c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7aa0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7aa2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7aa6:	4770      	bx	lr

000b7aa8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7aac:	461f      	mov	r7, r3
    stop();
   b7aae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7ab0:	460c      	mov	r4, r1
    stop();
   b7ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7ab4:	b08a      	sub	sp, #40	; 0x28
   b7ab6:	4605      	mov	r5, r0
   b7ab8:	4616      	mov	r6, r2
    stop();
   b7aba:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7abc:	7d23      	ldrb	r3, [r4, #20]
   b7abe:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7ac2:	2b04      	cmp	r3, #4
   b7ac4:	bf0c      	ite	eq
   b7ac6:	2002      	moveq	r0, #2
   b7ac8:	200a      	movne	r0, #10
   b7aca:	2206      	movs	r2, #6
   b7acc:	2101      	movs	r1, #1
   b7ace:	f7ff fb31 	bl	b7134 <sock_socket>
   b7ad2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7ad6:	696b      	ldr	r3, [r5, #20]
   b7ad8:	681b      	ldr	r3, [r3, #0]
   b7ada:	2b00      	cmp	r3, #0
   b7adc:	da08      	bge.n	b7af0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7ade:	682b      	ldr	r3, [r5, #0]
   b7ae0:	4628      	mov	r0, r5
   b7ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7ae4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7ae6:	4798      	blx	r3
}
   b7ae8:	4620      	mov	r0, r4
   b7aea:	b00a      	add	sp, #40	; 0x28
   b7aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7af0:	4628      	mov	r0, r5
   b7af2:	f7ff ffd1 	bl	b7a98 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7af6:	b1b7      	cbz	r7, b7b26 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7af8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7afa:	a903      	add	r1, sp, #12
   b7afc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7afe:	9303      	str	r3, [sp, #12]
   b7b00:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7b04:	f7ff fbbe 	bl	b7284 <if_index_to_name>
   b7b08:	2800      	cmp	r0, #0
   b7b0a:	d1e8      	bne.n	b7ade <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7b0c:	6968      	ldr	r0, [r5, #20]
   b7b0e:	2306      	movs	r3, #6
   b7b10:	9300      	str	r3, [sp, #0]
   b7b12:	6800      	ldr	r0, [r0, #0]
   b7b14:	ab03      	add	r3, sp, #12
   b7b16:	f241 020b 	movw	r2, #4107	; 0x100b
   b7b1a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7b1e:	f7ff fad1 	bl	b70c4 <sock_setsockopt>
   b7b22:	2800      	cmp	r0, #0
   b7b24:	d1db      	bne.n	b7ade <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7b26:	221c      	movs	r2, #28
   b7b28:	2100      	movs	r1, #0
   b7b2a:	a803      	add	r0, sp, #12
   b7b2c:	f002 fc1d 	bl	ba36a <memset>
    if (ip.version() == 4) {
   b7b30:	7d23      	ldrb	r3, [r4, #20]
   b7b32:	2b04      	cmp	r3, #4
   b7b34:	d11d      	bne.n	b7b72 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7b36:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7b3a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7b3c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7b40:	f7ff fb60 	bl	b7204 <inet_htons>
   b7b44:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7b48:	6860      	ldr	r0, [r4, #4]
   b7b4a:	f7ff fb4b 	bl	b71e4 <inet_htonl>
   b7b4e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7b50:	696b      	ldr	r3, [r5, #20]
   b7b52:	221c      	movs	r2, #28
   b7b54:	6818      	ldr	r0, [r3, #0]
   b7b56:	a903      	add	r1, sp, #12
   b7b58:	f7ff fac4 	bl	b70e4 <sock_connect>
   b7b5c:	2800      	cmp	r0, #0
   b7b5e:	d1be      	bne.n	b7ade <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7b60:	3404      	adds	r4, #4
   b7b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7b64:	696d      	ldr	r5, [r5, #20]
   b7b66:	358c      	adds	r5, #140	; 0x8c
   b7b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7b6a:	6823      	ldr	r3, [r4, #0]
   b7b6c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7b6e:	2401      	movs	r4, #1
   b7b70:	e7ba      	b.n	b7ae8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7b72:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7b76:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7b78:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7b7c:	f7ff fb42 	bl	b7204 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b80:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7b82:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b86:	1d23      	adds	r3, r4, #4
   b7b88:	f104 0714 	add.w	r7, r4, #20
   b7b8c:	6818      	ldr	r0, [r3, #0]
   b7b8e:	6859      	ldr	r1, [r3, #4]
   b7b90:	4632      	mov	r2, r6
   b7b92:	c203      	stmia	r2!, {r0, r1}
   b7b94:	3308      	adds	r3, #8
   b7b96:	42bb      	cmp	r3, r7
   b7b98:	4616      	mov	r6, r2
   b7b9a:	d1f7      	bne.n	b7b8c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7b9c:	e7d8      	b.n	b7b50 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7ba0 <_ZN9TCPClient9availableEv>:
{
   b7ba0:	b530      	push	{r4, r5, lr}
   b7ba2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7ba4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7ba8:	b08b      	sub	sp, #44	; 0x2c
   b7baa:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7bac:	b12b      	cbz	r3, b7bba <_ZN9TCPClient9availableEv+0x1a>
   b7bae:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7bb2:	429a      	cmp	r2, r3
   b7bb4:	d101      	bne.n	b7bba <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7bb6:	f7ff ff6f 	bl	b7a98 <_ZN9TCPClient12flush_bufferEv>
   b7bba:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7bbc:	6808      	ldr	r0, [r1, #0]
   b7bbe:	2800      	cmp	r0, #0
   b7bc0:	db18      	blt.n	b7bf4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7bc2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7bc6:	2d7f      	cmp	r5, #127	; 0x7f
   b7bc8:	d814      	bhi.n	b7bf4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7bca:	3104      	adds	r1, #4
   b7bcc:	2308      	movs	r3, #8
   b7bce:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7bd2:	4429      	add	r1, r5
   b7bd4:	f7ff fa8e 	bl	b70f4 <sock_recv>
            if (ret > 0) {
   b7bd8:	2800      	cmp	r0, #0
   b7bda:	dd13      	ble.n	b7c04 <_ZN9TCPClient9availableEv+0x64>
   b7bdc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7bde:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7be2:	b90a      	cbnz	r2, b7be8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7be4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7be8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7bea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7bee:	4410      	add	r0, r2
   b7bf0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7bf4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7bf6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7bfa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7bfe:	1ac0      	subs	r0, r0, r3
   b7c00:	b00b      	add	sp, #44	; 0x2c
   b7c02:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7c04:	f7ff fcee 	bl	b75e4 <__errno>
   b7c08:	6803      	ldr	r3, [r0, #0]
   b7c0a:	2b0b      	cmp	r3, #11
   b7c0c:	d0f2      	beq.n	b7bf4 <_ZN9TCPClient9availableEv+0x54>
   b7c0e:	f7ff fce9 	bl	b75e4 <__errno>
   b7c12:	6803      	ldr	r3, [r0, #0]
   b7c14:	2b0b      	cmp	r3, #11
   b7c16:	d0ed      	beq.n	b7bf4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7c18:	2320      	movs	r3, #32
   b7c1a:	2500      	movs	r5, #0
   b7c1c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7c20:	f7ff fce0 	bl	b75e4 <__errno>
   b7c24:	6803      	ldr	r3, [r0, #0]
   b7c26:	9301      	str	r3, [sp, #4]
   b7c28:	4b08      	ldr	r3, [pc, #32]	; (b7c4c <_ZN9TCPClient9availableEv+0xac>)
   b7c2a:	4909      	ldr	r1, [pc, #36]	; (b7c50 <_ZN9TCPClient9availableEv+0xb0>)
   b7c2c:	9300      	str	r3, [sp, #0]
   b7c2e:	aa02      	add	r2, sp, #8
   b7c30:	462b      	mov	r3, r5
   b7c32:	2032      	movs	r0, #50	; 0x32
   b7c34:	f7ff fb76 	bl	b7324 <log_message>
                    sock_close(d_->sock);
   b7c38:	6963      	ldr	r3, [r4, #20]
   b7c3a:	6818      	ldr	r0, [r3, #0]
   b7c3c:	f7ff fa4a 	bl	b70d4 <sock_close>
   b7c40:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7c46:	601a      	str	r2, [r3, #0]
   b7c48:	e7d4      	b.n	b7bf4 <_ZN9TCPClient9availableEv+0x54>
   b7c4a:	bf00      	nop
   b7c4c:	000bceb7 	.word	0x000bceb7
   b7c50:	000bceb0 	.word	0x000bceb0

000b7c54 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7c54:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7c56:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7c58:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7c5a:	6818      	ldr	r0, [r3, #0]
   b7c5c:	2800      	cmp	r0, #0
   b7c5e:	db01      	blt.n	b7c64 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7c60:	f7ff fa38 	bl	b70d4 <sock_close>
   b7c64:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7c6a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7c6c:	6960      	ldr	r0, [r4, #20]
   b7c6e:	2211      	movs	r2, #17
   b7c70:	2100      	movs	r1, #0
   b7c72:	308c      	adds	r0, #140	; 0x8c
   b7c74:	f002 fb79 	bl	ba36a <memset>
    flush_buffer();
   b7c78:	4620      	mov	r0, r4
}
   b7c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7c7e:	f7ff bf0b 	b.w	b7a98 <_ZN9TCPClient12flush_bufferEv>

000b7c82 <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   b7c82:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7c84:	6818      	ldr	r0, [r3, #0]
}
   b7c86:	43c0      	mvns	r0, r0
   b7c88:	0fc0      	lsrs	r0, r0, #31
   b7c8a:	4770      	bx	lr

000b7c8c <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7c8c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7c8e:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7c90:	4604      	mov	r4, r0
          total(0) {
   b7c92:	6001      	str	r1, [r0, #0]
   b7c94:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7c98:	3088      	adds	r0, #136	; 0x88
   b7c9a:	f000 fa1d 	bl	b80d8 <_ZN9IPAddressC1Ev>
}
   b7c9e:	4620      	mov	r0, r4
   b7ca0:	bd10      	pop	{r4, pc}
	...

000b7ca4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7ca6:	2300      	movs	r3, #0
   b7ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7cac:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7cb0:	4a0e      	ldr	r2, [pc, #56]	; (b7cec <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7cb2:	6103      	str	r3, [r0, #16]
   b7cb4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7cb6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7cb8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7cba:	20ac      	movs	r0, #172	; 0xac
   b7cbc:	9101      	str	r1, [sp, #4]
   b7cbe:	f7fc f9ea 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7cc2:	1e05      	subs	r5, r0, #0
   b7cc4:	f105 060c 	add.w	r6, r5, #12
   b7cc8:	d008      	beq.n	b7cdc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7cca:	2301      	movs	r3, #1
   b7ccc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7cd0:	4b07      	ldr	r3, [pc, #28]	; (b7cf0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7cd2:	9901      	ldr	r1, [sp, #4]
   b7cd4:	602b      	str	r3, [r5, #0]
   b7cd6:	4630      	mov	r0, r6
   b7cd8:	f7ff ffd8 	bl	b7c8c <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7cdc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7cde:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7ce2:	f7ff fed9 	bl	b7a98 <_ZN9TCPClient12flush_bufferEv>
}
   b7ce6:	b002      	add	sp, #8
   b7ce8:	bd70      	pop	{r4, r5, r6, pc}
   b7cea:	bf00      	nop
   b7cec:	000bcef4 	.word	0x000bcef4
   b7cf0:	000bced0 	.word	0x000bced0

000b7cf4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7cf4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7cf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7cfa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7cfc:	f7ff ffd2 	bl	b7ca4 <_ZN9TCPClientC1Ei>
}
   b7d00:	4620      	mov	r0, r4
   b7d02:	bd10      	pop	{r4, pc}

000b7d04 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7d04:	b510      	push	{r4, lr}
   b7d06:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7d08:	6800      	ldr	r0, [r0, #0]
   b7d0a:	2800      	cmp	r0, #0
   b7d0c:	db01      	blt.n	b7d12 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7d0e:	f7ff f9e1 	bl	b70d4 <sock_close>
    }
}
   b7d12:	4620      	mov	r0, r4
   b7d14:	bd10      	pop	{r4, pc}

000b7d16 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7d16:	300c      	adds	r0, #12
   b7d18:	f7ff bff4 	b.w	b7d04 <_ZN9TCPClient4DataD1Ev>

000b7d1c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7d1c:	b510      	push	{r4, lr}
   b7d1e:	4604      	mov	r4, r0
   b7d20:	4608      	mov	r0, r1
{
    _spi = spi;
   b7d22:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7d24:	f7ff f9b6 	bl	b7094 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7d28:	2300      	movs	r3, #0
   b7d2a:	6063      	str	r3, [r4, #4]
}
   b7d2c:	4620      	mov	r0, r4
   b7d2e:	bd10      	pop	{r4, pc}

000b7d30 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b7d30:	b510      	push	{r4, lr}
  if (0 == max) {
   b7d32:	4604      	mov	r4, r0
   b7d34:	b128      	cbz	r0, b7d42 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b7d36:	f002 fb4f 	bl	ba3d8 <rand>
   b7d3a:	fb90 f3f4 	sdiv	r3, r0, r4
   b7d3e:	fb03 0414 	mls	r4, r3, r4, r0
}
   b7d42:	4620      	mov	r0, r4
   b7d44:	bd10      	pop	{r4, pc}

000b7d46 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   b7d46:	4288      	cmp	r0, r1
{
   b7d48:	b510      	push	{r4, lr}
   b7d4a:	4604      	mov	r4, r0
  if (min >= max) {
   b7d4c:	da03      	bge.n	b7d56 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   b7d4e:	1a08      	subs	r0, r1, r0
   b7d50:	f7ff ffee 	bl	b7d30 <_Z6randomi>
   b7d54:	4404      	add	r4, r0
}
   b7d56:	4620      	mov	r0, r4
   b7d58:	bd10      	pop	{r4, pc}

000b7d5a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7d5a:	4770      	bx	lr

000b7d5c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d5e:	4606      	mov	r6, r0
   b7d60:	4615      	mov	r5, r2
   b7d62:	460c      	mov	r4, r1
   b7d64:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7d66:	42bc      	cmp	r4, r7
   b7d68:	d006      	beq.n	b7d78 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7d6a:	6833      	ldr	r3, [r6, #0]
   b7d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7d70:	689b      	ldr	r3, [r3, #8]
   b7d72:	4630      	mov	r0, r6
   b7d74:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7d76:	e7f6      	b.n	b7d66 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7d78:	4628      	mov	r0, r5
   b7d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d7c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7d7c:	7c00      	ldrb	r0, [r0, #16]
   b7d7e:	2200      	movs	r2, #0
   b7d80:	f7ff b948 	b.w	b7014 <hal_i2c_write>

000b7d84 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7d84:	7c00      	ldrb	r0, [r0, #16]
   b7d86:	2100      	movs	r1, #0
   b7d88:	f7ff b94c 	b.w	b7024 <hal_i2c_available>

000b7d8c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7d8c:	7c00      	ldrb	r0, [r0, #16]
   b7d8e:	2100      	movs	r1, #0
   b7d90:	f7ff b950 	b.w	b7034 <hal_i2c_read>

000b7d94 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7d94:	7c00      	ldrb	r0, [r0, #16]
   b7d96:	2100      	movs	r1, #0
   b7d98:	f7ff b954 	b.w	b7044 <hal_i2c_peek>

000b7d9c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7d9c:	7c00      	ldrb	r0, [r0, #16]
   b7d9e:	2100      	movs	r1, #0
   b7da0:	f7ff b958 	b.w	b7054 <hal_i2c_flush>

000b7da4 <_ZN7TwoWireD0Ev>:
   b7da4:	b510      	push	{r4, lr}
   b7da6:	2114      	movs	r1, #20
   b7da8:	4604      	mov	r4, r0
   b7daa:	f7fc f978 	bl	b409e <_ZdlPvj>
   b7dae:	4620      	mov	r0, r4
   b7db0:	bd10      	pop	{r4, pc}
	...

000b7db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7db4:	b510      	push	{r4, lr}
   b7db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7dba:	4604      	mov	r4, r0
   b7dbc:	4608      	mov	r0, r1
   b7dbe:	2100      	movs	r1, #0
   b7dc0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7dc4:	4b03      	ldr	r3, [pc, #12]	; (b7dd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7dc6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7dc8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7dca:	4611      	mov	r1, r2
   b7dcc:	f7ff f952 	bl	b7074 <hal_i2c_init>
}
   b7dd0:	4620      	mov	r0, r4
   b7dd2:	bd10      	pop	{r4, pc}
   b7dd4:	000bcf40 	.word	0x000bcf40

000b7dd8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7dd8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7dda:	2100      	movs	r1, #0
   b7ddc:	7c00      	ldrb	r0, [r0, #16]
   b7dde:	f7ff f951 	bl	b7084 <hal_i2c_lock>
}
   b7de2:	fab0 f080 	clz	r0, r0
   b7de6:	0940      	lsrs	r0, r0, #5
   b7de8:	bd08      	pop	{r3, pc}

000b7dea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b7dea:	b510      	push	{r4, lr}
      if (_M_empty())
   b7dec:	6883      	ldr	r3, [r0, #8]
   b7dee:	4604      	mov	r4, r0
   b7df0:	b90b      	cbnz	r3, b7df6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7df2:	f001 fca6 	bl	b9742 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7df6:	68c3      	ldr	r3, [r0, #12]
   b7df8:	4798      	blx	r3
      if (_M_manager)
   b7dfa:	68a3      	ldr	r3, [r4, #8]
   b7dfc:	b11b      	cbz	r3, b7e06 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7dfe:	2203      	movs	r2, #3
   b7e00:	4621      	mov	r1, r4
   b7e02:	4620      	mov	r0, r4
   b7e04:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7e06:	4620      	mov	r0, r4
   b7e08:	2110      	movs	r1, #16
}
   b7e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7e0e:	f7fc b946 	b.w	b409e <_ZdlPvj>

000b7e12 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7e12:	4770      	bx	lr

000b7e14 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7e14:	7441      	strb	r1, [r0, #17]
}
   b7e16:	4770      	bx	lr

000b7e18 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7e18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7e1a:	7c00      	ldrb	r0, [r0, #16]
   b7e1c:	f7ff f9c2 	bl	b71a4 <hal_usart_available_data_for_write>
}
   b7e20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e24:	bd08      	pop	{r3, pc}

000b7e26 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7e26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7e28:	7c00      	ldrb	r0, [r0, #16]
   b7e2a:	f7ff f993 	bl	b7154 <hal_usart_available>
}
   b7e2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e32:	bd08      	pop	{r3, pc}

000b7e34 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7e34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7e36:	7c00      	ldrb	r0, [r0, #16]
   b7e38:	f7ff f99c 	bl	b7174 <hal_usart_peek>
}
   b7e3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e40:	bd08      	pop	{r3, pc}

000b7e42 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7e42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7e44:	7c00      	ldrb	r0, [r0, #16]
   b7e46:	f7ff f98d 	bl	b7164 <hal_usart_read>
}
   b7e4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e4e:	bd08      	pop	{r3, pc}

000b7e50 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7e50:	7c00      	ldrb	r0, [r0, #16]
   b7e52:	f7ff b997 	b.w	b7184 <hal_usart_flush>

000b7e56 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7e56:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e58:	7c45      	ldrb	r5, [r0, #17]
{
   b7e5a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e5c:	b12d      	cbz	r5, b7e6a <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7e5e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7e60:	b003      	add	sp, #12
   b7e62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7e66:	f7ff b96d 	b.w	b7144 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e6a:	7c00      	ldrb	r0, [r0, #16]
   b7e6c:	9101      	str	r1, [sp, #4]
   b7e6e:	f7ff f999 	bl	b71a4 <hal_usart_available_data_for_write>
   b7e72:	2800      	cmp	r0, #0
   b7e74:	9901      	ldr	r1, [sp, #4]
   b7e76:	dcf2      	bgt.n	b7e5e <_ZN11USARTSerial5writeEh+0x8>
}
   b7e78:	4628      	mov	r0, r5
   b7e7a:	b003      	add	sp, #12
   b7e7c:	bd30      	pop	{r4, r5, pc}

000b7e7e <_ZN11USARTSerialD0Ev>:
   b7e7e:	b510      	push	{r4, lr}
   b7e80:	2114      	movs	r1, #20
   b7e82:	4604      	mov	r4, r0
   b7e84:	f7fc f90b 	bl	b409e <_ZdlPvj>
   b7e88:	4620      	mov	r0, r4
   b7e8a:	bd10      	pop	{r4, pc}

000b7e8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7e8c:	b510      	push	{r4, lr}
   b7e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e92:	4604      	mov	r4, r0
   b7e94:	4608      	mov	r0, r1
   b7e96:	4611      	mov	r1, r2
   b7e98:	2200      	movs	r2, #0
   b7e9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7e9e:	4b04      	ldr	r3, [pc, #16]	; (b7eb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7ea0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7ea2:	2301      	movs	r3, #1
  _serial = serial;
   b7ea4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7ea6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7ea8:	f7ff f98c 	bl	b71c4 <hal_usart_init_ex>
}
   b7eac:	4620      	mov	r0, r4
   b7eae:	bd10      	pop	{r4, pc}
   b7eb0:	000bcf68 	.word	0x000bcf68

000b7eb4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7eb4:	7c00      	ldrb	r0, [r0, #16]
   b7eb6:	2300      	movs	r3, #0
   b7eb8:	f7ff b97c 	b.w	b71b4 <hal_usart_begin_config>

000b7ebc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7ebc:	2200      	movs	r2, #0
   b7ebe:	f7ff bff9 	b.w	b7eb4 <_ZN11USARTSerial5beginEmm>

000b7ec2 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7ec2:	2200      	movs	r2, #0
   b7ec4:	6840      	ldr	r0, [r0, #4]
   b7ec6:	4611      	mov	r1, r2
   b7ec8:	f7ff baa6 	b.w	b7418 <network_ready>

000b7ecc <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b7ecc:	2200      	movs	r2, #0
   b7ece:	6840      	ldr	r0, [r0, #4]
   b7ed0:	4611      	mov	r1, r2
   b7ed2:	f7ff bac1 	b.w	b7458 <network_listening>

000b7ed6 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ed6:	2200      	movs	r2, #0
   b7ed8:	6840      	ldr	r0, [r0, #4]
   b7eda:	4611      	mov	r1, r2
   b7edc:	f7ff bacc 	b.w	b7478 <network_get_listen_timeout>

000b7ee0 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7ee0:	6840      	ldr	r0, [r0, #4]
   b7ee2:	2200      	movs	r2, #0
   b7ee4:	f7ff bac0 	b.w	b7468 <network_set_listen_timeout>

000b7ee8 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ee8:	6840      	ldr	r0, [r0, #4]
   b7eea:	2200      	movs	r2, #0
   b7eec:	f081 0101 	eor.w	r1, r1, #1
   b7ef0:	f7ff baaa 	b.w	b7448 <network_listen>

000b7ef4 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7ef4:	2300      	movs	r3, #0
   b7ef6:	6840      	ldr	r0, [r0, #4]
   b7ef8:	461a      	mov	r2, r3
   b7efa:	4619      	mov	r1, r3
   b7efc:	f7ff ba9c 	b.w	b7438 <network_off>

000b7f00 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7f00:	2300      	movs	r3, #0
   b7f02:	6840      	ldr	r0, [r0, #4]
   b7f04:	461a      	mov	r2, r3
   b7f06:	4619      	mov	r1, r3
   b7f08:	f7ff ba8e 	b.w	b7428 <network_on>

000b7f0c <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7f0c:	2200      	movs	r2, #0
   b7f0e:	6840      	ldr	r0, [r0, #4]
   b7f10:	4611      	mov	r1, r2
   b7f12:	f7ff ba71 	b.w	b73f8 <network_connecting>

000b7f16 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7f16:	6840      	ldr	r0, [r0, #4]
   b7f18:	2200      	movs	r2, #0
   b7f1a:	2102      	movs	r1, #2
   b7f1c:	f7ff ba74 	b.w	b7408 <network_disconnect>

000b7f20 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7f20:	2300      	movs	r3, #0
   b7f22:	6840      	ldr	r0, [r0, #4]
   b7f24:	461a      	mov	r2, r3
   b7f26:	f7ff ba5f 	b.w	b73e8 <network_connect>
	...

000b7f2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b7f2c:	4b08      	ldr	r3, [pc, #32]	; (b7f50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b7f2e:	b510      	push	{r4, lr}
   b7f30:	2428      	movs	r4, #40	; 0x28
   b7f32:	4622      	mov	r2, r4
   b7f34:	4618      	mov	r0, r3
   b7f36:	2100      	movs	r1, #0
   b7f38:	f002 fa17 	bl	ba36a <memset>
   b7f3c:	4b05      	ldr	r3, [pc, #20]	; (b7f54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b7f3e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7f44:	6042      	str	r2, [r0, #4]
   b7f46:	2204      	movs	r2, #4
   b7f48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b7f4a:	4a03      	ldr	r2, [pc, #12]	; (b7f58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7f4c:	601a      	str	r2, [r3, #0]
   b7f4e:	bd10      	pop	{r4, pc}
   b7f50:	2003e684 	.word	0x2003e684
   b7f54:	2003e67c 	.word	0x2003e67c
   b7f58:	000bcf98 	.word	0x000bcf98

000b7f5c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7f5c:	7441      	strb	r1, [r0, #17]
}
   b7f5e:	4770      	bx	lr

000b7f60 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7f60:	4770      	bx	lr

000b7f62 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7f62:	4770      	bx	lr

000b7f64 <_ZN9USBSerial4readEv>:
{
   b7f64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7f66:	2100      	movs	r1, #0
   b7f68:	7c00      	ldrb	r0, [r0, #16]
   b7f6a:	f7ff f83b 	bl	b6fe4 <HAL_USB_USART_Receive_Data>
}
   b7f6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f72:	bd08      	pop	{r3, pc}

000b7f74 <_ZN9USBSerial4peekEv>:
{
   b7f74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7f76:	2101      	movs	r1, #1
   b7f78:	7c00      	ldrb	r0, [r0, #16]
   b7f7a:	f7ff f833 	bl	b6fe4 <HAL_USB_USART_Receive_Data>
}
   b7f7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f82:	bd08      	pop	{r3, pc}

000b7f84 <_ZN9USBSerial17availableForWriteEv>:
{
   b7f84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7f86:	7c00      	ldrb	r0, [r0, #16]
   b7f88:	f7ff f824 	bl	b6fd4 <HAL_USB_USART_Available_Data_For_Write>
}
   b7f8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f90:	bd08      	pop	{r3, pc}

000b7f92 <_ZN9USBSerial9availableEv>:
{
   b7f92:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7f94:	7c00      	ldrb	r0, [r0, #16]
   b7f96:	f7ff f815 	bl	b6fc4 <HAL_USB_USART_Available_Data>
}
   b7f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f9e:	bd08      	pop	{r3, pc}

000b7fa0 <_ZN9USBSerial5writeEh>:
{
   b7fa0:	b513      	push	{r0, r1, r4, lr}
   b7fa2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7fa4:	7c00      	ldrb	r0, [r0, #16]
{
   b7fa6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7fa8:	f7ff f814 	bl	b6fd4 <HAL_USB_USART_Available_Data_For_Write>
   b7fac:	2800      	cmp	r0, #0
   b7fae:	9901      	ldr	r1, [sp, #4]
   b7fb0:	dc01      	bgt.n	b7fb6 <_ZN9USBSerial5writeEh+0x16>
   b7fb2:	7c60      	ldrb	r0, [r4, #17]
   b7fb4:	b120      	cbz	r0, b7fc0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7fb6:	7c20      	ldrb	r0, [r4, #16]
   b7fb8:	f7ff f81c 	bl	b6ff4 <HAL_USB_USART_Send_Data>
   b7fbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7fc0:	b002      	add	sp, #8
   b7fc2:	bd10      	pop	{r4, pc}

000b7fc4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7fc4:	7c00      	ldrb	r0, [r0, #16]
   b7fc6:	f7ff b81d 	b.w	b7004 <HAL_USB_USART_Flush_Data>

000b7fca <_ZN9USBSerialD0Ev>:
   b7fca:	b510      	push	{r4, lr}
   b7fcc:	2114      	movs	r1, #20
   b7fce:	4604      	mov	r4, r0
   b7fd0:	f7fc f865 	bl	b409e <_ZdlPvj>
   b7fd4:	4620      	mov	r0, r4
   b7fd6:	bd10      	pop	{r4, pc}

000b7fd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7fd8:	b510      	push	{r4, lr}
   b7fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7fde:	4604      	mov	r4, r0
   b7fe0:	4608      	mov	r0, r1
   b7fe2:	2100      	movs	r1, #0
   b7fe4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7fe8:	4b04      	ldr	r3, [pc, #16]	; (b7ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7fea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7fec:	2301      	movs	r3, #1
  _serial = serial;
   b7fee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7ff0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7ff2:	4611      	mov	r1, r2
   b7ff4:	f7fe ffd6 	bl	b6fa4 <HAL_USB_USART_Init>
}
   b7ff8:	4620      	mov	r0, r4
   b7ffa:	bd10      	pop	{r4, pc}
   b7ffc:	000bcfd4 	.word	0x000bcfd4

000b8000 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8000:	7c00      	ldrb	r0, [r0, #16]
   b8002:	2200      	movs	r2, #0
   b8004:	f7fe bfd6 	b.w	b6fb4 <HAL_USB_USART_Begin>

000b8008 <_Z19acquireSerialBufferv>:
{
   b8008:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b800a:	2214      	movs	r2, #20
{
   b800c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b800e:	2100      	movs	r1, #0
   b8010:	f002 f9ab 	bl	ba36a <memset>
}
   b8014:	4620      	mov	r0, r4
   b8016:	bd10      	pop	{r4, pc}

000b8018 <_Z16_fetch_usbserialv>:
{
   b8018:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b801a:	4c0f      	ldr	r4, [pc, #60]	; (b8058 <_Z16_fetch_usbserialv+0x40>)
{
   b801c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b801e:	a803      	add	r0, sp, #12
   b8020:	f7ff fff2 	bl	b8008 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8024:	7821      	ldrb	r1, [r4, #0]
   b8026:	f3bf 8f5b 	dmb	ish
   b802a:	f011 0101 	ands.w	r1, r1, #1
   b802e:	d10f      	bne.n	b8050 <_Z16_fetch_usbserialv+0x38>
   b8030:	4620      	mov	r0, r4
   b8032:	9101      	str	r1, [sp, #4]
   b8034:	f7fc f835 	bl	b40a2 <__cxa_guard_acquire>
   b8038:	9901      	ldr	r1, [sp, #4]
   b803a:	b148      	cbz	r0, b8050 <_Z16_fetch_usbserialv+0x38>
   b803c:	aa03      	add	r2, sp, #12
   b803e:	4807      	ldr	r0, [pc, #28]	; (b805c <_Z16_fetch_usbserialv+0x44>)
   b8040:	f7ff ffca 	bl	b7fd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8044:	4620      	mov	r0, r4
   b8046:	f7fc f831 	bl	b40ac <__cxa_guard_release>
   b804a:	4805      	ldr	r0, [pc, #20]	; (b8060 <_Z16_fetch_usbserialv+0x48>)
   b804c:	f002 f972 	bl	ba334 <atexit>
	return _usbserial;
}
   b8050:	4802      	ldr	r0, [pc, #8]	; (b805c <_Z16_fetch_usbserialv+0x44>)
   b8052:	b008      	add	sp, #32
   b8054:	bd10      	pop	{r4, pc}
   b8056:	bf00      	nop
   b8058:	2003e6ac 	.word	0x2003e6ac
   b805c:	2003e6b0 	.word	0x2003e6b0
   b8060:	000b7f61 	.word	0x000b7f61

000b8064 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b8064:	4770      	bx	lr

000b8066 <_ZN9IPAddressD0Ev>:
   b8066:	b510      	push	{r4, lr}
   b8068:	2118      	movs	r1, #24
   b806a:	4604      	mov	r4, r0
   b806c:	f7fc f817 	bl	b409e <_ZdlPvj>
   b8070:	4620      	mov	r0, r4
   b8072:	bd10      	pop	{r4, pc}

000b8074 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8074:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8076:	7d03      	ldrb	r3, [r0, #20]
   b8078:	2b06      	cmp	r3, #6
{
   b807a:	b08d      	sub	sp, #52	; 0x34
   b807c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b807e:	f100 0704 	add.w	r7, r0, #4
   b8082:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8086:	d012      	beq.n	b80ae <_ZNK9IPAddress7printToER5Print+0x3a>
   b8088:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b808c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8090:	220a      	movs	r2, #10
   b8092:	4630      	mov	r0, r6
   b8094:	f000 fceb 	bl	b8a6e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8098:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b809a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b809c:	d019      	beq.n	b80d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b809e:	2c00      	cmp	r4, #0
   b80a0:	d0f4      	beq.n	b808c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b80a2:	212e      	movs	r1, #46	; 0x2e
   b80a4:	4630      	mov	r0, r6
   b80a6:	f000 fcc9 	bl	b8a3c <_ZN5Print5printEc>
   b80aa:	4404      	add	r4, r0
   b80ac:	e7ee      	b.n	b808c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b80ae:	232f      	movs	r3, #47	; 0x2f
   b80b0:	466a      	mov	r2, sp
   b80b2:	4639      	mov	r1, r7
   b80b4:	200a      	movs	r0, #10
		buf[0] = 0;
   b80b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b80ba:	f7ff f88b 	bl	b71d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b80be:	4668      	mov	r0, sp
   b80c0:	f002 fa05 	bl	ba4ce <strlen>
   b80c4:	6833      	ldr	r3, [r6, #0]
   b80c6:	4602      	mov	r2, r0
   b80c8:	68db      	ldr	r3, [r3, #12]
   b80ca:	4669      	mov	r1, sp
   b80cc:	4630      	mov	r0, r6
   b80ce:	4798      	blx	r3
   b80d0:	4604      	mov	r4, r0
    }
    return n;
}
   b80d2:	4620      	mov	r0, r4
   b80d4:	b00d      	add	sp, #52	; 0x34
   b80d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b80d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b80d8:	b510      	push	{r4, lr}
   b80da:	4b05      	ldr	r3, [pc, #20]	; (b80f0 <_ZN9IPAddressC1Ev+0x18>)
   b80dc:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b80de:	2211      	movs	r2, #17
   b80e0:	f840 3b04 	str.w	r3, [r0], #4
   b80e4:	2100      	movs	r1, #0
   b80e6:	f002 f940 	bl	ba36a <memset>
}
   b80ea:	4620      	mov	r0, r4
   b80ec:	bd10      	pop	{r4, pc}
   b80ee:	bf00      	nop
   b80f0:	000bd004 	.word	0x000bd004

000b80f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b80f4:	4603      	mov	r3, r0
   b80f6:	4a07      	ldr	r2, [pc, #28]	; (b8114 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b80f8:	b510      	push	{r4, lr}
   b80fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b80fe:	f101 0210 	add.w	r2, r1, #16
   b8102:	f851 4b04 	ldr.w	r4, [r1], #4
   b8106:	f843 4b04 	str.w	r4, [r3], #4
   b810a:	4291      	cmp	r1, r2
   b810c:	d1f9      	bne.n	b8102 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b810e:	780a      	ldrb	r2, [r1, #0]
   b8110:	701a      	strb	r2, [r3, #0]
}
   b8112:	bd10      	pop	{r4, pc}
   b8114:	000bd004 	.word	0x000bd004

000b8118 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8118:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b811a:	2b04      	cmp	r3, #4
   b811c:	d104      	bne.n	b8128 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b811e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8120:	3800      	subs	r0, #0
   b8122:	bf18      	it	ne
   b8124:	2001      	movne	r0, #1
   b8126:	4770      	bx	lr
    } else if (version() == 6) {
   b8128:	2b06      	cmp	r3, #6
   b812a:	d107      	bne.n	b813c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b812c:	6843      	ldr	r3, [r0, #4]
   b812e:	b93b      	cbnz	r3, b8140 <_ZNK9IPAddresscvbEv+0x28>
   b8130:	6883      	ldr	r3, [r0, #8]
   b8132:	b92b      	cbnz	r3, b8140 <_ZNK9IPAddresscvbEv+0x28>
   b8134:	68c3      	ldr	r3, [r0, #12]
   b8136:	b91b      	cbnz	r3, b8140 <_ZNK9IPAddresscvbEv+0x28>
   b8138:	6900      	ldr	r0, [r0, #16]
   b813a:	e7f1      	b.n	b8120 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b813c:	2000      	movs	r0, #0
   b813e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8140:	2001      	movs	r0, #1
}
   b8142:	4770      	bx	lr

000b8144 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8144:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8146:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b814a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b814e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8152:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8156:	2304      	movs	r3, #4
   b8158:	6041      	str	r1, [r0, #4]
   b815a:	7503      	strb	r3, [r0, #20]
}
   b815c:	bd10      	pop	{r4, pc}
	...

000b8160 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b8160:	b513      	push	{r0, r1, r4, lr}
   b8162:	4c04      	ldr	r4, [pc, #16]	; (b8174 <_ZN9IPAddressC1Ehhhh+0x14>)
   b8164:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b8166:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b816a:	9400      	str	r4, [sp, #0]
   b816c:	f7ff ffea 	bl	b8144 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8170:	b002      	add	sp, #8
   b8172:	bd10      	pop	{r4, pc}
   b8174:	000bd004 	.word	0x000bd004

000b8178 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8178:	b507      	push	{r0, r1, r2, lr}
   b817a:	4b06      	ldr	r3, [pc, #24]	; (b8194 <_ZN9IPAddressC1EPKh+0x1c>)
   b817c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b817e:	78cb      	ldrb	r3, [r1, #3]
   b8180:	9300      	str	r3, [sp, #0]
   b8182:	788b      	ldrb	r3, [r1, #2]
   b8184:	784a      	ldrb	r2, [r1, #1]
   b8186:	7809      	ldrb	r1, [r1, #0]
   b8188:	f7ff ffdc 	bl	b8144 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b818c:	b003      	add	sp, #12
   b818e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8192:	bf00      	nop
   b8194:	000bd004 	.word	0x000bd004

000b8198 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8198:	4770      	bx	lr

000b819a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b819a:	2000      	movs	r0, #0
   b819c:	4770      	bx	lr

000b819e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b819e:	b510      	push	{r4, lr}
   b81a0:	2110      	movs	r1, #16
   b81a2:	4604      	mov	r4, r0
   b81a4:	f7fb ff7b 	bl	b409e <_ZdlPvj>
   b81a8:	4620      	mov	r0, r4
   b81aa:	bd10      	pop	{r4, pc}

000b81ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b81ac:	b508      	push	{r3, lr}
      { delete this; }
   b81ae:	f7ff fff6 	bl	b819e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b81b2:	bd08      	pop	{r3, pc}

000b81b4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b81b4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b81b6:	2200      	movs	r2, #0
   b81b8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b81bc:	6002      	str	r2, [r0, #0]
   b81be:	8084      	strh	r4, [r0, #4]
   b81c0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b81c2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b81c4:	680c      	ldr	r4, [r1, #0]
   b81c6:	8085      	strh	r5, [r0, #4]
   b81c8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b81ca:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b81cc:	bd30      	pop	{r4, r5, pc}

000b81ce <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b81ce:	b510      	push	{r4, lr}
   b81d0:	4604      	mov	r4, r0
    free((void*)msg_);
   b81d2:	6800      	ldr	r0, [r0, #0]
   b81d4:	f7ff f9ce 	bl	b7574 <free>
}
   b81d8:	4620      	mov	r0, r4
   b81da:	bd10      	pop	{r4, pc}

000b81dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b81dc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b81de:	68c4      	ldr	r4, [r0, #12]
   b81e0:	b1f4      	cbz	r4, b8220 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b81e2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b81e4:	2b02      	cmp	r3, #2
   b81e6:	d103      	bne.n	b81f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b81e8:	f104 000c 	add.w	r0, r4, #12
   b81ec:	f7ff ffef 	bl	b81ce <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b81f0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b81f2:	b135      	cbz	r5, b8202 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b81f4:	4628      	mov	r0, r5
   b81f6:	f7fd f8d5 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
   b81fa:	2110      	movs	r1, #16
   b81fc:	4628      	mov	r0, r5
   b81fe:	f7fb ff4e 	bl	b409e <_ZdlPvj>
   b8202:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b8204:	b135      	cbz	r5, b8214 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b8206:	4628      	mov	r0, r5
   b8208:	f7fd f8cc 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
   b820c:	2110      	movs	r1, #16
   b820e:	4628      	mov	r0, r5
   b8210:	f7fb ff45 	bl	b409e <_ZdlPvj>
   b8214:	4620      	mov	r0, r4
   b8216:	2114      	movs	r1, #20
   b8218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b821c:	f7fb bf3f 	b.w	b409e <_ZdlPvj>
   b8220:	bd38      	pop	{r3, r4, r5, pc}

000b8222 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   b8222:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   b8224:	2100      	movs	r1, #0
   b8226:	f7ff b8d7 	b.w	b73d8 <spark_publish_vitals>

000b822a <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:
void CloudClass::disconnect(const CloudDisconnectOptions& options) {
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
}

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b822a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b822c:	220c      	movs	r2, #12
   b822e:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b8232:	6802      	ldr	r2, [r0, #0]
   b8234:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b8238:	7a02      	ldrb	r2, [r0, #8]
   b823a:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b823e:	6842      	ldr	r2, [r0, #4]
   b8240:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b8242:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b8244:	7a42      	ldrb	r2, [r0, #9]
   b8246:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b824a:	4619      	mov	r1, r3
   b824c:	aa01      	add	r2, sp, #4
   b824e:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b8250:	f8ad 300d 	strh.w	r3, [sp, #13]
   b8254:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b8258:	f7ff f8ae 	bl	b73b8 <spark_set_connection_property>
}
   b825c:	b005      	add	sp, #20
   b825e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8262 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8262:	680b      	ldr	r3, [r1, #0]
   b8264:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8266:	684b      	ldr	r3, [r1, #4]
   b8268:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b826a:	b113      	cbz	r3, b8272 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b826c:	685a      	ldr	r2, [r3, #4]
   b826e:	3201      	adds	r2, #1
   b8270:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8272:	4770      	bx	lr

000b8274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8274:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8276:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8278:	4668      	mov	r0, sp
   b827a:	460d      	mov	r5, r1
   b827c:	f7ff fff1 	bl	b8262 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8280:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8282:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8284:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b8286:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8288:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b828a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b828c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b828e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8290:	f7fc fc0c 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8294:	b135      	cbz	r5, b82a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b8296:	1d28      	adds	r0, r5, #4
   b8298:	f7fc fc08 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b829c:	2108      	movs	r1, #8
   b829e:	4628      	mov	r0, r5
   b82a0:	f7fb fefd 	bl	b409e <_ZdlPvj>
        return p;
    }
   b82a4:	4620      	mov	r0, r4
   b82a6:	b003      	add	sp, #12
   b82a8:	bd30      	pop	{r4, r5, pc}

000b82aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b82aa:	b513      	push	{r0, r1, r4, lr}
   b82ac:	460b      	mov	r3, r1
   b82ae:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82b0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b82b4:	466c      	mov	r4, sp
   b82b6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b82ba:	e893 0003 	ldmia.w	r3, {r0, r1}
   b82be:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b82c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b82c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b82ca:	b002      	add	sp, #8
   b82cc:	bd10      	pop	{r4, pc}

000b82ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b82ce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b82d0:	b510      	push	{r4, lr}
      if (_M_empty())
   b82d2:	b90a      	cbnz	r2, b82d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b82d4:	f001 fa35 	bl	b9742 <_ZSt25__throw_bad_function_callv>
    }
   b82d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b82dc:	68c3      	ldr	r3, [r0, #12]
   b82de:	4718      	bx	r3

000b82e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b82e0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b82e2:	6800      	ldr	r0, [r0, #0]
   b82e4:	f100 0110 	add.w	r1, r0, #16
   b82e8:	f7ff fff1 	bl	b82ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b82ec:	bd08      	pop	{r3, pc}

000b82ee <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b82ee:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b82f0:	b510      	push	{r4, lr}
      if (_M_empty())
   b82f2:	b90a      	cbnz	r2, b82f8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b82f4:	f001 fa25 	bl	b9742 <_ZSt25__throw_bad_function_callv>
    }
   b82f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b82fc:	68c3      	ldr	r3, [r0, #12]
   b82fe:	4718      	bx	r3

000b8300 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8300:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8302:	6800      	ldr	r0, [r0, #0]
   b8304:	f100 0110 	add.w	r1, r0, #16
   b8308:	f7ff fff1 	bl	b82ee <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b830c:	bd08      	pop	{r3, pc}
	...

000b8310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8310:	b538      	push	{r3, r4, r5, lr}
   b8312:	2300      	movs	r3, #0
   b8314:	4604      	mov	r4, r0
   b8316:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8318:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b831a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b831c:	f7fb febb 	bl	b4096 <_Znwj>
   b8320:	b128      	cbz	r0, b832e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8322:	2301      	movs	r3, #1
   b8324:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8328:	4b02      	ldr	r3, [pc, #8]	; (b8334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b832a:	6003      	str	r3, [r0, #0]
   b832c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b832e:	6020      	str	r0, [r4, #0]
	}
   b8330:	4620      	mov	r0, r4
   b8332:	bd38      	pop	{r3, r4, r5, pc}
   b8334:	000bd018 	.word	0x000bd018

000b8338 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8338:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b833a:	2300      	movs	r3, #0
   b833c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b833e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8340:	4604      	mov	r4, r0
   b8342:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8344:	b12b      	cbz	r3, b8352 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8346:	2202      	movs	r2, #2
   b8348:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b834a:	68eb      	ldr	r3, [r5, #12]
   b834c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b834e:	68ab      	ldr	r3, [r5, #8]
   b8350:	60a3      	str	r3, [r4, #8]
    }
   b8352:	4620      	mov	r0, r4
   b8354:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8358:	b5f0      	push	{r4, r5, r6, r7, lr}
   b835a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b835c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b835e:	4668      	mov	r0, sp
   b8360:	f7ff ff28 	bl	b81b4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8364:	f04f 0302 	mov.w	r3, #2
   b8368:	e8d4 2f4f 	ldrexb	r2, [r4]
   b836c:	2a00      	cmp	r2, #0
   b836e:	d103      	bne.n	b8378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8370:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8374:	2900      	cmp	r1, #0
   b8376:	d1f7      	bne.n	b8368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8378:	d125      	bne.n	b83c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b837a:	f104 050c 	add.w	r5, r4, #12
   b837e:	4669      	mov	r1, sp
   b8380:	4628      	mov	r0, r5
   b8382:	f7ff ff17 	bl	b81b4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b8386:	f3bf 8f5b 	dmb	ish
   b838a:	2301      	movs	r3, #1
   b838c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b838e:	2000      	movs	r0, #0
   b8390:	f104 0308 	add.w	r3, r4, #8
   b8394:	f3bf 8f5b 	dmb	ish
   b8398:	e853 6f00 	ldrex	r6, [r3]
   b839c:	e843 0200 	strex	r2, r0, [r3]
   b83a0:	2a00      	cmp	r2, #0
   b83a2:	d1f9      	bne.n	b8398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b83a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b83a8:	b16e      	cbz	r6, b83c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b83aa:	f7ff f8a5 	bl	b74f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b83ae:	b178      	cbz	r0, b83d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b83b0:	4629      	mov	r1, r5
   b83b2:	4630      	mov	r0, r6
   b83b4:	f7ff ff8b 	bl	b82ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b83b8:	4630      	mov	r0, r6
   b83ba:	f7fc fff3 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b83be:	2110      	movs	r1, #16
   b83c0:	4630      	mov	r0, r6
   b83c2:	f7fb fe6c 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b83c6:	4668      	mov	r0, sp
   b83c8:	f7ff ff01 	bl	b81ce <_ZN8particle5ErrorD1Ev>
    }
   b83cc:	b009      	add	sp, #36	; 0x24
   b83ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b83d0:	4631      	mov	r1, r6
   b83d2:	a802      	add	r0, sp, #8
   b83d4:	f7ff ffb0 	bl	b8338 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b83d8:	68e0      	ldr	r0, [r4, #12]
   b83da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b83de:	b108      	cbz	r0, b83e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b83e0:	f002 f858 	bl	ba494 <strdup>
        type_(type) {
   b83e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b83e6:	2010      	movs	r0, #16
   b83e8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b83ec:	f7fb fe53 	bl	b4096 <_Znwj>
   b83f0:	4605      	mov	r5, r0
   b83f2:	b1e8      	cbz	r0, b8430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b83f4:	2700      	movs	r7, #0
   b83f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b83f8:	2018      	movs	r0, #24
   b83fa:	f7fb fe4c 	bl	b4096 <_Znwj>
   b83fe:	4604      	mov	r4, r0
   b8400:	b188      	cbz	r0, b8426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8402:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8404:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8406:	a802      	add	r0, sp, #8
   b8408:	f7ff ff4f 	bl	b82aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b840c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b840e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8410:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8412:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8414:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8416:	a906      	add	r1, sp, #24
   b8418:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b841a:	60e3      	str	r3, [r4, #12]
   b841c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8420:	9205      	str	r2, [sp, #20]
   b8422:	f7ff fec7 	bl	b81b4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8426:	4b08      	ldr	r3, [pc, #32]	; (b8448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8428:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b842a:	4b08      	ldr	r3, [pc, #32]	; (b844c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b842c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b842e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8430:	a806      	add	r0, sp, #24
   b8432:	f7ff fecc 	bl	b81ce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8436:	a802      	add	r0, sp, #8
   b8438:	f7fc ffb4 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b843c:	2200      	movs	r2, #0
   b843e:	4629      	mov	r1, r5
   b8440:	4803      	ldr	r0, [pc, #12]	; (b8450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8442:	f7ff f861 	bl	b7508 <application_thread_invoke>
   b8446:	e7b7      	b.n	b83b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8448:	000b82e1 	.word	0x000b82e1
   b844c:	000b8565 	.word	0x000b8565
   b8450:	000b7deb 	.word	0x000b7deb

000b8454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8458:	b08b      	sub	sp, #44	; 0x2c
   b845a:	4605      	mov	r5, r0
   b845c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8460:	460f      	mov	r7, r1
   b8462:	4690      	mov	r8, r2
   b8464:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8466:	f7fe ff7f 	bl	b7368 <spark_cloud_flag_connected>
   b846a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b846c:	4683      	mov	fp, r0
   b846e:	bb38      	cbnz	r0, b84c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8470:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8474:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8476:	a905      	add	r1, sp, #20
   b8478:	4630      	mov	r0, r6
   b847a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b847e:	f7ff fe99 	bl	b81b4 <_ZN8particle5ErrorC1EOS0_>
   b8482:	2014      	movs	r0, #20
   b8484:	f7fb fe07 	bl	b4096 <_Znwj>
   b8488:	4604      	mov	r4, r0
   b848a:	b148      	cbz	r0, b84a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b848c:	2302      	movs	r3, #2
   b848e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8490:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8492:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8496:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8498:	4631      	mov	r1, r6
   b849a:	300c      	adds	r0, #12
   b849c:	f7ff fe8a 	bl	b81b4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b84a0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b84a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b84a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b84a8:	f7ff ff32 	bl	b8310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b84ac:	4630      	mov	r0, r6
   b84ae:	f7ff fe8e 	bl	b81ce <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b84b2:	a805      	add	r0, sp, #20
   b84b4:	f7ff fe8b 	bl	b81ce <_ZN8particle5ErrorD1Ev>
}
   b84b8:	4628      	mov	r0, r5
   b84ba:	b00b      	add	sp, #44	; 0x2c
   b84bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b84c0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b84c2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b84c4:	2014      	movs	r0, #20
   b84c6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b84ca:	9307      	str	r3, [sp, #28]
   b84cc:	f7fb fde3 	bl	b4096 <_Znwj>
   b84d0:	4601      	mov	r1, r0
   b84d2:	b118      	cbz	r0, b84dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b84d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b84d8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b84da:	7044      	strb	r4, [r0, #1]
   b84dc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b84de:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b84e0:	f7ff ff16 	bl	b8310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b84e4:	4b1e      	ldr	r3, [pc, #120]	; (b8560 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b84e6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b84e8:	2008      	movs	r0, #8
   b84ea:	f7fb fdd4 	bl	b4096 <_Znwj>
   b84ee:	4604      	mov	r4, r0
   b84f0:	b110      	cbz	r0, b84f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b84f2:	a903      	add	r1, sp, #12
   b84f4:	f7ff feb5 	bl	b8262 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b84f8:	9600      	str	r6, [sp, #0]
   b84fa:	fa5f f38a 	uxtb.w	r3, sl
   b84fe:	464a      	mov	r2, r9
   b8500:	4641      	mov	r1, r8
   b8502:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8504:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8506:	f7fe ff3f 	bl	b7388 <spark_send_event>
   b850a:	b9b8      	cbnz	r0, b853c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b850c:	9b03      	ldr	r3, [sp, #12]
   b850e:	785b      	ldrb	r3, [r3, #1]
   b8510:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8514:	b993      	cbnz	r3, b853c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8516:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b851a:	a905      	add	r1, sp, #20
   b851c:	a803      	add	r0, sp, #12
   b851e:	9205      	str	r2, [sp, #20]
   b8520:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8524:	f7ff ff18 	bl	b8358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8528:	a805      	add	r0, sp, #20
   b852a:	f7ff fe50 	bl	b81ce <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b852e:	a805      	add	r0, sp, #20
   b8530:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8532:	f7ff fe9f 	bl	b8274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8536:	a806      	add	r0, sp, #24
   b8538:	f7fc fab8 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b853c:	a903      	add	r1, sp, #12
   b853e:	a805      	add	r0, sp, #20
   b8540:	f7ff fe8f 	bl	b8262 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8544:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8546:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8548:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b854a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b854c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b854e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8550:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8552:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8554:	f7fc faaa 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8558:	a804      	add	r0, sp, #16
   b855a:	f7fc faa7 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b855e:	e7ab      	b.n	b84b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8560:	000b85e1 	.word	0x000b85e1

000b8564 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8564:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8568:	4605      	mov	r5, r0
	switch (__op)
   b856a:	d103      	bne.n	b8574 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b856c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b856e:	6003      	str	r3, [r0, #0]
      }
   b8570:	2000      	movs	r0, #0
   b8572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8574:	2a02      	cmp	r2, #2
   b8576:	d010      	beq.n	b859a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8578:	2a03      	cmp	r2, #3
   b857a:	d1f9      	bne.n	b8570 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b857c:	6804      	ldr	r4, [r0, #0]
   b857e:	2c00      	cmp	r4, #0
   b8580:	d0f6      	beq.n	b8570 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8582:	f104 0010 	add.w	r0, r4, #16
   b8586:	f7ff fe22 	bl	b81ce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b858a:	4620      	mov	r0, r4
   b858c:	f7fc ff0a 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8590:	2118      	movs	r1, #24
   b8592:	4620      	mov	r0, r4
   b8594:	f7fb fd83 	bl	b409e <_ZdlPvj>
   b8598:	e7ea      	b.n	b8570 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b859a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b859c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b859e:	f7fb fd7a 	bl	b4096 <_Znwj>
   b85a2:	4604      	mov	r4, r0
   b85a4:	b150      	cbz	r0, b85bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b85a6:	4631      	mov	r1, r6
   b85a8:	f7ff fec6 	bl	b8338 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b85ac:	6930      	ldr	r0, [r6, #16]
   b85ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b85b2:	b108      	cbz	r0, b85b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b85b4:	f001 ff6e 	bl	ba494 <strdup>
        type_(type) {
   b85b8:	6120      	str	r0, [r4, #16]
   b85ba:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b85bc:	602c      	str	r4, [r5, #0]
	}
   b85be:	e7d7      	b.n	b8570 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b85c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b85c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b85c2:	2300      	movs	r3, #0
   b85c4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b85c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b85c8:	4604      	mov	r4, r0
   b85ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b85cc:	b12b      	cbz	r3, b85da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b85ce:	2202      	movs	r2, #2
   b85d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b85d2:	68eb      	ldr	r3, [r5, #12]
   b85d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b85d6:	68ab      	ldr	r3, [r5, #8]
   b85d8:	60a3      	str	r3, [r4, #8]
    }
   b85da:	4620      	mov	r0, r4
   b85dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b85e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b85e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b85e2:	b089      	sub	sp, #36	; 0x24
   b85e4:	4604      	mov	r4, r0
   b85e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b85e8:	a801      	add	r0, sp, #4
   b85ea:	4611      	mov	r1, r2
   b85ec:	f7ff fe42 	bl	b8274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b85f0:	b1a4      	cbz	r4, b861c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b85f2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b85f4:	b11d      	cbz	r5, b85fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b85f6:	4628      	mov	r0, r5
   b85f8:	f001 ff4c 	bl	ba494 <strdup>
   b85fc:	4605      	mov	r5, r0
   b85fe:	a801      	add	r0, sp, #4
   b8600:	a903      	add	r1, sp, #12
        type_(type) {
   b8602:	9503      	str	r5, [sp, #12]
   b8604:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8608:	f7ff fea6 	bl	b8358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b860c:	a803      	add	r0, sp, #12
   b860e:	f7ff fdde 	bl	b81ce <_ZN8particle5ErrorD1Ev>
   b8612:	a802      	add	r0, sp, #8
   b8614:	f7fc fa4a 	bl	b4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8618:	b009      	add	sp, #36	; 0x24
   b861a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b861c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b861e:	2301      	movs	r3, #1
   b8620:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8624:	2a00      	cmp	r2, #0
   b8626:	d103      	bne.n	b8630 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8628:	e8c5 3f41 	strexb	r1, r3, [r5]
   b862c:	2900      	cmp	r1, #0
   b862e:	d1f7      	bne.n	b8620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8630:	d1ef      	bne.n	b8612 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8632:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8634:	f3bf 8f5b 	dmb	ish
   b8638:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b863a:	1d2b      	adds	r3, r5, #4
   b863c:	f3bf 8f5b 	dmb	ish
   b8640:	e853 6f00 	ldrex	r6, [r3]
   b8644:	e843 4200 	strex	r2, r4, [r3]
   b8648:	2a00      	cmp	r2, #0
   b864a:	d1f9      	bne.n	b8640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b864c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8650:	2e00      	cmp	r6, #0
   b8652:	d0de      	beq.n	b8612 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8654:	4620      	mov	r0, r4
   b8656:	f7fe ff4f 	bl	b74f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b865a:	4607      	mov	r7, r0
   b865c:	b160      	cbz	r0, b8678 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b865e:	f105 010c 	add.w	r1, r5, #12
   b8662:	4630      	mov	r0, r6
   b8664:	f7ff fe43 	bl	b82ee <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8668:	4630      	mov	r0, r6
   b866a:	f7fc fe9b 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b866e:	2110      	movs	r1, #16
   b8670:	4630      	mov	r0, r6
   b8672:	f7fb fd14 	bl	b409e <_ZdlPvj>
   b8676:	e7cc      	b.n	b8612 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8678:	4631      	mov	r1, r6
   b867a:	a803      	add	r0, sp, #12
   b867c:	f7ff ffa0 	bl	b85c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8680:	7b2b      	ldrb	r3, [r5, #12]
   b8682:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8686:	2010      	movs	r0, #16
   b8688:	f7fb fd05 	bl	b4096 <_Znwj>
   b868c:	4605      	mov	r5, r0
   b868e:	b1d0      	cbz	r0, b86c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8690:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8692:	2014      	movs	r0, #20
   b8694:	f7fb fcff 	bl	b4096 <_Znwj>
   b8698:	4604      	mov	r4, r0
   b869a:	b178      	cbz	r0, b86bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b869c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b869e:	4601      	mov	r1, r0
   b86a0:	a803      	add	r0, sp, #12
   b86a2:	f7ff fe02 	bl	b82aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b86a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b86a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b86aa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b86ac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b86ae:	9205      	str	r2, [sp, #20]
   b86b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b86b2:	60e3      	str	r3, [r4, #12]
   b86b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b86b8:	9206      	str	r2, [sp, #24]
   b86ba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b86bc:	4b06      	ldr	r3, [pc, #24]	; (b86d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b86be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b86c0:	4b06      	ldr	r3, [pc, #24]	; (b86dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b86c2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b86c4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b86c6:	a803      	add	r0, sp, #12
   b86c8:	f7fc fe6c 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b86cc:	2200      	movs	r2, #0
   b86ce:	4629      	mov	r1, r5
   b86d0:	4803      	ldr	r0, [pc, #12]	; (b86e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b86d2:	f7fe ff19 	bl	b7508 <application_thread_invoke>
   b86d6:	e7c7      	b.n	b8668 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b86d8:	000b8301 	.word	0x000b8301
   b86dc:	000b86e5 	.word	0x000b86e5
   b86e0:	000b7deb 	.word	0x000b7deb

000b86e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b86e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b86e6:	b570      	push	{r4, r5, r6, lr}
   b86e8:	4604      	mov	r4, r0
	switch (__op)
   b86ea:	d103      	bne.n	b86f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b86ec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b86ee:	6003      	str	r3, [r0, #0]
      }
   b86f0:	2000      	movs	r0, #0
   b86f2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b86f4:	2a02      	cmp	r2, #2
   b86f6:	d00c      	beq.n	b8712 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b86f8:	2a03      	cmp	r2, #3
   b86fa:	d1f9      	bne.n	b86f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b86fc:	6804      	ldr	r4, [r0, #0]
   b86fe:	2c00      	cmp	r4, #0
   b8700:	d0f6      	beq.n	b86f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b8702:	4620      	mov	r0, r4
   b8704:	f7fc fe4e 	bl	b53a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8708:	2114      	movs	r1, #20
   b870a:	4620      	mov	r0, r4
   b870c:	f7fb fcc7 	bl	b409e <_ZdlPvj>
   b8710:	e7ee      	b.n	b86f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8712:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8714:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8716:	f7fb fcbe 	bl	b4096 <_Znwj>
   b871a:	4605      	mov	r5, r0
   b871c:	b120      	cbz	r0, b8728 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b871e:	4631      	mov	r1, r6
   b8720:	f7ff ff4e 	bl	b85c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8724:	7c33      	ldrb	r3, [r6, #16]
   b8726:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8728:	6025      	str	r5, [r4, #0]
	}
   b872a:	e7e1      	b.n	b86f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b872c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b872c:	4b01      	ldr	r3, [pc, #4]	; (b8734 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b872e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8730:	4770      	bx	lr
   b8732:	bf00      	nop
   b8734:	2003dfc0 	.word	0x2003dfc0

000b8738 <serialEventRun>:
{
   b8738:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b873a:	4b0b      	ldr	r3, [pc, #44]	; (b8768 <serialEventRun+0x30>)
   b873c:	b143      	cbz	r3, b8750 <serialEventRun+0x18>
   b873e:	f7ff fc6b 	bl	b8018 <_Z16_fetch_usbserialv>
   b8742:	6803      	ldr	r3, [r0, #0]
   b8744:	691b      	ldr	r3, [r3, #16]
   b8746:	4798      	blx	r3
   b8748:	2800      	cmp	r0, #0
   b874a:	dd01      	ble.n	b8750 <serialEventRun+0x18>
        serialEvent();
   b874c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8750:	4b06      	ldr	r3, [pc, #24]	; (b876c <serialEventRun+0x34>)
   b8752:	b143      	cbz	r3, b8766 <serialEventRun+0x2e>
   b8754:	f000 feb4 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b8758:	6803      	ldr	r3, [r0, #0]
   b875a:	691b      	ldr	r3, [r3, #16]
   b875c:	4798      	blx	r3
   b875e:	2800      	cmp	r0, #0
   b8760:	dd01      	ble.n	b8766 <serialEventRun+0x2e>
        serialEvent1();
   b8762:	f3af 8000 	nop.w
}
   b8766:	bd08      	pop	{r3, pc}
	...

000b8770 <_post_loop>:
{
   b8770:	b508      	push	{r3, lr}
	serialEventRun();
   b8772:	f7ff ffe1 	bl	b8738 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8776:	f7fe fd65 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b877a:	4b01      	ldr	r3, [pc, #4]	; (b8780 <_post_loop+0x10>)
   b877c:	6018      	str	r0, [r3, #0]
}
   b877e:	bd08      	pop	{r3, pc}
   b8780:	2003e734 	.word	0x2003e734

000b8784 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8784:	4805      	ldr	r0, [pc, #20]	; (b879c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8786:	4a06      	ldr	r2, [pc, #24]	; (b87a0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8788:	4906      	ldr	r1, [pc, #24]	; (b87a4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b878a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b878c:	1a12      	subs	r2, r2, r0
   b878e:	f001 fdde 	bl	ba34e <memcpy>
    __backup_sram_signature = signature;
   b8792:	4b05      	ldr	r3, [pc, #20]	; (b87a8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8794:	4a05      	ldr	r2, [pc, #20]	; (b87ac <_Z33system_initialize_user_backup_ramv+0x28>)
   b8796:	601a      	str	r2, [r3, #0]
}
   b8798:	bd08      	pop	{r3, pc}
   b879a:	bf00      	nop
   b879c:	2003f400 	.word	0x2003f400
   b87a0:	2003f404 	.word	0x2003f404
   b87a4:	000bd6f4 	.word	0x000bd6f4
   b87a8:	2003f400 	.word	0x2003f400
   b87ac:	9a271c1e 	.word	0x9a271c1e

000b87b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b87b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b87b2:	2300      	movs	r3, #0
   b87b4:	9300      	str	r3, [sp, #0]
   b87b6:	461a      	mov	r2, r3
   b87b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b87bc:	f7fe febe 	bl	b753c <system_ctrl_set_result>
}
   b87c0:	b003      	add	sp, #12
   b87c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b87c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b87c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b87ca:	8843      	ldrh	r3, [r0, #2]
   b87cc:	2b0a      	cmp	r3, #10
   b87ce:	d008      	beq.n	b87e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b87d0:	2b50      	cmp	r3, #80	; 0x50
   b87d2:	d10b      	bne.n	b87ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b87d4:	4b09      	ldr	r3, [pc, #36]	; (b87fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b87d6:	681b      	ldr	r3, [r3, #0]
   b87d8:	b14b      	cbz	r3, b87ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b87da:	b003      	add	sp, #12
   b87dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b87e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b87e2:	f7ff ffe5 	bl	b87b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b87e6:	b003      	add	sp, #12
   b87e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b87ec:	2300      	movs	r3, #0
   b87ee:	9300      	str	r3, [sp, #0]
   b87f0:	461a      	mov	r2, r3
   b87f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b87f6:	f7fe fea1 	bl	b753c <system_ctrl_set_result>
}
   b87fa:	e7f4      	b.n	b87e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b87fc:	2003e6c8 	.word	0x2003e6c8

000b8800 <module_user_init_hook>:
{
   b8800:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8802:	4812      	ldr	r0, [pc, #72]	; (b884c <module_user_init_hook+0x4c>)
   b8804:	2100      	movs	r1, #0
   b8806:	f7fe fefd 	bl	b7604 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b880a:	4b11      	ldr	r3, [pc, #68]	; (b8850 <module_user_init_hook+0x50>)
   b880c:	681a      	ldr	r2, [r3, #0]
   b880e:	4b11      	ldr	r3, [pc, #68]	; (b8854 <module_user_init_hook+0x54>)
   b8810:	429a      	cmp	r2, r3
   b8812:	4b11      	ldr	r3, [pc, #68]	; (b8858 <module_user_init_hook+0x58>)
   b8814:	bf0c      	ite	eq
   b8816:	2201      	moveq	r2, #1
   b8818:	2200      	movne	r2, #0
   b881a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b881c:	d001      	beq.n	b8822 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b881e:	f7ff ffb1 	bl	b8784 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8822:	f7fe fcff 	bl	b7224 <HAL_RNG_GetRandomNumber>
   b8826:	4604      	mov	r4, r0
    srand(seed);
   b8828:	f001 fda8 	bl	ba37c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b882c:	4b0b      	ldr	r3, [pc, #44]	; (b885c <module_user_init_hook+0x5c>)
   b882e:	b113      	cbz	r3, b8836 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8830:	4620      	mov	r0, r4
   b8832:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8836:	2100      	movs	r1, #0
   b8838:	4808      	ldr	r0, [pc, #32]	; (b885c <module_user_init_hook+0x5c>)
   b883a:	f7fe fdc5 	bl	b73c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b883e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8842:	4807      	ldr	r0, [pc, #28]	; (b8860 <module_user_init_hook+0x60>)
   b8844:	2100      	movs	r1, #0
   b8846:	f7fe be6f 	b.w	b7528 <system_ctrl_set_app_request_handler>
   b884a:	bf00      	nop
   b884c:	000b872d 	.word	0x000b872d
   b8850:	2003f400 	.word	0x2003f400
   b8854:	9a271c1e 	.word	0x9a271c1e
   b8858:	2003e6c4 	.word	0x2003e6c4
   b885c:	00000000 	.word	0x00000000
   b8860:	000b87c9 	.word	0x000b87c9

000b8864 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8864:	6800      	ldr	r0, [r0, #0]
   b8866:	f7ff bab7 	b.w	b7dd8 <_ZN7TwoWire4lockEv>

000b886a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b886a:	b510      	push	{r4, lr}
   b886c:	4604      	mov	r4, r0
      lock_(_lock) {
   b886e:	6001      	str	r1, [r0, #0]
   b8870:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b8872:	b10a      	cbz	r2, b8878 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8874:	f7ff fff6 	bl	b8864 <_ZN9FuelGauge4lockEv>
}
   b8878:	4620      	mov	r0, r4
   b887a:	bd10      	pop	{r4, pc}

000b887c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b887c:	b513      	push	{r0, r1, r4, lr}
   b887e:	4604      	mov	r4, r0
   b8880:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8882:	f000 fddd 	bl	b9440 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8886:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8888:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b888a:	4620      	mov	r0, r4
   b888c:	f7ff ffed 	bl	b886a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8890:	4620      	mov	r0, r4
   b8892:	b002      	add	sp, #8
   b8894:	bd10      	pop	{r4, pc}

000b8896 <_ZN8RGBClass10brightnessEhb>:
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(PARTICLE_LED_RGB);
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   b8896:	b510      	push	{r4, lr}
   b8898:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   b889a:	f7fe fd23 	bl	b72e4 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   b889e:	f7fe fd29 	bl	b72f4 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   b88a2:	b128      	cbz	r0, b88b0 <_ZN8RGBClass10brightnessEhb+0x1a>
   b88a4:	b124      	cbz	r4, b88b0 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   b88a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   b88aa:	20e7      	movs	r0, #231	; 0xe7
   b88ac:	f7fe bd2a 	b.w	b7304 <LED_On>
}
   b88b0:	bd10      	pop	{r4, pc}
	...

000b88b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b88b4:	4b01      	ldr	r3, [pc, #4]	; (b88bc <_GLOBAL__sub_I_RGB+0x8>)
   b88b6:	2200      	movs	r2, #0
   b88b8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b88ba:	4770      	bx	lr
   b88bc:	2003e6cc 	.word	0x2003e6cc

000b88c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b88c0:	2100      	movs	r1, #0
   b88c2:	f7fe be01 	b.w	b74c8 <system_delay_ms>

000b88c6 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b88c6:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b88c8:	2000      	movs	r0, #0
   b88ca:	f7fe fd6d 	bl	b73a8 <spark_sync_time_pending>
   b88ce:	b128      	cbz	r0, b88dc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b88d0:	f7fe fd4a 	bl	b7368 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b88d4:	f080 0001 	eor.w	r0, r0, #1
   b88d8:	b2c0      	uxtb	r0, r0
    }
   b88da:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b88dc:	2001      	movs	r0, #1
   b88de:	e7fc      	b.n	b88da <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b88e0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b88e0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b88e2:	2000      	movs	r0, #0
   b88e4:	f7fe fcb6 	bl	b7254 <hal_rtc_time_is_valid>
    if (rtcstate)
   b88e8:	4604      	mov	r4, r0
   b88ea:	b9a0      	cbnz	r0, b8916 <_ZN9TimeClass7isValidEv+0x36>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b88ec:	f7fe fddc 	bl	b74a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b88f0:	2801      	cmp	r0, #1
   b88f2:	d110      	bne.n	b8916 <_ZN9TimeClass7isValidEv+0x36>
   b88f4:	4620      	mov	r0, r4
   b88f6:	f7fe fe0f 	bl	b7518 <system_thread_get_state>
   b88fa:	b960      	cbnz	r0, b8916 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b88fc:	f7ff ffe3 	bl	b88c6 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8900:	b910      	cbnz	r0, b8908 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8902:	f7fe fd21 	bl	b7348 <spark_process>
        while (_while() && !_condition()) {
   b8906:	e7f9      	b.n	b88fc <_ZN9TimeClass7isValidEv+0x1c>
   b8908:	f7ff ffdd 	bl	b88c6 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b890c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8910:	2000      	movs	r0, #0
   b8912:	f7fe bc9f 	b.w	b7254 <hal_rtc_time_is_valid>
}
   b8916:	4620      	mov	r0, r4
   b8918:	bd10      	pop	{r4, pc}

000b891a <_ZN9TimeClass3nowEv>:
{
   b891a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b891c:	f7ff ffe0 	bl	b88e0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8920:	2210      	movs	r2, #16
   b8922:	2100      	movs	r1, #0
   b8924:	4668      	mov	r0, sp
   b8926:	f001 fd20 	bl	ba36a <memset>
    hal_rtc_get_time(&tv, nullptr);
   b892a:	2100      	movs	r1, #0
   b892c:	4668      	mov	r0, sp
   b892e:	f7fe fca1 	bl	b7274 <hal_rtc_get_time>
}
   b8932:	9800      	ldr	r0, [sp, #0]
   b8934:	b005      	add	sp, #20
   b8936:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b893c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b893c:	4b02      	ldr	r3, [pc, #8]	; (b8948 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b893e:	681a      	ldr	r2, [r3, #0]
   b8940:	4b02      	ldr	r3, [pc, #8]	; (b894c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8942:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8944:	4770      	bx	lr
   b8946:	bf00      	nop
   b8948:	2003dfbc 	.word	0x2003dfbc
   b894c:	2003e6dc 	.word	0x2003e6dc

000b8950 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8950:	4b01      	ldr	r3, [pc, #4]	; (b8958 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8952:	4a02      	ldr	r2, [pc, #8]	; (b895c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8954:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8956:	4770      	bx	lr
   b8958:	2003e6e0 	.word	0x2003e6e0
   b895c:	000bd048 	.word	0x000bd048

000b8960 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8960:	b510      	push	{r4, lr}
   b8962:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8964:	f7fe fc6e 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8968:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b896a:	6823      	ldr	r3, [r4, #0]
   b896c:	4620      	mov	r0, r4
   b896e:	695b      	ldr	r3, [r3, #20]
   b8970:	4798      	blx	r3
    if (c >= 0) return c;
   b8972:	2800      	cmp	r0, #0
   b8974:	da08      	bge.n	b8988 <_ZN6Stream9timedReadEv+0x28>
   b8976:	f7fe fc65 	bl	b7244 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b897a:	68e3      	ldr	r3, [r4, #12]
   b897c:	1ac0      	subs	r0, r0, r3
   b897e:	68a3      	ldr	r3, [r4, #8]
   b8980:	4298      	cmp	r0, r3
   b8982:	d3f2      	bcc.n	b896a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b8988:	bd10      	pop	{r4, pc}
	...

000b898c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b898c:	b538      	push	{r3, r4, r5, lr}
   b898e:	460d      	mov	r5, r1
  String ret;
   b8990:	4907      	ldr	r1, [pc, #28]	; (b89b0 <_ZN6Stream10readStringEv+0x24>)
{
   b8992:	4604      	mov	r4, r0
  String ret;
   b8994:	f000 f90d 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b8998:	4628      	mov	r0, r5
   b899a:	f7ff ffe1 	bl	b8960 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b899e:	2800      	cmp	r0, #0
   b89a0:	db04      	blt.n	b89ac <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b89a2:	b2c1      	uxtb	r1, r0
   b89a4:	4620      	mov	r0, r4
   b89a6:	f000 f954 	bl	b8c52 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b89aa:	e7f5      	b.n	b8998 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b89ac:	4620      	mov	r0, r4
   b89ae:	bd38      	pop	{r3, r4, r5, pc}
   b89b0:	000bcc8b 	.word	0x000bcc8b

000b89b4 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
   b89b4:	b570      	push	{r4, r5, r6, lr}
   b89b6:	460d      	mov	r5, r1
  String ret;
   b89b8:	4909      	ldr	r1, [pc, #36]	; (b89e0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b89ba:	4604      	mov	r4, r0
   b89bc:	4616      	mov	r6, r2
  String ret;
   b89be:	f000 f8f8 	bl	b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b89c2:	4628      	mov	r0, r5
   b89c4:	f7ff ffcc 	bl	b8960 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b89c8:	2800      	cmp	r0, #0
   b89ca:	db06      	blt.n	b89da <_ZN6Stream15readStringUntilEc+0x26>
   b89cc:	4286      	cmp	r6, r0
   b89ce:	d004      	beq.n	b89da <_ZN6Stream15readStringUntilEc+0x26>
   b89d0:	b2c1      	uxtb	r1, r0
   b89d2:	4620      	mov	r0, r4
   b89d4:	f000 f93d 	bl	b8c52 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b89d8:	e7f3      	b.n	b89c2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b89da:	4620      	mov	r0, r4
   b89dc:	bd70      	pop	{r4, r5, r6, pc}
   b89de:	bf00      	nop
   b89e0:	000bcc8b 	.word	0x000bcc8b

000b89e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b89e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b89e6:	4606      	mov	r6, r0
   b89e8:	460d      	mov	r5, r1
  size_t n = 0;
   b89ea:	188f      	adds	r7, r1, r2
   b89ec:	2400      	movs	r4, #0
  while (size--) {
   b89ee:	42bd      	cmp	r5, r7
   b89f0:	d00c      	beq.n	b8a0c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b89f2:	6833      	ldr	r3, [r6, #0]
   b89f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b89f8:	689b      	ldr	r3, [r3, #8]
   b89fa:	4630      	mov	r0, r6
   b89fc:	4798      	blx	r3
     if (chunk>=0)
   b89fe:	1e03      	subs	r3, r0, #0
   b8a00:	db01      	blt.n	b8a06 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8a02:	441c      	add	r4, r3
  while (size--) {
   b8a04:	e7f3      	b.n	b89ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8a06:	2c00      	cmp	r4, #0
   b8a08:	bf08      	it	eq
   b8a0a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8a0c:	4620      	mov	r0, r4
   b8a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8a10 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8a10:	b513      	push	{r0, r1, r4, lr}
   b8a12:	4604      	mov	r4, r0
    }
   b8a14:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8a16:	b159      	cbz	r1, b8a30 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8a18:	9101      	str	r1, [sp, #4]
   b8a1a:	f001 fd58 	bl	ba4ce <strlen>
   b8a1e:	6823      	ldr	r3, [r4, #0]
   b8a20:	9901      	ldr	r1, [sp, #4]
   b8a22:	68db      	ldr	r3, [r3, #12]
   b8a24:	4602      	mov	r2, r0
   b8a26:	4620      	mov	r0, r4
    }
   b8a28:	b002      	add	sp, #8
   b8a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8a2e:	4718      	bx	r3
    }
   b8a30:	b002      	add	sp, #8
   b8a32:	bd10      	pop	{r4, pc}

000b8a34 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8a34:	b508      	push	{r3, lr}
  return write(str);
   b8a36:	f7ff ffeb 	bl	b8a10 <_ZN5Print5writeEPKc>
}
   b8a3a:	bd08      	pop	{r3, pc}

000b8a3c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8a3c:	6803      	ldr	r3, [r0, #0]
   b8a3e:	689b      	ldr	r3, [r3, #8]
   b8a40:	4718      	bx	r3

000b8a42 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8a42:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8a44:	210d      	movs	r1, #13
{
   b8a46:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8a48:	f7ff fff8 	bl	b8a3c <_ZN5Print5printEc>
  n += print('\n');
   b8a4c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8a4e:	4604      	mov	r4, r0
  n += print('\n');
   b8a50:	4628      	mov	r0, r5
   b8a52:	f7ff fff3 	bl	b8a3c <_ZN5Print5printEc>
  return n;
}
   b8a56:	4420      	add	r0, r4
   b8a58:	bd38      	pop	{r3, r4, r5, pc}

000b8a5a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8a5a:	b538      	push	{r3, r4, r5, lr}
   b8a5c:	4605      	mov	r5, r0
  return write(str);
   b8a5e:	f7ff ffd7 	bl	b8a10 <_ZN5Print5writeEPKc>
   b8a62:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8a64:	4628      	mov	r0, r5
   b8a66:	f7ff ffec 	bl	b8a42 <_ZN5Print7printlnEv>
  return n;
}
   b8a6a:	4420      	add	r0, r4
   b8a6c:	bd38      	pop	{r3, r4, r5, pc}

000b8a6e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8a6e:	b530      	push	{r4, r5, lr}
   b8a70:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8a72:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8a74:	2a01      	cmp	r2, #1
  *str = '\0';
   b8a76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8a7a:	bf98      	it	ls
   b8a7c:	220a      	movls	r2, #10
   b8a7e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8a80:	460d      	mov	r5, r1
   b8a82:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8a86:	fb01 5312 	mls	r3, r1, r2, r5
   b8a8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8a8e:	2b09      	cmp	r3, #9
   b8a90:	bf94      	ite	ls
   b8a92:	3330      	addls	r3, #48	; 0x30
   b8a94:	3337      	addhi	r3, #55	; 0x37
   b8a96:	b2db      	uxtb	r3, r3
  } while(n);
   b8a98:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8a9a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8a9e:	d9ef      	bls.n	b8a80 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8aa0:	4621      	mov	r1, r4
   b8aa2:	f7ff ffb5 	bl	b8a10 <_ZN5Print5writeEPKc>
}
   b8aa6:	b00b      	add	sp, #44	; 0x2c
   b8aa8:	bd30      	pop	{r4, r5, pc}

000b8aaa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8aae:	b086      	sub	sp, #24
   b8ab0:	af00      	add	r7, sp, #0
   b8ab2:	4605      	mov	r5, r0
   b8ab4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8ab6:	1d38      	adds	r0, r7, #4
   b8ab8:	2114      	movs	r1, #20
{
   b8aba:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8abc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8abe:	f7fe fd79 	bl	b75b4 <vsnprintf>

    if (n<bufsize)
   b8ac2:	2813      	cmp	r0, #19
   b8ac4:	d80e      	bhi.n	b8ae4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8ac6:	1d39      	adds	r1, r7, #4
   b8ac8:	4628      	mov	r0, r5
   b8aca:	f7ff ffa1 	bl	b8a10 <_ZN5Print5writeEPKc>
   b8ace:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8ad0:	b11e      	cbz	r6, b8ada <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8ad2:	4628      	mov	r0, r5
   b8ad4:	f7ff ffb5 	bl	b8a42 <_ZN5Print7printlnEv>
   b8ad8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8ada:	4620      	mov	r0, r4
   b8adc:	3718      	adds	r7, #24
   b8ade:	46bd      	mov	sp, r7
   b8ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8ae4:	f100 0308 	add.w	r3, r0, #8
   b8ae8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8aec:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8aee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8af2:	4622      	mov	r2, r4
   b8af4:	1c41      	adds	r1, r0, #1
   b8af6:	683b      	ldr	r3, [r7, #0]
   b8af8:	4668      	mov	r0, sp
   b8afa:	f7fe fd5b 	bl	b75b4 <vsnprintf>
  return write(str);
   b8afe:	4669      	mov	r1, sp
   b8b00:	4628      	mov	r0, r5
   b8b02:	f7ff ff85 	bl	b8a10 <_ZN5Print5writeEPKc>
   b8b06:	4604      	mov	r4, r0
   b8b08:	46c5      	mov	sp, r8
   b8b0a:	e7e1      	b.n	b8ad0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8b0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8b0c:	4802      	ldr	r0, [pc, #8]	; (b8b18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8b0e:	2300      	movs	r3, #0
   b8b10:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8b12:	f7fe bb7f 	b.w	b7214 <os_mutex_recursive_create>
   b8b16:	bf00      	nop
   b8b18:	2003e6e4 	.word	0x2003e6e4

000b8b1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8b1c:	b510      	push	{r4, lr}
   b8b1e:	4604      	mov	r4, r0
{
	free(buffer);
   b8b20:	6800      	ldr	r0, [r0, #0]
   b8b22:	f7fe fd27 	bl	b7574 <free>
}
   b8b26:	4620      	mov	r0, r4
   b8b28:	bd10      	pop	{r4, pc}

000b8b2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8b2a:	b510      	push	{r4, lr}
   b8b2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8b2e:	6800      	ldr	r0, [r0, #0]
   b8b30:	b108      	cbz	r0, b8b36 <_ZN6String10invalidateEv+0xc>
   b8b32:	f7fe fd1f 	bl	b7574 <free>
	buffer = NULL;
   b8b36:	2300      	movs	r3, #0
	capacity = len = 0;
   b8b38:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8b3c:	6023      	str	r3, [r4, #0]
}
   b8b3e:	bd10      	pop	{r4, pc}

000b8b40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8b40:	b538      	push	{r3, r4, r5, lr}
   b8b42:	4604      	mov	r4, r0
   b8b44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8b46:	6800      	ldr	r0, [r0, #0]
   b8b48:	3101      	adds	r1, #1
   b8b4a:	f7fe fd1b 	bl	b7584 <realloc>
	if (newbuffer) {
   b8b4e:	b110      	cbz	r0, b8b56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8b50:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8b54:	2001      	movs	r0, #1
	}
	return 0;
}
   b8b56:	bd38      	pop	{r3, r4, r5, pc}

000b8b58 <_ZN6String7reserveEj>:
{
   b8b58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8b5a:	6803      	ldr	r3, [r0, #0]
{
   b8b5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8b5e:	b123      	cbz	r3, b8b6a <_ZN6String7reserveEj+0x12>
   b8b60:	6843      	ldr	r3, [r0, #4]
   b8b62:	428b      	cmp	r3, r1
   b8b64:	d301      	bcc.n	b8b6a <_ZN6String7reserveEj+0x12>
   b8b66:	2001      	movs	r0, #1
}
   b8b68:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8b6a:	4620      	mov	r0, r4
   b8b6c:	f7ff ffe8 	bl	b8b40 <_ZN6String12changeBufferEj>
   b8b70:	2800      	cmp	r0, #0
   b8b72:	d0f9      	beq.n	b8b68 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8b74:	68a3      	ldr	r3, [r4, #8]
   b8b76:	2b00      	cmp	r3, #0
   b8b78:	d1f5      	bne.n	b8b66 <_ZN6String7reserveEj+0xe>
   b8b7a:	6822      	ldr	r2, [r4, #0]
   b8b7c:	7013      	strb	r3, [r2, #0]
   b8b7e:	e7f2      	b.n	b8b66 <_ZN6String7reserveEj+0xe>

000b8b80 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b82:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8b84:	4611      	mov	r1, r2
   b8b86:	9201      	str	r2, [sp, #4]
{
   b8b88:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8b8a:	f7ff ffe5 	bl	b8b58 <_ZN6String7reserveEj>
   b8b8e:	9a01      	ldr	r2, [sp, #4]
   b8b90:	b928      	cbnz	r0, b8b9e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8b92:	4620      	mov	r0, r4
   b8b94:	f7ff ffc9 	bl	b8b2a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8b98:	4620      	mov	r0, r4
   b8b9a:	b003      	add	sp, #12
   b8b9c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8b9e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8ba0:	4629      	mov	r1, r5
   b8ba2:	6820      	ldr	r0, [r4, #0]
   b8ba4:	f001 fbd3 	bl	ba34e <memcpy>
	buffer[len] = 0;
   b8ba8:	6822      	ldr	r2, [r4, #0]
   b8baa:	68a3      	ldr	r3, [r4, #8]
   b8bac:	2100      	movs	r1, #0
   b8bae:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8bb0:	e7f2      	b.n	b8b98 <_ZN6String4copyEPKcj+0x18>

000b8bb2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8bb2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8bb4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8bb6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8bba:	4604      	mov	r4, r0
	len = 0;
   b8bbc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8bbe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8bc0:	b141      	cbz	r1, b8bd4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8bc2:	4608      	mov	r0, r1
   b8bc4:	9101      	str	r1, [sp, #4]
   b8bc6:	f001 fc82 	bl	ba4ce <strlen>
   b8bca:	9901      	ldr	r1, [sp, #4]
   b8bcc:	4602      	mov	r2, r0
   b8bce:	4620      	mov	r0, r4
   b8bd0:	f7ff ffd6 	bl	b8b80 <_ZN6String4copyEPKcj>
}
   b8bd4:	4620      	mov	r0, r4
   b8bd6:	b002      	add	sp, #8
   b8bd8:	bd10      	pop	{r4, pc}

000b8bda <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8bda:	b538      	push	{r3, r4, r5, lr}
   b8bdc:	4605      	mov	r5, r0
	if (buffer) {
   b8bde:	6800      	ldr	r0, [r0, #0]
{
   b8be0:	460c      	mov	r4, r1
	if (buffer) {
   b8be2:	b168      	cbz	r0, b8c00 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8be4:	686a      	ldr	r2, [r5, #4]
   b8be6:	688b      	ldr	r3, [r1, #8]
   b8be8:	429a      	cmp	r2, r3
   b8bea:	d307      	bcc.n	b8bfc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8bec:	6809      	ldr	r1, [r1, #0]
   b8bee:	f001 fc48 	bl	ba482 <strcpy>
			len = rhs.len;
   b8bf2:	68a3      	ldr	r3, [r4, #8]
   b8bf4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8bf6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8bf8:	60a3      	str	r3, [r4, #8]
}
   b8bfa:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8bfc:	f7fe fcba 	bl	b7574 <free>
	buffer = rhs.buffer;
   b8c00:	6823      	ldr	r3, [r4, #0]
   b8c02:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8c04:	6863      	ldr	r3, [r4, #4]
   b8c06:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8c08:	68a3      	ldr	r3, [r4, #8]
   b8c0a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8c0c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8c0e:	e9c4 3300 	strd	r3, r3, [r4]
   b8c12:	e7f1      	b.n	b8bf8 <_ZN6String4moveERS_+0x1e>

000b8c14 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b8c14:	4288      	cmp	r0, r1
{
   b8c16:	b510      	push	{r4, lr}
   b8c18:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b8c1a:	d001      	beq.n	b8c20 <_ZN6StringaSEOS_+0xc>
   b8c1c:	f7ff ffdd 	bl	b8bda <_ZN6String4moveERS_>
	return *this;
}
   b8c20:	4620      	mov	r0, r4
   b8c22:	bd10      	pop	{r4, pc}

000b8c24 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8c24:	b570      	push	{r4, r5, r6, lr}
   b8c26:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8c28:	460e      	mov	r6, r1
   b8c2a:	b909      	cbnz	r1, b8c30 <_ZN6String6concatEPKcj+0xc>
   b8c2c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8c2e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8c30:	b16a      	cbz	r2, b8c4e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8c32:	6884      	ldr	r4, [r0, #8]
   b8c34:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8c36:	4621      	mov	r1, r4
   b8c38:	f7ff ff8e 	bl	b8b58 <_ZN6String7reserveEj>
   b8c3c:	2800      	cmp	r0, #0
   b8c3e:	d0f5      	beq.n	b8c2c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8c40:	6828      	ldr	r0, [r5, #0]
   b8c42:	68ab      	ldr	r3, [r5, #8]
   b8c44:	4631      	mov	r1, r6
   b8c46:	4418      	add	r0, r3
   b8c48:	f001 fc1b 	bl	ba482 <strcpy>
	len = newlen;
   b8c4c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8c4e:	2001      	movs	r0, #1
   b8c50:	e7ed      	b.n	b8c2e <_ZN6String6concatEPKcj+0xa>

000b8c52 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8c52:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8c54:	2300      	movs	r3, #0
	buf[0] = c;
   b8c56:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8c5a:	2201      	movs	r2, #1
   b8c5c:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8c5e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8c62:	f7ff ffdf 	bl	b8c24 <_ZN6String6concatEPKcj>
}
   b8c66:	b003      	add	sp, #12
   b8c68:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c6c <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b8c6c:	b558      	push	{r3, r4, r6, lr}
   b8c6e:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b8c70:	b12a      	cbz	r2, b8c7e <_ZNK6String8getBytesEPhjj+0x12>
   b8c72:	b121      	cbz	r1, b8c7e <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b8c74:	6884      	ldr	r4, [r0, #8]
   b8c76:	42a3      	cmp	r3, r4
   b8c78:	d302      	bcc.n	b8c80 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b8c7a:	2300      	movs	r3, #0
   b8c7c:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b8c7e:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b8c80:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b8c82:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b8c84:	6801      	ldr	r1, [r0, #0]
   b8c86:	4294      	cmp	r4, r2
   b8c88:	bf28      	it	cs
   b8c8a:	4614      	movcs	r4, r2
   b8c8c:	4419      	add	r1, r3
   b8c8e:	4622      	mov	r2, r4
   b8c90:	4630      	mov	r0, r6
   b8c92:	f001 fc38 	bl	ba506 <strncpy>
	buf[n] = 0;
   b8c96:	2300      	movs	r3, #0
   b8c98:	5533      	strb	r3, [r6, r4]
   b8c9a:	e7f0      	b.n	b8c7e <_ZNK6String8getBytesEPhjj+0x12>

000b8c9c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8c9c:	6800      	ldr	r0, [r0, #0]
   b8c9e:	b108      	cbz	r0, b8ca4 <_ZNK6String5toIntEv+0x8>
   b8ca0:	f001 bb51 	b.w	ba346 <atol>
	return 0;
}
   b8ca4:	4770      	bx	lr
	...

000b8ca8 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   b8ca8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b8caa:	6800      	ldr	r0, [r0, #0]
   b8cac:	b140      	cbz	r0, b8cc0 <_ZNK6String7toFloatEv+0x18>
   b8cae:	f001 fb47 	bl	ba340 <atof>
   b8cb2:	ec51 0b10 	vmov	r0, r1, d0
   b8cb6:	f001 facf 	bl	ba258 <__aeabi_d2f>
   b8cba:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8cbe:	bd08      	pop	{r3, pc}
	return 0;
   b8cc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; b8cc8 <_ZNK6String7toFloatEv+0x20>
   b8cc4:	e7fb      	b.n	b8cbe <_ZNK6String7toFloatEv+0x16>
   b8cc6:	bf00      	nop
   b8cc8:	00000000 	.word	0x00000000

000b8ccc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b8ccc:	b507      	push	{r0, r1, r2, lr}
   b8cce:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8cd0:	2100      	movs	r1, #0
{
   b8cd2:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8cd4:	9100      	str	r1, [sp, #0]
   b8cd6:	2001      	movs	r0, #1
   b8cd8:	218c      	movs	r1, #140	; 0x8c
   b8cda:	f7fe fc39 	bl	b7550 <system_reset>
}
   b8cde:	b003      	add	sp, #12
   b8ce0:	f85d fb04 	ldr.w	pc, [sp], #4

000b8ce4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8ce4:	4601      	mov	r1, r0
    reset(0, flags);
   b8ce6:	2000      	movs	r0, #0
   b8ce8:	f7ff bff0 	b.w	b8ccc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b8cec <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b8cec:	2000      	movs	r0, #0
   b8cee:	f7ff bff9 	b.w	b8ce4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b8cf4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8cf4:	4b05      	ldr	r3, [pc, #20]	; (b8d0c <_GLOBAL__sub_I_System+0x18>)
   b8cf6:	2202      	movs	r2, #2
   b8cf8:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b8cfa:	4b05      	ldr	r3, [pc, #20]	; (b8d10 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8cfc:	4a05      	ldr	r2, [pc, #20]	; (b8d14 <_GLOBAL__sub_I_System+0x20>)
   b8cfe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8d00:	2000      	movs	r0, #0
   b8d02:	e9c3 0000 	strd	r0, r0, [r3]
        set_system_mode(mode);
   b8d06:	f7fe bbd7 	b.w	b74b8 <set_system_mode>
   b8d0a:	bf00      	nop
   b8d0c:	2003e6f4 	.word	0x2003e6f4
   b8d10:	2003e6e8 	.word	0x2003e6e8
   b8d14:	ffff0000 	.word	0xffff0000

000b8d18 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b8d18:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b8d1a:	6804      	ldr	r4, [r0, #0]
   b8d1c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b8d1e:	46a4      	mov	ip, r4
    }
   b8d20:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b8d24:	4760      	bx	ip

000b8d26 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b8d26:	6803      	ldr	r3, [r0, #0]
   b8d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8d2a:	4718      	bx	r3

000b8d2c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b8d2c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b8d2e:	4770      	bx	lr

000b8d30 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b8d30:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b8d32:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b8d34:	1a10      	subs	r0, r2, r0
   b8d36:	4770      	bx	lr

000b8d38 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b8d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8d3a:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b8d3c:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8d3e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
class IPAddress : public Printable {
   b8d40:	4b0c      	ldr	r3, [pc, #48]	; (b8d74 <_ZN3UDP9endPacketEv+0x3c>)
   b8d42:	9302      	str	r3, [sp, #8]
   b8d44:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b8d48:	4604      	mov	r4, r0
   b8d4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8d4c:	ad03      	add	r5, sp, #12
   b8d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8d50:	6833      	ldr	r3, [r6, #0]
   b8d52:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8d54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b8d56:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b8d58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b8d5a:	9300      	str	r3, [sp, #0]
   b8d5c:	4620      	mov	r0, r4
   b8d5e:	ab02      	add	r3, sp, #8
   b8d60:	47b8      	blx	r7
    flush(); // wait for send to complete
   b8d62:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8d64:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b8d66:	69db      	ldr	r3, [r3, #28]
   b8d68:	4620      	mov	r0, r4
   b8d6a:	4798      	blx	r3
    return result;
}
   b8d6c:	4628      	mov	r0, r5
   b8d6e:	b009      	add	sp, #36	; 0x24
   b8d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8d72:	bf00      	nop
   b8d74:	000bd004 	.word	0x000bd004

000b8d78 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b8d78:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b8d7a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b8d7c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b8d80:	68db      	ldr	r3, [r3, #12]
   b8d82:	2201      	movs	r2, #1
   b8d84:	f10d 0107 	add.w	r1, sp, #7
   b8d88:	4798      	blx	r3
}
   b8d8a:	b003      	add	sp, #12
   b8d8c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8d90 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b8d90:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b8d92:	6803      	ldr	r3, [r0, #0]
   b8d94:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b8d96:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b8d98:	4798      	blx	r3
   b8d9a:	b128      	cbz	r0, b8da8 <_ZN3UDP4readEv+0x18>
   b8d9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8d9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b8da0:	1c59      	adds	r1, r3, #1
   b8da2:	86e1      	strh	r1, [r4, #54]	; 0x36
   b8da4:	5cd0      	ldrb	r0, [r2, r3]
}
   b8da6:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b8da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8dac:	e7fb      	b.n	b8da6 <_ZN3UDP4readEv+0x16>

000b8dae <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b8dae:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b8db0:	6803      	ldr	r3, [r0, #0]
   b8db2:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b8db4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b8db6:	4798      	blx	r3
   b8db8:	b118      	cbz	r0, b8dc2 <_ZN3UDP4peekEv+0x14>
   b8dba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8dbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b8dbe:	5cd0      	ldrb	r0, [r2, r3]
}
   b8dc0:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b8dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8dc6:	e7fb      	b.n	b8dc0 <_ZN3UDP4peekEv+0x12>

000b8dc8 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b8dc8:	4770      	bx	lr

000b8dca <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b8dca:	b410      	push	{r4}
   b8dcc:	4603      	mov	r3, r0
   b8dce:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b8dd0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b8dd2:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b8dd4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b8dd6:	6803      	ldr	r3, [r0, #0]
   b8dd8:	1a52      	subs	r2, r2, r1
   b8dda:	68db      	ldr	r3, [r3, #12]
   b8ddc:	4421      	add	r1, r4
}
   b8dde:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b8de2:	4718      	bx	r3

000b8de4 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b8de4:	f1a0 0010 	sub.w	r0, r0, #16
   b8de8:	f7ff bfef 	b.w	b8dca <_ZNK3UDP7printToER5Print>

000b8dec <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8dec:	b570      	push	{r4, r5, r6, lr}
    stop();
   b8dee:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8df0:	b08c      	sub	sp, #48	; 0x30
    stop();
   b8df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8df4:	4604      	mov	r4, r0
   b8df6:	460e      	mov	r6, r1
   b8df8:	4615      	mov	r5, r2
    stop();
   b8dfa:	4798      	blx	r3
    const int one = 1;
   b8dfc:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b8dfe:	221c      	movs	r2, #28
   b8e00:	2100      	movs	r1, #0
   b8e02:	a805      	add	r0, sp, #20
    const int one = 1;
   b8e04:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b8e06:	f001 fab0 	bl	ba36a <memset>
    saddr.sin6_len = sizeof(saddr);
   b8e0a:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b8e0e:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b8e10:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b8e14:	f7fe f9f6 	bl	b7204 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8e18:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b8e1a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8e1e:	2102      	movs	r1, #2
   b8e20:	200a      	movs	r0, #10
   b8e22:	f7fe f987 	bl	b7134 <sock_socket>
    if (_sock < 0) {
   b8e26:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8e28:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b8e2a:	db25      	blt.n	b8e78 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b8e2c:	2204      	movs	r2, #4
   b8e2e:	9200      	str	r2, [sp, #0]
   b8e30:	ab02      	add	r3, sp, #8
   b8e32:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8e36:	f7fe f945 	bl	b70c4 <sock_setsockopt>
   b8e3a:	b9e8      	cbnz	r0, b8e78 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b8e3c:	b195      	cbz	r5, b8e64 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b8e3e:	9003      	str	r0, [sp, #12]
   b8e40:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b8e44:	a903      	add	r1, sp, #12
   b8e46:	b2e8      	uxtb	r0, r5
   b8e48:	f7fe fa1c 	bl	b7284 <if_index_to_name>
   b8e4c:	b9a0      	cbnz	r0, b8e78 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b8e4e:	2306      	movs	r3, #6
   b8e50:	9300      	str	r3, [sp, #0]
   b8e52:	6960      	ldr	r0, [r4, #20]
   b8e54:	ab03      	add	r3, sp, #12
   b8e56:	f241 020b 	movw	r2, #4107	; 0x100b
   b8e5a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8e5e:	f7fe f931 	bl	b70c4 <sock_setsockopt>
   b8e62:	b948      	cbnz	r0, b8e78 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b8e64:	6960      	ldr	r0, [r4, #20]
   b8e66:	221c      	movs	r2, #28
   b8e68:	a905      	add	r1, sp, #20
   b8e6a:	f7fe f923 	bl	b70b4 <sock_bind>
   b8e6e:	b918      	cbnz	r0, b8e78 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b8e70:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b8e72:	2001      	movs	r0, #1
}
   b8e74:	b00c      	add	sp, #48	; 0x30
   b8e76:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b8e78:	6823      	ldr	r3, [r4, #0]
   b8e7a:	4620      	mov	r0, r4
   b8e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8e7e:	4798      	blx	r3
   b8e80:	2000      	movs	r0, #0
   b8e82:	e7f7      	b.n	b8e74 <_ZN3UDP5beginEtm+0x88>

000b8e84 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b8e84:	b510      	push	{r4, lr}
   b8e86:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b8e88:	6940      	ldr	r0, [r0, #20]
   b8e8a:	2800      	cmp	r0, #0
   b8e8c:	db01      	blt.n	b8e92 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b8e8e:	f7fe f921 	bl	b70d4 <sock_close>
    _sock = -1;
   b8e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8e96:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b8e98:	2300      	movs	r3, #0
   b8e9a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b8e9c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b8e9e:	bd10      	pop	{r4, pc}

000b8ea0 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b8ea0:	b570      	push	{r4, r5, r6, lr}
   b8ea2:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b8ea4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8ea6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b8ea8:	b168      	cbz	r0, b8ec6 <_ZN3UDP5writeEPKhj+0x26>
   b8eaa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b8eac:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b8eae:	4294      	cmp	r4, r2
   b8eb0:	bf28      	it	cs
   b8eb2:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b8eb4:	4622      	mov	r2, r4
   b8eb6:	4430      	add	r0, r6
   b8eb8:	f001 fa49 	bl	ba34e <memcpy>
    _offset += size;
   b8ebc:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b8ebe:	4423      	add	r3, r4
   b8ec0:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b8ec2:	4620      	mov	r0, r4
   b8ec4:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b8ec6:	4604      	mov	r4, r0
   b8ec8:	e7f1      	b.n	b8eae <_ZN3UDP5writeEPKhj+0xe>

000b8eca <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b8eca:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b8ecc:	6803      	ldr	r3, [r0, #0]
   b8ece:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b8ed0:	4604      	mov	r4, r0
   b8ed2:	460f      	mov	r7, r1
   b8ed4:	4616      	mov	r6, r2
    if (available()) {
   b8ed6:	4798      	blx	r3
   b8ed8:	b190      	cbz	r0, b8f00 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b8eda:	6823      	ldr	r3, [r4, #0]
   b8edc:	4620      	mov	r0, r4
   b8ede:	691b      	ldr	r3, [r3, #16]
   b8ee0:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b8ee2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8ee4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b8ee6:	4286      	cmp	r6, r0
   b8ee8:	bfa8      	it	ge
   b8eea:	4606      	movge	r6, r0
   b8eec:	4419      	add	r1, r3
   b8eee:	4632      	mov	r2, r6
   b8ef0:	4638      	mov	r0, r7
   b8ef2:	f001 fa2c 	bl	ba34e <memcpy>
        _offset += read;
   b8ef6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8ef8:	4433      	add	r3, r6
   b8efa:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b8efc:	4630      	mov	r0, r6
   b8efe:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b8f00:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   b8f04:	e7fa      	b.n	b8efc <_ZN3UDP4readEPhj+0x32>

000b8f06 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8f06:	b530      	push	{r4, r5, lr}
   b8f08:	b087      	sub	sp, #28
   b8f0a:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8f0c:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8f0e:	4668      	mov	r0, sp
   b8f10:	f7ff f932 	bl	b8178 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f16:	3404      	adds	r4, #4
   b8f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f1a:	682b      	ldr	r3, [r5, #0]
   b8f1c:	7023      	strb	r3, [r4, #0]
    }
   b8f1e:	b007      	add	sp, #28
   b8f20:	bd30      	pop	{r4, r5, pc}
	...

000b8f24 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8f26:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8f28:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8f2a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8f2c:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b8f2e:	4a0a      	ldr	r2, [pc, #40]	; (b8f58 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b8f30:	9202      	str	r2, [sp, #8]
   b8f32:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8f34:	468c      	mov	ip, r1
   b8f36:	4606      	mov	r6, r0
   b8f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8f3a:	ad03      	add	r5, sp, #12
   b8f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f3e:	6823      	ldr	r3, [r4, #0]
   b8f40:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8f42:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b8f46:	9300      	str	r3, [sp, #0]
   b8f48:	4672      	mov	r2, lr
   b8f4a:	ab02      	add	r3, sp, #8
   b8f4c:	4661      	mov	r1, ip
   b8f4e:	4630      	mov	r0, r6
   b8f50:	47b8      	blx	r7
    }
   b8f52:	b009      	add	sp, #36	; 0x24
   b8f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8f56:	bf00      	nop
   b8f58:	000bd004 	.word	0x000bd004

000b8f5c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b8f5c:	b570      	push	{r4, r5, r6, lr}
   b8f5e:	4604      	mov	r4, r0
   b8f60:	4b05      	ldr	r3, [pc, #20]	; (b8f78 <_ZN3UDP8remoteIPEv+0x1c>)
   b8f62:	f844 3b04 	str.w	r3, [r4], #4
   b8f66:	f101 0520 	add.w	r5, r1, #32
   b8f6a:	4606      	mov	r6, r0
   b8f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f70:	682b      	ldr	r3, [r5, #0]
   b8f72:	7023      	strb	r3, [r4, #0]
   b8f74:	4630      	mov	r0, r6
   b8f76:	bd70      	pop	{r4, r5, r6, pc}
   b8f78:	000bd004 	.word	0x000bd004

000b8f7c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b8f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b8f7e:	7843      	ldrb	r3, [r0, #1]
   b8f80:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b8f82:	b08d      	sub	sp, #52	; 0x34
   b8f84:	4605      	mov	r5, r0
   b8f86:	460c      	mov	r4, r1
   b8f88:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b8f8a:	d104      	bne.n	b8f96 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8f8c:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   b8f8e:	4620      	mov	r0, r4
   b8f90:	f7ff ffb9 	bl	b8f06 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b8f94:	e022      	b.n	b8fdc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b8f96:	2b0a      	cmp	r3, #10
   b8f98:	d125      	bne.n	b8fe6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b8f9a:	2211      	movs	r2, #17
   b8f9c:	2100      	movs	r1, #0
   b8f9e:	a801      	add	r0, sp, #4
   b8fa0:	f001 f9e3 	bl	ba36a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8fa4:	68ab      	ldr	r3, [r5, #8]
   b8fa6:	b303      	cbz	r3, b8fea <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8fa8:	f105 0308 	add.w	r3, r5, #8
   b8fac:	ae01      	add	r6, sp, #4
   b8fae:	f105 0c18 	add.w	ip, r5, #24
   b8fb2:	6818      	ldr	r0, [r3, #0]
   b8fb4:	6859      	ldr	r1, [r3, #4]
   b8fb6:	4632      	mov	r2, r6
   b8fb8:	c203      	stmia	r2!, {r0, r1}
   b8fba:	3308      	adds	r3, #8
   b8fbc:	4563      	cmp	r3, ip
   b8fbe:	4616      	mov	r6, r2
   b8fc0:	d1f7      	bne.n	b8fb2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b8fc2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8fc4:	a901      	add	r1, sp, #4
   b8fc6:	a806      	add	r0, sp, #24
   b8fc8:	ae07      	add	r6, sp, #28
            a.v = 6;
   b8fca:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8fce:	f7ff f891 	bl	b80f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8fd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8fd4:	3404      	adds	r4, #4
   b8fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8fd8:	6833      	ldr	r3, [r6, #0]
   b8fda:	7023      	strb	r3, [r4, #0]
        if (port) {
   b8fdc:	b11f      	cbz	r7, b8fe6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b8fde:	8868      	ldrh	r0, [r5, #2]
   b8fe0:	f7fe f908 	bl	b71f4 <inet_ntohs>
   b8fe4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b8fe6:	b00d      	add	sp, #52	; 0x34
   b8fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8fea:	68eb      	ldr	r3, [r5, #12]
   b8fec:	2b00      	cmp	r3, #0
   b8fee:	d1db      	bne.n	b8fa8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b8ff0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8ff4:	692e      	ldr	r6, [r5, #16]
   b8ff6:	f7fe f8f5 	bl	b71e4 <inet_htonl>
   b8ffa:	4286      	cmp	r6, r0
   b8ffc:	d1d4      	bne.n	b8fa8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b8ffe:	f105 0114 	add.w	r1, r5, #20
   b9002:	e7c4      	b.n	b8f8e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b9004 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b9004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9008:	4617      	mov	r7, r2
   b900a:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b900c:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b900e:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9010:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b9012:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9014:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b9016:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9018:	f7fe f95c 	bl	b72d4 <netdb_getaddrinfo>
   b901c:	1e04      	subs	r4, r0, #0
   b901e:	db20      	blt.n	b9062 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b9020:	9b01      	ldr	r3, [sp, #4]
   b9022:	b32b      	cbz	r3, b9070 <_ZN3UDP11beginPacketEPKct+0x6c>
   b9024:	695b      	ldr	r3, [r3, #20]
   b9026:	b31b      	cbz	r3, b9070 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b9028:	a802      	add	r0, sp, #8
   b902a:	f7ff f855 	bl	b80d8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b902e:	9b01      	ldr	r3, [sp, #4]
   b9030:	2200      	movs	r2, #0
   b9032:	6958      	ldr	r0, [r3, #20]
   b9034:	a902      	add	r1, sp, #8
   b9036:	f7ff ffa1 	bl	b8f7c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b903a:	a802      	add	r0, sp, #8
   b903c:	f7ff f86c 	bl	b8118 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9040:	b1b0      	cbz	r0, b9070 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b9042:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9044:	ad03      	add	r5, sp, #12
   b9046:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b904a:	4b0b      	ldr	r3, [pc, #44]	; (b9078 <_ZN3UDP11beginPacketEPKct+0x74>)
   b904c:	9308      	str	r3, [sp, #32]
   b904e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9050:	ac09      	add	r4, sp, #36	; 0x24
   b9052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9054:	682b      	ldr	r3, [r5, #0]
   b9056:	7023      	strb	r3, [r4, #0]
   b9058:	463a      	mov	r2, r7
   b905a:	a908      	add	r1, sp, #32
   b905c:	4630      	mov	r0, r6
   b905e:	47c0      	blx	r8
   b9060:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b9062:	9801      	ldr	r0, [sp, #4]
   b9064:	f7fe f92e 	bl	b72c4 <netdb_freeaddrinfo>
}
   b9068:	4620      	mov	r0, r4
   b906a:	b00e      	add	sp, #56	; 0x38
   b906c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b9070:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9074:	e7f5      	b.n	b9062 <_ZN3UDP11beginPacketEPKct+0x5e>
   b9076:	bf00      	nop
   b9078:	000bd004 	.word	0x000bd004

000b907c <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b9080:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b9084:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b9088:	b090      	sub	sp, #64	; 0x40
   b908a:	4605      	mov	r5, r0
   b908c:	460e      	mov	r6, r1
   b908e:	4690      	mov	r8, r2
   b9090:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b9092:	db3c      	blt.n	b910e <_ZN3UDP13receivePacketEPhjm+0x92>
   b9094:	2900      	cmp	r1, #0
   b9096:	d03a      	beq.n	b910e <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b9098:	f04f 0a1c 	mov.w	sl, #28
   b909c:	af09      	add	r7, sp, #36	; 0x24
   b909e:	4652      	mov	r2, sl
   b90a0:	2100      	movs	r1, #0
   b90a2:	4638      	mov	r0, r7
   b90a4:	f001 f961 	bl	ba36a <memset>
        socklen_t slen = sizeof(saddr);
   b90a8:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b90ac:	b1dc      	cbz	r4, b90e6 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b90ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b90b2:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b90b6:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b90ba:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b90bc:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b90be:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b90c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b90c4:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b90c6:	9300      	str	r3, [sp, #0]
   b90c8:	f241 0206 	movw	r2, #4102	; 0x1006
   b90cc:	446b      	add	r3, sp
   b90ce:	f640 71ff 	movw	r1, #4095	; 0xfff
   b90d2:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b90d4:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b90d6:	f7fd fff5 	bl	b70c4 <sock_setsockopt>
            if (ret) {
   b90da:	4604      	mov	r4, r0
   b90dc:	b120      	cbz	r0, b90e8 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b90de:	4620      	mov	r0, r4
   b90e0:	b010      	add	sp, #64	; 0x40
   b90e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b90e6:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b90e8:	ab03      	add	r3, sp, #12
   b90ea:	e9cd 7300 	strd	r7, r3, [sp]
   b90ee:	6968      	ldr	r0, [r5, #20]
   b90f0:	4623      	mov	r3, r4
   b90f2:	4642      	mov	r2, r8
   b90f4:	4631      	mov	r1, r6
   b90f6:	f7fe f805 	bl	b7104 <sock_recvfrom>
        if (ret >= 0) {
   b90fa:	1e04      	subs	r4, r0, #0
   b90fc:	dbef      	blt.n	b90de <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b90fe:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b9102:	f105 011c 	add.w	r1, r5, #28
   b9106:	4638      	mov	r0, r7
   b9108:	f7ff ff38 	bl	b8f7c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b910c:	e7e7      	b.n	b90de <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b910e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9112:	e7e4      	b.n	b90de <_ZN3UDP13receivePacketEPhjm+0x62>

000b9114 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b9114:	b538      	push	{r3, r4, r5, lr}
   b9116:	4605      	mov	r5, r0
   b9118:	4614      	mov	r4, r2
    		return address.v;
   b911a:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b911c:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b911e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b9120:	d110      	bne.n	b9144 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b9122:	f640 231c 	movw	r3, #2588	; 0xa1c
   b9126:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b9128:	f7fe f86c 	bl	b7204 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b912c:	3408      	adds	r4, #8
   b912e:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b9130:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b9134:	3514      	adds	r5, #20
   b9136:	f853 2b04 	ldr.w	r2, [r3], #4
   b913a:	f844 2b04 	str.w	r2, [r4], #4
   b913e:	42ab      	cmp	r3, r5
   b9140:	d1f9      	bne.n	b9136 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b9142:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b9144:	2b04      	cmp	r3, #4
   b9146:	d1fc      	bne.n	b9142 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b9148:	f44f 7304 	mov.w	r3, #528	; 0x210
   b914c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b914e:	f7fe f859 	bl	b7204 <inet_htons>
   b9152:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b9154:	6868      	ldr	r0, [r5, #4]
   b9156:	f7fe f845 	bl	b71e4 <inet_htonl>
   b915a:	6060      	str	r0, [r4, #4]
}
   b915c:	e7f1      	b.n	b9142 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b915e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b915e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9162:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b9164:	af03      	add	r7, sp, #12
   b9166:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b916a:	4698      	mov	r8, r3
   b916c:	4604      	mov	r4, r0
   b916e:	460d      	mov	r5, r1
   b9170:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b9172:	2100      	movs	r1, #0
   b9174:	464a      	mov	r2, r9
   b9176:	4638      	mov	r0, r7
   b9178:	f001 f8f7 	bl	ba36a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b917c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b9180:	463a      	mov	r2, r7
   b9182:	4640      	mov	r0, r8
   b9184:	f7ff ffc6 	bl	b9114 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b9188:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b918c:	b153      	cbz	r3, b91a4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b918e:	e9cd 7900 	strd	r7, r9, [sp]
   b9192:	6960      	ldr	r0, [r4, #20]
   b9194:	2300      	movs	r3, #0
   b9196:	4632      	mov	r2, r6
   b9198:	4629      	mov	r1, r5
   b919a:	f7fd ffc3 	bl	b7124 <sock_sendto>
}
   b919e:	b00b      	add	sp, #44	; 0x2c
   b91a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b91a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b91a8:	e7f9      	b.n	b919e <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b91ac <_ZN3UDPC1Ev>:
UDP::UDP()
   b91ac:	b538      	push	{r3, r4, r5, lr}
   b91ae:	2500      	movs	r5, #0
   b91b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b91b4:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b91b8:	4b0b      	ldr	r3, [pc, #44]	; (b91e8 <_ZN3UDPC1Ev+0x3c>)
   b91ba:	f103 0208 	add.w	r2, r3, #8
   b91be:	336c      	adds	r3, #108	; 0x6c
   b91c0:	6103      	str	r3, [r0, #16]
   b91c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   b91c6:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b91c8:	6002      	str	r2, [r0, #0]
   b91ca:	6143      	str	r3, [r0, #20]
   b91cc:	301c      	adds	r0, #28
   b91ce:	f7fe ff83 	bl	b80d8 <_ZN9IPAddressC1Ev>
   b91d2:	f44f 7300 	mov.w	r3, #512	; 0x200
   b91d6:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b91da:	86e5      	strh	r5, [r4, #54]	; 0x36
   b91dc:	8725      	strh	r5, [r4, #56]	; 0x38
   b91de:	63e5      	str	r5, [r4, #60]	; 0x3c
   b91e0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b91e4:	4620      	mov	r0, r4
   b91e6:	bd38      	pop	{r3, r4, r5, pc}
   b91e8:	000bd04c 	.word	0x000bd04c

000b91ec <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b91ec:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b91ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b91f2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b91f4:	b123      	cbz	r3, b9200 <_ZN3UDP13releaseBufferEv+0x14>
   b91f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b91f8:	b110      	cbz	r0, b9200 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b91fa:	2101      	movs	r1, #1
   b91fc:	f7fa ff4f 	bl	b409e <_ZdlPvj>
    _buffer = NULL;
   b9200:	2300      	movs	r3, #0
   b9202:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b9204:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b9208:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b920a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b920c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b920e:	bd10      	pop	{r4, pc}

000b9210 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b9210:	b570      	push	{r4, r5, r6, lr}
   b9212:	4604      	mov	r4, r0
   b9214:	4616      	mov	r6, r2
   b9216:	460d      	mov	r5, r1
    releaseBuffer();
   b9218:	f7ff ffe8 	bl	b91ec <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b921c:	2300      	movs	r3, #0
    _buffer = buffer;
   b921e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b9220:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b9222:	b12e      	cbz	r6, b9230 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b9224:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b9226:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b9228:	3800      	subs	r0, #0
   b922a:	bf18      	it	ne
   b922c:	2001      	movne	r0, #1
   b922e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b9230:	2d00      	cmp	r5, #0
   b9232:	d0f8      	beq.n	b9226 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b9234:	4628      	mov	r0, r5
   b9236:	f7fa ff30 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b923a:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b923c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b923e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b9242:	2800      	cmp	r0, #0
   b9244:	d0ef      	beq.n	b9226 <_ZN3UDP9setBufferEjPh+0x16>
   b9246:	e7ed      	b.n	b9224 <_ZN3UDP9setBufferEjPh+0x14>

000b9248 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b9248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b924a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b924c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b924e:	4605      	mov	r5, r0
   b9250:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b9252:	b91a      	cbnz	r2, b925c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b9254:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b9256:	b109      	cbz	r1, b925c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b9258:	f7ff ffda 	bl	b9210 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b925c:	3404      	adds	r4, #4
   b925e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9260:	f105 0620 	add.w	r6, r5, #32
   b9264:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b9266:	6823      	ldr	r3, [r4, #0]
   b9268:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b926a:	2300      	movs	r3, #0
}
   b926c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b926e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b9270:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b9272:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b9274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9276 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b9276:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b9278:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b927a:	4604      	mov	r4, r0
   b927c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b927e:	b92a      	cbnz	r2, b928c <_ZN3UDP11parsePacketEm+0x16>
   b9280:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b9282:	b119      	cbz	r1, b928c <_ZN3UDP11parsePacketEm+0x16>
   b9284:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b9286:	f7ff ffc3 	bl	b9210 <_ZN3UDP9setBufferEjPh>
   b928a:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b928c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b928e:	2200      	movs	r2, #0
   b9290:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b9292:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b9294:	b141      	cbz	r1, b92a8 <_ZN3UDP11parsePacketEm+0x32>
   b9296:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b9298:	b132      	cbz	r2, b92a8 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b929a:	6820      	ldr	r0, [r4, #0]
   b929c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b929e:	4620      	mov	r0, r4
   b92a0:	47a8      	blx	r5
        if (result > 0) {
   b92a2:	2800      	cmp	r0, #0
            _total = result;
   b92a4:	bfc8      	it	gt
   b92a6:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b92a8:	6823      	ldr	r3, [r4, #0]
   b92aa:	691b      	ldr	r3, [r3, #16]
   b92ac:	4620      	mov	r0, r4
}
   b92ae:	b003      	add	sp, #12
   b92b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b92b4:	4718      	bx	r3
	...

000b92b8 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b92b8:	b510      	push	{r4, lr}
   b92ba:	4b07      	ldr	r3, [pc, #28]	; (b92d8 <_ZN3UDPD1Ev+0x20>)
   b92bc:	f103 0208 	add.w	r2, r3, #8
   b92c0:	336c      	adds	r3, #108	; 0x6c
   b92c2:	4604      	mov	r4, r0
   b92c4:	6002      	str	r2, [r0, #0]
   b92c6:	6103      	str	r3, [r0, #16]
   b92c8:	f7ff fddc 	bl	b8e84 <_ZN3UDP4stopEv>
   b92cc:	4620      	mov	r0, r4
   b92ce:	f7ff ff8d 	bl	b91ec <_ZN3UDP13releaseBufferEv>
   b92d2:	4620      	mov	r0, r4
   b92d4:	bd10      	pop	{r4, pc}
   b92d6:	bf00      	nop
   b92d8:	000bd04c 	.word	0x000bd04c

000b92dc <_ZN3UDPD0Ev>:
   b92dc:	b510      	push	{r4, lr}
   b92de:	4604      	mov	r4, r0
   b92e0:	f7ff ffea 	bl	b92b8 <_ZN3UDPD1Ev>
   b92e4:	4620      	mov	r0, r4
   b92e6:	214c      	movs	r1, #76	; 0x4c
   b92e8:	f7fa fed9 	bl	b409e <_ZdlPvj>
   b92ec:	4620      	mov	r0, r4
   b92ee:	bd10      	pop	{r4, pc}

000b92f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b92f0:	2200      	movs	r2, #0
   b92f2:	6840      	ldr	r0, [r0, #4]
   b92f4:	4611      	mov	r1, r2
   b92f6:	f7fe b8af 	b.w	b7458 <network_listening>

000b92fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b92fa:	2200      	movs	r2, #0
   b92fc:	6840      	ldr	r0, [r0, #4]
   b92fe:	4611      	mov	r1, r2
   b9300:	f7fe b8ba 	b.w	b7478 <network_get_listen_timeout>

000b9304 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9304:	6840      	ldr	r0, [r0, #4]
   b9306:	2200      	movs	r2, #0
   b9308:	f7fe b8ae 	b.w	b7468 <network_set_listen_timeout>

000b930c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b930c:	6840      	ldr	r0, [r0, #4]
   b930e:	2200      	movs	r2, #0
   b9310:	f081 0101 	eor.w	r1, r1, #1
   b9314:	f7fe b898 	b.w	b7448 <network_listen>

000b9318 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9318:	2300      	movs	r3, #0
   b931a:	6840      	ldr	r0, [r0, #4]
   b931c:	461a      	mov	r2, r3
   b931e:	4619      	mov	r1, r3
   b9320:	f7fe b88a 	b.w	b7438 <network_off>

000b9324 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9324:	2300      	movs	r3, #0
   b9326:	6840      	ldr	r0, [r0, #4]
   b9328:	461a      	mov	r2, r3
   b932a:	4619      	mov	r1, r3
   b932c:	f7fe b87c 	b.w	b7428 <network_on>

000b9330 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9330:	2200      	movs	r2, #0
   b9332:	6840      	ldr	r0, [r0, #4]
   b9334:	4611      	mov	r1, r2
   b9336:	f7fe b86f 	b.w	b7418 <network_ready>

000b933a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b933a:	2200      	movs	r2, #0
   b933c:	6840      	ldr	r0, [r0, #4]
   b933e:	4611      	mov	r1, r2
   b9340:	f7fe b85a 	b.w	b73f8 <network_connecting>

000b9344 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9344:	6840      	ldr	r0, [r0, #4]
   b9346:	2200      	movs	r2, #0
   b9348:	2102      	movs	r1, #2
   b934a:	f7fe b85d 	b.w	b7408 <network_disconnect>

000b934e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b934e:	2300      	movs	r3, #0
   b9350:	6840      	ldr	r0, [r0, #4]
   b9352:	461a      	mov	r2, r3
   b9354:	f7fe b848 	b.w	b73e8 <network_connect>

000b9358 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b9358:	4b02      	ldr	r3, [pc, #8]	; (b9364 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b935a:	2203      	movs	r2, #3
   b935c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b935e:	4a02      	ldr	r2, [pc, #8]	; (b9368 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9360:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9362:	4770      	bx	lr
   b9364:	2003e6f8 	.word	0x2003e6f8
   b9368:	000bd0c4 	.word	0x000bd0c4

000b936c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   b936c:	b508      	push	{r3, lr}
   b936e:	4b02      	ldr	r3, [pc, #8]	; (b9378 <spark_protocol_instance+0xc>)
   b9370:	681b      	ldr	r3, [r3, #0]
   b9372:	681b      	ldr	r3, [r3, #0]
   b9374:	9301      	str	r3, [sp, #4]
   b9376:	bd08      	pop	{r3, pc}
   b9378:	0003025c 	.word	0x0003025c

000b937c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   b937c:	b508      	push	{r3, lr}
   b937e:	4b02      	ldr	r3, [pc, #8]	; (b9388 <spark_protocol_set_product_id+0xc>)
   b9380:	681b      	ldr	r3, [r3, #0]
   b9382:	685b      	ldr	r3, [r3, #4]
   b9384:	9301      	str	r3, [sp, #4]
   b9386:	bd08      	pop	{r3, pc}
   b9388:	0003025c 	.word	0x0003025c

000b938c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   b938c:	b508      	push	{r3, lr}
   b938e:	4b02      	ldr	r3, [pc, #8]	; (b9398 <spark_protocol_set_product_firmware_version+0xc>)
   b9390:	681b      	ldr	r3, [r3, #0]
   b9392:	689b      	ldr	r3, [r3, #8]
   b9394:	9301      	str	r3, [sp, #4]
   b9396:	bd08      	pop	{r3, pc}
   b9398:	0003025c 	.word	0x0003025c

000b939c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b939c:	4770      	bx	lr

000b939e <__tcf_1>:
   b939e:	4770      	bx	lr

000b93a0 <_Z17acquireWireBufferv>:
{
   b93a0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b93a2:	2520      	movs	r5, #32
   b93a4:	2314      	movs	r3, #20
{
   b93a6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b93a8:	6003      	str	r3, [r0, #0]
   b93aa:	6085      	str	r5, [r0, #8]
   b93ac:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b93ae:	4906      	ldr	r1, [pc, #24]	; (b93c8 <_Z17acquireWireBufferv+0x28>)
   b93b0:	4628      	mov	r0, r5
   b93b2:	f000 f911 	bl	b95d8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b93b6:	4904      	ldr	r1, [pc, #16]	; (b93c8 <_Z17acquireWireBufferv+0x28>)
	};
   b93b8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b93ba:	4628      	mov	r0, r5
   b93bc:	f000 f90c 	bl	b95d8 <_ZnajRKSt9nothrow_t>
	};
   b93c0:	60e0      	str	r0, [r4, #12]
}
   b93c2:	4620      	mov	r0, r4
   b93c4:	bd38      	pop	{r3, r4, r5, pc}
   b93c6:	bf00      	nop
   b93c8:	000bd0f8 	.word	0x000bd0f8

000b93cc <_Z18acquireWire1Bufferv>:
   b93cc:	b538      	push	{r3, r4, r5, lr}
   b93ce:	2520      	movs	r5, #32
   b93d0:	2314      	movs	r3, #20
   b93d2:	4604      	mov	r4, r0
   b93d4:	6003      	str	r3, [r0, #0]
   b93d6:	6085      	str	r5, [r0, #8]
   b93d8:	6105      	str	r5, [r0, #16]
   b93da:	4906      	ldr	r1, [pc, #24]	; (b93f4 <_Z18acquireWire1Bufferv+0x28>)
   b93dc:	4628      	mov	r0, r5
   b93de:	f000 f8fb 	bl	b95d8 <_ZnajRKSt9nothrow_t>
   b93e2:	4904      	ldr	r1, [pc, #16]	; (b93f4 <_Z18acquireWire1Bufferv+0x28>)
   b93e4:	6060      	str	r0, [r4, #4]
   b93e6:	4628      	mov	r0, r5
   b93e8:	f000 f8f6 	bl	b95d8 <_ZnajRKSt9nothrow_t>
   b93ec:	60e0      	str	r0, [r4, #12]
   b93ee:	4620      	mov	r0, r4
   b93f0:	bd38      	pop	{r3, r4, r5, pc}
   b93f2:	bf00      	nop
   b93f4:	000bd0f8 	.word	0x000bd0f8

000b93f8 <_Z19__fetch_global_Wirev>:
{
   b93f8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b93fa:	4d0e      	ldr	r5, [pc, #56]	; (b9434 <_Z19__fetch_global_Wirev+0x3c>)
   b93fc:	7829      	ldrb	r1, [r5, #0]
   b93fe:	f3bf 8f5b 	dmb	ish
   b9402:	f011 0401 	ands.w	r4, r1, #1
{
   b9406:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9408:	d111      	bne.n	b942e <_Z19__fetch_global_Wirev+0x36>
   b940a:	4628      	mov	r0, r5
   b940c:	f7fa fe49 	bl	b40a2 <__cxa_guard_acquire>
   b9410:	b168      	cbz	r0, b942e <_Z19__fetch_global_Wirev+0x36>
   b9412:	a801      	add	r0, sp, #4
   b9414:	f7ff ffc4 	bl	b93a0 <_Z17acquireWireBufferv>
   b9418:	aa01      	add	r2, sp, #4
   b941a:	4621      	mov	r1, r4
   b941c:	4806      	ldr	r0, [pc, #24]	; (b9438 <_Z19__fetch_global_Wirev+0x40>)
   b941e:	f7fe fcc9 	bl	b7db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9422:	4628      	mov	r0, r5
   b9424:	f7fa fe42 	bl	b40ac <__cxa_guard_release>
   b9428:	4804      	ldr	r0, [pc, #16]	; (b943c <_Z19__fetch_global_Wirev+0x44>)
   b942a:	f000 ff83 	bl	ba334 <atexit>
	return wire;
}
   b942e:	4802      	ldr	r0, [pc, #8]	; (b9438 <_Z19__fetch_global_Wirev+0x40>)
   b9430:	b007      	add	sp, #28
   b9432:	bd30      	pop	{r4, r5, pc}
   b9434:	2003e700 	.word	0x2003e700
   b9438:	2003e708 	.word	0x2003e708
   b943c:	000b939d 	.word	0x000b939d

000b9440 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b9440:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b9442:	4c0e      	ldr	r4, [pc, #56]	; (b947c <_Z20__fetch_global_Wire1v+0x3c>)
   b9444:	7823      	ldrb	r3, [r4, #0]
   b9446:	f3bf 8f5b 	dmb	ish
   b944a:	07db      	lsls	r3, r3, #31
{
   b944c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b944e:	d411      	bmi.n	b9474 <_Z20__fetch_global_Wire1v+0x34>
   b9450:	4620      	mov	r0, r4
   b9452:	f7fa fe26 	bl	b40a2 <__cxa_guard_acquire>
   b9456:	b168      	cbz	r0, b9474 <_Z20__fetch_global_Wire1v+0x34>
   b9458:	a801      	add	r0, sp, #4
   b945a:	f7ff ffb7 	bl	b93cc <_Z18acquireWire1Bufferv>
   b945e:	aa01      	add	r2, sp, #4
   b9460:	2101      	movs	r1, #1
   b9462:	4807      	ldr	r0, [pc, #28]	; (b9480 <_Z20__fetch_global_Wire1v+0x40>)
   b9464:	f7fe fca6 	bl	b7db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9468:	4620      	mov	r0, r4
   b946a:	f7fa fe1f 	bl	b40ac <__cxa_guard_release>
   b946e:	4805      	ldr	r0, [pc, #20]	; (b9484 <_Z20__fetch_global_Wire1v+0x44>)
   b9470:	f000 ff60 	bl	ba334 <atexit>
	return wire;
}
   b9474:	4802      	ldr	r0, [pc, #8]	; (b9480 <_Z20__fetch_global_Wire1v+0x40>)
   b9476:	b006      	add	sp, #24
   b9478:	bd10      	pop	{r4, pc}
   b947a:	bf00      	nop
   b947c:	2003e704 	.word	0x2003e704
   b9480:	2003e71c 	.word	0x2003e71c
   b9484:	000b939f 	.word	0x000b939f

000b9488 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9488:	4770      	bx	lr
	...

000b948c <_Z20acquireSerial1Bufferv>:
{
   b948c:	b538      	push	{r3, r4, r5, lr}
   b948e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9490:	2514      	movs	r5, #20
   b9492:	462a      	mov	r2, r5
   b9494:	2100      	movs	r1, #0
   b9496:	f000 ff68 	bl	ba36a <memset>
   b949a:	8025      	strh	r5, [r4, #0]
   b949c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b949e:	4907      	ldr	r1, [pc, #28]	; (b94bc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b94a0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b94a2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b94a4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b94a6:	f000 f897 	bl	b95d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b94aa:	4904      	ldr	r1, [pc, #16]	; (b94bc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b94ac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b94ae:	4628      	mov	r0, r5
   b94b0:	f000 f892 	bl	b95d8 <_ZnajRKSt9nothrow_t>
    };
   b94b4:	60e0      	str	r0, [r4, #12]
}
   b94b6:	4620      	mov	r0, r4
   b94b8:	bd38      	pop	{r3, r4, r5, pc}
   b94ba:	bf00      	nop
   b94bc:	000bd0f8 	.word	0x000bd0f8

000b94c0 <_Z22__fetch_global_Serial1v>:
{
   b94c0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b94c2:	4d0e      	ldr	r5, [pc, #56]	; (b94fc <_Z22__fetch_global_Serial1v+0x3c>)
   b94c4:	7829      	ldrb	r1, [r5, #0]
   b94c6:	f3bf 8f5b 	dmb	ish
   b94ca:	f011 0401 	ands.w	r4, r1, #1
{
   b94ce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b94d0:	d111      	bne.n	b94f6 <_Z22__fetch_global_Serial1v+0x36>
   b94d2:	4628      	mov	r0, r5
   b94d4:	f7fa fde5 	bl	b40a2 <__cxa_guard_acquire>
   b94d8:	b168      	cbz	r0, b94f6 <_Z22__fetch_global_Serial1v+0x36>
   b94da:	a801      	add	r0, sp, #4
   b94dc:	f7ff ffd6 	bl	b948c <_Z20acquireSerial1Bufferv>
   b94e0:	aa01      	add	r2, sp, #4
   b94e2:	4621      	mov	r1, r4
   b94e4:	4806      	ldr	r0, [pc, #24]	; (b9500 <_Z22__fetch_global_Serial1v+0x40>)
   b94e6:	f7fe fcd1 	bl	b7e8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b94ea:	4628      	mov	r0, r5
   b94ec:	f7fa fdde 	bl	b40ac <__cxa_guard_release>
   b94f0:	4804      	ldr	r0, [pc, #16]	; (b9504 <_Z22__fetch_global_Serial1v+0x44>)
   b94f2:	f000 ff1f 	bl	ba334 <atexit>
    return serial1;
}
   b94f6:	4802      	ldr	r0, [pc, #8]	; (b9500 <_Z22__fetch_global_Serial1v+0x40>)
   b94f8:	b007      	add	sp, #28
   b94fa:	bd30      	pop	{r4, r5, pc}
   b94fc:	2003e738 	.word	0x2003e738
   b9500:	2003e73c 	.word	0x2003e73c
   b9504:	000b9489 	.word	0x000b9489

000b9508 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9508:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b950a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b950c:	d902      	bls.n	b9514 <pinAvailable+0xc>
    return false;
   b950e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9510:	b002      	add	sp, #8
   b9512:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9514:	f1a0 030b 	sub.w	r3, r0, #11
   b9518:	2b02      	cmp	r3, #2
   b951a:	d81a      	bhi.n	b9552 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b951c:	4c17      	ldr	r4, [pc, #92]	; (b957c <pinAvailable+0x74>)
   b951e:	7821      	ldrb	r1, [r4, #0]
   b9520:	f3bf 8f5b 	dmb	ish
   b9524:	f011 0101 	ands.w	r1, r1, #1
   b9528:	d10b      	bne.n	b9542 <pinAvailable+0x3a>
   b952a:	4620      	mov	r0, r4
   b952c:	9101      	str	r1, [sp, #4]
   b952e:	f7fa fdb8 	bl	b40a2 <__cxa_guard_acquire>
   b9532:	9901      	ldr	r1, [sp, #4]
   b9534:	b128      	cbz	r0, b9542 <pinAvailable+0x3a>
   b9536:	4812      	ldr	r0, [pc, #72]	; (b9580 <pinAvailable+0x78>)
   b9538:	f7fe fbf0 	bl	b7d1c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b953c:	4620      	mov	r0, r4
   b953e:	f7fa fdb5 	bl	b40ac <__cxa_guard_release>
   b9542:	4b0f      	ldr	r3, [pc, #60]	; (b9580 <pinAvailable+0x78>)
   b9544:	7818      	ldrb	r0, [r3, #0]
   b9546:	f7fd fdad 	bl	b70a4 <hal_spi_is_enabled>
   b954a:	2800      	cmp	r0, #0
   b954c:	d1df      	bne.n	b950e <pinAvailable+0x6>
  return true; // 'pin' is available
   b954e:	2001      	movs	r0, #1
   b9550:	e7de      	b.n	b9510 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9552:	2801      	cmp	r0, #1
   b9554:	d809      	bhi.n	b956a <pinAvailable+0x62>
   b9556:	f7ff ff4f 	bl	b93f8 <_Z19__fetch_global_Wirev>
   b955a:	2100      	movs	r1, #0
   b955c:	7c00      	ldrb	r0, [r0, #16]
   b955e:	f7fd fd81 	bl	b7064 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9562:	f080 0001 	eor.w	r0, r0, #1
   b9566:	b2c0      	uxtb	r0, r0
   b9568:	e7d2      	b.n	b9510 <pinAvailable+0x8>
   b956a:	3809      	subs	r0, #9
   b956c:	2801      	cmp	r0, #1
   b956e:	d8ee      	bhi.n	b954e <pinAvailable+0x46>
   b9570:	f7ff ffa6 	bl	b94c0 <_Z22__fetch_global_Serial1v>
   b9574:	7c00      	ldrb	r0, [r0, #16]
   b9576:	f7fd fe0d 	bl	b7194 <hal_usart_is_enabled>
   b957a:	e7f2      	b.n	b9562 <pinAvailable+0x5a>
   b957c:	2003e750 	.word	0x2003e750
   b9580:	2003e754 	.word	0x2003e754

000b9584 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9584:	2823      	cmp	r0, #35	; 0x23
{
   b9586:	b538      	push	{r3, r4, r5, lr}
   b9588:	4604      	mov	r4, r0
   b958a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b958c:	d80a      	bhi.n	b95a4 <pinMode+0x20>
   b958e:	29ff      	cmp	r1, #255	; 0xff
   b9590:	d008      	beq.n	b95a4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9592:	f7ff ffb9 	bl	b9508 <pinAvailable>
   b9596:	b128      	cbz	r0, b95a4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9598:	4629      	mov	r1, r5
   b959a:	4620      	mov	r0, r4
}
   b959c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b95a0:	f7fd be78 	b.w	b7294 <HAL_Pin_Mode>
}
   b95a4:	bd38      	pop	{r3, r4, r5, pc}

000b95a6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b95a6:	b538      	push	{r3, r4, r5, lr}
   b95a8:	4604      	mov	r4, r0
   b95aa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b95ac:	f7fd fe7a 	bl	b72a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b95b0:	28ff      	cmp	r0, #255	; 0xff
   b95b2:	d010      	beq.n	b95d6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b95b4:	2806      	cmp	r0, #6
   b95b6:	d804      	bhi.n	b95c2 <digitalWrite+0x1c>
   b95b8:	234d      	movs	r3, #77	; 0x4d
   b95ba:	fa23 f000 	lsr.w	r0, r3, r0
   b95be:	07c3      	lsls	r3, r0, #31
   b95c0:	d409      	bmi.n	b95d6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b95c2:	4620      	mov	r0, r4
   b95c4:	f7ff ffa0 	bl	b9508 <pinAvailable>
   b95c8:	b128      	cbz	r0, b95d6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b95ca:	4629      	mov	r1, r5
   b95cc:	4620      	mov	r0, r4
}
   b95ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b95d2:	f7fd be6f 	b.w	b72b4 <HAL_GPIO_Write>
}
   b95d6:	bd38      	pop	{r3, r4, r5, pc}

000b95d8 <_ZnajRKSt9nothrow_t>:
   b95d8:	f7fa bd5f 	b.w	b409a <_Znaj>

000b95dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b95dc:	68c3      	ldr	r3, [r0, #12]
   b95de:	689a      	ldr	r2, [r3, #8]
   b95e0:	60c2      	str	r2, [r0, #12]
   b95e2:	b510      	push	{r4, lr}
   b95e4:	b102      	cbz	r2, b95e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b95e6:	6050      	str	r0, [r2, #4]
   b95e8:	6842      	ldr	r2, [r0, #4]
   b95ea:	605a      	str	r2, [r3, #4]
   b95ec:	680c      	ldr	r4, [r1, #0]
   b95ee:	4284      	cmp	r4, r0
   b95f0:	d103      	bne.n	b95fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b95f2:	600b      	str	r3, [r1, #0]
   b95f4:	6098      	str	r0, [r3, #8]
   b95f6:	6043      	str	r3, [r0, #4]
   b95f8:	bd10      	pop	{r4, pc}
   b95fa:	6891      	ldr	r1, [r2, #8]
   b95fc:	4281      	cmp	r1, r0
   b95fe:	bf0c      	ite	eq
   b9600:	6093      	streq	r3, [r2, #8]
   b9602:	60d3      	strne	r3, [r2, #12]
   b9604:	e7f6      	b.n	b95f4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b9606 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b9606:	6883      	ldr	r3, [r0, #8]
   b9608:	68da      	ldr	r2, [r3, #12]
   b960a:	6082      	str	r2, [r0, #8]
   b960c:	b510      	push	{r4, lr}
   b960e:	b102      	cbz	r2, b9612 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b9610:	6050      	str	r0, [r2, #4]
   b9612:	6842      	ldr	r2, [r0, #4]
   b9614:	605a      	str	r2, [r3, #4]
   b9616:	680c      	ldr	r4, [r1, #0]
   b9618:	4284      	cmp	r4, r0
   b961a:	d103      	bne.n	b9624 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b961c:	600b      	str	r3, [r1, #0]
   b961e:	60d8      	str	r0, [r3, #12]
   b9620:	6043      	str	r3, [r0, #4]
   b9622:	bd10      	pop	{r4, pc}
   b9624:	68d1      	ldr	r1, [r2, #12]
   b9626:	4281      	cmp	r1, r0
   b9628:	bf0c      	ite	eq
   b962a:	60d3      	streq	r3, [r2, #12]
   b962c:	6093      	strne	r3, [r2, #8]
   b962e:	e7f6      	b.n	b961e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b9630 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b9630:	68c3      	ldr	r3, [r0, #12]
   b9632:	b123      	cbz	r3, b963e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b9634:	4618      	mov	r0, r3
   b9636:	689b      	ldr	r3, [r3, #8]
   b9638:	2b00      	cmp	r3, #0
   b963a:	d1fb      	bne.n	b9634 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b963c:	4770      	bx	lr
   b963e:	6843      	ldr	r3, [r0, #4]
   b9640:	68da      	ldr	r2, [r3, #12]
   b9642:	4282      	cmp	r2, r0
   b9644:	d102      	bne.n	b964c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b9646:	4618      	mov	r0, r3
   b9648:	685b      	ldr	r3, [r3, #4]
   b964a:	e7f9      	b.n	b9640 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b964c:	68c2      	ldr	r2, [r0, #12]
   b964e:	4293      	cmp	r3, r2
   b9650:	bf18      	it	ne
   b9652:	4618      	movne	r0, r3
   b9654:	4770      	bx	lr

000b9656 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b9656:	7803      	ldrb	r3, [r0, #0]
   b9658:	b933      	cbnz	r3, b9668 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b965a:	6843      	ldr	r3, [r0, #4]
   b965c:	685b      	ldr	r3, [r3, #4]
   b965e:	4283      	cmp	r3, r0
   b9660:	d102      	bne.n	b9668 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b9662:	68db      	ldr	r3, [r3, #12]
   b9664:	4618      	mov	r0, r3
   b9666:	4770      	bx	lr
   b9668:	6882      	ldr	r2, [r0, #8]
   b966a:	b122      	cbz	r2, b9676 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b966c:	4613      	mov	r3, r2
   b966e:	68d2      	ldr	r2, [r2, #12]
   b9670:	2a00      	cmp	r2, #0
   b9672:	d1fb      	bne.n	b966c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b9674:	e7f6      	b.n	b9664 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b9676:	6843      	ldr	r3, [r0, #4]
   b9678:	689a      	ldr	r2, [r3, #8]
   b967a:	4282      	cmp	r2, r0
   b967c:	d1f2      	bne.n	b9664 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b967e:	4618      	mov	r0, r3
   b9680:	685b      	ldr	r3, [r3, #4]
   b9682:	e7f9      	b.n	b9678 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b9684 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b9684:	f7ff bfd4 	b.w	b9630 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b9688 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b9688:	f7ff bfe5 	b.w	b9656 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b968c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b968c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9690:	461e      	mov	r6, r3
   b9692:	f103 0804 	add.w	r8, r3, #4
   b9696:	2300      	movs	r3, #0
   b9698:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b969c:	460c      	mov	r4, r1
   b969e:	604a      	str	r2, [r1, #4]
   b96a0:	700b      	strb	r3, [r1, #0]
   b96a2:	b300      	cbz	r0, b96e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b96a4:	4296      	cmp	r6, r2
   b96a6:	6091      	str	r1, [r2, #8]
   b96a8:	d118      	bne.n	b96dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b96aa:	6071      	str	r1, [r6, #4]
   b96ac:	60f4      	str	r4, [r6, #12]
   b96ae:	2701      	movs	r7, #1
   b96b0:	f04f 0900 	mov.w	r9, #0
   b96b4:	6873      	ldr	r3, [r6, #4]
   b96b6:	42a3      	cmp	r3, r4
   b96b8:	d03f      	beq.n	b973a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b96ba:	6860      	ldr	r0, [r4, #4]
   b96bc:	7802      	ldrb	r2, [r0, #0]
   b96be:	2a00      	cmp	r2, #0
   b96c0:	d13b      	bne.n	b973a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b96c2:	6845      	ldr	r5, [r0, #4]
   b96c4:	68ab      	ldr	r3, [r5, #8]
   b96c6:	4298      	cmp	r0, r3
   b96c8:	d123      	bne.n	b9712 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b96ca:	68eb      	ldr	r3, [r5, #12]
   b96cc:	b183      	cbz	r3, b96f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b96ce:	781a      	ldrb	r2, [r3, #0]
   b96d0:	b972      	cbnz	r2, b96f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b96d2:	7007      	strb	r7, [r0, #0]
   b96d4:	701f      	strb	r7, [r3, #0]
   b96d6:	702a      	strb	r2, [r5, #0]
   b96d8:	462c      	mov	r4, r5
   b96da:	e7eb      	b.n	b96b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b96dc:	68b3      	ldr	r3, [r6, #8]
   b96de:	4293      	cmp	r3, r2
   b96e0:	d1e5      	bne.n	b96ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b96e2:	60b1      	str	r1, [r6, #8]
   b96e4:	e7e3      	b.n	b96ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b96e6:	60d1      	str	r1, [r2, #12]
   b96e8:	68f3      	ldr	r3, [r6, #12]
   b96ea:	4293      	cmp	r3, r2
   b96ec:	d1df      	bne.n	b96ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b96ee:	e7dd      	b.n	b96ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b96f0:	68c3      	ldr	r3, [r0, #12]
   b96f2:	42a3      	cmp	r3, r4
   b96f4:	d103      	bne.n	b96fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b96f6:	4641      	mov	r1, r8
   b96f8:	f7ff ff70 	bl	b95dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b96fc:	4604      	mov	r4, r0
   b96fe:	6863      	ldr	r3, [r4, #4]
   b9700:	4641      	mov	r1, r8
   b9702:	701f      	strb	r7, [r3, #0]
   b9704:	4628      	mov	r0, r5
   b9706:	f885 9000 	strb.w	r9, [r5]
   b970a:	f7ff ff7c 	bl	b9606 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b970e:	4625      	mov	r5, r4
   b9710:	e7e2      	b.n	b96d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b9712:	b113      	cbz	r3, b971a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b9714:	781a      	ldrb	r2, [r3, #0]
   b9716:	2a00      	cmp	r2, #0
   b9718:	d0db      	beq.n	b96d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b971a:	6883      	ldr	r3, [r0, #8]
   b971c:	42a3      	cmp	r3, r4
   b971e:	d103      	bne.n	b9728 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b9720:	4641      	mov	r1, r8
   b9722:	f7ff ff70 	bl	b9606 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b9726:	4604      	mov	r4, r0
   b9728:	6863      	ldr	r3, [r4, #4]
   b972a:	4641      	mov	r1, r8
   b972c:	701f      	strb	r7, [r3, #0]
   b972e:	4628      	mov	r0, r5
   b9730:	f885 9000 	strb.w	r9, [r5]
   b9734:	f7ff ff52 	bl	b95dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b9738:	e7e9      	b.n	b970e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b973a:	2201      	movs	r2, #1
   b973c:	701a      	strb	r2, [r3, #0]
   b973e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9742 <_ZSt25__throw_bad_function_callv>:
   b9742:	b508      	push	{r3, lr}
   b9744:	f7fd ff3e 	bl	b75c4 <abort>

000b9748 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9748:	4901      	ldr	r1, [pc, #4]	; (b9750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b974a:	f000 b8f9 	b.w	b9940 <_ZNKSt9type_infoeqERKS_>
   b974e:	bf00      	nop
   b9750:	000bd114 	.word	0x000bd114

000b9754 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9756:	2400      	movs	r4, #0
   b9758:	2310      	movs	r3, #16
   b975a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b975e:	6803      	ldr	r3, [r0, #0]
   b9760:	4615      	mov	r5, r2
   b9762:	699e      	ldr	r6, [r3, #24]
   b9764:	6812      	ldr	r2, [r2, #0]
   b9766:	466b      	mov	r3, sp
   b9768:	e9cd 4400 	strd	r4, r4, [sp]
   b976c:	47b0      	blx	r6
   b976e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9772:	f003 0306 	and.w	r3, r3, #6
   b9776:	2b06      	cmp	r3, #6
   b9778:	bf03      	ittte	eq
   b977a:	9b00      	ldreq	r3, [sp, #0]
   b977c:	602b      	streq	r3, [r5, #0]
   b977e:	2001      	moveq	r0, #1
   b9780:	4620      	movne	r0, r4
   b9782:	b004      	add	sp, #16
   b9784:	bd70      	pop	{r4, r5, r6, pc}

000b9786 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9786:	9800      	ldr	r0, [sp, #0]
   b9788:	4290      	cmp	r0, r2
   b978a:	bf14      	ite	ne
   b978c:	2001      	movne	r0, #1
   b978e:	2006      	moveq	r0, #6
   b9790:	4770      	bx	lr
	...

000b9794 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9794:	b510      	push	{r4, lr}
   b9796:	4b03      	ldr	r3, [pc, #12]	; (b97a4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9798:	6003      	str	r3, [r0, #0]
   b979a:	4604      	mov	r4, r0
   b979c:	f000 f8cd 	bl	b993a <_ZNSt9type_infoD1Ev>
   b97a0:	4620      	mov	r0, r4
   b97a2:	bd10      	pop	{r4, pc}
   b97a4:	000bd154 	.word	0x000bd154

000b97a8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b97a8:	b510      	push	{r4, lr}
   b97aa:	4604      	mov	r4, r0
   b97ac:	f7ff fff2 	bl	b9794 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b97b0:	4620      	mov	r0, r4
   b97b2:	2108      	movs	r1, #8
   b97b4:	f7fa fc73 	bl	b409e <_ZdlPvj>
   b97b8:	4620      	mov	r0, r4
   b97ba:	bd10      	pop	{r4, pc}

000b97bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b97bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b97c0:	461f      	mov	r7, r3
   b97c2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b97c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b97ca:	4598      	cmp	r8, r3
   b97cc:	4606      	mov	r6, r0
   b97ce:	4615      	mov	r5, r2
   b97d0:	d107      	bne.n	b97e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b97d2:	9907      	ldr	r1, [sp, #28]
   b97d4:	f000 f8b4 	bl	b9940 <_ZNKSt9type_infoeqERKS_>
   b97d8:	b118      	cbz	r0, b97e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b97da:	7165      	strb	r5, [r4, #5]
   b97dc:	2000      	movs	r0, #0
   b97de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b97e2:	4639      	mov	r1, r7
   b97e4:	4630      	mov	r0, r6
   b97e6:	f000 f8ab 	bl	b9940 <_ZNKSt9type_infoeqERKS_>
   b97ea:	2800      	cmp	r0, #0
   b97ec:	d0f6      	beq.n	b97dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b97ee:	2301      	movs	r3, #1
   b97f0:	f8c4 8000 	str.w	r8, [r4]
   b97f4:	7125      	strb	r5, [r4, #4]
   b97f6:	71a3      	strb	r3, [r4, #6]
   b97f8:	e7f0      	b.n	b97dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b97fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b97fa:	b538      	push	{r3, r4, r5, lr}
   b97fc:	4615      	mov	r5, r2
   b97fe:	461c      	mov	r4, r3
   b9800:	f000 f89e 	bl	b9940 <_ZNKSt9type_infoeqERKS_>
   b9804:	b120      	cbz	r0, b9810 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9806:	2308      	movs	r3, #8
   b9808:	60e3      	str	r3, [r4, #12]
   b980a:	2306      	movs	r3, #6
   b980c:	6025      	str	r5, [r4, #0]
   b980e:	7123      	strb	r3, [r4, #4]
   b9810:	bd38      	pop	{r3, r4, r5, pc}

000b9812 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9812:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9814:	4605      	mov	r5, r0
   b9816:	460c      	mov	r4, r1
   b9818:	9201      	str	r2, [sp, #4]
   b981a:	461e      	mov	r6, r3
   b981c:	f000 f890 	bl	b9940 <_ZNKSt9type_infoeqERKS_>
   b9820:	b950      	cbnz	r0, b9838 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9822:	2e03      	cmp	r6, #3
   b9824:	d808      	bhi.n	b9838 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9826:	6823      	ldr	r3, [r4, #0]
   b9828:	9a01      	ldr	r2, [sp, #4]
   b982a:	695b      	ldr	r3, [r3, #20]
   b982c:	4629      	mov	r1, r5
   b982e:	4620      	mov	r0, r4
   b9830:	b002      	add	sp, #8
   b9832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9836:	4718      	bx	r3
   b9838:	b002      	add	sp, #8
   b983a:	bd70      	pop	{r4, r5, r6, pc}

000b983c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b983c:	b510      	push	{r4, lr}
   b983e:	4b03      	ldr	r3, [pc, #12]	; (b984c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9840:	6003      	str	r3, [r0, #0]
   b9842:	4604      	mov	r4, r0
   b9844:	f7ff ffa6 	bl	b9794 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9848:	4620      	mov	r0, r4
   b984a:	bd10      	pop	{r4, pc}
   b984c:	000bd1b4 	.word	0x000bd1b4

000b9850 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9850:	b510      	push	{r4, lr}
   b9852:	4604      	mov	r4, r0
   b9854:	f7ff fff2 	bl	b983c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9858:	4620      	mov	r0, r4
   b985a:	210c      	movs	r1, #12
   b985c:	f7fa fc1f 	bl	b409e <_ZdlPvj>
   b9860:	4620      	mov	r0, r4
   b9862:	bd10      	pop	{r4, pc}

000b9864 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9866:	9f08      	ldr	r7, [sp, #32]
   b9868:	4297      	cmp	r7, r2
   b986a:	4605      	mov	r5, r0
   b986c:	460e      	mov	r6, r1
   b986e:	4614      	mov	r4, r2
   b9870:	d00a      	beq.n	b9888 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9872:	68a8      	ldr	r0, [r5, #8]
   b9874:	6802      	ldr	r2, [r0, #0]
   b9876:	9708      	str	r7, [sp, #32]
   b9878:	6a15      	ldr	r5, [r2, #32]
   b987a:	4631      	mov	r1, r6
   b987c:	4622      	mov	r2, r4
   b987e:	46ac      	mov	ip, r5
   b9880:	b003      	add	sp, #12
   b9882:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9886:	4760      	bx	ip
   b9888:	4619      	mov	r1, r3
   b988a:	9301      	str	r3, [sp, #4]
   b988c:	f000 f858 	bl	b9940 <_ZNKSt9type_infoeqERKS_>
   b9890:	9b01      	ldr	r3, [sp, #4]
   b9892:	2800      	cmp	r0, #0
   b9894:	d0ed      	beq.n	b9872 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9896:	2006      	movs	r0, #6
   b9898:	b003      	add	sp, #12
   b989a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b989c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b989c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98a0:	460d      	mov	r5, r1
   b98a2:	4619      	mov	r1, r3
   b98a4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b98a8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b98ac:	4681      	mov	r9, r0
   b98ae:	4617      	mov	r7, r2
   b98b0:	4698      	mov	r8, r3
   b98b2:	f000 f845 	bl	b9940 <_ZNKSt9type_infoeqERKS_>
   b98b6:	b190      	cbz	r0, b98de <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b98b8:	2d00      	cmp	r5, #0
   b98ba:	6034      	str	r4, [r6, #0]
   b98bc:	7137      	strb	r7, [r6, #4]
   b98be:	db09      	blt.n	b98d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b98c0:	1961      	adds	r1, r4, r5
   b98c2:	458a      	cmp	sl, r1
   b98c4:	bf0c      	ite	eq
   b98c6:	2106      	moveq	r1, #6
   b98c8:	2101      	movne	r1, #1
   b98ca:	71b1      	strb	r1, [r6, #6]
   b98cc:	2000      	movs	r0, #0
   b98ce:	b001      	add	sp, #4
   b98d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98d4:	3502      	adds	r5, #2
   b98d6:	d1f9      	bne.n	b98cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b98d8:	2301      	movs	r3, #1
   b98da:	71b3      	strb	r3, [r6, #6]
   b98dc:	e7f6      	b.n	b98cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b98de:	4554      	cmp	r4, sl
   b98e0:	d106      	bne.n	b98f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b98e2:	4659      	mov	r1, fp
   b98e4:	4648      	mov	r0, r9
   b98e6:	f000 f82b 	bl	b9940 <_ZNKSt9type_infoeqERKS_>
   b98ea:	b108      	cbz	r0, b98f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b98ec:	7177      	strb	r7, [r6, #5]
   b98ee:	e7ed      	b.n	b98cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b98f0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b98f4:	6803      	ldr	r3, [r0, #0]
   b98f6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b98fa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b98fe:	69dc      	ldr	r4, [r3, #28]
   b9900:	463a      	mov	r2, r7
   b9902:	4643      	mov	r3, r8
   b9904:	4629      	mov	r1, r5
   b9906:	46a4      	mov	ip, r4
   b9908:	b001      	add	sp, #4
   b990a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b990e:	4760      	bx	ip

000b9910 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9914:	4607      	mov	r7, r0
   b9916:	460c      	mov	r4, r1
   b9918:	4615      	mov	r5, r2
   b991a:	461e      	mov	r6, r3
   b991c:	f7ff ff6d 	bl	b97fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9920:	b948      	cbnz	r0, b9936 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9922:	68b8      	ldr	r0, [r7, #8]
   b9924:	6803      	ldr	r3, [r0, #0]
   b9926:	699f      	ldr	r7, [r3, #24]
   b9928:	462a      	mov	r2, r5
   b992a:	4633      	mov	r3, r6
   b992c:	4621      	mov	r1, r4
   b992e:	46bc      	mov	ip, r7
   b9930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9934:	4760      	bx	ip
   b9936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b993a <_ZNSt9type_infoD1Ev>:
   b993a:	4770      	bx	lr

000b993c <_ZNKSt9type_info14__is_pointer_pEv>:
   b993c:	2000      	movs	r0, #0
   b993e:	4770      	bx	lr

000b9940 <_ZNKSt9type_infoeqERKS_>:
   b9940:	4281      	cmp	r1, r0
   b9942:	b508      	push	{r3, lr}
   b9944:	d00e      	beq.n	b9964 <_ZNKSt9type_infoeqERKS_+0x24>
   b9946:	6840      	ldr	r0, [r0, #4]
   b9948:	7803      	ldrb	r3, [r0, #0]
   b994a:	2b2a      	cmp	r3, #42	; 0x2a
   b994c:	d00c      	beq.n	b9968 <_ZNKSt9type_infoeqERKS_+0x28>
   b994e:	6849      	ldr	r1, [r1, #4]
   b9950:	780b      	ldrb	r3, [r1, #0]
   b9952:	2b2a      	cmp	r3, #42	; 0x2a
   b9954:	bf08      	it	eq
   b9956:	3101      	addeq	r1, #1
   b9958:	f000 fd89 	bl	ba46e <strcmp>
   b995c:	fab0 f080 	clz	r0, r0
   b9960:	0940      	lsrs	r0, r0, #5
   b9962:	bd08      	pop	{r3, pc}
   b9964:	2001      	movs	r0, #1
   b9966:	e7fc      	b.n	b9962 <_ZNKSt9type_infoeqERKS_+0x22>
   b9968:	2000      	movs	r0, #0
   b996a:	e7fa      	b.n	b9962 <_ZNKSt9type_infoeqERKS_+0x22>

000b996c <__aeabi_drsub>:
   b996c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9970:	e002      	b.n	b9978 <__adddf3>
   b9972:	bf00      	nop

000b9974 <__aeabi_dsub>:
   b9974:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9978 <__adddf3>:
   b9978:	b530      	push	{r4, r5, lr}
   b997a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b997e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9982:	ea94 0f05 	teq	r4, r5
   b9986:	bf08      	it	eq
   b9988:	ea90 0f02 	teqeq	r0, r2
   b998c:	bf1f      	itttt	ne
   b998e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9992:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9996:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b999a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b999e:	f000 80e2 	beq.w	b9b66 <__adddf3+0x1ee>
   b99a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b99a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b99aa:	bfb8      	it	lt
   b99ac:	426d      	neglt	r5, r5
   b99ae:	dd0c      	ble.n	b99ca <__adddf3+0x52>
   b99b0:	442c      	add	r4, r5
   b99b2:	ea80 0202 	eor.w	r2, r0, r2
   b99b6:	ea81 0303 	eor.w	r3, r1, r3
   b99ba:	ea82 0000 	eor.w	r0, r2, r0
   b99be:	ea83 0101 	eor.w	r1, r3, r1
   b99c2:	ea80 0202 	eor.w	r2, r0, r2
   b99c6:	ea81 0303 	eor.w	r3, r1, r3
   b99ca:	2d36      	cmp	r5, #54	; 0x36
   b99cc:	bf88      	it	hi
   b99ce:	bd30      	pophi	{r4, r5, pc}
   b99d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b99d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b99d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b99dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b99e0:	d002      	beq.n	b99e8 <__adddf3+0x70>
   b99e2:	4240      	negs	r0, r0
   b99e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b99e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b99ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b99f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b99f4:	d002      	beq.n	b99fc <__adddf3+0x84>
   b99f6:	4252      	negs	r2, r2
   b99f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b99fc:	ea94 0f05 	teq	r4, r5
   b9a00:	f000 80a7 	beq.w	b9b52 <__adddf3+0x1da>
   b9a04:	f1a4 0401 	sub.w	r4, r4, #1
   b9a08:	f1d5 0e20 	rsbs	lr, r5, #32
   b9a0c:	db0d      	blt.n	b9a2a <__adddf3+0xb2>
   b9a0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9a12:	fa22 f205 	lsr.w	r2, r2, r5
   b9a16:	1880      	adds	r0, r0, r2
   b9a18:	f141 0100 	adc.w	r1, r1, #0
   b9a1c:	fa03 f20e 	lsl.w	r2, r3, lr
   b9a20:	1880      	adds	r0, r0, r2
   b9a22:	fa43 f305 	asr.w	r3, r3, r5
   b9a26:	4159      	adcs	r1, r3
   b9a28:	e00e      	b.n	b9a48 <__adddf3+0xd0>
   b9a2a:	f1a5 0520 	sub.w	r5, r5, #32
   b9a2e:	f10e 0e20 	add.w	lr, lr, #32
   b9a32:	2a01      	cmp	r2, #1
   b9a34:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9a38:	bf28      	it	cs
   b9a3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9a3e:	fa43 f305 	asr.w	r3, r3, r5
   b9a42:	18c0      	adds	r0, r0, r3
   b9a44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9a48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9a4c:	d507      	bpl.n	b9a5e <__adddf3+0xe6>
   b9a4e:	f04f 0e00 	mov.w	lr, #0
   b9a52:	f1dc 0c00 	rsbs	ip, ip, #0
   b9a56:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9a5a:	eb6e 0101 	sbc.w	r1, lr, r1
   b9a5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9a62:	d31b      	bcc.n	b9a9c <__adddf3+0x124>
   b9a64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9a68:	d30c      	bcc.n	b9a84 <__adddf3+0x10c>
   b9a6a:	0849      	lsrs	r1, r1, #1
   b9a6c:	ea5f 0030 	movs.w	r0, r0, rrx
   b9a70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9a74:	f104 0401 	add.w	r4, r4, #1
   b9a78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9a7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9a80:	f080 809a 	bcs.w	b9bb8 <__adddf3+0x240>
   b9a84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9a88:	bf08      	it	eq
   b9a8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9a8e:	f150 0000 	adcs.w	r0, r0, #0
   b9a92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9a96:	ea41 0105 	orr.w	r1, r1, r5
   b9a9a:	bd30      	pop	{r4, r5, pc}
   b9a9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9aa0:	4140      	adcs	r0, r0
   b9aa2:	eb41 0101 	adc.w	r1, r1, r1
   b9aa6:	3c01      	subs	r4, #1
   b9aa8:	bf28      	it	cs
   b9aaa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9aae:	d2e9      	bcs.n	b9a84 <__adddf3+0x10c>
   b9ab0:	f091 0f00 	teq	r1, #0
   b9ab4:	bf04      	itt	eq
   b9ab6:	4601      	moveq	r1, r0
   b9ab8:	2000      	moveq	r0, #0
   b9aba:	fab1 f381 	clz	r3, r1
   b9abe:	bf08      	it	eq
   b9ac0:	3320      	addeq	r3, #32
   b9ac2:	f1a3 030b 	sub.w	r3, r3, #11
   b9ac6:	f1b3 0220 	subs.w	r2, r3, #32
   b9aca:	da0c      	bge.n	b9ae6 <__adddf3+0x16e>
   b9acc:	320c      	adds	r2, #12
   b9ace:	dd08      	ble.n	b9ae2 <__adddf3+0x16a>
   b9ad0:	f102 0c14 	add.w	ip, r2, #20
   b9ad4:	f1c2 020c 	rsb	r2, r2, #12
   b9ad8:	fa01 f00c 	lsl.w	r0, r1, ip
   b9adc:	fa21 f102 	lsr.w	r1, r1, r2
   b9ae0:	e00c      	b.n	b9afc <__adddf3+0x184>
   b9ae2:	f102 0214 	add.w	r2, r2, #20
   b9ae6:	bfd8      	it	le
   b9ae8:	f1c2 0c20 	rsble	ip, r2, #32
   b9aec:	fa01 f102 	lsl.w	r1, r1, r2
   b9af0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9af4:	bfdc      	itt	le
   b9af6:	ea41 010c 	orrle.w	r1, r1, ip
   b9afa:	4090      	lslle	r0, r2
   b9afc:	1ae4      	subs	r4, r4, r3
   b9afe:	bfa2      	ittt	ge
   b9b00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9b04:	4329      	orrge	r1, r5
   b9b06:	bd30      	popge	{r4, r5, pc}
   b9b08:	ea6f 0404 	mvn.w	r4, r4
   b9b0c:	3c1f      	subs	r4, #31
   b9b0e:	da1c      	bge.n	b9b4a <__adddf3+0x1d2>
   b9b10:	340c      	adds	r4, #12
   b9b12:	dc0e      	bgt.n	b9b32 <__adddf3+0x1ba>
   b9b14:	f104 0414 	add.w	r4, r4, #20
   b9b18:	f1c4 0220 	rsb	r2, r4, #32
   b9b1c:	fa20 f004 	lsr.w	r0, r0, r4
   b9b20:	fa01 f302 	lsl.w	r3, r1, r2
   b9b24:	ea40 0003 	orr.w	r0, r0, r3
   b9b28:	fa21 f304 	lsr.w	r3, r1, r4
   b9b2c:	ea45 0103 	orr.w	r1, r5, r3
   b9b30:	bd30      	pop	{r4, r5, pc}
   b9b32:	f1c4 040c 	rsb	r4, r4, #12
   b9b36:	f1c4 0220 	rsb	r2, r4, #32
   b9b3a:	fa20 f002 	lsr.w	r0, r0, r2
   b9b3e:	fa01 f304 	lsl.w	r3, r1, r4
   b9b42:	ea40 0003 	orr.w	r0, r0, r3
   b9b46:	4629      	mov	r1, r5
   b9b48:	bd30      	pop	{r4, r5, pc}
   b9b4a:	fa21 f004 	lsr.w	r0, r1, r4
   b9b4e:	4629      	mov	r1, r5
   b9b50:	bd30      	pop	{r4, r5, pc}
   b9b52:	f094 0f00 	teq	r4, #0
   b9b56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9b5a:	bf06      	itte	eq
   b9b5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9b60:	3401      	addeq	r4, #1
   b9b62:	3d01      	subne	r5, #1
   b9b64:	e74e      	b.n	b9a04 <__adddf3+0x8c>
   b9b66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9b6a:	bf18      	it	ne
   b9b6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9b70:	d029      	beq.n	b9bc6 <__adddf3+0x24e>
   b9b72:	ea94 0f05 	teq	r4, r5
   b9b76:	bf08      	it	eq
   b9b78:	ea90 0f02 	teqeq	r0, r2
   b9b7c:	d005      	beq.n	b9b8a <__adddf3+0x212>
   b9b7e:	ea54 0c00 	orrs.w	ip, r4, r0
   b9b82:	bf04      	itt	eq
   b9b84:	4619      	moveq	r1, r3
   b9b86:	4610      	moveq	r0, r2
   b9b88:	bd30      	pop	{r4, r5, pc}
   b9b8a:	ea91 0f03 	teq	r1, r3
   b9b8e:	bf1e      	ittt	ne
   b9b90:	2100      	movne	r1, #0
   b9b92:	2000      	movne	r0, #0
   b9b94:	bd30      	popne	{r4, r5, pc}
   b9b96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9b9a:	d105      	bne.n	b9ba8 <__adddf3+0x230>
   b9b9c:	0040      	lsls	r0, r0, #1
   b9b9e:	4149      	adcs	r1, r1
   b9ba0:	bf28      	it	cs
   b9ba2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9ba6:	bd30      	pop	{r4, r5, pc}
   b9ba8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9bac:	bf3c      	itt	cc
   b9bae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9bb2:	bd30      	popcc	{r4, r5, pc}
   b9bb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9bb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9bbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9bc0:	f04f 0000 	mov.w	r0, #0
   b9bc4:	bd30      	pop	{r4, r5, pc}
   b9bc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9bca:	bf1a      	itte	ne
   b9bcc:	4619      	movne	r1, r3
   b9bce:	4610      	movne	r0, r2
   b9bd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9bd4:	bf1c      	itt	ne
   b9bd6:	460b      	movne	r3, r1
   b9bd8:	4602      	movne	r2, r0
   b9bda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9bde:	bf06      	itte	eq
   b9be0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9be4:	ea91 0f03 	teqeq	r1, r3
   b9be8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9bec:	bd30      	pop	{r4, r5, pc}
   b9bee:	bf00      	nop

000b9bf0 <__aeabi_ui2d>:
   b9bf0:	f090 0f00 	teq	r0, #0
   b9bf4:	bf04      	itt	eq
   b9bf6:	2100      	moveq	r1, #0
   b9bf8:	4770      	bxeq	lr
   b9bfa:	b530      	push	{r4, r5, lr}
   b9bfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9c00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9c04:	f04f 0500 	mov.w	r5, #0
   b9c08:	f04f 0100 	mov.w	r1, #0
   b9c0c:	e750      	b.n	b9ab0 <__adddf3+0x138>
   b9c0e:	bf00      	nop

000b9c10 <__aeabi_i2d>:
   b9c10:	f090 0f00 	teq	r0, #0
   b9c14:	bf04      	itt	eq
   b9c16:	2100      	moveq	r1, #0
   b9c18:	4770      	bxeq	lr
   b9c1a:	b530      	push	{r4, r5, lr}
   b9c1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9c20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9c24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9c28:	bf48      	it	mi
   b9c2a:	4240      	negmi	r0, r0
   b9c2c:	f04f 0100 	mov.w	r1, #0
   b9c30:	e73e      	b.n	b9ab0 <__adddf3+0x138>
   b9c32:	bf00      	nop

000b9c34 <__aeabi_f2d>:
   b9c34:	0042      	lsls	r2, r0, #1
   b9c36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9c3a:	ea4f 0131 	mov.w	r1, r1, rrx
   b9c3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9c42:	bf1f      	itttt	ne
   b9c44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9c48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9c4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9c50:	4770      	bxne	lr
   b9c52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9c56:	bf08      	it	eq
   b9c58:	4770      	bxeq	lr
   b9c5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9c5e:	bf04      	itt	eq
   b9c60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9c64:	4770      	bxeq	lr
   b9c66:	b530      	push	{r4, r5, lr}
   b9c68:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9c70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9c74:	e71c      	b.n	b9ab0 <__adddf3+0x138>
   b9c76:	bf00      	nop

000b9c78 <__aeabi_ul2d>:
   b9c78:	ea50 0201 	orrs.w	r2, r0, r1
   b9c7c:	bf08      	it	eq
   b9c7e:	4770      	bxeq	lr
   b9c80:	b530      	push	{r4, r5, lr}
   b9c82:	f04f 0500 	mov.w	r5, #0
   b9c86:	e00a      	b.n	b9c9e <__aeabi_l2d+0x16>

000b9c88 <__aeabi_l2d>:
   b9c88:	ea50 0201 	orrs.w	r2, r0, r1
   b9c8c:	bf08      	it	eq
   b9c8e:	4770      	bxeq	lr
   b9c90:	b530      	push	{r4, r5, lr}
   b9c92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9c96:	d502      	bpl.n	b9c9e <__aeabi_l2d+0x16>
   b9c98:	4240      	negs	r0, r0
   b9c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9c9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9ca2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9ca6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9caa:	f43f aed8 	beq.w	b9a5e <__adddf3+0xe6>
   b9cae:	f04f 0203 	mov.w	r2, #3
   b9cb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9cb6:	bf18      	it	ne
   b9cb8:	3203      	addne	r2, #3
   b9cba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9cbe:	bf18      	it	ne
   b9cc0:	3203      	addne	r2, #3
   b9cc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9cc6:	f1c2 0320 	rsb	r3, r2, #32
   b9cca:	fa00 fc03 	lsl.w	ip, r0, r3
   b9cce:	fa20 f002 	lsr.w	r0, r0, r2
   b9cd2:	fa01 fe03 	lsl.w	lr, r1, r3
   b9cd6:	ea40 000e 	orr.w	r0, r0, lr
   b9cda:	fa21 f102 	lsr.w	r1, r1, r2
   b9cde:	4414      	add	r4, r2
   b9ce0:	e6bd      	b.n	b9a5e <__adddf3+0xe6>
   b9ce2:	bf00      	nop

000b9ce4 <__aeabi_dmul>:
   b9ce4:	b570      	push	{r4, r5, r6, lr}
   b9ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9cf2:	bf1d      	ittte	ne
   b9cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9cf8:	ea94 0f0c 	teqne	r4, ip
   b9cfc:	ea95 0f0c 	teqne	r5, ip
   b9d00:	f000 f8de 	bleq	b9ec0 <__aeabi_dmul+0x1dc>
   b9d04:	442c      	add	r4, r5
   b9d06:	ea81 0603 	eor.w	r6, r1, r3
   b9d0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9d0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9d12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9d16:	bf18      	it	ne
   b9d18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9d1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9d24:	d038      	beq.n	b9d98 <__aeabi_dmul+0xb4>
   b9d26:	fba0 ce02 	umull	ip, lr, r0, r2
   b9d2a:	f04f 0500 	mov.w	r5, #0
   b9d2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9d32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9d36:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9d3a:	f04f 0600 	mov.w	r6, #0
   b9d3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9d42:	f09c 0f00 	teq	ip, #0
   b9d46:	bf18      	it	ne
   b9d48:	f04e 0e01 	orrne.w	lr, lr, #1
   b9d4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9d50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9d54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9d58:	d204      	bcs.n	b9d64 <__aeabi_dmul+0x80>
   b9d5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9d5e:	416d      	adcs	r5, r5
   b9d60:	eb46 0606 	adc.w	r6, r6, r6
   b9d64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9d68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9d6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9d70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9d74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9d78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9d7c:	bf88      	it	hi
   b9d7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9d82:	d81e      	bhi.n	b9dc2 <__aeabi_dmul+0xde>
   b9d84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9d88:	bf08      	it	eq
   b9d8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9d8e:	f150 0000 	adcs.w	r0, r0, #0
   b9d92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9d96:	bd70      	pop	{r4, r5, r6, pc}
   b9d98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9d9c:	ea46 0101 	orr.w	r1, r6, r1
   b9da0:	ea40 0002 	orr.w	r0, r0, r2
   b9da4:	ea81 0103 	eor.w	r1, r1, r3
   b9da8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9dac:	bfc2      	ittt	gt
   b9dae:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9db2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9db6:	bd70      	popgt	{r4, r5, r6, pc}
   b9db8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9dbc:	f04f 0e00 	mov.w	lr, #0
   b9dc0:	3c01      	subs	r4, #1
   b9dc2:	f300 80ab 	bgt.w	b9f1c <__aeabi_dmul+0x238>
   b9dc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9dca:	bfde      	ittt	le
   b9dcc:	2000      	movle	r0, #0
   b9dce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9dd2:	bd70      	pople	{r4, r5, r6, pc}
   b9dd4:	f1c4 0400 	rsb	r4, r4, #0
   b9dd8:	3c20      	subs	r4, #32
   b9dda:	da35      	bge.n	b9e48 <__aeabi_dmul+0x164>
   b9ddc:	340c      	adds	r4, #12
   b9dde:	dc1b      	bgt.n	b9e18 <__aeabi_dmul+0x134>
   b9de0:	f104 0414 	add.w	r4, r4, #20
   b9de4:	f1c4 0520 	rsb	r5, r4, #32
   b9de8:	fa00 f305 	lsl.w	r3, r0, r5
   b9dec:	fa20 f004 	lsr.w	r0, r0, r4
   b9df0:	fa01 f205 	lsl.w	r2, r1, r5
   b9df4:	ea40 0002 	orr.w	r0, r0, r2
   b9df8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9dfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9e00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9e04:	fa21 f604 	lsr.w	r6, r1, r4
   b9e08:	eb42 0106 	adc.w	r1, r2, r6
   b9e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9e10:	bf08      	it	eq
   b9e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9e16:	bd70      	pop	{r4, r5, r6, pc}
   b9e18:	f1c4 040c 	rsb	r4, r4, #12
   b9e1c:	f1c4 0520 	rsb	r5, r4, #32
   b9e20:	fa00 f304 	lsl.w	r3, r0, r4
   b9e24:	fa20 f005 	lsr.w	r0, r0, r5
   b9e28:	fa01 f204 	lsl.w	r2, r1, r4
   b9e2c:	ea40 0002 	orr.w	r0, r0, r2
   b9e30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9e38:	f141 0100 	adc.w	r1, r1, #0
   b9e3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9e40:	bf08      	it	eq
   b9e42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9e46:	bd70      	pop	{r4, r5, r6, pc}
   b9e48:	f1c4 0520 	rsb	r5, r4, #32
   b9e4c:	fa00 f205 	lsl.w	r2, r0, r5
   b9e50:	ea4e 0e02 	orr.w	lr, lr, r2
   b9e54:	fa20 f304 	lsr.w	r3, r0, r4
   b9e58:	fa01 f205 	lsl.w	r2, r1, r5
   b9e5c:	ea43 0302 	orr.w	r3, r3, r2
   b9e60:	fa21 f004 	lsr.w	r0, r1, r4
   b9e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e68:	fa21 f204 	lsr.w	r2, r1, r4
   b9e6c:	ea20 0002 	bic.w	r0, r0, r2
   b9e70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9e74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9e78:	bf08      	it	eq
   b9e7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9e7e:	bd70      	pop	{r4, r5, r6, pc}
   b9e80:	f094 0f00 	teq	r4, #0
   b9e84:	d10f      	bne.n	b9ea6 <__aeabi_dmul+0x1c2>
   b9e86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9e8a:	0040      	lsls	r0, r0, #1
   b9e8c:	eb41 0101 	adc.w	r1, r1, r1
   b9e90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9e94:	bf08      	it	eq
   b9e96:	3c01      	subeq	r4, #1
   b9e98:	d0f7      	beq.n	b9e8a <__aeabi_dmul+0x1a6>
   b9e9a:	ea41 0106 	orr.w	r1, r1, r6
   b9e9e:	f095 0f00 	teq	r5, #0
   b9ea2:	bf18      	it	ne
   b9ea4:	4770      	bxne	lr
   b9ea6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9eaa:	0052      	lsls	r2, r2, #1
   b9eac:	eb43 0303 	adc.w	r3, r3, r3
   b9eb0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9eb4:	bf08      	it	eq
   b9eb6:	3d01      	subeq	r5, #1
   b9eb8:	d0f7      	beq.n	b9eaa <__aeabi_dmul+0x1c6>
   b9eba:	ea43 0306 	orr.w	r3, r3, r6
   b9ebe:	4770      	bx	lr
   b9ec0:	ea94 0f0c 	teq	r4, ip
   b9ec4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9ec8:	bf18      	it	ne
   b9eca:	ea95 0f0c 	teqne	r5, ip
   b9ece:	d00c      	beq.n	b9eea <__aeabi_dmul+0x206>
   b9ed0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9ed4:	bf18      	it	ne
   b9ed6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9eda:	d1d1      	bne.n	b9e80 <__aeabi_dmul+0x19c>
   b9edc:	ea81 0103 	eor.w	r1, r1, r3
   b9ee0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9ee4:	f04f 0000 	mov.w	r0, #0
   b9ee8:	bd70      	pop	{r4, r5, r6, pc}
   b9eea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9eee:	bf06      	itte	eq
   b9ef0:	4610      	moveq	r0, r2
   b9ef2:	4619      	moveq	r1, r3
   b9ef4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9ef8:	d019      	beq.n	b9f2e <__aeabi_dmul+0x24a>
   b9efa:	ea94 0f0c 	teq	r4, ip
   b9efe:	d102      	bne.n	b9f06 <__aeabi_dmul+0x222>
   b9f00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9f04:	d113      	bne.n	b9f2e <__aeabi_dmul+0x24a>
   b9f06:	ea95 0f0c 	teq	r5, ip
   b9f0a:	d105      	bne.n	b9f18 <__aeabi_dmul+0x234>
   b9f0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9f10:	bf1c      	itt	ne
   b9f12:	4610      	movne	r0, r2
   b9f14:	4619      	movne	r1, r3
   b9f16:	d10a      	bne.n	b9f2e <__aeabi_dmul+0x24a>
   b9f18:	ea81 0103 	eor.w	r1, r1, r3
   b9f1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9f20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9f24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9f28:	f04f 0000 	mov.w	r0, #0
   b9f2c:	bd70      	pop	{r4, r5, r6, pc}
   b9f2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9f32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9f36:	bd70      	pop	{r4, r5, r6, pc}

000b9f38 <__aeabi_ddiv>:
   b9f38:	b570      	push	{r4, r5, r6, lr}
   b9f3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9f3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9f42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9f46:	bf1d      	ittte	ne
   b9f48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9f4c:	ea94 0f0c 	teqne	r4, ip
   b9f50:	ea95 0f0c 	teqne	r5, ip
   b9f54:	f000 f8a7 	bleq	ba0a6 <__aeabi_ddiv+0x16e>
   b9f58:	eba4 0405 	sub.w	r4, r4, r5
   b9f5c:	ea81 0e03 	eor.w	lr, r1, r3
   b9f60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9f64:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9f68:	f000 8088 	beq.w	ba07c <__aeabi_ddiv+0x144>
   b9f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9f70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9f74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9f78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9f7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9f80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9f84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9f88:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9f8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9f90:	429d      	cmp	r5, r3
   b9f92:	bf08      	it	eq
   b9f94:	4296      	cmpeq	r6, r2
   b9f96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9f9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9f9e:	d202      	bcs.n	b9fa6 <__aeabi_ddiv+0x6e>
   b9fa0:	085b      	lsrs	r3, r3, #1
   b9fa2:	ea4f 0232 	mov.w	r2, r2, rrx
   b9fa6:	1ab6      	subs	r6, r6, r2
   b9fa8:	eb65 0503 	sbc.w	r5, r5, r3
   b9fac:	085b      	lsrs	r3, r3, #1
   b9fae:	ea4f 0232 	mov.w	r2, r2, rrx
   b9fb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9fb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9fba:	ebb6 0e02 	subs.w	lr, r6, r2
   b9fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9fc2:	bf22      	ittt	cs
   b9fc4:	1ab6      	subcs	r6, r6, r2
   b9fc6:	4675      	movcs	r5, lr
   b9fc8:	ea40 000c 	orrcs.w	r0, r0, ip
   b9fcc:	085b      	lsrs	r3, r3, #1
   b9fce:	ea4f 0232 	mov.w	r2, r2, rrx
   b9fd2:	ebb6 0e02 	subs.w	lr, r6, r2
   b9fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9fda:	bf22      	ittt	cs
   b9fdc:	1ab6      	subcs	r6, r6, r2
   b9fde:	4675      	movcs	r5, lr
   b9fe0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9fe4:	085b      	lsrs	r3, r3, #1
   b9fe6:	ea4f 0232 	mov.w	r2, r2, rrx
   b9fea:	ebb6 0e02 	subs.w	lr, r6, r2
   b9fee:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9ff2:	bf22      	ittt	cs
   b9ff4:	1ab6      	subcs	r6, r6, r2
   b9ff6:	4675      	movcs	r5, lr
   b9ff8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9ffc:	085b      	lsrs	r3, r3, #1
   b9ffe:	ea4f 0232 	mov.w	r2, r2, rrx
   ba002:	ebb6 0e02 	subs.w	lr, r6, r2
   ba006:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba00a:	bf22      	ittt	cs
   ba00c:	1ab6      	subcs	r6, r6, r2
   ba00e:	4675      	movcs	r5, lr
   ba010:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba014:	ea55 0e06 	orrs.w	lr, r5, r6
   ba018:	d018      	beq.n	ba04c <__aeabi_ddiv+0x114>
   ba01a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba01e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba022:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba026:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba02a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba02e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba032:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba036:	d1c0      	bne.n	b9fba <__aeabi_ddiv+0x82>
   ba038:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba03c:	d10b      	bne.n	ba056 <__aeabi_ddiv+0x11e>
   ba03e:	ea41 0100 	orr.w	r1, r1, r0
   ba042:	f04f 0000 	mov.w	r0, #0
   ba046:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba04a:	e7b6      	b.n	b9fba <__aeabi_ddiv+0x82>
   ba04c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba050:	bf04      	itt	eq
   ba052:	4301      	orreq	r1, r0
   ba054:	2000      	moveq	r0, #0
   ba056:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba05a:	bf88      	it	hi
   ba05c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba060:	f63f aeaf 	bhi.w	b9dc2 <__aeabi_dmul+0xde>
   ba064:	ebb5 0c03 	subs.w	ip, r5, r3
   ba068:	bf04      	itt	eq
   ba06a:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba06e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba072:	f150 0000 	adcs.w	r0, r0, #0
   ba076:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba07a:	bd70      	pop	{r4, r5, r6, pc}
   ba07c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba080:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba084:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba088:	bfc2      	ittt	gt
   ba08a:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba08e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba092:	bd70      	popgt	{r4, r5, r6, pc}
   ba094:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba098:	f04f 0e00 	mov.w	lr, #0
   ba09c:	3c01      	subs	r4, #1
   ba09e:	e690      	b.n	b9dc2 <__aeabi_dmul+0xde>
   ba0a0:	ea45 0e06 	orr.w	lr, r5, r6
   ba0a4:	e68d      	b.n	b9dc2 <__aeabi_dmul+0xde>
   ba0a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba0aa:	ea94 0f0c 	teq	r4, ip
   ba0ae:	bf08      	it	eq
   ba0b0:	ea95 0f0c 	teqeq	r5, ip
   ba0b4:	f43f af3b 	beq.w	b9f2e <__aeabi_dmul+0x24a>
   ba0b8:	ea94 0f0c 	teq	r4, ip
   ba0bc:	d10a      	bne.n	ba0d4 <__aeabi_ddiv+0x19c>
   ba0be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba0c2:	f47f af34 	bne.w	b9f2e <__aeabi_dmul+0x24a>
   ba0c6:	ea95 0f0c 	teq	r5, ip
   ba0ca:	f47f af25 	bne.w	b9f18 <__aeabi_dmul+0x234>
   ba0ce:	4610      	mov	r0, r2
   ba0d0:	4619      	mov	r1, r3
   ba0d2:	e72c      	b.n	b9f2e <__aeabi_dmul+0x24a>
   ba0d4:	ea95 0f0c 	teq	r5, ip
   ba0d8:	d106      	bne.n	ba0e8 <__aeabi_ddiv+0x1b0>
   ba0da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba0de:	f43f aefd 	beq.w	b9edc <__aeabi_dmul+0x1f8>
   ba0e2:	4610      	mov	r0, r2
   ba0e4:	4619      	mov	r1, r3
   ba0e6:	e722      	b.n	b9f2e <__aeabi_dmul+0x24a>
   ba0e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba0ec:	bf18      	it	ne
   ba0ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba0f2:	f47f aec5 	bne.w	b9e80 <__aeabi_dmul+0x19c>
   ba0f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba0fa:	f47f af0d 	bne.w	b9f18 <__aeabi_dmul+0x234>
   ba0fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba102:	f47f aeeb 	bne.w	b9edc <__aeabi_dmul+0x1f8>
   ba106:	e712      	b.n	b9f2e <__aeabi_dmul+0x24a>

000ba108 <__gedf2>:
   ba108:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba10c:	e006      	b.n	ba11c <__cmpdf2+0x4>
   ba10e:	bf00      	nop

000ba110 <__ledf2>:
   ba110:	f04f 0c01 	mov.w	ip, #1
   ba114:	e002      	b.n	ba11c <__cmpdf2+0x4>
   ba116:	bf00      	nop

000ba118 <__cmpdf2>:
   ba118:	f04f 0c01 	mov.w	ip, #1
   ba11c:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba120:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba124:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba128:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba12c:	bf18      	it	ne
   ba12e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba132:	d01b      	beq.n	ba16c <__cmpdf2+0x54>
   ba134:	b001      	add	sp, #4
   ba136:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba13a:	bf0c      	ite	eq
   ba13c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba140:	ea91 0f03 	teqne	r1, r3
   ba144:	bf02      	ittt	eq
   ba146:	ea90 0f02 	teqeq	r0, r2
   ba14a:	2000      	moveq	r0, #0
   ba14c:	4770      	bxeq	lr
   ba14e:	f110 0f00 	cmn.w	r0, #0
   ba152:	ea91 0f03 	teq	r1, r3
   ba156:	bf58      	it	pl
   ba158:	4299      	cmppl	r1, r3
   ba15a:	bf08      	it	eq
   ba15c:	4290      	cmpeq	r0, r2
   ba15e:	bf2c      	ite	cs
   ba160:	17d8      	asrcs	r0, r3, #31
   ba162:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba166:	f040 0001 	orr.w	r0, r0, #1
   ba16a:	4770      	bx	lr
   ba16c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba170:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba174:	d102      	bne.n	ba17c <__cmpdf2+0x64>
   ba176:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba17a:	d107      	bne.n	ba18c <__cmpdf2+0x74>
   ba17c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba184:	d1d6      	bne.n	ba134 <__cmpdf2+0x1c>
   ba186:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba18a:	d0d3      	beq.n	ba134 <__cmpdf2+0x1c>
   ba18c:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba190:	4770      	bx	lr
   ba192:	bf00      	nop

000ba194 <__aeabi_cdrcmple>:
   ba194:	4684      	mov	ip, r0
   ba196:	4610      	mov	r0, r2
   ba198:	4662      	mov	r2, ip
   ba19a:	468c      	mov	ip, r1
   ba19c:	4619      	mov	r1, r3
   ba19e:	4663      	mov	r3, ip
   ba1a0:	e000      	b.n	ba1a4 <__aeabi_cdcmpeq>
   ba1a2:	bf00      	nop

000ba1a4 <__aeabi_cdcmpeq>:
   ba1a4:	b501      	push	{r0, lr}
   ba1a6:	f7ff ffb7 	bl	ba118 <__cmpdf2>
   ba1aa:	2800      	cmp	r0, #0
   ba1ac:	bf48      	it	mi
   ba1ae:	f110 0f00 	cmnmi.w	r0, #0
   ba1b2:	bd01      	pop	{r0, pc}

000ba1b4 <__aeabi_dcmpeq>:
   ba1b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba1b8:	f7ff fff4 	bl	ba1a4 <__aeabi_cdcmpeq>
   ba1bc:	bf0c      	ite	eq
   ba1be:	2001      	moveq	r0, #1
   ba1c0:	2000      	movne	r0, #0
   ba1c2:	f85d fb08 	ldr.w	pc, [sp], #8
   ba1c6:	bf00      	nop

000ba1c8 <__aeabi_dcmplt>:
   ba1c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba1cc:	f7ff ffea 	bl	ba1a4 <__aeabi_cdcmpeq>
   ba1d0:	bf34      	ite	cc
   ba1d2:	2001      	movcc	r0, #1
   ba1d4:	2000      	movcs	r0, #0
   ba1d6:	f85d fb08 	ldr.w	pc, [sp], #8
   ba1da:	bf00      	nop

000ba1dc <__aeabi_dcmple>:
   ba1dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba1e0:	f7ff ffe0 	bl	ba1a4 <__aeabi_cdcmpeq>
   ba1e4:	bf94      	ite	ls
   ba1e6:	2001      	movls	r0, #1
   ba1e8:	2000      	movhi	r0, #0
   ba1ea:	f85d fb08 	ldr.w	pc, [sp], #8
   ba1ee:	bf00      	nop

000ba1f0 <__aeabi_dcmpge>:
   ba1f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba1f4:	f7ff ffce 	bl	ba194 <__aeabi_cdrcmple>
   ba1f8:	bf94      	ite	ls
   ba1fa:	2001      	movls	r0, #1
   ba1fc:	2000      	movhi	r0, #0
   ba1fe:	f85d fb08 	ldr.w	pc, [sp], #8
   ba202:	bf00      	nop

000ba204 <__aeabi_dcmpgt>:
   ba204:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba208:	f7ff ffc4 	bl	ba194 <__aeabi_cdrcmple>
   ba20c:	bf34      	ite	cc
   ba20e:	2001      	movcc	r0, #1
   ba210:	2000      	movcs	r0, #0
   ba212:	f85d fb08 	ldr.w	pc, [sp], #8
   ba216:	bf00      	nop

000ba218 <__aeabi_d2uiz>:
   ba218:	004a      	lsls	r2, r1, #1
   ba21a:	d211      	bcs.n	ba240 <__aeabi_d2uiz+0x28>
   ba21c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba220:	d211      	bcs.n	ba246 <__aeabi_d2uiz+0x2e>
   ba222:	d50d      	bpl.n	ba240 <__aeabi_d2uiz+0x28>
   ba224:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba228:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba22c:	d40e      	bmi.n	ba24c <__aeabi_d2uiz+0x34>
   ba22e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba236:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba23a:	fa23 f002 	lsr.w	r0, r3, r2
   ba23e:	4770      	bx	lr
   ba240:	f04f 0000 	mov.w	r0, #0
   ba244:	4770      	bx	lr
   ba246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba24a:	d102      	bne.n	ba252 <__aeabi_d2uiz+0x3a>
   ba24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba250:	4770      	bx	lr
   ba252:	f04f 0000 	mov.w	r0, #0
   ba256:	4770      	bx	lr

000ba258 <__aeabi_d2f>:
   ba258:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba25c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   ba260:	bf24      	itt	cs
   ba262:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   ba266:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   ba26a:	d90d      	bls.n	ba288 <__aeabi_d2f+0x30>
   ba26c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   ba270:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   ba274:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   ba278:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   ba27c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   ba280:	bf08      	it	eq
   ba282:	f020 0001 	biceq.w	r0, r0, #1
   ba286:	4770      	bx	lr
   ba288:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   ba28c:	d121      	bne.n	ba2d2 <__aeabi_d2f+0x7a>
   ba28e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   ba292:	bfbc      	itt	lt
   ba294:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   ba298:	4770      	bxlt	lr
   ba29a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba29e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   ba2a2:	f1c2 0218 	rsb	r2, r2, #24
   ba2a6:	f1c2 0c20 	rsb	ip, r2, #32
   ba2aa:	fa10 f30c 	lsls.w	r3, r0, ip
   ba2ae:	fa20 f002 	lsr.w	r0, r0, r2
   ba2b2:	bf18      	it	ne
   ba2b4:	f040 0001 	orrne.w	r0, r0, #1
   ba2b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba2bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   ba2c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   ba2c4:	ea40 000c 	orr.w	r0, r0, ip
   ba2c8:	fa23 f302 	lsr.w	r3, r3, r2
   ba2cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   ba2d0:	e7cc      	b.n	ba26c <__aeabi_d2f+0x14>
   ba2d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   ba2d6:	d107      	bne.n	ba2e8 <__aeabi_d2f+0x90>
   ba2d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   ba2dc:	bf1e      	ittt	ne
   ba2de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   ba2e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   ba2e6:	4770      	bxne	lr
   ba2e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   ba2ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   ba2f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ba2f4:	4770      	bx	lr
   ba2f6:	bf00      	nop

000ba2f8 <__aeabi_d2ulz>:
   ba2f8:	b5d0      	push	{r4, r6, r7, lr}
   ba2fa:	4b0c      	ldr	r3, [pc, #48]	; (ba32c <__aeabi_d2ulz+0x34>)
   ba2fc:	2200      	movs	r2, #0
   ba2fe:	4606      	mov	r6, r0
   ba300:	460f      	mov	r7, r1
   ba302:	f7ff fcef 	bl	b9ce4 <__aeabi_dmul>
   ba306:	f7ff ff87 	bl	ba218 <__aeabi_d2uiz>
   ba30a:	4604      	mov	r4, r0
   ba30c:	f7ff fc70 	bl	b9bf0 <__aeabi_ui2d>
   ba310:	4b07      	ldr	r3, [pc, #28]	; (ba330 <__aeabi_d2ulz+0x38>)
   ba312:	2200      	movs	r2, #0
   ba314:	f7ff fce6 	bl	b9ce4 <__aeabi_dmul>
   ba318:	4602      	mov	r2, r0
   ba31a:	460b      	mov	r3, r1
   ba31c:	4630      	mov	r0, r6
   ba31e:	4639      	mov	r1, r7
   ba320:	f7ff fb28 	bl	b9974 <__aeabi_dsub>
   ba324:	f7ff ff78 	bl	ba218 <__aeabi_d2uiz>
   ba328:	4621      	mov	r1, r4
   ba32a:	bdd0      	pop	{r4, r6, r7, pc}
   ba32c:	3df00000 	.word	0x3df00000
   ba330:	41f00000 	.word	0x41f00000

000ba334 <atexit>:
   ba334:	2300      	movs	r3, #0
   ba336:	4601      	mov	r1, r0
   ba338:	461a      	mov	r2, r3
   ba33a:	4618      	mov	r0, r3
   ba33c:	f001 b822 	b.w	bb384 <__register_exitproc>

000ba340 <atof>:
   ba340:	2100      	movs	r1, #0
   ba342:	f000 bf2b 	b.w	bb19c <strtod>

000ba346 <atol>:
   ba346:	220a      	movs	r2, #10
   ba348:	2100      	movs	r1, #0
   ba34a:	f001 b811 	b.w	bb370 <strtol>

000ba34e <memcpy>:
   ba34e:	440a      	add	r2, r1
   ba350:	4291      	cmp	r1, r2
   ba352:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba356:	d100      	bne.n	ba35a <memcpy+0xc>
   ba358:	4770      	bx	lr
   ba35a:	b510      	push	{r4, lr}
   ba35c:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba360:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba364:	4291      	cmp	r1, r2
   ba366:	d1f9      	bne.n	ba35c <memcpy+0xe>
   ba368:	bd10      	pop	{r4, pc}

000ba36a <memset>:
   ba36a:	4402      	add	r2, r0
   ba36c:	4603      	mov	r3, r0
   ba36e:	4293      	cmp	r3, r2
   ba370:	d100      	bne.n	ba374 <memset+0xa>
   ba372:	4770      	bx	lr
   ba374:	f803 1b01 	strb.w	r1, [r3], #1
   ba378:	e7f9      	b.n	ba36e <memset+0x4>
	...

000ba37c <srand>:
   ba37c:	b538      	push	{r3, r4, r5, lr}
   ba37e:	4b10      	ldr	r3, [pc, #64]	; (ba3c0 <srand+0x44>)
   ba380:	681d      	ldr	r5, [r3, #0]
   ba382:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba384:	4604      	mov	r4, r0
   ba386:	b9b3      	cbnz	r3, ba3b6 <srand+0x3a>
   ba388:	2018      	movs	r0, #24
   ba38a:	f7fd f8eb 	bl	b7564 <malloc>
   ba38e:	4602      	mov	r2, r0
   ba390:	63a8      	str	r0, [r5, #56]	; 0x38
   ba392:	b920      	cbnz	r0, ba39e <srand+0x22>
   ba394:	4b0b      	ldr	r3, [pc, #44]	; (ba3c4 <srand+0x48>)
   ba396:	480c      	ldr	r0, [pc, #48]	; (ba3c8 <srand+0x4c>)
   ba398:	2142      	movs	r1, #66	; 0x42
   ba39a:	f7fd f92b 	bl	b75f4 <__assert_func>
   ba39e:	490b      	ldr	r1, [pc, #44]	; (ba3cc <srand+0x50>)
   ba3a0:	4b0b      	ldr	r3, [pc, #44]	; (ba3d0 <srand+0x54>)
   ba3a2:	e9c0 1300 	strd	r1, r3, [r0]
   ba3a6:	4b0b      	ldr	r3, [pc, #44]	; (ba3d4 <srand+0x58>)
   ba3a8:	6083      	str	r3, [r0, #8]
   ba3aa:	230b      	movs	r3, #11
   ba3ac:	8183      	strh	r3, [r0, #12]
   ba3ae:	2100      	movs	r1, #0
   ba3b0:	2001      	movs	r0, #1
   ba3b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba3b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba3b8:	2200      	movs	r2, #0
   ba3ba:	611c      	str	r4, [r3, #16]
   ba3bc:	615a      	str	r2, [r3, #20]
   ba3be:	bd38      	pop	{r3, r4, r5, pc}
   ba3c0:	2003dfc0 	.word	0x2003dfc0
   ba3c4:	000bd1ed 	.word	0x000bd1ed
   ba3c8:	000bd204 	.word	0x000bd204
   ba3cc:	abcd330e 	.word	0xabcd330e
   ba3d0:	e66d1234 	.word	0xe66d1234
   ba3d4:	0005deec 	.word	0x0005deec

000ba3d8 <rand>:
   ba3d8:	4b16      	ldr	r3, [pc, #88]	; (ba434 <rand+0x5c>)
   ba3da:	b510      	push	{r4, lr}
   ba3dc:	681c      	ldr	r4, [r3, #0]
   ba3de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba3e0:	b9b3      	cbnz	r3, ba410 <rand+0x38>
   ba3e2:	2018      	movs	r0, #24
   ba3e4:	f7fd f8be 	bl	b7564 <malloc>
   ba3e8:	63a0      	str	r0, [r4, #56]	; 0x38
   ba3ea:	b928      	cbnz	r0, ba3f8 <rand+0x20>
   ba3ec:	4602      	mov	r2, r0
   ba3ee:	4b12      	ldr	r3, [pc, #72]	; (ba438 <rand+0x60>)
   ba3f0:	4812      	ldr	r0, [pc, #72]	; (ba43c <rand+0x64>)
   ba3f2:	214e      	movs	r1, #78	; 0x4e
   ba3f4:	f7fd f8fe 	bl	b75f4 <__assert_func>
   ba3f8:	4a11      	ldr	r2, [pc, #68]	; (ba440 <rand+0x68>)
   ba3fa:	4b12      	ldr	r3, [pc, #72]	; (ba444 <rand+0x6c>)
   ba3fc:	e9c0 2300 	strd	r2, r3, [r0]
   ba400:	4b11      	ldr	r3, [pc, #68]	; (ba448 <rand+0x70>)
   ba402:	6083      	str	r3, [r0, #8]
   ba404:	230b      	movs	r3, #11
   ba406:	8183      	strh	r3, [r0, #12]
   ba408:	2201      	movs	r2, #1
   ba40a:	2300      	movs	r3, #0
   ba40c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   ba410:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   ba412:	4a0e      	ldr	r2, [pc, #56]	; (ba44c <rand+0x74>)
   ba414:	6920      	ldr	r0, [r4, #16]
   ba416:	6963      	ldr	r3, [r4, #20]
   ba418:	490d      	ldr	r1, [pc, #52]	; (ba450 <rand+0x78>)
   ba41a:	4342      	muls	r2, r0
   ba41c:	fb01 2203 	mla	r2, r1, r3, r2
   ba420:	fba0 0101 	umull	r0, r1, r0, r1
   ba424:	1c43      	adds	r3, r0, #1
   ba426:	eb42 0001 	adc.w	r0, r2, r1
   ba42a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   ba42e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   ba432:	bd10      	pop	{r4, pc}
   ba434:	2003dfc0 	.word	0x2003dfc0
   ba438:	000bd1ed 	.word	0x000bd1ed
   ba43c:	000bd204 	.word	0x000bd204
   ba440:	abcd330e 	.word	0xabcd330e
   ba444:	e66d1234 	.word	0xe66d1234
   ba448:	0005deec 	.word	0x0005deec
   ba44c:	5851f42d 	.word	0x5851f42d
   ba450:	4c957f2d 	.word	0x4c957f2d

000ba454 <strchr>:
   ba454:	b2c9      	uxtb	r1, r1
   ba456:	4603      	mov	r3, r0
   ba458:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba45c:	b11a      	cbz	r2, ba466 <strchr+0x12>
   ba45e:	428a      	cmp	r2, r1
   ba460:	d1f9      	bne.n	ba456 <strchr+0x2>
   ba462:	4618      	mov	r0, r3
   ba464:	4770      	bx	lr
   ba466:	2900      	cmp	r1, #0
   ba468:	bf18      	it	ne
   ba46a:	2300      	movne	r3, #0
   ba46c:	e7f9      	b.n	ba462 <strchr+0xe>

000ba46e <strcmp>:
   ba46e:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba472:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba476:	2a01      	cmp	r2, #1
   ba478:	bf28      	it	cs
   ba47a:	429a      	cmpcs	r2, r3
   ba47c:	d0f7      	beq.n	ba46e <strcmp>
   ba47e:	1ad0      	subs	r0, r2, r3
   ba480:	4770      	bx	lr

000ba482 <strcpy>:
   ba482:	4603      	mov	r3, r0
   ba484:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba488:	f803 2b01 	strb.w	r2, [r3], #1
   ba48c:	2a00      	cmp	r2, #0
   ba48e:	d1f9      	bne.n	ba484 <strcpy+0x2>
   ba490:	4770      	bx	lr
	...

000ba494 <strdup>:
   ba494:	4b02      	ldr	r3, [pc, #8]	; (ba4a0 <strdup+0xc>)
   ba496:	4601      	mov	r1, r0
   ba498:	6818      	ldr	r0, [r3, #0]
   ba49a:	f000 b803 	b.w	ba4a4 <_strdup_r>
   ba49e:	bf00      	nop
   ba4a0:	2003dfc0 	.word	0x2003dfc0

000ba4a4 <_strdup_r>:
   ba4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba4a6:	4604      	mov	r4, r0
   ba4a8:	4608      	mov	r0, r1
   ba4aa:	460d      	mov	r5, r1
   ba4ac:	f000 f80f 	bl	ba4ce <strlen>
   ba4b0:	1c42      	adds	r2, r0, #1
   ba4b2:	4611      	mov	r1, r2
   ba4b4:	4620      	mov	r0, r4
   ba4b6:	9201      	str	r2, [sp, #4]
   ba4b8:	f7fd f88c 	bl	b75d4 <_malloc_r>
   ba4bc:	4604      	mov	r4, r0
   ba4be:	b118      	cbz	r0, ba4c8 <_strdup_r+0x24>
   ba4c0:	9a01      	ldr	r2, [sp, #4]
   ba4c2:	4629      	mov	r1, r5
   ba4c4:	f7ff ff43 	bl	ba34e <memcpy>
   ba4c8:	4620      	mov	r0, r4
   ba4ca:	b003      	add	sp, #12
   ba4cc:	bd30      	pop	{r4, r5, pc}

000ba4ce <strlen>:
   ba4ce:	4603      	mov	r3, r0
   ba4d0:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba4d4:	2a00      	cmp	r2, #0
   ba4d6:	d1fb      	bne.n	ba4d0 <strlen+0x2>
   ba4d8:	1a18      	subs	r0, r3, r0
   ba4da:	3801      	subs	r0, #1
   ba4dc:	4770      	bx	lr

000ba4de <strncmp>:
   ba4de:	b510      	push	{r4, lr}
   ba4e0:	b17a      	cbz	r2, ba502 <strncmp+0x24>
   ba4e2:	4603      	mov	r3, r0
   ba4e4:	3901      	subs	r1, #1
   ba4e6:	1884      	adds	r4, r0, r2
   ba4e8:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba4ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba4f0:	4290      	cmp	r0, r2
   ba4f2:	d101      	bne.n	ba4f8 <strncmp+0x1a>
   ba4f4:	42a3      	cmp	r3, r4
   ba4f6:	d101      	bne.n	ba4fc <strncmp+0x1e>
   ba4f8:	1a80      	subs	r0, r0, r2
   ba4fa:	bd10      	pop	{r4, pc}
   ba4fc:	2800      	cmp	r0, #0
   ba4fe:	d1f3      	bne.n	ba4e8 <strncmp+0xa>
   ba500:	e7fa      	b.n	ba4f8 <strncmp+0x1a>
   ba502:	4610      	mov	r0, r2
   ba504:	e7f9      	b.n	ba4fa <strncmp+0x1c>

000ba506 <strncpy>:
   ba506:	b510      	push	{r4, lr}
   ba508:	3901      	subs	r1, #1
   ba50a:	4603      	mov	r3, r0
   ba50c:	b132      	cbz	r2, ba51c <strncpy+0x16>
   ba50e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba512:	f803 4b01 	strb.w	r4, [r3], #1
   ba516:	3a01      	subs	r2, #1
   ba518:	2c00      	cmp	r4, #0
   ba51a:	d1f7      	bne.n	ba50c <strncpy+0x6>
   ba51c:	441a      	add	r2, r3
   ba51e:	2100      	movs	r1, #0
   ba520:	4293      	cmp	r3, r2
   ba522:	d100      	bne.n	ba526 <strncpy+0x20>
   ba524:	bd10      	pop	{r4, pc}
   ba526:	f803 1b01 	strb.w	r1, [r3], #1
   ba52a:	e7f9      	b.n	ba520 <strncpy+0x1a>

000ba52c <strstr>:
   ba52c:	780a      	ldrb	r2, [r1, #0]
   ba52e:	b570      	push	{r4, r5, r6, lr}
   ba530:	b96a      	cbnz	r2, ba54e <strstr+0x22>
   ba532:	bd70      	pop	{r4, r5, r6, pc}
   ba534:	429a      	cmp	r2, r3
   ba536:	d109      	bne.n	ba54c <strstr+0x20>
   ba538:	460c      	mov	r4, r1
   ba53a:	4605      	mov	r5, r0
   ba53c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba540:	2b00      	cmp	r3, #0
   ba542:	d0f6      	beq.n	ba532 <strstr+0x6>
   ba544:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba548:	429e      	cmp	r6, r3
   ba54a:	d0f7      	beq.n	ba53c <strstr+0x10>
   ba54c:	3001      	adds	r0, #1
   ba54e:	7803      	ldrb	r3, [r0, #0]
   ba550:	2b00      	cmp	r3, #0
   ba552:	d1ef      	bne.n	ba534 <strstr+0x8>
   ba554:	4618      	mov	r0, r3
   ba556:	e7ec      	b.n	ba532 <strstr+0x6>

000ba558 <sulp>:
   ba558:	b570      	push	{r4, r5, r6, lr}
   ba55a:	4604      	mov	r4, r0
   ba55c:	460d      	mov	r5, r1
   ba55e:	ec45 4b10 	vmov	d0, r4, r5
   ba562:	4616      	mov	r6, r2
   ba564:	f001 fe68 	bl	bc238 <__ulp>
   ba568:	ec51 0b10 	vmov	r0, r1, d0
   ba56c:	b17e      	cbz	r6, ba58e <sulp+0x36>
   ba56e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba576:	2b00      	cmp	r3, #0
   ba578:	dd09      	ble.n	ba58e <sulp+0x36>
   ba57a:	051b      	lsls	r3, r3, #20
   ba57c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba580:	2400      	movs	r4, #0
   ba582:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba586:	4622      	mov	r2, r4
   ba588:	462b      	mov	r3, r5
   ba58a:	f7ff fbab 	bl	b9ce4 <__aeabi_dmul>
   ba58e:	bd70      	pop	{r4, r5, r6, pc}

000ba590 <_strtod_l>:
   ba590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba594:	ed2d 8b02 	vpush	{d8}
   ba598:	b09d      	sub	sp, #116	; 0x74
   ba59a:	461f      	mov	r7, r3
   ba59c:	2300      	movs	r3, #0
   ba59e:	9318      	str	r3, [sp, #96]	; 0x60
   ba5a0:	4ba2      	ldr	r3, [pc, #648]	; (ba82c <_strtod_l+0x29c>)
   ba5a2:	9213      	str	r2, [sp, #76]	; 0x4c
   ba5a4:	681b      	ldr	r3, [r3, #0]
   ba5a6:	9305      	str	r3, [sp, #20]
   ba5a8:	4604      	mov	r4, r0
   ba5aa:	4618      	mov	r0, r3
   ba5ac:	4688      	mov	r8, r1
   ba5ae:	f7ff ff8e 	bl	ba4ce <strlen>
   ba5b2:	f04f 0a00 	mov.w	sl, #0
   ba5b6:	4605      	mov	r5, r0
   ba5b8:	f04f 0b00 	mov.w	fp, #0
   ba5bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba5c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5c2:	781a      	ldrb	r2, [r3, #0]
   ba5c4:	2a2b      	cmp	r2, #43	; 0x2b
   ba5c6:	d04e      	beq.n	ba666 <_strtod_l+0xd6>
   ba5c8:	d83b      	bhi.n	ba642 <_strtod_l+0xb2>
   ba5ca:	2a0d      	cmp	r2, #13
   ba5cc:	d834      	bhi.n	ba638 <_strtod_l+0xa8>
   ba5ce:	2a08      	cmp	r2, #8
   ba5d0:	d834      	bhi.n	ba63c <_strtod_l+0xac>
   ba5d2:	2a00      	cmp	r2, #0
   ba5d4:	d03e      	beq.n	ba654 <_strtod_l+0xc4>
   ba5d6:	2300      	movs	r3, #0
   ba5d8:	930a      	str	r3, [sp, #40]	; 0x28
   ba5da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba5dc:	7833      	ldrb	r3, [r6, #0]
   ba5de:	2b30      	cmp	r3, #48	; 0x30
   ba5e0:	f040 80b0 	bne.w	ba744 <_strtod_l+0x1b4>
   ba5e4:	7873      	ldrb	r3, [r6, #1]
   ba5e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba5ea:	2b58      	cmp	r3, #88	; 0x58
   ba5ec:	d168      	bne.n	ba6c0 <_strtod_l+0x130>
   ba5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba5f0:	9301      	str	r3, [sp, #4]
   ba5f2:	ab18      	add	r3, sp, #96	; 0x60
   ba5f4:	9702      	str	r7, [sp, #8]
   ba5f6:	9300      	str	r3, [sp, #0]
   ba5f8:	4a8d      	ldr	r2, [pc, #564]	; (ba830 <_strtod_l+0x2a0>)
   ba5fa:	ab19      	add	r3, sp, #100	; 0x64
   ba5fc:	a917      	add	r1, sp, #92	; 0x5c
   ba5fe:	4620      	mov	r0, r4
   ba600:	f000 ff8a 	bl	bb518 <__gethex>
   ba604:	f010 0707 	ands.w	r7, r0, #7
   ba608:	4605      	mov	r5, r0
   ba60a:	d005      	beq.n	ba618 <_strtod_l+0x88>
   ba60c:	2f06      	cmp	r7, #6
   ba60e:	d12c      	bne.n	ba66a <_strtod_l+0xda>
   ba610:	3601      	adds	r6, #1
   ba612:	2300      	movs	r3, #0
   ba614:	9617      	str	r6, [sp, #92]	; 0x5c
   ba616:	930a      	str	r3, [sp, #40]	; 0x28
   ba618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba61a:	2b00      	cmp	r3, #0
   ba61c:	f040 8590 	bne.w	bb140 <_strtod_l+0xbb0>
   ba620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba622:	b1eb      	cbz	r3, ba660 <_strtod_l+0xd0>
   ba624:	4652      	mov	r2, sl
   ba626:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba62a:	ec43 2b10 	vmov	d0, r2, r3
   ba62e:	b01d      	add	sp, #116	; 0x74
   ba630:	ecbd 8b02 	vpop	{d8}
   ba634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba638:	2a20      	cmp	r2, #32
   ba63a:	d1cc      	bne.n	ba5d6 <_strtod_l+0x46>
   ba63c:	3301      	adds	r3, #1
   ba63e:	9317      	str	r3, [sp, #92]	; 0x5c
   ba640:	e7be      	b.n	ba5c0 <_strtod_l+0x30>
   ba642:	2a2d      	cmp	r2, #45	; 0x2d
   ba644:	d1c7      	bne.n	ba5d6 <_strtod_l+0x46>
   ba646:	2201      	movs	r2, #1
   ba648:	920a      	str	r2, [sp, #40]	; 0x28
   ba64a:	1c5a      	adds	r2, r3, #1
   ba64c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba64e:	785b      	ldrb	r3, [r3, #1]
   ba650:	2b00      	cmp	r3, #0
   ba652:	d1c2      	bne.n	ba5da <_strtod_l+0x4a>
   ba654:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba656:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba65a:	2b00      	cmp	r3, #0
   ba65c:	f040 856e 	bne.w	bb13c <_strtod_l+0xbac>
   ba660:	4652      	mov	r2, sl
   ba662:	465b      	mov	r3, fp
   ba664:	e7e1      	b.n	ba62a <_strtod_l+0x9a>
   ba666:	2200      	movs	r2, #0
   ba668:	e7ee      	b.n	ba648 <_strtod_l+0xb8>
   ba66a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba66c:	b13a      	cbz	r2, ba67e <_strtod_l+0xee>
   ba66e:	2135      	movs	r1, #53	; 0x35
   ba670:	a81a      	add	r0, sp, #104	; 0x68
   ba672:	f001 feec 	bl	bc44e <__copybits>
   ba676:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba678:	4620      	mov	r0, r4
   ba67a:	f001 faab 	bl	bbbd4 <_Bfree>
   ba67e:	3f01      	subs	r7, #1
   ba680:	2f04      	cmp	r7, #4
   ba682:	d806      	bhi.n	ba692 <_strtod_l+0x102>
   ba684:	e8df f007 	tbb	[pc, r7]
   ba688:	1714030a 	.word	0x1714030a
   ba68c:	0a          	.byte	0x0a
   ba68d:	00          	.byte	0x00
   ba68e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba692:	0728      	lsls	r0, r5, #28
   ba694:	d5c0      	bpl.n	ba618 <_strtod_l+0x88>
   ba696:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba69a:	e7bd      	b.n	ba618 <_strtod_l+0x88>
   ba69c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba6a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba6a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba6a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba6aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba6ae:	e7f0      	b.n	ba692 <_strtod_l+0x102>
   ba6b0:	f8df b180 	ldr.w	fp, [pc, #384]	; ba834 <_strtod_l+0x2a4>
   ba6b4:	e7ed      	b.n	ba692 <_strtod_l+0x102>
   ba6b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba6ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba6be:	e7e8      	b.n	ba692 <_strtod_l+0x102>
   ba6c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba6c2:	1c5a      	adds	r2, r3, #1
   ba6c4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba6c6:	785b      	ldrb	r3, [r3, #1]
   ba6c8:	2b30      	cmp	r3, #48	; 0x30
   ba6ca:	d0f9      	beq.n	ba6c0 <_strtod_l+0x130>
   ba6cc:	2b00      	cmp	r3, #0
   ba6ce:	d0a3      	beq.n	ba618 <_strtod_l+0x88>
   ba6d0:	2301      	movs	r3, #1
   ba6d2:	f04f 0900 	mov.w	r9, #0
   ba6d6:	9304      	str	r3, [sp, #16]
   ba6d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba6da:	9308      	str	r3, [sp, #32]
   ba6dc:	f8cd 901c 	str.w	r9, [sp, #28]
   ba6e0:	464f      	mov	r7, r9
   ba6e2:	220a      	movs	r2, #10
   ba6e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba6e6:	7806      	ldrb	r6, [r0, #0]
   ba6e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba6ec:	b2d9      	uxtb	r1, r3
   ba6ee:	2909      	cmp	r1, #9
   ba6f0:	d92a      	bls.n	ba748 <_strtod_l+0x1b8>
   ba6f2:	9905      	ldr	r1, [sp, #20]
   ba6f4:	462a      	mov	r2, r5
   ba6f6:	f7ff fef2 	bl	ba4de <strncmp>
   ba6fa:	b398      	cbz	r0, ba764 <_strtod_l+0x1d4>
   ba6fc:	2000      	movs	r0, #0
   ba6fe:	4632      	mov	r2, r6
   ba700:	463d      	mov	r5, r7
   ba702:	9005      	str	r0, [sp, #20]
   ba704:	4603      	mov	r3, r0
   ba706:	2a65      	cmp	r2, #101	; 0x65
   ba708:	d001      	beq.n	ba70e <_strtod_l+0x17e>
   ba70a:	2a45      	cmp	r2, #69	; 0x45
   ba70c:	d118      	bne.n	ba740 <_strtod_l+0x1b0>
   ba70e:	b91d      	cbnz	r5, ba718 <_strtod_l+0x188>
   ba710:	9a04      	ldr	r2, [sp, #16]
   ba712:	4302      	orrs	r2, r0
   ba714:	d09e      	beq.n	ba654 <_strtod_l+0xc4>
   ba716:	2500      	movs	r5, #0
   ba718:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba71c:	f108 0201 	add.w	r2, r8, #1
   ba720:	9217      	str	r2, [sp, #92]	; 0x5c
   ba722:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba726:	2a2b      	cmp	r2, #43	; 0x2b
   ba728:	d075      	beq.n	ba816 <_strtod_l+0x286>
   ba72a:	2a2d      	cmp	r2, #45	; 0x2d
   ba72c:	d07b      	beq.n	ba826 <_strtod_l+0x296>
   ba72e:	f04f 0c00 	mov.w	ip, #0
   ba732:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba736:	2909      	cmp	r1, #9
   ba738:	f240 8082 	bls.w	ba840 <_strtod_l+0x2b0>
   ba73c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba740:	2600      	movs	r6, #0
   ba742:	e09d      	b.n	ba880 <_strtod_l+0x2f0>
   ba744:	2300      	movs	r3, #0
   ba746:	e7c4      	b.n	ba6d2 <_strtod_l+0x142>
   ba748:	2f08      	cmp	r7, #8
   ba74a:	bfd8      	it	le
   ba74c:	9907      	ldrle	r1, [sp, #28]
   ba74e:	f100 0001 	add.w	r0, r0, #1
   ba752:	bfda      	itte	le
   ba754:	fb02 3301 	mlale	r3, r2, r1, r3
   ba758:	9307      	strle	r3, [sp, #28]
   ba75a:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba75e:	3701      	adds	r7, #1
   ba760:	9017      	str	r0, [sp, #92]	; 0x5c
   ba762:	e7bf      	b.n	ba6e4 <_strtod_l+0x154>
   ba764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba766:	195a      	adds	r2, r3, r5
   ba768:	9217      	str	r2, [sp, #92]	; 0x5c
   ba76a:	5d5a      	ldrb	r2, [r3, r5]
   ba76c:	2f00      	cmp	r7, #0
   ba76e:	d037      	beq.n	ba7e0 <_strtod_l+0x250>
   ba770:	9005      	str	r0, [sp, #20]
   ba772:	463d      	mov	r5, r7
   ba774:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba778:	2b09      	cmp	r3, #9
   ba77a:	d912      	bls.n	ba7a2 <_strtod_l+0x212>
   ba77c:	2301      	movs	r3, #1
   ba77e:	e7c2      	b.n	ba706 <_strtod_l+0x176>
   ba780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba782:	1c5a      	adds	r2, r3, #1
   ba784:	9217      	str	r2, [sp, #92]	; 0x5c
   ba786:	785a      	ldrb	r2, [r3, #1]
   ba788:	3001      	adds	r0, #1
   ba78a:	2a30      	cmp	r2, #48	; 0x30
   ba78c:	d0f8      	beq.n	ba780 <_strtod_l+0x1f0>
   ba78e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba792:	2b08      	cmp	r3, #8
   ba794:	f200 84d9 	bhi.w	bb14a <_strtod_l+0xbba>
   ba798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba79a:	9005      	str	r0, [sp, #20]
   ba79c:	2000      	movs	r0, #0
   ba79e:	9308      	str	r3, [sp, #32]
   ba7a0:	4605      	mov	r5, r0
   ba7a2:	3a30      	subs	r2, #48	; 0x30
   ba7a4:	f100 0301 	add.w	r3, r0, #1
   ba7a8:	d014      	beq.n	ba7d4 <_strtod_l+0x244>
   ba7aa:	9905      	ldr	r1, [sp, #20]
   ba7ac:	4419      	add	r1, r3
   ba7ae:	9105      	str	r1, [sp, #20]
   ba7b0:	462b      	mov	r3, r5
   ba7b2:	eb00 0e05 	add.w	lr, r0, r5
   ba7b6:	210a      	movs	r1, #10
   ba7b8:	4573      	cmp	r3, lr
   ba7ba:	d113      	bne.n	ba7e4 <_strtod_l+0x254>
   ba7bc:	182b      	adds	r3, r5, r0
   ba7be:	2b08      	cmp	r3, #8
   ba7c0:	f105 0501 	add.w	r5, r5, #1
   ba7c4:	4405      	add	r5, r0
   ba7c6:	dc1c      	bgt.n	ba802 <_strtod_l+0x272>
   ba7c8:	9907      	ldr	r1, [sp, #28]
   ba7ca:	230a      	movs	r3, #10
   ba7cc:	fb03 2301 	mla	r3, r3, r1, r2
   ba7d0:	9307      	str	r3, [sp, #28]
   ba7d2:	2300      	movs	r3, #0
   ba7d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba7d6:	1c51      	adds	r1, r2, #1
   ba7d8:	9117      	str	r1, [sp, #92]	; 0x5c
   ba7da:	7852      	ldrb	r2, [r2, #1]
   ba7dc:	4618      	mov	r0, r3
   ba7de:	e7c9      	b.n	ba774 <_strtod_l+0x1e4>
   ba7e0:	4638      	mov	r0, r7
   ba7e2:	e7d2      	b.n	ba78a <_strtod_l+0x1fa>
   ba7e4:	2b08      	cmp	r3, #8
   ba7e6:	dc04      	bgt.n	ba7f2 <_strtod_l+0x262>
   ba7e8:	9e07      	ldr	r6, [sp, #28]
   ba7ea:	434e      	muls	r6, r1
   ba7ec:	9607      	str	r6, [sp, #28]
   ba7ee:	3301      	adds	r3, #1
   ba7f0:	e7e2      	b.n	ba7b8 <_strtod_l+0x228>
   ba7f2:	f103 0c01 	add.w	ip, r3, #1
   ba7f6:	f1bc 0f10 	cmp.w	ip, #16
   ba7fa:	bfd8      	it	le
   ba7fc:	fb01 f909 	mulle.w	r9, r1, r9
   ba800:	e7f5      	b.n	ba7ee <_strtod_l+0x25e>
   ba802:	2d10      	cmp	r5, #16
   ba804:	bfdc      	itt	le
   ba806:	230a      	movle	r3, #10
   ba808:	fb03 2909 	mlale	r9, r3, r9, r2
   ba80c:	e7e1      	b.n	ba7d2 <_strtod_l+0x242>
   ba80e:	2300      	movs	r3, #0
   ba810:	9305      	str	r3, [sp, #20]
   ba812:	2301      	movs	r3, #1
   ba814:	e77c      	b.n	ba710 <_strtod_l+0x180>
   ba816:	f04f 0c00 	mov.w	ip, #0
   ba81a:	f108 0202 	add.w	r2, r8, #2
   ba81e:	9217      	str	r2, [sp, #92]	; 0x5c
   ba820:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba824:	e785      	b.n	ba732 <_strtod_l+0x1a2>
   ba826:	f04f 0c01 	mov.w	ip, #1
   ba82a:	e7f6      	b.n	ba81a <_strtod_l+0x28a>
   ba82c:	000bd4f8 	.word	0x000bd4f8
   ba830:	000bd290 	.word	0x000bd290
   ba834:	7ff00000 	.word	0x7ff00000
   ba838:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba83a:	1c51      	adds	r1, r2, #1
   ba83c:	9117      	str	r1, [sp, #92]	; 0x5c
   ba83e:	7852      	ldrb	r2, [r2, #1]
   ba840:	2a30      	cmp	r2, #48	; 0x30
   ba842:	d0f9      	beq.n	ba838 <_strtod_l+0x2a8>
   ba844:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba848:	2908      	cmp	r1, #8
   ba84a:	f63f af79 	bhi.w	ba740 <_strtod_l+0x1b0>
   ba84e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba852:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba854:	9206      	str	r2, [sp, #24]
   ba856:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba858:	1c51      	adds	r1, r2, #1
   ba85a:	9117      	str	r1, [sp, #92]	; 0x5c
   ba85c:	7852      	ldrb	r2, [r2, #1]
   ba85e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba862:	2e09      	cmp	r6, #9
   ba864:	d937      	bls.n	ba8d6 <_strtod_l+0x346>
   ba866:	9e06      	ldr	r6, [sp, #24]
   ba868:	1b89      	subs	r1, r1, r6
   ba86a:	2908      	cmp	r1, #8
   ba86c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba870:	dc02      	bgt.n	ba878 <_strtod_l+0x2e8>
   ba872:	4576      	cmp	r6, lr
   ba874:	bfa8      	it	ge
   ba876:	4676      	movge	r6, lr
   ba878:	f1bc 0f00 	cmp.w	ip, #0
   ba87c:	d000      	beq.n	ba880 <_strtod_l+0x2f0>
   ba87e:	4276      	negs	r6, r6
   ba880:	2d00      	cmp	r5, #0
   ba882:	d14d      	bne.n	ba920 <_strtod_l+0x390>
   ba884:	9904      	ldr	r1, [sp, #16]
   ba886:	4301      	orrs	r1, r0
   ba888:	f47f aec6 	bne.w	ba618 <_strtod_l+0x88>
   ba88c:	2b00      	cmp	r3, #0
   ba88e:	f47f aee1 	bne.w	ba654 <_strtod_l+0xc4>
   ba892:	2a69      	cmp	r2, #105	; 0x69
   ba894:	d027      	beq.n	ba8e6 <_strtod_l+0x356>
   ba896:	dc24      	bgt.n	ba8e2 <_strtod_l+0x352>
   ba898:	2a49      	cmp	r2, #73	; 0x49
   ba89a:	d024      	beq.n	ba8e6 <_strtod_l+0x356>
   ba89c:	2a4e      	cmp	r2, #78	; 0x4e
   ba89e:	f47f aed9 	bne.w	ba654 <_strtod_l+0xc4>
   ba8a2:	499f      	ldr	r1, [pc, #636]	; (bab20 <_strtod_l+0x590>)
   ba8a4:	a817      	add	r0, sp, #92	; 0x5c
   ba8a6:	f001 f88f 	bl	bb9c8 <__match>
   ba8aa:	2800      	cmp	r0, #0
   ba8ac:	f43f aed2 	beq.w	ba654 <_strtod_l+0xc4>
   ba8b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba8b2:	781b      	ldrb	r3, [r3, #0]
   ba8b4:	2b28      	cmp	r3, #40	; 0x28
   ba8b6:	d12d      	bne.n	ba914 <_strtod_l+0x384>
   ba8b8:	499a      	ldr	r1, [pc, #616]	; (bab24 <_strtod_l+0x594>)
   ba8ba:	aa1a      	add	r2, sp, #104	; 0x68
   ba8bc:	a817      	add	r0, sp, #92	; 0x5c
   ba8be:	f001 f897 	bl	bb9f0 <__hexnan>
   ba8c2:	2805      	cmp	r0, #5
   ba8c4:	d126      	bne.n	ba914 <_strtod_l+0x384>
   ba8c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba8c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba8cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba8d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba8d4:	e6a0      	b.n	ba618 <_strtod_l+0x88>
   ba8d6:	210a      	movs	r1, #10
   ba8d8:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba8dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba8e0:	e7b9      	b.n	ba856 <_strtod_l+0x2c6>
   ba8e2:	2a6e      	cmp	r2, #110	; 0x6e
   ba8e4:	e7db      	b.n	ba89e <_strtod_l+0x30e>
   ba8e6:	4990      	ldr	r1, [pc, #576]	; (bab28 <_strtod_l+0x598>)
   ba8e8:	a817      	add	r0, sp, #92	; 0x5c
   ba8ea:	f001 f86d 	bl	bb9c8 <__match>
   ba8ee:	2800      	cmp	r0, #0
   ba8f0:	f43f aeb0 	beq.w	ba654 <_strtod_l+0xc4>
   ba8f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba8f6:	498d      	ldr	r1, [pc, #564]	; (bab2c <_strtod_l+0x59c>)
   ba8f8:	3b01      	subs	r3, #1
   ba8fa:	a817      	add	r0, sp, #92	; 0x5c
   ba8fc:	9317      	str	r3, [sp, #92]	; 0x5c
   ba8fe:	f001 f863 	bl	bb9c8 <__match>
   ba902:	b910      	cbnz	r0, ba90a <_strtod_l+0x37a>
   ba904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba906:	3301      	adds	r3, #1
   ba908:	9317      	str	r3, [sp, #92]	; 0x5c
   ba90a:	f8df b230 	ldr.w	fp, [pc, #560]	; bab3c <_strtod_l+0x5ac>
   ba90e:	f04f 0a00 	mov.w	sl, #0
   ba912:	e681      	b.n	ba618 <_strtod_l+0x88>
   ba914:	4886      	ldr	r0, [pc, #536]	; (bab30 <_strtod_l+0x5a0>)
   ba916:	f001 fdef 	bl	bc4f8 <nan>
   ba91a:	ec5b ab10 	vmov	sl, fp, d0
   ba91e:	e67b      	b.n	ba618 <_strtod_l+0x88>
   ba920:	9b05      	ldr	r3, [sp, #20]
   ba922:	9807      	ldr	r0, [sp, #28]
   ba924:	1af3      	subs	r3, r6, r3
   ba926:	2f00      	cmp	r7, #0
   ba928:	bf08      	it	eq
   ba92a:	462f      	moveq	r7, r5
   ba92c:	2d10      	cmp	r5, #16
   ba92e:	9306      	str	r3, [sp, #24]
   ba930:	46a8      	mov	r8, r5
   ba932:	bfa8      	it	ge
   ba934:	f04f 0810 	movge.w	r8, #16
   ba938:	f7ff f95a 	bl	b9bf0 <__aeabi_ui2d>
   ba93c:	2d09      	cmp	r5, #9
   ba93e:	4682      	mov	sl, r0
   ba940:	468b      	mov	fp, r1
   ba942:	dd13      	ble.n	ba96c <_strtod_l+0x3dc>
   ba944:	4b7b      	ldr	r3, [pc, #492]	; (bab34 <_strtod_l+0x5a4>)
   ba946:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba94a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba94e:	f7ff f9c9 	bl	b9ce4 <__aeabi_dmul>
   ba952:	4682      	mov	sl, r0
   ba954:	4648      	mov	r0, r9
   ba956:	468b      	mov	fp, r1
   ba958:	f7ff f94a 	bl	b9bf0 <__aeabi_ui2d>
   ba95c:	4602      	mov	r2, r0
   ba95e:	460b      	mov	r3, r1
   ba960:	4650      	mov	r0, sl
   ba962:	4659      	mov	r1, fp
   ba964:	f7ff f808 	bl	b9978 <__adddf3>
   ba968:	4682      	mov	sl, r0
   ba96a:	468b      	mov	fp, r1
   ba96c:	2d0f      	cmp	r5, #15
   ba96e:	dc38      	bgt.n	ba9e2 <_strtod_l+0x452>
   ba970:	9b06      	ldr	r3, [sp, #24]
   ba972:	2b00      	cmp	r3, #0
   ba974:	f43f ae50 	beq.w	ba618 <_strtod_l+0x88>
   ba978:	dd24      	ble.n	ba9c4 <_strtod_l+0x434>
   ba97a:	2b16      	cmp	r3, #22
   ba97c:	dc0b      	bgt.n	ba996 <_strtod_l+0x406>
   ba97e:	496d      	ldr	r1, [pc, #436]	; (bab34 <_strtod_l+0x5a4>)
   ba980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba984:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba988:	4652      	mov	r2, sl
   ba98a:	465b      	mov	r3, fp
   ba98c:	f7ff f9aa 	bl	b9ce4 <__aeabi_dmul>
   ba990:	4682      	mov	sl, r0
   ba992:	468b      	mov	fp, r1
   ba994:	e640      	b.n	ba618 <_strtod_l+0x88>
   ba996:	9a06      	ldr	r2, [sp, #24]
   ba998:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba99c:	4293      	cmp	r3, r2
   ba99e:	db20      	blt.n	ba9e2 <_strtod_l+0x452>
   ba9a0:	4c64      	ldr	r4, [pc, #400]	; (bab34 <_strtod_l+0x5a4>)
   ba9a2:	f1c5 050f 	rsb	r5, r5, #15
   ba9a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba9aa:	4652      	mov	r2, sl
   ba9ac:	465b      	mov	r3, fp
   ba9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba9b2:	f7ff f997 	bl	b9ce4 <__aeabi_dmul>
   ba9b6:	9b06      	ldr	r3, [sp, #24]
   ba9b8:	1b5d      	subs	r5, r3, r5
   ba9ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba9be:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba9c2:	e7e3      	b.n	ba98c <_strtod_l+0x3fc>
   ba9c4:	9b06      	ldr	r3, [sp, #24]
   ba9c6:	3316      	adds	r3, #22
   ba9c8:	db0b      	blt.n	ba9e2 <_strtod_l+0x452>
   ba9ca:	9b05      	ldr	r3, [sp, #20]
   ba9cc:	1b9e      	subs	r6, r3, r6
   ba9ce:	4b59      	ldr	r3, [pc, #356]	; (bab34 <_strtod_l+0x5a4>)
   ba9d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba9d4:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba9d8:	4650      	mov	r0, sl
   ba9da:	4659      	mov	r1, fp
   ba9dc:	f7ff faac 	bl	b9f38 <__aeabi_ddiv>
   ba9e0:	e7d6      	b.n	ba990 <_strtod_l+0x400>
   ba9e2:	9b06      	ldr	r3, [sp, #24]
   ba9e4:	eba5 0808 	sub.w	r8, r5, r8
   ba9e8:	4498      	add	r8, r3
   ba9ea:	f1b8 0f00 	cmp.w	r8, #0
   ba9ee:	dd74      	ble.n	baada <_strtod_l+0x54a>
   ba9f0:	f018 030f 	ands.w	r3, r8, #15
   ba9f4:	d00a      	beq.n	baa0c <_strtod_l+0x47c>
   ba9f6:	494f      	ldr	r1, [pc, #316]	; (bab34 <_strtod_l+0x5a4>)
   ba9f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba9fc:	4652      	mov	r2, sl
   ba9fe:	465b      	mov	r3, fp
   baa00:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa04:	f7ff f96e 	bl	b9ce4 <__aeabi_dmul>
   baa08:	4682      	mov	sl, r0
   baa0a:	468b      	mov	fp, r1
   baa0c:	f038 080f 	bics.w	r8, r8, #15
   baa10:	d04f      	beq.n	baab2 <_strtod_l+0x522>
   baa12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   baa16:	dd22      	ble.n	baa5e <_strtod_l+0x4ce>
   baa18:	2500      	movs	r5, #0
   baa1a:	462e      	mov	r6, r5
   baa1c:	9507      	str	r5, [sp, #28]
   baa1e:	9505      	str	r5, [sp, #20]
   baa20:	2322      	movs	r3, #34	; 0x22
   baa22:	f8df b118 	ldr.w	fp, [pc, #280]	; bab3c <_strtod_l+0x5ac>
   baa26:	6023      	str	r3, [r4, #0]
   baa28:	f04f 0a00 	mov.w	sl, #0
   baa2c:	9b07      	ldr	r3, [sp, #28]
   baa2e:	2b00      	cmp	r3, #0
   baa30:	f43f adf2 	beq.w	ba618 <_strtod_l+0x88>
   baa34:	9918      	ldr	r1, [sp, #96]	; 0x60
   baa36:	4620      	mov	r0, r4
   baa38:	f001 f8cc 	bl	bbbd4 <_Bfree>
   baa3c:	9905      	ldr	r1, [sp, #20]
   baa3e:	4620      	mov	r0, r4
   baa40:	f001 f8c8 	bl	bbbd4 <_Bfree>
   baa44:	4631      	mov	r1, r6
   baa46:	4620      	mov	r0, r4
   baa48:	f001 f8c4 	bl	bbbd4 <_Bfree>
   baa4c:	9907      	ldr	r1, [sp, #28]
   baa4e:	4620      	mov	r0, r4
   baa50:	f001 f8c0 	bl	bbbd4 <_Bfree>
   baa54:	4629      	mov	r1, r5
   baa56:	4620      	mov	r0, r4
   baa58:	f001 f8bc 	bl	bbbd4 <_Bfree>
   baa5c:	e5dc      	b.n	ba618 <_strtod_l+0x88>
   baa5e:	4b36      	ldr	r3, [pc, #216]	; (bab38 <_strtod_l+0x5a8>)
   baa60:	9304      	str	r3, [sp, #16]
   baa62:	2300      	movs	r3, #0
   baa64:	ea4f 1828 	mov.w	r8, r8, asr #4
   baa68:	4650      	mov	r0, sl
   baa6a:	4659      	mov	r1, fp
   baa6c:	4699      	mov	r9, r3
   baa6e:	f1b8 0f01 	cmp.w	r8, #1
   baa72:	dc21      	bgt.n	baab8 <_strtod_l+0x528>
   baa74:	b10b      	cbz	r3, baa7a <_strtod_l+0x4ea>
   baa76:	4682      	mov	sl, r0
   baa78:	468b      	mov	fp, r1
   baa7a:	4b2f      	ldr	r3, [pc, #188]	; (bab38 <_strtod_l+0x5a8>)
   baa7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   baa80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   baa84:	4652      	mov	r2, sl
   baa86:	465b      	mov	r3, fp
   baa88:	e9d9 0100 	ldrd	r0, r1, [r9]
   baa8c:	f7ff f92a 	bl	b9ce4 <__aeabi_dmul>
   baa90:	4b2a      	ldr	r3, [pc, #168]	; (bab3c <_strtod_l+0x5ac>)
   baa92:	460a      	mov	r2, r1
   baa94:	400b      	ands	r3, r1
   baa96:	492a      	ldr	r1, [pc, #168]	; (bab40 <_strtod_l+0x5b0>)
   baa98:	428b      	cmp	r3, r1
   baa9a:	4682      	mov	sl, r0
   baa9c:	d8bc      	bhi.n	baa18 <_strtod_l+0x488>
   baa9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   baaa2:	428b      	cmp	r3, r1
   baaa4:	bf86      	itte	hi
   baaa6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bab44 <_strtod_l+0x5b4>
   baaaa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   baaae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   baab2:	2300      	movs	r3, #0
   baab4:	9304      	str	r3, [sp, #16]
   baab6:	e084      	b.n	babc2 <_strtod_l+0x632>
   baab8:	f018 0f01 	tst.w	r8, #1
   baabc:	d005      	beq.n	baaca <_strtod_l+0x53a>
   baabe:	9b04      	ldr	r3, [sp, #16]
   baac0:	e9d3 2300 	ldrd	r2, r3, [r3]
   baac4:	f7ff f90e 	bl	b9ce4 <__aeabi_dmul>
   baac8:	2301      	movs	r3, #1
   baaca:	9a04      	ldr	r2, [sp, #16]
   baacc:	3208      	adds	r2, #8
   baace:	f109 0901 	add.w	r9, r9, #1
   baad2:	ea4f 0868 	mov.w	r8, r8, asr #1
   baad6:	9204      	str	r2, [sp, #16]
   baad8:	e7c9      	b.n	baa6e <_strtod_l+0x4de>
   baada:	d0ea      	beq.n	baab2 <_strtod_l+0x522>
   baadc:	f1c8 0800 	rsb	r8, r8, #0
   baae0:	f018 020f 	ands.w	r2, r8, #15
   baae4:	d00a      	beq.n	baafc <_strtod_l+0x56c>
   baae6:	4b13      	ldr	r3, [pc, #76]	; (bab34 <_strtod_l+0x5a4>)
   baae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   baaec:	4650      	mov	r0, sl
   baaee:	4659      	mov	r1, fp
   baaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   baaf4:	f7ff fa20 	bl	b9f38 <__aeabi_ddiv>
   baaf8:	4682      	mov	sl, r0
   baafa:	468b      	mov	fp, r1
   baafc:	ea5f 1828 	movs.w	r8, r8, asr #4
   bab00:	d0d7      	beq.n	baab2 <_strtod_l+0x522>
   bab02:	f1b8 0f1f 	cmp.w	r8, #31
   bab06:	dd1f      	ble.n	bab48 <_strtod_l+0x5b8>
   bab08:	2500      	movs	r5, #0
   bab0a:	462e      	mov	r6, r5
   bab0c:	9507      	str	r5, [sp, #28]
   bab0e:	9505      	str	r5, [sp, #20]
   bab10:	2322      	movs	r3, #34	; 0x22
   bab12:	f04f 0a00 	mov.w	sl, #0
   bab16:	f04f 0b00 	mov.w	fp, #0
   bab1a:	6023      	str	r3, [r4, #0]
   bab1c:	e786      	b.n	baa2c <_strtod_l+0x49c>
   bab1e:	bf00      	nop
   bab20:	000bd28a 	.word	0x000bd28a
   bab24:	000bd2a4 	.word	0x000bd2a4
   bab28:	000bd281 	.word	0x000bd281
   bab2c:	000bd284 	.word	0x000bd284
   bab30:	000bcc8b 	.word	0x000bcc8b
   bab34:	000bd5b8 	.word	0x000bd5b8
   bab38:	000bd590 	.word	0x000bd590
   bab3c:	7ff00000 	.word	0x7ff00000
   bab40:	7ca00000 	.word	0x7ca00000
   bab44:	7fefffff 	.word	0x7fefffff
   bab48:	f018 0310 	ands.w	r3, r8, #16
   bab4c:	bf18      	it	ne
   bab4e:	236a      	movne	r3, #106	; 0x6a
   bab50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; baf00 <_strtod_l+0x970>
   bab54:	9304      	str	r3, [sp, #16]
   bab56:	4650      	mov	r0, sl
   bab58:	4659      	mov	r1, fp
   bab5a:	2300      	movs	r3, #0
   bab5c:	f018 0f01 	tst.w	r8, #1
   bab60:	d004      	beq.n	bab6c <_strtod_l+0x5dc>
   bab62:	e9d9 2300 	ldrd	r2, r3, [r9]
   bab66:	f7ff f8bd 	bl	b9ce4 <__aeabi_dmul>
   bab6a:	2301      	movs	r3, #1
   bab6c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bab70:	f109 0908 	add.w	r9, r9, #8
   bab74:	d1f2      	bne.n	bab5c <_strtod_l+0x5cc>
   bab76:	b10b      	cbz	r3, bab7c <_strtod_l+0x5ec>
   bab78:	4682      	mov	sl, r0
   bab7a:	468b      	mov	fp, r1
   bab7c:	9b04      	ldr	r3, [sp, #16]
   bab7e:	b1c3      	cbz	r3, babb2 <_strtod_l+0x622>
   bab80:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bab84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bab88:	2b00      	cmp	r3, #0
   bab8a:	4659      	mov	r1, fp
   bab8c:	dd11      	ble.n	babb2 <_strtod_l+0x622>
   bab8e:	2b1f      	cmp	r3, #31
   bab90:	f340 8124 	ble.w	baddc <_strtod_l+0x84c>
   bab94:	2b34      	cmp	r3, #52	; 0x34
   bab96:	bfde      	ittt	le
   bab98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bab9c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   baba0:	fa03 f202 	lslle.w	r2, r3, r2
   baba4:	f04f 0a00 	mov.w	sl, #0
   baba8:	bfcc      	ite	gt
   babaa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   babae:	ea02 0b01 	andle.w	fp, r2, r1
   babb2:	2200      	movs	r2, #0
   babb4:	2300      	movs	r3, #0
   babb6:	4650      	mov	r0, sl
   babb8:	4659      	mov	r1, fp
   babba:	f7ff fafb 	bl	ba1b4 <__aeabi_dcmpeq>
   babbe:	2800      	cmp	r0, #0
   babc0:	d1a2      	bne.n	bab08 <_strtod_l+0x578>
   babc2:	9b07      	ldr	r3, [sp, #28]
   babc4:	9300      	str	r3, [sp, #0]
   babc6:	9908      	ldr	r1, [sp, #32]
   babc8:	462b      	mov	r3, r5
   babca:	463a      	mov	r2, r7
   babcc:	4620      	mov	r0, r4
   babce:	f001 f869 	bl	bbca4 <__s2b>
   babd2:	9007      	str	r0, [sp, #28]
   babd4:	2800      	cmp	r0, #0
   babd6:	f43f af1f 	beq.w	baa18 <_strtod_l+0x488>
   babda:	9b05      	ldr	r3, [sp, #20]
   babdc:	1b9e      	subs	r6, r3, r6
   babde:	9b06      	ldr	r3, [sp, #24]
   babe0:	2b00      	cmp	r3, #0
   babe2:	bfb4      	ite	lt
   babe4:	4633      	movlt	r3, r6
   babe6:	2300      	movge	r3, #0
   babe8:	930c      	str	r3, [sp, #48]	; 0x30
   babea:	9b06      	ldr	r3, [sp, #24]
   babec:	2500      	movs	r5, #0
   babee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   babf2:	9312      	str	r3, [sp, #72]	; 0x48
   babf4:	462e      	mov	r6, r5
   babf6:	9b07      	ldr	r3, [sp, #28]
   babf8:	4620      	mov	r0, r4
   babfa:	6859      	ldr	r1, [r3, #4]
   babfc:	f000 ffaa 	bl	bbb54 <_Balloc>
   bac00:	9005      	str	r0, [sp, #20]
   bac02:	2800      	cmp	r0, #0
   bac04:	f43f af0c 	beq.w	baa20 <_strtod_l+0x490>
   bac08:	9b07      	ldr	r3, [sp, #28]
   bac0a:	691a      	ldr	r2, [r3, #16]
   bac0c:	3202      	adds	r2, #2
   bac0e:	f103 010c 	add.w	r1, r3, #12
   bac12:	0092      	lsls	r2, r2, #2
   bac14:	300c      	adds	r0, #12
   bac16:	f7ff fb9a 	bl	ba34e <memcpy>
   bac1a:	ec4b ab10 	vmov	d0, sl, fp
   bac1e:	aa1a      	add	r2, sp, #104	; 0x68
   bac20:	a919      	add	r1, sp, #100	; 0x64
   bac22:	4620      	mov	r0, r4
   bac24:	f001 fb84 	bl	bc330 <__d2b>
   bac28:	ec4b ab18 	vmov	d8, sl, fp
   bac2c:	9018      	str	r0, [sp, #96]	; 0x60
   bac2e:	2800      	cmp	r0, #0
   bac30:	f43f aef6 	beq.w	baa20 <_strtod_l+0x490>
   bac34:	2101      	movs	r1, #1
   bac36:	4620      	mov	r0, r4
   bac38:	f001 f8ce 	bl	bbdd8 <__i2b>
   bac3c:	4606      	mov	r6, r0
   bac3e:	2800      	cmp	r0, #0
   bac40:	f43f aeee 	beq.w	baa20 <_strtod_l+0x490>
   bac44:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bac46:	9904      	ldr	r1, [sp, #16]
   bac48:	2b00      	cmp	r3, #0
   bac4a:	bfab      	itete	ge
   bac4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bac4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bac50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bac52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bac56:	bfac      	ite	ge
   bac58:	eb03 0902 	addge.w	r9, r3, r2
   bac5c:	1ad7      	sublt	r7, r2, r3
   bac5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bac60:	eba3 0801 	sub.w	r8, r3, r1
   bac64:	4490      	add	r8, r2
   bac66:	4ba1      	ldr	r3, [pc, #644]	; (baeec <_strtod_l+0x95c>)
   bac68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bac6c:	4598      	cmp	r8, r3
   bac6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bac72:	f280 80c7 	bge.w	bae04 <_strtod_l+0x874>
   bac76:	eba3 0308 	sub.w	r3, r3, r8
   bac7a:	2b1f      	cmp	r3, #31
   bac7c:	eba2 0203 	sub.w	r2, r2, r3
   bac80:	f04f 0101 	mov.w	r1, #1
   bac84:	f300 80b1 	bgt.w	badea <_strtod_l+0x85a>
   bac88:	fa01 f303 	lsl.w	r3, r1, r3
   bac8c:	930d      	str	r3, [sp, #52]	; 0x34
   bac8e:	2300      	movs	r3, #0
   bac90:	9308      	str	r3, [sp, #32]
   bac92:	eb09 0802 	add.w	r8, r9, r2
   bac96:	9b04      	ldr	r3, [sp, #16]
   bac98:	45c1      	cmp	r9, r8
   bac9a:	4417      	add	r7, r2
   bac9c:	441f      	add	r7, r3
   bac9e:	464b      	mov	r3, r9
   baca0:	bfa8      	it	ge
   baca2:	4643      	movge	r3, r8
   baca4:	42bb      	cmp	r3, r7
   baca6:	bfa8      	it	ge
   baca8:	463b      	movge	r3, r7
   bacaa:	2b00      	cmp	r3, #0
   bacac:	bfc2      	ittt	gt
   bacae:	eba8 0803 	subgt.w	r8, r8, r3
   bacb2:	1aff      	subgt	r7, r7, r3
   bacb4:	eba9 0903 	subgt.w	r9, r9, r3
   bacb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bacba:	2b00      	cmp	r3, #0
   bacbc:	dd17      	ble.n	bacee <_strtod_l+0x75e>
   bacbe:	4631      	mov	r1, r6
   bacc0:	461a      	mov	r2, r3
   bacc2:	4620      	mov	r0, r4
   bacc4:	f001 f948 	bl	bbf58 <__pow5mult>
   bacc8:	4606      	mov	r6, r0
   bacca:	2800      	cmp	r0, #0
   baccc:	f43f aea8 	beq.w	baa20 <_strtod_l+0x490>
   bacd0:	4601      	mov	r1, r0
   bacd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bacd4:	4620      	mov	r0, r4
   bacd6:	f001 f895 	bl	bbe04 <__multiply>
   bacda:	900b      	str	r0, [sp, #44]	; 0x2c
   bacdc:	2800      	cmp	r0, #0
   bacde:	f43f ae9f 	beq.w	baa20 <_strtod_l+0x490>
   bace2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bace4:	4620      	mov	r0, r4
   bace6:	f000 ff75 	bl	bbbd4 <_Bfree>
   bacea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bacec:	9318      	str	r3, [sp, #96]	; 0x60
   bacee:	f1b8 0f00 	cmp.w	r8, #0
   bacf2:	f300 808c 	bgt.w	bae0e <_strtod_l+0x87e>
   bacf6:	9b06      	ldr	r3, [sp, #24]
   bacf8:	2b00      	cmp	r3, #0
   bacfa:	dd08      	ble.n	bad0e <_strtod_l+0x77e>
   bacfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bacfe:	9905      	ldr	r1, [sp, #20]
   bad00:	4620      	mov	r0, r4
   bad02:	f001 f929 	bl	bbf58 <__pow5mult>
   bad06:	9005      	str	r0, [sp, #20]
   bad08:	2800      	cmp	r0, #0
   bad0a:	f43f ae89 	beq.w	baa20 <_strtod_l+0x490>
   bad0e:	2f00      	cmp	r7, #0
   bad10:	dd08      	ble.n	bad24 <_strtod_l+0x794>
   bad12:	9905      	ldr	r1, [sp, #20]
   bad14:	463a      	mov	r2, r7
   bad16:	4620      	mov	r0, r4
   bad18:	f001 f978 	bl	bc00c <__lshift>
   bad1c:	9005      	str	r0, [sp, #20]
   bad1e:	2800      	cmp	r0, #0
   bad20:	f43f ae7e 	beq.w	baa20 <_strtod_l+0x490>
   bad24:	f1b9 0f00 	cmp.w	r9, #0
   bad28:	dd08      	ble.n	bad3c <_strtod_l+0x7ac>
   bad2a:	4631      	mov	r1, r6
   bad2c:	464a      	mov	r2, r9
   bad2e:	4620      	mov	r0, r4
   bad30:	f001 f96c 	bl	bc00c <__lshift>
   bad34:	4606      	mov	r6, r0
   bad36:	2800      	cmp	r0, #0
   bad38:	f43f ae72 	beq.w	baa20 <_strtod_l+0x490>
   bad3c:	9a05      	ldr	r2, [sp, #20]
   bad3e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bad40:	4620      	mov	r0, r4
   bad42:	f001 f9ef 	bl	bc124 <__mdiff>
   bad46:	4605      	mov	r5, r0
   bad48:	2800      	cmp	r0, #0
   bad4a:	f43f ae69 	beq.w	baa20 <_strtod_l+0x490>
   bad4e:	68c3      	ldr	r3, [r0, #12]
   bad50:	930b      	str	r3, [sp, #44]	; 0x2c
   bad52:	2300      	movs	r3, #0
   bad54:	60c3      	str	r3, [r0, #12]
   bad56:	4631      	mov	r1, r6
   bad58:	f001 f9c8 	bl	bc0ec <__mcmp>
   bad5c:	2800      	cmp	r0, #0
   bad5e:	da60      	bge.n	bae22 <_strtod_l+0x892>
   bad60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bad62:	ea53 030a 	orrs.w	r3, r3, sl
   bad66:	f040 8082 	bne.w	bae6e <_strtod_l+0x8de>
   bad6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bad6e:	2b00      	cmp	r3, #0
   bad70:	d17d      	bne.n	bae6e <_strtod_l+0x8de>
   bad72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bad76:	0d1b      	lsrs	r3, r3, #20
   bad78:	051b      	lsls	r3, r3, #20
   bad7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bad7e:	d976      	bls.n	bae6e <_strtod_l+0x8de>
   bad80:	696b      	ldr	r3, [r5, #20]
   bad82:	b913      	cbnz	r3, bad8a <_strtod_l+0x7fa>
   bad84:	692b      	ldr	r3, [r5, #16]
   bad86:	2b01      	cmp	r3, #1
   bad88:	dd71      	ble.n	bae6e <_strtod_l+0x8de>
   bad8a:	4629      	mov	r1, r5
   bad8c:	2201      	movs	r2, #1
   bad8e:	4620      	mov	r0, r4
   bad90:	f001 f93c 	bl	bc00c <__lshift>
   bad94:	4631      	mov	r1, r6
   bad96:	4605      	mov	r5, r0
   bad98:	f001 f9a8 	bl	bc0ec <__mcmp>
   bad9c:	2800      	cmp	r0, #0
   bad9e:	dd66      	ble.n	bae6e <_strtod_l+0x8de>
   bada0:	9904      	ldr	r1, [sp, #16]
   bada2:	4a53      	ldr	r2, [pc, #332]	; (baef0 <_strtod_l+0x960>)
   bada4:	465b      	mov	r3, fp
   bada6:	2900      	cmp	r1, #0
   bada8:	f000 8081 	beq.w	baeae <_strtod_l+0x91e>
   badac:	ea02 010b 	and.w	r1, r2, fp
   badb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   badb4:	dc7b      	bgt.n	baeae <_strtod_l+0x91e>
   badb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   badba:	f77f aea9 	ble.w	bab10 <_strtod_l+0x580>
   badbe:	4b4d      	ldr	r3, [pc, #308]	; (baef4 <_strtod_l+0x964>)
   badc0:	4650      	mov	r0, sl
   badc2:	4659      	mov	r1, fp
   badc4:	2200      	movs	r2, #0
   badc6:	f7fe ff8d 	bl	b9ce4 <__aeabi_dmul>
   badca:	460b      	mov	r3, r1
   badcc:	4303      	orrs	r3, r0
   badce:	bf08      	it	eq
   badd0:	2322      	moveq	r3, #34	; 0x22
   badd2:	4682      	mov	sl, r0
   badd4:	468b      	mov	fp, r1
   badd6:	bf08      	it	eq
   badd8:	6023      	streq	r3, [r4, #0]
   badda:	e62b      	b.n	baa34 <_strtod_l+0x4a4>
   baddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bade0:	fa02 f303 	lsl.w	r3, r2, r3
   bade4:	ea03 0a0a 	and.w	sl, r3, sl
   bade8:	e6e3      	b.n	babb2 <_strtod_l+0x622>
   badea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   badee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   badf2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   badf6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   badfa:	fa01 f308 	lsl.w	r3, r1, r8
   badfe:	9308      	str	r3, [sp, #32]
   bae00:	910d      	str	r1, [sp, #52]	; 0x34
   bae02:	e746      	b.n	bac92 <_strtod_l+0x702>
   bae04:	2300      	movs	r3, #0
   bae06:	9308      	str	r3, [sp, #32]
   bae08:	2301      	movs	r3, #1
   bae0a:	930d      	str	r3, [sp, #52]	; 0x34
   bae0c:	e741      	b.n	bac92 <_strtod_l+0x702>
   bae0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae10:	4642      	mov	r2, r8
   bae12:	4620      	mov	r0, r4
   bae14:	f001 f8fa 	bl	bc00c <__lshift>
   bae18:	9018      	str	r0, [sp, #96]	; 0x60
   bae1a:	2800      	cmp	r0, #0
   bae1c:	f47f af6b 	bne.w	bacf6 <_strtod_l+0x766>
   bae20:	e5fe      	b.n	baa20 <_strtod_l+0x490>
   bae22:	465f      	mov	r7, fp
   bae24:	d16e      	bne.n	baf04 <_strtod_l+0x974>
   bae26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bae28:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bae2c:	b342      	cbz	r2, bae80 <_strtod_l+0x8f0>
   bae2e:	4a32      	ldr	r2, [pc, #200]	; (baef8 <_strtod_l+0x968>)
   bae30:	4293      	cmp	r3, r2
   bae32:	d128      	bne.n	bae86 <_strtod_l+0x8f6>
   bae34:	9b04      	ldr	r3, [sp, #16]
   bae36:	4651      	mov	r1, sl
   bae38:	b1eb      	cbz	r3, bae76 <_strtod_l+0x8e6>
   bae3a:	4b2d      	ldr	r3, [pc, #180]	; (baef0 <_strtod_l+0x960>)
   bae3c:	403b      	ands	r3, r7
   bae3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bae42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bae46:	d819      	bhi.n	bae7c <_strtod_l+0x8ec>
   bae48:	0d1b      	lsrs	r3, r3, #20
   bae4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bae4e:	fa02 f303 	lsl.w	r3, r2, r3
   bae52:	4299      	cmp	r1, r3
   bae54:	d117      	bne.n	bae86 <_strtod_l+0x8f6>
   bae56:	4b29      	ldr	r3, [pc, #164]	; (baefc <_strtod_l+0x96c>)
   bae58:	429f      	cmp	r7, r3
   bae5a:	d102      	bne.n	bae62 <_strtod_l+0x8d2>
   bae5c:	3101      	adds	r1, #1
   bae5e:	f43f addf 	beq.w	baa20 <_strtod_l+0x490>
   bae62:	4b23      	ldr	r3, [pc, #140]	; (baef0 <_strtod_l+0x960>)
   bae64:	403b      	ands	r3, r7
   bae66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bae6a:	f04f 0a00 	mov.w	sl, #0
   bae6e:	9b04      	ldr	r3, [sp, #16]
   bae70:	2b00      	cmp	r3, #0
   bae72:	d1a4      	bne.n	badbe <_strtod_l+0x82e>
   bae74:	e5de      	b.n	baa34 <_strtod_l+0x4a4>
   bae76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bae7a:	e7ea      	b.n	bae52 <_strtod_l+0x8c2>
   bae7c:	4613      	mov	r3, r2
   bae7e:	e7e8      	b.n	bae52 <_strtod_l+0x8c2>
   bae80:	ea53 030a 	orrs.w	r3, r3, sl
   bae84:	d08c      	beq.n	bada0 <_strtod_l+0x810>
   bae86:	9b08      	ldr	r3, [sp, #32]
   bae88:	b1db      	cbz	r3, baec2 <_strtod_l+0x932>
   bae8a:	423b      	tst	r3, r7
   bae8c:	d0ef      	beq.n	bae6e <_strtod_l+0x8de>
   bae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bae90:	9a04      	ldr	r2, [sp, #16]
   bae92:	4650      	mov	r0, sl
   bae94:	4659      	mov	r1, fp
   bae96:	b1c3      	cbz	r3, baeca <_strtod_l+0x93a>
   bae98:	f7ff fb5e 	bl	ba558 <sulp>
   bae9c:	4602      	mov	r2, r0
   bae9e:	460b      	mov	r3, r1
   baea0:	ec51 0b18 	vmov	r0, r1, d8
   baea4:	f7fe fd68 	bl	b9978 <__adddf3>
   baea8:	4682      	mov	sl, r0
   baeaa:	468b      	mov	fp, r1
   baeac:	e7df      	b.n	bae6e <_strtod_l+0x8de>
   baeae:	4013      	ands	r3, r2
   baeb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   baeb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   baeb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   baebc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   baec0:	e7d5      	b.n	bae6e <_strtod_l+0x8de>
   baec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   baec4:	ea13 0f0a 	tst.w	r3, sl
   baec8:	e7e0      	b.n	bae8c <_strtod_l+0x8fc>
   baeca:	f7ff fb45 	bl	ba558 <sulp>
   baece:	4602      	mov	r2, r0
   baed0:	460b      	mov	r3, r1
   baed2:	ec51 0b18 	vmov	r0, r1, d8
   baed6:	f7fe fd4d 	bl	b9974 <__aeabi_dsub>
   baeda:	2200      	movs	r2, #0
   baedc:	2300      	movs	r3, #0
   baede:	4682      	mov	sl, r0
   baee0:	468b      	mov	fp, r1
   baee2:	f7ff f967 	bl	ba1b4 <__aeabi_dcmpeq>
   baee6:	2800      	cmp	r0, #0
   baee8:	d0c1      	beq.n	bae6e <_strtod_l+0x8de>
   baeea:	e611      	b.n	bab10 <_strtod_l+0x580>
   baeec:	fffffc02 	.word	0xfffffc02
   baef0:	7ff00000 	.word	0x7ff00000
   baef4:	39500000 	.word	0x39500000
   baef8:	000fffff 	.word	0x000fffff
   baefc:	7fefffff 	.word	0x7fefffff
   baf00:	000bd2b8 	.word	0x000bd2b8
   baf04:	4631      	mov	r1, r6
   baf06:	4628      	mov	r0, r5
   baf08:	f001 fa6e 	bl	bc3e8 <__ratio>
   baf0c:	ec59 8b10 	vmov	r8, r9, d0
   baf10:	ee10 0a10 	vmov	r0, s0
   baf14:	2200      	movs	r2, #0
   baf16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   baf1a:	4649      	mov	r1, r9
   baf1c:	f7ff f95e 	bl	ba1dc <__aeabi_dcmple>
   baf20:	2800      	cmp	r0, #0
   baf22:	d07a      	beq.n	bb01a <_strtod_l+0xa8a>
   baf24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baf26:	2b00      	cmp	r3, #0
   baf28:	d04a      	beq.n	bafc0 <_strtod_l+0xa30>
   baf2a:	4b95      	ldr	r3, [pc, #596]	; (bb180 <_strtod_l+0xbf0>)
   baf2c:	2200      	movs	r2, #0
   baf2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baf32:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb180 <_strtod_l+0xbf0>
   baf36:	f04f 0800 	mov.w	r8, #0
   baf3a:	4b92      	ldr	r3, [pc, #584]	; (bb184 <_strtod_l+0xbf4>)
   baf3c:	403b      	ands	r3, r7
   baf3e:	930d      	str	r3, [sp, #52]	; 0x34
   baf40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   baf42:	4b91      	ldr	r3, [pc, #580]	; (bb188 <_strtod_l+0xbf8>)
   baf44:	429a      	cmp	r2, r3
   baf46:	f040 80b0 	bne.w	bb0aa <_strtod_l+0xb1a>
   baf4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baf4e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   baf52:	ec4b ab10 	vmov	d0, sl, fp
   baf56:	e9cd 0108 	strd	r0, r1, [sp, #32]
   baf5a:	f001 f96d 	bl	bc238 <__ulp>
   baf5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baf62:	ec53 2b10 	vmov	r2, r3, d0
   baf66:	f7fe febd 	bl	b9ce4 <__aeabi_dmul>
   baf6a:	4652      	mov	r2, sl
   baf6c:	465b      	mov	r3, fp
   baf6e:	f7fe fd03 	bl	b9978 <__adddf3>
   baf72:	460b      	mov	r3, r1
   baf74:	4983      	ldr	r1, [pc, #524]	; (bb184 <_strtod_l+0xbf4>)
   baf76:	4a85      	ldr	r2, [pc, #532]	; (bb18c <_strtod_l+0xbfc>)
   baf78:	4019      	ands	r1, r3
   baf7a:	4291      	cmp	r1, r2
   baf7c:	4682      	mov	sl, r0
   baf7e:	d960      	bls.n	bb042 <_strtod_l+0xab2>
   baf80:	ee18 3a90 	vmov	r3, s17
   baf84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   baf88:	4293      	cmp	r3, r2
   baf8a:	d104      	bne.n	baf96 <_strtod_l+0xa06>
   baf8c:	ee18 3a10 	vmov	r3, s16
   baf90:	3301      	adds	r3, #1
   baf92:	f43f ad45 	beq.w	baa20 <_strtod_l+0x490>
   baf96:	f8df b200 	ldr.w	fp, [pc, #512]	; bb198 <_strtod_l+0xc08>
   baf9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   baf9e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bafa0:	4620      	mov	r0, r4
   bafa2:	f000 fe17 	bl	bbbd4 <_Bfree>
   bafa6:	9905      	ldr	r1, [sp, #20]
   bafa8:	4620      	mov	r0, r4
   bafaa:	f000 fe13 	bl	bbbd4 <_Bfree>
   bafae:	4631      	mov	r1, r6
   bafb0:	4620      	mov	r0, r4
   bafb2:	f000 fe0f 	bl	bbbd4 <_Bfree>
   bafb6:	4629      	mov	r1, r5
   bafb8:	4620      	mov	r0, r4
   bafba:	f000 fe0b 	bl	bbbd4 <_Bfree>
   bafbe:	e61a      	b.n	babf6 <_strtod_l+0x666>
   bafc0:	f1ba 0f00 	cmp.w	sl, #0
   bafc4:	d11b      	bne.n	baffe <_strtod_l+0xa6e>
   bafc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bafca:	b9f3      	cbnz	r3, bb00a <_strtod_l+0xa7a>
   bafcc:	4b6c      	ldr	r3, [pc, #432]	; (bb180 <_strtod_l+0xbf0>)
   bafce:	2200      	movs	r2, #0
   bafd0:	4640      	mov	r0, r8
   bafd2:	4649      	mov	r1, r9
   bafd4:	f7ff f8f8 	bl	ba1c8 <__aeabi_dcmplt>
   bafd8:	b9d0      	cbnz	r0, bb010 <_strtod_l+0xa80>
   bafda:	4640      	mov	r0, r8
   bafdc:	4649      	mov	r1, r9
   bafde:	4b6c      	ldr	r3, [pc, #432]	; (bb190 <_strtod_l+0xc00>)
   bafe0:	2200      	movs	r2, #0
   bafe2:	f7fe fe7f 	bl	b9ce4 <__aeabi_dmul>
   bafe6:	4680      	mov	r8, r0
   bafe8:	4689      	mov	r9, r1
   bafea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bafee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   baff2:	9315      	str	r3, [sp, #84]	; 0x54
   baff4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   baff8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baffc:	e79d      	b.n	baf3a <_strtod_l+0x9aa>
   baffe:	f1ba 0f01 	cmp.w	sl, #1
   bb002:	d102      	bne.n	bb00a <_strtod_l+0xa7a>
   bb004:	2f00      	cmp	r7, #0
   bb006:	f43f ad83 	beq.w	bab10 <_strtod_l+0x580>
   bb00a:	4b62      	ldr	r3, [pc, #392]	; (bb194 <_strtod_l+0xc04>)
   bb00c:	2200      	movs	r2, #0
   bb00e:	e78e      	b.n	baf2e <_strtod_l+0x99e>
   bb010:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb190 <_strtod_l+0xc00>
   bb014:	f04f 0800 	mov.w	r8, #0
   bb018:	e7e7      	b.n	bafea <_strtod_l+0xa5a>
   bb01a:	4b5d      	ldr	r3, [pc, #372]	; (bb190 <_strtod_l+0xc00>)
   bb01c:	4640      	mov	r0, r8
   bb01e:	4649      	mov	r1, r9
   bb020:	2200      	movs	r2, #0
   bb022:	f7fe fe5f 	bl	b9ce4 <__aeabi_dmul>
   bb026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb028:	4680      	mov	r8, r0
   bb02a:	4689      	mov	r9, r1
   bb02c:	b933      	cbnz	r3, bb03c <_strtod_l+0xaac>
   bb02e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb032:	900e      	str	r0, [sp, #56]	; 0x38
   bb034:	930f      	str	r3, [sp, #60]	; 0x3c
   bb036:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb03a:	e7dd      	b.n	baff8 <_strtod_l+0xa68>
   bb03c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb040:	e7f9      	b.n	bb036 <_strtod_l+0xaa6>
   bb042:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb046:	9b04      	ldr	r3, [sp, #16]
   bb048:	2b00      	cmp	r3, #0
   bb04a:	d1a8      	bne.n	baf9e <_strtod_l+0xa0e>
   bb04c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb052:	0d1b      	lsrs	r3, r3, #20
   bb054:	051b      	lsls	r3, r3, #20
   bb056:	429a      	cmp	r2, r3
   bb058:	d1a1      	bne.n	baf9e <_strtod_l+0xa0e>
   bb05a:	4640      	mov	r0, r8
   bb05c:	4649      	mov	r1, r9
   bb05e:	f001 fa61 	bl	bc524 <__aeabi_d2lz>
   bb062:	f7fe fe11 	bl	b9c88 <__aeabi_l2d>
   bb066:	4602      	mov	r2, r0
   bb068:	460b      	mov	r3, r1
   bb06a:	4640      	mov	r0, r8
   bb06c:	4649      	mov	r1, r9
   bb06e:	f7fe fc81 	bl	b9974 <__aeabi_dsub>
   bb072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb074:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb078:	ea43 030a 	orr.w	r3, r3, sl
   bb07c:	4313      	orrs	r3, r2
   bb07e:	4680      	mov	r8, r0
   bb080:	4689      	mov	r9, r1
   bb082:	d055      	beq.n	bb130 <_strtod_l+0xba0>
   bb084:	a336      	add	r3, pc, #216	; (adr r3, bb160 <_strtod_l+0xbd0>)
   bb086:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb08a:	f7ff f89d 	bl	ba1c8 <__aeabi_dcmplt>
   bb08e:	2800      	cmp	r0, #0
   bb090:	f47f acd0 	bne.w	baa34 <_strtod_l+0x4a4>
   bb094:	a334      	add	r3, pc, #208	; (adr r3, bb168 <_strtod_l+0xbd8>)
   bb096:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb09a:	4640      	mov	r0, r8
   bb09c:	4649      	mov	r1, r9
   bb09e:	f7ff f8b1 	bl	ba204 <__aeabi_dcmpgt>
   bb0a2:	2800      	cmp	r0, #0
   bb0a4:	f43f af7b 	beq.w	baf9e <_strtod_l+0xa0e>
   bb0a8:	e4c4      	b.n	baa34 <_strtod_l+0x4a4>
   bb0aa:	9b04      	ldr	r3, [sp, #16]
   bb0ac:	b333      	cbz	r3, bb0fc <_strtod_l+0xb6c>
   bb0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb0b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb0b4:	d822      	bhi.n	bb0fc <_strtod_l+0xb6c>
   bb0b6:	a32e      	add	r3, pc, #184	; (adr r3, bb170 <_strtod_l+0xbe0>)
   bb0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb0bc:	4640      	mov	r0, r8
   bb0be:	4649      	mov	r1, r9
   bb0c0:	f7ff f88c 	bl	ba1dc <__aeabi_dcmple>
   bb0c4:	b1a0      	cbz	r0, bb0f0 <_strtod_l+0xb60>
   bb0c6:	4649      	mov	r1, r9
   bb0c8:	4640      	mov	r0, r8
   bb0ca:	f7ff f8a5 	bl	ba218 <__aeabi_d2uiz>
   bb0ce:	2801      	cmp	r0, #1
   bb0d0:	bf38      	it	cc
   bb0d2:	2001      	movcc	r0, #1
   bb0d4:	f7fe fd8c 	bl	b9bf0 <__aeabi_ui2d>
   bb0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb0da:	4680      	mov	r8, r0
   bb0dc:	4689      	mov	r9, r1
   bb0de:	bb23      	cbnz	r3, bb12a <_strtod_l+0xb9a>
   bb0e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb0e4:	9010      	str	r0, [sp, #64]	; 0x40
   bb0e6:	9311      	str	r3, [sp, #68]	; 0x44
   bb0e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb0ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb0f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb0f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb0f8:	1a9b      	subs	r3, r3, r2
   bb0fa:	9309      	str	r3, [sp, #36]	; 0x24
   bb0fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb100:	eeb0 0a48 	vmov.f32	s0, s16
   bb104:	eef0 0a68 	vmov.f32	s1, s17
   bb108:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb10c:	f001 f894 	bl	bc238 <__ulp>
   bb110:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb114:	ec53 2b10 	vmov	r2, r3, d0
   bb118:	f7fe fde4 	bl	b9ce4 <__aeabi_dmul>
   bb11c:	ec53 2b18 	vmov	r2, r3, d8
   bb120:	f7fe fc2a 	bl	b9978 <__adddf3>
   bb124:	4682      	mov	sl, r0
   bb126:	468b      	mov	fp, r1
   bb128:	e78d      	b.n	bb046 <_strtod_l+0xab6>
   bb12a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb12e:	e7db      	b.n	bb0e8 <_strtod_l+0xb58>
   bb130:	a311      	add	r3, pc, #68	; (adr r3, bb178 <_strtod_l+0xbe8>)
   bb132:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb136:	f7ff f847 	bl	ba1c8 <__aeabi_dcmplt>
   bb13a:	e7b2      	b.n	bb0a2 <_strtod_l+0xb12>
   bb13c:	2300      	movs	r3, #0
   bb13e:	930a      	str	r3, [sp, #40]	; 0x28
   bb140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb144:	6013      	str	r3, [r2, #0]
   bb146:	f7ff ba6b 	b.w	ba620 <_strtod_l+0x90>
   bb14a:	2a65      	cmp	r2, #101	; 0x65
   bb14c:	f43f ab5f 	beq.w	ba80e <_strtod_l+0x27e>
   bb150:	2a45      	cmp	r2, #69	; 0x45
   bb152:	f43f ab5c 	beq.w	ba80e <_strtod_l+0x27e>
   bb156:	2301      	movs	r3, #1
   bb158:	f7ff bb94 	b.w	ba884 <_strtod_l+0x2f4>
   bb15c:	f3af 8000 	nop.w
   bb160:	94a03595 	.word	0x94a03595
   bb164:	3fdfffff 	.word	0x3fdfffff
   bb168:	35afe535 	.word	0x35afe535
   bb16c:	3fe00000 	.word	0x3fe00000
   bb170:	ffc00000 	.word	0xffc00000
   bb174:	41dfffff 	.word	0x41dfffff
   bb178:	94a03595 	.word	0x94a03595
   bb17c:	3fcfffff 	.word	0x3fcfffff
   bb180:	3ff00000 	.word	0x3ff00000
   bb184:	7ff00000 	.word	0x7ff00000
   bb188:	7fe00000 	.word	0x7fe00000
   bb18c:	7c9fffff 	.word	0x7c9fffff
   bb190:	3fe00000 	.word	0x3fe00000
   bb194:	bff00000 	.word	0xbff00000
   bb198:	7fefffff 	.word	0x7fefffff

000bb19c <strtod>:
   bb19c:	460a      	mov	r2, r1
   bb19e:	4601      	mov	r1, r0
   bb1a0:	4802      	ldr	r0, [pc, #8]	; (bb1ac <strtod+0x10>)
   bb1a2:	4b03      	ldr	r3, [pc, #12]	; (bb1b0 <strtod+0x14>)
   bb1a4:	6800      	ldr	r0, [r0, #0]
   bb1a6:	f7ff b9f3 	b.w	ba590 <_strtod_l>
   bb1aa:	bf00      	nop
   bb1ac:	2003dfc0 	.word	0x2003dfc0
   bb1b0:	2003e02c 	.word	0x2003e02c

000bb1b4 <strtok>:
   bb1b4:	4b16      	ldr	r3, [pc, #88]	; (bb210 <strtok+0x5c>)
   bb1b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb1b8:	681e      	ldr	r6, [r3, #0]
   bb1ba:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb1bc:	4605      	mov	r5, r0
   bb1be:	b9fc      	cbnz	r4, bb200 <strtok+0x4c>
   bb1c0:	2050      	movs	r0, #80	; 0x50
   bb1c2:	9101      	str	r1, [sp, #4]
   bb1c4:	f7fc f9ce 	bl	b7564 <malloc>
   bb1c8:	9901      	ldr	r1, [sp, #4]
   bb1ca:	65b0      	str	r0, [r6, #88]	; 0x58
   bb1cc:	4602      	mov	r2, r0
   bb1ce:	b920      	cbnz	r0, bb1da <strtok+0x26>
   bb1d0:	4b10      	ldr	r3, [pc, #64]	; (bb214 <strtok+0x60>)
   bb1d2:	4811      	ldr	r0, [pc, #68]	; (bb218 <strtok+0x64>)
   bb1d4:	2157      	movs	r1, #87	; 0x57
   bb1d6:	f7fc fa0d 	bl	b75f4 <__assert_func>
   bb1da:	e9c0 4400 	strd	r4, r4, [r0]
   bb1de:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb1e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb1e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb1ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb1ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb1f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb1f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb1fa:	6184      	str	r4, [r0, #24]
   bb1fc:	7704      	strb	r4, [r0, #28]
   bb1fe:	6244      	str	r4, [r0, #36]	; 0x24
   bb200:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb202:	2301      	movs	r3, #1
   bb204:	4628      	mov	r0, r5
   bb206:	b002      	add	sp, #8
   bb208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb20c:	f000 b806 	b.w	bb21c <__strtok_r>
   bb210:	2003dfc0 	.word	0x2003dfc0
   bb214:	000bd1ed 	.word	0x000bd1ed
   bb218:	000bd2e0 	.word	0x000bd2e0

000bb21c <__strtok_r>:
   bb21c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb21e:	b908      	cbnz	r0, bb224 <__strtok_r+0x8>
   bb220:	6810      	ldr	r0, [r2, #0]
   bb222:	b188      	cbz	r0, bb248 <__strtok_r+0x2c>
   bb224:	4604      	mov	r4, r0
   bb226:	4620      	mov	r0, r4
   bb228:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb22c:	460f      	mov	r7, r1
   bb22e:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb232:	b91e      	cbnz	r6, bb23c <__strtok_r+0x20>
   bb234:	b965      	cbnz	r5, bb250 <__strtok_r+0x34>
   bb236:	6015      	str	r5, [r2, #0]
   bb238:	4628      	mov	r0, r5
   bb23a:	e005      	b.n	bb248 <__strtok_r+0x2c>
   bb23c:	42b5      	cmp	r5, r6
   bb23e:	d1f6      	bne.n	bb22e <__strtok_r+0x12>
   bb240:	2b00      	cmp	r3, #0
   bb242:	d1f0      	bne.n	bb226 <__strtok_r+0xa>
   bb244:	6014      	str	r4, [r2, #0]
   bb246:	7003      	strb	r3, [r0, #0]
   bb248:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb24a:	461c      	mov	r4, r3
   bb24c:	e00c      	b.n	bb268 <__strtok_r+0x4c>
   bb24e:	b915      	cbnz	r5, bb256 <__strtok_r+0x3a>
   bb250:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb254:	460e      	mov	r6, r1
   bb256:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb25a:	42ab      	cmp	r3, r5
   bb25c:	d1f7      	bne.n	bb24e <__strtok_r+0x32>
   bb25e:	2b00      	cmp	r3, #0
   bb260:	d0f3      	beq.n	bb24a <__strtok_r+0x2e>
   bb262:	2300      	movs	r3, #0
   bb264:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb268:	6014      	str	r4, [r2, #0]
   bb26a:	e7ed      	b.n	bb248 <__strtok_r+0x2c>

000bb26c <_strtol_l.constprop.0>:
   bb26c:	2b01      	cmp	r3, #1
   bb26e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb272:	d001      	beq.n	bb278 <_strtol_l.constprop.0+0xc>
   bb274:	2b24      	cmp	r3, #36	; 0x24
   bb276:	d906      	bls.n	bb286 <_strtol_l.constprop.0+0x1a>
   bb278:	f7fc f9b4 	bl	b75e4 <__errno>
   bb27c:	2316      	movs	r3, #22
   bb27e:	6003      	str	r3, [r0, #0]
   bb280:	2000      	movs	r0, #0
   bb282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb286:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb36c <_strtol_l.constprop.0+0x100>
   bb28a:	460d      	mov	r5, r1
   bb28c:	462e      	mov	r6, r5
   bb28e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb292:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb296:	f017 0708 	ands.w	r7, r7, #8
   bb29a:	d1f7      	bne.n	bb28c <_strtol_l.constprop.0+0x20>
   bb29c:	2c2d      	cmp	r4, #45	; 0x2d
   bb29e:	d132      	bne.n	bb306 <_strtol_l.constprop.0+0x9a>
   bb2a0:	782c      	ldrb	r4, [r5, #0]
   bb2a2:	2701      	movs	r7, #1
   bb2a4:	1cb5      	adds	r5, r6, #2
   bb2a6:	2b00      	cmp	r3, #0
   bb2a8:	d05b      	beq.n	bb362 <_strtol_l.constprop.0+0xf6>
   bb2aa:	2b10      	cmp	r3, #16
   bb2ac:	d109      	bne.n	bb2c2 <_strtol_l.constprop.0+0x56>
   bb2ae:	2c30      	cmp	r4, #48	; 0x30
   bb2b0:	d107      	bne.n	bb2c2 <_strtol_l.constprop.0+0x56>
   bb2b2:	782c      	ldrb	r4, [r5, #0]
   bb2b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb2b8:	2c58      	cmp	r4, #88	; 0x58
   bb2ba:	d14d      	bne.n	bb358 <_strtol_l.constprop.0+0xec>
   bb2bc:	786c      	ldrb	r4, [r5, #1]
   bb2be:	2310      	movs	r3, #16
   bb2c0:	3502      	adds	r5, #2
   bb2c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb2c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb2ca:	f04f 0c00 	mov.w	ip, #0
   bb2ce:	fbb8 f9f3 	udiv	r9, r8, r3
   bb2d2:	4666      	mov	r6, ip
   bb2d4:	fb03 8a19 	mls	sl, r3, r9, r8
   bb2d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb2dc:	f1be 0f09 	cmp.w	lr, #9
   bb2e0:	d816      	bhi.n	bb310 <_strtol_l.constprop.0+0xa4>
   bb2e2:	4674      	mov	r4, lr
   bb2e4:	42a3      	cmp	r3, r4
   bb2e6:	dd24      	ble.n	bb332 <_strtol_l.constprop.0+0xc6>
   bb2e8:	f1bc 0f00 	cmp.w	ip, #0
   bb2ec:	db1e      	blt.n	bb32c <_strtol_l.constprop.0+0xc0>
   bb2ee:	45b1      	cmp	r9, r6
   bb2f0:	d31c      	bcc.n	bb32c <_strtol_l.constprop.0+0xc0>
   bb2f2:	d101      	bne.n	bb2f8 <_strtol_l.constprop.0+0x8c>
   bb2f4:	45a2      	cmp	sl, r4
   bb2f6:	db19      	blt.n	bb32c <_strtol_l.constprop.0+0xc0>
   bb2f8:	fb06 4603 	mla	r6, r6, r3, r4
   bb2fc:	f04f 0c01 	mov.w	ip, #1
   bb300:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb304:	e7e8      	b.n	bb2d8 <_strtol_l.constprop.0+0x6c>
   bb306:	2c2b      	cmp	r4, #43	; 0x2b
   bb308:	bf04      	itt	eq
   bb30a:	782c      	ldrbeq	r4, [r5, #0]
   bb30c:	1cb5      	addeq	r5, r6, #2
   bb30e:	e7ca      	b.n	bb2a6 <_strtol_l.constprop.0+0x3a>
   bb310:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb314:	f1be 0f19 	cmp.w	lr, #25
   bb318:	d801      	bhi.n	bb31e <_strtol_l.constprop.0+0xb2>
   bb31a:	3c37      	subs	r4, #55	; 0x37
   bb31c:	e7e2      	b.n	bb2e4 <_strtol_l.constprop.0+0x78>
   bb31e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb322:	f1be 0f19 	cmp.w	lr, #25
   bb326:	d804      	bhi.n	bb332 <_strtol_l.constprop.0+0xc6>
   bb328:	3c57      	subs	r4, #87	; 0x57
   bb32a:	e7db      	b.n	bb2e4 <_strtol_l.constprop.0+0x78>
   bb32c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb330:	e7e6      	b.n	bb300 <_strtol_l.constprop.0+0x94>
   bb332:	f1bc 0f00 	cmp.w	ip, #0
   bb336:	da05      	bge.n	bb344 <_strtol_l.constprop.0+0xd8>
   bb338:	2322      	movs	r3, #34	; 0x22
   bb33a:	6003      	str	r3, [r0, #0]
   bb33c:	4646      	mov	r6, r8
   bb33e:	b942      	cbnz	r2, bb352 <_strtol_l.constprop.0+0xe6>
   bb340:	4630      	mov	r0, r6
   bb342:	e79e      	b.n	bb282 <_strtol_l.constprop.0+0x16>
   bb344:	b107      	cbz	r7, bb348 <_strtol_l.constprop.0+0xdc>
   bb346:	4276      	negs	r6, r6
   bb348:	2a00      	cmp	r2, #0
   bb34a:	d0f9      	beq.n	bb340 <_strtol_l.constprop.0+0xd4>
   bb34c:	f1bc 0f00 	cmp.w	ip, #0
   bb350:	d000      	beq.n	bb354 <_strtol_l.constprop.0+0xe8>
   bb352:	1e69      	subs	r1, r5, #1
   bb354:	6011      	str	r1, [r2, #0]
   bb356:	e7f3      	b.n	bb340 <_strtol_l.constprop.0+0xd4>
   bb358:	2430      	movs	r4, #48	; 0x30
   bb35a:	2b00      	cmp	r3, #0
   bb35c:	d1b1      	bne.n	bb2c2 <_strtol_l.constprop.0+0x56>
   bb35e:	2308      	movs	r3, #8
   bb360:	e7af      	b.n	bb2c2 <_strtol_l.constprop.0+0x56>
   bb362:	2c30      	cmp	r4, #48	; 0x30
   bb364:	d0a5      	beq.n	bb2b2 <_strtol_l.constprop.0+0x46>
   bb366:	230a      	movs	r3, #10
   bb368:	e7ab      	b.n	bb2c2 <_strtol_l.constprop.0+0x56>
   bb36a:	bf00      	nop
   bb36c:	000bd360 	.word	0x000bd360

000bb370 <strtol>:
   bb370:	4613      	mov	r3, r2
   bb372:	460a      	mov	r2, r1
   bb374:	4601      	mov	r1, r0
   bb376:	4802      	ldr	r0, [pc, #8]	; (bb380 <strtol+0x10>)
   bb378:	6800      	ldr	r0, [r0, #0]
   bb37a:	f7ff bf77 	b.w	bb26c <_strtol_l.constprop.0>
   bb37e:	bf00      	nop
   bb380:	2003dfc0 	.word	0x2003dfc0

000bb384 <__register_exitproc>:
   bb384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb388:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb444 <__register_exitproc+0xc0>
   bb38c:	4606      	mov	r6, r0
   bb38e:	f8d8 0000 	ldr.w	r0, [r8]
   bb392:	461f      	mov	r7, r3
   bb394:	460d      	mov	r5, r1
   bb396:	4691      	mov	r9, r2
   bb398:	f000 fbc6 	bl	bbb28 <__retarget_lock_acquire_recursive>
   bb39c:	4b25      	ldr	r3, [pc, #148]	; (bb434 <__register_exitproc+0xb0>)
   bb39e:	681c      	ldr	r4, [r3, #0]
   bb3a0:	b934      	cbnz	r4, bb3b0 <__register_exitproc+0x2c>
   bb3a2:	4c25      	ldr	r4, [pc, #148]	; (bb438 <__register_exitproc+0xb4>)
   bb3a4:	601c      	str	r4, [r3, #0]
   bb3a6:	4b25      	ldr	r3, [pc, #148]	; (bb43c <__register_exitproc+0xb8>)
   bb3a8:	b113      	cbz	r3, bb3b0 <__register_exitproc+0x2c>
   bb3aa:	681b      	ldr	r3, [r3, #0]
   bb3ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb3b0:	6863      	ldr	r3, [r4, #4]
   bb3b2:	2b1f      	cmp	r3, #31
   bb3b4:	dd07      	ble.n	bb3c6 <__register_exitproc+0x42>
   bb3b6:	f8d8 0000 	ldr.w	r0, [r8]
   bb3ba:	f000 fbb7 	bl	bbb2c <__retarget_lock_release_recursive>
   bb3be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb3c6:	b34e      	cbz	r6, bb41c <__register_exitproc+0x98>
   bb3c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb3cc:	b988      	cbnz	r0, bb3f2 <__register_exitproc+0x6e>
   bb3ce:	4b1c      	ldr	r3, [pc, #112]	; (bb440 <__register_exitproc+0xbc>)
   bb3d0:	b923      	cbnz	r3, bb3dc <__register_exitproc+0x58>
   bb3d2:	f8d8 0000 	ldr.w	r0, [r8]
   bb3d6:	f000 fba8 	bl	bbb2a <__retarget_lock_release>
   bb3da:	e7f0      	b.n	bb3be <__register_exitproc+0x3a>
   bb3dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb3e0:	f7fc f8c0 	bl	b7564 <malloc>
   bb3e4:	2800      	cmp	r0, #0
   bb3e6:	d0f4      	beq.n	bb3d2 <__register_exitproc+0x4e>
   bb3e8:	2300      	movs	r3, #0
   bb3ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb3ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb3f2:	6863      	ldr	r3, [r4, #4]
   bb3f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb3f8:	2201      	movs	r2, #1
   bb3fa:	409a      	lsls	r2, r3
   bb3fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb400:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb404:	4313      	orrs	r3, r2
   bb406:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb40a:	2e02      	cmp	r6, #2
   bb40c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb410:	bf02      	ittt	eq
   bb412:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb416:	4313      	orreq	r3, r2
   bb418:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb41c:	6863      	ldr	r3, [r4, #4]
   bb41e:	f8d8 0000 	ldr.w	r0, [r8]
   bb422:	1c5a      	adds	r2, r3, #1
   bb424:	3302      	adds	r3, #2
   bb426:	6062      	str	r2, [r4, #4]
   bb428:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb42c:	f000 fb7e 	bl	bbb2c <__retarget_lock_release_recursive>
   bb430:	2000      	movs	r0, #0
   bb432:	e7c6      	b.n	bb3c2 <__register_exitproc+0x3e>
   bb434:	2003e7e8 	.word	0x2003e7e8
   bb438:	2003e75c 	.word	0x2003e75c
   bb43c:	00000000 	.word	0x00000000
   bb440:	000b7565 	.word	0x000b7565
   bb444:	2003e024 	.word	0x2003e024

000bb448 <rshift>:
   bb448:	6903      	ldr	r3, [r0, #16]
   bb44a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb44e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb452:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb456:	f100 0414 	add.w	r4, r0, #20
   bb45a:	dd45      	ble.n	bb4e8 <rshift+0xa0>
   bb45c:	f011 011f 	ands.w	r1, r1, #31
   bb460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb468:	d10c      	bne.n	bb484 <rshift+0x3c>
   bb46a:	f100 0710 	add.w	r7, r0, #16
   bb46e:	4629      	mov	r1, r5
   bb470:	42b1      	cmp	r1, r6
   bb472:	d334      	bcc.n	bb4de <rshift+0x96>
   bb474:	1a9b      	subs	r3, r3, r2
   bb476:	009b      	lsls	r3, r3, #2
   bb478:	1eea      	subs	r2, r5, #3
   bb47a:	4296      	cmp	r6, r2
   bb47c:	bf38      	it	cc
   bb47e:	2300      	movcc	r3, #0
   bb480:	4423      	add	r3, r4
   bb482:	e015      	b.n	bb4b0 <rshift+0x68>
   bb484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb488:	f1c1 0820 	rsb	r8, r1, #32
   bb48c:	40cf      	lsrs	r7, r1
   bb48e:	f105 0e04 	add.w	lr, r5, #4
   bb492:	46a1      	mov	r9, r4
   bb494:	4576      	cmp	r6, lr
   bb496:	46f4      	mov	ip, lr
   bb498:	d815      	bhi.n	bb4c6 <rshift+0x7e>
   bb49a:	1a9a      	subs	r2, r3, r2
   bb49c:	0092      	lsls	r2, r2, #2
   bb49e:	3a04      	subs	r2, #4
   bb4a0:	3501      	adds	r5, #1
   bb4a2:	42ae      	cmp	r6, r5
   bb4a4:	bf38      	it	cc
   bb4a6:	2200      	movcc	r2, #0
   bb4a8:	18a3      	adds	r3, r4, r2
   bb4aa:	50a7      	str	r7, [r4, r2]
   bb4ac:	b107      	cbz	r7, bb4b0 <rshift+0x68>
   bb4ae:	3304      	adds	r3, #4
   bb4b0:	1b1a      	subs	r2, r3, r4
   bb4b2:	42a3      	cmp	r3, r4
   bb4b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb4b8:	bf08      	it	eq
   bb4ba:	2300      	moveq	r3, #0
   bb4bc:	6102      	str	r2, [r0, #16]
   bb4be:	bf08      	it	eq
   bb4c0:	6143      	streq	r3, [r0, #20]
   bb4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb4c6:	f8dc c000 	ldr.w	ip, [ip]
   bb4ca:	fa0c fc08 	lsl.w	ip, ip, r8
   bb4ce:	ea4c 0707 	orr.w	r7, ip, r7
   bb4d2:	f849 7b04 	str.w	r7, [r9], #4
   bb4d6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb4da:	40cf      	lsrs	r7, r1
   bb4dc:	e7da      	b.n	bb494 <rshift+0x4c>
   bb4de:	f851 cb04 	ldr.w	ip, [r1], #4
   bb4e2:	f847 cf04 	str.w	ip, [r7, #4]!
   bb4e6:	e7c3      	b.n	bb470 <rshift+0x28>
   bb4e8:	4623      	mov	r3, r4
   bb4ea:	e7e1      	b.n	bb4b0 <rshift+0x68>

000bb4ec <__hexdig_fun>:
   bb4ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb4f0:	2b09      	cmp	r3, #9
   bb4f2:	d802      	bhi.n	bb4fa <__hexdig_fun+0xe>
   bb4f4:	3820      	subs	r0, #32
   bb4f6:	b2c0      	uxtb	r0, r0
   bb4f8:	4770      	bx	lr
   bb4fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb4fe:	2b05      	cmp	r3, #5
   bb500:	d801      	bhi.n	bb506 <__hexdig_fun+0x1a>
   bb502:	3847      	subs	r0, #71	; 0x47
   bb504:	e7f7      	b.n	bb4f6 <__hexdig_fun+0xa>
   bb506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb50a:	2b05      	cmp	r3, #5
   bb50c:	d801      	bhi.n	bb512 <__hexdig_fun+0x26>
   bb50e:	3827      	subs	r0, #39	; 0x27
   bb510:	e7f1      	b.n	bb4f6 <__hexdig_fun+0xa>
   bb512:	2000      	movs	r0, #0
   bb514:	4770      	bx	lr
	...

000bb518 <__gethex>:
   bb518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb51c:	ed2d 8b02 	vpush	{d8}
   bb520:	b089      	sub	sp, #36	; 0x24
   bb522:	ee08 0a10 	vmov	s16, r0
   bb526:	9304      	str	r3, [sp, #16]
   bb528:	4bb4      	ldr	r3, [pc, #720]	; (bb7fc <__gethex+0x2e4>)
   bb52a:	681b      	ldr	r3, [r3, #0]
   bb52c:	9301      	str	r3, [sp, #4]
   bb52e:	4618      	mov	r0, r3
   bb530:	468b      	mov	fp, r1
   bb532:	4690      	mov	r8, r2
   bb534:	f7fe ffcb 	bl	ba4ce <strlen>
   bb538:	9b01      	ldr	r3, [sp, #4]
   bb53a:	f8db 2000 	ldr.w	r2, [fp]
   bb53e:	4403      	add	r3, r0
   bb540:	4682      	mov	sl, r0
   bb542:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb546:	9305      	str	r3, [sp, #20]
   bb548:	1c93      	adds	r3, r2, #2
   bb54a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb54e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb552:	32fe      	adds	r2, #254	; 0xfe
   bb554:	18d1      	adds	r1, r2, r3
   bb556:	461f      	mov	r7, r3
   bb558:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb55c:	9100      	str	r1, [sp, #0]
   bb55e:	2830      	cmp	r0, #48	; 0x30
   bb560:	d0f8      	beq.n	bb554 <__gethex+0x3c>
   bb562:	f7ff ffc3 	bl	bb4ec <__hexdig_fun>
   bb566:	4604      	mov	r4, r0
   bb568:	2800      	cmp	r0, #0
   bb56a:	d13a      	bne.n	bb5e2 <__gethex+0xca>
   bb56c:	9901      	ldr	r1, [sp, #4]
   bb56e:	4652      	mov	r2, sl
   bb570:	4638      	mov	r0, r7
   bb572:	f7fe ffb4 	bl	ba4de <strncmp>
   bb576:	4605      	mov	r5, r0
   bb578:	2800      	cmp	r0, #0
   bb57a:	d168      	bne.n	bb64e <__gethex+0x136>
   bb57c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb580:	eb07 060a 	add.w	r6, r7, sl
   bb584:	f7ff ffb2 	bl	bb4ec <__hexdig_fun>
   bb588:	2800      	cmp	r0, #0
   bb58a:	d062      	beq.n	bb652 <__gethex+0x13a>
   bb58c:	4633      	mov	r3, r6
   bb58e:	7818      	ldrb	r0, [r3, #0]
   bb590:	2830      	cmp	r0, #48	; 0x30
   bb592:	461f      	mov	r7, r3
   bb594:	f103 0301 	add.w	r3, r3, #1
   bb598:	d0f9      	beq.n	bb58e <__gethex+0x76>
   bb59a:	f7ff ffa7 	bl	bb4ec <__hexdig_fun>
   bb59e:	2301      	movs	r3, #1
   bb5a0:	fab0 f480 	clz	r4, r0
   bb5a4:	0964      	lsrs	r4, r4, #5
   bb5a6:	4635      	mov	r5, r6
   bb5a8:	9300      	str	r3, [sp, #0]
   bb5aa:	463a      	mov	r2, r7
   bb5ac:	4616      	mov	r6, r2
   bb5ae:	3201      	adds	r2, #1
   bb5b0:	7830      	ldrb	r0, [r6, #0]
   bb5b2:	f7ff ff9b 	bl	bb4ec <__hexdig_fun>
   bb5b6:	2800      	cmp	r0, #0
   bb5b8:	d1f8      	bne.n	bb5ac <__gethex+0x94>
   bb5ba:	9901      	ldr	r1, [sp, #4]
   bb5bc:	4652      	mov	r2, sl
   bb5be:	4630      	mov	r0, r6
   bb5c0:	f7fe ff8d 	bl	ba4de <strncmp>
   bb5c4:	b980      	cbnz	r0, bb5e8 <__gethex+0xd0>
   bb5c6:	b94d      	cbnz	r5, bb5dc <__gethex+0xc4>
   bb5c8:	eb06 050a 	add.w	r5, r6, sl
   bb5cc:	462a      	mov	r2, r5
   bb5ce:	4616      	mov	r6, r2
   bb5d0:	3201      	adds	r2, #1
   bb5d2:	7830      	ldrb	r0, [r6, #0]
   bb5d4:	f7ff ff8a 	bl	bb4ec <__hexdig_fun>
   bb5d8:	2800      	cmp	r0, #0
   bb5da:	d1f8      	bne.n	bb5ce <__gethex+0xb6>
   bb5dc:	1bad      	subs	r5, r5, r6
   bb5de:	00ad      	lsls	r5, r5, #2
   bb5e0:	e004      	b.n	bb5ec <__gethex+0xd4>
   bb5e2:	2400      	movs	r4, #0
   bb5e4:	4625      	mov	r5, r4
   bb5e6:	e7e0      	b.n	bb5aa <__gethex+0x92>
   bb5e8:	2d00      	cmp	r5, #0
   bb5ea:	d1f7      	bne.n	bb5dc <__gethex+0xc4>
   bb5ec:	7833      	ldrb	r3, [r6, #0]
   bb5ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb5f2:	2b50      	cmp	r3, #80	; 0x50
   bb5f4:	d13b      	bne.n	bb66e <__gethex+0x156>
   bb5f6:	7873      	ldrb	r3, [r6, #1]
   bb5f8:	2b2b      	cmp	r3, #43	; 0x2b
   bb5fa:	d02c      	beq.n	bb656 <__gethex+0x13e>
   bb5fc:	2b2d      	cmp	r3, #45	; 0x2d
   bb5fe:	d02e      	beq.n	bb65e <__gethex+0x146>
   bb600:	1c71      	adds	r1, r6, #1
   bb602:	f04f 0900 	mov.w	r9, #0
   bb606:	7808      	ldrb	r0, [r1, #0]
   bb608:	f7ff ff70 	bl	bb4ec <__hexdig_fun>
   bb60c:	1e43      	subs	r3, r0, #1
   bb60e:	b2db      	uxtb	r3, r3
   bb610:	2b18      	cmp	r3, #24
   bb612:	d82c      	bhi.n	bb66e <__gethex+0x156>
   bb614:	f1a0 0210 	sub.w	r2, r0, #16
   bb618:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb61c:	f7ff ff66 	bl	bb4ec <__hexdig_fun>
   bb620:	1e43      	subs	r3, r0, #1
   bb622:	b2db      	uxtb	r3, r3
   bb624:	2b18      	cmp	r3, #24
   bb626:	d91d      	bls.n	bb664 <__gethex+0x14c>
   bb628:	f1b9 0f00 	cmp.w	r9, #0
   bb62c:	d000      	beq.n	bb630 <__gethex+0x118>
   bb62e:	4252      	negs	r2, r2
   bb630:	4415      	add	r5, r2
   bb632:	f8cb 1000 	str.w	r1, [fp]
   bb636:	b1e4      	cbz	r4, bb672 <__gethex+0x15a>
   bb638:	9b00      	ldr	r3, [sp, #0]
   bb63a:	2b00      	cmp	r3, #0
   bb63c:	bf14      	ite	ne
   bb63e:	2700      	movne	r7, #0
   bb640:	2706      	moveq	r7, #6
   bb642:	4638      	mov	r0, r7
   bb644:	b009      	add	sp, #36	; 0x24
   bb646:	ecbd 8b02 	vpop	{d8}
   bb64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb64e:	463e      	mov	r6, r7
   bb650:	4625      	mov	r5, r4
   bb652:	2401      	movs	r4, #1
   bb654:	e7ca      	b.n	bb5ec <__gethex+0xd4>
   bb656:	f04f 0900 	mov.w	r9, #0
   bb65a:	1cb1      	adds	r1, r6, #2
   bb65c:	e7d3      	b.n	bb606 <__gethex+0xee>
   bb65e:	f04f 0901 	mov.w	r9, #1
   bb662:	e7fa      	b.n	bb65a <__gethex+0x142>
   bb664:	230a      	movs	r3, #10
   bb666:	fb03 0202 	mla	r2, r3, r2, r0
   bb66a:	3a10      	subs	r2, #16
   bb66c:	e7d4      	b.n	bb618 <__gethex+0x100>
   bb66e:	4631      	mov	r1, r6
   bb670:	e7df      	b.n	bb632 <__gethex+0x11a>
   bb672:	1bf3      	subs	r3, r6, r7
   bb674:	3b01      	subs	r3, #1
   bb676:	4621      	mov	r1, r4
   bb678:	2b07      	cmp	r3, #7
   bb67a:	dc0b      	bgt.n	bb694 <__gethex+0x17c>
   bb67c:	ee18 0a10 	vmov	r0, s16
   bb680:	f000 fa68 	bl	bbb54 <_Balloc>
   bb684:	4604      	mov	r4, r0
   bb686:	b940      	cbnz	r0, bb69a <__gethex+0x182>
   bb688:	4b5d      	ldr	r3, [pc, #372]	; (bb800 <__gethex+0x2e8>)
   bb68a:	4602      	mov	r2, r0
   bb68c:	21de      	movs	r1, #222	; 0xde
   bb68e:	485d      	ldr	r0, [pc, #372]	; (bb804 <__gethex+0x2ec>)
   bb690:	f7fb ffb0 	bl	b75f4 <__assert_func>
   bb694:	3101      	adds	r1, #1
   bb696:	105b      	asrs	r3, r3, #1
   bb698:	e7ee      	b.n	bb678 <__gethex+0x160>
   bb69a:	f100 0914 	add.w	r9, r0, #20
   bb69e:	f04f 0b00 	mov.w	fp, #0
   bb6a2:	f1ca 0301 	rsb	r3, sl, #1
   bb6a6:	f8cd 9008 	str.w	r9, [sp, #8]
   bb6aa:	f8cd b000 	str.w	fp, [sp]
   bb6ae:	9306      	str	r3, [sp, #24]
   bb6b0:	42b7      	cmp	r7, r6
   bb6b2:	d340      	bcc.n	bb736 <__gethex+0x21e>
   bb6b4:	9802      	ldr	r0, [sp, #8]
   bb6b6:	9b00      	ldr	r3, [sp, #0]
   bb6b8:	f840 3b04 	str.w	r3, [r0], #4
   bb6bc:	eba0 0009 	sub.w	r0, r0, r9
   bb6c0:	1080      	asrs	r0, r0, #2
   bb6c2:	0146      	lsls	r6, r0, #5
   bb6c4:	6120      	str	r0, [r4, #16]
   bb6c6:	4618      	mov	r0, r3
   bb6c8:	f000 fb36 	bl	bbd38 <__hi0bits>
   bb6cc:	1a30      	subs	r0, r6, r0
   bb6ce:	f8d8 6000 	ldr.w	r6, [r8]
   bb6d2:	42b0      	cmp	r0, r6
   bb6d4:	dd63      	ble.n	bb79e <__gethex+0x286>
   bb6d6:	1b87      	subs	r7, r0, r6
   bb6d8:	4639      	mov	r1, r7
   bb6da:	4620      	mov	r0, r4
   bb6dc:	f000 feda 	bl	bc494 <__any_on>
   bb6e0:	4682      	mov	sl, r0
   bb6e2:	b1a8      	cbz	r0, bb710 <__gethex+0x1f8>
   bb6e4:	1e7b      	subs	r3, r7, #1
   bb6e6:	1159      	asrs	r1, r3, #5
   bb6e8:	f003 021f 	and.w	r2, r3, #31
   bb6ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb6f0:	f04f 0a01 	mov.w	sl, #1
   bb6f4:	fa0a f202 	lsl.w	r2, sl, r2
   bb6f8:	420a      	tst	r2, r1
   bb6fa:	d009      	beq.n	bb710 <__gethex+0x1f8>
   bb6fc:	4553      	cmp	r3, sl
   bb6fe:	dd05      	ble.n	bb70c <__gethex+0x1f4>
   bb700:	1eb9      	subs	r1, r7, #2
   bb702:	4620      	mov	r0, r4
   bb704:	f000 fec6 	bl	bc494 <__any_on>
   bb708:	2800      	cmp	r0, #0
   bb70a:	d145      	bne.n	bb798 <__gethex+0x280>
   bb70c:	f04f 0a02 	mov.w	sl, #2
   bb710:	4639      	mov	r1, r7
   bb712:	4620      	mov	r0, r4
   bb714:	f7ff fe98 	bl	bb448 <rshift>
   bb718:	443d      	add	r5, r7
   bb71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb71e:	42ab      	cmp	r3, r5
   bb720:	da4c      	bge.n	bb7bc <__gethex+0x2a4>
   bb722:	ee18 0a10 	vmov	r0, s16
   bb726:	4621      	mov	r1, r4
   bb728:	f000 fa54 	bl	bbbd4 <_Bfree>
   bb72c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb72e:	2300      	movs	r3, #0
   bb730:	6013      	str	r3, [r2, #0]
   bb732:	27a3      	movs	r7, #163	; 0xa3
   bb734:	e785      	b.n	bb642 <__gethex+0x12a>
   bb736:	1e73      	subs	r3, r6, #1
   bb738:	9a05      	ldr	r2, [sp, #20]
   bb73a:	9303      	str	r3, [sp, #12]
   bb73c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb740:	4293      	cmp	r3, r2
   bb742:	d019      	beq.n	bb778 <__gethex+0x260>
   bb744:	f1bb 0f20 	cmp.w	fp, #32
   bb748:	d107      	bne.n	bb75a <__gethex+0x242>
   bb74a:	9b02      	ldr	r3, [sp, #8]
   bb74c:	9a00      	ldr	r2, [sp, #0]
   bb74e:	f843 2b04 	str.w	r2, [r3], #4
   bb752:	9302      	str	r3, [sp, #8]
   bb754:	2300      	movs	r3, #0
   bb756:	9300      	str	r3, [sp, #0]
   bb758:	469b      	mov	fp, r3
   bb75a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb75e:	f7ff fec5 	bl	bb4ec <__hexdig_fun>
   bb762:	9b00      	ldr	r3, [sp, #0]
   bb764:	f000 000f 	and.w	r0, r0, #15
   bb768:	fa00 f00b 	lsl.w	r0, r0, fp
   bb76c:	4303      	orrs	r3, r0
   bb76e:	9300      	str	r3, [sp, #0]
   bb770:	f10b 0b04 	add.w	fp, fp, #4
   bb774:	9b03      	ldr	r3, [sp, #12]
   bb776:	e00d      	b.n	bb794 <__gethex+0x27c>
   bb778:	9b03      	ldr	r3, [sp, #12]
   bb77a:	9a06      	ldr	r2, [sp, #24]
   bb77c:	4413      	add	r3, r2
   bb77e:	42bb      	cmp	r3, r7
   bb780:	d3e0      	bcc.n	bb744 <__gethex+0x22c>
   bb782:	4618      	mov	r0, r3
   bb784:	9901      	ldr	r1, [sp, #4]
   bb786:	9307      	str	r3, [sp, #28]
   bb788:	4652      	mov	r2, sl
   bb78a:	f7fe fea8 	bl	ba4de <strncmp>
   bb78e:	9b07      	ldr	r3, [sp, #28]
   bb790:	2800      	cmp	r0, #0
   bb792:	d1d7      	bne.n	bb744 <__gethex+0x22c>
   bb794:	461e      	mov	r6, r3
   bb796:	e78b      	b.n	bb6b0 <__gethex+0x198>
   bb798:	f04f 0a03 	mov.w	sl, #3
   bb79c:	e7b8      	b.n	bb710 <__gethex+0x1f8>
   bb79e:	da0a      	bge.n	bb7b6 <__gethex+0x29e>
   bb7a0:	1a37      	subs	r7, r6, r0
   bb7a2:	4621      	mov	r1, r4
   bb7a4:	ee18 0a10 	vmov	r0, s16
   bb7a8:	463a      	mov	r2, r7
   bb7aa:	f000 fc2f 	bl	bc00c <__lshift>
   bb7ae:	1bed      	subs	r5, r5, r7
   bb7b0:	4604      	mov	r4, r0
   bb7b2:	f100 0914 	add.w	r9, r0, #20
   bb7b6:	f04f 0a00 	mov.w	sl, #0
   bb7ba:	e7ae      	b.n	bb71a <__gethex+0x202>
   bb7bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb7c0:	42a8      	cmp	r0, r5
   bb7c2:	dd72      	ble.n	bb8aa <__gethex+0x392>
   bb7c4:	1b45      	subs	r5, r0, r5
   bb7c6:	42ae      	cmp	r6, r5
   bb7c8:	dc36      	bgt.n	bb838 <__gethex+0x320>
   bb7ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb7ce:	2b02      	cmp	r3, #2
   bb7d0:	d02a      	beq.n	bb828 <__gethex+0x310>
   bb7d2:	2b03      	cmp	r3, #3
   bb7d4:	d02c      	beq.n	bb830 <__gethex+0x318>
   bb7d6:	2b01      	cmp	r3, #1
   bb7d8:	d11c      	bne.n	bb814 <__gethex+0x2fc>
   bb7da:	42ae      	cmp	r6, r5
   bb7dc:	d11a      	bne.n	bb814 <__gethex+0x2fc>
   bb7de:	2e01      	cmp	r6, #1
   bb7e0:	d112      	bne.n	bb808 <__gethex+0x2f0>
   bb7e2:	9a04      	ldr	r2, [sp, #16]
   bb7e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb7e8:	6013      	str	r3, [r2, #0]
   bb7ea:	2301      	movs	r3, #1
   bb7ec:	6123      	str	r3, [r4, #16]
   bb7ee:	f8c9 3000 	str.w	r3, [r9]
   bb7f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb7f4:	2762      	movs	r7, #98	; 0x62
   bb7f6:	601c      	str	r4, [r3, #0]
   bb7f8:	e723      	b.n	bb642 <__gethex+0x12a>
   bb7fa:	bf00      	nop
   bb7fc:	000bd4f8 	.word	0x000bd4f8
   bb800:	000bd460 	.word	0x000bd460
   bb804:	000bd471 	.word	0x000bd471
   bb808:	1e71      	subs	r1, r6, #1
   bb80a:	4620      	mov	r0, r4
   bb80c:	f000 fe42 	bl	bc494 <__any_on>
   bb810:	2800      	cmp	r0, #0
   bb812:	d1e6      	bne.n	bb7e2 <__gethex+0x2ca>
   bb814:	ee18 0a10 	vmov	r0, s16
   bb818:	4621      	mov	r1, r4
   bb81a:	f000 f9db 	bl	bbbd4 <_Bfree>
   bb81e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb820:	2300      	movs	r3, #0
   bb822:	6013      	str	r3, [r2, #0]
   bb824:	2750      	movs	r7, #80	; 0x50
   bb826:	e70c      	b.n	bb642 <__gethex+0x12a>
   bb828:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb82a:	2b00      	cmp	r3, #0
   bb82c:	d1f2      	bne.n	bb814 <__gethex+0x2fc>
   bb82e:	e7d8      	b.n	bb7e2 <__gethex+0x2ca>
   bb830:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb832:	2b00      	cmp	r3, #0
   bb834:	d1d5      	bne.n	bb7e2 <__gethex+0x2ca>
   bb836:	e7ed      	b.n	bb814 <__gethex+0x2fc>
   bb838:	1e6f      	subs	r7, r5, #1
   bb83a:	f1ba 0f00 	cmp.w	sl, #0
   bb83e:	d131      	bne.n	bb8a4 <__gethex+0x38c>
   bb840:	b127      	cbz	r7, bb84c <__gethex+0x334>
   bb842:	4639      	mov	r1, r7
   bb844:	4620      	mov	r0, r4
   bb846:	f000 fe25 	bl	bc494 <__any_on>
   bb84a:	4682      	mov	sl, r0
   bb84c:	117b      	asrs	r3, r7, #5
   bb84e:	2101      	movs	r1, #1
   bb850:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb854:	f007 071f 	and.w	r7, r7, #31
   bb858:	fa01 f707 	lsl.w	r7, r1, r7
   bb85c:	421f      	tst	r7, r3
   bb85e:	4629      	mov	r1, r5
   bb860:	4620      	mov	r0, r4
   bb862:	bf18      	it	ne
   bb864:	f04a 0a02 	orrne.w	sl, sl, #2
   bb868:	1b76      	subs	r6, r6, r5
   bb86a:	f7ff fded 	bl	bb448 <rshift>
   bb86e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb872:	2702      	movs	r7, #2
   bb874:	f1ba 0f00 	cmp.w	sl, #0
   bb878:	d048      	beq.n	bb90c <__gethex+0x3f4>
   bb87a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb87e:	2b02      	cmp	r3, #2
   bb880:	d015      	beq.n	bb8ae <__gethex+0x396>
   bb882:	2b03      	cmp	r3, #3
   bb884:	d017      	beq.n	bb8b6 <__gethex+0x39e>
   bb886:	2b01      	cmp	r3, #1
   bb888:	d109      	bne.n	bb89e <__gethex+0x386>
   bb88a:	f01a 0f02 	tst.w	sl, #2
   bb88e:	d006      	beq.n	bb89e <__gethex+0x386>
   bb890:	f8d9 0000 	ldr.w	r0, [r9]
   bb894:	ea4a 0a00 	orr.w	sl, sl, r0
   bb898:	f01a 0f01 	tst.w	sl, #1
   bb89c:	d10e      	bne.n	bb8bc <__gethex+0x3a4>
   bb89e:	f047 0710 	orr.w	r7, r7, #16
   bb8a2:	e033      	b.n	bb90c <__gethex+0x3f4>
   bb8a4:	f04f 0a01 	mov.w	sl, #1
   bb8a8:	e7d0      	b.n	bb84c <__gethex+0x334>
   bb8aa:	2701      	movs	r7, #1
   bb8ac:	e7e2      	b.n	bb874 <__gethex+0x35c>
   bb8ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb8b0:	f1c3 0301 	rsb	r3, r3, #1
   bb8b4:	9315      	str	r3, [sp, #84]	; 0x54
   bb8b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb8b8:	2b00      	cmp	r3, #0
   bb8ba:	d0f0      	beq.n	bb89e <__gethex+0x386>
   bb8bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb8c0:	f104 0314 	add.w	r3, r4, #20
   bb8c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb8c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb8cc:	f04f 0c00 	mov.w	ip, #0
   bb8d0:	4618      	mov	r0, r3
   bb8d2:	f853 2b04 	ldr.w	r2, [r3], #4
   bb8d6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bb8da:	d01c      	beq.n	bb916 <__gethex+0x3fe>
   bb8dc:	3201      	adds	r2, #1
   bb8de:	6002      	str	r2, [r0, #0]
   bb8e0:	2f02      	cmp	r7, #2
   bb8e2:	f104 0314 	add.w	r3, r4, #20
   bb8e6:	d13f      	bne.n	bb968 <__gethex+0x450>
   bb8e8:	f8d8 2000 	ldr.w	r2, [r8]
   bb8ec:	3a01      	subs	r2, #1
   bb8ee:	42b2      	cmp	r2, r6
   bb8f0:	d10a      	bne.n	bb908 <__gethex+0x3f0>
   bb8f2:	1171      	asrs	r1, r6, #5
   bb8f4:	2201      	movs	r2, #1
   bb8f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb8fa:	f006 061f 	and.w	r6, r6, #31
   bb8fe:	fa02 f606 	lsl.w	r6, r2, r6
   bb902:	421e      	tst	r6, r3
   bb904:	bf18      	it	ne
   bb906:	4617      	movne	r7, r2
   bb908:	f047 0720 	orr.w	r7, r7, #32
   bb90c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb90e:	601c      	str	r4, [r3, #0]
   bb910:	9b04      	ldr	r3, [sp, #16]
   bb912:	601d      	str	r5, [r3, #0]
   bb914:	e695      	b.n	bb642 <__gethex+0x12a>
   bb916:	4299      	cmp	r1, r3
   bb918:	f843 cc04 	str.w	ip, [r3, #-4]
   bb91c:	d8d8      	bhi.n	bb8d0 <__gethex+0x3b8>
   bb91e:	68a3      	ldr	r3, [r4, #8]
   bb920:	459b      	cmp	fp, r3
   bb922:	db19      	blt.n	bb958 <__gethex+0x440>
   bb924:	6861      	ldr	r1, [r4, #4]
   bb926:	ee18 0a10 	vmov	r0, s16
   bb92a:	3101      	adds	r1, #1
   bb92c:	f000 f912 	bl	bbb54 <_Balloc>
   bb930:	4681      	mov	r9, r0
   bb932:	b918      	cbnz	r0, bb93c <__gethex+0x424>
   bb934:	4b1a      	ldr	r3, [pc, #104]	; (bb9a0 <__gethex+0x488>)
   bb936:	4602      	mov	r2, r0
   bb938:	2184      	movs	r1, #132	; 0x84
   bb93a:	e6a8      	b.n	bb68e <__gethex+0x176>
   bb93c:	6922      	ldr	r2, [r4, #16]
   bb93e:	3202      	adds	r2, #2
   bb940:	f104 010c 	add.w	r1, r4, #12
   bb944:	0092      	lsls	r2, r2, #2
   bb946:	300c      	adds	r0, #12
   bb948:	f7fe fd01 	bl	ba34e <memcpy>
   bb94c:	4621      	mov	r1, r4
   bb94e:	ee18 0a10 	vmov	r0, s16
   bb952:	f000 f93f 	bl	bbbd4 <_Bfree>
   bb956:	464c      	mov	r4, r9
   bb958:	6923      	ldr	r3, [r4, #16]
   bb95a:	1c5a      	adds	r2, r3, #1
   bb95c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb960:	6122      	str	r2, [r4, #16]
   bb962:	2201      	movs	r2, #1
   bb964:	615a      	str	r2, [r3, #20]
   bb966:	e7bb      	b.n	bb8e0 <__gethex+0x3c8>
   bb968:	6922      	ldr	r2, [r4, #16]
   bb96a:	455a      	cmp	r2, fp
   bb96c:	dd0b      	ble.n	bb986 <__gethex+0x46e>
   bb96e:	2101      	movs	r1, #1
   bb970:	4620      	mov	r0, r4
   bb972:	f7ff fd69 	bl	bb448 <rshift>
   bb976:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb97a:	3501      	adds	r5, #1
   bb97c:	42ab      	cmp	r3, r5
   bb97e:	f6ff aed0 	blt.w	bb722 <__gethex+0x20a>
   bb982:	2701      	movs	r7, #1
   bb984:	e7c0      	b.n	bb908 <__gethex+0x3f0>
   bb986:	f016 061f 	ands.w	r6, r6, #31
   bb98a:	d0fa      	beq.n	bb982 <__gethex+0x46a>
   bb98c:	4453      	add	r3, sl
   bb98e:	f1c6 0620 	rsb	r6, r6, #32
   bb992:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb996:	f000 f9cf 	bl	bbd38 <__hi0bits>
   bb99a:	42b0      	cmp	r0, r6
   bb99c:	dbe7      	blt.n	bb96e <__gethex+0x456>
   bb99e:	e7f0      	b.n	bb982 <__gethex+0x46a>
   bb9a0:	000bd460 	.word	0x000bd460

000bb9a4 <L_shift>:
   bb9a4:	f1c2 0208 	rsb	r2, r2, #8
   bb9a8:	0092      	lsls	r2, r2, #2
   bb9aa:	b570      	push	{r4, r5, r6, lr}
   bb9ac:	f1c2 0620 	rsb	r6, r2, #32
   bb9b0:	6843      	ldr	r3, [r0, #4]
   bb9b2:	6804      	ldr	r4, [r0, #0]
   bb9b4:	fa03 f506 	lsl.w	r5, r3, r6
   bb9b8:	432c      	orrs	r4, r5
   bb9ba:	40d3      	lsrs	r3, r2
   bb9bc:	6004      	str	r4, [r0, #0]
   bb9be:	f840 3f04 	str.w	r3, [r0, #4]!
   bb9c2:	4288      	cmp	r0, r1
   bb9c4:	d3f4      	bcc.n	bb9b0 <L_shift+0xc>
   bb9c6:	bd70      	pop	{r4, r5, r6, pc}

000bb9c8 <__match>:
   bb9c8:	b530      	push	{r4, r5, lr}
   bb9ca:	6803      	ldr	r3, [r0, #0]
   bb9cc:	3301      	adds	r3, #1
   bb9ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb9d2:	b914      	cbnz	r4, bb9da <__match+0x12>
   bb9d4:	6003      	str	r3, [r0, #0]
   bb9d6:	2001      	movs	r0, #1
   bb9d8:	bd30      	pop	{r4, r5, pc}
   bb9da:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb9de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb9e2:	2d19      	cmp	r5, #25
   bb9e4:	bf98      	it	ls
   bb9e6:	3220      	addls	r2, #32
   bb9e8:	42a2      	cmp	r2, r4
   bb9ea:	d0f0      	beq.n	bb9ce <__match+0x6>
   bb9ec:	2000      	movs	r0, #0
   bb9ee:	e7f3      	b.n	bb9d8 <__match+0x10>

000bb9f0 <__hexnan>:
   bb9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb9f4:	680b      	ldr	r3, [r1, #0]
   bb9f6:	115e      	asrs	r6, r3, #5
   bb9f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb9fc:	f013 031f 	ands.w	r3, r3, #31
   bba00:	b087      	sub	sp, #28
   bba02:	bf18      	it	ne
   bba04:	3604      	addne	r6, #4
   bba06:	2500      	movs	r5, #0
   bba08:	1f37      	subs	r7, r6, #4
   bba0a:	4690      	mov	r8, r2
   bba0c:	6802      	ldr	r2, [r0, #0]
   bba0e:	9301      	str	r3, [sp, #4]
   bba10:	4682      	mov	sl, r0
   bba12:	f846 5c04 	str.w	r5, [r6, #-4]
   bba16:	46b9      	mov	r9, r7
   bba18:	463c      	mov	r4, r7
   bba1a:	9502      	str	r5, [sp, #8]
   bba1c:	46ab      	mov	fp, r5
   bba1e:	7851      	ldrb	r1, [r2, #1]
   bba20:	1c53      	adds	r3, r2, #1
   bba22:	9303      	str	r3, [sp, #12]
   bba24:	b341      	cbz	r1, bba78 <__hexnan+0x88>
   bba26:	4608      	mov	r0, r1
   bba28:	9205      	str	r2, [sp, #20]
   bba2a:	9104      	str	r1, [sp, #16]
   bba2c:	f7ff fd5e 	bl	bb4ec <__hexdig_fun>
   bba30:	2800      	cmp	r0, #0
   bba32:	d14f      	bne.n	bbad4 <__hexnan+0xe4>
   bba34:	9904      	ldr	r1, [sp, #16]
   bba36:	9a05      	ldr	r2, [sp, #20]
   bba38:	2920      	cmp	r1, #32
   bba3a:	d818      	bhi.n	bba6e <__hexnan+0x7e>
   bba3c:	9b02      	ldr	r3, [sp, #8]
   bba3e:	459b      	cmp	fp, r3
   bba40:	dd13      	ble.n	bba6a <__hexnan+0x7a>
   bba42:	454c      	cmp	r4, r9
   bba44:	d206      	bcs.n	bba54 <__hexnan+0x64>
   bba46:	2d07      	cmp	r5, #7
   bba48:	dc04      	bgt.n	bba54 <__hexnan+0x64>
   bba4a:	462a      	mov	r2, r5
   bba4c:	4649      	mov	r1, r9
   bba4e:	4620      	mov	r0, r4
   bba50:	f7ff ffa8 	bl	bb9a4 <L_shift>
   bba54:	4544      	cmp	r4, r8
   bba56:	d950      	bls.n	bbafa <__hexnan+0x10a>
   bba58:	2300      	movs	r3, #0
   bba5a:	f1a4 0904 	sub.w	r9, r4, #4
   bba5e:	f844 3c04 	str.w	r3, [r4, #-4]
   bba62:	f8cd b008 	str.w	fp, [sp, #8]
   bba66:	464c      	mov	r4, r9
   bba68:	461d      	mov	r5, r3
   bba6a:	9a03      	ldr	r2, [sp, #12]
   bba6c:	e7d7      	b.n	bba1e <__hexnan+0x2e>
   bba6e:	2929      	cmp	r1, #41	; 0x29
   bba70:	d156      	bne.n	bbb20 <__hexnan+0x130>
   bba72:	3202      	adds	r2, #2
   bba74:	f8ca 2000 	str.w	r2, [sl]
   bba78:	f1bb 0f00 	cmp.w	fp, #0
   bba7c:	d050      	beq.n	bbb20 <__hexnan+0x130>
   bba7e:	454c      	cmp	r4, r9
   bba80:	d206      	bcs.n	bba90 <__hexnan+0xa0>
   bba82:	2d07      	cmp	r5, #7
   bba84:	dc04      	bgt.n	bba90 <__hexnan+0xa0>
   bba86:	462a      	mov	r2, r5
   bba88:	4649      	mov	r1, r9
   bba8a:	4620      	mov	r0, r4
   bba8c:	f7ff ff8a 	bl	bb9a4 <L_shift>
   bba90:	4544      	cmp	r4, r8
   bba92:	d934      	bls.n	bbafe <__hexnan+0x10e>
   bba94:	f1a8 0204 	sub.w	r2, r8, #4
   bba98:	4623      	mov	r3, r4
   bba9a:	f853 1b04 	ldr.w	r1, [r3], #4
   bba9e:	f842 1f04 	str.w	r1, [r2, #4]!
   bbaa2:	429f      	cmp	r7, r3
   bbaa4:	d2f9      	bcs.n	bba9a <__hexnan+0xaa>
   bbaa6:	1b3b      	subs	r3, r7, r4
   bbaa8:	f023 0303 	bic.w	r3, r3, #3
   bbaac:	3304      	adds	r3, #4
   bbaae:	3401      	adds	r4, #1
   bbab0:	3e03      	subs	r6, #3
   bbab2:	42b4      	cmp	r4, r6
   bbab4:	bf88      	it	hi
   bbab6:	2304      	movhi	r3, #4
   bbab8:	4443      	add	r3, r8
   bbaba:	2200      	movs	r2, #0
   bbabc:	f843 2b04 	str.w	r2, [r3], #4
   bbac0:	429f      	cmp	r7, r3
   bbac2:	d2fb      	bcs.n	bbabc <__hexnan+0xcc>
   bbac4:	683b      	ldr	r3, [r7, #0]
   bbac6:	b91b      	cbnz	r3, bbad0 <__hexnan+0xe0>
   bbac8:	4547      	cmp	r7, r8
   bbaca:	d127      	bne.n	bbb1c <__hexnan+0x12c>
   bbacc:	2301      	movs	r3, #1
   bbace:	603b      	str	r3, [r7, #0]
   bbad0:	2005      	movs	r0, #5
   bbad2:	e026      	b.n	bbb22 <__hexnan+0x132>
   bbad4:	3501      	adds	r5, #1
   bbad6:	2d08      	cmp	r5, #8
   bbad8:	f10b 0b01 	add.w	fp, fp, #1
   bbadc:	dd06      	ble.n	bbaec <__hexnan+0xfc>
   bbade:	4544      	cmp	r4, r8
   bbae0:	d9c3      	bls.n	bba6a <__hexnan+0x7a>
   bbae2:	2300      	movs	r3, #0
   bbae4:	f844 3c04 	str.w	r3, [r4, #-4]
   bbae8:	2501      	movs	r5, #1
   bbaea:	3c04      	subs	r4, #4
   bbaec:	6822      	ldr	r2, [r4, #0]
   bbaee:	f000 000f 	and.w	r0, r0, #15
   bbaf2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bbaf6:	6022      	str	r2, [r4, #0]
   bbaf8:	e7b7      	b.n	bba6a <__hexnan+0x7a>
   bbafa:	2508      	movs	r5, #8
   bbafc:	e7b5      	b.n	bba6a <__hexnan+0x7a>
   bbafe:	9b01      	ldr	r3, [sp, #4]
   bbb00:	2b00      	cmp	r3, #0
   bbb02:	d0df      	beq.n	bbac4 <__hexnan+0xd4>
   bbb04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb08:	f1c3 0320 	rsb	r3, r3, #32
   bbb0c:	fa22 f303 	lsr.w	r3, r2, r3
   bbb10:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bbb14:	401a      	ands	r2, r3
   bbb16:	f846 2c04 	str.w	r2, [r6, #-4]
   bbb1a:	e7d3      	b.n	bbac4 <__hexnan+0xd4>
   bbb1c:	3f04      	subs	r7, #4
   bbb1e:	e7d1      	b.n	bbac4 <__hexnan+0xd4>
   bbb20:	2004      	movs	r0, #4
   bbb22:	b007      	add	sp, #28
   bbb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbb28 <__retarget_lock_acquire_recursive>:
   bbb28:	4770      	bx	lr

000bbb2a <__retarget_lock_release>:
   bbb2a:	4770      	bx	lr

000bbb2c <__retarget_lock_release_recursive>:
   bbb2c:	4770      	bx	lr

000bbb2e <__ascii_mbtowc>:
   bbb2e:	b082      	sub	sp, #8
   bbb30:	b901      	cbnz	r1, bbb34 <__ascii_mbtowc+0x6>
   bbb32:	a901      	add	r1, sp, #4
   bbb34:	b142      	cbz	r2, bbb48 <__ascii_mbtowc+0x1a>
   bbb36:	b14b      	cbz	r3, bbb4c <__ascii_mbtowc+0x1e>
   bbb38:	7813      	ldrb	r3, [r2, #0]
   bbb3a:	600b      	str	r3, [r1, #0]
   bbb3c:	7812      	ldrb	r2, [r2, #0]
   bbb3e:	1e10      	subs	r0, r2, #0
   bbb40:	bf18      	it	ne
   bbb42:	2001      	movne	r0, #1
   bbb44:	b002      	add	sp, #8
   bbb46:	4770      	bx	lr
   bbb48:	4610      	mov	r0, r2
   bbb4a:	e7fb      	b.n	bbb44 <__ascii_mbtowc+0x16>
   bbb4c:	f06f 0001 	mvn.w	r0, #1
   bbb50:	e7f8      	b.n	bbb44 <__ascii_mbtowc+0x16>
	...

000bbb54 <_Balloc>:
   bbb54:	b570      	push	{r4, r5, r6, lr}
   bbb56:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbb58:	4604      	mov	r4, r0
   bbb5a:	460d      	mov	r5, r1
   bbb5c:	b976      	cbnz	r6, bbb7c <_Balloc+0x28>
   bbb5e:	2010      	movs	r0, #16
   bbb60:	f7fb fd00 	bl	b7564 <malloc>
   bbb64:	4602      	mov	r2, r0
   bbb66:	6260      	str	r0, [r4, #36]	; 0x24
   bbb68:	b920      	cbnz	r0, bbb74 <_Balloc+0x20>
   bbb6a:	4b18      	ldr	r3, [pc, #96]	; (bbbcc <_Balloc+0x78>)
   bbb6c:	4818      	ldr	r0, [pc, #96]	; (bbbd0 <_Balloc+0x7c>)
   bbb6e:	2166      	movs	r1, #102	; 0x66
   bbb70:	f7fb fd40 	bl	b75f4 <__assert_func>
   bbb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbb78:	6006      	str	r6, [r0, #0]
   bbb7a:	60c6      	str	r6, [r0, #12]
   bbb7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bbb7e:	68f3      	ldr	r3, [r6, #12]
   bbb80:	b183      	cbz	r3, bbba4 <_Balloc+0x50>
   bbb82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbb84:	68db      	ldr	r3, [r3, #12]
   bbb86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bbb8a:	b9b8      	cbnz	r0, bbbbc <_Balloc+0x68>
   bbb8c:	2101      	movs	r1, #1
   bbb8e:	fa01 f605 	lsl.w	r6, r1, r5
   bbb92:	1d72      	adds	r2, r6, #5
   bbb94:	0092      	lsls	r2, r2, #2
   bbb96:	4620      	mov	r0, r4
   bbb98:	f000 fc9d 	bl	bc4d6 <_calloc_r>
   bbb9c:	b160      	cbz	r0, bbbb8 <_Balloc+0x64>
   bbb9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bbba2:	e00e      	b.n	bbbc2 <_Balloc+0x6e>
   bbba4:	2221      	movs	r2, #33	; 0x21
   bbba6:	2104      	movs	r1, #4
   bbba8:	4620      	mov	r0, r4
   bbbaa:	f000 fc94 	bl	bc4d6 <_calloc_r>
   bbbae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbbb0:	60f0      	str	r0, [r6, #12]
   bbbb2:	68db      	ldr	r3, [r3, #12]
   bbbb4:	2b00      	cmp	r3, #0
   bbbb6:	d1e4      	bne.n	bbb82 <_Balloc+0x2e>
   bbbb8:	2000      	movs	r0, #0
   bbbba:	bd70      	pop	{r4, r5, r6, pc}
   bbbbc:	6802      	ldr	r2, [r0, #0]
   bbbbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bbbc2:	2300      	movs	r3, #0
   bbbc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bbbc8:	e7f7      	b.n	bbbba <_Balloc+0x66>
   bbbca:	bf00      	nop
   bbbcc:	000bd1ed 	.word	0x000bd1ed
   bbbd0:	000bd50c 	.word	0x000bd50c

000bbbd4 <_Bfree>:
   bbbd4:	b570      	push	{r4, r5, r6, lr}
   bbbd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbbd8:	4605      	mov	r5, r0
   bbbda:	460c      	mov	r4, r1
   bbbdc:	b976      	cbnz	r6, bbbfc <_Bfree+0x28>
   bbbde:	2010      	movs	r0, #16
   bbbe0:	f7fb fcc0 	bl	b7564 <malloc>
   bbbe4:	4602      	mov	r2, r0
   bbbe6:	6268      	str	r0, [r5, #36]	; 0x24
   bbbe8:	b920      	cbnz	r0, bbbf4 <_Bfree+0x20>
   bbbea:	4b09      	ldr	r3, [pc, #36]	; (bbc10 <_Bfree+0x3c>)
   bbbec:	4809      	ldr	r0, [pc, #36]	; (bbc14 <_Bfree+0x40>)
   bbbee:	218a      	movs	r1, #138	; 0x8a
   bbbf0:	f7fb fd00 	bl	b75f4 <__assert_func>
   bbbf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbbf8:	6006      	str	r6, [r0, #0]
   bbbfa:	60c6      	str	r6, [r0, #12]
   bbbfc:	b13c      	cbz	r4, bbc0e <_Bfree+0x3a>
   bbbfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bbc00:	6862      	ldr	r2, [r4, #4]
   bbc02:	68db      	ldr	r3, [r3, #12]
   bbc04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bbc08:	6021      	str	r1, [r4, #0]
   bbc0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bbc0e:	bd70      	pop	{r4, r5, r6, pc}
   bbc10:	000bd1ed 	.word	0x000bd1ed
   bbc14:	000bd50c 	.word	0x000bd50c

000bbc18 <__multadd>:
   bbc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbc1c:	690d      	ldr	r5, [r1, #16]
   bbc1e:	4607      	mov	r7, r0
   bbc20:	460c      	mov	r4, r1
   bbc22:	461e      	mov	r6, r3
   bbc24:	f101 0c14 	add.w	ip, r1, #20
   bbc28:	2000      	movs	r0, #0
   bbc2a:	f8dc 3000 	ldr.w	r3, [ip]
   bbc2e:	b299      	uxth	r1, r3
   bbc30:	fb02 6101 	mla	r1, r2, r1, r6
   bbc34:	0c1e      	lsrs	r6, r3, #16
   bbc36:	0c0b      	lsrs	r3, r1, #16
   bbc38:	fb02 3306 	mla	r3, r2, r6, r3
   bbc3c:	b289      	uxth	r1, r1
   bbc3e:	3001      	adds	r0, #1
   bbc40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bbc44:	4285      	cmp	r5, r0
   bbc46:	f84c 1b04 	str.w	r1, [ip], #4
   bbc4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bbc4e:	dcec      	bgt.n	bbc2a <__multadd+0x12>
   bbc50:	b30e      	cbz	r6, bbc96 <__multadd+0x7e>
   bbc52:	68a3      	ldr	r3, [r4, #8]
   bbc54:	42ab      	cmp	r3, r5
   bbc56:	dc19      	bgt.n	bbc8c <__multadd+0x74>
   bbc58:	6861      	ldr	r1, [r4, #4]
   bbc5a:	4638      	mov	r0, r7
   bbc5c:	3101      	adds	r1, #1
   bbc5e:	f7ff ff79 	bl	bbb54 <_Balloc>
   bbc62:	4680      	mov	r8, r0
   bbc64:	b928      	cbnz	r0, bbc72 <__multadd+0x5a>
   bbc66:	4602      	mov	r2, r0
   bbc68:	4b0c      	ldr	r3, [pc, #48]	; (bbc9c <__multadd+0x84>)
   bbc6a:	480d      	ldr	r0, [pc, #52]	; (bbca0 <__multadd+0x88>)
   bbc6c:	21b5      	movs	r1, #181	; 0xb5
   bbc6e:	f7fb fcc1 	bl	b75f4 <__assert_func>
   bbc72:	6922      	ldr	r2, [r4, #16]
   bbc74:	3202      	adds	r2, #2
   bbc76:	f104 010c 	add.w	r1, r4, #12
   bbc7a:	0092      	lsls	r2, r2, #2
   bbc7c:	300c      	adds	r0, #12
   bbc7e:	f7fe fb66 	bl	ba34e <memcpy>
   bbc82:	4621      	mov	r1, r4
   bbc84:	4638      	mov	r0, r7
   bbc86:	f7ff ffa5 	bl	bbbd4 <_Bfree>
   bbc8a:	4644      	mov	r4, r8
   bbc8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bbc90:	3501      	adds	r5, #1
   bbc92:	615e      	str	r6, [r3, #20]
   bbc94:	6125      	str	r5, [r4, #16]
   bbc96:	4620      	mov	r0, r4
   bbc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbc9c:	000bd460 	.word	0x000bd460
   bbca0:	000bd50c 	.word	0x000bd50c

000bbca4 <__s2b>:
   bbca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbca8:	460c      	mov	r4, r1
   bbcaa:	4615      	mov	r5, r2
   bbcac:	461f      	mov	r7, r3
   bbcae:	2209      	movs	r2, #9
   bbcb0:	3308      	adds	r3, #8
   bbcb2:	4606      	mov	r6, r0
   bbcb4:	fb93 f3f2 	sdiv	r3, r3, r2
   bbcb8:	2100      	movs	r1, #0
   bbcba:	2201      	movs	r2, #1
   bbcbc:	429a      	cmp	r2, r3
   bbcbe:	db09      	blt.n	bbcd4 <__s2b+0x30>
   bbcc0:	4630      	mov	r0, r6
   bbcc2:	f7ff ff47 	bl	bbb54 <_Balloc>
   bbcc6:	b940      	cbnz	r0, bbcda <__s2b+0x36>
   bbcc8:	4602      	mov	r2, r0
   bbcca:	4b19      	ldr	r3, [pc, #100]	; (bbd30 <__s2b+0x8c>)
   bbccc:	4819      	ldr	r0, [pc, #100]	; (bbd34 <__s2b+0x90>)
   bbcce:	21ce      	movs	r1, #206	; 0xce
   bbcd0:	f7fb fc90 	bl	b75f4 <__assert_func>
   bbcd4:	0052      	lsls	r2, r2, #1
   bbcd6:	3101      	adds	r1, #1
   bbcd8:	e7f0      	b.n	bbcbc <__s2b+0x18>
   bbcda:	9b08      	ldr	r3, [sp, #32]
   bbcdc:	6143      	str	r3, [r0, #20]
   bbcde:	2d09      	cmp	r5, #9
   bbce0:	f04f 0301 	mov.w	r3, #1
   bbce4:	6103      	str	r3, [r0, #16]
   bbce6:	dd16      	ble.n	bbd16 <__s2b+0x72>
   bbce8:	f104 0909 	add.w	r9, r4, #9
   bbcec:	46c8      	mov	r8, r9
   bbcee:	442c      	add	r4, r5
   bbcf0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bbcf4:	4601      	mov	r1, r0
   bbcf6:	3b30      	subs	r3, #48	; 0x30
   bbcf8:	220a      	movs	r2, #10
   bbcfa:	4630      	mov	r0, r6
   bbcfc:	f7ff ff8c 	bl	bbc18 <__multadd>
   bbd00:	45a0      	cmp	r8, r4
   bbd02:	d1f5      	bne.n	bbcf0 <__s2b+0x4c>
   bbd04:	f1a5 0408 	sub.w	r4, r5, #8
   bbd08:	444c      	add	r4, r9
   bbd0a:	1b2d      	subs	r5, r5, r4
   bbd0c:	1963      	adds	r3, r4, r5
   bbd0e:	42bb      	cmp	r3, r7
   bbd10:	db04      	blt.n	bbd1c <__s2b+0x78>
   bbd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbd16:	340a      	adds	r4, #10
   bbd18:	2509      	movs	r5, #9
   bbd1a:	e7f6      	b.n	bbd0a <__s2b+0x66>
   bbd1c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbd20:	4601      	mov	r1, r0
   bbd22:	3b30      	subs	r3, #48	; 0x30
   bbd24:	220a      	movs	r2, #10
   bbd26:	4630      	mov	r0, r6
   bbd28:	f7ff ff76 	bl	bbc18 <__multadd>
   bbd2c:	e7ee      	b.n	bbd0c <__s2b+0x68>
   bbd2e:	bf00      	nop
   bbd30:	000bd460 	.word	0x000bd460
   bbd34:	000bd50c 	.word	0x000bd50c

000bbd38 <__hi0bits>:
   bbd38:	0c03      	lsrs	r3, r0, #16
   bbd3a:	041b      	lsls	r3, r3, #16
   bbd3c:	b9d3      	cbnz	r3, bbd74 <__hi0bits+0x3c>
   bbd3e:	0400      	lsls	r0, r0, #16
   bbd40:	2310      	movs	r3, #16
   bbd42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bbd46:	bf04      	itt	eq
   bbd48:	0200      	lsleq	r0, r0, #8
   bbd4a:	3308      	addeq	r3, #8
   bbd4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bbd50:	bf04      	itt	eq
   bbd52:	0100      	lsleq	r0, r0, #4
   bbd54:	3304      	addeq	r3, #4
   bbd56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bbd5a:	bf04      	itt	eq
   bbd5c:	0080      	lsleq	r0, r0, #2
   bbd5e:	3302      	addeq	r3, #2
   bbd60:	2800      	cmp	r0, #0
   bbd62:	db05      	blt.n	bbd70 <__hi0bits+0x38>
   bbd64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bbd68:	f103 0301 	add.w	r3, r3, #1
   bbd6c:	bf08      	it	eq
   bbd6e:	2320      	moveq	r3, #32
   bbd70:	4618      	mov	r0, r3
   bbd72:	4770      	bx	lr
   bbd74:	2300      	movs	r3, #0
   bbd76:	e7e4      	b.n	bbd42 <__hi0bits+0xa>

000bbd78 <__lo0bits>:
   bbd78:	6803      	ldr	r3, [r0, #0]
   bbd7a:	f013 0207 	ands.w	r2, r3, #7
   bbd7e:	4601      	mov	r1, r0
   bbd80:	d00b      	beq.n	bbd9a <__lo0bits+0x22>
   bbd82:	07da      	lsls	r2, r3, #31
   bbd84:	d423      	bmi.n	bbdce <__lo0bits+0x56>
   bbd86:	0798      	lsls	r0, r3, #30
   bbd88:	bf49      	itett	mi
   bbd8a:	085b      	lsrmi	r3, r3, #1
   bbd8c:	089b      	lsrpl	r3, r3, #2
   bbd8e:	2001      	movmi	r0, #1
   bbd90:	600b      	strmi	r3, [r1, #0]
   bbd92:	bf5c      	itt	pl
   bbd94:	600b      	strpl	r3, [r1, #0]
   bbd96:	2002      	movpl	r0, #2
   bbd98:	4770      	bx	lr
   bbd9a:	b298      	uxth	r0, r3
   bbd9c:	b9a8      	cbnz	r0, bbdca <__lo0bits+0x52>
   bbd9e:	0c1b      	lsrs	r3, r3, #16
   bbda0:	2010      	movs	r0, #16
   bbda2:	b2da      	uxtb	r2, r3
   bbda4:	b90a      	cbnz	r2, bbdaa <__lo0bits+0x32>
   bbda6:	3008      	adds	r0, #8
   bbda8:	0a1b      	lsrs	r3, r3, #8
   bbdaa:	071a      	lsls	r2, r3, #28
   bbdac:	bf04      	itt	eq
   bbdae:	091b      	lsreq	r3, r3, #4
   bbdb0:	3004      	addeq	r0, #4
   bbdb2:	079a      	lsls	r2, r3, #30
   bbdb4:	bf04      	itt	eq
   bbdb6:	089b      	lsreq	r3, r3, #2
   bbdb8:	3002      	addeq	r0, #2
   bbdba:	07da      	lsls	r2, r3, #31
   bbdbc:	d403      	bmi.n	bbdc6 <__lo0bits+0x4e>
   bbdbe:	085b      	lsrs	r3, r3, #1
   bbdc0:	f100 0001 	add.w	r0, r0, #1
   bbdc4:	d005      	beq.n	bbdd2 <__lo0bits+0x5a>
   bbdc6:	600b      	str	r3, [r1, #0]
   bbdc8:	4770      	bx	lr
   bbdca:	4610      	mov	r0, r2
   bbdcc:	e7e9      	b.n	bbda2 <__lo0bits+0x2a>
   bbdce:	2000      	movs	r0, #0
   bbdd0:	4770      	bx	lr
   bbdd2:	2020      	movs	r0, #32
   bbdd4:	4770      	bx	lr
	...

000bbdd8 <__i2b>:
   bbdd8:	b510      	push	{r4, lr}
   bbdda:	460c      	mov	r4, r1
   bbddc:	2101      	movs	r1, #1
   bbdde:	f7ff feb9 	bl	bbb54 <_Balloc>
   bbde2:	4602      	mov	r2, r0
   bbde4:	b928      	cbnz	r0, bbdf2 <__i2b+0x1a>
   bbde6:	4b05      	ldr	r3, [pc, #20]	; (bbdfc <__i2b+0x24>)
   bbde8:	4805      	ldr	r0, [pc, #20]	; (bbe00 <__i2b+0x28>)
   bbdea:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbdee:	f7fb fc01 	bl	b75f4 <__assert_func>
   bbdf2:	2301      	movs	r3, #1
   bbdf4:	6144      	str	r4, [r0, #20]
   bbdf6:	6103      	str	r3, [r0, #16]
   bbdf8:	bd10      	pop	{r4, pc}
   bbdfa:	bf00      	nop
   bbdfc:	000bd460 	.word	0x000bd460
   bbe00:	000bd50c 	.word	0x000bd50c

000bbe04 <__multiply>:
   bbe04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe08:	4691      	mov	r9, r2
   bbe0a:	690a      	ldr	r2, [r1, #16]
   bbe0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbe10:	429a      	cmp	r2, r3
   bbe12:	bfb8      	it	lt
   bbe14:	460b      	movlt	r3, r1
   bbe16:	460c      	mov	r4, r1
   bbe18:	bfbc      	itt	lt
   bbe1a:	464c      	movlt	r4, r9
   bbe1c:	4699      	movlt	r9, r3
   bbe1e:	6927      	ldr	r7, [r4, #16]
   bbe20:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbe24:	68a3      	ldr	r3, [r4, #8]
   bbe26:	6861      	ldr	r1, [r4, #4]
   bbe28:	eb07 060a 	add.w	r6, r7, sl
   bbe2c:	42b3      	cmp	r3, r6
   bbe2e:	b085      	sub	sp, #20
   bbe30:	bfb8      	it	lt
   bbe32:	3101      	addlt	r1, #1
   bbe34:	f7ff fe8e 	bl	bbb54 <_Balloc>
   bbe38:	b930      	cbnz	r0, bbe48 <__multiply+0x44>
   bbe3a:	4602      	mov	r2, r0
   bbe3c:	4b44      	ldr	r3, [pc, #272]	; (bbf50 <__multiply+0x14c>)
   bbe3e:	4845      	ldr	r0, [pc, #276]	; (bbf54 <__multiply+0x150>)
   bbe40:	f240 115d 	movw	r1, #349	; 0x15d
   bbe44:	f7fb fbd6 	bl	b75f4 <__assert_func>
   bbe48:	f100 0514 	add.w	r5, r0, #20
   bbe4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbe50:	462b      	mov	r3, r5
   bbe52:	2200      	movs	r2, #0
   bbe54:	4543      	cmp	r3, r8
   bbe56:	d321      	bcc.n	bbe9c <__multiply+0x98>
   bbe58:	f104 0314 	add.w	r3, r4, #20
   bbe5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbe60:	f109 0314 	add.w	r3, r9, #20
   bbe64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbe68:	9202      	str	r2, [sp, #8]
   bbe6a:	1b3a      	subs	r2, r7, r4
   bbe6c:	3a15      	subs	r2, #21
   bbe6e:	f022 0203 	bic.w	r2, r2, #3
   bbe72:	3204      	adds	r2, #4
   bbe74:	f104 0115 	add.w	r1, r4, #21
   bbe78:	428f      	cmp	r7, r1
   bbe7a:	bf38      	it	cc
   bbe7c:	2204      	movcc	r2, #4
   bbe7e:	9201      	str	r2, [sp, #4]
   bbe80:	9a02      	ldr	r2, [sp, #8]
   bbe82:	9303      	str	r3, [sp, #12]
   bbe84:	429a      	cmp	r2, r3
   bbe86:	d80c      	bhi.n	bbea2 <__multiply+0x9e>
   bbe88:	2e00      	cmp	r6, #0
   bbe8a:	dd03      	ble.n	bbe94 <__multiply+0x90>
   bbe8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbe90:	2b00      	cmp	r3, #0
   bbe92:	d05a      	beq.n	bbf4a <__multiply+0x146>
   bbe94:	6106      	str	r6, [r0, #16]
   bbe96:	b005      	add	sp, #20
   bbe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe9c:	f843 2b04 	str.w	r2, [r3], #4
   bbea0:	e7d8      	b.n	bbe54 <__multiply+0x50>
   bbea2:	f8b3 a000 	ldrh.w	sl, [r3]
   bbea6:	f1ba 0f00 	cmp.w	sl, #0
   bbeaa:	d024      	beq.n	bbef6 <__multiply+0xf2>
   bbeac:	f104 0e14 	add.w	lr, r4, #20
   bbeb0:	46a9      	mov	r9, r5
   bbeb2:	f04f 0c00 	mov.w	ip, #0
   bbeb6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbeba:	f8d9 1000 	ldr.w	r1, [r9]
   bbebe:	fa1f fb82 	uxth.w	fp, r2
   bbec2:	b289      	uxth	r1, r1
   bbec4:	fb0a 110b 	mla	r1, sl, fp, r1
   bbec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbecc:	f8d9 2000 	ldr.w	r2, [r9]
   bbed0:	4461      	add	r1, ip
   bbed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbed6:	fb0a c20b 	mla	r2, sl, fp, ip
   bbeda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbede:	b289      	uxth	r1, r1
   bbee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbee4:	4577      	cmp	r7, lr
   bbee6:	f849 1b04 	str.w	r1, [r9], #4
   bbeea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbeee:	d8e2      	bhi.n	bbeb6 <__multiply+0xb2>
   bbef0:	9a01      	ldr	r2, [sp, #4]
   bbef2:	f845 c002 	str.w	ip, [r5, r2]
   bbef6:	9a03      	ldr	r2, [sp, #12]
   bbef8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbefc:	3304      	adds	r3, #4
   bbefe:	f1b9 0f00 	cmp.w	r9, #0
   bbf02:	d020      	beq.n	bbf46 <__multiply+0x142>
   bbf04:	6829      	ldr	r1, [r5, #0]
   bbf06:	f104 0c14 	add.w	ip, r4, #20
   bbf0a:	46ae      	mov	lr, r5
   bbf0c:	f04f 0a00 	mov.w	sl, #0
   bbf10:	f8bc b000 	ldrh.w	fp, [ip]
   bbf14:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbf18:	fb09 220b 	mla	r2, r9, fp, r2
   bbf1c:	4492      	add	sl, r2
   bbf1e:	b289      	uxth	r1, r1
   bbf20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbf24:	f84e 1b04 	str.w	r1, [lr], #4
   bbf28:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbf2c:	f8be 1000 	ldrh.w	r1, [lr]
   bbf30:	0c12      	lsrs	r2, r2, #16
   bbf32:	fb09 1102 	mla	r1, r9, r2, r1
   bbf36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbf3a:	4567      	cmp	r7, ip
   bbf3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbf40:	d8e6      	bhi.n	bbf10 <__multiply+0x10c>
   bbf42:	9a01      	ldr	r2, [sp, #4]
   bbf44:	50a9      	str	r1, [r5, r2]
   bbf46:	3504      	adds	r5, #4
   bbf48:	e79a      	b.n	bbe80 <__multiply+0x7c>
   bbf4a:	3e01      	subs	r6, #1
   bbf4c:	e79c      	b.n	bbe88 <__multiply+0x84>
   bbf4e:	bf00      	nop
   bbf50:	000bd460 	.word	0x000bd460
   bbf54:	000bd50c 	.word	0x000bd50c

000bbf58 <__pow5mult>:
   bbf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbf5c:	4615      	mov	r5, r2
   bbf5e:	f012 0203 	ands.w	r2, r2, #3
   bbf62:	4606      	mov	r6, r0
   bbf64:	460f      	mov	r7, r1
   bbf66:	d007      	beq.n	bbf78 <__pow5mult+0x20>
   bbf68:	4c25      	ldr	r4, [pc, #148]	; (bc000 <__pow5mult+0xa8>)
   bbf6a:	3a01      	subs	r2, #1
   bbf6c:	2300      	movs	r3, #0
   bbf6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbf72:	f7ff fe51 	bl	bbc18 <__multadd>
   bbf76:	4607      	mov	r7, r0
   bbf78:	10ad      	asrs	r5, r5, #2
   bbf7a:	d03d      	beq.n	bbff8 <__pow5mult+0xa0>
   bbf7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbf7e:	b97c      	cbnz	r4, bbfa0 <__pow5mult+0x48>
   bbf80:	2010      	movs	r0, #16
   bbf82:	f7fb faef 	bl	b7564 <malloc>
   bbf86:	4602      	mov	r2, r0
   bbf88:	6270      	str	r0, [r6, #36]	; 0x24
   bbf8a:	b928      	cbnz	r0, bbf98 <__pow5mult+0x40>
   bbf8c:	4b1d      	ldr	r3, [pc, #116]	; (bc004 <__pow5mult+0xac>)
   bbf8e:	481e      	ldr	r0, [pc, #120]	; (bc008 <__pow5mult+0xb0>)
   bbf90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbf94:	f7fb fb2e 	bl	b75f4 <__assert_func>
   bbf98:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbf9c:	6004      	str	r4, [r0, #0]
   bbf9e:	60c4      	str	r4, [r0, #12]
   bbfa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbfa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbfa8:	b94c      	cbnz	r4, bbfbe <__pow5mult+0x66>
   bbfaa:	f240 2171 	movw	r1, #625	; 0x271
   bbfae:	4630      	mov	r0, r6
   bbfb0:	f7ff ff12 	bl	bbdd8 <__i2b>
   bbfb4:	2300      	movs	r3, #0
   bbfb6:	f8c8 0008 	str.w	r0, [r8, #8]
   bbfba:	4604      	mov	r4, r0
   bbfbc:	6003      	str	r3, [r0, #0]
   bbfbe:	f04f 0900 	mov.w	r9, #0
   bbfc2:	07eb      	lsls	r3, r5, #31
   bbfc4:	d50a      	bpl.n	bbfdc <__pow5mult+0x84>
   bbfc6:	4639      	mov	r1, r7
   bbfc8:	4622      	mov	r2, r4
   bbfca:	4630      	mov	r0, r6
   bbfcc:	f7ff ff1a 	bl	bbe04 <__multiply>
   bbfd0:	4639      	mov	r1, r7
   bbfd2:	4680      	mov	r8, r0
   bbfd4:	4630      	mov	r0, r6
   bbfd6:	f7ff fdfd 	bl	bbbd4 <_Bfree>
   bbfda:	4647      	mov	r7, r8
   bbfdc:	106d      	asrs	r5, r5, #1
   bbfde:	d00b      	beq.n	bbff8 <__pow5mult+0xa0>
   bbfe0:	6820      	ldr	r0, [r4, #0]
   bbfe2:	b938      	cbnz	r0, bbff4 <__pow5mult+0x9c>
   bbfe4:	4622      	mov	r2, r4
   bbfe6:	4621      	mov	r1, r4
   bbfe8:	4630      	mov	r0, r6
   bbfea:	f7ff ff0b 	bl	bbe04 <__multiply>
   bbfee:	6020      	str	r0, [r4, #0]
   bbff0:	f8c0 9000 	str.w	r9, [r0]
   bbff4:	4604      	mov	r4, r0
   bbff6:	e7e4      	b.n	bbfc2 <__pow5mult+0x6a>
   bbff8:	4638      	mov	r0, r7
   bbffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbffe:	bf00      	nop
   bc000:	000bd680 	.word	0x000bd680
   bc004:	000bd1ed 	.word	0x000bd1ed
   bc008:	000bd50c 	.word	0x000bd50c

000bc00c <__lshift>:
   bc00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc010:	460c      	mov	r4, r1
   bc012:	6849      	ldr	r1, [r1, #4]
   bc014:	6923      	ldr	r3, [r4, #16]
   bc016:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc01a:	68a3      	ldr	r3, [r4, #8]
   bc01c:	4607      	mov	r7, r0
   bc01e:	4691      	mov	r9, r2
   bc020:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc024:	f108 0601 	add.w	r6, r8, #1
   bc028:	42b3      	cmp	r3, r6
   bc02a:	db0b      	blt.n	bc044 <__lshift+0x38>
   bc02c:	4638      	mov	r0, r7
   bc02e:	f7ff fd91 	bl	bbb54 <_Balloc>
   bc032:	4605      	mov	r5, r0
   bc034:	b948      	cbnz	r0, bc04a <__lshift+0x3e>
   bc036:	4602      	mov	r2, r0
   bc038:	4b2a      	ldr	r3, [pc, #168]	; (bc0e4 <__lshift+0xd8>)
   bc03a:	482b      	ldr	r0, [pc, #172]	; (bc0e8 <__lshift+0xdc>)
   bc03c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc040:	f7fb fad8 	bl	b75f4 <__assert_func>
   bc044:	3101      	adds	r1, #1
   bc046:	005b      	lsls	r3, r3, #1
   bc048:	e7ee      	b.n	bc028 <__lshift+0x1c>
   bc04a:	2300      	movs	r3, #0
   bc04c:	f100 0114 	add.w	r1, r0, #20
   bc050:	f100 0210 	add.w	r2, r0, #16
   bc054:	4618      	mov	r0, r3
   bc056:	4553      	cmp	r3, sl
   bc058:	db37      	blt.n	bc0ca <__lshift+0xbe>
   bc05a:	6920      	ldr	r0, [r4, #16]
   bc05c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc060:	f104 0314 	add.w	r3, r4, #20
   bc064:	f019 091f 	ands.w	r9, r9, #31
   bc068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc06c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc070:	d02f      	beq.n	bc0d2 <__lshift+0xc6>
   bc072:	f1c9 0e20 	rsb	lr, r9, #32
   bc076:	468a      	mov	sl, r1
   bc078:	f04f 0c00 	mov.w	ip, #0
   bc07c:	681a      	ldr	r2, [r3, #0]
   bc07e:	fa02 f209 	lsl.w	r2, r2, r9
   bc082:	ea42 020c 	orr.w	r2, r2, ip
   bc086:	f84a 2b04 	str.w	r2, [sl], #4
   bc08a:	f853 2b04 	ldr.w	r2, [r3], #4
   bc08e:	4298      	cmp	r0, r3
   bc090:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc094:	d8f2      	bhi.n	bc07c <__lshift+0x70>
   bc096:	1b03      	subs	r3, r0, r4
   bc098:	3b15      	subs	r3, #21
   bc09a:	f023 0303 	bic.w	r3, r3, #3
   bc09e:	3304      	adds	r3, #4
   bc0a0:	f104 0215 	add.w	r2, r4, #21
   bc0a4:	4290      	cmp	r0, r2
   bc0a6:	bf38      	it	cc
   bc0a8:	2304      	movcc	r3, #4
   bc0aa:	f841 c003 	str.w	ip, [r1, r3]
   bc0ae:	f1bc 0f00 	cmp.w	ip, #0
   bc0b2:	d001      	beq.n	bc0b8 <__lshift+0xac>
   bc0b4:	f108 0602 	add.w	r6, r8, #2
   bc0b8:	3e01      	subs	r6, #1
   bc0ba:	4638      	mov	r0, r7
   bc0bc:	612e      	str	r6, [r5, #16]
   bc0be:	4621      	mov	r1, r4
   bc0c0:	f7ff fd88 	bl	bbbd4 <_Bfree>
   bc0c4:	4628      	mov	r0, r5
   bc0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc0ca:	f842 0f04 	str.w	r0, [r2, #4]!
   bc0ce:	3301      	adds	r3, #1
   bc0d0:	e7c1      	b.n	bc056 <__lshift+0x4a>
   bc0d2:	3904      	subs	r1, #4
   bc0d4:	f853 2b04 	ldr.w	r2, [r3], #4
   bc0d8:	f841 2f04 	str.w	r2, [r1, #4]!
   bc0dc:	4298      	cmp	r0, r3
   bc0de:	d8f9      	bhi.n	bc0d4 <__lshift+0xc8>
   bc0e0:	e7ea      	b.n	bc0b8 <__lshift+0xac>
   bc0e2:	bf00      	nop
   bc0e4:	000bd460 	.word	0x000bd460
   bc0e8:	000bd50c 	.word	0x000bd50c

000bc0ec <__mcmp>:
   bc0ec:	b530      	push	{r4, r5, lr}
   bc0ee:	6902      	ldr	r2, [r0, #16]
   bc0f0:	690c      	ldr	r4, [r1, #16]
   bc0f2:	1b12      	subs	r2, r2, r4
   bc0f4:	d10e      	bne.n	bc114 <__mcmp+0x28>
   bc0f6:	f100 0314 	add.w	r3, r0, #20
   bc0fa:	3114      	adds	r1, #20
   bc0fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc10c:	42a5      	cmp	r5, r4
   bc10e:	d003      	beq.n	bc118 <__mcmp+0x2c>
   bc110:	d305      	bcc.n	bc11e <__mcmp+0x32>
   bc112:	2201      	movs	r2, #1
   bc114:	4610      	mov	r0, r2
   bc116:	bd30      	pop	{r4, r5, pc}
   bc118:	4283      	cmp	r3, r0
   bc11a:	d3f3      	bcc.n	bc104 <__mcmp+0x18>
   bc11c:	e7fa      	b.n	bc114 <__mcmp+0x28>
   bc11e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc122:	e7f7      	b.n	bc114 <__mcmp+0x28>

000bc124 <__mdiff>:
   bc124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc128:	460c      	mov	r4, r1
   bc12a:	4606      	mov	r6, r0
   bc12c:	4611      	mov	r1, r2
   bc12e:	4620      	mov	r0, r4
   bc130:	4690      	mov	r8, r2
   bc132:	f7ff ffdb 	bl	bc0ec <__mcmp>
   bc136:	1e05      	subs	r5, r0, #0
   bc138:	d110      	bne.n	bc15c <__mdiff+0x38>
   bc13a:	4629      	mov	r1, r5
   bc13c:	4630      	mov	r0, r6
   bc13e:	f7ff fd09 	bl	bbb54 <_Balloc>
   bc142:	b930      	cbnz	r0, bc152 <__mdiff+0x2e>
   bc144:	4b3a      	ldr	r3, [pc, #232]	; (bc230 <__mdiff+0x10c>)
   bc146:	4602      	mov	r2, r0
   bc148:	f240 2132 	movw	r1, #562	; 0x232
   bc14c:	4839      	ldr	r0, [pc, #228]	; (bc234 <__mdiff+0x110>)
   bc14e:	f7fb fa51 	bl	b75f4 <__assert_func>
   bc152:	2301      	movs	r3, #1
   bc154:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc15c:	bfa4      	itt	ge
   bc15e:	4643      	movge	r3, r8
   bc160:	46a0      	movge	r8, r4
   bc162:	4630      	mov	r0, r6
   bc164:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc168:	bfa6      	itte	ge
   bc16a:	461c      	movge	r4, r3
   bc16c:	2500      	movge	r5, #0
   bc16e:	2501      	movlt	r5, #1
   bc170:	f7ff fcf0 	bl	bbb54 <_Balloc>
   bc174:	b920      	cbnz	r0, bc180 <__mdiff+0x5c>
   bc176:	4b2e      	ldr	r3, [pc, #184]	; (bc230 <__mdiff+0x10c>)
   bc178:	4602      	mov	r2, r0
   bc17a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc17e:	e7e5      	b.n	bc14c <__mdiff+0x28>
   bc180:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc184:	6926      	ldr	r6, [r4, #16]
   bc186:	60c5      	str	r5, [r0, #12]
   bc188:	f104 0914 	add.w	r9, r4, #20
   bc18c:	f108 0514 	add.w	r5, r8, #20
   bc190:	f100 0e14 	add.w	lr, r0, #20
   bc194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc19c:	f108 0210 	add.w	r2, r8, #16
   bc1a0:	46f2      	mov	sl, lr
   bc1a2:	2100      	movs	r1, #0
   bc1a4:	f859 3b04 	ldr.w	r3, [r9], #4
   bc1a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc1ac:	fa1f f883 	uxth.w	r8, r3
   bc1b0:	fa11 f18b 	uxtah	r1, r1, fp
   bc1b4:	0c1b      	lsrs	r3, r3, #16
   bc1b6:	eba1 0808 	sub.w	r8, r1, r8
   bc1ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc1be:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc1c2:	fa1f f888 	uxth.w	r8, r8
   bc1c6:	1419      	asrs	r1, r3, #16
   bc1c8:	454e      	cmp	r6, r9
   bc1ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc1ce:	f84a 3b04 	str.w	r3, [sl], #4
   bc1d2:	d8e7      	bhi.n	bc1a4 <__mdiff+0x80>
   bc1d4:	1b33      	subs	r3, r6, r4
   bc1d6:	3b15      	subs	r3, #21
   bc1d8:	f023 0303 	bic.w	r3, r3, #3
   bc1dc:	3304      	adds	r3, #4
   bc1de:	3415      	adds	r4, #21
   bc1e0:	42a6      	cmp	r6, r4
   bc1e2:	bf38      	it	cc
   bc1e4:	2304      	movcc	r3, #4
   bc1e6:	441d      	add	r5, r3
   bc1e8:	4473      	add	r3, lr
   bc1ea:	469e      	mov	lr, r3
   bc1ec:	462e      	mov	r6, r5
   bc1ee:	4566      	cmp	r6, ip
   bc1f0:	d30e      	bcc.n	bc210 <__mdiff+0xec>
   bc1f2:	f10c 0203 	add.w	r2, ip, #3
   bc1f6:	1b52      	subs	r2, r2, r5
   bc1f8:	f022 0203 	bic.w	r2, r2, #3
   bc1fc:	3d03      	subs	r5, #3
   bc1fe:	45ac      	cmp	ip, r5
   bc200:	bf38      	it	cc
   bc202:	2200      	movcc	r2, #0
   bc204:	441a      	add	r2, r3
   bc206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc20a:	b17b      	cbz	r3, bc22c <__mdiff+0x108>
   bc20c:	6107      	str	r7, [r0, #16]
   bc20e:	e7a3      	b.n	bc158 <__mdiff+0x34>
   bc210:	f856 8b04 	ldr.w	r8, [r6], #4
   bc214:	fa11 f288 	uxtah	r2, r1, r8
   bc218:	1414      	asrs	r4, r2, #16
   bc21a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc21e:	b292      	uxth	r2, r2
   bc220:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc224:	f84e 2b04 	str.w	r2, [lr], #4
   bc228:	1421      	asrs	r1, r4, #16
   bc22a:	e7e0      	b.n	bc1ee <__mdiff+0xca>
   bc22c:	3f01      	subs	r7, #1
   bc22e:	e7ea      	b.n	bc206 <__mdiff+0xe2>
   bc230:	000bd460 	.word	0x000bd460
   bc234:	000bd50c 	.word	0x000bd50c

000bc238 <__ulp>:
   bc238:	b082      	sub	sp, #8
   bc23a:	ed8d 0b00 	vstr	d0, [sp]
   bc23e:	9b01      	ldr	r3, [sp, #4]
   bc240:	4912      	ldr	r1, [pc, #72]	; (bc28c <__ulp+0x54>)
   bc242:	4019      	ands	r1, r3
   bc244:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc248:	2900      	cmp	r1, #0
   bc24a:	dd05      	ble.n	bc258 <__ulp+0x20>
   bc24c:	2200      	movs	r2, #0
   bc24e:	460b      	mov	r3, r1
   bc250:	ec43 2b10 	vmov	d0, r2, r3
   bc254:	b002      	add	sp, #8
   bc256:	4770      	bx	lr
   bc258:	4249      	negs	r1, r1
   bc25a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc25e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc262:	f04f 0200 	mov.w	r2, #0
   bc266:	f04f 0300 	mov.w	r3, #0
   bc26a:	da04      	bge.n	bc276 <__ulp+0x3e>
   bc26c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc270:	fa41 f300 	asr.w	r3, r1, r0
   bc274:	e7ec      	b.n	bc250 <__ulp+0x18>
   bc276:	f1a0 0114 	sub.w	r1, r0, #20
   bc27a:	291e      	cmp	r1, #30
   bc27c:	bfda      	itte	le
   bc27e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc282:	fa20 f101 	lsrle.w	r1, r0, r1
   bc286:	2101      	movgt	r1, #1
   bc288:	460a      	mov	r2, r1
   bc28a:	e7e1      	b.n	bc250 <__ulp+0x18>
   bc28c:	7ff00000 	.word	0x7ff00000

000bc290 <__b2d>:
   bc290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc292:	6905      	ldr	r5, [r0, #16]
   bc294:	f100 0714 	add.w	r7, r0, #20
   bc298:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc29c:	1f2e      	subs	r6, r5, #4
   bc29e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc2a2:	4620      	mov	r0, r4
   bc2a4:	f7ff fd48 	bl	bbd38 <__hi0bits>
   bc2a8:	f1c0 0320 	rsb	r3, r0, #32
   bc2ac:	280a      	cmp	r0, #10
   bc2ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc32c <__b2d+0x9c>
   bc2b2:	600b      	str	r3, [r1, #0]
   bc2b4:	dc14      	bgt.n	bc2e0 <__b2d+0x50>
   bc2b6:	f1c0 0e0b 	rsb	lr, r0, #11
   bc2ba:	fa24 f10e 	lsr.w	r1, r4, lr
   bc2be:	42b7      	cmp	r7, r6
   bc2c0:	ea41 030c 	orr.w	r3, r1, ip
   bc2c4:	bf34      	ite	cc
   bc2c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc2ca:	2100      	movcs	r1, #0
   bc2cc:	3015      	adds	r0, #21
   bc2ce:	fa04 f000 	lsl.w	r0, r4, r0
   bc2d2:	fa21 f10e 	lsr.w	r1, r1, lr
   bc2d6:	ea40 0201 	orr.w	r2, r0, r1
   bc2da:	ec43 2b10 	vmov	d0, r2, r3
   bc2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc2e0:	42b7      	cmp	r7, r6
   bc2e2:	bf3a      	itte	cc
   bc2e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc2e8:	f1a5 0608 	subcc.w	r6, r5, #8
   bc2ec:	2100      	movcs	r1, #0
   bc2ee:	380b      	subs	r0, #11
   bc2f0:	d017      	beq.n	bc322 <__b2d+0x92>
   bc2f2:	f1c0 0c20 	rsb	ip, r0, #32
   bc2f6:	fa04 f500 	lsl.w	r5, r4, r0
   bc2fa:	42be      	cmp	r6, r7
   bc2fc:	fa21 f40c 	lsr.w	r4, r1, ip
   bc300:	ea45 0504 	orr.w	r5, r5, r4
   bc304:	bf8c      	ite	hi
   bc306:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc30a:	2400      	movls	r4, #0
   bc30c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc310:	fa01 f000 	lsl.w	r0, r1, r0
   bc314:	fa24 f40c 	lsr.w	r4, r4, ip
   bc318:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc31c:	ea40 0204 	orr.w	r2, r0, r4
   bc320:	e7db      	b.n	bc2da <__b2d+0x4a>
   bc322:	ea44 030c 	orr.w	r3, r4, ip
   bc326:	460a      	mov	r2, r1
   bc328:	e7d7      	b.n	bc2da <__b2d+0x4a>
   bc32a:	bf00      	nop
   bc32c:	3ff00000 	.word	0x3ff00000

000bc330 <__d2b>:
   bc330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc334:	4689      	mov	r9, r1
   bc336:	2101      	movs	r1, #1
   bc338:	ec57 6b10 	vmov	r6, r7, d0
   bc33c:	4690      	mov	r8, r2
   bc33e:	f7ff fc09 	bl	bbb54 <_Balloc>
   bc342:	4604      	mov	r4, r0
   bc344:	b930      	cbnz	r0, bc354 <__d2b+0x24>
   bc346:	4602      	mov	r2, r0
   bc348:	4b25      	ldr	r3, [pc, #148]	; (bc3e0 <__d2b+0xb0>)
   bc34a:	4826      	ldr	r0, [pc, #152]	; (bc3e4 <__d2b+0xb4>)
   bc34c:	f240 310a 	movw	r1, #778	; 0x30a
   bc350:	f7fb f950 	bl	b75f4 <__assert_func>
   bc354:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc358:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc35c:	bb35      	cbnz	r5, bc3ac <__d2b+0x7c>
   bc35e:	2e00      	cmp	r6, #0
   bc360:	9301      	str	r3, [sp, #4]
   bc362:	d028      	beq.n	bc3b6 <__d2b+0x86>
   bc364:	4668      	mov	r0, sp
   bc366:	9600      	str	r6, [sp, #0]
   bc368:	f7ff fd06 	bl	bbd78 <__lo0bits>
   bc36c:	9900      	ldr	r1, [sp, #0]
   bc36e:	b300      	cbz	r0, bc3b2 <__d2b+0x82>
   bc370:	9a01      	ldr	r2, [sp, #4]
   bc372:	f1c0 0320 	rsb	r3, r0, #32
   bc376:	fa02 f303 	lsl.w	r3, r2, r3
   bc37a:	430b      	orrs	r3, r1
   bc37c:	40c2      	lsrs	r2, r0
   bc37e:	6163      	str	r3, [r4, #20]
   bc380:	9201      	str	r2, [sp, #4]
   bc382:	9b01      	ldr	r3, [sp, #4]
   bc384:	61a3      	str	r3, [r4, #24]
   bc386:	2b00      	cmp	r3, #0
   bc388:	bf14      	ite	ne
   bc38a:	2202      	movne	r2, #2
   bc38c:	2201      	moveq	r2, #1
   bc38e:	6122      	str	r2, [r4, #16]
   bc390:	b1d5      	cbz	r5, bc3c8 <__d2b+0x98>
   bc392:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc396:	4405      	add	r5, r0
   bc398:	f8c9 5000 	str.w	r5, [r9]
   bc39c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc3a0:	f8c8 0000 	str.w	r0, [r8]
   bc3a4:	4620      	mov	r0, r4
   bc3a6:	b003      	add	sp, #12
   bc3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc3ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc3b0:	e7d5      	b.n	bc35e <__d2b+0x2e>
   bc3b2:	6161      	str	r1, [r4, #20]
   bc3b4:	e7e5      	b.n	bc382 <__d2b+0x52>
   bc3b6:	a801      	add	r0, sp, #4
   bc3b8:	f7ff fcde 	bl	bbd78 <__lo0bits>
   bc3bc:	9b01      	ldr	r3, [sp, #4]
   bc3be:	6163      	str	r3, [r4, #20]
   bc3c0:	2201      	movs	r2, #1
   bc3c2:	6122      	str	r2, [r4, #16]
   bc3c4:	3020      	adds	r0, #32
   bc3c6:	e7e3      	b.n	bc390 <__d2b+0x60>
   bc3c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc3cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc3d0:	f8c9 0000 	str.w	r0, [r9]
   bc3d4:	6918      	ldr	r0, [r3, #16]
   bc3d6:	f7ff fcaf 	bl	bbd38 <__hi0bits>
   bc3da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc3de:	e7df      	b.n	bc3a0 <__d2b+0x70>
   bc3e0:	000bd460 	.word	0x000bd460
   bc3e4:	000bd50c 	.word	0x000bd50c

000bc3e8 <__ratio>:
   bc3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc3ec:	4688      	mov	r8, r1
   bc3ee:	4669      	mov	r1, sp
   bc3f0:	4681      	mov	r9, r0
   bc3f2:	f7ff ff4d 	bl	bc290 <__b2d>
   bc3f6:	a901      	add	r1, sp, #4
   bc3f8:	4640      	mov	r0, r8
   bc3fa:	ec55 4b10 	vmov	r4, r5, d0
   bc3fe:	f7ff ff47 	bl	bc290 <__b2d>
   bc402:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc406:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc40a:	eba3 0c02 	sub.w	ip, r3, r2
   bc40e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc412:	1a9b      	subs	r3, r3, r2
   bc414:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc418:	ec51 0b10 	vmov	r0, r1, d0
   bc41c:	2b00      	cmp	r3, #0
   bc41e:	bfd6      	itet	le
   bc420:	460a      	movle	r2, r1
   bc422:	462a      	movgt	r2, r5
   bc424:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc428:	468b      	mov	fp, r1
   bc42a:	462f      	mov	r7, r5
   bc42c:	bfd4      	ite	le
   bc42e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc432:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc436:	4620      	mov	r0, r4
   bc438:	ee10 2a10 	vmov	r2, s0
   bc43c:	465b      	mov	r3, fp
   bc43e:	4639      	mov	r1, r7
   bc440:	f7fd fd7a 	bl	b9f38 <__aeabi_ddiv>
   bc444:	ec41 0b10 	vmov	d0, r0, r1
   bc448:	b003      	add	sp, #12
   bc44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc44e <__copybits>:
   bc44e:	3901      	subs	r1, #1
   bc450:	b570      	push	{r4, r5, r6, lr}
   bc452:	1149      	asrs	r1, r1, #5
   bc454:	6914      	ldr	r4, [r2, #16]
   bc456:	3101      	adds	r1, #1
   bc458:	f102 0314 	add.w	r3, r2, #20
   bc45c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc460:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc464:	1f05      	subs	r5, r0, #4
   bc466:	42a3      	cmp	r3, r4
   bc468:	d30c      	bcc.n	bc484 <__copybits+0x36>
   bc46a:	1aa3      	subs	r3, r4, r2
   bc46c:	3b11      	subs	r3, #17
   bc46e:	f023 0303 	bic.w	r3, r3, #3
   bc472:	3211      	adds	r2, #17
   bc474:	42a2      	cmp	r2, r4
   bc476:	bf88      	it	hi
   bc478:	2300      	movhi	r3, #0
   bc47a:	4418      	add	r0, r3
   bc47c:	2300      	movs	r3, #0
   bc47e:	4288      	cmp	r0, r1
   bc480:	d305      	bcc.n	bc48e <__copybits+0x40>
   bc482:	bd70      	pop	{r4, r5, r6, pc}
   bc484:	f853 6b04 	ldr.w	r6, [r3], #4
   bc488:	f845 6f04 	str.w	r6, [r5, #4]!
   bc48c:	e7eb      	b.n	bc466 <__copybits+0x18>
   bc48e:	f840 3b04 	str.w	r3, [r0], #4
   bc492:	e7f4      	b.n	bc47e <__copybits+0x30>

000bc494 <__any_on>:
   bc494:	f100 0214 	add.w	r2, r0, #20
   bc498:	6900      	ldr	r0, [r0, #16]
   bc49a:	114b      	asrs	r3, r1, #5
   bc49c:	4298      	cmp	r0, r3
   bc49e:	b510      	push	{r4, lr}
   bc4a0:	db11      	blt.n	bc4c6 <__any_on+0x32>
   bc4a2:	dd0a      	ble.n	bc4ba <__any_on+0x26>
   bc4a4:	f011 011f 	ands.w	r1, r1, #31
   bc4a8:	d007      	beq.n	bc4ba <__any_on+0x26>
   bc4aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc4ae:	fa24 f001 	lsr.w	r0, r4, r1
   bc4b2:	fa00 f101 	lsl.w	r1, r0, r1
   bc4b6:	428c      	cmp	r4, r1
   bc4b8:	d10b      	bne.n	bc4d2 <__any_on+0x3e>
   bc4ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc4be:	4293      	cmp	r3, r2
   bc4c0:	d803      	bhi.n	bc4ca <__any_on+0x36>
   bc4c2:	2000      	movs	r0, #0
   bc4c4:	bd10      	pop	{r4, pc}
   bc4c6:	4603      	mov	r3, r0
   bc4c8:	e7f7      	b.n	bc4ba <__any_on+0x26>
   bc4ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc4ce:	2900      	cmp	r1, #0
   bc4d0:	d0f5      	beq.n	bc4be <__any_on+0x2a>
   bc4d2:	2001      	movs	r0, #1
   bc4d4:	e7f6      	b.n	bc4c4 <__any_on+0x30>

000bc4d6 <_calloc_r>:
   bc4d6:	b513      	push	{r0, r1, r4, lr}
   bc4d8:	434a      	muls	r2, r1
   bc4da:	4611      	mov	r1, r2
   bc4dc:	9201      	str	r2, [sp, #4]
   bc4de:	f7fb f879 	bl	b75d4 <_malloc_r>
   bc4e2:	4604      	mov	r4, r0
   bc4e4:	b118      	cbz	r0, bc4ee <_calloc_r+0x18>
   bc4e6:	9a01      	ldr	r2, [sp, #4]
   bc4e8:	2100      	movs	r1, #0
   bc4ea:	f7fd ff3e 	bl	ba36a <memset>
   bc4ee:	4620      	mov	r0, r4
   bc4f0:	b002      	add	sp, #8
   bc4f2:	bd10      	pop	{r4, pc}
   bc4f4:	0000      	movs	r0, r0
	...

000bc4f8 <nan>:
   bc4f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc500 <nan+0x8>
   bc4fc:	4770      	bx	lr
   bc4fe:	bf00      	nop
   bc500:	00000000 	.word	0x00000000
   bc504:	7ff80000 	.word	0x7ff80000

000bc508 <__ascii_wctomb>:
   bc508:	b149      	cbz	r1, bc51e <__ascii_wctomb+0x16>
   bc50a:	2aff      	cmp	r2, #255	; 0xff
   bc50c:	bf85      	ittet	hi
   bc50e:	238a      	movhi	r3, #138	; 0x8a
   bc510:	6003      	strhi	r3, [r0, #0]
   bc512:	700a      	strbls	r2, [r1, #0]
   bc514:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bc518:	bf98      	it	ls
   bc51a:	2001      	movls	r0, #1
   bc51c:	4770      	bx	lr
   bc51e:	4608      	mov	r0, r1
   bc520:	4770      	bx	lr
	...

000bc524 <__aeabi_d2lz>:
   bc524:	b538      	push	{r3, r4, r5, lr}
   bc526:	2200      	movs	r2, #0
   bc528:	2300      	movs	r3, #0
   bc52a:	4604      	mov	r4, r0
   bc52c:	460d      	mov	r5, r1
   bc52e:	f7fd fe4b 	bl	ba1c8 <__aeabi_dcmplt>
   bc532:	b928      	cbnz	r0, bc540 <__aeabi_d2lz+0x1c>
   bc534:	4620      	mov	r0, r4
   bc536:	4629      	mov	r1, r5
   bc538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc53c:	f7fd bedc 	b.w	ba2f8 <__aeabi_d2ulz>
   bc540:	4620      	mov	r0, r4
   bc542:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc546:	f7fd fed7 	bl	ba2f8 <__aeabi_d2ulz>
   bc54a:	4240      	negs	r0, r0
   bc54c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc550:	bd38      	pop	{r3, r4, r5, pc}
   bc552:	bf00      	nop

000bc554 <dynalib_user>:
   bc554:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc564:	0000 0000 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bc574:	756c 6572 7320 6372 2620 2026 7273 2d63     lure src && src-
   bc584:	633e 6c61 626c 6361 006b 6c70 6d75 4365     >callback.plumeC
   bc594:	6e6f 656e 7463 2928 203a 7441 6574 706d     onnect(): Attemp
   bc5a4:	6974 676e 7420 206f 6f63 6e6e 6365 2074     ting to connect 
   bc5b4:	6f74 5420 6968 676e 6273 616f 6472 7320     to Thingsboard s
   bc5c4:	7265 6576 0072 5931 347a 6c38 5073 7135     erver.1Yz48lsP5q
   bc5d4:	7762 626e 5935 4669 5a64 6d00 4279 726f     bwnb5YiFdZ.myBor
   bc5e4:	6e6f 7000 756c 656d 6f43 6e6e 6365 2874     on.plumeConnect(
   bc5f4:	3a29 4320 6e6f 656e 7463 6465 7000 756c     ): Connected.plu
   bc604:	656d 6f43 6e6e 6365 2874 3a29 4320 6e6f     meConnect(): Con
   bc614:	656e 7463 6f69 206e 6166 6c69 6465 202c     nection failed, 
   bc624:	6572 7274 2079 6e69 3320 7320 6365 6e6f     retry in 3 secon
   bc634:	7364 7b00 7422 2273 253a 2c73 2220 6176     ds.{"ts":%s, "va
   bc644:	756c 7365 3a22 227b 2262 253a 322e 7d66     lues":{"b":%.2f}
   bc654:	007d 3176 642f 7665 6369 7365 6d2f 2f65     }.v1/devices/me/
   bc664:	6574 656c 656d 7274 0079 227b 3174 3a22     telemetry.{"t1":
   bc674:	2e25 6632 202c 7622 2231 253a 322e 7d66     %.2f, "v1":%.2f}
   bc684:	7b00 7422 2232 253a 322e 2c66 7622 2232     .{"t2":%.2f,"v2"
   bc694:	253a 322e 7d66 7b00 7422 2233 253a 322e     :%.2f}.{"t3":%.2
   bc6a4:	2c66 7622 2233 253a 322e 7d66 7b00 7422     f,"v3":%.2f}.{"t
   bc6b4:	2234 253a 322e 2c66 7622 2234 253a 322e     4":%.2f,"v4":%.2
   bc6c4:	7d66 7b00 7422 2235 253a 322e 2c66 7622     f}.{"t5":%.2f,"v
   bc6d4:	2235 253a 322e 7d66 7800 2035 6c70 6d75     5":%.2f}.x5 plum
   bc6e4:	2e65 7570 6c62 7369 2068 3574 203a 6625     e.publish t5: %f
   bc6f4:	7620 2035 6625 000a 227b 3674 3a22 2e25      v5 %f..{"t6":%.
   bc704:	6632 222c 3676 3a22 2e25 6632 007d 227b     2f,"v6":%.2f}.{"
   bc714:	3774 3a22 2e25 6632 222c 3776 3a22 2e25     t7":%.2f,"v7":%.
   bc724:	6632 007d 4142 3134 3430 3330 3932 3836     2f}.BA4104032968
   bc734:	4142 3131 3431 3932 3039 3937 3230 3531     BA11142990790215
   bc744:	3439 4141 4100 2b54 5043 4e49 253d 0d73     94AA.AT+CPIN=%s.
   bc754:	000a 7741 6961 6974 676e 5220 7065 796c     ..Awaiting Reply
   bc764:	6620 6f72 206d 6170 7373 6f77 6472 000a      from password..
   bc774:	6552 6c70 3a79 2520 0a73 4100 2b54 4441     Reply: %s..AT+AD
   bc784:	5244 5345 3d53 6925 0a0d 4100 6177 7469     DRESS=%i...Await
   bc794:	6e69 2067 6552 6c70 2079 7266 6d6f 6120     ing Reply from a
   bc7a4:	6464 6572 7373 000a 6552 6c70 2079 6461     ddress..Reply ad
   bc7b4:	7264 7365 3a73 2520 0a73 4100 2b54 454e     dress: %s..AT+NE
   bc7c4:	5754 524f 494b 3d44 6925 0a0d 4100 6177     TWORKID=%i...Awa
   bc7d4:	7469 6e69 2067 6552 6c70 2079 7266 6d6f     iting Reply from
   bc7e4:	6e20 7465 6f77 6b72 6469 000a 6552 6c70      networkid..Repl
   bc7f4:	2079 656e 7774 726f 3a6b 2520 0a73 4100     y network: %s..A
   bc804:	2b54 4441 5244 5345 3f53 0a0d 4100 6177     T+ADDRESS?...Awa
   bc814:	7469 6e69 2067 6552 6c70 0a79 5200 7065     iting Reply..Rep
   bc824:	796c 6720 7465 6120 6464 6572 7373 203a     ly get address: 
   bc834:	7325 000a 5441 4e2b 5445 4f57 4b52 4449     %s..AT+NETWORKID
   bc844:	0d3f 000a 6552 6c70 2079 6567 2074 656e     ?...Reply get ne
   bc854:	7774 726f 3a6b 2520 0a73 4100 2b54 5043     twork: %s..AT+CP
   bc864:	4e49 0d3f 000a 6552 6c70 2079 6567 2074     IN?...Reply get 
   bc874:	6170 7373 6f77 6472 203a 7325 000a 5441     password: %s..AT
   bc884:	522b 5345 5445 0a0d 6300 756f 746e 7265     +RESET...counter
   bc894:	6800 6d6f 4265 7461 6574 7972 5500 6962     .homeBattery.Ubi
   bc8a4:	6f64 7374 6420 7461 2061 6573 746e 2e2e     dots data sent..
   bc8b4:	002e 7245 6f72 2e72 2e2e 6275 6469 746f     ..Error...ubidot
   bc8c4:	2073 6164 6174 6e20 746f 7320 6e65 2e74     s data not sent.
   bc8d4:	2e2e 2500 3069 3030 6900 636e 6d6f 6e69     ...%i000.incomin
   bc8e4:	5367 7274 6e69 3a67 2520 0a73 7400 6d65     gString: %s..tem
   bc8f4:	4670 203a 2e25 3230 2c66 7020 6f72 6562     pF: %.02f, probe
   bc904:	754e 626d 7265 203a 6925 000a 6574 706d     Number: %i..temp
   bc914:	6c42 6575 7600 6c6f 6174 6567 6c42 6575     Blue.voltageBlue
   bc924:	7400 6d65 4770 6572 6e65 7600 6c6f 6174     .tempGreen.volta
   bc934:	6567 7247 6565 006e 6574 706d 724f 6e61     geGreen.tempOran
   bc944:	6567 7600 6c6f 6174 6567 724f 6e61 6567     ge.voltageOrange
   bc954:	3000 3430 3000 3430 6f56 746c 6761 0065     .004.004Voltage.
   bc964:	3030 0035 3030 5635 6c6f 6174 6567 3000     005.005Voltage.0
   bc974:	3630 3000 3630 6f56 746c 6761 0065 3030     06.006Voltage.00
   bc984:	0037 3030 5637 6c6f 6174 6567 6500 7478     7.007Voltage.ext
   bc994:	6172 7250 626f 0065 6e69 6f63 696d 676e     raProbe.incoming
   bc9a4:	7453 6972 676e 3a32 2520 0a73 6300 7375     String2: %s..cus
   bc9b4:	6f74 656d 3072 0031 6577 6862 6f6f 006b     tomer01.webhook.

000bc9c4 <_ZTV11UbiParticle>:
	...
   bc9cc:	5105 000b 50e5 000b 50f1 000b 50f5 000b     .Q...P...P...P..
   bc9dc:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   bc9ec:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   bc9fc:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   bca0c:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   bca1c:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   bca2c:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   bca3c:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   bca4c:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   bca5c:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   bca6c:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   bca7c:	7720 7469 2068 4455 0050 0000                with UDP...

000bca88 <_ZTV6UbiUDP>:
	...
   bca90:	51f9 000b 5199 000b 51a5 000b 51a9 000b     .Q...Q...Q...Q..
   bcaa0:	6255 6469 746f 5073 7261 6974 6c63 2f65     UbidotsParticle/
   bcab0:	2e33 0032 7254 6979 676e 7420 206f 6f63     3.2.Trying to co
   bcac0:	6e6e 6365 2074 6f74 0020 2c20 6120 7474     nnect to . , att
   bcad0:	6d65 7470 6e20 6d75 6562 3a72 0020 7441     empt number: .At
   bcae0:	6574 706d 2074 6966 696e 6873 6465 5300     tempt finished.S
   bcaf0:	7265 6576 2772 2073 6572 7073 6e6f 6573     erver's response
   bcb00:	003a 2d0a 2d2d 2d2d 2d2d 2d2d 002d 6974     :..----------.ti
   bcb10:	656d 756f 2c74 6320 756f 646c 6e20 746f     meout, could not
   bcb20:	7220 6165 2064 6e61 2079 6572 7073 6e6f      read any respon
   bcb30:	6573 6620 6f72 206d 6874 2065 6f68 7473     se from the host
   bcb40:	5000 534f 2054 612f 6970 762f 2e31 2f36     .POST /api/v1.6/
   bcb50:	6564 6976 6563 2f73 2000 5448 5054 312f     devices/. HTTP/1
   bcb60:	312e 0a0d 4800 736f 3a74 0020 7355 7265     .1...Host: .User
   bcb70:	412d 6567 746e 203a 5800 412d 7475 2d68     -Agent: .X-Auth-
   bcb80:	6f54 656b 3a6e 0020 6f43 6e6e 6365 6974     Token: .Connecti
   bcb90:	6e6f 203a 6c63 736f 0d65 000a 6f43 746e     on: close...Cont
   bcba0:	6e65 2d74 7954 6570 203a 7061 6c70 6369     ent-Type: applic
   bcbb0:	7461 6f69 2f6e 736a 6e6f 0a0d 4300 6e6f     ation/json...Con
   bcbc0:	6574 746e 4c2d 6e65 7467 3a68 0020 614d     tent-Length: .Ma
   bcbd0:	696b 676e 7220 7165 6575 7473 7420 206f     king request to 
   bcbe0:	6255 6469 746f 3a73 000a 6177 7469 6e69     Ubidots:..waitin
   bcbf0:	2067 6f66 2072 6573 7672 7265 6120 736e     g for server ans
   bcc00:	6577 2072 2e2e 002e 550a 6962 6f64 7374     wer .....Ubidots
   bcc10:	2027 6553 7672 7265 7220 7365 6f70 736e     ' Server respons
   bcc20:	3a65 000a 6f43 6c75 2064 6f6e 2074 6573     e:..Could not se
   bcc30:	646e 6420 7461 2061 6f74 7520 6962 6f64     nd data to ubido
   bcc40:	7374 7520 6973 676e 4820 5454 0050 4547     ts using HTTP.GE
   bcc50:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
   bcc60:	6563 2f73 2f00 766c 4300 6e6f 6574 746e     ces/./lv.Content
   bcc70:	542d 7079 3a65 6120 7070 696c 6163 6974     -Type: applicati
   bcc80:	6e6f 6a2f 6f73 0d6e 0d0a 000a 6f43 6e6e     on/json.....Conn
   bcc90:	6365 6974 6e6f 4620 6961 656c 2064 6275     ection Failed ub
   bcca0:	6469 746f 2073 202d 7254 2079 6741 6961     idots - Try Agai
   bccb0:	006e 0000                                   n...

000bccb4 <_ZTV7UbiHTTP>:
	...
   bccbc:	5921 000b 5b51 000b 56d5 000b 56d9 000b     !Y..Q[...V...V..
   bcccc:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   bccdc:	6962 6f64 7374 632e 6d6f 5900 756f 6120     bidots.com.You a
   bccec:	6572 7320 6e65 6964 676e 6d20 726f 2065     re sending more 
   bccfc:	6874 6e61 7420 6568 6d20 7861 6d69 6d75     than the maximum
   bcd0c:	6f20 2066 6f63 736e 6365 7475 7669 2065      of consecutive 
   bcd1c:	6176 6972 6261 656c 0073 3125 6737 7b00     variables.%17g.{
   bcd2c:	2500 2273 7325 3a22 227b 6176 756c 2265     .%s"%s":{"value"
   bcd3c:	253a 0073 7325 222c 6974 656d 7473 6d61     :%s.%s,"timestam
   bcd4c:	2270 253a 756c 2500 2564 2564 0064 7325     p":%lu.%d%d%d.%s
   bcd5c:	7325 2500 3073 3030 2500 2c73 6322 6e6f     %s.%s000.%s,"con
   bcd6c:	6574 7478 3a22 7b20 7325 007d 7325 002c     text": {%s}.%s,.
   bcd7c:	6170 6c79 616f 3a64 2500 7c73 4f50 5453     payload:.%s|POST
   bcd8c:	257c 7c73 2500 2573 3a73 7325 2500 3d73     |%s|.%s%s:%s.%s=
   bcd9c:	003e 7325 2524 0073 7325 2540 756c 2500     >.%s$%s.%s@%lu.%
   bcdac:	7c73 6e65 0064 6553 646e 6e69 2067 6164     s|end.Sending da
   bcdbc:	6174 2e2e 002e 7441 6574 706d 6974 676e     ta....Attempting
   bcdcc:	7420 206f 6572 6f63 6e6e 6365 0074 4c7c      to reconnect.|L
   bcddc:	7c56 5000 7961 6f6c 6461 6620 726f 7220     V|.Payload for r
   bcdec:	7165 6575 7473 003a 2d0a 2d2d 002d 4f50     equest:..----.PO
   bcdfc:	5453 4f00 004b 6f43 6c75 2064 6f6e 2074     ST.OK.Could not 
   bce0c:	6f63 6e6e 6365 2074 6f74 7420 6568 6820     connect to the h
   bce1c:	736f 0074 564c 4500 5252 524f 6320 756f     ost.LV.ERROR cou
   bce2c:	646c 6e20 746f 6320 6e6f 656e 7463 7420     ld not connect t
   bce3c:	206f 6874 2065 6573 7672 7265 6e00 6c75     o the server.nul
   bce4c:	006c 5245 4f52 0052                         l.ERROR.

000bce54 <_ZTV6UbiTCP>:
	...
   bce5c:	662d 000b 66d1 000b 6361 000b 6895 000b     -f...f..ac...h..
   bce6c:	0400 514d 5454 0004                         ..MQTT..

000bce74 <_ZTVN5spark12NetworkClassE>:
	...
   bce7c:	7615 000b 761f 000b 7629 000b 7633 000b     .v...v..)v..3v..
   bce8c:	763d 000b 7649 000b 7655 000b 765d 000b     =v..Iv..Uv..]v..
   bce9c:	7665 000b 7671 000b 7679 000b 7683 000b     ev..qv..yv...v..
   bceac:	768d 000b 6977 6972 676e 7200 6365 2076     .v..wiring.recv 
   bcebc:	7265 6f72 2072 203d 6425 0000               error = %d..

000bcec8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bced0:	77fd 000b 7821 000b 7d17 000b 782f 000b     .w..!x...}../x..
   bcee0:	7801 000b                                   .x..

000bcee4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bceec <_ZTV9TCPClient>:
	...
   bcef4:	540d 000b 5441 000b 7779 000b 7793 000b     .T..AT..yw...w..
   bcf04:	7ba1 000b 77bd 000b 7a17 000b 77f1 000b     .{...w...z...w..
   bcf14:	7aa9 000b 78e9 000b 7a45 000b 7c55 000b     .z...x..Ez..U|..
   bcf24:	79e5 000b 77f3 000b 77a5 000b 7835 000b     .y...w...w..5x..
   bcf34:	78c9 000b                                   .x..

000bcf38 <_ZTV7TwoWire>:
	...
   bcf40:	7d5b 000b 7da5 000b 7d7d 000b 7d5d 000b     [}...}..}}..]}..
   bcf50:	7d85 000b 7d8d 000b 7d95 000b 7d9d 000b     .}...}...}...}..

000bcf60 <_ZTV11USARTSerial>:
	...
   bcf68:	7e13 000b 7e7f 000b 7e57 000b 89e5 000b     .~...~..W~......
   bcf78:	7e27 000b 7e43 000b 7e35 000b 7e51 000b     '~..C~..5~..Q~..
   bcf88:	7e15 000b 7e19 000b                         .~...~..

000bcf90 <_ZTVN5spark13CellularClassE>:
	...
   bcf98:	7f21 000b 7f17 000b 7f0d 000b 7ec3 000b     !............~..
   bcfa8:	7f01 000b 7ef5 000b 7655 000b 765d 000b     .....~..Uv..]v..
   bcfb8:	7ee9 000b 7ee1 000b 7ed7 000b 7ecd 000b     .~...~...~...~..
   bcfc8:	768d 000b                                   .v..

000bcfcc <_ZTV9USBSerial>:
	...
   bcfd4:	7f63 000b 7fcb 000b 7fa1 000b 89e5 000b     c...............
   bcfe4:	7f93 000b 7f65 000b 7f75 000b 7fc5 000b     ....e...u.......
   bcff4:	7f85 000b 7f5d 000b                         ....]...

000bcffc <_ZTV9IPAddress>:
	...
   bd004:	8075 000b 8065 000b 8067 000b               u...e...g...

000bd010 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd018:	8199 000b 819f 000b 81dd 000b 81ad 000b     ................
   bd028:	819b 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bd038:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   bd048:	7061 0070                                   app.

000bd04c <_ZTV3UDP>:
	...
   bd054:	92b9 000b 92dd 000b 8d79 000b 8ea1 000b     ........y.......
   bd064:	8d31 000b 8d91 000b 8daf 000b 8dc9 000b     1...............
   bd074:	8ded 000b 8e85 000b 915f 000b 8f25 000b     ........_...%...
   bd084:	907d 000b 8d19 000b 9249 000b 9005 000b     }.......I.......
   bd094:	8d39 000b 9277 000b 8ecb 000b 8d27 000b     9...w.......'...
   bd0a4:	8f5d 000b 8d2d 000b 8dcb 000b fff0 ffff     ]...-...........
   bd0b4:	0000 0000 8de5 000b                         ........

000bd0bc <_ZTVN5spark13EthernetClassE>:
	...
   bd0c4:	934f 000b 9345 000b 933b 000b 9331 000b     O...E...;...1...
   bd0d4:	9325 000b 9319 000b 7655 000b 765d 000b     %.......Uv..]v..
   bd0e4:	930d 000b 9305 000b 92fb 000b 92f1 000b     ................
   bd0f4:	768d 000b                                   .v..

000bd0f8 <_ZSt7nothrow>:
	...

000bd0f9 <_ZTSSt19_Sp_make_shared_tag>:
   bd0f9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd109:	6572 5f64 6174 0067 0000                     red_tag....

000bd114 <_ZTISt19_Sp_make_shared_tag>:
   bd114:	d154 000b d0f9 000b                         T.......

000bd11c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd11c:	d1b4 000b d128 000b d1d8 000b               ....(.......

000bd128 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd128:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd138:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd148:	0045 0000                                   E...

000bd14c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd14c:	0000 0000 d11c 000b 9795 000b 97a9 000b     ................
   bd15c:	993d 000b 993d 000b 9813 000b 9755 000b     =...=.......U...
   bd16c:	97fb 000b 97bd 000b 9787 000b               ............

000bd178 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd178:	d1b4 000b d184 000b d11c 000b               ............

000bd184 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd184:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd194:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd1a4:	666e 456f 0000 0000                         nfoE....

000bd1ac <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd1ac:	0000 0000 d178 000b 983d 000b 9851 000b     ....x...=...Q...
   bd1bc:	993d 000b 993d 000b 9813 000b 9755 000b     =...=.......U...
   bd1cc:	9911 000b 989d 000b 9865 000b               ........e...

000bd1d8 <_ZTISt9type_info>:
   bd1d8:	d154 000b d1e0 000b                         T.......

000bd1e0 <_ZTSSt9type_info>:
   bd1e0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bd1f0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bd200:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bd210:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd220:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd230:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd240:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd250:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd260:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd270:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bd280:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bd290 <fpi.1>:
   bd290:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd2a0:	0000 0000                                   ....

000bd2a4 <fpinan.0>:
   bd2a4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bd2b4:	0000 0000                                   ....

000bd2b8 <tinytens>:
   bd2b8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd2c8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd2d8:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bd2e8:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd2f8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd308:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd318:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd328:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd338:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd348:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bd358:	7472 6b6f 632e                               rtok.c.

000bd35f <_ctype_>:
   bd35f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd36f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd37f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd38f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd39f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd3af:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd3bf:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd3cf:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd3df:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd45f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd46f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bd47f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bd48f:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bd49f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bd4af:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bd4bf:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bd4cf:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bd4df:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bd4ef:	6874 7865 632e 0000                          thex.c...

000bd4f8 <_C_numeric_locale>:
   bd4f8:	cc06 000b cc8b 000b e028 2003 0043 4f50     ........(.. C.PO
   bd508:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bd518:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd528:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd538:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd548:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd558:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd568:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd578:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bd588:	0063 0000 0000 0000                         c.......

000bd590 <__mprec_bigtens>:
   bd590:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd5a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd5b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd5b8 <__mprec_tens>:
   bd5b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd5c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd5d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd5e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd5f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd608:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd618:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd628:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd638:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd648:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd658:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd668:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd678:	9db4 79d9 7843 44ea                         ...yCx.D

000bd680 <p05.0>:
   bd680:	0005 0000 0019 0000 007d 0000               ........}...

000bd68c <link_const_variable_data_end>:
   bd68c:	000b4fd9 	.word	0x000b4fd9
   bd690:	000b51d9 	.word	0x000b51d9
   bd694:	000b56b1 	.word	0x000b56b1
   bd698:	000b5d2d 	.word	0x000b5d2d
   bd69c:	000b6331 	.word	0x000b6331
   bd6a0:	000b6975 	.word	0x000b6975
   bd6a4:	000b7765 	.word	0x000b7765
   bd6a8:	000b7f2d 	.word	0x000b7f2d
   bd6ac:	000b88b5 	.word	0x000b88b5
   bd6b0:	000b893d 	.word	0x000b893d
   bd6b4:	000b8951 	.word	0x000b8951
   bd6b8:	000b8b0d 	.word	0x000b8b0d
   bd6bc:	000b8cf5 	.word	0x000b8cf5
   bd6c0:	000b9359 	.word	0x000b9359

000bd6c4 <link_constructors_end>:
	...
