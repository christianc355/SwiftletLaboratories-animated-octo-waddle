
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/bleWifiSetup/target/4.0.0/argon/bleWifiSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000055b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b95d0  000b95d0  000095d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b95f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e590  000b95f8  0001e590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ec  2003e604  2003e604  0002e604  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b966c  000b966c  0002966c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9694  000b9694  00029694  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001476a1  00000000  00000000  00029698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001313d  00000000  00000000  00170d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002e78  00000000  00000000  00183e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000358ce  00000000  00000000  00186cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0003c39c  00000000  00000000  001bc5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0014b1e4  00000000  00000000  001f8958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0004263c  00000000  00000000  00343b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000bcd8  00000000  00000000  00386178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008830  00000000  00000000  00391e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fc21 	bl	b8874 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fc43 	bl	b88c4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e590 	.word	0x2003e590
   b4048:	000b95f8 	.word	0x000b95f8
   b404c:	2003e604 	.word	0x2003e604
   b4050:	2003e604 	.word	0x2003e604
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 ff79 	bl	b5f54 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b95a8 	.word	0x000b95a8
   b407c:	000b95d0 	.word	0x000b95d0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b86c 	b.w	b415c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f881 	bl	b418c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bf19 	b.w	b5ec4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b8d7 	b.w	b5244 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b8d5 	b.w	b5244 <malloc>

000b409a <_ZdaPv>:
   b409a:	f001 b8db 	b.w	b5254 <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 b8d9 	b.w	b5254 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fff4 	bl	b5098 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5059 	.word	0x000b5059
   b40b8:	000b8bf4 	.word	0x000b8bf4

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_Z11provisionCbv>:
} ProvisionStates_t;

ProvisionStates_t provision_state, next_provision_state;

void provisionCb() {
    provision_state = STATE_PROVISIONED;
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z11provisionCbv+0x8>)
   b40da:	2201      	movs	r2, #1
   b40dc:	701a      	strb	r2, [r3, #0]
}
   b40de:	4770      	bx	lr
   b40e0:	2003e635 	.word	0x2003e635

000b40e4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40e4:	4b0a      	ldr	r3, [pc, #40]	; (b4110 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40e6:	b510      	push	{r4, lr}
   b40e8:	4604      	mov	r4, r0
   b40ea:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40ec:	f002 f8c8 	bl	b6280 <_ZN5spark10LogManager8instanceEv>
   b40f0:	4621      	mov	r1, r4
   b40f2:	f002 faf0 	bl	b66d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40f6:	f001 fe13 	bl	b5d20 <_Z16_fetch_usbserialv>
   b40fa:	f001 fe05 	bl	b5d08 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40fe:	4620      	mov	r0, r4
   b4100:	4b04      	ldr	r3, [pc, #16]	; (b4114 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4102:	f840 3b04 	str.w	r3, [r0], #4
   b4106:	f002 f981 	bl	b640c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b410a:	4620      	mov	r0, r4
   b410c:	bd10      	pop	{r4, pc}
   b410e:	bf00      	nop
   b4110:	000b8c70 	.word	0x000b8c70
   b4114:	000b8c58 	.word	0x000b8c58

000b4118 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4118:	b510      	push	{r4, lr}
   b411a:	4604      	mov	r4, r0
    }
   b411c:	f7ff ffe2 	bl	b40e4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4120:	4620      	mov	r0, r4
   b4122:	2124      	movs	r1, #36	; 0x24
   b4124:	f7ff ffbb 	bl	b409e <_ZdlPvj>
   b4128:	4620      	mov	r0, r4
   b412a:	bd10      	pop	{r4, pc}

000b412c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b412c:	b40e      	push	{r1, r2, r3}
   b412e:	b500      	push	{lr}
   b4130:	b08c      	sub	sp, #48	; 0x30
   b4132:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4134:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4138:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b413c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b413e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4142:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4144:	6801      	ldr	r1, [r0, #0]
   b4146:	aa04      	add	r2, sp, #16
   b4148:	201e      	movs	r0, #30
    attr.flags = 0;
   b414a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b414e:	f000 ffbb 	bl	b50c8 <log_message_v>
}
   b4152:	b00c      	add	sp, #48	; 0x30
   b4154:	f85d eb04 	ldr.w	lr, [sp], #4
   b4158:	b003      	add	sp, #12
   b415a:	4770      	bx	lr

000b415c <setup>:

void setup() {
   b415c:	b508      	push	{r3, lr}
	provision_state      = STATE_IDLE;
   b415e:	4a07      	ldr	r2, [pc, #28]	; (b417c <setup+0x20>)
    next_provision_state = STATE_IDLE;
    
    wifi_manager.setup();
   b4160:	4807      	ldr	r0, [pc, #28]	; (b4180 <setup+0x24>)
	provision_state      = STATE_IDLE;
   b4162:	2300      	movs	r3, #0
   b4164:	7013      	strb	r3, [r2, #0]
    next_provision_state = STATE_IDLE;
   b4166:	4a07      	ldr	r2, [pc, #28]	; (b4184 <setup+0x28>)
   b4168:	7013      	strb	r3, [r2, #0]
    wifi_manager.setup();
   b416a:	f000 f9eb 	bl	b4544 <_ZN19BLEWiFiSetupManager5setupEv>
    wifi_manager.setProvisionCallback(provisionCb);
}
   b416e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    wifi_manager.setProvisionCallback(provisionCb);
   b4172:	4905      	ldr	r1, [pc, #20]	; (b4188 <setup+0x2c>)
   b4174:	4802      	ldr	r0, [pc, #8]	; (b4180 <setup+0x24>)
   b4176:	f000 bb3a 	b.w	b47ee <_ZN19BLEWiFiSetupManager20setProvisionCallbackEPFvvE>
   b417a:	bf00      	nop
   b417c:	2003e635 	.word	0x2003e635
   b4180:	2003e638 	.word	0x2003e638
   b4184:	2003e634 	.word	0x2003e634
   b4188:	000b40d9 	.word	0x000b40d9

000b418c <loop>:

void loop() {
   b418c:	b570      	push	{r4, r5, r6, lr}
	wifi_manager.loop();

    // State machine to handle WiFi provisioning states
    switch(provision_state) {
   b418e:	4d16      	ldr	r5, [pc, #88]	; (b41e8 <loop+0x5c>)
	wifi_manager.loop();
   b4190:	4816      	ldr	r0, [pc, #88]	; (b41ec <loop+0x60>)
   b4192:	4c17      	ldr	r4, [pc, #92]	; (b41f0 <loop+0x64>)
   b4194:	f000 fcfe 	bl	b4b94 <_ZN19BLEWiFiSetupManager4loopEv>
    switch(provision_state) {
   b4198:	782b      	ldrb	r3, [r5, #0]
   b419a:	b1e3      	cbz	r3, b41d6 <loop+0x4a>
   b419c:	2b01      	cmp	r3, #1
   b419e:	d00a      	beq.n	b41b6 <loop+0x2a>
            next_provision_state = STATE_IDLE;
            break;
        }
    }

    if (provision_state != next_provision_state) {
   b41a0:	782a      	ldrb	r2, [r5, #0]
   b41a2:	7823      	ldrb	r3, [r4, #0]
   b41a4:	429a      	cmp	r2, r3
   b41a6:	d005      	beq.n	b41b4 <loop+0x28>
        Log.info("Provision State Transition: %u -> %u", provision_state, next_provision_state);
   b41a8:	4912      	ldr	r1, [pc, #72]	; (b41f4 <loop+0x68>)
   b41aa:	4813      	ldr	r0, [pc, #76]	; (b41f8 <loop+0x6c>)
   b41ac:	f7ff ffbe 	bl	b412c <_ZNK5spark6Logger4infoEPKcz>
        provision_state = next_provision_state;
   b41b0:	7823      	ldrb	r3, [r4, #0]
   b41b2:	702b      	strb	r3, [r5, #0]
    }
   b41b4:	bd70      	pop	{r4, r5, r6, pc}
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b41b6:	4e11      	ldr	r6, [pc, #68]	; (b41fc <loop+0x70>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b41b8:	2200      	movs	r2, #0
   b41ba:	4611      	mov	r1, r2
   b41bc:	6870      	ldr	r0, [r6, #4]
   b41be:	f000 ffcd 	bl	b515c <network_ready>
            if (WiFi.ready() || WiFi.connecting()) {
   b41c2:	4602      	mov	r2, r0
   b41c4:	b148      	cbz	r0, b41da <loop+0x4e>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b41c6:	6870      	ldr	r0, [r6, #4]
   b41c8:	2200      	movs	r2, #0
   b41ca:	2102      	movs	r1, #2
   b41cc:	f000 ffbe 	bl	b514c <network_disconnect>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b41d0:	f000 ff9c 	bl	b510c <spark_cloud_flag_connect>
            next_provision_state = STATE_IDLE;
   b41d4:	2300      	movs	r3, #0
   b41d6:	7023      	strb	r3, [r4, #0]
            break;
   b41d8:	e7e2      	b.n	b41a0 <loop+0x14>
        return network_connecting(*this, 0, NULL);
   b41da:	4601      	mov	r1, r0
   b41dc:	6870      	ldr	r0, [r6, #4]
   b41de:	f000 ffad 	bl	b513c <network_connecting>
            if (WiFi.ready() || WiFi.connecting()) {
   b41e2:	2800      	cmp	r0, #0
   b41e4:	d1ef      	bne.n	b41c6 <loop+0x3a>
   b41e6:	e7f3      	b.n	b41d0 <loop+0x44>
   b41e8:	2003e635 	.word	0x2003e635
   b41ec:	2003e638 	.word	0x2003e638
   b41f0:	2003e634 	.word	0x2003e634
   b41f4:	000b8c09 	.word	0x000b8c09
   b41f8:	2003e6ec 	.word	0x2003e6ec
   b41fc:	2003e6a4 	.word	0x2003e6a4

000b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4200:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4202:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4206:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4208:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b420a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b420e:	42ae      	cmp	r6, r5
   b4210:	d004      	beq.n	b421c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4212:	4628      	mov	r0, r5
   b4214:	f004 f8ac 	bl	b8370 <_ZN6StringD1Ev>
   b4218:	3514      	adds	r5, #20
   b421a:	e7f8      	b.n	b420e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b421c:	6820      	ldr	r0, [r4, #0]
   b421e:	f001 f819 	bl	b5254 <free>
    AllocatorT::free(data_);
}
   b4222:	4620      	mov	r0, r4
   b4224:	bd70      	pop	{r4, r5, r6, pc}

000b4226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b4226:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
   b422a:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
   b422e:	4607      	mov	r7, r0
        if (n > 0) {
   b4230:	dd38      	ble.n	b42a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4232:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
   b4236:	fb09 f008 	mul.w	r0, r9, r8
   b423a:	f001 f803 	bl	b5244 <malloc>
            if (!d) {
   b423e:	4605      	mov	r5, r0
   b4240:	b3c0      	cbz	r0, b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x8e>
            move(d, data_, data_ + size_);
   b4242:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
   b4246:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b4248:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
   b424c:	d215      	bcs.n	b427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
   b424e:	4286      	cmp	r6, r0
   b4250:	d914      	bls.n	b427c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
   b4252:	3e14      	subs	r6, #20
            dest += end - p - 1;
   b4254:	f1a4 0914 	sub.w	r9, r4, #20
   b4258:	1b34      	subs	r4, r6, r4
   b425a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b425c:	45b1      	cmp	r9, r6
   b425e:	d022      	beq.n	b42a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*end));
   b4260:	b12c      	cbz	r4, b426e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
   b4262:	4631      	mov	r1, r6
   b4264:	4620      	mov	r0, r4
   b4266:	f004 f8ff 	bl	b8468 <_ZN6StringC1EOS_>
   b426a:	7c33      	ldrb	r3, [r6, #16]
   b426c:	7423      	strb	r3, [r4, #16]
   b426e:	4630      	mov	r0, r6
   b4270:	f004 f87e 	bl	b8370 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4274:	3e14      	subs	r6, #20
   b4276:	3c14      	subs	r4, #20
   b4278:	e7f0      	b.n	b425c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
   b427a:	d014      	beq.n	b42a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
   b427c:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
   b427e:	42a6      	cmp	r6, r4
   b4280:	d011      	beq.n	b42a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*p));
   b4282:	f1b9 0f00 	cmp.w	r9, #0
   b4286:	d006      	beq.n	b4296 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x70>
   b4288:	4621      	mov	r1, r4
   b428a:	4648      	mov	r0, r9
   b428c:	f004 f8ec 	bl	b8468 <_ZN6StringC1EOS_>
   b4290:	7c23      	ldrb	r3, [r4, #16]
   b4292:	f889 3010 	strb.w	r3, [r9, #16]
   b4296:	4620      	mov	r0, r4
   b4298:	f004 f86a 	bl	b8370 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b429c:	3414      	adds	r4, #20
   b429e:	f109 0914 	add.w	r9, r9, #20
   b42a2:	e7ec      	b.n	b427e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
   b42a4:	2500      	movs	r5, #0
    ::free(ptr);
   b42a6:	6838      	ldr	r0, [r7, #0]
   b42a8:	f000 ffd4 	bl	b5254 <free>
        data_ = d;
   b42ac:	603d      	str	r5, [r7, #0]
        capacity_ = n;
   b42ae:	f8c7 8008 	str.w	r8, [r7, #8]
        return true;
   b42b2:	2001      	movs	r0, #1
    }
   b42b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42bc:	2300      	movs	r3, #0
   b42be:	e9c0 3300 	strd	r3, r3, [r0]
   b42c2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42c4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42c6:	6849      	ldr	r1, [r1, #4]
   b42c8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42ca:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42cc:	dd17      	ble.n	b42fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   b42ce:	f7ff ffaa 	bl	b4226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b42d2:	b1a0      	cbz	r0, b42fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b42d4:	e9d5 6300 	ldrd	r6, r3, [r5]
   b42d8:	f04f 0814 	mov.w	r8, #20
   b42dc:	6827      	ldr	r7, [r4, #0]
   b42de:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   b42e2:	45b0      	cmp	r8, r6
   b42e4:	d009      	beq.n	b42fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   b42e6:	b12f      	cbz	r7, b42f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   b42e8:	4631      	mov	r1, r6
   b42ea:	4638      	mov	r0, r7
   b42ec:	f004 f8d6 	bl	b849c <_ZN6StringC1ERKS_>
   b42f0:	7c33      	ldrb	r3, [r6, #16]
   b42f2:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   b42f4:	3614      	adds	r6, #20
   b42f6:	3714      	adds	r7, #20
   b42f8:	e7f3      	b.n	b42e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   b42fa:	686b      	ldr	r3, [r5, #4]
   b42fc:	6063      	str	r3, [r4, #4]
}
   b42fe:	4620      	mov	r0, r4
   b4300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4304 <_GLOBAL__sub_I_SystemMode>:
   b4304:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4306:	4b3e      	ldr	r3, [pc, #248]	; (b4400 <_GLOBAL__sub_I_SystemMode+0xfc>)
    SleepResult() {}
   b4308:	4a3e      	ldr	r2, [pc, #248]	; (b4404 <_GLOBAL__sub_I_SystemMode+0x100>)
   b430a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b430c:	2400      	movs	r4, #0
   b430e:	b09c      	sub	sp, #112	; 0x70
   b4310:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4314:	2003      	movs	r0, #3
   b4316:	f000 ff71 	bl	b51fc <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b431a:	4621      	mov	r1, r4
   b431c:	2001      	movs	r0, #1
   b431e:	f000 ff75 	bl	b520c <system_thread_set_state>
        level_(level) {
   b4322:	4939      	ldr	r1, [pc, #228]	; (b4408 <_GLOBAL__sub_I_SystemMode+0x104>)
   b4324:	a80d      	add	r0, sp, #52	; 0x34
   b4326:	f004 f86e 	bl	b8406 <_ZN6StringC1EPK19__FlashStringHelper>
   b432a:	2501      	movs	r5, #1
   b432c:	4937      	ldr	r1, [pc, #220]	; (b440c <_GLOBAL__sub_I_SystemMode+0x108>)
   b432e:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
   b4332:	a812      	add	r0, sp, #72	; 0x48
   b4334:	f004 f867 	bl	b8406 <_ZN6StringC1EPK19__FlashStringHelper>
   b4338:	4935      	ldr	r1, [pc, #212]	; (b4410 <_GLOBAL__sub_I_SystemMode+0x10c>)
   b433a:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
   b433e:	a817      	add	r0, sp, #92	; 0x5c
   b4340:	f004 f861 	bl	b8406 <_ZN6StringC1EPK19__FlashStringHelper>
    if (n > 0 && realloc(n)) {
   b4344:	2103      	movs	r1, #3
   b4346:	a801      	add	r0, sp, #4
        capacity_(0) {
   b4348:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b434c:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
   b4350:	9403      	str	r4, [sp, #12]
    if (n > 0 && realloc(n)) {
   b4352:	f7ff ff68 	bl	b4226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b4356:	b188      	cbz	r0, b437c <_GLOBAL__sub_I_SystemMode+0x78>
        copy(data_, values.begin(), values.end());
   b4358:	9c01      	ldr	r4, [sp, #4]
   b435a:	ad0d      	add	r5, sp, #52	; 0x34
   b435c:	f104 063c 	add.w	r6, r4, #60	; 0x3c
            new(dest) T(*p);
   b4360:	b12c      	cbz	r4, b436e <_GLOBAL__sub_I_SystemMode+0x6a>
class LogCategoryFilter {
   b4362:	4629      	mov	r1, r5
   b4364:	4620      	mov	r0, r4
   b4366:	f004 f899 	bl	b849c <_ZN6StringC1ERKS_>
   b436a:	7c2b      	ldrb	r3, [r5, #16]
   b436c:	7423      	strb	r3, [r4, #16]
        for (; p != end; ++p, ++dest) {
   b436e:	3414      	adds	r4, #20
   b4370:	42b4      	cmp	r4, r6
   b4372:	f105 0514 	add.w	r5, r5, #20
   b4376:	d1f3      	bne.n	b4360 <_GLOBAL__sub_I_SystemMode+0x5c>
        size_ = n;
   b4378:	2303      	movs	r3, #3
   b437a:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b437c:	f001 fcd0 	bl	b5d20 <_Z16_fetch_usbserialv>
   b4380:	a901      	add	r1, sp, #4
   b4382:	4605      	mov	r5, r0
   b4384:	a804      	add	r0, sp, #16
        filter_(level, filters) {
   b4386:	4c23      	ldr	r4, [pc, #140]	; (b4414 <_GLOBAL__sub_I_SystemMode+0x110>)
   b4388:	f7ff ff96 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b438c:	a904      	add	r1, sp, #16
   b438e:	a807      	add	r0, sp, #28
   b4390:	f7ff ff92 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4394:	4b20      	ldr	r3, [pc, #128]	; (b4418 <_GLOBAL__sub_I_SystemMode+0x114>)
   b4396:	6023      	str	r3, [r4, #0]
   b4398:	a907      	add	r1, sp, #28
   b439a:	a80a      	add	r0, sp, #40	; 0x28
   b439c:	f7ff ff8c 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43a0:	aa0a      	add	r2, sp, #40	; 0x28
   b43a2:	2128      	movs	r1, #40	; 0x28
   b43a4:	1d20      	adds	r0, r4, #4
   b43a6:	f002 fa79 	bl	b689c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b43aa:	a80a      	add	r0, sp, #40	; 0x28
   b43ac:	f7ff ff28 	bl	b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b43b0:	a807      	add	r0, sp, #28
   b43b2:	f7ff ff25 	bl	b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43b6:	4b19      	ldr	r3, [pc, #100]	; (b441c <_GLOBAL__sub_I_SystemMode+0x118>)
   b43b8:	6023      	str	r3, [r4, #0]
   b43ba:	6225      	str	r5, [r4, #32]
   b43bc:	a804      	add	r0, sp, #16
   b43be:	f7ff ff1f 	bl	b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43c2:	4b17      	ldr	r3, [pc, #92]	; (b4420 <_GLOBAL__sub_I_SystemMode+0x11c>)
   b43c4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b43c6:	f001 fcab 	bl	b5d20 <_Z16_fetch_usbserialv>
   b43ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43ce:	f001 fc97 	bl	b5d00 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b43d2:	f001 ff55 	bl	b6280 <_ZN5spark10LogManager8instanceEv>
   b43d6:	4621      	mov	r1, r4
   b43d8:	f002 f936 	bl	b6648 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
});
   b43dc:	a801      	add	r0, sp, #4
   b43de:	f7ff ff0f 	bl	b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
   b43e2:	a817      	add	r0, sp, #92	; 0x5c
   b43e4:	f003 ffc4 	bl	b8370 <_ZN6StringD1Ev>
   b43e8:	a812      	add	r0, sp, #72	; 0x48
   b43ea:	f003 ffc1 	bl	b8370 <_ZN6StringD1Ev>
   b43ee:	a80d      	add	r0, sp, #52	; 0x34
   b43f0:	f003 ffbe 	bl	b8370 <_ZN6StringD1Ev>
BLEWiFiSetupManager wifi_manager;
   b43f4:	480b      	ldr	r0, [pc, #44]	; (b4424 <_GLOBAL__sub_I_SystemMode+0x120>)
   b43f6:	b01c      	add	sp, #112	; 0x70
   b43f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BLEWiFiSetupManager wifi_manager;
   b43fc:	f000 b84b 	b.w	b4496 <_ZN19BLEWiFiSetupManagerC1Ev>
   b4400:	2003e604 	.word	0x2003e604
   b4404:	ffff0000 	.word	0xffff0000
   b4408:	000b8c2e 	.word	0x000b8c2e
   b440c:	000b8c32 	.word	0x000b8c32
   b4410:	000b8c42 	.word	0x000b8c42
   b4414:	2003e610 	.word	0x2003e610
   b4418:	000b8c58 	.word	0x000b8c58
   b441c:	000b90b8 	.word	0x000b90b8
   b4420:	000b8c70 	.word	0x000b8c70
   b4424:	2003e638 	.word	0x2003e638

000b4428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4428:	680b      	ldr	r3, [r1, #0]
   b442a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b442c:	684b      	ldr	r3, [r1, #4]
   b442e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4430:	b113      	cbz	r3, b4438 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b4432:	685a      	ldr	r2, [r3, #4]
   b4434:	3201      	adds	r2, #1
   b4436:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4438:	4770      	bx	lr

000b443a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b443a:	b510      	push	{r4, lr}
   b443c:	4604      	mov	r4, r0
   b443e:	b08a      	sub	sp, #40	; 0x28
   b4440:	4608      	mov	r0, r1
    attr.flags = 0;
   b4442:	f04f 0c20 	mov.w	ip, #32
   b4446:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4448:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b444c:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4450:	460b      	mov	r3, r1
   b4452:	aa02      	add	r2, sp, #8
   b4454:	6821      	ldr	r1, [r4, #0]
   b4456:	f000 fe37 	bl	b50c8 <log_message_v>
}
   b445a:	b00a      	add	sp, #40	; 0x28
   b445c:	bd10      	pop	{r4, pc}

000b445e <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b445e:	b40e      	push	{r1, r2, r3}
   b4460:	b503      	push	{r0, r1, lr}
   b4462:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b4464:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4466:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b446a:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b446c:	f7ff ffe5 	bl	b443a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b4470:	b002      	add	sp, #8
   b4472:	f85d eb04 	ldr.w	lr, [sp], #4
   b4476:	b003      	add	sp, #12
   b4478:	4770      	bx	lr

000b447a <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
   b447a:	b40e      	push	{r1, r2, r3}
   b447c:	b503      	push	{r0, r1, lr}
   b447e:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_WARN, fmt, args);
   b4480:	2128      	movs	r1, #40	; 0x28
inline void spark::Logger::warn(const char *fmt, ...) const {
   b4482:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b4486:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
   b4488:	f7ff ffd7 	bl	b443a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b448c:	b002      	add	sp, #8
   b448e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4492:	b003      	add	sp, #12
   b4494:	4770      	bx	lr

000b4496 <_ZN19BLEWiFiSetupManagerC1Ev>:
static void onDataReceived(const uint8_t* rx_data, size_t len, const BlePeerDevice& peer, void* self) {
    // Is this really the way to do this?
    ((BLEWiFiSetupManager*)self)->queue_msg(rx_data, len);
}

BLEWiFiSetupManager::BLEWiFiSetupManager() 
   b4496:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b449a:	4604      	mov	r4, r0
  : config_state(STATE_CONFIG_SETUP),
    next_config_state(STATE_CONFIG_SETUP),
    provisionCb(nullptr)
   b449c:	2500      	movs	r5, #0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b449e:	f04f 0808 	mov.w	r8, #8
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b44a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b44a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b44aa:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b44ae:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b44b2:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b44b6:	8005      	strh	r5, [r0, #0]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b44b8:	f8c0 800c 	str.w	r8, [r0, #12]
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b44bc:	2020      	movs	r0, #32
   b44be:	f7ff fde8 	bl	b4092 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b44c2:	68e6      	ldr	r6, [r4, #12]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b44c4:	60a0      	str	r0, [r4, #8]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b44c6:	3e01      	subs	r6, #1
   b44c8:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b44ca:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b44ce:	4607      	mov	r7, r0
   b44d0:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
   b44d4:	f7ff fddd 	bl	b4092 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b44d8:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
   b44dc:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b44e0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b44e4:	61a3      	str	r3, [r4, #24]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b44e6:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
   b44ea:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
   b44ee:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   b44f2:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
	_M_first = *__new_node;
   b44f6:	6160      	str	r0, [r4, #20]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b44f8:	6120      	str	r0, [r4, #16]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b44fa:	6220      	str	r0, [r4, #32]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b44fc:	6325      	str	r5, [r4, #48]	; 0x30
	_M_node = __new_node;
   b44fe:	f8c4 901c 	str.w	r9, [r4, #28]
   b4502:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b4506:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   b450a:	2020      	movs	r0, #32
   b450c:	f7ff fdc1 	bl	b4092 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b4510:	6b65      	ldr	r5, [r4, #52]	; 0x34
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b4512:	6320      	str	r0, [r4, #48]	; 0x30
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b4514:	3d01      	subs	r5, #1
   b4516:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b4518:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   b451c:	4606      	mov	r6, r0
   b451e:	f44f 7000 	mov.w	r0, #512	; 0x200
   b4522:	f7ff fdb6 	bl	b4092 <_Znwj>
	    *__cur = this->_M_allocate_node();
   b4526:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b452a:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b452e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
	_M_first = *__new_node;
   b4532:	63e0      	str	r0, [r4, #60]	; 0x3c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b4534:	63a0      	str	r0, [r4, #56]	; 0x38
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b4536:	64a0      	str	r0, [r4, #72]	; 0x48
	_M_node = __new_node;
   b4538:	6467      	str	r7, [r4, #68]	; 0x44
	_M_last = _M_first + difference_type(_S_buffer_size());
   b453a:	6423      	str	r3, [r4, #64]	; 0x40
	_M_node = __new_node;
   b453c:	6567      	str	r7, [r4, #84]	; 0x54
{}
   b453e:	4620      	mov	r0, r4
   b4540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4544 <_ZN19BLEWiFiSetupManager5setupEv>:

void BLEWiFiSetupManager::setup() {
   b4544:	b570      	push	{r4, r5, r6, lr}
   b4546:	4604      	mov	r4, r0
   b4548:	b090      	sub	sp, #64	; 0x40
    rxCharacteristic = new BleCharacteristic("rx", BleCharacteristicProperty::NOTIFY, readUUID, serviceUUID);
   b454a:	2008      	movs	r0, #8
   b454c:	f7ff fda1 	bl	b4092 <_Znwj>
   b4550:	4605      	mov	r5, r0
   b4552:	b1a8      	cbz	r0, b4580 <_ZN19BLEWiFiSetupManager5setupEv+0x3c>
      : _M_ptr(0), _M_refcount()
   b4554:	2600      	movs	r6, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4556:	e9c0 6600 	strd	r6, r6, [r0]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b455a:	4947      	ldr	r1, [pc, #284]	; (b4678 <_ZN19BLEWiFiSetupManager5setupEv+0x134>)
   b455c:	a806      	add	r0, sp, #24
   b455e:	f002 ff91 	bl	b7484 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b4562:	4946      	ldr	r1, [pc, #280]	; (b467c <_ZN19BLEWiFiSetupManager5setupEv+0x138>)
   b4564:	a80b      	add	r0, sp, #44	; 0x2c
   b4566:	f002 ff8d 	bl	b7484 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b456a:	ab0b      	add	r3, sp, #44	; 0x2c
   b456c:	9300      	str	r3, [sp, #0]
   b456e:	e9cd 6601 	strd	r6, r6, [sp, #4]
   b4572:	4943      	ldr	r1, [pc, #268]	; (b4680 <_ZN19BLEWiFiSetupManager5setupEv+0x13c>)
   b4574:	ab06      	add	r3, sp, #24
   b4576:	f04f 0210 	mov.w	r2, #16
   b457a:	4628      	mov	r0, r5
   b457c:	f003 fcbe 	bl	b7efc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b4580:	65a5      	str	r5, [r4, #88]	; 0x58
    txCharacteristic = new BleCharacteristic("tx", BleCharacteristicProperty::WRITE_WO_RSP, writeUUID, serviceUUID, onDataReceived, this);
   b4582:	2008      	movs	r0, #8
   b4584:	f7ff fd85 	bl	b4092 <_Znwj>
   b4588:	4605      	mov	r5, r0
   b458a:	b1b0      	cbz	r0, b45ba <_ZN19BLEWiFiSetupManager5setupEv+0x76>
      : _M_ptr(0), _M_refcount()
   b458c:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b458e:	e9c0 3300 	strd	r3, r3, [r0]
        BleUuid cUuid(charUuid);
   b4592:	493c      	ldr	r1, [pc, #240]	; (b4684 <_ZN19BLEWiFiSetupManager5setupEv+0x140>)
   b4594:	a806      	add	r0, sp, #24
   b4596:	f002 ff75 	bl	b7484 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b459a:	4938      	ldr	r1, [pc, #224]	; (b467c <_ZN19BLEWiFiSetupManager5setupEv+0x138>)
   b459c:	a80b      	add	r0, sp, #44	; 0x2c
   b459e:	f002 ff71 	bl	b7484 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b45a2:	4b39      	ldr	r3, [pc, #228]	; (b4688 <_ZN19BLEWiFiSetupManager5setupEv+0x144>)
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	ab0b      	add	r3, sp, #44	; 0x2c
   b45a8:	9300      	str	r3, [sp, #0]
   b45aa:	4938      	ldr	r1, [pc, #224]	; (b468c <_ZN19BLEWiFiSetupManager5setupEv+0x148>)
   b45ac:	9402      	str	r4, [sp, #8]
   b45ae:	ab06      	add	r3, sp, #24
   b45b0:	f04f 0204 	mov.w	r2, #4
   b45b4:	4628      	mov	r0, r5
   b45b6:	f003 fca1 	bl	b7efc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b45ba:	65e5      	str	r5, [r4, #92]	; 0x5c

    BLE.addCharacteristic(*rxCharacteristic);
   b45bc:	f003 f8b0 	bl	b7720 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45c0:	6da2      	ldr	r2, [r4, #88]	; 0x58
   b45c2:	4601      	mov	r1, r0
   b45c4:	a80b      	add	r0, sp, #44	; 0x2c
   b45c6:	f003 fdc3 	bl	b8150 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b45ca:	a80b      	add	r0, sp, #44	; 0x2c
   b45cc:	f003 f99f 	bl	b790e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(*txCharacteristic);
   b45d0:	f003 f8a6 	bl	b7720 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   b45d6:	4601      	mov	r1, r0
   b45d8:	a80b      	add	r0, sp, #44	; 0x2c
   b45da:	f003 fdb9 	bl	b8150 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b45de:	a80b      	add	r0, sp, #44	; 0x2c
   b45e0:	f003 f995 	bl	b790e <_ZN8particle17BleCharacteristicD1Ev>

    // Advertise our custom configuration service UUID so the webapp can detect compatible devices
    BleAdvertisingData advData;
   b45e4:	a806      	add	r0, sp, #24
   b45e6:	f003 fab8 	bl	b7b5a <_ZN8particle18BleAdvertisingDataC1Ev>
        BleUuid tempUUID(uuid);
   b45ea:	4924      	ldr	r1, [pc, #144]	; (b467c <_ZN19BLEWiFiSetupManager5setupEv+0x138>)
   b45ec:	a80b      	add	r0, sp, #44	; 0x2c
   b45ee:	f002 ff49 	bl	b7484 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45f2:	a80b      	add	r0, sp, #44	; 0x2c
   b45f4:	f002 fea8 	bl	b7348 <_ZNK8particle7BleUuid4typeEv>
   b45f8:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b45fa:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45fc:	2c00      	cmp	r4, #0
   b45fe:	d133      	bne.n	b4668 <_ZN19BLEWiFiSetupManager5setupEv+0x124>
            uint16_t uuid16 = tempUUID.shorted();
   b4600:	f002 febe 	bl	b7380 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4604:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4606:	f8ad 0010 	strh.w	r0, [sp, #16]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b460a:	2302      	movs	r3, #2
   b460c:	aa04      	add	r2, sp, #16
   b460e:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4610:	a806      	add	r0, sp, #24
   b4612:	f003 fa97 	bl	b7b44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendServiceUUID(serviceUUID);
    BLE.advertise(&advData);
   b4616:	f003 f883 	bl	b7720 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b461a:	2200      	movs	r2, #0
   b461c:	a906      	add	r1, sp, #24
   b461e:	f003 f922 	bl	b7866 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

    BLEWiFiSetupManagerLogger.trace("Bluetooth Address: %s", BLE.address().toString().c_str());
   b4622:	f003 f87d 	bl	b7720 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4626:	4601      	mov	r1, r0
   b4628:	a804      	add	r0, sp, #16
   b462a:	f003 f8ca 	bl	b77c2 <_ZNK8particle14BleLocalDevice7addressEv>
   b462e:	a904      	add	r1, sp, #16
   b4630:	a80b      	add	r0, sp, #44	; 0x2c
   b4632:	2200      	movs	r2, #0
   b4634:	f002 fe30 	bl	b7298 <_ZNK8particle10BleAddress8toStringEb>
   b4638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b463a:	4915      	ldr	r1, [pc, #84]	; (b4690 <_ZN19BLEWiFiSetupManager5setupEv+0x14c>)
   b463c:	4815      	ldr	r0, [pc, #84]	; (b4694 <_ZN19BLEWiFiSetupManager5setupEv+0x150>)
   b463e:	f7ff ff0e 	bl	b445e <_ZNK5spark6Logger5traceEPKcz>
   b4642:	a80b      	add	r0, sp, #44	; 0x2c
   b4644:	f003 fe94 	bl	b8370 <_ZN6StringD1Ev>
    BLE.on();
   b4648:	f003 f86a 	bl	b7720 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b464c:	f003 f8b2 	bl	b77b4 <_ZNK8particle14BleLocalDevice2onEv>
        network_on(*this, 0, 0, NULL);
   b4650:	4811      	ldr	r0, [pc, #68]	; (b4698 <_ZN19BLEWiFiSetupManager5setupEv+0x154>)
   b4652:	2300      	movs	r3, #0
   b4654:	461a      	mov	r2, r3
   b4656:	4619      	mov	r1, r3
   b4658:	6840      	ldr	r0, [r0, #4]
   b465a:	f000 fd87 	bl	b516c <network_on>
    ::free(ptr);
   b465e:	9806      	ldr	r0, [sp, #24]
   b4660:	f000 fdf8 	bl	b5254 <free>

    // WiFi must be on for this library to work
    WiFi.on();
}
   b4664:	b010      	add	sp, #64	; 0x40
   b4666:	bd70      	pop	{r4, r5, r6, pc}
   b4668:	f002 fe8c 	bl	b7384 <_ZNK8particle7BleUuid8rawBytesEv>
   b466c:	2300      	movs	r3, #0
   b466e:	9300      	str	r3, [sp, #0]
   b4670:	4602      	mov	r2, r0
   b4672:	2310      	movs	r3, #16
   b4674:	2107      	movs	r1, #7
   b4676:	e7cb      	b.n	b4610 <_ZN19BLEWiFiSetupManager5setupEv+0xcc>
   b4678:	000b8ea4 	.word	0x000b8ea4
   b467c:	000b8e65 	.word	0x000b8e65
   b4680:	000b8c80 	.word	0x000b8c80
   b4684:	000b8ec9 	.word	0x000b8ec9
   b4688:	000b47e5 	.word	0x000b47e5
   b468c:	000b8c83 	.word	0x000b8c83
   b4690:	000b8c86 	.word	0x000b8c86
   b4694:	2003e698 	.word	0x2003e698
   b4698:	2003e6a4 	.word	0x2003e6a4

000b469c <_ZN19BLEWiFiSetupManager9queue_msgEPKhj>:
            }
        }
    }
}

void BLEWiFiSetupManager::queue_msg(const uint8_t* rx_data, size_t len) {
   b469c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b46a0:	4604      	mov	r4, r0
    if( len > 0 ) {
   b46a2:	4615      	mov	r5, r2
   b46a4:	b1ca      	cbz	r2, b46da <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x3e>
        // The underlying BLE lib reuses the receive buffer, and will not terminate it properly for a string
        // Add some manual processing and properly terminate for string parsing
        char *msg_buf = (char*)malloc(len+1);
   b46a6:	1c50      	adds	r0, r2, #1
   b46a8:	9101      	str	r1, [sp, #4]
   b46aa:	f000 fdcb 	bl	b5244 <malloc>
        memcpy(msg_buf, rx_data, len);
   b46ae:	462a      	mov	r2, r5
        char *msg_buf = (char*)malloc(len+1);
   b46b0:	4606      	mov	r6, r0
        memcpy(msg_buf, rx_data, len);
   b46b2:	9901      	ldr	r1, [sp, #4]
   b46b4:	f004 f8de 	bl	b8874 <memcpy>
        msg_buf[len] = 0;   // Null-terminate string
   b46b8:	2300      	movs	r3, #0
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_last - 1)
   b46ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b46bc:	5573      	strb	r3, [r6, r5]
	if (this->_M_impl._M_finish._M_cur
   b46be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	    != this->_M_impl._M_finish._M_last - 1)
   b46c0:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b46c2:	4293      	cmp	r3, r2
   b46c4:	d00c      	beq.n	b46e0 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x44>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b46c6:	b103      	cbz	r3, b46ca <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x2e>
   b46c8:	601e      	str	r6, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl,
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
   b46ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b46cc:	3304      	adds	r3, #4
        device_receive_msg_queue.push(msg_buf);
        BLEWiFiSetupManagerLogger.trace("Added message to the queue: %s", msg_buf);
   b46ce:	4942      	ldr	r1, [pc, #264]	; (b47d8 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x13c>)
   b46d0:	4842      	ldr	r0, [pc, #264]	; (b47dc <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x140>)
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b46d2:	64a3      	str	r3, [r4, #72]	; 0x48
   b46d4:	4632      	mov	r2, r6
   b46d6:	f7ff fec2 	bl	b445e <_ZNK5spark6Logger5traceEPKcz>
        return;
    }
}
   b46da:	b003      	add	sp, #12
   b46dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b46e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
   b46e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   b46e4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   b46e6:	1a57      	subs	r7, r2, r1
   b46e8:	10bd      	asrs	r5, r7, #2
   b46ea:	1a18      	subs	r0, r3, r0
   b46ec:	1e6b      	subs	r3, r5, #1
   b46ee:	01db      	lsls	r3, r3, #7
   b46f0:	eb03 0ca0 	add.w	ip, r3, r0, asr #2
	  + (__y._M_last - __y._M_cur);
   b46f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b46f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   b46f8:	1ac0      	subs	r0, r0, r3
   b46fa:	eb0c 03a0 	add.w	r3, ip, r0, asr #2
	if (size() == max_size())
   b46fe:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   b4702:	4283      	cmp	r3, r0
   b4704:	d102      	bne.n	b470c <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x70>
	  __throw_length_error(
   b4706:	4836      	ldr	r0, [pc, #216]	; (b47e0 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x144>)
   b4708:	f003 ff7d 	bl	b8606 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b470c:	e9d4 c30c 	ldrd	ip, r3, [r4, #48]	; 0x30
   b4710:	eba2 000c 	sub.w	r0, r2, ip
   b4714:	eba3 00a0 	sub.w	r0, r3, r0, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b4718:	2801      	cmp	r0, #1
   b471a:	d81e      	bhi.n	b475a <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xbe>
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b471c:	3502      	adds	r5, #2

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b471e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   b4722:	d932      	bls.n	b478a <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xee>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b4724:	1b5d      	subs	r5, r3, r5
   b4726:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b4728:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
			 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b472c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b472e:	42a9      	cmp	r1, r5
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b4730:	eba3 0201 	sub.w	r2, r3, r1
   b4734:	d923      	bls.n	b477e <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xe2>
	  if (_Num)
   b4736:	428b      	cmp	r3, r1
   b4738:	d002      	beq.n	b4740 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xa4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b473a:	4628      	mov	r0, r5
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b473c:	f004 f8a8 	bl	b8890 <memmove>
	_M_node = __new_node;
   b4740:	6465      	str	r5, [r4, #68]	; 0x44
	_M_first = *__new_node;
   b4742:	682b      	ldr	r3, [r5, #0]
   b4744:	63e3      	str	r3, [r4, #60]	; 0x3c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b4746:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b474a:	6423      	str	r3, [r4, #64]	; 0x40
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b474c:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   b474e:	6563      	str	r3, [r4, #84]	; 0x54
	_M_first = *__new_node;
   b4750:	59eb      	ldr	r3, [r5, r7]
   b4752:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b4754:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b4758:	6523      	str	r3, [r4, #80]	; 0x50
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b475a:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b475e:	6d65      	ldr	r5, [r4, #84]	; 0x54
   b4760:	f7ff fc97 	bl	b4092 <_Znwj>
   b4764:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b4766:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4768:	b103      	cbz	r3, b476c <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xd0>
   b476a:	601e      	str	r6, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b476c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b476e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b4770:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   b4772:	685b      	ldr	r3, [r3, #4]
   b4774:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b4776:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b477a:	6522      	str	r2, [r4, #80]	; 0x50
   b477c:	e7a7      	b.n	b46ce <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x32>
	  if (_Num)
   b477e:	428b      	cmp	r3, r1
   b4780:	d0de      	beq.n	b4740 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xa4>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b4782:	1d38      	adds	r0, r7, #4
   b4784:	1a80      	subs	r0, r0, r2
   b4786:	4428      	add	r0, r5
   b4788:	e7d8      	b.n	b473c <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xa0>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b478a:	f103 0802 	add.w	r8, r3, #2
   b478e:	2b01      	cmp	r3, #1
   b4790:	bf2c      	ite	cs
   b4792:	4498      	addcs	r8, r3
   b4794:	f108 0801 	addcc.w	r8, r8, #1
	if (__n > this->_M_max_size())
   b4798:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b479c:	d301      	bcc.n	b47a2 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x106>
	  std::__throw_bad_alloc();
   b479e:	f003 ff2f 	bl	b8600 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b47a2:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b47a6:	f7ff fc74 	bl	b4092 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   b47aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
   b47ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b47ae:	eba8 0505 	sub.w	r5, r8, r5
	  std::copy(this->_M_impl._M_start._M_node,
   b47b2:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b47b4:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   b47b6:	4291      	cmp	r1, r2
   b47b8:	4681      	mov	r9, r0
   b47ba:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   b47be:	d003      	beq.n	b47c8 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0x12c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b47c0:	1a52      	subs	r2, r2, r1
   b47c2:	4628      	mov	r0, r5
   b47c4:	f004 f864 	bl	b8890 <memmove>
	::operator delete(__p
   b47c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b47ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b47cc:	0089      	lsls	r1, r1, #2
   b47ce:	f7ff fc66 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b47d2:	e9c4 980c 	strd	r9, r8, [r4, #48]	; 0x30
   b47d6:	e7b3      	b.n	b4740 <_ZN19BLEWiFiSetupManager9queue_msgEPKhj+0xa4>
   b47d8:	000b8ccc 	.word	0x000b8ccc
   b47dc:	2003e698 	.word	0x2003e698
   b47e0:	000b8c9c 	.word	0x000b8c9c

000b47e4 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void onDataReceived(const uint8_t* rx_data, size_t len, const BlePeerDevice& peer, void* self) {
   b47e4:	460a      	mov	r2, r1
    ((BLEWiFiSetupManager*)self)->queue_msg(rx_data, len);
   b47e6:	4601      	mov	r1, r0
   b47e8:	4618      	mov	r0, r3
   b47ea:	f7ff bf57 	b.w	b469c <_ZN19BLEWiFiSetupManager9queue_msgEPKhj>

000b47ee <_ZN19BLEWiFiSetupManager20setProvisionCallbackEPFvvE>:

void BLEWiFiSetupManager::setProvisionCallback(provisionCb_t* cb) {
    provisionCb = cb;
   b47ee:	6041      	str	r1, [r0, #4]
}
   b47f0:	4770      	bx	lr

000b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b47f2:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b47f4:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b47f6:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b47f8:	b17c      	cbz	r4, b481a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b47fa:	6863      	ldr	r3, [r4, #4]
   b47fc:	3b01      	subs	r3, #1
   b47fe:	6063      	str	r3, [r4, #4]
   b4800:	b95b      	cbnz	r3, b481a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4802:	6823      	ldr	r3, [r4, #0]
   b4804:	4620      	mov	r0, r4
   b4806:	689b      	ldr	r3, [r3, #8]
   b4808:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b480a:	68a3      	ldr	r3, [r4, #8]
   b480c:	3b01      	subs	r3, #1
   b480e:	60a3      	str	r3, [r4, #8]
   b4810:	b91b      	cbnz	r3, b481a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4812:	6823      	ldr	r3, [r4, #0]
   b4814:	4620      	mov	r0, r4
   b4816:	68db      	ldr	r3, [r3, #12]
   b4818:	4798      	blx	r3
      }
   b481a:	4628      	mov	r0, r5
   b481c:	bd38      	pop	{r3, r4, r5, pc}

000b481e <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b481e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b4820:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b4822:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4824:	4668      	mov	r0, sp
   b4826:	f7ff fdff 	bl	b4428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b482a:	466a      	mov	r2, sp
   b482c:	4629      	mov	r1, r5
   b482e:	4620      	mov	r0, r4
   b4830:	f000 ff59 	bl	b56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4834:	a801      	add	r0, sp, #4
   b4836:	f7ff ffdc 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b483a:	4620      	mov	r0, r4
   b483c:	b003      	add	sp, #12
   b483e:	bd30      	pop	{r4, r5, pc}

000b4840 <_ZNK5spark9JSONValue8toStringEv>:
inline spark::JSONString spark::JSONValue::toString() const {
   b4840:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(t_, d_);
   b4842:	688d      	ldr	r5, [r1, #8]
inline spark::JSONString spark::JSONValue::toString() const {
   b4844:	4604      	mov	r4, r0
   b4846:	4668      	mov	r0, sp
   b4848:	f7ff fdee 	bl	b4428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(t_, d_);
   b484c:	466a      	mov	r2, sp
   b484e:	4629      	mov	r1, r5
   b4850:	4620      	mov	r0, r4
   b4852:	f001 f885 	bl	b5960 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4856:	a801      	add	r0, sp, #4
   b4858:	f7ff ffcb 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b485c:	4620      	mov	r0, r4
   b485e:	b003      	add	sp, #12
   b4860:	bd30      	pop	{r4, r5, pc}

000b4862 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b4862:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b4864:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b4866:	4604      	mov	r4, r0
   b4868:	4668      	mov	r0, sp
   b486a:	f7ff fddd 	bl	b4428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b486e:	466a      	mov	r2, sp
   b4870:	4629      	mov	r1, r5
   b4872:	4620      	mov	r0, r4
   b4874:	f001 f874 	bl	b5960 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4878:	a801      	add	r0, sp, #4
   b487a:	f7ff ffba 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b487e:	4620      	mov	r0, r4
   b4880:	b003      	add	sp, #12
   b4882:	bd30      	pop	{r4, r5, pc}

000b4884 <_ZN5spark10JSONStringaSEOS0_.isra.0>:
class JSONString {
   b4884:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__r._M_pi = _M_pi;
   b4886:	2300      	movs	r3, #0
   b4888:	460d      	mov	r5, r1
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b488a:	e9d1 1200 	ldrd	r1, r2, [r1]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b488e:	e9c5 3300 	strd	r3, r3, [r5]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b4892:	6803      	ldr	r3, [r0, #0]
   b4894:	9300      	str	r3, [sp, #0]
   b4896:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4898:	6843      	ldr	r3, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b489a:	6001      	str	r1, [r0, #0]
	__r._M_pi = _M_pi;
   b489c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b489e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b48a0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b48a2:	f7ff ffa6 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b48a6:	68ab      	ldr	r3, [r5, #8]
   b48a8:	60a3      	str	r3, [r4, #8]
   b48aa:	68eb      	ldr	r3, [r5, #12]
   b48ac:	60e3      	str	r3, [r4, #12]
   b48ae:	b003      	add	sp, #12
   b48b0:	bd30      	pop	{r4, r5, pc}
	...

000b48b4 <_ZN19BLEWiFiSetupManager13parse_messageEv>:
void BLEWiFiSetupManager::parse_message() {
   b48b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *msg_buf = device_receive_msg_queue.front();
   b48b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    BLEWiFiSetupManagerLogger.trace("String RX: %s", msg_buf);
   b48ba:	49a5      	ldr	r1, [pc, #660]	; (b4b50 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x29c>)
    char *msg_buf = device_receive_msg_queue.front();
   b48bc:	681d      	ldr	r5, [r3, #0]
void BLEWiFiSetupManager::parse_message() {
   b48be:	b0ab      	sub	sp, #172	; 0xac
   b48c0:	4604      	mov	r4, r0
    BLEWiFiSetupManagerLogger.trace("String RX: %s", msg_buf);
   b48c2:	462a      	mov	r2, r5
   b48c4:	48a3      	ldr	r0, [pc, #652]	; (b4b54 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2a0>)
   b48c6:	f7ff fdca 	bl	b445e <_ZNK5spark6Logger5traceEPKcz>
    return parseCopy(json, strlen(json));
   b48ca:	4628      	mov	r0, r5
   b48cc:	f004 f859 	bl	b8982 <strlen>
   b48d0:	4629      	mov	r1, r5
   b48d2:	4602      	mov	r2, r0
   b48d4:	a803      	add	r0, sp, #12
   b48d6:	f001 f96b 	bl	b5bb0 <_ZN5spark9JSONValue9parseCopyEPKcj>
	    != this->_M_impl._M_start._M_last - 1)
   b48da:	6c22      	ldr	r2, [r4, #64]	; 0x40
	if (this->_M_impl._M_start._M_cur
   b48dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	    != this->_M_impl._M_start._M_last - 1)
   b48de:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b48e0:	4293      	cmp	r3, r2
   b48e2:	d064      	beq.n	b49ae <_ZN19BLEWiFiSetupManager13parse_messageEv+0xfa>
	    ++this->_M_impl._M_start._M_cur;
   b48e4:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b48e6:	63a3      	str	r3, [r4, #56]	; 0x38
    free(msg_buf);
   b48e8:	4628      	mov	r0, r5
   b48ea:	f000 fcb3 	bl	b5254 <free>
        JSONObjectIterator(value.t_, value.d_) {
   b48ee:	9d05      	ldr	r5, [sp, #20]
        BLEWiFiSetupManagerLogger.info("key=%s value=%s", 
   b48f0:	f8df 8290 	ldr.w	r8, [pc, #656]	; b4b84 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2d0>
   b48f4:	4e97      	ldr	r6, [pc, #604]	; (b4b54 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2a0>)
    return strcmp(s_, str) == 0;
   b48f6:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4b88 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2d4>
   b48fa:	a903      	add	r1, sp, #12
   b48fc:	a817      	add	r0, sp, #92	; 0x5c
   b48fe:	f7ff fd93 	bl	b4428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b4902:	aa17      	add	r2, sp, #92	; 0x5c
   b4904:	4629      	mov	r1, r5
   b4906:	a811      	add	r0, sp, #68	; 0x44
   b4908:	f001 f84e 	bl	b59a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b490c:	a818      	add	r0, sp, #96	; 0x60
   b490e:	f7ff ff70 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    while(iter.next()) {
   b4912:	a811      	add	r0, sp, #68	; 0x44
   b4914:	f001 f860 	bl	b59d8 <_ZN5spark18JSONObjectIterator4nextEv>
   b4918:	2800      	cmp	r0, #0
   b491a:	f000 8110 	beq.w	b4b3e <_ZN19BLEWiFiSetupManager13parse_messageEv+0x28a>
            (const char *) iter.name(), 
   b491e:	a911      	add	r1, sp, #68	; 0x44
   b4920:	a80d      	add	r0, sp, #52	; 0x34
   b4922:	f7ff ff9e 	bl	b4862 <_ZNK5spark18JSONObjectIterator4nameEv>
    return s_;
   b4926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b4928:	9201      	str	r2, [sp, #4]
            (const char *) iter.value().toString());
   b492a:	a911      	add	r1, sp, #68	; 0x44
   b492c:	a809      	add	r0, sp, #36	; 0x24
   b492e:	f7ff ff76 	bl	b481e <_ZNK5spark18JSONObjectIterator5valueEv>
   b4932:	a909      	add	r1, sp, #36	; 0x24
   b4934:	a817      	add	r0, sp, #92	; 0x5c
   b4936:	f7ff ff83 	bl	b4840 <_ZNK5spark9JSONValue8toStringEv>
        BLEWiFiSetupManagerLogger.info("key=%s value=%s", 
   b493a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b493c:	9a01      	ldr	r2, [sp, #4]
   b493e:	4641      	mov	r1, r8
   b4940:	4630      	mov	r0, r6
   b4942:	f7ff fbf3 	bl	b412c <_ZNK5spark6Logger4infoEPKcz>
   b4946:	a818      	add	r0, sp, #96	; 0x60
   b4948:	f7ff ff53 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b494c:	a80a      	add	r0, sp, #40	; 0x28
   b494e:	f7ff ff50 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4952:	a80e      	add	r0, sp, #56	; 0x38
   b4954:	f7ff ff4d 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "msg_type") {
   b4958:	a911      	add	r1, sp, #68	; 0x44
   b495a:	a817      	add	r0, sp, #92	; 0x5c
   b495c:	f7ff ff81 	bl	b4862 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   b4960:	9819      	ldr	r0, [sp, #100]	; 0x64
   b4962:	4649      	mov	r1, r9
   b4964:	f003 fffb 	bl	b895e <strcmp>
   b4968:	4605      	mov	r5, r0
   b496a:	a818      	add	r0, sp, #96	; 0x60
   b496c:	f7ff ff41 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4970:	2d00      	cmp	r5, #0
   b4972:	d1ce      	bne.n	b4912 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x5e>
            if (strcmp((const char *)iter.value().toString(), "scan") == 0) {
   b4974:	a911      	add	r1, sp, #68	; 0x44
   b4976:	a80d      	add	r0, sp, #52	; 0x34
   b4978:	f7ff ff51 	bl	b481e <_ZNK5spark18JSONObjectIterator5valueEv>
   b497c:	a90d      	add	r1, sp, #52	; 0x34
   b497e:	a817      	add	r0, sp, #92	; 0x5c
   b4980:	f7ff ff5e 	bl	b4840 <_ZNK5spark9JSONValue8toStringEv>
   b4984:	4974      	ldr	r1, [pc, #464]	; (b4b58 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2a4>)
   b4986:	9819      	ldr	r0, [sp, #100]	; 0x64
   b4988:	f003 ffe9 	bl	b895e <strcmp>
   b498c:	4605      	mov	r5, r0
   b498e:	a818      	add	r0, sp, #96	; 0x60
   b4990:	f7ff ff2f 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4994:	a80e      	add	r0, sp, #56	; 0x38
   b4996:	f7ff ff2c 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b499a:	b9b5      	cbnz	r5, b49ca <_ZN19BLEWiFiSetupManager13parse_messageEv+0x116>
        return wlan_scan(callback, cookie);
   b499c:	4621      	mov	r1, r4
   b499e:	486f      	ldr	r0, [pc, #444]	; (b4b5c <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2a8>)
   b49a0:	f000 fa18 	bl	b4dd4 <wlan_scan>
                BLEWiFiSetupManagerLogger.info("WiFi Scan Complete");
   b49a4:	496e      	ldr	r1, [pc, #440]	; (b4b60 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2ac>)
   b49a6:	4630      	mov	r0, r6
   b49a8:	f7ff fbc0 	bl	b412c <_ZNK5spark6Logger4infoEPKcz>
   b49ac:	e7b1      	b.n	b4912 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x5e>
   b49ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   b49b0:	f44f 7100 	mov.w	r1, #512	; 0x200
   b49b4:	f7ff fb73 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b49b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b49ba:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b49bc:	6462      	str	r2, [r4, #68]	; 0x44
	_M_first = *__new_node;
   b49be:	685b      	ldr	r3, [r3, #4]
   b49c0:	63e3      	str	r3, [r4, #60]	; 0x3c
	_M_last = _M_first + difference_type(_S_buffer_size());
   b49c2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b49c6:	6422      	str	r2, [r4, #64]	; 0x40
   b49c8:	e78d      	b.n	b48e6 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x32>
            if (strcmp((const char *)iter.value().toString(), "set_creds") == 0) {
   b49ca:	a911      	add	r1, sp, #68	; 0x44
   b49cc:	a80d      	add	r0, sp, #52	; 0x34
   b49ce:	f7ff ff26 	bl	b481e <_ZNK5spark18JSONObjectIterator5valueEv>
   b49d2:	a90d      	add	r1, sp, #52	; 0x34
   b49d4:	a817      	add	r0, sp, #92	; 0x5c
   b49d6:	f7ff ff33 	bl	b4840 <_ZNK5spark9JSONValue8toStringEv>
   b49da:	4962      	ldr	r1, [pc, #392]	; (b4b64 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2b0>)
   b49dc:	9819      	ldr	r0, [sp, #100]	; 0x64
   b49de:	f003 ffbe 	bl	b895e <strcmp>
   b49e2:	4605      	mov	r5, r0
   b49e4:	a818      	add	r0, sp, #96	; 0x60
   b49e6:	f7ff ff04 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b49ea:	a80e      	add	r0, sp, #56	; 0x38
   b49ec:	f7ff ff01 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b49f0:	2d00      	cmp	r5, #0
   b49f2:	d18e      	bne.n	b4912 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x5e>
        n_(0) {
   b49f4:	4b5c      	ldr	r3, [pc, #368]	; (b4b68 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2b4>)
    return strcmp(s_, str) == 0;
   b49f6:	f8df a194 	ldr.w	sl, [pc, #404]	; b4b8c <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2d8>
   b49fa:	f8df b194 	ldr.w	fp, [pc, #404]	; b4b90 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2dc>
                        BLEWiFiSetupManagerLogger.warn("Unrecognized key while parsing WiFi credentials: %s", (const char *)iter.name());
   b49fe:	4f5b      	ldr	r7, [pc, #364]	; (b4b6c <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2b8>)
      constexpr __shared_count() noexcept : _M_pi(0)
   b4a00:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
        n_(0) {
   b4a04:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
   b4a08:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
   b4a0c:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
                while(iter.next()) {
   b4a10:	a811      	add	r0, sp, #68	; 0x44
   b4a12:	f000 ffe1 	bl	b59d8 <_ZN5spark18JSONObjectIterator4nextEv>
   b4a16:	2800      	cmp	r0, #0
   b4a18:	d051      	beq.n	b4abe <_ZN19BLEWiFiSetupManager13parse_messageEv+0x20a>
                    if (iter.name() == "ssid") {
   b4a1a:	a911      	add	r1, sp, #68	; 0x44
   b4a1c:	a817      	add	r0, sp, #92	; 0x5c
   b4a1e:	f7ff ff20 	bl	b4862 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   b4a22:	4651      	mov	r1, sl
   b4a24:	9819      	ldr	r0, [sp, #100]	; 0x64
   b4a26:	f003 ff9a 	bl	b895e <strcmp>
   b4a2a:	4605      	mov	r5, r0
      ~__shared_ptr() = default;
   b4a2c:	a818      	add	r0, sp, #96	; 0x60
   b4a2e:	f7ff fee0 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                        ssid = iter.value().toString();
   b4a32:	a911      	add	r1, sp, #68	; 0x44
                    if (iter.name() == "ssid") {
   b4a34:	b9b5      	cbnz	r5, b4a64 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x1b0>
                        ssid = iter.value().toString();
   b4a36:	a806      	add	r0, sp, #24
   b4a38:	f7ff fef1 	bl	b481e <_ZNK5spark18JSONObjectIterator5valueEv>
   b4a3c:	a906      	add	r1, sp, #24
   b4a3e:	a817      	add	r0, sp, #92	; 0x5c
   b4a40:	f7ff fefe 	bl	b4840 <_ZNK5spark9JSONValue8toStringEv>
   b4a44:	a917      	add	r1, sp, #92	; 0x5c
   b4a46:	a809      	add	r0, sp, #36	; 0x24
   b4a48:	f7ff ff1c 	bl	b4884 <_ZN5spark10JSONStringaSEOS0_.isra.0>
   b4a4c:	a818      	add	r0, sp, #96	; 0x60
   b4a4e:	f7ff fed0 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4a52:	a807      	add	r0, sp, #28
   b4a54:	f7ff fecd 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                        BLEWiFiSetupManagerLogger.info("Set WiFi SSID: %s", ssid.data());
   b4a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4a5a:	4945      	ldr	r1, [pc, #276]	; (b4b70 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2bc>)
                        BLEWiFiSetupManagerLogger.info("Set WiFi Password: %s", pass.data());
   b4a5c:	4630      	mov	r0, r6
   b4a5e:	f7ff fb65 	bl	b412c <_ZNK5spark6Logger4infoEPKcz>
   b4a62:	e7d5      	b.n	b4a10 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x15c>
                    else if (iter.name() == "password") {
   b4a64:	a817      	add	r0, sp, #92	; 0x5c
   b4a66:	f7ff fefc 	bl	b4862 <_ZNK5spark18JSONObjectIterator4nameEv>
   b4a6a:	4659      	mov	r1, fp
   b4a6c:	9819      	ldr	r0, [sp, #100]	; 0x64
   b4a6e:	f003 ff76 	bl	b895e <strcmp>
   b4a72:	4605      	mov	r5, r0
   b4a74:	a818      	add	r0, sp, #96	; 0x60
   b4a76:	f7ff febc 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                        pass = iter.value().toString();
   b4a7a:	a911      	add	r1, sp, #68	; 0x44
                    else if (iter.name() == "password") {
   b4a7c:	b99d      	cbnz	r5, b4aa6 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x1f2>
                        pass = iter.value().toString();
   b4a7e:	a806      	add	r0, sp, #24
   b4a80:	f7ff fecd 	bl	b481e <_ZNK5spark18JSONObjectIterator5valueEv>
   b4a84:	a906      	add	r1, sp, #24
   b4a86:	a817      	add	r0, sp, #92	; 0x5c
   b4a88:	f7ff feda 	bl	b4840 <_ZNK5spark9JSONValue8toStringEv>
   b4a8c:	a917      	add	r1, sp, #92	; 0x5c
   b4a8e:	a80d      	add	r0, sp, #52	; 0x34
   b4a90:	f7ff fef8 	bl	b4884 <_ZN5spark10JSONStringaSEOS0_.isra.0>
   b4a94:	a818      	add	r0, sp, #96	; 0x60
   b4a96:	f7ff feac 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4a9a:	a807      	add	r0, sp, #28
   b4a9c:	f7ff fea9 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                        BLEWiFiSetupManagerLogger.info("Set WiFi Password: %s", pass.data());
   b4aa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b4aa2:	4934      	ldr	r1, [pc, #208]	; (b4b74 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2c0>)
   b4aa4:	e7da      	b.n	b4a5c <_ZN19BLEWiFiSetupManager13parse_messageEv+0x1a8>
                        BLEWiFiSetupManagerLogger.warn("Unrecognized key while parsing WiFi credentials: %s", (const char *)iter.name());
   b4aa6:	a817      	add	r0, sp, #92	; 0x5c
   b4aa8:	f7ff fedb 	bl	b4862 <_ZNK5spark18JSONObjectIterator4nameEv>
   b4aac:	4630      	mov	r0, r6
   b4aae:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b4ab0:	4639      	mov	r1, r7
   b4ab2:	f7ff fce2 	bl	b447a <_ZNK5spark6Logger4warnEPKcz>
   b4ab6:	a818      	add	r0, sp, #96	; 0x60
   b4ab8:	f7ff fe9b 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4abc:	e7a8      	b.n	b4a10 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x15c>
                if (!ssid.isEmpty() && !pass.isEmpty()) {
   b4abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4ac0:	b383      	cbz	r3, b4b24 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x270>
   b4ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4ac4:	b373      	cbz	r3, b4b24 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x270>
    return s_;
   b4ac6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   b4aca:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4acc:	f1bb 0f00 	cmp.w	fp, #0
   b4ad0:	d024      	beq.n	b4b1c <_ZN19BLEWiFiSetupManager13parse_messageEv+0x268>
   b4ad2:	4658      	mov	r0, fp
   b4ad4:	f003 ff55 	bl	b8982 <strlen>
   b4ad8:	4682      	mov	sl, r0
   b4ada:	b30f      	cbz	r7, b4b20 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x26c>
   b4adc:	4638      	mov	r0, r7
   b4ade:	f003 ff50 	bl	b8982 <strlen>
   b4ae2:	4605      	mov	r5, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4ae4:	2238      	movs	r2, #56	; 0x38
   b4ae6:	2100      	movs	r1, #0
   b4ae8:	a81c      	add	r0, sp, #112	; 0x70
   b4aea:	f003 feeb 	bl	b88c4 <memset>
        creds.size = sizeof(creds);
   b4aee:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4af0:	e9cd 3b17 	strd	r3, fp, [sp, #92]	; 0x5c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4af4:	4820      	ldr	r0, [pc, #128]	; (b4b78 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2c4>)
        creds.password_len = passwordLen;
   b4af6:	951b      	str	r5, [sp, #108]	; 0x6c
        creds.security = WLanSecurityType(security);
   b4af8:	2303      	movs	r3, #3
   b4afa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4afe:	2300      	movs	r3, #0
   b4b00:	4619      	mov	r1, r3
   b4b02:	6840      	ldr	r0, [r0, #4]
   b4b04:	aa17      	add	r2, sp, #92	; 0x5c
        creds.password = password;
   b4b06:	e9cd a719 	strd	sl, r7, [sp, #100]	; 0x64
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b0a:	f000 fb4f 	bl	b51ac <network_set_credentials>
                    if (provisionCb != nullptr) {
   b4b0e:	6863      	ldr	r3, [r4, #4]
   b4b10:	b99b      	cbnz	r3, b4b3a <_ZN19BLEWiFiSetupManager13parse_messageEv+0x286>
                    BLEWiFiSetupManagerLogger.info("WiFi credentials set");
   b4b12:	491a      	ldr	r1, [pc, #104]	; (b4b7c <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2c8>)
   b4b14:	4630      	mov	r0, r6
   b4b16:	f7ff fb09 	bl	b412c <_ZNK5spark6Logger4infoEPKcz>
   b4b1a:	e007      	b.n	b4b2c <_ZN19BLEWiFiSetupManager13parse_messageEv+0x278>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4b1c:	46da      	mov	sl, fp
   b4b1e:	e7dc      	b.n	b4ada <_ZN19BLEWiFiSetupManager13parse_messageEv+0x226>
   b4b20:	463d      	mov	r5, r7
   b4b22:	e7df      	b.n	b4ae4 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x230>
                    BLEWiFiSetupManagerLogger.warn("Failure parsing WiFi credentials");
   b4b24:	4916      	ldr	r1, [pc, #88]	; (b4b80 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x2cc>)
   b4b26:	4630      	mov	r0, r6
   b4b28:	f7ff fca7 	bl	b447a <_ZNK5spark6Logger4warnEPKcz>
   b4b2c:	a80e      	add	r0, sp, #56	; 0x38
   b4b2e:	f7ff fe60 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4b32:	a80a      	add	r0, sp, #40	; 0x28
   b4b34:	f7ff fe5d 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4b38:	e6eb      	b.n	b4912 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x5e>
                        provisionCb();
   b4b3a:	4798      	blx	r3
   b4b3c:	e7e9      	b.n	b4b12 <_ZN19BLEWiFiSetupManager13parse_messageEv+0x25e>
   b4b3e:	a812      	add	r0, sp, #72	; 0x48
   b4b40:	f7ff fe57 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4b44:	a804      	add	r0, sp, #16
   b4b46:	f7ff fe54 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4b4a:	b02b      	add	sp, #172	; 0xac
   b4b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b50:	000b8ceb 	.word	0x000b8ceb
   b4b54:	2003e698 	.word	0x2003e698
   b4b58:	000b8d12 	.word	0x000b8d12
   b4b5c:	000b4db5 	.word	0x000b4db5
   b4b60:	000b8d17 	.word	0x000b8d17
   b4b64:	000b8d2a 	.word	0x000b8d2a
   b4b68:	000b907e 	.word	0x000b907e
   b4b6c:	000b8d6a 	.word	0x000b8d6a
   b4b70:	000b8d39 	.word	0x000b8d39
   b4b74:	000b8d54 	.word	0x000b8d54
   b4b78:	2003e6a4 	.word	0x2003e6a4
   b4b7c:	000b8dbf 	.word	0x000b8dbf
   b4b80:	000b8d9e 	.word	0x000b8d9e
   b4b84:	000b8cf9 	.word	0x000b8cf9
   b4b88:	000b8d09 	.word	0x000b8d09
   b4b8c:	000b8d34 	.word	0x000b8d34
   b4b90:	000b8d4b 	.word	0x000b8d4b

000b4b94 <_ZN19BLEWiFiSetupManager4loopEv>:
void BLEWiFiSetupManager::loop() {
   b4b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(config_state) {
   b4b98:	7803      	ldrb	r3, [r0, #0]
   b4b9a:	2b01      	cmp	r3, #1
void BLEWiFiSetupManager::loop() {
   b4b9c:	b0b6      	sub	sp, #216	; 0xd8
   b4b9e:	4604      	mov	r4, r0
    switch(config_state) {
   b4ba0:	d004      	beq.n	b4bac <_ZN19BLEWiFiSetupManager4loopEv+0x18>
   b4ba2:	2b02      	cmp	r3, #2
   b4ba4:	d040      	beq.n	b4c28 <_ZN19BLEWiFiSetupManager4loopEv+0x94>
   b4ba6:	b93b      	cbnz	r3, b4bb8 <_ZN19BLEWiFiSetupManager4loopEv+0x24>
            next_config_state = STATE_CONFIG_IDLE;
   b4ba8:	2301      	movs	r3, #1
   b4baa:	e004      	b.n	b4bb6 <_ZN19BLEWiFiSetupManager4loopEv+0x22>
            if (device_receive_msg_queue.empty()) {
   b4bac:	6b81      	ldr	r1, [r0, #56]	; 0x38
   b4bae:	6c82      	ldr	r2, [r0, #72]	; 0x48
   b4bb0:	4291      	cmp	r1, r2
                next_config_state = STATE_CONFIG_PARSE_MSG;
   b4bb2:	bf18      	it	ne
   b4bb4:	2302      	movne	r3, #2
            next_config_state = STATE_CONFIG_IDLE;
   b4bb6:	7063      	strb	r3, [r4, #1]
    if (config_state != next_config_state) {
   b4bb8:	7822      	ldrb	r2, [r4, #0]
   b4bba:	7863      	ldrb	r3, [r4, #1]
   b4bbc:	429a      	cmp	r2, r3
   b4bbe:	d005      	beq.n	b4bcc <_ZN19BLEWiFiSetupManager4loopEv+0x38>
        BLEWiFiSetupManagerLogger.trace("State Transition: %u -> %u", config_state, next_config_state);
   b4bc0:	4923      	ldr	r1, [pc, #140]	; (b4c50 <_ZN19BLEWiFiSetupManager4loopEv+0xbc>)
   b4bc2:	4824      	ldr	r0, [pc, #144]	; (b4c54 <_ZN19BLEWiFiSetupManager4loopEv+0xc0>)
   b4bc4:	f7ff fc4b 	bl	b445e <_ZNK5spark6Logger5traceEPKcz>
        config_state = next_config_state;
   b4bc8:	7863      	ldrb	r3, [r4, #1]
   b4bca:	7023      	strb	r3, [r4, #0]
            ap.ssid, security_strings[(int)ap.security], (int)ap.channel, ap.rssi
   b4bcc:	4f22      	ldr	r7, [pc, #136]	; (b4c58 <_ZN19BLEWiFiSetupManager4loopEv+0xc4>)
        int len = sprintf(tmp_buf, 
   b4bce:	f8df 808c 	ldr.w	r8, [pc, #140]	; b4c5c <_ZN19BLEWiFiSetupManager4loopEv+0xc8>
      { return __x._M_cur == __y._M_cur; }
   b4bd2:	6925      	ldr	r5, [r4, #16]
    while (!wifi_scan_response_queue.empty()) {
   b4bd4:	6a23      	ldr	r3, [r4, #32]
   b4bd6:	42ab      	cmp	r3, r5
   b4bd8:	d037      	beq.n	b4c4a <_ZN19BLEWiFiSetupManager4loopEv+0xb6>
        WiFiAccessPoint ap = wifi_scan_response_queue.front();
   b4bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4bdc:	ae02      	add	r6, sp, #8
   b4bde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4be2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4be6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4be8:	e895 0003 	ldmia.w	r5, {r0, r1}
            ap.ssid, security_strings[(int)ap.security], (int)ap.channel, ap.rssi
   b4bec:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
        int len = sprintf(tmp_buf, 
   b4bf0:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
        WiFiAccessPoint ap = wifi_scan_response_queue.front();
   b4bf4:	e886 0003 	stmia.w	r6, {r0, r1}
        int len = sprintf(tmp_buf, 
   b4bf8:	9101      	str	r1, [sp, #4]
   b4bfa:	9200      	str	r2, [sp, #0]
   b4bfc:	4641      	mov	r1, r8
   b4bfe:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   b4c02:	aa03      	add	r2, sp, #12
   b4c04:	a810      	add	r0, sp, #64	; 0x40
   b4c06:	f000 fb35 	bl	b5274 <sprintf>
        rxCharacteristic->setValue((uint8_t*)tmp_buf, len);
   b4c0a:	2300      	movs	r3, #0
        int len = sprintf(tmp_buf, 
   b4c0c:	4602      	mov	r2, r0
        rxCharacteristic->setValue((uint8_t*)tmp_buf, len);
   b4c0e:	a910      	add	r1, sp, #64	; 0x40
   b4c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   b4c12:	f002 fc75 	bl	b7500 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	    != this->_M_impl._M_start._M_last - 1)
   b4c16:	69a3      	ldr	r3, [r4, #24]
   b4c18:	f1a3 0238 	sub.w	r2, r3, #56	; 0x38
	if (this->_M_impl._M_start._M_cur
   b4c1c:	6923      	ldr	r3, [r4, #16]
   b4c1e:	4293      	cmp	r3, r2
   b4c20:	d005      	beq.n	b4c2e <_ZN19BLEWiFiSetupManager4loopEv+0x9a>
	    ++this->_M_impl._M_start._M_cur;
   b4c22:	3338      	adds	r3, #56	; 0x38
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b4c24:	6123      	str	r3, [r4, #16]
    while (!wifi_scan_response_queue.empty()) {
   b4c26:	e7d4      	b.n	b4bd2 <_ZN19BLEWiFiSetupManager4loopEv+0x3e>
            parse_message();
   b4c28:	f7ff fe44 	bl	b48b4 <_ZN19BLEWiFiSetupManager13parse_messageEv>
   b4c2c:	e7bc      	b.n	b4ba8 <_ZN19BLEWiFiSetupManager4loopEv+0x14>
   b4c2e:	6960      	ldr	r0, [r4, #20]
   b4c30:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   b4c34:	f7ff fa33 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b4c38:	69e3      	ldr	r3, [r4, #28]
   b4c3a:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b4c3c:	61e2      	str	r2, [r4, #28]
	_M_first = *__new_node;
   b4c3e:	685b      	ldr	r3, [r3, #4]
   b4c40:	6163      	str	r3, [r4, #20]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b4c42:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
   b4c46:	61a2      	str	r2, [r4, #24]
   b4c48:	e7ec      	b.n	b4c24 <_ZN19BLEWiFiSetupManager4loopEv+0x90>
}
   b4c4a:	b036      	add	sp, #216	; 0xd8
   b4c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4c50:	000b8c13 	.word	0x000b8c13
   b4c54:	2003e698 	.word	0x2003e698
   b4c58:	000b8e8c 	.word	0x000b8e8c
   b4c5c:	000b8dd4 	.word	0x000b8dd4

000b4c60 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b4c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   b4c64:	6a03      	ldr	r3, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   b4c66:	6984      	ldr	r4, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   b4c68:	3b38      	subs	r3, #56	; 0x38
	if (this->_M_impl._M_finish._M_cur
   b4c6a:	429c      	cmp	r4, r3
      push_back(const value_type& __x)
   b4c6c:	4606      	mov	r6, r0
   b4c6e:	460d      	mov	r5, r1
	if (this->_M_impl._M_finish._M_cur
   b4c70:	d00f      	beq.n	b4c92 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x32>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4c72:	b14c      	cbz	r4, b4c88 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x28>
   b4c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c80:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4c84:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish._M_cur;
   b4c88:	69b3      	ldr	r3, [r6, #24]
   b4c8a:	3338      	adds	r3, #56	; 0x38
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b4c8c:	61b3      	str	r3, [r6, #24]
      }
   b4c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b4c92:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b4c94:	6971      	ldr	r1, [r6, #20]
   b4c96:	69f2      	ldr	r2, [r6, #28]
   b4c98:	f8df c114 	ldr.w	ip, [pc, #276]	; b4db0 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x150>
   b4c9c:	1a47      	subs	r7, r0, r1
   b4c9e:	10bb      	asrs	r3, r7, #2
   b4ca0:	1aa4      	subs	r4, r4, r2
   b4ca2:	1e5a      	subs	r2, r3, #1
   b4ca4:	10e4      	asrs	r4, r4, #3
   b4ca6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   b4caa:	fb0c 2e04 	mla	lr, ip, r4, r2
	  + (__y._M_last - __y._M_cur);
   b4cae:	6934      	ldr	r4, [r6, #16]
   b4cb0:	68b2      	ldr	r2, [r6, #8]
   b4cb2:	1aa2      	subs	r2, r4, r2
   b4cb4:	10d2      	asrs	r2, r2, #3
   b4cb6:	fb0c e402 	mla	r4, ip, r2, lr
	if (size() == max_size())
   b4cba:	4a3b      	ldr	r2, [pc, #236]	; (b4da8 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x148>)
   b4cbc:	4294      	cmp	r4, r2
   b4cbe:	d102      	bne.n	b4cc6 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x66>
	  __throw_length_error(
   b4cc0:	483a      	ldr	r0, [pc, #232]	; (b4dac <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x14c>)
   b4cc2:	f003 fca0 	bl	b8606 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b4cc6:	e9d6 e200 	ldrd	lr, r2, [r6]
   b4cca:	eba0 0c0e 	sub.w	ip, r0, lr
   b4cce:	eba2 0cac 	sub.w	ip, r2, ip, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b4cd2:	f1bc 0f01 	cmp.w	ip, #1
   b4cd6:	d81e      	bhi.n	b4d16 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0xb6>
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b4cd8:	1c9c      	adds	r4, r3, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b4cda:	ebb2 0f44 	cmp.w	r2, r4, lsl #1
   b4cde:	d93b      	bls.n	b4d58 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0xf8>
					 - __new_num_nodes) / 2
   b4ce0:	1b14      	subs	r4, r2, r4
   b4ce2:	0864      	lsrs	r4, r4, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b4ce4:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   b4ce8:	3004      	adds	r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b4cea:	42a1      	cmp	r1, r4
	  const ptrdiff_t _Num = __last - __first;
   b4cec:	eba0 0201 	sub.w	r2, r0, r1
   b4cf0:	d92c      	bls.n	b4d4c <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0xec>
	  if (_Num)
   b4cf2:	4288      	cmp	r0, r1
   b4cf4:	d002      	beq.n	b4cfc <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x9c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4cf6:	4620      	mov	r0, r4
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b4cf8:	f003 fdca 	bl	b8890 <memmove>
	_M_node = __new_node;
   b4cfc:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b4cfe:	6823      	ldr	r3, [r4, #0]
   b4d00:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b4d02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
   b4d06:	6133      	str	r3, [r6, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b4d08:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b4d0a:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b4d0c:	59e3      	ldr	r3, [r4, r7]
   b4d0e:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b4d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
   b4d14:	6233      	str	r3, [r6, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4d16:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b4d1a:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b4d1c:	f7ff f9b9 	bl	b4092 <_Znwj>
   b4d20:	6060      	str	r0, [r4, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b4d22:	69b4      	ldr	r4, [r6, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4d24:	b14c      	cbz	r4, b4d3a <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0xda>
   b4d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d32:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4d36:	e884 0003 	stmia.w	r4, {r0, r1}
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b4d3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   b4d3c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b4d3e:	6272      	str	r2, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b4d40:	685b      	ldr	r3, [r3, #4]
   b4d42:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b4d44:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
   b4d48:	6232      	str	r2, [r6, #32]
   b4d4a:	e79f      	b.n	b4c8c <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x2c>
	  if (_Num)
   b4d4c:	4288      	cmp	r0, r1
   b4d4e:	d0d5      	beq.n	b4cfc <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x9c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b4d50:	1d38      	adds	r0, r7, #4
   b4d52:	1a80      	subs	r0, r0, r2
   b4d54:	4420      	add	r0, r4
   b4d56:	e7cf      	b.n	b4cf8 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x98>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b4d58:	f102 0802 	add.w	r8, r2, #2
   b4d5c:	2a01      	cmp	r2, #1
   b4d5e:	bf2c      	ite	cs
   b4d60:	4490      	addcs	r8, r2
   b4d62:	f108 0801 	addcc.w	r8, r8, #1
	if (__n > this->_M_max_size())
   b4d66:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b4d6a:	d301      	bcc.n	b4d70 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x110>
	  std::__throw_bad_alloc();
   b4d6c:	f003 fc48 	bl	b8600 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4d70:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b4d74:	f7ff f98d 	bl	b4092 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   b4d78:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b4d7a:	6971      	ldr	r1, [r6, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b4d7c:	eba8 0404 	sub.w	r4, r8, r4
	  std::copy(this->_M_impl._M_start._M_node,
   b4d80:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b4d82:	0864      	lsrs	r4, r4, #1
	  if (_Num)
   b4d84:	4291      	cmp	r1, r2
   b4d86:	4681      	mov	r9, r0
   b4d88:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   b4d8c:	d003      	beq.n	b4d96 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x136>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4d8e:	1a52      	subs	r2, r2, r1
   b4d90:	4620      	mov	r0, r4
   b4d92:	f003 fd7d 	bl	b8890 <memmove>
	::operator delete(__p
   b4d96:	6871      	ldr	r1, [r6, #4]
   b4d98:	6830      	ldr	r0, [r6, #0]
   b4d9a:	0089      	lsls	r1, r1, #2
   b4d9c:	f7ff f97f 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b4da0:	e9c6 9800 	strd	r9, r8, [r6]
   b4da4:	e7aa      	b.n	b4cfc <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_+0x9c>
   b4da6:	bf00      	nop
   b4da8:	02492492 	.word	0x02492492
   b4dac:	000b8c9c 	.word	0x000b8c9c
   b4db0:	b6db6db7 	.word	0xb6db6db7

000b4db4 <_ZL18wifi_scan_callbackP15WiFiAccessPointP19BLEWiFiSetupManager>:
static void wifi_scan_callback(WiFiAccessPoint* wap, BLEWiFiSetupManager* self) {
   b4db4:	b508      	push	{r3, lr}
   b4db6:	460b      	mov	r3, r1
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
   b4db8:	4601      	mov	r1, r0
   b4dba:	f103 0008 	add.w	r0, r3, #8
   b4dbe:	f7ff ff4f 	bl	b4c60 <_ZNSt5dequeI15WiFiAccessPointSaIS0_EE9push_backERKS0_>
}
   b4dc2:	bd08      	pop	{r3, pc}

000b4dc4 <_GLOBAL__sub_I_BLEWiFiSetupManagerLogger>:
        name_(name) {
   b4dc4:	4b01      	ldr	r3, [pc, #4]	; (b4dcc <_GLOBAL__sub_I_BLEWiFiSetupManagerLogger+0x8>)
   b4dc6:	4a02      	ldr	r2, [pc, #8]	; (b4dd0 <_GLOBAL__sub_I_BLEWiFiSetupManagerLogger+0xc>)
   b4dc8:	601a      	str	r2, [r3, #0]
}
   b4dca:	4770      	bx	lr
   b4dcc:	2003e698 	.word	0x2003e698
   b4dd0:	000b8e17 	.word	0x000b8e17

000b4dd4 <wlan_scan>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <wlan_scan+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030274 	.word	0x00030274

000b4de4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <HAL_USB_USART_Init+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	681b      	ldr	r3, [r3, #0]
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	0003024c 	.word	0x0003024c

000b4df4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <HAL_USB_USART_Begin+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	685b      	ldr	r3, [r3, #4]
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	0003024c 	.word	0x0003024c

000b4e04 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <HAL_USB_USART_End+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	689b      	ldr	r3, [r3, #8]
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	0003024c 	.word	0x0003024c

000b4e14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <HAL_USB_USART_Available_Data+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	691b      	ldr	r3, [r3, #16]
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	0003024c 	.word	0x0003024c

000b4e24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	695b      	ldr	r3, [r3, #20]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	0003024c 	.word	0x0003024c

000b4e34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <HAL_USB_USART_Receive_Data+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	699b      	ldr	r3, [r3, #24]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	0003024c 	.word	0x0003024c

000b4e44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <HAL_USB_USART_Send_Data+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	69db      	ldr	r3, [r3, #28]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	0003024c 	.word	0x0003024c

000b4e54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <HAL_USB_USART_Flush_Data+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	6a1b      	ldr	r3, [r3, #32]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003024c 	.word	0x0003024c

000b4e64 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <hal_usart_end+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	689b      	ldr	r3, [r3, #8]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003023c 	.word	0x0003023c

000b4e74 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <hal_usart_write+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	68db      	ldr	r3, [r3, #12]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003023c 	.word	0x0003023c

000b4e84 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <hal_usart_available+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	691b      	ldr	r3, [r3, #16]
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	0003023c 	.word	0x0003023c

000b4e94 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <hal_usart_read+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	695b      	ldr	r3, [r3, #20]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	0003023c 	.word	0x0003023c

000b4ea4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <hal_usart_peek+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	699b      	ldr	r3, [r3, #24]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	0003023c 	.word	0x0003023c

000b4eb4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <hal_usart_flush+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	69db      	ldr	r3, [r3, #28]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	0003023c 	.word	0x0003023c

000b4ec4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <hal_usart_available_data_for_write+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	0003023c 	.word	0x0003023c

000b4ed4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_usart_begin_config+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	0003023c 	.word	0x0003023c

000b4ee4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <hal_usart_init_ex+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	0003023c 	.word	0x0003023c

000b4ef4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <inet_inet_ntop+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	695b      	ldr	r3, [r3, #20]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030264 	.word	0x00030264

000b4f04 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <os_mutex_recursive_create+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030248 	.word	0x00030248

000b4f14 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <os_mutex_recursive_destroy+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030248 	.word	0x00030248

000b4f24 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <os_mutex_recursive_lock+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030248 	.word	0x00030248

000b4f34 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <os_mutex_recursive_unlock+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030248 	.word	0x00030248

000b4f44 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <hal_ble_stack_init+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	689b      	ldr	r3, [r3, #8]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030278 	.word	0x00030278

000b4f54 <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_ble_gap_get_device_address+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	69db      	ldr	r3, [r3, #28]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030278 	.word	0x00030278

000b4f64 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <hal_ble_gap_set_advertising_data+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030278 	.word	0x00030278

000b4f74 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <hal_ble_gap_set_scan_response_data+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030278 	.word	0x00030278

000b4f84 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <hal_ble_gap_start_advertising+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030278 	.word	0x00030278

000b4f94 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b03      	ldr	r3, [pc, #12]	; (b4fa4 <hal_ble_gap_disconnect+0x10>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4f9e:	9301      	str	r3, [sp, #4]
   b4fa0:	bd08      	pop	{r3, pc}
   b4fa2:	0000      	.short	0x0000
   b4fa4:	00030278 	.word	0x00030278

000b4fa8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b03      	ldr	r3, [pc, #12]	; (b4fb8 <hal_ble_gatt_server_add_service+0x10>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4fb2:	9301      	str	r3, [sp, #4]
   b4fb4:	bd08      	pop	{r3, pc}
   b4fb6:	0000      	.short	0x0000
   b4fb8:	00030278 	.word	0x00030278

000b4fbc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b03      	ldr	r3, [pc, #12]	; (b4fcc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4fc6:	9301      	str	r3, [sp, #4]
   b4fc8:	bd08      	pop	{r3, pc}
   b4fca:	0000      	.short	0x0000
   b4fcc:	00030278 	.word	0x00030278

000b4fd0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b03      	ldr	r3, [pc, #12]	; (b4fe0 <hal_ble_gatt_client_write_with_response+0x10>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b4fda:	9301      	str	r3, [sp, #4]
   b4fdc:	bd08      	pop	{r3, pc}
   b4fde:	0000      	.short	0x0000
   b4fe0:	00030278 	.word	0x00030278

000b4fe4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b03      	ldr	r3, [pc, #12]	; (b4ff4 <hal_ble_gatt_client_write_without_response+0x10>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b4fee:	9301      	str	r3, [sp, #4]
   b4ff0:	bd08      	pop	{r3, pc}
   b4ff2:	0000      	.short	0x0000
   b4ff4:	00030278 	.word	0x00030278

000b4ff8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b03      	ldr	r3, [pc, #12]	; (b5008 <hal_ble_gatt_server_add_characteristic+0x10>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5002:	9301      	str	r3, [sp, #4]
   b5004:	bd08      	pop	{r3, pc}
   b5006:	0000      	.short	0x0000
   b5008:	00030278 	.word	0x00030278

000b500c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b03      	ldr	r3, [pc, #12]	; (b501c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5016:	9301      	str	r3, [sp, #4]
   b5018:	bd08      	pop	{r3, pc}
   b501a:	0000      	.short	0x0000
   b501c:	00030278 	.word	0x00030278

000b5020 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b03      	ldr	r3, [pc, #12]	; (b5030 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b502a:	9301      	str	r3, [sp, #4]
   b502c:	bd08      	pop	{r3, pc}
   b502e:	0000      	.short	0x0000
   b5030:	00030278 	.word	0x00030278

000b5034 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b03      	ldr	r3, [pc, #12]	; (b5044 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b503e:	9301      	str	r3, [sp, #4]
   b5040:	bd08      	pop	{r3, pc}
   b5042:	0000      	.short	0x0000
   b5044:	00030278 	.word	0x00030278

000b5048 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <HAL_RNG_GetRandomNumber+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	685b      	ldr	r3, [r3, #4]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	00030218 	.word	0x00030218

000b5058 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <HAL_Delay_Microseconds+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	68db      	ldr	r3, [r3, #12]
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	00030218 	.word	0x00030218

000b5068 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	695b      	ldr	r3, [r3, #20]
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	00030218 	.word	0x00030218

000b5078 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b02      	ldr	r3, [pc, #8]	; (b5084 <netdb_freeaddrinfo+0xc>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	689b      	ldr	r3, [r3, #8]
   b5080:	9301      	str	r3, [sp, #4]
   b5082:	bd08      	pop	{r3, pc}
   b5084:	00030268 	.word	0x00030268

000b5088 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <netdb_getaddrinfo+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	68db      	ldr	r3, [r3, #12]
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	00030268 	.word	0x00030268

000b5098 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <panic_+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	00030260 	.word	0x00030260

000b50a8 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <jsmn_init+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	00030260 	.word	0x00030260

000b50b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <log_message+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	00030260 	.word	0x00030260

000b50c8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <log_message_v+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	00030260 	.word	0x00030260

000b50d8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <log_level_name+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	00030260 	.word	0x00030260

000b50e8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <log_set_callbacks+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	00030260 	.word	0x00030260

000b50f8 <jsmn_parse>:
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
DYNALIB_FN(39, services, diag_command, int(int, void*, void*))
DYNALIB_FN(40, services, set_system_error_message, void(const char*, ...))
DYNALIB_FN(41, services, clear_system_error_message, void())
DYNALIB_FN(42, services, get_system_error_message, const char*(int))
DYNALIB_FN(43, services, jsmn_parse, int(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b03      	ldr	r3, [pc, #12]	; (b5108 <jsmn_parse+0x10>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b5102:	9301      	str	r3, [sp, #4]
   b5104:	bd08      	pop	{r3, pc}
   b5106:	0000      	.short	0x0000
   b5108:	00030260 	.word	0x00030260

000b510c <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b510c:	b508      	push	{r3, lr}
   b510e:	4b02      	ldr	r3, [pc, #8]	; (b5118 <spark_cloud_flag_connect+0xc>)
   b5110:	681b      	ldr	r3, [r3, #0]
   b5112:	68db      	ldr	r3, [r3, #12]
   b5114:	9301      	str	r3, [sp, #4]
   b5116:	bd08      	pop	{r3, pc}
   b5118:	00030244 	.word	0x00030244

000b511c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b511c:	b508      	push	{r3, lr}
   b511e:	4b02      	ldr	r3, [pc, #8]	; (b5128 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5120:	681b      	ldr	r3, [r3, #0]
   b5122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5124:	9301      	str	r3, [sp, #4]
   b5126:	bd08      	pop	{r3, pc}
   b5128:	00030244 	.word	0x00030244

000b512c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b512c:	b508      	push	{r3, lr}
   b512e:	4b02      	ldr	r3, [pc, #8]	; (b5138 <network_connect+0xc>)
   b5130:	681b      	ldr	r3, [r3, #0]
   b5132:	685b      	ldr	r3, [r3, #4]
   b5134:	9301      	str	r3, [sp, #4]
   b5136:	bd08      	pop	{r3, pc}
   b5138:	00030240 	.word	0x00030240

000b513c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b513c:	b508      	push	{r3, lr}
   b513e:	4b02      	ldr	r3, [pc, #8]	; (b5148 <network_connecting+0xc>)
   b5140:	681b      	ldr	r3, [r3, #0]
   b5142:	689b      	ldr	r3, [r3, #8]
   b5144:	9301      	str	r3, [sp, #4]
   b5146:	bd08      	pop	{r3, pc}
   b5148:	00030240 	.word	0x00030240

000b514c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b514c:	b508      	push	{r3, lr}
   b514e:	4b02      	ldr	r3, [pc, #8]	; (b5158 <network_disconnect+0xc>)
   b5150:	681b      	ldr	r3, [r3, #0]
   b5152:	68db      	ldr	r3, [r3, #12]
   b5154:	9301      	str	r3, [sp, #4]
   b5156:	bd08      	pop	{r3, pc}
   b5158:	00030240 	.word	0x00030240

000b515c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b515c:	b508      	push	{r3, lr}
   b515e:	4b02      	ldr	r3, [pc, #8]	; (b5168 <network_ready+0xc>)
   b5160:	681b      	ldr	r3, [r3, #0]
   b5162:	691b      	ldr	r3, [r3, #16]
   b5164:	9301      	str	r3, [sp, #4]
   b5166:	bd08      	pop	{r3, pc}
   b5168:	00030240 	.word	0x00030240

000b516c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b516c:	b508      	push	{r3, lr}
   b516e:	4b02      	ldr	r3, [pc, #8]	; (b5178 <network_on+0xc>)
   b5170:	681b      	ldr	r3, [r3, #0]
   b5172:	695b      	ldr	r3, [r3, #20]
   b5174:	9301      	str	r3, [sp, #4]
   b5176:	bd08      	pop	{r3, pc}
   b5178:	00030240 	.word	0x00030240

000b517c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b517c:	b508      	push	{r3, lr}
   b517e:	4b02      	ldr	r3, [pc, #8]	; (b5188 <network_off+0xc>)
   b5180:	681b      	ldr	r3, [r3, #0]
   b5182:	699b      	ldr	r3, [r3, #24]
   b5184:	9301      	str	r3, [sp, #4]
   b5186:	bd08      	pop	{r3, pc}
   b5188:	00030240 	.word	0x00030240

000b518c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b518c:	b508      	push	{r3, lr}
   b518e:	4b02      	ldr	r3, [pc, #8]	; (b5198 <network_listen+0xc>)
   b5190:	681b      	ldr	r3, [r3, #0]
   b5192:	69db      	ldr	r3, [r3, #28]
   b5194:	9301      	str	r3, [sp, #4]
   b5196:	bd08      	pop	{r3, pc}
   b5198:	00030240 	.word	0x00030240

000b519c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b519c:	b508      	push	{r3, lr}
   b519e:	4b02      	ldr	r3, [pc, #8]	; (b51a8 <network_listening+0xc>)
   b51a0:	681b      	ldr	r3, [r3, #0]
   b51a2:	6a1b      	ldr	r3, [r3, #32]
   b51a4:	9301      	str	r3, [sp, #4]
   b51a6:	bd08      	pop	{r3, pc}
   b51a8:	00030240 	.word	0x00030240

000b51ac <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b51ac:	b508      	push	{r3, lr}
   b51ae:	4b02      	ldr	r3, [pc, #8]	; (b51b8 <network_set_credentials+0xc>)
   b51b0:	681b      	ldr	r3, [r3, #0]
   b51b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51b4:	9301      	str	r3, [sp, #4]
   b51b6:	bd08      	pop	{r3, pc}
   b51b8:	00030240 	.word	0x00030240

000b51bc <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b51bc:	b508      	push	{r3, lr}
   b51be:	4b02      	ldr	r3, [pc, #8]	; (b51c8 <network_set_listen_timeout+0xc>)
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b51c4:	9301      	str	r3, [sp, #4]
   b51c6:	bd08      	pop	{r3, pc}
   b51c8:	00030240 	.word	0x00030240

000b51cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b51cc:	b508      	push	{r3, lr}
   b51ce:	4b02      	ldr	r3, [pc, #8]	; (b51d8 <network_get_listen_timeout+0xc>)
   b51d0:	681b      	ldr	r3, [r3, #0]
   b51d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b51d4:	9301      	str	r3, [sp, #4]
   b51d6:	bd08      	pop	{r3, pc}
   b51d8:	00030240 	.word	0x00030240

000b51dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <network_is_on+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	00030240 	.word	0x00030240

000b51ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <network_is_off+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	00030240 	.word	0x00030240

000b51fc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b02      	ldr	r3, [pc, #8]	; (b5208 <set_system_mode+0xc>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	685b      	ldr	r3, [r3, #4]
   b5204:	9301      	str	r3, [sp, #4]
   b5206:	bd08      	pop	{r3, pc}
   b5208:	00030220 	.word	0x00030220

000b520c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b520c:	b508      	push	{r3, lr}
   b520e:	4b02      	ldr	r3, [pc, #8]	; (b5218 <system_thread_set_state+0xc>)
   b5210:	681b      	ldr	r3, [r3, #0]
   b5212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5214:	9301      	str	r3, [sp, #4]
   b5216:	bd08      	pop	{r3, pc}
   b5218:	00030220 	.word	0x00030220

000b521c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b521c:	b508      	push	{r3, lr}
   b521e:	4b03      	ldr	r3, [pc, #12]	; (b522c <system_ctrl_set_app_request_handler+0x10>)
   b5220:	681b      	ldr	r3, [r3, #0]
   b5222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5226:	9301      	str	r3, [sp, #4]
   b5228:	bd08      	pop	{r3, pc}
   b522a:	0000      	.short	0x0000
   b522c:	00030220 	.word	0x00030220

000b5230 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b03      	ldr	r3, [pc, #12]	; (b5240 <system_ctrl_set_result+0x10>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b523a:	9301      	str	r3, [sp, #4]
   b523c:	bd08      	pop	{r3, pc}
   b523e:	0000      	.short	0x0000
   b5240:	00030220 	.word	0x00030220

000b5244 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5244:	b508      	push	{r3, lr}
   b5246:	4b02      	ldr	r3, [pc, #8]	; (b5250 <malloc+0xc>)
   b5248:	681b      	ldr	r3, [r3, #0]
   b524a:	681b      	ldr	r3, [r3, #0]
   b524c:	9301      	str	r3, [sp, #4]
   b524e:	bd08      	pop	{r3, pc}
   b5250:	0003021c 	.word	0x0003021c

000b5254 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5254:	b508      	push	{r3, lr}
   b5256:	4b02      	ldr	r3, [pc, #8]	; (b5260 <free+0xc>)
   b5258:	681b      	ldr	r3, [r3, #0]
   b525a:	685b      	ldr	r3, [r3, #4]
   b525c:	9301      	str	r3, [sp, #4]
   b525e:	bd08      	pop	{r3, pc}
   b5260:	0003021c 	.word	0x0003021c

000b5264 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5264:	b508      	push	{r3, lr}
   b5266:	4b02      	ldr	r3, [pc, #8]	; (b5270 <realloc+0xc>)
   b5268:	681b      	ldr	r3, [r3, #0]
   b526a:	689b      	ldr	r3, [r3, #8]
   b526c:	9301      	str	r3, [sp, #4]
   b526e:	bd08      	pop	{r3, pc}
   b5270:	0003021c 	.word	0x0003021c

000b5274 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b5274:	b508      	push	{r3, lr}
   b5276:	4b02      	ldr	r3, [pc, #8]	; (b5280 <sprintf+0xc>)
   b5278:	681b      	ldr	r3, [r3, #0]
   b527a:	68db      	ldr	r3, [r3, #12]
   b527c:	9301      	str	r3, [sp, #4]
   b527e:	bd08      	pop	{r3, pc}
   b5280:	0003021c 	.word	0x0003021c

000b5284 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5284:	b508      	push	{r3, lr}
   b5286:	4b02      	ldr	r3, [pc, #8]	; (b5290 <vsnprintf+0xc>)
   b5288:	681b      	ldr	r3, [r3, #0]
   b528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b528c:	9301      	str	r3, [sp, #4]
   b528e:	bd08      	pop	{r3, pc}
   b5290:	0003021c 	.word	0x0003021c

000b5294 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5294:	b508      	push	{r3, lr}
   b5296:	4b02      	ldr	r3, [pc, #8]	; (b52a0 <abort+0xc>)
   b5298:	681b      	ldr	r3, [r3, #0]
   b529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b529c:	9301      	str	r3, [sp, #4]
   b529e:	bd08      	pop	{r3, pc}
   b52a0:	0003021c 	.word	0x0003021c

000b52a4 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b52a4:	b508      	push	{r3, lr}
   b52a6:	4b02      	ldr	r3, [pc, #8]	; (b52b0 <__errno+0xc>)
   b52a8:	681b      	ldr	r3, [r3, #0]
   b52aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52ac:	9301      	str	r3, [sp, #4]
   b52ae:	bd08      	pop	{r3, pc}
   b52b0:	0003021c 	.word	0x0003021c

000b52b4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b52b4:	b508      	push	{r3, lr}
   b52b6:	4b02      	ldr	r3, [pc, #8]	; (b52c0 <__assert_func+0xc>)
   b52b8:	681b      	ldr	r3, [r3, #0]
   b52ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52bc:	9301      	str	r3, [sp, #4]
   b52be:	bd08      	pop	{r3, pc}
   b52c0:	0003021c 	.word	0x0003021c

000b52c4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b52c4:	b508      	push	{r3, lr}
   b52c6:	4b02      	ldr	r3, [pc, #8]	; (b52d0 <newlib_impure_ptr_callback+0xc>)
   b52c8:	681b      	ldr	r3, [r3, #0]
   b52ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52cc:	9301      	str	r3, [sp, #4]
   b52ce:	bd08      	pop	{r3, pc}
   b52d0:	0003021c 	.word	0x0003021c

000b52d4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b52d4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b52d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b52d8:	4604      	mov	r4, r0
      if (_M_manager)
   b52da:	b113      	cbz	r3, b52e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b52dc:	2203      	movs	r2, #3
   b52de:	4601      	mov	r1, r0
   b52e0:	4798      	blx	r3
    }
   b52e2:	4620      	mov	r0, r4
   b52e4:	bd10      	pop	{r4, pc}

000b52e6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b52e6:	2300      	movs	r3, #0
   b52e8:	6840      	ldr	r0, [r0, #4]
   b52ea:	461a      	mov	r2, r3
   b52ec:	f7ff bf1e 	b.w	b512c <network_connect>

000b52f0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b52f0:	6840      	ldr	r0, [r0, #4]
   b52f2:	2200      	movs	r2, #0
   b52f4:	2102      	movs	r1, #2
   b52f6:	f7ff bf29 	b.w	b514c <network_disconnect>

000b52fa <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b52fa:	2200      	movs	r2, #0
   b52fc:	6840      	ldr	r0, [r0, #4]
   b52fe:	4611      	mov	r1, r2
   b5300:	f7ff bf1c 	b.w	b513c <network_connecting>

000b5304 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5304:	2200      	movs	r2, #0
   b5306:	6840      	ldr	r0, [r0, #4]
   b5308:	4611      	mov	r1, r2
   b530a:	f7ff bf27 	b.w	b515c <network_ready>

000b530e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b530e:	2300      	movs	r3, #0
   b5310:	6840      	ldr	r0, [r0, #4]
   b5312:	461a      	mov	r2, r3
   b5314:	4619      	mov	r1, r3
   b5316:	f7ff bf29 	b.w	b516c <network_on>

000b531a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b531a:	2300      	movs	r3, #0
   b531c:	6840      	ldr	r0, [r0, #4]
   b531e:	461a      	mov	r2, r3
   b5320:	4619      	mov	r1, r3
   b5322:	f7ff bf2b 	b.w	b517c <network_off>

000b5326 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5326:	6840      	ldr	r0, [r0, #4]
   b5328:	2100      	movs	r1, #0
   b532a:	f7ff bf57 	b.w	b51dc <network_is_on>

000b532e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b532e:	6840      	ldr	r0, [r0, #4]
   b5330:	2100      	movs	r1, #0
   b5332:	f7ff bf5b 	b.w	b51ec <network_is_off>

000b5336 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5336:	6840      	ldr	r0, [r0, #4]
   b5338:	2200      	movs	r2, #0
   b533a:	f081 0101 	eor.w	r1, r1, #1
   b533e:	f7ff bf25 	b.w	b518c <network_listen>

000b5342 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5342:	6840      	ldr	r0, [r0, #4]
   b5344:	2200      	movs	r2, #0
   b5346:	f7ff bf39 	b.w	b51bc <network_set_listen_timeout>

000b534a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b534a:	2200      	movs	r2, #0
   b534c:	6840      	ldr	r0, [r0, #4]
   b534e:	4611      	mov	r1, r2
   b5350:	f7ff bf3c 	b.w	b51cc <network_get_listen_timeout>

000b5354 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5354:	2200      	movs	r2, #0
   b5356:	6840      	ldr	r0, [r0, #4]
   b5358:	4611      	mov	r1, r2
   b535a:	f7ff bf1f 	b.w	b519c <network_listening>

000b535e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b535e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5362:	b095      	sub	sp, #84	; 0x54
   b5364:	4614      	mov	r4, r2
   b5366:	460d      	mov	r5, r1
   b5368:	4607      	mov	r7, r0
    IPAddress addr;
   b536a:	f000 fd39 	bl	b5de0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b536e:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5370:	221c      	movs	r2, #28
   b5372:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5374:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5376:	f003 faa5 	bl	b88c4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b537a:	2340      	movs	r3, #64	; 0x40
   b537c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b537e:	4620      	mov	r0, r4
   b5380:	466b      	mov	r3, sp
   b5382:	aa0c      	add	r2, sp, #48	; 0x30
   b5384:	2100      	movs	r1, #0
   b5386:	f7ff fe7f 	bl	b5088 <netdb_getaddrinfo>
    if (!r) {
   b538a:	4604      	mov	r4, r0
   b538c:	2800      	cmp	r0, #0
   b538e:	d14b      	bne.n	b5428 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5390:	4602      	mov	r2, r0
   b5392:	2101      	movs	r1, #1
   b5394:	6868      	ldr	r0, [r5, #4]
   b5396:	f7ff fee1 	bl	b515c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b539a:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b539c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b539e:	4622      	mov	r2, r4
   b53a0:	6868      	ldr	r0, [r5, #4]
   b53a2:	f7ff fedb 	bl	b515c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b53a6:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b53a8:	4681      	mov	r9, r0
        bool ok = false;
   b53aa:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b53ac:	2e00      	cmp	r6, #0
   b53ae:	d03b      	beq.n	b5428 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b53b0:	2900      	cmp	r1, #0
   b53b2:	d139      	bne.n	b5428 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b53b4:	6873      	ldr	r3, [r6, #4]
   b53b6:	2b02      	cmp	r3, #2
   b53b8:	d003      	beq.n	b53c2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b53ba:	2b0a      	cmp	r3, #10
   b53bc:	d011      	beq.n	b53e2 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b53be:	69f6      	ldr	r6, [r6, #28]
   b53c0:	e7f4      	b.n	b53ac <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b53c2:	f1b8 0f00 	cmp.w	r8, #0
   b53c6:	d0fa      	beq.n	b53be <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b53c8:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b53ca:	a806      	add	r0, sp, #24
   b53cc:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b53ce:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b53d0:	f000 fd34 	bl	b5e3c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b53d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53d6:	1d3c      	adds	r4, r7, #4
   b53d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53da:	682b      	ldr	r3, [r5, #0]
   b53dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b53de:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b53e0:	e7ed      	b.n	b53be <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b53e2:	f1b9 0f00 	cmp.w	r9, #0
   b53e6:	d0ea      	beq.n	b53be <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b53e8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b53ea:	2210      	movs	r2, #16
   b53ec:	a801      	add	r0, sp, #4
   b53ee:	f003 fa69 	bl	b88c4 <memset>
                    a.v = 6;
   b53f2:	2306      	movs	r3, #6
   b53f4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b53f8:	ad01      	add	r5, sp, #4
   b53fa:	f104 0308 	add.w	r3, r4, #8
   b53fe:	3418      	adds	r4, #24
   b5400:	6818      	ldr	r0, [r3, #0]
   b5402:	6859      	ldr	r1, [r3, #4]
   b5404:	462a      	mov	r2, r5
   b5406:	c203      	stmia	r2!, {r0, r1}
   b5408:	3308      	adds	r3, #8
   b540a:	42a3      	cmp	r3, r4
   b540c:	4615      	mov	r5, r2
   b540e:	d1f7      	bne.n	b5400 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5410:	a901      	add	r1, sp, #4
   b5412:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5414:	ad07      	add	r5, sp, #28
   b5416:	f000 fcf1 	bl	b5dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b541a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b541c:	1d3c      	adds	r4, r7, #4
   b541e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5420:	682b      	ldr	r3, [r5, #0]
   b5422:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5424:	4649      	mov	r1, r9
   b5426:	e7ca      	b.n	b53be <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5428:	9800      	ldr	r0, [sp, #0]
   b542a:	f7ff fe25 	bl	b5078 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b542e:	4638      	mov	r0, r7
   b5430:	b015      	add	sp, #84	; 0x54
   b5432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b5438 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5438:	4b02      	ldr	r3, [pc, #8]	; (b5444 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b543a:	4a03      	ldr	r2, [pc, #12]	; (b5448 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b543c:	601a      	str	r2, [r3, #0]
   b543e:	2200      	movs	r2, #0
   b5440:	605a      	str	r2, [r3, #4]

} // spark
   b5442:	4770      	bx	lr
   b5444:	2003e69c 	.word	0x2003e69c
   b5448:	000b8ef8 	.word	0x000b8ef8

000b544c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b544c:	2200      	movs	r2, #0
   b544e:	6840      	ldr	r0, [r0, #4]
   b5450:	4611      	mov	r1, r2
   b5452:	f7ff be83 	b.w	b515c <network_ready>

000b5456 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5456:	2200      	movs	r2, #0
   b5458:	6840      	ldr	r0, [r0, #4]
   b545a:	4611      	mov	r1, r2
   b545c:	f7ff be9e 	b.w	b519c <network_listening>

000b5460 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5460:	2200      	movs	r2, #0
   b5462:	6840      	ldr	r0, [r0, #4]
   b5464:	4611      	mov	r1, r2
   b5466:	f7ff beb1 	b.w	b51cc <network_get_listen_timeout>

000b546a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b546a:	6840      	ldr	r0, [r0, #4]
   b546c:	2200      	movs	r2, #0
   b546e:	f7ff bea5 	b.w	b51bc <network_set_listen_timeout>

000b5472 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5472:	6840      	ldr	r0, [r0, #4]
   b5474:	2200      	movs	r2, #0
   b5476:	f081 0101 	eor.w	r1, r1, #1
   b547a:	f7ff be87 	b.w	b518c <network_listen>

000b547e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b547e:	2300      	movs	r3, #0
   b5480:	6840      	ldr	r0, [r0, #4]
   b5482:	461a      	mov	r2, r3
   b5484:	4619      	mov	r1, r3
   b5486:	f7ff be79 	b.w	b517c <network_off>

000b548a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b548a:	2300      	movs	r3, #0
   b548c:	6840      	ldr	r0, [r0, #4]
   b548e:	461a      	mov	r2, r3
   b5490:	4619      	mov	r1, r3
   b5492:	f7ff be6b 	b.w	b516c <network_on>

000b5496 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5496:	2200      	movs	r2, #0
   b5498:	6840      	ldr	r0, [r0, #4]
   b549a:	4611      	mov	r1, r2
   b549c:	f7ff be4e 	b.w	b513c <network_connecting>

000b54a0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b54a0:	6840      	ldr	r0, [r0, #4]
   b54a2:	2200      	movs	r2, #0
   b54a4:	2102      	movs	r1, #2
   b54a6:	f7ff be51 	b.w	b514c <network_disconnect>

000b54aa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b54aa:	2300      	movs	r3, #0
   b54ac:	6840      	ldr	r0, [r0, #4]
   b54ae:	461a      	mov	r2, r3
   b54b0:	f7ff be3c 	b.w	b512c <network_connect>

000b54b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b54b4:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b54b6:	2204      	movs	r2, #4
   b54b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b54ba:	4a02      	ldr	r2, [pc, #8]	; (b54c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b54bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b54be:	4770      	bx	lr
   b54c0:	2003e6a4 	.word	0x2003e6a4
   b54c4:	000b8f34 	.word	0x000b8f34

000b54c8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b54c8:	4770      	bx	lr

000b54ca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b54ca:	7441      	strb	r1, [r0, #17]
}
   b54cc:	4770      	bx	lr

000b54ce <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b54ce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b54d0:	7c00      	ldrb	r0, [r0, #16]
   b54d2:	f7ff fcf7 	bl	b4ec4 <hal_usart_available_data_for_write>
}
   b54d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54da:	bd08      	pop	{r3, pc}

000b54dc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b54dc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b54de:	7c00      	ldrb	r0, [r0, #16]
   b54e0:	f7ff fcd0 	bl	b4e84 <hal_usart_available>
}
   b54e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54e8:	bd08      	pop	{r3, pc}

000b54ea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b54ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b54ec:	7c00      	ldrb	r0, [r0, #16]
   b54ee:	f7ff fcd9 	bl	b4ea4 <hal_usart_peek>
}
   b54f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54f6:	bd08      	pop	{r3, pc}

000b54f8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b54f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b54fa:	7c00      	ldrb	r0, [r0, #16]
   b54fc:	f7ff fcca 	bl	b4e94 <hal_usart_read>
}
   b5500:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5504:	bd08      	pop	{r3, pc}

000b5506 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5506:	7c00      	ldrb	r0, [r0, #16]
   b5508:	f7ff bcd4 	b.w	b4eb4 <hal_usart_flush>

000b550c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b550c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b550e:	7c45      	ldrb	r5, [r0, #17]
{
   b5510:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5512:	b12d      	cbz	r5, b5520 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5514:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5516:	b003      	add	sp, #12
   b5518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b551c:	f7ff bcaa 	b.w	b4e74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5520:	7c00      	ldrb	r0, [r0, #16]
   b5522:	9101      	str	r1, [sp, #4]
   b5524:	f7ff fcce 	bl	b4ec4 <hal_usart_available_data_for_write>
   b5528:	2800      	cmp	r0, #0
   b552a:	9901      	ldr	r1, [sp, #4]
   b552c:	dcf2      	bgt.n	b5514 <_ZN11USARTSerial5writeEh+0x8>
}
   b552e:	4628      	mov	r0, r5
   b5530:	b003      	add	sp, #12
   b5532:	bd30      	pop	{r4, r5, pc}

000b5534 <_ZN11USARTSerialD0Ev>:
   b5534:	b510      	push	{r4, lr}
   b5536:	2114      	movs	r1, #20
   b5538:	4604      	mov	r4, r0
   b553a:	f7fe fdb0 	bl	b409e <_ZdlPvj>
   b553e:	4620      	mov	r0, r4
   b5540:	bd10      	pop	{r4, pc}
	...

000b5544 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5544:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b554a:	4604      	mov	r4, r0
   b554c:	4608      	mov	r0, r1
   b554e:	4611      	mov	r1, r2
   b5550:	2200      	movs	r2, #0
   b5552:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5556:	4b04      	ldr	r3, [pc, #16]	; (b5568 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5558:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b555a:	2301      	movs	r3, #1
  _serial = serial;
   b555c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b555e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5560:	f7ff fcc0 	bl	b4ee4 <hal_usart_init_ex>
}
   b5564:	4620      	mov	r0, r4
   b5566:	bd10      	pop	{r4, pc}
   b5568:	000b8f78 	.word	0x000b8f78

000b556c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b556c:	7c00      	ldrb	r0, [r0, #16]
   b556e:	2300      	movs	r3, #0
   b5570:	f7ff bcb0 	b.w	b4ed4 <hal_usart_begin_config>

000b5574 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5574:	2200      	movs	r2, #0
   b5576:	f7ff bff9 	b.w	b556c <_ZN11USARTSerial5beginEmm>

000b557a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b557a:	7c00      	ldrb	r0, [r0, #16]
   b557c:	f7ff bc72 	b.w	b4e64 <hal_usart_end>

000b5580 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b5580:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b5582:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5584:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5586:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5588:	dd03      	ble.n	b5592 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b558a:	f7ff fe6b 	bl	b5264 <realloc>
            if (!d) {
   b558e:	b918      	cbnz	r0, b5598 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5590:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5592:	f7ff fe5f 	bl	b5254 <free>
        T* d = nullptr;
   b5596:	2000      	movs	r0, #0
        data_ = d;
   b5598:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b559a:	60a5      	str	r5, [r4, #8]
        return true;
   b559c:	2001      	movs	r0, #1
   b559e:	e7f7      	b.n	b5590 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b55a0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b55a0:	f100 0310 	add.w	r3, r0, #16
   b55a4:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b55a6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b55aa:	2901      	cmp	r1, #1
   b55ac:	4618      	mov	r0, r3
   b55ae:	d108      	bne.n	b55c2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b55b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b55b4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b55b8:	3a01      	subs	r2, #1
   b55ba:	f103 0310 	add.w	r3, r3, #16
   b55be:	d1f2      	bne.n	b55a6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b55c0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b55c2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b55c4:	bf04      	itt	eq
   b55c6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b55ca:	1852      	addeq	r2, r2, r1
   b55cc:	e7f4      	b.n	b55b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b55ce <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b55ce:	4770      	bx	lr

000b55d0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b55d0:	2000      	movs	r0, #0
   b55d2:	4770      	bx	lr

000b55d4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b55d4:	b510      	push	{r4, lr}
   b55d6:	2110      	movs	r1, #16
   b55d8:	4604      	mov	r4, r0
   b55da:	f7fe fd60 	bl	b409e <_ZdlPvj>
   b55de:	4620      	mov	r0, r4
   b55e0:	bd10      	pop	{r4, pc}

000b55e2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b55e2:	b508      	push	{r3, lr}
      { delete this; }
   b55e4:	f7ff fff6 	bl	b55d4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b55e8:	bd08      	pop	{r3, pc}

000b55ea <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b55ea:	b40e      	push	{r1, r2, r3}
   b55ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b55ee:	b088      	sub	sp, #32
   b55f0:	af00      	add	r7, sp, #0
   b55f2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b55f6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b55f8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b55fc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b55fe:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5600:	462b      	mov	r3, r5
   b5602:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b5604:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5606:	f7ff fe3d 	bl	b5284 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b560a:	280f      	cmp	r0, #15
   b560c:	687a      	ldr	r2, [r7, #4]
   b560e:	d91a      	bls.n	b5646 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b5610:	f100 0308 	add.w	r3, r0, #8
   b5614:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5618:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b561a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b561e:	1c41      	adds	r1, r0, #1
   b5620:	462b      	mov	r3, r5
   b5622:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5624:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5626:	f7ff fe2d 	bl	b5284 <vsnprintf>
        if (n > 0) {
   b562a:	1e02      	subs	r2, r0, #0
   b562c:	dd04      	ble.n	b5638 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b562e:	6823      	ldr	r3, [r4, #0]
   b5630:	4669      	mov	r1, sp
   b5632:	689b      	ldr	r3, [r3, #8]
   b5634:	4620      	mov	r0, r4
   b5636:	4798      	blx	r3
   b5638:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b563a:	3720      	adds	r7, #32
   b563c:	46bd      	mov	sp, r7
   b563e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5642:	b003      	add	sp, #12
   b5644:	4770      	bx	lr
    } else if (n > 0) {
   b5646:	2800      	cmp	r0, #0
   b5648:	d0f7      	beq.n	b563a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b564a:	6823      	ldr	r3, [r4, #0]
   b564c:	4602      	mov	r2, r0
   b564e:	689b      	ldr	r3, [r3, #8]
   b5650:	f107 0110 	add.w	r1, r7, #16
   b5654:	4620      	mov	r0, r4
   b5656:	4798      	blx	r3
}
   b5658:	e7ef      	b.n	b563a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b565a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b565a:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   b565c:	68c4      	ldr	r4, [r0, #12]
   b565e:	b17c      	cbz	r4, b5680 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
        delete[] tokens;
   b5660:	6820      	ldr	r0, [r4, #0]
   b5662:	b108      	cbz	r0, b5668 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   b5664:	f7fe fd19 	bl	b409a <_ZdaPv>
        if (freeJson) {
   b5668:	7a23      	ldrb	r3, [r4, #8]
   b566a:	b11b      	cbz	r3, b5674 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   b566c:	6860      	ldr	r0, [r4, #4]
            delete[] json;
   b566e:	b108      	cbz	r0, b5674 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   b5670:	f7fe fd13 	bl	b409a <_ZdaPv>
   b5674:	4620      	mov	r0, r4
   b5676:	210c      	movs	r1, #12
   b5678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b567c:	f7fe bd0f 	b.w	b409e <_ZdlPvj>
   b5680:	bd10      	pop	{r4, pc}

000b5682 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5682:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5684:	6843      	ldr	r3, [r0, #4]
   b5686:	3b01      	subs	r3, #1
    {
   b5688:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b568a:	6043      	str	r3, [r0, #4]
   b568c:	b963      	cbnz	r3, b56a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b568e:	6803      	ldr	r3, [r0, #0]
   b5690:	689b      	ldr	r3, [r3, #8]
   b5692:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5694:	68a3      	ldr	r3, [r4, #8]
   b5696:	3b01      	subs	r3, #1
   b5698:	60a3      	str	r3, [r4, #8]
   b569a:	b92b      	cbnz	r3, b56a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b569c:	6823      	ldr	r3, [r4, #0]
   b569e:	4620      	mov	r0, r4
   b56a0:	68db      	ldr	r3, [r3, #12]
    }
   b56a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b56a6:	4718      	bx	r3
    }
   b56a8:	bd10      	pop	{r4, pc}

000b56aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b56aa:	b538      	push	{r3, r4, r5, lr}
   b56ac:	680b      	ldr	r3, [r1, #0]
   b56ae:	6003      	str	r3, [r0, #0]
   b56b0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b56b2:	6843      	ldr	r3, [r0, #4]
   b56b4:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b56b6:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b56b8:	d008      	beq.n	b56cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b56ba:	b115      	cbz	r5, b56c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b56bc:	686b      	ldr	r3, [r5, #4]
   b56be:	3301      	adds	r3, #1
   b56c0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b56c2:	6860      	ldr	r0, [r4, #4]
   b56c4:	b108      	cbz	r0, b56ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b56c6:	f7ff ffdc 	bl	b5682 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b56ca:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b56cc:	bd38      	pop	{r3, r4, r5, pc}

000b56ce <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b56ce:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b56d0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b56d2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b56d6:	689b      	ldr	r3, [r3, #8]
   b56d8:	2201      	movs	r2, #1
   b56da:	f10d 0107 	add.w	r1, sp, #7
   b56de:	4798      	blx	r3
}
   b56e0:	b003      	add	sp, #12
   b56e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b56e6:	460b      	mov	r3, r1
   b56e8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b56ea:	2200      	movs	r2, #0
   b56ec:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b56ee:	e9c0 2200 	strd	r2, r2, [r0]
   b56f2:	4604      	mov	r4, r0
        t_ = t;
   b56f4:	6083      	str	r3, [r0, #8]
    if (t) {
   b56f6:	b90b      	cbnz	r3, b56fc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b56f8:	4620      	mov	r0, r4
   b56fa:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b56fc:	f7ff ffd5 	bl	b56aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5700:	e7fa      	b.n	b56f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5702 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5702:	6883      	ldr	r3, [r0, #8]
   b5704:	b1eb      	cbz	r3, b5742 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b5706:	781a      	ldrb	r2, [r3, #0]
   b5708:	2a03      	cmp	r2, #3
   b570a:	d81a      	bhi.n	b5742 <_ZNK5spark9JSONValue4typeEv+0x40>
   b570c:	e8df f002 	tbb	[pc, r2]
   b5710:	1b021704 	.word	0x1b021704
   b5714:	2005      	movs	r0, #5
   b5716:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5718:	6802      	ldr	r2, [r0, #0]
   b571a:	685b      	ldr	r3, [r3, #4]
   b571c:	6852      	ldr	r2, [r2, #4]
   b571e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5720:	282d      	cmp	r0, #45	; 0x2d
   b5722:	d012      	beq.n	b574a <_ZNK5spark9JSONValue4typeEv+0x48>
   b5724:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5728:	2b09      	cmp	r3, #9
   b572a:	d90e      	bls.n	b574a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b572c:	2874      	cmp	r0, #116	; 0x74
   b572e:	d00e      	beq.n	b574e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5730:	2866      	cmp	r0, #102	; 0x66
   b5732:	d00c      	beq.n	b574e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5734:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5738:	4258      	negs	r0, r3
   b573a:	4158      	adcs	r0, r3
   b573c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b573e:	2006      	movs	r0, #6
   b5740:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b5742:	2000      	movs	r0, #0
   b5744:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b5746:	2004      	movs	r0, #4
   b5748:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b574a:	2003      	movs	r0, #3
   b574c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b574e:	2002      	movs	r0, #2
}
   b5750:	4770      	bx	lr

000b5752 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b5752:	b510      	push	{r4, lr}
   b5754:	4604      	mov	r4, r0
    switch (type()) {
   b5756:	f7ff ffd4 	bl	b5702 <_ZNK5spark9JSONValue4typeEv>
   b575a:	2802      	cmp	r0, #2
   b575c:	d00e      	beq.n	b577c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b575e:	1ec3      	subs	r3, r0, #3
   b5760:	b2db      	uxtb	r3, r3
   b5762:	2b01      	cmp	r3, #1
   b5764:	d814      	bhi.n	b5790 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b5766:	6822      	ldr	r2, [r4, #0]
   b5768:	68a3      	ldr	r3, [r4, #8]
   b576a:	6850      	ldr	r0, [r2, #4]
   b576c:	685b      	ldr	r3, [r3, #4]
}
   b576e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b5772:	220a      	movs	r2, #10
   b5774:	2100      	movs	r1, #0
   b5776:	4418      	add	r0, r3
   b5778:	f003 b9c2 	b.w	b8b00 <strtol>
        const char* const s = d_->json + t_->start;
   b577c:	6822      	ldr	r2, [r4, #0]
   b577e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b5780:	6852      	ldr	r2, [r2, #4]
   b5782:	685b      	ldr	r3, [r3, #4]
   b5784:	5cd0      	ldrb	r0, [r2, r3]
   b5786:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b578a:	4258      	negs	r0, r3
   b578c:	4158      	adcs	r0, r3
}
   b578e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5790:	2000      	movs	r0, #0
   b5792:	e7fc      	b.n	b578e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b5794 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b5794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5798:	b086      	sub	sp, #24
   b579a:	4607      	mov	r7, r0
   b579c:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   b579e:	a802      	add	r0, sp, #8
   b57a0:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   b57a2:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b57a4:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   b57a6:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b57a8:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   b57aa:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   b57ac:	f7ff fc7c 	bl	b50a8 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   b57b0:	e9cd 4400 	strd	r4, r4, [sp]
   b57b4:	4623      	mov	r3, r4
   b57b6:	4642      	mov	r2, r8
   b57b8:	4639      	mov	r1, r7
   b57ba:	a802      	add	r0, sp, #8
   b57bc:	f7ff fc9c 	bl	b50f8 <jsmn_parse>
    if (n <= 0) {
   b57c0:	1e06      	subs	r6, r0, #0
   b57c2:	dd24      	ble.n	b580e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7a>
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   b57c4:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
   b57c8:	4912      	ldr	r1, [pc, #72]	; (b5814 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x80>)
   b57ca:	bfb4      	ite	lt
   b57cc:	0130      	lsllt	r0, r6, #4
   b57ce:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   b57d2:	f002 ff13 	bl	b85fc <_ZnajRKSt9nothrow_t>
    if (!t) {
   b57d6:	4605      	mov	r5, r0
   b57d8:	b198      	cbz	r0, b5802 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
    jsmn_init(&parser, nullptr); // Reset parser
   b57da:	2100      	movs	r1, #0
   b57dc:	a802      	add	r0, sp, #8
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   b57de:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   b57e0:	f7ff fc62 	bl	b50a8 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   b57e4:	e9cd 6400 	strd	r6, r4, [sp]
   b57e8:	462b      	mov	r3, r5
   b57ea:	4642      	mov	r2, r8
   b57ec:	4639      	mov	r1, r7
   b57ee:	a802      	add	r0, sp, #8
   b57f0:	f7ff fc82 	bl	b50f8 <jsmn_parse>
   b57f4:	42a0      	cmp	r0, r4
   b57f6:	dd07      	ble.n	b5808 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>
    *tokens = t.release();
   b57f8:	f8ca 5000 	str.w	r5, [sl]
    return true;
   b57fc:	2001      	movs	r0, #1
    *count = n;
   b57fe:	f8c9 6000 	str.w	r6, [r9]
}
   b5802:	b006      	add	sp, #24
   b5804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
	{
	  static_assert(sizeof(_Tp)>0,
			"can't delete pointer to incomplete type");
	  delete [] __ptr;
   b5808:	4628      	mov	r0, r5
   b580a:	f7fe fc46 	bl	b409a <_ZdaPv>
	}
   b580e:	4620      	mov	r0, r4
   b5810:	e7f7      	b.n	b5802 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
   b5812:	bf00      	nop
   b5814:	000b931c 	.word	0x000b931c

000b5818 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b5818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   b581c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   b581e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   b5820:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b5822:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   b5824:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b5826:	4607      	mov	r7, r0
    const char *s = s1;
   b5828:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   b582a:	4619      	mov	r1, r3
                    *str = 0x0d;
   b582c:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   b5830:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   b5834:	42b4      	cmp	r4, r6
   b5836:	d063      	beq.n	b5900 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
            ++s;
   b5838:	4625      	mov	r5, r4
        if (*s == '\\') {
   b583a:	f815 2b01 	ldrb.w	r2, [r5], #1
   b583e:	2a5c      	cmp	r2, #92	; 0x5c
   b5840:	d12b      	bne.n	b589a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   b5842:	42a1      	cmp	r1, r4
   b5844:	d007      	beq.n	b5856 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   b5846:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   b584a:	4618      	mov	r0, r3
   b584c:	465a      	mov	r2, fp
   b584e:	f003 f81f 	bl	b8890 <memmove>
   b5852:	4603      	mov	r3, r0
                str += n;
   b5854:	445b      	add	r3, fp
            if (s == end) {
   b5856:	42b5      	cmp	r5, r6
   b5858:	d039      	beq.n	b58ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   b585a:	7862      	ldrb	r2, [r4, #1]
   b585c:	2a75      	cmp	r2, #117	; 0x75
   b585e:	d12a      	bne.n	b58b6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   b5860:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   b5862:	1ab2      	subs	r2, r6, r2
   b5864:	2a03      	cmp	r2, #3
   b5866:	dd32      	ble.n	b58ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   b5868:	1da0      	adds	r0, r4, #6
   b586a:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   b586e:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   b5872:	45ae      	cmp	lr, r5
   b5874:	d053      	beq.n	b591e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   b5876:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   b587a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   b587e:	fa5f fb82 	uxtb.w	fp, r2
   b5882:	f1bb 0f09 	cmp.w	fp, #9
   b5886:	d905      	bls.n	b5894 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   b5888:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   b588c:	2a05      	cmp	r2, #5
   b588e:	d807      	bhi.n	b58a0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   b5890:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   b5894:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   b5898:	e7eb      	b.n	b5872 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
            ++s;
   b589a:	4628      	mov	r0, r5
   b589c:	4604      	mov	r4, r0
   b589e:	e7c9      	b.n	b5834 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   b58a0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   b58a4:	2a05      	cmp	r2, #5
   b58a6:	d812      	bhi.n	b58ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   b58a8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   b58ac:	e7f2      	b.n	b5894 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   b58ae:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   b58b2:	4601      	mov	r1, r0
   b58b4:	e7f2      	b.n	b589c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   b58b6:	2a6e      	cmp	r2, #110	; 0x6e
   b58b8:	d01c      	beq.n	b58f4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   b58ba:	d80e      	bhi.n	b58da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   b58bc:	2a62      	cmp	r2, #98	; 0x62
   b58be:	d013      	beq.n	b58e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   b58c0:	d807      	bhi.n	b58d2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   b58c2:	2a2f      	cmp	r2, #47	; 0x2f
   b58c4:	d011      	beq.n	b58ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   b58c6:	2a5c      	cmp	r2, #92	; 0x5c
   b58c8:	d00f      	beq.n	b58ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   b58ca:	2a22      	cmp	r2, #34	; 0x22
   b58cc:	d00d      	beq.n	b58ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   b58ce:	2000      	movs	r0, #0
   b58d0:	e023      	b.n	b591a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   b58d2:	2a66      	cmp	r2, #102	; 0x66
   b58d4:	d1fb      	bne.n	b58ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   b58d6:	220c      	movs	r2, #12
   b58d8:	e007      	b.n	b58ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   b58da:	2a72      	cmp	r2, #114	; 0x72
   b58dc:	d00d      	beq.n	b58fa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   b58de:	2a74      	cmp	r2, #116	; 0x74
   b58e0:	d1f5      	bne.n	b58ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   b58e2:	f883 a000 	strb.w	sl, [r3]
                    break;
   b58e6:	e001      	b.n	b58ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   b58e8:	2208      	movs	r2, #8
   b58ea:	701a      	strb	r2, [r3, #0]
                ++s;
   b58ec:	1ca1      	adds	r1, r4, #2
                ++str;
   b58ee:	3301      	adds	r3, #1
                ++s;
   b58f0:	4608      	mov	r0, r1
   b58f2:	e7d3      	b.n	b589c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   b58f4:	f04f 020a 	mov.w	r2, #10
   b58f8:	e7f7      	b.n	b58ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   b58fa:	f883 9000 	strb.w	r9, [r3]
                    break;
   b58fe:	e7f5      	b.n	b58ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   b5900:	42a1      	cmp	r1, r4
   b5902:	d006      	beq.n	b5912 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   b5904:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   b5906:	4618      	mov	r0, r3
   b5908:	4622      	mov	r2, r4
   b590a:	f002 ffc1 	bl	b8890 <memmove>
   b590e:	4603      	mov	r3, r0
        str += n;
   b5910:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   b5912:	eba3 0308 	sub.w	r3, r3, r8
   b5916:	60bb      	str	r3, [r7, #8]
    return true;
   b5918:	2001      	movs	r0, #1
}
   b591a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   b591e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   b5922:	d9c4      	bls.n	b58ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   b5924:	4621      	mov	r1, r4
   b5926:	e7b9      	b.n	b589c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000b5928 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   b5928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b592a:	4604      	mov	r4, r0
   b592c:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   b592e:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   b5932:	2700      	movs	r7, #0
    while (t != end) {
   b5934:	42b4      	cmp	r4, r6
   b5936:	d010      	beq.n	b595a <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   b5938:	7823      	ldrb	r3, [r4, #0]
   b593a:	2b03      	cmp	r3, #3
   b593c:	d108      	bne.n	b5950 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   b593e:	4629      	mov	r1, r5
   b5940:	4620      	mov	r0, r4
   b5942:	f7ff ff69 	bl	b5818 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   b5946:	b148      	cbz	r0, b595c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   b5948:	68a3      	ldr	r3, [r4, #8]
   b594a:	54ef      	strb	r7, [r5, r3]
        ++t;
   b594c:	3410      	adds	r4, #16
    while (t != end) {
   b594e:	e7f1      	b.n	b5934 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   b5950:	2b00      	cmp	r3, #0
   b5952:	d1fb      	bne.n	b594c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   b5954:	68a2      	ldr	r2, [r4, #8]
   b5956:	54ab      	strb	r3, [r5, r2]
   b5958:	e7f8      	b.n	b594c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   b595a:	2001      	movs	r0, #1
}
   b595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5960 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5960:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5962:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5964:	e9c0 3300 	strd	r3, r3, [r0]
   b5968:	4604      	mov	r4, r0
        n_(0) {
   b596a:	480e      	ldr	r0, [pc, #56]	; (b59a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b596c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5970:	b1a9      	cbz	r1, b599e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5972:	780b      	ldrb	r3, [r1, #0]
   b5974:	2b03      	cmp	r3, #3
   b5976:	d006      	beq.n	b5986 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5978:	b98b      	cbnz	r3, b599e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b597a:	6813      	ldr	r3, [r2, #0]
   b597c:	6858      	ldr	r0, [r3, #4]
   b597e:	684b      	ldr	r3, [r1, #4]
   b5980:	5cc3      	ldrb	r3, [r0, r3]
   b5982:	2b6e      	cmp	r3, #110	; 0x6e
   b5984:	d007      	beq.n	b5996 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b5986:	6813      	ldr	r3, [r2, #0]
   b5988:	684d      	ldr	r5, [r1, #4]
   b598a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b598c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b598e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5990:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b5992:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5994:	60e3      	str	r3, [r4, #12]
   b5996:	4611      	mov	r1, r2
   b5998:	4620      	mov	r0, r4
   b599a:	f7ff fe86 	bl	b56aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b599e:	4620      	mov	r0, r4
   b59a0:	bd38      	pop	{r3, r4, r5, pc}
   b59a2:	bf00      	nop
   b59a4:	000b907e 	.word	0x000b907e

000b59a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b59a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b59aa:	2500      	movs	r5, #0
   b59ac:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b59ae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b59b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b59b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b59ba:	4604      	mov	r4, r0
   b59bc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b59be:	b14b      	cbz	r3, b59d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b59c0:	781a      	ldrb	r2, [r3, #0]
   b59c2:	2a01      	cmp	r2, #1
   b59c4:	d106      	bne.n	b59d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b59c6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b59ca:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b59cc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b59ce:	6143      	str	r3, [r0, #20]
   b59d0:	f7ff fe6b 	bl	b56aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b59d4:	4620      	mov	r0, r4
   b59d6:	bd38      	pop	{r3, r4, r5, pc}

000b59d8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b59d8:	b510      	push	{r4, lr}
    if (!n_) {
   b59da:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b59dc:	4604      	mov	r4, r0
    if (!n_) {
   b59de:	b163      	cbz	r3, b59fa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b59e0:	6880      	ldr	r0, [r0, #8]
   b59e2:	60e0      	str	r0, [r4, #12]
    --n_;
   b59e4:	3b01      	subs	r3, #1
    ++t_;
   b59e6:	3010      	adds	r0, #16
   b59e8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b59ea:	6120      	str	r0, [r4, #16]
    --n_;
   b59ec:	6163      	str	r3, [r4, #20]
    if (n_) {
   b59ee:	b113      	cbz	r3, b59f6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b59f0:	f7ff fdd6 	bl	b55a0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b59f4:	60a0      	str	r0, [r4, #8]
    return true;
   b59f6:	2001      	movs	r0, #1
   b59f8:	e000      	b.n	b59fc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b59fa:	4618      	mov	r0, r3
}
   b59fc:	bd10      	pop	{r4, pc}

000b59fe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b59fe:	b510      	push	{r4, lr}
    write('}');
   b5a00:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5a02:	4604      	mov	r4, r0
    write('}');
   b5a04:	f7ff fe63 	bl	b56ce <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b5a08:	2301      	movs	r3, #1
   b5a0a:	7123      	strb	r3, [r4, #4]
}
   b5a0c:	4620      	mov	r0, r4
   b5a0e:	bd10      	pop	{r4, pc}

000b5a10 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b5a10:	b508      	push	{r3, lr}
    switch (state_) {
   b5a12:	7903      	ldrb	r3, [r0, #4]
   b5a14:	2b01      	cmp	r3, #1
   b5a16:	d002      	beq.n	b5a1e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b5a18:	2b02      	cmp	r3, #2
   b5a1a:	d004      	beq.n	b5a26 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b5a1c:	bd08      	pop	{r3, pc}
        write(',');
   b5a1e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b5a20:	f7ff fe55 	bl	b56ce <_ZN5spark10JSONWriter5writeEc>
}
   b5a24:	e7fa      	b.n	b5a1c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b5a26:	213a      	movs	r1, #58	; 0x3a
   b5a28:	e7fa      	b.n	b5a20 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b5a2a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b5a2a:	b510      	push	{r4, lr}
   b5a2c:	4604      	mov	r4, r0
    writeSeparator();
   b5a2e:	f7ff ffef 	bl	b5a10 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b5a32:	4620      	mov	r0, r4
   b5a34:	217b      	movs	r1, #123	; 0x7b
   b5a36:	f7ff fe4a 	bl	b56ce <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b5a3a:	2300      	movs	r3, #0
   b5a3c:	7123      	strb	r3, [r4, #4]
}
   b5a3e:	4620      	mov	r0, r4
   b5a40:	bd10      	pop	{r4, pc}
	...

000b5a44 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b5a44:	b513      	push	{r0, r1, r4, lr}
   b5a46:	4604      	mov	r4, r0
   b5a48:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5a4a:	f7ff ffe1 	bl	b5a10 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b5a4e:	6823      	ldr	r3, [r4, #0]
   b5a50:	9a01      	ldr	r2, [sp, #4]
   b5a52:	68db      	ldr	r3, [r3, #12]
   b5a54:	4903      	ldr	r1, [pc, #12]	; (b5a64 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b5a56:	4620      	mov	r0, r4
   b5a58:	4798      	blx	r3
    state_ = NEXT;
   b5a5a:	2301      	movs	r3, #1
}
   b5a5c:	4620      	mov	r0, r4
    state_ = NEXT;
   b5a5e:	7123      	strb	r3, [r4, #4]
}
   b5a60:	b002      	add	sp, #8
   b5a62:	bd10      	pop	{r4, pc}
   b5a64:	000b8fa0 	.word	0x000b8fa0

000b5a68 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b5a68:	b513      	push	{r0, r1, r4, lr}
   b5a6a:	4604      	mov	r4, r0
   b5a6c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5a6e:	f7ff ffcf 	bl	b5a10 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5a72:	6823      	ldr	r3, [r4, #0]
   b5a74:	9a01      	ldr	r2, [sp, #4]
   b5a76:	68db      	ldr	r3, [r3, #12]
   b5a78:	4903      	ldr	r1, [pc, #12]	; (b5a88 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5a7a:	4620      	mov	r0, r4
   b5a7c:	4798      	blx	r3
    state_ = NEXT;
   b5a7e:	2301      	movs	r3, #1
}
   b5a80:	4620      	mov	r0, r4
    state_ = NEXT;
   b5a82:	7123      	strb	r3, [r4, #4]
}
   b5a84:	b002      	add	sp, #8
   b5a86:	bd10      	pop	{r4, pc}
   b5a88:	000b8c2b 	.word	0x000b8c2b

000b5a8c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5a90:	460d      	mov	r5, r1
    write('"');
   b5a92:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5a94:	4690      	mov	r8, r2
   b5a96:	4604      	mov	r4, r0
    write('"');
   b5a98:	f7ff fe19 	bl	b56ce <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5a9c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5b44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5aa0:	44a8      	add	r8, r5
    const char *s = str;
   b5aa2:	462f      	mov	r7, r5
    while (s != end) {
   b5aa4:	4547      	cmp	r7, r8
   b5aa6:	46ba      	mov	sl, r7
   b5aa8:	d03d      	beq.n	b5b26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5aaa:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5aae:	2e22      	cmp	r6, #34	; 0x22
   b5ab0:	d006      	beq.n	b5ac0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5ab2:	2e5c      	cmp	r6, #92	; 0x5c
   b5ab4:	d004      	beq.n	b5ac0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5ab6:	4630      	mov	r0, r6
   b5ab8:	f002 fec4 	bl	b8844 <isprint>
   b5abc:	2800      	cmp	r0, #0
   b5abe:	d1f1      	bne.n	b5aa4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5ac0:	6823      	ldr	r3, [r4, #0]
   b5ac2:	ebaa 0205 	sub.w	r2, sl, r5
   b5ac6:	689b      	ldr	r3, [r3, #8]
   b5ac8:	4629      	mov	r1, r5
   b5aca:	4620      	mov	r0, r4
   b5acc:	4798      	blx	r3
            write('\\');
   b5ace:	215c      	movs	r1, #92	; 0x5c
   b5ad0:	4620      	mov	r0, r4
   b5ad2:	f7ff fdfc 	bl	b56ce <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b5ad6:	2e0d      	cmp	r6, #13
   b5ad8:	d80a      	bhi.n	b5af0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5ada:	2e07      	cmp	r6, #7
   b5adc:	d91c      	bls.n	b5b18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5ade:	f1a6 0308 	sub.w	r3, r6, #8
   b5ae2:	2b05      	cmp	r3, #5
   b5ae4:	d818      	bhi.n	b5b18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5ae6:	e8df f003 	tbb	[pc, r3]
   b5aea:	0f0d      	.short	0x0f0d
   b5aec:	15131711 	.word	0x15131711
   b5af0:	2e22      	cmp	r6, #34	; 0x22
   b5af2:	d001      	beq.n	b5af8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5af4:	2e5c      	cmp	r6, #92	; 0x5c
   b5af6:	d10f      	bne.n	b5b18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5af8:	4631      	mov	r1, r6
                write('b');
   b5afa:	4620      	mov	r0, r4
   b5afc:	f7ff fde7 	bl	b56ce <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5b00:	463d      	mov	r5, r7
    while (s != end) {
   b5b02:	e7cf      	b.n	b5aa4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5b04:	2162      	movs	r1, #98	; 0x62
   b5b06:	e7f8      	b.n	b5afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5b08:	2174      	movs	r1, #116	; 0x74
   b5b0a:	e7f6      	b.n	b5afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5b0c:	216e      	movs	r1, #110	; 0x6e
   b5b0e:	e7f4      	b.n	b5afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5b10:	2166      	movs	r1, #102	; 0x66
   b5b12:	e7f2      	b.n	b5afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5b14:	2172      	movs	r1, #114	; 0x72
   b5b16:	e7f0      	b.n	b5afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5b18:	6823      	ldr	r3, [r4, #0]
   b5b1a:	4632      	mov	r2, r6
   b5b1c:	68db      	ldr	r3, [r3, #12]
   b5b1e:	4649      	mov	r1, r9
   b5b20:	4620      	mov	r0, r4
   b5b22:	4798      	blx	r3
                break;
   b5b24:	e7ec      	b.n	b5b00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b5b26:	42bd      	cmp	r5, r7
   b5b28:	d005      	beq.n	b5b36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b5b2a:	6823      	ldr	r3, [r4, #0]
   b5b2c:	1b7a      	subs	r2, r7, r5
   b5b2e:	689b      	ldr	r3, [r3, #8]
   b5b30:	4629      	mov	r1, r5
   b5b32:	4620      	mov	r0, r4
   b5b34:	4798      	blx	r3
    }
    write('"');
   b5b36:	2122      	movs	r1, #34	; 0x22
   b5b38:	4620      	mov	r0, r4
   b5b3a:	f7ff fdc8 	bl	b56ce <_ZN5spark10JSONWriter5writeEc>
}
   b5b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5b42:	bf00      	nop
   b5b44:	000b8fa3 	.word	0x000b8fa3

000b5b48 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5b48:	b513      	push	{r0, r1, r4, lr}
   b5b4a:	4604      	mov	r4, r0
   b5b4c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5b50:	f7ff ff5e 	bl	b5a10 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5b54:	4620      	mov	r0, r4
   b5b56:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5b5a:	f7ff ff97 	bl	b5a8c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b5b5e:	2302      	movs	r3, #2
}
   b5b60:	4620      	mov	r0, r4
    state_ = VALUE;
   b5b62:	7123      	strb	r3, [r4, #4]
}
   b5b64:	b002      	add	sp, #8
   b5b66:	bd10      	pop	{r4, pc}

000b5b68 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5b68:	b513      	push	{r0, r1, r4, lr}
   b5b6a:	4604      	mov	r4, r0
   b5b6c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5b70:	f7ff ff4e 	bl	b5a10 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5b74:	4620      	mov	r0, r4
   b5b76:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5b7a:	f7ff ff87 	bl	b5a8c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5b7e:	2301      	movs	r3, #1
}
   b5b80:	4620      	mov	r0, r4
    state_ = NEXT;
   b5b82:	7123      	strb	r3, [r4, #4]
}
   b5b84:	b002      	add	sp, #8
   b5b86:	bd10      	pop	{r4, pc}

000b5b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5b88:	b538      	push	{r3, r4, r5, lr}
   b5b8a:	2300      	movs	r3, #0
   b5b8c:	4604      	mov	r4, r0
   b5b8e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b90:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5b92:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b94:	f7fe fa7d 	bl	b4092 <_Znwj>
   b5b98:	b128      	cbz	r0, b5ba6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5b9a:	2301      	movs	r3, #1
   b5b9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5ba0:	4b02      	ldr	r3, [pc, #8]	; (b5bac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   b5ba2:	6003      	str	r3, [r0, #0]
   b5ba4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5ba6:	6020      	str	r0, [r4, #0]
	}
   b5ba8:	4620      	mov	r0, r4
   b5baa:	bd38      	pop	{r3, r4, r5, pc}
   b5bac:	000b8fb4 	.word	0x000b8fb4

000b5bb0 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   b5bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5bb2:	4604      	mov	r4, r0
   b5bb4:	b087      	sub	sp, #28
   b5bb6:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   b5bb8:	200c      	movs	r0, #12
   b5bba:	4927      	ldr	r1, [pc, #156]	; (b5c58 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   b5bbc:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   b5bbe:	f002 fd1b 	bl	b85f8 <_ZnwjRKSt9nothrow_t>
   b5bc2:	4601      	mov	r1, r0
   b5bc4:	b118      	cbz	r0, b5bce <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   b5bc6:	2300      	movs	r3, #0
   b5bc8:	e9c0 3300 	strd	r3, r3, [r0]
   b5bcc:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   b5bce:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5bd0:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   b5bd2:	f7ff ffd9 	bl	b5b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
   b5bd6:	9a02      	ldr	r2, [sp, #8]
    if (!d) {
   b5bd8:	b942      	cbnz	r2, b5bec <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   b5bda:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   b5bde:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   b5be0:	a803      	add	r0, sp, #12
   b5be2:	f7fe fe06 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5be6:	4620      	mov	r0, r4
   b5be8:	b007      	add	sp, #28
   b5bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   b5bec:	2300      	movs	r3, #0
   b5bee:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   b5bf0:	4629      	mov	r1, r5
   b5bf2:	ab01      	add	r3, sp, #4
   b5bf4:	4630      	mov	r0, r6
   b5bf6:	f7ff fdcd 	bl	b5794 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   b5bfa:	b918      	cbnz	r0, b5c04 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   b5bfc:	e9c4 0000 	strd	r0, r0, [r4]
   b5c00:	60a0      	str	r0, [r4, #8]
}
   b5c02:	e7ed      	b.n	b5be0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   b5c04:	4914      	ldr	r1, [pc, #80]	; (b5c58 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return _M_ptr; }
   b5c06:	9f02      	ldr	r7, [sp, #8]
   b5c08:	1c68      	adds	r0, r5, #1
   b5c0a:	f002 fcf7 	bl	b85fc <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   b5c0e:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   b5c10:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   b5c12:	6858      	ldr	r0, [r3, #4]
   b5c14:	2800      	cmp	r0, #0
   b5c16:	d0f1      	beq.n	b5bfc <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   b5c18:	462a      	mov	r2, r5
   b5c1a:	4631      	mov	r1, r6
   b5c1c:	f002 fe2a 	bl	b8874 <memcpy>
   b5c20:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   b5c22:	9901      	ldr	r1, [sp, #4]
   b5c24:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   b5c26:	2201      	movs	r2, #1
   b5c28:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   b5c2a:	685a      	ldr	r2, [r3, #4]
   b5c2c:	f7ff fe7c 	bl	b5928 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   b5c30:	2800      	cmp	r0, #0
   b5c32:	d0e3      	beq.n	b5bfc <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   b5c34:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   b5c36:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5c38:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   b5c3a:	9b03      	ldr	r3, [sp, #12]
   b5c3c:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   b5c3e:	b113      	cbz	r3, b5c46 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   b5c40:	685a      	ldr	r2, [r3, #4]
   b5c42:	3201      	adds	r2, #1
   b5c44:	605a      	str	r2, [r3, #4]
   b5c46:	aa04      	add	r2, sp, #16
   b5c48:	4620      	mov	r0, r4
   b5c4a:	f7ff fd4c 	bl	b56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5c4e:	a805      	add	r0, sp, #20
   b5c50:	f7fe fdcf 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5c54:	e7c4      	b.n	b5be0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   b5c56:	bf00      	nop
   b5c58:	000b931c 	.word	0x000b931c

000b5c5c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c5c:	7441      	strb	r1, [r0, #17]
}
   b5c5e:	4770      	bx	lr

000b5c60 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c60:	4770      	bx	lr

000b5c62 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5c62:	4770      	bx	lr

000b5c64 <_ZN9USBSerial4readEv>:
{
   b5c64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5c66:	2100      	movs	r1, #0
   b5c68:	7c00      	ldrb	r0, [r0, #16]
   b5c6a:	f7ff f8e3 	bl	b4e34 <HAL_USB_USART_Receive_Data>
}
   b5c6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c72:	bd08      	pop	{r3, pc}

000b5c74 <_ZN9USBSerial4peekEv>:
{
   b5c74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5c76:	2101      	movs	r1, #1
   b5c78:	7c00      	ldrb	r0, [r0, #16]
   b5c7a:	f7ff f8db 	bl	b4e34 <HAL_USB_USART_Receive_Data>
}
   b5c7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c82:	bd08      	pop	{r3, pc}

000b5c84 <_ZN9USBSerial17availableForWriteEv>:
{
   b5c84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5c86:	7c00      	ldrb	r0, [r0, #16]
   b5c88:	f7ff f8cc 	bl	b4e24 <HAL_USB_USART_Available_Data_For_Write>
}
   b5c8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c90:	bd08      	pop	{r3, pc}

000b5c92 <_ZN9USBSerial9availableEv>:
{
   b5c92:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5c94:	7c00      	ldrb	r0, [r0, #16]
   b5c96:	f7ff f8bd 	bl	b4e14 <HAL_USB_USART_Available_Data>
}
   b5c9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c9e:	bd08      	pop	{r3, pc}

000b5ca0 <_ZN9USBSerial5writeEh>:
{
   b5ca0:	b513      	push	{r0, r1, r4, lr}
   b5ca2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5ca4:	7c00      	ldrb	r0, [r0, #16]
{
   b5ca6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5ca8:	f7ff f8bc 	bl	b4e24 <HAL_USB_USART_Available_Data_For_Write>
   b5cac:	2800      	cmp	r0, #0
   b5cae:	9901      	ldr	r1, [sp, #4]
   b5cb0:	dc01      	bgt.n	b5cb6 <_ZN9USBSerial5writeEh+0x16>
   b5cb2:	7c60      	ldrb	r0, [r4, #17]
   b5cb4:	b120      	cbz	r0, b5cc0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5cb6:	7c20      	ldrb	r0, [r4, #16]
   b5cb8:	f7ff f8c4 	bl	b4e44 <HAL_USB_USART_Send_Data>
   b5cbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5cc0:	b002      	add	sp, #8
   b5cc2:	bd10      	pop	{r4, pc}

000b5cc4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5cc4:	7c00      	ldrb	r0, [r0, #16]
   b5cc6:	f7ff b8c5 	b.w	b4e54 <HAL_USB_USART_Flush_Data>

000b5cca <_ZN9USBSerialD0Ev>:
   b5cca:	b510      	push	{r4, lr}
   b5ccc:	2114      	movs	r1, #20
   b5cce:	4604      	mov	r4, r0
   b5cd0:	f7fe f9e5 	bl	b409e <_ZdlPvj>
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	bd10      	pop	{r4, pc}

000b5cd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5cd8:	b510      	push	{r4, lr}
   b5cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5cde:	4604      	mov	r4, r0
   b5ce0:	4608      	mov	r0, r1
   b5ce2:	2100      	movs	r1, #0
   b5ce4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5ce8:	4b04      	ldr	r3, [pc, #16]	; (b5cfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5cea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5cec:	2301      	movs	r3, #1
  _serial = serial;
   b5cee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5cf0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5cf2:	4611      	mov	r1, r2
   b5cf4:	f7ff f876 	bl	b4de4 <HAL_USB_USART_Init>
}
   b5cf8:	4620      	mov	r0, r4
   b5cfa:	bd10      	pop	{r4, pc}
   b5cfc:	000b8fd0 	.word	0x000b8fd0

000b5d00 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5d00:	7c00      	ldrb	r0, [r0, #16]
   b5d02:	2200      	movs	r2, #0
   b5d04:	f7ff b876 	b.w	b4df4 <HAL_USB_USART_Begin>

000b5d08 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b5d08:	7c00      	ldrb	r0, [r0, #16]
   b5d0a:	f7ff b87b 	b.w	b4e04 <HAL_USB_USART_End>

000b5d0e <_Z19acquireSerialBufferv>:
{
   b5d0e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5d10:	2214      	movs	r2, #20
{
   b5d12:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5d14:	2100      	movs	r1, #0
   b5d16:	f002 fdd5 	bl	b88c4 <memset>
}
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	bd10      	pop	{r4, pc}
	...

000b5d20 <_Z16_fetch_usbserialv>:
{
   b5d20:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d22:	4c0f      	ldr	r4, [pc, #60]	; (b5d60 <_Z16_fetch_usbserialv+0x40>)
{
   b5d24:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5d26:	a803      	add	r0, sp, #12
   b5d28:	f7ff fff1 	bl	b5d0e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d2c:	7821      	ldrb	r1, [r4, #0]
   b5d2e:	f3bf 8f5b 	dmb	ish
   b5d32:	f011 0101 	ands.w	r1, r1, #1
   b5d36:	d10f      	bne.n	b5d58 <_Z16_fetch_usbserialv+0x38>
   b5d38:	4620      	mov	r0, r4
   b5d3a:	9101      	str	r1, [sp, #4]
   b5d3c:	f7fe f9be 	bl	b40bc <__cxa_guard_acquire>
   b5d40:	9901      	ldr	r1, [sp, #4]
   b5d42:	b148      	cbz	r0, b5d58 <_Z16_fetch_usbserialv+0x38>
   b5d44:	aa03      	add	r2, sp, #12
   b5d46:	4807      	ldr	r0, [pc, #28]	; (b5d64 <_Z16_fetch_usbserialv+0x44>)
   b5d48:	f7ff ffc6 	bl	b5cd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	f7fe f9ba 	bl	b40c6 <__cxa_guard_release>
   b5d52:	4805      	ldr	r0, [pc, #20]	; (b5d68 <_Z16_fetch_usbserialv+0x48>)
   b5d54:	f002 fd70 	bl	b8838 <atexit>
	return _usbserial;
}
   b5d58:	4802      	ldr	r0, [pc, #8]	; (b5d64 <_Z16_fetch_usbserialv+0x44>)
   b5d5a:	b008      	add	sp, #32
   b5d5c:	bd10      	pop	{r4, pc}
   b5d5e:	bf00      	nop
   b5d60:	2003e6ac 	.word	0x2003e6ac
   b5d64:	2003e6b0 	.word	0x2003e6b0
   b5d68:	000b5c61 	.word	0x000b5c61

000b5d6c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b5d6c:	4770      	bx	lr

000b5d6e <_ZN9IPAddressD0Ev>:
   b5d6e:	b510      	push	{r4, lr}
   b5d70:	2118      	movs	r1, #24
   b5d72:	4604      	mov	r4, r0
   b5d74:	f7fe f993 	bl	b409e <_ZdlPvj>
   b5d78:	4620      	mov	r0, r4
   b5d7a:	bd10      	pop	{r4, pc}

000b5d7c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5d7e:	7d03      	ldrb	r3, [r0, #20]
   b5d80:	2b06      	cmp	r3, #6
{
   b5d82:	b08d      	sub	sp, #52	; 0x34
   b5d84:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5d86:	f100 0704 	add.w	r7, r0, #4
   b5d8a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5d8e:	d012      	beq.n	b5db6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5d90:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5d98:	220a      	movs	r2, #10
   b5d9a:	4630      	mov	r0, r6
   b5d9c:	f001 f8af 	bl	b6efe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5da0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5da2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5da4:	d019      	beq.n	b5dda <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5da6:	2c00      	cmp	r4, #0
   b5da8:	d0f4      	beq.n	b5d94 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5daa:	212e      	movs	r1, #46	; 0x2e
   b5dac:	4630      	mov	r0, r6
   b5dae:	f001 f897 	bl	b6ee0 <_ZN5Print5printEc>
   b5db2:	4404      	add	r4, r0
   b5db4:	e7ee      	b.n	b5d94 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5db6:	232f      	movs	r3, #47	; 0x2f
   b5db8:	466a      	mov	r2, sp
   b5dba:	4639      	mov	r1, r7
   b5dbc:	200a      	movs	r0, #10
		buf[0] = 0;
   b5dbe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5dc2:	f7ff f897 	bl	b4ef4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5dc6:	4668      	mov	r0, sp
   b5dc8:	f002 fddb 	bl	b8982 <strlen>
   b5dcc:	6833      	ldr	r3, [r6, #0]
   b5dce:	4602      	mov	r2, r0
   b5dd0:	68db      	ldr	r3, [r3, #12]
   b5dd2:	4669      	mov	r1, sp
   b5dd4:	4630      	mov	r0, r6
   b5dd6:	4798      	blx	r3
   b5dd8:	4604      	mov	r4, r0
    }
    return n;
}
   b5dda:	4620      	mov	r0, r4
   b5ddc:	b00d      	add	sp, #52	; 0x34
   b5dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5de0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5de0:	b510      	push	{r4, lr}
   b5de2:	4b05      	ldr	r3, [pc, #20]	; (b5df8 <_ZN9IPAddressC1Ev+0x18>)
   b5de4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5de6:	2211      	movs	r2, #17
   b5de8:	f840 3b04 	str.w	r3, [r0], #4
   b5dec:	2100      	movs	r1, #0
   b5dee:	f002 fd69 	bl	b88c4 <memset>
}
   b5df2:	4620      	mov	r0, r4
   b5df4:	bd10      	pop	{r4, pc}
   b5df6:	bf00      	nop
   b5df8:	000b9000 	.word	0x000b9000

000b5dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5dfc:	4603      	mov	r3, r0
   b5dfe:	4a07      	ldr	r2, [pc, #28]	; (b5e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5e00:	b510      	push	{r4, lr}
   b5e02:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5e06:	f101 0210 	add.w	r2, r1, #16
   b5e0a:	f851 4b04 	ldr.w	r4, [r1], #4
   b5e0e:	f843 4b04 	str.w	r4, [r3], #4
   b5e12:	4291      	cmp	r1, r2
   b5e14:	d1f9      	bne.n	b5e0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5e16:	780a      	ldrb	r2, [r1, #0]
   b5e18:	701a      	strb	r2, [r3, #0]
}
   b5e1a:	bd10      	pop	{r4, pc}
   b5e1c:	000b9000 	.word	0x000b9000

000b5e20 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5e20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5e22:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5e26:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5e2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5e2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5e32:	2304      	movs	r3, #4
   b5e34:	6041      	str	r1, [r0, #4]
   b5e36:	7503      	strb	r3, [r0, #20]
}
   b5e38:	bd10      	pop	{r4, pc}
	...

000b5e3c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5e3c:	b507      	push	{r0, r1, r2, lr}
   b5e3e:	4b06      	ldr	r3, [pc, #24]	; (b5e58 <_ZN9IPAddressC1EPKh+0x1c>)
   b5e40:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5e42:	78cb      	ldrb	r3, [r1, #3]
   b5e44:	9300      	str	r3, [sp, #0]
   b5e46:	788b      	ldrb	r3, [r1, #2]
   b5e48:	784a      	ldrb	r2, [r1, #1]
   b5e4a:	7809      	ldrb	r1, [r1, #0]
   b5e4c:	f7ff ffe8 	bl	b5e20 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5e50:	b003      	add	sp, #12
   b5e52:	f85d fb04 	ldr.w	pc, [sp], #4
   b5e56:	bf00      	nop
   b5e58:	000b9000 	.word	0x000b9000

000b5e5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5e5c:	b513      	push	{r0, r1, r4, lr}
   b5e5e:	460b      	mov	r3, r1
   b5e60:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e62:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5e66:	466c      	mov	r4, sp
   b5e68:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5e6c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5e70:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5e74:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5e78:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5e7c:	b002      	add	sp, #8
   b5e7e:	bd10      	pop	{r4, pc}

000b5e80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5e80:	4b01      	ldr	r3, [pc, #4]	; (b5e88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5e82:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5e84:	4770      	bx	lr
   b5e86:	bf00      	nop
   b5e88:	2003e59c 	.word	0x2003e59c

000b5e8c <serialEventRun>:
{
   b5e8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5e8e:	4b0b      	ldr	r3, [pc, #44]	; (b5ebc <serialEventRun+0x30>)
   b5e90:	b143      	cbz	r3, b5ea4 <serialEventRun+0x18>
   b5e92:	f7ff ff45 	bl	b5d20 <_Z16_fetch_usbserialv>
   b5e96:	6803      	ldr	r3, [r0, #0]
   b5e98:	691b      	ldr	r3, [r3, #16]
   b5e9a:	4798      	blx	r3
   b5e9c:	2800      	cmp	r0, #0
   b5e9e:	dd01      	ble.n	b5ea4 <serialEventRun+0x18>
        serialEvent();
   b5ea0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5ea4:	4b06      	ldr	r3, [pc, #24]	; (b5ec0 <serialEventRun+0x34>)
   b5ea6:	b143      	cbz	r3, b5eba <serialEventRun+0x2e>
   b5ea8:	f002 fb82 	bl	b85b0 <_Z22__fetch_global_Serial1v>
   b5eac:	6803      	ldr	r3, [r0, #0]
   b5eae:	691b      	ldr	r3, [r3, #16]
   b5eb0:	4798      	blx	r3
   b5eb2:	2800      	cmp	r0, #0
   b5eb4:	dd01      	ble.n	b5eba <serialEventRun+0x2e>
        serialEvent1();
   b5eb6:	f3af 8000 	nop.w
}
   b5eba:	bd08      	pop	{r3, pc}
	...

000b5ec4 <_post_loop>:
{
   b5ec4:	b508      	push	{r3, lr}
	serialEventRun();
   b5ec6:	f7ff ffe1 	bl	b5e8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5eca:	f7ff f8cd 	bl	b5068 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5ece:	4b01      	ldr	r3, [pc, #4]	; (b5ed4 <_post_loop+0x10>)
   b5ed0:	6018      	str	r0, [r3, #0]
}
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	2003e740 	.word	0x2003e740

000b5ed8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5ed8:	4805      	ldr	r0, [pc, #20]	; (b5ef0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5eda:	4a06      	ldr	r2, [pc, #24]	; (b5ef4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5edc:	4906      	ldr	r1, [pc, #24]	; (b5ef8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5ede:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5ee0:	1a12      	subs	r2, r2, r0
   b5ee2:	f002 fcc7 	bl	b8874 <memcpy>
    __backup_sram_signature = signature;
   b5ee6:	4b05      	ldr	r3, [pc, #20]	; (b5efc <_Z33system_initialize_user_backup_ramv+0x24>)
   b5ee8:	4a05      	ldr	r2, [pc, #20]	; (b5f00 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5eea:	601a      	str	r2, [r3, #0]
}
   b5eec:	bd08      	pop	{r3, pc}
   b5eee:	bf00      	nop
   b5ef0:	2003f400 	.word	0x2003f400
   b5ef4:	2003f404 	.word	0x2003f404
   b5ef8:	000b95f4 	.word	0x000b95f4
   b5efc:	2003f400 	.word	0x2003f400
   b5f00:	9a271c1e 	.word	0x9a271c1e

000b5f04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5f04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5f06:	2300      	movs	r3, #0
   b5f08:	9300      	str	r3, [sp, #0]
   b5f0a:	461a      	mov	r2, r3
   b5f0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5f10:	f7ff f98e 	bl	b5230 <system_ctrl_set_result>
}
   b5f14:	b003      	add	sp, #12
   b5f16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5f1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5f1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5f1e:	8843      	ldrh	r3, [r0, #2]
   b5f20:	2b0a      	cmp	r3, #10
   b5f22:	d008      	beq.n	b5f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5f24:	2b50      	cmp	r3, #80	; 0x50
   b5f26:	d10b      	bne.n	b5f40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5f28:	4b09      	ldr	r3, [pc, #36]	; (b5f50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5f2a:	681b      	ldr	r3, [r3, #0]
   b5f2c:	b14b      	cbz	r3, b5f42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5f2e:	b003      	add	sp, #12
   b5f30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5f34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5f36:	f7ff ffe5 	bl	b5f04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5f3a:	b003      	add	sp, #12
   b5f3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5f40:	2300      	movs	r3, #0
   b5f42:	9300      	str	r3, [sp, #0]
   b5f44:	461a      	mov	r2, r3
   b5f46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5f4a:	f7ff f971 	bl	b5230 <system_ctrl_set_result>
}
   b5f4e:	e7f4      	b.n	b5f3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5f50:	2003e6c8 	.word	0x2003e6c8

000b5f54 <module_user_init_hook>:
{
   b5f54:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5f56:	4812      	ldr	r0, [pc, #72]	; (b5fa0 <module_user_init_hook+0x4c>)
   b5f58:	2100      	movs	r1, #0
   b5f5a:	f7ff f9b3 	bl	b52c4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5f5e:	4b11      	ldr	r3, [pc, #68]	; (b5fa4 <module_user_init_hook+0x50>)
   b5f60:	681a      	ldr	r2, [r3, #0]
   b5f62:	4b11      	ldr	r3, [pc, #68]	; (b5fa8 <module_user_init_hook+0x54>)
   b5f64:	429a      	cmp	r2, r3
   b5f66:	4b11      	ldr	r3, [pc, #68]	; (b5fac <module_user_init_hook+0x58>)
   b5f68:	bf0c      	ite	eq
   b5f6a:	2201      	moveq	r2, #1
   b5f6c:	2200      	movne	r2, #0
   b5f6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5f70:	d001      	beq.n	b5f76 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5f72:	f7ff ffb1 	bl	b5ed8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5f76:	f7ff f867 	bl	b5048 <HAL_RNG_GetRandomNumber>
   b5f7a:	4604      	mov	r4, r0
    srand(seed);
   b5f7c:	f002 fcaa 	bl	b88d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5f80:	4b0b      	ldr	r3, [pc, #44]	; (b5fb0 <module_user_init_hook+0x5c>)
   b5f82:	b113      	cbz	r3, b5f8a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5f84:	4620      	mov	r0, r4
   b5f86:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5f8a:	2100      	movs	r1, #0
   b5f8c:	4808      	ldr	r0, [pc, #32]	; (b5fb0 <module_user_init_hook+0x5c>)
   b5f8e:	f7ff f8c5 	bl	b511c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5f96:	4807      	ldr	r0, [pc, #28]	; (b5fb4 <module_user_init_hook+0x60>)
   b5f98:	2100      	movs	r1, #0
   b5f9a:	f7ff b93f 	b.w	b521c <system_ctrl_set_app_request_handler>
   b5f9e:	bf00      	nop
   b5fa0:	000b5e81 	.word	0x000b5e81
   b5fa4:	2003f400 	.word	0x2003f400
   b5fa8:	9a271c1e 	.word	0x9a271c1e
   b5fac:	2003e6c4 	.word	0x2003e6c4
   b5fb0:	00000000 	.word	0x00000000
   b5fb4:	000b5f1d 	.word	0x000b5f1d

000b5fb8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5fb8:	4b01      	ldr	r3, [pc, #4]	; (b5fc0 <_GLOBAL__sub_I_RGB+0x8>)
   b5fba:	2200      	movs	r2, #0
   b5fbc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5fbe:	4770      	bx	lr
   b5fc0:	2003e6cc 	.word	0x2003e6cc

000b5fc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5fc4:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5fc6:	681a      	ldr	r2, [r3, #0]
   b5fc8:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5fca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5fcc:	4770      	bx	lr
   b5fce:	bf00      	nop
   b5fd0:	2003e590 	.word	0x2003e590
   b5fd4:	2003e6dc 	.word	0x2003e6dc

000b5fd8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5fd8:	6880      	ldr	r0, [r0, #8]
   b5fda:	6803      	ldr	r3, [r0, #0]
   b5fdc:	68db      	ldr	r3, [r3, #12]
   b5fde:	4718      	bx	r3

000b5fe0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5fe0:	4770      	bx	lr

000b5fe2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5fe2:	4608      	mov	r0, r1
   b5fe4:	b111      	cbz	r1, b5fec <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5fe6:	680b      	ldr	r3, [r1, #0]
   b5fe8:	685b      	ldr	r3, [r3, #4]
   b5fea:	4718      	bx	r3
}
   b5fec:	4770      	bx	lr

000b5fee <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5fee:	4770      	bx	lr

000b5ff0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5ff0:	4770      	bx	lr

000b5ff2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5ff2:	4770      	bx	lr

000b5ff4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5ff4:	4770      	bx	lr

000b5ff6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5ff6:	b538      	push	{r3, r4, r5, lr}
   b5ff8:	4604      	mov	r4, r0
   b5ffa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5ffc:	6800      	ldr	r0, [r0, #0]
   b5ffe:	212e      	movs	r1, #46	; 0x2e
   b6000:	f002 fca3 	bl	b894a <strchrnul>
    size = s - category;
   b6004:	6823      	ldr	r3, [r4, #0]
   b6006:	1ac3      	subs	r3, r0, r3
   b6008:	602b      	str	r3, [r5, #0]
    if (size) {
   b600a:	b123      	cbz	r3, b6016 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b600c:	7803      	ldrb	r3, [r0, #0]
   b600e:	b103      	cbz	r3, b6012 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6010:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b6012:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6014:	6020      	str	r0, [r4, #0]
}
   b6016:	4618      	mov	r0, r3
   b6018:	bd38      	pop	{r3, r4, r5, pc}

000b601a <_ZN5spark16JSONStreamWriterD0Ev>:
   b601a:	b510      	push	{r4, lr}
   b601c:	210c      	movs	r1, #12
   b601e:	4604      	mov	r4, r0
   b6020:	f7fe f83d 	bl	b409e <_ZdlPvj>
   b6024:	4620      	mov	r0, r4
   b6026:	bd10      	pop	{r4, pc}

000b6028 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6028:	b510      	push	{r4, lr}
   b602a:	2104      	movs	r1, #4
   b602c:	4604      	mov	r4, r0
   b602e:	f7fe f836 	bl	b409e <_ZdlPvj>
   b6032:	4620      	mov	r0, r4
   b6034:	bd10      	pop	{r4, pc}

000b6036 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6036:	b510      	push	{r4, lr}
   b6038:	2104      	movs	r1, #4
   b603a:	4604      	mov	r4, r0
   b603c:	f7fe f82f 	bl	b409e <_ZdlPvj>
   b6040:	4620      	mov	r0, r4
   b6042:	bd10      	pop	{r4, pc}

000b6044 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6044:	f7fe bf6e 	b.w	b4f24 <os_mutex_recursive_lock>

000b6048 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b6048:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b604a:	f002 fc88 	bl	b895e <strcmp>
}
   b604e:	fab0 f080 	clz	r0, r0
   b6052:	0940      	lsrs	r0, r0, #5
   b6054:	bd08      	pop	{r3, pc}

000b6056 <__tcf_1>:
   b6056:	4770      	bx	lr

000b6058 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6058:	b510      	push	{r4, lr}
   b605a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b605c:	f7ff fe60 	bl	b5d20 <_Z16_fetch_usbserialv>
   b6060:	4284      	cmp	r4, r0
   b6062:	d010      	beq.n	b6086 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b6064:	f002 faa4 	bl	b85b0 <_Z22__fetch_global_Serial1v>
   b6068:	4284      	cmp	r4, r0
   b606a:	d105      	bne.n	b6078 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b606c:	f002 faa0 	bl	b85b0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b6070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b6074:	f7ff ba81 	b.w	b557a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b6078:	b12c      	cbz	r4, b6086 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b607a:	6823      	ldr	r3, [r4, #0]
   b607c:	4620      	mov	r0, r4
   b607e:	685b      	ldr	r3, [r3, #4]
}
   b6080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6084:	4718      	bx	r3
   b6086:	bd10      	pop	{r4, pc}

000b6088 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b6088:	b513      	push	{r0, r1, r4, lr}
   b608a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b608c:	4608      	mov	r0, r1
   b608e:	9101      	str	r1, [sp, #4]
   b6090:	f002 fc77 	bl	b8982 <strlen>
   b6094:	9901      	ldr	r1, [sp, #4]
   b6096:	4602      	mov	r2, r0
   b6098:	4620      	mov	r0, r4
}
   b609a:	b002      	add	sp, #8
   b609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b60a0:	f7ff bd62 	b.w	b5b68 <_ZN5spark10JSONWriter5valueEPKcj>

000b60a4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b60a4:	b513      	push	{r0, r1, r4, lr}
   b60a6:	4604      	mov	r4, r0
    write(str, strlen(str));
   b60a8:	4608      	mov	r0, r1
   b60aa:	9101      	str	r1, [sp, #4]
   b60ac:	f002 fc69 	bl	b8982 <strlen>
   b60b0:	6823      	ldr	r3, [r4, #0]
   b60b2:	9901      	ldr	r1, [sp, #4]
   b60b4:	68db      	ldr	r3, [r3, #12]
   b60b6:	4602      	mov	r2, r0
   b60b8:	4620      	mov	r0, r4
}
   b60ba:	b002      	add	sp, #8
   b60bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b60c0:	4718      	bx	r3

000b60c2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b60c2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b60c4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b60c6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b60ca:	68db      	ldr	r3, [r3, #12]
   b60cc:	2201      	movs	r2, #1
   b60ce:	f10d 0107 	add.w	r1, sp, #7
   b60d2:	4798      	blx	r3
}
   b60d4:	b003      	add	sp, #12
   b60d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b60da <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b60da:	b40e      	push	{r1, r2, r3}
   b60dc:	b503      	push	{r0, r1, lr}
   b60de:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b60e0:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b60e2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b60e6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b60e8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b60ea:	f000 ff26 	bl	b6f3a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b60ee:	b002      	add	sp, #8
   b60f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b60f4:	b003      	add	sp, #12
   b60f6:	4770      	bx	lr

000b60f8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b60f8:	680a      	ldr	r2, [r1, #0]
   b60fa:	6002      	str	r2, [r0, #0]
   b60fc:	684a      	ldr	r2, [r1, #4]
   b60fe:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b6100:	2200      	movs	r2, #0
   b6102:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6106:	b510      	push	{r4, lr}
   b6108:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b610a:	688c      	ldr	r4, [r1, #8]
   b610c:	6084      	str	r4, [r0, #8]
   b610e:	68cc      	ldr	r4, [r1, #12]
   b6110:	60c4      	str	r4, [r0, #12]
   b6112:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6114:	608a      	str	r2, [r1, #8]
   b6116:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6118:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b611a:	610a      	str	r2, [r1, #16]
   b611c:	bd10      	pop	{r4, pc}
	...

000b6120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b6124:	e9d0 8400 	ldrd	r8, r4, [r0]
   b6128:	f04f 0a14 	mov.w	sl, #20
   b612c:	9300      	str	r3, [sp, #0]
   b612e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b6132:	4b18      	ldr	r3, [pc, #96]	; (b6194 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6134:	10a4      	asrs	r4, r4, #2
   b6136:	4617      	mov	r7, r2
   b6138:	435c      	muls	r4, r3
   b613a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b613c:	2c00      	cmp	r4, #0
   b613e:	dd21      	ble.n	b6184 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6140:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b6142:	fb0a f006 	mul.w	r0, sl, r6
   b6146:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b614a:	463a      	mov	r2, r7
   b614c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6150:	5828      	ldr	r0, [r5, r0]
   b6152:	9101      	str	r1, [sp, #4]
   b6154:	455f      	cmp	r7, fp
   b6156:	bf28      	it	cs
   b6158:	465a      	movcs	r2, fp
   b615a:	f002 fc1a 	bl	b8992 <strncmp>
                if (cmp == 0) {
   b615e:	2800      	cmp	r0, #0
   b6160:	9901      	ldr	r1, [sp, #4]
   b6162:	f04f 0301 	mov.w	r3, #1
   b6166:	d10b      	bne.n	b6180 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b6168:	455f      	cmp	r7, fp
   b616a:	d103      	bne.n	b6174 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b616c:	9a00      	ldr	r2, [sp, #0]
   b616e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6170:	4634      	mov	r4, r6
   b6172:	e7e3      	b.n	b613c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6174:	d9fc      	bls.n	b6170 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b6176:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b6178:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b617c:	3e01      	subs	r6, #1
   b617e:	e7f7      	b.n	b6170 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6180:	dbf9      	blt.n	b6176 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6182:	e7f5      	b.n	b6170 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6184:	eba5 0508 	sub.w	r5, r5, r8
}
   b6188:	4802      	ldr	r0, [pc, #8]	; (b6194 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b618a:	10ad      	asrs	r5, r5, #2
   b618c:	4368      	muls	r0, r5
   b618e:	b003      	add	sp, #12
   b6190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6194:	cccccccd 	.word	0xcccccccd

000b6198 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b619a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b619c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b619e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b61a0:	b303      	cbz	r3, b61e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b61a2:	b1f9      	cbz	r1, b61e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b61a4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b61a6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b61aa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b61ac:	a903      	add	r1, sp, #12
   b61ae:	a801      	add	r0, sp, #4
   b61b0:	f7ff ff21 	bl	b5ff6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b61b4:	4601      	mov	r1, r0
   b61b6:	b1a8      	cbz	r0, b61e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b61b8:	f10d 030b 	add.w	r3, sp, #11
   b61bc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b61be:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b61c2:	4620      	mov	r0, r4
   b61c4:	f7ff ffac 	bl	b6120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b61c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b61cc:	b153      	cbz	r3, b61e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b61ce:	6823      	ldr	r3, [r4, #0]
   b61d0:	2414      	movs	r4, #20
   b61d2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b61d6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b61d8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b61dc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b61de:	bfa8      	it	ge
   b61e0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b61e2:	e7e3      	b.n	b61ac <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b61e4:	4628      	mov	r0, r5
   b61e6:	b004      	add	sp, #16
   b61e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b61ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b61ec:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b61ee:	4c09      	ldr	r4, [pc, #36]	; (b6214 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b61f0:	7823      	ldrb	r3, [r4, #0]
   b61f2:	f3bf 8f5b 	dmb	ish
   b61f6:	07db      	lsls	r3, r3, #31
   b61f8:	d409      	bmi.n	b620e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b61fa:	4620      	mov	r0, r4
   b61fc:	f7fd ff5e 	bl	b40bc <__cxa_guard_acquire>
   b6200:	b128      	cbz	r0, b620e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6202:	4620      	mov	r0, r4
   b6204:	f7fd ff5f 	bl	b40c6 <__cxa_guard_release>
   b6208:	4803      	ldr	r0, [pc, #12]	; (b6218 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b620a:	f002 fb15 	bl	b8838 <atexit>
}
   b620e:	4803      	ldr	r0, [pc, #12]	; (b621c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6210:	bd10      	pop	{r4, pc}
   b6212:	bf00      	nop
   b6214:	2003e6e4 	.word	0x2003e6e4
   b6218:	000b5fef 	.word	0x000b5fef
   b621c:	2003e594 	.word	0x2003e594

000b6220 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6220:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6222:	4c09      	ldr	r4, [pc, #36]	; (b6248 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6224:	7823      	ldrb	r3, [r4, #0]
   b6226:	f3bf 8f5b 	dmb	ish
   b622a:	07db      	lsls	r3, r3, #31
   b622c:	d409      	bmi.n	b6242 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b622e:	4620      	mov	r0, r4
   b6230:	f7fd ff44 	bl	b40bc <__cxa_guard_acquire>
   b6234:	b128      	cbz	r0, b6242 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6236:	4620      	mov	r0, r4
   b6238:	f7fd ff45 	bl	b40c6 <__cxa_guard_release>
   b623c:	4803      	ldr	r0, [pc, #12]	; (b624c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b623e:	f002 fafb 	bl	b8838 <atexit>
    return &factory;
}
   b6242:	4803      	ldr	r0, [pc, #12]	; (b6250 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6244:	bd10      	pop	{r4, pc}
   b6246:	bf00      	nop
   b6248:	2003e6e8 	.word	0x2003e6e8
   b624c:	000b6057 	.word	0x000b6057
   b6250:	2003e598 	.word	0x2003e598

000b6254 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b6254:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6256:	2500      	movs	r5, #0
   b6258:	4604      	mov	r4, r0
   b625a:	e9c0 5500 	strd	r5, r5, [r0]
   b625e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6262:	6085      	str	r5, [r0, #8]
   b6264:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b6266:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b626a:	f7fe fe4b 	bl	b4f04 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b626e:	f7ff ffbd 	bl	b61ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b6272:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6274:	f7ff ffd4 	bl	b6220 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b6278:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b627a:	6220      	str	r0, [r4, #32]
}
   b627c:	4620      	mov	r0, r4
   b627e:	bd38      	pop	{r3, r4, r5, pc}

000b6280 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6280:	b510      	push	{r4, lr}
    static LogManager mgr;
   b6282:	4c0a      	ldr	r4, [pc, #40]	; (b62ac <_ZN5spark10LogManager8instanceEv+0x2c>)
   b6284:	7823      	ldrb	r3, [r4, #0]
   b6286:	f3bf 8f5b 	dmb	ish
   b628a:	07db      	lsls	r3, r3, #31
   b628c:	d40c      	bmi.n	b62a8 <_ZN5spark10LogManager8instanceEv+0x28>
   b628e:	4620      	mov	r0, r4
   b6290:	f7fd ff14 	bl	b40bc <__cxa_guard_acquire>
   b6294:	b140      	cbz	r0, b62a8 <_ZN5spark10LogManager8instanceEv+0x28>
   b6296:	4806      	ldr	r0, [pc, #24]	; (b62b0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6298:	f7ff ffdc 	bl	b6254 <_ZN5spark10LogManagerC1Ev>
   b629c:	4620      	mov	r0, r4
   b629e:	f7fd ff12 	bl	b40c6 <__cxa_guard_release>
   b62a2:	4804      	ldr	r0, [pc, #16]	; (b62b4 <_ZN5spark10LogManager8instanceEv+0x34>)
   b62a4:	f002 fac8 	bl	b8838 <atexit>
    return &mgr;
}
   b62a8:	4801      	ldr	r0, [pc, #4]	; (b62b0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b62aa:	bd10      	pop	{r4, pc}
   b62ac:	2003e6e0 	.word	0x2003e6e0
   b62b0:	2003e6f0 	.word	0x2003e6f0
   b62b4:	000b67b5 	.word	0x000b67b5

000b62b8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b62b8:	4a02      	ldr	r2, [pc, #8]	; (b62c4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b62ba:	4903      	ldr	r1, [pc, #12]	; (b62c8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b62bc:	4803      	ldr	r0, [pc, #12]	; (b62cc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b62be:	2300      	movs	r3, #0
   b62c0:	f7fe bf12 	b.w	b50e8 <log_set_callbacks>
   b62c4:	000b6599 	.word	0x000b6599
   b62c8:	000b6525 	.word	0x000b6525
   b62cc:	000b64a5 	.word	0x000b64a5

000b62d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b62d0:	2300      	movs	r3, #0
   b62d2:	461a      	mov	r2, r3
   b62d4:	4619      	mov	r1, r3
   b62d6:	4618      	mov	r0, r3
   b62d8:	f7fe bf06 	b.w	b50e8 <log_set_callbacks>

000b62dc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b62dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b62de:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b62e0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b62e2:	4668      	mov	r0, sp
   b62e4:	f7fe f8a0 	bl	b4428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b62e8:	466a      	mov	r2, sp
   b62ea:	4629      	mov	r1, r5
   b62ec:	4620      	mov	r0, r4
   b62ee:	f7ff fb5b 	bl	b59a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b62f2:	a801      	add	r0, sp, #4
   b62f4:	f7fe fa7d 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b62f8:	4620      	mov	r0, r4
   b62fa:	b003      	add	sp, #12
   b62fc:	bd30      	pop	{r4, r5, pc}
	...

000b6300 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b6300:	b570      	push	{r4, r5, r6, lr}
   b6302:	b08a      	sub	sp, #40	; 0x28
   b6304:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b6306:	4601      	mov	r1, r0
   b6308:	a804      	add	r0, sp, #16
   b630a:	f7ff ffe7 	bl	b62dc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b630e:	4e14      	ldr	r6, [pc, #80]	; (b6360 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b6310:	a804      	add	r0, sp, #16
   b6312:	f7ff fb61 	bl	b59d8 <_ZN5spark18JSONObjectIterator4nextEv>
   b6316:	b1e8      	cbz	r0, b6354 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b6318:	a904      	add	r1, sp, #16
   b631a:	4668      	mov	r0, sp
   b631c:	f7fe faa1 	bl	b4862 <_ZNK5spark18JSONObjectIterator4nameEv>
   b6320:	9802      	ldr	r0, [sp, #8]
   b6322:	4631      	mov	r1, r6
   b6324:	f7ff fe90 	bl	b6048 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b6328:	4604      	mov	r4, r0
   b632a:	b110      	cbz	r0, b6332 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b632c:	1e2c      	subs	r4, r5, #0
   b632e:	bf18      	it	ne
   b6330:	2401      	movne	r4, #1
   b6332:	a801      	add	r0, sp, #4
   b6334:	f7fe fa5d 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6338:	2c00      	cmp	r4, #0
   b633a:	d0e9      	beq.n	b6310 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b633c:	a904      	add	r1, sp, #16
   b633e:	4668      	mov	r0, sp
   b6340:	f7fe fa6d 	bl	b481e <_ZNK5spark18JSONObjectIterator5valueEv>
   b6344:	4668      	mov	r0, sp
   b6346:	f7ff fa04 	bl	b5752 <_ZNK5spark9JSONValue5toIntEv>
   b634a:	6028      	str	r0, [r5, #0]
   b634c:	a801      	add	r0, sp, #4
   b634e:	f7fe fa50 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6352:	e7dd      	b.n	b6310 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b6354:	a805      	add	r0, sp, #20
   b6356:	f7fe fa4c 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b635a:	b00a      	add	sp, #40	; 0x28
   b635c:	bd70      	pop	{r4, r5, r6, pc}
   b635e:	bf00      	nop
   b6360:	000b9028 	.word	0x000b9028

000b6364 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6364:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6366:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6368:	4620      	mov	r0, r4
   b636a:	4913      	ldr	r1, [pc, #76]	; (b63b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b636c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b636e:	f002 faf6 	bl	b895e <strcmp>
   b6372:	b950      	cbnz	r0, b638a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6374:	f7ff fcd4 	bl	b5d20 <_Z16_fetch_usbserialv>
   b6378:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b637c:	f7ff fcc0 	bl	b5d00 <_ZN9USBSerial5beginEl>
}
   b6380:	b003      	add	sp, #12
   b6382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b6386:	f7ff bccb 	b.w	b5d20 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b638a:	490c      	ldr	r1, [pc, #48]	; (b63bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b638c:	4620      	mov	r0, r4
   b638e:	f002 fae6 	bl	b895e <strcmp>
   b6392:	b978      	cbnz	r0, b63b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6394:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6398:	a901      	add	r1, sp, #4
   b639a:	4628      	mov	r0, r5
        int baud = 9600;
   b639c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b639e:	f7ff ffaf 	bl	b6300 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b63a2:	f002 f905 	bl	b85b0 <_Z22__fetch_global_Serial1v>
   b63a6:	9901      	ldr	r1, [sp, #4]
   b63a8:	f7ff f8e4 	bl	b5574 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b63ac:	f002 f900 	bl	b85b0 <_Z22__fetch_global_Serial1v>
}
   b63b0:	b003      	add	sp, #12
   b63b2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b63b4:	2000      	movs	r0, #0
   b63b6:	e7fb      	b.n	b63b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b63b8:	000b902d 	.word	0x000b902d
   b63bc:	000b9034 	.word	0x000b9034

000b63c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b63c0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b63c2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b63c6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b63c8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b63ca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b63ce:	42ae      	cmp	r6, r5
   b63d0:	d005      	beq.n	b63de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b63d2:	f105 0008 	add.w	r0, r5, #8
   b63d6:	f7ff fff3 	bl	b63c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b63da:	3514      	adds	r5, #20
   b63dc:	e7f7      	b.n	b63ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b63de:	6820      	ldr	r0, [r4, #0]
   b63e0:	f7fe ff38 	bl	b5254 <free>
}
   b63e4:	4620      	mov	r0, r4
   b63e6:	bd70      	pop	{r4, r5, r6, pc}

000b63e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b63e8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b63ea:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b63ee:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b63f0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b63f4:	42ae      	cmp	r6, r5
   b63f6:	d004      	beq.n	b6402 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b63f8:	4628      	mov	r0, r5
   b63fa:	f001 ffb9 	bl	b8370 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b63fe:	3510      	adds	r5, #16
   b6400:	e7f8      	b.n	b63f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6402:	6820      	ldr	r0, [r4, #0]
   b6404:	f7fe ff26 	bl	b5254 <free>
}
   b6408:	4620      	mov	r0, r4
   b640a:	bd70      	pop	{r4, r5, r6, pc}

000b640c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b640c:	b510      	push	{r4, lr}
   b640e:	4604      	mov	r4, r0
   b6410:	300c      	adds	r0, #12
   b6412:	f7ff ffd5 	bl	b63c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6416:	4620      	mov	r0, r4
   b6418:	f7ff ffe6 	bl	b63e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b641c:	4620      	mov	r0, r4
   b641e:	bd10      	pop	{r4, pc}

000b6420 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b6420:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b6422:	4b04      	ldr	r3, [pc, #16]	; (b6434 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b6424:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b6426:	f840 3b04 	str.w	r3, [r0], #4
   b642a:	f7ff ffef 	bl	b640c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b642e:	4620      	mov	r0, r4
   b6430:	bd10      	pop	{r4, pc}
   b6432:	bf00      	nop
   b6434:	000b8c58 	.word	0x000b8c58

000b6438 <_ZN5spark16StreamLogHandlerD0Ev>:
   b6438:	b510      	push	{r4, lr}
   b643a:	4604      	mov	r4, r0
   b643c:	f7ff fff0 	bl	b6420 <_ZN5spark16StreamLogHandlerD1Ev>
   b6440:	4620      	mov	r0, r4
   b6442:	2124      	movs	r1, #36	; 0x24
   b6444:	f7fd fe2b 	bl	b409e <_ZdlPvj>
   b6448:	4620      	mov	r0, r4
   b644a:	bd10      	pop	{r4, pc}

000b644c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b644c:	b510      	push	{r4, lr}
   b644e:	4b03      	ldr	r3, [pc, #12]	; (b645c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b6450:	6003      	str	r3, [r0, #0]
   b6452:	4604      	mov	r4, r0
   b6454:	f7ff ffe4 	bl	b6420 <_ZN5spark16StreamLogHandlerD1Ev>
   b6458:	4620      	mov	r0, r4
   b645a:	bd10      	pop	{r4, pc}
   b645c:	000b90d0 	.word	0x000b90d0

000b6460 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b6460:	b510      	push	{r4, lr}
   b6462:	4604      	mov	r4, r0
   b6464:	f7ff fff2 	bl	b644c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b6468:	4620      	mov	r0, r4
   b646a:	2124      	movs	r1, #36	; 0x24
   b646c:	f7fd fe17 	bl	b409e <_ZdlPvj>
   b6470:	4620      	mov	r0, r4
   b6472:	bd10      	pop	{r4, pc}

000b6474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b6474:	2200      	movs	r2, #0
   b6476:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b647a:	b510      	push	{r4, lr}
        capacity_(0) {
   b647c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b647e:	680c      	ldr	r4, [r1, #0]
   b6480:	6004      	str	r4, [r0, #0]
   b6482:	684c      	ldr	r4, [r1, #4]
   b6484:	6044      	str	r4, [r0, #4]
   b6486:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6488:	600a      	str	r2, [r1, #0]
   b648a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b648c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b648e:	608a      	str	r2, [r1, #8]
}
   b6490:	bd10      	pop	{r4, pc}

000b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6492:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6494:	6803      	ldr	r3, [r0, #0]
   b6496:	4604      	mov	r4, r0
   b6498:	6818      	ldr	r0, [r3, #0]
   b649a:	f7fe fd4b 	bl	b4f34 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b649e:	4620      	mov	r0, r4
   b64a0:	bd10      	pop	{r4, pc}
	...

000b64a4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b64a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64a8:	b087      	sub	sp, #28
   b64aa:	4680      	mov	r8, r0
   b64ac:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b64ae:	4b1c      	ldr	r3, [pc, #112]	; (b6520 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b64b0:	685b      	ldr	r3, [r3, #4]
   b64b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b64b6:	4689      	mov	r9, r1
   b64b8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b64ba:	b96b      	cbnz	r3, b64d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b64bc:	f7ff fee0 	bl	b6280 <_ZN5spark10LogManager8instanceEv>
   b64c0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b64c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b64c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b64c8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b64ca:	f7ff fdbb 	bl	b6044 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b64ce:	7b23      	ldrb	r3, [r4, #12]
   b64d0:	b12b      	cbz	r3, b64de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b64d2:	a805      	add	r0, sp, #20
   b64d4:	f7ff ffdd 	bl	b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b64d8:	b007      	add	sp, #28
   b64da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b64de:	2301      	movs	r3, #1
   b64e0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b64e2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b64e6:	fa5f f989 	uxtb.w	r9, r9
   b64ea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b64ee:	45aa      	cmp	sl, r5
   b64f0:	d012      	beq.n	b6518 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b64f2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b64f6:	4631      	mov	r1, r6
   b64f8:	1d38      	adds	r0, r7, #4
   b64fa:	f7ff fe4d 	bl	b6198 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b64fe:	4581      	cmp	r9, r0
   b6500:	d3f5      	bcc.n	b64ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b6502:	683b      	ldr	r3, [r7, #0]
   b6504:	9a03      	ldr	r2, [sp, #12]
   b6506:	9200      	str	r2, [sp, #0]
   b6508:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b650c:	464a      	mov	r2, r9
   b650e:	4633      	mov	r3, r6
   b6510:	4641      	mov	r1, r8
   b6512:	4638      	mov	r0, r7
   b6514:	47d8      	blx	fp
   b6516:	e7ea      	b.n	b64ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b6518:	2300      	movs	r3, #0
   b651a:	7323      	strb	r3, [r4, #12]
   b651c:	e7d9      	b.n	b64d2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b651e:	bf00      	nop
   b6520:	e000ed00 	.word	0xe000ed00

000b6524 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b6524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6528:	469b      	mov	fp, r3
   b652a:	4b1a      	ldr	r3, [pc, #104]	; (b6594 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b652c:	685b      	ldr	r3, [r3, #4]
   b652e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6532:	4680      	mov	r8, r0
   b6534:	4689      	mov	r9, r1
   b6536:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b6538:	b96b      	cbnz	r3, b6556 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b653a:	f7ff fea1 	bl	b6280 <_ZN5spark10LogManager8instanceEv>
   b653e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6540:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b6544:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6546:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6548:	f7ff fd7c 	bl	b6044 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b654c:	7b23      	ldrb	r3, [r4, #12]
   b654e:	b12b      	cbz	r3, b655c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6550:	a801      	add	r0, sp, #4
   b6552:	f7ff ff9e 	bl	b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6556:	b003      	add	sp, #12
   b6558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b655c:	2301      	movs	r3, #1
   b655e:	7323      	strb	r3, [r4, #12]
   b6560:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6564:	b2f6      	uxtb	r6, r6
   b6566:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b656a:	4555      	cmp	r5, sl
   b656c:	d00e      	beq.n	b658c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b656e:	f855 7b04 	ldr.w	r7, [r5], #4
   b6572:	4659      	mov	r1, fp
   b6574:	1d38      	adds	r0, r7, #4
   b6576:	f7ff fe0f 	bl	b6198 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b657a:	4286      	cmp	r6, r0
   b657c:	d3f5      	bcc.n	b656a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b657e:	683b      	ldr	r3, [r7, #0]
   b6580:	464a      	mov	r2, r9
   b6582:	68db      	ldr	r3, [r3, #12]
   b6584:	4641      	mov	r1, r8
   b6586:	4638      	mov	r0, r7
   b6588:	4798      	blx	r3
   b658a:	e7ee      	b.n	b656a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b658c:	2300      	movs	r3, #0
   b658e:	7323      	strb	r3, [r4, #12]
   b6590:	e7de      	b.n	b6550 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6592:	bf00      	nop
   b6594:	e000ed00 	.word	0xe000ed00

000b6598 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b659c:	4b16      	ldr	r3, [pc, #88]	; (b65f8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b659e:	685b      	ldr	r3, [r3, #4]
   b65a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b65a4:	4605      	mov	r5, r0
   b65a6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b65a8:	bb1b      	cbnz	r3, b65f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b65aa:	f7ff fe69 	bl	b6280 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b65ae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b65b2:	4604      	mov	r4, r0
   b65b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b65b6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b65b8:	f7ff fd44 	bl	b6044 <_ZN14RecursiveMutex4lockEv.isra.0>
   b65bc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b65c0:	2446      	movs	r4, #70	; 0x46
   b65c2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b65c6:	45b0      	cmp	r8, r6
   b65c8:	d109      	bne.n	b65de <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b65ca:	a801      	add	r0, sp, #4
   b65cc:	f7ff ff61 	bl	b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b65d0:	42a5      	cmp	r5, r4
   b65d2:	bfb4      	ite	lt
   b65d4:	2000      	movlt	r0, #0
   b65d6:	2001      	movge	r0, #1
}
   b65d8:	b002      	add	sp, #8
   b65da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b65de:	f856 0b04 	ldr.w	r0, [r6], #4
   b65e2:	4639      	mov	r1, r7
   b65e4:	3004      	adds	r0, #4
   b65e6:	f7ff fdd7 	bl	b6198 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b65ea:	4284      	cmp	r4, r0
   b65ec:	bfa8      	it	ge
   b65ee:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b65f0:	e7e9      	b.n	b65c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b65f2:	2000      	movs	r0, #0
   b65f4:	e7f0      	b.n	b65d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b65f6:	bf00      	nop
   b65f8:	e000ed00 	.word	0xe000ed00

000b65fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b65fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b65fe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b6602:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6604:	4604      	mov	r4, r0
   b6606:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6608:	db0d      	blt.n	b6626 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b660a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b660c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b660e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6610:	dd04      	ble.n	b661c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b6612:	00b9      	lsls	r1, r7, #2
   b6614:	f7fe fe26 	bl	b5264 <realloc>
            if (!d) {
   b6618:	b918      	cbnz	r0, b6622 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b661a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b661c:	f7fe fe1a 	bl	b5254 <free>
        T* d = nullptr;
   b6620:	2000      	movs	r0, #0
        data_ = d;
   b6622:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6624:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6626:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6628:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b662a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b662e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6630:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b6634:	1d08      	adds	r0, r1, #4
   b6636:	f002 f92b 	bl	b8890 <memmove>
    new(p) T(std::move(value));
   b663a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b663e:	6863      	ldr	r3, [r4, #4]
   b6640:	3301      	adds	r3, #1
   b6642:	6063      	str	r3, [r4, #4]
    return true;
   b6644:	2001      	movs	r0, #1
   b6646:	e7e8      	b.n	b661a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b6648 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6648:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b664a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b664e:	4604      	mov	r4, r0
   b6650:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6652:	9301      	str	r3, [sp, #4]
   b6654:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b6656:	f7ff fcf5 	bl	b6044 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b665a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b665e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b6662:	4293      	cmp	r3, r2
   b6664:	4619      	mov	r1, r3
   b6666:	d00b      	beq.n	b6680 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b6668:	6809      	ldr	r1, [r1, #0]
   b666a:	42a9      	cmp	r1, r5
   b666c:	f103 0304 	add.w	r3, r3, #4
   b6670:	d1f7      	bne.n	b6662 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6672:	a801      	add	r0, sp, #4
   b6674:	f7ff ff0d 	bl	b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6678:	2500      	movs	r5, #0
}
   b667a:	4628      	mov	r0, r5
   b667c:	b003      	add	sp, #12
   b667e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6680:	4629      	mov	r1, r5
   b6682:	4620      	mov	r0, r4
   b6684:	f7ff ffba 	bl	b65fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6688:	4605      	mov	r5, r0
   b668a:	2800      	cmp	r0, #0
   b668c:	d0f1      	beq.n	b6672 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b668e:	6863      	ldr	r3, [r4, #4]
   b6690:	2b01      	cmp	r3, #1
   b6692:	d101      	bne.n	b6698 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6694:	f7ff fe10 	bl	b62b8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6698:	a801      	add	r0, sp, #4
   b669a:	f7ff fefa 	bl	b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b669e:	e7ec      	b.n	b667a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b66a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b66a0:	b570      	push	{r4, r5, r6, lr}
   b66a2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b66a4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b66a8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b66aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b66ae:	4282      	cmp	r2, r0
   b66b0:	d00f      	beq.n	b66d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b66b2:	4601      	mov	r1, r0
            if (*p == value) {
   b66b4:	681d      	ldr	r5, [r3, #0]
   b66b6:	f851 6b04 	ldr.w	r6, [r1], #4
   b66ba:	42ae      	cmp	r6, r5
   b66bc:	d107      	bne.n	b66ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b66be:	1a52      	subs	r2, r2, r1
   b66c0:	f002 f8e6 	bl	b8890 <memmove>
    --size_;
   b66c4:	6863      	ldr	r3, [r4, #4]
   b66c6:	3b01      	subs	r3, #1
   b66c8:	6063      	str	r3, [r4, #4]
    return true;
   b66ca:	2001      	movs	r0, #1
}
   b66cc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b66ce:	4608      	mov	r0, r1
   b66d0:	e7ed      	b.n	b66ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b66d2:	2000      	movs	r0, #0
   b66d4:	e7fa      	b.n	b66cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b66d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b66d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b66d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b66dc:	4604      	mov	r4, r0
   b66de:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b66e0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b66e2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b66e4:	f7ff fcae 	bl	b6044 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b66e8:	a901      	add	r1, sp, #4
   b66ea:	4620      	mov	r0, r4
   b66ec:	f7ff ffd8 	bl	b66a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b66f0:	b118      	cbz	r0, b66fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b66f2:	6863      	ldr	r3, [r4, #4]
   b66f4:	b90b      	cbnz	r3, b66fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b66f6:	f7ff fdeb 	bl	b62d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b66fa:	a803      	add	r0, sp, #12
   b66fc:	f7ff fec9 	bl	b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6700:	b004      	add	sp, #16
   b6702:	bd10      	pop	{r4, pc}

000b6704 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b6704:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b6706:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b670a:	2318      	movs	r3, #24
   b670c:	4604      	mov	r4, r0
   b670e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b6712:	42ae      	cmp	r6, r5
   b6714:	d015      	beq.n	b6742 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b6716:	f105 0110 	add.w	r1, r5, #16
   b671a:	4620      	mov	r0, r4
   b671c:	f7ff ffc0 	bl	b66a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b6720:	6863      	ldr	r3, [r4, #4]
   b6722:	b90b      	cbnz	r3, b6728 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b6724:	f7ff fdd4 	bl	b62d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b6728:	69e0      	ldr	r0, [r4, #28]
   b672a:	6929      	ldr	r1, [r5, #16]
   b672c:	6803      	ldr	r3, [r0, #0]
   b672e:	68db      	ldr	r3, [r3, #12]
   b6730:	4798      	blx	r3
        if (h.stream) {
   b6732:	6969      	ldr	r1, [r5, #20]
   b6734:	b119      	cbz	r1, b673e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b6736:	6a20      	ldr	r0, [r4, #32]
   b6738:	6803      	ldr	r3, [r0, #0]
   b673a:	68db      	ldr	r3, [r3, #12]
   b673c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b673e:	3518      	adds	r5, #24
   b6740:	e7e7      	b.n	b6712 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b6742:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6746:	2618      	movs	r6, #24
   b6748:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b674c:	42ae      	cmp	r6, r5
   b674e:	d004      	beq.n	b675a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6750:	4628      	mov	r0, r5
   b6752:	f001 fe0d 	bl	b8370 <_ZN6StringD1Ev>
   b6756:	3518      	adds	r5, #24
   b6758:	e7f8      	b.n	b674c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b675a:	2300      	movs	r3, #0
   b675c:	6163      	str	r3, [r4, #20]
}
   b675e:	bd70      	pop	{r4, r5, r6, pc}

000b6760 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6760:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6762:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6764:	f7ff fdb4 	bl	b62d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6768:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b676c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b676e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6770:	f7ff fc68 	bl	b6044 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6774:	4620      	mov	r0, r4
   b6776:	f7ff ffc5 	bl	b6704 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b677a:	a801      	add	r0, sp, #4
   b677c:	f7ff fe89 	bl	b6492 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6780:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6782:	b108      	cbz	r0, b6788 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6784:	f7fe fbc6 	bl	b4f14 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6788:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b678c:	2618      	movs	r6, #24
   b678e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6792:	42ae      	cmp	r6, r5
   b6794:	d004      	beq.n	b67a0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6796:	4628      	mov	r0, r5
   b6798:	f001 fdea 	bl	b8370 <_ZN6StringD1Ev>
   b679c:	3518      	adds	r5, #24
   b679e:	e7f8      	b.n	b6792 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b67a0:	6920      	ldr	r0, [r4, #16]
   b67a2:	f7fe fd57 	bl	b5254 <free>
   b67a6:	6820      	ldr	r0, [r4, #0]
   b67a8:	f7fe fd54 	bl	b5254 <free>
}
   b67ac:	4620      	mov	r0, r4
   b67ae:	b002      	add	sp, #8
   b67b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b67b4 <__tcf_2>:
    static LogManager mgr;
   b67b4:	4801      	ldr	r0, [pc, #4]	; (b67bc <__tcf_2+0x8>)
   b67b6:	f7ff bfd3 	b.w	b6760 <_ZN5spark10LogManagerD1Ev>
   b67ba:	bf00      	nop
   b67bc:	2003e6f0 	.word	0x2003e6f0

000b67c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b67c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b67c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67c4:	4604      	mov	r4, r0
   b67c6:	460d      	mov	r5, r1
   b67c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b67ca:	d915      	bls.n	b67f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b67cc:	4290      	cmp	r0, r2
   b67ce:	d214      	bcs.n	b67fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b67d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b67d4:	1a75      	subs	r5, r6, r1
   b67d6:	f1a1 0714 	sub.w	r7, r1, #20
   b67da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b67dc:	42b7      	cmp	r7, r6
   b67de:	d01a      	beq.n	b6816 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b67e0:	b11c      	cbz	r4, b67ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b67e2:	4631      	mov	r1, r6
   b67e4:	4620      	mov	r0, r4
   b67e6:	f7ff fc87 	bl	b60f8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b67ea:	f106 0008 	add.w	r0, r6, #8
   b67ee:	f7ff fde7 	bl	b63c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b67f2:	3e14      	subs	r6, #20
   b67f4:	3c14      	subs	r4, #20
   b67f6:	e7f1      	b.n	b67dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b67f8:	d00d      	beq.n	b6816 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b67fa:	42b5      	cmp	r5, r6
   b67fc:	d00b      	beq.n	b6816 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b67fe:	b11c      	cbz	r4, b6808 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b6800:	4629      	mov	r1, r5
   b6802:	4620      	mov	r0, r4
   b6804:	f7ff fc78 	bl	b60f8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b6808:	f105 0008 	add.w	r0, r5, #8
   b680c:	f7ff fdd8 	bl	b63c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b6810:	3514      	adds	r5, #20
   b6812:	3414      	adds	r4, #20
   b6814:	e7f1      	b.n	b67fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b6816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6818:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b681c:	4604      	mov	r4, r0
   b681e:	460d      	mov	r5, r1
   b6820:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6822:	d914      	bls.n	b684e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b6824:	4290      	cmp	r0, r2
   b6826:	d213      	bcs.n	b6850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b6828:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b682c:	1a75      	subs	r5, r6, r1
   b682e:	f1a1 0710 	sub.w	r7, r1, #16
   b6832:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6834:	42b7      	cmp	r7, r6
   b6836:	d018      	beq.n	b686a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b6838:	b11c      	cbz	r4, b6842 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b683a:	4631      	mov	r1, r6
   b683c:	4620      	mov	r0, r4
   b683e:	f001 fe13 	bl	b8468 <_ZN6StringC1EOS_>
                end->~T();
   b6842:	4630      	mov	r0, r6
   b6844:	f001 fd94 	bl	b8370 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6848:	3e10      	subs	r6, #16
   b684a:	3c10      	subs	r4, #16
   b684c:	e7f2      	b.n	b6834 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b684e:	d00c      	beq.n	b686a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6850:	42b5      	cmp	r5, r6
   b6852:	d00a      	beq.n	b686a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6854:	b11c      	cbz	r4, b685e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b6856:	4629      	mov	r1, r5
   b6858:	4620      	mov	r0, r4
   b685a:	f001 fe05 	bl	b8468 <_ZN6StringC1EOS_>
                p->~T();
   b685e:	4628      	mov	r0, r5
   b6860:	f001 fd86 	bl	b8370 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6864:	3510      	adds	r5, #16
   b6866:	3410      	adds	r4, #16
   b6868:	e7f2      	b.n	b6850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b686c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b686c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b686e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6870:	4605      	mov	r5, r0
        if (n > 0) {
   b6872:	dd11      	ble.n	b6898 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6874:	0130      	lsls	r0, r6, #4
   b6876:	f7fe fce5 	bl	b5244 <malloc>
            if (!d) {
   b687a:	4604      	mov	r4, r0
   b687c:	b158      	cbz	r0, b6896 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b687e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6882:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b6886:	f7ff ffc7 	bl	b6818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b688a:	6828      	ldr	r0, [r5, #0]
   b688c:	f7fe fce2 	bl	b5254 <free>
        data_ = d;
   b6890:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6892:	60ae      	str	r6, [r5, #8]
        return true;
   b6894:	2001      	movs	r0, #1
    }
   b6896:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6898:	2400      	movs	r4, #0
   b689a:	e7f6      	b.n	b688a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b689c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68a0:	4690      	mov	r8, r2
   b68a2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b68a4:	2300      	movs	r3, #0
   b68a6:	9103      	str	r1, [sp, #12]
    return size_;
   b68a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b68ac:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b68ae:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b68b0:	4299      	cmp	r1, r3
        capacity_(0) {
   b68b2:	e9c0 3300 	strd	r3, r3, [r0]
   b68b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b68ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b68be:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b68c2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b68c4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b68c6:	dc23      	bgt.n	b6910 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b68c8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b68cc:	2314      	movs	r3, #20
   b68ce:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b68d2:	42af      	cmp	r7, r5
   b68d4:	d03b      	beq.n	b694e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b68d6:	4629      	mov	r1, r5
   b68d8:	a80b      	add	r0, sp, #44	; 0x2c
   b68da:	f001 fdc5 	bl	b8468 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b68de:	a90b      	add	r1, sp, #44	; 0x2c
   b68e0:	a80f      	add	r0, sp, #60	; 0x3c
   b68e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b68e4:	f001 fdc0 	bl	b8468 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b68e8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b68ec:	4299      	cmp	r1, r3
   b68ee:	da1b      	bge.n	b6928 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b68f0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b68f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b68f4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b68f8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b68fc:	4631      	mov	r1, r6
   b68fe:	f106 0010 	add.w	r0, r6, #16
   b6902:	f7ff ff89 	bl	b6818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6906:	b9ee      	cbnz	r6, b6944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6908:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b690a:	3301      	adds	r3, #1
   b690c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b690e:	e011      	b.n	b6934 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6910:	a808      	add	r0, sp, #32
   b6912:	f7ff ffab 	bl	b686c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6916:	2800      	cmp	r0, #0
   b6918:	d1d6      	bne.n	b68c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b691a:	a808      	add	r0, sp, #32
   b691c:	f7ff fd64 	bl	b63e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6920:	4620      	mov	r0, r4
   b6922:	b015      	add	sp, #84	; 0x54
   b6924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6928:	3101      	adds	r1, #1
   b692a:	a808      	add	r0, sp, #32
   b692c:	f7ff ff9e 	bl	b686c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6930:	2800      	cmp	r0, #0
   b6932:	d1dd      	bne.n	b68f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6934:	a80f      	add	r0, sp, #60	; 0x3c
   b6936:	f001 fd1b 	bl	b8370 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b693a:	a80b      	add	r0, sp, #44	; 0x2c
   b693c:	f001 fd18 	bl	b8370 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6940:	3514      	adds	r5, #20
   b6942:	e7c6      	b.n	b68d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6944:	a90f      	add	r1, sp, #60	; 0x3c
   b6946:	4630      	mov	r0, r6
   b6948:	f001 fd8e 	bl	b8468 <_ZN6StringC1EOS_>
   b694c:	e7dc      	b.n	b6908 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b694e:	2600      	movs	r6, #0
   b6950:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6954:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6956:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b695a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b695e:	429e      	cmp	r6, r3
   b6960:	da7c      	bge.n	b6a5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6962:	0133      	lsls	r3, r6, #4
   b6964:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6966:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6968:	b90b      	cbnz	r3, b696e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b696a:	3601      	adds	r6, #1
   b696c:	e7f5      	b.n	b695a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b696e:	2300      	movs	r3, #0
   b6970:	9307      	str	r3, [sp, #28]
   b6972:	fb09 f306 	mul.w	r3, r9, r6
   b6976:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6978:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b697a:	a907      	add	r1, sp, #28
   b697c:	a806      	add	r0, sp, #24
   b697e:	f7ff fb3a 	bl	b5ff6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6982:	4682      	mov	sl, r0
   b6984:	2800      	cmp	r0, #0
   b6986:	d0f0      	beq.n	b696a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6988:	f04f 0300 	mov.w	r3, #0
   b698c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6990:	4601      	mov	r1, r0
   b6992:	9a07      	ldr	r2, [sp, #28]
   b6994:	f10d 0317 	add.w	r3, sp, #23
   b6998:	4628      	mov	r0, r5
   b699a:	f7ff fbc1 	bl	b6120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b699e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b69a2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b69a4:	2f00      	cmp	r7, #0
   b69a6:	d14a      	bne.n	b6a3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b69a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b69ac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b69b0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b69b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b69b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b69bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b69c0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b69c2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b69c6:	4293      	cmp	r3, r2
   b69c8:	db17      	blt.n	b69fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b69ca:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b69ce:	f1ba 0f00 	cmp.w	sl, #0
   b69d2:	dd30      	ble.n	b6a36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b69d4:	fb09 f00a 	mul.w	r0, r9, sl
   b69d8:	f7fe fc34 	bl	b5244 <malloc>
            if (!d) {
   b69dc:	4683      	mov	fp, r0
   b69de:	b360      	cbz	r0, b6a3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b69e0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b69e4:	fb09 1202 	mla	r2, r9, r2, r1
   b69e8:	f7ff feea 	bl	b67c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b69ec:	6828      	ldr	r0, [r5, #0]
   b69ee:	f7fe fc31 	bl	b5254 <free>
        data_ = d;
   b69f2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b69f6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b69fa:	682b      	ldr	r3, [r5, #0]
   b69fc:	9a01      	ldr	r2, [sp, #4]
   b69fe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6a02:	686a      	ldr	r2, [r5, #4]
   b6a04:	4651      	mov	r1, sl
   b6a06:	fb09 3202 	mla	r2, r9, r2, r3
   b6a0a:	f10a 0014 	add.w	r0, sl, #20
   b6a0e:	f7ff fed7 	bl	b67c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b6a12:	f1ba 0f00 	cmp.w	sl, #0
   b6a16:	d003      	beq.n	b6a20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6a18:	a90f      	add	r1, sp, #60	; 0x3c
   b6a1a:	4650      	mov	r0, sl
   b6a1c:	f7ff fb6c 	bl	b60f8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6a20:	686b      	ldr	r3, [r5, #4]
   b6a22:	3301      	adds	r3, #1
   b6a24:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6a26:	a811      	add	r0, sp, #68	; 0x44
   b6a28:	f7ff fcca 	bl	b63c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6a2c:	b13f      	cbz	r7, b6a3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b6a2e:	a80b      	add	r0, sp, #44	; 0x2c
   b6a30:	f7ff fcc6 	bl	b63c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6a34:	e771      	b.n	b691a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6a36:	46bb      	mov	fp, r7
   b6a38:	e7d8      	b.n	b69ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6a3a:	2701      	movs	r7, #1
   b6a3c:	e7f3      	b.n	b6a26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b6a3e:	9b01      	ldr	r3, [sp, #4]
   b6a40:	682d      	ldr	r5, [r5, #0]
   b6a42:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6a46:	9b06      	ldr	r3, [sp, #24]
   b6a48:	781b      	ldrb	r3, [r3, #0]
   b6a4a:	b92b      	cbnz	r3, b6a58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6a4c:	f8d8 3000 	ldr.w	r3, [r8]
   b6a50:	9a02      	ldr	r2, [sp, #8]
   b6a52:	4413      	add	r3, r2
   b6a54:	7c1b      	ldrb	r3, [r3, #16]
   b6a56:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6a58:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6a5a:	e78e      	b.n	b697a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a5c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6a5e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a60:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6a62:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a64:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a66:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6a6a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a6c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6a6e:	60a2      	str	r2, [r4, #8]
   b6a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6a72:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a74:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6a76:	60e2      	str	r2, [r4, #12]
   b6a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6a7a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a7c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6a7e:	6122      	str	r2, [r4, #16]
   b6a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6a82:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6a84:	9b03      	ldr	r3, [sp, #12]
   b6a86:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6a88:	6162      	str	r2, [r4, #20]
   b6a8a:	7623      	strb	r3, [r4, #24]
   b6a8c:	e7cf      	b.n	b6a2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6a90 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a92:	4604      	mov	r4, r0
   b6a94:	b087      	sub	sp, #28
   b6a96:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6a98:	4626      	mov	r6, r4
        stream_(&stream) {
   b6a9a:	4619      	mov	r1, r3
   b6a9c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6a9e:	4617      	mov	r7, r2
        stream_(&stream) {
   b6aa0:	f7fd fc0a 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6aa4:	4b0b      	ldr	r3, [pc, #44]	; (b6ad4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6aa6:	f846 3b04 	str.w	r3, [r6], #4
   b6aaa:	4669      	mov	r1, sp
   b6aac:	a803      	add	r0, sp, #12
   b6aae:	f7fd fc03 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6ab2:	aa03      	add	r2, sp, #12
   b6ab4:	4639      	mov	r1, r7
   b6ab6:	4630      	mov	r0, r6
   b6ab8:	f7ff fef0 	bl	b689c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6abc:	a803      	add	r0, sp, #12
   b6abe:	f7fd fb9f 	bl	b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6ac2:	4668      	mov	r0, sp
   b6ac4:	f7fd fb9c 	bl	b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6ac8:	4b03      	ldr	r3, [pc, #12]	; (b6ad8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6aca:	6023      	str	r3, [r4, #0]
}
   b6acc:	4620      	mov	r0, r4
        stream_(&stream) {
   b6ace:	6225      	str	r5, [r4, #32]
}
   b6ad0:	b007      	add	sp, #28
   b6ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6ad4:	000b8c58 	.word	0x000b8c58
   b6ad8:	000b90b8 	.word	0x000b90b8

000b6adc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6ade:	460f      	mov	r7, r1
   b6ae0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6ae2:	491d      	ldr	r1, [pc, #116]	; (b6b58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6ae4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6ae6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6ae8:	4616      	mov	r6, r2
   b6aea:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6aec:	f001 ff37 	bl	b895e <strcmp>
   b6af0:	b9c0      	cbnz	r0, b6b24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b6af2:	b1a4      	cbz	r4, b6b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6af4:	4629      	mov	r1, r5
   b6af6:	a801      	add	r0, sp, #4
   b6af8:	f7ff fcbc 	bl	b6474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6afc:	4917      	ldr	r1, [pc, #92]	; (b6b5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6afe:	2024      	movs	r0, #36	; 0x24
   b6b00:	f001 fd7a 	bl	b85f8 <_ZnwjRKSt9nothrow_t>
   b6b04:	4605      	mov	r5, r0
   b6b06:	b130      	cbz	r0, b6b16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6b08:	ab01      	add	r3, sp, #4
   b6b0a:	4632      	mov	r2, r6
   b6b0c:	4621      	mov	r1, r4
   b6b0e:	f7ff ffbf 	bl	b6a90 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6b12:	4b13      	ldr	r3, [pc, #76]	; (b6b60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6b14:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6b16:	a801      	add	r0, sp, #4
   b6b18:	f7fd fb72 	bl	b4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6b1c:	462c      	mov	r4, r5
}
   b6b1e:	4620      	mov	r0, r4
   b6b20:	b005      	add	sp, #20
   b6b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6b24:	490f      	ldr	r1, [pc, #60]	; (b6b64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6b26:	4638      	mov	r0, r7
   b6b28:	f001 ff19 	bl	b895e <strcmp>
   b6b2c:	b990      	cbnz	r0, b6b54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6b2e:	2c00      	cmp	r4, #0
   b6b30:	d0f5      	beq.n	b6b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6b32:	4629      	mov	r1, r5
   b6b34:	a801      	add	r0, sp, #4
   b6b36:	f7ff fc9d 	bl	b6474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6b3a:	4908      	ldr	r1, [pc, #32]	; (b6b5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6b3c:	2024      	movs	r0, #36	; 0x24
   b6b3e:	f001 fd5b 	bl	b85f8 <_ZnwjRKSt9nothrow_t>
   b6b42:	4605      	mov	r5, r0
   b6b44:	2800      	cmp	r0, #0
   b6b46:	d0e6      	beq.n	b6b16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6b48:	ab01      	add	r3, sp, #4
   b6b4a:	4632      	mov	r2, r6
   b6b4c:	4621      	mov	r1, r4
   b6b4e:	f7ff ff9f 	bl	b6a90 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6b52:	e7e0      	b.n	b6b16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6b54:	2400      	movs	r4, #0
   b6b56:	e7e2      	b.n	b6b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6b58:	000b903c 	.word	0x000b903c
   b6b5c:	000b931c 	.word	0x000b931c
   b6b60:	000b90d0 	.word	0x000b90d0
   b6b64:	000b9040 	.word	0x000b9040

000b6b68 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6b68:	4b01      	ldr	r3, [pc, #4]	; (b6b70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6b6a:	4a02      	ldr	r2, [pc, #8]	; (b6b74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6b6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6b6e:	4770      	bx	lr
   b6b70:	2003e6ec 	.word	0x2003e6ec
   b6b74:	000b8c2e 	.word	0x000b8c2e

000b6b78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b7c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6b7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6b82:	4604      	mov	r4, r0
   b6b84:	460e      	mov	r6, r1
   b6b86:	4617      	mov	r7, r2
   b6b88:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6b8a:	f7ff f8c9 	bl	b5d20 <_Z16_fetch_usbserialv>
   b6b8e:	4581      	cmp	r9, r0
   b6b90:	d04c      	beq.n	b6c2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6b92:	792b      	ldrb	r3, [r5, #4]
   b6b94:	0719      	lsls	r1, r3, #28
   b6b96:	d504      	bpl.n	b6ba2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6b98:	696a      	ldr	r2, [r5, #20]
   b6b9a:	4954      	ldr	r1, [pc, #336]	; (b6cec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6b9c:	4620      	mov	r0, r4
   b6b9e:	f7ff fa9c 	bl	b60da <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6ba2:	f1b8 0f00 	cmp.w	r8, #0
   b6ba6:	d00d      	beq.n	b6bc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6ba8:	215b      	movs	r1, #91	; 0x5b
   b6baa:	4620      	mov	r0, r4
   b6bac:	f7ff fa89 	bl	b60c2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6bb0:	4641      	mov	r1, r8
   b6bb2:	4620      	mov	r0, r4
   b6bb4:	f7ff fa76 	bl	b60a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6bb8:	6823      	ldr	r3, [r4, #0]
   b6bba:	494d      	ldr	r1, [pc, #308]	; (b6cf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6bbc:	68db      	ldr	r3, [r3, #12]
   b6bbe:	2202      	movs	r2, #2
   b6bc0:	4620      	mov	r0, r4
   b6bc2:	4798      	blx	r3
    if (attr.has_file) {
   b6bc4:	792b      	ldrb	r3, [r5, #4]
   b6bc6:	07da      	lsls	r2, r3, #31
   b6bc8:	d523      	bpl.n	b6c12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6bca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6bce:	212f      	movs	r1, #47	; 0x2f
   b6bd0:	4640      	mov	r0, r8
   b6bd2:	f001 fefe 	bl	b89d2 <strrchr>
    if (s1) {
   b6bd6:	b108      	cbz	r0, b6bdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6bd8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6bdc:	4641      	mov	r1, r8
   b6bde:	4620      	mov	r0, r4
   b6be0:	f7ff fa60 	bl	b60a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6be4:	792b      	ldrb	r3, [r5, #4]
   b6be6:	079b      	lsls	r3, r3, #30
   b6be8:	d508      	bpl.n	b6bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6bea:	213a      	movs	r1, #58	; 0x3a
   b6bec:	4620      	mov	r0, r4
   b6bee:	f7ff fa68 	bl	b60c2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6bf2:	68ea      	ldr	r2, [r5, #12]
   b6bf4:	493f      	ldr	r1, [pc, #252]	; (b6cf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6bf6:	4620      	mov	r0, r4
   b6bf8:	f7ff fa6f 	bl	b60da <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6bfc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6bfe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6c00:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6c04:	68db      	ldr	r3, [r3, #12]
   b6c06:	bf14      	ite	ne
   b6c08:	493b      	ldrne	r1, [pc, #236]	; (b6cf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6c0a:	493c      	ldreq	r1, [pc, #240]	; (b6cfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6c0c:	2202      	movs	r2, #2
            write(": ", 2);
   b6c0e:	4620      	mov	r0, r4
   b6c10:	4798      	blx	r3
    if (attr.has_function) {
   b6c12:	792b      	ldrb	r3, [r5, #4]
   b6c14:	0758      	lsls	r0, r3, #29
   b6c16:	d51d      	bpl.n	b6c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6c18:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6c1a:	460b      	mov	r3, r1
   b6c1c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6c1e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6c22:	b160      	cbz	r0, b6c3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6c24:	2820      	cmp	r0, #32
   b6c26:	d108      	bne.n	b6c3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6c28:	4619      	mov	r1, r3
   b6c2a:	e7f7      	b.n	b6c1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6c2c:	4834      	ldr	r0, [pc, #208]	; (b6d00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6c2e:	f7fe fb91 	bl	b5354 <_ZN5spark12NetworkClass9listeningEv>
   b6c32:	2800      	cmp	r0, #0
   b6c34:	d0ad      	beq.n	b6b92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6c3a:	2828      	cmp	r0, #40	; 0x28
   b6c3c:	d1ee      	bne.n	b6c1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6c3e:	6823      	ldr	r3, [r4, #0]
   b6c40:	1a52      	subs	r2, r2, r1
   b6c42:	68db      	ldr	r3, [r3, #12]
   b6c44:	4620      	mov	r0, r4
   b6c46:	4798      	blx	r3
        write("(): ", 4);
   b6c48:	6823      	ldr	r3, [r4, #0]
   b6c4a:	492e      	ldr	r1, [pc, #184]	; (b6d04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6c4c:	68db      	ldr	r3, [r3, #12]
   b6c4e:	2204      	movs	r2, #4
   b6c50:	4620      	mov	r0, r4
   b6c52:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6c54:	2100      	movs	r1, #0
   b6c56:	4638      	mov	r0, r7
   b6c58:	f7fe fa3e 	bl	b50d8 <log_level_name>
   b6c5c:	4601      	mov	r1, r0
    write(s);
   b6c5e:	4620      	mov	r0, r4
   b6c60:	f7ff fa20 	bl	b60a4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6c64:	6823      	ldr	r3, [r4, #0]
   b6c66:	4925      	ldr	r1, [pc, #148]	; (b6cfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6c68:	68db      	ldr	r3, [r3, #12]
   b6c6a:	2202      	movs	r2, #2
   b6c6c:	4620      	mov	r0, r4
   b6c6e:	4798      	blx	r3
    if (msg) {
   b6c70:	b11e      	cbz	r6, b6c7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6c72:	4631      	mov	r1, r6
   b6c74:	4620      	mov	r0, r4
   b6c76:	f7ff fa15 	bl	b60a4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6c7a:	792b      	ldrb	r3, [r5, #4]
   b6c7c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6c80:	d02c      	beq.n	b6cdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6c82:	6823      	ldr	r3, [r4, #0]
   b6c84:	4920      	ldr	r1, [pc, #128]	; (b6d08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6c86:	68db      	ldr	r3, [r3, #12]
   b6c88:	2202      	movs	r2, #2
   b6c8a:	4620      	mov	r0, r4
   b6c8c:	4798      	blx	r3
        if (attr.has_code) {
   b6c8e:	792b      	ldrb	r3, [r5, #4]
   b6c90:	06d9      	lsls	r1, r3, #27
   b6c92:	d50a      	bpl.n	b6caa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6c94:	6823      	ldr	r3, [r4, #0]
   b6c96:	491d      	ldr	r1, [pc, #116]	; (b6d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6c98:	68db      	ldr	r3, [r3, #12]
   b6c9a:	2207      	movs	r2, #7
   b6c9c:	4620      	mov	r0, r4
   b6c9e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6ca0:	69aa      	ldr	r2, [r5, #24]
   b6ca2:	491b      	ldr	r1, [pc, #108]	; (b6d10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f7ff fa18 	bl	b60da <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6caa:	792b      	ldrb	r3, [r5, #4]
   b6cac:	069a      	lsls	r2, r3, #26
   b6cae:	d511      	bpl.n	b6cd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6cb0:	06db      	lsls	r3, r3, #27
   b6cb2:	d505      	bpl.n	b6cc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6cb4:	6823      	ldr	r3, [r4, #0]
   b6cb6:	4910      	ldr	r1, [pc, #64]	; (b6cf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6cb8:	68db      	ldr	r3, [r3, #12]
   b6cba:	2202      	movs	r2, #2
   b6cbc:	4620      	mov	r0, r4
   b6cbe:	4798      	blx	r3
            write("details = ", 10);
   b6cc0:	6823      	ldr	r3, [r4, #0]
   b6cc2:	4914      	ldr	r1, [pc, #80]	; (b6d14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6cc4:	68db      	ldr	r3, [r3, #12]
   b6cc6:	4620      	mov	r0, r4
   b6cc8:	220a      	movs	r2, #10
   b6cca:	4798      	blx	r3
            write(attr.details);
   b6ccc:	69e9      	ldr	r1, [r5, #28]
   b6cce:	4620      	mov	r0, r4
   b6cd0:	f7ff f9e8 	bl	b60a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6cd4:	215d      	movs	r1, #93	; 0x5d
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	f7ff f9f3 	bl	b60c2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6cdc:	6823      	ldr	r3, [r4, #0]
   b6cde:	490e      	ldr	r1, [pc, #56]	; (b6d18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6ce0:	68db      	ldr	r3, [r3, #12]
   b6ce2:	4620      	mov	r0, r4
   b6ce4:	2202      	movs	r2, #2
}
   b6ce6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6cea:	4718      	bx	r3
   b6cec:	000b9051 	.word	0x000b9051
   b6cf0:	000b9058 	.word	0x000b9058
   b6cf4:	000b8fa0 	.word	0x000b8fa0
   b6cf8:	000b905b 	.word	0x000b905b
   b6cfc:	000b9060 	.word	0x000b9060
   b6d00:	2003e69c 	.word	0x2003e69c
   b6d04:	000b905e 	.word	0x000b905e
   b6d08:	000b9063 	.word	0x000b9063
   b6d0c:	000b9066 	.word	0x000b9066
   b6d10:	000b906e 	.word	0x000b906e
   b6d14:	000b9071 	.word	0x000b9071
   b6d18:	000b907c 	.word	0x000b907c

000b6d1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6d20:	b085      	sub	sp, #20
    return stream_;
   b6d22:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6d26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6d28:	4605      	mov	r5, r0
   b6d2a:	460f      	mov	r7, r1
   b6d2c:	4690      	mov	r8, r2
   b6d2e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6d30:	f7fe fff6 	bl	b5d20 <_Z16_fetch_usbserialv>
   b6d34:	4581      	cmp	r9, r0
   b6d36:	d105      	bne.n	b6d44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6d38:	4849      	ldr	r0, [pc, #292]	; (b6e60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6d3a:	f7fe fb0b 	bl	b5354 <_ZN5spark12NetworkClass9listeningEv>
   b6d3e:	2800      	cmp	r0, #0
   b6d40:	f040 808a 	bne.w	b6e58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6d44:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6d46:	4a47      	ldr	r2, [pc, #284]	; (b6e64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6d48:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6d4a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6d4e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6d50:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6d52:	f88d 9008 	strb.w	r9, [sp, #8]
   b6d56:	f7fe fe68 	bl	b5a2a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6d5a:	4649      	mov	r1, r9
   b6d5c:	4640      	mov	r0, r8
   b6d5e:	f7fe f9bb 	bl	b50d8 <log_level_name>
    json.name("l", 1).value(s);
   b6d62:	4941      	ldr	r1, [pc, #260]	; (b6e68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6d64:	4680      	mov	r8, r0
   b6d66:	2201      	movs	r2, #1
   b6d68:	a801      	add	r0, sp, #4
   b6d6a:	f7fe feed 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d6e:	4641      	mov	r1, r8
   b6d70:	f7ff f98a 	bl	b6088 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6d74:	b13f      	cbz	r7, b6d86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b6d76:	493d      	ldr	r1, [pc, #244]	; (b6e6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6d78:	2201      	movs	r2, #1
   b6d7a:	a801      	add	r0, sp, #4
   b6d7c:	f7fe fee4 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d80:	4639      	mov	r1, r7
   b6d82:	f7ff f981 	bl	b6088 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6d86:	b13e      	cbz	r6, b6d98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b6d88:	4939      	ldr	r1, [pc, #228]	; (b6e70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6d8a:	2201      	movs	r2, #1
   b6d8c:	a801      	add	r0, sp, #4
   b6d8e:	f7fe fedb 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d92:	4631      	mov	r1, r6
   b6d94:	f7ff f978 	bl	b6088 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6d98:	7923      	ldrb	r3, [r4, #4]
   b6d9a:	07df      	lsls	r7, r3, #31
   b6d9c:	d50e      	bpl.n	b6dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6d9e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6da0:	212f      	movs	r1, #47	; 0x2f
   b6da2:	4630      	mov	r0, r6
   b6da4:	f001 fe15 	bl	b89d2 <strrchr>
    if (s1) {
   b6da8:	b100      	cbz	r0, b6dac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6daa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6dac:	4931      	ldr	r1, [pc, #196]	; (b6e74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6dae:	2201      	movs	r2, #1
   b6db0:	a801      	add	r0, sp, #4
   b6db2:	f7fe fec9 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6db6:	4631      	mov	r1, r6
   b6db8:	f7ff f966 	bl	b6088 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6dbc:	7923      	ldrb	r3, [r4, #4]
   b6dbe:	079e      	lsls	r6, r3, #30
   b6dc0:	d507      	bpl.n	b6dd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6dc2:	492d      	ldr	r1, [pc, #180]	; (b6e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6dc4:	2202      	movs	r2, #2
   b6dc6:	a801      	add	r0, sp, #4
   b6dc8:	f7fe febe 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6dcc:	68e1      	ldr	r1, [r4, #12]
   b6dce:	f7fe fe39 	bl	b5a44 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6dd2:	7923      	ldrb	r3, [r4, #4]
   b6dd4:	0758      	lsls	r0, r3, #29
   b6dd6:	d514      	bpl.n	b6e02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6dd8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6dda:	4633      	mov	r3, r6
   b6ddc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6dde:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6de2:	b12a      	cbz	r2, b6df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6de4:	2a20      	cmp	r2, #32
   b6de6:	d101      	bne.n	b6dec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6de8:	461e      	mov	r6, r3
   b6dea:	e7f7      	b.n	b6ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6dec:	2a28      	cmp	r2, #40	; 0x28
   b6dee:	d1f5      	bne.n	b6ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6df0:	4922      	ldr	r1, [pc, #136]	; (b6e7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6df2:	2202      	movs	r2, #2
   b6df4:	a801      	add	r0, sp, #4
   b6df6:	f7fe fea7 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6dfa:	1bba      	subs	r2, r7, r6
   b6dfc:	4631      	mov	r1, r6
   b6dfe:	f7fe feb3 	bl	b5b68 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6e02:	7923      	ldrb	r3, [r4, #4]
   b6e04:	0719      	lsls	r1, r3, #28
   b6e06:	d507      	bpl.n	b6e18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6e08:	491d      	ldr	r1, [pc, #116]	; (b6e80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6e0a:	2201      	movs	r2, #1
   b6e0c:	a801      	add	r0, sp, #4
   b6e0e:	f7fe fe9b 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6e12:	6961      	ldr	r1, [r4, #20]
   b6e14:	f7fe fe28 	bl	b5a68 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6e18:	7923      	ldrb	r3, [r4, #4]
   b6e1a:	06da      	lsls	r2, r3, #27
   b6e1c:	d508      	bpl.n	b6e30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6e1e:	2204      	movs	r2, #4
   b6e20:	4918      	ldr	r1, [pc, #96]	; (b6e84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6e22:	eb0d 0002 	add.w	r0, sp, r2
   b6e26:	f7fe fe8f 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6e2a:	69a1      	ldr	r1, [r4, #24]
   b6e2c:	f7fe fe0a 	bl	b5a44 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6e30:	7923      	ldrb	r3, [r4, #4]
   b6e32:	069b      	lsls	r3, r3, #26
   b6e34:	d507      	bpl.n	b6e46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6e36:	4914      	ldr	r1, [pc, #80]	; (b6e88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6e38:	2206      	movs	r2, #6
   b6e3a:	a801      	add	r0, sp, #4
   b6e3c:	f7fe fe84 	bl	b5b48 <_ZN5spark10JSONWriter4nameEPKcj>
   b6e40:	69e1      	ldr	r1, [r4, #28]
   b6e42:	f7ff f921 	bl	b6088 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6e46:	a801      	add	r0, sp, #4
   b6e48:	f7fe fdd9 	bl	b59fe <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6e4c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6e4e:	490f      	ldr	r1, [pc, #60]	; (b6e8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6e50:	6803      	ldr	r3, [r0, #0]
   b6e52:	2202      	movs	r2, #2
   b6e54:	68db      	ldr	r3, [r3, #12]
   b6e56:	4798      	blx	r3
}
   b6e58:	b005      	add	sp, #20
   b6e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6e5e:	bf00      	nop
   b6e60:	2003e69c 	.word	0x2003e69c
   b6e64:	000b90a0 	.word	0x000b90a0
   b6e68:	000b9032 	.word	0x000b9032
   b6e6c:	000b907f 	.word	0x000b907f
   b6e70:	000b94a3 	.word	0x000b94a3
   b6e74:	000b9081 	.word	0x000b9081
   b6e78:	000b9083 	.word	0x000b9083
   b6e7c:	000b9086 	.word	0x000b9086
   b6e80:	000b8dd2 	.word	0x000b8dd2
   b6e84:	000b9089 	.word	0x000b9089
   b6e88:	000b908e 	.word	0x000b908e
   b6e8c:	000b907c 	.word	0x000b907c

000b6e90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e92:	4606      	mov	r6, r0
   b6e94:	460d      	mov	r5, r1
  size_t n = 0;
   b6e96:	188f      	adds	r7, r1, r2
   b6e98:	2400      	movs	r4, #0
  while (size--) {
   b6e9a:	42bd      	cmp	r5, r7
   b6e9c:	d00c      	beq.n	b6eb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6e9e:	6833      	ldr	r3, [r6, #0]
   b6ea0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6ea4:	689b      	ldr	r3, [r3, #8]
   b6ea6:	4630      	mov	r0, r6
   b6ea8:	4798      	blx	r3
     if (chunk>=0)
   b6eaa:	1e03      	subs	r3, r0, #0
   b6eac:	db01      	blt.n	b6eb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6eae:	441c      	add	r4, r3
  while (size--) {
   b6eb0:	e7f3      	b.n	b6e9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6eb2:	2c00      	cmp	r4, #0
   b6eb4:	bf08      	it	eq
   b6eb6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6eb8:	4620      	mov	r0, r4
   b6eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ebc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6ebc:	b513      	push	{r0, r1, r4, lr}
   b6ebe:	4604      	mov	r4, r0
    }
   b6ec0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6ec2:	b159      	cbz	r1, b6edc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6ec4:	9101      	str	r1, [sp, #4]
   b6ec6:	f001 fd5c 	bl	b8982 <strlen>
   b6eca:	6823      	ldr	r3, [r4, #0]
   b6ecc:	9901      	ldr	r1, [sp, #4]
   b6ece:	68db      	ldr	r3, [r3, #12]
   b6ed0:	4602      	mov	r2, r0
   b6ed2:	4620      	mov	r0, r4
    }
   b6ed4:	b002      	add	sp, #8
   b6ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6eda:	4718      	bx	r3
    }
   b6edc:	b002      	add	sp, #8
   b6ede:	bd10      	pop	{r4, pc}

000b6ee0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6ee0:	6803      	ldr	r3, [r0, #0]
   b6ee2:	689b      	ldr	r3, [r3, #8]
   b6ee4:	4718      	bx	r3

000b6ee6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6ee6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6ee8:	210d      	movs	r1, #13
{
   b6eea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6eec:	f7ff fff8 	bl	b6ee0 <_ZN5Print5printEc>
  n += print('\n');
   b6ef0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6ef2:	4604      	mov	r4, r0
  n += print('\n');
   b6ef4:	4628      	mov	r0, r5
   b6ef6:	f7ff fff3 	bl	b6ee0 <_ZN5Print5printEc>
  return n;
}
   b6efa:	4420      	add	r0, r4
   b6efc:	bd38      	pop	{r3, r4, r5, pc}

000b6efe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6efe:	b530      	push	{r4, r5, lr}
   b6f00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6f02:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6f04:	2a01      	cmp	r2, #1
  *str = '\0';
   b6f06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6f0a:	bf98      	it	ls
   b6f0c:	220a      	movls	r2, #10
   b6f0e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6f10:	460d      	mov	r5, r1
   b6f12:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6f16:	fb01 5312 	mls	r3, r1, r2, r5
   b6f1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6f1e:	2b09      	cmp	r3, #9
   b6f20:	bf94      	ite	ls
   b6f22:	3330      	addls	r3, #48	; 0x30
   b6f24:	3337      	addhi	r3, #55	; 0x37
   b6f26:	b2db      	uxtb	r3, r3
  } while(n);
   b6f28:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6f2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6f2e:	d9ef      	bls.n	b6f10 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6f30:	4621      	mov	r1, r4
   b6f32:	f7ff ffc3 	bl	b6ebc <_ZN5Print5writeEPKc>
}
   b6f36:	b00b      	add	sp, #44	; 0x2c
   b6f38:	bd30      	pop	{r4, r5, pc}

000b6f3a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f3e:	b086      	sub	sp, #24
   b6f40:	af00      	add	r7, sp, #0
   b6f42:	4605      	mov	r5, r0
   b6f44:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6f46:	1d38      	adds	r0, r7, #4
   b6f48:	2114      	movs	r1, #20
{
   b6f4a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6f4c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6f4e:	f7fe f999 	bl	b5284 <vsnprintf>

    if (n<bufsize)
   b6f52:	2813      	cmp	r0, #19
   b6f54:	d80e      	bhi.n	b6f74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6f56:	1d39      	adds	r1, r7, #4
   b6f58:	4628      	mov	r0, r5
   b6f5a:	f7ff ffaf 	bl	b6ebc <_ZN5Print5writeEPKc>
   b6f5e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6f60:	b11e      	cbz	r6, b6f6a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6f62:	4628      	mov	r0, r5
   b6f64:	f7ff ffbf 	bl	b6ee6 <_ZN5Print7printlnEv>
   b6f68:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6f6a:	4620      	mov	r0, r4
   b6f6c:	3718      	adds	r7, #24
   b6f6e:	46bd      	mov	sp, r7
   b6f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6f74:	f100 0308 	add.w	r3, r0, #8
   b6f78:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6f7c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6f7e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6f82:	4622      	mov	r2, r4
   b6f84:	1c41      	adds	r1, r0, #1
   b6f86:	683b      	ldr	r3, [r7, #0]
   b6f88:	4668      	mov	r0, sp
   b6f8a:	f7fe f97b 	bl	b5284 <vsnprintf>
  return write(str);
   b6f8e:	4669      	mov	r1, sp
   b6f90:	4628      	mov	r0, r5
   b6f92:	f7ff ff93 	bl	b6ebc <_ZN5Print5writeEPKc>
   b6f96:	4604      	mov	r4, r0
   b6f98:	46c5      	mov	sp, r8
   b6f9a:	e7e1      	b.n	b6f60 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6f9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f9c:	4770      	bx	lr

000b6f9e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6f9e:	4770      	bx	lr

000b6fa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6fa0:	4770      	bx	lr

000b6fa2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6fa2:	4770      	bx	lr

000b6fa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6fa4:	4b06      	ldr	r3, [pc, #24]	; (b6fc0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6fa6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6fa8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6faa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6fae:	d005      	beq.n	b6fbc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6fb0:	4608      	mov	r0, r1
   b6fb2:	f001 fb2f 	bl	b8614 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6fb6:	2800      	cmp	r0, #0
   b6fb8:	bf08      	it	eq
   b6fba:	2400      	moveq	r4, #0
      }
   b6fbc:	4620      	mov	r0, r4
   b6fbe:	bd10      	pop	{r4, pc}
   b6fc0:	000b8f68 	.word	0x000b8f68

000b6fc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6fc4:	4b06      	ldr	r3, [pc, #24]	; (b6fe0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6fc6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6fc8:	b510      	push	{r4, lr}
   b6fca:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6fce:	d005      	beq.n	b6fdc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6fd0:	4608      	mov	r0, r1
   b6fd2:	f001 fb1f 	bl	b8614 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6fd6:	2800      	cmp	r0, #0
   b6fd8:	bf08      	it	eq
   b6fda:	2400      	moveq	r4, #0
      }
   b6fdc:	4620      	mov	r0, r4
   b6fde:	bd10      	pop	{r4, pc}
   b6fe0:	000b8f68 	.word	0x000b8f68

000b6fe4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6fe4:	4b06      	ldr	r3, [pc, #24]	; (b7000 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6fe6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6fe8:	b510      	push	{r4, lr}
   b6fea:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6fee:	d005      	beq.n	b6ffc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6ff0:	4608      	mov	r0, r1
   b6ff2:	f001 fb0f 	bl	b8614 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6ff6:	2800      	cmp	r0, #0
   b6ff8:	bf08      	it	eq
   b6ffa:	2400      	moveq	r4, #0
      }
   b6ffc:	4620      	mov	r0, r4
   b6ffe:	bd10      	pop	{r4, pc}
   b7000:	000b8f68 	.word	0x000b8f68

000b7004 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7004:	b510      	push	{r4, lr}
   b7006:	2168      	movs	r1, #104	; 0x68
   b7008:	4604      	mov	r4, r0
   b700a:	f7fd f848 	bl	b409e <_ZdlPvj>
   b700e:	4620      	mov	r0, r4
   b7010:	bd10      	pop	{r4, pc}

000b7012 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7012:	b510      	push	{r4, lr}
   b7014:	2128      	movs	r1, #40	; 0x28
   b7016:	4604      	mov	r4, r0
   b7018:	f7fd f841 	bl	b409e <_ZdlPvj>
   b701c:	4620      	mov	r0, r4
   b701e:	bd10      	pop	{r4, pc}

000b7020 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7020:	b510      	push	{r4, lr}
   b7022:	2130      	movs	r1, #48	; 0x30
   b7024:	4604      	mov	r4, r0
   b7026:	f7fd f83a 	bl	b409e <_ZdlPvj>
   b702a:	4620      	mov	r0, r4
   b702c:	bd10      	pop	{r4, pc}

000b702e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b702e:	2168      	movs	r1, #104	; 0x68
   b7030:	f7fd b835 	b.w	b409e <_ZdlPvj>

000b7034 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7034:	2128      	movs	r1, #40	; 0x28
   b7036:	f7fd b832 	b.w	b409e <_ZdlPvj>

000b703a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b703a:	2130      	movs	r1, #48	; 0x30
   b703c:	f7fd b82f 	b.w	b409e <_ZdlPvj>

000b7040 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7040:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7042:	2500      	movs	r5, #0
   b7044:	1cec      	adds	r4, r5, #3
   b7046:	428c      	cmp	r4, r1
   b7048:	d80d      	bhi.n	b7066 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b704a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b704c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b704e:	5d87      	ldrb	r7, [r0, r6]
   b7050:	4297      	cmp	r7, r2
   b7052:	d105      	bne.n	b7060 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7054:	4426      	add	r6, r4
   b7056:	42b1      	cmp	r1, r6
   b7058:	d305      	bcc.n	b7066 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b705a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b705c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7060:	3401      	adds	r4, #1
   b7062:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7064:	e7ee      	b.n	b7044 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7066:	2000      	movs	r0, #0
   b7068:	e7f9      	b.n	b705e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b706c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b706c:	4a02      	ldr	r2, [pc, #8]	; (b7078 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b706e:	4903      	ldr	r1, [pc, #12]	; (b707c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7070:	200a      	movs	r0, #10
   b7072:	f7fe b811 	b.w	b5098 <panic_>
   b7076:	bf00      	nop
   b7078:	000b5059 	.word	0x000b5059
   b707c:	000b9110 	.word	0x000b9110

000b7080 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7080:	b430      	push	{r4, r5}
   b7082:	460d      	mov	r5, r1
   b7084:	4611      	mov	r1, r2
   b7086:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7088:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b708a:	6809      	ldr	r1, [r1, #0]
   b708c:	6828      	ldr	r0, [r5, #0]
   b708e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7092:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7094:	bc30      	pop	{r4, r5}
   b7096:	4760      	bx	ip

000b7098 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7098:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b709a:	b538      	push	{r3, r4, r5, lr}
   b709c:	4604      	mov	r4, r0
	switch (__op)
   b709e:	d102      	bne.n	b70a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b70a0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b70a2:	6023      	str	r3, [r4, #0]
	}
   b70a4:	e003      	b.n	b70ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b70a6:	2a02      	cmp	r2, #2
   b70a8:	d003      	beq.n	b70b2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b70aa:	2a03      	cmp	r2, #3
   b70ac:	d00d      	beq.n	b70ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b70ae:	2000      	movs	r0, #0
   b70b0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b70b2:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b70b4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b70b6:	f7fc ffec 	bl	b4092 <_Znwj>
   b70ba:	4603      	mov	r3, r0
   b70bc:	2800      	cmp	r0, #0
   b70be:	d0f0      	beq.n	b70a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b70c0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b70c4:	e883 0003 	stmia.w	r3, {r0, r1}
   b70c8:	e7eb      	b.n	b70a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b70ca:	6800      	ldr	r0, [r0, #0]
   b70cc:	2800      	cmp	r0, #0
   b70ce:	d0ee      	beq.n	b70ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b70d0:	2108      	movs	r1, #8
   b70d2:	f7fc ffe4 	bl	b409e <_ZdlPvj>
   b70d6:	e7ea      	b.n	b70ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b70d8 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b70d8:	b510      	push	{r4, lr}
   b70da:	3801      	subs	r0, #1
   b70dc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b70e0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b70e4:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b70e6:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b70ea:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b70ec:	bf88      	it	hi
   b70ee:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b70f2:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b70f6:	7803      	ldrb	r3, [r0, #0]
   b70f8:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b70fc:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b7100:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b7102:	bf88      	it	hi
   b7104:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b7108:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b710a:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b710e:	d1e7      	bne.n	b70e0 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b7110:	bd10      	pop	{r4, pc}

000b7112 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7112:	b510      	push	{r4, lr}
   b7114:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7116:	3058      	adds	r0, #88	; 0x58
   b7118:	f7fe f8dc 	bl	b52d4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b711c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7124:	f001 b924 	b.w	b8370 <_ZN6StringD1Ev>

000b7128 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7128:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b712c:	b2da      	uxtb	r2, r3
   b712e:	2a09      	cmp	r2, #9
   b7130:	d801      	bhi.n	b7136 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7132:	4618      	mov	r0, r3
   b7134:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7136:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b713a:	2b05      	cmp	r3, #5
   b713c:	d801      	bhi.n	b7142 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b713e:	3857      	subs	r0, #87	; 0x57
   b7140:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7142:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7146:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7148:	bf94      	ite	ls
   b714a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b714c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7150:	4770      	bx	lr
	...

000b7154 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7154:	b510      	push	{r4, lr}
            locked_(false) {
   b7156:	2300      	movs	r3, #0
   b7158:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b715a:	4b04      	ldr	r3, [pc, #16]	; (b716c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b715c:	4604      	mov	r4, r0
   b715e:	6818      	ldr	r0, [r3, #0]
   b7160:	f7fd fee0 	bl	b4f24 <os_mutex_recursive_lock>
        locked_ = true;
   b7164:	2301      	movs	r3, #1
   b7166:	7023      	strb	r3, [r4, #0]
    }
   b7168:	4620      	mov	r0, r4
   b716a:	bd10      	pop	{r4, pc}
   b716c:	2003e720 	.word	0x2003e720

000b7170 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7170:	b510      	push	{r4, lr}
        if (locked_) {
   b7172:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7174:	4604      	mov	r4, r0
        if (locked_) {
   b7176:	b11b      	cbz	r3, b7180 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7178:	4b02      	ldr	r3, [pc, #8]	; (b7184 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b717a:	6818      	ldr	r0, [r3, #0]
   b717c:	f7fd feda 	bl	b4f34 <os_mutex_recursive_unlock>
    }
   b7180:	4620      	mov	r0, r4
   b7182:	bd10      	pop	{r4, pc}
   b7184:	2003e720 	.word	0x2003e720

000b7188 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7188:	b082      	sub	sp, #8
   b718a:	4603      	mov	r3, r0
    address_ = addr;
   b718c:	6808      	ldr	r0, [r1, #0]
   b718e:	6849      	ldr	r1, [r1, #4]
   b7190:	466a      	mov	r2, sp
   b7192:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7194:	466a      	mov	r2, sp
   b7196:	ca03      	ldmia	r2!, {r0, r1}
   b7198:	6018      	str	r0, [r3, #0]
}
   b719a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b719c:	6059      	str	r1, [r3, #4]
}
   b719e:	b002      	add	sp, #8
   b71a0:	4770      	bx	lr

000b71a2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b71a2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b71a4:	7982      	ldrb	r2, [r0, #6]
   b71a6:	798b      	ldrb	r3, [r1, #6]
   b71a8:	429a      	cmp	r2, r3
   b71aa:	d106      	bne.n	b71ba <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b71ac:	2206      	movs	r2, #6
   b71ae:	f001 fb51 	bl	b8854 <memcmp>
   b71b2:	fab0 f080 	clz	r0, r0
   b71b6:	0940      	lsrs	r0, r0, #5
}
   b71b8:	bd08      	pop	{r3, pc}
    return false;
   b71ba:	2000      	movs	r0, #0
   b71bc:	e7fc      	b.n	b71b8 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b71be <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b71be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b71c2:	6003      	str	r3, [r0, #0]
   b71c4:	8083      	strh	r3, [r0, #4]
}
   b71c6:	2000      	movs	r0, #0
   b71c8:	4770      	bx	lr

000b71ca <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b71ca:	b508      	push	{r3, lr}
   b71cc:	4602      	mov	r2, r0
        : address_{} {
   b71ce:	2100      	movs	r1, #0
   b71d0:	6001      	str	r1, [r0, #0]
   b71d2:	6041      	str	r1, [r0, #4]
    clear();
   b71d4:	f7ff fff3 	bl	b71be <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b71d8:	7191      	strb	r1, [r2, #6]
}
   b71da:	4610      	mov	r0, r2
   b71dc:	bd08      	pop	{r3, pc}

000b71de <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b71de:	b510      	push	{r4, lr}
   b71e0:	1d43      	adds	r3, r0, #5
   b71e2:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b71e4:	781c      	ldrb	r4, [r3, #0]
   b71e6:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b71ea:	4283      	cmp	r3, r0
   b71ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b71f0:	d1f8      	bne.n	b71e4 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b71f2:	bd10      	pop	{r4, pc}

000b71f4 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b71f4:	b570      	push	{r4, r5, r6, lr}
   b71f6:	4614      	mov	r4, r2
   b71f8:	b088      	sub	sp, #32
   b71fa:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b71fc:	460d      	mov	r5, r1
   b71fe:	2900      	cmp	r1, #0
   b7200:	d048      	beq.n	b7294 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b7202:	b1a4      	cbz	r4, b722e <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b7204:	a901      	add	r1, sp, #4
   b7206:	f7ff ffea 	bl	b71de <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b720a:	b19a      	cbz	r2, b7234 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b720c:	aa03      	add	r2, sp, #12
   b720e:	2106      	movs	r1, #6
   b7210:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b7212:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7214:	f7ff ff60 	bl	b70d8 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b7218:	2e11      	cmp	r6, #17
   b721a:	bf28      	it	cs
   b721c:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b721e:	4632      	mov	r2, r6
   b7220:	a903      	add	r1, sp, #12
   b7222:	4628      	mov	r0, r5
   b7224:	f001 fb26 	bl	b8874 <memcpy>
    buf[len++] = '\0';
   b7228:	2300      	movs	r3, #0
   b722a:	55ab      	strb	r3, [r5, r6]
   b722c:	1c74      	adds	r4, r6, #1
}
   b722e:	4620      	mov	r0, r4
   b7230:	b008      	add	sp, #32
   b7232:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b7234:	aa03      	add	r2, sp, #12
   b7236:	2101      	movs	r1, #1
   b7238:	a801      	add	r0, sp, #4
   b723a:	f7ff ff4d 	bl	b70d8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b723e:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b7240:	f10d 020f 	add.w	r2, sp, #15
   b7244:	2101      	movs	r1, #1
   b7246:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b724a:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b724e:	f7ff ff43 	bl	b70d8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7252:	f10d 0212 	add.w	r2, sp, #18
   b7256:	2101      	movs	r1, #1
   b7258:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b725c:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7260:	f7ff ff3a 	bl	b70d8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7264:	f10d 0215 	add.w	r2, sp, #21
   b7268:	2101      	movs	r1, #1
   b726a:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b726e:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7272:	f7ff ff31 	bl	b70d8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7276:	aa06      	add	r2, sp, #24
   b7278:	2101      	movs	r1, #1
   b727a:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b727c:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7280:	f7ff ff2a 	bl	b70d8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b7284:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7288:	f10d 021b 	add.w	r2, sp, #27
   b728c:	2101      	movs	r1, #1
   b728e:	f10d 0009 	add.w	r0, sp, #9
   b7292:	e7be      	b.n	b7212 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b7294:	460c      	mov	r4, r1
   b7296:	e7ca      	b.n	b722e <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b7298 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b7298:	b510      	push	{r4, lr}
   b729a:	b086      	sub	sp, #24
   b729c:	4604      	mov	r4, r0
   b729e:	4613      	mov	r3, r2
   b72a0:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b72a2:	2212      	movs	r2, #18
   b72a4:	a901      	add	r1, sp, #4
   b72a6:	f7ff ffa5 	bl	b71f4 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b72aa:	a901      	add	r1, sp, #4
   b72ac:	4620      	mov	r0, r4
   b72ae:	f001 f8aa 	bl	b8406 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b72b2:	4620      	mov	r0, r4
   b72b4:	b006      	add	sp, #24
   b72b6:	bd10      	pop	{r4, pc}

000b72b8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b72b8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b72ba:	2301      	movs	r3, #1
   b72bc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b72be:	4b05      	ldr	r3, [pc, #20]	; (b72d4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b72c0:	4602      	mov	r2, r0
   b72c2:	f103 0110 	add.w	r1, r3, #16
   b72c6:	f853 4b04 	ldr.w	r4, [r3], #4
   b72ca:	f842 4b04 	str.w	r4, [r2], #4
   b72ce:	428b      	cmp	r3, r1
   b72d0:	d1f9      	bne.n	b72c6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b72d2:	bd10      	pop	{r4, pc}
   b72d4:	000b92ae 	.word	0x000b92ae

000b72d8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b72d8:	b510      	push	{r4, lr}
    if (uuid128) {
   b72da:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b72dc:	4604      	mov	r4, r0
    if (uuid128) {
   b72de:	b1b1      	cbz	r1, b730e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b72e0:	2a01      	cmp	r2, #1
   b72e2:	f101 0210 	add.w	r2, r1, #16
   b72e6:	d10a      	bne.n	b72fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b72e8:	4601      	mov	r1, r0
   b72ea:	f853 0b04 	ldr.w	r0, [r3], #4
   b72ee:	f841 0b04 	str.w	r0, [r1], #4
   b72f2:	4293      	cmp	r3, r2
   b72f4:	d1f9      	bne.n	b72ea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b72f6:	2301      	movs	r3, #1
   b72f8:	6123      	str	r3, [r4, #16]
}
   b72fa:	4620      	mov	r0, r4
   b72fc:	bd10      	pop	{r4, pc}
   b72fe:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7300:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7304:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7308:	429a      	cmp	r2, r3
   b730a:	d1f9      	bne.n	b7300 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b730c:	e7f3      	b.n	b72f6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b730e:	2210      	movs	r2, #16
   b7310:	f001 fad8 	bl	b88c4 <memset>
   b7314:	e7f1      	b.n	b72fa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7316 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7316:	b538      	push	{r3, r4, r5, lr}
   b7318:	4604      	mov	r4, r0
   b731a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b731c:	461a      	mov	r2, r3
   b731e:	f7ff ffdb 	bl	b72d8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7322:	81a5      	strh	r5, [r4, #12]
}
   b7324:	4620      	mov	r0, r4
   b7326:	bd38      	pop	{r3, r4, r5, pc}

000b7328 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7328:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b732a:	6902      	ldr	r2, [r0, #16]
   b732c:	b922      	cbnz	r2, b7338 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b732e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7330:	3800      	subs	r0, #0
   b7332:	bf18      	it	ne
   b7334:	2001      	movne	r0, #1
}
   b7336:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7338:	4902      	ldr	r1, [pc, #8]	; (b7344 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b733a:	2210      	movs	r2, #16
   b733c:	f001 fa8a 	bl	b8854 <memcmp>
   b7340:	e7f6      	b.n	b7330 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7342:	bf00      	nop
   b7344:	000b92ce 	.word	0x000b92ce

000b7348 <_ZNK8particle7BleUuid4typeEv>:
}
   b7348:	6900      	ldr	r0, [r0, #16]
   b734a:	4770      	bx	lr

000b734c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b734c:	b538      	push	{r3, r4, r5, lr}
   b734e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7350:	2214      	movs	r2, #20
   b7352:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7354:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7356:	f001 fab5 	bl	b88c4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b735a:	6923      	ldr	r3, [r4, #16]
   b735c:	b91b      	cbnz	r3, b7366 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b735e:	89a3      	ldrh	r3, [r4, #12]
   b7360:	802b      	strh	r3, [r5, #0]
}
   b7362:	4628      	mov	r0, r5
   b7364:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7366:	2301      	movs	r3, #1
   b7368:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b736a:	4621      	mov	r1, r4
   b736c:	462b      	mov	r3, r5
   b736e:	f104 0210 	add.w	r2, r4, #16
   b7372:	f851 0b04 	ldr.w	r0, [r1], #4
   b7376:	f843 0b04 	str.w	r0, [r3], #4
   b737a:	4291      	cmp	r1, r2
   b737c:	d1f9      	bne.n	b7372 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b737e:	e7f0      	b.n	b7362 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7380 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7380:	8980      	ldrh	r0, [r0, #12]
   b7382:	4770      	bx	lr

000b7384 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7384:	4770      	bx	lr

000b7386 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7386:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7388:	6902      	ldr	r2, [r0, #16]
   b738a:	690b      	ldr	r3, [r1, #16]
   b738c:	429a      	cmp	r2, r3
   b738e:	d106      	bne.n	b739e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7390:	2210      	movs	r2, #16
   b7392:	f001 fa5f 	bl	b8854 <memcmp>
   b7396:	fab0 f080 	clz	r0, r0
   b739a:	0940      	lsrs	r0, r0, #5
}
   b739c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b739e:	2000      	movs	r0, #0
   b73a0:	e7fc      	b.n	b739c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b73a4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b73a4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b73a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b73aa:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b73ac:	4b34      	ldr	r3, [pc, #208]	; (b7480 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b73ae:	460c      	mov	r4, r1
   b73b0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b73b2:	4602      	mov	r2, r0
   b73b4:	f103 0110 	add.w	r1, r3, #16
   b73b8:	f853 0b04 	ldr.w	r0, [r3], #4
   b73bc:	f842 0b04 	str.w	r0, [r2], #4
   b73c0:	428b      	cmp	r3, r1
   b73c2:	d1f9      	bne.n	b73b8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b73c4:	b344      	cbz	r4, b7418 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b73c6:	2124      	movs	r1, #36	; 0x24
   b73c8:	4620      	mov	r0, r4
   b73ca:	f001 faf6 	bl	b89ba <strnlen>
   b73ce:	2804      	cmp	r0, #4
   b73d0:	f04f 0500 	mov.w	r5, #0
   b73d4:	d123      	bne.n	b741e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b73d6:	f8ad 5004 	strh.w	r5, [sp, #4]
   b73da:	af01      	add	r7, sp, #4
   b73dc:	1ca5      	adds	r5, r4, #2
   b73de:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b73e0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b73e4:	f7ff fea0 	bl	b7128 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b73e8:	f1b0 0800 	subs.w	r8, r0, #0
   b73ec:	db12      	blt.n	b7414 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b73ee:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b73f2:	f7ff fe99 	bl	b7128 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b73f6:	2800      	cmp	r0, #0
   b73f8:	db0c      	blt.n	b7414 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b73fa:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b73fc:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7400:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7402:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7406:	d1eb      	bne.n	b73e0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7408:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b740c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b740e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7412:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7414:	2300      	movs	r3, #0
   b7416:	6133      	str	r3, [r6, #16]
}
   b7418:	b002      	add	sp, #8
   b741a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b741e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7422:	2124      	movs	r1, #36	; 0x24
   b7424:	4620      	mov	r0, r4
   b7426:	f001 fac8 	bl	b89ba <strnlen>
   b742a:	42a8      	cmp	r0, r5
   b742c:	d807      	bhi.n	b743e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b742e:	4642      	mov	r2, r8
   b7430:	2100      	movs	r1, #0
   b7432:	4630      	mov	r0, r6
}
   b7434:	b002      	add	sp, #8
   b7436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b743a:	f001 ba43 	b.w	b88c4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b743e:	f1b8 0f00 	cmp.w	r8, #0
   b7442:	d0e9      	beq.n	b7418 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7444:	5d60      	ldrb	r0, [r4, r5]
   b7446:	f7ff fe6f 	bl	b7128 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b744a:	0603      	lsls	r3, r0, #24
   b744c:	d415      	bmi.n	b747a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b744e:	0100      	lsls	r0, r0, #4
   b7450:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7454:	b2c7      	uxtb	r7, r0
   b7456:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b745a:	2124      	movs	r1, #36	; 0x24
   b745c:	4620      	mov	r0, r4
   b745e:	f001 faac 	bl	b89ba <strnlen>
   b7462:	3501      	adds	r5, #1
   b7464:	42a8      	cmp	r0, r5
   b7466:	d908      	bls.n	b747a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7468:	5d60      	ldrb	r0, [r4, r5]
   b746a:	f7ff fe5d 	bl	b7128 <_ZN8particle11hexToNibbleEc>
   b746e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7470:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7472:	bfa4      	itt	ge
   b7474:	4338      	orrge	r0, r7
   b7476:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b747a:	3501      	adds	r5, #1
   b747c:	e7d1      	b.n	b7422 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b747e:	bf00      	nop
   b7480:	000b92ae 	.word	0x000b92ae

000b7484 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7484:	b513      	push	{r0, r1, r4, lr}
   b7486:	4604      	mov	r4, r0
   b7488:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b748a:	f7ff ff15 	bl	b72b8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b748e:	4620      	mov	r0, r4
   b7490:	9901      	ldr	r1, [sp, #4]
   b7492:	f7ff ff87 	bl	b73a4 <_ZN8particle7BleUuid9constructEPKc>
}
   b7496:	4620      	mov	r0, r4
   b7498:	b002      	add	sp, #8
   b749a:	bd10      	pop	{r4, pc}

000b749c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b749c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b749e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b74a2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b74a4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b74a6:	8043      	strh	r3, [r0, #2]
   b74a8:	220e      	movs	r2, #14
   b74aa:	4629      	mov	r1, r5
   b74ac:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b74ae:	7105      	strb	r5, [r0, #4]
   b74b0:	3006      	adds	r0, #6
   b74b2:	f001 fa07 	bl	b88c4 <memset>
   b74b6:	f104 0014 	add.w	r0, r4, #20
   b74ba:	f7ff fefd 	bl	b72b8 <_ZN8particle7BleUuidC1Ev>
   b74be:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b74c2:	f7ff fef9 	bl	b72b8 <_ZN8particle7BleUuidC1Ev>
   b74c6:	4904      	ldr	r1, [pc, #16]	; (b74d8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b74c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b74cc:	f000 ff9b 	bl	b8406 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b74d0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b74d2:	4620      	mov	r0, r4
   b74d4:	bd38      	pop	{r3, r4, r5, pc}
   b74d6:	bf00      	nop
   b74d8:	000b907e 	.word	0x000b907e

000b74dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b74dc:	b510      	push	{r4, lr}
    return data_ + size_;
   b74de:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b74e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b74e6:	4293      	cmp	r3, r2
   b74e8:	4618      	mov	r0, r3
   b74ea:	d006      	beq.n	b74fa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b74ec:	6804      	ldr	r4, [r0, #0]
   b74ee:	8824      	ldrh	r4, [r4, #0]
   b74f0:	428c      	cmp	r4, r1
   b74f2:	f103 0308 	add.w	r3, r3, #8
   b74f6:	d1f6      	bne.n	b74e6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b74f8:	bd10      	pop	{r4, pc}
        return nullptr;
   b74fa:	2000      	movs	r0, #0
   b74fc:	e7fc      	b.n	b74f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7500 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7500:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7502:	4606      	mov	r6, r0
   b7504:	b085      	sub	sp, #20
   b7506:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7508:	460d      	mov	r5, r1
   b750a:	2900      	cmp	r1, #0
   b750c:	d050      	beq.n	b75b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b750e:	2a00      	cmp	r2, #0
   b7510:	d04e      	beq.n	b75b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b7512:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7514:	7823      	ldrb	r3, [r4, #0]
   b7516:	2af4      	cmp	r2, #244	; 0xf4
   b7518:	bf28      	it	cs
   b751a:	22f4      	movcs	r2, #244	; 0xf4
   b751c:	b343      	cbz	r3, b7570 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b751e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7520:	0798      	lsls	r0, r3, #30
   b7522:	d509      	bpl.n	b7538 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7524:	89a0      	ldrh	r0, [r4, #12]
   b7526:	9203      	str	r2, [sp, #12]
   b7528:	2300      	movs	r3, #0
   b752a:	f7fd fd47 	bl	b4fbc <hal_ble_gatt_server_set_characteristic_value>
   b752e:	2800      	cmp	r0, #0
   b7530:	9a03      	ldr	r2, [sp, #12]
   b7532:	da03      	bge.n	b753c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7534:	b005      	add	sp, #20
   b7536:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7538:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b753c:	6834      	ldr	r4, [r6, #0]
   b753e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7540:	06d9      	lsls	r1, r3, #27
   b7542:	d509      	bpl.n	b7558 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7544:	2f01      	cmp	r7, #1
   b7546:	d007      	beq.n	b7558 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7548:	89a0      	ldrh	r0, [r4, #12]
   b754a:	2300      	movs	r3, #0
   b754c:	4629      	mov	r1, r5
}
   b754e:	b005      	add	sp, #20
   b7550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7554:	f7fd bd64 	b.w	b5020 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7558:	069b      	lsls	r3, r3, #26
   b755a:	d5eb      	bpl.n	b7534 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b755c:	2f02      	cmp	r7, #2
   b755e:	d0e9      	beq.n	b7534 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7560:	89a0      	ldrh	r0, [r4, #12]
   b7562:	2300      	movs	r3, #0
   b7564:	4629      	mov	r1, r5
}
   b7566:	b005      	add	sp, #20
   b7568:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b756c:	f7fd bd62 	b.w	b5034 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7570:	8860      	ldrh	r0, [r4, #2]
   b7572:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7576:	4288      	cmp	r0, r1
   b7578:	d01c      	beq.n	b75b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b757a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b757c:	074e      	lsls	r6, r1, #29
   b757e:	d501      	bpl.n	b7584 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7580:	2f01      	cmp	r7, #1
   b7582:	d104      	bne.n	b758e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7584:	070b      	lsls	r3, r1, #28
   b7586:	d409      	bmi.n	b759c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7588:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b758c:	e7d2      	b.n	b7534 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b758e:	89a1      	ldrh	r1, [r4, #12]
   b7590:	9300      	str	r3, [sp, #0]
   b7592:	4613      	mov	r3, r2
   b7594:	462a      	mov	r2, r5
   b7596:	f7fd fd25 	bl	b4fe4 <hal_ble_gatt_client_write_without_response>
   b759a:	e7cb      	b.n	b7534 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b759c:	2f02      	cmp	r7, #2
   b759e:	d0f3      	beq.n	b7588 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b75a0:	2300      	movs	r3, #0
   b75a2:	89a1      	ldrh	r1, [r4, #12]
   b75a4:	9300      	str	r3, [sp, #0]
   b75a6:	4613      	mov	r3, r2
   b75a8:	462a      	mov	r2, r5
   b75aa:	f7fd fd11 	bl	b4fd0 <hal_ble_gatt_client_write_with_response>
   b75ae:	e7c1      	b.n	b7534 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b75b0:	4802      	ldr	r0, [pc, #8]	; (b75bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b75b2:	e7bf      	b.n	b7534 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b75b4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b75b8:	e7bc      	b.n	b7534 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b75ba:	bf00      	nop
   b75bc:	fffffef2 	.word	0xfffffef2

000b75c0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b75c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b75c4:	2600      	movs	r6, #0
   b75c6:	6006      	str	r6, [r0, #0]
   b75c8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b75ca:	2028      	movs	r0, #40	; 0x28
   b75cc:	460c      	mov	r4, r1
   b75ce:	f7fc fd60 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b75d2:	1e05      	subs	r5, r0, #0
   b75d4:	f105 080c 	add.w	r8, r5, #12
   b75d8:	d00f      	beq.n	b75fa <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b75da:	2301      	movs	r3, #1
   b75dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b75e0:	4b08      	ldr	r3, [pc, #32]	; (b7604 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b75e2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b75e4:	4640      	mov	r0, r8
   b75e6:	f7ff fe67 	bl	b72b8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b75ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b75ec:	622e      	str	r6, [r5, #32]
   b75ee:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b75f2:	4646      	mov	r6, r8
   b75f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b75f6:	6823      	ldr	r3, [r4, #0]
   b75f8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b75fa:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b75fe:	4638      	mov	r0, r7
   b7600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7604:	000b9278 	.word	0x000b9278

000b7608 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7608:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b760a:	2500      	movs	r5, #0
   b760c:	6005      	str	r5, [r0, #0]
   b760e:	4606      	mov	r6, r0
   b7610:	2030      	movs	r0, #48	; 0x30
   b7612:	f7fc fd3e 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7616:	4604      	mov	r4, r0
   b7618:	b188      	cbz	r0, b763e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b761a:	2301      	movs	r3, #1
   b761c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7620:	4b09      	ldr	r3, [pc, #36]	; (b7648 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7622:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7624:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7628:	8183      	strh	r3, [r0, #12]
   b762a:	300e      	adds	r0, #14
   b762c:	f7ff fdcd 	bl	b71ca <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7630:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7634:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7638:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b763c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b763e:	6074      	str	r4, [r6, #4]
   b7640:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7642:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7644:	4630      	mov	r0, r6
   b7646:	bd70      	pop	{r4, r5, r6, pc}
   b7648:	000b9294 	.word	0x000b9294

000b764c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b764c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b764e:	460d      	mov	r5, r1
   b7650:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7652:	a801      	add	r0, sp, #4
   b7654:	f7ff fd7e 	bl	b7154 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7658:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b765a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b765e:	6023      	str	r3, [r4, #0]
   b7660:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7664:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7666:	a801      	add	r0, sp, #4
   b7668:	f7ff fd82 	bl	b7170 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b766c:	4620      	mov	r0, r4
   b766e:	b003      	add	sp, #12
   b7670:	bd30      	pop	{r4, r5, pc}

000b7672 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7672:	b530      	push	{r4, r5, lr}
   b7674:	4605      	mov	r5, r0
   b7676:	b087      	sub	sp, #28
   b7678:	460c      	mov	r4, r1
    WiringBleLock lk;
   b767a:	a801      	add	r0, sp, #4
   b767c:	f7ff fd6a 	bl	b7154 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7680:	682a      	ldr	r2, [r5, #0]
   b7682:	6823      	ldr	r3, [r4, #0]
   b7684:	8812      	ldrh	r2, [r2, #0]
   b7686:	881b      	ldrh	r3, [r3, #0]
   b7688:	429a      	cmp	r2, r3
   b768a:	d10d      	bne.n	b76a8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b768c:	4629      	mov	r1, r5
   b768e:	a802      	add	r0, sp, #8
   b7690:	f7ff ffdc 	bl	b764c <_ZNK8particle13BlePeerDevice7addressEv>
   b7694:	4621      	mov	r1, r4
   b7696:	a804      	add	r0, sp, #16
   b7698:	f7ff ffd8 	bl	b764c <_ZNK8particle13BlePeerDevice7addressEv>
   b769c:	a904      	add	r1, sp, #16
   b769e:	a802      	add	r0, sp, #8
   b76a0:	f7ff fd7f 	bl	b71a2 <_ZNK8particle10BleAddresseqERKS0_>
   b76a4:	4604      	mov	r4, r0
   b76a6:	b900      	cbnz	r0, b76aa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b76a8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b76aa:	a801      	add	r0, sp, #4
   b76ac:	f7ff fd60 	bl	b7170 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b76b0:	4620      	mov	r0, r4
   b76b2:	b007      	add	sp, #28
   b76b4:	bd30      	pop	{r4, r5, pc}
	...

000b76b8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b76b8:	b510      	push	{r4, lr}
   b76ba:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b76bc:	2064      	movs	r0, #100	; 0x64
   b76be:	f7fc fce8 	bl	b4092 <_Znwj>
   b76c2:	b168      	cbz	r0, b76e0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b76c4:	2300      	movs	r3, #0
   b76c6:	e9c0 3300 	strd	r3, r3, [r0]
   b76ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b76ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b76d2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b76d6:	6203      	str	r3, [r0, #32]
   b76d8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b76da:	63c3      	str	r3, [r0, #60]	; 0x3c
   b76dc:	64c3      	str	r3, [r0, #76]	; 0x4c
   b76de:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b76e0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b76e2:	b920      	cbnz	r0, b76ee <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b76e4:	4a0a      	ldr	r2, [pc, #40]	; (b7710 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b76e6:	490b      	ldr	r1, [pc, #44]	; (b7714 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b76e8:	200a      	movs	r0, #10
   b76ea:	f7fd fcd5 	bl	b5098 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b76ee:	2000      	movs	r0, #0
   b76f0:	f7fd fc28 	bl	b4f44 <hal_ble_stack_init>
   b76f4:	b120      	cbz	r0, b7700 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b76f6:	4a06      	ldr	r2, [pc, #24]	; (b7710 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b76f8:	4907      	ldr	r1, [pc, #28]	; (b7718 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b76fa:	200a      	movs	r0, #10
   b76fc:	f7fd fccc 	bl	b5098 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7700:	6821      	ldr	r1, [r4, #0]
   b7702:	4806      	ldr	r0, [pc, #24]	; (b771c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7704:	2200      	movs	r2, #0
   b7706:	f7fd fc81 	bl	b500c <hal_ble_set_callback_on_periph_link_events>
}
   b770a:	4620      	mov	r0, r4
   b770c:	bd10      	pop	{r4, pc}
   b770e:	bf00      	nop
   b7710:	000b5059 	.word	0x000b5059
   b7714:	000b9110 	.word	0x000b9110
   b7718:	000b9143 	.word	0x000b9143
   b771c:	000b7c8d 	.word	0x000b7c8d

000b7720 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7720:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7722:	4c0a      	ldr	r4, [pc, #40]	; (b774c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7724:	7823      	ldrb	r3, [r4, #0]
   b7726:	f3bf 8f5b 	dmb	ish
   b772a:	07db      	lsls	r3, r3, #31
   b772c:	d40c      	bmi.n	b7748 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b772e:	4620      	mov	r0, r4
   b7730:	f7fc fcc4 	bl	b40bc <__cxa_guard_acquire>
   b7734:	b140      	cbz	r0, b7748 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7736:	4806      	ldr	r0, [pc, #24]	; (b7750 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7738:	f7ff ffbe 	bl	b76b8 <_ZN8particle14BleLocalDeviceC1Ev>
   b773c:	4620      	mov	r0, r4
   b773e:	f7fc fcc2 	bl	b40c6 <__cxa_guard_release>
   b7742:	4804      	ldr	r0, [pc, #16]	; (b7754 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7744:	f001 f878 	bl	b8838 <atexit>
    return instance;
}
   b7748:	4801      	ldr	r0, [pc, #4]	; (b7750 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b774a:	bd10      	pop	{r4, pc}
   b774c:	2003e718 	.word	0x2003e718
   b7750:	2003e724 	.word	0x2003e724
   b7754:	000b7979 	.word	0x000b7979

000b7758 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7758:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b775a:	6803      	ldr	r3, [r0, #0]
   b775c:	3b09      	subs	r3, #9
   b775e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7760:	b08d      	sub	sp, #52	; 0x34
   b7762:	4604      	mov	r4, r0
   b7764:	460d      	mov	r5, r1
    switch (event->type) {
   b7766:	d811      	bhi.n	b778c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7768:	f7ff ffda 	bl	b7720 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b776c:	88a1      	ldrh	r1, [r4, #4]
   b776e:	6800      	ldr	r0, [r0, #0]
   b7770:	f7ff feb4 	bl	b74dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7774:	4603      	mov	r3, r0
   b7776:	b958      	cbnz	r0, b7790 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7778:	2220      	movs	r2, #32
   b777a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b777e:	4a0b      	ldr	r2, [pc, #44]	; (b77ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7780:	9200      	str	r2, [sp, #0]
   b7782:	490b      	ldr	r1, [pc, #44]	; (b77b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7784:	aa04      	add	r2, sp, #16
   b7786:	2032      	movs	r0, #50	; 0x32
   b7788:	f7fd fc96 	bl	b50b8 <log_message>
}
   b778c:	b00d      	add	sp, #52	; 0x34
   b778e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7790:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7792:	2a00      	cmp	r2, #0
   b7794:	d0fa      	beq.n	b778c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7796:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b779a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b779e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b77a2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b77a4:	aa04      	add	r2, sp, #16
   b77a6:	a903      	add	r1, sp, #12
   b77a8:	47a0      	blx	r4
}
   b77aa:	e7ef      	b.n	b778c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b77ac:	000b9185 	.word	0x000b9185
   b77b0:	000b8c42 	.word	0x000b8c42

000b77b4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b77b4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b77b6:	2000      	movs	r0, #0
   b77b8:	f7fd fbc4 	bl	b4f44 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b77bc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b77c0:	bd08      	pop	{r3, pc}

000b77c2 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   b77c2:	b513      	push	{r0, r1, r4, lr}
   b77c4:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   b77c6:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b77c8:	4668      	mov	r0, sp
    hal_ble_addr_t halAddr = {};
   b77ca:	e9cd 1100 	strd	r1, r1, [sp]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b77ce:	f7fd fbc1 	bl	b4f54 <hal_ble_gap_get_device_address>
    address_ = addr;
   b77d2:	466b      	mov	r3, sp
   b77d4:	cb03      	ldmia	r3!, {r0, r1}
   b77d6:	6020      	str	r0, [r4, #0]
    return BleAddress(halAddr);
}
   b77d8:	4620      	mov	r0, r4
    address_ = addr;
   b77da:	6061      	str	r1, [r4, #4]
}
   b77dc:	b002      	add	sp, #8
   b77de:	bd10      	pop	{r4, pc}

000b77e0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b77e0:	b919      	cbnz	r1, b77ea <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b77e2:	460a      	mov	r2, r1
   b77e4:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b77e6:	f7fd bbbd 	b.w	b4f64 <hal_ble_gap_set_advertising_data>
   b77ea:	e9d1 0100 	ldrd	r0, r1, [r1]
   b77ee:	2200      	movs	r2, #0
   b77f0:	e7f9      	b.n	b77e6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b77f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b77f2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b77f4:	1e14      	subs	r4, r2, #0
   b77f6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b77f8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b77fa:	db02      	blt.n	b7802 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b77fc:	1862      	adds	r2, r4, r1
   b77fe:	429a      	cmp	r2, r3
   b7800:	dd00      	ble.n	b7804 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7802:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7804:	682a      	ldr	r2, [r5, #0]
   b7806:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7808:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b780a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b780c:	1a52      	subs	r2, r2, r1
   b780e:	f001 f83f 	bl	b8890 <memmove>
    size_ -= n;
   b7812:	686a      	ldr	r2, [r5, #4]
   b7814:	1b12      	subs	r2, r2, r4
   b7816:	606a      	str	r2, [r5, #4]
}
   b7818:	bd38      	pop	{r3, r4, r5, pc}

000b781a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b781a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b781c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b781e:	4604      	mov	r4, r0
   b7820:	460d      	mov	r5, r1
   b7822:	ab01      	add	r3, sp, #4
   b7824:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7828:	f7ff fc0a 	bl	b7040 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b782c:	4602      	mov	r2, r0
   b782e:	b138      	cbz	r0, b7840 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7830:	9901      	ldr	r1, [sp, #4]
   b7832:	4620      	mov	r0, r4
   b7834:	f7ff ffdd 	bl	b77f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7838:	4629      	mov	r1, r5
   b783a:	4620      	mov	r0, r4
   b783c:	f7ff ffed 	bl	b781a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7840:	b003      	add	sp, #12
   b7842:	bd30      	pop	{r4, r5, pc}

000b7844 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7844:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7846:	460c      	mov	r4, r1
   b7848:	b929      	cbnz	r1, b7856 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b784a:	460a      	mov	r2, r1
   b784c:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b784e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7852:	f7fd bb8f 	b.w	b4f74 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7856:	2101      	movs	r1, #1
   b7858:	4620      	mov	r0, r4
   b785a:	f7ff ffde 	bl	b781a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b785e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7862:	2200      	movs	r2, #0
   b7864:	e7f3      	b.n	b784e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7866 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7866:	b538      	push	{r3, r4, r5, lr}
   b7868:	4604      	mov	r4, r0
   b786a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b786c:	f7ff ffb8 	bl	b77e0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7870:	2800      	cmp	r0, #0
   b7872:	db0a      	blt.n	b788a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7874:	4629      	mov	r1, r5
   b7876:	4620      	mov	r0, r4
   b7878:	f7ff ffe4 	bl	b7844 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b787c:	2800      	cmp	r0, #0
   b787e:	db04      	blt.n	b788a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7884:	2000      	movs	r0, #0
   b7886:	f7fd bb7d 	b.w	b4f84 <hal_ble_gap_start_advertising>
}
   b788a:	bd38      	pop	{r3, r4, r5, pc}

000b788c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b788c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b788e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7890:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7892:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7894:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7896:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7898:	f7fc fbfb 	bl	b4092 <_Znwj>
   b789c:	b118      	cbz	r0, b78a6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b789e:	682b      	ldr	r3, [r5, #0]
   b78a0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b78a2:	686b      	ldr	r3, [r5, #4]
   b78a4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b78a6:	4b03      	ldr	r3, [pc, #12]	; (b78b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b78a8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b78aa:	4b03      	ldr	r3, [pc, #12]	; (b78b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b78ac:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b78ae:	60a3      	str	r3, [r4, #8]
      }
   b78b0:	4620      	mov	r0, r4
   b78b2:	bd38      	pop	{r3, r4, r5, pc}
   b78b4:	000b7081 	.word	0x000b7081
   b78b8:	000b7099 	.word	0x000b7099

000b78bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b78bc:	680b      	ldr	r3, [r1, #0]
   b78be:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b78c0:	b113      	cbz	r3, b78c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b78c2:	685a      	ldr	r2, [r3, #4]
   b78c4:	3201      	adds	r2, #1
   b78c6:	605a      	str	r2, [r3, #4]
      }
   b78c8:	4770      	bx	lr

000b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b78ca:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b78cc:	f851 3b04 	ldr.w	r3, [r1], #4
   b78d0:	4604      	mov	r4, r0
   b78d2:	f840 3b04 	str.w	r3, [r0], #4
   b78d6:	f7ff fff1 	bl	b78bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b78da:	6823      	ldr	r3, [r4, #0]
   b78dc:	b90b      	cbnz	r3, b78e2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b78de:	f7ff fbc5 	bl	b706c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b78e2:	4620      	mov	r0, r4
   b78e4:	bd10      	pop	{r4, pc}

000b78e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b78e6:	b510      	push	{r4, lr}
   b78e8:	f851 3b04 	ldr.w	r3, [r1], #4
   b78ec:	4604      	mov	r4, r0
   b78ee:	f840 3b04 	str.w	r3, [r0], #4
   b78f2:	f7ff ffe3 	bl	b78bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b78f6:	4620      	mov	r0, r4
   b78f8:	bd10      	pop	{r4, pc}

000b78fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b78fa:	b510      	push	{r4, lr}
   b78fc:	f851 3b04 	ldr.w	r3, [r1], #4
   b7900:	4604      	mov	r4, r0
   b7902:	f840 3b04 	str.w	r3, [r0], #4
   b7906:	f7ff ffd9 	bl	b78bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b790a:	4620      	mov	r0, r4
   b790c:	bd10      	pop	{r4, pc}

000b790e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b790e:	b510      	push	{r4, lr}
   b7910:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7912:	3004      	adds	r0, #4
   b7914:	f7fc ff6d 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7918:	4620      	mov	r0, r4
   b791a:	bd10      	pop	{r4, pc}

000b791c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b791c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b791e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7922:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7924:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7928:	42ae      	cmp	r6, r5
   b792a:	d004      	beq.n	b7936 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b792c:	1d28      	adds	r0, r5, #4
   b792e:	f7fc ff60 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7932:	3508      	adds	r5, #8
   b7934:	e7f8      	b.n	b7928 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7936:	6820      	ldr	r0, [r4, #0]
   b7938:	f7fd fc8c 	bl	b5254 <free>
}
   b793c:	4620      	mov	r0, r4
   b793e:	bd70      	pop	{r4, r5, r6, pc}

000b7940 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7940:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7942:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7946:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7948:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b794c:	42ae      	cmp	r6, r5
   b794e:	d004      	beq.n	b795a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7950:	1d28      	adds	r0, r5, #4
   b7952:	f7fc ff4e 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7956:	3508      	adds	r5, #8
   b7958:	e7f8      	b.n	b794c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b795a:	6820      	ldr	r0, [r4, #0]
   b795c:	f7fd fc7a 	bl	b5254 <free>
}
   b7960:	4620      	mov	r0, r4
   b7962:	bd70      	pop	{r4, r5, r6, pc}

000b7964 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7964:	b510      	push	{r4, lr}
   b7966:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7968:	3024      	adds	r0, #36	; 0x24
   b796a:	f7ff ffe9 	bl	b7940 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b796e:	f104 0018 	add.w	r0, r4, #24
   b7972:	f7ff ffd3 	bl	b791c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7976:	bd10      	pop	{r4, pc}

000b7978 <__tcf_0>:
    static BleLocalDevice instance;
   b7978:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b797a:	4b17      	ldr	r3, [pc, #92]	; (b79d8 <__tcf_0+0x60>)
   b797c:	681c      	ldr	r4, [r3, #0]
   b797e:	b354      	cbz	r4, b79d6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7980:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7984:	f7fd fca6 	bl	b52d4 <_ZNSt14_Function_baseD1Ev>
   b7988:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b798c:	f7fd fca2 	bl	b52d4 <_ZNSt14_Function_baseD1Ev>
   b7990:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7994:	f7fd fc9e 	bl	b52d4 <_ZNSt14_Function_baseD1Ev>
   b7998:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b799c:	f7fd fc9a 	bl	b52d4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b79a0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b79a4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b79a8:	42ae      	cmp	r6, r5
   b79aa:	d004      	beq.n	b79b6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b79ac:	1d28      	adds	r0, r5, #4
   b79ae:	f7fc ff20 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b79b2:	3508      	adds	r5, #8
   b79b4:	e7f8      	b.n	b79a8 <__tcf_0+0x30>
    ::free(ptr);
   b79b6:	69a0      	ldr	r0, [r4, #24]
   b79b8:	f7fd fc4c 	bl	b5254 <free>
    ~BleLocalDeviceImpl() = default;
   b79bc:	f104 000c 	add.w	r0, r4, #12
   b79c0:	f7ff ffbe 	bl	b7940 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b79c4:	4620      	mov	r0, r4
   b79c6:	f7ff ffa9 	bl	b791c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b79ca:	4620      	mov	r0, r4
   b79cc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b79ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b79d2:	f7fc bb64 	b.w	b409e <_ZdlPvj>
   b79d6:	bd70      	pop	{r4, r5, r6, pc}
   b79d8:	2003e724 	.word	0x2003e724

000b79dc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b79dc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b79de:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b79e0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b79e4:	e9c1 3300 	strd	r3, r3, [r1]
   b79e8:	6803      	ldr	r3, [r0, #0]
   b79ea:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b79ec:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b79ee:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b79f0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b79f2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b79f4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b79f6:	f7fc fefc 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b79fa:	b002      	add	sp, #8
   b79fc:	bd10      	pop	{r4, pc}

000b79fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b79fe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7a00:	b510      	push	{r4, lr}
      if (_M_empty())
   b7a02:	b90a      	cbnz	r2, b7a08 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7a04:	f000 fe02 	bl	b860c <_ZSt25__throw_bad_function_callv>
    }
   b7a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7a0c:	68c3      	ldr	r3, [r0, #12]
   b7a0e:	4718      	bx	r3

000b7a10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7a10:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7a12:	6883      	ldr	r3, [r0, #8]
   b7a14:	428b      	cmp	r3, r1
   b7a16:	da02      	bge.n	b7a1e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7a18:	f7fd fdb2 	bl	b5580 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7a1c:	bd08      	pop	{r3, pc}
    return true;
   b7a1e:	2001      	movs	r0, #1
   b7a20:	e7fc      	b.n	b7a1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a26:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7a28:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7a2a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7a2c:	4419      	add	r1, r3
   b7a2e:	6883      	ldr	r3, [r0, #8]
   b7a30:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7a32:	4604      	mov	r4, r0
   b7a34:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7a36:	dc12      	bgt.n	b7a5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7a38:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7a3a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7a3c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7a3e:	1bd2      	subs	r2, r2, r7
   b7a40:	4631      	mov	r1, r6
   b7a42:	1970      	adds	r0, r6, r5
   b7a44:	f000 ff24 	bl	b8890 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7a48:	462a      	mov	r2, r5
   b7a4a:	4641      	mov	r1, r8
   b7a4c:	4630      	mov	r0, r6
   b7a4e:	f000 ff11 	bl	b8874 <memcpy>
    size_ += n;
   b7a52:	6863      	ldr	r3, [r4, #4]
   b7a54:	442b      	add	r3, r5
   b7a56:	6063      	str	r3, [r4, #4]
    return true;
   b7a58:	2001      	movs	r0, #1
}
   b7a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7a5e:	f7fd fd8f 	bl	b5580 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7a62:	2800      	cmp	r0, #0
   b7a64:	d1e8      	bne.n	b7a38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7a66:	e7f8      	b.n	b7a5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7a68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a6a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a6c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7a70:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7a72:	4604      	mov	r4, r0
   b7a74:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a76:	da0b      	bge.n	b7a90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7a78:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7a7a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7a7c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7a7e:	1b52      	subs	r2, r2, r5
   b7a80:	1c48      	adds	r0, r1, #1
   b7a82:	f000 ff05 	bl	b8890 <memmove>
    new(p) T(std::move(value));
   b7a86:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7a88:	6863      	ldr	r3, [r4, #4]
   b7a8a:	3301      	adds	r3, #1
   b7a8c:	6063      	str	r3, [r4, #4]
}
   b7a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a90:	3101      	adds	r1, #1
   b7a92:	f7fd fd75 	bl	b5580 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7a96:	2800      	cmp	r0, #0
   b7a98:	d1ee      	bne.n	b7a78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7a9a:	e7f8      	b.n	b7a8e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7a9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a9c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7a9e:	6841      	ldr	r1, [r0, #4]
   b7aa0:	f7ff bfe2 	b.w	b7a68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7aa4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7aa8:	4604      	mov	r4, r0
   b7aaa:	461d      	mov	r5, r3
   b7aac:	460f      	mov	r7, r1
   b7aae:	ab01      	add	r3, sp, #4
   b7ab0:	4690      	mov	r8, r2
   b7ab2:	460a      	mov	r2, r1
   b7ab4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7ab8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7abc:	f7ff fac0 	bl	b7040 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7ac0:	1cae      	adds	r6, r5, #2
   b7ac2:	6863      	ldr	r3, [r4, #4]
   b7ac4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7ac6:	f1b9 0f00 	cmp.w	r9, #0
   b7aca:	d126      	bne.n	b7b1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7acc:	b328      	cbz	r0, b7b1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7ace:	4433      	add	r3, r6
   b7ad0:	1a1b      	subs	r3, r3, r0
   b7ad2:	2bff      	cmp	r3, #255	; 0xff
   b7ad4:	d809      	bhi.n	b7aea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7ad6:	9901      	ldr	r1, [sp, #4]
   b7ad8:	4620      	mov	r0, r4
   b7ada:	f7ff fe8a 	bl	b77f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7ade:	6861      	ldr	r1, [r4, #4]
   b7ae0:	4620      	mov	r0, r4
   b7ae2:	4431      	add	r1, r6
   b7ae4:	f7ff ff94 	bl	b7a10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7ae8:	b918      	cbnz	r0, b7af2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7aea:	6860      	ldr	r0, [r4, #4]
}
   b7aec:	b003      	add	sp, #12
   b7aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7af2:	1c6a      	adds	r2, r5, #1
   b7af4:	9901      	ldr	r1, [sp, #4]
   b7af6:	b2d2      	uxtb	r2, r2
   b7af8:	4620      	mov	r0, r4
   b7afa:	f7ff ffb5 	bl	b7a68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7afe:	9901      	ldr	r1, [sp, #4]
   b7b00:	463a      	mov	r2, r7
   b7b02:	3101      	adds	r1, #1
   b7b04:	4620      	mov	r0, r4
   b7b06:	f7ff ffaf 	bl	b7a68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7b0a:	9901      	ldr	r1, [sp, #4]
   b7b0c:	462b      	mov	r3, r5
   b7b0e:	4642      	mov	r2, r8
   b7b10:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7b12:	4620      	mov	r0, r4
   b7b14:	f7ff ff85 	bl	b7a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7b18:	e7e7      	b.n	b7aea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7b1a:	18f1      	adds	r1, r6, r3
   b7b1c:	29ff      	cmp	r1, #255	; 0xff
   b7b1e:	d8e4      	bhi.n	b7aea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7b20:	4620      	mov	r0, r4
   b7b22:	f7ff ff75 	bl	b7a10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7b26:	2800      	cmp	r0, #0
   b7b28:	d0df      	beq.n	b7aea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7b2a:	1c69      	adds	r1, r5, #1
   b7b2c:	b2c9      	uxtb	r1, r1
   b7b2e:	4620      	mov	r0, r4
   b7b30:	f7ff ffb4 	bl	b7a9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7b34:	4639      	mov	r1, r7
   b7b36:	4620      	mov	r0, r4
   b7b38:	f7ff ffb0 	bl	b7a9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7b3c:	6861      	ldr	r1, [r4, #4]
   b7b3e:	462b      	mov	r3, r5
   b7b40:	4642      	mov	r2, r8
   b7b42:	e7e6      	b.n	b7b12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7b44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7b44:	b430      	push	{r4, r5}
   b7b46:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7b4a:	b11a      	cbz	r2, b7b54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7b4c:	9502      	str	r5, [sp, #8]
}
   b7b4e:	bc30      	pop	{r4, r5}
   b7b50:	f7ff bfa8 	b.w	b7aa4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7b54:	6840      	ldr	r0, [r0, #4]
}
   b7b56:	bc30      	pop	{r4, r5}
   b7b58:	4770      	bx	lr

000b7b5a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7b5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7b5c:	2300      	movs	r3, #0
   b7b5e:	e9c0 3300 	strd	r3, r3, [r0]
   b7b62:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7b64:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7b66:	9300      	str	r3, [sp, #0]
   b7b68:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7b6a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7b6e:	4619      	mov	r1, r3
   b7b70:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7b74:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7b76:	f7ff ffe5 	bl	b7b44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7b7a:	4620      	mov	r0, r4
   b7b7c:	b004      	add	sp, #16
   b7b7e:	bd10      	pop	{r4, pc}

000b7b80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7b80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b84:	4604      	mov	r4, r0
   b7b86:	460d      	mov	r5, r1
   b7b88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7b8a:	d914      	bls.n	b7bb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7b8c:	4290      	cmp	r0, r2
   b7b8e:	d213      	bcs.n	b7bb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b90:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b94:	1a75      	subs	r5, r6, r1
   b7b96:	f1a1 0708 	sub.w	r7, r1, #8
   b7b9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b9c:	42b7      	cmp	r7, r6
   b7b9e:	d018      	beq.n	b7bd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7ba0:	b11c      	cbz	r4, b7baa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7ba2:	4631      	mov	r1, r6
   b7ba4:	4620      	mov	r0, r4
   b7ba6:	f7ff fea8 	bl	b78fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7baa:	1d30      	adds	r0, r6, #4
   b7bac:	f7fc fe21 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7bb0:	3e08      	subs	r6, #8
   b7bb2:	3c08      	subs	r4, #8
   b7bb4:	e7f2      	b.n	b7b9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7bb6:	d00c      	beq.n	b7bd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7bb8:	42b5      	cmp	r5, r6
   b7bba:	d00a      	beq.n	b7bd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7bbc:	b11c      	cbz	r4, b7bc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7bbe:	4629      	mov	r1, r5
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	f7ff fe9a 	bl	b78fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7bc6:	1d28      	adds	r0, r5, #4
   b7bc8:	f7fc fe13 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7bcc:	3508      	adds	r5, #8
   b7bce:	3408      	adds	r4, #8
   b7bd0:	e7f2      	b.n	b7bb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7bd6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7bd8:	6846      	ldr	r6, [r0, #4]
   b7bda:	4668      	mov	r0, sp
   b7bdc:	f7ff fe8d 	bl	b78fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7be0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7be4:	429f      	cmp	r7, r3
   b7be6:	db12      	blt.n	b7c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7be8:	3701      	adds	r7, #1
        if (n > 0) {
   b7bea:	2f00      	cmp	r7, #0
   b7bec:	dd29      	ble.n	b7c42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7bee:	00f8      	lsls	r0, r7, #3
   b7bf0:	f7fd fb28 	bl	b5244 <malloc>
            if (!d) {
   b7bf4:	4605      	mov	r5, r0
   b7bf6:	b1f0      	cbz	r0, b7c36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7bf8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7bfc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7c00:	f7ff ffbe 	bl	b7b80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7c04:	6820      	ldr	r0, [r4, #0]
   b7c06:	f7fd fb25 	bl	b5254 <free>
        data_ = d;
   b7c0a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7c0c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7c0e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7c10:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7c12:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7c16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7c1a:	4631      	mov	r1, r6
   b7c1c:	f106 0008 	add.w	r0, r6, #8
   b7c20:	f7ff ffae 	bl	b7b80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7c24:	b11e      	cbz	r6, b7c2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7c26:	4669      	mov	r1, sp
   b7c28:	4630      	mov	r0, r6
   b7c2a:	f7ff fe66 	bl	b78fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7c2e:	6863      	ldr	r3, [r4, #4]
   b7c30:	3301      	adds	r3, #1
   b7c32:	6063      	str	r3, [r4, #4]
    return true;
   b7c34:	2501      	movs	r5, #1
   b7c36:	a801      	add	r0, sp, #4
   b7c38:	f7fc fddb 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7c3c:	4628      	mov	r0, r5
   b7c3e:	b003      	add	sp, #12
   b7c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7c42:	2500      	movs	r5, #0
   b7c44:	e7de      	b.n	b7c04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7c46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7c48:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7c4c:	4605      	mov	r5, r0
   b7c4e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7c50:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7c54:	42a6      	cmp	r6, r4
   b7c56:	d005      	beq.n	b7c64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7c58:	4639      	mov	r1, r7
   b7c5a:	4620      	mov	r0, r4
   b7c5c:	f7ff fd09 	bl	b7672 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7c60:	b108      	cbz	r0, b7c66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7c62:	b914      	cbnz	r4, b7c6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7c66:	3408      	adds	r4, #8
   b7c68:	e7f4      	b.n	b7c54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7c6a:	1d20      	adds	r0, r4, #4
   b7c6c:	f7fc fdc1 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7c70:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7c74:	f104 0108 	add.w	r1, r4, #8
   b7c78:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	f7ff ff7f 	bl	b7b80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7c82:	686b      	ldr	r3, [r5, #4]
   b7c84:	3b01      	subs	r3, #1
   b7c86:	606b      	str	r3, [r5, #4]
    return true;
   b7c88:	e7ec      	b.n	b7c64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7c8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c90:	4605      	mov	r5, r0
   b7c92:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7c94:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7c96:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7c98:	f7ff fa5c 	bl	b7154 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7c9c:	682e      	ldr	r6, [r5, #0]
   b7c9e:	1ef3      	subs	r3, r6, #3
   b7ca0:	2b0d      	cmp	r3, #13
   b7ca2:	d83c      	bhi.n	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7ca4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7ca8:	0053000e 	.word	0x0053000e
   b7cac:	00d1003b 	.word	0x00d1003b
   b7cb0:	003b003b 	.word	0x003b003b
   b7cb4:	003b003b 	.word	0x003b003b
   b7cb8:	009b003b 	.word	0x009b003b
   b7cbc:	009b009b 	.word	0x009b009b
   b7cc0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7cc4:	a804      	add	r0, sp, #16
   b7cc6:	f7ff fc9f 	bl	b7608 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7cca:	9b04      	ldr	r3, [sp, #16]
   b7ccc:	89aa      	ldrh	r2, [r5, #12]
   b7cce:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7cd0:	6869      	ldr	r1, [r5, #4]
   b7cd2:	9804      	ldr	r0, [sp, #16]
   b7cd4:	3108      	adds	r1, #8
   b7cd6:	3002      	adds	r0, #2
   b7cd8:	f7ff fa56 	bl	b7188 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7cdc:	a904      	add	r1, sp, #16
   b7cde:	a806      	add	r0, sp, #24
   b7ce0:	f7ff fe0b 	bl	b78fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7ce4:	a906      	add	r1, sp, #24
   b7ce6:	f104 0018 	add.w	r0, r4, #24
   b7cea:	f7ff ff73 	bl	b7bd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7cee:	4605      	mov	r5, r0
   b7cf0:	a807      	add	r0, sp, #28
   b7cf2:	f7fc fd7e 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7cf6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7cf8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7cfa:	b9b5      	cbnz	r5, b7d2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7cfc:	4b5d      	ldr	r3, [pc, #372]	; (b7e74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b7cfe:	495e      	ldr	r1, [pc, #376]	; (b7e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7d00:	9300      	str	r3, [sp, #0]
   b7d02:	2032      	movs	r0, #50	; 0x32
   b7d04:	462b      	mov	r3, r5
   b7d06:	aa06      	add	r2, sp, #24
   b7d08:	9507      	str	r5, [sp, #28]
   b7d0a:	f7fd f9d5 	bl	b50b8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7d0e:	9b04      	ldr	r3, [sp, #16]
   b7d10:	4629      	mov	r1, r5
   b7d12:	8818      	ldrh	r0, [r3, #0]
   b7d14:	f7fd f93e 	bl	b4f94 <hal_ble_gap_disconnect>
   b7d18:	a805      	add	r0, sp, #20
   b7d1a:	f7fc fd6a 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7d1e:	a803      	add	r0, sp, #12
   b7d20:	f7ff fa26 	bl	b7170 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7d24:	b00e      	add	sp, #56	; 0x38
   b7d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7d2a:	4a54      	ldr	r2, [pc, #336]	; (b7e7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7d2c:	9200      	str	r2, [sp, #0]
   b7d2e:	2300      	movs	r3, #0
   b7d30:	4951      	ldr	r1, [pc, #324]	; (b7e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7d32:	9307      	str	r3, [sp, #28]
   b7d34:	aa06      	add	r2, sp, #24
   b7d36:	2001      	movs	r0, #1
   b7d38:	f7fd f9be 	bl	b50b8 <log_message>
                if (impl->connectedCallback_) {
   b7d3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7d3e:	2b00      	cmp	r3, #0
   b7d40:	d0ea      	beq.n	b7d18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b7d42:	a904      	add	r1, sp, #16
   b7d44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7d48:	f7ff fe59 	bl	b79fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7d4c:	e7e4      	b.n	b7d18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7d4e:	89a9      	ldrh	r1, [r5, #12]
   b7d50:	4620      	mov	r0, r4
   b7d52:	f7ff fbc3 	bl	b74dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7d56:	4606      	mov	r6, r0
   b7d58:	2800      	cmp	r0, #0
   b7d5a:	d0e0      	beq.n	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7d5c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7d5e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7d62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7d66:	8029      	strh	r1, [r5, #0]
   b7d68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7d6c:	429a      	cmp	r2, r3
   b7d6e:	d003      	beq.n	b7d78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7d70:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7d74:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7d76:	e7f9      	b.n	b7d6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7d78:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7d7c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7d80:	45b8      	cmp	r8, r7
   b7d82:	d004      	beq.n	b7d8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7d84:	1d38      	adds	r0, r7, #4
   b7d86:	f7fc fd34 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d8a:	3708      	adds	r7, #8
   b7d8c:	e7f8      	b.n	b7d80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7d8e:	2300      	movs	r3, #0
   b7d90:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7d92:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7d96:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7d9a:	45b8      	cmp	r8, r7
   b7d9c:	d004      	beq.n	b7da8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7d9e:	1d38      	adds	r0, r7, #4
   b7da0:	f7fc fd27 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7da4:	3708      	adds	r7, #8
   b7da6:	e7f8      	b.n	b7d9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7da8:	2300      	movs	r3, #0
   b7daa:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7dac:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7dae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7db0:	b123      	cbz	r3, b7dbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7db2:	4631      	mov	r1, r6
   b7db4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7db8:	f7ff fe21 	bl	b79fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7dbc:	2300      	movs	r3, #0
   b7dbe:	2220      	movs	r2, #32
   b7dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7dc4:	4a2e      	ldr	r2, [pc, #184]	; (b7e80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7dc6:	9200      	str	r2, [sp, #0]
   b7dc8:	492b      	ldr	r1, [pc, #172]	; (b7e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7dca:	aa06      	add	r2, sp, #24
   b7dcc:	2001      	movs	r0, #1
   b7dce:	f7fd f973 	bl	b50b8 <log_message>
                    impl->peers_.removeOne(*peer);
   b7dd2:	4631      	mov	r1, r6
   b7dd4:	f104 0018 	add.w	r0, r4, #24
   b7dd8:	f7ff ff35 	bl	b7c46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7ddc:	e79f      	b.n	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7dde:	89a9      	ldrh	r1, [r5, #12]
   b7de0:	4620      	mov	r0, r4
   b7de2:	f7ff fb7b 	bl	b74dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7de6:	2800      	cmp	r0, #0
   b7de8:	d099      	beq.n	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7dea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7dec:	2b00      	cmp	r3, #0
   b7dee:	d096      	beq.n	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7df0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7df2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7df4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7df8:	d001      	beq.n	b7dfe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7dfa:	2e10      	cmp	r6, #16
   b7dfc:	d117      	bne.n	b7e2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b7dfe:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7e00:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7e02:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7e04:	2506      	movs	r5, #6
                        };
   b7e06:	f88d 3015 	strb.w	r3, [sp, #21]
   b7e0a:	9104      	str	r1, [sp, #16]
   b7e0c:	f88d 2014 	strb.w	r2, [sp, #20]
   b7e10:	9006      	str	r0, [sp, #24]
   b7e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7e16:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7e18:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7e1c:	9508      	str	r5, [sp, #32]
   b7e1e:	e883 0003 	stmia.w	r3, {r0, r1}
   b7e22:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7e24:	a906      	add	r1, sp, #24
   b7e26:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7e2a:	4798      	blx	r3
   b7e2c:	e777      	b.n	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7e2e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7e30:	bf01      	itttt	eq
   b7e32:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7e34:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7e36:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7e3a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7e3c:	bf0f      	iteee	eq
   b7e3e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7e42:	461a      	movne	r2, r3
   b7e44:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7e46:	461d      	movne	r5, r3
   b7e48:	e7dd      	b.n	b7e06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7e4a:	89a9      	ldrh	r1, [r5, #12]
   b7e4c:	4620      	mov	r0, r4
   b7e4e:	f7ff fb45 	bl	b74dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7e52:	4601      	mov	r1, r0
   b7e54:	2800      	cmp	r0, #0
   b7e56:	f43f af62 	beq.w	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7e5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7e5c:	2b00      	cmp	r3, #0
   b7e5e:	f43f af5e 	beq.w	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7e62:	686b      	ldr	r3, [r5, #4]
   b7e64:	9306      	str	r3, [sp, #24]
   b7e66:	aa06      	add	r2, sp, #24
   b7e68:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7e6a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7e6e:	4798      	blx	r3
   b7e70:	e755      	b.n	b7d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7e72:	bf00      	nop
   b7e74:	000b919d 	.word	0x000b919d
   b7e78:	000b8c42 	.word	0x000b8c42
   b7e7c:	000b91c3 	.word	0x000b91c3
   b7e80:	000b91e0 	.word	0x000b91e0

000b7e84 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7e84:	b538      	push	{r3, r4, r5, lr}
   b7e86:	4605      	mov	r5, r0
   b7e88:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7e8a:	f7fd ffe7 	bl	b5e5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e8e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7e90:	68a2      	ldr	r2, [r4, #8]
   b7e92:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e94:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e96:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7e98:	68e2      	ldr	r2, [r4, #12]
   b7e9a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e9c:	60e3      	str	r3, [r4, #12]
      }
   b7e9e:	bd38      	pop	{r3, r4, r5, pc}

000b7ea0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7ea0:	b570      	push	{r4, r5, r6, lr}
   b7ea2:	4604      	mov	r4, r0
   b7ea4:	b08c      	sub	sp, #48	; 0x30
   b7ea6:	460e      	mov	r6, r1
   b7ea8:	9201      	str	r2, [sp, #4]
   b7eaa:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7eac:	f7ff faf6 	bl	b749c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7eb0:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7eb2:	9901      	ldr	r1, [sp, #4]
   b7eb4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7eb8:	f000 fafb 	bl	b84b2 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7ebc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7ec0:	b1cd      	cbz	r5, b7ef6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7ec4:	9502      	str	r5, [sp, #8]
   b7ec6:	a902      	add	r1, sp, #8
   b7ec8:	a804      	add	r0, sp, #16
   b7eca:	9303      	str	r3, [sp, #12]
   b7ecc:	f7ff fcde 	bl	b788c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7ed0:	2300      	movs	r3, #0
	__x.swap(*this);
   b7ed2:	a908      	add	r1, sp, #32
   b7ed4:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7ed6:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7ed8:	f7ff ffd4 	bl	b7e84 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7edc:	4631      	mov	r1, r6
   b7ede:	a808      	add	r0, sp, #32
   b7ee0:	f7ff ffd0 	bl	b7e84 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7ee4:	a808      	add	r0, sp, #32
   b7ee6:	f7fd f9f5 	bl	b52d4 <_ZNSt14_Function_baseD1Ev>
   b7eea:	a804      	add	r0, sp, #16
   b7eec:	f7fd f9f2 	bl	b52d4 <_ZNSt14_Function_baseD1Ev>
    }
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	b00c      	add	sp, #48	; 0x30
   b7ef4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7ef6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7ef8:	e7ea      	b.n	b7ed0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7efc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f00:	b087      	sub	sp, #28
   b7f02:	461d      	mov	r5, r3
   b7f04:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7f08:	4680      	mov	r8, r0
   b7f0a:	468b      	mov	fp, r1
   b7f0c:	4692      	mov	sl, r2
   b7f0e:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7f10:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7f12:	2200      	movs	r2, #0
   b7f14:	2068      	movs	r0, #104	; 0x68
   b7f16:	9102      	str	r1, [sp, #8]
   b7f18:	9204      	str	r2, [sp, #16]
   b7f1a:	f7fc f8ba 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7f1e:	1e06      	subs	r6, r0, #0
   b7f20:	f106 090c 	add.w	r9, r6, #12
   b7f24:	d018      	beq.n	b7f58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7f26:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7f28:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7f2a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7f2e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7f30:	4a15      	ldr	r2, [pc, #84]	; (b7f88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7f32:	f847 2b20 	str.w	r2, [r7], #32
   b7f36:	9b03      	ldr	r3, [sp, #12]
   b7f38:	9100      	str	r1, [sp, #0]
   b7f3a:	465a      	mov	r2, fp
   b7f3c:	4651      	mov	r1, sl
   b7f3e:	4648      	mov	r0, r9
   b7f40:	f7ff ffae 	bl	b7ea0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f46:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7f48:	682b      	ldr	r3, [r5, #0]
   b7f4a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7f4e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7f54:	6823      	ldr	r3, [r4, #0]
   b7f56:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7f58:	a904      	add	r1, sp, #16
   b7f5a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7f5c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7f60:	f7ff fd3c 	bl	b79dc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7f64:	a805      	add	r0, sp, #20
   b7f66:	f7fc fc44 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7f6a:	f8d8 3000 	ldr.w	r3, [r8]
   b7f6e:	b93b      	cbnz	r3, b7f80 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7f70:	4a06      	ldr	r2, [pc, #24]	; (b7f8c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7f72:	4907      	ldr	r1, [pc, #28]	; (b7f90 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7f74:	200a      	movs	r0, #10
}
   b7f76:	b007      	add	sp, #28
   b7f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7f7c:	f7fd b88c 	b.w	b5098 <panic_>
}
   b7f80:	b007      	add	sp, #28
   b7f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7f86:	bf00      	nop
   b7f88:	000b925c 	.word	0x000b925c
   b7f8c:	000b5059 	.word	0x000b5059
   b7f90:	000b9110 	.word	0x000b9110

000b7f94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7f94:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f98:	4604      	mov	r4, r0
   b7f9a:	460d      	mov	r5, r1
   b7f9c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7f9e:	d914      	bls.n	b7fca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7fa0:	4290      	cmp	r0, r2
   b7fa2:	d213      	bcs.n	b7fcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7fa4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7fa8:	1a75      	subs	r5, r6, r1
   b7faa:	f1a1 0708 	sub.w	r7, r1, #8
   b7fae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7fb0:	42b7      	cmp	r7, r6
   b7fb2:	d018      	beq.n	b7fe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7fb4:	b11c      	cbz	r4, b7fbe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7fb6:	4631      	mov	r1, r6
   b7fb8:	4620      	mov	r0, r4
   b7fba:	f7ff fc94 	bl	b78e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7fbe:	1d30      	adds	r0, r6, #4
   b7fc0:	f7fc fc17 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7fc4:	3e08      	subs	r6, #8
   b7fc6:	3c08      	subs	r4, #8
   b7fc8:	e7f2      	b.n	b7fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7fca:	d00c      	beq.n	b7fe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7fcc:	42b5      	cmp	r5, r6
   b7fce:	d00a      	beq.n	b7fe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7fd0:	b11c      	cbz	r4, b7fda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7fd2:	4629      	mov	r1, r5
   b7fd4:	4620      	mov	r0, r4
   b7fd6:	f7ff fc86 	bl	b78e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7fda:	1d28      	adds	r0, r5, #4
   b7fdc:	f7fc fc09 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7fe0:	3508      	adds	r5, #8
   b7fe2:	3408      	adds	r4, #8
   b7fe4:	e7f2      	b.n	b7fcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7fe8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7fe8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7fea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7fec:	4605      	mov	r5, r0
        if (n > 0) {
   b7fee:	dd11      	ble.n	b8014 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7ff0:	00f0      	lsls	r0, r6, #3
   b7ff2:	f7fd f927 	bl	b5244 <malloc>
            if (!d) {
   b7ff6:	4604      	mov	r4, r0
   b7ff8:	b158      	cbz	r0, b8012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7ffa:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7ffe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8002:	f7ff ffc7 	bl	b7f94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8006:	6828      	ldr	r0, [r5, #0]
   b8008:	f7fd f924 	bl	b5254 <free>
        data_ = d;
   b800c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b800e:	60ae      	str	r6, [r5, #8]
        return true;
   b8010:	2001      	movs	r0, #1
    }
   b8012:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8014:	2400      	movs	r4, #0
   b8016:	e7f6      	b.n	b8006 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8018 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8018:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b801a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b801c:	6845      	ldr	r5, [r0, #4]
   b801e:	4668      	mov	r0, sp
   b8020:	f7ff fc61 	bl	b78e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8024:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8028:	4299      	cmp	r1, r3
   b802a:	da10      	bge.n	b804e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b802c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b802e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8030:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8034:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8038:	4629      	mov	r1, r5
   b803a:	f105 0008 	add.w	r0, r5, #8
   b803e:	f7ff ffa9 	bl	b7f94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8042:	b98d      	cbnz	r5, b8068 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8044:	6863      	ldr	r3, [r4, #4]
   b8046:	3301      	adds	r3, #1
   b8048:	6063      	str	r3, [r4, #4]
    return true;
   b804a:	2601      	movs	r6, #1
   b804c:	e006      	b.n	b805c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b804e:	3101      	adds	r1, #1
   b8050:	4620      	mov	r0, r4
   b8052:	f7ff ffc9 	bl	b7fe8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8056:	4606      	mov	r6, r0
   b8058:	2800      	cmp	r0, #0
   b805a:	d1e7      	bne.n	b802c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b805c:	a801      	add	r0, sp, #4
   b805e:	f7fc fbc8 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8062:	4630      	mov	r0, r6
   b8064:	b002      	add	sp, #8
   b8066:	bd70      	pop	{r4, r5, r6, pc}
   b8068:	4669      	mov	r1, sp
   b806a:	4628      	mov	r0, r5
   b806c:	f7ff fc3b 	bl	b78e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8070:	e7e8      	b.n	b8044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8072 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8072:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8076:	4604      	mov	r4, r0
   b8078:	460d      	mov	r5, r1
   b807a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b807c:	d914      	bls.n	b80a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b807e:	4290      	cmp	r0, r2
   b8080:	d213      	bcs.n	b80aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8082:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8086:	1a75      	subs	r5, r6, r1
   b8088:	f1a1 0708 	sub.w	r7, r1, #8
   b808c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b808e:	42b7      	cmp	r7, r6
   b8090:	d018      	beq.n	b80c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8092:	b11c      	cbz	r4, b809c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8094:	4631      	mov	r1, r6
   b8096:	4620      	mov	r0, r4
   b8098:	f7ff fc17 	bl	b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b809c:	1d30      	adds	r0, r6, #4
   b809e:	f7fc fba8 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b80a2:	3e08      	subs	r6, #8
   b80a4:	3c08      	subs	r4, #8
   b80a6:	e7f2      	b.n	b808e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b80a8:	d00c      	beq.n	b80c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b80aa:	42b5      	cmp	r5, r6
   b80ac:	d00a      	beq.n	b80c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b80ae:	b11c      	cbz	r4, b80b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b80b0:	4629      	mov	r1, r5
   b80b2:	4620      	mov	r0, r4
   b80b4:	f7ff fc09 	bl	b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b80b8:	1d28      	adds	r0, r5, #4
   b80ba:	f7fc fb9a 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b80be:	3508      	adds	r5, #8
   b80c0:	3408      	adds	r4, #8
   b80c2:	e7f2      	b.n	b80aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b80c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b80c6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b80c8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b80ca:	4605      	mov	r5, r0
        if (n > 0) {
   b80cc:	dd11      	ble.n	b80f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b80ce:	00f0      	lsls	r0, r6, #3
   b80d0:	f7fd f8b8 	bl	b5244 <malloc>
            if (!d) {
   b80d4:	4604      	mov	r4, r0
   b80d6:	b158      	cbz	r0, b80f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b80d8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b80dc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b80e0:	f7ff ffc7 	bl	b8072 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b80e4:	6828      	ldr	r0, [r5, #0]
   b80e6:	f7fd f8b5 	bl	b5254 <free>
        data_ = d;
   b80ea:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b80ec:	60ae      	str	r6, [r5, #8]
        return true;
   b80ee:	2001      	movs	r0, #1
    }
   b80f0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b80f2:	2400      	movs	r4, #0
   b80f4:	e7f6      	b.n	b80e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b80f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b80f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80f8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b80fa:	6845      	ldr	r5, [r0, #4]
   b80fc:	4668      	mov	r0, sp
   b80fe:	f7ff fbe4 	bl	b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8102:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8106:	4299      	cmp	r1, r3
   b8108:	da10      	bge.n	b812c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b810a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b810c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b810e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8112:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8116:	4629      	mov	r1, r5
   b8118:	f105 0008 	add.w	r0, r5, #8
   b811c:	f7ff ffa9 	bl	b8072 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8120:	b98d      	cbnz	r5, b8146 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8122:	6863      	ldr	r3, [r4, #4]
   b8124:	3301      	adds	r3, #1
   b8126:	6063      	str	r3, [r4, #4]
    return true;
   b8128:	2601      	movs	r6, #1
   b812a:	e006      	b.n	b813a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b812c:	3101      	adds	r1, #1
   b812e:	4620      	mov	r0, r4
   b8130:	f7ff ffc9 	bl	b80c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8134:	4606      	mov	r6, r0
   b8136:	2800      	cmp	r0, #0
   b8138:	d1e7      	bne.n	b810a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b813a:	a801      	add	r0, sp, #4
   b813c:	f7fc fb59 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8140:	4630      	mov	r0, r6
   b8142:	b002      	add	sp, #8
   b8144:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8146:	4669      	mov	r1, sp
   b8148:	4628      	mov	r0, r5
   b814a:	f7ff fbbe 	bl	b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b814e:	e7e8      	b.n	b8122 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8150 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8154:	4617      	mov	r7, r2
   b8156:	b0a1      	sub	sp, #132	; 0x84
   b8158:	4680      	mov	r8, r0
    WiringBleLock lk;
   b815a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b815c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b815e:	f7fe fff9 	bl	b7154 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8162:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8164:	7923      	ldrb	r3, [r4, #4]
   b8166:	b953      	cbnz	r3, b817e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8168:	4639      	mov	r1, r7
   b816a:	4640      	mov	r0, r8
   b816c:	f7ff fbad 	bl	b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8170:	a80a      	add	r0, sp, #40	; 0x28
   b8172:	f7fe fffd 	bl	b7170 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8176:	4640      	mov	r0, r8
   b8178:	b021      	add	sp, #132	; 0x84
   b817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b817e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8180:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8184:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8188:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b818a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b818e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8192:	9b03      	ldr	r3, [sp, #12]
   b8194:	429d      	cmp	r5, r3
   b8196:	d021      	beq.n	b81dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8198:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b819c:	4658      	mov	r0, fp
   b819e:	f109 0114 	add.w	r1, r9, #20
   b81a2:	f7ff f8f0 	bl	b7386 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b81a6:	b1b8      	cbz	r0, b81d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b81a8:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b81ac:	4650      	mov	r0, sl
   b81ae:	f7ff f8ea 	bl	b7386 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b81b2:	b188      	cbz	r0, b81d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b81b4:	6823      	ldr	r3, [r4, #0]
   b81b6:	f8d9 2000 	ldr.w	r2, [r9]
   b81ba:	4053      	eors	r3, r2
   b81bc:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b81c0:	d10a      	bne.n	b81d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b81c2:	2220      	movs	r2, #32
   b81c4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b81c8:	4a5e      	ldr	r2, [pc, #376]	; (b8344 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b81ca:	9200      	str	r2, [sp, #0]
   b81cc:	aa15      	add	r2, sp, #84	; 0x54
   b81ce:	495e      	ldr	r1, [pc, #376]	; (b8348 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b81d0:	2032      	movs	r0, #50	; 0x32
   b81d2:	f7fc ff71 	bl	b50b8 <log_message>
   b81d6:	e7c7      	b.n	b8168 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b81d8:	3508      	adds	r5, #8
   b81da:	e7da      	b.n	b8192 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b81dc:	4650      	mov	r0, sl
   b81de:	f7ff f8a3 	bl	b7328 <_ZNK8particle7BleUuid7isValidEv>
   b81e2:	b960      	cbnz	r0, b81fe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b81e4:	4959      	ldr	r1, [pc, #356]	; (b834c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b81e6:	2201      	movs	r2, #1
   b81e8:	a815      	add	r0, sp, #84	; 0x54
   b81ea:	ad15      	add	r5, sp, #84	; 0x54
   b81ec:	f7ff f874 	bl	b72d8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b81f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81f2:	46d4      	mov	ip, sl
   b81f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b81f8:	682b      	ldr	r3, [r5, #0]
   b81fa:	f8cc 3000 	str.w	r3, [ip]
   b81fe:	6833      	ldr	r3, [r6, #0]
   b8200:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8204:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8208:	455d      	cmp	r5, fp
   b820a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b820c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b820e:	d06e      	beq.n	b82ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8210:	f855 0b08 	ldr.w	r0, [r5], #8
   b8214:	f7ff f8b7 	bl	b7386 <_ZNK8particle7BleUuideqERKS0_>
   b8218:	2800      	cmp	r0, #0
   b821a:	d0f5      	beq.n	b8208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b821c:	f104 0a14 	add.w	sl, r4, #20
   b8220:	4650      	mov	r0, sl
   b8222:	f7ff f881 	bl	b7328 <_ZNK8particle7BleUuid7isValidEv>
   b8226:	b988      	cbnz	r0, b824c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8228:	4b49      	ldr	r3, [pc, #292]	; (b8350 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b822a:	4948      	ldr	r1, [pc, #288]	; (b834c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b822c:	881a      	ldrh	r2, [r3, #0]
   b822e:	3201      	adds	r2, #1
   b8230:	b292      	uxth	r2, r2
   b8232:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8234:	a815      	add	r0, sp, #84	; 0x54
   b8236:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8238:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b823a:	f7ff f86c 	bl	b7316 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b823e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8240:	46d4      	mov	ip, sl
   b8242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8246:	682b      	ldr	r3, [r5, #0]
   b8248:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b824c:	4b41      	ldr	r3, [pc, #260]	; (b8354 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b824e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8250:	2228      	movs	r2, #40	; 0x28
   b8252:	2100      	movs	r1, #0
   b8254:	a816      	add	r0, sp, #88	; 0x58
   b8256:	f000 fb35 	bl	b88c4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b825a:	4651      	mov	r1, sl
   b825c:	a804      	add	r0, sp, #16
   b825e:	f7ff f875 	bl	b734c <_ZN8particle7BleUuid7halUUIDEv>
   b8262:	ab04      	add	r3, sp, #16
   b8264:	aa18      	add	r2, sp, #96	; 0x60
   b8266:	f10d 0c20 	add.w	ip, sp, #32
   b826a:	6818      	ldr	r0, [r3, #0]
   b826c:	6859      	ldr	r1, [r3, #4]
   b826e:	4615      	mov	r5, r2
   b8270:	c503      	stmia	r5!, {r0, r1}
   b8272:	3308      	adds	r3, #8
   b8274:	4563      	cmp	r3, ip
   b8276:	462a      	mov	r2, r5
   b8278:	d1f7      	bne.n	b826a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b827a:	6818      	ldr	r0, [r3, #0]
   b827c:	6028      	str	r0, [r5, #0]
    return value_;
   b827e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8280:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8284:	f8d9 3000 	ldr.w	r3, [r9]
   b8288:	8a9b      	ldrh	r3, [r3, #20]
   b828a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b828e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8290:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8292:	4b31      	ldr	r3, [pc, #196]	; (b8358 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8294:	2200      	movs	r2, #0
   b8296:	1da1      	adds	r1, r4, #6
   b8298:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b829a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b829e:	f7fc feab 	bl	b4ff8 <hal_ble_gatt_server_add_characteristic>
   b82a2:	2800      	cmp	r0, #0
   b82a4:	f47f af60 	bne.w	b8168 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b82a8:	2301      	movs	r3, #1
   b82aa:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b82ac:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b82ae:	4639      	mov	r1, r7
        return characteristics_;
   b82b0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b82b2:	a80d      	add	r0, sp, #52	; 0x34
   b82b4:	f7ff fb09 	bl	b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b82b8:	4620      	mov	r0, r4
   b82ba:	a90d      	add	r1, sp, #52	; 0x34
   b82bc:	f7ff ff1b 	bl	b80f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b82c0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b82c2:	a80e      	add	r0, sp, #56	; 0x38
   b82c4:	f7fc fa95 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82c8:	2c00      	cmp	r4, #0
   b82ca:	f47f af4d 	bne.w	b8168 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b82ce:	2320      	movs	r3, #32
   b82d0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b82d4:	4b21      	ldr	r3, [pc, #132]	; (b835c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b82d6:	9300      	str	r3, [sp, #0]
   b82d8:	aa0d      	add	r2, sp, #52	; 0x34
   b82da:	4623      	mov	r3, r4
   b82dc:	e777      	b.n	b81ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b82de:	4639      	mov	r1, r7
   b82e0:	4640      	mov	r0, r8
   b82e2:	f7ff faf2 	bl	b78ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b82e6:	a80c      	add	r0, sp, #48	; 0x30
   b82e8:	f7fc fa83 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82ec:	e740      	b.n	b8170 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b82ee:	a80b      	add	r0, sp, #44	; 0x2c
   b82f0:	f7ff f966 	bl	b75c0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b82f4:	4651      	mov	r1, sl
   b82f6:	a815      	add	r0, sp, #84	; 0x54
   b82f8:	f7ff f828 	bl	b734c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b82fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b82fe:	2300      	movs	r3, #0
   b8300:	3214      	adds	r2, #20
   b8302:	a915      	add	r1, sp, #84	; 0x54
   b8304:	2001      	movs	r0, #1
   b8306:	f7fc fe4f 	bl	b4fa8 <hal_ble_gatt_server_add_service>
   b830a:	2800      	cmp	r0, #0
   b830c:	d1e7      	bne.n	b82de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b830e:	6835      	ldr	r5, [r6, #0]
   b8310:	a90b      	add	r1, sp, #44	; 0x2c
   b8312:	a80d      	add	r0, sp, #52	; 0x34
   b8314:	f7ff fae7 	bl	b78e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8318:	4628      	mov	r0, r5
   b831a:	a90d      	add	r1, sp, #52	; 0x34
   b831c:	f7ff fe7c 	bl	b8018 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8320:	4605      	mov	r5, r0
   b8322:	a80e      	add	r0, sp, #56	; 0x38
   b8324:	f7fc fa65 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8328:	2d00      	cmp	r5, #0
   b832a:	d0d8      	beq.n	b82de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b832c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b832e:	6853      	ldr	r3, [r2, #4]
   b8330:	6812      	ldr	r2, [r2, #0]
   b8332:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8336:	3b01      	subs	r3, #1
   b8338:	a80c      	add	r0, sp, #48	; 0x30
   b833a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b833e:	f7fc fa58 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8342:	e76b      	b.n	b821c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8344:	000b91ff 	.word	0x000b91ff
   b8348:	000b8c42 	.word	0x000b8c42
   b834c:	000b92be 	.word	0x000b92be
   b8350:	2003e71c 	.word	0x2003e71c
   b8354:	002c0003 	.word	0x002c0003
   b8358:	000b7759 	.word	0x000b7759
   b835c:	000b922a 	.word	0x000b922a

000b8360 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8360:	4802      	ldr	r0, [pc, #8]	; (b836c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8362:	2300      	movs	r3, #0
   b8364:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8366:	f7fc bdcd 	b.w	b4f04 <os_mutex_recursive_create>
   b836a:	bf00      	nop
   b836c:	2003e720 	.word	0x2003e720

000b8370 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8370:	b510      	push	{r4, lr}
   b8372:	4604      	mov	r4, r0
{
	free(buffer);
   b8374:	6800      	ldr	r0, [r0, #0]
   b8376:	f7fc ff6d 	bl	b5254 <free>
}
   b837a:	4620      	mov	r0, r4
   b837c:	bd10      	pop	{r4, pc}

000b837e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b837e:	b510      	push	{r4, lr}
   b8380:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8382:	6800      	ldr	r0, [r0, #0]
   b8384:	b108      	cbz	r0, b838a <_ZN6String10invalidateEv+0xc>
   b8386:	f7fc ff65 	bl	b5254 <free>
	buffer = NULL;
   b838a:	2300      	movs	r3, #0
	capacity = len = 0;
   b838c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8390:	6023      	str	r3, [r4, #0]
}
   b8392:	bd10      	pop	{r4, pc}

000b8394 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8394:	b538      	push	{r3, r4, r5, lr}
   b8396:	4604      	mov	r4, r0
   b8398:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b839a:	6800      	ldr	r0, [r0, #0]
   b839c:	3101      	adds	r1, #1
   b839e:	f7fc ff61 	bl	b5264 <realloc>
	if (newbuffer) {
   b83a2:	b110      	cbz	r0, b83aa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b83a4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b83a8:	2001      	movs	r0, #1
	}
	return 0;
}
   b83aa:	bd38      	pop	{r3, r4, r5, pc}

000b83ac <_ZN6String7reserveEj>:
{
   b83ac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b83ae:	6803      	ldr	r3, [r0, #0]
{
   b83b0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b83b2:	b123      	cbz	r3, b83be <_ZN6String7reserveEj+0x12>
   b83b4:	6843      	ldr	r3, [r0, #4]
   b83b6:	428b      	cmp	r3, r1
   b83b8:	d301      	bcc.n	b83be <_ZN6String7reserveEj+0x12>
   b83ba:	2001      	movs	r0, #1
}
   b83bc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b83be:	4620      	mov	r0, r4
   b83c0:	f7ff ffe8 	bl	b8394 <_ZN6String12changeBufferEj>
   b83c4:	2800      	cmp	r0, #0
   b83c6:	d0f9      	beq.n	b83bc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b83c8:	68a3      	ldr	r3, [r4, #8]
   b83ca:	2b00      	cmp	r3, #0
   b83cc:	d1f5      	bne.n	b83ba <_ZN6String7reserveEj+0xe>
   b83ce:	6822      	ldr	r2, [r4, #0]
   b83d0:	7013      	strb	r3, [r2, #0]
   b83d2:	e7f2      	b.n	b83ba <_ZN6String7reserveEj+0xe>

000b83d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b83d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b83d6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b83d8:	4611      	mov	r1, r2
   b83da:	9201      	str	r2, [sp, #4]
{
   b83dc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b83de:	f7ff ffe5 	bl	b83ac <_ZN6String7reserveEj>
   b83e2:	9a01      	ldr	r2, [sp, #4]
   b83e4:	b928      	cbnz	r0, b83f2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b83e6:	4620      	mov	r0, r4
   b83e8:	f7ff ffc9 	bl	b837e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b83ec:	4620      	mov	r0, r4
   b83ee:	b003      	add	sp, #12
   b83f0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b83f2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b83f4:	4629      	mov	r1, r5
   b83f6:	6820      	ldr	r0, [r4, #0]
   b83f8:	f000 fa3c 	bl	b8874 <memcpy>
	buffer[len] = 0;
   b83fc:	6822      	ldr	r2, [r4, #0]
   b83fe:	68a3      	ldr	r3, [r4, #8]
   b8400:	2100      	movs	r1, #0
   b8402:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8404:	e7f2      	b.n	b83ec <_ZN6String4copyEPKcj+0x18>

000b8406 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8406:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8408:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b840a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b840e:	4604      	mov	r4, r0
	len = 0;
   b8410:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8412:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8414:	b141      	cbz	r1, b8428 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8416:	4608      	mov	r0, r1
   b8418:	9101      	str	r1, [sp, #4]
   b841a:	f000 fab2 	bl	b8982 <strlen>
   b841e:	9901      	ldr	r1, [sp, #4]
   b8420:	4602      	mov	r2, r0
   b8422:	4620      	mov	r0, r4
   b8424:	f7ff ffd6 	bl	b83d4 <_ZN6String4copyEPKcj>
}
   b8428:	4620      	mov	r0, r4
   b842a:	b002      	add	sp, #8
   b842c:	bd10      	pop	{r4, pc}

000b842e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b842e:	b538      	push	{r3, r4, r5, lr}
   b8430:	4605      	mov	r5, r0
	if (buffer) {
   b8432:	6800      	ldr	r0, [r0, #0]
{
   b8434:	460c      	mov	r4, r1
	if (buffer) {
   b8436:	b168      	cbz	r0, b8454 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8438:	686a      	ldr	r2, [r5, #4]
   b843a:	688b      	ldr	r3, [r1, #8]
   b843c:	429a      	cmp	r2, r3
   b843e:	d307      	bcc.n	b8450 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8440:	6809      	ldr	r1, [r1, #0]
   b8442:	f000 fa96 	bl	b8972 <strcpy>
			len = rhs.len;
   b8446:	68a3      	ldr	r3, [r4, #8]
   b8448:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b844a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b844c:	60a3      	str	r3, [r4, #8]
}
   b844e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8450:	f7fc ff00 	bl	b5254 <free>
	buffer = rhs.buffer;
   b8454:	6823      	ldr	r3, [r4, #0]
   b8456:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8458:	6863      	ldr	r3, [r4, #4]
   b845a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b845c:	68a3      	ldr	r3, [r4, #8]
   b845e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8460:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8462:	e9c4 3300 	strd	r3, r3, [r4]
   b8466:	e7f1      	b.n	b844c <_ZN6String4moveERS_+0x1e>

000b8468 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8468:	b510      	push	{r4, lr}
	buffer = NULL;
   b846a:	2300      	movs	r3, #0
	capacity = 0;
   b846c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8470:	4604      	mov	r4, r0
	len = 0;
   b8472:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8474:	7303      	strb	r3, [r0, #12]
	move(rval);
   b8476:	f7ff ffda 	bl	b842e <_ZN6String4moveERS_>
}
   b847a:	4620      	mov	r0, r4
   b847c:	bd10      	pop	{r4, pc}

000b847e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b847e:	4288      	cmp	r0, r1
{
   b8480:	b510      	push	{r4, lr}
   b8482:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8484:	d005      	beq.n	b8492 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8486:	680b      	ldr	r3, [r1, #0]
   b8488:	b12b      	cbz	r3, b8496 <_ZN6StringaSERKS_+0x18>
   b848a:	688a      	ldr	r2, [r1, #8]
   b848c:	4619      	mov	r1, r3
   b848e:	f7ff ffa1 	bl	b83d4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8492:	4620      	mov	r0, r4
   b8494:	bd10      	pop	{r4, pc}
	else invalidate();
   b8496:	f7ff ff72 	bl	b837e <_ZN6String10invalidateEv>
   b849a:	e7fa      	b.n	b8492 <_ZN6StringaSERKS_+0x14>

000b849c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b849c:	b510      	push	{r4, lr}
	buffer = NULL;
   b849e:	2300      	movs	r3, #0
String::String(const String &value)
   b84a0:	4604      	mov	r4, r0
	capacity = 0;
   b84a2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b84a6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b84a8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b84aa:	f7ff ffe8 	bl	b847e <_ZN6StringaSERKS_>
}
   b84ae:	4620      	mov	r0, r4
   b84b0:	bd10      	pop	{r4, pc}

000b84b2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b84b2:	b513      	push	{r0, r1, r4, lr}
   b84b4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b84b6:	b159      	cbz	r1, b84d0 <_ZN6StringaSEPKc+0x1e>
   b84b8:	4608      	mov	r0, r1
   b84ba:	9101      	str	r1, [sp, #4]
   b84bc:	f000 fa61 	bl	b8982 <strlen>
   b84c0:	9901      	ldr	r1, [sp, #4]
   b84c2:	4602      	mov	r2, r0
   b84c4:	4620      	mov	r0, r4
   b84c6:	f7ff ff85 	bl	b83d4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b84ca:	4620      	mov	r0, r4
   b84cc:	b002      	add	sp, #8
   b84ce:	bd10      	pop	{r4, pc}
	else invalidate();
   b84d0:	f7ff ff55 	bl	b837e <_ZN6String10invalidateEv>
   b84d4:	e7f9      	b.n	b84ca <_ZN6StringaSEPKc+0x18>
	...

000b84d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b84d8:	4b05      	ldr	r3, [pc, #20]	; (b84f0 <_GLOBAL__sub_I_System+0x18>)
   b84da:	2202      	movs	r2, #2
   b84dc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b84de:	4b05      	ldr	r3, [pc, #20]	; (b84f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b84e0:	4a05      	ldr	r2, [pc, #20]	; (b84f8 <_GLOBAL__sub_I_System+0x20>)
   b84e2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b84e4:	2000      	movs	r0, #0
   b84e6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b84ea:	f7fc be87 	b.w	b51fc <set_system_mode>
   b84ee:	bf00      	nop
   b84f0:	2003e734 	.word	0x2003e734
   b84f4:	2003e728 	.word	0x2003e728
   b84f8:	ffff0000 	.word	0xffff0000

000b84fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b84fc:	2200      	movs	r2, #0
   b84fe:	6840      	ldr	r0, [r0, #4]
   b8500:	4611      	mov	r1, r2
   b8502:	f7fc be4b 	b.w	b519c <network_listening>

000b8506 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8506:	2200      	movs	r2, #0
   b8508:	6840      	ldr	r0, [r0, #4]
   b850a:	4611      	mov	r1, r2
   b850c:	f7fc be5e 	b.w	b51cc <network_get_listen_timeout>

000b8510 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8510:	6840      	ldr	r0, [r0, #4]
   b8512:	2200      	movs	r2, #0
   b8514:	f7fc be52 	b.w	b51bc <network_set_listen_timeout>

000b8518 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8518:	6840      	ldr	r0, [r0, #4]
   b851a:	2200      	movs	r2, #0
   b851c:	f081 0101 	eor.w	r1, r1, #1
   b8520:	f7fc be34 	b.w	b518c <network_listen>

000b8524 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8524:	2300      	movs	r3, #0
   b8526:	6840      	ldr	r0, [r0, #4]
   b8528:	461a      	mov	r2, r3
   b852a:	4619      	mov	r1, r3
   b852c:	f7fc be26 	b.w	b517c <network_off>

000b8530 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8530:	2300      	movs	r3, #0
   b8532:	6840      	ldr	r0, [r0, #4]
   b8534:	461a      	mov	r2, r3
   b8536:	4619      	mov	r1, r3
   b8538:	f7fc be18 	b.w	b516c <network_on>

000b853c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b853c:	2200      	movs	r2, #0
   b853e:	6840      	ldr	r0, [r0, #4]
   b8540:	4611      	mov	r1, r2
   b8542:	f7fc be0b 	b.w	b515c <network_ready>

000b8546 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8546:	2200      	movs	r2, #0
   b8548:	6840      	ldr	r0, [r0, #4]
   b854a:	4611      	mov	r1, r2
   b854c:	f7fc bdf6 	b.w	b513c <network_connecting>

000b8550 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8550:	6840      	ldr	r0, [r0, #4]
   b8552:	2200      	movs	r2, #0
   b8554:	2102      	movs	r1, #2
   b8556:	f7fc bdf9 	b.w	b514c <network_disconnect>

000b855a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b855a:	2300      	movs	r3, #0
   b855c:	6840      	ldr	r0, [r0, #4]
   b855e:	461a      	mov	r2, r3
   b8560:	f7fc bde4 	b.w	b512c <network_connect>

000b8564 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8564:	4b02      	ldr	r3, [pc, #8]	; (b8570 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8566:	2203      	movs	r2, #3
   b8568:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b856a:	4a02      	ldr	r2, [pc, #8]	; (b8574 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b856c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b856e:	4770      	bx	lr
   b8570:	2003e738 	.word	0x2003e738
   b8574:	000b92e8 	.word	0x000b92e8

000b8578 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8578:	4770      	bx	lr
	...

000b857c <_Z20acquireSerial1Bufferv>:
{
   b857c:	b538      	push	{r3, r4, r5, lr}
   b857e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8580:	2514      	movs	r5, #20
   b8582:	462a      	mov	r2, r5
   b8584:	2100      	movs	r1, #0
   b8586:	f000 f99d 	bl	b88c4 <memset>
   b858a:	8025      	strh	r5, [r4, #0]
   b858c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b858e:	4907      	ldr	r1, [pc, #28]	; (b85ac <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8590:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8592:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8594:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8596:	f000 f831 	bl	b85fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b859a:	4904      	ldr	r1, [pc, #16]	; (b85ac <_Z20acquireSerial1Bufferv+0x30>)
    };
   b859c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b859e:	4628      	mov	r0, r5
   b85a0:	f000 f82c 	bl	b85fc <_ZnajRKSt9nothrow_t>
    };
   b85a4:	60e0      	str	r0, [r4, #12]
}
   b85a6:	4620      	mov	r0, r4
   b85a8:	bd38      	pop	{r3, r4, r5, pc}
   b85aa:	bf00      	nop
   b85ac:	000b931c 	.word	0x000b931c

000b85b0 <_Z22__fetch_global_Serial1v>:
{
   b85b0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b85b2:	4d0e      	ldr	r5, [pc, #56]	; (b85ec <_Z22__fetch_global_Serial1v+0x3c>)
   b85b4:	7829      	ldrb	r1, [r5, #0]
   b85b6:	f3bf 8f5b 	dmb	ish
   b85ba:	f011 0401 	ands.w	r4, r1, #1
{
   b85be:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b85c0:	d111      	bne.n	b85e6 <_Z22__fetch_global_Serial1v+0x36>
   b85c2:	4628      	mov	r0, r5
   b85c4:	f7fb fd7a 	bl	b40bc <__cxa_guard_acquire>
   b85c8:	b168      	cbz	r0, b85e6 <_Z22__fetch_global_Serial1v+0x36>
   b85ca:	a801      	add	r0, sp, #4
   b85cc:	f7ff ffd6 	bl	b857c <_Z20acquireSerial1Bufferv>
   b85d0:	aa01      	add	r2, sp, #4
   b85d2:	4621      	mov	r1, r4
   b85d4:	4806      	ldr	r0, [pc, #24]	; (b85f0 <_Z22__fetch_global_Serial1v+0x40>)
   b85d6:	f7fc ffb5 	bl	b5544 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b85da:	4628      	mov	r0, r5
   b85dc:	f7fb fd73 	bl	b40c6 <__cxa_guard_release>
   b85e0:	4804      	ldr	r0, [pc, #16]	; (b85f4 <_Z22__fetch_global_Serial1v+0x44>)
   b85e2:	f000 f929 	bl	b8838 <atexit>
    return serial1;
}
   b85e6:	4802      	ldr	r0, [pc, #8]	; (b85f0 <_Z22__fetch_global_Serial1v+0x40>)
   b85e8:	b007      	add	sp, #28
   b85ea:	bd30      	pop	{r4, r5, pc}
   b85ec:	2003e744 	.word	0x2003e744
   b85f0:	2003e748 	.word	0x2003e748
   b85f4:	000b8579 	.word	0x000b8579

000b85f8 <_ZnwjRKSt9nothrow_t>:
   b85f8:	f7fb bd4b 	b.w	b4092 <_Znwj>

000b85fc <_ZnajRKSt9nothrow_t>:
   b85fc:	f7fb bd4b 	b.w	b4096 <_Znaj>

000b8600 <_ZSt17__throw_bad_allocv>:
   b8600:	b508      	push	{r3, lr}
   b8602:	f7fc fe47 	bl	b5294 <abort>

000b8606 <_ZSt20__throw_length_errorPKc>:
   b8606:	b508      	push	{r3, lr}
   b8608:	f7fc fe44 	bl	b5294 <abort>

000b860c <_ZSt25__throw_bad_function_callv>:
   b860c:	b508      	push	{r3, lr}
   b860e:	f7fc fe41 	bl	b5294 <abort>
	...

000b8614 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8614:	4901      	ldr	r1, [pc, #4]	; (b861c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8616:	f000 b8f9 	b.w	b880c <_ZNKSt9type_infoeqERKS_>
   b861a:	bf00      	nop
   b861c:	000b9338 	.word	0x000b9338

000b8620 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8622:	2400      	movs	r4, #0
   b8624:	2310      	movs	r3, #16
   b8626:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b862a:	6803      	ldr	r3, [r0, #0]
   b862c:	4615      	mov	r5, r2
   b862e:	699e      	ldr	r6, [r3, #24]
   b8630:	6812      	ldr	r2, [r2, #0]
   b8632:	466b      	mov	r3, sp
   b8634:	e9cd 4400 	strd	r4, r4, [sp]
   b8638:	47b0      	blx	r6
   b863a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b863e:	f003 0306 	and.w	r3, r3, #6
   b8642:	2b06      	cmp	r3, #6
   b8644:	bf03      	ittte	eq
   b8646:	9b00      	ldreq	r3, [sp, #0]
   b8648:	602b      	streq	r3, [r5, #0]
   b864a:	2001      	moveq	r0, #1
   b864c:	4620      	movne	r0, r4
   b864e:	b004      	add	sp, #16
   b8650:	bd70      	pop	{r4, r5, r6, pc}

000b8652 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8652:	9800      	ldr	r0, [sp, #0]
   b8654:	4290      	cmp	r0, r2
   b8656:	bf14      	ite	ne
   b8658:	2001      	movne	r0, #1
   b865a:	2006      	moveq	r0, #6
   b865c:	4770      	bx	lr
	...

000b8660 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8660:	b510      	push	{r4, lr}
   b8662:	4b03      	ldr	r3, [pc, #12]	; (b8670 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8664:	6003      	str	r3, [r0, #0]
   b8666:	4604      	mov	r4, r0
   b8668:	f000 f8cd 	bl	b8806 <_ZNSt9type_infoD1Ev>
   b866c:	4620      	mov	r0, r4
   b866e:	bd10      	pop	{r4, pc}
   b8670:	000b9378 	.word	0x000b9378

000b8674 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8674:	b510      	push	{r4, lr}
   b8676:	4604      	mov	r4, r0
   b8678:	f7ff fff2 	bl	b8660 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b867c:	4620      	mov	r0, r4
   b867e:	2108      	movs	r1, #8
   b8680:	f7fb fd0d 	bl	b409e <_ZdlPvj>
   b8684:	4620      	mov	r0, r4
   b8686:	bd10      	pop	{r4, pc}

000b8688 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b868c:	461f      	mov	r7, r3
   b868e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8692:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8696:	4598      	cmp	r8, r3
   b8698:	4606      	mov	r6, r0
   b869a:	4615      	mov	r5, r2
   b869c:	d107      	bne.n	b86ae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b869e:	9907      	ldr	r1, [sp, #28]
   b86a0:	f000 f8b4 	bl	b880c <_ZNKSt9type_infoeqERKS_>
   b86a4:	b118      	cbz	r0, b86ae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b86a6:	7165      	strb	r5, [r4, #5]
   b86a8:	2000      	movs	r0, #0
   b86aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b86ae:	4639      	mov	r1, r7
   b86b0:	4630      	mov	r0, r6
   b86b2:	f000 f8ab 	bl	b880c <_ZNKSt9type_infoeqERKS_>
   b86b6:	2800      	cmp	r0, #0
   b86b8:	d0f6      	beq.n	b86a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b86ba:	2301      	movs	r3, #1
   b86bc:	f8c4 8000 	str.w	r8, [r4]
   b86c0:	7125      	strb	r5, [r4, #4]
   b86c2:	71a3      	strb	r3, [r4, #6]
   b86c4:	e7f0      	b.n	b86a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b86c6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b86c6:	b538      	push	{r3, r4, r5, lr}
   b86c8:	4615      	mov	r5, r2
   b86ca:	461c      	mov	r4, r3
   b86cc:	f000 f89e 	bl	b880c <_ZNKSt9type_infoeqERKS_>
   b86d0:	b120      	cbz	r0, b86dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b86d2:	2308      	movs	r3, #8
   b86d4:	60e3      	str	r3, [r4, #12]
   b86d6:	2306      	movs	r3, #6
   b86d8:	6025      	str	r5, [r4, #0]
   b86da:	7123      	strb	r3, [r4, #4]
   b86dc:	bd38      	pop	{r3, r4, r5, pc}

000b86de <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b86de:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b86e0:	4605      	mov	r5, r0
   b86e2:	460c      	mov	r4, r1
   b86e4:	9201      	str	r2, [sp, #4]
   b86e6:	461e      	mov	r6, r3
   b86e8:	f000 f890 	bl	b880c <_ZNKSt9type_infoeqERKS_>
   b86ec:	b950      	cbnz	r0, b8704 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b86ee:	2e03      	cmp	r6, #3
   b86f0:	d808      	bhi.n	b8704 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b86f2:	6823      	ldr	r3, [r4, #0]
   b86f4:	9a01      	ldr	r2, [sp, #4]
   b86f6:	695b      	ldr	r3, [r3, #20]
   b86f8:	4629      	mov	r1, r5
   b86fa:	4620      	mov	r0, r4
   b86fc:	b002      	add	sp, #8
   b86fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8702:	4718      	bx	r3
   b8704:	b002      	add	sp, #8
   b8706:	bd70      	pop	{r4, r5, r6, pc}

000b8708 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8708:	b510      	push	{r4, lr}
   b870a:	4b03      	ldr	r3, [pc, #12]	; (b8718 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b870c:	6003      	str	r3, [r0, #0]
   b870e:	4604      	mov	r4, r0
   b8710:	f7ff ffa6 	bl	b8660 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8714:	4620      	mov	r0, r4
   b8716:	bd10      	pop	{r4, pc}
   b8718:	000b93d8 	.word	0x000b93d8

000b871c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b871c:	b510      	push	{r4, lr}
   b871e:	4604      	mov	r4, r0
   b8720:	f7ff fff2 	bl	b8708 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8724:	4620      	mov	r0, r4
   b8726:	210c      	movs	r1, #12
   b8728:	f7fb fcb9 	bl	b409e <_ZdlPvj>
   b872c:	4620      	mov	r0, r4
   b872e:	bd10      	pop	{r4, pc}

000b8730 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8732:	9f08      	ldr	r7, [sp, #32]
   b8734:	4297      	cmp	r7, r2
   b8736:	4605      	mov	r5, r0
   b8738:	460e      	mov	r6, r1
   b873a:	4614      	mov	r4, r2
   b873c:	d00a      	beq.n	b8754 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b873e:	68a8      	ldr	r0, [r5, #8]
   b8740:	6802      	ldr	r2, [r0, #0]
   b8742:	9708      	str	r7, [sp, #32]
   b8744:	6a15      	ldr	r5, [r2, #32]
   b8746:	4631      	mov	r1, r6
   b8748:	4622      	mov	r2, r4
   b874a:	46ac      	mov	ip, r5
   b874c:	b003      	add	sp, #12
   b874e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8752:	4760      	bx	ip
   b8754:	4619      	mov	r1, r3
   b8756:	9301      	str	r3, [sp, #4]
   b8758:	f000 f858 	bl	b880c <_ZNKSt9type_infoeqERKS_>
   b875c:	9b01      	ldr	r3, [sp, #4]
   b875e:	2800      	cmp	r0, #0
   b8760:	d0ed      	beq.n	b873e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8762:	2006      	movs	r0, #6
   b8764:	b003      	add	sp, #12
   b8766:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b876c:	460d      	mov	r5, r1
   b876e:	4619      	mov	r1, r3
   b8770:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8774:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8778:	4681      	mov	r9, r0
   b877a:	4617      	mov	r7, r2
   b877c:	4698      	mov	r8, r3
   b877e:	f000 f845 	bl	b880c <_ZNKSt9type_infoeqERKS_>
   b8782:	b190      	cbz	r0, b87aa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8784:	2d00      	cmp	r5, #0
   b8786:	6034      	str	r4, [r6, #0]
   b8788:	7137      	strb	r7, [r6, #4]
   b878a:	db09      	blt.n	b87a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b878c:	1961      	adds	r1, r4, r5
   b878e:	458a      	cmp	sl, r1
   b8790:	bf0c      	ite	eq
   b8792:	2106      	moveq	r1, #6
   b8794:	2101      	movne	r1, #1
   b8796:	71b1      	strb	r1, [r6, #6]
   b8798:	2000      	movs	r0, #0
   b879a:	b001      	add	sp, #4
   b879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b87a0:	3502      	adds	r5, #2
   b87a2:	d1f9      	bne.n	b8798 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b87a4:	2301      	movs	r3, #1
   b87a6:	71b3      	strb	r3, [r6, #6]
   b87a8:	e7f6      	b.n	b8798 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b87aa:	4554      	cmp	r4, sl
   b87ac:	d106      	bne.n	b87bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b87ae:	4659      	mov	r1, fp
   b87b0:	4648      	mov	r0, r9
   b87b2:	f000 f82b 	bl	b880c <_ZNKSt9type_infoeqERKS_>
   b87b6:	b108      	cbz	r0, b87bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b87b8:	7177      	strb	r7, [r6, #5]
   b87ba:	e7ed      	b.n	b8798 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b87bc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b87c0:	6803      	ldr	r3, [r0, #0]
   b87c2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b87c6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b87ca:	69dc      	ldr	r4, [r3, #28]
   b87cc:	463a      	mov	r2, r7
   b87ce:	4643      	mov	r3, r8
   b87d0:	4629      	mov	r1, r5
   b87d2:	46a4      	mov	ip, r4
   b87d4:	b001      	add	sp, #4
   b87d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b87da:	4760      	bx	ip

000b87dc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b87dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b87e0:	4607      	mov	r7, r0
   b87e2:	460c      	mov	r4, r1
   b87e4:	4615      	mov	r5, r2
   b87e6:	461e      	mov	r6, r3
   b87e8:	f7ff ff6d 	bl	b86c6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b87ec:	b948      	cbnz	r0, b8802 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b87ee:	68b8      	ldr	r0, [r7, #8]
   b87f0:	6803      	ldr	r3, [r0, #0]
   b87f2:	699f      	ldr	r7, [r3, #24]
   b87f4:	462a      	mov	r2, r5
   b87f6:	4633      	mov	r3, r6
   b87f8:	4621      	mov	r1, r4
   b87fa:	46bc      	mov	ip, r7
   b87fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8800:	4760      	bx	ip
   b8802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8806 <_ZNSt9type_infoD1Ev>:
   b8806:	4770      	bx	lr

000b8808 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8808:	2000      	movs	r0, #0
   b880a:	4770      	bx	lr

000b880c <_ZNKSt9type_infoeqERKS_>:
   b880c:	4281      	cmp	r1, r0
   b880e:	b508      	push	{r3, lr}
   b8810:	d00e      	beq.n	b8830 <_ZNKSt9type_infoeqERKS_+0x24>
   b8812:	6840      	ldr	r0, [r0, #4]
   b8814:	7803      	ldrb	r3, [r0, #0]
   b8816:	2b2a      	cmp	r3, #42	; 0x2a
   b8818:	d00c      	beq.n	b8834 <_ZNKSt9type_infoeqERKS_+0x28>
   b881a:	6849      	ldr	r1, [r1, #4]
   b881c:	780b      	ldrb	r3, [r1, #0]
   b881e:	2b2a      	cmp	r3, #42	; 0x2a
   b8820:	bf08      	it	eq
   b8822:	3101      	addeq	r1, #1
   b8824:	f000 f89b 	bl	b895e <strcmp>
   b8828:	fab0 f080 	clz	r0, r0
   b882c:	0940      	lsrs	r0, r0, #5
   b882e:	bd08      	pop	{r3, pc}
   b8830:	2001      	movs	r0, #1
   b8832:	e7fc      	b.n	b882e <_ZNKSt9type_infoeqERKS_+0x22>
   b8834:	2000      	movs	r0, #0
   b8836:	e7fa      	b.n	b882e <_ZNKSt9type_infoeqERKS_+0x22>

000b8838 <atexit>:
   b8838:	2300      	movs	r3, #0
   b883a:	4601      	mov	r1, r0
   b883c:	461a      	mov	r2, r3
   b883e:	4618      	mov	r0, r3
   b8840:	f000 b968 	b.w	b8b14 <__register_exitproc>

000b8844 <isprint>:
   b8844:	4b02      	ldr	r3, [pc, #8]	; (b8850 <isprint+0xc>)
   b8846:	4418      	add	r0, r3
   b8848:	7840      	ldrb	r0, [r0, #1]
   b884a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b884e:	4770      	bx	lr
   b8850:	000b94a5 	.word	0x000b94a5

000b8854 <memcmp>:
   b8854:	b510      	push	{r4, lr}
   b8856:	3901      	subs	r1, #1
   b8858:	4402      	add	r2, r0
   b885a:	4290      	cmp	r0, r2
   b885c:	d101      	bne.n	b8862 <memcmp+0xe>
   b885e:	2000      	movs	r0, #0
   b8860:	e005      	b.n	b886e <memcmp+0x1a>
   b8862:	7803      	ldrb	r3, [r0, #0]
   b8864:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8868:	42a3      	cmp	r3, r4
   b886a:	d001      	beq.n	b8870 <memcmp+0x1c>
   b886c:	1b18      	subs	r0, r3, r4
   b886e:	bd10      	pop	{r4, pc}
   b8870:	3001      	adds	r0, #1
   b8872:	e7f2      	b.n	b885a <memcmp+0x6>

000b8874 <memcpy>:
   b8874:	440a      	add	r2, r1
   b8876:	4291      	cmp	r1, r2
   b8878:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b887c:	d100      	bne.n	b8880 <memcpy+0xc>
   b887e:	4770      	bx	lr
   b8880:	b510      	push	{r4, lr}
   b8882:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8886:	f803 4f01 	strb.w	r4, [r3, #1]!
   b888a:	4291      	cmp	r1, r2
   b888c:	d1f9      	bne.n	b8882 <memcpy+0xe>
   b888e:	bd10      	pop	{r4, pc}

000b8890 <memmove>:
   b8890:	4288      	cmp	r0, r1
   b8892:	b510      	push	{r4, lr}
   b8894:	eb01 0402 	add.w	r4, r1, r2
   b8898:	d902      	bls.n	b88a0 <memmove+0x10>
   b889a:	4284      	cmp	r4, r0
   b889c:	4623      	mov	r3, r4
   b889e:	d807      	bhi.n	b88b0 <memmove+0x20>
   b88a0:	1e43      	subs	r3, r0, #1
   b88a2:	42a1      	cmp	r1, r4
   b88a4:	d008      	beq.n	b88b8 <memmove+0x28>
   b88a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b88aa:	f803 2f01 	strb.w	r2, [r3, #1]!
   b88ae:	e7f8      	b.n	b88a2 <memmove+0x12>
   b88b0:	4402      	add	r2, r0
   b88b2:	4601      	mov	r1, r0
   b88b4:	428a      	cmp	r2, r1
   b88b6:	d100      	bne.n	b88ba <memmove+0x2a>
   b88b8:	bd10      	pop	{r4, pc}
   b88ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b88be:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b88c2:	e7f7      	b.n	b88b4 <memmove+0x24>

000b88c4 <memset>:
   b88c4:	4402      	add	r2, r0
   b88c6:	4603      	mov	r3, r0
   b88c8:	4293      	cmp	r3, r2
   b88ca:	d100      	bne.n	b88ce <memset+0xa>
   b88cc:	4770      	bx	lr
   b88ce:	f803 1b01 	strb.w	r1, [r3], #1
   b88d2:	e7f9      	b.n	b88c8 <memset+0x4>

000b88d4 <srand>:
   b88d4:	b538      	push	{r3, r4, r5, lr}
   b88d6:	4b10      	ldr	r3, [pc, #64]	; (b8918 <srand+0x44>)
   b88d8:	681d      	ldr	r5, [r3, #0]
   b88da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b88dc:	4604      	mov	r4, r0
   b88de:	b9b3      	cbnz	r3, b890e <srand+0x3a>
   b88e0:	2018      	movs	r0, #24
   b88e2:	f7fc fcaf 	bl	b5244 <malloc>
   b88e6:	4602      	mov	r2, r0
   b88e8:	63a8      	str	r0, [r5, #56]	; 0x38
   b88ea:	b920      	cbnz	r0, b88f6 <srand+0x22>
   b88ec:	4b0b      	ldr	r3, [pc, #44]	; (b891c <srand+0x48>)
   b88ee:	480c      	ldr	r0, [pc, #48]	; (b8920 <srand+0x4c>)
   b88f0:	2142      	movs	r1, #66	; 0x42
   b88f2:	f7fc fcdf 	bl	b52b4 <__assert_func>
   b88f6:	490b      	ldr	r1, [pc, #44]	; (b8924 <srand+0x50>)
   b88f8:	4b0b      	ldr	r3, [pc, #44]	; (b8928 <srand+0x54>)
   b88fa:	e9c0 1300 	strd	r1, r3, [r0]
   b88fe:	4b0b      	ldr	r3, [pc, #44]	; (b892c <srand+0x58>)
   b8900:	6083      	str	r3, [r0, #8]
   b8902:	230b      	movs	r3, #11
   b8904:	8183      	strh	r3, [r0, #12]
   b8906:	2100      	movs	r1, #0
   b8908:	2001      	movs	r0, #1
   b890a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b890e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8910:	2200      	movs	r2, #0
   b8912:	611c      	str	r4, [r3, #16]
   b8914:	615a      	str	r2, [r3, #20]
   b8916:	bd38      	pop	{r3, r4, r5, pc}
   b8918:	2003e59c 	.word	0x2003e59c
   b891c:	000b9411 	.word	0x000b9411
   b8920:	000b9428 	.word	0x000b9428
   b8924:	abcd330e 	.word	0xabcd330e
   b8928:	e66d1234 	.word	0xe66d1234
   b892c:	0005deec 	.word	0x0005deec

000b8930 <strchr>:
   b8930:	b2c9      	uxtb	r1, r1
   b8932:	4603      	mov	r3, r0
   b8934:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8938:	b11a      	cbz	r2, b8942 <strchr+0x12>
   b893a:	428a      	cmp	r2, r1
   b893c:	d1f9      	bne.n	b8932 <strchr+0x2>
   b893e:	4618      	mov	r0, r3
   b8940:	4770      	bx	lr
   b8942:	2900      	cmp	r1, #0
   b8944:	bf18      	it	ne
   b8946:	2300      	movne	r3, #0
   b8948:	e7f9      	b.n	b893e <strchr+0xe>

000b894a <strchrnul>:
   b894a:	b510      	push	{r4, lr}
   b894c:	4604      	mov	r4, r0
   b894e:	f7ff ffef 	bl	b8930 <strchr>
   b8952:	b918      	cbnz	r0, b895c <strchrnul+0x12>
   b8954:	4620      	mov	r0, r4
   b8956:	f000 f814 	bl	b8982 <strlen>
   b895a:	4420      	add	r0, r4
   b895c:	bd10      	pop	{r4, pc}

000b895e <strcmp>:
   b895e:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8962:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8966:	2a01      	cmp	r2, #1
   b8968:	bf28      	it	cs
   b896a:	429a      	cmpcs	r2, r3
   b896c:	d0f7      	beq.n	b895e <strcmp>
   b896e:	1ad0      	subs	r0, r2, r3
   b8970:	4770      	bx	lr

000b8972 <strcpy>:
   b8972:	4603      	mov	r3, r0
   b8974:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8978:	f803 2b01 	strb.w	r2, [r3], #1
   b897c:	2a00      	cmp	r2, #0
   b897e:	d1f9      	bne.n	b8974 <strcpy+0x2>
   b8980:	4770      	bx	lr

000b8982 <strlen>:
   b8982:	4603      	mov	r3, r0
   b8984:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8988:	2a00      	cmp	r2, #0
   b898a:	d1fb      	bne.n	b8984 <strlen+0x2>
   b898c:	1a18      	subs	r0, r3, r0
   b898e:	3801      	subs	r0, #1
   b8990:	4770      	bx	lr

000b8992 <strncmp>:
   b8992:	b510      	push	{r4, lr}
   b8994:	b17a      	cbz	r2, b89b6 <strncmp+0x24>
   b8996:	4603      	mov	r3, r0
   b8998:	3901      	subs	r1, #1
   b899a:	1884      	adds	r4, r0, r2
   b899c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b89a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b89a4:	4290      	cmp	r0, r2
   b89a6:	d101      	bne.n	b89ac <strncmp+0x1a>
   b89a8:	42a3      	cmp	r3, r4
   b89aa:	d101      	bne.n	b89b0 <strncmp+0x1e>
   b89ac:	1a80      	subs	r0, r0, r2
   b89ae:	bd10      	pop	{r4, pc}
   b89b0:	2800      	cmp	r0, #0
   b89b2:	d1f3      	bne.n	b899c <strncmp+0xa>
   b89b4:	e7fa      	b.n	b89ac <strncmp+0x1a>
   b89b6:	4610      	mov	r0, r2
   b89b8:	e7f9      	b.n	b89ae <strncmp+0x1c>

000b89ba <strnlen>:
   b89ba:	b510      	push	{r4, lr}
   b89bc:	4602      	mov	r2, r0
   b89be:	4401      	add	r1, r0
   b89c0:	428a      	cmp	r2, r1
   b89c2:	4613      	mov	r3, r2
   b89c4:	d003      	beq.n	b89ce <strnlen+0x14>
   b89c6:	781c      	ldrb	r4, [r3, #0]
   b89c8:	3201      	adds	r2, #1
   b89ca:	2c00      	cmp	r4, #0
   b89cc:	d1f8      	bne.n	b89c0 <strnlen+0x6>
   b89ce:	1a18      	subs	r0, r3, r0
   b89d0:	bd10      	pop	{r4, pc}

000b89d2 <strrchr>:
   b89d2:	b538      	push	{r3, r4, r5, lr}
   b89d4:	4603      	mov	r3, r0
   b89d6:	460c      	mov	r4, r1
   b89d8:	b969      	cbnz	r1, b89f6 <strrchr+0x24>
   b89da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b89de:	f7ff bfa7 	b.w	b8930 <strchr>
   b89e2:	1c43      	adds	r3, r0, #1
   b89e4:	4605      	mov	r5, r0
   b89e6:	4621      	mov	r1, r4
   b89e8:	4618      	mov	r0, r3
   b89ea:	f7ff ffa1 	bl	b8930 <strchr>
   b89ee:	2800      	cmp	r0, #0
   b89f0:	d1f7      	bne.n	b89e2 <strrchr+0x10>
   b89f2:	4628      	mov	r0, r5
   b89f4:	bd38      	pop	{r3, r4, r5, pc}
   b89f6:	2500      	movs	r5, #0
   b89f8:	e7f5      	b.n	b89e6 <strrchr+0x14>
	...

000b89fc <_strtol_l.constprop.0>:
   b89fc:	2b01      	cmp	r3, #1
   b89fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8a02:	d001      	beq.n	b8a08 <_strtol_l.constprop.0+0xc>
   b8a04:	2b24      	cmp	r3, #36	; 0x24
   b8a06:	d906      	bls.n	b8a16 <_strtol_l.constprop.0+0x1a>
   b8a08:	f7fc fc4c 	bl	b52a4 <__errno>
   b8a0c:	2316      	movs	r3, #22
   b8a0e:	6003      	str	r3, [r0, #0]
   b8a10:	2000      	movs	r0, #0
   b8a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8a16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8afc <_strtol_l.constprop.0+0x100>
   b8a1a:	460d      	mov	r5, r1
   b8a1c:	462e      	mov	r6, r5
   b8a1e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8a22:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8a26:	f017 0708 	ands.w	r7, r7, #8
   b8a2a:	d1f7      	bne.n	b8a1c <_strtol_l.constprop.0+0x20>
   b8a2c:	2c2d      	cmp	r4, #45	; 0x2d
   b8a2e:	d132      	bne.n	b8a96 <_strtol_l.constprop.0+0x9a>
   b8a30:	782c      	ldrb	r4, [r5, #0]
   b8a32:	2701      	movs	r7, #1
   b8a34:	1cb5      	adds	r5, r6, #2
   b8a36:	2b00      	cmp	r3, #0
   b8a38:	d05b      	beq.n	b8af2 <_strtol_l.constprop.0+0xf6>
   b8a3a:	2b10      	cmp	r3, #16
   b8a3c:	d109      	bne.n	b8a52 <_strtol_l.constprop.0+0x56>
   b8a3e:	2c30      	cmp	r4, #48	; 0x30
   b8a40:	d107      	bne.n	b8a52 <_strtol_l.constprop.0+0x56>
   b8a42:	782c      	ldrb	r4, [r5, #0]
   b8a44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8a48:	2c58      	cmp	r4, #88	; 0x58
   b8a4a:	d14d      	bne.n	b8ae8 <_strtol_l.constprop.0+0xec>
   b8a4c:	786c      	ldrb	r4, [r5, #1]
   b8a4e:	2310      	movs	r3, #16
   b8a50:	3502      	adds	r5, #2
   b8a52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8a56:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8a5a:	f04f 0c00 	mov.w	ip, #0
   b8a5e:	fbb8 f9f3 	udiv	r9, r8, r3
   b8a62:	4666      	mov	r6, ip
   b8a64:	fb03 8a19 	mls	sl, r3, r9, r8
   b8a68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8a6c:	f1be 0f09 	cmp.w	lr, #9
   b8a70:	d816      	bhi.n	b8aa0 <_strtol_l.constprop.0+0xa4>
   b8a72:	4674      	mov	r4, lr
   b8a74:	42a3      	cmp	r3, r4
   b8a76:	dd24      	ble.n	b8ac2 <_strtol_l.constprop.0+0xc6>
   b8a78:	f1bc 0f00 	cmp.w	ip, #0
   b8a7c:	db1e      	blt.n	b8abc <_strtol_l.constprop.0+0xc0>
   b8a7e:	45b1      	cmp	r9, r6
   b8a80:	d31c      	bcc.n	b8abc <_strtol_l.constprop.0+0xc0>
   b8a82:	d101      	bne.n	b8a88 <_strtol_l.constprop.0+0x8c>
   b8a84:	45a2      	cmp	sl, r4
   b8a86:	db19      	blt.n	b8abc <_strtol_l.constprop.0+0xc0>
   b8a88:	fb06 4603 	mla	r6, r6, r3, r4
   b8a8c:	f04f 0c01 	mov.w	ip, #1
   b8a90:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8a94:	e7e8      	b.n	b8a68 <_strtol_l.constprop.0+0x6c>
   b8a96:	2c2b      	cmp	r4, #43	; 0x2b
   b8a98:	bf04      	itt	eq
   b8a9a:	782c      	ldrbeq	r4, [r5, #0]
   b8a9c:	1cb5      	addeq	r5, r6, #2
   b8a9e:	e7ca      	b.n	b8a36 <_strtol_l.constprop.0+0x3a>
   b8aa0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8aa4:	f1be 0f19 	cmp.w	lr, #25
   b8aa8:	d801      	bhi.n	b8aae <_strtol_l.constprop.0+0xb2>
   b8aaa:	3c37      	subs	r4, #55	; 0x37
   b8aac:	e7e2      	b.n	b8a74 <_strtol_l.constprop.0+0x78>
   b8aae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8ab2:	f1be 0f19 	cmp.w	lr, #25
   b8ab6:	d804      	bhi.n	b8ac2 <_strtol_l.constprop.0+0xc6>
   b8ab8:	3c57      	subs	r4, #87	; 0x57
   b8aba:	e7db      	b.n	b8a74 <_strtol_l.constprop.0+0x78>
   b8abc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8ac0:	e7e6      	b.n	b8a90 <_strtol_l.constprop.0+0x94>
   b8ac2:	f1bc 0f00 	cmp.w	ip, #0
   b8ac6:	da05      	bge.n	b8ad4 <_strtol_l.constprop.0+0xd8>
   b8ac8:	2322      	movs	r3, #34	; 0x22
   b8aca:	6003      	str	r3, [r0, #0]
   b8acc:	4646      	mov	r6, r8
   b8ace:	b942      	cbnz	r2, b8ae2 <_strtol_l.constprop.0+0xe6>
   b8ad0:	4630      	mov	r0, r6
   b8ad2:	e79e      	b.n	b8a12 <_strtol_l.constprop.0+0x16>
   b8ad4:	b107      	cbz	r7, b8ad8 <_strtol_l.constprop.0+0xdc>
   b8ad6:	4276      	negs	r6, r6
   b8ad8:	2a00      	cmp	r2, #0
   b8ada:	d0f9      	beq.n	b8ad0 <_strtol_l.constprop.0+0xd4>
   b8adc:	f1bc 0f00 	cmp.w	ip, #0
   b8ae0:	d000      	beq.n	b8ae4 <_strtol_l.constprop.0+0xe8>
   b8ae2:	1e69      	subs	r1, r5, #1
   b8ae4:	6011      	str	r1, [r2, #0]
   b8ae6:	e7f3      	b.n	b8ad0 <_strtol_l.constprop.0+0xd4>
   b8ae8:	2430      	movs	r4, #48	; 0x30
   b8aea:	2b00      	cmp	r3, #0
   b8aec:	d1b1      	bne.n	b8a52 <_strtol_l.constprop.0+0x56>
   b8aee:	2308      	movs	r3, #8
   b8af0:	e7af      	b.n	b8a52 <_strtol_l.constprop.0+0x56>
   b8af2:	2c30      	cmp	r4, #48	; 0x30
   b8af4:	d0a5      	beq.n	b8a42 <_strtol_l.constprop.0+0x46>
   b8af6:	230a      	movs	r3, #10
   b8af8:	e7ab      	b.n	b8a52 <_strtol_l.constprop.0+0x56>
   b8afa:	bf00      	nop
   b8afc:	000b94a6 	.word	0x000b94a6

000b8b00 <strtol>:
   b8b00:	4613      	mov	r3, r2
   b8b02:	460a      	mov	r2, r1
   b8b04:	4601      	mov	r1, r0
   b8b06:	4802      	ldr	r0, [pc, #8]	; (b8b10 <strtol+0x10>)
   b8b08:	6800      	ldr	r0, [r0, #0]
   b8b0a:	f7ff bf77 	b.w	b89fc <_strtol_l.constprop.0>
   b8b0e:	bf00      	nop
   b8b10:	2003e59c 	.word	0x2003e59c

000b8b14 <__register_exitproc>:
   b8b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8b18:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8bd4 <__register_exitproc+0xc0>
   b8b1c:	4606      	mov	r6, r0
   b8b1e:	f8d8 0000 	ldr.w	r0, [r8]
   b8b22:	461f      	mov	r7, r3
   b8b24:	460d      	mov	r5, r1
   b8b26:	4691      	mov	r9, r2
   b8b28:	f000 f856 	bl	b8bd8 <__retarget_lock_acquire_recursive>
   b8b2c:	4b25      	ldr	r3, [pc, #148]	; (b8bc4 <__register_exitproc+0xb0>)
   b8b2e:	681c      	ldr	r4, [r3, #0]
   b8b30:	b934      	cbnz	r4, b8b40 <__register_exitproc+0x2c>
   b8b32:	4c25      	ldr	r4, [pc, #148]	; (b8bc8 <__register_exitproc+0xb4>)
   b8b34:	601c      	str	r4, [r3, #0]
   b8b36:	4b25      	ldr	r3, [pc, #148]	; (b8bcc <__register_exitproc+0xb8>)
   b8b38:	b113      	cbz	r3, b8b40 <__register_exitproc+0x2c>
   b8b3a:	681b      	ldr	r3, [r3, #0]
   b8b3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8b40:	6863      	ldr	r3, [r4, #4]
   b8b42:	2b1f      	cmp	r3, #31
   b8b44:	dd07      	ble.n	b8b56 <__register_exitproc+0x42>
   b8b46:	f8d8 0000 	ldr.w	r0, [r8]
   b8b4a:	f000 f847 	bl	b8bdc <__retarget_lock_release_recursive>
   b8b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8b56:	b34e      	cbz	r6, b8bac <__register_exitproc+0x98>
   b8b58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8b5c:	b988      	cbnz	r0, b8b82 <__register_exitproc+0x6e>
   b8b5e:	4b1c      	ldr	r3, [pc, #112]	; (b8bd0 <__register_exitproc+0xbc>)
   b8b60:	b923      	cbnz	r3, b8b6c <__register_exitproc+0x58>
   b8b62:	f8d8 0000 	ldr.w	r0, [r8]
   b8b66:	f000 f838 	bl	b8bda <__retarget_lock_release>
   b8b6a:	e7f0      	b.n	b8b4e <__register_exitproc+0x3a>
   b8b6c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8b70:	f7fc fb68 	bl	b5244 <malloc>
   b8b74:	2800      	cmp	r0, #0
   b8b76:	d0f4      	beq.n	b8b62 <__register_exitproc+0x4e>
   b8b78:	2300      	movs	r3, #0
   b8b7a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8b7e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8b82:	6863      	ldr	r3, [r4, #4]
   b8b84:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8b88:	2201      	movs	r2, #1
   b8b8a:	409a      	lsls	r2, r3
   b8b8c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8b90:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8b94:	4313      	orrs	r3, r2
   b8b96:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8b9a:	2e02      	cmp	r6, #2
   b8b9c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8ba0:	bf02      	ittt	eq
   b8ba2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8ba6:	4313      	orreq	r3, r2
   b8ba8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8bac:	6863      	ldr	r3, [r4, #4]
   b8bae:	f8d8 0000 	ldr.w	r0, [r8]
   b8bb2:	1c5a      	adds	r2, r3, #1
   b8bb4:	3302      	adds	r3, #2
   b8bb6:	6062      	str	r2, [r4, #4]
   b8bb8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8bbc:	f000 f80e 	bl	b8bdc <__retarget_lock_release_recursive>
   b8bc0:	2000      	movs	r0, #0
   b8bc2:	e7c6      	b.n	b8b52 <__register_exitproc+0x3e>
   b8bc4:	2003e7e8 	.word	0x2003e7e8
   b8bc8:	2003e75c 	.word	0x2003e75c
   b8bcc:	00000000 	.word	0x00000000
   b8bd0:	000b5245 	.word	0x000b5245
   b8bd4:	2003e600 	.word	0x2003e600

000b8bd8 <__retarget_lock_acquire_recursive>:
   b8bd8:	4770      	bx	lr

000b8bda <__retarget_lock_release>:
   b8bda:	4770      	bx	lr

000b8bdc <__retarget_lock_release_recursive>:
   b8bdc:	4770      	bx	lr

000b8bde <link_code_end>:
	...

000b8be0 <dynalib_user>:
   b8be0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8bf0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8c00:	7620 7269 7574 6c61 5000 6f72 6976 6973      virtual.Provisi
   b8c10:	6e6f 5320 6174 6574 5420 6172 736e 7469     on State Transit
   b8c20:	6f69 3a6e 2520 2075 3e2d 2520 0075 7061     ion: %u -> %u.ap
   b8c30:	0070 7973 7473 6d65 632e 7274 2e6c 6c62     p.system.ctrl.bl
   b8c40:	0065 6977 6972 676e 622e 656c 0000 0000     e.wiring.ble....

000b8c50 <_ZTVN5spark10LogHandlerE>:
	...
   b8c60:	40a5 000b 40cd 000b                         .@...@..

000b8c68 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b8c70:	40e5 000b 4119 000b 6b79 000b 40cf 000b     .@...A..yk...@..
   b8c80:	7872 7400 0078 6c42 6575 6f74 746f 2068     rx.tx.Bluetooth 
   b8c90:	6441 7264 7365 3a73 2520 0073 6163 6e6e     Address: %s.cann
   b8ca0:	746f 6320 6572 7461 2065 7473 3a64 643a     ot create std::d
   b8cb0:	7165 6575 6c20 7261 6567 2072 6874 6e61     eque larger than
   b8cc0:	6d20 7861 735f 7a69 2865 0029 6441 6564      max_size().Adde
   b8cd0:	2064 656d 7373 6761 2065 6f74 7420 6568     d message to the
   b8ce0:	7120 6575 6575 203a 7325 5300 7274 6e69      queue: %s.Strin
   b8cf0:	2067 5852 203a 7325 6b00 7965 253d 2073     g RX: %s.key=%s 
   b8d00:	6176 756c 3d65 7325 6d00 6773 745f 7079     value=%s.msg_typ
   b8d10:	0065 6373 6e61 5700 4669 2069 6353 6e61     e.scan.WiFi Scan
   b8d20:	4320 6d6f 6c70 7465 0065 6573 5f74 7263      Complete.set_cr
   b8d30:	6465 0073 7373 6469 5300 7465 5720 4669     eds.ssid.Set WiF
   b8d40:	2069 5353 4449 203a 7325 7000 7361 7773     i SSID: %s.passw
   b8d50:	726f 0064 6553 2074 6957 6946 5020 7361     ord.Set WiFi Pas
   b8d60:	7773 726f 3a64 2520 0073 6e55 6572 6f63     sword: %s.Unreco
   b8d70:	6e67 7a69 6465 6b20 7965 7720 6968 656c     gnized key while
   b8d80:	7020 7261 6973 676e 5720 4669 2069 7263      parsing WiFi cr
   b8d90:	6465 6e65 6974 6c61 3a73 2520 0073 6146     edentials: %s.Fa
   b8da0:	6c69 7275 2065 6170 7372 6e69 2067 6957     ilure parsing Wi
   b8db0:	6946 6320 6572 6564 746e 6169 736c 5700     Fi credentials.W
   b8dc0:	4669 2069 7263 6465 6e65 6974 6c61 2073     iFi credentials 
   b8dd0:	6573 0074 227b 736d 5f67 2274 223a 6373     set.{"msg_t":"sc
   b8de0:	6e61 725f 7365 2270 202c 7322 6973 2264     an_resp", "ssid"
   b8df0:	223a 7325 2c22 2220 6573 2263 223a 7325     :"%s", "sec":"%s
   b8e00:	2c22 2220 6863 3a22 6425 202c 7222 7373     ", "ch":%d, "rss
   b8e10:	2269 253a 7d64 6100 7070 422e 454c 6957     i":%d}.app.BLEWi
   b8e20:	6946 6553 7574 4d70 6e61 6761 7265 5500     FiSetupManager.U
   b8e30:	736e 6365 7275 6465 5700 5045 5700 4150     nsecured.WEP.WPA
   b8e40:	5700 4150 0032 5057 2041 6e45 6574 7072     .WPA2.WPA Enterp
   b8e50:	6972 6573 5700 4150 2032 6e45 6574 7072     rise.WPA2 Enterp
   b8e60:	6972 6573                                    rise.

000b8e65 <_ZL11serviceUUID>:
   b8e65:	3462 6461 6235 6438 642d 6432 2d62 3434     b4ad5b8d-d2db-44
   b8e75:	3664 392d 3364 2d35 6435 3334 3962 3565     d6-9d35-5d43b9e5
   b8e85:	3630 6330 0000                               060c...

000b8e8c <_ZL16security_strings>:
   b8e8c:	8e2f 000b 8e39 000b 8e3d 000b 8e41 000b     /...9...=...A...
   b8e9c:	8e46 000b 8e55 000b                         F...U...

000b8ea4 <_ZL8readUUID>:
   b8ea4:	3232 3236 3538 3564 372d 3561 2d61 3434     226285d5-7a5a-44
   b8eb4:	6438 382d 3133 2d37 6164 3165 6466 6432     8d-8317-dae1fd2d
   b8ec4:	6336 3633                                    6c36.

000b8ec9 <_ZL9writeUUID>:
   b8ec9:	6333 3736 6633 6133 332d 3238 2d61 3834     3c673f3a-382a-48
   b8ed9:	3533 382d 3334 2d33 3163 3163 3662 3662     35-8433-c1c1b6b6
   b8ee9:	3335 3634 0000                               5346...

000b8ef0 <_ZTVN5spark12NetworkClassE>:
	...
   b8ef8:	52e7 000b 52f1 000b 52fb 000b 5305 000b     .R...R...R...S..
   b8f08:	530f 000b 531b 000b 5327 000b 532f 000b     .S...S..'S../S..
   b8f18:	5337 000b 5343 000b 534b 000b 5355 000b     7S..CS..KS..US..
   b8f28:	535f 000b                                   _S..

000b8f2c <_ZTVN5spark9WiFiClassE>:
	...
   b8f34:	54ab 000b 54a1 000b 5497 000b 544d 000b     .T...T...T..MT..
   b8f44:	548b 000b 547f 000b 5327 000b 532f 000b     .T...T..'S../S..
   b8f54:	5473 000b 546b 000b 5461 000b 5457 000b     sT..kT..aT..WT..
   b8f64:	535f 000b                                   _S..

000b8f68 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b8f70 <_ZTV11USARTSerial>:
	...
   b8f78:	54c9 000b 5535 000b 550d 000b 6e91 000b     .T..5U...U...n..
   b8f88:	54dd 000b 54f9 000b 54eb 000b 5507 000b     .T...T...T...U..
   b8f98:	54cb 000b 54cf 000b 6425 7500 3025 7834     .T...T..%d.u%04x
   b8fa8:	0000 0000                                   ....

000b8fac <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8fb4:	55cf 000b 55d5 000b 565b 000b 55e3 000b     .U...U..[V...U..
   b8fc4:	55d1 000b                                   .U..

000b8fc8 <_ZTV9USBSerial>:
	...
   b8fd0:	5c63 000b 5ccb 000b 5ca1 000b 6e91 000b     c\...\...\...n..
   b8fe0:	5c93 000b 5c65 000b 5c75 000b 5cc5 000b     .\..e\..u\...\..
   b8ff0:	5c85 000b 5c5d 000b                         .\..]\..

000b8ff8 <_ZTV9IPAddress>:
	...
   b9000:	5d7d 000b 5d6d 000b 5d6f 000b 5925 252d     }]..m]..o]..%Y-%
   b9010:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b9020:	7361 7463 6d69 0065 6162 6475 5300 7265     asctime.baud.Ser
   b9030:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b9040:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b9050:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   b9060:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   b9070:	6400 7465 6961 736c 3d20 0020 0a0d 6d00     .details = ....m
   b9080:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   b9090:	6174 6c69 0000 0000                         tail....

000b9098 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b90a0:	5ff5 000b 601b 000b 5fd9 000b 55eb 000b     ._...`..._...U..

000b90b0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b90b8:	6421 000b 6439 000b 6b79 000b 40cf 000b     !d..9d..yk...@..

000b90c8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b90d0:	644d 000b 6461 000b 6d1d 000b 5fe1 000b     Md..ad...m..._..

000b90e0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b90e8:	5ff3 000b 6029 000b 6add 000b 5fe3 000b     ._..)`...j..._..

000b90f8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b9100:	5ff1 000b 6037 000b 6365 000b 6059 000b     ._..7`..ec..Y`..
   b9110:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   b9120:	6620 6c61 6573 5300 6174 7472 6420 7369      false.Start dis
   b9130:	6f63 6576 6972 676e 7320 7265 6976 6563     covering service
   b9140:	2e73 4100 7373 7265 6974 6e6f 6146 6c69     s..AssertionFail
   b9150:	7275 2065 6168 5f6c 6c62 5f65 7473 6361     ure hal_ble_stac
   b9160:	5f6b 6e69 7469 6e28 6c75 706c 7274 2029     k_init(nullptr) 
   b9170:	3d3d 5320 5359 4554 5f4d 5245 4f52 5f52     == SYSTEM_ERROR_
   b9180:	4f4e 454e 5000 6565 2072 6564 6976 6563     NONE.Peer device
   b9190:	6920 2073 696d 7373 6e69 2167 4600 6961      is missing!.Fai
   b91a0:	656c 2064 6f74 6120 7070 6e65 2064 6570     led to append pe
   b91b0:	7265 4320 6e65 7274 6c61 6420 7665 6369     er Central devic
   b91c0:	2e65 4300 6e6f 656e 7463 6465 6220 2079     e..Connected by 
   b91d0:	6543 746e 6172 206c 6564 6976 6563 002e     Central device..
   b91e0:	6944 6373 6e6f 656e 7463 6465 6220 2079     Disconnected by 
   b91f0:	6572 6f6d 6574 6420 7665 6369 2e65 4400     remote device..D
   b9200:	7075 696c 6163 6574 2064 6863 7261 6361     uplicated charac
   b9210:	6574 6972 7473 6369 6320 6e61 6f6e 2074     teristic cannot 
   b9220:	6562 6120 6464 6465 002e 6146 6c69 6465     be added..Failed
   b9230:	7420 206f 7061 6570 646e 6c20 636f 6c61      to append local
   b9240:	6320 6168 6172 7463 7265 7369 6974 2e63      characteristic.
   b9250:	0000 0000                                   ....

000b9254 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b925c:	6fa3 000b 7005 000b 7113 000b 702f 000b     .o...p...q../p..
   b926c:	6fa5 000b                                   .o..

000b9270 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9278:	6f9f 000b 7013 000b 6fa1 000b 7035 000b     .o...p...o..5p..
   b9288:	6fc5 000b                                   .o..

000b928c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9294:	6f9d 000b 7021 000b 7965 000b 703b 000b     .o..!p..ey..;p..
   b92a4:	6fe5 000b 0000 0000 0000 34fb 5f9b 0080     .o.........4._..
   b92b4:	8000 1000 0000 0000 0000                    ..........

000b92be <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b92be:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b92ce <_ZN8particle7BleUuid9BASE_UUIDE>:
   b92ce:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b92e0 <_ZTVN5spark13EthernetClassE>:
	...
   b92e8:	855b 000b 8551 000b 8547 000b 853d 000b     [...Q...G...=...
   b92f8:	8531 000b 8525 000b 5327 000b 532f 000b     1...%...'S../S..
   b9308:	8519 000b 8511 000b 8507 000b 84fd 000b     ................
   b9318:	535f 000b                                   _S..

000b931c <_ZSt7nothrow>:
	...

000b931d <_ZTSSt19_Sp_make_shared_tag>:
   b931d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b932d:	6572 5f64 6174 0067 0000                     red_tag....

000b9338 <_ZTISt19_Sp_make_shared_tag>:
   b9338:	9378 000b 931d 000b                         x.......

000b9340 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9340:	93d8 000b 934c 000b 93fc 000b               ....L.......

000b934c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b934c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b935c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b936c:	0045 0000                                   E...

000b9370 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9370:	0000 0000 9340 000b 8661 000b 8675 000b     ....@...a...u...
   b9380:	8809 000b 8809 000b 86df 000b 8621 000b     ............!...
   b9390:	86c7 000b 8689 000b 8653 000b               ........S...

000b939c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b939c:	93d8 000b 93a8 000b 9340 000b               ........@...

000b93a8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b93a8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b93b8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b93c8:	666e 456f 0000 0000                         nfoE....

000b93d0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b93d0:	0000 0000 939c 000b 8709 000b 871d 000b     ................
   b93e0:	8809 000b 8809 000b 86df 000b 8621 000b     ............!...
   b93f0:	87dd 000b 8769 000b 8731 000b               ....i...1...

000b93fc <_ZTISt9type_info>:
   b93fc:	9378 000b 9404 000b                         x.......

000b9404 <_ZTSSt9type_info>:
   b9404:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9414:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9424:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b9434:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b9444:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b9454:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9464:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9474:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b9484:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9494:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b94a5 <_ctype_>:
   b94a5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b94b5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b94c5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b94d5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b94e5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b94f5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9505:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9515:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9525:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b95a6 <link_const_variable_data_end>:
	...

000b95a8 <link_constructors_location>:
   b95a8:	000b4305 	.word	0x000b4305
   b95ac:	000b4dc5 	.word	0x000b4dc5
   b95b0:	000b5439 	.word	0x000b5439
   b95b4:	000b54b5 	.word	0x000b54b5
   b95b8:	000b5fb9 	.word	0x000b5fb9
   b95bc:	000b5fc5 	.word	0x000b5fc5
   b95c0:	000b6b69 	.word	0x000b6b69
   b95c4:	000b8361 	.word	0x000b8361
   b95c8:	000b84d9 	.word	0x000b84d9
   b95cc:	000b8565 	.word	0x000b8565
