
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/plugInGateway/target/4.0.0/bsom/plugInGateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009360  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd380  000bd380  0000d380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd3a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  2003df74  000bd3a8  0001df74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000068c  2003e168  2003e168  0002e168  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bd598  000bd598  0002d598  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bd5c4  000bd5c4  0002d5c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001afb38  00000000  00000000  0002d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001cdce  00000000  00000000  001dd100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003550  00000000  00000000  001f9ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00045c23  00000000  00000000  001fd41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0005a433  00000000  00000000  00243041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00150a51  00000000  00000000  0029d474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0004796d  00000000  00000000  003edec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000cfe8  00000000  00000000  00435832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a2dc  00000000  00000000  0044281c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f82c 	bl	ba08e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f834 	bl	ba0aa <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003df74 	.word	0x2003df74
   b404c:	000bd3a8 	.word	0x000bd3a8
   b4050:	2003e164 	.word	0x2003e164
   b4054:	2003e168 	.word	0x2003e168
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 facd 	bl	b8600 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd33c 	.word	0x000bd33c
   b4080:	000bd374 	.word	0x000bd374

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc66 	b.w	b4954 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fd37 	bl	b4afc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 ba6d 	b.w	b8570 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b963 	b.w	b7360 <malloc>

000b409a <_Znaj>:
   b409a:	f003 b961 	b.w	b7360 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 b967 	b.w	b7370 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   b40b2:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b40b4:	f003 f84e 	bl	b7154 <spark_cloud_flag_connected>
        if (!connected()) {
   b40b8:	b120      	cbz	r0, b40c4 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   b40ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   b40be:	2000      	movs	r0, #0
   b40c0:	f003 b860 	b.w	b7184 <spark_sync_time>
    }
   b40c4:	bd08      	pop	{r3, pc}
	...

000b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   b40c8:	b510      	push	{r4, lr}
   b40ca:	b086      	sub	sp, #24
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b40cc:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b40ce:	a902      	add	r1, sp, #8
   b40d0:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b40d2:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   b40d4:	f003 f824 	bl	b7120 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b40d8:	b9e0      	cbnz	r0, b4114 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x4c>
        return ret;
    }
    return get(src, val);
   b40da:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   b40dc:	b10c      	cbz	r4, b40e2 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1a>
   b40de:	6923      	ldr	r3, [r4, #16]
   b40e0:	b923      	cbnz	r3, b40ec <_ZNK11SystemClass13batteryChargeEv.isra.0+0x24>
   b40e2:	4a0e      	ldr	r2, [pc, #56]	; (b411c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x54>)
   b40e4:	490e      	ldr	r1, [pc, #56]	; (b4120 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x58>)
   b40e6:	200a      	movs	r0, #10
   b40e8:	f003 f80a 	bl	b7100 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b40ec:	230c      	movs	r3, #12
   b40ee:	9303      	str	r3, [sp, #12]
   b40f0:	ab01      	add	r3, sp, #4
   b40f2:	9304      	str	r3, [sp, #16]
   b40f4:	2304      	movs	r3, #4
   b40f6:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b40f8:	aa03      	add	r2, sp, #12
   b40fa:	6923      	ldr	r3, [r4, #16]
   b40fc:	2101      	movs	r1, #1
   b40fe:	4620      	mov	r0, r4
   b4100:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b4102:	b938      	cbnz	r0, b4114 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x4c>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4104:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b4108:	ee00 3a10 	vmov	s0, r3
   b410c:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   b4110:	b006      	add	sp, #24
   b4112:	bd10      	pop	{r4, pc}
            return -1.0f;
   b4114:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b4118:	e7fa      	b.n	b4110 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x48>
   b411a:	bf00      	nop
   b411c:	000b7051 	.word	0x000b7051
   b4120:	000bc230 	.word	0x000bc230

000b4124 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	b40e      	push	{r1, r2, r3}
   b4126:	b503      	push	{r0, r1, lr}
   b4128:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b412a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b412c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4130:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4132:	f004 fbfc 	bl	b892e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4136:	b002      	add	sp, #8
   b4138:	f85d eb04 	ldr.w	lr, [sp], #4
   b413c:	b003      	add	sp, #12
   b413e:	4770      	bx	lr

000b4140 <_Z12plumeConnectv>:
  }
  plume.loop();
}

void plumeConnect()
{
   b4140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!plume.connected())
   b4142:	4d13      	ldr	r5, [pc, #76]	; (b4190 <_Z12plumeConnectv+0x50>)
  {
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4144:	4e13      	ldr	r6, [pc, #76]	; (b4194 <_Z12plumeConnectv+0x54>)
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4146:	4f14      	ldr	r7, [pc, #80]	; (b4198 <_Z12plumeConnectv+0x58>)
  while (!plume.connected())
   b4148:	4811      	ldr	r0, [pc, #68]	; (b4190 <_Z12plumeConnectv+0x50>)
   b414a:	f002 fc6e 	bl	b6a2a <_ZN12PubSubClient9connectedEv>
   b414e:	4604      	mov	r4, r0
   b4150:	b9e0      	cbnz	r0, b418c <_Z12plumeConnectv+0x4c>
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b4152:	f003 fe47 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4156:	4631      	mov	r1, r6
   b4158:	f004 fbc1 	bl	b88de <_ZN5Print7printlnEPKc>
    if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b415c:	683a      	ldr	r2, [r7, #0]
   b415e:	490f      	ldr	r1, [pc, #60]	; (b419c <_Z12plumeConnectv+0x5c>)
   b4160:	4623      	mov	r3, r4
   b4162:	4628      	mov	r0, r5
   b4164:	f002 fd40 	bl	b6be8 <_ZN12PubSubClient7connectEPKcS1_S1_>
   b4168:	b130      	cbz	r0, b4178 <_Z12plumeConnectv+0x38>
    {
      Serial.println("plumeConnect(): Connected");
   b416a:	f003 fe3b 	bl	b7de4 <_Z16_fetch_usbserialv>
    }
    else
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
    delay(3000);
  }
}
   b416e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      Serial.println("plumeConnect(): Connected");
   b4172:	490b      	ldr	r1, [pc, #44]	; (b41a0 <_Z12plumeConnectv+0x60>)
   b4174:	f004 bbb3 	b.w	b88de <_ZN5Print7printlnEPKc>
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   b4178:	f003 fe34 	bl	b7de4 <_Z16_fetch_usbserialv>
   b417c:	4909      	ldr	r1, [pc, #36]	; (b41a4 <_Z12plumeConnectv+0x64>)
   b417e:	f004 fbae 	bl	b88de <_ZN5Print7printlnEPKc>
    delay(3000);
   b4182:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4186:	f004 fa9b 	bl	b86c0 <delay>
  while (!plume.connected())
   b418a:	e7dd      	b.n	b4148 <_Z12plumeConnectv+0x8>
}
   b418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b418e:	bf00      	nop
   b4190:	2003e2d8 	.word	0x2003e2d8
   b4194:	000bc256 	.word	0x000bc256
   b4198:	2003e184 	.word	0x2003e184
   b419c:	000bc292 	.word	0x000bc292
   b41a0:	000bc298 	.word	0x000bc298
   b41a4:	000bc2b2 	.word	0x000bc2b2

000b41a8 <_Z12plumePublishv>:
{
   b41a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (!plume.connected())
   b41aa:	486f      	ldr	r0, [pc, #444]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b41ac:	f002 fc3d 	bl	b6a2a <_ZN12PubSubClient9connectedEv>
   b41b0:	b908      	cbnz	r0, b41b6 <_Z12plumePublishv+0xe>
    plumeConnect();
   b41b2:	f7ff ffc5 	bl	b4140 <_Z12plumeConnectv>
  float batterySoc = System.batteryCharge();
   b41b6:	f7ff ff87 	bl	b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   b41ba:	ee10 0a10 	vmov	r0, s0
  snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values\":{\"b\":%.2f}}", timeBuf, batterySoc);
   b41be:	f005 fbd9 	bl	b9974 <__aeabi_f2d>
   b41c2:	4b6a      	ldr	r3, [pc, #424]	; (b436c <_Z12plumePublishv+0x1c4>)
   b41c4:	4a6a      	ldr	r2, [pc, #424]	; (b4370 <_Z12plumePublishv+0x1c8>)
  if (x1)
   b41c6:	4c6b      	ldr	r4, [pc, #428]	; (b4374 <_Z12plumePublishv+0x1cc>)
  snprintf(mqttBuf, sizeof(mqttBuf), "{\"ts\":%s, \"values\":{\"b\":%.2f}}", timeBuf, batterySoc);
   b41c8:	e9cd 0100 	strd	r0, r1, [sp]
   b41cc:	2180      	movs	r1, #128	; 0x80
   b41ce:	486a      	ldr	r0, [pc, #424]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b41d0:	f003 f8e6 	bl	b73a0 <snprintf>
  plume.publish("v1/devices/me/telemetry", mqttBuf);
   b41d4:	4a68      	ldr	r2, [pc, #416]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b41d6:	4969      	ldr	r1, [pc, #420]	; (b437c <_Z12plumePublishv+0x1d4>)
   b41d8:	4863      	ldr	r0, [pc, #396]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b41da:	f002 fdf3 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
  plume.loop();
   b41de:	4862      	ldr	r0, [pc, #392]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b41e0:	f002 fd0c 	bl	b6bfc <_ZN12PubSubClient4loopEv>
  if (x1)
   b41e4:	7823      	ldrb	r3, [r4, #0]
   b41e6:	b1bb      	cbz	r3, b4218 <_Z12plumePublishv+0x70>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t1\":%.2f, \"v1\":%.2f}", t1, v1);
   b41e8:	4b65      	ldr	r3, [pc, #404]	; (b4380 <_Z12plumePublishv+0x1d8>)
   b41ea:	6818      	ldr	r0, [r3, #0]
   b41ec:	f005 fbc2 	bl	b9974 <__aeabi_f2d>
   b41f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b41f4:	4b63      	ldr	r3, [pc, #396]	; (b4384 <_Z12plumePublishv+0x1dc>)
   b41f6:	6818      	ldr	r0, [r3, #0]
   b41f8:	f005 fbbc 	bl	b9974 <__aeabi_f2d>
   b41fc:	4a62      	ldr	r2, [pc, #392]	; (b4388 <_Z12plumePublishv+0x1e0>)
   b41fe:	e9cd 0100 	strd	r0, r1, [sp]
   b4202:	2180      	movs	r1, #128	; 0x80
   b4204:	485c      	ldr	r0, [pc, #368]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4206:	f003 f8cb 	bl	b73a0 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b420a:	4a5b      	ldr	r2, [pc, #364]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b420c:	495b      	ldr	r1, [pc, #364]	; (b437c <_Z12plumePublishv+0x1d4>)
   b420e:	4856      	ldr	r0, [pc, #344]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b4210:	f002 fdd8 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
    x1 = false;
   b4214:	2300      	movs	r3, #0
   b4216:	7023      	strb	r3, [r4, #0]
  if (x2)
   b4218:	4c5c      	ldr	r4, [pc, #368]	; (b438c <_Z12plumePublishv+0x1e4>)
   b421a:	7823      	ldrb	r3, [r4, #0]
   b421c:	b1bb      	cbz	r3, b424e <_Z12plumePublishv+0xa6>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t2\":%.2f,\"v2\":%.2f}", t2, v2);
   b421e:	4b5c      	ldr	r3, [pc, #368]	; (b4390 <_Z12plumePublishv+0x1e8>)
   b4220:	6818      	ldr	r0, [r3, #0]
   b4222:	f005 fba7 	bl	b9974 <__aeabi_f2d>
   b4226:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b422a:	4b5a      	ldr	r3, [pc, #360]	; (b4394 <_Z12plumePublishv+0x1ec>)
   b422c:	6818      	ldr	r0, [r3, #0]
   b422e:	f005 fba1 	bl	b9974 <__aeabi_f2d>
   b4232:	4a59      	ldr	r2, [pc, #356]	; (b4398 <_Z12plumePublishv+0x1f0>)
   b4234:	e9cd 0100 	strd	r0, r1, [sp]
   b4238:	2180      	movs	r1, #128	; 0x80
   b423a:	484f      	ldr	r0, [pc, #316]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b423c:	f003 f8b0 	bl	b73a0 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4240:	4a4d      	ldr	r2, [pc, #308]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4242:	494e      	ldr	r1, [pc, #312]	; (b437c <_Z12plumePublishv+0x1d4>)
   b4244:	4848      	ldr	r0, [pc, #288]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b4246:	f002 fdbd 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
    x2 = false;
   b424a:	2300      	movs	r3, #0
   b424c:	7023      	strb	r3, [r4, #0]
  if (x3)
   b424e:	4c53      	ldr	r4, [pc, #332]	; (b439c <_Z12plumePublishv+0x1f4>)
   b4250:	7823      	ldrb	r3, [r4, #0]
   b4252:	b1bb      	cbz	r3, b4284 <_Z12plumePublishv+0xdc>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t3\":%.2f,\"v3\":%.2f}", t3, v3);
   b4254:	4b52      	ldr	r3, [pc, #328]	; (b43a0 <_Z12plumePublishv+0x1f8>)
   b4256:	6818      	ldr	r0, [r3, #0]
   b4258:	f005 fb8c 	bl	b9974 <__aeabi_f2d>
   b425c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4260:	4b50      	ldr	r3, [pc, #320]	; (b43a4 <_Z12plumePublishv+0x1fc>)
   b4262:	6818      	ldr	r0, [r3, #0]
   b4264:	f005 fb86 	bl	b9974 <__aeabi_f2d>
   b4268:	4a4f      	ldr	r2, [pc, #316]	; (b43a8 <_Z12plumePublishv+0x200>)
   b426a:	e9cd 0100 	strd	r0, r1, [sp]
   b426e:	2180      	movs	r1, #128	; 0x80
   b4270:	4841      	ldr	r0, [pc, #260]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4272:	f003 f895 	bl	b73a0 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4276:	4a40      	ldr	r2, [pc, #256]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4278:	4940      	ldr	r1, [pc, #256]	; (b437c <_Z12plumePublishv+0x1d4>)
   b427a:	483b      	ldr	r0, [pc, #236]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b427c:	f002 fda2 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
    x3 = false;
   b4280:	2300      	movs	r3, #0
   b4282:	7023      	strb	r3, [r4, #0]
  if (x4)
   b4284:	4c49      	ldr	r4, [pc, #292]	; (b43ac <_Z12plumePublishv+0x204>)
   b4286:	7823      	ldrb	r3, [r4, #0]
   b4288:	b1bb      	cbz	r3, b42ba <_Z12plumePublishv+0x112>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t4\":%.2f,\"v4\":%.2f}", t4, v4);
   b428a:	4b49      	ldr	r3, [pc, #292]	; (b43b0 <_Z12plumePublishv+0x208>)
   b428c:	6818      	ldr	r0, [r3, #0]
   b428e:	f005 fb71 	bl	b9974 <__aeabi_f2d>
   b4292:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4296:	4b47      	ldr	r3, [pc, #284]	; (b43b4 <_Z12plumePublishv+0x20c>)
   b4298:	6818      	ldr	r0, [r3, #0]
   b429a:	f005 fb6b 	bl	b9974 <__aeabi_f2d>
   b429e:	4a46      	ldr	r2, [pc, #280]	; (b43b8 <_Z12plumePublishv+0x210>)
   b42a0:	e9cd 0100 	strd	r0, r1, [sp]
   b42a4:	2180      	movs	r1, #128	; 0x80
   b42a6:	4834      	ldr	r0, [pc, #208]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42a8:	f003 f87a 	bl	b73a0 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b42ac:	4a32      	ldr	r2, [pc, #200]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42ae:	4933      	ldr	r1, [pc, #204]	; (b437c <_Z12plumePublishv+0x1d4>)
   b42b0:	482d      	ldr	r0, [pc, #180]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b42b2:	f002 fd87 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
    x4 = false;
   b42b6:	2300      	movs	r3, #0
   b42b8:	7023      	strb	r3, [r4, #0]
  if (x5)
   b42ba:	4c40      	ldr	r4, [pc, #256]	; (b43bc <_Z12plumePublishv+0x214>)
   b42bc:	7823      	ldrb	r3, [r4, #0]
   b42be:	b1bb      	cbz	r3, b42f0 <_Z12plumePublishv+0x148>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t5\":%.2f,\"v5\":%.2f}", t5, v5);
   b42c0:	4b3f      	ldr	r3, [pc, #252]	; (b43c0 <_Z12plumePublishv+0x218>)
   b42c2:	6818      	ldr	r0, [r3, #0]
   b42c4:	f005 fb56 	bl	b9974 <__aeabi_f2d>
   b42c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b42cc:	4b3d      	ldr	r3, [pc, #244]	; (b43c4 <_Z12plumePublishv+0x21c>)
   b42ce:	6818      	ldr	r0, [r3, #0]
   b42d0:	f005 fb50 	bl	b9974 <__aeabi_f2d>
   b42d4:	4a3c      	ldr	r2, [pc, #240]	; (b43c8 <_Z12plumePublishv+0x220>)
   b42d6:	e9cd 0100 	strd	r0, r1, [sp]
   b42da:	2180      	movs	r1, #128	; 0x80
   b42dc:	4826      	ldr	r0, [pc, #152]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42de:	f003 f85f 	bl	b73a0 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b42e2:	4a25      	ldr	r2, [pc, #148]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b42e4:	4925      	ldr	r1, [pc, #148]	; (b437c <_Z12plumePublishv+0x1d4>)
   b42e6:	4820      	ldr	r0, [pc, #128]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b42e8:	f002 fd6c 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
    x5 = false;
   b42ec:	2300      	movs	r3, #0
   b42ee:	7023      	strb	r3, [r4, #0]
  if (x6)
   b42f0:	4c36      	ldr	r4, [pc, #216]	; (b43cc <_Z12plumePublishv+0x224>)
   b42f2:	7823      	ldrb	r3, [r4, #0]
   b42f4:	b1bb      	cbz	r3, b4326 <_Z12plumePublishv+0x17e>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t6\":%.2f,\"v6\":%.2f}", t6, v6);
   b42f6:	4b36      	ldr	r3, [pc, #216]	; (b43d0 <_Z12plumePublishv+0x228>)
   b42f8:	6818      	ldr	r0, [r3, #0]
   b42fa:	f005 fb3b 	bl	b9974 <__aeabi_f2d>
   b42fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4302:	4b34      	ldr	r3, [pc, #208]	; (b43d4 <_Z12plumePublishv+0x22c>)
   b4304:	6818      	ldr	r0, [r3, #0]
   b4306:	f005 fb35 	bl	b9974 <__aeabi_f2d>
   b430a:	4a33      	ldr	r2, [pc, #204]	; (b43d8 <_Z12plumePublishv+0x230>)
   b430c:	e9cd 0100 	strd	r0, r1, [sp]
   b4310:	2180      	movs	r1, #128	; 0x80
   b4312:	4819      	ldr	r0, [pc, #100]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4314:	f003 f844 	bl	b73a0 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b4318:	4a17      	ldr	r2, [pc, #92]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b431a:	4918      	ldr	r1, [pc, #96]	; (b437c <_Z12plumePublishv+0x1d4>)
   b431c:	4812      	ldr	r0, [pc, #72]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b431e:	f002 fd51 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
    x6 = false;
   b4322:	2300      	movs	r3, #0
   b4324:	7023      	strb	r3, [r4, #0]
  if (x7)
   b4326:	4c2d      	ldr	r4, [pc, #180]	; (b43dc <_Z12plumePublishv+0x234>)
   b4328:	7823      	ldrb	r3, [r4, #0]
   b432a:	b1bb      	cbz	r3, b435c <_Z12plumePublishv+0x1b4>
    snprintf(mqttBuf, sizeof(mqttBuf), "{\"t7\":%.2f,\"v7\":%.2f}", t7, v7);
   b432c:	4b2c      	ldr	r3, [pc, #176]	; (b43e0 <_Z12plumePublishv+0x238>)
   b432e:	6818      	ldr	r0, [r3, #0]
   b4330:	f005 fb20 	bl	b9974 <__aeabi_f2d>
   b4334:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4338:	4b2a      	ldr	r3, [pc, #168]	; (b43e4 <_Z12plumePublishv+0x23c>)
   b433a:	6818      	ldr	r0, [r3, #0]
   b433c:	f005 fb1a 	bl	b9974 <__aeabi_f2d>
   b4340:	4a29      	ldr	r2, [pc, #164]	; (b43e8 <_Z12plumePublishv+0x240>)
   b4342:	e9cd 0100 	strd	r0, r1, [sp]
   b4346:	2180      	movs	r1, #128	; 0x80
   b4348:	480b      	ldr	r0, [pc, #44]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b434a:	f003 f829 	bl	b73a0 <snprintf>
    plume.publish("v1/devices/me/telemetry", mqttBuf);
   b434e:	4a0a      	ldr	r2, [pc, #40]	; (b4378 <_Z12plumePublishv+0x1d0>)
   b4350:	490a      	ldr	r1, [pc, #40]	; (b437c <_Z12plumePublishv+0x1d4>)
   b4352:	4805      	ldr	r0, [pc, #20]	; (b4368 <_Z12plumePublishv+0x1c0>)
   b4354:	f002 fd36 	bl	b6dc4 <_ZN12PubSubClient7publishEPKcS1_>
    x7 = false;
   b4358:	2300      	movs	r3, #0
   b435a:	7023      	strb	r3, [r4, #0]
  plume.loop();
   b435c:	4802      	ldr	r0, [pc, #8]	; (b4368 <_Z12plumePublishv+0x1c0>)
}
   b435e:	b004      	add	sp, #16
   b4360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  plume.loop();
   b4364:	f002 bc4a 	b.w	b6bfc <_ZN12PubSubClient4loopEv>
   b4368:	2003e2d8 	.word	0x2003e2d8
   b436c:	2003e3f4 	.word	0x2003e3f4
   b4370:	000bc2e8 	.word	0x000bc2e8
   b4374:	2003e4bc 	.word	0x2003e4bc
   b4378:	2003e204 	.word	0x2003e204
   b437c:	000bc307 	.word	0x000bc307
   b4380:	2003e480 	.word	0x2003e480
   b4384:	2003e3b8 	.word	0x2003e3b8
   b4388:	000bc31f 	.word	0x000bc31f
   b438c:	2003e4bd 	.word	0x2003e4bd
   b4390:	2003e484 	.word	0x2003e484
   b4394:	2003e3bc 	.word	0x2003e3bc
   b4398:	000bc336 	.word	0x000bc336
   b439c:	2003e4be 	.word	0x2003e4be
   b43a0:	2003e488 	.word	0x2003e488
   b43a4:	2003e3c0 	.word	0x2003e3c0
   b43a8:	000bc34c 	.word	0x000bc34c
   b43ac:	2003e4bf 	.word	0x2003e4bf
   b43b0:	2003e48c 	.word	0x2003e48c
   b43b4:	2003e3c4 	.word	0x2003e3c4
   b43b8:	000bc362 	.word	0x000bc362
   b43bc:	2003e4c0 	.word	0x2003e4c0
   b43c0:	2003e490 	.word	0x2003e490
   b43c4:	2003e3c8 	.word	0x2003e3c8
   b43c8:	000bc378 	.word	0x000bc378
   b43cc:	2003e4c1 	.word	0x2003e4c1
   b43d0:	2003e494 	.word	0x2003e494
   b43d4:	2003e3cc 	.word	0x2003e3cc
   b43d8:	000bc38e 	.word	0x000bc38e
   b43dc:	2003e4c2 	.word	0x2003e4c2
   b43e0:	2003e498 	.word	0x2003e498
   b43e4:	2003e3d0 	.word	0x2003e3d0
   b43e8:	000bc3a4 	.word	0x000bc3a4

000b43ec <_Z8goOnlinev>:

void goOnline()
{
   b43ec:	b570      	push	{r4, r5, r6, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b43ee:	f002 fea9 	bl	b7144 <spark_cloud_flag_connect>
  Particle.connect();Particle.syncTime();
   b43f2:	f7ff fe5e 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
        return hal_timer_millis(nullptr);
   b43f6:	2000      	movs	r0, #0
   b43f8:	f002 fe42 	bl	b7080 <hal_timer_millis>
        while (_while() && !_condition()) {
   b43fc:	4d1c      	ldr	r5, [pc, #112]	; (b4470 <_Z8goOnlinev+0x84>)
        return hal_timer_millis(nullptr);
   b43fe:	4604      	mov	r4, r0
   b4400:	2600      	movs	r6, #0
   b4402:	2000      	movs	r0, #0
   b4404:	f002 fe3c 	bl	b7080 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4408:	1b00      	subs	r0, r0, r4
   b440a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b440e:	4285      	cmp	r5, r0
   b4410:	eb76 0301 	sbcs.w	r3, r6, r1
   b4414:	d305      	bcc.n	b4422 <_Z8goOnlinev+0x36>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4416:	f002 fe9d 	bl	b7154 <spark_cloud_flag_connected>
   b441a:	b910      	cbnz	r0, b4422 <_Z8goOnlinev+0x36>
            spark_process();
   b441c:	f002 fe8a 	bl	b7134 <spark_process>
        while (_while() && !_condition()) {
   b4420:	e7ef      	b.n	b4402 <_Z8goOnlinev+0x16>
   b4422:	f002 fe97 	bl	b7154 <spark_cloud_flag_connected>
  // Serial.printf("Particle going online...\n");
  waitFor(Particle.connected, 240000);
  // Serial.printf("Particle online...\n");
  // Particle.publish("connected");
  // delay(1200);
  Particle.syncTime();
   b4426:	f7ff fe44 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
        return hal_timer_millis(nullptr);
   b442a:	2000      	movs	r0, #0
   b442c:	f002 fe28 	bl	b7080 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4430:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b4434:	4604      	mov	r4, r0
   b4436:	2000      	movs	r0, #0
   b4438:	f002 fe22 	bl	b7080 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b443c:	1b00      	subs	r0, r0, r4
   b443e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4442:	42a8      	cmp	r0, r5
   b4444:	f171 0300 	sbcs.w	r3, r1, #0
   b4448:	d209      	bcs.n	b445e <_Z8goOnlinev+0x72>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b444a:	2000      	movs	r0, #0
   b444c:	f002 fea2 	bl	b7194 <spark_sync_time_pending>
   b4450:	b128      	cbz	r0, b445e <_Z8goOnlinev+0x72>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4452:	f002 fe7f 	bl	b7154 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4456:	b110      	cbz	r0, b445e <_Z8goOnlinev+0x72>
            spark_process();
   b4458:	f002 fe6c 	bl	b7134 <spark_process>
        while (_while() && !_condition()) {
   b445c:	e7eb      	b.n	b4436 <_Z8goOnlinev+0x4a>
   b445e:	2000      	movs	r0, #0
   b4460:	f002 fe98 	bl	b7194 <spark_sync_time_pending>
   b4464:	b118      	cbz	r0, b446e <_Z8goOnlinev+0x82>
  waitFor(Particle.syncTimeDone, 30000);
  // Serial.printf("Time synced...\n");
}
   b4466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b446a:	f002 be73 	b.w	b7154 <spark_cloud_flag_connected>
   b446e:	bd70      	pop	{r4, r5, r6, pc}
   b4470:	0003a97f 	.word	0x0003a97f

000b4474 <_Z12checkUpdatesv>:
  counter++;
  // System.sleep(config);
}

void checkUpdates()
{
   b4474:	b573      	push	{r0, r1, r4, r5, r6, lr}

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   b4476:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b4478:	4622      	mov	r2, r4
   b447a:	f10d 0107 	add.w	r1, sp, #7
   b447e:	4620      	mov	r0, r4
        uint8_t value = 0;
   b4480:	f88d 4007 	strb.w	r4, [sp, #7]
        system_get_flag(flag, &value, nullptr);
   b4484:	f002 ff2e 	bl	b72e4 <system_get_flag>
        return value;
   b4488:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (System.updatesPending())
   b448c:	b1cb      	cbz	r3, b44c2 <_Z12checkUpdatesv+0x4e>
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b448e:	2101      	movs	r1, #1
   b4490:	4622      	mov	r2, r4
   b4492:	4608      	mov	r0, r1
   b4494:	f002 ff1e 	bl	b72d4 <system_set_flag>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4498:	f002 fde2 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
  {
    System.enableUpdates();
    unsigned int start = millis();
    while (millis() - start < 120000)
   b449c:	4e0a      	ldr	r6, [pc, #40]	; (b44c8 <_Z12checkUpdatesv+0x54>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b449e:	4d0b      	ldr	r5, [pc, #44]	; (b44cc <_Z12checkUpdatesv+0x58>)
   b44a0:	4604      	mov	r4, r0
   b44a2:	f002 fddd 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
   b44a6:	1b00      	subs	r0, r0, r4
   b44a8:	42b0      	cmp	r0, r6
   b44aa:	d805      	bhi.n	b44b8 <_Z12checkUpdatesv+0x44>
		return HAL_Timer_Get_Milli_Seconds();
   b44ac:	f002 fdd8 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b44b0:	6028      	str	r0, [r5, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b44b2:	f002 fe3f 	bl	b7134 <spark_process>
    }
   b44b6:	e7f4      	b.n	b44a2 <_Z12checkUpdatesv+0x2e>
    {
      Particle.process();
    }
    System.reset();
  }
}
   b44b8:	b002      	add	sp, #8
   b44ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    System.reset();
   b44be:	f004 bb57 	b.w	b8b70 <_ZN11SystemClass5resetEv>
}
   b44c2:	b002      	add	sp, #8
   b44c4:	bd70      	pop	{r4, r5, r6, pc}
   b44c6:	bf00      	nop
   b44c8:	0001d4bf 	.word	0x0001d4bf
   b44cc:	2003e744 	.word	0x2003e744

000b44d0 <_Z10reyaxSetupv>:

void reyaxSetup()
{
   b44d0:	b500      	push	{lr}
   b44d2:	b093      	sub	sp, #76	; 0x4c
  String password = "BA4104032968BA1114299079021594AA";
   b44d4:	4984      	ldr	r1, [pc, #528]	; (b46e8 <_Z10reyaxSetupv+0x218>)
   b44d6:	4668      	mov	r0, sp
   b44d8:	f004 faad 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
  String reply;
   b44dc:	4983      	ldr	r1, [pc, #524]	; (b46ec <_Z10reyaxSetupv+0x21c>)
   b44de:	a804      	add	r0, sp, #16
   b44e0:	f004 faa9 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
  int addr = 23;
  int net = 6;
  byte buf[40];

  Serial1.printf("AT+CPIN=%s\r\n", password.c_str()); // correct
   b44e4:	f004 fef4 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b44e8:	9a00      	ldr	r2, [sp, #0]
   b44ea:	4981      	ldr	r1, [pc, #516]	; (b46f0 <_Z10reyaxSetupv+0x220>)
   b44ec:	f7ff fe1a 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b44f0:	20c8      	movs	r0, #200	; 0xc8
   b44f2:	f004 f8e5 	bl	b86c0 <delay>
  if (Serial1.available() > 0)
   b44f6:	f004 feeb 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b44fa:	6803      	ldr	r3, [r0, #0]
   b44fc:	691b      	ldr	r3, [r3, #16]
   b44fe:	4798      	blx	r3
   b4500:	2800      	cmp	r0, #0
   b4502:	dd18      	ble.n	b4536 <_Z10reyaxSetupv+0x66>
  {
    Serial.printf("Awaiting Reply from password\n");
   b4504:	f003 fc6e 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4508:	497a      	ldr	r1, [pc, #488]	; (b46f4 <_Z10reyaxSetupv+0x224>)
   b450a:	f7ff fe0b 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b450e:	f004 fedf 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4512:	220a      	movs	r2, #10
   b4514:	4601      	mov	r1, r0
   b4516:	a808      	add	r0, sp, #32
   b4518:	f004 f98e 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b451c:	a908      	add	r1, sp, #32
   b451e:	a804      	add	r0, sp, #16
   b4520:	f004 faba 	bl	b8a98 <_ZN6StringaSEOS_>
   b4524:	a808      	add	r0, sp, #32
   b4526:	f004 fa3b 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("Reply: %s\n", reply.c_str());
   b452a:	f003 fc5b 	bl	b7de4 <_Z16_fetch_usbserialv>
   b452e:	9a04      	ldr	r2, [sp, #16]
   b4530:	4971      	ldr	r1, [pc, #452]	; (b46f8 <_Z10reyaxSetupv+0x228>)
   b4532:	f7ff fdf7 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+ADDRESS=%i\r\n", addr); // correct
   b4536:	f004 fecb 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b453a:	4970      	ldr	r1, [pc, #448]	; (b46fc <_Z10reyaxSetupv+0x22c>)
   b453c:	2217      	movs	r2, #23
   b453e:	f7ff fdf1 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4542:	20c8      	movs	r0, #200	; 0xc8
   b4544:	f004 f8bc 	bl	b86c0 <delay>
  if (Serial1.available() > 0)
   b4548:	f004 fec2 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b454c:	6803      	ldr	r3, [r0, #0]
   b454e:	691b      	ldr	r3, [r3, #16]
   b4550:	4798      	blx	r3
   b4552:	2800      	cmp	r0, #0
   b4554:	dd18      	ble.n	b4588 <_Z10reyaxSetupv+0xb8>
  {
    Serial.printf("Awaiting Reply from address\n");
   b4556:	f003 fc45 	bl	b7de4 <_Z16_fetch_usbserialv>
   b455a:	4969      	ldr	r1, [pc, #420]	; (b4700 <_Z10reyaxSetupv+0x230>)
   b455c:	f7ff fde2 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4560:	f004 feb6 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4564:	220a      	movs	r2, #10
   b4566:	4601      	mov	r1, r0
   b4568:	a808      	add	r0, sp, #32
   b456a:	f004 f965 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b456e:	a908      	add	r1, sp, #32
   b4570:	a804      	add	r0, sp, #16
   b4572:	f004 fa91 	bl	b8a98 <_ZN6StringaSEOS_>
   b4576:	a808      	add	r0, sp, #32
   b4578:	f004 fa12 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("Reply address: %s\n", reply.c_str());
   b457c:	f003 fc32 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4580:	9a04      	ldr	r2, [sp, #16]
   b4582:	4960      	ldr	r1, [pc, #384]	; (b4704 <_Z10reyaxSetupv+0x234>)
   b4584:	f7ff fdce 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+NETWORKID=%i\r\n", net); // correct
   b4588:	f004 fea2 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b458c:	495e      	ldr	r1, [pc, #376]	; (b4708 <_Z10reyaxSetupv+0x238>)
   b458e:	2206      	movs	r2, #6
   b4590:	f7ff fdc8 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4594:	20c8      	movs	r0, #200	; 0xc8
   b4596:	f004 f893 	bl	b86c0 <delay>
  if (Serial1.available() > 0)
   b459a:	f004 fe99 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b459e:	6803      	ldr	r3, [r0, #0]
   b45a0:	691b      	ldr	r3, [r3, #16]
   b45a2:	4798      	blx	r3
   b45a4:	2800      	cmp	r0, #0
   b45a6:	dd18      	ble.n	b45da <_Z10reyaxSetupv+0x10a>
  {
    Serial.printf("Awaiting Reply from networkid\n");
   b45a8:	f003 fc1c 	bl	b7de4 <_Z16_fetch_usbserialv>
   b45ac:	4957      	ldr	r1, [pc, #348]	; (b470c <_Z10reyaxSetupv+0x23c>)
   b45ae:	f7ff fdb9 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b45b2:	f004 fe8d 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b45b6:	220a      	movs	r2, #10
   b45b8:	4601      	mov	r1, r0
   b45ba:	a808      	add	r0, sp, #32
   b45bc:	f004 f93c 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b45c0:	a908      	add	r1, sp, #32
   b45c2:	a804      	add	r0, sp, #16
   b45c4:	f004 fa68 	bl	b8a98 <_ZN6StringaSEOS_>
   b45c8:	a808      	add	r0, sp, #32
   b45ca:	f004 f9e9 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("Reply network: %s\n", reply.c_str());
   b45ce:	f003 fc09 	bl	b7de4 <_Z16_fetch_usbserialv>
   b45d2:	9a04      	ldr	r2, [sp, #16]
   b45d4:	494e      	ldr	r1, [pc, #312]	; (b4710 <_Z10reyaxSetupv+0x240>)
   b45d6:	f7ff fda5 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b45da:	f004 fe79 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b45de:	494d      	ldr	r1, [pc, #308]	; (b4714 <_Z10reyaxSetupv+0x244>)
   b45e0:	f7ff fda0 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b45e4:	20c8      	movs	r0, #200	; 0xc8
   b45e6:	f004 f86b 	bl	b86c0 <delay>
  if (Serial1.available() > 0)
   b45ea:	f004 fe71 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b45ee:	6803      	ldr	r3, [r0, #0]
   b45f0:	691b      	ldr	r3, [r3, #16]
   b45f2:	4798      	blx	r3
   b45f4:	2800      	cmp	r0, #0
   b45f6:	dd18      	ble.n	b462a <_Z10reyaxSetupv+0x15a>
  {
    Serial.printf("Awaiting Reply\n");
   b45f8:	f003 fbf4 	bl	b7de4 <_Z16_fetch_usbserialv>
   b45fc:	4946      	ldr	r1, [pc, #280]	; (b4718 <_Z10reyaxSetupv+0x248>)
   b45fe:	f7ff fd91 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4602:	f004 fe65 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4606:	220a      	movs	r2, #10
   b4608:	4601      	mov	r1, r0
   b460a:	a808      	add	r0, sp, #32
   b460c:	f004 f914 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4610:	a908      	add	r1, sp, #32
   b4612:	a804      	add	r0, sp, #16
   b4614:	f004 fa40 	bl	b8a98 <_ZN6StringaSEOS_>
   b4618:	a808      	add	r0, sp, #32
   b461a:	f004 f9c1 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("Reply get address: %s\n", reply.c_str());
   b461e:	f003 fbe1 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4622:	9a04      	ldr	r2, [sp, #16]
   b4624:	493d      	ldr	r1, [pc, #244]	; (b471c <_Z10reyaxSetupv+0x24c>)
   b4626:	f7ff fd7d 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+NETWORKID?\r\n"); // correct
   b462a:	f004 fe51 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b462e:	493c      	ldr	r1, [pc, #240]	; (b4720 <_Z10reyaxSetupv+0x250>)
   b4630:	f7ff fd78 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4634:	20c8      	movs	r0, #200	; 0xc8
   b4636:	f004 f843 	bl	b86c0 <delay>
  if (Serial1.available() > 0)
   b463a:	f004 fe49 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b463e:	6803      	ldr	r3, [r0, #0]
   b4640:	691b      	ldr	r3, [r3, #16]
   b4642:	4798      	blx	r3
   b4644:	2800      	cmp	r0, #0
   b4646:	dd18      	ble.n	b467a <_Z10reyaxSetupv+0x1aa>
  {
    Serial.printf("Awaiting Reply\n");
   b4648:	f003 fbcc 	bl	b7de4 <_Z16_fetch_usbserialv>
   b464c:	4932      	ldr	r1, [pc, #200]	; (b4718 <_Z10reyaxSetupv+0x248>)
   b464e:	f7ff fd69 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4652:	f004 fe3d 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4656:	220a      	movs	r2, #10
   b4658:	4601      	mov	r1, r0
   b465a:	a808      	add	r0, sp, #32
   b465c:	f004 f8ec 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4660:	a908      	add	r1, sp, #32
   b4662:	a804      	add	r0, sp, #16
   b4664:	f004 fa18 	bl	b8a98 <_ZN6StringaSEOS_>
   b4668:	a808      	add	r0, sp, #32
   b466a:	f004 f999 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("Reply get network: %s\n", reply.c_str());
   b466e:	f003 fbb9 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4672:	9a04      	ldr	r2, [sp, #16]
   b4674:	492b      	ldr	r1, [pc, #172]	; (b4724 <_Z10reyaxSetupv+0x254>)
   b4676:	f7ff fd55 	bl	b4124 <_ZN5Print6printfEPKcz>
  }

  Serial1.printf("AT+CPIN?\r\n"); // correct
   b467a:	f004 fe29 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b467e:	492a      	ldr	r1, [pc, #168]	; (b4728 <_Z10reyaxSetupv+0x258>)
   b4680:	f7ff fd50 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(200);
   b4684:	20c8      	movs	r0, #200	; 0xc8
   b4686:	f004 f81b 	bl	b86c0 <delay>
  if (Serial1.available() > 0)
   b468a:	f004 fe21 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b468e:	6803      	ldr	r3, [r0, #0]
   b4690:	691b      	ldr	r3, [r3, #16]
   b4692:	4798      	blx	r3
   b4694:	2800      	cmp	r0, #0
   b4696:	dd1e      	ble.n	b46d6 <_Z10reyaxSetupv+0x206>
  {
    Serial.printf("Awaiting Reply\n");
   b4698:	f003 fba4 	bl	b7de4 <_Z16_fetch_usbserialv>
   b469c:	491e      	ldr	r1, [pc, #120]	; (b4718 <_Z10reyaxSetupv+0x248>)
   b469e:	f7ff fd41 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b46a2:	f004 fe15 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b46a6:	220a      	movs	r2, #10
   b46a8:	4601      	mov	r1, r0
   b46aa:	a808      	add	r0, sp, #32
   b46ac:	f004 f8c4 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b46b0:	a908      	add	r1, sp, #32
   b46b2:	a804      	add	r0, sp, #16
   b46b4:	f004 f9f0 	bl	b8a98 <_ZN6StringaSEOS_>
   b46b8:	a808      	add	r0, sp, #32
   b46ba:	f004 f971 	bl	b89a0 <_ZN6StringD1Ev>
    reply.getBytes(buf, 40);
   b46be:	2228      	movs	r2, #40	; 0x28
   b46c0:	a908      	add	r1, sp, #32
   b46c2:	2300      	movs	r3, #0
   b46c4:	a804      	add	r0, sp, #16
   b46c6:	f004 fa13 	bl	b8af0 <_ZNK6String8getBytesEPhjj>
    Serial.printf("Reply get password: %s\n", (char *)buf);
   b46ca:	f003 fb8b 	bl	b7de4 <_Z16_fetch_usbserialv>
   b46ce:	4917      	ldr	r1, [pc, #92]	; (b472c <_Z10reyaxSetupv+0x25c>)
   b46d0:	aa08      	add	r2, sp, #32
   b46d2:	f7ff fd27 	bl	b4124 <_ZN5Print6printfEPKcz>
  String reply;
   b46d6:	a804      	add	r0, sp, #16
   b46d8:	f004 f962 	bl	b89a0 <_ZN6StringD1Ev>
  String password = "BA4104032968BA1114299079021594AA";
   b46dc:	4668      	mov	r0, sp
   b46de:	f004 f95f 	bl	b89a0 <_ZN6StringD1Ev>
  }
}
   b46e2:	b013      	add	sp, #76	; 0x4c
   b46e4:	f85d fb04 	ldr.w	pc, [sp], #4
   b46e8:	000bc3ba 	.word	0x000bc3ba
   b46ec:	000bc93b 	.word	0x000bc93b
   b46f0:	000bc3db 	.word	0x000bc3db
   b46f4:	000bc3e8 	.word	0x000bc3e8
   b46f8:	000bc406 	.word	0x000bc406
   b46fc:	000bc411 	.word	0x000bc411
   b4700:	000bc421 	.word	0x000bc421
   b4704:	000bc43e 	.word	0x000bc43e
   b4708:	000bc451 	.word	0x000bc451
   b470c:	000bc463 	.word	0x000bc463
   b4710:	000bc482 	.word	0x000bc482
   b4714:	000bc495 	.word	0x000bc495
   b4718:	000bc4a3 	.word	0x000bc4a3
   b471c:	000bc4b3 	.word	0x000bc4b3
   b4720:	000bc4ca 	.word	0x000bc4ca
   b4724:	000bc4da 	.word	0x000bc4da
   b4728:	000bc4f1 	.word	0x000bc4f1
   b472c:	000bc4fc 	.word	0x000bc4fc

000b4730 <_Z10reyaxResetv>:

void reyaxReset()
{
   b4730:	b500      	push	{lr}
   b4732:	b089      	sub	sp, #36	; 0x24
  String reply;
   b4734:	491a      	ldr	r1, [pc, #104]	; (b47a0 <_Z10reyaxResetv+0x70>)
   b4736:	4668      	mov	r0, sp
   b4738:	f004 f97d 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+RESET\r\n");
   b473c:	f004 fdc8 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4740:	4918      	ldr	r1, [pc, #96]	; (b47a4 <_Z10reyaxResetv+0x74>)
   b4742:	f7ff fcef 	bl	b4124 <_ZN5Print6printfEPKcz>
  delay(10000);
   b4746:	f242 7010 	movw	r0, #10000	; 0x2710
   b474a:	f003 ffb9 	bl	b86c0 <delay>
  if (Serial1.available() > 0)
   b474e:	f004 fdbf 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4752:	6803      	ldr	r3, [r0, #0]
   b4754:	691b      	ldr	r3, [r3, #16]
   b4756:	4798      	blx	r3
   b4758:	2800      	cmp	r0, #0
   b475a:	dd18      	ble.n	b478e <_Z10reyaxResetv+0x5e>
  {
    Serial.printf("Awaiting Reply from address\n");
   b475c:	f003 fb42 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4760:	4911      	ldr	r1, [pc, #68]	; (b47a8 <_Z10reyaxResetv+0x78>)
   b4762:	f7ff fcdf 	bl	b4124 <_ZN5Print6printfEPKcz>
    reply = Serial1.readStringUntil('\n');
   b4766:	f004 fdb3 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b476a:	220a      	movs	r2, #10
   b476c:	4601      	mov	r1, r0
   b476e:	a804      	add	r0, sp, #16
   b4770:	f004 f862 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4774:	a904      	add	r1, sp, #16
   b4776:	4668      	mov	r0, sp
   b4778:	f004 f98e 	bl	b8a98 <_ZN6StringaSEOS_>
   b477c:	a804      	add	r0, sp, #16
   b477e:	f004 f90f 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("Reply address: %s\n", reply.c_str());
   b4782:	f003 fb2f 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4786:	9a00      	ldr	r2, [sp, #0]
   b4788:	4908      	ldr	r1, [pc, #32]	; (b47ac <_Z10reyaxResetv+0x7c>)
   b478a:	f7ff fccb 	bl	b4124 <_ZN5Print6printfEPKcz>
  }
  System.reset();
   b478e:	f004 f9ef 	bl	b8b70 <_ZN11SystemClass5resetEv>
  String reply;
   b4792:	4668      	mov	r0, sp
   b4794:	f004 f904 	bl	b89a0 <_ZN6StringD1Ev>
   b4798:	b009      	add	sp, #36	; 0x24
   b479a:	f85d fb04 	ldr.w	pc, [sp], #4
   b479e:	bf00      	nop
   b47a0:	000bc93b 	.word	0x000bc93b
   b47a4:	000bc514 	.word	0x000bc514
   b47a8:	000bc421 	.word	0x000bc421
   b47ac:	000bc43e 	.word	0x000bc43e

000b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b47b0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b47b2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b47b4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b47b6:	b17c      	cbz	r4, b47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b47b8:	6863      	ldr	r3, [r4, #4]
   b47ba:	3b01      	subs	r3, #1
   b47bc:	6063      	str	r3, [r4, #4]
   b47be:	b95b      	cbnz	r3, b47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b47c0:	6823      	ldr	r3, [r4, #0]
   b47c2:	4620      	mov	r0, r4
   b47c4:	689b      	ldr	r3, [r3, #8]
   b47c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47c8:	68a3      	ldr	r3, [r4, #8]
   b47ca:	3b01      	subs	r3, #1
   b47cc:	60a3      	str	r3, [r4, #8]
   b47ce:	b91b      	cbnz	r3, b47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b47d0:	6823      	ldr	r3, [r4, #0]
   b47d2:	4620      	mov	r0, r4
   b47d4:	68db      	ldr	r3, [r3, #12]
   b47d6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b47d8:	4628      	mov	r0, r5
   b47da:	bd38      	pop	{r3, r4, r5, pc}

000b47dc <_GLOBAL__sub_I___appProductVersion>:
   b47dc:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b47de:	4b31      	ldr	r3, [pc, #196]	; (b48a4 <_GLOBAL__sub_I___appProductVersion+0xc8>)
String deviceID;
   b47e0:	4d31      	ldr	r5, [pc, #196]	; (b48a8 <_GLOBAL__sub_I___appProductVersion+0xcc>)
   b47e2:	2400      	movs	r4, #0
   b47e4:	701c      	strb	r4, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b47e6:	f004 fd03 	bl	b91f0 <spark_protocol_instance>
   b47ea:	4623      	mov	r3, r4
   b47ec:	4622      	mov	r2, r4
   b47ee:	2102      	movs	r1, #2
   b47f0:	f004 fd0e 	bl	b9210 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b47f4:	f004 fcfc 	bl	b91f0 <spark_protocol_instance>
   b47f8:	4623      	mov	r3, r4
   b47fa:	4622      	mov	r2, r4
   b47fc:	2117      	movs	r1, #23
   b47fe:	f004 fcff 	bl	b9200 <spark_protocol_set_product_id>
String TOKEN = "1Yz48lsP5qbwnb5YiFdZ"; // david plug in
   b4802:	492a      	ldr	r1, [pc, #168]	; (b48ac <_GLOBAL__sub_I___appProductVersion+0xd0>)
   b4804:	482a      	ldr	r0, [pc, #168]	; (b48b0 <_GLOBAL__sub_I___appProductVersion+0xd4>)
   b4806:	f004 f916 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
        return spark_deviceID();
   b480a:	482a      	ldr	r0, [pc, #168]	; (b48b4 <_GLOBAL__sub_I___appProductVersion+0xd8>)
   b480c:	f002 fcaa 	bl	b7164 <spark_deviceID>
TCPClient pubsub;
   b4810:	4929      	ldr	r1, [pc, #164]	; (b48b8 <_GLOBAL__sub_I___appProductVersion+0xdc>)
   b4812:	4608      	mov	r0, r1
   b4814:	f003 f974 	bl	b7b00 <_ZN9TCPClientC1Ev>
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   b4818:	4927      	ldr	r1, [pc, #156]	; (b48b8 <_GLOBAL__sub_I___appProductVersion+0xdc>)
   b481a:	4828      	ldr	r0, [pc, #160]	; (b48bc <_GLOBAL__sub_I___appProductVersion+0xe0>)
   b481c:	f001 ffe6 	bl	b67ec <_ZN12PubSubClientC1ER6Client>
FuelGauge fuel;
   b4820:	4621      	mov	r1, r4
   b4822:	4827      	ldr	r0, [pc, #156]	; (b48c0 <_GLOBAL__sub_I___appProductVersion+0xe4>)
   b4824:	f003 ff2a 	bl	b867c <_ZN9FuelGaugeC1Eb>
String deviceID;
   b4828:	4629      	mov	r1, r5
   b482a:	4826      	ldr	r0, [pc, #152]	; (b48c4 <_GLOBAL__sub_I___appProductVersion+0xe8>)
   b482c:	f004 f903 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
String incomingString;
   b4830:	4629      	mov	r1, r5
   b4832:	4825      	ldr	r0, [pc, #148]	; (b48c8 <_GLOBAL__sub_I___appProductVersion+0xec>)
   b4834:	f004 f8ff 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
String incomingString2;
   b4838:	4629      	mov	r1, r5
   b483a:	4824      	ldr	r0, [pc, #144]	; (b48cc <_GLOBAL__sub_I___appProductVersion+0xf0>)
   b483c:	f004 f8fb 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
String WEBHOOK_NAME = "customer01";
   b4840:	4923      	ldr	r1, [pc, #140]	; (b48d0 <_GLOBAL__sub_I___appProductVersion+0xf4>)
   b4842:	4824      	ldr	r0, [pc, #144]	; (b48d4 <_GLOBAL__sub_I___appProductVersion+0xf8>)
   b4844:	f004 f8f7 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
Ubidots ubidots("webhook", UBI_PARTICLE);
   b4848:	2203      	movs	r2, #3
   b484a:	4923      	ldr	r1, [pc, #140]	; (b48d8 <_GLOBAL__sub_I___appProductVersion+0xfc>)
   b484c:	4823      	ldr	r0, [pc, #140]	; (b48dc <_GLOBAL__sub_I___appProductVersion+0x100>)
   b484e:	f001 f9b1 	bl	b5bb4 <_ZN7UbidotsC1EPc11IotProtocol>
String parse0, parse1, parse2, parse3, parse4;
   b4852:	4629      	mov	r1, r5
   b4854:	4822      	ldr	r0, [pc, #136]	; (b48e0 <_GLOBAL__sub_I___appProductVersion+0x104>)
   b4856:	f004 f8ee 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
   b485a:	4629      	mov	r1, r5
   b485c:	4821      	ldr	r0, [pc, #132]	; (b48e4 <_GLOBAL__sub_I___appProductVersion+0x108>)
   b485e:	f004 f8ea 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
   b4862:	4629      	mov	r1, r5
   b4864:	4820      	ldr	r0, [pc, #128]	; (b48e8 <_GLOBAL__sub_I___appProductVersion+0x10c>)
   b4866:	f004 f8e6 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
   b486a:	4629      	mov	r1, r5
   b486c:	481f      	ldr	r0, [pc, #124]	; (b48ec <_GLOBAL__sub_I___appProductVersion+0x110>)
   b486e:	f004 f8e2 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
   b4872:	4629      	mov	r1, r5
   b4874:	481e      	ldr	r0, [pc, #120]	; (b48f0 <_GLOBAL__sub_I___appProductVersion+0x114>)
   b4876:	f004 f8de 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b487a:	4b1e      	ldr	r3, [pc, #120]	; (b48f4 <_GLOBAL__sub_I___appProductVersion+0x118>)
   b487c:	1d1a      	adds	r2, r3, #4
   b487e:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b4880:	4a1d      	ldr	r2, [pc, #116]	; (b48f8 <_GLOBAL__sub_I___appProductVersion+0x11c>)
   b4882:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4884:	2201      	movs	r2, #1
   b4886:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b488a:	751a      	strb	r2, [r3, #20]
   b488c:	611c      	str	r4, [r3, #16]
              error_(SYSTEM_ERROR_NONE) {
   b488e:	4b1b      	ldr	r3, [pc, #108]	; (b48fc <_GLOBAL__sub_I___appProductVersion+0x120>)
   b4890:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4894:	f1a2 1201 	sub.w	r2, r2, #65537	; 0x10001
   b4898:	609a      	str	r2, [r3, #8]
   b489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        set_system_mode(mode);
   b489e:	2002      	movs	r0, #2
   b48a0:	f002 bd08 	b.w	b72b4 <set_system_mode>
   b48a4:	2003e1a4 	.word	0x2003e1a4
   b48a8:	000bc93b 	.word	0x000bc93b
   b48ac:	000bc51f 	.word	0x000bc51f
   b48b0:	2003e184 	.word	0x2003e184
   b48b4:	2003e168 	.word	0x2003e168
   b48b8:	2003e39c 	.word	0x2003e39c
   b48bc:	2003e2d8 	.word	0x2003e2d8
   b48c0:	2003e1d8 	.word	0x2003e1d8
   b48c4:	2003e1c8 	.word	0x2003e1c8
   b48c8:	2003e1e0 	.word	0x2003e1e0
   b48cc:	2003e1f0 	.word	0x2003e1f0
   b48d0:	000bc534 	.word	0x000bc534
   b48d4:	2003e194 	.word	0x2003e194
   b48d8:	000bc53f 	.word	0x000bc53f
   b48dc:	2003e474 	.word	0x2003e474
   b48e0:	2003e288 	.word	0x2003e288
   b48e4:	2003e298 	.word	0x2003e298
   b48e8:	2003e2a8 	.word	0x2003e2a8
   b48ec:	2003e2b8 	.word	0x2003e2b8
   b48f0:	2003e2c8 	.word	0x2003e2c8
   b48f4:	2003e1a8 	.word	0x2003e1a8
   b48f8:	00030010 	.word	0x00030010
   b48fc:	2003e178 	.word	0x2003e178

000b4900 <_Z9goOfflinev>:
{
   b4900:	b530      	push	{r4, r5, lr}
   b4902:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4904:	2300      	movs	r3, #0
  Particle.disconnect();
   b4906:	a801      	add	r0, sp, #4
   b4908:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b490c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4910:	f003 fb71 	bl	b7ff6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4914:	f002 fc1e 	bl	b7154 <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   b4918:	4604      	mov	r4, r0
   b491a:	b110      	cbz	r0, b4922 <_Z9goOfflinev+0x22>
            spark_process();
   b491c:	f002 fc0a 	bl	b7134 <spark_process>
        while (_while() && !_condition()) {
   b4920:	e7f8      	b.n	b4914 <_Z9goOfflinev+0x14>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4922:	4d0b      	ldr	r5, [pc, #44]	; (b4950 <_Z9goOfflinev+0x50>)
   b4924:	f002 fc16 	bl	b7154 <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b4928:	6868      	ldr	r0, [r5, #4]
   b492a:	4623      	mov	r3, r4
   b492c:	4622      	mov	r2, r4
   b492e:	4621      	mov	r1, r4
   b4930:	f002 fc80 	bl	b7234 <network_off>
  waitUntil(Cellular.isOff);
   b4934:	4628      	mov	r0, r5
   b4936:	f002 fd97 	bl	b7468 <_ZN5spark12NetworkClass5isOffEv>
   b493a:	b910      	cbnz	r0, b4942 <_Z9goOfflinev+0x42>
            spark_process();
   b493c:	f002 fbfa 	bl	b7134 <spark_process>
        while (_while() && !_condition()) {
   b4940:	e7f8      	b.n	b4934 <_Z9goOfflinev+0x34>
   b4942:	4803      	ldr	r0, [pc, #12]	; (b4950 <_Z9goOfflinev+0x50>)
}
   b4944:	b005      	add	sp, #20
   b4946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  waitUntil(Cellular.isOff);
   b494a:	f002 bd8d 	b.w	b7468 <_ZN5spark12NetworkClass5isOffEv>
   b494e:	bf00      	nop
   b4950:	2003e664 	.word	0x2003e664

000b4954 <setup>:
{
   b4954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RGB.brightness(255);
   b4956:	2101      	movs	r1, #1
   b4958:	20ff      	movs	r0, #255	; 0xff
   b495a:	f003 fe9c 	bl	b8696 <_ZN8RGBClass10brightnessEhb>
  Serial.begin(9600);
   b495e:	f003 fa41 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4962:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4966:	f003 fa31 	bl	b7dcc <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   b496a:	f004 fcb1 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b496e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4972:	f003 f989 	bl	b7c88 <_ZN11USARTSerial5beginEm>
  delay(3000);
   b4976:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b497a:	f003 fea1 	bl	b86c0 <delay>
  reyaxSetup();
   b497e:	f7ff fda7 	bl	b44d0 <_Z10reyaxSetupv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b4982:	4b1c      	ldr	r3, [pc, #112]	; (b49f4 <setup+0xa0>)
   b4984:	2203      	movs	r2, #3
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(120000));
   b4986:	a801      	add	r0, sp, #4
        bool clearSession) :
   b4988:	2401      	movs	r4, #1
    timeout_ = timeout;
   b498a:	e9cd 2301 	strd	r2, r3, [sp, #4]
        bool clearSession) :
   b498e:	f8ad 400c 	strh.w	r4, [sp, #12]
   b4992:	f003 fb4a 	bl	b802a <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  goOnline();
   b4996:	f7ff fd29 	bl	b43ec <_Z8goOnlinev>
  Particle.syncTime();
   b499a:	f7ff fb8a 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
  Particle.publishVitals();
   b499e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b49a2:	4815      	ldr	r0, [pc, #84]	; (b49f8 <setup+0xa4>)
   b49a4:	f003 fb23 	bl	b7fee <_ZN10CloudClass13publishVitalsEm>
  plume.setServer(thingsboardServer, MQTTPORT);
   b49a8:	f240 725b 	movw	r2, #1883	; 0x75b
   b49ac:	4913      	ldr	r1, [pc, #76]	; (b49fc <setup+0xa8>)
   b49ae:	4814      	ldr	r0, [pc, #80]	; (b4a00 <setup+0xac>)
   b49b0:	f002 fa19 	bl	b6de6 <_ZN12PubSubClient9setServerEPKct>
  plumeConnect();
   b49b4:	f7ff fbc4 	bl	b4140 <_Z12plumeConnectv>
  plumePublish();
   b49b8:	f7ff fbf6 	bl	b41a8 <_Z12plumePublishv>
  delay(3000);
   b49bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49c0:	f003 fe7e 	bl	b86c0 <delay>
  goOffline();
   b49c4:	f7ff ff9c 	bl	b4900 <_Z9goOfflinev>
  RGB.brightness(10);
   b49c8:	4621      	mov	r1, r4
   b49ca:	200a      	movs	r0, #10
   b49cc:	f003 fe63 	bl	b8696 <_ZN8RGBClass10brightnessEhb>
   b49d0:	f002 fb46 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
  lastSend = millis();
   b49d4:	4b0b      	ldr	r3, [pc, #44]	; (b4a04 <setup+0xb0>)
  counter = 0;
   b49d6:	4a0c      	ldr	r2, [pc, #48]	; (b4a08 <setup+0xb4>)
  lastSend = millis();
   b49d8:	6018      	str	r0, [r3, #0]
  counter = 0;
   b49da:	2300      	movs	r3, #0
   b49dc:	6013      	str	r3, [r2, #0]
  dataSent = false;
   b49de:	4a0b      	ldr	r2, [pc, #44]	; (b4a0c <setup+0xb8>)
   b49e0:	7013      	strb	r3, [r2, #0]
  Serial.printf("deviceID: %s\n", ID.c_str());
   b49e2:	f003 f9ff 	bl	b7de4 <_Z16_fetch_usbserialv>
   b49e6:	4b0a      	ldr	r3, [pc, #40]	; (b4a10 <setup+0xbc>)
   b49e8:	490a      	ldr	r1, [pc, #40]	; (b4a14 <setup+0xc0>)
   b49ea:	681a      	ldr	r2, [r3, #0]
   b49ec:	f7ff fb9a 	bl	b4124 <_ZN5Print6printfEPKcz>
}
   b49f0:	b004      	add	sp, #16
   b49f2:	bd10      	pop	{r4, pc}
   b49f4:	0001d4c0 	.word	0x0001d4c0
   b49f8:	2003e740 	.word	0x2003e740
   b49fc:	2003df74 	.word	0x2003df74
   b4a00:	2003e2d8 	.word	0x2003e2d8
   b4a04:	2003e200 	.word	0x2003e200
   b4a08:	2003e1c0 	.word	0x2003e1c0
   b4a0c:	2003e1c4 	.word	0x2003e1c4
   b4a10:	2003e168 	.word	0x2003e168
   b4a14:	000bc547 	.word	0x000bc547

000b4a18 <_Z8sendDatav>:
{
   b4a18:	b530      	push	{r4, r5, lr}
   b4a1a:	ed2d 8b02 	vpush	{d8}
   b4a1e:	b085      	sub	sp, #20
  goOnline();
   b4a20:	f7ff fce4 	bl	b43ec <_Z8goOnlinev>
  ubidots.add("counter", counter);
   b4a24:	4c2a      	ldr	r4, [pc, #168]	; (b4ad0 <_Z8sendDatav+0xb8>)
   b4a26:	4d2b      	ldr	r5, [pc, #172]	; (b4ad4 <_Z8sendDatav+0xbc>)
  delay(1200);
   b4a28:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4a2c:	f003 fe48 	bl	b86c0 <delay>
  float batterySoc = System.batteryCharge();
   b4a30:	f7ff fb4a 	bl	b40c8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  ubidots.add("counter", counter);
   b4a34:	edd4 7a00 	vldr	s15, [r4]
   b4a38:	4927      	ldr	r1, [pc, #156]	; (b4ad8 <_Z8sendDatav+0xc0>)
   b4a3a:	4828      	ldr	r0, [pc, #160]	; (b4adc <_Z8sendDatav+0xc4>)
  float batterySoc = System.batteryCharge();
   b4a3c:	eeb0 8a40 	vmov.f32	s16, s0
  ubidots.add("counter", counter);
   b4a40:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   b4a44:	f001 f8c7 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
  ubidots.add("homeBattery", batterySoc);
   b4a48:	4925      	ldr	r1, [pc, #148]	; (b4ae0 <_Z8sendDatav+0xc8>)
   b4a4a:	4824      	ldr	r0, [pc, #144]	; (b4adc <_Z8sendDatav+0xc4>)
   b4a4c:	eeb0 0a48 	vmov.f32	s0, s16
   b4a50:	f001 f8c1 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
  bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC);
   b4a54:	4b23      	ldr	r3, [pc, #140]	; (b4ae4 <_Z8sendDatav+0xcc>)
   b4a56:	782a      	ldrb	r2, [r5, #0]
   b4a58:	6819      	ldr	r1, [r3, #0]
   b4a5a:	4820      	ldr	r0, [pc, #128]	; (b4adc <_Z8sendDatav+0xc4>)
   b4a5c:	f001 f8c4 	bl	b5be8 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
  if (bufferSent)
   b4a60:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4a62:	f88d 3000 	strb.w	r3, [sp]
   b4a66:	4602      	mov	r2, r0
   b4a68:	233c      	movs	r3, #60	; 0x3c
   b4a6a:	b320      	cbz	r0, b4ab6 <_Z8sendDatav+0x9e>
   b4a6c:	491e      	ldr	r1, [pc, #120]	; (b4ae8 <_Z8sendDatav+0xd0>)
   b4a6e:	2200      	movs	r2, #0
   b4a70:	a802      	add	r0, sp, #8
   b4a72:	f003 fbef 	bl	b8254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4a76:	a803      	add	r0, sp, #12
   b4a78:	f7ff fe9a 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1200);
   b4a7c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4a80:	f003 fe1e 	bl	b86c0 <delay>
    dataSent = true;
   b4a84:	4b19      	ldr	r3, [pc, #100]	; (b4aec <_Z8sendDatav+0xd4>)
   b4a86:	2201      	movs	r2, #1
   b4a88:	701a      	strb	r2, [r3, #0]
    checkUpdates();
   b4a8a:	f7ff fcf3 	bl	b4474 <_Z12checkUpdatesv>
    delay(1000);
   b4a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4a92:	f003 fe15 	bl	b86c0 <delay>
    goOffline();
   b4a96:	f7ff ff33 	bl	b4900 <_Z9goOfflinev>
    onlineNow = false;
   b4a9a:	4b15      	ldr	r3, [pc, #84]	; (b4af0 <_Z8sendDatav+0xd8>)
   b4a9c:	2200      	movs	r2, #0
   b4a9e:	701a      	strb	r2, [r3, #0]
   b4aa0:	f002 fade 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
    lastSend = millis();
   b4aa4:	4b13      	ldr	r3, [pc, #76]	; (b4af4 <_Z8sendDatav+0xdc>)
   b4aa6:	6018      	str	r0, [r3, #0]
  counter++;
   b4aa8:	6823      	ldr	r3, [r4, #0]
   b4aaa:	3301      	adds	r3, #1
   b4aac:	6023      	str	r3, [r4, #0]
}
   b4aae:	b005      	add	sp, #20
   b4ab0:	ecbd 8b02 	vpop	{d8}
   b4ab4:	bd30      	pop	{r4, r5, pc}
   b4ab6:	4910      	ldr	r1, [pc, #64]	; (b4af8 <_Z8sendDatav+0xe0>)
   b4ab8:	a802      	add	r0, sp, #8
   b4aba:	f003 fbcb 	bl	b8254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4abe:	a803      	add	r0, sp, #12
   b4ac0:	f7ff fe76 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1200);
   b4ac4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   b4ac8:	f003 fdfa 	bl	b86c0 <delay>
   b4acc:	e7ec      	b.n	b4aa8 <_Z8sendDatav+0x90>
   b4ace:	bf00      	nop
   b4ad0:	2003e1c0 	.word	0x2003e1c0
   b4ad4:	2003e1a4 	.word	0x2003e1a4
   b4ad8:	000bc555 	.word	0x000bc555
   b4adc:	2003e474 	.word	0x2003e474
   b4ae0:	000bc55d 	.word	0x000bc55d
   b4ae4:	2003e194 	.word	0x2003e194
   b4ae8:	000bc569 	.word	0x000bc569
   b4aec:	2003e1c4 	.word	0x2003e1c4
   b4af0:	2003e284 	.word	0x2003e284
   b4af4:	2003e200 	.word	0x2003e200
   b4af8:	000bc57e 	.word	0x000bc57e

000b4afc <loop>:
{
   b4afc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (onlineNow) ///////////////
   b4afe:	4ca3      	ldr	r4, [pc, #652]	; (b4d8c <loop+0x290>)
   b4b00:	7823      	ldrb	r3, [r4, #0]
{
   b4b02:	b087      	sub	sp, #28
  if (onlineNow) ///////////////
   b4b04:	b113      	cbz	r3, b4b0c <loop+0x10>
    plume.loop();
   b4b06:	48a2      	ldr	r0, [pc, #648]	; (b4d90 <loop+0x294>)
   b4b08:	f002 f878 	bl	b6bfc <_ZN12PubSubClient4loopEv>
  if (((Time.minute() == 59) || (Time.minute() == 29)) && !Particle.connected()) //remove early bird requirement
   b4b0c:	f003 fe4c 	bl	b87a8 <_ZN9TimeClass6minuteEv>
   b4b10:	283b      	cmp	r0, #59	; 0x3b
   b4b12:	d118      	bne.n	b4b46 <loop+0x4a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4b14:	f002 fb1e 	bl	b7154 <spark_cloud_flag_connected>
   b4b18:	b9c8      	cbnz	r0, b4b4e <loop+0x52>
    RGB.brightness(10);
   b4b1a:	2101      	movs	r1, #1
   b4b1c:	200a      	movs	r0, #10
   b4b1e:	f003 fdba 	bl	b8696 <_ZN8RGBClass10brightnessEhb>
    onlineNow = true;
   b4b22:	2301      	movs	r3, #1
   b4b24:	7023      	strb	r3, [r4, #0]
    goOnline();
   b4b26:	f7ff fc61 	bl	b43ec <_Z8goOnlinev>
    Particle.syncTime();
   b4b2a:	f7ff fac2 	bl	b40b2 <_ZN10CloudClass8syncTimeEv.isra.0>
    Particle.publishVitals();
   b4b2e:	4899      	ldr	r0, [pc, #612]	; (b4d94 <loop+0x298>)
   b4b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4b34:	f003 fa5b 	bl	b7fee <_ZN10CloudClass13publishVitalsEm>
    if (!plume.connected())
   b4b38:	4895      	ldr	r0, [pc, #596]	; (b4d90 <loop+0x294>)
   b4b3a:	f001 ff76 	bl	b6a2a <_ZN12PubSubClient9connectedEv>
   b4b3e:	b930      	cbnz	r0, b4b4e <loop+0x52>
      plumeConnect();
   b4b40:	f7ff fafe 	bl	b4140 <_Z12plumeConnectv>
   b4b44:	e003      	b.n	b4b4e <loop+0x52>
  if (((Time.minute() == 59) || (Time.minute() == 29)) && !Particle.connected()) //remove early bird requirement
   b4b46:	f003 fe2f 	bl	b87a8 <_ZN9TimeClass6minuteEv>
   b4b4a:	281d      	cmp	r0, #29
   b4b4c:	d0e2      	beq.n	b4b14 <loop+0x18>
  if ((Time.minute() == 0) || (Time.minute() == 30))
   b4b4e:	f003 fe2b 	bl	b87a8 <_ZN9TimeClass6minuteEv>
   b4b52:	2800      	cmp	r0, #0
   b4b54:	f040 80b2 	bne.w	b4cbc <loop+0x1c0>
    plumePublish();
   b4b58:	f7ff fb26 	bl	b41a8 <_Z12plumePublishv>
    sendData();
   b4b5c:	f7ff ff5c 	bl	b4a18 <_Z8sendDatav>
  if (Serial1.available())
   b4b60:	f004 fbb6 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4b64:	6803      	ldr	r3, [r0, #0]
   b4b66:	691b      	ldr	r3, [r3, #16]
   b4b68:	4798      	blx	r3
   b4b6a:	2800      	cmp	r0, #0
   b4b6c:	f000 80a4 	beq.w	b4cb8 <loop+0x1bc>
    parse0 = Serial1.readStringUntil(',');
   b4b70:	f004 fbae 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4b74:	222c      	movs	r2, #44	; 0x2c
   b4b76:	4601      	mov	r1, r0
   b4b78:	a802      	add	r0, sp, #8
   b4b7a:	f003 fe5d 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4b7e:	a902      	add	r1, sp, #8
   b4b80:	4885      	ldr	r0, [pc, #532]	; (b4d98 <loop+0x29c>)
    tempF = Serial1.readStringUntil(',').toFloat();
   b4b82:	4d86      	ldr	r5, [pc, #536]	; (b4d9c <loop+0x2a0>)
    voltage = Serial1.readStringUntil(',').toFloat();
   b4b84:	4c86      	ldr	r4, [pc, #536]	; (b4da0 <loop+0x2a4>)
    probeNumber = Serial1.readStringUntil('\n').toInt();
   b4b86:	4e87      	ldr	r6, [pc, #540]	; (b4da4 <loop+0x2a8>)
    incomingString = Serial1.readString();
   b4b88:	4f87      	ldr	r7, [pc, #540]	; (b4da8 <loop+0x2ac>)
    parse0 = Serial1.readStringUntil(',');
   b4b8a:	f003 ff85 	bl	b8a98 <_ZN6StringaSEOS_>
   b4b8e:	a802      	add	r0, sp, #8
   b4b90:	f003 ff06 	bl	b89a0 <_ZN6StringD1Ev>
    parse1 = Serial1.readStringUntil(',');
   b4b94:	f004 fb9c 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4b98:	222c      	movs	r2, #44	; 0x2c
   b4b9a:	4601      	mov	r1, r0
   b4b9c:	a802      	add	r0, sp, #8
   b4b9e:	f003 fe4b 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4ba2:	a902      	add	r1, sp, #8
   b4ba4:	4881      	ldr	r0, [pc, #516]	; (b4dac <loop+0x2b0>)
   b4ba6:	f003 ff77 	bl	b8a98 <_ZN6StringaSEOS_>
   b4baa:	a802      	add	r0, sp, #8
   b4bac:	f003 fef8 	bl	b89a0 <_ZN6StringD1Ev>
    tempF = Serial1.readStringUntil(',').toFloat();
   b4bb0:	f004 fb8e 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4bb4:	222c      	movs	r2, #44	; 0x2c
   b4bb6:	4601      	mov	r1, r0
   b4bb8:	a802      	add	r0, sp, #8
   b4bba:	f003 fe3d 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4bbe:	a802      	add	r0, sp, #8
   b4bc0:	f003 ffb4 	bl	b8b2c <_ZNK6String7toFloatEv>
   b4bc4:	a802      	add	r0, sp, #8
   b4bc6:	ed85 0a00 	vstr	s0, [r5]
   b4bca:	f003 fee9 	bl	b89a0 <_ZN6StringD1Ev>
    voltage = Serial1.readStringUntil(',').toFloat();
   b4bce:	f004 fb7f 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4bd2:	222c      	movs	r2, #44	; 0x2c
   b4bd4:	4601      	mov	r1, r0
   b4bd6:	a802      	add	r0, sp, #8
   b4bd8:	f003 fe2e 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4bdc:	a802      	add	r0, sp, #8
   b4bde:	f003 ffa5 	bl	b8b2c <_ZNK6String7toFloatEv>
   b4be2:	a802      	add	r0, sp, #8
   b4be4:	ed84 0a00 	vstr	s0, [r4]
   b4be8:	f003 feda 	bl	b89a0 <_ZN6StringD1Ev>
    probeNumber = Serial1.readStringUntil('\n').toInt();
   b4bec:	f004 fb70 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4bf0:	220a      	movs	r2, #10
   b4bf2:	4601      	mov	r1, r0
   b4bf4:	a802      	add	r0, sp, #8
   b4bf6:	f003 fe1f 	bl	b8838 <_ZN6Stream15readStringUntilEc>
   b4bfa:	a802      	add	r0, sp, #8
   b4bfc:	f003 ff90 	bl	b8b20 <_ZNK6String5toIntEv>
   b4c00:	6030      	str	r0, [r6, #0]
   b4c02:	a802      	add	r0, sp, #8
   b4c04:	f003 fecc 	bl	b89a0 <_ZN6StringD1Ev>
    incomingString = Serial1.readString();
   b4c08:	f004 fb62 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4c0c:	4601      	mov	r1, r0
   b4c0e:	a802      	add	r0, sp, #8
   b4c10:	f003 fdfe 	bl	b8810 <_ZN6Stream10readStringEv>
   b4c14:	a902      	add	r1, sp, #8
   b4c16:	4638      	mov	r0, r7
   b4c18:	f003 ff3e 	bl	b8a98 <_ZN6StringaSEOS_>
   b4c1c:	a802      	add	r0, sp, #8
   b4c1e:	f003 febf 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("incomingString: %s\n", incomingString.c_str());
   b4c22:	f003 f8df 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4c26:	683a      	ldr	r2, [r7, #0]
   b4c28:	4961      	ldr	r1, [pc, #388]	; (b4db0 <loop+0x2b4>)
   b4c2a:	f7ff fa7b 	bl	b4124 <_ZN5Print6printfEPKcz>
    Serial.printf("tempF: %.02f, probeNumber: %i\n", tempF, probeNumber);
   b4c2e:	f003 f8d9 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4c32:	4607      	mov	r7, r0
   b4c34:	6828      	ldr	r0, [r5, #0]
   b4c36:	f004 fe9d 	bl	b9974 <__aeabi_f2d>
   b4c3a:	460b      	mov	r3, r1
   b4c3c:	6831      	ldr	r1, [r6, #0]
   b4c3e:	9100      	str	r1, [sp, #0]
   b4c40:	4602      	mov	r2, r0
   b4c42:	495c      	ldr	r1, [pc, #368]	; (b4db4 <loop+0x2b8>)
   b4c44:	4638      	mov	r0, r7
   b4c46:	f7ff fa6d 	bl	b4124 <_ZN5Print6printfEPKcz>
    if (probeNumber == 1)
   b4c4a:	6836      	ldr	r6, [r6, #0]
      ubidots.add("tempBlue", tempF);
   b4c4c:	ed95 0a00 	vldr	s0, [r5]
    if (probeNumber == 1)
   b4c50:	2e01      	cmp	r6, #1
   b4c52:	d139      	bne.n	b4cc8 <loop+0x1cc>
      ubidots.add("tempBlue", tempF);
   b4c54:	4958      	ldr	r1, [pc, #352]	; (b4db8 <loop+0x2bc>)
   b4c56:	4859      	ldr	r0, [pc, #356]	; (b4dbc <loop+0x2c0>)
   b4c58:	f000 ffbd 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageBlue", voltage);
   b4c5c:	4958      	ldr	r1, [pc, #352]	; (b4dc0 <loop+0x2c4>)
   b4c5e:	ed94 0a00 	vldr	s0, [r4]
   b4c62:	4856      	ldr	r0, [pc, #344]	; (b4dbc <loop+0x2c0>)
   b4c64:	f000 ffb7 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      tempBlue = tempF;
   b4c68:	4b56      	ldr	r3, [pc, #344]	; (b4dc4 <loop+0x2c8>)
   b4c6a:	682a      	ldr	r2, [r5, #0]
      voltageBlue = voltage;
   b4c6c:	4956      	ldr	r1, [pc, #344]	; (b4dc8 <loop+0x2cc>)
      tempBlue = tempF;
   b4c6e:	601a      	str	r2, [r3, #0]
      voltageBlue = voltage;
   b4c70:	6823      	ldr	r3, [r4, #0]
   b4c72:	600b      	str	r3, [r1, #0]
      t1 = tempF;
   b4c74:	4955      	ldr	r1, [pc, #340]	; (b4dcc <loop+0x2d0>)
   b4c76:	600a      	str	r2, [r1, #0]
      v1 = voltage;
   b4c78:	4a55      	ldr	r2, [pc, #340]	; (b4dd0 <loop+0x2d4>)
   b4c7a:	6013      	str	r3, [r2, #0]
      x1 = true;
   b4c7c:	4b55      	ldr	r3, [pc, #340]	; (b4dd4 <loop+0x2d8>)
   b4c7e:	701e      	strb	r6, [r3, #0]
    incomingString2 = Serial1.readString();
   b4c80:	f004 fb26 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b4c84:	4c54      	ldr	r4, [pc, #336]	; (b4dd8 <loop+0x2dc>)
   b4c86:	4601      	mov	r1, r0
   b4c88:	a802      	add	r0, sp, #8
   b4c8a:	f003 fdc1 	bl	b8810 <_ZN6Stream10readStringEv>
   b4c8e:	a902      	add	r1, sp, #8
   b4c90:	4620      	mov	r0, r4
   b4c92:	f003 ff01 	bl	b8a98 <_ZN6StringaSEOS_>
   b4c96:	a802      	add	r0, sp, #8
   b4c98:	f003 fe82 	bl	b89a0 <_ZN6StringD1Ev>
    Serial.printf("incomingString2: %s\n", incomingString2.c_str());
   b4c9c:	f003 f8a2 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4ca0:	6822      	ldr	r2, [r4, #0]
   b4ca2:	494e      	ldr	r1, [pc, #312]	; (b4ddc <loop+0x2e0>)
   b4ca4:	f7ff fa3e 	bl	b4124 <_ZN5Print6printfEPKcz>
    Serial.flush();
   b4ca8:	f003 f89c 	bl	b7de4 <_Z16_fetch_usbserialv>
   b4cac:	6803      	ldr	r3, [r0, #0]
   b4cae:	69db      	ldr	r3, [r3, #28]
   b4cb0:	4798      	blx	r3
    dataSent = false;
   b4cb2:	4b4b      	ldr	r3, [pc, #300]	; (b4de0 <loop+0x2e4>)
   b4cb4:	2200      	movs	r2, #0
   b4cb6:	701a      	strb	r2, [r3, #0]
}
   b4cb8:	b007      	add	sp, #28
   b4cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Time.minute() == 0) || (Time.minute() == 30))
   b4cbc:	f003 fd74 	bl	b87a8 <_ZN9TimeClass6minuteEv>
   b4cc0:	281e      	cmp	r0, #30
   b4cc2:	f47f af4d 	bne.w	b4b60 <loop+0x64>
   b4cc6:	e747      	b.n	b4b58 <loop+0x5c>
    else if (probeNumber == 2)
   b4cc8:	2e02      	cmp	r6, #2
   b4cca:	d117      	bne.n	b4cfc <loop+0x200>
      ubidots.add("tempGreen", tempF);
   b4ccc:	4945      	ldr	r1, [pc, #276]	; (b4de4 <loop+0x2e8>)
   b4cce:	483b      	ldr	r0, [pc, #236]	; (b4dbc <loop+0x2c0>)
   b4cd0:	f000 ff81 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageGreen", voltage);
   b4cd4:	4944      	ldr	r1, [pc, #272]	; (b4de8 <loop+0x2ec>)
   b4cd6:	ed94 0a00 	vldr	s0, [r4]
   b4cda:	4838      	ldr	r0, [pc, #224]	; (b4dbc <loop+0x2c0>)
   b4cdc:	f000 ff7b 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      tempGreen = tempF;
   b4ce0:	4b42      	ldr	r3, [pc, #264]	; (b4dec <loop+0x2f0>)
   b4ce2:	682a      	ldr	r2, [r5, #0]
      voltageGreen = voltage;
   b4ce4:	4942      	ldr	r1, [pc, #264]	; (b4df0 <loop+0x2f4>)
      tempGreen = tempF;
   b4ce6:	601a      	str	r2, [r3, #0]
      voltageGreen = voltage;
   b4ce8:	6823      	ldr	r3, [r4, #0]
   b4cea:	600b      	str	r3, [r1, #0]
      t2 = tempF;
   b4cec:	4941      	ldr	r1, [pc, #260]	; (b4df4 <loop+0x2f8>)
   b4cee:	600a      	str	r2, [r1, #0]
      v2 = voltage;
   b4cf0:	4a41      	ldr	r2, [pc, #260]	; (b4df8 <loop+0x2fc>)
   b4cf2:	6013      	str	r3, [r2, #0]
      x2 = true;
   b4cf4:	4b41      	ldr	r3, [pc, #260]	; (b4dfc <loop+0x300>)
      x3 = true;
   b4cf6:	2201      	movs	r2, #1
   b4cf8:	701a      	strb	r2, [r3, #0]
   b4cfa:	e7c1      	b.n	b4c80 <loop+0x184>
    else if (probeNumber == 3)
   b4cfc:	2e03      	cmp	r6, #3
   b4cfe:	d115      	bne.n	b4d2c <loop+0x230>
      ubidots.add("tempOrange", tempF);
   b4d00:	493f      	ldr	r1, [pc, #252]	; (b4e00 <loop+0x304>)
   b4d02:	482e      	ldr	r0, [pc, #184]	; (b4dbc <loop+0x2c0>)
   b4d04:	f000 ff67 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      ubidots.add("voltageOrange", voltage);
   b4d08:	493e      	ldr	r1, [pc, #248]	; (b4e04 <loop+0x308>)
   b4d0a:	ed94 0a00 	vldr	s0, [r4]
   b4d0e:	482b      	ldr	r0, [pc, #172]	; (b4dbc <loop+0x2c0>)
   b4d10:	f000 ff61 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      tempOrange = tempF;
   b4d14:	4b3c      	ldr	r3, [pc, #240]	; (b4e08 <loop+0x30c>)
   b4d16:	682a      	ldr	r2, [r5, #0]
      voltageOrange = voltage;
   b4d18:	493c      	ldr	r1, [pc, #240]	; (b4e0c <loop+0x310>)
      tempOrange = tempF;
   b4d1a:	601a      	str	r2, [r3, #0]
      voltageOrange = voltage;
   b4d1c:	6823      	ldr	r3, [r4, #0]
   b4d1e:	600b      	str	r3, [r1, #0]
      t3 = tempF;
   b4d20:	493b      	ldr	r1, [pc, #236]	; (b4e10 <loop+0x314>)
   b4d22:	600a      	str	r2, [r1, #0]
      v3 = voltage;
   b4d24:	4a3b      	ldr	r2, [pc, #236]	; (b4e14 <loop+0x318>)
   b4d26:	6013      	str	r3, [r2, #0]
      x3 = true;
   b4d28:	4b3b      	ldr	r3, [pc, #236]	; (b4e18 <loop+0x31c>)
   b4d2a:	e7e4      	b.n	b4cf6 <loop+0x1fa>
    else if (probeNumber == 4)
   b4d2c:	2e04      	cmp	r6, #4
   b4d2e:	d115      	bne.n	b4d5c <loop+0x260>
      ubidots.add("004", tempF);
   b4d30:	493a      	ldr	r1, [pc, #232]	; (b4e1c <loop+0x320>)
   b4d32:	4822      	ldr	r0, [pc, #136]	; (b4dbc <loop+0x2c0>)
   b4d34:	f000 ff4f 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      ubidots.add("004Voltage", voltage);
   b4d38:	4939      	ldr	r1, [pc, #228]	; (b4e20 <loop+0x324>)
   b4d3a:	ed94 0a00 	vldr	s0, [r4]
   b4d3e:	481f      	ldr	r0, [pc, #124]	; (b4dbc <loop+0x2c0>)
   b4d40:	f000 ff49 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      temp004 = tempF;
   b4d44:	4b37      	ldr	r3, [pc, #220]	; (b4e24 <loop+0x328>)
   b4d46:	682a      	ldr	r2, [r5, #0]
      voltage004 = voltage;
   b4d48:	4937      	ldr	r1, [pc, #220]	; (b4e28 <loop+0x32c>)
      temp004 = tempF;
   b4d4a:	601a      	str	r2, [r3, #0]
      voltage004 = voltage;
   b4d4c:	6823      	ldr	r3, [r4, #0]
   b4d4e:	600b      	str	r3, [r1, #0]
      t4 = tempF;
   b4d50:	4936      	ldr	r1, [pc, #216]	; (b4e2c <loop+0x330>)
   b4d52:	600a      	str	r2, [r1, #0]
      v4 = voltage;
   b4d54:	4a36      	ldr	r2, [pc, #216]	; (b4e30 <loop+0x334>)
   b4d56:	6013      	str	r3, [r2, #0]
      x4 = true;
   b4d58:	4b36      	ldr	r3, [pc, #216]	; (b4e34 <loop+0x338>)
   b4d5a:	e7cc      	b.n	b4cf6 <loop+0x1fa>
    else if (probeNumber == 5)
   b4d5c:	2e05      	cmp	r6, #5
   b4d5e:	d179      	bne.n	b4e54 <loop+0x358>
      ubidots.add("005", tempF);
   b4d60:	4935      	ldr	r1, [pc, #212]	; (b4e38 <loop+0x33c>)
   b4d62:	4816      	ldr	r0, [pc, #88]	; (b4dbc <loop+0x2c0>)
   b4d64:	f000 ff37 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      ubidots.add("005Voltage", voltage);
   b4d68:	4934      	ldr	r1, [pc, #208]	; (b4e3c <loop+0x340>)
   b4d6a:	ed94 0a00 	vldr	s0, [r4]
   b4d6e:	4813      	ldr	r0, [pc, #76]	; (b4dbc <loop+0x2c0>)
   b4d70:	f000 ff31 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      temp005 = tempF;
   b4d74:	4b32      	ldr	r3, [pc, #200]	; (b4e40 <loop+0x344>)
   b4d76:	682a      	ldr	r2, [r5, #0]
      voltage005 = voltage;
   b4d78:	4932      	ldr	r1, [pc, #200]	; (b4e44 <loop+0x348>)
      temp005 = tempF;
   b4d7a:	601a      	str	r2, [r3, #0]
      voltage005 = voltage;
   b4d7c:	6823      	ldr	r3, [r4, #0]
   b4d7e:	600b      	str	r3, [r1, #0]
      t5 = tempF;
   b4d80:	4931      	ldr	r1, [pc, #196]	; (b4e48 <loop+0x34c>)
   b4d82:	600a      	str	r2, [r1, #0]
      v5 = voltage;
   b4d84:	4a31      	ldr	r2, [pc, #196]	; (b4e4c <loop+0x350>)
   b4d86:	6013      	str	r3, [r2, #0]
      x5 = true;
   b4d88:	4b31      	ldr	r3, [pc, #196]	; (b4e50 <loop+0x354>)
   b4d8a:	e7b4      	b.n	b4cf6 <loop+0x1fa>
   b4d8c:	2003e284 	.word	0x2003e284
   b4d90:	2003e2d8 	.word	0x2003e2d8
   b4d94:	2003e740 	.word	0x2003e740
   b4d98:	2003e288 	.word	0x2003e288
   b4d9c:	2003e3e8 	.word	0x2003e3e8
   b4da0:	2003e49c 	.word	0x2003e49c
   b4da4:	2003e398 	.word	0x2003e398
   b4da8:	2003e1e0 	.word	0x2003e1e0
   b4dac:	2003e298 	.word	0x2003e298
   b4db0:	000bc59f 	.word	0x000bc59f
   b4db4:	000bc5b3 	.word	0x000bc5b3
   b4db8:	000bc5d2 	.word	0x000bc5d2
   b4dbc:	2003e474 	.word	0x2003e474
   b4dc0:	000bc5db 	.word	0x000bc5db
   b4dc4:	2003e3e4 	.word	0x2003e3e4
   b4dc8:	2003e4b0 	.word	0x2003e4b0
   b4dcc:	2003e3b8 	.word	0x2003e3b8
   b4dd0:	2003e480 	.word	0x2003e480
   b4dd4:	2003e4bc 	.word	0x2003e4bc
   b4dd8:	2003e1f0 	.word	0x2003e1f0
   b4ddc:	000bc65e 	.word	0x000bc65e
   b4de0:	2003e1c4 	.word	0x2003e1c4
   b4de4:	000bc5e7 	.word	0x000bc5e7
   b4de8:	000bc5f1 	.word	0x000bc5f1
   b4dec:	2003e3ec 	.word	0x2003e3ec
   b4df0:	2003e4b4 	.word	0x2003e4b4
   b4df4:	2003e3bc 	.word	0x2003e3bc
   b4df8:	2003e484 	.word	0x2003e484
   b4dfc:	2003e4bd 	.word	0x2003e4bd
   b4e00:	000bc5fe 	.word	0x000bc5fe
   b4e04:	000bc609 	.word	0x000bc609
   b4e08:	2003e3f0 	.word	0x2003e3f0
   b4e0c:	2003e4b8 	.word	0x2003e4b8
   b4e10:	2003e3c0 	.word	0x2003e3c0
   b4e14:	2003e488 	.word	0x2003e488
   b4e18:	2003e4be 	.word	0x2003e4be
   b4e1c:	000bc617 	.word	0x000bc617
   b4e20:	000bc61b 	.word	0x000bc61b
   b4e24:	2003e3d4 	.word	0x2003e3d4
   b4e28:	2003e4a0 	.word	0x2003e4a0
   b4e2c:	2003e3c4 	.word	0x2003e3c4
   b4e30:	2003e48c 	.word	0x2003e48c
   b4e34:	2003e4bf 	.word	0x2003e4bf
   b4e38:	000bc626 	.word	0x000bc626
   b4e3c:	000bc62a 	.word	0x000bc62a
   b4e40:	2003e3d8 	.word	0x2003e3d8
   b4e44:	2003e4a4 	.word	0x2003e4a4
   b4e48:	2003e3c8 	.word	0x2003e3c8
   b4e4c:	2003e490 	.word	0x2003e490
   b4e50:	2003e4c0 	.word	0x2003e4c0
    else if (probeNumber == 6)
   b4e54:	2e06      	cmp	r6, #6
   b4e56:	d115      	bne.n	b4e84 <loop+0x388>
      ubidots.add("006", tempF);
   b4e58:	491a      	ldr	r1, [pc, #104]	; (b4ec4 <loop+0x3c8>)
   b4e5a:	481b      	ldr	r0, [pc, #108]	; (b4ec8 <loop+0x3cc>)
   b4e5c:	f000 febb 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      ubidots.add("006Voltage", voltage);
   b4e60:	491a      	ldr	r1, [pc, #104]	; (b4ecc <loop+0x3d0>)
   b4e62:	ed94 0a00 	vldr	s0, [r4]
   b4e66:	4818      	ldr	r0, [pc, #96]	; (b4ec8 <loop+0x3cc>)
   b4e68:	f000 feb5 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      temp006 = tempF;
   b4e6c:	4b18      	ldr	r3, [pc, #96]	; (b4ed0 <loop+0x3d4>)
   b4e6e:	682a      	ldr	r2, [r5, #0]
      voltage006 = voltage;
   b4e70:	4918      	ldr	r1, [pc, #96]	; (b4ed4 <loop+0x3d8>)
      temp006 = tempF;
   b4e72:	601a      	str	r2, [r3, #0]
      voltage006 = voltage;
   b4e74:	6823      	ldr	r3, [r4, #0]
   b4e76:	600b      	str	r3, [r1, #0]
      t6 = tempF;
   b4e78:	4917      	ldr	r1, [pc, #92]	; (b4ed8 <loop+0x3dc>)
   b4e7a:	600a      	str	r2, [r1, #0]
      v6 = voltage;
   b4e7c:	4a17      	ldr	r2, [pc, #92]	; (b4edc <loop+0x3e0>)
   b4e7e:	6013      	str	r3, [r2, #0]
      x6 = true;
   b4e80:	4b17      	ldr	r3, [pc, #92]	; (b4ee0 <loop+0x3e4>)
   b4e82:	e738      	b.n	b4cf6 <loop+0x1fa>
    else if (probeNumber == 7)
   b4e84:	2e07      	cmp	r6, #7
   b4e86:	d115      	bne.n	b4eb4 <loop+0x3b8>
      ubidots.add("007", tempF);
   b4e88:	4916      	ldr	r1, [pc, #88]	; (b4ee4 <loop+0x3e8>)
   b4e8a:	480f      	ldr	r0, [pc, #60]	; (b4ec8 <loop+0x3cc>)
   b4e8c:	f000 fea3 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      ubidots.add("007Voltage", voltage);
   b4e90:	4915      	ldr	r1, [pc, #84]	; (b4ee8 <loop+0x3ec>)
   b4e92:	ed94 0a00 	vldr	s0, [r4]
   b4e96:	480c      	ldr	r0, [pc, #48]	; (b4ec8 <loop+0x3cc>)
   b4e98:	f000 fe9d 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      temp007 = tempF;
   b4e9c:	4b13      	ldr	r3, [pc, #76]	; (b4eec <loop+0x3f0>)
   b4e9e:	682a      	ldr	r2, [r5, #0]
      voltage007 = voltage;
   b4ea0:	4913      	ldr	r1, [pc, #76]	; (b4ef0 <loop+0x3f4>)
      temp007 = tempF;
   b4ea2:	601a      	str	r2, [r3, #0]
      voltage007 = voltage;
   b4ea4:	6823      	ldr	r3, [r4, #0]
   b4ea6:	600b      	str	r3, [r1, #0]
      t7 = tempF;
   b4ea8:	4912      	ldr	r1, [pc, #72]	; (b4ef4 <loop+0x3f8>)
   b4eaa:	600a      	str	r2, [r1, #0]
      v7 = voltage;
   b4eac:	4a12      	ldr	r2, [pc, #72]	; (b4ef8 <loop+0x3fc>)
   b4eae:	6013      	str	r3, [r2, #0]
      x7 = true;
   b4eb0:	4b12      	ldr	r3, [pc, #72]	; (b4efc <loop+0x400>)
   b4eb2:	e720      	b.n	b4cf6 <loop+0x1fa>
      ubidots.add("extraProbe", tempF);
   b4eb4:	4912      	ldr	r1, [pc, #72]	; (b4f00 <loop+0x404>)
   b4eb6:	4804      	ldr	r0, [pc, #16]	; (b4ec8 <loop+0x3cc>)
   b4eb8:	f000 fe8d 	bl	b5bd6 <_ZN7Ubidots3addEPcf>
      reyaxReset();
   b4ebc:	f7ff fc38 	bl	b4730 <_Z10reyaxResetv>
   b4ec0:	e6de      	b.n	b4c80 <loop+0x184>
   b4ec2:	bf00      	nop
   b4ec4:	000bc635 	.word	0x000bc635
   b4ec8:	2003e474 	.word	0x2003e474
   b4ecc:	000bc639 	.word	0x000bc639
   b4ed0:	2003e3dc 	.word	0x2003e3dc
   b4ed4:	2003e4a8 	.word	0x2003e4a8
   b4ed8:	2003e3cc 	.word	0x2003e3cc
   b4edc:	2003e494 	.word	0x2003e494
   b4ee0:	2003e4c1 	.word	0x2003e4c1
   b4ee4:	000bc644 	.word	0x000bc644
   b4ee8:	000bc648 	.word	0x000bc648
   b4eec:	2003e3e0 	.word	0x2003e3e0
   b4ef0:	2003e4ac 	.word	0x2003e4ac
   b4ef4:	2003e3d0 	.word	0x2003e3d0
   b4ef8:	2003e498 	.word	0x2003e498
   b4efc:	2003e4c2 	.word	0x2003e4c2
   b4f00:	000bc653 	.word	0x000bc653

000b4f04 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   b4f04:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4f0c <_ZN11UbiParticle3getEPKcS1_+0x8>
   b4f08:	4770      	bx	lr
   b4f0a:	bf00      	nop
   b4f0c:	cda2425f 	.word	0xcda2425f

000b4f10 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   b4f10:	7401      	strb	r1, [r0, #16]
   b4f12:	4770      	bx	lr

000b4f14 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    {
      _M_header._M_color = _S_red;
   b4f14:	2200      	movs	r2, #0

	  _Rb_tree_impl()
	    _GLIBCXX_NOEXCEPT_IF(
		is_nothrow_default_constructible<_Node_allocator>::value
		&& is_nothrow_default_constructible<_Base_key_compare>::value )
	  : _Node_allocator()
   b4f16:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b4f18:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b4f1c:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b4f20:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b4f22:	4770      	bx	lr

000b4f24 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b4f24:	b530      	push	{r4, r5, lr}
   b4f26:	b085      	sub	sp, #20
   b4f28:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4f2a:	9b08      	ldr	r3, [sp, #32]
   b4f2c:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4f2e:	f88d 3000 	strb.w	r3, [sp]
   b4f32:	a802      	add	r0, sp, #8
   b4f34:	233c      	movs	r3, #60	; 0x3c
   b4f36:	f003 f98d 	bl	b8254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b4f3a:	2000      	movs	r0, #0
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4f3c:	9c02      	ldr	r4, [sp, #8]
   b4f3e:	f002 f9d9 	bl	b72f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4f42:	b120      	cbz	r0, b4f4e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4f44:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4f46:	b913      	cbnz	r3, b4f4e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   b4f48:	f002 f8f4 	bl	b7134 <spark_process>
    }
   b4f4c:	e7fa      	b.n	b4f44 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   b4f4e:	7863      	ldrb	r3, [r4, #1]
   b4f50:	f3bf 8f5b 	dmb	ish
   b4f54:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4f56:	b9ab      	cbnz	r3, b4f84 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   b4f58:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   b4f5a:	9c03      	ldr	r4, [sp, #12]
   b4f5c:	b17c      	cbz	r4, b4f7e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   b4f5e:	6863      	ldr	r3, [r4, #4]
   b4f60:	3b01      	subs	r3, #1
   b4f62:	6063      	str	r3, [r4, #4]
   b4f64:	b95b      	cbnz	r3, b4f7e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   b4f66:	6823      	ldr	r3, [r4, #0]
   b4f68:	4620      	mov	r0, r4
   b4f6a:	689b      	ldr	r3, [r3, #8]
   b4f6c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4f6e:	68a3      	ldr	r3, [r4, #8]
   b4f70:	3b01      	subs	r3, #1
   b4f72:	60a3      	str	r3, [r4, #8]
   b4f74:	b91b      	cbnz	r3, b4f7e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   b4f76:	6823      	ldr	r3, [r4, #0]
   b4f78:	4620      	mov	r0, r4
   b4f7a:	68db      	ldr	r3, [r3, #12]
   b4f7c:	4798      	blx	r3
}
   b4f7e:	4628      	mov	r0, r5
   b4f80:	b005      	add	sp, #20
   b4f82:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4f84:	2000      	movs	r0, #0
   b4f86:	f002 f9b5 	bl	b72f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4f8a:	b120      	cbz	r0, b4f96 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   b4f8c:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4f8e:	b913      	cbnz	r3, b4f96 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   b4f90:	f002 f8d0 	bl	b7134 <spark_process>
    }
   b4f94:	e7fa      	b.n	b4f8c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4f96:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b4f98:	2b01      	cmp	r3, #1
   b4f9a:	d1dd      	bne.n	b4f58 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   b4f9c:	7b25      	ldrb	r5, [r4, #12]
   b4f9e:	e7dc      	b.n	b4f5a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000b4fa0 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b4fa0:	b510      	push	{r4, lr}
   b4fa2:	4c04      	ldr	r4, [pc, #16]	; (b4fb4 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   b4fa4:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   b4fa6:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b4faa:	2400      	movs	r4, #0
  _token = token;
   b4fac:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b4fae:	7404      	strb	r4, [r0, #16]
  _token = token;
   b4fb0:	60c3      	str	r3, [r0, #12]
}
   b4fb2:	bd10      	pop	{r4, pc}
   b4fb4:	000bc67c 	.word	0x000bc67c

000b4fb8 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   b4fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4fc0 <_ZN6UbiUDP3getEPKcS1_+0x8>
   b4fbc:	4770      	bx	lr
   b4fbe:	bf00      	nop
   b4fc0:	cda2425f 	.word	0xcda2425f

000b4fc4 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   b4fc4:	7501      	strb	r1, [r0, #20]
   b4fc6:	4770      	bx	lr

000b4fc8 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
   b4fc8:	2200      	movs	r2, #0
	  : _Node_allocator()
   b4fca:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b4fcc:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b4fd0:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b4fd4:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   b4fd6:	4770      	bx	lr

000b4fd8 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b4fd8:	b530      	push	{r4, r5, lr}
   b4fda:	4d06      	ldr	r5, [pc, #24]	; (b4ff4 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   b4fdc:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b4fde:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b4fe2:	2500      	movs	r5, #0
  _token = token;
   b4fe4:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b4fe6:	7505      	strb	r5, [r0, #20]
   b4fe8:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b4fec:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b4ff0:	6185      	str	r5, [r0, #24]
}
   b4ff2:	bd30      	pop	{r4, r5, pc}
   b4ff4:	000bc740 	.word	0x000bc740

000b4ff8 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   b4ff8:	b530      	push	{r4, r5, lr}
  if (inet_gethostbyname(_host, strlen(_host), &ip, t, NULL) == 0) {
   b4ffa:	684d      	ldr	r5, [r1, #4]
IPAddress UbiUDP::getServerIp() {
   b4ffc:	b089      	sub	sp, #36	; 0x24
   b4ffe:	4604      	mov	r4, r0
  if (inet_gethostbyname(_host, strlen(_host), &ip, t, NULL) == 0) {
   b5000:	4628      	mov	r0, r5
   b5002:	f005 f8c6 	bl	ba192 <strlen>
   b5006:	2300      	movs	r3, #0
   b5008:	b281      	uxth	r1, r0
   b500a:	9300      	str	r3, [sp, #0]
   b500c:	aa03      	add	r2, sp, #12
   b500e:	4628      	mov	r0, r5
   b5010:	f002 f80e 	bl	b7030 <inet_gethostbyname>
   b5014:	b930      	cbnz	r0, b5024 <_ZN6UbiUDP11getServerIpEv+0x2c>
    return ip;
   b5016:	a903      	add	r1, sp, #12
   b5018:	4620      	mov	r0, r4
   b501a:	f002 ff51 	bl	b7ec0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
}
   b501e:	4620      	mov	r0, r4
   b5020:	b009      	add	sp, #36	; 0x24
   b5022:	bd30      	pop	{r4, r5, pc}
    return IPAddress(169, 55, 61, 243);
   b5024:	23f3      	movs	r3, #243	; 0xf3
   b5026:	9300      	str	r3, [sp, #0]
   b5028:	2237      	movs	r2, #55	; 0x37
   b502a:	233d      	movs	r3, #61	; 0x3d
   b502c:	21a9      	movs	r1, #169	; 0xa9
   b502e:	4620      	mov	r0, r4
   b5030:	f002 ff7c 	bl	b7f2c <_ZN9IPAddressC1Ehhhh>
   b5034:	e7f3      	b.n	b501e <_ZN6UbiUDP11getServerIpEv+0x26>
	...

000b5038 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b5038:	b5f0      	push	{r4, r5, r6, r7, lr}
   b503a:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   b503c:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b503e:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   b5040:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b5042:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   b5044:	f7ff ffd8 	bl	b4ff8 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   b5048:	a802      	add	r0, sp, #8
   b504a:	f002 ff4b 	bl	b7ee4 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   b504e:	b9a0      	cbnz	r0, b507a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   b5050:	7d33      	ldrb	r3, [r6, #20]
   b5052:	b123      	cbz	r3, b505e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   b5054:	f002 fec6 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5058:	4927      	ldr	r1, [pc, #156]	; (b50f8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   b505a:	f003 fc40 	bl	b88de <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   b505e:	23f3      	movs	r3, #243	; 0xf3
   b5060:	9300      	str	r3, [sp, #0]
   b5062:	2237      	movs	r2, #55	; 0x37
   b5064:	233d      	movs	r3, #61	; 0x3d
   b5066:	21a9      	movs	r1, #169	; 0xa9
   b5068:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   b506a:	ad09      	add	r5, sp, #36	; 0x24
   b506c:	f002 ff5e 	bl	b7f2c <_ZN9IPAddressC1Ehhhh>
   b5070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5072:	ac03      	add	r4, sp, #12
   b5074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5076:	682b      	ldr	r3, [r5, #0]
   b5078:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   b507a:	2200      	movs	r2, #0
   b507c:	f240 21bd 	movw	r1, #701	; 0x2bd
   b5080:	481e      	ldr	r0, [pc, #120]	; (b50fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b5082:	f004 f807 	bl	b9094 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   b5086:	2200      	movs	r2, #0
   b5088:	f242 3134 	movw	r1, #9012	; 0x2334
   b508c:	481b      	ldr	r0, [pc, #108]	; (b50fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b508e:	f003 fdef 	bl	b8c70 <_ZN3UDP5beginEtm>
   b5092:	ad03      	add	r5, sp, #12
   b5094:	4b1a      	ldr	r3, [pc, #104]	; (b5100 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   b5096:	9308      	str	r3, [sp, #32]
   b5098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b509a:	ac09      	add	r4, sp, #36	; 0x24
   b509c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b509e:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b50a0:	4816      	ldr	r0, [pc, #88]	; (b50fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50a2:	7023      	strb	r3, [r4, #0]
   b50a4:	f242 3234 	movw	r2, #9012	; 0x2334
   b50a8:	a908      	add	r1, sp, #32
   b50aa:	f004 f80f 	bl	b90cc <_ZN3UDP11beginPacketE9IPAddresst>
   b50ae:	b958      	cbnz	r0, b50c8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   b50b0:	7d33      	ldrb	r3, [r6, #20]
   b50b2:	b123      	cbz	r3, b50be <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   b50b4:	f002 fe96 	bl	b7de4 <_Z16_fetch_usbserialv>
   b50b8:	4912      	ldr	r1, [pc, #72]	; (b5104 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   b50ba:	f003 fc10 	bl	b88de <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   b50be:	480f      	ldr	r0, [pc, #60]	; (b50fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50c0:	f003 fe22 	bl	b8d08 <_ZN3UDP4stopEv>
    return false;
   b50c4:	2000      	movs	r0, #0
   b50c6:	e014      	b.n	b50f2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   b50c8:	2f00      	cmp	r7, #0
   b50ca:	d0f1      	beq.n	b50b0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   b50cc:	4638      	mov	r0, r7
   b50ce:	f005 f860 	bl	ba192 <strlen>
   b50d2:	4639      	mov	r1, r7
   b50d4:	4602      	mov	r2, r0
   b50d6:	4809      	ldr	r0, [pc, #36]	; (b50fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50d8:	f003 fe24 	bl	b8d24 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b50dc:	2800      	cmp	r0, #0
   b50de:	d0e7      	beq.n	b50b0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   b50e0:	4806      	ldr	r0, [pc, #24]	; (b50fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50e2:	f003 fd6b 	bl	b8bbc <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b50e6:	2800      	cmp	r0, #0
   b50e8:	d0e2      	beq.n	b50b0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   b50ea:	4804      	ldr	r0, [pc, #16]	; (b50fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b50ec:	f003 fe0c 	bl	b8d08 <_ZN3UDP4stopEv>
  return true;
   b50f0:	2001      	movs	r0, #1
}
   b50f2:	b00f      	add	sp, #60	; 0x3c
   b50f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b50f6:	bf00      	nop
   b50f8:	000bc68c 	.word	0x000bc68c
   b50fc:	2003e4c4 	.word	0x2003e4c4
   b5100:	000bccb4 	.word	0x000bccb4
   b5104:	000bc718 	.word	0x000bc718

000b5108 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   b5108:	4801      	ldr	r0, [pc, #4]	; (b5110 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   b510a:	f003 bf91 	b.w	b9030 <_ZN3UDPC1Ev>
   b510e:	bf00      	nop
   b5110:	2003e4c4 	.word	0x2003e4c4

000b5114 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   b5114:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b5116:	201c      	movs	r0, #28
   b5118:	f7fe ffbd 	bl	b4096 <_Znwj>
   b511c:	4604      	mov	r4, r0
   b511e:	b148      	cbz	r0, b5134 <_Z10builderTcpv+0x20>
   b5120:	4b06      	ldr	r3, [pc, #24]	; (b513c <_Z10builderTcpv+0x28>)
   b5122:	4907      	ldr	r1, [pc, #28]	; (b5140 <_Z10builderTcpv+0x2c>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	9300      	str	r3, [sp, #0]
   b5128:	6809      	ldr	r1, [r1, #0]
   b512a:	4b06      	ldr	r3, [pc, #24]	; (b5144 <_Z10builderTcpv+0x30>)
   b512c:	f242 3234 	movw	r2, #9012	; 0x2334
   b5130:	f001 f84c 	bl	b61cc <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   b5134:	4620      	mov	r0, r4
   b5136:	b002      	add	sp, #8
   b5138:	bd10      	pop	{r4, pc}
   b513a:	bf00      	nop
   b513c:	2003e598 	.word	0x2003e598
   b5140:	2003e594 	.word	0x2003e594
   b5144:	000bc750 	.word	0x000bc750

000b5148 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   b5148:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   b514a:	2020      	movs	r0, #32
   b514c:	f7fe ffa3 	bl	b4096 <_Znwj>
   b5150:	4604      	mov	r4, r0
   b5152:	b140      	cbz	r0, b5166 <_Z11builderHttpv+0x1e>
   b5154:	4b05      	ldr	r3, [pc, #20]	; (b516c <_Z11builderHttpv+0x24>)
   b5156:	4906      	ldr	r1, [pc, #24]	; (b5170 <_Z11builderHttpv+0x28>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	9300      	str	r3, [sp, #0]
   b515c:	6809      	ldr	r1, [r1, #0]
   b515e:	4b05      	ldr	r3, [pc, #20]	; (b5174 <_Z11builderHttpv+0x2c>)
   b5160:	2250      	movs	r2, #80	; 0x50
   b5162:	f000 fa41 	bl	b55e8 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   b5166:	4620      	mov	r0, r4
   b5168:	b002      	add	sp, #8
   b516a:	bd10      	pop	{r4, pc}
   b516c:	2003e598 	.word	0x2003e598
   b5170:	2003e594 	.word	0x2003e594
   b5174:	000bc750 	.word	0x000bc750

000b5178 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   b5178:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b517a:	201c      	movs	r0, #28
   b517c:	f7fe ff8b 	bl	b4096 <_Znwj>
   b5180:	4604      	mov	r4, r0
   b5182:	b148      	cbz	r0, b5198 <_Z10builderUdpv+0x20>
   b5184:	4b06      	ldr	r3, [pc, #24]	; (b51a0 <_Z10builderUdpv+0x28>)
   b5186:	4907      	ldr	r1, [pc, #28]	; (b51a4 <_Z10builderUdpv+0x2c>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	9300      	str	r3, [sp, #0]
   b518c:	6809      	ldr	r1, [r1, #0]
   b518e:	4b06      	ldr	r3, [pc, #24]	; (b51a8 <_Z10builderUdpv+0x30>)
   b5190:	f242 3234 	movw	r2, #9012	; 0x2334
   b5194:	f7ff ff20 	bl	b4fd8 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   b5198:	4620      	mov	r0, r4
   b519a:	b002      	add	sp, #8
   b519c:	bd10      	pop	{r4, pc}
   b519e:	bf00      	nop
   b51a0:	2003e598 	.word	0x2003e598
   b51a4:	2003e594 	.word	0x2003e594
   b51a8:	000bc750 	.word	0x000bc750

000b51ac <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   b51ac:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   b51ae:	2014      	movs	r0, #20
   b51b0:	f7fe ff71 	bl	b4096 <_Znwj>
   b51b4:	4604      	mov	r4, r0
   b51b6:	b140      	cbz	r0, b51ca <_Z15builderParticlev+0x1e>
   b51b8:	4b05      	ldr	r3, [pc, #20]	; (b51d0 <_Z15builderParticlev+0x24>)
   b51ba:	4906      	ldr	r1, [pc, #24]	; (b51d4 <_Z15builderParticlev+0x28>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	9300      	str	r3, [sp, #0]
   b51c0:	2300      	movs	r3, #0
   b51c2:	6809      	ldr	r1, [r1, #0]
   b51c4:	461a      	mov	r2, r3
   b51c6:	f7ff feeb 	bl	b4fa0 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   b51ca:	4620      	mov	r0, r4
   b51cc:	b002      	add	sp, #8
   b51ce:	bd10      	pop	{r4, pc}
   b51d0:	2003e598 	.word	0x2003e598
   b51d4:	2003e594 	.word	0x2003e594

000b51d8 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b51d8:	2a01      	cmp	r2, #1
   b51da:	d102      	bne.n	b51e2 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b51dc:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b51de:	2000      	movs	r0, #0
   b51e0:	4770      	bx	lr
	  switch (__op)
   b51e2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b51e4:	bf04      	itt	eq
   b51e6:	680b      	ldreq	r3, [r1, #0]
   b51e8:	6003      	streq	r3, [r0, #0]
	      break;
   b51ea:	e7f8      	b.n	b51de <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

000b51ec <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b51ec:	6803      	ldr	r3, [r0, #0]
   b51ee:	4718      	bx	r3

000b51f0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b51f0:	b510      	push	{r4, lr}
      if (_M_manager)
   b51f2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b51f4:	4604      	mov	r4, r0
      if (_M_manager)
   b51f6:	b113      	cbz	r3, b51fe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b51f8:	2203      	movs	r2, #3
   b51fa:	4601      	mov	r1, r0
   b51fc:	4798      	blx	r3
    }
   b51fe:	4620      	mov	r0, r4
   b5200:	bd10      	pop	{r4, pc}
	...

000b5204 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   b5204:	b510      	push	{r4, lr}
   b5206:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b5208:	2200      	movs	r2, #0
	operator=(_Functor&& __f)
   b520a:	4603      	mov	r3, r0
    _Function_base() : _M_manager(nullptr) { }
   b520c:	9204      	str	r2, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   b520e:	b121      	cbz	r1, b521a <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b5210:	4a0f      	ldr	r2, [pc, #60]	; (b5250 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x4c>)
   b5212:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5214:	4a0f      	ldr	r2, [pc, #60]	; (b5254 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x50>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5216:	9102      	str	r1, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b5218:	9204      	str	r2, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b521a:	aa02      	add	r2, sp, #8
   b521c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5220:	466c      	mov	r4, sp
   b5222:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5226:	e893 0003 	ldmia.w	r3, {r0, r1}
   b522a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b522e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5232:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5236:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5238:	6898      	ldr	r0, [r3, #8]
   b523a:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b523c:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b523e:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5240:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b5242:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5244:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b5246:	4610      	mov	r0, r2
   b5248:	f7ff ffd2 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
	}
   b524c:	b006      	add	sp, #24
   b524e:	bd10      	pop	{r4, pc}
   b5250:	000b51ed 	.word	0x000b51ed
   b5254:	000b51d9 	.word	0x000b51d9

000b5258 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5258:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b525a:	6984      	ldr	r4, [r0, #24]
   b525c:	4b0a      	ldr	r3, [pc, #40]	; (b5288 <_ZN9TCPClientD1Ev+0x30>)
   b525e:	6003      	str	r3, [r0, #0]
   b5260:	4605      	mov	r5, r0
   b5262:	b17c      	cbz	r4, b5284 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5264:	6863      	ldr	r3, [r4, #4]
   b5266:	3b01      	subs	r3, #1
   b5268:	6063      	str	r3, [r4, #4]
   b526a:	b95b      	cbnz	r3, b5284 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b526c:	6823      	ldr	r3, [r4, #0]
   b526e:	4620      	mov	r0, r4
   b5270:	689b      	ldr	r3, [r3, #8]
   b5272:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5274:	68a3      	ldr	r3, [r4, #8]
   b5276:	3b01      	subs	r3, #1
   b5278:	60a3      	str	r3, [r4, #8]
   b527a:	b91b      	cbnz	r3, b5284 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b527c:	6823      	ldr	r3, [r4, #0]
   b527e:	4620      	mov	r0, r4
   b5280:	68db      	ldr	r3, [r3, #12]
   b5282:	4798      	blx	r3
   b5284:	4628      	mov	r0, r5
   b5286:	bd38      	pop	{r3, r4, r5, pc}
   b5288:	000bcba4 	.word	0x000bcba4

000b528c <_ZN9TCPClientD0Ev>:
   b528c:	b510      	push	{r4, lr}
   b528e:	4604      	mov	r4, r0
   b5290:	f7ff ffe2 	bl	b5258 <_ZN9TCPClientD1Ev>
   b5294:	4620      	mov	r0, r4
   b5296:	211c      	movs	r1, #28
   b5298:	f7fe ff01 	bl	b409e <_ZdlPvj>
   b529c:	4620      	mov	r0, r4
   b529e:	bd10      	pop	{r4, pc}

000b52a0 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   b52a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   b52a4:	f100 0108 	add.w	r1, r0, #8
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b52a8:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   b52aa:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   b52ac:	b14a      	cbz	r2, b52c2 <_ZN10UbiBuilder7builderEv+0x22>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b52ae:	7c17      	ldrb	r7, [r2, #16]
   b52b0:	7806      	ldrb	r6, [r0, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b52b2:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b52b6:	42b7      	cmp	r7, r6
   b52b8:	bf2a      	itet	cs
   b52ba:	4613      	movcs	r3, r2
   b52bc:	462a      	movcc	r2, r5
   b52be:	4622      	movcs	r2, r4
   b52c0:	e7f4      	b.n	b52ac <_ZN10UbiBuilder7builderEv+0xc>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   b52c2:	4299      	cmp	r1, r3
   b52c4:	d004      	beq.n	b52d0 <_ZN10UbiBuilder7builderEv+0x30>
	      || _M_impl._M_key_compare(__k,
   b52c6:	7800      	ldrb	r0, [r0, #0]
   b52c8:	7c1a      	ldrb	r2, [r3, #16]
   b52ca:	4290      	cmp	r0, r2
   b52cc:	bf38      	it	cc
   b52ce:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b52d0:	69da      	ldr	r2, [r3, #28]
   b52d2:	b90a      	cbnz	r2, b52d8 <_ZN10UbiBuilder7builderEv+0x38>
	__throw_bad_function_call();
   b52d4:	f004 f8d5 	bl	b9482 <_ZSt25__throw_bad_function_callv>
}
   b52d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b52dc:	6a1a      	ldr	r2, [r3, #32]
   b52de:	f103 0014 	add.w	r0, r3, #20
   b52e2:	4710      	bx	r2

000b52e4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b52e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b52e6:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b52e8:	4616      	mov	r6, r2
   b52ea:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b52ec:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   b52ee:	2201      	movs	r2, #1
      while (__x != 0)
   b52f0:	b163      	cbz	r3, b530c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x28>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b52f2:	7c1d      	ldrb	r5, [r3, #16]
   b52f4:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b52f6:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b52fa:	4295      	cmp	r5, r2
   b52fc:	bf88      	it	hi
   b52fe:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5300:	461d      	mov	r5, r3
   b5302:	bf96      	itet	ls
   b5304:	2200      	movls	r2, #0
   b5306:	463b      	movhi	r3, r7
   b5308:	4603      	movls	r3, r0
   b530a:	e7f1      	b.n	b52f0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   b530c:	b192      	cbz	r2, b5334 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x50>
	  if (__j == begin())
   b530e:	68ca      	ldr	r2, [r1, #12]
   b5310:	42aa      	cmp	r2, r5
   b5312:	d103      	bne.n	b531c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b5314:	e9c4 3500 	strd	r3, r5, [r4]
    }
   b5318:	4620      	mov	r0, r4
   b531a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b531c:	4628      	mov	r0, r5
   b531e:	f004 f853 	bl	b93c8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b5322:	7833      	ldrb	r3, [r6, #0]
   b5324:	7c02      	ldrb	r2, [r0, #16]
   b5326:	429a      	cmp	r2, r3
   b5328:	f04f 0300 	mov.w	r3, #0
   b532c:	d3f2      	bcc.n	b5314 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b532e:	e9c4 0300 	strd	r0, r3, [r4]
   b5332:	e7f1      	b.n	b5318 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
   b5334:	4628      	mov	r0, r5
   b5336:	e7f4      	b.n	b5322 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3e>

000b5338 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   b5338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
      { return &this->_M_impl._M_header; }
   b533c:	f100 0904 	add.w	r9, r0, #4
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5340:	6885      	ldr	r5, [r0, #8]
   b5342:	4606      	mov	r6, r0
   b5344:	460f      	mov	r7, r1
      { return &this->_M_impl._M_header; }
   b5346:	464c      	mov	r4, r9
      while (__x != 0)
   b5348:	b14d      	cbz	r5, b535e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x26>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b534a:	7c28      	ldrb	r0, [r5, #16]
   b534c:	7839      	ldrb	r1, [r7, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b534e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5352:	4288      	cmp	r0, r1
   b5354:	bf2a      	itet	cs
   b5356:	462c      	movcs	r4, r5
   b5358:	4615      	movcc	r5, r2
   b535a:	461d      	movcs	r5, r3
   b535c:	e7f4      	b.n	b5348 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b535e:	45a1      	cmp	r9, r4
   b5360:	d003      	beq.n	b536a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x32>
   b5362:	783a      	ldrb	r2, [r7, #0]
   b5364:	7c23      	ldrb	r3, [r4, #16]
   b5366:	429a      	cmp	r2, r3
   b5368:	d22f      	bcs.n	b53ca <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x92>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b536a:	2024      	movs	r0, #36	; 0x24
   b536c:	f7fe fe93 	bl	b4096 <_Znwj>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5370:	f897 a000 	ldrb.w	sl, [r7]
   b5374:	f880 a010 	strb.w	sl, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   b5378:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   b537a:	45a1      	cmp	r9, r4
   b537c:	4680      	mov	r8, r0
   b537e:	61c3      	str	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5380:	f100 0210 	add.w	r2, r0, #16
   b5384:	d126      	bne.n	b53d4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x9c>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b5386:	6973      	ldr	r3, [r6, #20]
   b5388:	b11b      	cbz	r3, b5392 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x5a>
   b538a:	6937      	ldr	r7, [r6, #16]
   b538c:	7c3b      	ldrb	r3, [r7, #16]
   b538e:	4553      	cmp	r3, sl
   b5390:	d309      	bcc.n	b53a6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6e>
	    return _M_get_insert_unique_pos(__k);
   b5392:	4631      	mov	r1, r6
   b5394:	a802      	add	r0, sp, #8
   b5396:	f7ff ffa5 	bl	b52e4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b539a:	e9dd 4702 	ldrd	r4, r7, [sp, #8]
	    if (__res.second)
   b539e:	2f00      	cmp	r7, #0
   b53a0:	d052      	beq.n	b5448 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   b53a2:	2c00      	cmp	r4, #0
   b53a4:	d14e      	bne.n	b5444 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b53a6:	45b9      	cmp	r9, r7
   b53a8:	d04c      	beq.n	b5444 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
			    || _M_impl._M_key_compare(_S_key(__z),
   b53aa:	f898 0010 	ldrb.w	r0, [r8, #16]
   b53ae:	7c3b      	ldrb	r3, [r7, #16]
   b53b0:	4298      	cmp	r0, r3
   b53b2:	bf2c      	ite	cs
   b53b4:	2000      	movcs	r0, #0
   b53b6:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b53b8:	464b      	mov	r3, r9
   b53ba:	463a      	mov	r2, r7
   b53bc:	4641      	mov	r1, r8
   b53be:	f004 f805 	bl	b93cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b53c2:	6973      	ldr	r3, [r6, #20]
   b53c4:	3301      	adds	r3, #1
   b53c6:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b53c8:	4644      	mov	r4, r8
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   b53ca:	f104 0014 	add.w	r0, r4, #20
   b53ce:	b004      	add	sp, #16
   b53d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return __x < __y; }
   b53d4:	7c23      	ldrb	r3, [r4, #16]
   b53d6:	9201      	str	r2, [sp, #4]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b53d8:	4553      	cmp	r3, sl
   b53da:	d918      	bls.n	b540e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b53dc:	68f3      	ldr	r3, [r6, #12]
   b53de:	429c      	cmp	r4, r3
   b53e0:	d009      	beq.n	b53f6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
	_M_node = _Rb_tree_decrement(_M_node);
   b53e2:	4620      	mov	r0, r4
   b53e4:	f003 fff0 	bl	b93c8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b53e8:	7c03      	ldrb	r3, [r0, #16]
   b53ea:	9a01      	ldr	r2, [sp, #4]
   b53ec:	4553      	cmp	r3, sl
   b53ee:	d205      	bcs.n	b53fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc4>
      { return static_cast<_Link_type>(__x->_M_right); }
   b53f0:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b53f2:	b953      	cbnz	r3, b540a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd2>
   b53f4:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b53f6:	4627      	mov	r7, r4
   b53f8:	461c      	mov	r4, r3
   b53fa:	e7d0      	b.n	b539e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b53fc:	4631      	mov	r1, r6
   b53fe:	a802      	add	r0, sp, #8
   b5400:	f7ff ff70 	bl	b52e4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b5404:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   b5408:	e7f5      	b.n	b53f6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
   b540a:	4623      	mov	r3, r4
   b540c:	e7f3      	b.n	b53f6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b540e:	d21b      	bcs.n	b5448 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
	  if (__pos._M_node == _M_rightmost())
   b5410:	6937      	ldr	r7, [r6, #16]
   b5412:	42bc      	cmp	r4, r7
   b5414:	d00b      	beq.n	b542e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
	_M_node = _Rb_tree_increment(_M_node);
   b5416:	4620      	mov	r0, r4
   b5418:	f003 ffd4 	bl	b93c4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b541c:	7c03      	ldrb	r3, [r0, #16]
   b541e:	9a01      	ldr	r2, [sp, #4]
   b5420:	4553      	cmp	r3, sl
	_M_node = _Rb_tree_increment(_M_node);
   b5422:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5424:	d905      	bls.n	b5432 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5426:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5428:	b953      	cbnz	r3, b5440 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x108>
   b542a:	4627      	mov	r7, r4
   b542c:	461d      	mov	r5, r3
   b542e:	462c      	mov	r4, r5
   b5430:	e7b5      	b.n	b539e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b5432:	4631      	mov	r1, r6
   b5434:	a802      	add	r0, sp, #8
   b5436:	f7ff ff55 	bl	b52e4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b543a:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
   b543e:	e7f6      	b.n	b542e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
   b5440:	4607      	mov	r7, r0
   b5442:	e7f4      	b.n	b542e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5444:	2001      	movs	r0, #1
   b5446:	e7b7      	b.n	b53b8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x80>
    class function<_Res(_ArgTypes...)>
   b5448:	f108 0014 	add.w	r0, r8, #20
   b544c:	f7ff fed0 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5450:	4640      	mov	r0, r8
   b5452:	2124      	movs	r1, #36	; 0x24
   b5454:	f7fe fe23 	bl	b409e <_ZdlPvj>
   b5458:	46a0      	mov	r8, r4
   b545a:	e7b5      	b.n	b53c8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x90>

000b545c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   b545c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5460:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   b5462:	2600      	movs	r6, #0
   b5464:	4617      	mov	r7, r2
	  : _Node_allocator()
   b5466:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   b546a:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   b546e:	e9c0 2605 	strd	r2, r6, [r0, #20]
   b5472:	4604      	mov	r4, r0
   b5474:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   b5476:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   b5478:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   b547a:	f10d 0107 	add.w	r1, sp, #7
   b547e:	2301      	movs	r3, #1
   b5480:	4628      	mov	r0, r5
   b5482:	f88d 3007 	strb.w	r3, [sp, #7]
   b5486:	f7ff ff57 	bl	b5338 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b548a:	4916      	ldr	r1, [pc, #88]	; (b54e4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   b548c:	f7ff feba 	bl	b5204 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   b5490:	f10d 0107 	add.w	r1, sp, #7
   b5494:	4628      	mov	r0, r5
   b5496:	f88d 6007 	strb.w	r6, [sp, #7]
   b549a:	f7ff ff4d 	bl	b5338 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b549e:	4912      	ldr	r1, [pc, #72]	; (b54e8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   b54a0:	f7ff feb0 	bl	b5204 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   b54a4:	2302      	movs	r3, #2
   b54a6:	f10d 0107 	add.w	r1, sp, #7
   b54aa:	4628      	mov	r0, r5
   b54ac:	f88d 3007 	strb.w	r3, [sp, #7]
   b54b0:	f7ff ff42 	bl	b5338 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b54b4:	490d      	ldr	r1, [pc, #52]	; (b54ec <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   b54b6:	f7ff fea5 	bl	b5204 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   b54ba:	2303      	movs	r3, #3
   b54bc:	f10d 0107 	add.w	r1, sp, #7
   b54c0:	4628      	mov	r0, r5
   b54c2:	f88d 3007 	strb.w	r3, [sp, #7]
   b54c6:	f7ff ff37 	bl	b5338 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b54ca:	4909      	ldr	r1, [pc, #36]	; (b54f0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   b54cc:	f7ff fe9a 	bl	b5204 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   b54d0:	4b08      	ldr	r3, [pc, #32]	; (b54f4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   b54d2:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   b54d6:	4b08      	ldr	r3, [pc, #32]	; (b54f8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   b54d8:	4620      	mov	r0, r4
  _token = token;
   b54da:	601f      	str	r7, [r3, #0]
}
   b54dc:	b002      	add	sp, #8
   b54de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b54e2:	bf00      	nop
   b54e4:	000b5115 	.word	0x000b5115
   b54e8:	000b5149 	.word	0x000b5149
   b54ec:	000b5179 	.word	0x000b5179
   b54f0:	000b51ad 	.word	0x000b51ad
   b54f4:	2003e594 	.word	0x2003e594
   b54f8:	2003e598 	.word	0x2003e598

000b54fc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   b54fc:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   b54fe:	4805      	ldr	r0, [pc, #20]	; (b5514 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   b5500:	f002 fafe 	bl	b7b00 <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   b5504:	4804      	ldr	r0, [pc, #16]	; (b5518 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   b5506:	f002 fafb 	bl	b7b00 <_ZN9TCPClientC1Ev>
   b550a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b550e:	4803      	ldr	r0, [pc, #12]	; (b551c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   b5510:	f003 bd8e 	b.w	b9030 <_ZN3UDPC1Ev>
   b5514:	2003e578 	.word	0x2003e578
   b5518:	2003e510 	.word	0x2003e510
   b551c:	2003e52c 	.word	0x2003e52c

000b5520 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   b5520:	7501      	strb	r1, [r0, #20]
   b5522:	4770      	bx	lr

000b5524 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   b5524:	2200      	movs	r2, #0
	  : _Node_allocator()
   b5526:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b5528:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b552c:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b5530:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b5532:	4770      	bx	lr

000b5534 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   b5534:	b570      	push	{r4, r5, r6, lr}
   b5536:	4606      	mov	r6, r0
   b5538:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   b553c:	2014      	movs	r0, #20
   b553e:	f001 ff0f 	bl	b7360 <malloc>
   b5542:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   b5544:	2014      	movs	r0, #20
   b5546:	f001 ff0b 	bl	b7360 <malloc>
   b554a:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   b554c:	4630      	mov	r0, r6
   b554e:	f004 fe20 	bl	ba192 <strlen>
    for (int i = 0; i < len - 2; i++) {
   b5552:	4632      	mov	r2, r6
   b5554:	2300      	movs	r3, #0
   b5556:	3802      	subs	r0, #2
   b5558:	4298      	cmp	r0, r3
   b555a:	dd14      	ble.n	b5586 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   b555c:	f812 1b01 	ldrb.w	r1, [r2], #1
   b5560:	290d      	cmp	r1, #13
   b5562:	d13a      	bne.n	b55da <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5564:	7811      	ldrb	r1, [r2, #0]
   b5566:	290a      	cmp	r1, #10
   b5568:	d137      	bne.n	b55da <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b556a:	7851      	ldrb	r1, [r2, #1]
   b556c:	290d      	cmp	r1, #13
   b556e:	d134      	bne.n	b55da <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5570:	7891      	ldrb	r1, [r2, #2]
   b5572:	290a      	cmp	r1, #10
   b5574:	d131      	bne.n	b55da <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   b5576:	3304      	adds	r3, #4
   b5578:	18f1      	adds	r1, r6, r3
   b557a:	2214      	movs	r2, #20
   b557c:	4628      	mov	r0, r5
   b557e:	f004 fe24 	bl	ba1ca <strncpy>
        parsed[20] = '\0';
   b5582:	2300      	movs	r3, #0
   b5584:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   b5586:	210a      	movs	r1, #10
   b5588:	4628      	mov	r0, r5
   b558a:	f004 fdc5 	bl	ba118 <strchr>
    if (pch == NULL) {
   b558e:	4606      	mov	r6, r0
   b5590:	b328      	cbz	r0, b55de <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   b5592:	210a      	movs	r1, #10
   b5594:	3001      	adds	r0, #1
   b5596:	f004 fdbf 	bl	ba118 <strchr>
    if (pch2 == NULL) {
   b559a:	b300      	cbz	r0, b55de <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   b559c:	4631      	mov	r1, r6
   b559e:	4620      	mov	r0, r4
   b55a0:	f004 fdd1 	bl	ba146 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   b55a4:	4620      	mov	r0, r4
   b55a6:	f004 fdf4 	bl	ba192 <strlen>
   b55aa:	4420      	add	r0, r4
   b55ac:	2300      	movs	r3, #0
   b55ae:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   b55b2:	4620      	mov	r0, r4
   b55b4:	f004 fd64 	bl	ba080 <atof>
   b55b8:	ec51 0b10 	vmov	r0, r1, d0
   b55bc:	f004 fcec 	bl	b9f98 <__aeabi_d2f>
   b55c0:	ee08 0a10 	vmov	s16, r0
    free(dst);
   b55c4:	4620      	mov	r0, r4
   b55c6:	f001 fed3 	bl	b7370 <free>
    free(parsed);
   b55ca:	4628      	mov	r0, r5
   b55cc:	f001 fed0 	bl	b7370 <free>
}
   b55d0:	eeb0 0a48 	vmov.f32	s0, s16
   b55d4:	ecbd 8b02 	vpop	{d8}
   b55d8:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   b55da:	3301      	adds	r3, #1
   b55dc:	e7bc      	b.n	b5558 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   b55de:	ed9f 8a01 	vldr	s16, [pc, #4]	; b55e4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   b55e2:	e7f5      	b.n	b55d0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   b55e4:	cda2425f 	.word	0xcda2425f

000b55e8 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b55e8:	b530      	push	{r4, r5, lr}
   b55ea:	4d07      	ldr	r5, [pc, #28]	; (b5608 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   b55ec:	6005      	str	r5, [r0, #0]
   b55ee:	2500      	movs	r5, #0
  _user_agent = user_agent;
   b55f0:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b55f4:	7505      	strb	r5, [r0, #20]
  _token = token;
   b55f6:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b55f8:	f241 3588 	movw	r5, #5000	; 0x1388
   b55fc:	6185      	str	r5, [r0, #24]
   b55fe:	2505      	movs	r5, #5
  _port = port;
   b5600:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5604:	7705      	strb	r5, [r0, #28]
}
   b5606:	bd30      	pop	{r4, r5, pc}
   b5608:	000bc96c 	.word	0x000bc96c

000b560c <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   b560c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5610:	f8df 808c 	ldr.w	r8, [pc, #140]	; b56a0 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   b5614:	f8df a08c 	ldr.w	sl, [pc, #140]	; b56a4 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   b5618:	f8df b08c 	ldr.w	fp, [pc, #140]	; b56a8 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   b561c:	4604      	mov	r4, r0
   b561e:	460d      	mov	r5, r1
   b5620:	4617      	mov	r7, r2
   b5622:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5624:	4640      	mov	r0, r8
   b5626:	fa5f f986 	uxtb.w	r9, r6
   b562a:	f002 f8e1 	bl	b77f0 <_ZN9TCPClient9connectedEv>
   b562e:	bb88      	cbnz	r0, b5694 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   b5630:	7f23      	ldrb	r3, [r4, #28]
   b5632:	454b      	cmp	r3, r9
   b5634:	d92e      	bls.n	b5694 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   b5636:	7d23      	ldrb	r3, [r4, #20]
   b5638:	b1cb      	cbz	r3, b566e <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   b563a:	f002 fbd3 	bl	b7de4 <_Z16_fetch_usbserialv>
   b563e:	4651      	mov	r1, sl
   b5640:	f003 f93a 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(host);
   b5644:	f002 fbce 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5648:	4629      	mov	r1, r5
   b564a:	f003 f935 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b564e:	f002 fbc9 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5652:	4659      	mov	r1, fp
   b5654:	f003 f930 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b5658:	f002 fbc4 	bl	b7de4 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b565c:	220a      	movs	r2, #10
   b565e:	4649      	mov	r1, r9
   b5660:	9001      	str	r0, [sp, #4]
   b5662:	f003 f946 	bl	b88f2 <_ZN5Print11printNumberEmh>
        n += println();
   b5666:	9b01      	ldr	r3, [sp, #4]
   b5668:	4618      	mov	r0, r3
   b566a:	f003 f92c 	bl	b88c6 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   b566e:	2300      	movs	r3, #0
   b5670:	b2ba      	uxth	r2, r7
   b5672:	4629      	mov	r1, r5
   b5674:	4640      	mov	r0, r8
   b5676:	f002 f83d 	bl	b76f4 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   b567a:	7d23      	ldrb	r3, [r4, #20]
   b567c:	b123      	cbz	r3, b5688 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   b567e:	f002 fbb1 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5682:	4906      	ldr	r1, [pc, #24]	; (b569c <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   b5684:	f003 f92b 	bl	b88de <_ZN5Print7printlnEPKc>
    delay(1000);
   b5688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b568c:	f003 f818 	bl	b86c0 <delay>
   b5690:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5692:	e7c7      	b.n	b5624 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   b5694:	b003      	add	sp, #12
   b5696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b569a:	bf00      	nop
   b569c:	000bc78e 	.word	0x000bc78e
   b56a0:	2003e59c 	.word	0x2003e59c
   b56a4:	000bc764 	.word	0x000bc764
   b56a8:	000bc77a 	.word	0x000bc77a

000b56ac <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   b56ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56ae:	4605      	mov	r5, r0
   b56b0:	460c      	mov	r4, r1
    response[i] = '\0';
   b56b2:	f240 22bd 	movw	r2, #701	; 0x2bd
   b56b6:	2100      	movs	r1, #0
   b56b8:	4620      	mov	r0, r4
   b56ba:	f004 fcf6 	bl	ba0aa <memset>
  if (_debug) {
   b56be:	7d2b      	ldrb	r3, [r5, #20]
   b56c0:	b14b      	cbz	r3, b56d6 <_ZN7UbiHTTP16readServerAnswerEPc+0x2a>
    Serial.println("----------");
   b56c2:	f002 fb8f 	bl	b7de4 <_Z16_fetch_usbserialv>
   b56c6:	4914      	ldr	r1, [pc, #80]	; (b5718 <_ZN7UbiHTTP16readServerAnswerEPc+0x6c>)
   b56c8:	f003 f909 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b56cc:	f002 fb8a 	bl	b7de4 <_Z16_fetch_usbserialv>
   b56d0:	4912      	ldr	r1, [pc, #72]	; (b571c <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   b56d2:	f003 f904 	bl	b88de <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   b56d6:	4e12      	ldr	r6, [pc, #72]	; (b5720 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   b56d8:	f204 27bb 	addw	r7, r4, #699	; 0x2bb
   b56dc:	4630      	mov	r0, r6
   b56de:	f002 f965 	bl	b79ac <_ZN9TCPClient9availableEv>
   b56e2:	b170      	cbz	r0, b5702 <_ZN7UbiHTTP16readServerAnswerEPc+0x56>
    response[j] = (char)_client_http_ubi.read();
   b56e4:	4630      	mov	r0, r6
   b56e6:	f001 ff6f 	bl	b75c8 <_ZN9TCPClient4readEv>
   b56ea:	7020      	strb	r0, [r4, #0]
    if (_debug) {
   b56ec:	7d2b      	ldrb	r3, [r5, #20]
   b56ee:	b12b      	cbz	r3, b56fc <_ZN7UbiHTTP16readServerAnswerEPc+0x50>
      Serial.write(response[j]);
   b56f0:	f002 fb78 	bl	b7de4 <_Z16_fetch_usbserialv>
   b56f4:	6803      	ldr	r3, [r0, #0]
   b56f6:	7821      	ldrb	r1, [r4, #0]
   b56f8:	689b      	ldr	r3, [r3, #8]
   b56fa:	4798      	blx	r3
    if (j >= MAX_BUFFER_SIZE - 1) {
   b56fc:	3401      	adds	r4, #1
   b56fe:	42a7      	cmp	r7, r4
   b5700:	d1ec      	bne.n	b56dc <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
  if (_debug) {
   b5702:	7d2b      	ldrb	r3, [r5, #20]
   b5704:	b133      	cbz	r3, b5714 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
    Serial.println("\n----------");
   b5706:	f002 fb6d 	bl	b7de4 <_Z16_fetch_usbserialv>
}
   b570a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("\n----------");
   b570e:	4905      	ldr	r1, [pc, #20]	; (b5724 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   b5710:	f003 b8e5 	b.w	b88de <_ZN5Print7printlnEPKc>
}
   b5714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5716:	bf00      	nop
   b5718:	000bc7b3 	.word	0x000bc7b3
   b571c:	000bc79f 	.word	0x000bc79f
   b5720:	2003e59c 	.word	0x2003e59c
   b5724:	000bc7b2 	.word	0x000bc7b2

000b5728 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   b5728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b572a:	4f0e      	ldr	r7, [pc, #56]	; (b5764 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   b572c:	4604      	mov	r4, r0
  int timeout = 0;
   b572e:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b5730:	4638      	mov	r0, r7
   b5732:	f002 f93b 	bl	b79ac <_ZN9TCPClient9availableEv>
   b5736:	4605      	mov	r5, r0
   b5738:	b990      	cbnz	r0, b5760 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   b573a:	69a3      	ldr	r3, [r4, #24]
   b573c:	42b3      	cmp	r3, r6
   b573e:	dd0f      	ble.n	b5760 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   b5740:	2001      	movs	r0, #1
   b5742:	f002 ffbd 	bl	b86c0 <delay>
    if (timeout > _timeout - 1) {
   b5746:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b5748:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b574a:	42b3      	cmp	r3, r6
   b574c:	dcf0      	bgt.n	b5730 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
   b574e:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b5750:	b128      	cbz	r0, b575e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b5752:	f002 fb47 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5756:	4904      	ldr	r1, [pc, #16]	; (b5768 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   b5758:	f003 f8c1 	bl	b88de <_ZN5Print7printlnEPKc>
   b575c:	4628      	mov	r0, r5
}
   b575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b5760:	2001      	movs	r0, #1
   b5762:	e7fc      	b.n	b575e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   b5764:	2003e59c 	.word	0x2003e59c
   b5768:	000bc7be 	.word	0x000bc7be

000b576c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b576e:	460f      	mov	r7, r1
  reconnect(_host, _port);
   b5770:	6902      	ldr	r2, [r0, #16]
   b5772:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5774:	4604      	mov	r4, r0
   b5776:	461d      	mov	r5, r3
  reconnect(_host, _port);
   b5778:	f7ff ff48 	bl	b560c <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   b577c:	4878      	ldr	r0, [pc, #480]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b577e:	f002 f837 	bl	b77f0 <_ZN9TCPClient9connectedEv>
   b5782:	4606      	mov	r6, r0
   b5784:	2800      	cmp	r0, #0
   b5786:	f000 80e1 	beq.w	b594c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   b578a:	4976      	ldr	r1, [pc, #472]	; (b5964 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b578c:	4874      	ldr	r0, [pc, #464]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b578e:	f003 f893 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b5792:	4639      	mov	r1, r7
   b5794:	4872      	ldr	r0, [pc, #456]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5796:	f003 f88f 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   b579a:	4973      	ldr	r1, [pc, #460]	; (b5968 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b579c:	4870      	ldr	r0, [pc, #448]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b579e:	f003 f88b 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   b57a2:	4972      	ldr	r1, [pc, #456]	; (b596c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b57a4:	486e      	ldr	r0, [pc, #440]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57a6:	f003 f887 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b57aa:	6861      	ldr	r1, [r4, #4]
   b57ac:	486c      	ldr	r0, [pc, #432]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57ae:	f003 f883 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b57b2:	496f      	ldr	r1, [pc, #444]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b57b4:	486a      	ldr	r0, [pc, #424]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57b6:	f003 f87f 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   b57ba:	496e      	ldr	r1, [pc, #440]	; (b5974 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b57bc:	4868      	ldr	r0, [pc, #416]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57be:	f003 f87b 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b57c2:	68a1      	ldr	r1, [r4, #8]
   b57c4:	4866      	ldr	r0, [pc, #408]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57c6:	f003 f877 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b57ca:	4969      	ldr	r1, [pc, #420]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b57cc:	4864      	ldr	r0, [pc, #400]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57ce:	f003 f873 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   b57d2:	4969      	ldr	r1, [pc, #420]	; (b5978 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b57d4:	4862      	ldr	r0, [pc, #392]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57d6:	f003 f86f 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b57da:	68e1      	ldr	r1, [r4, #12]
   b57dc:	4860      	ldr	r0, [pc, #384]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57de:	f003 f86b 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b57e2:	4963      	ldr	r1, [pc, #396]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b57e4:	485e      	ldr	r0, [pc, #376]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57e6:	f003 f867 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   b57ea:	4964      	ldr	r1, [pc, #400]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b57ec:	485c      	ldr	r0, [pc, #368]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57ee:	f003 f863 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   b57f2:	4963      	ldr	r1, [pc, #396]	; (b5980 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b57f4:	485a      	ldr	r0, [pc, #360]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b57f6:	f003 f85f 	bl	b88b8 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   b57fa:	4628      	mov	r0, r5
   b57fc:	f004 fcc9 	bl	ba192 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   b5800:	4960      	ldr	r1, [pc, #384]	; (b5984 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   b5802:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   b5804:	4856      	ldr	r0, [pc, #344]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5806:	f003 f857 	bl	b88b8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b580a:	220a      	movs	r2, #10
   b580c:	4631      	mov	r1, r6
   b580e:	4854      	ldr	r0, [pc, #336]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5810:	f003 f86f 	bl	b88f2 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   b5814:	495c      	ldr	r1, [pc, #368]	; (b5988 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5816:	4852      	ldr	r0, [pc, #328]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5818:	f003 f84e 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   b581c:	4629      	mov	r1, r5
   b581e:	4850      	ldr	r0, [pc, #320]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5820:	f003 f84a 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5824:	4952      	ldr	r1, [pc, #328]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5826:	484e      	ldr	r0, [pc, #312]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5828:	f003 f846 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   b582c:	484c      	ldr	r0, [pc, #304]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b582e:	f001 fee5 	bl	b75fc <_ZN9TCPClient5flushEv>
    if (_debug) {
   b5832:	7d23      	ldrb	r3, [r4, #20]
   b5834:	2b00      	cmp	r3, #0
   b5836:	d069      	beq.n	b590c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   b5838:	f002 fad4 	bl	b7de4 <_Z16_fetch_usbserialv>
   b583c:	4953      	ldr	r1, [pc, #332]	; (b598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   b583e:	f003 f84e 	bl	b88de <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   b5842:	f002 facf 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5846:	4947      	ldr	r1, [pc, #284]	; (b5964 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b5848:	f003 f836 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b584c:	f002 faca 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5850:	4639      	mov	r1, r7
   b5852:	f003 f831 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5856:	f002 fac5 	bl	b7de4 <_Z16_fetch_usbserialv>
   b585a:	4943      	ldr	r1, [pc, #268]	; (b5968 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b585c:	f003 f82c 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5860:	f002 fac0 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5864:	4941      	ldr	r1, [pc, #260]	; (b596c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5866:	f003 f827 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b586a:	f002 fabb 	bl	b7de4 <_Z16_fetch_usbserialv>
   b586e:	6861      	ldr	r1, [r4, #4]
   b5870:	f003 f822 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5874:	f002 fab6 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5878:	493d      	ldr	r1, [pc, #244]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b587a:	f003 f81d 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b587e:	f002 fab1 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5882:	493c      	ldr	r1, [pc, #240]	; (b5974 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b5884:	f003 f818 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5888:	f002 faac 	bl	b7de4 <_Z16_fetch_usbserialv>
   b588c:	68a1      	ldr	r1, [r4, #8]
   b588e:	f003 f813 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5892:	f002 faa7 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5896:	4936      	ldr	r1, [pc, #216]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5898:	f003 f80e 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b589c:	f002 faa2 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58a0:	4935      	ldr	r1, [pc, #212]	; (b5978 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b58a2:	f003 f809 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b58a6:	f002 fa9d 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58aa:	68e1      	ldr	r1, [r4, #12]
   b58ac:	f003 f804 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b58b0:	f002 fa98 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58b4:	492e      	ldr	r1, [pc, #184]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b58b6:	f002 ffff 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   b58ba:	f002 fa93 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58be:	492f      	ldr	r1, [pc, #188]	; (b597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b58c0:	f002 fffa 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   b58c4:	f002 fa8e 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58c8:	492d      	ldr	r1, [pc, #180]	; (b5980 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b58ca:	f002 fff5 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   b58ce:	f002 fa89 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58d2:	492c      	ldr	r1, [pc, #176]	; (b5984 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   b58d4:	f002 fff0 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   b58d8:	f002 fa84 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58dc:	220a      	movs	r2, #10
   b58de:	4631      	mov	r1, r6
   b58e0:	f003 f807 	bl	b88f2 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   b58e4:	f002 fa7e 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58e8:	4927      	ldr	r1, [pc, #156]	; (b5988 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b58ea:	f002 ffe5 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(payload);
   b58ee:	f002 fa79 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58f2:	4629      	mov	r1, r5
   b58f4:	f002 ffe0 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b58f8:	f002 fa74 	bl	b7de4 <_Z16_fetch_usbserialv>
   b58fc:	491c      	ldr	r1, [pc, #112]	; (b5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b58fe:	f002 ffdb 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   b5902:	f002 fa6f 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5906:	4922      	ldr	r1, [pc, #136]	; (b5990 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   b5908:	f002 ffe9 	bl	b88de <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   b590c:	4620      	mov	r0, r4
   b590e:	f7ff ff0b 	bl	b5728 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   b5912:	7d23      	ldrb	r3, [r4, #20]
   b5914:	b92b      	cbnz	r3, b5922 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   b5916:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   b5918:	4811      	ldr	r0, [pc, #68]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b591a:	f002 f8a1 	bl	b7a60 <_ZN9TCPClient4stopEv>
}
   b591e:	4620      	mov	r0, r4
   b5920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   b5922:	f002 fa5f 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5926:	491b      	ldr	r1, [pc, #108]	; (b5994 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   b5928:	4d0d      	ldr	r5, [pc, #52]	; (b5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   b592a:	f002 ffd8 	bl	b88de <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   b592e:	4628      	mov	r0, r5
   b5930:	f002 f83c 	bl	b79ac <_ZN9TCPClient9availableEv>
   b5934:	2800      	cmp	r0, #0
   b5936:	d0ee      	beq.n	b5916 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   b5938:	4628      	mov	r0, r5
   b593a:	f001 fe45 	bl	b75c8 <_ZN9TCPClient4readEv>
   b593e:	4604      	mov	r4, r0
        Serial.print(c);
   b5940:	f002 fa50 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5944:	b2e1      	uxtb	r1, r4
   b5946:	f002 ffbb 	bl	b88c0 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   b594a:	e7f0      	b.n	b592e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   b594c:	7d24      	ldrb	r4, [r4, #20]
   b594e:	2c00      	cmp	r4, #0
   b5950:	d0e2      	beq.n	b5918 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   b5952:	f002 fa47 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5956:	4910      	ldr	r1, [pc, #64]	; (b5998 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   b5958:	f002 ffc1 	bl	b88de <_ZN5Print7printlnEPKc>
  bool result = false;
   b595c:	4634      	mov	r4, r6
   b595e:	e7db      	b.n	b5918 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   b5960:	2003e59c 	.word	0x2003e59c
   b5964:	000bc7f1 	.word	0x000bc7f1
   b5968:	000bc809 	.word	0x000bc809
   b596c:	000bc815 	.word	0x000bc815
   b5970:	000bc939 	.word	0x000bc939
   b5974:	000bc81c 	.word	0x000bc81c
   b5978:	000bc829 	.word	0x000bc829
   b597c:	000bc838 	.word	0x000bc838
   b5980:	000bc84c 	.word	0x000bc84c
   b5984:	000bc86d 	.word	0x000bc86d
   b5988:	000bc937 	.word	0x000bc937
   b598c:	000bc87e 	.word	0x000bc87e
   b5990:	000bc89a 	.word	0x000bc89a
   b5994:	000bc8b8 	.word	0x000bc8b8
   b5998:	000bc8d4 	.word	0x000bc8d4

000b599c <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b599c:	b570      	push	{r4, r5, r6, lr}
   b599e:	ed2d 8b02 	vpush	{d8}
   b59a2:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b59a4:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b59a6:	460e      	mov	r6, r1
   b59a8:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b59aa:	6841      	ldr	r1, [r0, #4]
   b59ac:	4866      	ldr	r0, [pc, #408]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59ae:	2250      	movs	r2, #80	; 0x50
   b59b0:	f001 fea0 	bl	b76f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   b59b4:	4620      	mov	r0, r4
   b59b6:	6861      	ldr	r1, [r4, #4]
   b59b8:	2250      	movs	r2, #80	; 0x50
   b59ba:	f7ff fe27 	bl	b560c <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   b59be:	4862      	ldr	r0, [pc, #392]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59c0:	f001 ff16 	bl	b77f0 <_ZN9TCPClient9connectedEv>
   b59c4:	2800      	cmp	r0, #0
   b59c6:	f000 80b6 	beq.w	b5b36 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   b59ca:	4960      	ldr	r1, [pc, #384]	; (b5b4c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b59cc:	485e      	ldr	r0, [pc, #376]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59ce:	f002 ff73 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b59d2:	4631      	mov	r1, r6
   b59d4:	485c      	ldr	r0, [pc, #368]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59d6:	f002 ff6f 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   b59da:	495d      	ldr	r1, [pc, #372]	; (b5b50 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b59dc:	485a      	ldr	r0, [pc, #360]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59de:	f002 ff6b 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   b59e2:	4629      	mov	r1, r5
   b59e4:	4858      	ldr	r0, [pc, #352]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59e6:	f002 ff67 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   b59ea:	495a      	ldr	r1, [pc, #360]	; (b5b54 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b59ec:	4856      	ldr	r0, [pc, #344]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59ee:	f002 ff63 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   b59f2:	4959      	ldr	r1, [pc, #356]	; (b5b58 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b59f4:	4854      	ldr	r0, [pc, #336]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59f6:	f002 ff5f 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   b59fa:	4958      	ldr	r1, [pc, #352]	; (b5b5c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b59fc:	4852      	ldr	r0, [pc, #328]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b59fe:	f002 ff5b 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b5a02:	6861      	ldr	r1, [r4, #4]
   b5a04:	4850      	ldr	r0, [pc, #320]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a06:	f002 ff57 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5a0a:	4955      	ldr	r1, [pc, #340]	; (b5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5a0c:	484e      	ldr	r0, [pc, #312]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a0e:	f002 ff53 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   b5a12:	4954      	ldr	r1, [pc, #336]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5a14:	484c      	ldr	r0, [pc, #304]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a16:	f002 ff4f 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5a1a:	68a1      	ldr	r1, [r4, #8]
   b5a1c:	484a      	ldr	r0, [pc, #296]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a1e:	f002 ff4b 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5a22:	494f      	ldr	r1, [pc, #316]	; (b5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5a24:	4848      	ldr	r0, [pc, #288]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a26:	f002 ff47 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   b5a2a:	494f      	ldr	r1, [pc, #316]	; (b5b68 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5a2c:	4846      	ldr	r0, [pc, #280]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a2e:	f002 ff43 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b5a32:	68e1      	ldr	r1, [r4, #12]
   b5a34:	4844      	ldr	r0, [pc, #272]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a36:	f002 ff3f 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5a3a:	4949      	ldr	r1, [pc, #292]	; (b5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5a3c:	4842      	ldr	r0, [pc, #264]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a3e:	f002 ff3b 	bl	b88b8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   b5a42:	494a      	ldr	r1, [pc, #296]	; (b5b6c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5a44:	4840      	ldr	r0, [pc, #256]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5a46:	f002 ff37 	bl	b88b8 <_ZN5Print5printEPKc>
    if (_debug) {
   b5a4a:	7d23      	ldrb	r3, [r4, #20]
   b5a4c:	2b00      	cmp	r3, #0
   b5a4e:	d04f      	beq.n	b5af0 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   b5a50:	f002 f9c8 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a54:	493d      	ldr	r1, [pc, #244]	; (b5b4c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5a56:	f002 ff2f 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5a5a:	f002 f9c3 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a5e:	4631      	mov	r1, r6
   b5a60:	f002 ff2a 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("/");
   b5a64:	f002 f9be 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a68:	4939      	ldr	r1, [pc, #228]	; (b5b50 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5a6a:	f002 ff25 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   b5a6e:	f002 f9b9 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a72:	4629      	mov	r1, r5
   b5a74:	f002 ff20 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   b5a78:	f002 f9b4 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a7c:	4935      	ldr	r1, [pc, #212]	; (b5b54 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5a7e:	f002 ff1b 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5a82:	f002 f9af 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a86:	4934      	ldr	r1, [pc, #208]	; (b5b58 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5a88:	f002 ff16 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5a8c:	f002 f9aa 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a90:	4932      	ldr	r1, [pc, #200]	; (b5b5c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5a92:	f002 ff11 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5a96:	f002 f9a5 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5a9a:	6861      	ldr	r1, [r4, #4]
   b5a9c:	f002 ff0c 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5aa0:	f002 f9a0 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5aa4:	492e      	ldr	r1, [pc, #184]	; (b5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5aa6:	f002 ff07 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5aaa:	f002 f99b 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5aae:	492d      	ldr	r1, [pc, #180]	; (b5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5ab0:	f002 ff02 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5ab4:	f002 f996 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5ab8:	68a1      	ldr	r1, [r4, #8]
   b5aba:	f002 fefd 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5abe:	f002 f991 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5ac2:	4927      	ldr	r1, [pc, #156]	; (b5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5ac4:	f002 fef8 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5ac8:	f002 f98c 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5acc:	4926      	ldr	r1, [pc, #152]	; (b5b68 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5ace:	f002 fef3 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5ad2:	f002 f987 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5ad6:	68e1      	ldr	r1, [r4, #12]
   b5ad8:	f002 feee 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5adc:	f002 f982 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5ae0:	491f      	ldr	r1, [pc, #124]	; (b5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5ae2:	f002 fee9 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   b5ae6:	f002 f97d 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5aea:	4920      	ldr	r1, [pc, #128]	; (b5b6c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5aec:	f002 fee4 	bl	b88b8 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   b5af0:	4620      	mov	r0, r4
   b5af2:	f7ff fe19 	bl	b5728 <_ZN7UbiHTTP16waitServerAnswerEv>
   b5af6:	b948      	cbnz	r0, b5b0c <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   b5af8:	4813      	ldr	r0, [pc, #76]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   b5afa:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b5b70 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   b5afe:	f001 ffaf 	bl	b7a60 <_ZN9TCPClient4stopEv>
}
   b5b02:	eeb0 0a48 	vmov.f32	s0, s16
   b5b06:	ecbd 8b02 	vpop	{d8}
   b5b0a:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5b0c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b5b10:	f001 fc26 	bl	b7360 <malloc>
    readServerAnswer(response);
   b5b14:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5b16:	4605      	mov	r5, r0
    readServerAnswer(response);
   b5b18:	4620      	mov	r0, r4
   b5b1a:	f7ff fdc7 	bl	b56ac <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   b5b1e:	4628      	mov	r0, r5
   b5b20:	f7ff fd08 	bl	b5534 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   b5b24:	4808      	ldr	r0, [pc, #32]	; (b5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5b26:	eeb0 8a40 	vmov.f32	s16, s0
   b5b2a:	f001 ff99 	bl	b7a60 <_ZN9TCPClient4stopEv>
    free(response);
   b5b2e:	4628      	mov	r0, r5
   b5b30:	f001 fc1e 	bl	b7370 <free>
    return value;
   b5b34:	e7e5      	b.n	b5b02 <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   b5b36:	7d23      	ldrb	r3, [r4, #20]
   b5b38:	2b00      	cmp	r3, #0
   b5b3a:	d0dd      	beq.n	b5af8 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   b5b3c:	f002 f952 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5b40:	490c      	ldr	r1, [pc, #48]	; (b5b74 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   b5b42:	f002 fecc 	bl	b88de <_ZN5Print7printlnEPKc>
   b5b46:	e7d7      	b.n	b5af8 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   b5b48:	2003e59c 	.word	0x2003e59c
   b5b4c:	000bc8fe 	.word	0x000bc8fe
   b5b50:	000bc913 	.word	0x000bc913
   b5b54:	000bc915 	.word	0x000bc915
   b5b58:	000bc809 	.word	0x000bc809
   b5b5c:	000bc815 	.word	0x000bc815
   b5b60:	000bc939 	.word	0x000bc939
   b5b64:	000bc81c 	.word	0x000bc81c
   b5b68:	000bc829 	.word	0x000bc829
   b5b6c:	000bc919 	.word	0x000bc919
   b5b70:	cda2425f 	.word	0xcda2425f
   b5b74:	000bc93c 	.word	0x000bc93c

000b5b78 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   b5b78:	4801      	ldr	r0, [pc, #4]	; (b5b80 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   b5b7a:	f001 bfc1 	b.w	b7b00 <_ZN9TCPClientC1Ev>
   b5b7e:	bf00      	nop
   b5b80:	2003e59c 	.word	0x2003e59c

000b5b84 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   b5b86:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5b88:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b5b8a:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b5b8c:	e9cd 2100 	strd	r2, r1, [sp]
   b5b90:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b5b92:	f001 fbe5 	bl	b7360 <malloc>
   b5b96:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   b5b98:	2014      	movs	r0, #20
   b5b9a:	f7fe fa7c 	bl	b4096 <_Znwj>
   b5b9e:	4605      	mov	r5, r0
   b5ba0:	b120      	cbz	r0, b5bac <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   b5ba2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5ba6:	4633      	mov	r3, r6
   b5ba8:	f000 f861 	bl	b5c6e <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   b5bac:	6025      	str	r5, [r4, #0]
}
   b5bae:	b002      	add	sp, #8
   b5bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5bb4 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   b5bb4:	b538      	push	{r3, r4, r5, lr}
   b5bb6:	2500      	movs	r5, #0
   b5bb8:	4604      	mov	r4, r0
   b5bba:	4613      	mov	r3, r2
   b5bbc:	7245      	strb	r5, [r0, #9]
   b5bbe:	7285      	strb	r5, [r0, #10]
   b5bc0:	4a02      	ldr	r2, [pc, #8]	; (b5bcc <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   b5bc2:	f7ff ffdf 	bl	b5b84 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	bd38      	pop	{r3, r4, r5, pc}
   b5bca:	bf00      	nop
   b5bcc:	000bc97c 	.word	0x000bc97c

000b5bd0 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   b5bd0:	6800      	ldr	r0, [r0, #0]
   b5bd2:	f000 b855 	b.w	b5c80 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000b5bd6 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   b5bd6:	b507      	push	{r0, r1, r2, lr}
   b5bd8:	2300      	movs	r3, #0
   b5bda:	9300      	str	r3, [sp, #0]
   b5bdc:	461a      	mov	r2, r3
   b5bde:	f7ff fff7 	bl	b5bd0 <_ZN7Ubidots3addEPcfS0_mj>
   b5be2:	b003      	add	sp, #12
   b5be4:	f85d fb04 	ldr.w	pc, [sp], #4

000b5be8 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   b5be8:	6800      	ldr	r0, [r0, #0]
   b5bea:	f000 ba69 	b.w	b60c0 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

000b5bee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5bee:	b538      	push	{r3, r4, r5, lr}
   b5bf0:	4604      	mov	r4, r0
      while (__x != 0)
   b5bf2:	b184      	cbz	r4, b5c16 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
	  _M_erase(_S_right(__x));
   b5bf4:	68e0      	ldr	r0, [r4, #12]
   b5bf6:	f7ff fffa 	bl	b5bee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      if (_M_manager)
   b5bfa:	69e3      	ldr	r3, [r4, #28]
      { return static_cast<_Link_type>(__x->_M_left); }
   b5bfc:	68a5      	ldr	r5, [r4, #8]
   b5bfe:	b123      	cbz	r3, b5c0a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
    class function<_Res(_ArgTypes...)>
   b5c00:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c04:	2203      	movs	r2, #3
   b5c06:	4608      	mov	r0, r1
   b5c08:	4798      	blx	r3
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	2124      	movs	r1, #36	; 0x24
   b5c0e:	f7fe fa46 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b5c12:	462c      	mov	r4, r5
      }
   b5c14:	e7ed      	b.n	b5bf2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
    }
   b5c16:	bd38      	pop	{r3, r4, r5, pc}

000b5c18 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   b5c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c1a:	b08d      	sub	sp, #52	; 0x34
   b5c1c:	4604      	mov	r4, r0
        return spark_deviceID();
   b5c1e:	a801      	add	r0, sp, #4
   b5c20:	460d      	mov	r5, r1
   b5c22:	4617      	mov	r7, r2
   b5c24:	461e      	mov	r6, r3
   b5c26:	f001 fa9d 	bl	b7164 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   b5c2a:	9803      	ldr	r0, [sp, #12]
   b5c2c:	3001      	adds	r0, #1
   b5c2e:	f7fe fa34 	bl	b409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   b5c32:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   b5c34:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   b5c36:	f004 fa86 	bl	ba146 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   b5c3a:	462a      	mov	r2, r5
   b5c3c:	4639      	mov	r1, r7
   b5c3e:	4633      	mov	r3, r6
  _iot_protocol = iot_protocol;
   b5c40:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   b5c42:	a805      	add	r0, sp, #20
   b5c44:	f7ff fc0a 	bl	b545c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   b5c48:	20c8      	movs	r0, #200	; 0xc8
   b5c4a:	f001 fb89 	bl	b7360 <malloc>
   b5c4e:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   b5c50:	a805      	add	r0, sp, #20
   b5c52:	f7ff fb25 	bl	b52a0 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   b5c56:	2300      	movs	r3, #0
  _token = token;
   b5c58:	e9c4 0501 	strd	r0, r5, [r4, #4]
  _current_value = 0;
   b5c5c:	7423      	strb	r3, [r4, #16]
      { _M_erase(_M_begin()); }
   b5c5e:	9808      	ldr	r0, [sp, #32]
   b5c60:	f7ff ffc5 	bl	b5bee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
  String particle_id_str = System.deviceID();
   b5c64:	a801      	add	r0, sp, #4
   b5c66:	f002 fe9b 	bl	b89a0 <_ZN6StringD1Ev>
}
   b5c6a:	b00d      	add	sp, #52	; 0x34
   b5c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c6e <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   b5c6e:	b538      	push	{r3, r4, r5, lr}
   b5c70:	2500      	movs	r5, #0
   b5c72:	4604      	mov	r4, r0
   b5c74:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   b5c76:	f7ff ffcf 	bl	b5c18 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c80 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   b5c80:	b538      	push	{r3, r4, r5, lr}
   b5c82:	4604      	mov	r4, r0
  _dirty = true;
   b5c84:	2001      	movs	r0, #1
   b5c86:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   b5c88:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5c8c:	68e5      	ldr	r5, [r4, #12]
   b5c8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b5c92:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   b5c96:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b5c9a:	68e0      	ldr	r0, [r4, #12]
   b5c9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b5ca0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b5ca4:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   b5ca8:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b5cac:	68e0      	ldr	r0, [r4, #12]
   b5cae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b5cb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b5cb6:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   b5cb8:	f994 2010 	ldrsb.w	r2, [r4, #16]
   b5cbc:	68e1      	ldr	r1, [r4, #12]
   b5cbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b5cc2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b5cc6:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   b5cc8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b5ccc:	68e2      	ldr	r2, [r4, #12]
   b5cce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b5cd6:	9a04      	ldr	r2, [sp, #16]
   b5cd8:	611a      	str	r2, [r3, #16]
  _current_value++;
   b5cda:	7c23      	ldrb	r3, [r4, #16]
   b5cdc:	3301      	adds	r3, #1
   b5cde:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   b5ce0:	2b0a      	cmp	r3, #10
  _current_value++;
   b5ce2:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   b5ce4:	dd08      	ble.n	b5cf8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   b5ce6:	7ca3      	ldrb	r3, [r4, #18]
   b5ce8:	b123      	cbz	r3, b5cf4 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   b5cea:	f002 f87b 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5cee:	4903      	ldr	r1, [pc, #12]	; (b5cfc <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   b5cf0:	f002 fdf5 	bl	b88de <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   b5cf4:	230a      	movs	r3, #10
   b5cf6:	7423      	strb	r3, [r4, #16]
  }
}
   b5cf8:	bd38      	pop	{r3, r4, r5, pc}
   b5cfa:	bf00      	nop
   b5cfc:	000bc997 	.word	0x000bc997

000b5d00 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   b5d00:	b510      	push	{r4, lr}
   b5d02:	ee10 0a10 	vmov	r0, s0
   b5d06:	b086      	sub	sp, #24
   b5d08:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   b5d0a:	f003 fe33 	bl	b9974 <__aeabi_f2d>
   b5d0e:	4602      	mov	r2, r0
   b5d10:	460b      	mov	r3, r1
   b5d12:	a801      	add	r0, sp, #4
   b5d14:	490a      	ldr	r1, [pc, #40]	; (b5d40 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   b5d16:	f001 fb3b 	bl	b7390 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   b5d1a:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   b5d1c:	2214      	movs	r2, #20
  uint8_t k = 0;
   b5d1e:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   b5d20:	f810 1b01 	ldrb.w	r1, [r0], #1
   b5d24:	2920      	cmp	r1, #32
   b5d26:	d006      	beq.n	b5d36 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b5d28:	54e1      	strb	r1, [r4, r3]
      k++;
   b5d2a:	3301      	adds	r3, #1
   b5d2c:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   b5d2e:	b911      	cbnz	r1, b5d36 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b5d30:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   b5d32:	b006      	add	sp, #24
   b5d34:	bd10      	pop	{r4, pc}
  while (j < 20) {
   b5d36:	3a01      	subs	r2, #1
   b5d38:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   b5d3c:	d1f0      	bne.n	b5d20 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   b5d3e:	e7f8      	b.n	b5d32 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   b5d40:	000bc9d6 	.word	0x000bc9d6

000b5d44 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b5d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d48:	460c      	mov	r4, r1
   b5d4a:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   b5d4c:	494d      	ldr	r1, [pc, #308]	; (b5e84 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b5d4e:	f8df 8158 	ldr.w	r8, [pc, #344]	; b5ea8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5d52:	f8df 9158 	ldr.w	r9, [pc, #344]	; b5eac <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
        sprintf(payload, "%s000", payload);
   b5d56:	f8df a158 	ldr.w	sl, [pc, #344]	; b5eb0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x16c>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b5d5a:	4605      	mov	r5, r0
  sprintf(payload, "{");
   b5d5c:	4620      	mov	r0, r4
   b5d5e:	f004 f9f2 	bl	ba146 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   b5d62:	2600      	movs	r6, #0
   b5d64:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b5d68:	429e      	cmp	r6, r3
   b5d6a:	da69      	bge.n	b5e40 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfc>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5d6c:	68eb      	ldr	r3, [r5, #12]
   b5d6e:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b5d72:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b5d76:	ed93 0a02 	vldr	s0, [r3, #8]
   b5d7a:	a903      	add	r1, sp, #12
   b5d7c:	4628      	mov	r0, r5
   b5d7e:	f7ff ffbf 	bl	b5d00 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b5d82:	68eb      	ldr	r3, [r5, #12]
   b5d84:	a903      	add	r1, sp, #12
   b5d86:	9100      	str	r1, [sp, #0]
   b5d88:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b5d8c:	4622      	mov	r2, r4
   b5d8e:	4641      	mov	r1, r8
   b5d90:	4620      	mov	r0, r4
   b5d92:	f001 fafd 	bl	b7390 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5d96:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5d98:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5d9c:	443b      	add	r3, r7
   b5d9e:	68db      	ldr	r3, [r3, #12]
   b5da0:	b33b      	cbz	r3, b5df2 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5da2:	4649      	mov	r1, r9
   b5da4:	4622      	mov	r2, r4
   b5da6:	4620      	mov	r0, r4
   b5da8:	f001 faf2 	bl	b7390 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b5dac:	68eb      	ldr	r3, [r5, #12]
   b5dae:	443b      	add	r3, r7
   b5db0:	6919      	ldr	r1, [r3, #16]
   b5db2:	2900      	cmp	r1, #0
   b5db4:	d037      	beq.n	b5e26 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe2>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5db6:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5db8:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5dba:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5dbe:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b5dc2:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5dc6:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5dca:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5dce:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5dd2:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b5dd6:	b2c9      	uxtb	r1, r1
   b5dd8:	9100      	str	r1, [sp, #0]
   b5dda:	b2db      	uxtb	r3, r3
   b5ddc:	492a      	ldr	r1, [pc, #168]	; (b5e88 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   b5dde:	b2d2      	uxtb	r2, r2
   b5de0:	a802      	add	r0, sp, #8
   b5de2:	f001 fad5 	bl	b7390 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b5de6:	4929      	ldr	r1, [pc, #164]	; (b5e8c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   b5de8:	ab02      	add	r3, sp, #8
   b5dea:	4622      	mov	r2, r4
   b5dec:	4620      	mov	r0, r4
   b5dee:	f001 facf 	bl	b7390 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b5df2:	68eb      	ldr	r3, [r5, #12]
   b5df4:	443b      	add	r3, r7
   b5df6:	685b      	ldr	r3, [r3, #4]
   b5df8:	b123      	cbz	r3, b5e04 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc0>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   b5dfa:	4925      	ldr	r1, [pc, #148]	; (b5e90 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   b5dfc:	4622      	mov	r2, r4
   b5dfe:	4620      	mov	r0, r4
   b5e00:	f001 fac6 	bl	b7390 <sprintf>
    sprintf(payload, "%s}", payload);
   b5e04:	4622      	mov	r2, r4
   b5e06:	4923      	ldr	r1, [pc, #140]	; (b5e94 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b5e08:	4620      	mov	r0, r4
   b5e0a:	f001 fac1 	bl	b7390 <sprintf>
    i++;
   b5e0e:	3601      	adds	r6, #1
    if (i < _current_value) {
   b5e10:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b5e14:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b5e16:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b5e18:	4622      	mov	r2, r4
    if (i < _current_value) {
   b5e1a:	da0a      	bge.n	b5e32 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xee>
      sprintf(payload, "%s,", payload);
   b5e1c:	491e      	ldr	r1, [pc, #120]	; (b5e98 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   b5e1e:	4620      	mov	r0, r4
   b5e20:	f001 fab6 	bl	b7390 <sprintf>
   b5e24:	e79e      	b.n	b5d64 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   b5e26:	4622      	mov	r2, r4
   b5e28:	4651      	mov	r1, sl
   b5e2a:	4620      	mov	r0, r4
   b5e2c:	f001 fab0 	bl	b7390 <sprintf>
   b5e30:	e7df      	b.n	b5df2 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s}", payload);
   b5e32:	4918      	ldr	r1, [pc, #96]	; (b5e94 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b5e34:	4620      	mov	r0, r4
   b5e36:	f001 faab 	bl	b7390 <sprintf>
      _current_value = 0;
   b5e3a:	2300      	movs	r3, #0
   b5e3c:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b5e3e:	e791      	b.n	b5d64 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   b5e40:	7cab      	ldrb	r3, [r5, #18]
   b5e42:	b1db      	cbz	r3, b5e7c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>
    Serial.println("----------");
   b5e44:	f001 ffce 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5e48:	4914      	ldr	r1, [pc, #80]	; (b5e9c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b5e4a:	f002 fd48 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b5e4e:	f001 ffc9 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5e52:	4913      	ldr	r1, [pc, #76]	; (b5ea0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   b5e54:	f002 fd43 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b5e58:	f001 ffc4 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5e5c:	4621      	mov	r1, r4
   b5e5e:	f002 fd3e 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b5e62:	f001 ffbf 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5e66:	490d      	ldr	r1, [pc, #52]	; (b5e9c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b5e68:	f002 fd39 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("");
   b5e6c:	f001 ffba 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5e70:	490c      	ldr	r1, [pc, #48]	; (b5ea4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>)
}
   b5e72:	b009      	add	sp, #36	; 0x24
   b5e74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b5e78:	f002 bd31 	b.w	b88de <_ZN5Print7printlnEPKc>
}
   b5e7c:	b009      	add	sp, #36	; 0x24
   b5e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e82:	bf00      	nop
   b5e84:	000bc9db 	.word	0x000bc9db
   b5e88:	000bca03 	.word	0x000bca03
   b5e8c:	000bca0a 	.word	0x000bca0a
   b5e90:	000bca15 	.word	0x000bca15
   b5e94:	000bca24 	.word	0x000bca24
   b5e98:	000bca28 	.word	0x000bca28
   b5e9c:	000bc7b3 	.word	0x000bc7b3
   b5ea0:	000bca2c 	.word	0x000bca2c
   b5ea4:	000bc93b 	.word	0x000bc93b
   b5ea8:	000bc9dd 	.word	0x000bc9dd
   b5eac:	000bc9f0 	.word	0x000bc9f0
   b5eb0:	000bca0f 	.word	0x000bca0f

000b5eb4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b5eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5eb8:	460c      	mov	r4, r1
   b5eba:	4605      	mov	r5, r0
   b5ebc:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   b5ebe:	4953      	ldr	r1, [pc, #332]	; (b600c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b5ec0:	f8df 8178 	ldr.w	r8, [pc, #376]	; b603c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5ec4:	f8df 9178 	ldr.w	r9, [pc, #376]	; b6040 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x18c>
  sprintf(payload, "");
   b5ec8:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b5eca:	4616      	mov	r6, r2
   b5ecc:	461f      	mov	r7, r3
  sprintf(payload, "");
   b5ece:	f004 f93a 	bl	ba146 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   b5ed2:	68ab      	ldr	r3, [r5, #8]
   b5ed4:	4a4e      	ldr	r2, [pc, #312]	; (b6010 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   b5ed6:	494f      	ldr	r1, [pc, #316]	; (b6014 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   b5ed8:	4620      	mov	r0, r4
   b5eda:	f001 fa59 	bl	b7390 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   b5ede:	4633      	mov	r3, r6
   b5ee0:	494d      	ldr	r1, [pc, #308]	; (b6018 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
   b5ee2:	9700      	str	r7, [sp, #0]
   b5ee4:	4622      	mov	r2, r4
   b5ee6:	4620      	mov	r0, r4
   b5ee8:	f001 fa52 	bl	b7390 <sprintf>
  sprintf(payload, "%s=>", payload);
   b5eec:	494b      	ldr	r1, [pc, #300]	; (b601c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b5eee:	4f4a      	ldr	r7, [pc, #296]	; (b6018 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
  sprintf(payload, "%s=>", payload);
   b5ef0:	4622      	mov	r2, r4
   b5ef2:	4620      	mov	r0, r4
   b5ef4:	f001 fa4c 	bl	b7390 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   b5ef8:	2600      	movs	r6, #0
   b5efa:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b5efe:	429e      	cmp	r6, r3
   b5f00:	da63      	bge.n	b5fca <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x116>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5f02:	68eb      	ldr	r3, [r5, #12]
   b5f04:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b5f08:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b5f0c:	ed93 0a02 	vldr	s0, [r3, #8]
   b5f10:	a903      	add	r1, sp, #12
   b5f12:	4628      	mov	r0, r5
   b5f14:	f7ff fef4 	bl	b5d00 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b5f18:	68eb      	ldr	r3, [r5, #12]
   b5f1a:	a903      	add	r1, sp, #12
   b5f1c:	9100      	str	r1, [sp, #0]
   b5f1e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b5f22:	4622      	mov	r2, r4
   b5f24:	4639      	mov	r1, r7
   b5f26:	4620      	mov	r0, r4
   b5f28:	f001 fa32 	bl	b7390 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b5f2c:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b5f2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   b5f32:	4453      	add	r3, sl
   b5f34:	685b      	ldr	r3, [r3, #4]
   b5f36:	b123      	cbz	r3, b5f42 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b5f38:	4622      	mov	r2, r4
   b5f3a:	4641      	mov	r1, r8
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	f001 fa27 	bl	b7390 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b5f42:	68eb      	ldr	r3, [r5, #12]
   b5f44:	4453      	add	r3, sl
   b5f46:	68db      	ldr	r3, [r3, #12]
   b5f48:	b333      	cbz	r3, b5f98 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b5f4a:	4649      	mov	r1, r9
   b5f4c:	4622      	mov	r2, r4
   b5f4e:	4620      	mov	r0, r4
   b5f50:	f001 fa1e 	bl	b7390 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b5f54:	68eb      	ldr	r3, [r5, #12]
   b5f56:	4453      	add	r3, sl
   b5f58:	6919      	ldr	r1, [r3, #16]
   b5f5a:	b349      	cbz	r1, b5fb0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfc>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f5c:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f5e:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f60:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f64:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b5f68:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f6c:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f70:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b5f74:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b5f78:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b5f7c:	b2c9      	uxtb	r1, r1
   b5f7e:	9100      	str	r1, [sp, #0]
   b5f80:	b2db      	uxtb	r3, r3
   b5f82:	4927      	ldr	r1, [pc, #156]	; (b6020 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   b5f84:	b2d2      	uxtb	r2, r2
   b5f86:	a802      	add	r0, sp, #8
   b5f88:	f001 fa02 	bl	b7390 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b5f8c:	4925      	ldr	r1, [pc, #148]	; (b6024 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   b5f8e:	ab02      	add	r3, sp, #8
   b5f90:	4622      	mov	r2, r4
   b5f92:	4620      	mov	r0, r4
   b5f94:	f001 f9fc 	bl	b7390 <sprintf>
    if (i < _current_value) {
   b5f98:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b5f9c:	3601      	adds	r6, #1
   b5f9e:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b5fa0:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b5fa2:	4622      	mov	r2, r4
    if (i < _current_value) {
   b5fa4:	da0a      	bge.n	b5fbc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x108>
      sprintf(payload, "%s,", payload);
   b5fa6:	4920      	ldr	r1, [pc, #128]	; (b6028 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   b5fa8:	4620      	mov	r0, r4
   b5faa:	f001 f9f1 	bl	b7390 <sprintf>
   b5fae:	e7a4      	b.n	b5efa <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   b5fb0:	491e      	ldr	r1, [pc, #120]	; (b602c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   b5fb2:	4622      	mov	r2, r4
   b5fb4:	4620      	mov	r0, r4
   b5fb6:	f001 f9eb 	bl	b7390 <sprintf>
   b5fba:	e7ed      	b.n	b5f98 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s|end", payload);
   b5fbc:	491c      	ldr	r1, [pc, #112]	; (b6030 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   b5fbe:	4620      	mov	r0, r4
   b5fc0:	f001 f9e6 	bl	b7390 <sprintf>
      _current_value = 0;
   b5fc4:	2300      	movs	r3, #0
   b5fc6:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b5fc8:	e797      	b.n	b5efa <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   b5fca:	7cab      	ldrb	r3, [r5, #18]
   b5fcc:	b1db      	cbz	r3, b6006 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x152>
    Serial.println("----------");
   b5fce:	f001 ff09 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5fd2:	4918      	ldr	r1, [pc, #96]	; (b6034 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b5fd4:	f002 fc83 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b5fd8:	f001 ff04 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5fdc:	4916      	ldr	r1, [pc, #88]	; (b6038 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>)
   b5fde:	f002 fc7e 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b5fe2:	f001 feff 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5fe6:	4621      	mov	r1, r4
   b5fe8:	f002 fc79 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b5fec:	f001 fefa 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5ff0:	4910      	ldr	r1, [pc, #64]	; (b6034 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b5ff2:	f002 fc74 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("");
   b5ff6:	f001 fef5 	bl	b7de4 <_Z16_fetch_usbserialv>
   b5ffa:	4904      	ldr	r1, [pc, #16]	; (b600c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
}
   b5ffc:	b009      	add	sp, #36	; 0x24
   b5ffe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b6002:	f002 bc6c 	b.w	b88de <_ZN5Print7printlnEPKc>
}
   b6006:	b009      	add	sp, #36	; 0x24
   b6008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b600c:	000bc93b 	.word	0x000bc93b
   b6010:	000bc750 	.word	0x000bc750
   b6014:	000bca35 	.word	0x000bca35
   b6018:	000bca41 	.word	0x000bca41
   b601c:	000bca49 	.word	0x000bca49
   b6020:	000bca03 	.word	0x000bca03
   b6024:	000bca0a 	.word	0x000bca0a
   b6028:	000bca28 	.word	0x000bca28
   b602c:	000bca0f 	.word	0x000bca0f
   b6030:	000bca5b 	.word	0x000bca5b
   b6034:	000bc7b3 	.word	0x000bc7b3
   b6038:	000bca2c 	.word	0x000bca2c
   b603c:	000bca4e 	.word	0x000bca4e
   b6040:	000bca54 	.word	0x000bca54

000b6044 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b6044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6048:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b604a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b604e:	461e      	mov	r6, r3
   b6050:	460f      	mov	r7, r1
   b6052:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6054:	f001 f984 	bl	b7360 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b6058:	7ce3      	ldrb	r3, [r4, #19]
   b605a:	3b01      	subs	r3, #1
   b605c:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b605e:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b6060:	d826      	bhi.n	b60b0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   b6062:	4601      	mov	r1, r0
   b6064:	4643      	mov	r3, r8
   b6066:	463a      	mov	r2, r7
   b6068:	4620      	mov	r0, r4
   b606a:	f7ff ff23 	bl	b5eb4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   b606e:	7ca3      	ldrb	r3, [r4, #18]
   b6070:	b123      	cbz	r3, b607c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   b6072:	f001 feb7 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6076:	4911      	ldr	r1, [pc, #68]	; (b60bc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   b6078:	f002 fc31 	bl	b88de <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   b607c:	6860      	ldr	r0, [r4, #4]
   b607e:	6803      	ldr	r3, [r0, #0]
   b6080:	9600      	str	r6, [sp, #0]
   b6082:	f8d3 9000 	ldr.w	r9, [r3]
   b6086:	4639      	mov	r1, r7
   b6088:	462b      	mov	r3, r5
   b608a:	4642      	mov	r2, r8
   b608c:	47c8      	blx	r9
   b608e:	4607      	mov	r7, r0
  free(payload);
   b6090:	4628      	mov	r0, r5
   b6092:	f001 f96d 	bl	b7370 <free>
  delete flags;
   b6096:	b11e      	cbz	r6, b60a0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   b6098:	2101      	movs	r1, #1
   b609a:	4630      	mov	r0, r6
   b609c:	f7fd ffff 	bl	b409e <_ZdlPvj>
  if (result) {
   b60a0:	2300      	movs	r3, #0
   b60a2:	b107      	cbz	r7, b60a6 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   b60a4:	7463      	strb	r3, [r4, #17]
}
   b60a6:	4638      	mov	r0, r7
  _current_value = 0;
   b60a8:	7423      	strb	r3, [r4, #16]
}
   b60aa:	b003      	add	sp, #12
   b60ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   b60b0:	4601      	mov	r1, r0
   b60b2:	4620      	mov	r0, r4
   b60b4:	f7ff fe46 	bl	b5d44 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   b60b8:	e7d9      	b.n	b606e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   b60ba:	bf00      	nop
   b60bc:	000bca62 	.word	0x000bca62

000b60c0 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b60c0:	b570      	push	{r4, r5, r6, lr}
   b60c2:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   b60c4:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b60c6:	460d      	mov	r5, r1
   b60c8:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   b60ca:	f7fd ffe4 	bl	b4096 <_Znwj>
  flags->particle_flag = flag;
   b60ce:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   b60d0:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   b60d2:	462a      	mov	r2, r5
   b60d4:	4629      	mov	r1, r5
   b60d6:	4620      	mov	r0, r4
}
   b60d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   b60dc:	f7ff bfb2 	b.w	b6044 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000b60e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b60e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b60e4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b60e6:	2018      	movs	r0, #24
   b60e8:	4615      	mov	r5, r2
   b60ea:	460f      	mov	r7, r1
   b60ec:	f7fd ffd3 	bl	b4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   b60f0:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   b60f4:	686b      	ldr	r3, [r5, #4]
   b60f6:	f8d5 9000 	ldr.w	r9, [r5]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b60fa:	68ba      	ldr	r2, [r7, #8]
   b60fc:	6143      	str	r3, [r0, #20]
   b60fe:	4606      	mov	r6, r0
   b6100:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   b6104:	4655      	mov	r5, sl
      bool __comp = true;
   b6106:	2301      	movs	r3, #1
      while (__x != 0)
   b6108:	b152      	cbz	r2, b6120 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b610a:	6913      	ldr	r3, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b610c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   b6110:	454b      	cmp	r3, r9
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b6112:	4615      	mov	r5, r2
   b6114:	bfcb      	itete	gt
   b6116:	2301      	movgt	r3, #1
   b6118:	2300      	movle	r3, #0
   b611a:	4602      	movgt	r2, r0
   b611c:	460a      	movle	r2, r1
   b611e:	e7f3      	b.n	b6108 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   b6120:	b1ab      	cbz	r3, b614e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6e>
	  if (__j == begin())
   b6122:	68fb      	ldr	r3, [r7, #12]
   b6124:	42ab      	cmp	r3, r5
   b6126:	d024      	beq.n	b6172 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	_M_node = _Rb_tree_decrement(_M_node);
   b6128:	4628      	mov	r0, r5
   b612a:	f003 f94d 	bl	b93c8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b612e:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b6130:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b6134:	454b      	cmp	r3, r9
   b6136:	db1c      	blt.n	b6172 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	::operator delete(__p
   b6138:	2118      	movs	r1, #24
   b613a:	4630      	mov	r0, r6
   b613c:	f7fd ffaf 	bl	b409e <_ZdlPvj>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b6140:	f8c4 8000 	str.w	r8, [r4]
   b6144:	2300      	movs	r3, #0
   b6146:	7123      	strb	r3, [r4, #4]
      }
   b6148:	4620      	mov	r0, r4
   b614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b614e:	46a8      	mov	r8, r5
   b6150:	e7ee      	b.n	b6130 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   b6152:	6928      	ldr	r0, [r5, #16]
   b6154:	4581      	cmp	r9, r0
   b6156:	bfac      	ite	ge
   b6158:	2000      	movge	r0, #0
   b615a:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b615c:	4653      	mov	r3, sl
   b615e:	462a      	mov	r2, r5
   b6160:	4631      	mov	r1, r6
   b6162:	f003 f933 	bl	b93cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b6166:	697b      	ldr	r3, [r7, #20]
   b6168:	6026      	str	r6, [r4, #0]
   b616a:	3301      	adds	r3, #1
   b616c:	617b      	str	r3, [r7, #20]
   b616e:	2301      	movs	r3, #1
   b6170:	e7e9      	b.n	b6146 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x66>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b6172:	45aa      	cmp	sl, r5
   b6174:	d1ed      	bne.n	b6152 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x72>
			    || _M_impl._M_key_compare(_S_key(__z),
   b6176:	2001      	movs	r0, #1
   b6178:	e7f0      	b.n	b615c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7c>
	...

000b617c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   b617c:	b508      	push	{r3, lr}
        val_(val) {
   b617e:	4b07      	ldr	r3, [pc, #28]	; (b619c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   b6180:	4807      	ldr	r0, [pc, #28]	; (b61a0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   b6182:	2200      	movs	r2, #0
   b6184:	701a      	strb	r2, [r3, #0]
   b6186:	f001 fcbb 	bl	b7b00 <_ZN9TCPClientC1Ev>
   b618a:	4806      	ldr	r0, [pc, #24]	; (b61a4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   b618c:	f001 fcb8 	bl	b7b00 <_ZN9TCPClientC1Ev>
   b6190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6194:	4804      	ldr	r0, [pc, #16]	; (b61a8 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   b6196:	f002 bf4b 	b.w	b9030 <_ZN3UDPC1Ev>
   b619a:	bf00      	nop
   b619c:	2003e63c 	.word	0x2003e63c
   b61a0:	2003e620 	.word	0x2003e620
   b61a4:	2003e5b8 	.word	0x2003e5b8
   b61a8:	2003e5d4 	.word	0x2003e5d4

000b61ac <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   b61ac:	7501      	strb	r1, [r0, #20]
   b61ae:	4770      	bx	lr

000b61b0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b61b0:	b538      	push	{r3, r4, r5, lr}
   b61b2:	4604      	mov	r4, r0
      while (__x != 0)
   b61b4:	b14c      	cbz	r4, b61ca <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x1a>
	  _M_erase(_S_right(__x));
   b61b6:	68e0      	ldr	r0, [r4, #12]
   b61b8:	f7ff fffa 	bl	b61b0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b61bc:	68a5      	ldr	r5, [r4, #8]
   b61be:	4620      	mov	r0, r4
   b61c0:	2118      	movs	r1, #24
   b61c2:	f7fd ff6c 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b61c6:	462c      	mov	r4, r5
      while (__x != 0)
   b61c8:	e7f4      	b.n	b61b4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x4>
    }
   b61ca:	bd38      	pop	{r3, r4, r5, pc}

000b61cc <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b61cc:	b530      	push	{r4, r5, lr}
   b61ce:	4d06      	ldr	r5, [pc, #24]	; (b61e8 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   b61d0:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b61d2:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b61d6:	2500      	movs	r5, #0
  _token = token;
   b61d8:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b61da:	7505      	strb	r5, [r0, #20]
   b61dc:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b61e0:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b61e4:	6185      	str	r5, [r0, #24]
}
   b61e6:	bd30      	pop	{r4, r5, pc}
   b61e8:	000bcb0c 	.word	0x000bcb0c

000b61ec <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   b61ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61f0:	460d      	mov	r5, r1
   b61f2:	4617      	mov	r7, r2
   b61f4:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   b61f6:	f001 fdf5 	bl	b7de4 <_Z16_fetch_usbserialv>
   b61fa:	491e      	ldr	r1, [pc, #120]	; (b6274 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b61fc:	4e1e      	ldr	r6, [pc, #120]	; (b6278 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   b61fe:	f8df a07c 	ldr.w	sl, [pc, #124]	; b627c <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   b6202:	f8df b07c 	ldr.w	fp, [pc, #124]	; b6280 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   b6206:	f002 fb6a 	bl	b88de <_ZN5Print7printlnEPKc>
   b620a:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b620c:	4630      	mov	r0, r6
   b620e:	f001 fc3e 	bl	b7a8e <_ZN9TCPClient6statusEv>
   b6212:	bb60      	cbnz	r0, b626e <_ZN6UbiTCP9reconnectEPKci+0x82>
   b6214:	2c05      	cmp	r4, #5
   b6216:	d02a      	beq.n	b626e <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   b6218:	f898 3014 	ldrb.w	r3, [r8, #20]
   b621c:	b1c3      	cbz	r3, b6250 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   b621e:	f001 fde1 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6222:	4651      	mov	r1, sl
   b6224:	f002 fb48 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(host);
   b6228:	f001 fddc 	bl	b7de4 <_Z16_fetch_usbserialv>
   b622c:	4629      	mov	r1, r5
   b622e:	f002 fb43 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b6232:	f001 fdd7 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6236:	4659      	mov	r1, fp
   b6238:	f002 fb3e 	bl	b88b8 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b623c:	f001 fdd2 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6240:	220a      	movs	r2, #10
   b6242:	4681      	mov	r9, r0
   b6244:	4621      	mov	r1, r4
   b6246:	f002 fb54 	bl	b88f2 <_ZN5Print11printNumberEmh>
        n += println();
   b624a:	4648      	mov	r0, r9
   b624c:	f002 fb3b 	bl	b88c6 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   b6250:	4630      	mov	r0, r6
   b6252:	f001 fc05 	bl	b7a60 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   b6256:	2300      	movs	r3, #0
   b6258:	b2ba      	uxth	r2, r7
   b625a:	4629      	mov	r1, r5
   b625c:	4630      	mov	r0, r6
   b625e:	f001 fa49 	bl	b76f4 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   b6262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6266:	f002 fa2b 	bl	b86c0 <delay>
   b626a:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b626c:	e7ce      	b.n	b620c <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   b626e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6272:	bf00      	nop
   b6274:	000bca72 	.word	0x000bca72
   b6278:	2003e640 	.word	0x2003e640
   b627c:	000bc764 	.word	0x000bc764
   b6280:	000bc77a 	.word	0x000bc77a

000b6284 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b6284:	b570      	push	{r4, r5, r6, lr}
   b6286:	4604      	mov	r4, r0
   b6288:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   b628a:	6881      	ldr	r1, [r0, #8]
   b628c:	482e      	ldr	r0, [pc, #184]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b628e:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   b6290:	f002 fb12 	bl	b88b8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   b6294:	492d      	ldr	r1, [pc, #180]	; (b634c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b6296:	482c      	ldr	r0, [pc, #176]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6298:	f002 fb0e 	bl	b88b8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   b629c:	68e1      	ldr	r1, [r4, #12]
   b629e:	482a      	ldr	r0, [pc, #168]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62a0:	f002 fb0a 	bl	b88b8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   b62a4:	492a      	ldr	r1, [pc, #168]	; (b6350 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b62a6:	4828      	ldr	r0, [pc, #160]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62a8:	f002 fb06 	bl	b88b8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   b62ac:	4631      	mov	r1, r6
   b62ae:	4826      	ldr	r0, [pc, #152]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62b0:	f002 fb02 	bl	b88b8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   b62b4:	4927      	ldr	r1, [pc, #156]	; (b6354 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b62b6:	4824      	ldr	r0, [pc, #144]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62b8:	f002 fafe 	bl	b88b8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   b62bc:	4629      	mov	r1, r5
   b62be:	4822      	ldr	r0, [pc, #136]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62c0:	f002 fafa 	bl	b88b8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   b62c4:	4924      	ldr	r1, [pc, #144]	; (b6358 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b62c6:	4820      	ldr	r0, [pc, #128]	; (b6348 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b62c8:	f002 faf6 	bl	b88b8 <_ZN5Print5printEPKc>
  if (_debug) {
   b62cc:	7d23      	ldrb	r3, [r4, #20]
   b62ce:	2b00      	cmp	r3, #0
   b62d0:	d038      	beq.n	b6344 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   b62d2:	f001 fd87 	bl	b7de4 <_Z16_fetch_usbserialv>
   b62d6:	4921      	ldr	r1, [pc, #132]	; (b635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   b62d8:	f002 fb01 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   b62dc:	f001 fd82 	bl	b7de4 <_Z16_fetch_usbserialv>
   b62e0:	491f      	ldr	r1, [pc, #124]	; (b6360 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   b62e2:	f002 fafc 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   b62e6:	f001 fd7d 	bl	b7de4 <_Z16_fetch_usbserialv>
   b62ea:	68a1      	ldr	r1, [r4, #8]
   b62ec:	f002 fae4 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   b62f0:	f001 fd78 	bl	b7de4 <_Z16_fetch_usbserialv>
   b62f4:	4915      	ldr	r1, [pc, #84]	; (b634c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b62f6:	f002 fadf 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.print(_token);
   b62fa:	f001 fd73 	bl	b7de4 <_Z16_fetch_usbserialv>
   b62fe:	68e1      	ldr	r1, [r4, #12]
   b6300:	f002 fada 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.print("|");
   b6304:	f001 fd6e 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6308:	4911      	ldr	r1, [pc, #68]	; (b6350 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b630a:	f002 fad5 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   b630e:	f001 fd69 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6312:	4631      	mov	r1, r6
   b6314:	f002 fad0 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.print(":");
   b6318:	f001 fd64 	bl	b7de4 <_Z16_fetch_usbserialv>
   b631c:	490d      	ldr	r1, [pc, #52]	; (b6354 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b631e:	f002 facb 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   b6322:	f001 fd5f 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6326:	4629      	mov	r1, r5
   b6328:	f002 fac6 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.print("|end");
   b632c:	f001 fd5a 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6330:	4909      	ldr	r1, [pc, #36]	; (b6358 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b6332:	f002 fac1 	bl	b88b8 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   b6336:	f001 fd55 	bl	b7de4 <_Z16_fetch_usbserialv>
}
   b633a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   b633e:	4909      	ldr	r1, [pc, #36]	; (b6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   b6340:	f002 bacd 	b.w	b88de <_ZN5Print7printlnEPKc>
}
   b6344:	bd70      	pop	{r4, r5, r6, pc}
   b6346:	bf00      	nop
   b6348:	2003e640 	.word	0x2003e640
   b634c:	000bca8a 	.word	0x000bca8a
   b6350:	000bca8d 	.word	0x000bca8d
   b6354:	000bca33 	.word	0x000bca33
   b6358:	000bca5d 	.word	0x000bca5d
   b635c:	000bcaa5 	.word	0x000bcaa5
   b6360:	000bca8f 	.word	0x000bca8f
   b6364:	000bcaa4 	.word	0x000bcaa4

000b6368 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   b6368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b636a:	4f0e      	ldr	r7, [pc, #56]	; (b63a4 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   b636c:	4604      	mov	r4, r0
  int timeout = 0;
   b636e:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b6370:	4638      	mov	r0, r7
   b6372:	f001 fb1b 	bl	b79ac <_ZN9TCPClient9availableEv>
   b6376:	4605      	mov	r5, r0
   b6378:	b990      	cbnz	r0, b63a0 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   b637a:	69a3      	ldr	r3, [r4, #24]
   b637c:	42b3      	cmp	r3, r6
   b637e:	dd0f      	ble.n	b63a0 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   b6380:	2001      	movs	r0, #1
   b6382:	f002 f99d 	bl	b86c0 <delay>
    if (timeout > _timeout - 1) {
   b6386:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b6388:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b638a:	42b3      	cmp	r3, r6
   b638c:	dcf0      	bgt.n	b6370 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
   b638e:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b6390:	b128      	cbz	r0, b639e <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b6392:	f001 fd27 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6396:	4904      	ldr	r1, [pc, #16]	; (b63a8 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   b6398:	f002 faa1 	bl	b88de <_ZN5Print7printlnEPKc>
   b639c:	4628      	mov	r0, r5
}
   b639e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b63a0:	2001      	movs	r0, #1
   b63a2:	e7fc      	b.n	b639e <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   b63a4:	2003e640 	.word	0x2003e640
   b63a8:	000bc7be 	.word	0x000bc7be

000b63ac <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b63ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   b63b0:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b63b2:	4606      	mov	r6, r0
   b63b4:	4688      	mov	r8, r1
   b63b6:	4614      	mov	r4, r2
  if (_debug) {
   b63b8:	b14b      	cbz	r3, b63ce <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   b63ba:	f001 fd13 	bl	b7de4 <_Z16_fetch_usbserialv>
   b63be:	4927      	ldr	r1, [pc, #156]	; (b645c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   b63c0:	f002 fa8d 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b63c4:	f001 fd0e 	bl	b7de4 <_Z16_fetch_usbserialv>
   b63c8:	4925      	ldr	r1, [pc, #148]	; (b6460 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   b63ca:	f002 fa88 	bl	b88de <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b63ce:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6474 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b63d2:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b63d4:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b63d8:	4648      	mov	r0, r9
   b63da:	f001 fae7 	bl	b79ac <_ZN9TCPClient9availableEv>
   b63de:	b178      	cbz	r0, b6400 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   b63e0:	4648      	mov	r0, r9
   b63e2:	f001 f8f1 	bl	b75c8 <_ZN9TCPClient4readEv>
    if (_debug) {
   b63e6:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   b63e8:	b2c7      	uxtb	r7, r0
    if (_debug) {
   b63ea:	b12b      	cbz	r3, b63f8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   b63ec:	f001 fcfa 	bl	b7de4 <_Z16_fetch_usbserialv>
   b63f0:	6803      	ldr	r3, [r0, #0]
   b63f2:	4639      	mov	r1, r7
   b63f4:	689b      	ldr	r3, [r3, #8]
   b63f6:	4798      	blx	r3
    response[j] = c;
   b63f8:	5567      	strb	r7, [r4, r5]
    j++;
   b63fa:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b63fc:	4555      	cmp	r5, sl
   b63fe:	d1eb      	bne.n	b63d8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   b6400:	7d33      	ldrb	r3, [r6, #20]
   b6402:	b123      	cbz	r3, b640e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   b6404:	f001 fcee 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6408:	4916      	ldr	r1, [pc, #88]	; (b6464 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   b640a:	f002 fa68 	bl	b88de <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b640e:	2300      	movs	r3, #0
   b6410:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   b6412:	4915      	ldr	r1, [pc, #84]	; (b6468 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   b6414:	4640      	mov	r0, r8
   b6416:	f003 fe8c 	bl	ba132 <strcmp>
   b641a:	b968      	cbnz	r0, b6438 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   b641c:	4913      	ldr	r1, [pc, #76]	; (b646c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   b641e:	4620      	mov	r0, r4
   b6420:	f003 fee6 	bl	ba1f0 <strstr>
      result = 1;
   b6424:	ed9f 0a12 	vldr	s0, [pc, #72]	; b6470 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b6428:	2800      	cmp	r0, #0
   b642a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b642e:	bf18      	it	ne
   b6430:	eeb0 0a67 	vmovne.f32	s0, s15
}
   b6434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   b6438:	217c      	movs	r1, #124	; 0x7c
   b643a:	4620      	mov	r0, r4
   b643c:	f003 fe6c 	bl	ba118 <strchr>
  if (pch != NULL) {
   b6440:	b148      	cbz	r0, b6456 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   b6442:	3001      	adds	r0, #1
   b6444:	f003 fe1c 	bl	ba080 <atof>
   b6448:	ec51 0b10 	vmov	r0, r1, d0
   b644c:	f003 fda4 	bl	b9f98 <__aeabi_d2f>
   b6450:	ee00 0a10 	vmov	s0, r0
   b6454:	e7ee      	b.n	b6434 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   b6456:	ed9f 0a06 	vldr	s0, [pc, #24]	; b6470 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b645a:	e7eb      	b.n	b6434 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   b645c:	000bc7b3 	.word	0x000bc7b3
   b6460:	000bc79f 	.word	0x000bc79f
   b6464:	000bc7b2 	.word	0x000bc7b2
   b6468:	000bcaaa 	.word	0x000bcaaa
   b646c:	000bcaaf 	.word	0x000bcaaf
   b6470:	cda2425f 	.word	0xcda2425f
   b6474:	2003e640 	.word	0x2003e640

000b6478 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b6478:	b570      	push	{r4, r5, r6, lr}
   b647a:	ed2d 8b02 	vpush	{d8}
   b647e:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6480:	6841      	ldr	r1, [r0, #4]
   b6482:	4822      	ldr	r0, [pc, #136]	; (b650c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6484:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b6488:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b648a:	2300      	movs	r3, #0
   b648c:	f001 f932 	bl	b76f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6490:	4620      	mov	r0, r4
   b6492:	6861      	ldr	r1, [r4, #4]
   b6494:	f242 3234 	movw	r2, #9012	; 0x2334
   b6498:	f7ff fea8 	bl	b61ec <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b649c:	481b      	ldr	r0, [pc, #108]	; (b650c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b649e:	f001 f9a7 	bl	b77f0 <_ZN9TCPClient9connectedEv>
   b64a2:	b180      	cbz	r0, b64c6 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.print(payload);
   b64a4:	4629      	mov	r1, r5
   b64a6:	4819      	ldr	r0, [pc, #100]	; (b650c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b64a8:	f002 fa06 	bl	b88b8 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   b64ac:	4620      	mov	r0, r4
   b64ae:	f7ff ff5b 	bl	b6368 <_ZN6UbiTCP16waitServerAnswerEv>
   b64b2:	4605      	mov	r5, r0
   b64b4:	b980      	cbnz	r0, b64d8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x60>
    _client_tcp_ubi.stop();
   b64b6:	4815      	ldr	r0, [pc, #84]	; (b650c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b64b8:	f001 fad2 	bl	b7a60 <_ZN9TCPClient4stopEv>
    return false;
   b64bc:	2500      	movs	r5, #0
}
   b64be:	ecbd 8b02 	vpop	{d8}
   b64c2:	4628      	mov	r0, r5
   b64c4:	bd70      	pop	{r4, r5, r6, pc}
    if (_debug) {
   b64c6:	7d23      	ldrb	r3, [r4, #20]
   b64c8:	2b00      	cmp	r3, #0
   b64ca:	d0f4      	beq.n	b64b6 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   b64cc:	f001 fc8a 	bl	b7de4 <_Z16_fetch_usbserialv>
   b64d0:	490f      	ldr	r1, [pc, #60]	; (b6510 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   b64d2:	f002 fa04 	bl	b88de <_ZN5Print7printlnEPKc>
   b64d6:	e7ee      	b.n	b64b6 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
  char* response = (char*)malloc(sizeof(char) * 100);
   b64d8:	2064      	movs	r0, #100	; 0x64
   b64da:	f000 ff41 	bl	b7360 <malloc>
  float value = parseTCPAnswer("POST", response);
   b64de:	490d      	ldr	r1, [pc, #52]	; (b6514 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>)
   b64e0:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   b64e2:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   b64e4:	4620      	mov	r0, r4
   b64e6:	f7ff ff61 	bl	b63ac <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   b64ea:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   b64ec:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   b64f0:	f000 ff3e 	bl	b7370 <free>
  if (value != ERROR_VALUE) {
   b64f4:	eddf 7a08 	vldr	s15, [pc, #32]	; b6518 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>
   b64f8:	eeb4 8a67 	vcmp.f32	s16, s15
   b64fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6500:	d0d9      	beq.n	b64b6 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   b6502:	4802      	ldr	r0, [pc, #8]	; (b650c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6504:	f001 faac 	bl	b7a60 <_ZN9TCPClient4stopEv>
    return true;
   b6508:	e7d9      	b.n	b64be <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
   b650a:	bf00      	nop
   b650c:	2003e640 	.word	0x2003e640
   b6510:	000bcab2 	.word	0x000bcab2
   b6514:	000bcaaa 	.word	0x000bcaaa
   b6518:	cda2425f 	.word	0xcda2425f

000b651c <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b651c:	b570      	push	{r4, r5, r6, lr}
   b651e:	ed2d 8b02 	vpush	{d8}
   b6522:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6524:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b6526:	460d      	mov	r5, r1
   b6528:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b652a:	6841      	ldr	r1, [r0, #4]
   b652c:	481e      	ldr	r0, [pc, #120]	; (b65a8 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b652e:	f242 3234 	movw	r2, #9012	; 0x2334
   b6532:	f001 f8df 	bl	b76f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6536:	4620      	mov	r0, r4
   b6538:	6861      	ldr	r1, [r4, #4]
   b653a:	f242 3234 	movw	r2, #9012	; 0x2334
   b653e:	f7ff fe55 	bl	b61ec <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b6542:	4819      	ldr	r0, [pc, #100]	; (b65a8 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b6544:	f001 f954 	bl	b77f0 <_ZN9TCPClient9connectedEv>
   b6548:	b328      	cbz	r0, b6596 <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   b654a:	4620      	mov	r0, r4
   b654c:	4632      	mov	r2, r6
   b654e:	4629      	mov	r1, r5
   b6550:	f7ff fe98 	bl	b6284 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6554:	4620      	mov	r0, r4
   b6556:	f7ff ff07 	bl	b6368 <_ZN6UbiTCP16waitServerAnswerEv>
   b655a:	b948      	cbnz	r0, b6570 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   b655c:	4812      	ldr	r0, [pc, #72]	; (b65a8 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   b655e:	ed9f 8a13 	vldr	s16, [pc, #76]	; b65ac <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   b6562:	f001 fa7d 	bl	b7a60 <_ZN9TCPClient4stopEv>
}
   b6566:	eeb0 0a48 	vmov.f32	s0, s16
   b656a:	ecbd 8b02 	vpop	{d8}
   b656e:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6570:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6574:	f000 fef4 	bl	b7360 <malloc>
    float value = parseTCPAnswer("LV", response);
   b6578:	490d      	ldr	r1, [pc, #52]	; (b65b0 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   b657a:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b657c:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   b657e:	4620      	mov	r0, r4
   b6580:	f7ff ff14 	bl	b63ac <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   b6584:	4808      	ldr	r0, [pc, #32]	; (b65a8 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   b6586:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   b658a:	f001 fa69 	bl	b7a60 <_ZN9TCPClient4stopEv>
    free(response);
   b658e:	4628      	mov	r0, r5
   b6590:	f000 feee 	bl	b7370 <free>
    return value;
   b6594:	e7e7      	b.n	b6566 <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   b6596:	7d23      	ldrb	r3, [r4, #20]
   b6598:	2b00      	cmp	r3, #0
   b659a:	d0df      	beq.n	b655c <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   b659c:	f001 fc22 	bl	b7de4 <_Z16_fetch_usbserialv>
   b65a0:	4904      	ldr	r1, [pc, #16]	; (b65b4 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   b65a2:	f002 f99c 	bl	b88de <_ZN5Print7printlnEPKc>
   b65a6:	e7d9      	b.n	b655c <_ZN6UbiTCP3getEPKcS1_+0x40>
   b65a8:	2003e640 	.word	0x2003e640
   b65ac:	cda2425f 	.word	0xcda2425f
   b65b0:	000bcad0 	.word	0x000bcad0
   b65b4:	000bcad3 	.word	0x000bcad3

000b65b8 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   b65b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b65bc:	460d      	mov	r5, r1
   b65be:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b65c0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b65c4:	f000 fecc 	bl	b7360 <malloc>
  if (_debug) {
   b65c8:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b65ca:	4607      	mov	r7, r0
  if (_debug) {
   b65cc:	b14b      	cbz	r3, b65e2 <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   b65ce:	f001 fc09 	bl	b7de4 <_Z16_fetch_usbserialv>
   b65d2:	493a      	ldr	r1, [pc, #232]	; (b66bc <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   b65d4:	f002 f983 	bl	b88de <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b65d8:	f001 fc04 	bl	b7de4 <_Z16_fetch_usbserialv>
   b65dc:	4938      	ldr	r1, [pc, #224]	; (b66c0 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   b65de:	f002 f97e 	bl	b88de <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b65e2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b66d4 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   b65e6:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b65e8:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b65ec:	4648      	mov	r0, r9
   b65ee:	f001 f9dd 	bl	b79ac <_ZN9TCPClient9availableEv>
   b65f2:	b188      	cbz	r0, b6618 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   b65f4:	4648      	mov	r0, r9
   b65f6:	f000 ffe7 	bl	b75c8 <_ZN9TCPClient4readEv>
    if (_debug) {
   b65fa:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   b65fc:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   b6600:	b12b      	cbz	r3, b660e <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   b6602:	f001 fbef 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6606:	6803      	ldr	r3, [r0, #0]
   b6608:	4641      	mov	r1, r8
   b660a:	689b      	ldr	r3, [r3, #8]
   b660c:	4798      	blx	r3
    response[j] = c;
   b660e:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   b6612:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6614:	4556      	cmp	r6, sl
   b6616:	d1e9      	bne.n	b65ec <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   b6618:	7d2b      	ldrb	r3, [r5, #20]
   b661a:	b123      	cbz	r3, b6626 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   b661c:	f001 fbe2 	bl	b7de4 <_Z16_fetch_usbserialv>
   b6620:	4928      	ldr	r1, [pc, #160]	; (b66c4 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   b6622:	f002 f95c 	bl	b88de <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b6626:	2500      	movs	r5, #0
	  : _Node_allocator()
   b6628:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   b662a:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   b662e:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   b6632:	4925      	ldr	r1, [pc, #148]	; (b66c8 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   b6634:	7125      	strb	r5, [r4, #4]
   b6636:	4638      	mov	r0, r7
  response[j] = '\0';
   b6638:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   b663a:	f004 fc1f 	bl	bae7c <strtok>
    if (strcmp(token, "OK") == 0) {
   b663e:	f8df 9098 	ldr.w	r9, [pc, #152]	; b66d8 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   b6642:	f8df a098 	ldr.w	sl, [pc, #152]	; b66dc <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   b6646:	f8df 8080 	ldr.w	r8, [pc, #128]	; b66c8 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   b664a:	4606      	mov	r6, r0
  while (token != NULL) {
   b664c:	b37e      	cbz	r6, b66ae <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   b664e:	4649      	mov	r1, r9
   b6650:	4630      	mov	r0, r6
   b6652:	f003 fd6e 	bl	ba132 <strcmp>
   b6656:	bb00      	cbnz	r0, b669a <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   b6658:	4641      	mov	r1, r8
   b665a:	f004 fc0f 	bl	bae7c <strtok>
      if (strcmp(token, "null") == 0) {
   b665e:	491b      	ldr	r1, [pc, #108]	; (b66cc <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   b6660:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   b6662:	f003 fd66 	bl	ba132 <strcmp>
   b6666:	b918      	cbnz	r0, b6670 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b6668:	4b19      	ldr	r3, [pc, #100]	; (b66d0 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   b666a:	9500      	str	r5, [sp, #0]
   b666c:	9301      	str	r3, [sp, #4]
   b666e:	e008      	b.n	b6682 <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   b6670:	4630      	mov	r0, r6
   b6672:	f003 fd05 	bl	ba080 <atof>
   b6676:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b667a:	9500      	str	r5, [sp, #0]
   b667c:	f003 fc8c 	bl	b9f98 <__aeabi_d2f>
   b6680:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   b6682:	466a      	mov	r2, sp
   b6684:	4621      	mov	r1, r4
   b6686:	a802      	add	r0, sp, #8
   b6688:	f7ff fd2a 	bl	b60e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   b668c:	4641      	mov	r1, r8
   b668e:	2000      	movs	r0, #0
   b6690:	f004 fbf4 	bl	bae7c <strtok>
    mapKey++;
   b6694:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   b6696:	4606      	mov	r6, r0
  while (token != NULL) {
   b6698:	e7d8      	b.n	b664c <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   b669a:	4651      	mov	r1, sl
   b669c:	4630      	mov	r0, r6
   b669e:	f003 fd48 	bl	ba132 <strcmp>
   b66a2:	2800      	cmp	r0, #0
   b66a4:	d1f2      	bne.n	b668c <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   b66a6:	4641      	mov	r1, r8
   b66a8:	f004 fbe8 	bl	bae7c <strtok>
   b66ac:	e7dc      	b.n	b6668 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   b66ae:	4638      	mov	r0, r7
   b66b0:	f000 fe5e 	bl	b7370 <free>
}
   b66b4:	4620      	mov	r0, r4
   b66b6:	b004      	add	sp, #16
   b66b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b66bc:	000bc7b3 	.word	0x000bc7b3
   b66c0:	000bc79f 	.word	0x000bc79f
   b66c4:	000bc7b2 	.word	0x000bc7b2
   b66c8:	000bca8d 	.word	0x000bca8d
   b66cc:	000bcaf9 	.word	0x000bcaf9
   b66d0:	cda2425f 	.word	0xcda2425f
   b66d4:	2003e640 	.word	0x2003e640
   b66d8:	000bcaaf 	.word	0x000bcaaf
   b66dc:	000bcafe 	.word	0x000bcafe

000b66e0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b66e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   b66e4:	1d07      	adds	r7, r0, #4
   b66e6:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   b66e8:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b66ea:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   b66ee:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   b66f2:	7103      	strb	r3, [r0, #4]
   b66f4:	460d      	mov	r5, r1
   b66f6:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b66f8:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b66fa:	4604      	mov	r4, r0
   b66fc:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b66fe:	482d      	ldr	r0, [pc, #180]	; (b67b4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6700:	f242 3234 	movw	r2, #9012	; 0x2334
   b6704:	f000 fff6 	bl	b76f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6708:	4628      	mov	r0, r5
   b670a:	6869      	ldr	r1, [r5, #4]
   b670c:	f242 3234 	movw	r2, #9012	; 0x2334
   b6710:	f7ff fd6c 	bl	b61ec <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b6714:	4827      	ldr	r0, [pc, #156]	; (b67b4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6716:	f001 f86b 	bl	b77f0 <_ZN9TCPClient9connectedEv>
   b671a:	b310      	cbz	r0, b6762 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   b671c:	4631      	mov	r1, r6
   b671e:	4642      	mov	r2, r8
   b6720:	4628      	mov	r0, r5
   b6722:	f7ff fdaf 	bl	b6284 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6726:	4628      	mov	r0, r5
   b6728:	f7ff fe1e 	bl	b6368 <_ZN6UbiTCP16waitServerAnswerEv>
   b672c:	4606      	mov	r6, r0
   b672e:	b9c0      	cbnz	r0, b6762 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   b6730:	4820      	ldr	r0, [pc, #128]	; (b67b4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   b6732:	4f21      	ldr	r7, [pc, #132]	; (b67b8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   b6734:	f001 f994 	bl	b7a60 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   b6738:	4920      	ldr	r1, [pc, #128]	; (b67bc <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   b673a:	4640      	mov	r0, r8
   b673c:	f004 fb9e 	bl	bae7c <strtok>
      int mapKey = 0;
   b6740:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   b6742:	4e1e      	ldr	r6, [pc, #120]	; (b67bc <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
      while (token != NULL) {
   b6744:	2800      	cmp	r0, #0
   b6746:	d030      	beq.n	b67aa <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xca>
   b6748:	4621      	mov	r1, r4
   b674a:	a802      	add	r0, sp, #8
   b674c:	466a      	mov	r2, sp
   b674e:	9500      	str	r5, [sp, #0]
   b6750:	9701      	str	r7, [sp, #4]
   b6752:	f7ff fcc5 	bl	b60e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   b6756:	4631      	mov	r1, r6
   b6758:	2000      	movs	r0, #0
        mapKey++;
   b675a:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   b675c:	f004 fb8e 	bl	bae7c <strtok>
      while (token != NULL) {
   b6760:	e7f0      	b.n	b6744 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   b6762:	4629      	mov	r1, r5
   b6764:	a802      	add	r0, sp, #8
   b6766:	f7ff ff27 	bl	b65b8 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   b676a:	68a0      	ldr	r0, [r4, #8]
   b676c:	f7ff fd20 	bl	b61b0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      if (__x._M_root() != nullptr)
   b6770:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   b6772:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b6774:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   b6778:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   b677c:	b17a      	cbz	r2, b679e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xbe>
      _M_header._M_color = __from._M_header._M_color;
   b677e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b6782:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   b6784:	9905      	ldr	r1, [sp, #20]
   b6786:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   b6788:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   b678a:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   b678c:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   b678e:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   b6790:	9a07      	ldr	r2, [sp, #28]
   b6792:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   b6794:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   b6796:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   b679a:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   b679c:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   b679e:	9804      	ldr	r0, [sp, #16]
   b67a0:	f7ff fd06 	bl	b61b0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
  _client_tcp_ubi.stop();
   b67a4:	4803      	ldr	r0, [pc, #12]	; (b67b4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b67a6:	f001 f95b 	bl	b7a60 <_ZN9TCPClient4stopEv>
}
   b67aa:	4620      	mov	r0, r4
   b67ac:	b008      	add	sp, #32
   b67ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b67b2:	bf00      	nop
   b67b4:	2003e640 	.word	0x2003e640
   b67b8:	cda2425f 	.word	0xcda2425f
   b67bc:	000bca2a 	.word	0x000bca2a

000b67c0 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   b67c0:	4801      	ldr	r0, [pc, #4]	; (b67c8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   b67c2:	f001 b99d 	b.w	b7b00 <_ZN9TCPClientC1Ev>
   b67c6:	bf00      	nop
   b67c8:	2003e640 	.word	0x2003e640

000b67cc <_ZN9IPAddressC1ERKS_>:
   b67cc:	b570      	push	{r4, r5, r6, lr}
   b67ce:	4604      	mov	r4, r0
   b67d0:	4b05      	ldr	r3, [pc, #20]	; (b67e8 <_ZN9IPAddressC1ERKS_+0x1c>)
   b67d2:	f844 3b04 	str.w	r3, [r4], #4
   b67d6:	1d0d      	adds	r5, r1, #4
   b67d8:	4606      	mov	r6, r0
   b67da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67de:	682b      	ldr	r3, [r5, #0]
   b67e0:	7023      	strb	r3, [r4, #0]
   b67e2:	4630      	mov	r0, r6
   b67e4:	bd70      	pop	{r4, r5, r6, pc}
   b67e6:	bf00      	nop
   b67e8:	000bccb4 	.word	0x000bccb4

000b67ec <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   b67ec:	b538      	push	{r3, r4, r5, lr}
   b67ee:	4604      	mov	r4, r0
   b67f0:	3098      	adds	r0, #152	; 0x98
   b67f2:	460d      	mov	r5, r1
   b67f4:	f001 fb56 	bl	b7ea4 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   b67f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b67fc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   b6800:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   b6802:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   b6804:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   b6808:	4620      	mov	r0, r4
   b680a:	bd38      	pop	{r3, r4, r5, pc}

000b680c <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   b680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6810:	4605      	mov	r5, r0
   b6812:	460e      	mov	r6, r1
   b6814:	f000 fc24 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b6818:	f643 2897 	movw	r8, #14999	; 0x3a97
   b681c:	4607      	mov	r7, r0
   while(!_client->available()) {
   b681e:	6828      	ldr	r0, [r5, #0]
   b6820:	6803      	ldr	r3, [r0, #0]
   b6822:	691b      	ldr	r3, [r3, #16]
   b6824:	4798      	blx	r3
   b6826:	4604      	mov	r4, r0
   b6828:	b930      	cbnz	r0, b6838 <_ZN12PubSubClient8readByteEPh+0x2c>
   b682a:	f000 fc19 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b682e:	1bc3      	subs	r3, r0, r7
   b6830:	4543      	cmp	r3, r8
   b6832:	d9f4      	bls.n	b681e <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   b6834:	4620      	mov	r0, r4
   b6836:	e005      	b.n	b6844 <_ZN12PubSubClient8readByteEPh+0x38>
   b6838:	6828      	ldr	r0, [r5, #0]
   *result = _client->read();
   b683a:	6803      	ldr	r3, [r0, #0]
   b683c:	695b      	ldr	r3, [r3, #20]
   b683e:	4798      	blx	r3
   b6840:	7030      	strb	r0, [r6, #0]
   b6842:	2001      	movs	r0, #1
}
   b6844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6848 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b6848:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   b684a:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   b684c:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b684e:	4614      	mov	r4, r2
  if(readByte(write_address)){
   b6850:	f7ff ffdc 	bl	b680c <_ZN12PubSubClient8readByteEPh>
   b6854:	b108      	cbz	r0, b685a <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   b6856:	3501      	adds	r5, #1
   b6858:	8025      	strh	r5, [r4, #0]
}
   b685a:	bd38      	pop	{r3, r4, r5, pc}

000b685c <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b685c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   b6860:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b6862:	4688      	mov	r8, r1
    uint16_t len = 0;
   b6864:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   b6866:	f10d 0206 	add.w	r2, sp, #6
   b686a:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b686c:	4604      	mov	r4, r0
    uint16_t len = 0;
   b686e:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   b6872:	f7ff ffe9 	bl	b6848 <_ZN12PubSubClient8readByteEPhPt>
   b6876:	b918      	cbnz	r0, b6880 <_ZN12PubSubClient10readPacketEPh+0x24>
   b6878:	2000      	movs	r0, #0
}
   b687a:	b003      	add	sp, #12
   b687c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6880:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   b6884:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   b6888:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   b688a:	f10d 0105 	add.w	r1, sp, #5
   b688e:	4620      	mov	r0, r4
   b6890:	f7ff ffbc 	bl	b680c <_ZN12PubSubClient8readByteEPh>
   b6894:	2800      	cmp	r0, #0
   b6896:	d0ef      	beq.n	b6878 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   b6898:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b689c:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b68a0:	1c53      	adds	r3, r2, #1
   b68a2:	4422      	add	r2, r4
   b68a4:	b29b      	uxth	r3, r3
   b68a6:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   b68a8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   b68ac:	fb12 f206 	smulbb	r2, r2, r6
   b68b0:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   b68b2:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   b68b4:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   b68b8:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b68ba:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   b68be:	d4e4      	bmi.n	b688a <_ZN12PubSubClient10readPacketEPh+0x2e>
   b68c0:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   b68c4:	3b01      	subs	r3, #1
    if (isPublish) {
   b68c6:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   b68ca:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b68ce:	d11e      	bne.n	b690e <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   b68d0:	f10d 0206 	add.w	r2, sp, #6
   b68d4:	4629      	mov	r1, r5
   b68d6:	4620      	mov	r0, r4
   b68d8:	f7ff ffb6 	bl	b6848 <_ZN12PubSubClient8readByteEPhPt>
   b68dc:	2800      	cmp	r0, #0
   b68de:	d0cb      	beq.n	b6878 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   b68e0:	f10d 0206 	add.w	r2, sp, #6
   b68e4:	4629      	mov	r1, r5
   b68e6:	4620      	mov	r0, r4
   b68e8:	f7ff ffae 	bl	b6848 <_ZN12PubSubClient8readByteEPhPt>
   b68ec:	2800      	cmp	r0, #0
   b68ee:	d0c3      	beq.n	b6878 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b68f0:	f898 3000 	ldrb.w	r3, [r8]
   b68f4:	4423      	add	r3, r4
   b68f6:	795a      	ldrb	r2, [r3, #5]
   b68f8:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   b68fa:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b68fc:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   b6900:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b6902:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   b6904:	d501      	bpl.n	b690a <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   b6906:	3602      	adds	r6, #2
   b6908:	b2b6      	uxth	r6, r6
        start = 2;
   b690a:	2502      	movs	r5, #2
   b690c:	e001      	b.n	b6912 <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   b690e:	2500      	movs	r5, #0
    uint16_t skip = 0;
   b6910:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   b6912:	b2ad      	uxth	r5, r5
   b6914:	42bd      	cmp	r5, r7
   b6916:	d226      	bcs.n	b6966 <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   b6918:	f10d 0105 	add.w	r1, sp, #5
   b691c:	4620      	mov	r0, r4
   b691e:	f7ff ff75 	bl	b680c <_ZN12PubSubClient8readByteEPh>
   b6922:	2800      	cmp	r0, #0
   b6924:	d0a8      	beq.n	b6878 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   b6926:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b692a:	b178      	cbz	r0, b694c <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   b692c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   b6930:	d10c      	bne.n	b694c <_ZN12PubSubClient10readPacketEPh+0xf0>
   b6932:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b6936:	f898 2000 	ldrb.w	r2, [r8]
   b693a:	1a9b      	subs	r3, r3, r2
   b693c:	3b02      	subs	r3, #2
   b693e:	42b3      	cmp	r3, r6
   b6940:	dd04      	ble.n	b694c <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   b6942:	6803      	ldr	r3, [r0, #0]
   b6944:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b6948:	689b      	ldr	r3, [r3, #8]
   b694a:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   b694c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b6950:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   b6952:	bf9e      	ittt	ls
   b6954:	18e2      	addls	r2, r4, r3
   b6956:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   b695a:	7111      	strbls	r1, [r2, #4]
        len++;
   b695c:	3301      	adds	r3, #1
   b695e:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   b6962:	3501      	adds	r5, #1
   b6964:	e7d5      	b.n	b6912 <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   b6966:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b696a:	b92b      	cbnz	r3, b6978 <_ZN12PubSubClient10readPacketEPh+0x11c>
   b696c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b6970:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   b6972:	bf88      	it	hi
   b6974:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   b6978:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b697c:	e77d      	b.n	b687a <_ZN12PubSubClient10readPacketEPh+0x1e>

000b697e <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b697e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6982:	4615      	mov	r5, r2
   b6984:	461e      	mov	r6, r3
    uint16_t len = length;
   b6986:	461a      	mov	r2, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6988:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b698a:	2300      	movs	r3, #0
        digit = len % 128;
   b698c:	4696      	mov	lr, r2
        lenBuf[pos++] = digit;
   b698e:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6990:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b6994:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b6998:	f103 0401 	add.w	r4, r3, #1
   b699c:	4403      	add	r3, r0
            digit |= 0x80;
   b699e:	bf88      	it	hi
   b69a0:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
    } while(len>0);
   b69a4:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b69a8:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b69ac:	b2e4      	uxtb	r4, r4
   b69ae:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len>0);
   b69b2:	d820      	bhi.n	b69f6 <_ZN12PubSubClient5writeEhPht+0x78>
    buf[4-llen] = header;
   b69b4:	f1c4 0304 	rsb	r3, r4, #4
        buf[5-llen+i] = lenBuf[i];
   b69b8:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b69bc:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b69be:	4622      	mov	r2, r4
   b69c0:	a901      	add	r1, sp, #4
   b69c2:	4428      	add	r0, r5
    buf[4-llen] = header;
   b69c4:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b69c8:	f003 fb61 	bl	ba08e <memcpy>
    rc = _client->write(buf+(4-llen),length+1+llen);
   b69cc:	6838      	ldr	r0, [r7, #0]
   b69ce:	6803      	ldr	r3, [r0, #0]
   b69d0:	1c72      	adds	r2, r6, #1
   b69d2:	4422      	add	r2, r4
   b69d4:	68db      	ldr	r3, [r3, #12]
   b69d6:	4641      	mov	r1, r8
   b69d8:	4798      	blx	r3
   b69da:	4605      	mov	r5, r0
   b69dc:	f000 fb40 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   b69e0:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b69e2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   b69e6:	4432      	add	r2, r6
   b69e8:	b2a8      	uxth	r0, r5
}
   b69ea:	1a13      	subs	r3, r2, r0
   b69ec:	4258      	negs	r0, r3
   b69ee:	4158      	adcs	r0, r3
   b69f0:	b002      	add	sp, #8
   b69f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b69f6:	4623      	mov	r3, r4
   b69f8:	e7c8      	b.n	b698c <_ZN12PubSubClient5writeEhPht+0xe>

000b69fa <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   b69fa:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b69fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    while (*idp) {
   b69fe:	3901      	subs	r1, #1
    pos += 2;
   b6a00:	b29c      	uxth	r4, r3
   b6a02:	2300      	movs	r3, #0
    while (*idp) {
   b6a04:	1c5e      	adds	r6, r3, #1
   b6a06:	fa14 f083 	uxtah	r0, r4, r3
   b6a0a:	5d8f      	ldrb	r7, [r1, r6]
   b6a0c:	b29d      	uxth	r5, r3
   b6a0e:	b280      	uxth	r0, r0
   b6a10:	b117      	cbz	r7, b6a18 <_ZN12PubSubClient11writeStringEPKcPht+0x1e>
        buf[pos++] = *idp++;
   b6a12:	5417      	strb	r7, [r2, r0]
    while (*idp) {
   b6a14:	4633      	mov	r3, r6
   b6a16:	e7f5      	b.n	b6a04 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   b6a18:	b299      	uxth	r1, r3
   b6a1a:	1a41      	subs	r1, r0, r1
   b6a1c:	440a      	add	r2, r1
   b6a1e:	0a29      	lsrs	r1, r5, #8
   b6a20:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b6a24:	f802 3c01 	strb.w	r3, [r2, #-1]
}
   b6a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a2a <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   b6a2a:	b538      	push	{r3, r4, r5, lr}
   b6a2c:	4604      	mov	r4, r0
    if (_client == NULL ) {
   b6a2e:	6800      	ldr	r0, [r0, #0]
   b6a30:	b908      	cbnz	r0, b6a36 <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   b6a32:	2000      	movs	r0, #0
}
   b6a34:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   b6a36:	6803      	ldr	r3, [r0, #0]
   b6a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a3a:	4798      	blx	r3
        if (!rc) {
   b6a3c:	b980      	cbnz	r0, b6a60 <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   b6a3e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   b6a42:	2d00      	cmp	r5, #0
   b6a44:	d1f5      	bne.n	b6a32 <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   b6a46:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   b6a48:	f06f 0302 	mvn.w	r3, #2
   b6a4c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   b6a50:	6803      	ldr	r3, [r0, #0]
   b6a52:	69db      	ldr	r3, [r3, #28]
   b6a54:	4798      	blx	r3
                _client->stop();
   b6a56:	6820      	ldr	r0, [r4, #0]
   b6a58:	6803      	ldr	r3, [r0, #0]
   b6a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a5c:	4798      	blx	r3
   b6a5e:	e7e8      	b.n	b6a32 <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   b6a60:	2001      	movs	r0, #1
   b6a62:	e7e7      	b.n	b6a34 <_ZN12PubSubClient9connectedEv+0xa>

000b6a64 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   b6a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a68:	b08b      	sub	sp, #44	; 0x2c
   b6a6a:	4604      	mov	r4, r0
   b6a6c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   b6a70:	4689      	mov	r9, r1
   b6a72:	4617      	mov	r7, r2
   b6a74:	461e      	mov	r6, r3
    if (!connected()) {
   b6a76:	f7ff ffd8 	bl	b6a2a <_ZN12PubSubClient9connectedEv>
   b6a7a:	4605      	mov	r5, r0
   b6a7c:	2800      	cmp	r0, #0
   b6a7e:	f040 80a5 	bne.w	b6bcc <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->domain, this->port);
   b6a82:	f8d4 a000 	ldr.w	sl, [r4]
        if (domain != NULL) {
   b6a86:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
            result = _client->connect(this->domain, this->port);
   b6a8a:	f8da 3000 	ldr.w	r3, [sl]
        if (domain != NULL) {
   b6a8e:	2900      	cmp	r1, #0
   b6a90:	d079      	beq.n	b6b86 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x122>
            result = _client->connect(this->domain, this->port);
   b6a92:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b6a96:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b6a9a:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   b6a9c:	4650      	mov	r0, sl
   b6a9e:	47d8      	blx	fp
        if (result == 1) {
   b6aa0:	2801      	cmp	r0, #1
   b6aa2:	f040 809a 	bne.w	b6bda <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x176>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6aa6:	4b4f      	ldr	r3, [pc, #316]	; (b6be4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x180>)
            nextMsgId = 1;
   b6aa8:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6aac:	889a      	ldrh	r2, [r3, #4]
   b6aae:	f8ad 2014 	strh.w	r2, [sp, #20]
   b6ab2:	6818      	ldr	r0, [r3, #0]
                buffer[length++] = d[j];
   b6ab4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b6ab8:	799b      	ldrb	r3, [r3, #6]
   b6aba:	9004      	str	r0, [sp, #16]
   b6abc:	f88d 3016 	strb.w	r3, [sp, #22]
                buffer[length++] = d[j];
   b6ac0:	f8c4 0009 	str.w	r0, [r4, #9]
   b6ac4:	f8a4 200d 	strh.w	r2, [r4, #13]
   b6ac8:	73e3      	strb	r3, [r4, #15]
            if (willTopic) {
   b6aca:	f1b8 0f00 	cmp.w	r8, #0
   b6ace:	d066      	beq.n	b6b9e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13a>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6ad0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b6ad4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b6ad8:	015b      	lsls	r3, r3, #5
   b6ada:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   b6ade:	f043 0306 	orr.w	r3, r3, #6
   b6ae2:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   b6ae4:	b11f      	cbz	r7, b6aee <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
                if(pass != NULL) {
   b6ae6:	2e00      	cmp	r6, #0
   b6ae8:	d15b      	bne.n	b6ba2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13e>
                v = v|0x80;
   b6aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   b6aee:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   b6af0:	2300      	movs	r3, #0
   b6af2:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b6af4:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   b6af6:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b6af8:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   b6afa:	4649      	mov	r1, r9
   b6afc:	4620      	mov	r0, r4
   b6afe:	9201      	str	r2, [sp, #4]
   b6b00:	f7ff ff7b 	bl	b69fa <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   b6b04:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   b6b06:	4603      	mov	r3, r0
            if (willTopic) {
   b6b08:	f1b8 0f00 	cmp.w	r8, #0
   b6b0c:	d00b      	beq.n	b6b26 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xc2>
                length = writeString(willTopic,buffer,length);
   b6b0e:	4641      	mov	r1, r8
   b6b10:	4620      	mov	r0, r4
   b6b12:	f7ff ff72 	bl	b69fa <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   b6b16:	9a01      	ldr	r2, [sp, #4]
   b6b18:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   b6b1a:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   b6b1c:	4620      	mov	r0, r4
   b6b1e:	f7ff ff6c 	bl	b69fa <_ZN12PubSubClient11writeStringEPKcPht>
   b6b22:	9a01      	ldr	r2, [sp, #4]
   b6b24:	4603      	mov	r3, r0
            if(user != NULL) {
   b6b26:	b16f      	cbz	r7, b6b44 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                length = writeString(user,buffer,length);
   b6b28:	4639      	mov	r1, r7
   b6b2a:	4620      	mov	r0, r4
   b6b2c:	9201      	str	r2, [sp, #4]
   b6b2e:	f7ff ff64 	bl	b69fa <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   b6b32:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   b6b34:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6b36:	b12e      	cbz	r6, b6b44 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                    length = writeString(pass,buffer,length);
   b6b38:	4631      	mov	r1, r6
   b6b3a:	4620      	mov	r0, r4
   b6b3c:	f7ff ff5d 	bl	b69fa <_ZN12PubSubClient11writeStringEPKcPht>
   b6b40:	9a01      	ldr	r2, [sp, #4]
   b6b42:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   b6b44:	3b05      	subs	r3, #5
   b6b46:	b29b      	uxth	r3, r3
   b6b48:	2110      	movs	r1, #16
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	f7ff ff17 	bl	b697e <_ZN12PubSubClient5writeEhPht>
   b6b50:	f000 fa86 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6b54:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b6b58:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   b6b5c:	6820      	ldr	r0, [r4, #0]
   b6b5e:	6803      	ldr	r3, [r0, #0]
   b6b60:	691b      	ldr	r3, [r3, #16]
   b6b62:	4798      	blx	r3
   b6b64:	bb00      	cbnz	r0, b6ba8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x144>
   b6b66:	f000 fa7b 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b6b6a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b6b6e:	1ac0      	subs	r0, r0, r3
   b6b70:	42b0      	cmp	r0, r6
   b6b72:	d9f3      	bls.n	b6b5c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xf8>
                    _state = MQTT_CONNECTION_TIMEOUT;
   b6b74:	f06f 0303 	mvn.w	r3, #3
   b6b78:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   b6b7c:	6820      	ldr	r0, [r4, #0]
   b6b7e:	6803      	ldr	r3, [r0, #0]
   b6b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b82:	4798      	blx	r3
   b6b84:	e022      	b.n	b6bcc <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->ip, this->port);
   b6b86:	f104 0198 	add.w	r1, r4, #152	; 0x98
   b6b8a:	a804      	add	r0, sp, #16
   b6b8c:	f8d3 b020 	ldr.w	fp, [r3, #32]
   b6b90:	f7ff fe1c 	bl	b67cc <_ZN9IPAddressC1ERKS_>
   b6b94:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b6b98:	462b      	mov	r3, r5
   b6b9a:	a904      	add	r1, sp, #16
   b6b9c:	e77e      	b.n	b6a9c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   b6b9e:	2302      	movs	r3, #2
   b6ba0:	e7a0      	b.n	b6ae4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x80>
                    v = v|(0x80>>1);
   b6ba2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   b6ba6:	e7a2      	b.n	b6aee <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
            uint16_t len = readPacket(&llen);
   b6ba8:	f10d 010f 	add.w	r1, sp, #15
   b6bac:	4620      	mov	r0, r4
   b6bae:	f7ff fe55 	bl	b685c <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   b6bb2:	2804      	cmp	r0, #4
   b6bb4:	d1e2      	bne.n	b6b7c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
                if (buffer[3] == 0) {
   b6bb6:	79e6      	ldrb	r6, [r4, #7]
   b6bb8:	b966      	cbnz	r6, b6bd4 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   b6bba:	f000 fa51 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6bbe:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6bc0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   b6bc4:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   b6bc8:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   b6bcc:	4628      	mov	r0, r5
   b6bce:	b00b      	add	sp, #44	; 0x2c
   b6bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   b6bd4:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   b6bd8:	e7d0      	b.n	b6b7c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
            _state = MQTT_CONNECT_FAILED;
   b6bda:	f06f 0301 	mvn.w	r3, #1
   b6bde:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   b6be2:	e7f3      	b.n	b6bcc <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
   b6be4:	000bcb1c 	.word	0x000bcb1c

000b6be8 <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   b6be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   b6bea:	2400      	movs	r4, #0
   b6bec:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b6bf0:	e9cd 4400 	strd	r4, r4, [sp]
   b6bf4:	f7ff ff36 	bl	b6a64 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   b6bf8:	b004      	add	sp, #16
   b6bfa:	bd10      	pop	{r4, pc}

000b6bfc <_ZN12PubSubClient4loopEv>:
boolean PubSubClient::loop() {
   b6bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c00:	b085      	sub	sp, #20
   b6c02:	af00      	add	r7, sp, #0
   b6c04:	4604      	mov	r4, r0
    if (connected()) {
   b6c06:	f7ff ff10 	bl	b6a2a <_ZN12PubSubClient9connectedEv>
   b6c0a:	4681      	mov	r9, r0
   b6c0c:	b1d8      	cbz	r0, b6c46 <_ZN12PubSubClient4loopEv+0x4a>
   b6c0e:	f000 fa27 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   b6c12:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b6c16:	f643 2298 	movw	r2, #15000	; 0x3a98
   b6c1a:	1ac3      	subs	r3, r0, r3
   b6c1c:	4293      	cmp	r3, r2
   b6c1e:	4680      	mov	r8, r0
   b6c20:	d804      	bhi.n	b6c2c <_ZN12PubSubClient4loopEv+0x30>
   b6c22:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   b6c26:	1ac3      	subs	r3, r0, r3
   b6c28:	4293      	cmp	r3, r2
   b6c2a:	d91e      	bls.n	b6c6a <_ZN12PubSubClient4loopEv+0x6e>
            if (pingOutstanding) {
   b6c2c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
                _client->stop();
   b6c30:	6820      	ldr	r0, [r4, #0]
            if (pingOutstanding) {
   b6c32:	b16b      	cbz	r3, b6c50 <_ZN12PubSubClient4loopEv+0x54>
                this->_state = MQTT_CONNECTION_TIMEOUT;
   b6c34:	f06f 0303 	mvn.w	r3, #3
   b6c38:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->stop();
   b6c3c:	6803      	ldr	r3, [r0, #0]
   b6c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c40:	4798      	blx	r3
                return false;
   b6c42:	f04f 0900 	mov.w	r9, #0
}
   b6c46:	4648      	mov	r0, r9
   b6c48:	3714      	adds	r7, #20
   b6c4a:	46bd      	mov	sp, r7
   b6c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6c50:	4621      	mov	r1, r4
   b6c52:	23c0      	movs	r3, #192	; 0xc0
   b6c54:	f821 3f04 	strh.w	r3, [r1, #4]!
                _client->write(buffer,2);
   b6c58:	6803      	ldr	r3, [r0, #0]
   b6c5a:	2202      	movs	r2, #2
   b6c5c:	68db      	ldr	r3, [r3, #12]
   b6c5e:	4798      	blx	r3
                lastInActivity = t;
   b6c60:	e9c4 8822 	strd	r8, r8, [r4, #136]	; 0x88
                pingOutstanding = true;
   b6c64:	2301      	movs	r3, #1
   b6c66:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        if (_client->available()) {
   b6c6a:	6820      	ldr	r0, [r4, #0]
   b6c6c:	6803      	ldr	r3, [r0, #0]
   b6c6e:	691b      	ldr	r3, [r3, #16]
   b6c70:	4798      	blx	r3
   b6c72:	2800      	cmp	r0, #0
   b6c74:	d0e7      	beq.n	b6c46 <_ZN12PubSubClient4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
   b6c76:	f107 010f 	add.w	r1, r7, #15
   b6c7a:	4620      	mov	r0, r4
   b6c7c:	f7ff fdee 	bl	b685c <_ZN12PubSubClient10readPacketEPh>
            if (len > 0) {
   b6c80:	4605      	mov	r5, r0
   b6c82:	2800      	cmp	r0, #0
   b6c84:	d0df      	beq.n	b6c46 <_ZN12PubSubClient4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
   b6c86:	7923      	ldrb	r3, [r4, #4]
   b6c88:	607b      	str	r3, [r7, #4]
   b6c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6c8e:	2b30      	cmp	r3, #48	; 0x30
                lastInActivity = t;
   b6c90:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                if (type == MQTTPUBLISH) {
   b6c94:	d14d      	bne.n	b6d32 <_ZN12PubSubClient4loopEv+0x136>
                    if (callback) {
   b6c96:	f8d4 a094 	ldr.w	sl, [r4, #148]	; 0x94
   b6c9a:	f1ba 0f00 	cmp.w	sl, #0
   b6c9e:	d0d2      	beq.n	b6c46 <_ZN12PubSubClient4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b6ca0:	7bfe      	ldrb	r6, [r7, #15]
   b6ca2:	19a3      	adds	r3, r4, r6
                        }
   b6ca4:	46eb      	mov	fp, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b6ca6:	7959      	ldrb	r1, [r3, #5]
   b6ca8:	799a      	ldrb	r2, [r3, #6]
   b6caa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   b6cae:	b292      	uxth	r2, r2
                        char topic[tl+1];
   b6cb0:	f102 0308 	add.w	r3, r2, #8
   b6cb4:	08db      	lsrs	r3, r3, #3
   b6cb6:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
   b6cba:	469d      	mov	sp, r3
                            topic[i] = buffer[llen+3+i];
   b6cbc:	1df1      	adds	r1, r6, #7
   b6cbe:	4421      	add	r1, r4
   b6cc0:	4668      	mov	r0, sp
   b6cc2:	603a      	str	r2, [r7, #0]
   b6cc4:	f003 f9e3 	bl	ba08e <memcpy>
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6cc8:	6879      	ldr	r1, [r7, #4]
                        topic[tl] = 0;
   b6cca:	683a      	ldr	r2, [r7, #0]
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6ccc:	f001 0106 	and.w	r1, r1, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6cd0:	1ba8      	subs	r0, r5, r6
                        topic[tl] = 0;
   b6cd2:	2300      	movs	r3, #0
                            callback(topic,payload,len-llen-3-tl-2);
   b6cd4:	3803      	subs	r0, #3
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6cd6:	2902      	cmp	r1, #2
   b6cd8:	f106 0103 	add.w	r1, r6, #3
                        topic[tl] = 0;
   b6cdc:	f80d 3002 	strb.w	r3, [sp, r2]
                            callback(topic,payload,len-llen-3-tl-2);
   b6ce0:	eba0 0002 	sub.w	r0, r0, r2
                _client->write(buffer,2);
   b6ce4:	f104 0304 	add.w	r3, r4, #4
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6ce8:	4411      	add	r1, r2
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b6cea:	d11d      	bne.n	b6d28 <_ZN12PubSubClient4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6cec:	4421      	add	r1, r4
                            callback(topic,payload,len-llen-3-tl-2);
   b6cee:	607b      	str	r3, [r7, #4]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6cf0:	f891 c004 	ldrb.w	ip, [r1, #4]
   b6cf4:	794d      	ldrb	r5, [r1, #5]
                            payload = buffer+llen+3+tl+2;
   b6cf6:	1d71      	adds	r1, r6, #5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6cf8:	eb05 250c 	add.w	r5, r5, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
   b6cfc:	4411      	add	r1, r2
                            callback(topic,payload,len-llen-3-tl-2);
   b6cfe:	4419      	add	r1, r3
   b6d00:	1e82      	subs	r2, r0, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6d02:	b2ad      	uxth	r5, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6d04:	4668      	mov	r0, sp
   b6d06:	47d0      	blx	sl
                            buffer[2] = (msgId >> 8);
   b6d08:	ba6d      	rev16	r5, r5
                            _client->write(buffer,4);
   b6d0a:	6820      	ldr	r0, [r4, #0]
                            buffer[2] = (msgId >> 8);
   b6d0c:	80e5      	strh	r5, [r4, #6]
                            buffer[0] = MQTTPUBACK;
   b6d0e:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6d12:	80a2      	strh	r2, [r4, #4]
                            _client->write(buffer,4);
   b6d14:	6802      	ldr	r2, [r0, #0]
   b6d16:	687b      	ldr	r3, [r7, #4]
   b6d18:	68d5      	ldr	r5, [r2, #12]
   b6d1a:	4619      	mov	r1, r3
   b6d1c:	2204      	movs	r2, #4
   b6d1e:	47a8      	blx	r5
                            lastOutActivity = t;
   b6d20:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
   b6d24:	46dd      	mov	sp, fp
   b6d26:	e78e      	b.n	b6c46 <_ZN12PubSubClient4loopEv+0x4a>
                            callback(topic,payload,len-llen-3-tl);
   b6d28:	4602      	mov	r2, r0
   b6d2a:	4419      	add	r1, r3
   b6d2c:	4668      	mov	r0, sp
   b6d2e:	47d0      	blx	sl
   b6d30:	e7f8      	b.n	b6d24 <_ZN12PubSubClient4loopEv+0x128>
                } else if (type == MQTTPINGREQ) {
   b6d32:	2bc0      	cmp	r3, #192	; 0xc0
   b6d34:	d109      	bne.n	b6d4a <_ZN12PubSubClient4loopEv+0x14e>
                    buffer[0] = MQTTPINGRESP;
   b6d36:	23d0      	movs	r3, #208	; 0xd0
                    _client->write(buffer,2);
   b6d38:	4621      	mov	r1, r4
                    buffer[0] = MQTTPINGRESP;
   b6d3a:	80a3      	strh	r3, [r4, #4]
                    _client->write(buffer,2);
   b6d3c:	f851 0b04 	ldr.w	r0, [r1], #4
   b6d40:	6803      	ldr	r3, [r0, #0]
   b6d42:	2202      	movs	r2, #2
   b6d44:	68db      	ldr	r3, [r3, #12]
   b6d46:	4798      	blx	r3
   b6d48:	e77d      	b.n	b6c46 <_ZN12PubSubClient4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
   b6d4a:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
   b6d4c:	bf04      	itt	eq
   b6d4e:	2300      	moveq	r3, #0
   b6d50:	f884 3090 	strbeq.w	r3, [r4, #144]	; 0x90
   b6d54:	e777      	b.n	b6c46 <_ZN12PubSubClient4loopEv+0x4a>

000b6d56 <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   b6d56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6d5a:	4604      	mov	r4, r0
   b6d5c:	f89d 7020 	ldrb.w	r7, [sp, #32]
   b6d60:	4688      	mov	r8, r1
   b6d62:	4616      	mov	r6, r2
   b6d64:	461d      	mov	r5, r3
    if (connected()) {
   b6d66:	f7ff fe60 	bl	b6a2a <_ZN12PubSubClient9connectedEv>
   b6d6a:	b338      	cbz	r0, b6dbc <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   b6d6c:	4640      	mov	r0, r8
   b6d6e:	f003 fa10 	bl	ba192 <strlen>
   b6d72:	1deb      	adds	r3, r5, #7
   b6d74:	4418      	add	r0, r3
   b6d76:	2880      	cmp	r0, #128	; 0x80
   b6d78:	d820      	bhi.n	b6dbc <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   b6d7a:	1d22      	adds	r2, r4, #4
   b6d7c:	2305      	movs	r3, #5
   b6d7e:	4641      	mov	r1, r8
   b6d80:	4620      	mov	r0, r4
   b6d82:	9201      	str	r2, [sp, #4]
   b6d84:	f7ff fe39 	bl	b69fa <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   b6d88:	9a01      	ldr	r2, [sp, #4]
   b6d8a:	2300      	movs	r3, #0
   b6d8c:	18c1      	adds	r1, r0, r3
   b6d8e:	429d      	cmp	r5, r3
   b6d90:	b289      	uxth	r1, r1
   b6d92:	d907      	bls.n	b6da4 <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   b6d94:	4421      	add	r1, r4
   b6d96:	f816 c003 	ldrb.w	ip, [r6, r3]
   b6d9a:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   b6d9e:	3301      	adds	r3, #1
   b6da0:	b29b      	uxth	r3, r3
   b6da2:	e7f3      	b.n	b6d8c <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   b6da4:	1f4b      	subs	r3, r1, #5
            header |= 1;
   b6da6:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   b6da8:	b29b      	uxth	r3, r3
   b6daa:	bf0c      	ite	eq
   b6dac:	2130      	moveq	r1, #48	; 0x30
   b6dae:	2131      	movne	r1, #49	; 0x31
   b6db0:	4620      	mov	r0, r4
}
   b6db2:	b002      	add	sp, #8
   b6db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   b6db8:	f7ff bde1 	b.w	b697e <_ZN12PubSubClient5writeEhPht>
}
   b6dbc:	2000      	movs	r0, #0
   b6dbe:	b002      	add	sp, #8
   b6dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6dc4 <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b6dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6dc6:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b6dc8:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b6dca:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b6dcc:	9202      	str	r2, [sp, #8]
   b6dce:	f003 f9e0 	bl	ba192 <strlen>
   b6dd2:	4603      	mov	r3, r0
   b6dd4:	2000      	movs	r0, #0
   b6dd6:	9000      	str	r0, [sp, #0]
   b6dd8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b6ddc:	4620      	mov	r0, r4
   b6dde:	f7ff ffba 	bl	b6d56 <_ZN12PubSubClient7publishEPKcPKhjb>
}
   b6de2:	b004      	add	sp, #16
   b6de4:	bd10      	pop	{r4, pc}

000b6de6 <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   b6de6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   b6dea:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   b6dee:	4770      	bx	lr

000b6df0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6df0:	b508      	push	{r3, lr}
   b6df2:	4b02      	ldr	r3, [pc, #8]	; (b6dfc <HAL_USB_USART_Init+0xc>)
   b6df4:	681b      	ldr	r3, [r3, #0]
   b6df6:	681b      	ldr	r3, [r3, #0]
   b6df8:	9301      	str	r3, [sp, #4]
   b6dfa:	bd08      	pop	{r3, pc}
   b6dfc:	0003024c 	.word	0x0003024c

000b6e00 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6e00:	b508      	push	{r3, lr}
   b6e02:	4b02      	ldr	r3, [pc, #8]	; (b6e0c <HAL_USB_USART_Begin+0xc>)
   b6e04:	681b      	ldr	r3, [r3, #0]
   b6e06:	685b      	ldr	r3, [r3, #4]
   b6e08:	9301      	str	r3, [sp, #4]
   b6e0a:	bd08      	pop	{r3, pc}
   b6e0c:	0003024c 	.word	0x0003024c

000b6e10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6e10:	b508      	push	{r3, lr}
   b6e12:	4b02      	ldr	r3, [pc, #8]	; (b6e1c <HAL_USB_USART_Available_Data+0xc>)
   b6e14:	681b      	ldr	r3, [r3, #0]
   b6e16:	691b      	ldr	r3, [r3, #16]
   b6e18:	9301      	str	r3, [sp, #4]
   b6e1a:	bd08      	pop	{r3, pc}
   b6e1c:	0003024c 	.word	0x0003024c

000b6e20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6e20:	b508      	push	{r3, lr}
   b6e22:	4b02      	ldr	r3, [pc, #8]	; (b6e2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6e24:	681b      	ldr	r3, [r3, #0]
   b6e26:	695b      	ldr	r3, [r3, #20]
   b6e28:	9301      	str	r3, [sp, #4]
   b6e2a:	bd08      	pop	{r3, pc}
   b6e2c:	0003024c 	.word	0x0003024c

000b6e30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e30:	b508      	push	{r3, lr}
   b6e32:	4b02      	ldr	r3, [pc, #8]	; (b6e3c <HAL_USB_USART_Receive_Data+0xc>)
   b6e34:	681b      	ldr	r3, [r3, #0]
   b6e36:	699b      	ldr	r3, [r3, #24]
   b6e38:	9301      	str	r3, [sp, #4]
   b6e3a:	bd08      	pop	{r3, pc}
   b6e3c:	0003024c 	.word	0x0003024c

000b6e40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e40:	b508      	push	{r3, lr}
   b6e42:	4b02      	ldr	r3, [pc, #8]	; (b6e4c <HAL_USB_USART_Send_Data+0xc>)
   b6e44:	681b      	ldr	r3, [r3, #0]
   b6e46:	69db      	ldr	r3, [r3, #28]
   b6e48:	9301      	str	r3, [sp, #4]
   b6e4a:	bd08      	pop	{r3, pc}
   b6e4c:	0003024c 	.word	0x0003024c

000b6e50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6e50:	b508      	push	{r3, lr}
   b6e52:	4b02      	ldr	r3, [pc, #8]	; (b6e5c <HAL_USB_USART_Flush_Data+0xc>)
   b6e54:	681b      	ldr	r3, [r3, #0]
   b6e56:	6a1b      	ldr	r3, [r3, #32]
   b6e58:	9301      	str	r3, [sp, #4]
   b6e5a:	bd08      	pop	{r3, pc}
   b6e5c:	0003024c 	.word	0x0003024c

000b6e60 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6e60:	b508      	push	{r3, lr}
   b6e62:	4b02      	ldr	r3, [pc, #8]	; (b6e6c <hal_i2c_write+0xc>)
   b6e64:	681b      	ldr	r3, [r3, #0]
   b6e66:	6a1b      	ldr	r3, [r3, #32]
   b6e68:	9301      	str	r3, [sp, #4]
   b6e6a:	bd08      	pop	{r3, pc}
   b6e6c:	00030228 	.word	0x00030228

000b6e70 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6e70:	b508      	push	{r3, lr}
   b6e72:	4b02      	ldr	r3, [pc, #8]	; (b6e7c <hal_i2c_available+0xc>)
   b6e74:	681b      	ldr	r3, [r3, #0]
   b6e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e78:	9301      	str	r3, [sp, #4]
   b6e7a:	bd08      	pop	{r3, pc}
   b6e7c:	00030228 	.word	0x00030228

000b6e80 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6e80:	b508      	push	{r3, lr}
   b6e82:	4b02      	ldr	r3, [pc, #8]	; (b6e8c <hal_i2c_read+0xc>)
   b6e84:	681b      	ldr	r3, [r3, #0]
   b6e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e88:	9301      	str	r3, [sp, #4]
   b6e8a:	bd08      	pop	{r3, pc}
   b6e8c:	00030228 	.word	0x00030228

000b6e90 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6e90:	b508      	push	{r3, lr}
   b6e92:	4b02      	ldr	r3, [pc, #8]	; (b6e9c <hal_i2c_peek+0xc>)
   b6e94:	681b      	ldr	r3, [r3, #0]
   b6e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e98:	9301      	str	r3, [sp, #4]
   b6e9a:	bd08      	pop	{r3, pc}
   b6e9c:	00030228 	.word	0x00030228

000b6ea0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6ea0:	b508      	push	{r3, lr}
   b6ea2:	4b02      	ldr	r3, [pc, #8]	; (b6eac <hal_i2c_flush+0xc>)
   b6ea4:	681b      	ldr	r3, [r3, #0]
   b6ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ea8:	9301      	str	r3, [sp, #4]
   b6eaa:	bd08      	pop	{r3, pc}
   b6eac:	00030228 	.word	0x00030228

000b6eb0 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6eb0:	b508      	push	{r3, lr}
   b6eb2:	4b02      	ldr	r3, [pc, #8]	; (b6ebc <hal_i2c_init+0xc>)
   b6eb4:	681b      	ldr	r3, [r3, #0]
   b6eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6eb8:	9301      	str	r3, [sp, #4]
   b6eba:	bd08      	pop	{r3, pc}
   b6ebc:	00030228 	.word	0x00030228

000b6ec0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6ec0:	b508      	push	{r3, lr}
   b6ec2:	4b02      	ldr	r3, [pc, #8]	; (b6ecc <hal_i2c_lock+0xc>)
   b6ec4:	681b      	ldr	r3, [r3, #0]
   b6ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6ec8:	9301      	str	r3, [sp, #4]
   b6eca:	bd08      	pop	{r3, pc}
   b6ecc:	00030228 	.word	0x00030228

000b6ed0 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b6ed0:	b508      	push	{r3, lr}
   b6ed2:	4b02      	ldr	r3, [pc, #8]	; (b6edc <sock_bind+0xc>)
   b6ed4:	681b      	ldr	r3, [r3, #0]
   b6ed6:	685b      	ldr	r3, [r3, #4]
   b6ed8:	9301      	str	r3, [sp, #4]
   b6eda:	bd08      	pop	{r3, pc}
   b6edc:	00030238 	.word	0x00030238

000b6ee0 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6ee0:	b508      	push	{r3, lr}
   b6ee2:	4b02      	ldr	r3, [pc, #8]	; (b6eec <sock_setsockopt+0xc>)
   b6ee4:	681b      	ldr	r3, [r3, #0]
   b6ee6:	699b      	ldr	r3, [r3, #24]
   b6ee8:	9301      	str	r3, [sp, #4]
   b6eea:	bd08      	pop	{r3, pc}
   b6eec:	00030238 	.word	0x00030238

000b6ef0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6ef0:	b508      	push	{r3, lr}
   b6ef2:	4b02      	ldr	r3, [pc, #8]	; (b6efc <sock_close+0xc>)
   b6ef4:	681b      	ldr	r3, [r3, #0]
   b6ef6:	69db      	ldr	r3, [r3, #28]
   b6ef8:	9301      	str	r3, [sp, #4]
   b6efa:	bd08      	pop	{r3, pc}
   b6efc:	00030238 	.word	0x00030238

000b6f00 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6f00:	b508      	push	{r3, lr}
   b6f02:	4b02      	ldr	r3, [pc, #8]	; (b6f0c <sock_connect+0xc>)
   b6f04:	681b      	ldr	r3, [r3, #0]
   b6f06:	6a1b      	ldr	r3, [r3, #32]
   b6f08:	9301      	str	r3, [sp, #4]
   b6f0a:	bd08      	pop	{r3, pc}
   b6f0c:	00030238 	.word	0x00030238

000b6f10 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6f10:	b508      	push	{r3, lr}
   b6f12:	4b02      	ldr	r3, [pc, #8]	; (b6f1c <sock_recv+0xc>)
   b6f14:	681b      	ldr	r3, [r3, #0]
   b6f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f18:	9301      	str	r3, [sp, #4]
   b6f1a:	bd08      	pop	{r3, pc}
   b6f1c:	00030238 	.word	0x00030238

000b6f20 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b6f20:	b508      	push	{r3, lr}
   b6f22:	4b02      	ldr	r3, [pc, #8]	; (b6f2c <sock_recvfrom+0xc>)
   b6f24:	681b      	ldr	r3, [r3, #0]
   b6f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f28:	9301      	str	r3, [sp, #4]
   b6f2a:	bd08      	pop	{r3, pc}
   b6f2c:	00030238 	.word	0x00030238

000b6f30 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6f30:	b508      	push	{r3, lr}
   b6f32:	4b02      	ldr	r3, [pc, #8]	; (b6f3c <sock_send+0xc>)
   b6f34:	681b      	ldr	r3, [r3, #0]
   b6f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f38:	9301      	str	r3, [sp, #4]
   b6f3a:	bd08      	pop	{r3, pc}
   b6f3c:	00030238 	.word	0x00030238

000b6f40 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b6f40:	b508      	push	{r3, lr}
   b6f42:	4b02      	ldr	r3, [pc, #8]	; (b6f4c <sock_sendto+0xc>)
   b6f44:	681b      	ldr	r3, [r3, #0]
   b6f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f48:	9301      	str	r3, [sp, #4]
   b6f4a:	bd08      	pop	{r3, pc}
   b6f4c:	00030238 	.word	0x00030238

000b6f50 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6f50:	b508      	push	{r3, lr}
   b6f52:	4b02      	ldr	r3, [pc, #8]	; (b6f5c <sock_socket+0xc>)
   b6f54:	681b      	ldr	r3, [r3, #0]
   b6f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6f58:	9301      	str	r3, [sp, #4]
   b6f5a:	bd08      	pop	{r3, pc}
   b6f5c:	00030238 	.word	0x00030238

000b6f60 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6f60:	b508      	push	{r3, lr}
   b6f62:	4b02      	ldr	r3, [pc, #8]	; (b6f6c <hal_usart_write+0xc>)
   b6f64:	681b      	ldr	r3, [r3, #0]
   b6f66:	68db      	ldr	r3, [r3, #12]
   b6f68:	9301      	str	r3, [sp, #4]
   b6f6a:	bd08      	pop	{r3, pc}
   b6f6c:	0003023c 	.word	0x0003023c

000b6f70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f70:	b508      	push	{r3, lr}
   b6f72:	4b02      	ldr	r3, [pc, #8]	; (b6f7c <hal_usart_available+0xc>)
   b6f74:	681b      	ldr	r3, [r3, #0]
   b6f76:	691b      	ldr	r3, [r3, #16]
   b6f78:	9301      	str	r3, [sp, #4]
   b6f7a:	bd08      	pop	{r3, pc}
   b6f7c:	0003023c 	.word	0x0003023c

000b6f80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f80:	b508      	push	{r3, lr}
   b6f82:	4b02      	ldr	r3, [pc, #8]	; (b6f8c <hal_usart_read+0xc>)
   b6f84:	681b      	ldr	r3, [r3, #0]
   b6f86:	695b      	ldr	r3, [r3, #20]
   b6f88:	9301      	str	r3, [sp, #4]
   b6f8a:	bd08      	pop	{r3, pc}
   b6f8c:	0003023c 	.word	0x0003023c

000b6f90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6f90:	b508      	push	{r3, lr}
   b6f92:	4b02      	ldr	r3, [pc, #8]	; (b6f9c <hal_usart_peek+0xc>)
   b6f94:	681b      	ldr	r3, [r3, #0]
   b6f96:	699b      	ldr	r3, [r3, #24]
   b6f98:	9301      	str	r3, [sp, #4]
   b6f9a:	bd08      	pop	{r3, pc}
   b6f9c:	0003023c 	.word	0x0003023c

000b6fa0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6fa0:	b508      	push	{r3, lr}
   b6fa2:	4b02      	ldr	r3, [pc, #8]	; (b6fac <hal_usart_flush+0xc>)
   b6fa4:	681b      	ldr	r3, [r3, #0]
   b6fa6:	69db      	ldr	r3, [r3, #28]
   b6fa8:	9301      	str	r3, [sp, #4]
   b6faa:	bd08      	pop	{r3, pc}
   b6fac:	0003023c 	.word	0x0003023c

000b6fb0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6fb0:	b508      	push	{r3, lr}
   b6fb2:	4b02      	ldr	r3, [pc, #8]	; (b6fbc <hal_usart_available_data_for_write+0xc>)
   b6fb4:	681b      	ldr	r3, [r3, #0]
   b6fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fb8:	9301      	str	r3, [sp, #4]
   b6fba:	bd08      	pop	{r3, pc}
   b6fbc:	0003023c 	.word	0x0003023c

000b6fc0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6fc0:	b508      	push	{r3, lr}
   b6fc2:	4b02      	ldr	r3, [pc, #8]	; (b6fcc <hal_usart_begin_config+0xc>)
   b6fc4:	681b      	ldr	r3, [r3, #0]
   b6fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6fc8:	9301      	str	r3, [sp, #4]
   b6fca:	bd08      	pop	{r3, pc}
   b6fcc:	0003023c 	.word	0x0003023c

000b6fd0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6fd0:	b508      	push	{r3, lr}
   b6fd2:	4b02      	ldr	r3, [pc, #8]	; (b6fdc <hal_usart_init_ex+0xc>)
   b6fd4:	681b      	ldr	r3, [r3, #0]
   b6fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6fd8:	9301      	str	r3, [sp, #4]
   b6fda:	bd08      	pop	{r3, pc}
   b6fdc:	0003023c 	.word	0x0003023c

000b6fe0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6fe0:	b508      	push	{r3, lr}
   b6fe2:	4b02      	ldr	r3, [pc, #8]	; (b6fec <inet_inet_ntop+0xc>)
   b6fe4:	681b      	ldr	r3, [r3, #0]
   b6fe6:	695b      	ldr	r3, [r3, #20]
   b6fe8:	9301      	str	r3, [sp, #4]
   b6fea:	bd08      	pop	{r3, pc}
   b6fec:	00030264 	.word	0x00030264

000b6ff0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6ff0:	b508      	push	{r3, lr}
   b6ff2:	4b02      	ldr	r3, [pc, #8]	; (b6ffc <inet_htonl+0xc>)
   b6ff4:	681b      	ldr	r3, [r3, #0]
   b6ff6:	6a1b      	ldr	r3, [r3, #32]
   b6ff8:	9301      	str	r3, [sp, #4]
   b6ffa:	bd08      	pop	{r3, pc}
   b6ffc:	00030264 	.word	0x00030264

000b7000 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b7000:	b508      	push	{r3, lr}
   b7002:	4b02      	ldr	r3, [pc, #8]	; (b700c <inet_ntohs+0xc>)
   b7004:	681b      	ldr	r3, [r3, #0]
   b7006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7008:	9301      	str	r3, [sp, #4]
   b700a:	bd08      	pop	{r3, pc}
   b700c:	00030264 	.word	0x00030264

000b7010 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7010:	b508      	push	{r3, lr}
   b7012:	4b02      	ldr	r3, [pc, #8]	; (b701c <inet_htons+0xc>)
   b7014:	681b      	ldr	r3, [r3, #0]
   b7016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7018:	9301      	str	r3, [sp, #4]
   b701a:	bd08      	pop	{r3, pc}
   b701c:	00030264 	.word	0x00030264

000b7020 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7020:	b508      	push	{r3, lr}
   b7022:	4b02      	ldr	r3, [pc, #8]	; (b702c <os_mutex_recursive_create+0xc>)
   b7024:	681b      	ldr	r3, [r3, #0]
   b7026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7028:	9301      	str	r3, [sp, #4]
   b702a:	bd08      	pop	{r3, pc}
   b702c:	00030248 	.word	0x00030248

000b7030 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
   b7030:	b508      	push	{r3, lr}
   b7032:	4b02      	ldr	r3, [pc, #8]	; (b703c <inet_gethostbyname+0xc>)
   b7034:	681b      	ldr	r3, [r3, #0]
   b7036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7038:	9301      	str	r3, [sp, #4]
   b703a:	bd08      	pop	{r3, pc}
   b703c:	00030274 	.word	0x00030274

000b7040 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7040:	b508      	push	{r3, lr}
   b7042:	4b02      	ldr	r3, [pc, #8]	; (b704c <HAL_RNG_GetRandomNumber+0xc>)
   b7044:	681b      	ldr	r3, [r3, #0]
   b7046:	685b      	ldr	r3, [r3, #4]
   b7048:	9301      	str	r3, [sp, #4]
   b704a:	bd08      	pop	{r3, pc}
   b704c:	00030218 	.word	0x00030218

000b7050 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7050:	b508      	push	{r3, lr}
   b7052:	4b02      	ldr	r3, [pc, #8]	; (b705c <HAL_Delay_Microseconds+0xc>)
   b7054:	681b      	ldr	r3, [r3, #0]
   b7056:	68db      	ldr	r3, [r3, #12]
   b7058:	9301      	str	r3, [sp, #4]
   b705a:	bd08      	pop	{r3, pc}
   b705c:	00030218 	.word	0x00030218

000b7060 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7060:	b508      	push	{r3, lr}
   b7062:	4b02      	ldr	r3, [pc, #8]	; (b706c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7064:	681b      	ldr	r3, [r3, #0]
   b7066:	695b      	ldr	r3, [r3, #20]
   b7068:	9301      	str	r3, [sp, #4]
   b706a:	bd08      	pop	{r3, pc}
   b706c:	00030218 	.word	0x00030218

000b7070 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7070:	b508      	push	{r3, lr}
   b7072:	4b02      	ldr	r3, [pc, #8]	; (b707c <hal_rtc_time_is_valid+0xc>)
   b7074:	681b      	ldr	r3, [r3, #0]
   b7076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7078:	9301      	str	r3, [sp, #4]
   b707a:	bd08      	pop	{r3, pc}
   b707c:	00030218 	.word	0x00030218

000b7080 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7080:	b508      	push	{r3, lr}
   b7082:	4b02      	ldr	r3, [pc, #8]	; (b708c <hal_timer_millis+0xc>)
   b7084:	681b      	ldr	r3, [r3, #0]
   b7086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7088:	9301      	str	r3, [sp, #4]
   b708a:	bd08      	pop	{r3, pc}
   b708c:	00030218 	.word	0x00030218

000b7090 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b7090:	b508      	push	{r3, lr}
   b7092:	4b02      	ldr	r3, [pc, #8]	; (b709c <hal_rtc_get_time+0xc>)
   b7094:	681b      	ldr	r3, [r3, #0]
   b7096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7098:	9301      	str	r3, [sp, #4]
   b709a:	bd08      	pop	{r3, pc}
   b709c:	00030218 	.word	0x00030218

000b70a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b70a0:	b508      	push	{r3, lr}
   b70a2:	4b02      	ldr	r3, [pc, #8]	; (b70ac <if_index_to_name+0xc>)
   b70a4:	681b      	ldr	r3, [r3, #0]
   b70a6:	695b      	ldr	r3, [r3, #20]
   b70a8:	9301      	str	r3, [sp, #4]
   b70aa:	bd08      	pop	{r3, pc}
   b70ac:	0003026c 	.word	0x0003026c

000b70b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b70b0:	b508      	push	{r3, lr}
   b70b2:	4b02      	ldr	r3, [pc, #8]	; (b70bc <netdb_freeaddrinfo+0xc>)
   b70b4:	681b      	ldr	r3, [r3, #0]
   b70b6:	689b      	ldr	r3, [r3, #8]
   b70b8:	9301      	str	r3, [sp, #4]
   b70ba:	bd08      	pop	{r3, pc}
   b70bc:	00030268 	.word	0x00030268

000b70c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b70c0:	b508      	push	{r3, lr}
   b70c2:	4b02      	ldr	r3, [pc, #8]	; (b70cc <netdb_getaddrinfo+0xc>)
   b70c4:	681b      	ldr	r3, [r3, #0]
   b70c6:	68db      	ldr	r3, [r3, #12]
   b70c8:	9301      	str	r3, [sp, #4]
   b70ca:	bd08      	pop	{r3, pc}
   b70cc:	00030268 	.word	0x00030268

000b70d0 <LED_SetBrightness>:

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   b70d0:	b508      	push	{r3, lr}
   b70d2:	4b02      	ldr	r3, [pc, #8]	; (b70dc <LED_SetBrightness+0xc>)
   b70d4:	681b      	ldr	r3, [r3, #0]
   b70d6:	691b      	ldr	r3, [r3, #16]
   b70d8:	9301      	str	r3, [sp, #4]
   b70da:	bd08      	pop	{r3, pc}
   b70dc:	00030260 	.word	0x00030260

000b70e0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b70e0:	b508      	push	{r3, lr}
   b70e2:	4b02      	ldr	r3, [pc, #8]	; (b70ec <LED_RGB_IsOverRidden+0xc>)
   b70e4:	681b      	ldr	r3, [r3, #0]
   b70e6:	699b      	ldr	r3, [r3, #24]
   b70e8:	9301      	str	r3, [sp, #4]
   b70ea:	bd08      	pop	{r3, pc}
   b70ec:	00030260 	.word	0x00030260

000b70f0 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b70f0:	b508      	push	{r3, lr}
   b70f2:	4b02      	ldr	r3, [pc, #8]	; (b70fc <LED_On+0xc>)
   b70f4:	681b      	ldr	r3, [r3, #0]
   b70f6:	69db      	ldr	r3, [r3, #28]
   b70f8:	9301      	str	r3, [sp, #4]
   b70fa:	bd08      	pop	{r3, pc}
   b70fc:	00030260 	.word	0x00030260

000b7100 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7100:	b508      	push	{r3, lr}
   b7102:	4b02      	ldr	r3, [pc, #8]	; (b710c <panic_+0xc>)
   b7104:	681b      	ldr	r3, [r3, #0]
   b7106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7108:	9301      	str	r3, [sp, #4]
   b710a:	bd08      	pop	{r3, pc}
   b710c:	00030260 	.word	0x00030260

000b7110 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7110:	b508      	push	{r3, lr}
   b7112:	4b02      	ldr	r3, [pc, #8]	; (b711c <log_message+0xc>)
   b7114:	681b      	ldr	r3, [r3, #0]
   b7116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7118:	9301      	str	r3, [sp, #4]
   b711a:	bd08      	pop	{r3, pc}
   b711c:	00030260 	.word	0x00030260

000b7120 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b7120:	b508      	push	{r3, lr}
   b7122:	4b03      	ldr	r3, [pc, #12]	; (b7130 <diag_get_source+0x10>)
   b7124:	681b      	ldr	r3, [r3, #0]
   b7126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b712a:	9301      	str	r3, [sp, #4]
   b712c:	bd08      	pop	{r3, pc}
   b712e:	0000      	.short	0x0000
   b7130:	00030260 	.word	0x00030260

000b7134 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7134:	b508      	push	{r3, lr}
   b7136:	4b02      	ldr	r3, [pc, #8]	; (b7140 <spark_process+0xc>)
   b7138:	681b      	ldr	r3, [r3, #0]
   b713a:	689b      	ldr	r3, [r3, #8]
   b713c:	9301      	str	r3, [sp, #4]
   b713e:	bd08      	pop	{r3, pc}
   b7140:	00030244 	.word	0x00030244

000b7144 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b7144:	b508      	push	{r3, lr}
   b7146:	4b02      	ldr	r3, [pc, #8]	; (b7150 <spark_cloud_flag_connect+0xc>)
   b7148:	681b      	ldr	r3, [r3, #0]
   b714a:	68db      	ldr	r3, [r3, #12]
   b714c:	9301      	str	r3, [sp, #4]
   b714e:	bd08      	pop	{r3, pc}
   b7150:	00030244 	.word	0x00030244

000b7154 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7154:	b508      	push	{r3, lr}
   b7156:	4b02      	ldr	r3, [pc, #8]	; (b7160 <spark_cloud_flag_connected+0xc>)
   b7158:	681b      	ldr	r3, [r3, #0]
   b715a:	695b      	ldr	r3, [r3, #20]
   b715c:	9301      	str	r3, [sp, #4]
   b715e:	bd08      	pop	{r3, pc}
   b7160:	00030244 	.word	0x00030244

000b7164 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7164:	b508      	push	{r3, lr}
   b7166:	4b02      	ldr	r3, [pc, #8]	; (b7170 <spark_deviceID+0xc>)
   b7168:	681b      	ldr	r3, [r3, #0]
   b716a:	69db      	ldr	r3, [r3, #28]
   b716c:	9301      	str	r3, [sp, #4]
   b716e:	bd08      	pop	{r3, pc}
   b7170:	00030244 	.word	0x00030244

000b7174 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7174:	b508      	push	{r3, lr}
   b7176:	4b02      	ldr	r3, [pc, #8]	; (b7180 <spark_send_event+0xc>)
   b7178:	681b      	ldr	r3, [r3, #0]
   b717a:	6a1b      	ldr	r3, [r3, #32]
   b717c:	9301      	str	r3, [sp, #4]
   b717e:	bd08      	pop	{r3, pc}
   b7180:	00030244 	.word	0x00030244

000b7184 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b7184:	b508      	push	{r3, lr}
   b7186:	4b02      	ldr	r3, [pc, #8]	; (b7190 <spark_sync_time+0xc>)
   b7188:	681b      	ldr	r3, [r3, #0]
   b718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b718c:	9301      	str	r3, [sp, #4]
   b718e:	bd08      	pop	{r3, pc}
   b7190:	00030244 	.word	0x00030244

000b7194 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7194:	b508      	push	{r3, lr}
   b7196:	4b02      	ldr	r3, [pc, #8]	; (b71a0 <spark_sync_time_pending+0xc>)
   b7198:	681b      	ldr	r3, [r3, #0]
   b719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b719c:	9301      	str	r3, [sp, #4]
   b719e:	bd08      	pop	{r3, pc}
   b71a0:	00030244 	.word	0x00030244

000b71a4 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b71a4:	b508      	push	{r3, lr}
   b71a6:	4b02      	ldr	r3, [pc, #8]	; (b71b0 <spark_set_connection_property+0xc>)
   b71a8:	681b      	ldr	r3, [r3, #0]
   b71aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b71ac:	9301      	str	r3, [sp, #4]
   b71ae:	bd08      	pop	{r3, pc}
   b71b0:	00030244 	.word	0x00030244

000b71b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b71b4:	b508      	push	{r3, lr}
   b71b6:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b71b8:	681b      	ldr	r3, [r3, #0]
   b71ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71bc:	9301      	str	r3, [sp, #4]
   b71be:	bd08      	pop	{r3, pc}
   b71c0:	00030244 	.word	0x00030244

000b71c4 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   b71c4:	b508      	push	{r3, lr}
   b71c6:	4b02      	ldr	r3, [pc, #8]	; (b71d0 <spark_publish_vitals+0xc>)
   b71c8:	681b      	ldr	r3, [r3, #0]
   b71ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71cc:	9301      	str	r3, [sp, #4]
   b71ce:	bd08      	pop	{r3, pc}
   b71d0:	00030244 	.word	0x00030244

000b71d4 <spark_cloud_disconnect>:
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b71d4:	b508      	push	{r3, lr}
   b71d6:	4b02      	ldr	r3, [pc, #8]	; (b71e0 <spark_cloud_disconnect+0xc>)
   b71d8:	681b      	ldr	r3, [r3, #0]
   b71da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71dc:	9301      	str	r3, [sp, #4]
   b71de:	bd08      	pop	{r3, pc}
   b71e0:	00030244 	.word	0x00030244

000b71e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b71e4:	b508      	push	{r3, lr}
   b71e6:	4b02      	ldr	r3, [pc, #8]	; (b71f0 <network_connect+0xc>)
   b71e8:	681b      	ldr	r3, [r3, #0]
   b71ea:	685b      	ldr	r3, [r3, #4]
   b71ec:	9301      	str	r3, [sp, #4]
   b71ee:	bd08      	pop	{r3, pc}
   b71f0:	00030240 	.word	0x00030240

000b71f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b71f4:	b508      	push	{r3, lr}
   b71f6:	4b02      	ldr	r3, [pc, #8]	; (b7200 <network_connecting+0xc>)
   b71f8:	681b      	ldr	r3, [r3, #0]
   b71fa:	689b      	ldr	r3, [r3, #8]
   b71fc:	9301      	str	r3, [sp, #4]
   b71fe:	bd08      	pop	{r3, pc}
   b7200:	00030240 	.word	0x00030240

000b7204 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7204:	b508      	push	{r3, lr}
   b7206:	4b02      	ldr	r3, [pc, #8]	; (b7210 <network_disconnect+0xc>)
   b7208:	681b      	ldr	r3, [r3, #0]
   b720a:	68db      	ldr	r3, [r3, #12]
   b720c:	9301      	str	r3, [sp, #4]
   b720e:	bd08      	pop	{r3, pc}
   b7210:	00030240 	.word	0x00030240

000b7214 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7214:	b508      	push	{r3, lr}
   b7216:	4b02      	ldr	r3, [pc, #8]	; (b7220 <network_ready+0xc>)
   b7218:	681b      	ldr	r3, [r3, #0]
   b721a:	691b      	ldr	r3, [r3, #16]
   b721c:	9301      	str	r3, [sp, #4]
   b721e:	bd08      	pop	{r3, pc}
   b7220:	00030240 	.word	0x00030240

000b7224 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <network_on+0xc>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	695b      	ldr	r3, [r3, #20]
   b722c:	9301      	str	r3, [sp, #4]
   b722e:	bd08      	pop	{r3, pc}
   b7230:	00030240 	.word	0x00030240

000b7234 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b02      	ldr	r3, [pc, #8]	; (b7240 <network_off+0xc>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	699b      	ldr	r3, [r3, #24]
   b723c:	9301      	str	r3, [sp, #4]
   b723e:	bd08      	pop	{r3, pc}
   b7240:	00030240 	.word	0x00030240

000b7244 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7244:	b508      	push	{r3, lr}
   b7246:	4b02      	ldr	r3, [pc, #8]	; (b7250 <network_listen+0xc>)
   b7248:	681b      	ldr	r3, [r3, #0]
   b724a:	69db      	ldr	r3, [r3, #28]
   b724c:	9301      	str	r3, [sp, #4]
   b724e:	bd08      	pop	{r3, pc}
   b7250:	00030240 	.word	0x00030240

000b7254 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7254:	b508      	push	{r3, lr}
   b7256:	4b02      	ldr	r3, [pc, #8]	; (b7260 <network_listening+0xc>)
   b7258:	681b      	ldr	r3, [r3, #0]
   b725a:	6a1b      	ldr	r3, [r3, #32]
   b725c:	9301      	str	r3, [sp, #4]
   b725e:	bd08      	pop	{r3, pc}
   b7260:	00030240 	.word	0x00030240

000b7264 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <network_set_listen_timeout+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030240 	.word	0x00030240

000b7274 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <network_get_listen_timeout+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030240 	.word	0x00030240

000b7284 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <network_is_on+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030240 	.word	0x00030240

000b7294 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <network_is_off+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030240 	.word	0x00030240

000b72a4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <system_mode+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	681b      	ldr	r3, [r3, #0]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030220 	.word	0x00030220

000b72b4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <set_system_mode+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	685b      	ldr	r3, [r3, #4]
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030220 	.word	0x00030220

000b72c4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <system_delay_ms+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	695b      	ldr	r3, [r3, #20]
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	00030220 	.word	0x00030220

000b72d4 <system_set_flag>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <system_set_flag+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	00030220 	.word	0x00030220

000b72e4 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <system_get_flag+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	00030220 	.word	0x00030220

000b72f4 <application_thread_current>:
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <application_thread_current+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	00030220 	.word	0x00030220

000b7304 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <application_thread_invoke+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	00030220 	.word	0x00030220

000b7314 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <system_thread_get_state+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	00030220 	.word	0x00030220

000b7324 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b03      	ldr	r3, [pc, #12]	; (b7334 <system_ctrl_set_app_request_handler+0x10>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b732e:	9301      	str	r3, [sp, #4]
   b7330:	bd08      	pop	{r3, pc}
   b7332:	0000      	.short	0x0000
   b7334:	00030220 	.word	0x00030220

000b7338 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7338:	b508      	push	{r3, lr}
   b733a:	4b03      	ldr	r3, [pc, #12]	; (b7348 <system_ctrl_set_result+0x10>)
   b733c:	681b      	ldr	r3, [r3, #0]
   b733e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7342:	9301      	str	r3, [sp, #4]
   b7344:	bd08      	pop	{r3, pc}
   b7346:	0000      	.short	0x0000
   b7348:	00030220 	.word	0x00030220

000b734c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b734c:	b508      	push	{r3, lr}
   b734e:	4b03      	ldr	r3, [pc, #12]	; (b735c <system_reset+0x10>)
   b7350:	681b      	ldr	r3, [r3, #0]
   b7352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b7356:	9301      	str	r3, [sp, #4]
   b7358:	bd08      	pop	{r3, pc}
   b735a:	0000      	.short	0x0000
   b735c:	00030220 	.word	0x00030220

000b7360 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <malloc+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	681b      	ldr	r3, [r3, #0]
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	0003021c 	.word	0x0003021c

000b7370 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <free+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	685b      	ldr	r3, [r3, #4]
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	0003021c 	.word	0x0003021c

000b7380 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <realloc+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	689b      	ldr	r3, [r3, #8]
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	0003021c 	.word	0x0003021c

000b7390 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <sprintf+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	68db      	ldr	r3, [r3, #12]
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	0003021c 	.word	0x0003021c

000b73a0 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b02      	ldr	r3, [pc, #8]	; (b73ac <snprintf+0xc>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	69db      	ldr	r3, [r3, #28]
   b73a8:	9301      	str	r3, [sp, #4]
   b73aa:	bd08      	pop	{r3, pc}
   b73ac:	0003021c 	.word	0x0003021c

000b73b0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b73b0:	b508      	push	{r3, lr}
   b73b2:	4b02      	ldr	r3, [pc, #8]	; (b73bc <vsnprintf+0xc>)
   b73b4:	681b      	ldr	r3, [r3, #0]
   b73b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b73b8:	9301      	str	r3, [sp, #4]
   b73ba:	bd08      	pop	{r3, pc}
   b73bc:	0003021c 	.word	0x0003021c

000b73c0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b73c0:	b508      	push	{r3, lr}
   b73c2:	4b02      	ldr	r3, [pc, #8]	; (b73cc <abort+0xc>)
   b73c4:	681b      	ldr	r3, [r3, #0]
   b73c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b73c8:	9301      	str	r3, [sp, #4]
   b73ca:	bd08      	pop	{r3, pc}
   b73cc:	0003021c 	.word	0x0003021c

000b73d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b73d0:	b508      	push	{r3, lr}
   b73d2:	4b02      	ldr	r3, [pc, #8]	; (b73dc <_malloc_r+0xc>)
   b73d4:	681b      	ldr	r3, [r3, #0]
   b73d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73d8:	9301      	str	r3, [sp, #4]
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	0003021c 	.word	0x0003021c

000b73e0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b73e0:	b508      	push	{r3, lr}
   b73e2:	4b02      	ldr	r3, [pc, #8]	; (b73ec <__errno+0xc>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b73e8:	9301      	str	r3, [sp, #4]
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	0003021c 	.word	0x0003021c

000b73f0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b73f0:	b508      	push	{r3, lr}
   b73f2:	4b02      	ldr	r3, [pc, #8]	; (b73fc <__assert_func+0xc>)
   b73f4:	681b      	ldr	r3, [r3, #0]
   b73f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73f8:	9301      	str	r3, [sp, #4]
   b73fa:	bd08      	pop	{r3, pc}
   b73fc:	0003021c 	.word	0x0003021c

000b7400 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7400:	b508      	push	{r3, lr}
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <newlib_impure_ptr_callback+0xc>)
   b7404:	681b      	ldr	r3, [r3, #0]
   b7406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7408:	9301      	str	r3, [sp, #4]
   b740a:	bd08      	pop	{r3, pc}
   b740c:	0003021c 	.word	0x0003021c

000b7410 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b7410:	b508      	push	{r3, lr}
   b7412:	4b02      	ldr	r3, [pc, #8]	; (b741c <localtime_r+0xc>)
   b7414:	681b      	ldr	r3, [r3, #0]
   b7416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	bd08      	pop	{r3, pc}
   b741c:	0003021c 	.word	0x0003021c

000b7420 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7420:	2300      	movs	r3, #0
   b7422:	6840      	ldr	r0, [r0, #4]
   b7424:	461a      	mov	r2, r3
   b7426:	f7ff bedd 	b.w	b71e4 <network_connect>

000b742a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b742a:	6840      	ldr	r0, [r0, #4]
   b742c:	2200      	movs	r2, #0
   b742e:	2102      	movs	r1, #2
   b7430:	f7ff bee8 	b.w	b7204 <network_disconnect>

000b7434 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7434:	2200      	movs	r2, #0
   b7436:	6840      	ldr	r0, [r0, #4]
   b7438:	4611      	mov	r1, r2
   b743a:	f7ff bedb 	b.w	b71f4 <network_connecting>

000b743e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b743e:	2200      	movs	r2, #0
   b7440:	6840      	ldr	r0, [r0, #4]
   b7442:	4611      	mov	r1, r2
   b7444:	f7ff bee6 	b.w	b7214 <network_ready>

000b7448 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7448:	2300      	movs	r3, #0
   b744a:	6840      	ldr	r0, [r0, #4]
   b744c:	461a      	mov	r2, r3
   b744e:	4619      	mov	r1, r3
   b7450:	f7ff bee8 	b.w	b7224 <network_on>

000b7454 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7454:	2300      	movs	r3, #0
   b7456:	6840      	ldr	r0, [r0, #4]
   b7458:	461a      	mov	r2, r3
   b745a:	4619      	mov	r1, r3
   b745c:	f7ff beea 	b.w	b7234 <network_off>

000b7460 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7460:	6840      	ldr	r0, [r0, #4]
   b7462:	2100      	movs	r1, #0
   b7464:	f7ff bf0e 	b.w	b7284 <network_is_on>

000b7468 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7468:	6840      	ldr	r0, [r0, #4]
   b746a:	2100      	movs	r1, #0
   b746c:	f7ff bf12 	b.w	b7294 <network_is_off>

000b7470 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7470:	6840      	ldr	r0, [r0, #4]
   b7472:	2200      	movs	r2, #0
   b7474:	f081 0101 	eor.w	r1, r1, #1
   b7478:	f7ff bee4 	b.w	b7244 <network_listen>

000b747c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b747c:	6840      	ldr	r0, [r0, #4]
   b747e:	2200      	movs	r2, #0
   b7480:	f7ff bef0 	b.w	b7264 <network_set_listen_timeout>

000b7484 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7484:	2200      	movs	r2, #0
   b7486:	6840      	ldr	r0, [r0, #4]
   b7488:	4611      	mov	r1, r2
   b748a:	f7ff bef3 	b.w	b7274 <network_get_listen_timeout>

000b748e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b748e:	2200      	movs	r2, #0
   b7490:	6840      	ldr	r0, [r0, #4]
   b7492:	4611      	mov	r1, r2
   b7494:	f7ff bede 	b.w	b7254 <network_listening>

000b7498 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b749c:	b095      	sub	sp, #84	; 0x54
   b749e:	4614      	mov	r4, r2
   b74a0:	460d      	mov	r5, r1
   b74a2:	4607      	mov	r7, r0
    IPAddress addr;
   b74a4:	f000 fcfe 	bl	b7ea4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b74a8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b74aa:	221c      	movs	r2, #28
   b74ac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b74ae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b74b0:	f002 fdfb 	bl	ba0aa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b74b4:	2340      	movs	r3, #64	; 0x40
   b74b6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b74b8:	4620      	mov	r0, r4
   b74ba:	466b      	mov	r3, sp
   b74bc:	aa0c      	add	r2, sp, #48	; 0x30
   b74be:	2100      	movs	r1, #0
   b74c0:	f7ff fdfe 	bl	b70c0 <netdb_getaddrinfo>
    if (!r) {
   b74c4:	4604      	mov	r4, r0
   b74c6:	2800      	cmp	r0, #0
   b74c8:	d14b      	bne.n	b7562 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74ca:	4602      	mov	r2, r0
   b74cc:	2101      	movs	r1, #1
   b74ce:	6868      	ldr	r0, [r5, #4]
   b74d0:	f7ff fea0 	bl	b7214 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74d4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74d6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74d8:	4622      	mov	r2, r4
   b74da:	6868      	ldr	r0, [r5, #4]
   b74dc:	f7ff fe9a 	bl	b7214 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74e0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74e2:	4681      	mov	r9, r0
        bool ok = false;
   b74e4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74e6:	2e00      	cmp	r6, #0
   b74e8:	d03b      	beq.n	b7562 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b74ea:	2900      	cmp	r1, #0
   b74ec:	d139      	bne.n	b7562 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b74ee:	6873      	ldr	r3, [r6, #4]
   b74f0:	2b02      	cmp	r3, #2
   b74f2:	d003      	beq.n	b74fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b74f4:	2b0a      	cmp	r3, #10
   b74f6:	d011      	beq.n	b751c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74f8:	69f6      	ldr	r6, [r6, #28]
   b74fa:	e7f4      	b.n	b74e6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b74fc:	f1b8 0f00 	cmp.w	r8, #0
   b7500:	d0fa      	beq.n	b74f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7502:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b7504:	a806      	add	r0, sp, #24
   b7506:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7508:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b750a:	f000 fd1b 	bl	b7f44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b750e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7510:	1d3c      	adds	r4, r7, #4
   b7512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7514:	682b      	ldr	r3, [r5, #0]
   b7516:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7518:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b751a:	e7ed      	b.n	b74f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b751c:	f1b9 0f00 	cmp.w	r9, #0
   b7520:	d0ea      	beq.n	b74f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7522:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7524:	2210      	movs	r2, #16
   b7526:	a801      	add	r0, sp, #4
   b7528:	f002 fdbf 	bl	ba0aa <memset>
                    a.v = 6;
   b752c:	2306      	movs	r3, #6
   b752e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7532:	ad01      	add	r5, sp, #4
   b7534:	f104 0308 	add.w	r3, r4, #8
   b7538:	3418      	adds	r4, #24
   b753a:	6818      	ldr	r0, [r3, #0]
   b753c:	6859      	ldr	r1, [r3, #4]
   b753e:	462a      	mov	r2, r5
   b7540:	c203      	stmia	r2!, {r0, r1}
   b7542:	3308      	adds	r3, #8
   b7544:	42a3      	cmp	r3, r4
   b7546:	4615      	mov	r5, r2
   b7548:	d1f7      	bne.n	b753a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b754a:	a901      	add	r1, sp, #4
   b754c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b754e:	ad07      	add	r5, sp, #28
   b7550:	f000 fcb6 	bl	b7ec0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7556:	1d3c      	adds	r4, r7, #4
   b7558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b755a:	682b      	ldr	r3, [r5, #0]
   b755c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b755e:	4649      	mov	r1, r9
   b7560:	e7ca      	b.n	b74f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7562:	9800      	ldr	r0, [sp, #0]
   b7564:	f7ff fda4 	bl	b70b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7568:	4638      	mov	r0, r7
   b756a:	b015      	add	sp, #84	; 0x54
   b756c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7570 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7570:	4b02      	ldr	r3, [pc, #8]	; (b757c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7572:	4a03      	ldr	r2, [pc, #12]	; (b7580 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7574:	601a      	str	r2, [r3, #0]
   b7576:	2200      	movs	r2, #0
   b7578:	605a      	str	r2, [r3, #4]

} // spark
   b757a:	4770      	bx	lr
   b757c:	2003e65c 	.word	0x2003e65c
   b7580:	000bcb2c 	.word	0x000bcb2c

000b7584 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7584:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7586:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7588:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b758c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b758e:	2201      	movs	r2, #1
   b7590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7594:	f10d 0107 	add.w	r1, sp, #7
   b7598:	47a0      	blx	r4
}
   b759a:	b002      	add	sp, #8
   b759c:	bd10      	pop	{r4, pc}

000b759e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b759e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b75a0:	6803      	ldr	r3, [r0, #0]
   b75a2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b75a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b75a8:	46a4      	mov	ip, r4
}
   b75aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b75ae:	4760      	bx	ip

000b75b0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b75b0:	b513      	push	{r0, r1, r4, lr}
   b75b2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b75b4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b75b6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b75ba:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b75bc:	f10d 0107 	add.w	r1, sp, #7
   b75c0:	2201      	movs	r2, #1
   b75c2:	47a0      	blx	r4
}
   b75c4:	b002      	add	sp, #8
   b75c6:	bd10      	pop	{r4, pc}

000b75c8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b75c8:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b75ca:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b75cc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75d0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b75d4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b75d6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b75d8:	d008      	beq.n	b75ec <_ZN9TCPClient4readEv+0x24>
   b75da:	6963      	ldr	r3, [r4, #20]
   b75dc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b75e0:	1c51      	adds	r1, r2, #1
   b75e2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b75e6:	4413      	add	r3, r2
   b75e8:	7918      	ldrb	r0, [r3, #4]
}
   b75ea:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b75ec:	6803      	ldr	r3, [r0, #0]
   b75ee:	691b      	ldr	r3, [r3, #16]
   b75f0:	4798      	blx	r3
   b75f2:	2800      	cmp	r0, #0
   b75f4:	d1f1      	bne.n	b75da <_ZN9TCPClient4readEv+0x12>
   b75f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b75fa:	e7f6      	b.n	b75ea <_ZN9TCPClient4readEv+0x22>

000b75fc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b75fc:	4770      	bx	lr

000b75fe <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b75fe:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7600:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7602:	43c0      	mvns	r0, r0
   b7604:	0fc0      	lsrs	r0, r0, #31
   b7606:	4770      	bx	lr

000b7608 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7608:	4770      	bx	lr
	...

000b760c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b760c:	4b06      	ldr	r3, [pc, #24]	; (b7628 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b760e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7610:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7612:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7616:	d005      	beq.n	b7624 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7618:	4608      	mov	r0, r1
   b761a:	f001 ff35 	bl	b9488 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b761e:	2800      	cmp	r0, #0
   b7620:	bf08      	it	eq
   b7622:	2400      	moveq	r4, #0
      }
   b7624:	4620      	mov	r0, r4
   b7626:	bd10      	pop	{r4, pc}
   b7628:	000bcb94 	.word	0x000bcb94

000b762c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b762c:	b510      	push	{r4, lr}
   b762e:	21ac      	movs	r1, #172	; 0xac
   b7630:	4604      	mov	r4, r0
   b7632:	f7fc fd34 	bl	b409e <_ZdlPvj>
   b7636:	4620      	mov	r0, r4
   b7638:	bd10      	pop	{r4, pc}

000b763a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b763a:	21ac      	movs	r1, #172	; 0xac
   b763c:	f7fc bd2f 	b.w	b409e <_ZdlPvj>

000b7640 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b7644:	f04f 0800 	mov.w	r8, #0
   b7648:	b086      	sub	sp, #24
   b764a:	461c      	mov	r4, r3
   b764c:	f8c0 8004 	str.w	r8, [r0, #4]
   b7650:	4605      	mov	r5, r0
   b7652:	460e      	mov	r6, r1
   b7654:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7656:	4641      	mov	r1, r8
   b7658:	2210      	movs	r2, #16
   b765a:	a802      	add	r0, sp, #8
   b765c:	f002 fd25 	bl	ba0aa <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7660:	1c63      	adds	r3, r4, #1
   b7662:	d009      	beq.n	b7678 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7668:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b766c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7670:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7674:	435c      	muls	r4, r3
   b7676:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7678:	6968      	ldr	r0, [r5, #20]
   b767a:	2310      	movs	r3, #16
   b767c:	9300      	str	r3, [sp, #0]
   b767e:	6800      	ldr	r0, [r0, #0]
   b7680:	ab02      	add	r3, sp, #8
   b7682:	f241 0205 	movw	r2, #4101	; 0x1005
   b7686:	f640 71ff 	movw	r1, #4095	; 0xfff
   b768a:	f7ff fc29 	bl	b6ee0 <sock_setsockopt>
    if (ret < 0) {
   b768e:	2800      	cmp	r0, #0
   b7690:	da07      	bge.n	b76a2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7692:	f7ff fea5 	bl	b73e0 <__errno>
   b7696:	6803      	ldr	r3, [r0, #0]
   b7698:	606b      	str	r3, [r5, #4]
        return 0;
   b769a:	2000      	movs	r0, #0
}
   b769c:	b006      	add	sp, #24
   b769e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b76a2:	6968      	ldr	r0, [r5, #20]
   b76a4:	2300      	movs	r3, #0
   b76a6:	6800      	ldr	r0, [r0, #0]
   b76a8:	463a      	mov	r2, r7
   b76aa:	4631      	mov	r1, r6
   b76ac:	f7ff fc40 	bl	b6f30 <sock_send>
    if (ret < 0) {
   b76b0:	1e03      	subs	r3, r0, #0
   b76b2:	dbee      	blt.n	b7692 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b76b4:	4618      	mov	r0, r3
   b76b6:	e7f1      	b.n	b769c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b76b8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b76b8:	b530      	push	{r4, r5, lr}
   b76ba:	b087      	sub	sp, #28
   b76bc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b76be:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b76c0:	4668      	mov	r0, sp
   b76c2:	f000 fc3f 	bl	b7f44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b76c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b76c8:	3404      	adds	r4, #4
   b76ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76cc:	682b      	ldr	r3, [r5, #0]
   b76ce:	7023      	strb	r3, [r4, #0]
    }
   b76d0:	b007      	add	sp, #28
   b76d2:	bd30      	pop	{r4, r5, pc}

000b76d4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b76d4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b76d6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b76d8:	4b05      	ldr	r3, [pc, #20]	; (b76f0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b76da:	4604      	mov	r4, r0
   b76dc:	358c      	adds	r5, #140	; 0x8c
   b76de:	f844 3b04 	str.w	r3, [r4], #4
   b76e2:	4606      	mov	r6, r0
   b76e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b76e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76e8:	682b      	ldr	r3, [r5, #0]
   b76ea:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b76ec:	4630      	mov	r0, r6
   b76ee:	bd70      	pop	{r4, r5, r6, pc}
   b76f0:	000bccb4 	.word	0x000bccb4

000b76f4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b76f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76f8:	4698      	mov	r8, r3
    stop();
   b76fa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b76fc:	b093      	sub	sp, #76	; 0x4c
   b76fe:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7700:	2400      	movs	r4, #0
    stop();
   b7702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7704:	4606      	mov	r6, r0
   b7706:	4617      	mov	r7, r2
    stop();
   b7708:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b770a:	4628      	mov	r0, r5
   b770c:	466b      	mov	r3, sp
   b770e:	4622      	mov	r2, r4
   b7710:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7712:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7714:	f7ff fcd4 	bl	b70c0 <netdb_getaddrinfo>
   b7718:	4605      	mov	r5, r0
   b771a:	2800      	cmp	r0, #0
   b771c:	d163      	bne.n	b77e6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b771e:	9b00      	ldr	r3, [sp, #0]
   b7720:	2b00      	cmp	r3, #0
   b7722:	d04b      	beq.n	b77bc <_ZN9TCPClient7connectEPKctm+0xc8>
   b7724:	695b      	ldr	r3, [r3, #20]
   b7726:	2b00      	cmp	r3, #0
   b7728:	d048      	beq.n	b77bc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b772a:	a806      	add	r0, sp, #24
   b772c:	f000 fbba 	bl	b7ea4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7730:	9b00      	ldr	r3, [sp, #0]
   b7732:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7734:	7863      	ldrb	r3, [r4, #1]
   b7736:	2b02      	cmp	r3, #2
   b7738:	d104      	bne.n	b7744 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b773a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b773c:	a806      	add	r0, sp, #24
   b773e:	f7ff ffbb 	bl	b76b8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7742:	e026      	b.n	b7792 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7744:	2b0a      	cmp	r3, #10
   b7746:	d124      	bne.n	b7792 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7748:	2211      	movs	r2, #17
   b774a:	4629      	mov	r1, r5
   b774c:	a801      	add	r0, sp, #4
   b774e:	f002 fcac 	bl	ba0aa <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7752:	68a3      	ldr	r3, [r4, #8]
   b7754:	2b00      	cmp	r3, #0
   b7756:	d038      	beq.n	b77ca <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7758:	f104 0308 	add.w	r3, r4, #8
   b775c:	f10d 0c04 	add.w	ip, sp, #4
   b7760:	3418      	adds	r4, #24
   b7762:	6818      	ldr	r0, [r3, #0]
   b7764:	6859      	ldr	r1, [r3, #4]
   b7766:	4662      	mov	r2, ip
   b7768:	c203      	stmia	r2!, {r0, r1}
   b776a:	3308      	adds	r3, #8
   b776c:	42a3      	cmp	r3, r4
   b776e:	4694      	mov	ip, r2
   b7770:	d1f7      	bne.n	b7762 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7772:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7774:	a901      	add	r1, sp, #4
   b7776:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7778:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b777c:	f000 fba0 	bl	b7ec0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7780:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7784:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7788:	ac07      	add	r4, sp, #28
   b778a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b778c:	f8dc 3000 	ldr.w	r3, [ip]
   b7790:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7792:	a806      	add	r0, sp, #24
   b7794:	f000 fba6 	bl	b7ee4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7798:	b180      	cbz	r0, b77bc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b779a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b779c:	ad07      	add	r5, sp, #28
   b779e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b77a2:	4b12      	ldr	r3, [pc, #72]	; (b77ec <_ZN9TCPClient7connectEPKctm+0xf8>)
   b77a4:	930c      	str	r3, [sp, #48]	; 0x30
   b77a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77a8:	ac0d      	add	r4, sp, #52	; 0x34
   b77aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77ac:	682b      	ldr	r3, [r5, #0]
   b77ae:	7023      	strb	r3, [r4, #0]
   b77b0:	463a      	mov	r2, r7
   b77b2:	4643      	mov	r3, r8
   b77b4:	a90c      	add	r1, sp, #48	; 0x30
   b77b6:	4630      	mov	r0, r6
   b77b8:	47c8      	blx	r9
   b77ba:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b77bc:	9800      	ldr	r0, [sp, #0]
   b77be:	f7ff fc77 	bl	b70b0 <netdb_freeaddrinfo>
}
   b77c2:	4628      	mov	r0, r5
   b77c4:	b013      	add	sp, #76	; 0x4c
   b77c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b77ca:	68e3      	ldr	r3, [r4, #12]
   b77cc:	2b00      	cmp	r3, #0
   b77ce:	d1c3      	bne.n	b7758 <_ZN9TCPClient7connectEPKctm+0x64>
   b77d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b77d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b77d8:	f7ff fc0a 	bl	b6ff0 <inet_htonl>
   b77dc:	4581      	cmp	r9, r0
   b77de:	d1bb      	bne.n	b7758 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b77e0:	f104 0114 	add.w	r1, r4, #20
   b77e4:	e7aa      	b.n	b773c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b77e6:	4625      	mov	r5, r4
   b77e8:	e7e8      	b.n	b77bc <_ZN9TCPClient7connectEPKctm+0xc8>
   b77ea:	bf00      	nop
   b77ec:	000bccb4 	.word	0x000bccb4

000b77f0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b77f0:	b538      	push	{r3, r4, r5, lr}
   b77f2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b77f4:	681a      	ldr	r2, [r3, #0]
   b77f6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b77f8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b77fa:	da10      	bge.n	b781e <_ZN9TCPClient9connectedEv+0x2e>
   b77fc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7800:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7804:	429a      	cmp	r2, r3
   b7806:	d10a      	bne.n	b781e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7808:	6803      	ldr	r3, [r0, #0]
   b780a:	691b      	ldr	r3, [r3, #16]
   b780c:	4798      	blx	r3
        if (!rv) {
   b780e:	4604      	mov	r4, r0
   b7810:	b928      	cbnz	r0, b781e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7812:	682b      	ldr	r3, [r5, #0]
   b7814:	4628      	mov	r0, r5
   b7816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7818:	4798      	blx	r3
        rv = available();
   b781a:	4620      	mov	r0, r4
}
   b781c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b781e:	2001      	movs	r0, #1
   b7820:	e7fc      	b.n	b781c <_ZN9TCPClient9connectedEv+0x2c>

000b7822 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7822:	b510      	push	{r4, lr}
   b7824:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7826:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b782a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b782e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7830:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7832:	d005      	beq.n	b7840 <_ZN9TCPClient4peekEv+0x1e>
   b7834:	6963      	ldr	r3, [r4, #20]
   b7836:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b783a:	4413      	add	r3, r2
   b783c:	7918      	ldrb	r0, [r3, #4]
}
   b783e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7840:	6803      	ldr	r3, [r0, #0]
   b7842:	691b      	ldr	r3, [r3, #16]
   b7844:	4798      	blx	r3
   b7846:	2800      	cmp	r0, #0
   b7848:	d1f4      	bne.n	b7834 <_ZN9TCPClient4peekEv+0x12>
   b784a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b784e:	e7f6      	b.n	b783e <_ZN9TCPClient4peekEv+0x1c>

000b7850 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7852:	6943      	ldr	r3, [r0, #20]
   b7854:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7856:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b785a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b785e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7860:	4605      	mov	r5, r0
   b7862:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7864:	d016      	beq.n	b7894 <_ZN9TCPClient4readEPhj+0x44>
   b7866:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7868:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b786c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7870:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7872:	42bc      	cmp	r4, r7
   b7874:	bf28      	it	cs
   b7876:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7878:	3304      	adds	r3, #4
   b787a:	4622      	mov	r2, r4
   b787c:	4419      	add	r1, r3
   b787e:	4630      	mov	r0, r6
   b7880:	f002 fc05 	bl	ba08e <memcpy>
   b7884:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7886:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b788a:	4423      	add	r3, r4
   b788c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7890:	4620      	mov	r0, r4
   b7892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7894:	6803      	ldr	r3, [r0, #0]
   b7896:	691b      	ldr	r3, [r3, #16]
   b7898:	4798      	blx	r3
   b789a:	2800      	cmp	r0, #0
   b789c:	d1e3      	bne.n	b7866 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b789e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b78a2:	e7f5      	b.n	b7890 <_ZN9TCPClient4readEPhj+0x40>

000b78a4 <_ZN9TCPClient12flush_bufferEv>:
   b78a4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b78a6:	2300      	movs	r3, #0
   b78a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b78ac:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b78ae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b78b2:	4770      	bx	lr

000b78b4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b78b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78b8:	461f      	mov	r7, r3
    stop();
   b78ba:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b78bc:	460c      	mov	r4, r1
    stop();
   b78be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b78c0:	b08a      	sub	sp, #40	; 0x28
   b78c2:	4605      	mov	r5, r0
   b78c4:	4616      	mov	r6, r2
    stop();
   b78c6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b78c8:	7d23      	ldrb	r3, [r4, #20]
   b78ca:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b78ce:	2b04      	cmp	r3, #4
   b78d0:	bf0c      	ite	eq
   b78d2:	2002      	moveq	r0, #2
   b78d4:	200a      	movne	r0, #10
   b78d6:	2206      	movs	r2, #6
   b78d8:	2101      	movs	r1, #1
   b78da:	f7ff fb39 	bl	b6f50 <sock_socket>
   b78de:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b78e2:	696b      	ldr	r3, [r5, #20]
   b78e4:	681b      	ldr	r3, [r3, #0]
   b78e6:	2b00      	cmp	r3, #0
   b78e8:	da08      	bge.n	b78fc <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b78ea:	682b      	ldr	r3, [r5, #0]
   b78ec:	4628      	mov	r0, r5
   b78ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b78f0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b78f2:	4798      	blx	r3
}
   b78f4:	4620      	mov	r0, r4
   b78f6:	b00a      	add	sp, #40	; 0x28
   b78f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b78fc:	4628      	mov	r0, r5
   b78fe:	f7ff ffd1 	bl	b78a4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7902:	b1b7      	cbz	r7, b7932 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7904:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7906:	a903      	add	r1, sp, #12
   b7908:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b790a:	9303      	str	r3, [sp, #12]
   b790c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7910:	f7ff fbc6 	bl	b70a0 <if_index_to_name>
   b7914:	2800      	cmp	r0, #0
   b7916:	d1e8      	bne.n	b78ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7918:	6968      	ldr	r0, [r5, #20]
   b791a:	2306      	movs	r3, #6
   b791c:	9300      	str	r3, [sp, #0]
   b791e:	6800      	ldr	r0, [r0, #0]
   b7920:	ab03      	add	r3, sp, #12
   b7922:	f241 020b 	movw	r2, #4107	; 0x100b
   b7926:	f640 71ff 	movw	r1, #4095	; 0xfff
   b792a:	f7ff fad9 	bl	b6ee0 <sock_setsockopt>
   b792e:	2800      	cmp	r0, #0
   b7930:	d1db      	bne.n	b78ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7932:	221c      	movs	r2, #28
   b7934:	2100      	movs	r1, #0
   b7936:	a803      	add	r0, sp, #12
   b7938:	f002 fbb7 	bl	ba0aa <memset>
    if (ip.version() == 4) {
   b793c:	7d23      	ldrb	r3, [r4, #20]
   b793e:	2b04      	cmp	r3, #4
   b7940:	d11d      	bne.n	b797e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7942:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7946:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7948:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b794c:	f7ff fb60 	bl	b7010 <inet_htons>
   b7950:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7954:	6860      	ldr	r0, [r4, #4]
   b7956:	f7ff fb4b 	bl	b6ff0 <inet_htonl>
   b795a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b795c:	696b      	ldr	r3, [r5, #20]
   b795e:	221c      	movs	r2, #28
   b7960:	6818      	ldr	r0, [r3, #0]
   b7962:	a903      	add	r1, sp, #12
   b7964:	f7ff facc 	bl	b6f00 <sock_connect>
   b7968:	2800      	cmp	r0, #0
   b796a:	d1be      	bne.n	b78ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b796c:	3404      	adds	r4, #4
   b796e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7970:	696d      	ldr	r5, [r5, #20]
   b7972:	358c      	adds	r5, #140	; 0x8c
   b7974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7976:	6823      	ldr	r3, [r4, #0]
   b7978:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b797a:	2401      	movs	r4, #1
   b797c:	e7ba      	b.n	b78f4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b797e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7982:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7984:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7988:	f7ff fb42 	bl	b7010 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b798c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b798e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7992:	1d23      	adds	r3, r4, #4
   b7994:	f104 0714 	add.w	r7, r4, #20
   b7998:	6818      	ldr	r0, [r3, #0]
   b799a:	6859      	ldr	r1, [r3, #4]
   b799c:	4632      	mov	r2, r6
   b799e:	c203      	stmia	r2!, {r0, r1}
   b79a0:	3308      	adds	r3, #8
   b79a2:	42bb      	cmp	r3, r7
   b79a4:	4616      	mov	r6, r2
   b79a6:	d1f7      	bne.n	b7998 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b79a8:	e7d8      	b.n	b795c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b79ac <_ZN9TCPClient9availableEv>:
{
   b79ac:	b530      	push	{r4, r5, lr}
   b79ae:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b79b0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b79b4:	b08b      	sub	sp, #44	; 0x2c
   b79b6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b79b8:	b12b      	cbz	r3, b79c6 <_ZN9TCPClient9availableEv+0x1a>
   b79ba:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b79be:	429a      	cmp	r2, r3
   b79c0:	d101      	bne.n	b79c6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b79c2:	f7ff ff6f 	bl	b78a4 <_ZN9TCPClient12flush_bufferEv>
   b79c6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b79c8:	6808      	ldr	r0, [r1, #0]
   b79ca:	2800      	cmp	r0, #0
   b79cc:	db18      	blt.n	b7a00 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b79ce:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b79d2:	2d7f      	cmp	r5, #127	; 0x7f
   b79d4:	d814      	bhi.n	b7a00 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b79d6:	3104      	adds	r1, #4
   b79d8:	2308      	movs	r3, #8
   b79da:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b79de:	4429      	add	r1, r5
   b79e0:	f7ff fa96 	bl	b6f10 <sock_recv>
            if (ret > 0) {
   b79e4:	2800      	cmp	r0, #0
   b79e6:	dd13      	ble.n	b7a10 <_ZN9TCPClient9availableEv+0x64>
   b79e8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b79ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79ee:	b90a      	cbnz	r2, b79f4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b79f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b79f4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b79f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79fa:	4410      	add	r0, r2
   b79fc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7a00:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7a02:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7a06:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7a0a:	1ac0      	subs	r0, r0, r3
   b7a0c:	b00b      	add	sp, #44	; 0x2c
   b7a0e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7a10:	f7ff fce6 	bl	b73e0 <__errno>
   b7a14:	6803      	ldr	r3, [r0, #0]
   b7a16:	2b0b      	cmp	r3, #11
   b7a18:	d0f2      	beq.n	b7a00 <_ZN9TCPClient9availableEv+0x54>
   b7a1a:	f7ff fce1 	bl	b73e0 <__errno>
   b7a1e:	6803      	ldr	r3, [r0, #0]
   b7a20:	2b0b      	cmp	r3, #11
   b7a22:	d0ed      	beq.n	b7a00 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7a24:	2320      	movs	r3, #32
   b7a26:	2500      	movs	r5, #0
   b7a28:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7a2c:	f7ff fcd8 	bl	b73e0 <__errno>
   b7a30:	6803      	ldr	r3, [r0, #0]
   b7a32:	9301      	str	r3, [sp, #4]
   b7a34:	4b08      	ldr	r3, [pc, #32]	; (b7a58 <_ZN9TCPClient9availableEv+0xac>)
   b7a36:	4909      	ldr	r1, [pc, #36]	; (b7a5c <_ZN9TCPClient9availableEv+0xb0>)
   b7a38:	9300      	str	r3, [sp, #0]
   b7a3a:	aa02      	add	r2, sp, #8
   b7a3c:	462b      	mov	r3, r5
   b7a3e:	2032      	movs	r0, #50	; 0x32
   b7a40:	f7ff fb66 	bl	b7110 <log_message>
                    sock_close(d_->sock);
   b7a44:	6963      	ldr	r3, [r4, #20]
   b7a46:	6818      	ldr	r0, [r3, #0]
   b7a48:	f7ff fa52 	bl	b6ef0 <sock_close>
   b7a4c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7a52:	601a      	str	r2, [r3, #0]
   b7a54:	e7d4      	b.n	b7a00 <_ZN9TCPClient9availableEv+0x54>
   b7a56:	bf00      	nop
   b7a58:	000bcb67 	.word	0x000bcb67
   b7a5c:	000bcb60 	.word	0x000bcb60

000b7a60 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7a60:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7a62:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7a64:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7a66:	6818      	ldr	r0, [r3, #0]
   b7a68:	2800      	cmp	r0, #0
   b7a6a:	db01      	blt.n	b7a70 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7a6c:	f7ff fa40 	bl	b6ef0 <sock_close>
   b7a70:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7a76:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7a78:	6960      	ldr	r0, [r4, #20]
   b7a7a:	2211      	movs	r2, #17
   b7a7c:	2100      	movs	r1, #0
   b7a7e:	308c      	adds	r0, #140	; 0x8c
   b7a80:	f002 fb13 	bl	ba0aa <memset>
    flush_buffer();
   b7a84:	4620      	mov	r0, r4
}
   b7a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7a8a:	f7ff bf0b 	b.w	b78a4 <_ZN9TCPClient12flush_bufferEv>

000b7a8e <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   b7a8e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7a90:	6818      	ldr	r0, [r3, #0]
}
   b7a92:	43c0      	mvns	r0, r0
   b7a94:	0fc0      	lsrs	r0, r0, #31
   b7a96:	4770      	bx	lr

000b7a98 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7a98:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7a9a:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7a9c:	4604      	mov	r4, r0
          total(0) {
   b7a9e:	6001      	str	r1, [r0, #0]
   b7aa0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7aa4:	3088      	adds	r0, #136	; 0x88
   b7aa6:	f000 f9fd 	bl	b7ea4 <_ZN9IPAddressC1Ev>
}
   b7aaa:	4620      	mov	r0, r4
   b7aac:	bd10      	pop	{r4, pc}
	...

000b7ab0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7ab2:	2300      	movs	r3, #0
   b7ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7ab8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7abc:	4a0e      	ldr	r2, [pc, #56]	; (b7af8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7abe:	6103      	str	r3, [r0, #16]
   b7ac0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7ac2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7ac4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7ac6:	20ac      	movs	r0, #172	; 0xac
   b7ac8:	9101      	str	r1, [sp, #4]
   b7aca:	f7fc fae4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7ace:	1e05      	subs	r5, r0, #0
   b7ad0:	f105 060c 	add.w	r6, r5, #12
   b7ad4:	d008      	beq.n	b7ae8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7ad6:	2301      	movs	r3, #1
   b7ad8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7adc:	4b07      	ldr	r3, [pc, #28]	; (b7afc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7ade:	9901      	ldr	r1, [sp, #4]
   b7ae0:	602b      	str	r3, [r5, #0]
   b7ae2:	4630      	mov	r0, r6
   b7ae4:	f7ff ffd8 	bl	b7a98 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7ae8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7aea:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7aee:	f7ff fed9 	bl	b78a4 <_ZN9TCPClient12flush_bufferEv>
}
   b7af2:	b002      	add	sp, #8
   b7af4:	bd70      	pop	{r4, r5, r6, pc}
   b7af6:	bf00      	nop
   b7af8:	000bcba4 	.word	0x000bcba4
   b7afc:	000bcb80 	.word	0x000bcb80

000b7b00 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7b00:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7b02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7b06:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7b08:	f7ff ffd2 	bl	b7ab0 <_ZN9TCPClientC1Ei>
}
   b7b0c:	4620      	mov	r0, r4
   b7b0e:	bd10      	pop	{r4, pc}

000b7b10 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7b10:	b510      	push	{r4, lr}
   b7b12:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7b14:	6800      	ldr	r0, [r0, #0]
   b7b16:	2800      	cmp	r0, #0
   b7b18:	db01      	blt.n	b7b1e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7b1a:	f7ff f9e9 	bl	b6ef0 <sock_close>
    }
}
   b7b1e:	4620      	mov	r0, r4
   b7b20:	bd10      	pop	{r4, pc}

000b7b22 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7b22:	300c      	adds	r0, #12
   b7b24:	f7ff bff4 	b.w	b7b10 <_ZN9TCPClient4DataD1Ev>

000b7b28 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7b28:	4770      	bx	lr

000b7b2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b2c:	4606      	mov	r6, r0
   b7b2e:	4615      	mov	r5, r2
   b7b30:	460c      	mov	r4, r1
   b7b32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7b34:	42bc      	cmp	r4, r7
   b7b36:	d006      	beq.n	b7b46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7b38:	6833      	ldr	r3, [r6, #0]
   b7b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7b3e:	689b      	ldr	r3, [r3, #8]
   b7b40:	4630      	mov	r0, r6
   b7b42:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7b44:	e7f6      	b.n	b7b34 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7b46:	4628      	mov	r0, r5
   b7b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b4a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7b4a:	7c00      	ldrb	r0, [r0, #16]
   b7b4c:	2200      	movs	r2, #0
   b7b4e:	f7ff b987 	b.w	b6e60 <hal_i2c_write>

000b7b52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7b52:	7c00      	ldrb	r0, [r0, #16]
   b7b54:	2100      	movs	r1, #0
   b7b56:	f7ff b98b 	b.w	b6e70 <hal_i2c_available>

000b7b5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7b5a:	7c00      	ldrb	r0, [r0, #16]
   b7b5c:	2100      	movs	r1, #0
   b7b5e:	f7ff b98f 	b.w	b6e80 <hal_i2c_read>

000b7b62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7b62:	7c00      	ldrb	r0, [r0, #16]
   b7b64:	2100      	movs	r1, #0
   b7b66:	f7ff b993 	b.w	b6e90 <hal_i2c_peek>

000b7b6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7b6a:	7c00      	ldrb	r0, [r0, #16]
   b7b6c:	2100      	movs	r1, #0
   b7b6e:	f7ff b997 	b.w	b6ea0 <hal_i2c_flush>

000b7b72 <_ZN7TwoWireD0Ev>:
   b7b72:	b510      	push	{r4, lr}
   b7b74:	2114      	movs	r1, #20
   b7b76:	4604      	mov	r4, r0
   b7b78:	f7fc fa91 	bl	b409e <_ZdlPvj>
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	bd10      	pop	{r4, pc}

000b7b80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7b80:	b510      	push	{r4, lr}
   b7b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b86:	4604      	mov	r4, r0
   b7b88:	4608      	mov	r0, r1
   b7b8a:	2100      	movs	r1, #0
   b7b8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b90:	4b03      	ldr	r3, [pc, #12]	; (b7ba0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7b92:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7b94:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7b96:	4611      	mov	r1, r2
   b7b98:	f7ff f98a 	bl	b6eb0 <hal_i2c_init>
}
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	bd10      	pop	{r4, pc}
   b7ba0:	000bcbf0 	.word	0x000bcbf0

000b7ba4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7ba4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7ba6:	2100      	movs	r1, #0
   b7ba8:	7c00      	ldrb	r0, [r0, #16]
   b7baa:	f7ff f989 	bl	b6ec0 <hal_i2c_lock>
}
   b7bae:	fab0 f080 	clz	r0, r0
   b7bb2:	0940      	lsrs	r0, r0, #5
   b7bb4:	bd08      	pop	{r3, pc}

000b7bb6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b7bb6:	b510      	push	{r4, lr}
      if (_M_empty())
   b7bb8:	6883      	ldr	r3, [r0, #8]
   b7bba:	4604      	mov	r4, r0
   b7bbc:	b90b      	cbnz	r3, b7bc2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7bbe:	f001 fc60 	bl	b9482 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7bc2:	68c3      	ldr	r3, [r0, #12]
   b7bc4:	4798      	blx	r3
      if (_M_manager)
   b7bc6:	68a3      	ldr	r3, [r4, #8]
   b7bc8:	b11b      	cbz	r3, b7bd2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7bca:	2203      	movs	r2, #3
   b7bcc:	4621      	mov	r1, r4
   b7bce:	4620      	mov	r0, r4
   b7bd0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7bd2:	4620      	mov	r0, r4
   b7bd4:	2110      	movs	r1, #16
}
   b7bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7bda:	f7fc ba60 	b.w	b409e <_ZdlPvj>

000b7bde <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7bde:	4770      	bx	lr

000b7be0 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7be0:	7441      	strb	r1, [r0, #17]
}
   b7be2:	4770      	bx	lr

000b7be4 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7be4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7be6:	7c00      	ldrb	r0, [r0, #16]
   b7be8:	f7ff f9e2 	bl	b6fb0 <hal_usart_available_data_for_write>
}
   b7bec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7bf0:	bd08      	pop	{r3, pc}

000b7bf2 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7bf2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7bf4:	7c00      	ldrb	r0, [r0, #16]
   b7bf6:	f7ff f9bb 	bl	b6f70 <hal_usart_available>
}
   b7bfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7bfe:	bd08      	pop	{r3, pc}

000b7c00 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7c00:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7c02:	7c00      	ldrb	r0, [r0, #16]
   b7c04:	f7ff f9c4 	bl	b6f90 <hal_usart_peek>
}
   b7c08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c0c:	bd08      	pop	{r3, pc}

000b7c0e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7c0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7c10:	7c00      	ldrb	r0, [r0, #16]
   b7c12:	f7ff f9b5 	bl	b6f80 <hal_usart_read>
}
   b7c16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c1a:	bd08      	pop	{r3, pc}

000b7c1c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7c1c:	7c00      	ldrb	r0, [r0, #16]
   b7c1e:	f7ff b9bf 	b.w	b6fa0 <hal_usart_flush>

000b7c22 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c24:	7c45      	ldrb	r5, [r0, #17]
{
   b7c26:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c28:	b12d      	cbz	r5, b7c36 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7c2a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7c2c:	b003      	add	sp, #12
   b7c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7c32:	f7ff b995 	b.w	b6f60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c36:	7c00      	ldrb	r0, [r0, #16]
   b7c38:	9101      	str	r1, [sp, #4]
   b7c3a:	f7ff f9b9 	bl	b6fb0 <hal_usart_available_data_for_write>
   b7c3e:	2800      	cmp	r0, #0
   b7c40:	9901      	ldr	r1, [sp, #4]
   b7c42:	dcf2      	bgt.n	b7c2a <_ZN11USARTSerial5writeEh+0x8>
}
   b7c44:	4628      	mov	r0, r5
   b7c46:	b003      	add	sp, #12
   b7c48:	bd30      	pop	{r4, r5, pc}

000b7c4a <_ZN11USARTSerialD0Ev>:
   b7c4a:	b510      	push	{r4, lr}
   b7c4c:	2114      	movs	r1, #20
   b7c4e:	4604      	mov	r4, r0
   b7c50:	f7fc fa25 	bl	b409e <_ZdlPvj>
   b7c54:	4620      	mov	r0, r4
   b7c56:	bd10      	pop	{r4, pc}

000b7c58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7c58:	b510      	push	{r4, lr}
   b7c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c5e:	4604      	mov	r4, r0
   b7c60:	4608      	mov	r0, r1
   b7c62:	4611      	mov	r1, r2
   b7c64:	2200      	movs	r2, #0
   b7c66:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7c6a:	4b04      	ldr	r3, [pc, #16]	; (b7c7c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7c6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7c6e:	2301      	movs	r3, #1
  _serial = serial;
   b7c70:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7c72:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7c74:	f7ff f9ac 	bl	b6fd0 <hal_usart_init_ex>
}
   b7c78:	4620      	mov	r0, r4
   b7c7a:	bd10      	pop	{r4, pc}
   b7c7c:	000bcc18 	.word	0x000bcc18

000b7c80 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7c80:	7c00      	ldrb	r0, [r0, #16]
   b7c82:	2300      	movs	r3, #0
   b7c84:	f7ff b99c 	b.w	b6fc0 <hal_usart_begin_config>

000b7c88 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7c88:	2200      	movs	r2, #0
   b7c8a:	f7ff bff9 	b.w	b7c80 <_ZN11USARTSerial5beginEmm>

000b7c8e <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7c8e:	2200      	movs	r2, #0
   b7c90:	6840      	ldr	r0, [r0, #4]
   b7c92:	4611      	mov	r1, r2
   b7c94:	f7ff babe 	b.w	b7214 <network_ready>

000b7c98 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b7c98:	2200      	movs	r2, #0
   b7c9a:	6840      	ldr	r0, [r0, #4]
   b7c9c:	4611      	mov	r1, r2
   b7c9e:	f7ff bad9 	b.w	b7254 <network_listening>

000b7ca2 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ca2:	2200      	movs	r2, #0
   b7ca4:	6840      	ldr	r0, [r0, #4]
   b7ca6:	4611      	mov	r1, r2
   b7ca8:	f7ff bae4 	b.w	b7274 <network_get_listen_timeout>

000b7cac <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7cac:	6840      	ldr	r0, [r0, #4]
   b7cae:	2200      	movs	r2, #0
   b7cb0:	f7ff bad8 	b.w	b7264 <network_set_listen_timeout>

000b7cb4 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7cb4:	6840      	ldr	r0, [r0, #4]
   b7cb6:	2200      	movs	r2, #0
   b7cb8:	f081 0101 	eor.w	r1, r1, #1
   b7cbc:	f7ff bac2 	b.w	b7244 <network_listen>

000b7cc0 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7cc0:	2300      	movs	r3, #0
   b7cc2:	6840      	ldr	r0, [r0, #4]
   b7cc4:	461a      	mov	r2, r3
   b7cc6:	4619      	mov	r1, r3
   b7cc8:	f7ff bab4 	b.w	b7234 <network_off>

000b7ccc <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7ccc:	2300      	movs	r3, #0
   b7cce:	6840      	ldr	r0, [r0, #4]
   b7cd0:	461a      	mov	r2, r3
   b7cd2:	4619      	mov	r1, r3
   b7cd4:	f7ff baa6 	b.w	b7224 <network_on>

000b7cd8 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7cd8:	2200      	movs	r2, #0
   b7cda:	6840      	ldr	r0, [r0, #4]
   b7cdc:	4611      	mov	r1, r2
   b7cde:	f7ff ba89 	b.w	b71f4 <network_connecting>

000b7ce2 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7ce2:	6840      	ldr	r0, [r0, #4]
   b7ce4:	2200      	movs	r2, #0
   b7ce6:	2102      	movs	r1, #2
   b7ce8:	f7ff ba8c 	b.w	b7204 <network_disconnect>

000b7cec <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7cec:	2300      	movs	r3, #0
   b7cee:	6840      	ldr	r0, [r0, #4]
   b7cf0:	461a      	mov	r2, r3
   b7cf2:	f7ff ba77 	b.w	b71e4 <network_connect>
	...

000b7cf8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b7cf8:	4b08      	ldr	r3, [pc, #32]	; (b7d1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b7cfa:	b510      	push	{r4, lr}
   b7cfc:	2428      	movs	r4, #40	; 0x28
   b7cfe:	4622      	mov	r2, r4
   b7d00:	4618      	mov	r0, r3
   b7d02:	2100      	movs	r1, #0
   b7d04:	f002 f9d1 	bl	ba0aa <memset>
   b7d08:	4b05      	ldr	r3, [pc, #20]	; (b7d20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b7d0a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7d10:	6042      	str	r2, [r0, #4]
   b7d12:	2204      	movs	r2, #4
   b7d14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b7d16:	4a03      	ldr	r2, [pc, #12]	; (b7d24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7d18:	601a      	str	r2, [r3, #0]
   b7d1a:	bd10      	pop	{r4, pc}
   b7d1c:	2003e66c 	.word	0x2003e66c
   b7d20:	2003e664 	.word	0x2003e664
   b7d24:	000bcc48 	.word	0x000bcc48

000b7d28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d28:	7441      	strb	r1, [r0, #17]
}
   b7d2a:	4770      	bx	lr

000b7d2c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d2c:	4770      	bx	lr

000b7d2e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7d2e:	4770      	bx	lr

000b7d30 <_ZN9USBSerial4readEv>:
{
   b7d30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7d32:	2100      	movs	r1, #0
   b7d34:	7c00      	ldrb	r0, [r0, #16]
   b7d36:	f7ff f87b 	bl	b6e30 <HAL_USB_USART_Receive_Data>
}
   b7d3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d3e:	bd08      	pop	{r3, pc}

000b7d40 <_ZN9USBSerial4peekEv>:
{
   b7d40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7d42:	2101      	movs	r1, #1
   b7d44:	7c00      	ldrb	r0, [r0, #16]
   b7d46:	f7ff f873 	bl	b6e30 <HAL_USB_USART_Receive_Data>
}
   b7d4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d4e:	bd08      	pop	{r3, pc}

000b7d50 <_ZN9USBSerial17availableForWriteEv>:
{
   b7d50:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7d52:	7c00      	ldrb	r0, [r0, #16]
   b7d54:	f7ff f864 	bl	b6e20 <HAL_USB_USART_Available_Data_For_Write>
}
   b7d58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d5c:	bd08      	pop	{r3, pc}

000b7d5e <_ZN9USBSerial9availableEv>:
{
   b7d5e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7d60:	7c00      	ldrb	r0, [r0, #16]
   b7d62:	f7ff f855 	bl	b6e10 <HAL_USB_USART_Available_Data>
}
   b7d66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d6a:	bd08      	pop	{r3, pc}

000b7d6c <_ZN9USBSerial5writeEh>:
{
   b7d6c:	b513      	push	{r0, r1, r4, lr}
   b7d6e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d70:	7c00      	ldrb	r0, [r0, #16]
{
   b7d72:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d74:	f7ff f854 	bl	b6e20 <HAL_USB_USART_Available_Data_For_Write>
   b7d78:	2800      	cmp	r0, #0
   b7d7a:	9901      	ldr	r1, [sp, #4]
   b7d7c:	dc01      	bgt.n	b7d82 <_ZN9USBSerial5writeEh+0x16>
   b7d7e:	7c60      	ldrb	r0, [r4, #17]
   b7d80:	b120      	cbz	r0, b7d8c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7d82:	7c20      	ldrb	r0, [r4, #16]
   b7d84:	f7ff f85c 	bl	b6e40 <HAL_USB_USART_Send_Data>
   b7d88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7d8c:	b002      	add	sp, #8
   b7d8e:	bd10      	pop	{r4, pc}

000b7d90 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7d90:	7c00      	ldrb	r0, [r0, #16]
   b7d92:	f7ff b85d 	b.w	b6e50 <HAL_USB_USART_Flush_Data>

000b7d96 <_ZN9USBSerialD0Ev>:
   b7d96:	b510      	push	{r4, lr}
   b7d98:	2114      	movs	r1, #20
   b7d9a:	4604      	mov	r4, r0
   b7d9c:	f7fc f97f 	bl	b409e <_ZdlPvj>
   b7da0:	4620      	mov	r0, r4
   b7da2:	bd10      	pop	{r4, pc}

000b7da4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7da4:	b510      	push	{r4, lr}
   b7da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7daa:	4604      	mov	r4, r0
   b7dac:	4608      	mov	r0, r1
   b7dae:	2100      	movs	r1, #0
   b7db0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7db4:	4b04      	ldr	r3, [pc, #16]	; (b7dc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7db6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7db8:	2301      	movs	r3, #1
  _serial = serial;
   b7dba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7dbc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7dbe:	4611      	mov	r1, r2
   b7dc0:	f7ff f816 	bl	b6df0 <HAL_USB_USART_Init>
}
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	bd10      	pop	{r4, pc}
   b7dc8:	000bcc84 	.word	0x000bcc84

000b7dcc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7dcc:	7c00      	ldrb	r0, [r0, #16]
   b7dce:	2200      	movs	r2, #0
   b7dd0:	f7ff b816 	b.w	b6e00 <HAL_USB_USART_Begin>

000b7dd4 <_Z19acquireSerialBufferv>:
{
   b7dd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7dd6:	2214      	movs	r2, #20
{
   b7dd8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7dda:	2100      	movs	r1, #0
   b7ddc:	f002 f965 	bl	ba0aa <memset>
}
   b7de0:	4620      	mov	r0, r4
   b7de2:	bd10      	pop	{r4, pc}

000b7de4 <_Z16_fetch_usbserialv>:
{
   b7de4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7de6:	4c0f      	ldr	r4, [pc, #60]	; (b7e24 <_Z16_fetch_usbserialv+0x40>)
{
   b7de8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7dea:	a803      	add	r0, sp, #12
   b7dec:	f7ff fff2 	bl	b7dd4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7df0:	7821      	ldrb	r1, [r4, #0]
   b7df2:	f3bf 8f5b 	dmb	ish
   b7df6:	f011 0101 	ands.w	r1, r1, #1
   b7dfa:	d10f      	bne.n	b7e1c <_Z16_fetch_usbserialv+0x38>
   b7dfc:	4620      	mov	r0, r4
   b7dfe:	9101      	str	r1, [sp, #4]
   b7e00:	f7fc f94f 	bl	b40a2 <__cxa_guard_acquire>
   b7e04:	9901      	ldr	r1, [sp, #4]
   b7e06:	b148      	cbz	r0, b7e1c <_Z16_fetch_usbserialv+0x38>
   b7e08:	aa03      	add	r2, sp, #12
   b7e0a:	4807      	ldr	r0, [pc, #28]	; (b7e28 <_Z16_fetch_usbserialv+0x44>)
   b7e0c:	f7ff ffca 	bl	b7da4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7e10:	4620      	mov	r0, r4
   b7e12:	f7fc f94b 	bl	b40ac <__cxa_guard_release>
   b7e16:	4805      	ldr	r0, [pc, #20]	; (b7e2c <_Z16_fetch_usbserialv+0x48>)
   b7e18:	f002 f92c 	bl	ba074 <atexit>
	return _usbserial;
}
   b7e1c:	4802      	ldr	r0, [pc, #8]	; (b7e28 <_Z16_fetch_usbserialv+0x44>)
   b7e1e:	b008      	add	sp, #32
   b7e20:	bd10      	pop	{r4, pc}
   b7e22:	bf00      	nop
   b7e24:	2003e694 	.word	0x2003e694
   b7e28:	2003e698 	.word	0x2003e698
   b7e2c:	000b7d2d 	.word	0x000b7d2d

000b7e30 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b7e30:	4770      	bx	lr

000b7e32 <_ZN9IPAddressD0Ev>:
   b7e32:	b510      	push	{r4, lr}
   b7e34:	2118      	movs	r1, #24
   b7e36:	4604      	mov	r4, r0
   b7e38:	f7fc f931 	bl	b409e <_ZdlPvj>
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	bd10      	pop	{r4, pc}

000b7e40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7e40:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7e42:	7d03      	ldrb	r3, [r0, #20]
   b7e44:	2b06      	cmp	r3, #6
{
   b7e46:	b08d      	sub	sp, #52	; 0x34
   b7e48:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e4a:	f100 0704 	add.w	r7, r0, #4
   b7e4e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7e52:	d012      	beq.n	b7e7a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7e54:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7e58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7e5c:	220a      	movs	r2, #10
   b7e5e:	4630      	mov	r0, r6
   b7e60:	f000 fd47 	bl	b88f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7e64:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7e66:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7e68:	d019      	beq.n	b7e9e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7e6a:	2c00      	cmp	r4, #0
   b7e6c:	d0f4      	beq.n	b7e58 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7e6e:	212e      	movs	r1, #46	; 0x2e
   b7e70:	4630      	mov	r0, r6
   b7e72:	f000 fd25 	bl	b88c0 <_ZN5Print5printEc>
   b7e76:	4404      	add	r4, r0
   b7e78:	e7ee      	b.n	b7e58 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e7a:	232f      	movs	r3, #47	; 0x2f
   b7e7c:	466a      	mov	r2, sp
   b7e7e:	4639      	mov	r1, r7
   b7e80:	200a      	movs	r0, #10
		buf[0] = 0;
   b7e82:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e86:	f7ff f8ab 	bl	b6fe0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7e8a:	4668      	mov	r0, sp
   b7e8c:	f002 f981 	bl	ba192 <strlen>
   b7e90:	6833      	ldr	r3, [r6, #0]
   b7e92:	4602      	mov	r2, r0
   b7e94:	68db      	ldr	r3, [r3, #12]
   b7e96:	4669      	mov	r1, sp
   b7e98:	4630      	mov	r0, r6
   b7e9a:	4798      	blx	r3
   b7e9c:	4604      	mov	r4, r0
    }
    return n;
}
   b7e9e:	4620      	mov	r0, r4
   b7ea0:	b00d      	add	sp, #52	; 0x34
   b7ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ea4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7ea4:	b510      	push	{r4, lr}
   b7ea6:	4b05      	ldr	r3, [pc, #20]	; (b7ebc <_ZN9IPAddressC1Ev+0x18>)
   b7ea8:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b7eaa:	2211      	movs	r2, #17
   b7eac:	f840 3b04 	str.w	r3, [r0], #4
   b7eb0:	2100      	movs	r1, #0
   b7eb2:	f002 f8fa 	bl	ba0aa <memset>
}
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	bd10      	pop	{r4, pc}
   b7eba:	bf00      	nop
   b7ebc:	000bccb4 	.word	0x000bccb4

000b7ec0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7ec0:	4603      	mov	r3, r0
   b7ec2:	4a07      	ldr	r2, [pc, #28]	; (b7ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7ec4:	b510      	push	{r4, lr}
   b7ec6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7eca:	f101 0210 	add.w	r2, r1, #16
   b7ece:	f851 4b04 	ldr.w	r4, [r1], #4
   b7ed2:	f843 4b04 	str.w	r4, [r3], #4
   b7ed6:	4291      	cmp	r1, r2
   b7ed8:	d1f9      	bne.n	b7ece <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7eda:	780a      	ldrb	r2, [r1, #0]
   b7edc:	701a      	strb	r2, [r3, #0]
}
   b7ede:	bd10      	pop	{r4, pc}
   b7ee0:	000bccb4 	.word	0x000bccb4

000b7ee4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7ee4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7ee6:	2b04      	cmp	r3, #4
   b7ee8:	d104      	bne.n	b7ef4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7eea:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7eec:	3800      	subs	r0, #0
   b7eee:	bf18      	it	ne
   b7ef0:	2001      	movne	r0, #1
   b7ef2:	4770      	bx	lr
    } else if (version() == 6) {
   b7ef4:	2b06      	cmp	r3, #6
   b7ef6:	d107      	bne.n	b7f08 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7ef8:	6843      	ldr	r3, [r0, #4]
   b7efa:	b93b      	cbnz	r3, b7f0c <_ZNK9IPAddresscvbEv+0x28>
   b7efc:	6883      	ldr	r3, [r0, #8]
   b7efe:	b92b      	cbnz	r3, b7f0c <_ZNK9IPAddresscvbEv+0x28>
   b7f00:	68c3      	ldr	r3, [r0, #12]
   b7f02:	b91b      	cbnz	r3, b7f0c <_ZNK9IPAddresscvbEv+0x28>
   b7f04:	6900      	ldr	r0, [r0, #16]
   b7f06:	e7f1      	b.n	b7eec <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7f08:	2000      	movs	r0, #0
   b7f0a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7f0c:	2001      	movs	r0, #1
}
   b7f0e:	4770      	bx	lr

000b7f10 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7f10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7f12:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7f16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7f1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7f1e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7f22:	2304      	movs	r3, #4
   b7f24:	6041      	str	r1, [r0, #4]
   b7f26:	7503      	strb	r3, [r0, #20]
}
   b7f28:	bd10      	pop	{r4, pc}
	...

000b7f2c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b7f2c:	b513      	push	{r0, r1, r4, lr}
   b7f2e:	4c04      	ldr	r4, [pc, #16]	; (b7f40 <_ZN9IPAddressC1Ehhhh+0x14>)
   b7f30:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b7f32:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7f36:	9400      	str	r4, [sp, #0]
   b7f38:	f7ff ffea 	bl	b7f10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7f3c:	b002      	add	sp, #8
   b7f3e:	bd10      	pop	{r4, pc}
   b7f40:	000bccb4 	.word	0x000bccb4

000b7f44 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7f44:	b507      	push	{r0, r1, r2, lr}
   b7f46:	4b06      	ldr	r3, [pc, #24]	; (b7f60 <_ZN9IPAddressC1EPKh+0x1c>)
   b7f48:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7f4a:	78cb      	ldrb	r3, [r1, #3]
   b7f4c:	9300      	str	r3, [sp, #0]
   b7f4e:	788b      	ldrb	r3, [r1, #2]
   b7f50:	784a      	ldrb	r2, [r1, #1]
   b7f52:	7809      	ldrb	r1, [r1, #0]
   b7f54:	f7ff ffdc 	bl	b7f10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7f58:	b003      	add	sp, #12
   b7f5a:	f85d fb04 	ldr.w	pc, [sp], #4
   b7f5e:	bf00      	nop
   b7f60:	000bccb4 	.word	0x000bccb4

000b7f64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7f64:	4770      	bx	lr

000b7f66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7f66:	2000      	movs	r0, #0
   b7f68:	4770      	bx	lr

000b7f6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7f6a:	b510      	push	{r4, lr}
   b7f6c:	2110      	movs	r1, #16
   b7f6e:	4604      	mov	r4, r0
   b7f70:	f7fc f895 	bl	b409e <_ZdlPvj>
   b7f74:	4620      	mov	r0, r4
   b7f76:	bd10      	pop	{r4, pc}

000b7f78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7f78:	b508      	push	{r3, lr}
      { delete this; }
   b7f7a:	f7ff fff6 	bl	b7f6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7f7e:	bd08      	pop	{r3, pc}

000b7f80 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7f80:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7f82:	2200      	movs	r2, #0
   b7f84:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7f88:	6002      	str	r2, [r0, #0]
   b7f8a:	8084      	strh	r4, [r0, #4]
   b7f8c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f8e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7f90:	680c      	ldr	r4, [r1, #0]
   b7f92:	8085      	strh	r5, [r0, #4]
   b7f94:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f96:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7f98:	bd30      	pop	{r4, r5, pc}

000b7f9a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7f9a:	b510      	push	{r4, lr}
   b7f9c:	4604      	mov	r4, r0
    free((void*)msg_);
   b7f9e:	6800      	ldr	r0, [r0, #0]
   b7fa0:	f7ff f9e6 	bl	b7370 <free>
}
   b7fa4:	4620      	mov	r0, r4
   b7fa6:	bd10      	pop	{r4, pc}

000b7fa8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7fa8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7faa:	68c4      	ldr	r4, [r0, #12]
   b7fac:	b1f4      	cbz	r4, b7fec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b7fae:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7fb0:	2b02      	cmp	r3, #2
   b7fb2:	d103      	bne.n	b7fbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7fb4:	f104 000c 	add.w	r0, r4, #12
   b7fb8:	f7ff ffef 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7fbc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7fbe:	b135      	cbz	r5, b7fce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7fc0:	4628      	mov	r0, r5
   b7fc2:	f7fd f915 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
   b7fc6:	2110      	movs	r1, #16
   b7fc8:	4628      	mov	r0, r5
   b7fca:	f7fc f868 	bl	b409e <_ZdlPvj>
   b7fce:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7fd0:	b135      	cbz	r5, b7fe0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7fd2:	4628      	mov	r0, r5
   b7fd4:	f7fd f90c 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
   b7fd8:	2110      	movs	r1, #16
   b7fda:	4628      	mov	r0, r5
   b7fdc:	f7fc f85f 	bl	b409e <_ZdlPvj>
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	2114      	movs	r1, #20
   b7fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7fe8:	f7fc b859 	b.w	b409e <_ZdlPvj>
   b7fec:	bd38      	pop	{r3, r4, r5, pc}

000b7fee <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   b7fee:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   b7ff0:	2100      	movs	r1, #0
   b7ff2:	f7ff b8e7 	b.w	b71c4 <spark_publish_vitals>

000b7ff6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b7ff6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b7ff8:	230c      	movs	r3, #12
   b7ffa:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b7ffe:	6803      	ldr	r3, [r0, #0]
   b8000:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b8004:	7a03      	ldrb	r3, [r0, #8]
   b8006:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b800a:	6843      	ldr	r3, [r0, #4]
   b800c:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b800e:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b8010:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b8012:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b8016:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b8018:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b801c:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b8020:	f7ff f8d8 	bl	b71d4 <spark_cloud_disconnect>
}
   b8024:	b005      	add	sp, #20
   b8026:	f85d fb04 	ldr.w	pc, [sp], #4

000b802a <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b802a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b802c:	220c      	movs	r2, #12
   b802e:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b8032:	6802      	ldr	r2, [r0, #0]
   b8034:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b8038:	7a02      	ldrb	r2, [r0, #8]
   b803a:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b803e:	6842      	ldr	r2, [r0, #4]
   b8040:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b8042:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b8044:	7a42      	ldrb	r2, [r0, #9]
   b8046:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b804a:	4619      	mov	r1, r3
   b804c:	aa01      	add	r2, sp, #4
   b804e:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b8050:	f8ad 300d 	strh.w	r3, [sp, #13]
   b8054:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b8058:	f7ff f8a4 	bl	b71a4 <spark_set_connection_property>
}
   b805c:	b005      	add	sp, #20
   b805e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8062 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8062:	680b      	ldr	r3, [r1, #0]
   b8064:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8066:	684b      	ldr	r3, [r1, #4]
   b8068:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b806a:	b113      	cbz	r3, b8072 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b806c:	685a      	ldr	r2, [r3, #4]
   b806e:	3201      	adds	r2, #1
   b8070:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8072:	4770      	bx	lr

000b8074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8074:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8076:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8078:	4668      	mov	r0, sp
   b807a:	460d      	mov	r5, r1
   b807c:	f7ff fff1 	bl	b8062 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8080:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8082:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8084:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b8086:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8088:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b808a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b808c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b808e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8090:	f7fc fb8e 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8094:	b135      	cbz	r5, b80a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b8096:	1d28      	adds	r0, r5, #4
   b8098:	f7fc fb8a 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b809c:	2108      	movs	r1, #8
   b809e:	4628      	mov	r0, r5
   b80a0:	f7fb fffd 	bl	b409e <_ZdlPvj>
        return p;
    }
   b80a4:	4620      	mov	r0, r4
   b80a6:	b003      	add	sp, #12
   b80a8:	bd30      	pop	{r4, r5, pc}

000b80aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b80aa:	b513      	push	{r0, r1, r4, lr}
   b80ac:	460b      	mov	r3, r1
   b80ae:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80b0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b80b4:	466c      	mov	r4, sp
   b80b6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b80ba:	e893 0003 	ldmia.w	r3, {r0, r1}
   b80be:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b80c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b80c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b80ca:	b002      	add	sp, #8
   b80cc:	bd10      	pop	{r4, pc}

000b80ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b80ce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b80d0:	b510      	push	{r4, lr}
      if (_M_empty())
   b80d2:	b90a      	cbnz	r2, b80d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b80d4:	f001 f9d5 	bl	b9482 <_ZSt25__throw_bad_function_callv>
    }
   b80d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b80dc:	68c3      	ldr	r3, [r0, #12]
   b80de:	4718      	bx	r3

000b80e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b80e0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b80e2:	6800      	ldr	r0, [r0, #0]
   b80e4:	f100 0110 	add.w	r1, r0, #16
   b80e8:	f7ff fff1 	bl	b80ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b80ec:	bd08      	pop	{r3, pc}

000b80ee <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b80ee:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b80f0:	b510      	push	{r4, lr}
      if (_M_empty())
   b80f2:	b90a      	cbnz	r2, b80f8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b80f4:	f001 f9c5 	bl	b9482 <_ZSt25__throw_bad_function_callv>
    }
   b80f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b80fc:	68c3      	ldr	r3, [r0, #12]
   b80fe:	4718      	bx	r3

000b8100 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8100:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8102:	6800      	ldr	r0, [r0, #0]
   b8104:	f100 0110 	add.w	r1, r0, #16
   b8108:	f7ff fff1 	bl	b80ee <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b810c:	bd08      	pop	{r3, pc}
	...

000b8110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8110:	b538      	push	{r3, r4, r5, lr}
   b8112:	2300      	movs	r3, #0
   b8114:	4604      	mov	r4, r0
   b8116:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8118:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b811a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b811c:	f7fb ffbb 	bl	b4096 <_Znwj>
   b8120:	b128      	cbz	r0, b812e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8122:	2301      	movs	r3, #1
   b8124:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8128:	4b02      	ldr	r3, [pc, #8]	; (b8134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b812a:	6003      	str	r3, [r0, #0]
   b812c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b812e:	6020      	str	r0, [r4, #0]
	}
   b8130:	4620      	mov	r0, r4
   b8132:	bd38      	pop	{r3, r4, r5, pc}
   b8134:	000bccc8 	.word	0x000bccc8

000b8138 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8138:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b813a:	2300      	movs	r3, #0
   b813c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b813e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8140:	4604      	mov	r4, r0
   b8142:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8144:	b12b      	cbz	r3, b8152 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8146:	2202      	movs	r2, #2
   b8148:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b814a:	68eb      	ldr	r3, [r5, #12]
   b814c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b814e:	68ab      	ldr	r3, [r5, #8]
   b8150:	60a3      	str	r3, [r4, #8]
    }
   b8152:	4620      	mov	r0, r4
   b8154:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8158:	b5f0      	push	{r4, r5, r6, r7, lr}
   b815a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b815c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b815e:	4668      	mov	r0, sp
   b8160:	f7ff ff0e 	bl	b7f80 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8164:	f04f 0302 	mov.w	r3, #2
   b8168:	e8d4 2f4f 	ldrexb	r2, [r4]
   b816c:	2a00      	cmp	r2, #0
   b816e:	d103      	bne.n	b8178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8170:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8174:	2900      	cmp	r1, #0
   b8176:	d1f7      	bne.n	b8168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8178:	d125      	bne.n	b81c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b817a:	f104 050c 	add.w	r5, r4, #12
   b817e:	4669      	mov	r1, sp
   b8180:	4628      	mov	r0, r5
   b8182:	f7ff fefd 	bl	b7f80 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b8186:	f3bf 8f5b 	dmb	ish
   b818a:	2301      	movs	r3, #1
   b818c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b818e:	2000      	movs	r0, #0
   b8190:	f104 0308 	add.w	r3, r4, #8
   b8194:	f3bf 8f5b 	dmb	ish
   b8198:	e853 6f00 	ldrex	r6, [r3]
   b819c:	e843 0200 	strex	r2, r0, [r3]
   b81a0:	2a00      	cmp	r2, #0
   b81a2:	d1f9      	bne.n	b8198 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b81a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b81a8:	b16e      	cbz	r6, b81c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b81aa:	f7ff f8a3 	bl	b72f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b81ae:	b178      	cbz	r0, b81d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b81b0:	4629      	mov	r1, r5
   b81b2:	4630      	mov	r0, r6
   b81b4:	f7ff ff8b 	bl	b80ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b81b8:	4630      	mov	r0, r6
   b81ba:	f7fd f819 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b81be:	2110      	movs	r1, #16
   b81c0:	4630      	mov	r0, r6
   b81c2:	f7fb ff6c 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b81c6:	4668      	mov	r0, sp
   b81c8:	f7ff fee7 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
    }
   b81cc:	b009      	add	sp, #36	; 0x24
   b81ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b81d0:	4631      	mov	r1, r6
   b81d2:	a802      	add	r0, sp, #8
   b81d4:	f7ff ffb0 	bl	b8138 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b81d8:	68e0      	ldr	r0, [r4, #12]
   b81da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b81de:	b108      	cbz	r0, b81e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b81e0:	f001 ffba 	bl	ba158 <strdup>
        type_(type) {
   b81e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b81e6:	2010      	movs	r0, #16
   b81e8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b81ec:	f7fb ff53 	bl	b4096 <_Znwj>
   b81f0:	4605      	mov	r5, r0
   b81f2:	b1e8      	cbz	r0, b8230 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b81f4:	2700      	movs	r7, #0
   b81f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81f8:	2018      	movs	r0, #24
   b81fa:	f7fb ff4c 	bl	b4096 <_Znwj>
   b81fe:	4604      	mov	r4, r0
   b8200:	b188      	cbz	r0, b8226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8202:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8204:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8206:	a802      	add	r0, sp, #8
   b8208:	f7ff ff4f 	bl	b80aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b820c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b820e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8210:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8212:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8214:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8216:	a906      	add	r1, sp, #24
   b8218:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b821a:	60e3      	str	r3, [r4, #12]
   b821c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8220:	9205      	str	r2, [sp, #20]
   b8222:	f7ff fead 	bl	b7f80 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8226:	4b08      	ldr	r3, [pc, #32]	; (b8248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8228:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b822a:	4b08      	ldr	r3, [pc, #32]	; (b824c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b822c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b822e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8230:	a806      	add	r0, sp, #24
   b8232:	f7ff feb2 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8236:	a802      	add	r0, sp, #8
   b8238:	f7fc ffda 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b823c:	2200      	movs	r2, #0
   b823e:	4629      	mov	r1, r5
   b8240:	4803      	ldr	r0, [pc, #12]	; (b8250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8242:	f7ff f85f 	bl	b7304 <application_thread_invoke>
   b8246:	e7b7      	b.n	b81b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8248:	000b80e1 	.word	0x000b80e1
   b824c:	000b8365 	.word	0x000b8365
   b8250:	000b7bb7 	.word	0x000b7bb7

000b8254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8258:	b08b      	sub	sp, #44	; 0x2c
   b825a:	4605      	mov	r5, r0
   b825c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8260:	460f      	mov	r7, r1
   b8262:	4690      	mov	r8, r2
   b8264:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8266:	f7fe ff75 	bl	b7154 <spark_cloud_flag_connected>
   b826a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b826c:	4683      	mov	fp, r0
   b826e:	bb38      	cbnz	r0, b82c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8270:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8274:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8276:	a905      	add	r1, sp, #20
   b8278:	4630      	mov	r0, r6
   b827a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b827e:	f7ff fe7f 	bl	b7f80 <_ZN8particle5ErrorC1EOS0_>
   b8282:	2014      	movs	r0, #20
   b8284:	f7fb ff07 	bl	b4096 <_Znwj>
   b8288:	4604      	mov	r4, r0
   b828a:	b148      	cbz	r0, b82a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b828c:	2302      	movs	r3, #2
   b828e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8290:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8292:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8296:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8298:	4631      	mov	r1, r6
   b829a:	300c      	adds	r0, #12
   b829c:	f7ff fe70 	bl	b7f80 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b82a0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b82a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b82a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b82a8:	f7ff ff32 	bl	b8110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b82ac:	4630      	mov	r0, r6
   b82ae:	f7ff fe74 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b82b2:	a805      	add	r0, sp, #20
   b82b4:	f7ff fe71 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
}
   b82b8:	4628      	mov	r0, r5
   b82ba:	b00b      	add	sp, #44	; 0x2c
   b82bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b82c0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b82c2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b82c4:	2014      	movs	r0, #20
   b82c6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b82ca:	9307      	str	r3, [sp, #28]
   b82cc:	f7fb fee3 	bl	b4096 <_Znwj>
   b82d0:	4601      	mov	r1, r0
   b82d2:	b118      	cbz	r0, b82dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b82d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b82d8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b82da:	7044      	strb	r4, [r0, #1]
   b82dc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b82de:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b82e0:	f7ff ff16 	bl	b8110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b82e4:	4b1e      	ldr	r3, [pc, #120]	; (b8360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b82e6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b82e8:	2008      	movs	r0, #8
   b82ea:	f7fb fed4 	bl	b4096 <_Znwj>
   b82ee:	4604      	mov	r4, r0
   b82f0:	b110      	cbz	r0, b82f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b82f2:	a903      	add	r1, sp, #12
   b82f4:	f7ff feb5 	bl	b8062 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b82f8:	9600      	str	r6, [sp, #0]
   b82fa:	fa5f f38a 	uxtb.w	r3, sl
   b82fe:	464a      	mov	r2, r9
   b8300:	4641      	mov	r1, r8
   b8302:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8304:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8306:	f7fe ff35 	bl	b7174 <spark_send_event>
   b830a:	b9b8      	cbnz	r0, b833c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b830c:	9b03      	ldr	r3, [sp, #12]
   b830e:	785b      	ldrb	r3, [r3, #1]
   b8310:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8314:	b993      	cbnz	r3, b833c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8316:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b831a:	a905      	add	r1, sp, #20
   b831c:	a803      	add	r0, sp, #12
   b831e:	9205      	str	r2, [sp, #20]
   b8320:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8324:	f7ff ff18 	bl	b8158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8328:	a805      	add	r0, sp, #20
   b832a:	f7ff fe36 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b832e:	a805      	add	r0, sp, #20
   b8330:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8332:	f7ff fe9f 	bl	b8074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8336:	a806      	add	r0, sp, #24
   b8338:	f7fc fa3a 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b833c:	a903      	add	r1, sp, #12
   b833e:	a805      	add	r0, sp, #20
   b8340:	f7ff fe8f 	bl	b8062 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8344:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8346:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8348:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b834a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b834c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b834e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8350:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8352:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8354:	f7fc fa2c 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8358:	a804      	add	r0, sp, #16
   b835a:	f7fc fa29 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b835e:	e7ab      	b.n	b82b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8360:	000b83e1 	.word	0x000b83e1

000b8364 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8364:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8368:	4605      	mov	r5, r0
	switch (__op)
   b836a:	d103      	bne.n	b8374 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b836c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b836e:	6003      	str	r3, [r0, #0]
      }
   b8370:	2000      	movs	r0, #0
   b8372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8374:	2a02      	cmp	r2, #2
   b8376:	d010      	beq.n	b839a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8378:	2a03      	cmp	r2, #3
   b837a:	d1f9      	bne.n	b8370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b837c:	6804      	ldr	r4, [r0, #0]
   b837e:	2c00      	cmp	r4, #0
   b8380:	d0f6      	beq.n	b8370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8382:	f104 0010 	add.w	r0, r4, #16
   b8386:	f7ff fe08 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b838a:	4620      	mov	r0, r4
   b838c:	f7fc ff30 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8390:	2118      	movs	r1, #24
   b8392:	4620      	mov	r0, r4
   b8394:	f7fb fe83 	bl	b409e <_ZdlPvj>
   b8398:	e7ea      	b.n	b8370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b839a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b839c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b839e:	f7fb fe7a 	bl	b4096 <_Znwj>
   b83a2:	4604      	mov	r4, r0
   b83a4:	b150      	cbz	r0, b83bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b83a6:	4631      	mov	r1, r6
   b83a8:	f7ff fec6 	bl	b8138 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b83ac:	6930      	ldr	r0, [r6, #16]
   b83ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b83b2:	b108      	cbz	r0, b83b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b83b4:	f001 fed0 	bl	ba158 <strdup>
        type_(type) {
   b83b8:	6120      	str	r0, [r4, #16]
   b83ba:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b83bc:	602c      	str	r4, [r5, #0]
	}
   b83be:	e7d7      	b.n	b8370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b83c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b83c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b83c2:	2300      	movs	r3, #0
   b83c4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b83c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b83c8:	4604      	mov	r4, r0
   b83ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b83cc:	b12b      	cbz	r3, b83da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b83ce:	2202      	movs	r2, #2
   b83d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b83d2:	68eb      	ldr	r3, [r5, #12]
   b83d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b83d6:	68ab      	ldr	r3, [r5, #8]
   b83d8:	60a3      	str	r3, [r4, #8]
    }
   b83da:	4620      	mov	r0, r4
   b83dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b83e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b83e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b83e2:	b089      	sub	sp, #36	; 0x24
   b83e4:	4604      	mov	r4, r0
   b83e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b83e8:	a801      	add	r0, sp, #4
   b83ea:	4611      	mov	r1, r2
   b83ec:	f7ff fe42 	bl	b8074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b83f0:	b1a4      	cbz	r4, b841c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b83f2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b83f4:	b11d      	cbz	r5, b83fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b83f6:	4628      	mov	r0, r5
   b83f8:	f001 feae 	bl	ba158 <strdup>
   b83fc:	4605      	mov	r5, r0
   b83fe:	a801      	add	r0, sp, #4
   b8400:	a903      	add	r1, sp, #12
        type_(type) {
   b8402:	9503      	str	r5, [sp, #12]
   b8404:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8408:	f7ff fea6 	bl	b8158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b840c:	a803      	add	r0, sp, #12
   b840e:	f7ff fdc4 	bl	b7f9a <_ZN8particle5ErrorD1Ev>
   b8412:	a802      	add	r0, sp, #8
   b8414:	f7fc f9cc 	bl	b47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8418:	b009      	add	sp, #36	; 0x24
   b841a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b841c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b841e:	2301      	movs	r3, #1
   b8420:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8424:	2a00      	cmp	r2, #0
   b8426:	d103      	bne.n	b8430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8428:	e8c5 3f41 	strexb	r1, r3, [r5]
   b842c:	2900      	cmp	r1, #0
   b842e:	d1f7      	bne.n	b8420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8430:	d1ef      	bne.n	b8412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8432:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8434:	f3bf 8f5b 	dmb	ish
   b8438:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b843a:	1d2b      	adds	r3, r5, #4
   b843c:	f3bf 8f5b 	dmb	ish
   b8440:	e853 6f00 	ldrex	r6, [r3]
   b8444:	e843 4200 	strex	r2, r4, [r3]
   b8448:	2a00      	cmp	r2, #0
   b844a:	d1f9      	bne.n	b8440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b844c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8450:	2e00      	cmp	r6, #0
   b8452:	d0de      	beq.n	b8412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8454:	4620      	mov	r0, r4
   b8456:	f7fe ff4d 	bl	b72f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b845a:	4607      	mov	r7, r0
   b845c:	b160      	cbz	r0, b8478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b845e:	f105 010c 	add.w	r1, r5, #12
   b8462:	4630      	mov	r0, r6
   b8464:	f7ff fe43 	bl	b80ee <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8468:	4630      	mov	r0, r6
   b846a:	f7fc fec1 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b846e:	2110      	movs	r1, #16
   b8470:	4630      	mov	r0, r6
   b8472:	f7fb fe14 	bl	b409e <_ZdlPvj>
   b8476:	e7cc      	b.n	b8412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8478:	4631      	mov	r1, r6
   b847a:	a803      	add	r0, sp, #12
   b847c:	f7ff ffa0 	bl	b83c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8480:	7b2b      	ldrb	r3, [r5, #12]
   b8482:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8486:	2010      	movs	r0, #16
   b8488:	f7fb fe05 	bl	b4096 <_Znwj>
   b848c:	4605      	mov	r5, r0
   b848e:	b1d0      	cbz	r0, b84c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8490:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8492:	2014      	movs	r0, #20
   b8494:	f7fb fdff 	bl	b4096 <_Znwj>
   b8498:	4604      	mov	r4, r0
   b849a:	b178      	cbz	r0, b84bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b849c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b849e:	4601      	mov	r1, r0
   b84a0:	a803      	add	r0, sp, #12
   b84a2:	f7ff fe02 	bl	b80aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b84a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b84aa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84ac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b84ae:	9205      	str	r2, [sp, #20]
   b84b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b84b2:	60e3      	str	r3, [r4, #12]
   b84b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b84b8:	9206      	str	r2, [sp, #24]
   b84ba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b84bc:	4b06      	ldr	r3, [pc, #24]	; (b84d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b84be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b84c0:	4b06      	ldr	r3, [pc, #24]	; (b84dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b84c2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b84c4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b84c6:	a803      	add	r0, sp, #12
   b84c8:	f7fc fe92 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b84cc:	2200      	movs	r2, #0
   b84ce:	4629      	mov	r1, r5
   b84d0:	4803      	ldr	r0, [pc, #12]	; (b84e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b84d2:	f7fe ff17 	bl	b7304 <application_thread_invoke>
   b84d6:	e7c7      	b.n	b8468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b84d8:	000b8101 	.word	0x000b8101
   b84dc:	000b84e5 	.word	0x000b84e5
   b84e0:	000b7bb7 	.word	0x000b7bb7

000b84e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b84e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b84e6:	b570      	push	{r4, r5, r6, lr}
   b84e8:	4604      	mov	r4, r0
	switch (__op)
   b84ea:	d103      	bne.n	b84f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b84ec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b84ee:	6003      	str	r3, [r0, #0]
      }
   b84f0:	2000      	movs	r0, #0
   b84f2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b84f4:	2a02      	cmp	r2, #2
   b84f6:	d00c      	beq.n	b8512 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b84f8:	2a03      	cmp	r2, #3
   b84fa:	d1f9      	bne.n	b84f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b84fc:	6804      	ldr	r4, [r0, #0]
   b84fe:	2c00      	cmp	r4, #0
   b8500:	d0f6      	beq.n	b84f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b8502:	4620      	mov	r0, r4
   b8504:	f7fc fe74 	bl	b51f0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8508:	2114      	movs	r1, #20
   b850a:	4620      	mov	r0, r4
   b850c:	f7fb fdc7 	bl	b409e <_ZdlPvj>
   b8510:	e7ee      	b.n	b84f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8512:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8514:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8516:	f7fb fdbe 	bl	b4096 <_Znwj>
   b851a:	4605      	mov	r5, r0
   b851c:	b120      	cbz	r0, b8528 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b851e:	4631      	mov	r1, r6
   b8520:	f7ff ff4e 	bl	b83c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8524:	7c33      	ldrb	r3, [r6, #16]
   b8526:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8528:	6025      	str	r5, [r4, #0]
	}
   b852a:	e7e1      	b.n	b84f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b852c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b852c:	4b01      	ldr	r3, [pc, #4]	; (b8534 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b852e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8530:	4770      	bx	lr
   b8532:	bf00      	nop
   b8534:	2003df8c 	.word	0x2003df8c

000b8538 <serialEventRun>:
{
   b8538:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b853a:	4b0b      	ldr	r3, [pc, #44]	; (b8568 <serialEventRun+0x30>)
   b853c:	b143      	cbz	r3, b8550 <serialEventRun+0x18>
   b853e:	f7ff fc51 	bl	b7de4 <_Z16_fetch_usbserialv>
   b8542:	6803      	ldr	r3, [r0, #0]
   b8544:	691b      	ldr	r3, [r3, #16]
   b8546:	4798      	blx	r3
   b8548:	2800      	cmp	r0, #0
   b854a:	dd01      	ble.n	b8550 <serialEventRun+0x18>
        serialEvent();
   b854c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8550:	4b06      	ldr	r3, [pc, #24]	; (b856c <serialEventRun+0x34>)
   b8552:	b143      	cbz	r3, b8566 <serialEventRun+0x2e>
   b8554:	f000 febc 	bl	b92d0 <_Z22__fetch_global_Serial1v>
   b8558:	6803      	ldr	r3, [r0, #0]
   b855a:	691b      	ldr	r3, [r3, #16]
   b855c:	4798      	blx	r3
   b855e:	2800      	cmp	r0, #0
   b8560:	dd01      	ble.n	b8566 <serialEventRun+0x2e>
        serialEvent1();
   b8562:	f3af 8000 	nop.w
}
   b8566:	bd08      	pop	{r3, pc}
	...

000b8570 <_post_loop>:
{
   b8570:	b508      	push	{r3, lr}
	serialEventRun();
   b8572:	f7ff ffe1 	bl	b8538 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8576:	f7fe fd73 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b857a:	4b01      	ldr	r3, [pc, #4]	; (b8580 <_post_loop+0x10>)
   b857c:	6018      	str	r0, [r3, #0]
}
   b857e:	bd08      	pop	{r3, pc}
   b8580:	2003e744 	.word	0x2003e744

000b8584 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8584:	4805      	ldr	r0, [pc, #20]	; (b859c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8586:	4a06      	ldr	r2, [pc, #24]	; (b85a0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8588:	4906      	ldr	r1, [pc, #24]	; (b85a4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b858a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b858c:	1a12      	subs	r2, r2, r0
   b858e:	f001 fd7e 	bl	ba08e <memcpy>
    __backup_sram_signature = signature;
   b8592:	4b05      	ldr	r3, [pc, #20]	; (b85a8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8594:	4a05      	ldr	r2, [pc, #20]	; (b85ac <_Z33system_initialize_user_backup_ramv+0x28>)
   b8596:	601a      	str	r2, [r3, #0]
}
   b8598:	bd08      	pop	{r3, pc}
   b859a:	bf00      	nop
   b859c:	2003f400 	.word	0x2003f400
   b85a0:	2003f404 	.word	0x2003f404
   b85a4:	000bd3a4 	.word	0x000bd3a4
   b85a8:	2003f400 	.word	0x2003f400
   b85ac:	9a271c1e 	.word	0x9a271c1e

000b85b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b85b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b85b2:	2300      	movs	r3, #0
   b85b4:	9300      	str	r3, [sp, #0]
   b85b6:	461a      	mov	r2, r3
   b85b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b85bc:	f7fe febc 	bl	b7338 <system_ctrl_set_result>
}
   b85c0:	b003      	add	sp, #12
   b85c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b85c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b85c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b85ca:	8843      	ldrh	r3, [r0, #2]
   b85cc:	2b0a      	cmp	r3, #10
   b85ce:	d008      	beq.n	b85e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b85d0:	2b50      	cmp	r3, #80	; 0x50
   b85d2:	d10b      	bne.n	b85ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b85d4:	4b09      	ldr	r3, [pc, #36]	; (b85fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b85d6:	681b      	ldr	r3, [r3, #0]
   b85d8:	b14b      	cbz	r3, b85ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b85da:	b003      	add	sp, #12
   b85dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b85e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b85e2:	f7ff ffe5 	bl	b85b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b85e6:	b003      	add	sp, #12
   b85e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b85ec:	2300      	movs	r3, #0
   b85ee:	9300      	str	r3, [sp, #0]
   b85f0:	461a      	mov	r2, r3
   b85f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b85f6:	f7fe fe9f 	bl	b7338 <system_ctrl_set_result>
}
   b85fa:	e7f4      	b.n	b85e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b85fc:	2003e6b0 	.word	0x2003e6b0

000b8600 <module_user_init_hook>:
{
   b8600:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8602:	4812      	ldr	r0, [pc, #72]	; (b864c <module_user_init_hook+0x4c>)
   b8604:	2100      	movs	r1, #0
   b8606:	f7fe fefb 	bl	b7400 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b860a:	4b11      	ldr	r3, [pc, #68]	; (b8650 <module_user_init_hook+0x50>)
   b860c:	681a      	ldr	r2, [r3, #0]
   b860e:	4b11      	ldr	r3, [pc, #68]	; (b8654 <module_user_init_hook+0x54>)
   b8610:	429a      	cmp	r2, r3
   b8612:	4b11      	ldr	r3, [pc, #68]	; (b8658 <module_user_init_hook+0x58>)
   b8614:	bf0c      	ite	eq
   b8616:	2201      	moveq	r2, #1
   b8618:	2200      	movne	r2, #0
   b861a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b861c:	d001      	beq.n	b8622 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b861e:	f7ff ffb1 	bl	b8584 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8622:	f7fe fd0d 	bl	b7040 <HAL_RNG_GetRandomNumber>
   b8626:	4604      	mov	r4, r0
    srand(seed);
   b8628:	f001 fd48 	bl	ba0bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b862c:	4b0b      	ldr	r3, [pc, #44]	; (b865c <module_user_init_hook+0x5c>)
   b862e:	b113      	cbz	r3, b8636 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8630:	4620      	mov	r0, r4
   b8632:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8636:	2100      	movs	r1, #0
   b8638:	4808      	ldr	r0, [pc, #32]	; (b865c <module_user_init_hook+0x5c>)
   b863a:	f7fe fdbb 	bl	b71b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b863e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8642:	4807      	ldr	r0, [pc, #28]	; (b8660 <module_user_init_hook+0x60>)
   b8644:	2100      	movs	r1, #0
   b8646:	f7fe be6d 	b.w	b7324 <system_ctrl_set_app_request_handler>
   b864a:	bf00      	nop
   b864c:	000b852d 	.word	0x000b852d
   b8650:	2003f400 	.word	0x2003f400
   b8654:	9a271c1e 	.word	0x9a271c1e
   b8658:	2003e6ac 	.word	0x2003e6ac
   b865c:	00000000 	.word	0x00000000
   b8660:	000b85c9 	.word	0x000b85c9

000b8664 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8664:	6800      	ldr	r0, [r0, #0]
   b8666:	f7ff ba9d 	b.w	b7ba4 <_ZN7TwoWire4lockEv>

000b866a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b866a:	b510      	push	{r4, lr}
   b866c:	4604      	mov	r4, r0
      lock_(_lock) {
   b866e:	6001      	str	r1, [r0, #0]
   b8670:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b8672:	b10a      	cbz	r2, b8678 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8674:	f7ff fff6 	bl	b8664 <_ZN9FuelGauge4lockEv>
}
   b8678:	4620      	mov	r0, r4
   b867a:	bd10      	pop	{r4, pc}

000b867c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b867c:	b513      	push	{r0, r1, r4, lr}
   b867e:	4604      	mov	r4, r0
   b8680:	9101      	str	r1, [sp, #4]
            return &Wire;
   b8682:	f000 fde5 	bl	b9250 <_Z19__fetch_global_Wirev>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8686:	9a01      	ldr	r2, [sp, #4]
            return &Wire;
   b8688:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b868a:	4620      	mov	r0, r4
   b868c:	f7ff ffed 	bl	b866a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8690:	4620      	mov	r0, r4
   b8692:	b002      	add	sp, #8
   b8694:	bd10      	pop	{r4, pc}

000b8696 <_ZN8RGBClass10brightnessEhb>:
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(PARTICLE_LED_RGB);
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   b8696:	b510      	push	{r4, lr}
   b8698:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   b869a:	f7fe fd19 	bl	b70d0 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   b869e:	f7fe fd1f 	bl	b70e0 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   b86a2:	b128      	cbz	r0, b86b0 <_ZN8RGBClass10brightnessEhb+0x1a>
   b86a4:	b124      	cbz	r4, b86b0 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   b86a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   b86aa:	20e7      	movs	r0, #231	; 0xe7
   b86ac:	f7fe bd20 	b.w	b70f0 <LED_On>
}
   b86b0:	bd10      	pop	{r4, pc}
	...

000b86b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b86b4:	4b01      	ldr	r3, [pc, #4]	; (b86bc <_GLOBAL__sub_I_RGB+0x8>)
   b86b6:	2200      	movs	r2, #0
   b86b8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b86ba:	4770      	bx	lr
   b86bc:	2003e6b4 	.word	0x2003e6b4

000b86c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b86c0:	2100      	movs	r1, #0
   b86c2:	f7fe bdff 	b.w	b72c4 <system_delay_ms>
	...

000b86c8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b86c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b86cc:	4a15      	ldr	r2, [pc, #84]	; (b8724 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b86ce:	f8df 8060 	ldr.w	r8, [pc, #96]	; b8730 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b86d2:	e9d2 6300 	ldrd	r6, r3, [r2]
   b86d6:	1980      	adds	r0, r0, r6
   b86d8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b86dc:	4b12      	ldr	r3, [pc, #72]	; (b8728 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b86de:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b86e2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b86e6:	1986      	adds	r6, r0, r6
   b86e8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b86ec:	42bb      	cmp	r3, r7
   b86ee:	bf08      	it	eq
   b86f0:	42b2      	cmpeq	r2, r6
{
   b86f2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b86f4:	d013      	beq.n	b871e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b86f6:	a903      	add	r1, sp, #12
   b86f8:	4668      	mov	r0, sp
   b86fa:	e9cd 6700 	strd	r6, r7, [sp]
   b86fe:	f7fe fe87 	bl	b7410 <localtime_r>
	calendar_time.tm_year += 1900;
   b8702:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8704:	4d09      	ldr	r5, [pc, #36]	; (b872c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8706:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b870a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b870c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b870e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8716:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b871a:	6823      	ldr	r3, [r4, #0]
   b871c:	602b      	str	r3, [r5, #0]
    }
}
   b871e:	b00c      	add	sp, #48	; 0x30
   b8720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8724:	2003e6f8 	.word	0x2003e6f8
   b8728:	2003e6f0 	.word	0x2003e6f0
   b872c:	2003e6c8 	.word	0x2003e6c8
   b8730:	2003e700 	.word	0x2003e700

000b8734 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b8734:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8736:	2000      	movs	r0, #0
   b8738:	f7fe fd2c 	bl	b7194 <spark_sync_time_pending>
   b873c:	b128      	cbz	r0, b874a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b873e:	f7fe fd09 	bl	b7154 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8742:	f080 0001 	eor.w	r0, r0, #1
   b8746:	b2c0      	uxtb	r0, r0
    }
   b8748:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b874a:	2001      	movs	r0, #1
   b874c:	e7fc      	b.n	b8748 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b874e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b874e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8750:	2000      	movs	r0, #0
   b8752:	f7fe fc8d 	bl	b7070 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8756:	4604      	mov	r4, r0
   b8758:	b9a0      	cbnz	r0, b8784 <_ZN9TimeClass7isValidEv+0x36>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b875a:	f7fe fda3 	bl	b72a4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b875e:	2801      	cmp	r0, #1
   b8760:	d110      	bne.n	b8784 <_ZN9TimeClass7isValidEv+0x36>
   b8762:	4620      	mov	r0, r4
   b8764:	f7fe fdd6 	bl	b7314 <system_thread_get_state>
   b8768:	b960      	cbnz	r0, b8784 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b876a:	f7ff ffe3 	bl	b8734 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b876e:	b910      	cbnz	r0, b8776 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8770:	f7fe fce0 	bl	b7134 <spark_process>
        while (_while() && !_condition()) {
   b8774:	e7f9      	b.n	b876a <_ZN9TimeClass7isValidEv+0x1c>
   b8776:	f7ff ffdd 	bl	b8734 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b877a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b877e:	2000      	movs	r0, #0
   b8780:	f7fe bc76 	b.w	b7070 <hal_rtc_time_is_valid>
}
   b8784:	4620      	mov	r0, r4
   b8786:	bd10      	pop	{r4, pc}

000b8788 <_ZN9TimeClass3nowEv>:
{
   b8788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b878a:	f7ff ffe0 	bl	b874e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b878e:	2210      	movs	r2, #16
   b8790:	2100      	movs	r1, #0
   b8792:	4668      	mov	r0, sp
   b8794:	f001 fc89 	bl	ba0aa <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8798:	2100      	movs	r1, #0
   b879a:	4668      	mov	r0, sp
   b879c:	f7fe fc78 	bl	b7090 <hal_rtc_get_time>
}
   b87a0:	9800      	ldr	r0, [sp, #0]
   b87a2:	b005      	add	sp, #20
   b87a4:	f85d fb04 	ldr.w	pc, [sp], #4

000b87a8 <_ZN9TimeClass6minuteEv>:
{
   b87a8:	b508      	push	{r3, lr}
	return minute(now());
   b87aa:	f7ff ffed 	bl	b8788 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b87ae:	17c1      	asrs	r1, r0, #31
   b87b0:	f7ff ff8a 	bl	b86c8 <_ZL22Refresh_UnixTime_Cachex>
}
   b87b4:	4b01      	ldr	r3, [pc, #4]	; (b87bc <_ZN9TimeClass6minuteEv+0x14>)
   b87b6:	6858      	ldr	r0, [r3, #4]
   b87b8:	bd08      	pop	{r3, pc}
   b87ba:	bf00      	nop
   b87bc:	2003e6c8 	.word	0x2003e6c8

000b87c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b87c0:	4b02      	ldr	r3, [pc, #8]	; (b87cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b87c2:	681a      	ldr	r2, [r3, #0]
   b87c4:	4b02      	ldr	r3, [pc, #8]	; (b87d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b87c6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b87c8:	4770      	bx	lr
   b87ca:	bf00      	nop
   b87cc:	2003df88 	.word	0x2003df88
   b87d0:	2003e6c4 	.word	0x2003e6c4

000b87d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b87d4:	4b01      	ldr	r3, [pc, #4]	; (b87dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b87d6:	4a02      	ldr	r2, [pc, #8]	; (b87e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b87d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b87da:	4770      	bx	lr
   b87dc:	2003e708 	.word	0x2003e708
   b87e0:	000bccf8 	.word	0x000bccf8

000b87e4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b87e4:	b510      	push	{r4, lr}
   b87e6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b87e8:	f7fe fc3a 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b87ec:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b87ee:	6823      	ldr	r3, [r4, #0]
   b87f0:	4620      	mov	r0, r4
   b87f2:	695b      	ldr	r3, [r3, #20]
   b87f4:	4798      	blx	r3
    if (c >= 0) return c;
   b87f6:	2800      	cmp	r0, #0
   b87f8:	da08      	bge.n	b880c <_ZN6Stream9timedReadEv+0x28>
   b87fa:	f7fe fc31 	bl	b7060 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b87fe:	68e3      	ldr	r3, [r4, #12]
   b8800:	1ac0      	subs	r0, r0, r3
   b8802:	68a3      	ldr	r3, [r4, #8]
   b8804:	4298      	cmp	r0, r3
   b8806:	d3f2      	bcc.n	b87ee <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b880c:	bd10      	pop	{r4, pc}
	...

000b8810 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b8810:	b538      	push	{r3, r4, r5, lr}
   b8812:	460d      	mov	r5, r1
  String ret;
   b8814:	4907      	ldr	r1, [pc, #28]	; (b8834 <_ZN6Stream10readStringEv+0x24>)
{
   b8816:	4604      	mov	r4, r0
  String ret;
   b8818:	f000 f90d 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b881c:	4628      	mov	r0, r5
   b881e:	f7ff ffe1 	bl	b87e4 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b8822:	2800      	cmp	r0, #0
   b8824:	db04      	blt.n	b8830 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b8826:	b2c1      	uxtb	r1, r0
   b8828:	4620      	mov	r0, r4
   b882a:	f000 f954 	bl	b8ad6 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b882e:	e7f5      	b.n	b881c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b8830:	4620      	mov	r0, r4
   b8832:	bd38      	pop	{r3, r4, r5, pc}
   b8834:	000bc93b 	.word	0x000bc93b

000b8838 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
   b8838:	b570      	push	{r4, r5, r6, lr}
   b883a:	460d      	mov	r5, r1
  String ret;
   b883c:	4909      	ldr	r1, [pc, #36]	; (b8864 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b883e:	4604      	mov	r4, r0
   b8840:	4616      	mov	r6, r2
  String ret;
   b8842:	f000 f8f8 	bl	b8a36 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b8846:	4628      	mov	r0, r5
   b8848:	f7ff ffcc 	bl	b87e4 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b884c:	2800      	cmp	r0, #0
   b884e:	db06      	blt.n	b885e <_ZN6Stream15readStringUntilEc+0x26>
   b8850:	4286      	cmp	r6, r0
   b8852:	d004      	beq.n	b885e <_ZN6Stream15readStringUntilEc+0x26>
   b8854:	b2c1      	uxtb	r1, r0
   b8856:	4620      	mov	r0, r4
   b8858:	f000 f93d 	bl	b8ad6 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b885c:	e7f3      	b.n	b8846 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b885e:	4620      	mov	r0, r4
   b8860:	bd70      	pop	{r4, r5, r6, pc}
   b8862:	bf00      	nop
   b8864:	000bc93b 	.word	0x000bc93b

000b8868 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b886a:	4606      	mov	r6, r0
   b886c:	460d      	mov	r5, r1
  size_t n = 0;
   b886e:	188f      	adds	r7, r1, r2
   b8870:	2400      	movs	r4, #0
  while (size--) {
   b8872:	42bd      	cmp	r5, r7
   b8874:	d00c      	beq.n	b8890 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8876:	6833      	ldr	r3, [r6, #0]
   b8878:	f815 1b01 	ldrb.w	r1, [r5], #1
   b887c:	689b      	ldr	r3, [r3, #8]
   b887e:	4630      	mov	r0, r6
   b8880:	4798      	blx	r3
     if (chunk>=0)
   b8882:	1e03      	subs	r3, r0, #0
   b8884:	db01      	blt.n	b888a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8886:	441c      	add	r4, r3
  while (size--) {
   b8888:	e7f3      	b.n	b8872 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b888a:	2c00      	cmp	r4, #0
   b888c:	bf08      	it	eq
   b888e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8890:	4620      	mov	r0, r4
   b8892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8894 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8894:	b513      	push	{r0, r1, r4, lr}
   b8896:	4604      	mov	r4, r0
    }
   b8898:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b889a:	b159      	cbz	r1, b88b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b889c:	9101      	str	r1, [sp, #4]
   b889e:	f001 fc78 	bl	ba192 <strlen>
   b88a2:	6823      	ldr	r3, [r4, #0]
   b88a4:	9901      	ldr	r1, [sp, #4]
   b88a6:	68db      	ldr	r3, [r3, #12]
   b88a8:	4602      	mov	r2, r0
   b88aa:	4620      	mov	r0, r4
    }
   b88ac:	b002      	add	sp, #8
   b88ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b88b2:	4718      	bx	r3
    }
   b88b4:	b002      	add	sp, #8
   b88b6:	bd10      	pop	{r4, pc}

000b88b8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b88b8:	b508      	push	{r3, lr}
  return write(str);
   b88ba:	f7ff ffeb 	bl	b8894 <_ZN5Print5writeEPKc>
}
   b88be:	bd08      	pop	{r3, pc}

000b88c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b88c0:	6803      	ldr	r3, [r0, #0]
   b88c2:	689b      	ldr	r3, [r3, #8]
   b88c4:	4718      	bx	r3

000b88c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b88c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b88c8:	210d      	movs	r1, #13
{
   b88ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   b88cc:	f7ff fff8 	bl	b88c0 <_ZN5Print5printEc>
  n += print('\n');
   b88d0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b88d2:	4604      	mov	r4, r0
  n += print('\n');
   b88d4:	4628      	mov	r0, r5
   b88d6:	f7ff fff3 	bl	b88c0 <_ZN5Print5printEc>
  return n;
}
   b88da:	4420      	add	r0, r4
   b88dc:	bd38      	pop	{r3, r4, r5, pc}

000b88de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b88de:	b538      	push	{r3, r4, r5, lr}
   b88e0:	4605      	mov	r5, r0
  return write(str);
   b88e2:	f7ff ffd7 	bl	b8894 <_ZN5Print5writeEPKc>
   b88e6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b88e8:	4628      	mov	r0, r5
   b88ea:	f7ff ffec 	bl	b88c6 <_ZN5Print7printlnEv>
  return n;
}
   b88ee:	4420      	add	r0, r4
   b88f0:	bd38      	pop	{r3, r4, r5, pc}

000b88f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b88f2:	b530      	push	{r4, r5, lr}
   b88f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b88f6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b88f8:	2a01      	cmp	r2, #1
  *str = '\0';
   b88fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b88fe:	bf98      	it	ls
   b8900:	220a      	movls	r2, #10
   b8902:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8904:	460d      	mov	r5, r1
   b8906:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b890a:	fb01 5312 	mls	r3, r1, r2, r5
   b890e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8912:	2b09      	cmp	r3, #9
   b8914:	bf94      	ite	ls
   b8916:	3330      	addls	r3, #48	; 0x30
   b8918:	3337      	addhi	r3, #55	; 0x37
   b891a:	b2db      	uxtb	r3, r3
  } while(n);
   b891c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b891e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8922:	d9ef      	bls.n	b8904 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8924:	4621      	mov	r1, r4
   b8926:	f7ff ffb5 	bl	b8894 <_ZN5Print5writeEPKc>
}
   b892a:	b00b      	add	sp, #44	; 0x2c
   b892c:	bd30      	pop	{r4, r5, pc}

000b892e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b892e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8932:	b086      	sub	sp, #24
   b8934:	af00      	add	r7, sp, #0
   b8936:	4605      	mov	r5, r0
   b8938:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b893a:	1d38      	adds	r0, r7, #4
   b893c:	2114      	movs	r1, #20
{
   b893e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8940:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8942:	f7fe fd35 	bl	b73b0 <vsnprintf>

    if (n<bufsize)
   b8946:	2813      	cmp	r0, #19
   b8948:	d80e      	bhi.n	b8968 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b894a:	1d39      	adds	r1, r7, #4
   b894c:	4628      	mov	r0, r5
   b894e:	f7ff ffa1 	bl	b8894 <_ZN5Print5writeEPKc>
   b8952:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8954:	b11e      	cbz	r6, b895e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8956:	4628      	mov	r0, r5
   b8958:	f7ff ffb5 	bl	b88c6 <_ZN5Print7printlnEv>
   b895c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b895e:	4620      	mov	r0, r4
   b8960:	3718      	adds	r7, #24
   b8962:	46bd      	mov	sp, r7
   b8964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8968:	f100 0308 	add.w	r3, r0, #8
   b896c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8970:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8972:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8976:	4622      	mov	r2, r4
   b8978:	1c41      	adds	r1, r0, #1
   b897a:	683b      	ldr	r3, [r7, #0]
   b897c:	4668      	mov	r0, sp
   b897e:	f7fe fd17 	bl	b73b0 <vsnprintf>
  return write(str);
   b8982:	4669      	mov	r1, sp
   b8984:	4628      	mov	r0, r5
   b8986:	f7ff ff85 	bl	b8894 <_ZN5Print5writeEPKc>
   b898a:	4604      	mov	r4, r0
   b898c:	46c5      	mov	sp, r8
   b898e:	e7e1      	b.n	b8954 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8990 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8990:	4802      	ldr	r0, [pc, #8]	; (b899c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8992:	2300      	movs	r3, #0
   b8994:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8996:	f7fe bb43 	b.w	b7020 <os_mutex_recursive_create>
   b899a:	bf00      	nop
   b899c:	2003e70c 	.word	0x2003e70c

000b89a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b89a0:	b510      	push	{r4, lr}
   b89a2:	4604      	mov	r4, r0
{
	free(buffer);
   b89a4:	6800      	ldr	r0, [r0, #0]
   b89a6:	f7fe fce3 	bl	b7370 <free>
}
   b89aa:	4620      	mov	r0, r4
   b89ac:	bd10      	pop	{r4, pc}

000b89ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b89ae:	b510      	push	{r4, lr}
   b89b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b89b2:	6800      	ldr	r0, [r0, #0]
   b89b4:	b108      	cbz	r0, b89ba <_ZN6String10invalidateEv+0xc>
   b89b6:	f7fe fcdb 	bl	b7370 <free>
	buffer = NULL;
   b89ba:	2300      	movs	r3, #0
	capacity = len = 0;
   b89bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b89c0:	6023      	str	r3, [r4, #0]
}
   b89c2:	bd10      	pop	{r4, pc}

000b89c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b89c4:	b538      	push	{r3, r4, r5, lr}
   b89c6:	4604      	mov	r4, r0
   b89c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b89ca:	6800      	ldr	r0, [r0, #0]
   b89cc:	3101      	adds	r1, #1
   b89ce:	f7fe fcd7 	bl	b7380 <realloc>
	if (newbuffer) {
   b89d2:	b110      	cbz	r0, b89da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b89d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b89d8:	2001      	movs	r0, #1
	}
	return 0;
}
   b89da:	bd38      	pop	{r3, r4, r5, pc}

000b89dc <_ZN6String7reserveEj>:
{
   b89dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b89de:	6803      	ldr	r3, [r0, #0]
{
   b89e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b89e2:	b123      	cbz	r3, b89ee <_ZN6String7reserveEj+0x12>
   b89e4:	6843      	ldr	r3, [r0, #4]
   b89e6:	428b      	cmp	r3, r1
   b89e8:	d301      	bcc.n	b89ee <_ZN6String7reserveEj+0x12>
   b89ea:	2001      	movs	r0, #1
}
   b89ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b89ee:	4620      	mov	r0, r4
   b89f0:	f7ff ffe8 	bl	b89c4 <_ZN6String12changeBufferEj>
   b89f4:	2800      	cmp	r0, #0
   b89f6:	d0f9      	beq.n	b89ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b89f8:	68a3      	ldr	r3, [r4, #8]
   b89fa:	2b00      	cmp	r3, #0
   b89fc:	d1f5      	bne.n	b89ea <_ZN6String7reserveEj+0xe>
   b89fe:	6822      	ldr	r2, [r4, #0]
   b8a00:	7013      	strb	r3, [r2, #0]
   b8a02:	e7f2      	b.n	b89ea <_ZN6String7reserveEj+0xe>

000b8a04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8a06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8a08:	4611      	mov	r1, r2
   b8a0a:	9201      	str	r2, [sp, #4]
{
   b8a0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8a0e:	f7ff ffe5 	bl	b89dc <_ZN6String7reserveEj>
   b8a12:	9a01      	ldr	r2, [sp, #4]
   b8a14:	b928      	cbnz	r0, b8a22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8a16:	4620      	mov	r0, r4
   b8a18:	f7ff ffc9 	bl	b89ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8a1c:	4620      	mov	r0, r4
   b8a1e:	b003      	add	sp, #12
   b8a20:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8a22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8a24:	4629      	mov	r1, r5
   b8a26:	6820      	ldr	r0, [r4, #0]
   b8a28:	f001 fb31 	bl	ba08e <memcpy>
	buffer[len] = 0;
   b8a2c:	6822      	ldr	r2, [r4, #0]
   b8a2e:	68a3      	ldr	r3, [r4, #8]
   b8a30:	2100      	movs	r1, #0
   b8a32:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8a34:	e7f2      	b.n	b8a1c <_ZN6String4copyEPKcj+0x18>

000b8a36 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8a36:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8a38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8a3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8a3e:	4604      	mov	r4, r0
	len = 0;
   b8a40:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8a42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8a44:	b141      	cbz	r1, b8a58 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8a46:	4608      	mov	r0, r1
   b8a48:	9101      	str	r1, [sp, #4]
   b8a4a:	f001 fba2 	bl	ba192 <strlen>
   b8a4e:	9901      	ldr	r1, [sp, #4]
   b8a50:	4602      	mov	r2, r0
   b8a52:	4620      	mov	r0, r4
   b8a54:	f7ff ffd6 	bl	b8a04 <_ZN6String4copyEPKcj>
}
   b8a58:	4620      	mov	r0, r4
   b8a5a:	b002      	add	sp, #8
   b8a5c:	bd10      	pop	{r4, pc}

000b8a5e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8a5e:	b538      	push	{r3, r4, r5, lr}
   b8a60:	4605      	mov	r5, r0
	if (buffer) {
   b8a62:	6800      	ldr	r0, [r0, #0]
{
   b8a64:	460c      	mov	r4, r1
	if (buffer) {
   b8a66:	b168      	cbz	r0, b8a84 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8a68:	686a      	ldr	r2, [r5, #4]
   b8a6a:	688b      	ldr	r3, [r1, #8]
   b8a6c:	429a      	cmp	r2, r3
   b8a6e:	d307      	bcc.n	b8a80 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8a70:	6809      	ldr	r1, [r1, #0]
   b8a72:	f001 fb68 	bl	ba146 <strcpy>
			len = rhs.len;
   b8a76:	68a3      	ldr	r3, [r4, #8]
   b8a78:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8a7a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8a7c:	60a3      	str	r3, [r4, #8]
}
   b8a7e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8a80:	f7fe fc76 	bl	b7370 <free>
	buffer = rhs.buffer;
   b8a84:	6823      	ldr	r3, [r4, #0]
   b8a86:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8a88:	6863      	ldr	r3, [r4, #4]
   b8a8a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8a8c:	68a3      	ldr	r3, [r4, #8]
   b8a8e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8a90:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8a92:	e9c4 3300 	strd	r3, r3, [r4]
   b8a96:	e7f1      	b.n	b8a7c <_ZN6String4moveERS_+0x1e>

000b8a98 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b8a98:	4288      	cmp	r0, r1
{
   b8a9a:	b510      	push	{r4, lr}
   b8a9c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b8a9e:	d001      	beq.n	b8aa4 <_ZN6StringaSEOS_+0xc>
   b8aa0:	f7ff ffdd 	bl	b8a5e <_ZN6String4moveERS_>
	return *this;
}
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	bd10      	pop	{r4, pc}

000b8aa8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8aa8:	b570      	push	{r4, r5, r6, lr}
   b8aaa:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8aac:	460e      	mov	r6, r1
   b8aae:	b909      	cbnz	r1, b8ab4 <_ZN6String6concatEPKcj+0xc>
   b8ab0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8ab2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8ab4:	b16a      	cbz	r2, b8ad2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8ab6:	6884      	ldr	r4, [r0, #8]
   b8ab8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8aba:	4621      	mov	r1, r4
   b8abc:	f7ff ff8e 	bl	b89dc <_ZN6String7reserveEj>
   b8ac0:	2800      	cmp	r0, #0
   b8ac2:	d0f5      	beq.n	b8ab0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8ac4:	6828      	ldr	r0, [r5, #0]
   b8ac6:	68ab      	ldr	r3, [r5, #8]
   b8ac8:	4631      	mov	r1, r6
   b8aca:	4418      	add	r0, r3
   b8acc:	f001 fb3b 	bl	ba146 <strcpy>
	len = newlen;
   b8ad0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8ad2:	2001      	movs	r0, #1
   b8ad4:	e7ed      	b.n	b8ab2 <_ZN6String6concatEPKcj+0xa>

000b8ad6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8ad6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8ad8:	2300      	movs	r3, #0
	buf[0] = c;
   b8ada:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8ade:	2201      	movs	r2, #1
   b8ae0:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8ae2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8ae6:	f7ff ffdf 	bl	b8aa8 <_ZN6String6concatEPKcj>
}
   b8aea:	b003      	add	sp, #12
   b8aec:	f85d fb04 	ldr.w	pc, [sp], #4

000b8af0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b8af0:	b558      	push	{r3, r4, r6, lr}
   b8af2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b8af4:	b12a      	cbz	r2, b8b02 <_ZNK6String8getBytesEPhjj+0x12>
   b8af6:	b121      	cbz	r1, b8b02 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b8af8:	6884      	ldr	r4, [r0, #8]
   b8afa:	42a3      	cmp	r3, r4
   b8afc:	d302      	bcc.n	b8b04 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b8afe:	2300      	movs	r3, #0
   b8b00:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b8b02:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b8b04:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b8b06:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b8b08:	6801      	ldr	r1, [r0, #0]
   b8b0a:	4294      	cmp	r4, r2
   b8b0c:	bf28      	it	cs
   b8b0e:	4614      	movcs	r4, r2
   b8b10:	4419      	add	r1, r3
   b8b12:	4622      	mov	r2, r4
   b8b14:	4630      	mov	r0, r6
   b8b16:	f001 fb58 	bl	ba1ca <strncpy>
	buf[n] = 0;
   b8b1a:	2300      	movs	r3, #0
   b8b1c:	5533      	strb	r3, [r6, r4]
   b8b1e:	e7f0      	b.n	b8b02 <_ZNK6String8getBytesEPhjj+0x12>

000b8b20 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8b20:	6800      	ldr	r0, [r0, #0]
   b8b22:	b108      	cbz	r0, b8b28 <_ZNK6String5toIntEv+0x8>
   b8b24:	f001 baaf 	b.w	ba086 <atol>
	return 0;
}
   b8b28:	4770      	bx	lr
	...

000b8b2c <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   b8b2c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b8b2e:	6800      	ldr	r0, [r0, #0]
   b8b30:	b140      	cbz	r0, b8b44 <_ZNK6String7toFloatEv+0x18>
   b8b32:	f001 faa5 	bl	ba080 <atof>
   b8b36:	ec51 0b10 	vmov	r0, r1, d0
   b8b3a:	f001 fa2d 	bl	b9f98 <__aeabi_d2f>
   b8b3e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8b42:	bd08      	pop	{r3, pc}
	return 0;
   b8b44:	ed9f 0a01 	vldr	s0, [pc, #4]	; b8b4c <_ZNK6String7toFloatEv+0x20>
   b8b48:	e7fb      	b.n	b8b42 <_ZNK6String7toFloatEv+0x16>
   b8b4a:	bf00      	nop
   b8b4c:	00000000 	.word	0x00000000

000b8b50 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b8b50:	b507      	push	{r0, r1, r2, lr}
   b8b52:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8b54:	2100      	movs	r1, #0
{
   b8b56:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8b58:	9100      	str	r1, [sp, #0]
   b8b5a:	2001      	movs	r0, #1
   b8b5c:	218c      	movs	r1, #140	; 0x8c
   b8b5e:	f7fe fbf5 	bl	b734c <system_reset>
}
   b8b62:	b003      	add	sp, #12
   b8b64:	f85d fb04 	ldr.w	pc, [sp], #4

000b8b68 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8b68:	4601      	mov	r1, r0
    reset(0, flags);
   b8b6a:	2000      	movs	r0, #0
   b8b6c:	f7ff bff0 	b.w	b8b50 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b8b70 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b8b70:	2000      	movs	r0, #0
   b8b72:	f7ff bff9 	b.w	b8b68 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b8b78 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8b78:	4b05      	ldr	r3, [pc, #20]	; (b8b90 <_GLOBAL__sub_I_System+0x18>)
   b8b7a:	2202      	movs	r2, #2
   b8b7c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b8b7e:	4b05      	ldr	r3, [pc, #20]	; (b8b94 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8b80:	4a05      	ldr	r2, [pc, #20]	; (b8b98 <_GLOBAL__sub_I_System+0x20>)
   b8b82:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8b84:	2000      	movs	r0, #0
   b8b86:	e9c3 0000 	strd	r0, r0, [r3]
        set_system_mode(mode);
   b8b8a:	f7fe bb93 	b.w	b72b4 <set_system_mode>
   b8b8e:	bf00      	nop
   b8b90:	2003e71c 	.word	0x2003e71c
   b8b94:	2003e710 	.word	0x2003e710
   b8b98:	ffff0000 	.word	0xffff0000

000b8b9c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b8b9c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b8b9e:	6804      	ldr	r4, [r0, #0]
   b8ba0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b8ba2:	46a4      	mov	ip, r4
    }
   b8ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b8ba8:	4760      	bx	ip

000b8baa <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b8baa:	6803      	ldr	r3, [r0, #0]
   b8bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8bae:	4718      	bx	r3

000b8bb0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b8bb0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b8bb2:	4770      	bx	lr

000b8bb4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b8bb4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b8bb6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b8bb8:	1a10      	subs	r0, r2, r0
   b8bba:	4770      	bx	lr

000b8bbc <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b8bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8bbe:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b8bc0:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8bc2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
class IPAddress : public Printable {
   b8bc4:	4b0c      	ldr	r3, [pc, #48]	; (b8bf8 <_ZN3UDP9endPacketEv+0x3c>)
   b8bc6:	9302      	str	r3, [sp, #8]
   b8bc8:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b8bcc:	4604      	mov	r4, r0
   b8bce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8bd0:	ad03      	add	r5, sp, #12
   b8bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8bd4:	6833      	ldr	r3, [r6, #0]
   b8bd6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8bd8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b8bda:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b8bdc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b8bde:	9300      	str	r3, [sp, #0]
   b8be0:	4620      	mov	r0, r4
   b8be2:	ab02      	add	r3, sp, #8
   b8be4:	47b8      	blx	r7
    flush(); // wait for send to complete
   b8be6:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b8be8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b8bea:	69db      	ldr	r3, [r3, #28]
   b8bec:	4620      	mov	r0, r4
   b8bee:	4798      	blx	r3
    return result;
}
   b8bf0:	4628      	mov	r0, r5
   b8bf2:	b009      	add	sp, #36	; 0x24
   b8bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8bf6:	bf00      	nop
   b8bf8:	000bccb4 	.word	0x000bccb4

000b8bfc <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b8bfc:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b8bfe:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b8c00:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b8c04:	68db      	ldr	r3, [r3, #12]
   b8c06:	2201      	movs	r2, #1
   b8c08:	f10d 0107 	add.w	r1, sp, #7
   b8c0c:	4798      	blx	r3
}
   b8c0e:	b003      	add	sp, #12
   b8c10:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c14 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b8c14:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b8c16:	6803      	ldr	r3, [r0, #0]
   b8c18:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b8c1a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b8c1c:	4798      	blx	r3
   b8c1e:	b128      	cbz	r0, b8c2c <_ZN3UDP4readEv+0x18>
   b8c20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8c22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b8c24:	1c59      	adds	r1, r3, #1
   b8c26:	86e1      	strh	r1, [r4, #54]	; 0x36
   b8c28:	5cd0      	ldrb	r0, [r2, r3]
}
   b8c2a:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b8c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8c30:	e7fb      	b.n	b8c2a <_ZN3UDP4readEv+0x16>

000b8c32 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b8c32:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b8c34:	6803      	ldr	r3, [r0, #0]
   b8c36:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b8c38:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b8c3a:	4798      	blx	r3
   b8c3c:	b118      	cbz	r0, b8c46 <_ZN3UDP4peekEv+0x14>
   b8c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8c40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b8c42:	5cd0      	ldrb	r0, [r2, r3]
}
   b8c44:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b8c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8c4a:	e7fb      	b.n	b8c44 <_ZN3UDP4peekEv+0x12>

000b8c4c <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b8c4c:	4770      	bx	lr

000b8c4e <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b8c4e:	b410      	push	{r4}
   b8c50:	4603      	mov	r3, r0
   b8c52:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b8c54:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b8c56:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b8c58:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b8c5a:	6803      	ldr	r3, [r0, #0]
   b8c5c:	1a52      	subs	r2, r2, r1
   b8c5e:	68db      	ldr	r3, [r3, #12]
   b8c60:	4421      	add	r1, r4
}
   b8c62:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b8c66:	4718      	bx	r3

000b8c68 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b8c68:	f1a0 0010 	sub.w	r0, r0, #16
   b8c6c:	f7ff bfef 	b.w	b8c4e <_ZNK3UDP7printToER5Print>

000b8c70 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8c70:	b570      	push	{r4, r5, r6, lr}
    stop();
   b8c72:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8c74:	b08c      	sub	sp, #48	; 0x30
    stop();
   b8c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b8c78:	4604      	mov	r4, r0
   b8c7a:	460e      	mov	r6, r1
   b8c7c:	4615      	mov	r5, r2
    stop();
   b8c7e:	4798      	blx	r3
    const int one = 1;
   b8c80:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b8c82:	221c      	movs	r2, #28
   b8c84:	2100      	movs	r1, #0
   b8c86:	a805      	add	r0, sp, #20
    const int one = 1;
   b8c88:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b8c8a:	f001 fa0e 	bl	ba0aa <memset>
    saddr.sin6_len = sizeof(saddr);
   b8c8e:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b8c92:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b8c94:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b8c98:	f7fe f9ba 	bl	b7010 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8c9c:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b8c9e:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8ca2:	2102      	movs	r1, #2
   b8ca4:	200a      	movs	r0, #10
   b8ca6:	f7fe f953 	bl	b6f50 <sock_socket>
    if (_sock < 0) {
   b8caa:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b8cac:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b8cae:	db25      	blt.n	b8cfc <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b8cb0:	2204      	movs	r2, #4
   b8cb2:	9200      	str	r2, [sp, #0]
   b8cb4:	ab02      	add	r3, sp, #8
   b8cb6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8cba:	f7fe f911 	bl	b6ee0 <sock_setsockopt>
   b8cbe:	b9e8      	cbnz	r0, b8cfc <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b8cc0:	b195      	cbz	r5, b8ce8 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b8cc2:	9003      	str	r0, [sp, #12]
   b8cc4:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b8cc8:	a903      	add	r1, sp, #12
   b8cca:	b2e8      	uxtb	r0, r5
   b8ccc:	f7fe f9e8 	bl	b70a0 <if_index_to_name>
   b8cd0:	b9a0      	cbnz	r0, b8cfc <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b8cd2:	2306      	movs	r3, #6
   b8cd4:	9300      	str	r3, [sp, #0]
   b8cd6:	6960      	ldr	r0, [r4, #20]
   b8cd8:	ab03      	add	r3, sp, #12
   b8cda:	f241 020b 	movw	r2, #4107	; 0x100b
   b8cde:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8ce2:	f7fe f8fd 	bl	b6ee0 <sock_setsockopt>
   b8ce6:	b948      	cbnz	r0, b8cfc <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b8ce8:	6960      	ldr	r0, [r4, #20]
   b8cea:	221c      	movs	r2, #28
   b8cec:	a905      	add	r1, sp, #20
   b8cee:	f7fe f8ef 	bl	b6ed0 <sock_bind>
   b8cf2:	b918      	cbnz	r0, b8cfc <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b8cf4:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b8cf6:	2001      	movs	r0, #1
}
   b8cf8:	b00c      	add	sp, #48	; 0x30
   b8cfa:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b8cfc:	6823      	ldr	r3, [r4, #0]
   b8cfe:	4620      	mov	r0, r4
   b8d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8d02:	4798      	blx	r3
   b8d04:	2000      	movs	r0, #0
   b8d06:	e7f7      	b.n	b8cf8 <_ZN3UDP5beginEtm+0x88>

000b8d08 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b8d08:	b510      	push	{r4, lr}
   b8d0a:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b8d0c:	6940      	ldr	r0, [r0, #20]
   b8d0e:	2800      	cmp	r0, #0
   b8d10:	db01      	blt.n	b8d16 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b8d12:	f7fe f8ed 	bl	b6ef0 <sock_close>
    _sock = -1;
   b8d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d1a:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b8d1c:	2300      	movs	r3, #0
   b8d1e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b8d20:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b8d22:	bd10      	pop	{r4, pc}

000b8d24 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b8d24:	b570      	push	{r4, r5, r6, lr}
   b8d26:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b8d28:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8d2a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b8d2c:	b168      	cbz	r0, b8d4a <_ZN3UDP5writeEPKhj+0x26>
   b8d2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b8d30:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b8d32:	4294      	cmp	r4, r2
   b8d34:	bf28      	it	cs
   b8d36:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b8d38:	4622      	mov	r2, r4
   b8d3a:	4430      	add	r0, r6
   b8d3c:	f001 f9a7 	bl	ba08e <memcpy>
    _offset += size;
   b8d40:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b8d42:	4423      	add	r3, r4
   b8d44:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b8d46:	4620      	mov	r0, r4
   b8d48:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b8d4a:	4604      	mov	r4, r0
   b8d4c:	e7f1      	b.n	b8d32 <_ZN3UDP5writeEPKhj+0xe>

000b8d4e <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b8d4e:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b8d50:	6803      	ldr	r3, [r0, #0]
   b8d52:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b8d54:	4604      	mov	r4, r0
   b8d56:	460f      	mov	r7, r1
   b8d58:	4616      	mov	r6, r2
    if (available()) {
   b8d5a:	4798      	blx	r3
   b8d5c:	b190      	cbz	r0, b8d84 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b8d5e:	6823      	ldr	r3, [r4, #0]
   b8d60:	4620      	mov	r0, r4
   b8d62:	691b      	ldr	r3, [r3, #16]
   b8d64:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b8d66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8d68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b8d6a:	4286      	cmp	r6, r0
   b8d6c:	bfa8      	it	ge
   b8d6e:	4606      	movge	r6, r0
   b8d70:	4419      	add	r1, r3
   b8d72:	4632      	mov	r2, r6
   b8d74:	4638      	mov	r0, r7
   b8d76:	f001 f98a 	bl	ba08e <memcpy>
        _offset += read;
   b8d7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b8d7c:	4433      	add	r3, r6
   b8d7e:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b8d80:	4630      	mov	r0, r6
   b8d82:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b8d84:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   b8d88:	e7fa      	b.n	b8d80 <_ZN3UDP4readEPhj+0x32>

000b8d8a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8d8a:	b530      	push	{r4, r5, lr}
   b8d8c:	b087      	sub	sp, #28
   b8d8e:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8d90:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8d92:	4668      	mov	r0, sp
   b8d94:	f7ff f8d6 	bl	b7f44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d9a:	3404      	adds	r4, #4
   b8d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8d9e:	682b      	ldr	r3, [r5, #0]
   b8da0:	7023      	strb	r3, [r4, #0]
    }
   b8da2:	b007      	add	sp, #28
   b8da4:	bd30      	pop	{r4, r5, pc}
	...

000b8da8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8daa:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8dac:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8dae:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8db0:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b8db2:	4a0a      	ldr	r2, [pc, #40]	; (b8ddc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b8db4:	9202      	str	r2, [sp, #8]
   b8db6:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8db8:	468c      	mov	ip, r1
   b8dba:	4606      	mov	r6, r0
   b8dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8dbe:	ad03      	add	r5, sp, #12
   b8dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8dc2:	6823      	ldr	r3, [r4, #0]
   b8dc4:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8dc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b8dca:	9300      	str	r3, [sp, #0]
   b8dcc:	4672      	mov	r2, lr
   b8dce:	ab02      	add	r3, sp, #8
   b8dd0:	4661      	mov	r1, ip
   b8dd2:	4630      	mov	r0, r6
   b8dd4:	47b8      	blx	r7
    }
   b8dd6:	b009      	add	sp, #36	; 0x24
   b8dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8dda:	bf00      	nop
   b8ddc:	000bccb4 	.word	0x000bccb4

000b8de0 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b8de0:	b570      	push	{r4, r5, r6, lr}
   b8de2:	4604      	mov	r4, r0
   b8de4:	4b05      	ldr	r3, [pc, #20]	; (b8dfc <_ZN3UDP8remoteIPEv+0x1c>)
   b8de6:	f844 3b04 	str.w	r3, [r4], #4
   b8dea:	f101 0520 	add.w	r5, r1, #32
   b8dee:	4606      	mov	r6, r0
   b8df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8df4:	682b      	ldr	r3, [r5, #0]
   b8df6:	7023      	strb	r3, [r4, #0]
   b8df8:	4630      	mov	r0, r6
   b8dfa:	bd70      	pop	{r4, r5, r6, pc}
   b8dfc:	000bccb4 	.word	0x000bccb4

000b8e00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b8e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b8e02:	7843      	ldrb	r3, [r0, #1]
   b8e04:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b8e06:	b08d      	sub	sp, #52	; 0x34
   b8e08:	4605      	mov	r5, r0
   b8e0a:	460c      	mov	r4, r1
   b8e0c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b8e0e:	d104      	bne.n	b8e1a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8e10:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   b8e12:	4620      	mov	r0, r4
   b8e14:	f7ff ffb9 	bl	b8d8a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b8e18:	e022      	b.n	b8e60 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b8e1a:	2b0a      	cmp	r3, #10
   b8e1c:	d125      	bne.n	b8e6a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b8e1e:	2211      	movs	r2, #17
   b8e20:	2100      	movs	r1, #0
   b8e22:	a801      	add	r0, sp, #4
   b8e24:	f001 f941 	bl	ba0aa <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8e28:	68ab      	ldr	r3, [r5, #8]
   b8e2a:	b303      	cbz	r3, b8e6e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8e2c:	f105 0308 	add.w	r3, r5, #8
   b8e30:	ae01      	add	r6, sp, #4
   b8e32:	f105 0c18 	add.w	ip, r5, #24
   b8e36:	6818      	ldr	r0, [r3, #0]
   b8e38:	6859      	ldr	r1, [r3, #4]
   b8e3a:	4632      	mov	r2, r6
   b8e3c:	c203      	stmia	r2!, {r0, r1}
   b8e3e:	3308      	adds	r3, #8
   b8e40:	4563      	cmp	r3, ip
   b8e42:	4616      	mov	r6, r2
   b8e44:	d1f7      	bne.n	b8e36 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b8e46:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8e48:	a901      	add	r1, sp, #4
   b8e4a:	a806      	add	r0, sp, #24
   b8e4c:	ae07      	add	r6, sp, #28
            a.v = 6;
   b8e4e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8e52:	f7ff f835 	bl	b7ec0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8e56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8e58:	3404      	adds	r4, #4
   b8e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e5c:	6833      	ldr	r3, [r6, #0]
   b8e5e:	7023      	strb	r3, [r4, #0]
        if (port) {
   b8e60:	b11f      	cbz	r7, b8e6a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b8e62:	8868      	ldrh	r0, [r5, #2]
   b8e64:	f7fe f8cc 	bl	b7000 <inet_ntohs>
   b8e68:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b8e6a:	b00d      	add	sp, #52	; 0x34
   b8e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8e6e:	68eb      	ldr	r3, [r5, #12]
   b8e70:	2b00      	cmp	r3, #0
   b8e72:	d1db      	bne.n	b8e2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b8e74:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8e78:	692e      	ldr	r6, [r5, #16]
   b8e7a:	f7fe f8b9 	bl	b6ff0 <inet_htonl>
   b8e7e:	4286      	cmp	r6, r0
   b8e80:	d1d4      	bne.n	b8e2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b8e82:	f105 0114 	add.w	r1, r5, #20
   b8e86:	e7c4      	b.n	b8e12 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b8e88 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b8e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e8c:	4617      	mov	r7, r2
   b8e8e:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b8e90:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b8e92:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8e94:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b8e96:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8e98:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b8e9a:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8e9c:	f7fe f910 	bl	b70c0 <netdb_getaddrinfo>
   b8ea0:	1e04      	subs	r4, r0, #0
   b8ea2:	db20      	blt.n	b8ee6 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b8ea4:	9b01      	ldr	r3, [sp, #4]
   b8ea6:	b32b      	cbz	r3, b8ef4 <_ZN3UDP11beginPacketEPKct+0x6c>
   b8ea8:	695b      	ldr	r3, [r3, #20]
   b8eaa:	b31b      	cbz	r3, b8ef4 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b8eac:	a802      	add	r0, sp, #8
   b8eae:	f7fe fff9 	bl	b7ea4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8eb2:	9b01      	ldr	r3, [sp, #4]
   b8eb4:	2200      	movs	r2, #0
   b8eb6:	6958      	ldr	r0, [r3, #20]
   b8eb8:	a902      	add	r1, sp, #8
   b8eba:	f7ff ffa1 	bl	b8e00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b8ebe:	a802      	add	r0, sp, #8
   b8ec0:	f7ff f810 	bl	b7ee4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8ec4:	b1b0      	cbz	r0, b8ef4 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b8ec6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8ec8:	ad03      	add	r5, sp, #12
   b8eca:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b8ece:	4b0b      	ldr	r3, [pc, #44]	; (b8efc <_ZN3UDP11beginPacketEPKct+0x74>)
   b8ed0:	9308      	str	r3, [sp, #32]
   b8ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8ed4:	ac09      	add	r4, sp, #36	; 0x24
   b8ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ed8:	682b      	ldr	r3, [r5, #0]
   b8eda:	7023      	strb	r3, [r4, #0]
   b8edc:	463a      	mov	r2, r7
   b8ede:	a908      	add	r1, sp, #32
   b8ee0:	4630      	mov	r0, r6
   b8ee2:	47c0      	blx	r8
   b8ee4:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b8ee6:	9801      	ldr	r0, [sp, #4]
   b8ee8:	f7fe f8e2 	bl	b70b0 <netdb_freeaddrinfo>
}
   b8eec:	4620      	mov	r0, r4
   b8eee:	b00e      	add	sp, #56	; 0x38
   b8ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b8ef4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8ef8:	e7f5      	b.n	b8ee6 <_ZN3UDP11beginPacketEPKct+0x5e>
   b8efa:	bf00      	nop
   b8efc:	000bccb4 	.word	0x000bccb4

000b8f00 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b8f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b8f04:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b8f08:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b8f0c:	b090      	sub	sp, #64	; 0x40
   b8f0e:	4605      	mov	r5, r0
   b8f10:	460e      	mov	r6, r1
   b8f12:	4690      	mov	r8, r2
   b8f14:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b8f16:	db3c      	blt.n	b8f92 <_ZN3UDP13receivePacketEPhjm+0x92>
   b8f18:	2900      	cmp	r1, #0
   b8f1a:	d03a      	beq.n	b8f92 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b8f1c:	f04f 0a1c 	mov.w	sl, #28
   b8f20:	af09      	add	r7, sp, #36	; 0x24
   b8f22:	4652      	mov	r2, sl
   b8f24:	2100      	movs	r1, #0
   b8f26:	4638      	mov	r0, r7
   b8f28:	f001 f8bf 	bl	ba0aa <memset>
        socklen_t slen = sizeof(saddr);
   b8f2c:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b8f30:	b1dc      	cbz	r4, b8f6a <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b8f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f36:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b8f3a:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b8f3e:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b8f40:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b8f42:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b8f44:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b8f48:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b8f4a:	9300      	str	r3, [sp, #0]
   b8f4c:	f241 0206 	movw	r2, #4102	; 0x1006
   b8f50:	446b      	add	r3, sp
   b8f52:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8f56:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b8f58:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b8f5a:	f7fd ffc1 	bl	b6ee0 <sock_setsockopt>
            if (ret) {
   b8f5e:	4604      	mov	r4, r0
   b8f60:	b120      	cbz	r0, b8f6c <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b8f62:	4620      	mov	r0, r4
   b8f64:	b010      	add	sp, #64	; 0x40
   b8f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b8f6a:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b8f6c:	ab03      	add	r3, sp, #12
   b8f6e:	e9cd 7300 	strd	r7, r3, [sp]
   b8f72:	6968      	ldr	r0, [r5, #20]
   b8f74:	4623      	mov	r3, r4
   b8f76:	4642      	mov	r2, r8
   b8f78:	4631      	mov	r1, r6
   b8f7a:	f7fd ffd1 	bl	b6f20 <sock_recvfrom>
        if (ret >= 0) {
   b8f7e:	1e04      	subs	r4, r0, #0
   b8f80:	dbef      	blt.n	b8f62 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b8f82:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b8f86:	f105 011c 	add.w	r1, r5, #28
   b8f8a:	4638      	mov	r0, r7
   b8f8c:	f7ff ff38 	bl	b8e00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b8f90:	e7e7      	b.n	b8f62 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b8f92:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8f96:	e7e4      	b.n	b8f62 <_ZN3UDP13receivePacketEPhjm+0x62>

000b8f98 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b8f98:	b538      	push	{r3, r4, r5, lr}
   b8f9a:	4605      	mov	r5, r0
   b8f9c:	4614      	mov	r4, r2
    		return address.v;
   b8f9e:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b8fa0:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b8fa2:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b8fa4:	d110      	bne.n	b8fc8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b8fa6:	f640 231c 	movw	r3, #2588	; 0xa1c
   b8faa:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b8fac:	f7fe f830 	bl	b7010 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b8fb0:	3408      	adds	r4, #8
   b8fb2:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b8fb4:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b8fb8:	3514      	adds	r5, #20
   b8fba:	f853 2b04 	ldr.w	r2, [r3], #4
   b8fbe:	f844 2b04 	str.w	r2, [r4], #4
   b8fc2:	42ab      	cmp	r3, r5
   b8fc4:	d1f9      	bne.n	b8fba <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b8fc6:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b8fc8:	2b04      	cmp	r3, #4
   b8fca:	d1fc      	bne.n	b8fc6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b8fcc:	f44f 7304 	mov.w	r3, #528	; 0x210
   b8fd0:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b8fd2:	f7fe f81d 	bl	b7010 <inet_htons>
   b8fd6:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b8fd8:	6868      	ldr	r0, [r5, #4]
   b8fda:	f7fe f809 	bl	b6ff0 <inet_htonl>
   b8fde:	6060      	str	r0, [r4, #4]
}
   b8fe0:	e7f1      	b.n	b8fc6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b8fe2 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b8fe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8fe6:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b8fe8:	af03      	add	r7, sp, #12
   b8fea:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b8fee:	4698      	mov	r8, r3
   b8ff0:	4604      	mov	r4, r0
   b8ff2:	460d      	mov	r5, r1
   b8ff4:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b8ff6:	2100      	movs	r1, #0
   b8ff8:	464a      	mov	r2, r9
   b8ffa:	4638      	mov	r0, r7
   b8ffc:	f001 f855 	bl	ba0aa <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b9000:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b9004:	463a      	mov	r2, r7
   b9006:	4640      	mov	r0, r8
   b9008:	f7ff ffc6 	bl	b8f98 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b900c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b9010:	b153      	cbz	r3, b9028 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b9012:	e9cd 7900 	strd	r7, r9, [sp]
   b9016:	6960      	ldr	r0, [r4, #20]
   b9018:	2300      	movs	r3, #0
   b901a:	4632      	mov	r2, r6
   b901c:	4629      	mov	r1, r5
   b901e:	f7fd ff8f 	bl	b6f40 <sock_sendto>
}
   b9022:	b00b      	add	sp, #44	; 0x2c
   b9024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b9028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b902c:	e7f9      	b.n	b9022 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b9030 <_ZN3UDPC1Ev>:
UDP::UDP()
   b9030:	b538      	push	{r3, r4, r5, lr}
   b9032:	2500      	movs	r5, #0
   b9034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9038:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b903c:	4b0b      	ldr	r3, [pc, #44]	; (b906c <_ZN3UDPC1Ev+0x3c>)
   b903e:	f103 0208 	add.w	r2, r3, #8
   b9042:	336c      	adds	r3, #108	; 0x6c
   b9044:	6103      	str	r3, [r0, #16]
   b9046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   b904a:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b904c:	6002      	str	r2, [r0, #0]
   b904e:	6143      	str	r3, [r0, #20]
   b9050:	301c      	adds	r0, #28
   b9052:	f7fe ff27 	bl	b7ea4 <_ZN9IPAddressC1Ev>
   b9056:	f44f 7300 	mov.w	r3, #512	; 0x200
   b905a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b905e:	86e5      	strh	r5, [r4, #54]	; 0x36
   b9060:	8725      	strh	r5, [r4, #56]	; 0x38
   b9062:	63e5      	str	r5, [r4, #60]	; 0x3c
   b9064:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b9068:	4620      	mov	r0, r4
   b906a:	bd38      	pop	{r3, r4, r5, pc}
   b906c:	000bccfc 	.word	0x000bccfc

000b9070 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b9070:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b9072:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b9076:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b9078:	b123      	cbz	r3, b9084 <_ZN3UDP13releaseBufferEv+0x14>
   b907a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b907c:	b110      	cbz	r0, b9084 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b907e:	2101      	movs	r1, #1
   b9080:	f7fb f80d 	bl	b409e <_ZdlPvj>
    _buffer = NULL;
   b9084:	2300      	movs	r3, #0
   b9086:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b9088:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b908c:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b908e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b9090:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b9092:	bd10      	pop	{r4, pc}

000b9094 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b9094:	b570      	push	{r4, r5, r6, lr}
   b9096:	4604      	mov	r4, r0
   b9098:	4616      	mov	r6, r2
   b909a:	460d      	mov	r5, r1
    releaseBuffer();
   b909c:	f7ff ffe8 	bl	b9070 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b90a0:	2300      	movs	r3, #0
    _buffer = buffer;
   b90a2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b90a4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b90a6:	b12e      	cbz	r6, b90b4 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b90a8:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b90aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b90ac:	3800      	subs	r0, #0
   b90ae:	bf18      	it	ne
   b90b0:	2001      	movne	r0, #1
   b90b2:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b90b4:	2d00      	cmp	r5, #0
   b90b6:	d0f8      	beq.n	b90aa <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b90b8:	4628      	mov	r0, r5
   b90ba:	f7fa ffee 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b90be:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b90c0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b90c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b90c6:	2800      	cmp	r0, #0
   b90c8:	d0ef      	beq.n	b90aa <_ZN3UDP9setBufferEjPh+0x16>
   b90ca:	e7ed      	b.n	b90a8 <_ZN3UDP9setBufferEjPh+0x14>

000b90cc <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b90cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90ce:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b90d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b90d2:	4605      	mov	r5, r0
   b90d4:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b90d6:	b91a      	cbnz	r2, b90e0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b90d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b90da:	b109      	cbz	r1, b90e0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b90dc:	f7ff ffda 	bl	b9094 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b90e0:	3404      	adds	r4, #4
   b90e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b90e4:	f105 0620 	add.w	r6, r5, #32
   b90e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b90ea:	6823      	ldr	r3, [r4, #0]
   b90ec:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b90ee:	2300      	movs	r3, #0
}
   b90f0:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b90f2:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b90f4:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b90f6:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b90f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90fa <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b90fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b90fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b90fe:	4604      	mov	r4, r0
   b9100:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b9102:	b92a      	cbnz	r2, b9110 <_ZN3UDP11parsePacketEm+0x16>
   b9104:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b9106:	b119      	cbz	r1, b9110 <_ZN3UDP11parsePacketEm+0x16>
   b9108:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b910a:	f7ff ffc3 	bl	b9094 <_ZN3UDP9setBufferEjPh>
   b910e:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b9110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b9112:	2200      	movs	r2, #0
   b9114:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b9116:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b9118:	b141      	cbz	r1, b912c <_ZN3UDP11parsePacketEm+0x32>
   b911a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b911c:	b132      	cbz	r2, b912c <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b911e:	6820      	ldr	r0, [r4, #0]
   b9120:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b9122:	4620      	mov	r0, r4
   b9124:	47a8      	blx	r5
        if (result > 0) {
   b9126:	2800      	cmp	r0, #0
            _total = result;
   b9128:	bfc8      	it	gt
   b912a:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b912c:	6823      	ldr	r3, [r4, #0]
   b912e:	691b      	ldr	r3, [r3, #16]
   b9130:	4620      	mov	r0, r4
}
   b9132:	b003      	add	sp, #12
   b9134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b9138:	4718      	bx	r3
	...

000b913c <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b913c:	b510      	push	{r4, lr}
   b913e:	4b07      	ldr	r3, [pc, #28]	; (b915c <_ZN3UDPD1Ev+0x20>)
   b9140:	f103 0208 	add.w	r2, r3, #8
   b9144:	336c      	adds	r3, #108	; 0x6c
   b9146:	4604      	mov	r4, r0
   b9148:	6002      	str	r2, [r0, #0]
   b914a:	6103      	str	r3, [r0, #16]
   b914c:	f7ff fddc 	bl	b8d08 <_ZN3UDP4stopEv>
   b9150:	4620      	mov	r0, r4
   b9152:	f7ff ff8d 	bl	b9070 <_ZN3UDP13releaseBufferEv>
   b9156:	4620      	mov	r0, r4
   b9158:	bd10      	pop	{r4, pc}
   b915a:	bf00      	nop
   b915c:	000bccfc 	.word	0x000bccfc

000b9160 <_ZN3UDPD0Ev>:
   b9160:	b510      	push	{r4, lr}
   b9162:	4604      	mov	r4, r0
   b9164:	f7ff ffea 	bl	b913c <_ZN3UDPD1Ev>
   b9168:	4620      	mov	r0, r4
   b916a:	214c      	movs	r1, #76	; 0x4c
   b916c:	f7fa ff97 	bl	b409e <_ZdlPvj>
   b9170:	4620      	mov	r0, r4
   b9172:	bd10      	pop	{r4, pc}

000b9174 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9174:	2200      	movs	r2, #0
   b9176:	6840      	ldr	r0, [r0, #4]
   b9178:	4611      	mov	r1, r2
   b917a:	f7fe b86b 	b.w	b7254 <network_listening>

000b917e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b917e:	2200      	movs	r2, #0
   b9180:	6840      	ldr	r0, [r0, #4]
   b9182:	4611      	mov	r1, r2
   b9184:	f7fe b876 	b.w	b7274 <network_get_listen_timeout>

000b9188 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9188:	6840      	ldr	r0, [r0, #4]
   b918a:	2200      	movs	r2, #0
   b918c:	f7fe b86a 	b.w	b7264 <network_set_listen_timeout>

000b9190 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9190:	6840      	ldr	r0, [r0, #4]
   b9192:	2200      	movs	r2, #0
   b9194:	f081 0101 	eor.w	r1, r1, #1
   b9198:	f7fe b854 	b.w	b7244 <network_listen>

000b919c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b919c:	2300      	movs	r3, #0
   b919e:	6840      	ldr	r0, [r0, #4]
   b91a0:	461a      	mov	r2, r3
   b91a2:	4619      	mov	r1, r3
   b91a4:	f7fe b846 	b.w	b7234 <network_off>

000b91a8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b91a8:	2300      	movs	r3, #0
   b91aa:	6840      	ldr	r0, [r0, #4]
   b91ac:	461a      	mov	r2, r3
   b91ae:	4619      	mov	r1, r3
   b91b0:	f7fe b838 	b.w	b7224 <network_on>

000b91b4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b91b4:	2200      	movs	r2, #0
   b91b6:	6840      	ldr	r0, [r0, #4]
   b91b8:	4611      	mov	r1, r2
   b91ba:	f7fe b82b 	b.w	b7214 <network_ready>

000b91be <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b91be:	2200      	movs	r2, #0
   b91c0:	6840      	ldr	r0, [r0, #4]
   b91c2:	4611      	mov	r1, r2
   b91c4:	f7fe b816 	b.w	b71f4 <network_connecting>

000b91c8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b91c8:	6840      	ldr	r0, [r0, #4]
   b91ca:	2200      	movs	r2, #0
   b91cc:	2102      	movs	r1, #2
   b91ce:	f7fe b819 	b.w	b7204 <network_disconnect>

000b91d2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b91d2:	2300      	movs	r3, #0
   b91d4:	6840      	ldr	r0, [r0, #4]
   b91d6:	461a      	mov	r2, r3
   b91d8:	f7fe b804 	b.w	b71e4 <network_connect>

000b91dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b91dc:	4b02      	ldr	r3, [pc, #8]	; (b91e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b91de:	2203      	movs	r2, #3
   b91e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b91e2:	4a02      	ldr	r2, [pc, #8]	; (b91ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b91e4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b91e6:	4770      	bx	lr
   b91e8:	2003e720 	.word	0x2003e720
   b91ec:	000bcd74 	.word	0x000bcd74

000b91f0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   b91f0:	b508      	push	{r3, lr}
   b91f2:	4b02      	ldr	r3, [pc, #8]	; (b91fc <spark_protocol_instance+0xc>)
   b91f4:	681b      	ldr	r3, [r3, #0]
   b91f6:	681b      	ldr	r3, [r3, #0]
   b91f8:	9301      	str	r3, [sp, #4]
   b91fa:	bd08      	pop	{r3, pc}
   b91fc:	0003025c 	.word	0x0003025c

000b9200 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   b9200:	b508      	push	{r3, lr}
   b9202:	4b02      	ldr	r3, [pc, #8]	; (b920c <spark_protocol_set_product_id+0xc>)
   b9204:	681b      	ldr	r3, [r3, #0]
   b9206:	685b      	ldr	r3, [r3, #4]
   b9208:	9301      	str	r3, [sp, #4]
   b920a:	bd08      	pop	{r3, pc}
   b920c:	0003025c 	.word	0x0003025c

000b9210 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   b9210:	b508      	push	{r3, lr}
   b9212:	4b02      	ldr	r3, [pc, #8]	; (b921c <spark_protocol_set_product_firmware_version+0xc>)
   b9214:	681b      	ldr	r3, [r3, #0]
   b9216:	689b      	ldr	r3, [r3, #8]
   b9218:	9301      	str	r3, [sp, #4]
   b921a:	bd08      	pop	{r3, pc}
   b921c:	0003025c 	.word	0x0003025c

000b9220 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9220:	4770      	bx	lr
	...

000b9224 <_Z17acquireWireBufferv>:
{
   b9224:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9226:	2520      	movs	r5, #32
   b9228:	2314      	movs	r3, #20
{
   b922a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b922c:	6003      	str	r3, [r0, #0]
   b922e:	6085      	str	r5, [r0, #8]
   b9230:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9232:	4906      	ldr	r1, [pc, #24]	; (b924c <_Z17acquireWireBufferv+0x28>)
   b9234:	4628      	mov	r0, r5
   b9236:	f000 f86f 	bl	b9318 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b923a:	4904      	ldr	r1, [pc, #16]	; (b924c <_Z17acquireWireBufferv+0x28>)
	};
   b923c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b923e:	4628      	mov	r0, r5
   b9240:	f000 f86a 	bl	b9318 <_ZnajRKSt9nothrow_t>
	};
   b9244:	60e0      	str	r0, [r4, #12]
}
   b9246:	4620      	mov	r0, r4
   b9248:	bd38      	pop	{r3, r4, r5, pc}
   b924a:	bf00      	nop
   b924c:	000bcda8 	.word	0x000bcda8

000b9250 <_Z19__fetch_global_Wirev>:
{
   b9250:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9252:	4d0e      	ldr	r5, [pc, #56]	; (b928c <_Z19__fetch_global_Wirev+0x3c>)
   b9254:	7829      	ldrb	r1, [r5, #0]
   b9256:	f3bf 8f5b 	dmb	ish
   b925a:	f011 0401 	ands.w	r4, r1, #1
{
   b925e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9260:	d111      	bne.n	b9286 <_Z19__fetch_global_Wirev+0x36>
   b9262:	4628      	mov	r0, r5
   b9264:	f7fa ff1d 	bl	b40a2 <__cxa_guard_acquire>
   b9268:	b168      	cbz	r0, b9286 <_Z19__fetch_global_Wirev+0x36>
   b926a:	a801      	add	r0, sp, #4
   b926c:	f7ff ffda 	bl	b9224 <_Z17acquireWireBufferv>
   b9270:	aa01      	add	r2, sp, #4
   b9272:	4621      	mov	r1, r4
   b9274:	4806      	ldr	r0, [pc, #24]	; (b9290 <_Z19__fetch_global_Wirev+0x40>)
   b9276:	f7fe fc83 	bl	b7b80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b927a:	4628      	mov	r0, r5
   b927c:	f7fa ff16 	bl	b40ac <__cxa_guard_release>
   b9280:	4804      	ldr	r0, [pc, #16]	; (b9294 <_Z19__fetch_global_Wirev+0x44>)
   b9282:	f000 fef7 	bl	ba074 <atexit>
	return wire;
}
   b9286:	4802      	ldr	r0, [pc, #8]	; (b9290 <_Z19__fetch_global_Wirev+0x40>)
   b9288:	b007      	add	sp, #28
   b928a:	bd30      	pop	{r4, r5, pc}
   b928c:	2003e728 	.word	0x2003e728
   b9290:	2003e72c 	.word	0x2003e72c
   b9294:	000b9221 	.word	0x000b9221

000b9298 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9298:	4770      	bx	lr
	...

000b929c <_Z20acquireSerial1Bufferv>:
{
   b929c:	b538      	push	{r3, r4, r5, lr}
   b929e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b92a0:	2514      	movs	r5, #20
   b92a2:	462a      	mov	r2, r5
   b92a4:	2100      	movs	r1, #0
   b92a6:	f000 ff00 	bl	ba0aa <memset>
   b92aa:	8025      	strh	r5, [r4, #0]
   b92ac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92ae:	4907      	ldr	r1, [pc, #28]	; (b92cc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b92b0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92b2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b92b4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92b6:	f000 f82f 	bl	b9318 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92ba:	4904      	ldr	r1, [pc, #16]	; (b92cc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b92bc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b92be:	4628      	mov	r0, r5
   b92c0:	f000 f82a 	bl	b9318 <_ZnajRKSt9nothrow_t>
    };
   b92c4:	60e0      	str	r0, [r4, #12]
}
   b92c6:	4620      	mov	r0, r4
   b92c8:	bd38      	pop	{r3, r4, r5, pc}
   b92ca:	bf00      	nop
   b92cc:	000bcda8 	.word	0x000bcda8

000b92d0 <_Z22__fetch_global_Serial1v>:
{
   b92d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b92d2:	4d0e      	ldr	r5, [pc, #56]	; (b930c <_Z22__fetch_global_Serial1v+0x3c>)
   b92d4:	7829      	ldrb	r1, [r5, #0]
   b92d6:	f3bf 8f5b 	dmb	ish
   b92da:	f011 0401 	ands.w	r4, r1, #1
{
   b92de:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b92e0:	d111      	bne.n	b9306 <_Z22__fetch_global_Serial1v+0x36>
   b92e2:	4628      	mov	r0, r5
   b92e4:	f7fa fedd 	bl	b40a2 <__cxa_guard_acquire>
   b92e8:	b168      	cbz	r0, b9306 <_Z22__fetch_global_Serial1v+0x36>
   b92ea:	a801      	add	r0, sp, #4
   b92ec:	f7ff ffd6 	bl	b929c <_Z20acquireSerial1Bufferv>
   b92f0:	aa01      	add	r2, sp, #4
   b92f2:	4621      	mov	r1, r4
   b92f4:	4806      	ldr	r0, [pc, #24]	; (b9310 <_Z22__fetch_global_Serial1v+0x40>)
   b92f6:	f7fe fcaf 	bl	b7c58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b92fa:	4628      	mov	r0, r5
   b92fc:	f7fa fed6 	bl	b40ac <__cxa_guard_release>
   b9300:	4804      	ldr	r0, [pc, #16]	; (b9314 <_Z22__fetch_global_Serial1v+0x44>)
   b9302:	f000 feb7 	bl	ba074 <atexit>
    return serial1;
}
   b9306:	4802      	ldr	r0, [pc, #8]	; (b9310 <_Z22__fetch_global_Serial1v+0x40>)
   b9308:	b007      	add	sp, #28
   b930a:	bd30      	pop	{r4, r5, pc}
   b930c:	2003e748 	.word	0x2003e748
   b9310:	2003e74c 	.word	0x2003e74c
   b9314:	000b9299 	.word	0x000b9299

000b9318 <_ZnajRKSt9nothrow_t>:
   b9318:	f7fa bebf 	b.w	b409a <_Znaj>

000b931c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b931c:	68c3      	ldr	r3, [r0, #12]
   b931e:	689a      	ldr	r2, [r3, #8]
   b9320:	60c2      	str	r2, [r0, #12]
   b9322:	b510      	push	{r4, lr}
   b9324:	b102      	cbz	r2, b9328 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b9326:	6050      	str	r0, [r2, #4]
   b9328:	6842      	ldr	r2, [r0, #4]
   b932a:	605a      	str	r2, [r3, #4]
   b932c:	680c      	ldr	r4, [r1, #0]
   b932e:	4284      	cmp	r4, r0
   b9330:	d103      	bne.n	b933a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b9332:	600b      	str	r3, [r1, #0]
   b9334:	6098      	str	r0, [r3, #8]
   b9336:	6043      	str	r3, [r0, #4]
   b9338:	bd10      	pop	{r4, pc}
   b933a:	6891      	ldr	r1, [r2, #8]
   b933c:	4281      	cmp	r1, r0
   b933e:	bf0c      	ite	eq
   b9340:	6093      	streq	r3, [r2, #8]
   b9342:	60d3      	strne	r3, [r2, #12]
   b9344:	e7f6      	b.n	b9334 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b9346 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b9346:	6883      	ldr	r3, [r0, #8]
   b9348:	68da      	ldr	r2, [r3, #12]
   b934a:	6082      	str	r2, [r0, #8]
   b934c:	b510      	push	{r4, lr}
   b934e:	b102      	cbz	r2, b9352 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b9350:	6050      	str	r0, [r2, #4]
   b9352:	6842      	ldr	r2, [r0, #4]
   b9354:	605a      	str	r2, [r3, #4]
   b9356:	680c      	ldr	r4, [r1, #0]
   b9358:	4284      	cmp	r4, r0
   b935a:	d103      	bne.n	b9364 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b935c:	600b      	str	r3, [r1, #0]
   b935e:	60d8      	str	r0, [r3, #12]
   b9360:	6043      	str	r3, [r0, #4]
   b9362:	bd10      	pop	{r4, pc}
   b9364:	68d1      	ldr	r1, [r2, #12]
   b9366:	4281      	cmp	r1, r0
   b9368:	bf0c      	ite	eq
   b936a:	60d3      	streq	r3, [r2, #12]
   b936c:	6093      	strne	r3, [r2, #8]
   b936e:	e7f6      	b.n	b935e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b9370 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b9370:	68c3      	ldr	r3, [r0, #12]
   b9372:	b123      	cbz	r3, b937e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b9374:	4618      	mov	r0, r3
   b9376:	689b      	ldr	r3, [r3, #8]
   b9378:	2b00      	cmp	r3, #0
   b937a:	d1fb      	bne.n	b9374 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b937c:	4770      	bx	lr
   b937e:	6843      	ldr	r3, [r0, #4]
   b9380:	68da      	ldr	r2, [r3, #12]
   b9382:	4282      	cmp	r2, r0
   b9384:	d102      	bne.n	b938c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b9386:	4618      	mov	r0, r3
   b9388:	685b      	ldr	r3, [r3, #4]
   b938a:	e7f9      	b.n	b9380 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b938c:	68c2      	ldr	r2, [r0, #12]
   b938e:	4293      	cmp	r3, r2
   b9390:	bf18      	it	ne
   b9392:	4618      	movne	r0, r3
   b9394:	4770      	bx	lr

000b9396 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b9396:	7803      	ldrb	r3, [r0, #0]
   b9398:	b933      	cbnz	r3, b93a8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b939a:	6843      	ldr	r3, [r0, #4]
   b939c:	685b      	ldr	r3, [r3, #4]
   b939e:	4283      	cmp	r3, r0
   b93a0:	d102      	bne.n	b93a8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b93a2:	68db      	ldr	r3, [r3, #12]
   b93a4:	4618      	mov	r0, r3
   b93a6:	4770      	bx	lr
   b93a8:	6882      	ldr	r2, [r0, #8]
   b93aa:	b122      	cbz	r2, b93b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b93ac:	4613      	mov	r3, r2
   b93ae:	68d2      	ldr	r2, [r2, #12]
   b93b0:	2a00      	cmp	r2, #0
   b93b2:	d1fb      	bne.n	b93ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b93b4:	e7f6      	b.n	b93a4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b93b6:	6843      	ldr	r3, [r0, #4]
   b93b8:	689a      	ldr	r2, [r3, #8]
   b93ba:	4282      	cmp	r2, r0
   b93bc:	d1f2      	bne.n	b93a4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b93be:	4618      	mov	r0, r3
   b93c0:	685b      	ldr	r3, [r3, #4]
   b93c2:	e7f9      	b.n	b93b8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b93c4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b93c4:	f7ff bfd4 	b.w	b9370 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b93c8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b93c8:	f7ff bfe5 	b.w	b9396 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b93cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b93cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b93d0:	461e      	mov	r6, r3
   b93d2:	f103 0804 	add.w	r8, r3, #4
   b93d6:	2300      	movs	r3, #0
   b93d8:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b93dc:	460c      	mov	r4, r1
   b93de:	604a      	str	r2, [r1, #4]
   b93e0:	700b      	strb	r3, [r1, #0]
   b93e2:	b300      	cbz	r0, b9426 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b93e4:	4296      	cmp	r6, r2
   b93e6:	6091      	str	r1, [r2, #8]
   b93e8:	d118      	bne.n	b941c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b93ea:	6071      	str	r1, [r6, #4]
   b93ec:	60f4      	str	r4, [r6, #12]
   b93ee:	2701      	movs	r7, #1
   b93f0:	f04f 0900 	mov.w	r9, #0
   b93f4:	6873      	ldr	r3, [r6, #4]
   b93f6:	42a3      	cmp	r3, r4
   b93f8:	d03f      	beq.n	b947a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b93fa:	6860      	ldr	r0, [r4, #4]
   b93fc:	7802      	ldrb	r2, [r0, #0]
   b93fe:	2a00      	cmp	r2, #0
   b9400:	d13b      	bne.n	b947a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b9402:	6845      	ldr	r5, [r0, #4]
   b9404:	68ab      	ldr	r3, [r5, #8]
   b9406:	4298      	cmp	r0, r3
   b9408:	d123      	bne.n	b9452 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b940a:	68eb      	ldr	r3, [r5, #12]
   b940c:	b183      	cbz	r3, b9430 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b940e:	781a      	ldrb	r2, [r3, #0]
   b9410:	b972      	cbnz	r2, b9430 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b9412:	7007      	strb	r7, [r0, #0]
   b9414:	701f      	strb	r7, [r3, #0]
   b9416:	702a      	strb	r2, [r5, #0]
   b9418:	462c      	mov	r4, r5
   b941a:	e7eb      	b.n	b93f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b941c:	68b3      	ldr	r3, [r6, #8]
   b941e:	4293      	cmp	r3, r2
   b9420:	d1e5      	bne.n	b93ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b9422:	60b1      	str	r1, [r6, #8]
   b9424:	e7e3      	b.n	b93ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b9426:	60d1      	str	r1, [r2, #12]
   b9428:	68f3      	ldr	r3, [r6, #12]
   b942a:	4293      	cmp	r3, r2
   b942c:	d1df      	bne.n	b93ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b942e:	e7dd      	b.n	b93ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b9430:	68c3      	ldr	r3, [r0, #12]
   b9432:	42a3      	cmp	r3, r4
   b9434:	d103      	bne.n	b943e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b9436:	4641      	mov	r1, r8
   b9438:	f7ff ff70 	bl	b931c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b943c:	4604      	mov	r4, r0
   b943e:	6863      	ldr	r3, [r4, #4]
   b9440:	4641      	mov	r1, r8
   b9442:	701f      	strb	r7, [r3, #0]
   b9444:	4628      	mov	r0, r5
   b9446:	f885 9000 	strb.w	r9, [r5]
   b944a:	f7ff ff7c 	bl	b9346 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b944e:	4625      	mov	r5, r4
   b9450:	e7e2      	b.n	b9418 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b9452:	b113      	cbz	r3, b945a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b9454:	781a      	ldrb	r2, [r3, #0]
   b9456:	2a00      	cmp	r2, #0
   b9458:	d0db      	beq.n	b9412 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b945a:	6883      	ldr	r3, [r0, #8]
   b945c:	42a3      	cmp	r3, r4
   b945e:	d103      	bne.n	b9468 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b9460:	4641      	mov	r1, r8
   b9462:	f7ff ff70 	bl	b9346 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b9466:	4604      	mov	r4, r0
   b9468:	6863      	ldr	r3, [r4, #4]
   b946a:	4641      	mov	r1, r8
   b946c:	701f      	strb	r7, [r3, #0]
   b946e:	4628      	mov	r0, r5
   b9470:	f885 9000 	strb.w	r9, [r5]
   b9474:	f7ff ff52 	bl	b931c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b9478:	e7e9      	b.n	b944e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b947a:	2201      	movs	r2, #1
   b947c:	701a      	strb	r2, [r3, #0]
   b947e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9482 <_ZSt25__throw_bad_function_callv>:
   b9482:	b508      	push	{r3, lr}
   b9484:	f7fd ff9c 	bl	b73c0 <abort>

000b9488 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9488:	4901      	ldr	r1, [pc, #4]	; (b9490 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b948a:	f000 b8f9 	b.w	b9680 <_ZNKSt9type_infoeqERKS_>
   b948e:	bf00      	nop
   b9490:	000bcdc4 	.word	0x000bcdc4

000b9494 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9496:	2400      	movs	r4, #0
   b9498:	2310      	movs	r3, #16
   b949a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b949e:	6803      	ldr	r3, [r0, #0]
   b94a0:	4615      	mov	r5, r2
   b94a2:	699e      	ldr	r6, [r3, #24]
   b94a4:	6812      	ldr	r2, [r2, #0]
   b94a6:	466b      	mov	r3, sp
   b94a8:	e9cd 4400 	strd	r4, r4, [sp]
   b94ac:	47b0      	blx	r6
   b94ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b94b2:	f003 0306 	and.w	r3, r3, #6
   b94b6:	2b06      	cmp	r3, #6
   b94b8:	bf03      	ittte	eq
   b94ba:	9b00      	ldreq	r3, [sp, #0]
   b94bc:	602b      	streq	r3, [r5, #0]
   b94be:	2001      	moveq	r0, #1
   b94c0:	4620      	movne	r0, r4
   b94c2:	b004      	add	sp, #16
   b94c4:	bd70      	pop	{r4, r5, r6, pc}

000b94c6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b94c6:	9800      	ldr	r0, [sp, #0]
   b94c8:	4290      	cmp	r0, r2
   b94ca:	bf14      	ite	ne
   b94cc:	2001      	movne	r0, #1
   b94ce:	2006      	moveq	r0, #6
   b94d0:	4770      	bx	lr
	...

000b94d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b94d4:	b510      	push	{r4, lr}
   b94d6:	4b03      	ldr	r3, [pc, #12]	; (b94e4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b94d8:	6003      	str	r3, [r0, #0]
   b94da:	4604      	mov	r4, r0
   b94dc:	f000 f8cd 	bl	b967a <_ZNSt9type_infoD1Ev>
   b94e0:	4620      	mov	r0, r4
   b94e2:	bd10      	pop	{r4, pc}
   b94e4:	000bce04 	.word	0x000bce04

000b94e8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b94e8:	b510      	push	{r4, lr}
   b94ea:	4604      	mov	r4, r0
   b94ec:	f7ff fff2 	bl	b94d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b94f0:	4620      	mov	r0, r4
   b94f2:	2108      	movs	r1, #8
   b94f4:	f7fa fdd3 	bl	b409e <_ZdlPvj>
   b94f8:	4620      	mov	r0, r4
   b94fa:	bd10      	pop	{r4, pc}

000b94fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b94fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9500:	461f      	mov	r7, r3
   b9502:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9506:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b950a:	4598      	cmp	r8, r3
   b950c:	4606      	mov	r6, r0
   b950e:	4615      	mov	r5, r2
   b9510:	d107      	bne.n	b9522 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9512:	9907      	ldr	r1, [sp, #28]
   b9514:	f000 f8b4 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b9518:	b118      	cbz	r0, b9522 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b951a:	7165      	strb	r5, [r4, #5]
   b951c:	2000      	movs	r0, #0
   b951e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9522:	4639      	mov	r1, r7
   b9524:	4630      	mov	r0, r6
   b9526:	f000 f8ab 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b952a:	2800      	cmp	r0, #0
   b952c:	d0f6      	beq.n	b951c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b952e:	2301      	movs	r3, #1
   b9530:	f8c4 8000 	str.w	r8, [r4]
   b9534:	7125      	strb	r5, [r4, #4]
   b9536:	71a3      	strb	r3, [r4, #6]
   b9538:	e7f0      	b.n	b951c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b953a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b953a:	b538      	push	{r3, r4, r5, lr}
   b953c:	4615      	mov	r5, r2
   b953e:	461c      	mov	r4, r3
   b9540:	f000 f89e 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b9544:	b120      	cbz	r0, b9550 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9546:	2308      	movs	r3, #8
   b9548:	60e3      	str	r3, [r4, #12]
   b954a:	2306      	movs	r3, #6
   b954c:	6025      	str	r5, [r4, #0]
   b954e:	7123      	strb	r3, [r4, #4]
   b9550:	bd38      	pop	{r3, r4, r5, pc}

000b9552 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9552:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9554:	4605      	mov	r5, r0
   b9556:	460c      	mov	r4, r1
   b9558:	9201      	str	r2, [sp, #4]
   b955a:	461e      	mov	r6, r3
   b955c:	f000 f890 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b9560:	b950      	cbnz	r0, b9578 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9562:	2e03      	cmp	r6, #3
   b9564:	d808      	bhi.n	b9578 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9566:	6823      	ldr	r3, [r4, #0]
   b9568:	9a01      	ldr	r2, [sp, #4]
   b956a:	695b      	ldr	r3, [r3, #20]
   b956c:	4629      	mov	r1, r5
   b956e:	4620      	mov	r0, r4
   b9570:	b002      	add	sp, #8
   b9572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9576:	4718      	bx	r3
   b9578:	b002      	add	sp, #8
   b957a:	bd70      	pop	{r4, r5, r6, pc}

000b957c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b957c:	b510      	push	{r4, lr}
   b957e:	4b03      	ldr	r3, [pc, #12]	; (b958c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9580:	6003      	str	r3, [r0, #0]
   b9582:	4604      	mov	r4, r0
   b9584:	f7ff ffa6 	bl	b94d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9588:	4620      	mov	r0, r4
   b958a:	bd10      	pop	{r4, pc}
   b958c:	000bce64 	.word	0x000bce64

000b9590 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9590:	b510      	push	{r4, lr}
   b9592:	4604      	mov	r4, r0
   b9594:	f7ff fff2 	bl	b957c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9598:	4620      	mov	r0, r4
   b959a:	210c      	movs	r1, #12
   b959c:	f7fa fd7f 	bl	b409e <_ZdlPvj>
   b95a0:	4620      	mov	r0, r4
   b95a2:	bd10      	pop	{r4, pc}

000b95a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b95a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b95a6:	9f08      	ldr	r7, [sp, #32]
   b95a8:	4297      	cmp	r7, r2
   b95aa:	4605      	mov	r5, r0
   b95ac:	460e      	mov	r6, r1
   b95ae:	4614      	mov	r4, r2
   b95b0:	d00a      	beq.n	b95c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b95b2:	68a8      	ldr	r0, [r5, #8]
   b95b4:	6802      	ldr	r2, [r0, #0]
   b95b6:	9708      	str	r7, [sp, #32]
   b95b8:	6a15      	ldr	r5, [r2, #32]
   b95ba:	4631      	mov	r1, r6
   b95bc:	4622      	mov	r2, r4
   b95be:	46ac      	mov	ip, r5
   b95c0:	b003      	add	sp, #12
   b95c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b95c6:	4760      	bx	ip
   b95c8:	4619      	mov	r1, r3
   b95ca:	9301      	str	r3, [sp, #4]
   b95cc:	f000 f858 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b95d0:	9b01      	ldr	r3, [sp, #4]
   b95d2:	2800      	cmp	r0, #0
   b95d4:	d0ed      	beq.n	b95b2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b95d6:	2006      	movs	r0, #6
   b95d8:	b003      	add	sp, #12
   b95da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b95dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b95dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95e0:	460d      	mov	r5, r1
   b95e2:	4619      	mov	r1, r3
   b95e4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b95e8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b95ec:	4681      	mov	r9, r0
   b95ee:	4617      	mov	r7, r2
   b95f0:	4698      	mov	r8, r3
   b95f2:	f000 f845 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b95f6:	b190      	cbz	r0, b961e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b95f8:	2d00      	cmp	r5, #0
   b95fa:	6034      	str	r4, [r6, #0]
   b95fc:	7137      	strb	r7, [r6, #4]
   b95fe:	db09      	blt.n	b9614 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9600:	1961      	adds	r1, r4, r5
   b9602:	458a      	cmp	sl, r1
   b9604:	bf0c      	ite	eq
   b9606:	2106      	moveq	r1, #6
   b9608:	2101      	movne	r1, #1
   b960a:	71b1      	strb	r1, [r6, #6]
   b960c:	2000      	movs	r0, #0
   b960e:	b001      	add	sp, #4
   b9610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9614:	3502      	adds	r5, #2
   b9616:	d1f9      	bne.n	b960c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9618:	2301      	movs	r3, #1
   b961a:	71b3      	strb	r3, [r6, #6]
   b961c:	e7f6      	b.n	b960c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b961e:	4554      	cmp	r4, sl
   b9620:	d106      	bne.n	b9630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9622:	4659      	mov	r1, fp
   b9624:	4648      	mov	r0, r9
   b9626:	f000 f82b 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b962a:	b108      	cbz	r0, b9630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b962c:	7177      	strb	r7, [r6, #5]
   b962e:	e7ed      	b.n	b960c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9630:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9634:	6803      	ldr	r3, [r0, #0]
   b9636:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b963a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b963e:	69dc      	ldr	r4, [r3, #28]
   b9640:	463a      	mov	r2, r7
   b9642:	4643      	mov	r3, r8
   b9644:	4629      	mov	r1, r5
   b9646:	46a4      	mov	ip, r4
   b9648:	b001      	add	sp, #4
   b964a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b964e:	4760      	bx	ip

000b9650 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9654:	4607      	mov	r7, r0
   b9656:	460c      	mov	r4, r1
   b9658:	4615      	mov	r5, r2
   b965a:	461e      	mov	r6, r3
   b965c:	f7ff ff6d 	bl	b953a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9660:	b948      	cbnz	r0, b9676 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9662:	68b8      	ldr	r0, [r7, #8]
   b9664:	6803      	ldr	r3, [r0, #0]
   b9666:	699f      	ldr	r7, [r3, #24]
   b9668:	462a      	mov	r2, r5
   b966a:	4633      	mov	r3, r6
   b966c:	4621      	mov	r1, r4
   b966e:	46bc      	mov	ip, r7
   b9670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9674:	4760      	bx	ip
   b9676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b967a <_ZNSt9type_infoD1Ev>:
   b967a:	4770      	bx	lr

000b967c <_ZNKSt9type_info14__is_pointer_pEv>:
   b967c:	2000      	movs	r0, #0
   b967e:	4770      	bx	lr

000b9680 <_ZNKSt9type_infoeqERKS_>:
   b9680:	4281      	cmp	r1, r0
   b9682:	b508      	push	{r3, lr}
   b9684:	d00e      	beq.n	b96a4 <_ZNKSt9type_infoeqERKS_+0x24>
   b9686:	6840      	ldr	r0, [r0, #4]
   b9688:	7803      	ldrb	r3, [r0, #0]
   b968a:	2b2a      	cmp	r3, #42	; 0x2a
   b968c:	d00c      	beq.n	b96a8 <_ZNKSt9type_infoeqERKS_+0x28>
   b968e:	6849      	ldr	r1, [r1, #4]
   b9690:	780b      	ldrb	r3, [r1, #0]
   b9692:	2b2a      	cmp	r3, #42	; 0x2a
   b9694:	bf08      	it	eq
   b9696:	3101      	addeq	r1, #1
   b9698:	f000 fd4b 	bl	ba132 <strcmp>
   b969c:	fab0 f080 	clz	r0, r0
   b96a0:	0940      	lsrs	r0, r0, #5
   b96a2:	bd08      	pop	{r3, pc}
   b96a4:	2001      	movs	r0, #1
   b96a6:	e7fc      	b.n	b96a2 <_ZNKSt9type_infoeqERKS_+0x22>
   b96a8:	2000      	movs	r0, #0
   b96aa:	e7fa      	b.n	b96a2 <_ZNKSt9type_infoeqERKS_+0x22>

000b96ac <__aeabi_drsub>:
   b96ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b96b0:	e002      	b.n	b96b8 <__adddf3>
   b96b2:	bf00      	nop

000b96b4 <__aeabi_dsub>:
   b96b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b96b8 <__adddf3>:
   b96b8:	b530      	push	{r4, r5, lr}
   b96ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b96be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b96c2:	ea94 0f05 	teq	r4, r5
   b96c6:	bf08      	it	eq
   b96c8:	ea90 0f02 	teqeq	r0, r2
   b96cc:	bf1f      	itttt	ne
   b96ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   b96d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b96d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b96da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b96de:	f000 80e2 	beq.w	b98a6 <__adddf3+0x1ee>
   b96e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b96e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b96ea:	bfb8      	it	lt
   b96ec:	426d      	neglt	r5, r5
   b96ee:	dd0c      	ble.n	b970a <__adddf3+0x52>
   b96f0:	442c      	add	r4, r5
   b96f2:	ea80 0202 	eor.w	r2, r0, r2
   b96f6:	ea81 0303 	eor.w	r3, r1, r3
   b96fa:	ea82 0000 	eor.w	r0, r2, r0
   b96fe:	ea83 0101 	eor.w	r1, r3, r1
   b9702:	ea80 0202 	eor.w	r2, r0, r2
   b9706:	ea81 0303 	eor.w	r3, r1, r3
   b970a:	2d36      	cmp	r5, #54	; 0x36
   b970c:	bf88      	it	hi
   b970e:	bd30      	pophi	{r4, r5, pc}
   b9710:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9714:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9718:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b971c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9720:	d002      	beq.n	b9728 <__adddf3+0x70>
   b9722:	4240      	negs	r0, r0
   b9724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9728:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b972c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9730:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9734:	d002      	beq.n	b973c <__adddf3+0x84>
   b9736:	4252      	negs	r2, r2
   b9738:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b973c:	ea94 0f05 	teq	r4, r5
   b9740:	f000 80a7 	beq.w	b9892 <__adddf3+0x1da>
   b9744:	f1a4 0401 	sub.w	r4, r4, #1
   b9748:	f1d5 0e20 	rsbs	lr, r5, #32
   b974c:	db0d      	blt.n	b976a <__adddf3+0xb2>
   b974e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9752:	fa22 f205 	lsr.w	r2, r2, r5
   b9756:	1880      	adds	r0, r0, r2
   b9758:	f141 0100 	adc.w	r1, r1, #0
   b975c:	fa03 f20e 	lsl.w	r2, r3, lr
   b9760:	1880      	adds	r0, r0, r2
   b9762:	fa43 f305 	asr.w	r3, r3, r5
   b9766:	4159      	adcs	r1, r3
   b9768:	e00e      	b.n	b9788 <__adddf3+0xd0>
   b976a:	f1a5 0520 	sub.w	r5, r5, #32
   b976e:	f10e 0e20 	add.w	lr, lr, #32
   b9772:	2a01      	cmp	r2, #1
   b9774:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9778:	bf28      	it	cs
   b977a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b977e:	fa43 f305 	asr.w	r3, r3, r5
   b9782:	18c0      	adds	r0, r0, r3
   b9784:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9788:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b978c:	d507      	bpl.n	b979e <__adddf3+0xe6>
   b978e:	f04f 0e00 	mov.w	lr, #0
   b9792:	f1dc 0c00 	rsbs	ip, ip, #0
   b9796:	eb7e 0000 	sbcs.w	r0, lr, r0
   b979a:	eb6e 0101 	sbc.w	r1, lr, r1
   b979e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b97a2:	d31b      	bcc.n	b97dc <__adddf3+0x124>
   b97a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b97a8:	d30c      	bcc.n	b97c4 <__adddf3+0x10c>
   b97aa:	0849      	lsrs	r1, r1, #1
   b97ac:	ea5f 0030 	movs.w	r0, r0, rrx
   b97b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b97b4:	f104 0401 	add.w	r4, r4, #1
   b97b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b97bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b97c0:	f080 809a 	bcs.w	b98f8 <__adddf3+0x240>
   b97c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b97c8:	bf08      	it	eq
   b97ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b97ce:	f150 0000 	adcs.w	r0, r0, #0
   b97d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b97d6:	ea41 0105 	orr.w	r1, r1, r5
   b97da:	bd30      	pop	{r4, r5, pc}
   b97dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b97e0:	4140      	adcs	r0, r0
   b97e2:	eb41 0101 	adc.w	r1, r1, r1
   b97e6:	3c01      	subs	r4, #1
   b97e8:	bf28      	it	cs
   b97ea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b97ee:	d2e9      	bcs.n	b97c4 <__adddf3+0x10c>
   b97f0:	f091 0f00 	teq	r1, #0
   b97f4:	bf04      	itt	eq
   b97f6:	4601      	moveq	r1, r0
   b97f8:	2000      	moveq	r0, #0
   b97fa:	fab1 f381 	clz	r3, r1
   b97fe:	bf08      	it	eq
   b9800:	3320      	addeq	r3, #32
   b9802:	f1a3 030b 	sub.w	r3, r3, #11
   b9806:	f1b3 0220 	subs.w	r2, r3, #32
   b980a:	da0c      	bge.n	b9826 <__adddf3+0x16e>
   b980c:	320c      	adds	r2, #12
   b980e:	dd08      	ble.n	b9822 <__adddf3+0x16a>
   b9810:	f102 0c14 	add.w	ip, r2, #20
   b9814:	f1c2 020c 	rsb	r2, r2, #12
   b9818:	fa01 f00c 	lsl.w	r0, r1, ip
   b981c:	fa21 f102 	lsr.w	r1, r1, r2
   b9820:	e00c      	b.n	b983c <__adddf3+0x184>
   b9822:	f102 0214 	add.w	r2, r2, #20
   b9826:	bfd8      	it	le
   b9828:	f1c2 0c20 	rsble	ip, r2, #32
   b982c:	fa01 f102 	lsl.w	r1, r1, r2
   b9830:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9834:	bfdc      	itt	le
   b9836:	ea41 010c 	orrle.w	r1, r1, ip
   b983a:	4090      	lslle	r0, r2
   b983c:	1ae4      	subs	r4, r4, r3
   b983e:	bfa2      	ittt	ge
   b9840:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9844:	4329      	orrge	r1, r5
   b9846:	bd30      	popge	{r4, r5, pc}
   b9848:	ea6f 0404 	mvn.w	r4, r4
   b984c:	3c1f      	subs	r4, #31
   b984e:	da1c      	bge.n	b988a <__adddf3+0x1d2>
   b9850:	340c      	adds	r4, #12
   b9852:	dc0e      	bgt.n	b9872 <__adddf3+0x1ba>
   b9854:	f104 0414 	add.w	r4, r4, #20
   b9858:	f1c4 0220 	rsb	r2, r4, #32
   b985c:	fa20 f004 	lsr.w	r0, r0, r4
   b9860:	fa01 f302 	lsl.w	r3, r1, r2
   b9864:	ea40 0003 	orr.w	r0, r0, r3
   b9868:	fa21 f304 	lsr.w	r3, r1, r4
   b986c:	ea45 0103 	orr.w	r1, r5, r3
   b9870:	bd30      	pop	{r4, r5, pc}
   b9872:	f1c4 040c 	rsb	r4, r4, #12
   b9876:	f1c4 0220 	rsb	r2, r4, #32
   b987a:	fa20 f002 	lsr.w	r0, r0, r2
   b987e:	fa01 f304 	lsl.w	r3, r1, r4
   b9882:	ea40 0003 	orr.w	r0, r0, r3
   b9886:	4629      	mov	r1, r5
   b9888:	bd30      	pop	{r4, r5, pc}
   b988a:	fa21 f004 	lsr.w	r0, r1, r4
   b988e:	4629      	mov	r1, r5
   b9890:	bd30      	pop	{r4, r5, pc}
   b9892:	f094 0f00 	teq	r4, #0
   b9896:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b989a:	bf06      	itte	eq
   b989c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b98a0:	3401      	addeq	r4, #1
   b98a2:	3d01      	subne	r5, #1
   b98a4:	e74e      	b.n	b9744 <__adddf3+0x8c>
   b98a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b98aa:	bf18      	it	ne
   b98ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b98b0:	d029      	beq.n	b9906 <__adddf3+0x24e>
   b98b2:	ea94 0f05 	teq	r4, r5
   b98b6:	bf08      	it	eq
   b98b8:	ea90 0f02 	teqeq	r0, r2
   b98bc:	d005      	beq.n	b98ca <__adddf3+0x212>
   b98be:	ea54 0c00 	orrs.w	ip, r4, r0
   b98c2:	bf04      	itt	eq
   b98c4:	4619      	moveq	r1, r3
   b98c6:	4610      	moveq	r0, r2
   b98c8:	bd30      	pop	{r4, r5, pc}
   b98ca:	ea91 0f03 	teq	r1, r3
   b98ce:	bf1e      	ittt	ne
   b98d0:	2100      	movne	r1, #0
   b98d2:	2000      	movne	r0, #0
   b98d4:	bd30      	popne	{r4, r5, pc}
   b98d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b98da:	d105      	bne.n	b98e8 <__adddf3+0x230>
   b98dc:	0040      	lsls	r0, r0, #1
   b98de:	4149      	adcs	r1, r1
   b98e0:	bf28      	it	cs
   b98e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b98e6:	bd30      	pop	{r4, r5, pc}
   b98e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b98ec:	bf3c      	itt	cc
   b98ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b98f2:	bd30      	popcc	{r4, r5, pc}
   b98f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b98f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b98fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9900:	f04f 0000 	mov.w	r0, #0
   b9904:	bd30      	pop	{r4, r5, pc}
   b9906:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b990a:	bf1a      	itte	ne
   b990c:	4619      	movne	r1, r3
   b990e:	4610      	movne	r0, r2
   b9910:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9914:	bf1c      	itt	ne
   b9916:	460b      	movne	r3, r1
   b9918:	4602      	movne	r2, r0
   b991a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b991e:	bf06      	itte	eq
   b9920:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9924:	ea91 0f03 	teqeq	r1, r3
   b9928:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b992c:	bd30      	pop	{r4, r5, pc}
   b992e:	bf00      	nop

000b9930 <__aeabi_ui2d>:
   b9930:	f090 0f00 	teq	r0, #0
   b9934:	bf04      	itt	eq
   b9936:	2100      	moveq	r1, #0
   b9938:	4770      	bxeq	lr
   b993a:	b530      	push	{r4, r5, lr}
   b993c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9940:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9944:	f04f 0500 	mov.w	r5, #0
   b9948:	f04f 0100 	mov.w	r1, #0
   b994c:	e750      	b.n	b97f0 <__adddf3+0x138>
   b994e:	bf00      	nop

000b9950 <__aeabi_i2d>:
   b9950:	f090 0f00 	teq	r0, #0
   b9954:	bf04      	itt	eq
   b9956:	2100      	moveq	r1, #0
   b9958:	4770      	bxeq	lr
   b995a:	b530      	push	{r4, r5, lr}
   b995c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9960:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9964:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9968:	bf48      	it	mi
   b996a:	4240      	negmi	r0, r0
   b996c:	f04f 0100 	mov.w	r1, #0
   b9970:	e73e      	b.n	b97f0 <__adddf3+0x138>
   b9972:	bf00      	nop

000b9974 <__aeabi_f2d>:
   b9974:	0042      	lsls	r2, r0, #1
   b9976:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b997a:	ea4f 0131 	mov.w	r1, r1, rrx
   b997e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9982:	bf1f      	itttt	ne
   b9984:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9988:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b998c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9990:	4770      	bxne	lr
   b9992:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9996:	bf08      	it	eq
   b9998:	4770      	bxeq	lr
   b999a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b999e:	bf04      	itt	eq
   b99a0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b99a4:	4770      	bxeq	lr
   b99a6:	b530      	push	{r4, r5, lr}
   b99a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b99ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b99b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b99b4:	e71c      	b.n	b97f0 <__adddf3+0x138>
   b99b6:	bf00      	nop

000b99b8 <__aeabi_ul2d>:
   b99b8:	ea50 0201 	orrs.w	r2, r0, r1
   b99bc:	bf08      	it	eq
   b99be:	4770      	bxeq	lr
   b99c0:	b530      	push	{r4, r5, lr}
   b99c2:	f04f 0500 	mov.w	r5, #0
   b99c6:	e00a      	b.n	b99de <__aeabi_l2d+0x16>

000b99c8 <__aeabi_l2d>:
   b99c8:	ea50 0201 	orrs.w	r2, r0, r1
   b99cc:	bf08      	it	eq
   b99ce:	4770      	bxeq	lr
   b99d0:	b530      	push	{r4, r5, lr}
   b99d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b99d6:	d502      	bpl.n	b99de <__aeabi_l2d+0x16>
   b99d8:	4240      	negs	r0, r0
   b99da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b99de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b99e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b99e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b99ea:	f43f aed8 	beq.w	b979e <__adddf3+0xe6>
   b99ee:	f04f 0203 	mov.w	r2, #3
   b99f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b99f6:	bf18      	it	ne
   b99f8:	3203      	addne	r2, #3
   b99fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b99fe:	bf18      	it	ne
   b9a00:	3203      	addne	r2, #3
   b9a02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9a06:	f1c2 0320 	rsb	r3, r2, #32
   b9a0a:	fa00 fc03 	lsl.w	ip, r0, r3
   b9a0e:	fa20 f002 	lsr.w	r0, r0, r2
   b9a12:	fa01 fe03 	lsl.w	lr, r1, r3
   b9a16:	ea40 000e 	orr.w	r0, r0, lr
   b9a1a:	fa21 f102 	lsr.w	r1, r1, r2
   b9a1e:	4414      	add	r4, r2
   b9a20:	e6bd      	b.n	b979e <__adddf3+0xe6>
   b9a22:	bf00      	nop

000b9a24 <__aeabi_dmul>:
   b9a24:	b570      	push	{r4, r5, r6, lr}
   b9a26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9a2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9a2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9a32:	bf1d      	ittte	ne
   b9a34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9a38:	ea94 0f0c 	teqne	r4, ip
   b9a3c:	ea95 0f0c 	teqne	r5, ip
   b9a40:	f000 f8de 	bleq	b9c00 <__aeabi_dmul+0x1dc>
   b9a44:	442c      	add	r4, r5
   b9a46:	ea81 0603 	eor.w	r6, r1, r3
   b9a4a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9a4e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9a52:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9a56:	bf18      	it	ne
   b9a58:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9a5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9a64:	d038      	beq.n	b9ad8 <__aeabi_dmul+0xb4>
   b9a66:	fba0 ce02 	umull	ip, lr, r0, r2
   b9a6a:	f04f 0500 	mov.w	r5, #0
   b9a6e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9a72:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9a76:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9a7a:	f04f 0600 	mov.w	r6, #0
   b9a7e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9a82:	f09c 0f00 	teq	ip, #0
   b9a86:	bf18      	it	ne
   b9a88:	f04e 0e01 	orrne.w	lr, lr, #1
   b9a8c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9a90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9a94:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9a98:	d204      	bcs.n	b9aa4 <__aeabi_dmul+0x80>
   b9a9a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9a9e:	416d      	adcs	r5, r5
   b9aa0:	eb46 0606 	adc.w	r6, r6, r6
   b9aa4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9aa8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9aac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9ab0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9ab4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9ab8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9abc:	bf88      	it	hi
   b9abe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9ac2:	d81e      	bhi.n	b9b02 <__aeabi_dmul+0xde>
   b9ac4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9ac8:	bf08      	it	eq
   b9aca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9ace:	f150 0000 	adcs.w	r0, r0, #0
   b9ad2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9ad6:	bd70      	pop	{r4, r5, r6, pc}
   b9ad8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9adc:	ea46 0101 	orr.w	r1, r6, r1
   b9ae0:	ea40 0002 	orr.w	r0, r0, r2
   b9ae4:	ea81 0103 	eor.w	r1, r1, r3
   b9ae8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9aec:	bfc2      	ittt	gt
   b9aee:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9af2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9af6:	bd70      	popgt	{r4, r5, r6, pc}
   b9af8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9afc:	f04f 0e00 	mov.w	lr, #0
   b9b00:	3c01      	subs	r4, #1
   b9b02:	f300 80ab 	bgt.w	b9c5c <__aeabi_dmul+0x238>
   b9b06:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9b0a:	bfde      	ittt	le
   b9b0c:	2000      	movle	r0, #0
   b9b0e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9b12:	bd70      	pople	{r4, r5, r6, pc}
   b9b14:	f1c4 0400 	rsb	r4, r4, #0
   b9b18:	3c20      	subs	r4, #32
   b9b1a:	da35      	bge.n	b9b88 <__aeabi_dmul+0x164>
   b9b1c:	340c      	adds	r4, #12
   b9b1e:	dc1b      	bgt.n	b9b58 <__aeabi_dmul+0x134>
   b9b20:	f104 0414 	add.w	r4, r4, #20
   b9b24:	f1c4 0520 	rsb	r5, r4, #32
   b9b28:	fa00 f305 	lsl.w	r3, r0, r5
   b9b2c:	fa20 f004 	lsr.w	r0, r0, r4
   b9b30:	fa01 f205 	lsl.w	r2, r1, r5
   b9b34:	ea40 0002 	orr.w	r0, r0, r2
   b9b38:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9b3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9b40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9b44:	fa21 f604 	lsr.w	r6, r1, r4
   b9b48:	eb42 0106 	adc.w	r1, r2, r6
   b9b4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9b50:	bf08      	it	eq
   b9b52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9b56:	bd70      	pop	{r4, r5, r6, pc}
   b9b58:	f1c4 040c 	rsb	r4, r4, #12
   b9b5c:	f1c4 0520 	rsb	r5, r4, #32
   b9b60:	fa00 f304 	lsl.w	r3, r0, r4
   b9b64:	fa20 f005 	lsr.w	r0, r0, r5
   b9b68:	fa01 f204 	lsl.w	r2, r1, r4
   b9b6c:	ea40 0002 	orr.w	r0, r0, r2
   b9b70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9b74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9b78:	f141 0100 	adc.w	r1, r1, #0
   b9b7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9b80:	bf08      	it	eq
   b9b82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9b86:	bd70      	pop	{r4, r5, r6, pc}
   b9b88:	f1c4 0520 	rsb	r5, r4, #32
   b9b8c:	fa00 f205 	lsl.w	r2, r0, r5
   b9b90:	ea4e 0e02 	orr.w	lr, lr, r2
   b9b94:	fa20 f304 	lsr.w	r3, r0, r4
   b9b98:	fa01 f205 	lsl.w	r2, r1, r5
   b9b9c:	ea43 0302 	orr.w	r3, r3, r2
   b9ba0:	fa21 f004 	lsr.w	r0, r1, r4
   b9ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9ba8:	fa21 f204 	lsr.w	r2, r1, r4
   b9bac:	ea20 0002 	bic.w	r0, r0, r2
   b9bb0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9bb8:	bf08      	it	eq
   b9bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9bbe:	bd70      	pop	{r4, r5, r6, pc}
   b9bc0:	f094 0f00 	teq	r4, #0
   b9bc4:	d10f      	bne.n	b9be6 <__aeabi_dmul+0x1c2>
   b9bc6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9bca:	0040      	lsls	r0, r0, #1
   b9bcc:	eb41 0101 	adc.w	r1, r1, r1
   b9bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9bd4:	bf08      	it	eq
   b9bd6:	3c01      	subeq	r4, #1
   b9bd8:	d0f7      	beq.n	b9bca <__aeabi_dmul+0x1a6>
   b9bda:	ea41 0106 	orr.w	r1, r1, r6
   b9bde:	f095 0f00 	teq	r5, #0
   b9be2:	bf18      	it	ne
   b9be4:	4770      	bxne	lr
   b9be6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9bea:	0052      	lsls	r2, r2, #1
   b9bec:	eb43 0303 	adc.w	r3, r3, r3
   b9bf0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9bf4:	bf08      	it	eq
   b9bf6:	3d01      	subeq	r5, #1
   b9bf8:	d0f7      	beq.n	b9bea <__aeabi_dmul+0x1c6>
   b9bfa:	ea43 0306 	orr.w	r3, r3, r6
   b9bfe:	4770      	bx	lr
   b9c00:	ea94 0f0c 	teq	r4, ip
   b9c04:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9c08:	bf18      	it	ne
   b9c0a:	ea95 0f0c 	teqne	r5, ip
   b9c0e:	d00c      	beq.n	b9c2a <__aeabi_dmul+0x206>
   b9c10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9c14:	bf18      	it	ne
   b9c16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9c1a:	d1d1      	bne.n	b9bc0 <__aeabi_dmul+0x19c>
   b9c1c:	ea81 0103 	eor.w	r1, r1, r3
   b9c20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9c24:	f04f 0000 	mov.w	r0, #0
   b9c28:	bd70      	pop	{r4, r5, r6, pc}
   b9c2a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9c2e:	bf06      	itte	eq
   b9c30:	4610      	moveq	r0, r2
   b9c32:	4619      	moveq	r1, r3
   b9c34:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9c38:	d019      	beq.n	b9c6e <__aeabi_dmul+0x24a>
   b9c3a:	ea94 0f0c 	teq	r4, ip
   b9c3e:	d102      	bne.n	b9c46 <__aeabi_dmul+0x222>
   b9c40:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9c44:	d113      	bne.n	b9c6e <__aeabi_dmul+0x24a>
   b9c46:	ea95 0f0c 	teq	r5, ip
   b9c4a:	d105      	bne.n	b9c58 <__aeabi_dmul+0x234>
   b9c4c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9c50:	bf1c      	itt	ne
   b9c52:	4610      	movne	r0, r2
   b9c54:	4619      	movne	r1, r3
   b9c56:	d10a      	bne.n	b9c6e <__aeabi_dmul+0x24a>
   b9c58:	ea81 0103 	eor.w	r1, r1, r3
   b9c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9c60:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9c64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9c68:	f04f 0000 	mov.w	r0, #0
   b9c6c:	bd70      	pop	{r4, r5, r6, pc}
   b9c6e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9c72:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9c76:	bd70      	pop	{r4, r5, r6, pc}

000b9c78 <__aeabi_ddiv>:
   b9c78:	b570      	push	{r4, r5, r6, lr}
   b9c7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9c7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9c82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9c86:	bf1d      	ittte	ne
   b9c88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9c8c:	ea94 0f0c 	teqne	r4, ip
   b9c90:	ea95 0f0c 	teqne	r5, ip
   b9c94:	f000 f8a7 	bleq	b9de6 <__aeabi_ddiv+0x16e>
   b9c98:	eba4 0405 	sub.w	r4, r4, r5
   b9c9c:	ea81 0e03 	eor.w	lr, r1, r3
   b9ca0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9ca4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9ca8:	f000 8088 	beq.w	b9dbc <__aeabi_ddiv+0x144>
   b9cac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9cb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9cb4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9cb8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9cbc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9cc0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9cc4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9cc8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9ccc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9cd0:	429d      	cmp	r5, r3
   b9cd2:	bf08      	it	eq
   b9cd4:	4296      	cmpeq	r6, r2
   b9cd6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9cda:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9cde:	d202      	bcs.n	b9ce6 <__aeabi_ddiv+0x6e>
   b9ce0:	085b      	lsrs	r3, r3, #1
   b9ce2:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ce6:	1ab6      	subs	r6, r6, r2
   b9ce8:	eb65 0503 	sbc.w	r5, r5, r3
   b9cec:	085b      	lsrs	r3, r3, #1
   b9cee:	ea4f 0232 	mov.w	r2, r2, rrx
   b9cf2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9cf6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9cfa:	ebb6 0e02 	subs.w	lr, r6, r2
   b9cfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d02:	bf22      	ittt	cs
   b9d04:	1ab6      	subcs	r6, r6, r2
   b9d06:	4675      	movcs	r5, lr
   b9d08:	ea40 000c 	orrcs.w	r0, r0, ip
   b9d0c:	085b      	lsrs	r3, r3, #1
   b9d0e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d12:	ebb6 0e02 	subs.w	lr, r6, r2
   b9d16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d1a:	bf22      	ittt	cs
   b9d1c:	1ab6      	subcs	r6, r6, r2
   b9d1e:	4675      	movcs	r5, lr
   b9d20:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9d24:	085b      	lsrs	r3, r3, #1
   b9d26:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d2a:	ebb6 0e02 	subs.w	lr, r6, r2
   b9d2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d32:	bf22      	ittt	cs
   b9d34:	1ab6      	subcs	r6, r6, r2
   b9d36:	4675      	movcs	r5, lr
   b9d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9d3c:	085b      	lsrs	r3, r3, #1
   b9d3e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9d42:	ebb6 0e02 	subs.w	lr, r6, r2
   b9d46:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9d4a:	bf22      	ittt	cs
   b9d4c:	1ab6      	subcs	r6, r6, r2
   b9d4e:	4675      	movcs	r5, lr
   b9d50:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9d54:	ea55 0e06 	orrs.w	lr, r5, r6
   b9d58:	d018      	beq.n	b9d8c <__aeabi_ddiv+0x114>
   b9d5a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9d5e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9d62:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9d66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9d6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9d6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9d72:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9d76:	d1c0      	bne.n	b9cfa <__aeabi_ddiv+0x82>
   b9d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9d7c:	d10b      	bne.n	b9d96 <__aeabi_ddiv+0x11e>
   b9d7e:	ea41 0100 	orr.w	r1, r1, r0
   b9d82:	f04f 0000 	mov.w	r0, #0
   b9d86:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9d8a:	e7b6      	b.n	b9cfa <__aeabi_ddiv+0x82>
   b9d8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9d90:	bf04      	itt	eq
   b9d92:	4301      	orreq	r1, r0
   b9d94:	2000      	moveq	r0, #0
   b9d96:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9d9a:	bf88      	it	hi
   b9d9c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9da0:	f63f aeaf 	bhi.w	b9b02 <__aeabi_dmul+0xde>
   b9da4:	ebb5 0c03 	subs.w	ip, r5, r3
   b9da8:	bf04      	itt	eq
   b9daa:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9dae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9db2:	f150 0000 	adcs.w	r0, r0, #0
   b9db6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9dba:	bd70      	pop	{r4, r5, r6, pc}
   b9dbc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9dc0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9dc4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9dc8:	bfc2      	ittt	gt
   b9dca:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9dce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9dd2:	bd70      	popgt	{r4, r5, r6, pc}
   b9dd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9dd8:	f04f 0e00 	mov.w	lr, #0
   b9ddc:	3c01      	subs	r4, #1
   b9dde:	e690      	b.n	b9b02 <__aeabi_dmul+0xde>
   b9de0:	ea45 0e06 	orr.w	lr, r5, r6
   b9de4:	e68d      	b.n	b9b02 <__aeabi_dmul+0xde>
   b9de6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9dea:	ea94 0f0c 	teq	r4, ip
   b9dee:	bf08      	it	eq
   b9df0:	ea95 0f0c 	teqeq	r5, ip
   b9df4:	f43f af3b 	beq.w	b9c6e <__aeabi_dmul+0x24a>
   b9df8:	ea94 0f0c 	teq	r4, ip
   b9dfc:	d10a      	bne.n	b9e14 <__aeabi_ddiv+0x19c>
   b9dfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9e02:	f47f af34 	bne.w	b9c6e <__aeabi_dmul+0x24a>
   b9e06:	ea95 0f0c 	teq	r5, ip
   b9e0a:	f47f af25 	bne.w	b9c58 <__aeabi_dmul+0x234>
   b9e0e:	4610      	mov	r0, r2
   b9e10:	4619      	mov	r1, r3
   b9e12:	e72c      	b.n	b9c6e <__aeabi_dmul+0x24a>
   b9e14:	ea95 0f0c 	teq	r5, ip
   b9e18:	d106      	bne.n	b9e28 <__aeabi_ddiv+0x1b0>
   b9e1a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9e1e:	f43f aefd 	beq.w	b9c1c <__aeabi_dmul+0x1f8>
   b9e22:	4610      	mov	r0, r2
   b9e24:	4619      	mov	r1, r3
   b9e26:	e722      	b.n	b9c6e <__aeabi_dmul+0x24a>
   b9e28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9e2c:	bf18      	it	ne
   b9e2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e32:	f47f aec5 	bne.w	b9bc0 <__aeabi_dmul+0x19c>
   b9e36:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9e3a:	f47f af0d 	bne.w	b9c58 <__aeabi_dmul+0x234>
   b9e3e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b9e42:	f47f aeeb 	bne.w	b9c1c <__aeabi_dmul+0x1f8>
   b9e46:	e712      	b.n	b9c6e <__aeabi_dmul+0x24a>

000b9e48 <__gedf2>:
   b9e48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9e4c:	e006      	b.n	b9e5c <__cmpdf2+0x4>
   b9e4e:	bf00      	nop

000b9e50 <__ledf2>:
   b9e50:	f04f 0c01 	mov.w	ip, #1
   b9e54:	e002      	b.n	b9e5c <__cmpdf2+0x4>
   b9e56:	bf00      	nop

000b9e58 <__cmpdf2>:
   b9e58:	f04f 0c01 	mov.w	ip, #1
   b9e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9e60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9e68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9e6c:	bf18      	it	ne
   b9e6e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9e72:	d01b      	beq.n	b9eac <__cmpdf2+0x54>
   b9e74:	b001      	add	sp, #4
   b9e76:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9e7a:	bf0c      	ite	eq
   b9e7c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9e80:	ea91 0f03 	teqne	r1, r3
   b9e84:	bf02      	ittt	eq
   b9e86:	ea90 0f02 	teqeq	r0, r2
   b9e8a:	2000      	moveq	r0, #0
   b9e8c:	4770      	bxeq	lr
   b9e8e:	f110 0f00 	cmn.w	r0, #0
   b9e92:	ea91 0f03 	teq	r1, r3
   b9e96:	bf58      	it	pl
   b9e98:	4299      	cmppl	r1, r3
   b9e9a:	bf08      	it	eq
   b9e9c:	4290      	cmpeq	r0, r2
   b9e9e:	bf2c      	ite	cs
   b9ea0:	17d8      	asrcs	r0, r3, #31
   b9ea2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9ea6:	f040 0001 	orr.w	r0, r0, #1
   b9eaa:	4770      	bx	lr
   b9eac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9eb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9eb4:	d102      	bne.n	b9ebc <__cmpdf2+0x64>
   b9eb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9eba:	d107      	bne.n	b9ecc <__cmpdf2+0x74>
   b9ebc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9ec0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9ec4:	d1d6      	bne.n	b9e74 <__cmpdf2+0x1c>
   b9ec6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9eca:	d0d3      	beq.n	b9e74 <__cmpdf2+0x1c>
   b9ecc:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9ed0:	4770      	bx	lr
   b9ed2:	bf00      	nop

000b9ed4 <__aeabi_cdrcmple>:
   b9ed4:	4684      	mov	ip, r0
   b9ed6:	4610      	mov	r0, r2
   b9ed8:	4662      	mov	r2, ip
   b9eda:	468c      	mov	ip, r1
   b9edc:	4619      	mov	r1, r3
   b9ede:	4663      	mov	r3, ip
   b9ee0:	e000      	b.n	b9ee4 <__aeabi_cdcmpeq>
   b9ee2:	bf00      	nop

000b9ee4 <__aeabi_cdcmpeq>:
   b9ee4:	b501      	push	{r0, lr}
   b9ee6:	f7ff ffb7 	bl	b9e58 <__cmpdf2>
   b9eea:	2800      	cmp	r0, #0
   b9eec:	bf48      	it	mi
   b9eee:	f110 0f00 	cmnmi.w	r0, #0
   b9ef2:	bd01      	pop	{r0, pc}

000b9ef4 <__aeabi_dcmpeq>:
   b9ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9ef8:	f7ff fff4 	bl	b9ee4 <__aeabi_cdcmpeq>
   b9efc:	bf0c      	ite	eq
   b9efe:	2001      	moveq	r0, #1
   b9f00:	2000      	movne	r0, #0
   b9f02:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f06:	bf00      	nop

000b9f08 <__aeabi_dcmplt>:
   b9f08:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f0c:	f7ff ffea 	bl	b9ee4 <__aeabi_cdcmpeq>
   b9f10:	bf34      	ite	cc
   b9f12:	2001      	movcc	r0, #1
   b9f14:	2000      	movcs	r0, #0
   b9f16:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f1a:	bf00      	nop

000b9f1c <__aeabi_dcmple>:
   b9f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f20:	f7ff ffe0 	bl	b9ee4 <__aeabi_cdcmpeq>
   b9f24:	bf94      	ite	ls
   b9f26:	2001      	movls	r0, #1
   b9f28:	2000      	movhi	r0, #0
   b9f2a:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f2e:	bf00      	nop

000b9f30 <__aeabi_dcmpge>:
   b9f30:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f34:	f7ff ffce 	bl	b9ed4 <__aeabi_cdrcmple>
   b9f38:	bf94      	ite	ls
   b9f3a:	2001      	movls	r0, #1
   b9f3c:	2000      	movhi	r0, #0
   b9f3e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f42:	bf00      	nop

000b9f44 <__aeabi_dcmpgt>:
   b9f44:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9f48:	f7ff ffc4 	bl	b9ed4 <__aeabi_cdrcmple>
   b9f4c:	bf34      	ite	cc
   b9f4e:	2001      	movcc	r0, #1
   b9f50:	2000      	movcs	r0, #0
   b9f52:	f85d fb08 	ldr.w	pc, [sp], #8
   b9f56:	bf00      	nop

000b9f58 <__aeabi_d2uiz>:
   b9f58:	004a      	lsls	r2, r1, #1
   b9f5a:	d211      	bcs.n	b9f80 <__aeabi_d2uiz+0x28>
   b9f5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9f60:	d211      	bcs.n	b9f86 <__aeabi_d2uiz+0x2e>
   b9f62:	d50d      	bpl.n	b9f80 <__aeabi_d2uiz+0x28>
   b9f64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9f68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9f6c:	d40e      	bmi.n	b9f8c <__aeabi_d2uiz+0x34>
   b9f6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9f76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9f7a:	fa23 f002 	lsr.w	r0, r3, r2
   b9f7e:	4770      	bx	lr
   b9f80:	f04f 0000 	mov.w	r0, #0
   b9f84:	4770      	bx	lr
   b9f86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9f8a:	d102      	bne.n	b9f92 <__aeabi_d2uiz+0x3a>
   b9f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9f90:	4770      	bx	lr
   b9f92:	f04f 0000 	mov.w	r0, #0
   b9f96:	4770      	bx	lr

000b9f98 <__aeabi_d2f>:
   b9f98:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9f9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9fa0:	bf24      	itt	cs
   b9fa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9fa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9faa:	d90d      	bls.n	b9fc8 <__aeabi_d2f+0x30>
   b9fac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9fb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9fb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9fb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9fbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9fc0:	bf08      	it	eq
   b9fc2:	f020 0001 	biceq.w	r0, r0, #1
   b9fc6:	4770      	bx	lr
   b9fc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9fcc:	d121      	bne.n	ba012 <__aeabi_d2f+0x7a>
   b9fce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9fd2:	bfbc      	itt	lt
   b9fd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b9fd8:	4770      	bxlt	lr
   b9fda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9fde:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9fe2:	f1c2 0218 	rsb	r2, r2, #24
   b9fe6:	f1c2 0c20 	rsb	ip, r2, #32
   b9fea:	fa10 f30c 	lsls.w	r3, r0, ip
   b9fee:	fa20 f002 	lsr.w	r0, r0, r2
   b9ff2:	bf18      	it	ne
   b9ff4:	f040 0001 	orrne.w	r0, r0, #1
   b9ff8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9ffc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   ba000:	fa03 fc0c 	lsl.w	ip, r3, ip
   ba004:	ea40 000c 	orr.w	r0, r0, ip
   ba008:	fa23 f302 	lsr.w	r3, r3, r2
   ba00c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   ba010:	e7cc      	b.n	b9fac <__aeabi_d2f+0x14>
   ba012:	ea7f 5362 	mvns.w	r3, r2, asr #21
   ba016:	d107      	bne.n	ba028 <__aeabi_d2f+0x90>
   ba018:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   ba01c:	bf1e      	ittt	ne
   ba01e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   ba022:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   ba026:	4770      	bxne	lr
   ba028:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   ba02c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   ba030:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ba034:	4770      	bx	lr
   ba036:	bf00      	nop

000ba038 <__aeabi_d2ulz>:
   ba038:	b5d0      	push	{r4, r6, r7, lr}
   ba03a:	4b0c      	ldr	r3, [pc, #48]	; (ba06c <__aeabi_d2ulz+0x34>)
   ba03c:	2200      	movs	r2, #0
   ba03e:	4606      	mov	r6, r0
   ba040:	460f      	mov	r7, r1
   ba042:	f7ff fcef 	bl	b9a24 <__aeabi_dmul>
   ba046:	f7ff ff87 	bl	b9f58 <__aeabi_d2uiz>
   ba04a:	4604      	mov	r4, r0
   ba04c:	f7ff fc70 	bl	b9930 <__aeabi_ui2d>
   ba050:	4b07      	ldr	r3, [pc, #28]	; (ba070 <__aeabi_d2ulz+0x38>)
   ba052:	2200      	movs	r2, #0
   ba054:	f7ff fce6 	bl	b9a24 <__aeabi_dmul>
   ba058:	4602      	mov	r2, r0
   ba05a:	460b      	mov	r3, r1
   ba05c:	4630      	mov	r0, r6
   ba05e:	4639      	mov	r1, r7
   ba060:	f7ff fb28 	bl	b96b4 <__aeabi_dsub>
   ba064:	f7ff ff78 	bl	b9f58 <__aeabi_d2uiz>
   ba068:	4621      	mov	r1, r4
   ba06a:	bdd0      	pop	{r4, r6, r7, pc}
   ba06c:	3df00000 	.word	0x3df00000
   ba070:	41f00000 	.word	0x41f00000

000ba074 <atexit>:
   ba074:	2300      	movs	r3, #0
   ba076:	4601      	mov	r1, r0
   ba078:	461a      	mov	r2, r3
   ba07a:	4618      	mov	r0, r3
   ba07c:	f000 bfe6 	b.w	bb04c <__register_exitproc>

000ba080 <atof>:
   ba080:	2100      	movs	r1, #0
   ba082:	f000 beef 	b.w	bae64 <strtod>

000ba086 <atol>:
   ba086:	220a      	movs	r2, #10
   ba088:	2100      	movs	r1, #0
   ba08a:	f000 bfd5 	b.w	bb038 <strtol>

000ba08e <memcpy>:
   ba08e:	440a      	add	r2, r1
   ba090:	4291      	cmp	r1, r2
   ba092:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba096:	d100      	bne.n	ba09a <memcpy+0xc>
   ba098:	4770      	bx	lr
   ba09a:	b510      	push	{r4, lr}
   ba09c:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba0a4:	4291      	cmp	r1, r2
   ba0a6:	d1f9      	bne.n	ba09c <memcpy+0xe>
   ba0a8:	bd10      	pop	{r4, pc}

000ba0aa <memset>:
   ba0aa:	4402      	add	r2, r0
   ba0ac:	4603      	mov	r3, r0
   ba0ae:	4293      	cmp	r3, r2
   ba0b0:	d100      	bne.n	ba0b4 <memset+0xa>
   ba0b2:	4770      	bx	lr
   ba0b4:	f803 1b01 	strb.w	r1, [r3], #1
   ba0b8:	e7f9      	b.n	ba0ae <memset+0x4>
	...

000ba0bc <srand>:
   ba0bc:	b538      	push	{r3, r4, r5, lr}
   ba0be:	4b10      	ldr	r3, [pc, #64]	; (ba100 <srand+0x44>)
   ba0c0:	681d      	ldr	r5, [r3, #0]
   ba0c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba0c4:	4604      	mov	r4, r0
   ba0c6:	b9b3      	cbnz	r3, ba0f6 <srand+0x3a>
   ba0c8:	2018      	movs	r0, #24
   ba0ca:	f7fd f949 	bl	b7360 <malloc>
   ba0ce:	4602      	mov	r2, r0
   ba0d0:	63a8      	str	r0, [r5, #56]	; 0x38
   ba0d2:	b920      	cbnz	r0, ba0de <srand+0x22>
   ba0d4:	4b0b      	ldr	r3, [pc, #44]	; (ba104 <srand+0x48>)
   ba0d6:	480c      	ldr	r0, [pc, #48]	; (ba108 <srand+0x4c>)
   ba0d8:	2142      	movs	r1, #66	; 0x42
   ba0da:	f7fd f989 	bl	b73f0 <__assert_func>
   ba0de:	490b      	ldr	r1, [pc, #44]	; (ba10c <srand+0x50>)
   ba0e0:	4b0b      	ldr	r3, [pc, #44]	; (ba110 <srand+0x54>)
   ba0e2:	e9c0 1300 	strd	r1, r3, [r0]
   ba0e6:	4b0b      	ldr	r3, [pc, #44]	; (ba114 <srand+0x58>)
   ba0e8:	6083      	str	r3, [r0, #8]
   ba0ea:	230b      	movs	r3, #11
   ba0ec:	8183      	strh	r3, [r0, #12]
   ba0ee:	2100      	movs	r1, #0
   ba0f0:	2001      	movs	r0, #1
   ba0f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba0f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba0f8:	2200      	movs	r2, #0
   ba0fa:	611c      	str	r4, [r3, #16]
   ba0fc:	615a      	str	r2, [r3, #20]
   ba0fe:	bd38      	pop	{r3, r4, r5, pc}
   ba100:	2003df8c 	.word	0x2003df8c
   ba104:	000bce9d 	.word	0x000bce9d
   ba108:	000bceb4 	.word	0x000bceb4
   ba10c:	abcd330e 	.word	0xabcd330e
   ba110:	e66d1234 	.word	0xe66d1234
   ba114:	0005deec 	.word	0x0005deec

000ba118 <strchr>:
   ba118:	b2c9      	uxtb	r1, r1
   ba11a:	4603      	mov	r3, r0
   ba11c:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba120:	b11a      	cbz	r2, ba12a <strchr+0x12>
   ba122:	428a      	cmp	r2, r1
   ba124:	d1f9      	bne.n	ba11a <strchr+0x2>
   ba126:	4618      	mov	r0, r3
   ba128:	4770      	bx	lr
   ba12a:	2900      	cmp	r1, #0
   ba12c:	bf18      	it	ne
   ba12e:	2300      	movne	r3, #0
   ba130:	e7f9      	b.n	ba126 <strchr+0xe>

000ba132 <strcmp>:
   ba132:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba136:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba13a:	2a01      	cmp	r2, #1
   ba13c:	bf28      	it	cs
   ba13e:	429a      	cmpcs	r2, r3
   ba140:	d0f7      	beq.n	ba132 <strcmp>
   ba142:	1ad0      	subs	r0, r2, r3
   ba144:	4770      	bx	lr

000ba146 <strcpy>:
   ba146:	4603      	mov	r3, r0
   ba148:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba14c:	f803 2b01 	strb.w	r2, [r3], #1
   ba150:	2a00      	cmp	r2, #0
   ba152:	d1f9      	bne.n	ba148 <strcpy+0x2>
   ba154:	4770      	bx	lr
	...

000ba158 <strdup>:
   ba158:	4b02      	ldr	r3, [pc, #8]	; (ba164 <strdup+0xc>)
   ba15a:	4601      	mov	r1, r0
   ba15c:	6818      	ldr	r0, [r3, #0]
   ba15e:	f000 b803 	b.w	ba168 <_strdup_r>
   ba162:	bf00      	nop
   ba164:	2003df8c 	.word	0x2003df8c

000ba168 <_strdup_r>:
   ba168:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba16a:	4604      	mov	r4, r0
   ba16c:	4608      	mov	r0, r1
   ba16e:	460d      	mov	r5, r1
   ba170:	f000 f80f 	bl	ba192 <strlen>
   ba174:	1c42      	adds	r2, r0, #1
   ba176:	4611      	mov	r1, r2
   ba178:	4620      	mov	r0, r4
   ba17a:	9201      	str	r2, [sp, #4]
   ba17c:	f7fd f928 	bl	b73d0 <_malloc_r>
   ba180:	4604      	mov	r4, r0
   ba182:	b118      	cbz	r0, ba18c <_strdup_r+0x24>
   ba184:	9a01      	ldr	r2, [sp, #4]
   ba186:	4629      	mov	r1, r5
   ba188:	f7ff ff81 	bl	ba08e <memcpy>
   ba18c:	4620      	mov	r0, r4
   ba18e:	b003      	add	sp, #12
   ba190:	bd30      	pop	{r4, r5, pc}

000ba192 <strlen>:
   ba192:	4603      	mov	r3, r0
   ba194:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba198:	2a00      	cmp	r2, #0
   ba19a:	d1fb      	bne.n	ba194 <strlen+0x2>
   ba19c:	1a18      	subs	r0, r3, r0
   ba19e:	3801      	subs	r0, #1
   ba1a0:	4770      	bx	lr

000ba1a2 <strncmp>:
   ba1a2:	b510      	push	{r4, lr}
   ba1a4:	b17a      	cbz	r2, ba1c6 <strncmp+0x24>
   ba1a6:	4603      	mov	r3, r0
   ba1a8:	3901      	subs	r1, #1
   ba1aa:	1884      	adds	r4, r0, r2
   ba1ac:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba1b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba1b4:	4290      	cmp	r0, r2
   ba1b6:	d101      	bne.n	ba1bc <strncmp+0x1a>
   ba1b8:	42a3      	cmp	r3, r4
   ba1ba:	d101      	bne.n	ba1c0 <strncmp+0x1e>
   ba1bc:	1a80      	subs	r0, r0, r2
   ba1be:	bd10      	pop	{r4, pc}
   ba1c0:	2800      	cmp	r0, #0
   ba1c2:	d1f3      	bne.n	ba1ac <strncmp+0xa>
   ba1c4:	e7fa      	b.n	ba1bc <strncmp+0x1a>
   ba1c6:	4610      	mov	r0, r2
   ba1c8:	e7f9      	b.n	ba1be <strncmp+0x1c>

000ba1ca <strncpy>:
   ba1ca:	b510      	push	{r4, lr}
   ba1cc:	3901      	subs	r1, #1
   ba1ce:	4603      	mov	r3, r0
   ba1d0:	b132      	cbz	r2, ba1e0 <strncpy+0x16>
   ba1d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba1d6:	f803 4b01 	strb.w	r4, [r3], #1
   ba1da:	3a01      	subs	r2, #1
   ba1dc:	2c00      	cmp	r4, #0
   ba1de:	d1f7      	bne.n	ba1d0 <strncpy+0x6>
   ba1e0:	441a      	add	r2, r3
   ba1e2:	2100      	movs	r1, #0
   ba1e4:	4293      	cmp	r3, r2
   ba1e6:	d100      	bne.n	ba1ea <strncpy+0x20>
   ba1e8:	bd10      	pop	{r4, pc}
   ba1ea:	f803 1b01 	strb.w	r1, [r3], #1
   ba1ee:	e7f9      	b.n	ba1e4 <strncpy+0x1a>

000ba1f0 <strstr>:
   ba1f0:	780a      	ldrb	r2, [r1, #0]
   ba1f2:	b570      	push	{r4, r5, r6, lr}
   ba1f4:	b96a      	cbnz	r2, ba212 <strstr+0x22>
   ba1f6:	bd70      	pop	{r4, r5, r6, pc}
   ba1f8:	429a      	cmp	r2, r3
   ba1fa:	d109      	bne.n	ba210 <strstr+0x20>
   ba1fc:	460c      	mov	r4, r1
   ba1fe:	4605      	mov	r5, r0
   ba200:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba204:	2b00      	cmp	r3, #0
   ba206:	d0f6      	beq.n	ba1f6 <strstr+0x6>
   ba208:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba20c:	429e      	cmp	r6, r3
   ba20e:	d0f7      	beq.n	ba200 <strstr+0x10>
   ba210:	3001      	adds	r0, #1
   ba212:	7803      	ldrb	r3, [r0, #0]
   ba214:	2b00      	cmp	r3, #0
   ba216:	d1ef      	bne.n	ba1f8 <strstr+0x8>
   ba218:	4618      	mov	r0, r3
   ba21a:	e7ec      	b.n	ba1f6 <strstr+0x6>

000ba21c <sulp>:
   ba21c:	b570      	push	{r4, r5, r6, lr}
   ba21e:	4604      	mov	r4, r0
   ba220:	460d      	mov	r5, r1
   ba222:	ec45 4b10 	vmov	d0, r4, r5
   ba226:	4616      	mov	r6, r2
   ba228:	f001 fe6a 	bl	bbf00 <__ulp>
   ba22c:	ec51 0b10 	vmov	r0, r1, d0
   ba230:	b17e      	cbz	r6, ba252 <sulp+0x36>
   ba232:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba236:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba23a:	2b00      	cmp	r3, #0
   ba23c:	dd09      	ble.n	ba252 <sulp+0x36>
   ba23e:	051b      	lsls	r3, r3, #20
   ba240:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba244:	2400      	movs	r4, #0
   ba246:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba24a:	4622      	mov	r2, r4
   ba24c:	462b      	mov	r3, r5
   ba24e:	f7ff fbe9 	bl	b9a24 <__aeabi_dmul>
   ba252:	bd70      	pop	{r4, r5, r6, pc}
   ba254:	0000      	movs	r0, r0
	...

000ba258 <_strtod_l>:
   ba258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba25c:	ed2d 8b02 	vpush	{d8}
   ba260:	b09d      	sub	sp, #116	; 0x74
   ba262:	461f      	mov	r7, r3
   ba264:	2300      	movs	r3, #0
   ba266:	9318      	str	r3, [sp, #96]	; 0x60
   ba268:	4ba2      	ldr	r3, [pc, #648]	; (ba4f4 <_strtod_l+0x29c>)
   ba26a:	9213      	str	r2, [sp, #76]	; 0x4c
   ba26c:	681b      	ldr	r3, [r3, #0]
   ba26e:	9305      	str	r3, [sp, #20]
   ba270:	4604      	mov	r4, r0
   ba272:	4618      	mov	r0, r3
   ba274:	4688      	mov	r8, r1
   ba276:	f7ff ff8c 	bl	ba192 <strlen>
   ba27a:	f04f 0a00 	mov.w	sl, #0
   ba27e:	4605      	mov	r5, r0
   ba280:	f04f 0b00 	mov.w	fp, #0
   ba284:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba28a:	781a      	ldrb	r2, [r3, #0]
   ba28c:	2a2b      	cmp	r2, #43	; 0x2b
   ba28e:	d04e      	beq.n	ba32e <_strtod_l+0xd6>
   ba290:	d83b      	bhi.n	ba30a <_strtod_l+0xb2>
   ba292:	2a0d      	cmp	r2, #13
   ba294:	d834      	bhi.n	ba300 <_strtod_l+0xa8>
   ba296:	2a08      	cmp	r2, #8
   ba298:	d834      	bhi.n	ba304 <_strtod_l+0xac>
   ba29a:	2a00      	cmp	r2, #0
   ba29c:	d03e      	beq.n	ba31c <_strtod_l+0xc4>
   ba29e:	2300      	movs	r3, #0
   ba2a0:	930a      	str	r3, [sp, #40]	; 0x28
   ba2a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba2a4:	7833      	ldrb	r3, [r6, #0]
   ba2a6:	2b30      	cmp	r3, #48	; 0x30
   ba2a8:	f040 80b0 	bne.w	ba40c <_strtod_l+0x1b4>
   ba2ac:	7873      	ldrb	r3, [r6, #1]
   ba2ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba2b2:	2b58      	cmp	r3, #88	; 0x58
   ba2b4:	d168      	bne.n	ba388 <_strtod_l+0x130>
   ba2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba2b8:	9301      	str	r3, [sp, #4]
   ba2ba:	ab18      	add	r3, sp, #96	; 0x60
   ba2bc:	9702      	str	r7, [sp, #8]
   ba2be:	9300      	str	r3, [sp, #0]
   ba2c0:	4a8d      	ldr	r2, [pc, #564]	; (ba4f8 <_strtod_l+0x2a0>)
   ba2c2:	ab19      	add	r3, sp, #100	; 0x64
   ba2c4:	a917      	add	r1, sp, #92	; 0x5c
   ba2c6:	4620      	mov	r0, r4
   ba2c8:	f000 ff8a 	bl	bb1e0 <__gethex>
   ba2cc:	f010 0707 	ands.w	r7, r0, #7
   ba2d0:	4605      	mov	r5, r0
   ba2d2:	d005      	beq.n	ba2e0 <_strtod_l+0x88>
   ba2d4:	2f06      	cmp	r7, #6
   ba2d6:	d12c      	bne.n	ba332 <_strtod_l+0xda>
   ba2d8:	3601      	adds	r6, #1
   ba2da:	2300      	movs	r3, #0
   ba2dc:	9617      	str	r6, [sp, #92]	; 0x5c
   ba2de:	930a      	str	r3, [sp, #40]	; 0x28
   ba2e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba2e2:	2b00      	cmp	r3, #0
   ba2e4:	f040 8590 	bne.w	bae08 <_strtod_l+0xbb0>
   ba2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba2ea:	b1eb      	cbz	r3, ba328 <_strtod_l+0xd0>
   ba2ec:	4652      	mov	r2, sl
   ba2ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba2f2:	ec43 2b10 	vmov	d0, r2, r3
   ba2f6:	b01d      	add	sp, #116	; 0x74
   ba2f8:	ecbd 8b02 	vpop	{d8}
   ba2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba300:	2a20      	cmp	r2, #32
   ba302:	d1cc      	bne.n	ba29e <_strtod_l+0x46>
   ba304:	3301      	adds	r3, #1
   ba306:	9317      	str	r3, [sp, #92]	; 0x5c
   ba308:	e7be      	b.n	ba288 <_strtod_l+0x30>
   ba30a:	2a2d      	cmp	r2, #45	; 0x2d
   ba30c:	d1c7      	bne.n	ba29e <_strtod_l+0x46>
   ba30e:	2201      	movs	r2, #1
   ba310:	920a      	str	r2, [sp, #40]	; 0x28
   ba312:	1c5a      	adds	r2, r3, #1
   ba314:	9217      	str	r2, [sp, #92]	; 0x5c
   ba316:	785b      	ldrb	r3, [r3, #1]
   ba318:	2b00      	cmp	r3, #0
   ba31a:	d1c2      	bne.n	ba2a2 <_strtod_l+0x4a>
   ba31c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba31e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba322:	2b00      	cmp	r3, #0
   ba324:	f040 856e 	bne.w	bae04 <_strtod_l+0xbac>
   ba328:	4652      	mov	r2, sl
   ba32a:	465b      	mov	r3, fp
   ba32c:	e7e1      	b.n	ba2f2 <_strtod_l+0x9a>
   ba32e:	2200      	movs	r2, #0
   ba330:	e7ee      	b.n	ba310 <_strtod_l+0xb8>
   ba332:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba334:	b13a      	cbz	r2, ba346 <_strtod_l+0xee>
   ba336:	2135      	movs	r1, #53	; 0x35
   ba338:	a81a      	add	r0, sp, #104	; 0x68
   ba33a:	f001 feec 	bl	bc116 <__copybits>
   ba33e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba340:	4620      	mov	r0, r4
   ba342:	f001 faab 	bl	bb89c <_Bfree>
   ba346:	3f01      	subs	r7, #1
   ba348:	2f04      	cmp	r7, #4
   ba34a:	d806      	bhi.n	ba35a <_strtod_l+0x102>
   ba34c:	e8df f007 	tbb	[pc, r7]
   ba350:	1714030a 	.word	0x1714030a
   ba354:	0a          	.byte	0x0a
   ba355:	00          	.byte	0x00
   ba356:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba35a:	0728      	lsls	r0, r5, #28
   ba35c:	d5c0      	bpl.n	ba2e0 <_strtod_l+0x88>
   ba35e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba362:	e7bd      	b.n	ba2e0 <_strtod_l+0x88>
   ba364:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba368:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba36a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba36e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba372:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba376:	e7f0      	b.n	ba35a <_strtod_l+0x102>
   ba378:	f8df b180 	ldr.w	fp, [pc, #384]	; ba4fc <_strtod_l+0x2a4>
   ba37c:	e7ed      	b.n	ba35a <_strtod_l+0x102>
   ba37e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba382:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba386:	e7e8      	b.n	ba35a <_strtod_l+0x102>
   ba388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba38a:	1c5a      	adds	r2, r3, #1
   ba38c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba38e:	785b      	ldrb	r3, [r3, #1]
   ba390:	2b30      	cmp	r3, #48	; 0x30
   ba392:	d0f9      	beq.n	ba388 <_strtod_l+0x130>
   ba394:	2b00      	cmp	r3, #0
   ba396:	d0a3      	beq.n	ba2e0 <_strtod_l+0x88>
   ba398:	2301      	movs	r3, #1
   ba39a:	f04f 0900 	mov.w	r9, #0
   ba39e:	9304      	str	r3, [sp, #16]
   ba3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba3a2:	9308      	str	r3, [sp, #32]
   ba3a4:	f8cd 901c 	str.w	r9, [sp, #28]
   ba3a8:	464f      	mov	r7, r9
   ba3aa:	220a      	movs	r2, #10
   ba3ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba3ae:	7806      	ldrb	r6, [r0, #0]
   ba3b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba3b4:	b2d9      	uxtb	r1, r3
   ba3b6:	2909      	cmp	r1, #9
   ba3b8:	d92a      	bls.n	ba410 <_strtod_l+0x1b8>
   ba3ba:	9905      	ldr	r1, [sp, #20]
   ba3bc:	462a      	mov	r2, r5
   ba3be:	f7ff fef0 	bl	ba1a2 <strncmp>
   ba3c2:	b398      	cbz	r0, ba42c <_strtod_l+0x1d4>
   ba3c4:	2000      	movs	r0, #0
   ba3c6:	4632      	mov	r2, r6
   ba3c8:	463d      	mov	r5, r7
   ba3ca:	9005      	str	r0, [sp, #20]
   ba3cc:	4603      	mov	r3, r0
   ba3ce:	2a65      	cmp	r2, #101	; 0x65
   ba3d0:	d001      	beq.n	ba3d6 <_strtod_l+0x17e>
   ba3d2:	2a45      	cmp	r2, #69	; 0x45
   ba3d4:	d118      	bne.n	ba408 <_strtod_l+0x1b0>
   ba3d6:	b91d      	cbnz	r5, ba3e0 <_strtod_l+0x188>
   ba3d8:	9a04      	ldr	r2, [sp, #16]
   ba3da:	4302      	orrs	r2, r0
   ba3dc:	d09e      	beq.n	ba31c <_strtod_l+0xc4>
   ba3de:	2500      	movs	r5, #0
   ba3e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba3e4:	f108 0201 	add.w	r2, r8, #1
   ba3e8:	9217      	str	r2, [sp, #92]	; 0x5c
   ba3ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba3ee:	2a2b      	cmp	r2, #43	; 0x2b
   ba3f0:	d075      	beq.n	ba4de <_strtod_l+0x286>
   ba3f2:	2a2d      	cmp	r2, #45	; 0x2d
   ba3f4:	d07b      	beq.n	ba4ee <_strtod_l+0x296>
   ba3f6:	f04f 0c00 	mov.w	ip, #0
   ba3fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba3fe:	2909      	cmp	r1, #9
   ba400:	f240 8082 	bls.w	ba508 <_strtod_l+0x2b0>
   ba404:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba408:	2600      	movs	r6, #0
   ba40a:	e09d      	b.n	ba548 <_strtod_l+0x2f0>
   ba40c:	2300      	movs	r3, #0
   ba40e:	e7c4      	b.n	ba39a <_strtod_l+0x142>
   ba410:	2f08      	cmp	r7, #8
   ba412:	bfd8      	it	le
   ba414:	9907      	ldrle	r1, [sp, #28]
   ba416:	f100 0001 	add.w	r0, r0, #1
   ba41a:	bfda      	itte	le
   ba41c:	fb02 3301 	mlale	r3, r2, r1, r3
   ba420:	9307      	strle	r3, [sp, #28]
   ba422:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba426:	3701      	adds	r7, #1
   ba428:	9017      	str	r0, [sp, #92]	; 0x5c
   ba42a:	e7bf      	b.n	ba3ac <_strtod_l+0x154>
   ba42c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba42e:	195a      	adds	r2, r3, r5
   ba430:	9217      	str	r2, [sp, #92]	; 0x5c
   ba432:	5d5a      	ldrb	r2, [r3, r5]
   ba434:	2f00      	cmp	r7, #0
   ba436:	d037      	beq.n	ba4a8 <_strtod_l+0x250>
   ba438:	9005      	str	r0, [sp, #20]
   ba43a:	463d      	mov	r5, r7
   ba43c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba440:	2b09      	cmp	r3, #9
   ba442:	d912      	bls.n	ba46a <_strtod_l+0x212>
   ba444:	2301      	movs	r3, #1
   ba446:	e7c2      	b.n	ba3ce <_strtod_l+0x176>
   ba448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba44a:	1c5a      	adds	r2, r3, #1
   ba44c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba44e:	785a      	ldrb	r2, [r3, #1]
   ba450:	3001      	adds	r0, #1
   ba452:	2a30      	cmp	r2, #48	; 0x30
   ba454:	d0f8      	beq.n	ba448 <_strtod_l+0x1f0>
   ba456:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba45a:	2b08      	cmp	r3, #8
   ba45c:	f200 84d9 	bhi.w	bae12 <_strtod_l+0xbba>
   ba460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba462:	9005      	str	r0, [sp, #20]
   ba464:	2000      	movs	r0, #0
   ba466:	9308      	str	r3, [sp, #32]
   ba468:	4605      	mov	r5, r0
   ba46a:	3a30      	subs	r2, #48	; 0x30
   ba46c:	f100 0301 	add.w	r3, r0, #1
   ba470:	d014      	beq.n	ba49c <_strtod_l+0x244>
   ba472:	9905      	ldr	r1, [sp, #20]
   ba474:	4419      	add	r1, r3
   ba476:	9105      	str	r1, [sp, #20]
   ba478:	462b      	mov	r3, r5
   ba47a:	eb00 0e05 	add.w	lr, r0, r5
   ba47e:	210a      	movs	r1, #10
   ba480:	4573      	cmp	r3, lr
   ba482:	d113      	bne.n	ba4ac <_strtod_l+0x254>
   ba484:	182b      	adds	r3, r5, r0
   ba486:	2b08      	cmp	r3, #8
   ba488:	f105 0501 	add.w	r5, r5, #1
   ba48c:	4405      	add	r5, r0
   ba48e:	dc1c      	bgt.n	ba4ca <_strtod_l+0x272>
   ba490:	9907      	ldr	r1, [sp, #28]
   ba492:	230a      	movs	r3, #10
   ba494:	fb03 2301 	mla	r3, r3, r1, r2
   ba498:	9307      	str	r3, [sp, #28]
   ba49a:	2300      	movs	r3, #0
   ba49c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba49e:	1c51      	adds	r1, r2, #1
   ba4a0:	9117      	str	r1, [sp, #92]	; 0x5c
   ba4a2:	7852      	ldrb	r2, [r2, #1]
   ba4a4:	4618      	mov	r0, r3
   ba4a6:	e7c9      	b.n	ba43c <_strtod_l+0x1e4>
   ba4a8:	4638      	mov	r0, r7
   ba4aa:	e7d2      	b.n	ba452 <_strtod_l+0x1fa>
   ba4ac:	2b08      	cmp	r3, #8
   ba4ae:	dc04      	bgt.n	ba4ba <_strtod_l+0x262>
   ba4b0:	9e07      	ldr	r6, [sp, #28]
   ba4b2:	434e      	muls	r6, r1
   ba4b4:	9607      	str	r6, [sp, #28]
   ba4b6:	3301      	adds	r3, #1
   ba4b8:	e7e2      	b.n	ba480 <_strtod_l+0x228>
   ba4ba:	f103 0c01 	add.w	ip, r3, #1
   ba4be:	f1bc 0f10 	cmp.w	ip, #16
   ba4c2:	bfd8      	it	le
   ba4c4:	fb01 f909 	mulle.w	r9, r1, r9
   ba4c8:	e7f5      	b.n	ba4b6 <_strtod_l+0x25e>
   ba4ca:	2d10      	cmp	r5, #16
   ba4cc:	bfdc      	itt	le
   ba4ce:	230a      	movle	r3, #10
   ba4d0:	fb03 2909 	mlale	r9, r3, r9, r2
   ba4d4:	e7e1      	b.n	ba49a <_strtod_l+0x242>
   ba4d6:	2300      	movs	r3, #0
   ba4d8:	9305      	str	r3, [sp, #20]
   ba4da:	2301      	movs	r3, #1
   ba4dc:	e77c      	b.n	ba3d8 <_strtod_l+0x180>
   ba4de:	f04f 0c00 	mov.w	ip, #0
   ba4e2:	f108 0202 	add.w	r2, r8, #2
   ba4e6:	9217      	str	r2, [sp, #92]	; 0x5c
   ba4e8:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba4ec:	e785      	b.n	ba3fa <_strtod_l+0x1a2>
   ba4ee:	f04f 0c01 	mov.w	ip, #1
   ba4f2:	e7f6      	b.n	ba4e2 <_strtod_l+0x28a>
   ba4f4:	000bd1a8 	.word	0x000bd1a8
   ba4f8:	000bcf40 	.word	0x000bcf40
   ba4fc:	7ff00000 	.word	0x7ff00000
   ba500:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba502:	1c51      	adds	r1, r2, #1
   ba504:	9117      	str	r1, [sp, #92]	; 0x5c
   ba506:	7852      	ldrb	r2, [r2, #1]
   ba508:	2a30      	cmp	r2, #48	; 0x30
   ba50a:	d0f9      	beq.n	ba500 <_strtod_l+0x2a8>
   ba50c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba510:	2908      	cmp	r1, #8
   ba512:	f63f af79 	bhi.w	ba408 <_strtod_l+0x1b0>
   ba516:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba51a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba51c:	9206      	str	r2, [sp, #24]
   ba51e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba520:	1c51      	adds	r1, r2, #1
   ba522:	9117      	str	r1, [sp, #92]	; 0x5c
   ba524:	7852      	ldrb	r2, [r2, #1]
   ba526:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba52a:	2e09      	cmp	r6, #9
   ba52c:	d937      	bls.n	ba59e <_strtod_l+0x346>
   ba52e:	9e06      	ldr	r6, [sp, #24]
   ba530:	1b89      	subs	r1, r1, r6
   ba532:	2908      	cmp	r1, #8
   ba534:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba538:	dc02      	bgt.n	ba540 <_strtod_l+0x2e8>
   ba53a:	4576      	cmp	r6, lr
   ba53c:	bfa8      	it	ge
   ba53e:	4676      	movge	r6, lr
   ba540:	f1bc 0f00 	cmp.w	ip, #0
   ba544:	d000      	beq.n	ba548 <_strtod_l+0x2f0>
   ba546:	4276      	negs	r6, r6
   ba548:	2d00      	cmp	r5, #0
   ba54a:	d14d      	bne.n	ba5e8 <_strtod_l+0x390>
   ba54c:	9904      	ldr	r1, [sp, #16]
   ba54e:	4301      	orrs	r1, r0
   ba550:	f47f aec6 	bne.w	ba2e0 <_strtod_l+0x88>
   ba554:	2b00      	cmp	r3, #0
   ba556:	f47f aee1 	bne.w	ba31c <_strtod_l+0xc4>
   ba55a:	2a69      	cmp	r2, #105	; 0x69
   ba55c:	d027      	beq.n	ba5ae <_strtod_l+0x356>
   ba55e:	dc24      	bgt.n	ba5aa <_strtod_l+0x352>
   ba560:	2a49      	cmp	r2, #73	; 0x49
   ba562:	d024      	beq.n	ba5ae <_strtod_l+0x356>
   ba564:	2a4e      	cmp	r2, #78	; 0x4e
   ba566:	f47f aed9 	bne.w	ba31c <_strtod_l+0xc4>
   ba56a:	499f      	ldr	r1, [pc, #636]	; (ba7e8 <_strtod_l+0x590>)
   ba56c:	a817      	add	r0, sp, #92	; 0x5c
   ba56e:	f001 f88f 	bl	bb690 <__match>
   ba572:	2800      	cmp	r0, #0
   ba574:	f43f aed2 	beq.w	ba31c <_strtod_l+0xc4>
   ba578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba57a:	781b      	ldrb	r3, [r3, #0]
   ba57c:	2b28      	cmp	r3, #40	; 0x28
   ba57e:	d12d      	bne.n	ba5dc <_strtod_l+0x384>
   ba580:	499a      	ldr	r1, [pc, #616]	; (ba7ec <_strtod_l+0x594>)
   ba582:	aa1a      	add	r2, sp, #104	; 0x68
   ba584:	a817      	add	r0, sp, #92	; 0x5c
   ba586:	f001 f897 	bl	bb6b8 <__hexnan>
   ba58a:	2805      	cmp	r0, #5
   ba58c:	d126      	bne.n	ba5dc <_strtod_l+0x384>
   ba58e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba590:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba594:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba598:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba59c:	e6a0      	b.n	ba2e0 <_strtod_l+0x88>
   ba59e:	210a      	movs	r1, #10
   ba5a0:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba5a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba5a8:	e7b9      	b.n	ba51e <_strtod_l+0x2c6>
   ba5aa:	2a6e      	cmp	r2, #110	; 0x6e
   ba5ac:	e7db      	b.n	ba566 <_strtod_l+0x30e>
   ba5ae:	4990      	ldr	r1, [pc, #576]	; (ba7f0 <_strtod_l+0x598>)
   ba5b0:	a817      	add	r0, sp, #92	; 0x5c
   ba5b2:	f001 f86d 	bl	bb690 <__match>
   ba5b6:	2800      	cmp	r0, #0
   ba5b8:	f43f aeb0 	beq.w	ba31c <_strtod_l+0xc4>
   ba5bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5be:	498d      	ldr	r1, [pc, #564]	; (ba7f4 <_strtod_l+0x59c>)
   ba5c0:	3b01      	subs	r3, #1
   ba5c2:	a817      	add	r0, sp, #92	; 0x5c
   ba5c4:	9317      	str	r3, [sp, #92]	; 0x5c
   ba5c6:	f001 f863 	bl	bb690 <__match>
   ba5ca:	b910      	cbnz	r0, ba5d2 <_strtod_l+0x37a>
   ba5cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5ce:	3301      	adds	r3, #1
   ba5d0:	9317      	str	r3, [sp, #92]	; 0x5c
   ba5d2:	f8df b230 	ldr.w	fp, [pc, #560]	; ba804 <_strtod_l+0x5ac>
   ba5d6:	f04f 0a00 	mov.w	sl, #0
   ba5da:	e681      	b.n	ba2e0 <_strtod_l+0x88>
   ba5dc:	4886      	ldr	r0, [pc, #536]	; (ba7f8 <_strtod_l+0x5a0>)
   ba5de:	f001 fdef 	bl	bc1c0 <nan>
   ba5e2:	ec5b ab10 	vmov	sl, fp, d0
   ba5e6:	e67b      	b.n	ba2e0 <_strtod_l+0x88>
   ba5e8:	9b05      	ldr	r3, [sp, #20]
   ba5ea:	9807      	ldr	r0, [sp, #28]
   ba5ec:	1af3      	subs	r3, r6, r3
   ba5ee:	2f00      	cmp	r7, #0
   ba5f0:	bf08      	it	eq
   ba5f2:	462f      	moveq	r7, r5
   ba5f4:	2d10      	cmp	r5, #16
   ba5f6:	9306      	str	r3, [sp, #24]
   ba5f8:	46a8      	mov	r8, r5
   ba5fa:	bfa8      	it	ge
   ba5fc:	f04f 0810 	movge.w	r8, #16
   ba600:	f7ff f996 	bl	b9930 <__aeabi_ui2d>
   ba604:	2d09      	cmp	r5, #9
   ba606:	4682      	mov	sl, r0
   ba608:	468b      	mov	fp, r1
   ba60a:	dd13      	ble.n	ba634 <_strtod_l+0x3dc>
   ba60c:	4b7b      	ldr	r3, [pc, #492]	; (ba7fc <_strtod_l+0x5a4>)
   ba60e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba612:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba616:	f7ff fa05 	bl	b9a24 <__aeabi_dmul>
   ba61a:	4682      	mov	sl, r0
   ba61c:	4648      	mov	r0, r9
   ba61e:	468b      	mov	fp, r1
   ba620:	f7ff f986 	bl	b9930 <__aeabi_ui2d>
   ba624:	4602      	mov	r2, r0
   ba626:	460b      	mov	r3, r1
   ba628:	4650      	mov	r0, sl
   ba62a:	4659      	mov	r1, fp
   ba62c:	f7ff f844 	bl	b96b8 <__adddf3>
   ba630:	4682      	mov	sl, r0
   ba632:	468b      	mov	fp, r1
   ba634:	2d0f      	cmp	r5, #15
   ba636:	dc38      	bgt.n	ba6aa <_strtod_l+0x452>
   ba638:	9b06      	ldr	r3, [sp, #24]
   ba63a:	2b00      	cmp	r3, #0
   ba63c:	f43f ae50 	beq.w	ba2e0 <_strtod_l+0x88>
   ba640:	dd24      	ble.n	ba68c <_strtod_l+0x434>
   ba642:	2b16      	cmp	r3, #22
   ba644:	dc0b      	bgt.n	ba65e <_strtod_l+0x406>
   ba646:	496d      	ldr	r1, [pc, #436]	; (ba7fc <_strtod_l+0x5a4>)
   ba648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba64c:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba650:	4652      	mov	r2, sl
   ba652:	465b      	mov	r3, fp
   ba654:	f7ff f9e6 	bl	b9a24 <__aeabi_dmul>
   ba658:	4682      	mov	sl, r0
   ba65a:	468b      	mov	fp, r1
   ba65c:	e640      	b.n	ba2e0 <_strtod_l+0x88>
   ba65e:	9a06      	ldr	r2, [sp, #24]
   ba660:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba664:	4293      	cmp	r3, r2
   ba666:	db20      	blt.n	ba6aa <_strtod_l+0x452>
   ba668:	4c64      	ldr	r4, [pc, #400]	; (ba7fc <_strtod_l+0x5a4>)
   ba66a:	f1c5 050f 	rsb	r5, r5, #15
   ba66e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba672:	4652      	mov	r2, sl
   ba674:	465b      	mov	r3, fp
   ba676:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba67a:	f7ff f9d3 	bl	b9a24 <__aeabi_dmul>
   ba67e:	9b06      	ldr	r3, [sp, #24]
   ba680:	1b5d      	subs	r5, r3, r5
   ba682:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba686:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba68a:	e7e3      	b.n	ba654 <_strtod_l+0x3fc>
   ba68c:	9b06      	ldr	r3, [sp, #24]
   ba68e:	3316      	adds	r3, #22
   ba690:	db0b      	blt.n	ba6aa <_strtod_l+0x452>
   ba692:	9b05      	ldr	r3, [sp, #20]
   ba694:	1b9e      	subs	r6, r3, r6
   ba696:	4b59      	ldr	r3, [pc, #356]	; (ba7fc <_strtod_l+0x5a4>)
   ba698:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba69c:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba6a0:	4650      	mov	r0, sl
   ba6a2:	4659      	mov	r1, fp
   ba6a4:	f7ff fae8 	bl	b9c78 <__aeabi_ddiv>
   ba6a8:	e7d6      	b.n	ba658 <_strtod_l+0x400>
   ba6aa:	9b06      	ldr	r3, [sp, #24]
   ba6ac:	eba5 0808 	sub.w	r8, r5, r8
   ba6b0:	4498      	add	r8, r3
   ba6b2:	f1b8 0f00 	cmp.w	r8, #0
   ba6b6:	dd74      	ble.n	ba7a2 <_strtod_l+0x54a>
   ba6b8:	f018 030f 	ands.w	r3, r8, #15
   ba6bc:	d00a      	beq.n	ba6d4 <_strtod_l+0x47c>
   ba6be:	494f      	ldr	r1, [pc, #316]	; (ba7fc <_strtod_l+0x5a4>)
   ba6c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba6c4:	4652      	mov	r2, sl
   ba6c6:	465b      	mov	r3, fp
   ba6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba6cc:	f7ff f9aa 	bl	b9a24 <__aeabi_dmul>
   ba6d0:	4682      	mov	sl, r0
   ba6d2:	468b      	mov	fp, r1
   ba6d4:	f038 080f 	bics.w	r8, r8, #15
   ba6d8:	d04f      	beq.n	ba77a <_strtod_l+0x522>
   ba6da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba6de:	dd22      	ble.n	ba726 <_strtod_l+0x4ce>
   ba6e0:	2500      	movs	r5, #0
   ba6e2:	462e      	mov	r6, r5
   ba6e4:	9507      	str	r5, [sp, #28]
   ba6e6:	9505      	str	r5, [sp, #20]
   ba6e8:	2322      	movs	r3, #34	; 0x22
   ba6ea:	f8df b118 	ldr.w	fp, [pc, #280]	; ba804 <_strtod_l+0x5ac>
   ba6ee:	6023      	str	r3, [r4, #0]
   ba6f0:	f04f 0a00 	mov.w	sl, #0
   ba6f4:	9b07      	ldr	r3, [sp, #28]
   ba6f6:	2b00      	cmp	r3, #0
   ba6f8:	f43f adf2 	beq.w	ba2e0 <_strtod_l+0x88>
   ba6fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba6fe:	4620      	mov	r0, r4
   ba700:	f001 f8cc 	bl	bb89c <_Bfree>
   ba704:	9905      	ldr	r1, [sp, #20]
   ba706:	4620      	mov	r0, r4
   ba708:	f001 f8c8 	bl	bb89c <_Bfree>
   ba70c:	4631      	mov	r1, r6
   ba70e:	4620      	mov	r0, r4
   ba710:	f001 f8c4 	bl	bb89c <_Bfree>
   ba714:	9907      	ldr	r1, [sp, #28]
   ba716:	4620      	mov	r0, r4
   ba718:	f001 f8c0 	bl	bb89c <_Bfree>
   ba71c:	4629      	mov	r1, r5
   ba71e:	4620      	mov	r0, r4
   ba720:	f001 f8bc 	bl	bb89c <_Bfree>
   ba724:	e5dc      	b.n	ba2e0 <_strtod_l+0x88>
   ba726:	4b36      	ldr	r3, [pc, #216]	; (ba800 <_strtod_l+0x5a8>)
   ba728:	9304      	str	r3, [sp, #16]
   ba72a:	2300      	movs	r3, #0
   ba72c:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba730:	4650      	mov	r0, sl
   ba732:	4659      	mov	r1, fp
   ba734:	4699      	mov	r9, r3
   ba736:	f1b8 0f01 	cmp.w	r8, #1
   ba73a:	dc21      	bgt.n	ba780 <_strtod_l+0x528>
   ba73c:	b10b      	cbz	r3, ba742 <_strtod_l+0x4ea>
   ba73e:	4682      	mov	sl, r0
   ba740:	468b      	mov	fp, r1
   ba742:	4b2f      	ldr	r3, [pc, #188]	; (ba800 <_strtod_l+0x5a8>)
   ba744:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba748:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba74c:	4652      	mov	r2, sl
   ba74e:	465b      	mov	r3, fp
   ba750:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba754:	f7ff f966 	bl	b9a24 <__aeabi_dmul>
   ba758:	4b2a      	ldr	r3, [pc, #168]	; (ba804 <_strtod_l+0x5ac>)
   ba75a:	460a      	mov	r2, r1
   ba75c:	400b      	ands	r3, r1
   ba75e:	492a      	ldr	r1, [pc, #168]	; (ba808 <_strtod_l+0x5b0>)
   ba760:	428b      	cmp	r3, r1
   ba762:	4682      	mov	sl, r0
   ba764:	d8bc      	bhi.n	ba6e0 <_strtod_l+0x488>
   ba766:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba76a:	428b      	cmp	r3, r1
   ba76c:	bf86      	itte	hi
   ba76e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; ba80c <_strtod_l+0x5b4>
   ba772:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   ba776:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba77a:	2300      	movs	r3, #0
   ba77c:	9304      	str	r3, [sp, #16]
   ba77e:	e084      	b.n	ba88a <_strtod_l+0x632>
   ba780:	f018 0f01 	tst.w	r8, #1
   ba784:	d005      	beq.n	ba792 <_strtod_l+0x53a>
   ba786:	9b04      	ldr	r3, [sp, #16]
   ba788:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba78c:	f7ff f94a 	bl	b9a24 <__aeabi_dmul>
   ba790:	2301      	movs	r3, #1
   ba792:	9a04      	ldr	r2, [sp, #16]
   ba794:	3208      	adds	r2, #8
   ba796:	f109 0901 	add.w	r9, r9, #1
   ba79a:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba79e:	9204      	str	r2, [sp, #16]
   ba7a0:	e7c9      	b.n	ba736 <_strtod_l+0x4de>
   ba7a2:	d0ea      	beq.n	ba77a <_strtod_l+0x522>
   ba7a4:	f1c8 0800 	rsb	r8, r8, #0
   ba7a8:	f018 020f 	ands.w	r2, r8, #15
   ba7ac:	d00a      	beq.n	ba7c4 <_strtod_l+0x56c>
   ba7ae:	4b13      	ldr	r3, [pc, #76]	; (ba7fc <_strtod_l+0x5a4>)
   ba7b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba7b4:	4650      	mov	r0, sl
   ba7b6:	4659      	mov	r1, fp
   ba7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7bc:	f7ff fa5c 	bl	b9c78 <__aeabi_ddiv>
   ba7c0:	4682      	mov	sl, r0
   ba7c2:	468b      	mov	fp, r1
   ba7c4:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba7c8:	d0d7      	beq.n	ba77a <_strtod_l+0x522>
   ba7ca:	f1b8 0f1f 	cmp.w	r8, #31
   ba7ce:	dd1f      	ble.n	ba810 <_strtod_l+0x5b8>
   ba7d0:	2500      	movs	r5, #0
   ba7d2:	462e      	mov	r6, r5
   ba7d4:	9507      	str	r5, [sp, #28]
   ba7d6:	9505      	str	r5, [sp, #20]
   ba7d8:	2322      	movs	r3, #34	; 0x22
   ba7da:	f04f 0a00 	mov.w	sl, #0
   ba7de:	f04f 0b00 	mov.w	fp, #0
   ba7e2:	6023      	str	r3, [r4, #0]
   ba7e4:	e786      	b.n	ba6f4 <_strtod_l+0x49c>
   ba7e6:	bf00      	nop
   ba7e8:	000bcf3a 	.word	0x000bcf3a
   ba7ec:	000bcf54 	.word	0x000bcf54
   ba7f0:	000bcf31 	.word	0x000bcf31
   ba7f4:	000bcf34 	.word	0x000bcf34
   ba7f8:	000bc93b 	.word	0x000bc93b
   ba7fc:	000bd268 	.word	0x000bd268
   ba800:	000bd240 	.word	0x000bd240
   ba804:	7ff00000 	.word	0x7ff00000
   ba808:	7ca00000 	.word	0x7ca00000
   ba80c:	7fefffff 	.word	0x7fefffff
   ba810:	f018 0310 	ands.w	r3, r8, #16
   ba814:	bf18      	it	ne
   ba816:	236a      	movne	r3, #106	; 0x6a
   ba818:	f8df 93ac 	ldr.w	r9, [pc, #940]	; babc8 <_strtod_l+0x970>
   ba81c:	9304      	str	r3, [sp, #16]
   ba81e:	4650      	mov	r0, sl
   ba820:	4659      	mov	r1, fp
   ba822:	2300      	movs	r3, #0
   ba824:	f018 0f01 	tst.w	r8, #1
   ba828:	d004      	beq.n	ba834 <_strtod_l+0x5dc>
   ba82a:	e9d9 2300 	ldrd	r2, r3, [r9]
   ba82e:	f7ff f8f9 	bl	b9a24 <__aeabi_dmul>
   ba832:	2301      	movs	r3, #1
   ba834:	ea5f 0868 	movs.w	r8, r8, asr #1
   ba838:	f109 0908 	add.w	r9, r9, #8
   ba83c:	d1f2      	bne.n	ba824 <_strtod_l+0x5cc>
   ba83e:	b10b      	cbz	r3, ba844 <_strtod_l+0x5ec>
   ba840:	4682      	mov	sl, r0
   ba842:	468b      	mov	fp, r1
   ba844:	9b04      	ldr	r3, [sp, #16]
   ba846:	b1c3      	cbz	r3, ba87a <_strtod_l+0x622>
   ba848:	f3cb 520a 	ubfx	r2, fp, #20, #11
   ba84c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   ba850:	2b00      	cmp	r3, #0
   ba852:	4659      	mov	r1, fp
   ba854:	dd11      	ble.n	ba87a <_strtod_l+0x622>
   ba856:	2b1f      	cmp	r3, #31
   ba858:	f340 8124 	ble.w	baaa4 <_strtod_l+0x84c>
   ba85c:	2b34      	cmp	r3, #52	; 0x34
   ba85e:	bfde      	ittt	le
   ba860:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   ba864:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   ba868:	fa03 f202 	lslle.w	r2, r3, r2
   ba86c:	f04f 0a00 	mov.w	sl, #0
   ba870:	bfcc      	ite	gt
   ba872:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   ba876:	ea02 0b01 	andle.w	fp, r2, r1
   ba87a:	2200      	movs	r2, #0
   ba87c:	2300      	movs	r3, #0
   ba87e:	4650      	mov	r0, sl
   ba880:	4659      	mov	r1, fp
   ba882:	f7ff fb37 	bl	b9ef4 <__aeabi_dcmpeq>
   ba886:	2800      	cmp	r0, #0
   ba888:	d1a2      	bne.n	ba7d0 <_strtod_l+0x578>
   ba88a:	9b07      	ldr	r3, [sp, #28]
   ba88c:	9300      	str	r3, [sp, #0]
   ba88e:	9908      	ldr	r1, [sp, #32]
   ba890:	462b      	mov	r3, r5
   ba892:	463a      	mov	r2, r7
   ba894:	4620      	mov	r0, r4
   ba896:	f001 f869 	bl	bb96c <__s2b>
   ba89a:	9007      	str	r0, [sp, #28]
   ba89c:	2800      	cmp	r0, #0
   ba89e:	f43f af1f 	beq.w	ba6e0 <_strtod_l+0x488>
   ba8a2:	9b05      	ldr	r3, [sp, #20]
   ba8a4:	1b9e      	subs	r6, r3, r6
   ba8a6:	9b06      	ldr	r3, [sp, #24]
   ba8a8:	2b00      	cmp	r3, #0
   ba8aa:	bfb4      	ite	lt
   ba8ac:	4633      	movlt	r3, r6
   ba8ae:	2300      	movge	r3, #0
   ba8b0:	930c      	str	r3, [sp, #48]	; 0x30
   ba8b2:	9b06      	ldr	r3, [sp, #24]
   ba8b4:	2500      	movs	r5, #0
   ba8b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   ba8ba:	9312      	str	r3, [sp, #72]	; 0x48
   ba8bc:	462e      	mov	r6, r5
   ba8be:	9b07      	ldr	r3, [sp, #28]
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	6859      	ldr	r1, [r3, #4]
   ba8c4:	f000 ffaa 	bl	bb81c <_Balloc>
   ba8c8:	9005      	str	r0, [sp, #20]
   ba8ca:	2800      	cmp	r0, #0
   ba8cc:	f43f af0c 	beq.w	ba6e8 <_strtod_l+0x490>
   ba8d0:	9b07      	ldr	r3, [sp, #28]
   ba8d2:	691a      	ldr	r2, [r3, #16]
   ba8d4:	3202      	adds	r2, #2
   ba8d6:	f103 010c 	add.w	r1, r3, #12
   ba8da:	0092      	lsls	r2, r2, #2
   ba8dc:	300c      	adds	r0, #12
   ba8de:	f7ff fbd6 	bl	ba08e <memcpy>
   ba8e2:	ec4b ab10 	vmov	d0, sl, fp
   ba8e6:	aa1a      	add	r2, sp, #104	; 0x68
   ba8e8:	a919      	add	r1, sp, #100	; 0x64
   ba8ea:	4620      	mov	r0, r4
   ba8ec:	f001 fb84 	bl	bbff8 <__d2b>
   ba8f0:	ec4b ab18 	vmov	d8, sl, fp
   ba8f4:	9018      	str	r0, [sp, #96]	; 0x60
   ba8f6:	2800      	cmp	r0, #0
   ba8f8:	f43f aef6 	beq.w	ba6e8 <_strtod_l+0x490>
   ba8fc:	2101      	movs	r1, #1
   ba8fe:	4620      	mov	r0, r4
   ba900:	f001 f8ce 	bl	bbaa0 <__i2b>
   ba904:	4606      	mov	r6, r0
   ba906:	2800      	cmp	r0, #0
   ba908:	f43f aeee 	beq.w	ba6e8 <_strtod_l+0x490>
   ba90c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba90e:	9904      	ldr	r1, [sp, #16]
   ba910:	2b00      	cmp	r3, #0
   ba912:	bfab      	itete	ge
   ba914:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   ba916:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   ba918:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   ba91a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   ba91e:	bfac      	ite	ge
   ba920:	eb03 0902 	addge.w	r9, r3, r2
   ba924:	1ad7      	sublt	r7, r2, r3
   ba926:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba928:	eba3 0801 	sub.w	r8, r3, r1
   ba92c:	4490      	add	r8, r2
   ba92e:	4ba1      	ldr	r3, [pc, #644]	; (babb4 <_strtod_l+0x95c>)
   ba930:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba934:	4598      	cmp	r8, r3
   ba936:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   ba93a:	f280 80c7 	bge.w	baacc <_strtod_l+0x874>
   ba93e:	eba3 0308 	sub.w	r3, r3, r8
   ba942:	2b1f      	cmp	r3, #31
   ba944:	eba2 0203 	sub.w	r2, r2, r3
   ba948:	f04f 0101 	mov.w	r1, #1
   ba94c:	f300 80b1 	bgt.w	baab2 <_strtod_l+0x85a>
   ba950:	fa01 f303 	lsl.w	r3, r1, r3
   ba954:	930d      	str	r3, [sp, #52]	; 0x34
   ba956:	2300      	movs	r3, #0
   ba958:	9308      	str	r3, [sp, #32]
   ba95a:	eb09 0802 	add.w	r8, r9, r2
   ba95e:	9b04      	ldr	r3, [sp, #16]
   ba960:	45c1      	cmp	r9, r8
   ba962:	4417      	add	r7, r2
   ba964:	441f      	add	r7, r3
   ba966:	464b      	mov	r3, r9
   ba968:	bfa8      	it	ge
   ba96a:	4643      	movge	r3, r8
   ba96c:	42bb      	cmp	r3, r7
   ba96e:	bfa8      	it	ge
   ba970:	463b      	movge	r3, r7
   ba972:	2b00      	cmp	r3, #0
   ba974:	bfc2      	ittt	gt
   ba976:	eba8 0803 	subgt.w	r8, r8, r3
   ba97a:	1aff      	subgt	r7, r7, r3
   ba97c:	eba9 0903 	subgt.w	r9, r9, r3
   ba980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba982:	2b00      	cmp	r3, #0
   ba984:	dd17      	ble.n	ba9b6 <_strtod_l+0x75e>
   ba986:	4631      	mov	r1, r6
   ba988:	461a      	mov	r2, r3
   ba98a:	4620      	mov	r0, r4
   ba98c:	f001 f948 	bl	bbc20 <__pow5mult>
   ba990:	4606      	mov	r6, r0
   ba992:	2800      	cmp	r0, #0
   ba994:	f43f aea8 	beq.w	ba6e8 <_strtod_l+0x490>
   ba998:	4601      	mov	r1, r0
   ba99a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba99c:	4620      	mov	r0, r4
   ba99e:	f001 f895 	bl	bbacc <__multiply>
   ba9a2:	900b      	str	r0, [sp, #44]	; 0x2c
   ba9a4:	2800      	cmp	r0, #0
   ba9a6:	f43f ae9f 	beq.w	ba6e8 <_strtod_l+0x490>
   ba9aa:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba9ac:	4620      	mov	r0, r4
   ba9ae:	f000 ff75 	bl	bb89c <_Bfree>
   ba9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba9b4:	9318      	str	r3, [sp, #96]	; 0x60
   ba9b6:	f1b8 0f00 	cmp.w	r8, #0
   ba9ba:	f300 808c 	bgt.w	baad6 <_strtod_l+0x87e>
   ba9be:	9b06      	ldr	r3, [sp, #24]
   ba9c0:	2b00      	cmp	r3, #0
   ba9c2:	dd08      	ble.n	ba9d6 <_strtod_l+0x77e>
   ba9c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba9c6:	9905      	ldr	r1, [sp, #20]
   ba9c8:	4620      	mov	r0, r4
   ba9ca:	f001 f929 	bl	bbc20 <__pow5mult>
   ba9ce:	9005      	str	r0, [sp, #20]
   ba9d0:	2800      	cmp	r0, #0
   ba9d2:	f43f ae89 	beq.w	ba6e8 <_strtod_l+0x490>
   ba9d6:	2f00      	cmp	r7, #0
   ba9d8:	dd08      	ble.n	ba9ec <_strtod_l+0x794>
   ba9da:	9905      	ldr	r1, [sp, #20]
   ba9dc:	463a      	mov	r2, r7
   ba9de:	4620      	mov	r0, r4
   ba9e0:	f001 f978 	bl	bbcd4 <__lshift>
   ba9e4:	9005      	str	r0, [sp, #20]
   ba9e6:	2800      	cmp	r0, #0
   ba9e8:	f43f ae7e 	beq.w	ba6e8 <_strtod_l+0x490>
   ba9ec:	f1b9 0f00 	cmp.w	r9, #0
   ba9f0:	dd08      	ble.n	baa04 <_strtod_l+0x7ac>
   ba9f2:	4631      	mov	r1, r6
   ba9f4:	464a      	mov	r2, r9
   ba9f6:	4620      	mov	r0, r4
   ba9f8:	f001 f96c 	bl	bbcd4 <__lshift>
   ba9fc:	4606      	mov	r6, r0
   ba9fe:	2800      	cmp	r0, #0
   baa00:	f43f ae72 	beq.w	ba6e8 <_strtod_l+0x490>
   baa04:	9a05      	ldr	r2, [sp, #20]
   baa06:	9918      	ldr	r1, [sp, #96]	; 0x60
   baa08:	4620      	mov	r0, r4
   baa0a:	f001 f9ef 	bl	bbdec <__mdiff>
   baa0e:	4605      	mov	r5, r0
   baa10:	2800      	cmp	r0, #0
   baa12:	f43f ae69 	beq.w	ba6e8 <_strtod_l+0x490>
   baa16:	68c3      	ldr	r3, [r0, #12]
   baa18:	930b      	str	r3, [sp, #44]	; 0x2c
   baa1a:	2300      	movs	r3, #0
   baa1c:	60c3      	str	r3, [r0, #12]
   baa1e:	4631      	mov	r1, r6
   baa20:	f001 f9c8 	bl	bbdb4 <__mcmp>
   baa24:	2800      	cmp	r0, #0
   baa26:	da60      	bge.n	baaea <_strtod_l+0x892>
   baa28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baa2a:	ea53 030a 	orrs.w	r3, r3, sl
   baa2e:	f040 8082 	bne.w	bab36 <_strtod_l+0x8de>
   baa32:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baa36:	2b00      	cmp	r3, #0
   baa38:	d17d      	bne.n	bab36 <_strtod_l+0x8de>
   baa3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baa3e:	0d1b      	lsrs	r3, r3, #20
   baa40:	051b      	lsls	r3, r3, #20
   baa42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   baa46:	d976      	bls.n	bab36 <_strtod_l+0x8de>
   baa48:	696b      	ldr	r3, [r5, #20]
   baa4a:	b913      	cbnz	r3, baa52 <_strtod_l+0x7fa>
   baa4c:	692b      	ldr	r3, [r5, #16]
   baa4e:	2b01      	cmp	r3, #1
   baa50:	dd71      	ble.n	bab36 <_strtod_l+0x8de>
   baa52:	4629      	mov	r1, r5
   baa54:	2201      	movs	r2, #1
   baa56:	4620      	mov	r0, r4
   baa58:	f001 f93c 	bl	bbcd4 <__lshift>
   baa5c:	4631      	mov	r1, r6
   baa5e:	4605      	mov	r5, r0
   baa60:	f001 f9a8 	bl	bbdb4 <__mcmp>
   baa64:	2800      	cmp	r0, #0
   baa66:	dd66      	ble.n	bab36 <_strtod_l+0x8de>
   baa68:	9904      	ldr	r1, [sp, #16]
   baa6a:	4a53      	ldr	r2, [pc, #332]	; (babb8 <_strtod_l+0x960>)
   baa6c:	465b      	mov	r3, fp
   baa6e:	2900      	cmp	r1, #0
   baa70:	f000 8081 	beq.w	bab76 <_strtod_l+0x91e>
   baa74:	ea02 010b 	and.w	r1, r2, fp
   baa78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   baa7c:	dc7b      	bgt.n	bab76 <_strtod_l+0x91e>
   baa7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   baa82:	f77f aea9 	ble.w	ba7d8 <_strtod_l+0x580>
   baa86:	4b4d      	ldr	r3, [pc, #308]	; (babbc <_strtod_l+0x964>)
   baa88:	4650      	mov	r0, sl
   baa8a:	4659      	mov	r1, fp
   baa8c:	2200      	movs	r2, #0
   baa8e:	f7fe ffc9 	bl	b9a24 <__aeabi_dmul>
   baa92:	460b      	mov	r3, r1
   baa94:	4303      	orrs	r3, r0
   baa96:	bf08      	it	eq
   baa98:	2322      	moveq	r3, #34	; 0x22
   baa9a:	4682      	mov	sl, r0
   baa9c:	468b      	mov	fp, r1
   baa9e:	bf08      	it	eq
   baaa0:	6023      	streq	r3, [r4, #0]
   baaa2:	e62b      	b.n	ba6fc <_strtod_l+0x4a4>
   baaa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baaa8:	fa02 f303 	lsl.w	r3, r2, r3
   baaac:	ea03 0a0a 	and.w	sl, r3, sl
   baab0:	e6e3      	b.n	ba87a <_strtod_l+0x622>
   baab2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   baab6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   baaba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   baabe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   baac2:	fa01 f308 	lsl.w	r3, r1, r8
   baac6:	9308      	str	r3, [sp, #32]
   baac8:	910d      	str	r1, [sp, #52]	; 0x34
   baaca:	e746      	b.n	ba95a <_strtod_l+0x702>
   baacc:	2300      	movs	r3, #0
   baace:	9308      	str	r3, [sp, #32]
   baad0:	2301      	movs	r3, #1
   baad2:	930d      	str	r3, [sp, #52]	; 0x34
   baad4:	e741      	b.n	ba95a <_strtod_l+0x702>
   baad6:	9918      	ldr	r1, [sp, #96]	; 0x60
   baad8:	4642      	mov	r2, r8
   baada:	4620      	mov	r0, r4
   baadc:	f001 f8fa 	bl	bbcd4 <__lshift>
   baae0:	9018      	str	r0, [sp, #96]	; 0x60
   baae2:	2800      	cmp	r0, #0
   baae4:	f47f af6b 	bne.w	ba9be <_strtod_l+0x766>
   baae8:	e5fe      	b.n	ba6e8 <_strtod_l+0x490>
   baaea:	465f      	mov	r7, fp
   baaec:	d16e      	bne.n	babcc <_strtod_l+0x974>
   baaee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   baaf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baaf4:	b342      	cbz	r2, bab48 <_strtod_l+0x8f0>
   baaf6:	4a32      	ldr	r2, [pc, #200]	; (babc0 <_strtod_l+0x968>)
   baaf8:	4293      	cmp	r3, r2
   baafa:	d128      	bne.n	bab4e <_strtod_l+0x8f6>
   baafc:	9b04      	ldr	r3, [sp, #16]
   baafe:	4651      	mov	r1, sl
   bab00:	b1eb      	cbz	r3, bab3e <_strtod_l+0x8e6>
   bab02:	4b2d      	ldr	r3, [pc, #180]	; (babb8 <_strtod_l+0x960>)
   bab04:	403b      	ands	r3, r7
   bab06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bab0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab0e:	d819      	bhi.n	bab44 <_strtod_l+0x8ec>
   bab10:	0d1b      	lsrs	r3, r3, #20
   bab12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bab16:	fa02 f303 	lsl.w	r3, r2, r3
   bab1a:	4299      	cmp	r1, r3
   bab1c:	d117      	bne.n	bab4e <_strtod_l+0x8f6>
   bab1e:	4b29      	ldr	r3, [pc, #164]	; (babc4 <_strtod_l+0x96c>)
   bab20:	429f      	cmp	r7, r3
   bab22:	d102      	bne.n	bab2a <_strtod_l+0x8d2>
   bab24:	3101      	adds	r1, #1
   bab26:	f43f addf 	beq.w	ba6e8 <_strtod_l+0x490>
   bab2a:	4b23      	ldr	r3, [pc, #140]	; (babb8 <_strtod_l+0x960>)
   bab2c:	403b      	ands	r3, r7
   bab2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bab32:	f04f 0a00 	mov.w	sl, #0
   bab36:	9b04      	ldr	r3, [sp, #16]
   bab38:	2b00      	cmp	r3, #0
   bab3a:	d1a4      	bne.n	baa86 <_strtod_l+0x82e>
   bab3c:	e5de      	b.n	ba6fc <_strtod_l+0x4a4>
   bab3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bab42:	e7ea      	b.n	bab1a <_strtod_l+0x8c2>
   bab44:	4613      	mov	r3, r2
   bab46:	e7e8      	b.n	bab1a <_strtod_l+0x8c2>
   bab48:	ea53 030a 	orrs.w	r3, r3, sl
   bab4c:	d08c      	beq.n	baa68 <_strtod_l+0x810>
   bab4e:	9b08      	ldr	r3, [sp, #32]
   bab50:	b1db      	cbz	r3, bab8a <_strtod_l+0x932>
   bab52:	423b      	tst	r3, r7
   bab54:	d0ef      	beq.n	bab36 <_strtod_l+0x8de>
   bab56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bab58:	9a04      	ldr	r2, [sp, #16]
   bab5a:	4650      	mov	r0, sl
   bab5c:	4659      	mov	r1, fp
   bab5e:	b1c3      	cbz	r3, bab92 <_strtod_l+0x93a>
   bab60:	f7ff fb5c 	bl	ba21c <sulp>
   bab64:	4602      	mov	r2, r0
   bab66:	460b      	mov	r3, r1
   bab68:	ec51 0b18 	vmov	r0, r1, d8
   bab6c:	f7fe fda4 	bl	b96b8 <__adddf3>
   bab70:	4682      	mov	sl, r0
   bab72:	468b      	mov	fp, r1
   bab74:	e7df      	b.n	bab36 <_strtod_l+0x8de>
   bab76:	4013      	ands	r3, r2
   bab78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bab7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bab80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bab84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bab88:	e7d5      	b.n	bab36 <_strtod_l+0x8de>
   bab8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bab8c:	ea13 0f0a 	tst.w	r3, sl
   bab90:	e7e0      	b.n	bab54 <_strtod_l+0x8fc>
   bab92:	f7ff fb43 	bl	ba21c <sulp>
   bab96:	4602      	mov	r2, r0
   bab98:	460b      	mov	r3, r1
   bab9a:	ec51 0b18 	vmov	r0, r1, d8
   bab9e:	f7fe fd89 	bl	b96b4 <__aeabi_dsub>
   baba2:	2200      	movs	r2, #0
   baba4:	2300      	movs	r3, #0
   baba6:	4682      	mov	sl, r0
   baba8:	468b      	mov	fp, r1
   babaa:	f7ff f9a3 	bl	b9ef4 <__aeabi_dcmpeq>
   babae:	2800      	cmp	r0, #0
   babb0:	d0c1      	beq.n	bab36 <_strtod_l+0x8de>
   babb2:	e611      	b.n	ba7d8 <_strtod_l+0x580>
   babb4:	fffffc02 	.word	0xfffffc02
   babb8:	7ff00000 	.word	0x7ff00000
   babbc:	39500000 	.word	0x39500000
   babc0:	000fffff 	.word	0x000fffff
   babc4:	7fefffff 	.word	0x7fefffff
   babc8:	000bcf68 	.word	0x000bcf68
   babcc:	4631      	mov	r1, r6
   babce:	4628      	mov	r0, r5
   babd0:	f001 fa6e 	bl	bc0b0 <__ratio>
   babd4:	ec59 8b10 	vmov	r8, r9, d0
   babd8:	ee10 0a10 	vmov	r0, s0
   babdc:	2200      	movs	r2, #0
   babde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   babe2:	4649      	mov	r1, r9
   babe4:	f7ff f99a 	bl	b9f1c <__aeabi_dcmple>
   babe8:	2800      	cmp	r0, #0
   babea:	d07a      	beq.n	bace2 <_strtod_l+0xa8a>
   babec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   babee:	2b00      	cmp	r3, #0
   babf0:	d04a      	beq.n	bac88 <_strtod_l+0xa30>
   babf2:	4b95      	ldr	r3, [pc, #596]	; (bae48 <_strtod_l+0xbf0>)
   babf4:	2200      	movs	r2, #0
   babf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   babfa:	f8df 924c 	ldr.w	r9, [pc, #588]	; bae48 <_strtod_l+0xbf0>
   babfe:	f04f 0800 	mov.w	r8, #0
   bac02:	4b92      	ldr	r3, [pc, #584]	; (bae4c <_strtod_l+0xbf4>)
   bac04:	403b      	ands	r3, r7
   bac06:	930d      	str	r3, [sp, #52]	; 0x34
   bac08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bac0a:	4b91      	ldr	r3, [pc, #580]	; (bae50 <_strtod_l+0xbf8>)
   bac0c:	429a      	cmp	r2, r3
   bac0e:	f040 80b0 	bne.w	bad72 <_strtod_l+0xb1a>
   bac12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bac16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bac1a:	ec4b ab10 	vmov	d0, sl, fp
   bac1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bac22:	f001 f96d 	bl	bbf00 <__ulp>
   bac26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bac2a:	ec53 2b10 	vmov	r2, r3, d0
   bac2e:	f7fe fef9 	bl	b9a24 <__aeabi_dmul>
   bac32:	4652      	mov	r2, sl
   bac34:	465b      	mov	r3, fp
   bac36:	f7fe fd3f 	bl	b96b8 <__adddf3>
   bac3a:	460b      	mov	r3, r1
   bac3c:	4983      	ldr	r1, [pc, #524]	; (bae4c <_strtod_l+0xbf4>)
   bac3e:	4a85      	ldr	r2, [pc, #532]	; (bae54 <_strtod_l+0xbfc>)
   bac40:	4019      	ands	r1, r3
   bac42:	4291      	cmp	r1, r2
   bac44:	4682      	mov	sl, r0
   bac46:	d960      	bls.n	bad0a <_strtod_l+0xab2>
   bac48:	ee18 3a90 	vmov	r3, s17
   bac4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bac50:	4293      	cmp	r3, r2
   bac52:	d104      	bne.n	bac5e <_strtod_l+0xa06>
   bac54:	ee18 3a10 	vmov	r3, s16
   bac58:	3301      	adds	r3, #1
   bac5a:	f43f ad45 	beq.w	ba6e8 <_strtod_l+0x490>
   bac5e:	f8df b200 	ldr.w	fp, [pc, #512]	; bae60 <_strtod_l+0xc08>
   bac62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bac66:	9918      	ldr	r1, [sp, #96]	; 0x60
   bac68:	4620      	mov	r0, r4
   bac6a:	f000 fe17 	bl	bb89c <_Bfree>
   bac6e:	9905      	ldr	r1, [sp, #20]
   bac70:	4620      	mov	r0, r4
   bac72:	f000 fe13 	bl	bb89c <_Bfree>
   bac76:	4631      	mov	r1, r6
   bac78:	4620      	mov	r0, r4
   bac7a:	f000 fe0f 	bl	bb89c <_Bfree>
   bac7e:	4629      	mov	r1, r5
   bac80:	4620      	mov	r0, r4
   bac82:	f000 fe0b 	bl	bb89c <_Bfree>
   bac86:	e61a      	b.n	ba8be <_strtod_l+0x666>
   bac88:	f1ba 0f00 	cmp.w	sl, #0
   bac8c:	d11b      	bne.n	bacc6 <_strtod_l+0xa6e>
   bac8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bac92:	b9f3      	cbnz	r3, bacd2 <_strtod_l+0xa7a>
   bac94:	4b6c      	ldr	r3, [pc, #432]	; (bae48 <_strtod_l+0xbf0>)
   bac96:	2200      	movs	r2, #0
   bac98:	4640      	mov	r0, r8
   bac9a:	4649      	mov	r1, r9
   bac9c:	f7ff f934 	bl	b9f08 <__aeabi_dcmplt>
   baca0:	b9d0      	cbnz	r0, bacd8 <_strtod_l+0xa80>
   baca2:	4640      	mov	r0, r8
   baca4:	4649      	mov	r1, r9
   baca6:	4b6c      	ldr	r3, [pc, #432]	; (bae58 <_strtod_l+0xc00>)
   baca8:	2200      	movs	r2, #0
   bacaa:	f7fe febb 	bl	b9a24 <__aeabi_dmul>
   bacae:	4680      	mov	r8, r0
   bacb0:	4689      	mov	r9, r1
   bacb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bacb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bacba:	9315      	str	r3, [sp, #84]	; 0x54
   bacbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bacc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bacc4:	e79d      	b.n	bac02 <_strtod_l+0x9aa>
   bacc6:	f1ba 0f01 	cmp.w	sl, #1
   bacca:	d102      	bne.n	bacd2 <_strtod_l+0xa7a>
   baccc:	2f00      	cmp	r7, #0
   bacce:	f43f ad83 	beq.w	ba7d8 <_strtod_l+0x580>
   bacd2:	4b62      	ldr	r3, [pc, #392]	; (bae5c <_strtod_l+0xc04>)
   bacd4:	2200      	movs	r2, #0
   bacd6:	e78e      	b.n	babf6 <_strtod_l+0x99e>
   bacd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bae58 <_strtod_l+0xc00>
   bacdc:	f04f 0800 	mov.w	r8, #0
   bace0:	e7e7      	b.n	bacb2 <_strtod_l+0xa5a>
   bace2:	4b5d      	ldr	r3, [pc, #372]	; (bae58 <_strtod_l+0xc00>)
   bace4:	4640      	mov	r0, r8
   bace6:	4649      	mov	r1, r9
   bace8:	2200      	movs	r2, #0
   bacea:	f7fe fe9b 	bl	b9a24 <__aeabi_dmul>
   bacee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bacf0:	4680      	mov	r8, r0
   bacf2:	4689      	mov	r9, r1
   bacf4:	b933      	cbnz	r3, bad04 <_strtod_l+0xaac>
   bacf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bacfa:	900e      	str	r0, [sp, #56]	; 0x38
   bacfc:	930f      	str	r3, [sp, #60]	; 0x3c
   bacfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bad02:	e7dd      	b.n	bacc0 <_strtod_l+0xa68>
   bad04:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bad08:	e7f9      	b.n	bacfe <_strtod_l+0xaa6>
   bad0a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bad0e:	9b04      	ldr	r3, [sp, #16]
   bad10:	2b00      	cmp	r3, #0
   bad12:	d1a8      	bne.n	bac66 <_strtod_l+0xa0e>
   bad14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bad18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bad1a:	0d1b      	lsrs	r3, r3, #20
   bad1c:	051b      	lsls	r3, r3, #20
   bad1e:	429a      	cmp	r2, r3
   bad20:	d1a1      	bne.n	bac66 <_strtod_l+0xa0e>
   bad22:	4640      	mov	r0, r8
   bad24:	4649      	mov	r1, r9
   bad26:	f001 fa61 	bl	bc1ec <__aeabi_d2lz>
   bad2a:	f7fe fe4d 	bl	b99c8 <__aeabi_l2d>
   bad2e:	4602      	mov	r2, r0
   bad30:	460b      	mov	r3, r1
   bad32:	4640      	mov	r0, r8
   bad34:	4649      	mov	r1, r9
   bad36:	f7fe fcbd 	bl	b96b4 <__aeabi_dsub>
   bad3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bad3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bad40:	ea43 030a 	orr.w	r3, r3, sl
   bad44:	4313      	orrs	r3, r2
   bad46:	4680      	mov	r8, r0
   bad48:	4689      	mov	r9, r1
   bad4a:	d055      	beq.n	badf8 <_strtod_l+0xba0>
   bad4c:	a336      	add	r3, pc, #216	; (adr r3, bae28 <_strtod_l+0xbd0>)
   bad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad52:	f7ff f8d9 	bl	b9f08 <__aeabi_dcmplt>
   bad56:	2800      	cmp	r0, #0
   bad58:	f47f acd0 	bne.w	ba6fc <_strtod_l+0x4a4>
   bad5c:	a334      	add	r3, pc, #208	; (adr r3, bae30 <_strtod_l+0xbd8>)
   bad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad62:	4640      	mov	r0, r8
   bad64:	4649      	mov	r1, r9
   bad66:	f7ff f8ed 	bl	b9f44 <__aeabi_dcmpgt>
   bad6a:	2800      	cmp	r0, #0
   bad6c:	f43f af7b 	beq.w	bac66 <_strtod_l+0xa0e>
   bad70:	e4c4      	b.n	ba6fc <_strtod_l+0x4a4>
   bad72:	9b04      	ldr	r3, [sp, #16]
   bad74:	b333      	cbz	r3, badc4 <_strtod_l+0xb6c>
   bad76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bad78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bad7c:	d822      	bhi.n	badc4 <_strtod_l+0xb6c>
   bad7e:	a32e      	add	r3, pc, #184	; (adr r3, bae38 <_strtod_l+0xbe0>)
   bad80:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad84:	4640      	mov	r0, r8
   bad86:	4649      	mov	r1, r9
   bad88:	f7ff f8c8 	bl	b9f1c <__aeabi_dcmple>
   bad8c:	b1a0      	cbz	r0, badb8 <_strtod_l+0xb60>
   bad8e:	4649      	mov	r1, r9
   bad90:	4640      	mov	r0, r8
   bad92:	f7ff f8e1 	bl	b9f58 <__aeabi_d2uiz>
   bad96:	2801      	cmp	r0, #1
   bad98:	bf38      	it	cc
   bad9a:	2001      	movcc	r0, #1
   bad9c:	f7fe fdc8 	bl	b9930 <__aeabi_ui2d>
   bada0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bada2:	4680      	mov	r8, r0
   bada4:	4689      	mov	r9, r1
   bada6:	bb23      	cbnz	r3, badf2 <_strtod_l+0xb9a>
   bada8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   badac:	9010      	str	r0, [sp, #64]	; 0x40
   badae:	9311      	str	r3, [sp, #68]	; 0x44
   badb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   badb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   badb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   badba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   badbc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   badc0:	1a9b      	subs	r3, r3, r2
   badc2:	9309      	str	r3, [sp, #36]	; 0x24
   badc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   badc8:	eeb0 0a48 	vmov.f32	s0, s16
   badcc:	eef0 0a68 	vmov.f32	s1, s17
   badd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   badd4:	f001 f894 	bl	bbf00 <__ulp>
   badd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baddc:	ec53 2b10 	vmov	r2, r3, d0
   bade0:	f7fe fe20 	bl	b9a24 <__aeabi_dmul>
   bade4:	ec53 2b18 	vmov	r2, r3, d8
   bade8:	f7fe fc66 	bl	b96b8 <__adddf3>
   badec:	4682      	mov	sl, r0
   badee:	468b      	mov	fp, r1
   badf0:	e78d      	b.n	bad0e <_strtod_l+0xab6>
   badf2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   badf6:	e7db      	b.n	badb0 <_strtod_l+0xb58>
   badf8:	a311      	add	r3, pc, #68	; (adr r3, bae40 <_strtod_l+0xbe8>)
   badfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   badfe:	f7ff f883 	bl	b9f08 <__aeabi_dcmplt>
   bae02:	e7b2      	b.n	bad6a <_strtod_l+0xb12>
   bae04:	2300      	movs	r3, #0
   bae06:	930a      	str	r3, [sp, #40]	; 0x28
   bae08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bae0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae0c:	6013      	str	r3, [r2, #0]
   bae0e:	f7ff ba6b 	b.w	ba2e8 <_strtod_l+0x90>
   bae12:	2a65      	cmp	r2, #101	; 0x65
   bae14:	f43f ab5f 	beq.w	ba4d6 <_strtod_l+0x27e>
   bae18:	2a45      	cmp	r2, #69	; 0x45
   bae1a:	f43f ab5c 	beq.w	ba4d6 <_strtod_l+0x27e>
   bae1e:	2301      	movs	r3, #1
   bae20:	f7ff bb94 	b.w	ba54c <_strtod_l+0x2f4>
   bae24:	f3af 8000 	nop.w
   bae28:	94a03595 	.word	0x94a03595
   bae2c:	3fdfffff 	.word	0x3fdfffff
   bae30:	35afe535 	.word	0x35afe535
   bae34:	3fe00000 	.word	0x3fe00000
   bae38:	ffc00000 	.word	0xffc00000
   bae3c:	41dfffff 	.word	0x41dfffff
   bae40:	94a03595 	.word	0x94a03595
   bae44:	3fcfffff 	.word	0x3fcfffff
   bae48:	3ff00000 	.word	0x3ff00000
   bae4c:	7ff00000 	.word	0x7ff00000
   bae50:	7fe00000 	.word	0x7fe00000
   bae54:	7c9fffff 	.word	0x7c9fffff
   bae58:	3fe00000 	.word	0x3fe00000
   bae5c:	bff00000 	.word	0xbff00000
   bae60:	7fefffff 	.word	0x7fefffff

000bae64 <strtod>:
   bae64:	460a      	mov	r2, r1
   bae66:	4601      	mov	r1, r0
   bae68:	4802      	ldr	r0, [pc, #8]	; (bae74 <strtod+0x10>)
   bae6a:	4b03      	ldr	r3, [pc, #12]	; (bae78 <strtod+0x14>)
   bae6c:	6800      	ldr	r0, [r0, #0]
   bae6e:	f7ff b9f3 	b.w	ba258 <_strtod_l>
   bae72:	bf00      	nop
   bae74:	2003df8c 	.word	0x2003df8c
   bae78:	2003dff8 	.word	0x2003dff8

000bae7c <strtok>:
   bae7c:	4b16      	ldr	r3, [pc, #88]	; (baed8 <strtok+0x5c>)
   bae7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bae80:	681e      	ldr	r6, [r3, #0]
   bae82:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bae84:	4605      	mov	r5, r0
   bae86:	b9fc      	cbnz	r4, baec8 <strtok+0x4c>
   bae88:	2050      	movs	r0, #80	; 0x50
   bae8a:	9101      	str	r1, [sp, #4]
   bae8c:	f7fc fa68 	bl	b7360 <malloc>
   bae90:	9901      	ldr	r1, [sp, #4]
   bae92:	65b0      	str	r0, [r6, #88]	; 0x58
   bae94:	4602      	mov	r2, r0
   bae96:	b920      	cbnz	r0, baea2 <strtok+0x26>
   bae98:	4b10      	ldr	r3, [pc, #64]	; (baedc <strtok+0x60>)
   bae9a:	4811      	ldr	r0, [pc, #68]	; (baee0 <strtok+0x64>)
   bae9c:	2157      	movs	r1, #87	; 0x57
   bae9e:	f7fc faa7 	bl	b73f0 <__assert_func>
   baea2:	e9c0 4400 	strd	r4, r4, [r0]
   baea6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   baeaa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   baeae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   baeb2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   baeb6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   baeba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   baebe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   baec2:	6184      	str	r4, [r0, #24]
   baec4:	7704      	strb	r4, [r0, #28]
   baec6:	6244      	str	r4, [r0, #36]	; 0x24
   baec8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   baeca:	2301      	movs	r3, #1
   baecc:	4628      	mov	r0, r5
   baece:	b002      	add	sp, #8
   baed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   baed4:	f000 b806 	b.w	baee4 <__strtok_r>
   baed8:	2003df8c 	.word	0x2003df8c
   baedc:	000bce9d 	.word	0x000bce9d
   baee0:	000bcf90 	.word	0x000bcf90

000baee4 <__strtok_r>:
   baee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   baee6:	b908      	cbnz	r0, baeec <__strtok_r+0x8>
   baee8:	6810      	ldr	r0, [r2, #0]
   baeea:	b188      	cbz	r0, baf10 <__strtok_r+0x2c>
   baeec:	4604      	mov	r4, r0
   baeee:	4620      	mov	r0, r4
   baef0:	f814 5b01 	ldrb.w	r5, [r4], #1
   baef4:	460f      	mov	r7, r1
   baef6:	f817 6b01 	ldrb.w	r6, [r7], #1
   baefa:	b91e      	cbnz	r6, baf04 <__strtok_r+0x20>
   baefc:	b965      	cbnz	r5, baf18 <__strtok_r+0x34>
   baefe:	6015      	str	r5, [r2, #0]
   baf00:	4628      	mov	r0, r5
   baf02:	e005      	b.n	baf10 <__strtok_r+0x2c>
   baf04:	42b5      	cmp	r5, r6
   baf06:	d1f6      	bne.n	baef6 <__strtok_r+0x12>
   baf08:	2b00      	cmp	r3, #0
   baf0a:	d1f0      	bne.n	baeee <__strtok_r+0xa>
   baf0c:	6014      	str	r4, [r2, #0]
   baf0e:	7003      	strb	r3, [r0, #0]
   baf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   baf12:	461c      	mov	r4, r3
   baf14:	e00c      	b.n	baf30 <__strtok_r+0x4c>
   baf16:	b915      	cbnz	r5, baf1e <__strtok_r+0x3a>
   baf18:	f814 3b01 	ldrb.w	r3, [r4], #1
   baf1c:	460e      	mov	r6, r1
   baf1e:	f816 5b01 	ldrb.w	r5, [r6], #1
   baf22:	42ab      	cmp	r3, r5
   baf24:	d1f7      	bne.n	baf16 <__strtok_r+0x32>
   baf26:	2b00      	cmp	r3, #0
   baf28:	d0f3      	beq.n	baf12 <__strtok_r+0x2e>
   baf2a:	2300      	movs	r3, #0
   baf2c:	f804 3c01 	strb.w	r3, [r4, #-1]
   baf30:	6014      	str	r4, [r2, #0]
   baf32:	e7ed      	b.n	baf10 <__strtok_r+0x2c>

000baf34 <_strtol_l.constprop.0>:
   baf34:	2b01      	cmp	r3, #1
   baf36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baf3a:	d001      	beq.n	baf40 <_strtol_l.constprop.0+0xc>
   baf3c:	2b24      	cmp	r3, #36	; 0x24
   baf3e:	d906      	bls.n	baf4e <_strtol_l.constprop.0+0x1a>
   baf40:	f7fc fa4e 	bl	b73e0 <__errno>
   baf44:	2316      	movs	r3, #22
   baf46:	6003      	str	r3, [r0, #0]
   baf48:	2000      	movs	r0, #0
   baf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baf4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb034 <_strtol_l.constprop.0+0x100>
   baf52:	460d      	mov	r5, r1
   baf54:	462e      	mov	r6, r5
   baf56:	f815 4b01 	ldrb.w	r4, [r5], #1
   baf5a:	f814 700c 	ldrb.w	r7, [r4, ip]
   baf5e:	f017 0708 	ands.w	r7, r7, #8
   baf62:	d1f7      	bne.n	baf54 <_strtol_l.constprop.0+0x20>
   baf64:	2c2d      	cmp	r4, #45	; 0x2d
   baf66:	d132      	bne.n	bafce <_strtol_l.constprop.0+0x9a>
   baf68:	782c      	ldrb	r4, [r5, #0]
   baf6a:	2701      	movs	r7, #1
   baf6c:	1cb5      	adds	r5, r6, #2
   baf6e:	2b00      	cmp	r3, #0
   baf70:	d05b      	beq.n	bb02a <_strtol_l.constprop.0+0xf6>
   baf72:	2b10      	cmp	r3, #16
   baf74:	d109      	bne.n	baf8a <_strtol_l.constprop.0+0x56>
   baf76:	2c30      	cmp	r4, #48	; 0x30
   baf78:	d107      	bne.n	baf8a <_strtol_l.constprop.0+0x56>
   baf7a:	782c      	ldrb	r4, [r5, #0]
   baf7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   baf80:	2c58      	cmp	r4, #88	; 0x58
   baf82:	d14d      	bne.n	bb020 <_strtol_l.constprop.0+0xec>
   baf84:	786c      	ldrb	r4, [r5, #1]
   baf86:	2310      	movs	r3, #16
   baf88:	3502      	adds	r5, #2
   baf8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   baf8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   baf92:	f04f 0c00 	mov.w	ip, #0
   baf96:	fbb8 f9f3 	udiv	r9, r8, r3
   baf9a:	4666      	mov	r6, ip
   baf9c:	fb03 8a19 	mls	sl, r3, r9, r8
   bafa0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bafa4:	f1be 0f09 	cmp.w	lr, #9
   bafa8:	d816      	bhi.n	bafd8 <_strtol_l.constprop.0+0xa4>
   bafaa:	4674      	mov	r4, lr
   bafac:	42a3      	cmp	r3, r4
   bafae:	dd24      	ble.n	baffa <_strtol_l.constprop.0+0xc6>
   bafb0:	f1bc 0f00 	cmp.w	ip, #0
   bafb4:	db1e      	blt.n	baff4 <_strtol_l.constprop.0+0xc0>
   bafb6:	45b1      	cmp	r9, r6
   bafb8:	d31c      	bcc.n	baff4 <_strtol_l.constprop.0+0xc0>
   bafba:	d101      	bne.n	bafc0 <_strtol_l.constprop.0+0x8c>
   bafbc:	45a2      	cmp	sl, r4
   bafbe:	db19      	blt.n	baff4 <_strtol_l.constprop.0+0xc0>
   bafc0:	fb06 4603 	mla	r6, r6, r3, r4
   bafc4:	f04f 0c01 	mov.w	ip, #1
   bafc8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bafcc:	e7e8      	b.n	bafa0 <_strtol_l.constprop.0+0x6c>
   bafce:	2c2b      	cmp	r4, #43	; 0x2b
   bafd0:	bf04      	itt	eq
   bafd2:	782c      	ldrbeq	r4, [r5, #0]
   bafd4:	1cb5      	addeq	r5, r6, #2
   bafd6:	e7ca      	b.n	baf6e <_strtol_l.constprop.0+0x3a>
   bafd8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bafdc:	f1be 0f19 	cmp.w	lr, #25
   bafe0:	d801      	bhi.n	bafe6 <_strtol_l.constprop.0+0xb2>
   bafe2:	3c37      	subs	r4, #55	; 0x37
   bafe4:	e7e2      	b.n	bafac <_strtol_l.constprop.0+0x78>
   bafe6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bafea:	f1be 0f19 	cmp.w	lr, #25
   bafee:	d804      	bhi.n	baffa <_strtol_l.constprop.0+0xc6>
   baff0:	3c57      	subs	r4, #87	; 0x57
   baff2:	e7db      	b.n	bafac <_strtol_l.constprop.0+0x78>
   baff4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   baff8:	e7e6      	b.n	bafc8 <_strtol_l.constprop.0+0x94>
   baffa:	f1bc 0f00 	cmp.w	ip, #0
   baffe:	da05      	bge.n	bb00c <_strtol_l.constprop.0+0xd8>
   bb000:	2322      	movs	r3, #34	; 0x22
   bb002:	6003      	str	r3, [r0, #0]
   bb004:	4646      	mov	r6, r8
   bb006:	b942      	cbnz	r2, bb01a <_strtol_l.constprop.0+0xe6>
   bb008:	4630      	mov	r0, r6
   bb00a:	e79e      	b.n	baf4a <_strtol_l.constprop.0+0x16>
   bb00c:	b107      	cbz	r7, bb010 <_strtol_l.constprop.0+0xdc>
   bb00e:	4276      	negs	r6, r6
   bb010:	2a00      	cmp	r2, #0
   bb012:	d0f9      	beq.n	bb008 <_strtol_l.constprop.0+0xd4>
   bb014:	f1bc 0f00 	cmp.w	ip, #0
   bb018:	d000      	beq.n	bb01c <_strtol_l.constprop.0+0xe8>
   bb01a:	1e69      	subs	r1, r5, #1
   bb01c:	6011      	str	r1, [r2, #0]
   bb01e:	e7f3      	b.n	bb008 <_strtol_l.constprop.0+0xd4>
   bb020:	2430      	movs	r4, #48	; 0x30
   bb022:	2b00      	cmp	r3, #0
   bb024:	d1b1      	bne.n	baf8a <_strtol_l.constprop.0+0x56>
   bb026:	2308      	movs	r3, #8
   bb028:	e7af      	b.n	baf8a <_strtol_l.constprop.0+0x56>
   bb02a:	2c30      	cmp	r4, #48	; 0x30
   bb02c:	d0a5      	beq.n	baf7a <_strtol_l.constprop.0+0x46>
   bb02e:	230a      	movs	r3, #10
   bb030:	e7ab      	b.n	baf8a <_strtol_l.constprop.0+0x56>
   bb032:	bf00      	nop
   bb034:	000bd010 	.word	0x000bd010

000bb038 <strtol>:
   bb038:	4613      	mov	r3, r2
   bb03a:	460a      	mov	r2, r1
   bb03c:	4601      	mov	r1, r0
   bb03e:	4802      	ldr	r0, [pc, #8]	; (bb048 <strtol+0x10>)
   bb040:	6800      	ldr	r0, [r0, #0]
   bb042:	f7ff bf77 	b.w	baf34 <_strtol_l.constprop.0>
   bb046:	bf00      	nop
   bb048:	2003df8c 	.word	0x2003df8c

000bb04c <__register_exitproc>:
   bb04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb050:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb10c <__register_exitproc+0xc0>
   bb054:	4606      	mov	r6, r0
   bb056:	f8d8 0000 	ldr.w	r0, [r8]
   bb05a:	461f      	mov	r7, r3
   bb05c:	460d      	mov	r5, r1
   bb05e:	4691      	mov	r9, r2
   bb060:	f000 fbc6 	bl	bb7f0 <__retarget_lock_acquire_recursive>
   bb064:	4b25      	ldr	r3, [pc, #148]	; (bb0fc <__register_exitproc+0xb0>)
   bb066:	681c      	ldr	r4, [r3, #0]
   bb068:	b934      	cbnz	r4, bb078 <__register_exitproc+0x2c>
   bb06a:	4c25      	ldr	r4, [pc, #148]	; (bb100 <__register_exitproc+0xb4>)
   bb06c:	601c      	str	r4, [r3, #0]
   bb06e:	4b25      	ldr	r3, [pc, #148]	; (bb104 <__register_exitproc+0xb8>)
   bb070:	b113      	cbz	r3, bb078 <__register_exitproc+0x2c>
   bb072:	681b      	ldr	r3, [r3, #0]
   bb074:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb078:	6863      	ldr	r3, [r4, #4]
   bb07a:	2b1f      	cmp	r3, #31
   bb07c:	dd07      	ble.n	bb08e <__register_exitproc+0x42>
   bb07e:	f8d8 0000 	ldr.w	r0, [r8]
   bb082:	f000 fbb7 	bl	bb7f4 <__retarget_lock_release_recursive>
   bb086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb08e:	b34e      	cbz	r6, bb0e4 <__register_exitproc+0x98>
   bb090:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb094:	b988      	cbnz	r0, bb0ba <__register_exitproc+0x6e>
   bb096:	4b1c      	ldr	r3, [pc, #112]	; (bb108 <__register_exitproc+0xbc>)
   bb098:	b923      	cbnz	r3, bb0a4 <__register_exitproc+0x58>
   bb09a:	f8d8 0000 	ldr.w	r0, [r8]
   bb09e:	f000 fba8 	bl	bb7f2 <__retarget_lock_release>
   bb0a2:	e7f0      	b.n	bb086 <__register_exitproc+0x3a>
   bb0a4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb0a8:	f7fc f95a 	bl	b7360 <malloc>
   bb0ac:	2800      	cmp	r0, #0
   bb0ae:	d0f4      	beq.n	bb09a <__register_exitproc+0x4e>
   bb0b0:	2300      	movs	r3, #0
   bb0b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb0b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb0ba:	6863      	ldr	r3, [r4, #4]
   bb0bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb0c0:	2201      	movs	r2, #1
   bb0c2:	409a      	lsls	r2, r3
   bb0c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb0c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb0cc:	4313      	orrs	r3, r2
   bb0ce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb0d2:	2e02      	cmp	r6, #2
   bb0d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb0d8:	bf02      	ittt	eq
   bb0da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb0de:	4313      	orreq	r3, r2
   bb0e0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb0e4:	6863      	ldr	r3, [r4, #4]
   bb0e6:	f8d8 0000 	ldr.w	r0, [r8]
   bb0ea:	1c5a      	adds	r2, r3, #1
   bb0ec:	3302      	adds	r3, #2
   bb0ee:	6062      	str	r2, [r4, #4]
   bb0f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb0f4:	f000 fb7e 	bl	bb7f4 <__retarget_lock_release_recursive>
   bb0f8:	2000      	movs	r0, #0
   bb0fa:	e7c6      	b.n	bb08a <__register_exitproc+0x3e>
   bb0fc:	2003e7ec 	.word	0x2003e7ec
   bb100:	2003e760 	.word	0x2003e760
   bb104:	00000000 	.word	0x00000000
   bb108:	000b7361 	.word	0x000b7361
   bb10c:	2003dff0 	.word	0x2003dff0

000bb110 <rshift>:
   bb110:	6903      	ldr	r3, [r0, #16]
   bb112:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb11a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb11e:	f100 0414 	add.w	r4, r0, #20
   bb122:	dd45      	ble.n	bb1b0 <rshift+0xa0>
   bb124:	f011 011f 	ands.w	r1, r1, #31
   bb128:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb12c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb130:	d10c      	bne.n	bb14c <rshift+0x3c>
   bb132:	f100 0710 	add.w	r7, r0, #16
   bb136:	4629      	mov	r1, r5
   bb138:	42b1      	cmp	r1, r6
   bb13a:	d334      	bcc.n	bb1a6 <rshift+0x96>
   bb13c:	1a9b      	subs	r3, r3, r2
   bb13e:	009b      	lsls	r3, r3, #2
   bb140:	1eea      	subs	r2, r5, #3
   bb142:	4296      	cmp	r6, r2
   bb144:	bf38      	it	cc
   bb146:	2300      	movcc	r3, #0
   bb148:	4423      	add	r3, r4
   bb14a:	e015      	b.n	bb178 <rshift+0x68>
   bb14c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb150:	f1c1 0820 	rsb	r8, r1, #32
   bb154:	40cf      	lsrs	r7, r1
   bb156:	f105 0e04 	add.w	lr, r5, #4
   bb15a:	46a1      	mov	r9, r4
   bb15c:	4576      	cmp	r6, lr
   bb15e:	46f4      	mov	ip, lr
   bb160:	d815      	bhi.n	bb18e <rshift+0x7e>
   bb162:	1a9a      	subs	r2, r3, r2
   bb164:	0092      	lsls	r2, r2, #2
   bb166:	3a04      	subs	r2, #4
   bb168:	3501      	adds	r5, #1
   bb16a:	42ae      	cmp	r6, r5
   bb16c:	bf38      	it	cc
   bb16e:	2200      	movcc	r2, #0
   bb170:	18a3      	adds	r3, r4, r2
   bb172:	50a7      	str	r7, [r4, r2]
   bb174:	b107      	cbz	r7, bb178 <rshift+0x68>
   bb176:	3304      	adds	r3, #4
   bb178:	1b1a      	subs	r2, r3, r4
   bb17a:	42a3      	cmp	r3, r4
   bb17c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb180:	bf08      	it	eq
   bb182:	2300      	moveq	r3, #0
   bb184:	6102      	str	r2, [r0, #16]
   bb186:	bf08      	it	eq
   bb188:	6143      	streq	r3, [r0, #20]
   bb18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb18e:	f8dc c000 	ldr.w	ip, [ip]
   bb192:	fa0c fc08 	lsl.w	ip, ip, r8
   bb196:	ea4c 0707 	orr.w	r7, ip, r7
   bb19a:	f849 7b04 	str.w	r7, [r9], #4
   bb19e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb1a2:	40cf      	lsrs	r7, r1
   bb1a4:	e7da      	b.n	bb15c <rshift+0x4c>
   bb1a6:	f851 cb04 	ldr.w	ip, [r1], #4
   bb1aa:	f847 cf04 	str.w	ip, [r7, #4]!
   bb1ae:	e7c3      	b.n	bb138 <rshift+0x28>
   bb1b0:	4623      	mov	r3, r4
   bb1b2:	e7e1      	b.n	bb178 <rshift+0x68>

000bb1b4 <__hexdig_fun>:
   bb1b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb1b8:	2b09      	cmp	r3, #9
   bb1ba:	d802      	bhi.n	bb1c2 <__hexdig_fun+0xe>
   bb1bc:	3820      	subs	r0, #32
   bb1be:	b2c0      	uxtb	r0, r0
   bb1c0:	4770      	bx	lr
   bb1c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb1c6:	2b05      	cmp	r3, #5
   bb1c8:	d801      	bhi.n	bb1ce <__hexdig_fun+0x1a>
   bb1ca:	3847      	subs	r0, #71	; 0x47
   bb1cc:	e7f7      	b.n	bb1be <__hexdig_fun+0xa>
   bb1ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb1d2:	2b05      	cmp	r3, #5
   bb1d4:	d801      	bhi.n	bb1da <__hexdig_fun+0x26>
   bb1d6:	3827      	subs	r0, #39	; 0x27
   bb1d8:	e7f1      	b.n	bb1be <__hexdig_fun+0xa>
   bb1da:	2000      	movs	r0, #0
   bb1dc:	4770      	bx	lr
	...

000bb1e0 <__gethex>:
   bb1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb1e4:	ed2d 8b02 	vpush	{d8}
   bb1e8:	b089      	sub	sp, #36	; 0x24
   bb1ea:	ee08 0a10 	vmov	s16, r0
   bb1ee:	9304      	str	r3, [sp, #16]
   bb1f0:	4bb4      	ldr	r3, [pc, #720]	; (bb4c4 <__gethex+0x2e4>)
   bb1f2:	681b      	ldr	r3, [r3, #0]
   bb1f4:	9301      	str	r3, [sp, #4]
   bb1f6:	4618      	mov	r0, r3
   bb1f8:	468b      	mov	fp, r1
   bb1fa:	4690      	mov	r8, r2
   bb1fc:	f7fe ffc9 	bl	ba192 <strlen>
   bb200:	9b01      	ldr	r3, [sp, #4]
   bb202:	f8db 2000 	ldr.w	r2, [fp]
   bb206:	4403      	add	r3, r0
   bb208:	4682      	mov	sl, r0
   bb20a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb20e:	9305      	str	r3, [sp, #20]
   bb210:	1c93      	adds	r3, r2, #2
   bb212:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb216:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb21a:	32fe      	adds	r2, #254	; 0xfe
   bb21c:	18d1      	adds	r1, r2, r3
   bb21e:	461f      	mov	r7, r3
   bb220:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb224:	9100      	str	r1, [sp, #0]
   bb226:	2830      	cmp	r0, #48	; 0x30
   bb228:	d0f8      	beq.n	bb21c <__gethex+0x3c>
   bb22a:	f7ff ffc3 	bl	bb1b4 <__hexdig_fun>
   bb22e:	4604      	mov	r4, r0
   bb230:	2800      	cmp	r0, #0
   bb232:	d13a      	bne.n	bb2aa <__gethex+0xca>
   bb234:	9901      	ldr	r1, [sp, #4]
   bb236:	4652      	mov	r2, sl
   bb238:	4638      	mov	r0, r7
   bb23a:	f7fe ffb2 	bl	ba1a2 <strncmp>
   bb23e:	4605      	mov	r5, r0
   bb240:	2800      	cmp	r0, #0
   bb242:	d168      	bne.n	bb316 <__gethex+0x136>
   bb244:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb248:	eb07 060a 	add.w	r6, r7, sl
   bb24c:	f7ff ffb2 	bl	bb1b4 <__hexdig_fun>
   bb250:	2800      	cmp	r0, #0
   bb252:	d062      	beq.n	bb31a <__gethex+0x13a>
   bb254:	4633      	mov	r3, r6
   bb256:	7818      	ldrb	r0, [r3, #0]
   bb258:	2830      	cmp	r0, #48	; 0x30
   bb25a:	461f      	mov	r7, r3
   bb25c:	f103 0301 	add.w	r3, r3, #1
   bb260:	d0f9      	beq.n	bb256 <__gethex+0x76>
   bb262:	f7ff ffa7 	bl	bb1b4 <__hexdig_fun>
   bb266:	2301      	movs	r3, #1
   bb268:	fab0 f480 	clz	r4, r0
   bb26c:	0964      	lsrs	r4, r4, #5
   bb26e:	4635      	mov	r5, r6
   bb270:	9300      	str	r3, [sp, #0]
   bb272:	463a      	mov	r2, r7
   bb274:	4616      	mov	r6, r2
   bb276:	3201      	adds	r2, #1
   bb278:	7830      	ldrb	r0, [r6, #0]
   bb27a:	f7ff ff9b 	bl	bb1b4 <__hexdig_fun>
   bb27e:	2800      	cmp	r0, #0
   bb280:	d1f8      	bne.n	bb274 <__gethex+0x94>
   bb282:	9901      	ldr	r1, [sp, #4]
   bb284:	4652      	mov	r2, sl
   bb286:	4630      	mov	r0, r6
   bb288:	f7fe ff8b 	bl	ba1a2 <strncmp>
   bb28c:	b980      	cbnz	r0, bb2b0 <__gethex+0xd0>
   bb28e:	b94d      	cbnz	r5, bb2a4 <__gethex+0xc4>
   bb290:	eb06 050a 	add.w	r5, r6, sl
   bb294:	462a      	mov	r2, r5
   bb296:	4616      	mov	r6, r2
   bb298:	3201      	adds	r2, #1
   bb29a:	7830      	ldrb	r0, [r6, #0]
   bb29c:	f7ff ff8a 	bl	bb1b4 <__hexdig_fun>
   bb2a0:	2800      	cmp	r0, #0
   bb2a2:	d1f8      	bne.n	bb296 <__gethex+0xb6>
   bb2a4:	1bad      	subs	r5, r5, r6
   bb2a6:	00ad      	lsls	r5, r5, #2
   bb2a8:	e004      	b.n	bb2b4 <__gethex+0xd4>
   bb2aa:	2400      	movs	r4, #0
   bb2ac:	4625      	mov	r5, r4
   bb2ae:	e7e0      	b.n	bb272 <__gethex+0x92>
   bb2b0:	2d00      	cmp	r5, #0
   bb2b2:	d1f7      	bne.n	bb2a4 <__gethex+0xc4>
   bb2b4:	7833      	ldrb	r3, [r6, #0]
   bb2b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb2ba:	2b50      	cmp	r3, #80	; 0x50
   bb2bc:	d13b      	bne.n	bb336 <__gethex+0x156>
   bb2be:	7873      	ldrb	r3, [r6, #1]
   bb2c0:	2b2b      	cmp	r3, #43	; 0x2b
   bb2c2:	d02c      	beq.n	bb31e <__gethex+0x13e>
   bb2c4:	2b2d      	cmp	r3, #45	; 0x2d
   bb2c6:	d02e      	beq.n	bb326 <__gethex+0x146>
   bb2c8:	1c71      	adds	r1, r6, #1
   bb2ca:	f04f 0900 	mov.w	r9, #0
   bb2ce:	7808      	ldrb	r0, [r1, #0]
   bb2d0:	f7ff ff70 	bl	bb1b4 <__hexdig_fun>
   bb2d4:	1e43      	subs	r3, r0, #1
   bb2d6:	b2db      	uxtb	r3, r3
   bb2d8:	2b18      	cmp	r3, #24
   bb2da:	d82c      	bhi.n	bb336 <__gethex+0x156>
   bb2dc:	f1a0 0210 	sub.w	r2, r0, #16
   bb2e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb2e4:	f7ff ff66 	bl	bb1b4 <__hexdig_fun>
   bb2e8:	1e43      	subs	r3, r0, #1
   bb2ea:	b2db      	uxtb	r3, r3
   bb2ec:	2b18      	cmp	r3, #24
   bb2ee:	d91d      	bls.n	bb32c <__gethex+0x14c>
   bb2f0:	f1b9 0f00 	cmp.w	r9, #0
   bb2f4:	d000      	beq.n	bb2f8 <__gethex+0x118>
   bb2f6:	4252      	negs	r2, r2
   bb2f8:	4415      	add	r5, r2
   bb2fa:	f8cb 1000 	str.w	r1, [fp]
   bb2fe:	b1e4      	cbz	r4, bb33a <__gethex+0x15a>
   bb300:	9b00      	ldr	r3, [sp, #0]
   bb302:	2b00      	cmp	r3, #0
   bb304:	bf14      	ite	ne
   bb306:	2700      	movne	r7, #0
   bb308:	2706      	moveq	r7, #6
   bb30a:	4638      	mov	r0, r7
   bb30c:	b009      	add	sp, #36	; 0x24
   bb30e:	ecbd 8b02 	vpop	{d8}
   bb312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb316:	463e      	mov	r6, r7
   bb318:	4625      	mov	r5, r4
   bb31a:	2401      	movs	r4, #1
   bb31c:	e7ca      	b.n	bb2b4 <__gethex+0xd4>
   bb31e:	f04f 0900 	mov.w	r9, #0
   bb322:	1cb1      	adds	r1, r6, #2
   bb324:	e7d3      	b.n	bb2ce <__gethex+0xee>
   bb326:	f04f 0901 	mov.w	r9, #1
   bb32a:	e7fa      	b.n	bb322 <__gethex+0x142>
   bb32c:	230a      	movs	r3, #10
   bb32e:	fb03 0202 	mla	r2, r3, r2, r0
   bb332:	3a10      	subs	r2, #16
   bb334:	e7d4      	b.n	bb2e0 <__gethex+0x100>
   bb336:	4631      	mov	r1, r6
   bb338:	e7df      	b.n	bb2fa <__gethex+0x11a>
   bb33a:	1bf3      	subs	r3, r6, r7
   bb33c:	3b01      	subs	r3, #1
   bb33e:	4621      	mov	r1, r4
   bb340:	2b07      	cmp	r3, #7
   bb342:	dc0b      	bgt.n	bb35c <__gethex+0x17c>
   bb344:	ee18 0a10 	vmov	r0, s16
   bb348:	f000 fa68 	bl	bb81c <_Balloc>
   bb34c:	4604      	mov	r4, r0
   bb34e:	b940      	cbnz	r0, bb362 <__gethex+0x182>
   bb350:	4b5d      	ldr	r3, [pc, #372]	; (bb4c8 <__gethex+0x2e8>)
   bb352:	4602      	mov	r2, r0
   bb354:	21de      	movs	r1, #222	; 0xde
   bb356:	485d      	ldr	r0, [pc, #372]	; (bb4cc <__gethex+0x2ec>)
   bb358:	f7fc f84a 	bl	b73f0 <__assert_func>
   bb35c:	3101      	adds	r1, #1
   bb35e:	105b      	asrs	r3, r3, #1
   bb360:	e7ee      	b.n	bb340 <__gethex+0x160>
   bb362:	f100 0914 	add.w	r9, r0, #20
   bb366:	f04f 0b00 	mov.w	fp, #0
   bb36a:	f1ca 0301 	rsb	r3, sl, #1
   bb36e:	f8cd 9008 	str.w	r9, [sp, #8]
   bb372:	f8cd b000 	str.w	fp, [sp]
   bb376:	9306      	str	r3, [sp, #24]
   bb378:	42b7      	cmp	r7, r6
   bb37a:	d340      	bcc.n	bb3fe <__gethex+0x21e>
   bb37c:	9802      	ldr	r0, [sp, #8]
   bb37e:	9b00      	ldr	r3, [sp, #0]
   bb380:	f840 3b04 	str.w	r3, [r0], #4
   bb384:	eba0 0009 	sub.w	r0, r0, r9
   bb388:	1080      	asrs	r0, r0, #2
   bb38a:	0146      	lsls	r6, r0, #5
   bb38c:	6120      	str	r0, [r4, #16]
   bb38e:	4618      	mov	r0, r3
   bb390:	f000 fb36 	bl	bba00 <__hi0bits>
   bb394:	1a30      	subs	r0, r6, r0
   bb396:	f8d8 6000 	ldr.w	r6, [r8]
   bb39a:	42b0      	cmp	r0, r6
   bb39c:	dd63      	ble.n	bb466 <__gethex+0x286>
   bb39e:	1b87      	subs	r7, r0, r6
   bb3a0:	4639      	mov	r1, r7
   bb3a2:	4620      	mov	r0, r4
   bb3a4:	f000 feda 	bl	bc15c <__any_on>
   bb3a8:	4682      	mov	sl, r0
   bb3aa:	b1a8      	cbz	r0, bb3d8 <__gethex+0x1f8>
   bb3ac:	1e7b      	subs	r3, r7, #1
   bb3ae:	1159      	asrs	r1, r3, #5
   bb3b0:	f003 021f 	and.w	r2, r3, #31
   bb3b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb3b8:	f04f 0a01 	mov.w	sl, #1
   bb3bc:	fa0a f202 	lsl.w	r2, sl, r2
   bb3c0:	420a      	tst	r2, r1
   bb3c2:	d009      	beq.n	bb3d8 <__gethex+0x1f8>
   bb3c4:	4553      	cmp	r3, sl
   bb3c6:	dd05      	ble.n	bb3d4 <__gethex+0x1f4>
   bb3c8:	1eb9      	subs	r1, r7, #2
   bb3ca:	4620      	mov	r0, r4
   bb3cc:	f000 fec6 	bl	bc15c <__any_on>
   bb3d0:	2800      	cmp	r0, #0
   bb3d2:	d145      	bne.n	bb460 <__gethex+0x280>
   bb3d4:	f04f 0a02 	mov.w	sl, #2
   bb3d8:	4639      	mov	r1, r7
   bb3da:	4620      	mov	r0, r4
   bb3dc:	f7ff fe98 	bl	bb110 <rshift>
   bb3e0:	443d      	add	r5, r7
   bb3e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb3e6:	42ab      	cmp	r3, r5
   bb3e8:	da4c      	bge.n	bb484 <__gethex+0x2a4>
   bb3ea:	ee18 0a10 	vmov	r0, s16
   bb3ee:	4621      	mov	r1, r4
   bb3f0:	f000 fa54 	bl	bb89c <_Bfree>
   bb3f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb3f6:	2300      	movs	r3, #0
   bb3f8:	6013      	str	r3, [r2, #0]
   bb3fa:	27a3      	movs	r7, #163	; 0xa3
   bb3fc:	e785      	b.n	bb30a <__gethex+0x12a>
   bb3fe:	1e73      	subs	r3, r6, #1
   bb400:	9a05      	ldr	r2, [sp, #20]
   bb402:	9303      	str	r3, [sp, #12]
   bb404:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb408:	4293      	cmp	r3, r2
   bb40a:	d019      	beq.n	bb440 <__gethex+0x260>
   bb40c:	f1bb 0f20 	cmp.w	fp, #32
   bb410:	d107      	bne.n	bb422 <__gethex+0x242>
   bb412:	9b02      	ldr	r3, [sp, #8]
   bb414:	9a00      	ldr	r2, [sp, #0]
   bb416:	f843 2b04 	str.w	r2, [r3], #4
   bb41a:	9302      	str	r3, [sp, #8]
   bb41c:	2300      	movs	r3, #0
   bb41e:	9300      	str	r3, [sp, #0]
   bb420:	469b      	mov	fp, r3
   bb422:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb426:	f7ff fec5 	bl	bb1b4 <__hexdig_fun>
   bb42a:	9b00      	ldr	r3, [sp, #0]
   bb42c:	f000 000f 	and.w	r0, r0, #15
   bb430:	fa00 f00b 	lsl.w	r0, r0, fp
   bb434:	4303      	orrs	r3, r0
   bb436:	9300      	str	r3, [sp, #0]
   bb438:	f10b 0b04 	add.w	fp, fp, #4
   bb43c:	9b03      	ldr	r3, [sp, #12]
   bb43e:	e00d      	b.n	bb45c <__gethex+0x27c>
   bb440:	9b03      	ldr	r3, [sp, #12]
   bb442:	9a06      	ldr	r2, [sp, #24]
   bb444:	4413      	add	r3, r2
   bb446:	42bb      	cmp	r3, r7
   bb448:	d3e0      	bcc.n	bb40c <__gethex+0x22c>
   bb44a:	4618      	mov	r0, r3
   bb44c:	9901      	ldr	r1, [sp, #4]
   bb44e:	9307      	str	r3, [sp, #28]
   bb450:	4652      	mov	r2, sl
   bb452:	f7fe fea6 	bl	ba1a2 <strncmp>
   bb456:	9b07      	ldr	r3, [sp, #28]
   bb458:	2800      	cmp	r0, #0
   bb45a:	d1d7      	bne.n	bb40c <__gethex+0x22c>
   bb45c:	461e      	mov	r6, r3
   bb45e:	e78b      	b.n	bb378 <__gethex+0x198>
   bb460:	f04f 0a03 	mov.w	sl, #3
   bb464:	e7b8      	b.n	bb3d8 <__gethex+0x1f8>
   bb466:	da0a      	bge.n	bb47e <__gethex+0x29e>
   bb468:	1a37      	subs	r7, r6, r0
   bb46a:	4621      	mov	r1, r4
   bb46c:	ee18 0a10 	vmov	r0, s16
   bb470:	463a      	mov	r2, r7
   bb472:	f000 fc2f 	bl	bbcd4 <__lshift>
   bb476:	1bed      	subs	r5, r5, r7
   bb478:	4604      	mov	r4, r0
   bb47a:	f100 0914 	add.w	r9, r0, #20
   bb47e:	f04f 0a00 	mov.w	sl, #0
   bb482:	e7ae      	b.n	bb3e2 <__gethex+0x202>
   bb484:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb488:	42a8      	cmp	r0, r5
   bb48a:	dd72      	ble.n	bb572 <__gethex+0x392>
   bb48c:	1b45      	subs	r5, r0, r5
   bb48e:	42ae      	cmp	r6, r5
   bb490:	dc36      	bgt.n	bb500 <__gethex+0x320>
   bb492:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb496:	2b02      	cmp	r3, #2
   bb498:	d02a      	beq.n	bb4f0 <__gethex+0x310>
   bb49a:	2b03      	cmp	r3, #3
   bb49c:	d02c      	beq.n	bb4f8 <__gethex+0x318>
   bb49e:	2b01      	cmp	r3, #1
   bb4a0:	d11c      	bne.n	bb4dc <__gethex+0x2fc>
   bb4a2:	42ae      	cmp	r6, r5
   bb4a4:	d11a      	bne.n	bb4dc <__gethex+0x2fc>
   bb4a6:	2e01      	cmp	r6, #1
   bb4a8:	d112      	bne.n	bb4d0 <__gethex+0x2f0>
   bb4aa:	9a04      	ldr	r2, [sp, #16]
   bb4ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb4b0:	6013      	str	r3, [r2, #0]
   bb4b2:	2301      	movs	r3, #1
   bb4b4:	6123      	str	r3, [r4, #16]
   bb4b6:	f8c9 3000 	str.w	r3, [r9]
   bb4ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb4bc:	2762      	movs	r7, #98	; 0x62
   bb4be:	601c      	str	r4, [r3, #0]
   bb4c0:	e723      	b.n	bb30a <__gethex+0x12a>
   bb4c2:	bf00      	nop
   bb4c4:	000bd1a8 	.word	0x000bd1a8
   bb4c8:	000bd110 	.word	0x000bd110
   bb4cc:	000bd121 	.word	0x000bd121
   bb4d0:	1e71      	subs	r1, r6, #1
   bb4d2:	4620      	mov	r0, r4
   bb4d4:	f000 fe42 	bl	bc15c <__any_on>
   bb4d8:	2800      	cmp	r0, #0
   bb4da:	d1e6      	bne.n	bb4aa <__gethex+0x2ca>
   bb4dc:	ee18 0a10 	vmov	r0, s16
   bb4e0:	4621      	mov	r1, r4
   bb4e2:	f000 f9db 	bl	bb89c <_Bfree>
   bb4e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb4e8:	2300      	movs	r3, #0
   bb4ea:	6013      	str	r3, [r2, #0]
   bb4ec:	2750      	movs	r7, #80	; 0x50
   bb4ee:	e70c      	b.n	bb30a <__gethex+0x12a>
   bb4f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb4f2:	2b00      	cmp	r3, #0
   bb4f4:	d1f2      	bne.n	bb4dc <__gethex+0x2fc>
   bb4f6:	e7d8      	b.n	bb4aa <__gethex+0x2ca>
   bb4f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb4fa:	2b00      	cmp	r3, #0
   bb4fc:	d1d5      	bne.n	bb4aa <__gethex+0x2ca>
   bb4fe:	e7ed      	b.n	bb4dc <__gethex+0x2fc>
   bb500:	1e6f      	subs	r7, r5, #1
   bb502:	f1ba 0f00 	cmp.w	sl, #0
   bb506:	d131      	bne.n	bb56c <__gethex+0x38c>
   bb508:	b127      	cbz	r7, bb514 <__gethex+0x334>
   bb50a:	4639      	mov	r1, r7
   bb50c:	4620      	mov	r0, r4
   bb50e:	f000 fe25 	bl	bc15c <__any_on>
   bb512:	4682      	mov	sl, r0
   bb514:	117b      	asrs	r3, r7, #5
   bb516:	2101      	movs	r1, #1
   bb518:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb51c:	f007 071f 	and.w	r7, r7, #31
   bb520:	fa01 f707 	lsl.w	r7, r1, r7
   bb524:	421f      	tst	r7, r3
   bb526:	4629      	mov	r1, r5
   bb528:	4620      	mov	r0, r4
   bb52a:	bf18      	it	ne
   bb52c:	f04a 0a02 	orrne.w	sl, sl, #2
   bb530:	1b76      	subs	r6, r6, r5
   bb532:	f7ff fded 	bl	bb110 <rshift>
   bb536:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb53a:	2702      	movs	r7, #2
   bb53c:	f1ba 0f00 	cmp.w	sl, #0
   bb540:	d048      	beq.n	bb5d4 <__gethex+0x3f4>
   bb542:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb546:	2b02      	cmp	r3, #2
   bb548:	d015      	beq.n	bb576 <__gethex+0x396>
   bb54a:	2b03      	cmp	r3, #3
   bb54c:	d017      	beq.n	bb57e <__gethex+0x39e>
   bb54e:	2b01      	cmp	r3, #1
   bb550:	d109      	bne.n	bb566 <__gethex+0x386>
   bb552:	f01a 0f02 	tst.w	sl, #2
   bb556:	d006      	beq.n	bb566 <__gethex+0x386>
   bb558:	f8d9 0000 	ldr.w	r0, [r9]
   bb55c:	ea4a 0a00 	orr.w	sl, sl, r0
   bb560:	f01a 0f01 	tst.w	sl, #1
   bb564:	d10e      	bne.n	bb584 <__gethex+0x3a4>
   bb566:	f047 0710 	orr.w	r7, r7, #16
   bb56a:	e033      	b.n	bb5d4 <__gethex+0x3f4>
   bb56c:	f04f 0a01 	mov.w	sl, #1
   bb570:	e7d0      	b.n	bb514 <__gethex+0x334>
   bb572:	2701      	movs	r7, #1
   bb574:	e7e2      	b.n	bb53c <__gethex+0x35c>
   bb576:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb578:	f1c3 0301 	rsb	r3, r3, #1
   bb57c:	9315      	str	r3, [sp, #84]	; 0x54
   bb57e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb580:	2b00      	cmp	r3, #0
   bb582:	d0f0      	beq.n	bb566 <__gethex+0x386>
   bb584:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb588:	f104 0314 	add.w	r3, r4, #20
   bb58c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb590:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb594:	f04f 0c00 	mov.w	ip, #0
   bb598:	4618      	mov	r0, r3
   bb59a:	f853 2b04 	ldr.w	r2, [r3], #4
   bb59e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bb5a2:	d01c      	beq.n	bb5de <__gethex+0x3fe>
   bb5a4:	3201      	adds	r2, #1
   bb5a6:	6002      	str	r2, [r0, #0]
   bb5a8:	2f02      	cmp	r7, #2
   bb5aa:	f104 0314 	add.w	r3, r4, #20
   bb5ae:	d13f      	bne.n	bb630 <__gethex+0x450>
   bb5b0:	f8d8 2000 	ldr.w	r2, [r8]
   bb5b4:	3a01      	subs	r2, #1
   bb5b6:	42b2      	cmp	r2, r6
   bb5b8:	d10a      	bne.n	bb5d0 <__gethex+0x3f0>
   bb5ba:	1171      	asrs	r1, r6, #5
   bb5bc:	2201      	movs	r2, #1
   bb5be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb5c2:	f006 061f 	and.w	r6, r6, #31
   bb5c6:	fa02 f606 	lsl.w	r6, r2, r6
   bb5ca:	421e      	tst	r6, r3
   bb5cc:	bf18      	it	ne
   bb5ce:	4617      	movne	r7, r2
   bb5d0:	f047 0720 	orr.w	r7, r7, #32
   bb5d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb5d6:	601c      	str	r4, [r3, #0]
   bb5d8:	9b04      	ldr	r3, [sp, #16]
   bb5da:	601d      	str	r5, [r3, #0]
   bb5dc:	e695      	b.n	bb30a <__gethex+0x12a>
   bb5de:	4299      	cmp	r1, r3
   bb5e0:	f843 cc04 	str.w	ip, [r3, #-4]
   bb5e4:	d8d8      	bhi.n	bb598 <__gethex+0x3b8>
   bb5e6:	68a3      	ldr	r3, [r4, #8]
   bb5e8:	459b      	cmp	fp, r3
   bb5ea:	db19      	blt.n	bb620 <__gethex+0x440>
   bb5ec:	6861      	ldr	r1, [r4, #4]
   bb5ee:	ee18 0a10 	vmov	r0, s16
   bb5f2:	3101      	adds	r1, #1
   bb5f4:	f000 f912 	bl	bb81c <_Balloc>
   bb5f8:	4681      	mov	r9, r0
   bb5fa:	b918      	cbnz	r0, bb604 <__gethex+0x424>
   bb5fc:	4b1a      	ldr	r3, [pc, #104]	; (bb668 <__gethex+0x488>)
   bb5fe:	4602      	mov	r2, r0
   bb600:	2184      	movs	r1, #132	; 0x84
   bb602:	e6a8      	b.n	bb356 <__gethex+0x176>
   bb604:	6922      	ldr	r2, [r4, #16]
   bb606:	3202      	adds	r2, #2
   bb608:	f104 010c 	add.w	r1, r4, #12
   bb60c:	0092      	lsls	r2, r2, #2
   bb60e:	300c      	adds	r0, #12
   bb610:	f7fe fd3d 	bl	ba08e <memcpy>
   bb614:	4621      	mov	r1, r4
   bb616:	ee18 0a10 	vmov	r0, s16
   bb61a:	f000 f93f 	bl	bb89c <_Bfree>
   bb61e:	464c      	mov	r4, r9
   bb620:	6923      	ldr	r3, [r4, #16]
   bb622:	1c5a      	adds	r2, r3, #1
   bb624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb628:	6122      	str	r2, [r4, #16]
   bb62a:	2201      	movs	r2, #1
   bb62c:	615a      	str	r2, [r3, #20]
   bb62e:	e7bb      	b.n	bb5a8 <__gethex+0x3c8>
   bb630:	6922      	ldr	r2, [r4, #16]
   bb632:	455a      	cmp	r2, fp
   bb634:	dd0b      	ble.n	bb64e <__gethex+0x46e>
   bb636:	2101      	movs	r1, #1
   bb638:	4620      	mov	r0, r4
   bb63a:	f7ff fd69 	bl	bb110 <rshift>
   bb63e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb642:	3501      	adds	r5, #1
   bb644:	42ab      	cmp	r3, r5
   bb646:	f6ff aed0 	blt.w	bb3ea <__gethex+0x20a>
   bb64a:	2701      	movs	r7, #1
   bb64c:	e7c0      	b.n	bb5d0 <__gethex+0x3f0>
   bb64e:	f016 061f 	ands.w	r6, r6, #31
   bb652:	d0fa      	beq.n	bb64a <__gethex+0x46a>
   bb654:	4453      	add	r3, sl
   bb656:	f1c6 0620 	rsb	r6, r6, #32
   bb65a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb65e:	f000 f9cf 	bl	bba00 <__hi0bits>
   bb662:	42b0      	cmp	r0, r6
   bb664:	dbe7      	blt.n	bb636 <__gethex+0x456>
   bb666:	e7f0      	b.n	bb64a <__gethex+0x46a>
   bb668:	000bd110 	.word	0x000bd110

000bb66c <L_shift>:
   bb66c:	f1c2 0208 	rsb	r2, r2, #8
   bb670:	0092      	lsls	r2, r2, #2
   bb672:	b570      	push	{r4, r5, r6, lr}
   bb674:	f1c2 0620 	rsb	r6, r2, #32
   bb678:	6843      	ldr	r3, [r0, #4]
   bb67a:	6804      	ldr	r4, [r0, #0]
   bb67c:	fa03 f506 	lsl.w	r5, r3, r6
   bb680:	432c      	orrs	r4, r5
   bb682:	40d3      	lsrs	r3, r2
   bb684:	6004      	str	r4, [r0, #0]
   bb686:	f840 3f04 	str.w	r3, [r0, #4]!
   bb68a:	4288      	cmp	r0, r1
   bb68c:	d3f4      	bcc.n	bb678 <L_shift+0xc>
   bb68e:	bd70      	pop	{r4, r5, r6, pc}

000bb690 <__match>:
   bb690:	b530      	push	{r4, r5, lr}
   bb692:	6803      	ldr	r3, [r0, #0]
   bb694:	3301      	adds	r3, #1
   bb696:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb69a:	b914      	cbnz	r4, bb6a2 <__match+0x12>
   bb69c:	6003      	str	r3, [r0, #0]
   bb69e:	2001      	movs	r0, #1
   bb6a0:	bd30      	pop	{r4, r5, pc}
   bb6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb6a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb6aa:	2d19      	cmp	r5, #25
   bb6ac:	bf98      	it	ls
   bb6ae:	3220      	addls	r2, #32
   bb6b0:	42a2      	cmp	r2, r4
   bb6b2:	d0f0      	beq.n	bb696 <__match+0x6>
   bb6b4:	2000      	movs	r0, #0
   bb6b6:	e7f3      	b.n	bb6a0 <__match+0x10>

000bb6b8 <__hexnan>:
   bb6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb6bc:	680b      	ldr	r3, [r1, #0]
   bb6be:	115e      	asrs	r6, r3, #5
   bb6c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb6c4:	f013 031f 	ands.w	r3, r3, #31
   bb6c8:	b087      	sub	sp, #28
   bb6ca:	bf18      	it	ne
   bb6cc:	3604      	addne	r6, #4
   bb6ce:	2500      	movs	r5, #0
   bb6d0:	1f37      	subs	r7, r6, #4
   bb6d2:	4690      	mov	r8, r2
   bb6d4:	6802      	ldr	r2, [r0, #0]
   bb6d6:	9301      	str	r3, [sp, #4]
   bb6d8:	4682      	mov	sl, r0
   bb6da:	f846 5c04 	str.w	r5, [r6, #-4]
   bb6de:	46b9      	mov	r9, r7
   bb6e0:	463c      	mov	r4, r7
   bb6e2:	9502      	str	r5, [sp, #8]
   bb6e4:	46ab      	mov	fp, r5
   bb6e6:	7851      	ldrb	r1, [r2, #1]
   bb6e8:	1c53      	adds	r3, r2, #1
   bb6ea:	9303      	str	r3, [sp, #12]
   bb6ec:	b341      	cbz	r1, bb740 <__hexnan+0x88>
   bb6ee:	4608      	mov	r0, r1
   bb6f0:	9205      	str	r2, [sp, #20]
   bb6f2:	9104      	str	r1, [sp, #16]
   bb6f4:	f7ff fd5e 	bl	bb1b4 <__hexdig_fun>
   bb6f8:	2800      	cmp	r0, #0
   bb6fa:	d14f      	bne.n	bb79c <__hexnan+0xe4>
   bb6fc:	9904      	ldr	r1, [sp, #16]
   bb6fe:	9a05      	ldr	r2, [sp, #20]
   bb700:	2920      	cmp	r1, #32
   bb702:	d818      	bhi.n	bb736 <__hexnan+0x7e>
   bb704:	9b02      	ldr	r3, [sp, #8]
   bb706:	459b      	cmp	fp, r3
   bb708:	dd13      	ble.n	bb732 <__hexnan+0x7a>
   bb70a:	454c      	cmp	r4, r9
   bb70c:	d206      	bcs.n	bb71c <__hexnan+0x64>
   bb70e:	2d07      	cmp	r5, #7
   bb710:	dc04      	bgt.n	bb71c <__hexnan+0x64>
   bb712:	462a      	mov	r2, r5
   bb714:	4649      	mov	r1, r9
   bb716:	4620      	mov	r0, r4
   bb718:	f7ff ffa8 	bl	bb66c <L_shift>
   bb71c:	4544      	cmp	r4, r8
   bb71e:	d950      	bls.n	bb7c2 <__hexnan+0x10a>
   bb720:	2300      	movs	r3, #0
   bb722:	f1a4 0904 	sub.w	r9, r4, #4
   bb726:	f844 3c04 	str.w	r3, [r4, #-4]
   bb72a:	f8cd b008 	str.w	fp, [sp, #8]
   bb72e:	464c      	mov	r4, r9
   bb730:	461d      	mov	r5, r3
   bb732:	9a03      	ldr	r2, [sp, #12]
   bb734:	e7d7      	b.n	bb6e6 <__hexnan+0x2e>
   bb736:	2929      	cmp	r1, #41	; 0x29
   bb738:	d156      	bne.n	bb7e8 <__hexnan+0x130>
   bb73a:	3202      	adds	r2, #2
   bb73c:	f8ca 2000 	str.w	r2, [sl]
   bb740:	f1bb 0f00 	cmp.w	fp, #0
   bb744:	d050      	beq.n	bb7e8 <__hexnan+0x130>
   bb746:	454c      	cmp	r4, r9
   bb748:	d206      	bcs.n	bb758 <__hexnan+0xa0>
   bb74a:	2d07      	cmp	r5, #7
   bb74c:	dc04      	bgt.n	bb758 <__hexnan+0xa0>
   bb74e:	462a      	mov	r2, r5
   bb750:	4649      	mov	r1, r9
   bb752:	4620      	mov	r0, r4
   bb754:	f7ff ff8a 	bl	bb66c <L_shift>
   bb758:	4544      	cmp	r4, r8
   bb75a:	d934      	bls.n	bb7c6 <__hexnan+0x10e>
   bb75c:	f1a8 0204 	sub.w	r2, r8, #4
   bb760:	4623      	mov	r3, r4
   bb762:	f853 1b04 	ldr.w	r1, [r3], #4
   bb766:	f842 1f04 	str.w	r1, [r2, #4]!
   bb76a:	429f      	cmp	r7, r3
   bb76c:	d2f9      	bcs.n	bb762 <__hexnan+0xaa>
   bb76e:	1b3b      	subs	r3, r7, r4
   bb770:	f023 0303 	bic.w	r3, r3, #3
   bb774:	3304      	adds	r3, #4
   bb776:	3401      	adds	r4, #1
   bb778:	3e03      	subs	r6, #3
   bb77a:	42b4      	cmp	r4, r6
   bb77c:	bf88      	it	hi
   bb77e:	2304      	movhi	r3, #4
   bb780:	4443      	add	r3, r8
   bb782:	2200      	movs	r2, #0
   bb784:	f843 2b04 	str.w	r2, [r3], #4
   bb788:	429f      	cmp	r7, r3
   bb78a:	d2fb      	bcs.n	bb784 <__hexnan+0xcc>
   bb78c:	683b      	ldr	r3, [r7, #0]
   bb78e:	b91b      	cbnz	r3, bb798 <__hexnan+0xe0>
   bb790:	4547      	cmp	r7, r8
   bb792:	d127      	bne.n	bb7e4 <__hexnan+0x12c>
   bb794:	2301      	movs	r3, #1
   bb796:	603b      	str	r3, [r7, #0]
   bb798:	2005      	movs	r0, #5
   bb79a:	e026      	b.n	bb7ea <__hexnan+0x132>
   bb79c:	3501      	adds	r5, #1
   bb79e:	2d08      	cmp	r5, #8
   bb7a0:	f10b 0b01 	add.w	fp, fp, #1
   bb7a4:	dd06      	ble.n	bb7b4 <__hexnan+0xfc>
   bb7a6:	4544      	cmp	r4, r8
   bb7a8:	d9c3      	bls.n	bb732 <__hexnan+0x7a>
   bb7aa:	2300      	movs	r3, #0
   bb7ac:	f844 3c04 	str.w	r3, [r4, #-4]
   bb7b0:	2501      	movs	r5, #1
   bb7b2:	3c04      	subs	r4, #4
   bb7b4:	6822      	ldr	r2, [r4, #0]
   bb7b6:	f000 000f 	and.w	r0, r0, #15
   bb7ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb7be:	6022      	str	r2, [r4, #0]
   bb7c0:	e7b7      	b.n	bb732 <__hexnan+0x7a>
   bb7c2:	2508      	movs	r5, #8
   bb7c4:	e7b5      	b.n	bb732 <__hexnan+0x7a>
   bb7c6:	9b01      	ldr	r3, [sp, #4]
   bb7c8:	2b00      	cmp	r3, #0
   bb7ca:	d0df      	beq.n	bb78c <__hexnan+0xd4>
   bb7cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb7d0:	f1c3 0320 	rsb	r3, r3, #32
   bb7d4:	fa22 f303 	lsr.w	r3, r2, r3
   bb7d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb7dc:	401a      	ands	r2, r3
   bb7de:	f846 2c04 	str.w	r2, [r6, #-4]
   bb7e2:	e7d3      	b.n	bb78c <__hexnan+0xd4>
   bb7e4:	3f04      	subs	r7, #4
   bb7e6:	e7d1      	b.n	bb78c <__hexnan+0xd4>
   bb7e8:	2004      	movs	r0, #4
   bb7ea:	b007      	add	sp, #28
   bb7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb7f0 <__retarget_lock_acquire_recursive>:
   bb7f0:	4770      	bx	lr

000bb7f2 <__retarget_lock_release>:
   bb7f2:	4770      	bx	lr

000bb7f4 <__retarget_lock_release_recursive>:
   bb7f4:	4770      	bx	lr

000bb7f6 <__ascii_mbtowc>:
   bb7f6:	b082      	sub	sp, #8
   bb7f8:	b901      	cbnz	r1, bb7fc <__ascii_mbtowc+0x6>
   bb7fa:	a901      	add	r1, sp, #4
   bb7fc:	b142      	cbz	r2, bb810 <__ascii_mbtowc+0x1a>
   bb7fe:	b14b      	cbz	r3, bb814 <__ascii_mbtowc+0x1e>
   bb800:	7813      	ldrb	r3, [r2, #0]
   bb802:	600b      	str	r3, [r1, #0]
   bb804:	7812      	ldrb	r2, [r2, #0]
   bb806:	1e10      	subs	r0, r2, #0
   bb808:	bf18      	it	ne
   bb80a:	2001      	movne	r0, #1
   bb80c:	b002      	add	sp, #8
   bb80e:	4770      	bx	lr
   bb810:	4610      	mov	r0, r2
   bb812:	e7fb      	b.n	bb80c <__ascii_mbtowc+0x16>
   bb814:	f06f 0001 	mvn.w	r0, #1
   bb818:	e7f8      	b.n	bb80c <__ascii_mbtowc+0x16>
	...

000bb81c <_Balloc>:
   bb81c:	b570      	push	{r4, r5, r6, lr}
   bb81e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb820:	4604      	mov	r4, r0
   bb822:	460d      	mov	r5, r1
   bb824:	b976      	cbnz	r6, bb844 <_Balloc+0x28>
   bb826:	2010      	movs	r0, #16
   bb828:	f7fb fd9a 	bl	b7360 <malloc>
   bb82c:	4602      	mov	r2, r0
   bb82e:	6260      	str	r0, [r4, #36]	; 0x24
   bb830:	b920      	cbnz	r0, bb83c <_Balloc+0x20>
   bb832:	4b18      	ldr	r3, [pc, #96]	; (bb894 <_Balloc+0x78>)
   bb834:	4818      	ldr	r0, [pc, #96]	; (bb898 <_Balloc+0x7c>)
   bb836:	2166      	movs	r1, #102	; 0x66
   bb838:	f7fb fdda 	bl	b73f0 <__assert_func>
   bb83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb840:	6006      	str	r6, [r0, #0]
   bb842:	60c6      	str	r6, [r0, #12]
   bb844:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bb846:	68f3      	ldr	r3, [r6, #12]
   bb848:	b183      	cbz	r3, bb86c <_Balloc+0x50>
   bb84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb84c:	68db      	ldr	r3, [r3, #12]
   bb84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bb852:	b9b8      	cbnz	r0, bb884 <_Balloc+0x68>
   bb854:	2101      	movs	r1, #1
   bb856:	fa01 f605 	lsl.w	r6, r1, r5
   bb85a:	1d72      	adds	r2, r6, #5
   bb85c:	0092      	lsls	r2, r2, #2
   bb85e:	4620      	mov	r0, r4
   bb860:	f000 fc9d 	bl	bc19e <_calloc_r>
   bb864:	b160      	cbz	r0, bb880 <_Balloc+0x64>
   bb866:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bb86a:	e00e      	b.n	bb88a <_Balloc+0x6e>
   bb86c:	2221      	movs	r2, #33	; 0x21
   bb86e:	2104      	movs	r1, #4
   bb870:	4620      	mov	r0, r4
   bb872:	f000 fc94 	bl	bc19e <_calloc_r>
   bb876:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb878:	60f0      	str	r0, [r6, #12]
   bb87a:	68db      	ldr	r3, [r3, #12]
   bb87c:	2b00      	cmp	r3, #0
   bb87e:	d1e4      	bne.n	bb84a <_Balloc+0x2e>
   bb880:	2000      	movs	r0, #0
   bb882:	bd70      	pop	{r4, r5, r6, pc}
   bb884:	6802      	ldr	r2, [r0, #0]
   bb886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bb88a:	2300      	movs	r3, #0
   bb88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bb890:	e7f7      	b.n	bb882 <_Balloc+0x66>
   bb892:	bf00      	nop
   bb894:	000bce9d 	.word	0x000bce9d
   bb898:	000bd1bc 	.word	0x000bd1bc

000bb89c <_Bfree>:
   bb89c:	b570      	push	{r4, r5, r6, lr}
   bb89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb8a0:	4605      	mov	r5, r0
   bb8a2:	460c      	mov	r4, r1
   bb8a4:	b976      	cbnz	r6, bb8c4 <_Bfree+0x28>
   bb8a6:	2010      	movs	r0, #16
   bb8a8:	f7fb fd5a 	bl	b7360 <malloc>
   bb8ac:	4602      	mov	r2, r0
   bb8ae:	6268      	str	r0, [r5, #36]	; 0x24
   bb8b0:	b920      	cbnz	r0, bb8bc <_Bfree+0x20>
   bb8b2:	4b09      	ldr	r3, [pc, #36]	; (bb8d8 <_Bfree+0x3c>)
   bb8b4:	4809      	ldr	r0, [pc, #36]	; (bb8dc <_Bfree+0x40>)
   bb8b6:	218a      	movs	r1, #138	; 0x8a
   bb8b8:	f7fb fd9a 	bl	b73f0 <__assert_func>
   bb8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb8c0:	6006      	str	r6, [r0, #0]
   bb8c2:	60c6      	str	r6, [r0, #12]
   bb8c4:	b13c      	cbz	r4, bb8d6 <_Bfree+0x3a>
   bb8c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bb8c8:	6862      	ldr	r2, [r4, #4]
   bb8ca:	68db      	ldr	r3, [r3, #12]
   bb8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bb8d0:	6021      	str	r1, [r4, #0]
   bb8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bb8d6:	bd70      	pop	{r4, r5, r6, pc}
   bb8d8:	000bce9d 	.word	0x000bce9d
   bb8dc:	000bd1bc 	.word	0x000bd1bc

000bb8e0 <__multadd>:
   bb8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb8e4:	690d      	ldr	r5, [r1, #16]
   bb8e6:	4607      	mov	r7, r0
   bb8e8:	460c      	mov	r4, r1
   bb8ea:	461e      	mov	r6, r3
   bb8ec:	f101 0c14 	add.w	ip, r1, #20
   bb8f0:	2000      	movs	r0, #0
   bb8f2:	f8dc 3000 	ldr.w	r3, [ip]
   bb8f6:	b299      	uxth	r1, r3
   bb8f8:	fb02 6101 	mla	r1, r2, r1, r6
   bb8fc:	0c1e      	lsrs	r6, r3, #16
   bb8fe:	0c0b      	lsrs	r3, r1, #16
   bb900:	fb02 3306 	mla	r3, r2, r6, r3
   bb904:	b289      	uxth	r1, r1
   bb906:	3001      	adds	r0, #1
   bb908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bb90c:	4285      	cmp	r5, r0
   bb90e:	f84c 1b04 	str.w	r1, [ip], #4
   bb912:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bb916:	dcec      	bgt.n	bb8f2 <__multadd+0x12>
   bb918:	b30e      	cbz	r6, bb95e <__multadd+0x7e>
   bb91a:	68a3      	ldr	r3, [r4, #8]
   bb91c:	42ab      	cmp	r3, r5
   bb91e:	dc19      	bgt.n	bb954 <__multadd+0x74>
   bb920:	6861      	ldr	r1, [r4, #4]
   bb922:	4638      	mov	r0, r7
   bb924:	3101      	adds	r1, #1
   bb926:	f7ff ff79 	bl	bb81c <_Balloc>
   bb92a:	4680      	mov	r8, r0
   bb92c:	b928      	cbnz	r0, bb93a <__multadd+0x5a>
   bb92e:	4602      	mov	r2, r0
   bb930:	4b0c      	ldr	r3, [pc, #48]	; (bb964 <__multadd+0x84>)
   bb932:	480d      	ldr	r0, [pc, #52]	; (bb968 <__multadd+0x88>)
   bb934:	21b5      	movs	r1, #181	; 0xb5
   bb936:	f7fb fd5b 	bl	b73f0 <__assert_func>
   bb93a:	6922      	ldr	r2, [r4, #16]
   bb93c:	3202      	adds	r2, #2
   bb93e:	f104 010c 	add.w	r1, r4, #12
   bb942:	0092      	lsls	r2, r2, #2
   bb944:	300c      	adds	r0, #12
   bb946:	f7fe fba2 	bl	ba08e <memcpy>
   bb94a:	4621      	mov	r1, r4
   bb94c:	4638      	mov	r0, r7
   bb94e:	f7ff ffa5 	bl	bb89c <_Bfree>
   bb952:	4644      	mov	r4, r8
   bb954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bb958:	3501      	adds	r5, #1
   bb95a:	615e      	str	r6, [r3, #20]
   bb95c:	6125      	str	r5, [r4, #16]
   bb95e:	4620      	mov	r0, r4
   bb960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb964:	000bd110 	.word	0x000bd110
   bb968:	000bd1bc 	.word	0x000bd1bc

000bb96c <__s2b>:
   bb96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb970:	460c      	mov	r4, r1
   bb972:	4615      	mov	r5, r2
   bb974:	461f      	mov	r7, r3
   bb976:	2209      	movs	r2, #9
   bb978:	3308      	adds	r3, #8
   bb97a:	4606      	mov	r6, r0
   bb97c:	fb93 f3f2 	sdiv	r3, r3, r2
   bb980:	2100      	movs	r1, #0
   bb982:	2201      	movs	r2, #1
   bb984:	429a      	cmp	r2, r3
   bb986:	db09      	blt.n	bb99c <__s2b+0x30>
   bb988:	4630      	mov	r0, r6
   bb98a:	f7ff ff47 	bl	bb81c <_Balloc>
   bb98e:	b940      	cbnz	r0, bb9a2 <__s2b+0x36>
   bb990:	4602      	mov	r2, r0
   bb992:	4b19      	ldr	r3, [pc, #100]	; (bb9f8 <__s2b+0x8c>)
   bb994:	4819      	ldr	r0, [pc, #100]	; (bb9fc <__s2b+0x90>)
   bb996:	21ce      	movs	r1, #206	; 0xce
   bb998:	f7fb fd2a 	bl	b73f0 <__assert_func>
   bb99c:	0052      	lsls	r2, r2, #1
   bb99e:	3101      	adds	r1, #1
   bb9a0:	e7f0      	b.n	bb984 <__s2b+0x18>
   bb9a2:	9b08      	ldr	r3, [sp, #32]
   bb9a4:	6143      	str	r3, [r0, #20]
   bb9a6:	2d09      	cmp	r5, #9
   bb9a8:	f04f 0301 	mov.w	r3, #1
   bb9ac:	6103      	str	r3, [r0, #16]
   bb9ae:	dd16      	ble.n	bb9de <__s2b+0x72>
   bb9b0:	f104 0909 	add.w	r9, r4, #9
   bb9b4:	46c8      	mov	r8, r9
   bb9b6:	442c      	add	r4, r5
   bb9b8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bb9bc:	4601      	mov	r1, r0
   bb9be:	3b30      	subs	r3, #48	; 0x30
   bb9c0:	220a      	movs	r2, #10
   bb9c2:	4630      	mov	r0, r6
   bb9c4:	f7ff ff8c 	bl	bb8e0 <__multadd>
   bb9c8:	45a0      	cmp	r8, r4
   bb9ca:	d1f5      	bne.n	bb9b8 <__s2b+0x4c>
   bb9cc:	f1a5 0408 	sub.w	r4, r5, #8
   bb9d0:	444c      	add	r4, r9
   bb9d2:	1b2d      	subs	r5, r5, r4
   bb9d4:	1963      	adds	r3, r4, r5
   bb9d6:	42bb      	cmp	r3, r7
   bb9d8:	db04      	blt.n	bb9e4 <__s2b+0x78>
   bb9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb9de:	340a      	adds	r4, #10
   bb9e0:	2509      	movs	r5, #9
   bb9e2:	e7f6      	b.n	bb9d2 <__s2b+0x66>
   bb9e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb9e8:	4601      	mov	r1, r0
   bb9ea:	3b30      	subs	r3, #48	; 0x30
   bb9ec:	220a      	movs	r2, #10
   bb9ee:	4630      	mov	r0, r6
   bb9f0:	f7ff ff76 	bl	bb8e0 <__multadd>
   bb9f4:	e7ee      	b.n	bb9d4 <__s2b+0x68>
   bb9f6:	bf00      	nop
   bb9f8:	000bd110 	.word	0x000bd110
   bb9fc:	000bd1bc 	.word	0x000bd1bc

000bba00 <__hi0bits>:
   bba00:	0c03      	lsrs	r3, r0, #16
   bba02:	041b      	lsls	r3, r3, #16
   bba04:	b9d3      	cbnz	r3, bba3c <__hi0bits+0x3c>
   bba06:	0400      	lsls	r0, r0, #16
   bba08:	2310      	movs	r3, #16
   bba0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bba0e:	bf04      	itt	eq
   bba10:	0200      	lsleq	r0, r0, #8
   bba12:	3308      	addeq	r3, #8
   bba14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bba18:	bf04      	itt	eq
   bba1a:	0100      	lsleq	r0, r0, #4
   bba1c:	3304      	addeq	r3, #4
   bba1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bba22:	bf04      	itt	eq
   bba24:	0080      	lsleq	r0, r0, #2
   bba26:	3302      	addeq	r3, #2
   bba28:	2800      	cmp	r0, #0
   bba2a:	db05      	blt.n	bba38 <__hi0bits+0x38>
   bba2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bba30:	f103 0301 	add.w	r3, r3, #1
   bba34:	bf08      	it	eq
   bba36:	2320      	moveq	r3, #32
   bba38:	4618      	mov	r0, r3
   bba3a:	4770      	bx	lr
   bba3c:	2300      	movs	r3, #0
   bba3e:	e7e4      	b.n	bba0a <__hi0bits+0xa>

000bba40 <__lo0bits>:
   bba40:	6803      	ldr	r3, [r0, #0]
   bba42:	f013 0207 	ands.w	r2, r3, #7
   bba46:	4601      	mov	r1, r0
   bba48:	d00b      	beq.n	bba62 <__lo0bits+0x22>
   bba4a:	07da      	lsls	r2, r3, #31
   bba4c:	d423      	bmi.n	bba96 <__lo0bits+0x56>
   bba4e:	0798      	lsls	r0, r3, #30
   bba50:	bf49      	itett	mi
   bba52:	085b      	lsrmi	r3, r3, #1
   bba54:	089b      	lsrpl	r3, r3, #2
   bba56:	2001      	movmi	r0, #1
   bba58:	600b      	strmi	r3, [r1, #0]
   bba5a:	bf5c      	itt	pl
   bba5c:	600b      	strpl	r3, [r1, #0]
   bba5e:	2002      	movpl	r0, #2
   bba60:	4770      	bx	lr
   bba62:	b298      	uxth	r0, r3
   bba64:	b9a8      	cbnz	r0, bba92 <__lo0bits+0x52>
   bba66:	0c1b      	lsrs	r3, r3, #16
   bba68:	2010      	movs	r0, #16
   bba6a:	b2da      	uxtb	r2, r3
   bba6c:	b90a      	cbnz	r2, bba72 <__lo0bits+0x32>
   bba6e:	3008      	adds	r0, #8
   bba70:	0a1b      	lsrs	r3, r3, #8
   bba72:	071a      	lsls	r2, r3, #28
   bba74:	bf04      	itt	eq
   bba76:	091b      	lsreq	r3, r3, #4
   bba78:	3004      	addeq	r0, #4
   bba7a:	079a      	lsls	r2, r3, #30
   bba7c:	bf04      	itt	eq
   bba7e:	089b      	lsreq	r3, r3, #2
   bba80:	3002      	addeq	r0, #2
   bba82:	07da      	lsls	r2, r3, #31
   bba84:	d403      	bmi.n	bba8e <__lo0bits+0x4e>
   bba86:	085b      	lsrs	r3, r3, #1
   bba88:	f100 0001 	add.w	r0, r0, #1
   bba8c:	d005      	beq.n	bba9a <__lo0bits+0x5a>
   bba8e:	600b      	str	r3, [r1, #0]
   bba90:	4770      	bx	lr
   bba92:	4610      	mov	r0, r2
   bba94:	e7e9      	b.n	bba6a <__lo0bits+0x2a>
   bba96:	2000      	movs	r0, #0
   bba98:	4770      	bx	lr
   bba9a:	2020      	movs	r0, #32
   bba9c:	4770      	bx	lr
	...

000bbaa0 <__i2b>:
   bbaa0:	b510      	push	{r4, lr}
   bbaa2:	460c      	mov	r4, r1
   bbaa4:	2101      	movs	r1, #1
   bbaa6:	f7ff feb9 	bl	bb81c <_Balloc>
   bbaaa:	4602      	mov	r2, r0
   bbaac:	b928      	cbnz	r0, bbaba <__i2b+0x1a>
   bbaae:	4b05      	ldr	r3, [pc, #20]	; (bbac4 <__i2b+0x24>)
   bbab0:	4805      	ldr	r0, [pc, #20]	; (bbac8 <__i2b+0x28>)
   bbab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbab6:	f7fb fc9b 	bl	b73f0 <__assert_func>
   bbaba:	2301      	movs	r3, #1
   bbabc:	6144      	str	r4, [r0, #20]
   bbabe:	6103      	str	r3, [r0, #16]
   bbac0:	bd10      	pop	{r4, pc}
   bbac2:	bf00      	nop
   bbac4:	000bd110 	.word	0x000bd110
   bbac8:	000bd1bc 	.word	0x000bd1bc

000bbacc <__multiply>:
   bbacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbad0:	4691      	mov	r9, r2
   bbad2:	690a      	ldr	r2, [r1, #16]
   bbad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbad8:	429a      	cmp	r2, r3
   bbada:	bfb8      	it	lt
   bbadc:	460b      	movlt	r3, r1
   bbade:	460c      	mov	r4, r1
   bbae0:	bfbc      	itt	lt
   bbae2:	464c      	movlt	r4, r9
   bbae4:	4699      	movlt	r9, r3
   bbae6:	6927      	ldr	r7, [r4, #16]
   bbae8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbaec:	68a3      	ldr	r3, [r4, #8]
   bbaee:	6861      	ldr	r1, [r4, #4]
   bbaf0:	eb07 060a 	add.w	r6, r7, sl
   bbaf4:	42b3      	cmp	r3, r6
   bbaf6:	b085      	sub	sp, #20
   bbaf8:	bfb8      	it	lt
   bbafa:	3101      	addlt	r1, #1
   bbafc:	f7ff fe8e 	bl	bb81c <_Balloc>
   bbb00:	b930      	cbnz	r0, bbb10 <__multiply+0x44>
   bbb02:	4602      	mov	r2, r0
   bbb04:	4b44      	ldr	r3, [pc, #272]	; (bbc18 <__multiply+0x14c>)
   bbb06:	4845      	ldr	r0, [pc, #276]	; (bbc1c <__multiply+0x150>)
   bbb08:	f240 115d 	movw	r1, #349	; 0x15d
   bbb0c:	f7fb fc70 	bl	b73f0 <__assert_func>
   bbb10:	f100 0514 	add.w	r5, r0, #20
   bbb14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbb18:	462b      	mov	r3, r5
   bbb1a:	2200      	movs	r2, #0
   bbb1c:	4543      	cmp	r3, r8
   bbb1e:	d321      	bcc.n	bbb64 <__multiply+0x98>
   bbb20:	f104 0314 	add.w	r3, r4, #20
   bbb24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbb28:	f109 0314 	add.w	r3, r9, #20
   bbb2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbb30:	9202      	str	r2, [sp, #8]
   bbb32:	1b3a      	subs	r2, r7, r4
   bbb34:	3a15      	subs	r2, #21
   bbb36:	f022 0203 	bic.w	r2, r2, #3
   bbb3a:	3204      	adds	r2, #4
   bbb3c:	f104 0115 	add.w	r1, r4, #21
   bbb40:	428f      	cmp	r7, r1
   bbb42:	bf38      	it	cc
   bbb44:	2204      	movcc	r2, #4
   bbb46:	9201      	str	r2, [sp, #4]
   bbb48:	9a02      	ldr	r2, [sp, #8]
   bbb4a:	9303      	str	r3, [sp, #12]
   bbb4c:	429a      	cmp	r2, r3
   bbb4e:	d80c      	bhi.n	bbb6a <__multiply+0x9e>
   bbb50:	2e00      	cmp	r6, #0
   bbb52:	dd03      	ble.n	bbb5c <__multiply+0x90>
   bbb54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbb58:	2b00      	cmp	r3, #0
   bbb5a:	d05a      	beq.n	bbc12 <__multiply+0x146>
   bbb5c:	6106      	str	r6, [r0, #16]
   bbb5e:	b005      	add	sp, #20
   bbb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbb64:	f843 2b04 	str.w	r2, [r3], #4
   bbb68:	e7d8      	b.n	bbb1c <__multiply+0x50>
   bbb6a:	f8b3 a000 	ldrh.w	sl, [r3]
   bbb6e:	f1ba 0f00 	cmp.w	sl, #0
   bbb72:	d024      	beq.n	bbbbe <__multiply+0xf2>
   bbb74:	f104 0e14 	add.w	lr, r4, #20
   bbb78:	46a9      	mov	r9, r5
   bbb7a:	f04f 0c00 	mov.w	ip, #0
   bbb7e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbb82:	f8d9 1000 	ldr.w	r1, [r9]
   bbb86:	fa1f fb82 	uxth.w	fp, r2
   bbb8a:	b289      	uxth	r1, r1
   bbb8c:	fb0a 110b 	mla	r1, sl, fp, r1
   bbb90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbb94:	f8d9 2000 	ldr.w	r2, [r9]
   bbb98:	4461      	add	r1, ip
   bbb9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbb9e:	fb0a c20b 	mla	r2, sl, fp, ip
   bbba2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbba6:	b289      	uxth	r1, r1
   bbba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbbac:	4577      	cmp	r7, lr
   bbbae:	f849 1b04 	str.w	r1, [r9], #4
   bbbb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbbb6:	d8e2      	bhi.n	bbb7e <__multiply+0xb2>
   bbbb8:	9a01      	ldr	r2, [sp, #4]
   bbbba:	f845 c002 	str.w	ip, [r5, r2]
   bbbbe:	9a03      	ldr	r2, [sp, #12]
   bbbc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbbc4:	3304      	adds	r3, #4
   bbbc6:	f1b9 0f00 	cmp.w	r9, #0
   bbbca:	d020      	beq.n	bbc0e <__multiply+0x142>
   bbbcc:	6829      	ldr	r1, [r5, #0]
   bbbce:	f104 0c14 	add.w	ip, r4, #20
   bbbd2:	46ae      	mov	lr, r5
   bbbd4:	f04f 0a00 	mov.w	sl, #0
   bbbd8:	f8bc b000 	ldrh.w	fp, [ip]
   bbbdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbbe0:	fb09 220b 	mla	r2, r9, fp, r2
   bbbe4:	4492      	add	sl, r2
   bbbe6:	b289      	uxth	r1, r1
   bbbe8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbbec:	f84e 1b04 	str.w	r1, [lr], #4
   bbbf0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbbf4:	f8be 1000 	ldrh.w	r1, [lr]
   bbbf8:	0c12      	lsrs	r2, r2, #16
   bbbfa:	fb09 1102 	mla	r1, r9, r2, r1
   bbbfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbc02:	4567      	cmp	r7, ip
   bbc04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbc08:	d8e6      	bhi.n	bbbd8 <__multiply+0x10c>
   bbc0a:	9a01      	ldr	r2, [sp, #4]
   bbc0c:	50a9      	str	r1, [r5, r2]
   bbc0e:	3504      	adds	r5, #4
   bbc10:	e79a      	b.n	bbb48 <__multiply+0x7c>
   bbc12:	3e01      	subs	r6, #1
   bbc14:	e79c      	b.n	bbb50 <__multiply+0x84>
   bbc16:	bf00      	nop
   bbc18:	000bd110 	.word	0x000bd110
   bbc1c:	000bd1bc 	.word	0x000bd1bc

000bbc20 <__pow5mult>:
   bbc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbc24:	4615      	mov	r5, r2
   bbc26:	f012 0203 	ands.w	r2, r2, #3
   bbc2a:	4606      	mov	r6, r0
   bbc2c:	460f      	mov	r7, r1
   bbc2e:	d007      	beq.n	bbc40 <__pow5mult+0x20>
   bbc30:	4c25      	ldr	r4, [pc, #148]	; (bbcc8 <__pow5mult+0xa8>)
   bbc32:	3a01      	subs	r2, #1
   bbc34:	2300      	movs	r3, #0
   bbc36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbc3a:	f7ff fe51 	bl	bb8e0 <__multadd>
   bbc3e:	4607      	mov	r7, r0
   bbc40:	10ad      	asrs	r5, r5, #2
   bbc42:	d03d      	beq.n	bbcc0 <__pow5mult+0xa0>
   bbc44:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbc46:	b97c      	cbnz	r4, bbc68 <__pow5mult+0x48>
   bbc48:	2010      	movs	r0, #16
   bbc4a:	f7fb fb89 	bl	b7360 <malloc>
   bbc4e:	4602      	mov	r2, r0
   bbc50:	6270      	str	r0, [r6, #36]	; 0x24
   bbc52:	b928      	cbnz	r0, bbc60 <__pow5mult+0x40>
   bbc54:	4b1d      	ldr	r3, [pc, #116]	; (bbccc <__pow5mult+0xac>)
   bbc56:	481e      	ldr	r0, [pc, #120]	; (bbcd0 <__pow5mult+0xb0>)
   bbc58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbc5c:	f7fb fbc8 	bl	b73f0 <__assert_func>
   bbc60:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbc64:	6004      	str	r4, [r0, #0]
   bbc66:	60c4      	str	r4, [r0, #12]
   bbc68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbc6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbc70:	b94c      	cbnz	r4, bbc86 <__pow5mult+0x66>
   bbc72:	f240 2171 	movw	r1, #625	; 0x271
   bbc76:	4630      	mov	r0, r6
   bbc78:	f7ff ff12 	bl	bbaa0 <__i2b>
   bbc7c:	2300      	movs	r3, #0
   bbc7e:	f8c8 0008 	str.w	r0, [r8, #8]
   bbc82:	4604      	mov	r4, r0
   bbc84:	6003      	str	r3, [r0, #0]
   bbc86:	f04f 0900 	mov.w	r9, #0
   bbc8a:	07eb      	lsls	r3, r5, #31
   bbc8c:	d50a      	bpl.n	bbca4 <__pow5mult+0x84>
   bbc8e:	4639      	mov	r1, r7
   bbc90:	4622      	mov	r2, r4
   bbc92:	4630      	mov	r0, r6
   bbc94:	f7ff ff1a 	bl	bbacc <__multiply>
   bbc98:	4639      	mov	r1, r7
   bbc9a:	4680      	mov	r8, r0
   bbc9c:	4630      	mov	r0, r6
   bbc9e:	f7ff fdfd 	bl	bb89c <_Bfree>
   bbca2:	4647      	mov	r7, r8
   bbca4:	106d      	asrs	r5, r5, #1
   bbca6:	d00b      	beq.n	bbcc0 <__pow5mult+0xa0>
   bbca8:	6820      	ldr	r0, [r4, #0]
   bbcaa:	b938      	cbnz	r0, bbcbc <__pow5mult+0x9c>
   bbcac:	4622      	mov	r2, r4
   bbcae:	4621      	mov	r1, r4
   bbcb0:	4630      	mov	r0, r6
   bbcb2:	f7ff ff0b 	bl	bbacc <__multiply>
   bbcb6:	6020      	str	r0, [r4, #0]
   bbcb8:	f8c0 9000 	str.w	r9, [r0]
   bbcbc:	4604      	mov	r4, r0
   bbcbe:	e7e4      	b.n	bbc8a <__pow5mult+0x6a>
   bbcc0:	4638      	mov	r0, r7
   bbcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbcc6:	bf00      	nop
   bbcc8:	000bd330 	.word	0x000bd330
   bbccc:	000bce9d 	.word	0x000bce9d
   bbcd0:	000bd1bc 	.word	0x000bd1bc

000bbcd4 <__lshift>:
   bbcd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbcd8:	460c      	mov	r4, r1
   bbcda:	6849      	ldr	r1, [r1, #4]
   bbcdc:	6923      	ldr	r3, [r4, #16]
   bbcde:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbce2:	68a3      	ldr	r3, [r4, #8]
   bbce4:	4607      	mov	r7, r0
   bbce6:	4691      	mov	r9, r2
   bbce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbcec:	f108 0601 	add.w	r6, r8, #1
   bbcf0:	42b3      	cmp	r3, r6
   bbcf2:	db0b      	blt.n	bbd0c <__lshift+0x38>
   bbcf4:	4638      	mov	r0, r7
   bbcf6:	f7ff fd91 	bl	bb81c <_Balloc>
   bbcfa:	4605      	mov	r5, r0
   bbcfc:	b948      	cbnz	r0, bbd12 <__lshift+0x3e>
   bbcfe:	4602      	mov	r2, r0
   bbd00:	4b2a      	ldr	r3, [pc, #168]	; (bbdac <__lshift+0xd8>)
   bbd02:	482b      	ldr	r0, [pc, #172]	; (bbdb0 <__lshift+0xdc>)
   bbd04:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbd08:	f7fb fb72 	bl	b73f0 <__assert_func>
   bbd0c:	3101      	adds	r1, #1
   bbd0e:	005b      	lsls	r3, r3, #1
   bbd10:	e7ee      	b.n	bbcf0 <__lshift+0x1c>
   bbd12:	2300      	movs	r3, #0
   bbd14:	f100 0114 	add.w	r1, r0, #20
   bbd18:	f100 0210 	add.w	r2, r0, #16
   bbd1c:	4618      	mov	r0, r3
   bbd1e:	4553      	cmp	r3, sl
   bbd20:	db37      	blt.n	bbd92 <__lshift+0xbe>
   bbd22:	6920      	ldr	r0, [r4, #16]
   bbd24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbd28:	f104 0314 	add.w	r3, r4, #20
   bbd2c:	f019 091f 	ands.w	r9, r9, #31
   bbd30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbd34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbd38:	d02f      	beq.n	bbd9a <__lshift+0xc6>
   bbd3a:	f1c9 0e20 	rsb	lr, r9, #32
   bbd3e:	468a      	mov	sl, r1
   bbd40:	f04f 0c00 	mov.w	ip, #0
   bbd44:	681a      	ldr	r2, [r3, #0]
   bbd46:	fa02 f209 	lsl.w	r2, r2, r9
   bbd4a:	ea42 020c 	orr.w	r2, r2, ip
   bbd4e:	f84a 2b04 	str.w	r2, [sl], #4
   bbd52:	f853 2b04 	ldr.w	r2, [r3], #4
   bbd56:	4298      	cmp	r0, r3
   bbd58:	fa22 fc0e 	lsr.w	ip, r2, lr
   bbd5c:	d8f2      	bhi.n	bbd44 <__lshift+0x70>
   bbd5e:	1b03      	subs	r3, r0, r4
   bbd60:	3b15      	subs	r3, #21
   bbd62:	f023 0303 	bic.w	r3, r3, #3
   bbd66:	3304      	adds	r3, #4
   bbd68:	f104 0215 	add.w	r2, r4, #21
   bbd6c:	4290      	cmp	r0, r2
   bbd6e:	bf38      	it	cc
   bbd70:	2304      	movcc	r3, #4
   bbd72:	f841 c003 	str.w	ip, [r1, r3]
   bbd76:	f1bc 0f00 	cmp.w	ip, #0
   bbd7a:	d001      	beq.n	bbd80 <__lshift+0xac>
   bbd7c:	f108 0602 	add.w	r6, r8, #2
   bbd80:	3e01      	subs	r6, #1
   bbd82:	4638      	mov	r0, r7
   bbd84:	612e      	str	r6, [r5, #16]
   bbd86:	4621      	mov	r1, r4
   bbd88:	f7ff fd88 	bl	bb89c <_Bfree>
   bbd8c:	4628      	mov	r0, r5
   bbd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbd92:	f842 0f04 	str.w	r0, [r2, #4]!
   bbd96:	3301      	adds	r3, #1
   bbd98:	e7c1      	b.n	bbd1e <__lshift+0x4a>
   bbd9a:	3904      	subs	r1, #4
   bbd9c:	f853 2b04 	ldr.w	r2, [r3], #4
   bbda0:	f841 2f04 	str.w	r2, [r1, #4]!
   bbda4:	4298      	cmp	r0, r3
   bbda6:	d8f9      	bhi.n	bbd9c <__lshift+0xc8>
   bbda8:	e7ea      	b.n	bbd80 <__lshift+0xac>
   bbdaa:	bf00      	nop
   bbdac:	000bd110 	.word	0x000bd110
   bbdb0:	000bd1bc 	.word	0x000bd1bc

000bbdb4 <__mcmp>:
   bbdb4:	b530      	push	{r4, r5, lr}
   bbdb6:	6902      	ldr	r2, [r0, #16]
   bbdb8:	690c      	ldr	r4, [r1, #16]
   bbdba:	1b12      	subs	r2, r2, r4
   bbdbc:	d10e      	bne.n	bbddc <__mcmp+0x28>
   bbdbe:	f100 0314 	add.w	r3, r0, #20
   bbdc2:	3114      	adds	r1, #20
   bbdc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbdc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbdcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbdd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbdd4:	42a5      	cmp	r5, r4
   bbdd6:	d003      	beq.n	bbde0 <__mcmp+0x2c>
   bbdd8:	d305      	bcc.n	bbde6 <__mcmp+0x32>
   bbdda:	2201      	movs	r2, #1
   bbddc:	4610      	mov	r0, r2
   bbdde:	bd30      	pop	{r4, r5, pc}
   bbde0:	4283      	cmp	r3, r0
   bbde2:	d3f3      	bcc.n	bbdcc <__mcmp+0x18>
   bbde4:	e7fa      	b.n	bbddc <__mcmp+0x28>
   bbde6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbdea:	e7f7      	b.n	bbddc <__mcmp+0x28>

000bbdec <__mdiff>:
   bbdec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbdf0:	460c      	mov	r4, r1
   bbdf2:	4606      	mov	r6, r0
   bbdf4:	4611      	mov	r1, r2
   bbdf6:	4620      	mov	r0, r4
   bbdf8:	4690      	mov	r8, r2
   bbdfa:	f7ff ffdb 	bl	bbdb4 <__mcmp>
   bbdfe:	1e05      	subs	r5, r0, #0
   bbe00:	d110      	bne.n	bbe24 <__mdiff+0x38>
   bbe02:	4629      	mov	r1, r5
   bbe04:	4630      	mov	r0, r6
   bbe06:	f7ff fd09 	bl	bb81c <_Balloc>
   bbe0a:	b930      	cbnz	r0, bbe1a <__mdiff+0x2e>
   bbe0c:	4b3a      	ldr	r3, [pc, #232]	; (bbef8 <__mdiff+0x10c>)
   bbe0e:	4602      	mov	r2, r0
   bbe10:	f240 2132 	movw	r1, #562	; 0x232
   bbe14:	4839      	ldr	r0, [pc, #228]	; (bbefc <__mdiff+0x110>)
   bbe16:	f7fb faeb 	bl	b73f0 <__assert_func>
   bbe1a:	2301      	movs	r3, #1
   bbe1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bbe20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe24:	bfa4      	itt	ge
   bbe26:	4643      	movge	r3, r8
   bbe28:	46a0      	movge	r8, r4
   bbe2a:	4630      	mov	r0, r6
   bbe2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bbe30:	bfa6      	itte	ge
   bbe32:	461c      	movge	r4, r3
   bbe34:	2500      	movge	r5, #0
   bbe36:	2501      	movlt	r5, #1
   bbe38:	f7ff fcf0 	bl	bb81c <_Balloc>
   bbe3c:	b920      	cbnz	r0, bbe48 <__mdiff+0x5c>
   bbe3e:	4b2e      	ldr	r3, [pc, #184]	; (bbef8 <__mdiff+0x10c>)
   bbe40:	4602      	mov	r2, r0
   bbe42:	f44f 7110 	mov.w	r1, #576	; 0x240
   bbe46:	e7e5      	b.n	bbe14 <__mdiff+0x28>
   bbe48:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bbe4c:	6926      	ldr	r6, [r4, #16]
   bbe4e:	60c5      	str	r5, [r0, #12]
   bbe50:	f104 0914 	add.w	r9, r4, #20
   bbe54:	f108 0514 	add.w	r5, r8, #20
   bbe58:	f100 0e14 	add.w	lr, r0, #20
   bbe5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bbe60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bbe64:	f108 0210 	add.w	r2, r8, #16
   bbe68:	46f2      	mov	sl, lr
   bbe6a:	2100      	movs	r1, #0
   bbe6c:	f859 3b04 	ldr.w	r3, [r9], #4
   bbe70:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bbe74:	fa1f f883 	uxth.w	r8, r3
   bbe78:	fa11 f18b 	uxtah	r1, r1, fp
   bbe7c:	0c1b      	lsrs	r3, r3, #16
   bbe7e:	eba1 0808 	sub.w	r8, r1, r8
   bbe82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bbe86:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bbe8a:	fa1f f888 	uxth.w	r8, r8
   bbe8e:	1419      	asrs	r1, r3, #16
   bbe90:	454e      	cmp	r6, r9
   bbe92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bbe96:	f84a 3b04 	str.w	r3, [sl], #4
   bbe9a:	d8e7      	bhi.n	bbe6c <__mdiff+0x80>
   bbe9c:	1b33      	subs	r3, r6, r4
   bbe9e:	3b15      	subs	r3, #21
   bbea0:	f023 0303 	bic.w	r3, r3, #3
   bbea4:	3304      	adds	r3, #4
   bbea6:	3415      	adds	r4, #21
   bbea8:	42a6      	cmp	r6, r4
   bbeaa:	bf38      	it	cc
   bbeac:	2304      	movcc	r3, #4
   bbeae:	441d      	add	r5, r3
   bbeb0:	4473      	add	r3, lr
   bbeb2:	469e      	mov	lr, r3
   bbeb4:	462e      	mov	r6, r5
   bbeb6:	4566      	cmp	r6, ip
   bbeb8:	d30e      	bcc.n	bbed8 <__mdiff+0xec>
   bbeba:	f10c 0203 	add.w	r2, ip, #3
   bbebe:	1b52      	subs	r2, r2, r5
   bbec0:	f022 0203 	bic.w	r2, r2, #3
   bbec4:	3d03      	subs	r5, #3
   bbec6:	45ac      	cmp	ip, r5
   bbec8:	bf38      	it	cc
   bbeca:	2200      	movcc	r2, #0
   bbecc:	441a      	add	r2, r3
   bbece:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bbed2:	b17b      	cbz	r3, bbef4 <__mdiff+0x108>
   bbed4:	6107      	str	r7, [r0, #16]
   bbed6:	e7a3      	b.n	bbe20 <__mdiff+0x34>
   bbed8:	f856 8b04 	ldr.w	r8, [r6], #4
   bbedc:	fa11 f288 	uxtah	r2, r1, r8
   bbee0:	1414      	asrs	r4, r2, #16
   bbee2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bbee6:	b292      	uxth	r2, r2
   bbee8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bbeec:	f84e 2b04 	str.w	r2, [lr], #4
   bbef0:	1421      	asrs	r1, r4, #16
   bbef2:	e7e0      	b.n	bbeb6 <__mdiff+0xca>
   bbef4:	3f01      	subs	r7, #1
   bbef6:	e7ea      	b.n	bbece <__mdiff+0xe2>
   bbef8:	000bd110 	.word	0x000bd110
   bbefc:	000bd1bc 	.word	0x000bd1bc

000bbf00 <__ulp>:
   bbf00:	b082      	sub	sp, #8
   bbf02:	ed8d 0b00 	vstr	d0, [sp]
   bbf06:	9b01      	ldr	r3, [sp, #4]
   bbf08:	4912      	ldr	r1, [pc, #72]	; (bbf54 <__ulp+0x54>)
   bbf0a:	4019      	ands	r1, r3
   bbf0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bbf10:	2900      	cmp	r1, #0
   bbf12:	dd05      	ble.n	bbf20 <__ulp+0x20>
   bbf14:	2200      	movs	r2, #0
   bbf16:	460b      	mov	r3, r1
   bbf18:	ec43 2b10 	vmov	d0, r2, r3
   bbf1c:	b002      	add	sp, #8
   bbf1e:	4770      	bx	lr
   bbf20:	4249      	negs	r1, r1
   bbf22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bbf26:	ea4f 5021 	mov.w	r0, r1, asr #20
   bbf2a:	f04f 0200 	mov.w	r2, #0
   bbf2e:	f04f 0300 	mov.w	r3, #0
   bbf32:	da04      	bge.n	bbf3e <__ulp+0x3e>
   bbf34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bbf38:	fa41 f300 	asr.w	r3, r1, r0
   bbf3c:	e7ec      	b.n	bbf18 <__ulp+0x18>
   bbf3e:	f1a0 0114 	sub.w	r1, r0, #20
   bbf42:	291e      	cmp	r1, #30
   bbf44:	bfda      	itte	le
   bbf46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bbf4a:	fa20 f101 	lsrle.w	r1, r0, r1
   bbf4e:	2101      	movgt	r1, #1
   bbf50:	460a      	mov	r2, r1
   bbf52:	e7e1      	b.n	bbf18 <__ulp+0x18>
   bbf54:	7ff00000 	.word	0x7ff00000

000bbf58 <__b2d>:
   bbf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbf5a:	6905      	ldr	r5, [r0, #16]
   bbf5c:	f100 0714 	add.w	r7, r0, #20
   bbf60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bbf64:	1f2e      	subs	r6, r5, #4
   bbf66:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bbf6a:	4620      	mov	r0, r4
   bbf6c:	f7ff fd48 	bl	bba00 <__hi0bits>
   bbf70:	f1c0 0320 	rsb	r3, r0, #32
   bbf74:	280a      	cmp	r0, #10
   bbf76:	f8df c07c 	ldr.w	ip, [pc, #124]	; bbff4 <__b2d+0x9c>
   bbf7a:	600b      	str	r3, [r1, #0]
   bbf7c:	dc14      	bgt.n	bbfa8 <__b2d+0x50>
   bbf7e:	f1c0 0e0b 	rsb	lr, r0, #11
   bbf82:	fa24 f10e 	lsr.w	r1, r4, lr
   bbf86:	42b7      	cmp	r7, r6
   bbf88:	ea41 030c 	orr.w	r3, r1, ip
   bbf8c:	bf34      	ite	cc
   bbf8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbf92:	2100      	movcs	r1, #0
   bbf94:	3015      	adds	r0, #21
   bbf96:	fa04 f000 	lsl.w	r0, r4, r0
   bbf9a:	fa21 f10e 	lsr.w	r1, r1, lr
   bbf9e:	ea40 0201 	orr.w	r2, r0, r1
   bbfa2:	ec43 2b10 	vmov	d0, r2, r3
   bbfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbfa8:	42b7      	cmp	r7, r6
   bbfaa:	bf3a      	itte	cc
   bbfac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbfb0:	f1a5 0608 	subcc.w	r6, r5, #8
   bbfb4:	2100      	movcs	r1, #0
   bbfb6:	380b      	subs	r0, #11
   bbfb8:	d017      	beq.n	bbfea <__b2d+0x92>
   bbfba:	f1c0 0c20 	rsb	ip, r0, #32
   bbfbe:	fa04 f500 	lsl.w	r5, r4, r0
   bbfc2:	42be      	cmp	r6, r7
   bbfc4:	fa21 f40c 	lsr.w	r4, r1, ip
   bbfc8:	ea45 0504 	orr.w	r5, r5, r4
   bbfcc:	bf8c      	ite	hi
   bbfce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bbfd2:	2400      	movls	r4, #0
   bbfd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bbfd8:	fa01 f000 	lsl.w	r0, r1, r0
   bbfdc:	fa24 f40c 	lsr.w	r4, r4, ip
   bbfe0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bbfe4:	ea40 0204 	orr.w	r2, r0, r4
   bbfe8:	e7db      	b.n	bbfa2 <__b2d+0x4a>
   bbfea:	ea44 030c 	orr.w	r3, r4, ip
   bbfee:	460a      	mov	r2, r1
   bbff0:	e7d7      	b.n	bbfa2 <__b2d+0x4a>
   bbff2:	bf00      	nop
   bbff4:	3ff00000 	.word	0x3ff00000

000bbff8 <__d2b>:
   bbff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bbffc:	4689      	mov	r9, r1
   bbffe:	2101      	movs	r1, #1
   bc000:	ec57 6b10 	vmov	r6, r7, d0
   bc004:	4690      	mov	r8, r2
   bc006:	f7ff fc09 	bl	bb81c <_Balloc>
   bc00a:	4604      	mov	r4, r0
   bc00c:	b930      	cbnz	r0, bc01c <__d2b+0x24>
   bc00e:	4602      	mov	r2, r0
   bc010:	4b25      	ldr	r3, [pc, #148]	; (bc0a8 <__d2b+0xb0>)
   bc012:	4826      	ldr	r0, [pc, #152]	; (bc0ac <__d2b+0xb4>)
   bc014:	f240 310a 	movw	r1, #778	; 0x30a
   bc018:	f7fb f9ea 	bl	b73f0 <__assert_func>
   bc01c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc020:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc024:	bb35      	cbnz	r5, bc074 <__d2b+0x7c>
   bc026:	2e00      	cmp	r6, #0
   bc028:	9301      	str	r3, [sp, #4]
   bc02a:	d028      	beq.n	bc07e <__d2b+0x86>
   bc02c:	4668      	mov	r0, sp
   bc02e:	9600      	str	r6, [sp, #0]
   bc030:	f7ff fd06 	bl	bba40 <__lo0bits>
   bc034:	9900      	ldr	r1, [sp, #0]
   bc036:	b300      	cbz	r0, bc07a <__d2b+0x82>
   bc038:	9a01      	ldr	r2, [sp, #4]
   bc03a:	f1c0 0320 	rsb	r3, r0, #32
   bc03e:	fa02 f303 	lsl.w	r3, r2, r3
   bc042:	430b      	orrs	r3, r1
   bc044:	40c2      	lsrs	r2, r0
   bc046:	6163      	str	r3, [r4, #20]
   bc048:	9201      	str	r2, [sp, #4]
   bc04a:	9b01      	ldr	r3, [sp, #4]
   bc04c:	61a3      	str	r3, [r4, #24]
   bc04e:	2b00      	cmp	r3, #0
   bc050:	bf14      	ite	ne
   bc052:	2202      	movne	r2, #2
   bc054:	2201      	moveq	r2, #1
   bc056:	6122      	str	r2, [r4, #16]
   bc058:	b1d5      	cbz	r5, bc090 <__d2b+0x98>
   bc05a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc05e:	4405      	add	r5, r0
   bc060:	f8c9 5000 	str.w	r5, [r9]
   bc064:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc068:	f8c8 0000 	str.w	r0, [r8]
   bc06c:	4620      	mov	r0, r4
   bc06e:	b003      	add	sp, #12
   bc070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc078:	e7d5      	b.n	bc026 <__d2b+0x2e>
   bc07a:	6161      	str	r1, [r4, #20]
   bc07c:	e7e5      	b.n	bc04a <__d2b+0x52>
   bc07e:	a801      	add	r0, sp, #4
   bc080:	f7ff fcde 	bl	bba40 <__lo0bits>
   bc084:	9b01      	ldr	r3, [sp, #4]
   bc086:	6163      	str	r3, [r4, #20]
   bc088:	2201      	movs	r2, #1
   bc08a:	6122      	str	r2, [r4, #16]
   bc08c:	3020      	adds	r0, #32
   bc08e:	e7e3      	b.n	bc058 <__d2b+0x60>
   bc090:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc094:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc098:	f8c9 0000 	str.w	r0, [r9]
   bc09c:	6918      	ldr	r0, [r3, #16]
   bc09e:	f7ff fcaf 	bl	bba00 <__hi0bits>
   bc0a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc0a6:	e7df      	b.n	bc068 <__d2b+0x70>
   bc0a8:	000bd110 	.word	0x000bd110
   bc0ac:	000bd1bc 	.word	0x000bd1bc

000bc0b0 <__ratio>:
   bc0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc0b4:	4688      	mov	r8, r1
   bc0b6:	4669      	mov	r1, sp
   bc0b8:	4681      	mov	r9, r0
   bc0ba:	f7ff ff4d 	bl	bbf58 <__b2d>
   bc0be:	a901      	add	r1, sp, #4
   bc0c0:	4640      	mov	r0, r8
   bc0c2:	ec55 4b10 	vmov	r4, r5, d0
   bc0c6:	f7ff ff47 	bl	bbf58 <__b2d>
   bc0ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc0ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc0d2:	eba3 0c02 	sub.w	ip, r3, r2
   bc0d6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc0da:	1a9b      	subs	r3, r3, r2
   bc0dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc0e0:	ec51 0b10 	vmov	r0, r1, d0
   bc0e4:	2b00      	cmp	r3, #0
   bc0e6:	bfd6      	itet	le
   bc0e8:	460a      	movle	r2, r1
   bc0ea:	462a      	movgt	r2, r5
   bc0ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc0f0:	468b      	mov	fp, r1
   bc0f2:	462f      	mov	r7, r5
   bc0f4:	bfd4      	ite	le
   bc0f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc0fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc0fe:	4620      	mov	r0, r4
   bc100:	ee10 2a10 	vmov	r2, s0
   bc104:	465b      	mov	r3, fp
   bc106:	4639      	mov	r1, r7
   bc108:	f7fd fdb6 	bl	b9c78 <__aeabi_ddiv>
   bc10c:	ec41 0b10 	vmov	d0, r0, r1
   bc110:	b003      	add	sp, #12
   bc112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc116 <__copybits>:
   bc116:	3901      	subs	r1, #1
   bc118:	b570      	push	{r4, r5, r6, lr}
   bc11a:	1149      	asrs	r1, r1, #5
   bc11c:	6914      	ldr	r4, [r2, #16]
   bc11e:	3101      	adds	r1, #1
   bc120:	f102 0314 	add.w	r3, r2, #20
   bc124:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc128:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc12c:	1f05      	subs	r5, r0, #4
   bc12e:	42a3      	cmp	r3, r4
   bc130:	d30c      	bcc.n	bc14c <__copybits+0x36>
   bc132:	1aa3      	subs	r3, r4, r2
   bc134:	3b11      	subs	r3, #17
   bc136:	f023 0303 	bic.w	r3, r3, #3
   bc13a:	3211      	adds	r2, #17
   bc13c:	42a2      	cmp	r2, r4
   bc13e:	bf88      	it	hi
   bc140:	2300      	movhi	r3, #0
   bc142:	4418      	add	r0, r3
   bc144:	2300      	movs	r3, #0
   bc146:	4288      	cmp	r0, r1
   bc148:	d305      	bcc.n	bc156 <__copybits+0x40>
   bc14a:	bd70      	pop	{r4, r5, r6, pc}
   bc14c:	f853 6b04 	ldr.w	r6, [r3], #4
   bc150:	f845 6f04 	str.w	r6, [r5, #4]!
   bc154:	e7eb      	b.n	bc12e <__copybits+0x18>
   bc156:	f840 3b04 	str.w	r3, [r0], #4
   bc15a:	e7f4      	b.n	bc146 <__copybits+0x30>

000bc15c <__any_on>:
   bc15c:	f100 0214 	add.w	r2, r0, #20
   bc160:	6900      	ldr	r0, [r0, #16]
   bc162:	114b      	asrs	r3, r1, #5
   bc164:	4298      	cmp	r0, r3
   bc166:	b510      	push	{r4, lr}
   bc168:	db11      	blt.n	bc18e <__any_on+0x32>
   bc16a:	dd0a      	ble.n	bc182 <__any_on+0x26>
   bc16c:	f011 011f 	ands.w	r1, r1, #31
   bc170:	d007      	beq.n	bc182 <__any_on+0x26>
   bc172:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc176:	fa24 f001 	lsr.w	r0, r4, r1
   bc17a:	fa00 f101 	lsl.w	r1, r0, r1
   bc17e:	428c      	cmp	r4, r1
   bc180:	d10b      	bne.n	bc19a <__any_on+0x3e>
   bc182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc186:	4293      	cmp	r3, r2
   bc188:	d803      	bhi.n	bc192 <__any_on+0x36>
   bc18a:	2000      	movs	r0, #0
   bc18c:	bd10      	pop	{r4, pc}
   bc18e:	4603      	mov	r3, r0
   bc190:	e7f7      	b.n	bc182 <__any_on+0x26>
   bc192:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc196:	2900      	cmp	r1, #0
   bc198:	d0f5      	beq.n	bc186 <__any_on+0x2a>
   bc19a:	2001      	movs	r0, #1
   bc19c:	e7f6      	b.n	bc18c <__any_on+0x30>

000bc19e <_calloc_r>:
   bc19e:	b513      	push	{r0, r1, r4, lr}
   bc1a0:	434a      	muls	r2, r1
   bc1a2:	4611      	mov	r1, r2
   bc1a4:	9201      	str	r2, [sp, #4]
   bc1a6:	f7fb f913 	bl	b73d0 <_malloc_r>
   bc1aa:	4604      	mov	r4, r0
   bc1ac:	b118      	cbz	r0, bc1b6 <_calloc_r+0x18>
   bc1ae:	9a01      	ldr	r2, [sp, #4]
   bc1b0:	2100      	movs	r1, #0
   bc1b2:	f7fd ff7a 	bl	ba0aa <memset>
   bc1b6:	4620      	mov	r0, r4
   bc1b8:	b002      	add	sp, #8
   bc1ba:	bd10      	pop	{r4, pc}
   bc1bc:	0000      	movs	r0, r0
	...

000bc1c0 <nan>:
   bc1c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc1c8 <nan+0x8>
   bc1c4:	4770      	bx	lr
   bc1c6:	bf00      	nop
   bc1c8:	00000000 	.word	0x00000000
   bc1cc:	7ff80000 	.word	0x7ff80000

000bc1d0 <__ascii_wctomb>:
   bc1d0:	b149      	cbz	r1, bc1e6 <__ascii_wctomb+0x16>
   bc1d2:	2aff      	cmp	r2, #255	; 0xff
   bc1d4:	bf85      	ittet	hi
   bc1d6:	238a      	movhi	r3, #138	; 0x8a
   bc1d8:	6003      	strhi	r3, [r0, #0]
   bc1da:	700a      	strbls	r2, [r1, #0]
   bc1dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bc1e0:	bf98      	it	ls
   bc1e2:	2001      	movls	r0, #1
   bc1e4:	4770      	bx	lr
   bc1e6:	4608      	mov	r0, r1
   bc1e8:	4770      	bx	lr
	...

000bc1ec <__aeabi_d2lz>:
   bc1ec:	b538      	push	{r3, r4, r5, lr}
   bc1ee:	2200      	movs	r2, #0
   bc1f0:	2300      	movs	r3, #0
   bc1f2:	4604      	mov	r4, r0
   bc1f4:	460d      	mov	r5, r1
   bc1f6:	f7fd fe87 	bl	b9f08 <__aeabi_dcmplt>
   bc1fa:	b928      	cbnz	r0, bc208 <__aeabi_d2lz+0x1c>
   bc1fc:	4620      	mov	r0, r4
   bc1fe:	4629      	mov	r1, r5
   bc200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc204:	f7fd bf18 	b.w	ba038 <__aeabi_d2ulz>
   bc208:	4620      	mov	r0, r4
   bc20a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc20e:	f7fd ff13 	bl	ba038 <__aeabi_d2ulz>
   bc212:	4240      	negs	r0, r0
   bc214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc218:	bd38      	pop	{r3, r4, r5, pc}
   bc21a:	bf00      	nop

000bc21c <dynalib_user>:
   bc21c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc22c:	0000 0000 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bc23c:	756c 6572 7320 6372 2620 2026 7273 2d63     lure src && src-
   bc24c:	633e 6c61 626c 6361 006b 6c70 6d75 4365     >callback.plumeC
   bc25c:	6e6f 656e 7463 2928 203a 7441 6574 706d     onnect(): Attemp
   bc26c:	6974 676e 7420 206f 6f63 6e6e 6365 2074     ting to connect 
   bc27c:	6f74 5420 6968 676e 6273 616f 6472 7320     to Thingsboard s
   bc28c:	7265 6576 0072 7241 6f67 006e 6c70 6d75     erver.Argon.plum
   bc29c:	4365 6e6f 656e 7463 2928 203a 6f43 6e6e     eConnect(): Conn
   bc2ac:	6365 6574 0064 6c70 6d75 4365 6e6f 656e     ected.plumeConne
   bc2bc:	7463 2928 203a 6f43 6e6e 6365 6974 6e6f     ct(): Connection
   bc2cc:	6620 6961 656c 2c64 7220 7465 7972 6920      failed, retry i
   bc2dc:	206e 2033 6573 6f63 646e 0073 227b 7374     n 3 seconds.{"ts
   bc2ec:	3a22 7325 202c 7622 6c61 6575 2273 7b3a     ":%s, "values":{
   bc2fc:	6222 3a22 2e25 6632 7d7d 7600 2f31 6564     "b":%.2f}}.v1/de
   bc30c:	6976 6563 2f73 656d 742f 6c65 6d65 7465     vices/me/telemet
   bc31c:	7972 7b00 7422 2231 253a 322e 2c66 2220     ry.{"t1":%.2f, "
   bc32c:	3176 3a22 2e25 6632 007d 227b 3274 3a22     v1":%.2f}.{"t2":
   bc33c:	2e25 6632 222c 3276 3a22 2e25 6632 007d     %.2f,"v2":%.2f}.
   bc34c:	227b 3374 3a22 2e25 6632 222c 3376 3a22     {"t3":%.2f,"v3":
   bc35c:	2e25 6632 007d 227b 3474 3a22 2e25 6632     %.2f}.{"t4":%.2f
   bc36c:	222c 3476 3a22 2e25 6632 007d 227b 3574     ,"v4":%.2f}.{"t5
   bc37c:	3a22 2e25 6632 222c 3576 3a22 2e25 6632     ":%.2f,"v5":%.2f
   bc38c:	007d 227b 3674 3a22 2e25 6632 222c 3676     }.{"t6":%.2f,"v6
   bc39c:	3a22 2e25 6632 007d 227b 3774 3a22 2e25     ":%.2f}.{"t7":%.
   bc3ac:	6632 222c 3776 3a22 2e25 6632 007d 4142     2f,"v7":%.2f}.BA
   bc3bc:	3134 3430 3330 3932 3836 4142 3131 3431     4104032968BA1114
   bc3cc:	3932 3039 3937 3230 3531 3439 4141 4100     299079021594AA.A
   bc3dc:	2b54 5043 4e49 253d 0d73 000a 7741 6961     T+CPIN=%s...Awai
   bc3ec:	6974 676e 5220 7065 796c 6620 6f72 206d     ting Reply from 
   bc3fc:	6170 7373 6f77 6472 000a 6552 6c70 3a79     password..Reply:
   bc40c:	2520 0a73 4100 2b54 4441 5244 5345 3d53      %s..AT+ADDRESS=
   bc41c:	6925 0a0d 4100 6177 7469 6e69 2067 6552     %i...Awaiting Re
   bc42c:	6c70 2079 7266 6d6f 6120 6464 6572 7373     ply from address
   bc43c:	000a 6552 6c70 2079 6461 7264 7365 3a73     ..Reply address:
   bc44c:	2520 0a73 4100 2b54 454e 5754 524f 494b      %s..AT+NETWORKI
   bc45c:	3d44 6925 0a0d 4100 6177 7469 6e69 2067     D=%i...Awaiting 
   bc46c:	6552 6c70 2079 7266 6d6f 6e20 7465 6f77     Reply from netwo
   bc47c:	6b72 6469 000a 6552 6c70 2079 656e 7774     rkid..Reply netw
   bc48c:	726f 3a6b 2520 0a73 4100 2b54 4441 5244     ork: %s..AT+ADDR
   bc49c:	5345 3f53 0a0d 4100 6177 7469 6e69 2067     ESS?...Awaiting 
   bc4ac:	6552 6c70 0a79 5200 7065 796c 6720 7465     Reply..Reply get
   bc4bc:	6120 6464 6572 7373 203a 7325 000a 5441      address: %s..AT
   bc4cc:	4e2b 5445 4f57 4b52 4449 0d3f 000a 6552     +NETWORKID?...Re
   bc4dc:	6c70 2079 6567 2074 656e 7774 726f 3a6b     ply get network:
   bc4ec:	2520 0a73 4100 2b54 5043 4e49 0d3f 000a      %s..AT+CPIN?...
   bc4fc:	6552 6c70 2079 6567 2074 6170 7373 6f77     Reply get passwo
   bc50c:	6472 203a 7325 000a 5441 522b 5345 5445     rd: %s..AT+RESET
   bc51c:	0a0d 3100 7a59 3834 736c 3550 6271 6e77     ...1Yz48lsP5qbwn
   bc52c:	3562 6959 6446 005a 7563 7473 6d6f 7265     b5YiFdZ.customer
   bc53c:	3130 7700 6265 6f68 6b6f 6400 7665 6369     01.webhook.devic
   bc54c:	4965 3a44 2520 0a73 6300 756f 746e 7265     eID: %s..counter
   bc55c:	6800 6d6f 4265 7461 6574 7972 5500 6962     .homeBattery.Ubi
   bc56c:	6f64 7374 6420 7461 2061 6573 746e 2e2e     dots data sent..
   bc57c:	002e 7245 6f72 2e72 2e2e 6275 6469 746f     ..Error...ubidot
   bc58c:	2073 6164 6174 6e20 746f 7320 6e65 2e74     s data not sent.
   bc59c:	2e2e 6900 636e 6d6f 6e69 5367 7274 6e69     ...incomingStrin
   bc5ac:	3a67 2520 0a73 7400 6d65 4670 203a 2e25     g: %s..tempF: %.
   bc5bc:	3230 2c66 7020 6f72 6562 754e 626d 7265     02f, probeNumber
   bc5cc:	203a 6925 000a 6574 706d 6c42 6575 7600     : %i..tempBlue.v
   bc5dc:	6c6f 6174 6567 6c42 6575 7400 6d65 4770     oltageBlue.tempG
   bc5ec:	6572 6e65 7600 6c6f 6174 6567 7247 6565     reen.voltageGree
   bc5fc:	006e 6574 706d 724f 6e61 6567 7600 6c6f     n.tempOrange.vol
   bc60c:	6174 6567 724f 6e61 6567 3000 3430 3000     tageOrange.004.0
   bc61c:	3430 6f56 746c 6761 0065 3030 0035 3030     04Voltage.005.00
   bc62c:	5635 6c6f 6174 6567 3000 3630 3000 3630     5Voltage.006.006
   bc63c:	6f56 746c 6761 0065 3030 0037 3030 5637     Voltage.007.007V
   bc64c:	6c6f 6174 6567 6500 7478 6172 7250 626f     oltage.extraProb
   bc65c:	0065 6e69 6f63 696d 676e 7453 6972 676e     e.incomingString
   bc66c:	3a32 2520 0a73 0000                         2: %s...

000bc674 <_ZTV11UbiParticle>:
	...
   bc67c:	4f25 000b 4f05 000b 4f11 000b 4f15 000b     %O...O...O...O..
   bc68c:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   bc69c:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   bc6ac:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   bc6bc:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   bc6cc:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   bc6dc:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   bc6ec:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   bc6fc:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   bc70c:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   bc71c:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   bc72c:	7720 7469 2068 4455 0050 0000                with UDP...

000bc738 <_ZTV6UbiUDP>:
	...
   bc740:	5039 000b 4fb9 000b 4fc5 000b 4fc9 000b     9P...O...O...O..
   bc750:	6255 6469 746f 5073 7261 6974 6c63 2f65     UbidotsParticle/
   bc760:	2e33 0032 7254 6979 676e 7420 206f 6f63     3.2.Trying to co
   bc770:	6e6e 6365 2074 6f74 0020 2c20 6120 7474     nnect to . , att
   bc780:	6d65 7470 6e20 6d75 6562 3a72 0020 7441     empt number: .At
   bc790:	6574 706d 2074 6966 696e 6873 6465 5300     tempt finished.S
   bc7a0:	7265 6576 2772 2073 6572 7073 6e6f 6573     erver's response
   bc7b0:	003a 2d0a 2d2d 2d2d 2d2d 2d2d 002d 6974     :..----------.ti
   bc7c0:	656d 756f 2c74 6320 756f 646c 6e20 746f     meout, could not
   bc7d0:	7220 6165 2064 6e61 2079 6572 7073 6e6f      read any respon
   bc7e0:	6573 6620 6f72 206d 6874 2065 6f68 7473     se from the host
   bc7f0:	5000 534f 2054 612f 6970 762f 2e31 2f36     .POST /api/v1.6/
   bc800:	6564 6976 6563 2f73 2000 5448 5054 312f     devices/. HTTP/1
   bc810:	312e 0a0d 4800 736f 3a74 0020 7355 7265     .1...Host: .User
   bc820:	412d 6567 746e 203a 5800 412d 7475 2d68     -Agent: .X-Auth-
   bc830:	6f54 656b 3a6e 0020 6f43 6e6e 6365 6974     Token: .Connecti
   bc840:	6e6f 203a 6c63 736f 0d65 000a 6f43 746e     on: close...Cont
   bc850:	6e65 2d74 7954 6570 203a 7061 6c70 6369     ent-Type: applic
   bc860:	7461 6f69 2f6e 736a 6e6f 0a0d 4300 6e6f     ation/json...Con
   bc870:	6574 746e 4c2d 6e65 7467 3a68 0020 614d     tent-Length: .Ma
   bc880:	696b 676e 7220 7165 6575 7473 7420 206f     king request to 
   bc890:	6255 6469 746f 3a73 000a 6177 7469 6e69     Ubidots:..waitin
   bc8a0:	2067 6f66 2072 6573 7672 7265 6120 736e     g for server ans
   bc8b0:	6577 2072 2e2e 002e 550a 6962 6f64 7374     wer .....Ubidots
   bc8c0:	2027 6553 7672 7265 7220 7365 6f70 736e     ' Server respons
   bc8d0:	3a65 000a 6f43 6c75 2064 6f6e 2074 6573     e:..Could not se
   bc8e0:	646e 6420 7461 2061 6f74 7520 6962 6f64     nd data to ubido
   bc8f0:	7374 7520 6973 676e 4820 5454 0050 4547     ts using HTTP.GE
   bc900:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
   bc910:	6563 2f73 2f00 766c 4300 6e6f 6574 746e     ces/./lv.Content
   bc920:	542d 7079 3a65 6120 7070 696c 6163 6974     -Type: applicati
   bc930:	6e6f 6a2f 6f73 0d6e 0d0a 000a 6f43 6e6e     on/json.....Conn
   bc940:	6365 6974 6e6f 4620 6961 656c 2064 6275     ection Failed ub
   bc950:	6469 746f 2073 202d 7254 2079 6741 6961     idots - Try Agai
   bc960:	006e 0000                                   n...

000bc964 <_ZTV7UbiHTTP>:
	...
   bc96c:	576d 000b 599d 000b 5521 000b 5525 000b     mW...Y..!U..%U..
   bc97c:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   bc98c:	6962 6f64 7374 632e 6d6f 5900 756f 6120     bidots.com.You a
   bc99c:	6572 7320 6e65 6964 676e 6d20 726f 2065     re sending more 
   bc9ac:	6874 6e61 7420 6568 6d20 7861 6d69 6d75     than the maximum
   bc9bc:	6f20 2066 6f63 736e 6365 7475 7669 2065      of consecutive 
   bc9cc:	6176 6972 6261 656c 0073 3125 6737 7b00     variables.%17g.{
   bc9dc:	2500 2273 7325 3a22 227b 6176 756c 2265     .%s"%s":{"value"
   bc9ec:	253a 0073 7325 222c 6974 656d 7473 6d61     :%s.%s,"timestam
   bc9fc:	2270 253a 756c 2500 2564 2564 0064 7325     p":%lu.%d%d%d.%s
   bca0c:	7325 2500 3073 3030 2500 2c73 6322 6e6f     %s.%s000.%s,"con
   bca1c:	6574 7478 3a22 7b20 7325 007d 7325 002c     text": {%s}.%s,.
   bca2c:	6170 6c79 616f 3a64 2500 7c73 4f50 5453     payload:.%s|POST
   bca3c:	257c 7c73 2500 2573 3a73 7325 2500 3d73     |%s|.%s%s:%s.%s=
   bca4c:	003e 7325 2524 0073 7325 2540 756c 2500     >.%s$%s.%s@%lu.%
   bca5c:	7c73 6e65 0064 6553 646e 6e69 2067 6164     s|end.Sending da
   bca6c:	6174 2e2e 002e 7441 6574 706d 6974 676e     ta....Attempting
   bca7c:	7420 206f 6572 6f63 6e6e 6365 0074 4c7c      to reconnect.|L
   bca8c:	7c56 5000 7961 6f6c 6461 6620 726f 7220     V|.Payload for r
   bca9c:	7165 6575 7473 003a 2d0a 2d2d 002d 4f50     equest:..----.PO
   bcaac:	5453 4f00 004b 6f43 6c75 2064 6f6e 2074     ST.OK.Could not 
   bcabc:	6f63 6e6e 6365 2074 6f74 7420 6568 6820     connect to the h
   bcacc:	736f 0074 564c 4500 5252 524f 6320 756f     ost.LV.ERROR cou
   bcadc:	646c 6e20 746f 6320 6e6f 656e 7463 7420     ld not connect t
   bcaec:	206f 6874 2065 6573 7672 7265 6e00 6c75     o the server.nul
   bcafc:	006c 5245 4f52 0052                         l.ERROR.

000bcb04 <_ZTV6UbiTCP>:
	...
   bcb0c:	6479 000b 651d 000b 61ad 000b 66e1 000b     yd...e...a...f..
   bcb1c:	0400 514d 5454 0004                         ..MQTT..

000bcb24 <_ZTVN5spark12NetworkClassE>:
	...
   bcb2c:	7421 000b 742b 000b 7435 000b 743f 000b     !t..+t..5t..?t..
   bcb3c:	7449 000b 7455 000b 7461 000b 7469 000b     It..Ut..at..it..
   bcb4c:	7471 000b 747d 000b 7485 000b 748f 000b     qt..}t...t...t..
   bcb5c:	7499 000b 6977 6972 676e 7200 6365 2076     .t..wiring.recv 
   bcb6c:	7265 6f72 2072 203d 6425 0000               error = %d..

000bcb78 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcb80:	7609 000b 762d 000b 7b23 000b 763b 000b     .v..-v..#{..;v..
   bcb90:	760d 000b                                   .v..

000bcb94 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bcb9c <_ZTV9TCPClient>:
	...
   bcba4:	5259 000b 528d 000b 7585 000b 759f 000b     YR...R...u...u..
   bcbb4:	79ad 000b 75c9 000b 7823 000b 75fd 000b     .y...u..#x...u..
   bcbc4:	78b5 000b 76f5 000b 7851 000b 7a61 000b     .x...v..Qx..az..
   bcbd4:	77f1 000b 75ff 000b 75b1 000b 7641 000b     .w...u...u..Av..
   bcbe4:	76d5 000b                                   .v..

000bcbe8 <_ZTV7TwoWire>:
	...
   bcbf0:	7b29 000b 7b73 000b 7b4b 000b 7b2b 000b     ){..s{..K{..+{..
   bcc00:	7b53 000b 7b5b 000b 7b63 000b 7b6b 000b     S{..[{..c{..k{..

000bcc10 <_ZTV11USARTSerial>:
	...
   bcc18:	7bdf 000b 7c4b 000b 7c23 000b 8869 000b     .{..K|..#|..i...
   bcc28:	7bf3 000b 7c0f 000b 7c01 000b 7c1d 000b     .{...|...|...|..
   bcc38:	7be1 000b 7be5 000b                         .{...{..

000bcc40 <_ZTVN5spark13CellularClassE>:
	...
   bcc48:	7ced 000b 7ce3 000b 7cd9 000b 7c8f 000b     .|...|...|...|..
   bcc58:	7ccd 000b 7cc1 000b 7461 000b 7469 000b     .|...|..at..it..
   bcc68:	7cb5 000b 7cad 000b 7ca3 000b 7c99 000b     .|...|...|...|..
   bcc78:	7499 000b                                   .t..

000bcc7c <_ZTV9USBSerial>:
	...
   bcc84:	7d2f 000b 7d97 000b 7d6d 000b 8869 000b     /}...}..m}..i...
   bcc94:	7d5f 000b 7d31 000b 7d41 000b 7d91 000b     _}..1}..A}...}..
   bcca4:	7d51 000b 7d29 000b                         Q}..)}..

000bccac <_ZTV9IPAddress>:
	...
   bccb4:	7e41 000b 7e31 000b 7e33 000b               A~..1~..3~..

000bccc0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bccc8:	7f65 000b 7f6b 000b 7fa9 000b 7f79 000b     e...k.......y...
   bccd8:	7f67 000b 5925 252d 2d6d 6425 2554 3a48     g...%Y-%m-%dT%H:
   bcce8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   bccf8:	7061 0070                                   app.

000bccfc <_ZTV3UDP>:
	...
   bcd04:	913d 000b 9161 000b 8bfd 000b 8d25 000b     =...a.......%...
   bcd14:	8bb5 000b 8c15 000b 8c33 000b 8c4d 000b     ........3...M...
   bcd24:	8c71 000b 8d09 000b 8fe3 000b 8da9 000b     q...............
   bcd34:	8f01 000b 8b9d 000b 90cd 000b 8e89 000b     ................
   bcd44:	8bbd 000b 90fb 000b 8d4f 000b 8bab 000b     ........O.......
   bcd54:	8de1 000b 8bb1 000b 8c4f 000b fff0 ffff     ........O.......
   bcd64:	0000 0000 8c69 000b                         ....i...

000bcd6c <_ZTVN5spark13EthernetClassE>:
	...
   bcd74:	91d3 000b 91c9 000b 91bf 000b 91b5 000b     ................
   bcd84:	91a9 000b 919d 000b 7461 000b 7469 000b     ........at..it..
   bcd94:	9191 000b 9189 000b 917f 000b 9175 000b     ............u...
   bcda4:	7499 000b                                   .t..

000bcda8 <_ZSt7nothrow>:
	...

000bcda9 <_ZTSSt19_Sp_make_shared_tag>:
   bcda9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bcdb9:	6572 5f64 6174 0067 0000                     red_tag....

000bcdc4 <_ZTISt19_Sp_make_shared_tag>:
   bcdc4:	ce04 000b cda9 000b                         ........

000bcdcc <_ZTIN10__cxxabiv117__class_type_infoE>:
   bcdcc:	ce64 000b cdd8 000b ce88 000b               d...........

000bcdd8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcdd8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bcde8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bcdf8:	0045 0000                                   E...

000bcdfc <_ZTVN10__cxxabiv117__class_type_infoE>:
   bcdfc:	0000 0000 cdcc 000b 94d5 000b 94e9 000b     ................
   bce0c:	967d 000b 967d 000b 9553 000b 9495 000b     }...}...S.......
   bce1c:	953b 000b 94fd 000b 94c7 000b               ;...........

000bce28 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bce28:	ce64 000b ce34 000b cdcc 000b               d...4.......

000bce34 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bce34:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bce44:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bce54:	666e 456f 0000 0000                         nfoE....

000bce5c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bce5c:	0000 0000 ce28 000b 957d 000b 9591 000b     ....(...}.......
   bce6c:	967d 000b 967d 000b 9553 000b 9495 000b     }...}...S.......
   bce7c:	9651 000b 95dd 000b 95a5 000b               Q...........

000bce88 <_ZTISt9type_info>:
   bce88:	ce04 000b ce90 000b                         ........

000bce90 <_ZTSSt9type_info>:
   bce90:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bcea0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bceb0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bcec0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bced0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bcee0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bcef0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bcf00:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bcf10:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bcf20:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bcf30:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bcf40 <fpi.1>:
   bcf40:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bcf50:	0000 0000                                   ....

000bcf54 <fpinan.0>:
   bcf54:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bcf64:	0000 0000                                   ....

000bcf68 <tinytens>:
   bcf68:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bcf78:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bcf88:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bcf98:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bcfa8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bcfb8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bcfc8:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bcfd8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bcfe8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bcff8:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bd008:	7472 6b6f 632e                               rtok.c.

000bd00f <_ctype_>:
   bd00f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd01f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd02f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd03f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd04f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd05f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd06f:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd07f:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd08f:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd10f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd11f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bd12f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bd13f:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bd14f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bd15f:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bd16f:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bd17f:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bd18f:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bd19f:	6874 7865 632e 0000                          thex.c...

000bd1a8 <_C_numeric_locale>:
   bd1a8:	c8b6 000b c93b 000b dff4 2003 0043 4f50     ....;...... C.PO
   bd1b8:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bd1c8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd1d8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd1e8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd1f8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd208:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd218:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd228:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bd238:	0063 0000 0000 0000                         c.......

000bd240 <__mprec_bigtens>:
   bd240:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd250:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd260:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd268 <__mprec_tens>:
   bd268:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd278:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd288:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd298:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd2a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd2b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd2c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd2d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd2e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd2f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd308:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd318:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd328:	9db4 79d9 7843 44ea                         ...yCx.D

000bd330 <p05.0>:
   bd330:	0005 0000 0019 0000 007d 0000               ........}...

000bd33c <link_const_variable_data_end>:
   bd33c:	000b47dd 	.word	0x000b47dd
   bd340:	000b5109 	.word	0x000b5109
   bd344:	000b54fd 	.word	0x000b54fd
   bd348:	000b5b79 	.word	0x000b5b79
   bd34c:	000b617d 	.word	0x000b617d
   bd350:	000b67c1 	.word	0x000b67c1
   bd354:	000b7571 	.word	0x000b7571
   bd358:	000b7cf9 	.word	0x000b7cf9
   bd35c:	000b86b5 	.word	0x000b86b5
   bd360:	000b87c1 	.word	0x000b87c1
   bd364:	000b87d5 	.word	0x000b87d5
   bd368:	000b8991 	.word	0x000b8991
   bd36c:	000b8b79 	.word	0x000b8b79
   bd370:	000b91dd 	.word	0x000b91dd

000bd374 <link_constructors_end>:
	...
