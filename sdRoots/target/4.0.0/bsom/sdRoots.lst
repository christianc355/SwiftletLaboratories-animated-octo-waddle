
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/sdRoots/target/4.0.0/bsom/sdRoots.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003944  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7960  000b7960  00007960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7984  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  2003e144  000b7988  0001e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000630  2003e1c0  2003e1c0  0002e1c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7a04  000b7a04  00027a04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7a2c  000b7a2c  00027a2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00147bab  00000000  00000000  00027a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015dcb  00000000  00000000  0016f5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002a80  00000000  00000000  001853a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0003f9ce  00000000  00000000  00187e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0004a59e  00000000  00000000  001c77f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0013605f  00000000  00000000  00211d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0003b4d6  00000000  00000000  00347df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000a720  00000000  00000000  003832c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007900  00000000  00000000  0038d9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f9a5 	bl	b737c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f9ad 	bl	b7398 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e144 	.word	0x2003e144
   b4048:	000b7988 	.word	0x000b7988
   b404c:	2003e1c0 	.word	0x2003e1c0
   b4050:	2003e1c0 	.word	0x2003e1c0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fb45 	bl	b66ec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7938 	.word	0x000b7938
   b407c:	000b795c 	.word	0x000b795c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b9d4 	b.w	b442c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f867 	bl	b4158 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bae5 	b.w	b665c <_post_loop>

000b4092 <_Znaj>:
   b4092:	f001 bf35 	b.w	b5f00 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f001 bf3b 	b.w	b5f10 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40aa:	4770      	bx	lr

000b40ac <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   b40ac:	4770      	bx	lr

000b40ae <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40ae:	b510      	push	{r4, lr}
  }
   b40b0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40b2:	4604      	mov	r4, r0
  }
   b40b4:	f7ff ffef 	bl	b4096 <_ZdlPvj>
   b40b8:	4620      	mov	r0, r4
   b40ba:	bd10      	pop	{r4, pc}

000b40bc <_ZN6SdFileD0Ev>:
   b40bc:	b510      	push	{r4, lr}
   b40be:	212c      	movs	r1, #44	; 0x2c
   b40c0:	4604      	mov	r4, r0
   b40c2:	f7ff ffe8 	bl	b4096 <_ZdlPvj>
   b40c6:	4620      	mov	r0, r4
   b40c8:	bd10      	pop	{r4, pc}

000b40ca <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b40ca:	3008      	adds	r0, #8
   b40cc:	f000 bfb6 	b.w	b503c <_ZN7FatFile5writeEPKvj>

000b40d0 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
   b40d0:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b40d2:	2201      	movs	r2, #1
   b40d4:	f88d 1007 	strb.w	r1, [sp, #7]
   b40d8:	3008      	adds	r0, #8
   b40da:	f10d 0107 	add.w	r1, sp, #7
   b40de:	f000 ffad 	bl	b503c <_ZN7FatFile5writeEPKvj>
  }
   b40e2:	b003      	add	sp, #12
   b40e4:	f85d fb04 	ldr.w	pc, [sp], #4

000b40e8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e8:	b40e      	push	{r1, r2, r3}
   b40ea:	b503      	push	{r0, r1, lr}
   b40ec:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ee:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40f4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40f6:	f002 fb9e 	bl	b6836 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40fa:	b002      	add	sp, #8
   b40fc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4100:	b003      	add	sp, #12
   b4102:	4770      	bx	lr

000b4104 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4104:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4106:	4604      	mov	r4, r0
   b4108:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b410a:	7922      	ldrb	r2, [r4, #4]
   b410c:	68a3      	ldr	r3, [r4, #8]
   b410e:	b132      	cbz	r2, b411e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4110:	b9a3      	cbnz	r3, b413c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4112:	490b      	ldr	r1, [pc, #44]	; (b4140 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4114:	b002      	add	sp, #8
   b4116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b411a:	f002 bb4b 	b.w	b67b4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b411e:	4a09      	ldr	r2, [pc, #36]	; (b4144 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4120:	7b26      	ldrb	r6, [r4, #12]
   b4122:	4d09      	ldr	r5, [pc, #36]	; (b4148 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4124:	4909      	ldr	r1, [pc, #36]	; (b414c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4126:	7b64      	ldrb	r4, [r4, #13]
   b4128:	2e01      	cmp	r6, #1
   b412a:	bf18      	it	ne
   b412c:	4629      	movne	r1, r5
   b412e:	e9cd 1400 	strd	r1, r4, [sp]
   b4132:	4907      	ldr	r1, [pc, #28]	; (b4150 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4134:	f7ff ffd8 	bl	b40e8 <_ZN5Print6printfEPKcz>
  }
   b4138:	b002      	add	sp, #8
   b413a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b413c:	4a05      	ldr	r2, [pc, #20]	; (b4154 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b413e:	e7ef      	b.n	b4120 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4140:	000b7581 	.word	0x000b7581
   b4144:	000b7624 	.word	0x000b7624
   b4148:	000b757d 	.word	0x000b757d
   b414c:	000b7579 	.word	0x000b7579
   b4150:	000b7597 	.word	0x000b7597
   b4154:	000b7570 	.word	0x000b7570

000b4158 <loop>:
      ;
  }
}

void loop()
{
   b4158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if (millis() - lastTime > 15000)
   b415c:	4d7c      	ldr	r5, [pc, #496]	; (b4350 <loop+0x1f8>)
{
   b415e:	b093      	sub	sp, #76	; 0x4c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4160:	f001 fe0a 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTime > 15000)
   b4164:	682b      	ldr	r3, [r5, #0]
   b4166:	1ac0      	subs	r0, r0, r3
   b4168:	f643 2398 	movw	r3, #15000	; 0x3a98
   b416c:	4298      	cmp	r0, r3
   b416e:	f240 80ec 	bls.w	b434a <loop+0x1f2>
  {
    Serial.printf("Starting Data Logging \n");
   b4172:	f002 f9b3 	bl	b64dc <_Z16_fetch_usbserialv>
   b4176:	4977      	ldr	r1, [pc, #476]	; (b4354 <loop+0x1fc>)
    return file.open(this, path, O_RDONLY);
   b4178:	4c77      	ldr	r4, [pc, #476]	; (b4358 <loop+0x200>)
   b417a:	4f78      	ldr	r7, [pc, #480]	; (b435c <loop+0x204>)
   b417c:	f7ff ffb4 	bl	b40e8 <_ZN5Print6printfEPKcz>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4180:	2600      	movs	r6, #0
    return file.open(this, path, O_RDONLY);
   b4182:	4a75      	ldr	r2, [pc, #468]	; (b4358 <loop+0x200>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4184:	9609      	str	r6, [sp, #36]	; 0x24
    return file.open(this, path, O_RDONLY);
   b4186:	2300      	movs	r3, #0
   b4188:	4639      	mov	r1, r7
   b418a:	a809      	add	r0, sp, #36	; 0x24
   b418c:	f000 ff09 	bl	b4fa2 <_ZN7FatFile4openEPS_PKci>
    while (sd.exists(fileName))
   b4190:	b198      	cbz	r0, b41ba <loop+0x62>
    {
      if (fileName[BASE_NAME_SIZE + 1] != '9')
   b4192:	78a3      	ldrb	r3, [r4, #2]
   b4194:	2b39      	cmp	r3, #57	; 0x39
   b4196:	d002      	beq.n	b419e <loop+0x46>
      {
        fileName[BASE_NAME_SIZE + 1]++;
   b4198:	3301      	adds	r3, #1
   b419a:	70a3      	strb	r3, [r4, #2]
   b419c:	e7f1      	b.n	b4182 <loop+0x2a>
      }
      else if (fileName[BASE_NAME_SIZE] != '9')
   b419e:	7863      	ldrb	r3, [r4, #1]
   b41a0:	2b39      	cmp	r3, #57	; 0x39
   b41a2:	d004      	beq.n	b41ae <loop+0x56>
      {
        fileName[BASE_NAME_SIZE + 1] = '0';
   b41a4:	2230      	movs	r2, #48	; 0x30
        fileName[BASE_NAME_SIZE]++;
   b41a6:	3301      	adds	r3, #1
        fileName[BASE_NAME_SIZE + 1] = '0';
   b41a8:	70a2      	strb	r2, [r4, #2]
        fileName[BASE_NAME_SIZE]++;
   b41aa:	7063      	strb	r3, [r4, #1]
   b41ac:	e7e9      	b.n	b4182 <loop+0x2a>
      }
      else
      {
        Serial.println("Can't create file name");
   b41ae:	f002 f995 	bl	b64dc <_Z16_fetch_usbserialv>
   b41b2:	496b      	ldr	r1, [pc, #428]	; (b4360 <loop+0x208>)
   b41b4:	f002 fb15 	bl	b67e2 <_ZN5Print7printlnEPKc>
        while (1)
   b41b8:	e7fe      	b.n	b41b8 <loop+0x60>
    return open(m_cwd, path, oflag);
   b41ba:	496a      	ldr	r1, [pc, #424]	; (b4364 <loop+0x20c>)
   b41bc:	4a66      	ldr	r2, [pc, #408]	; (b4358 <loop+0x200>)
   b41be:	6809      	ldr	r1, [r1, #0]
   b41c0:	4869      	ldr	r0, [pc, #420]	; (b4368 <loop+0x210>)
   b41c2:	f640 2301 	movw	r3, #2561	; 0xa01
   b41c6:	f000 feec 	bl	b4fa2 <_ZN7FatFile4openEPS_PKci>
          ;
      }
    }

    if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL))
   b41ca:	b920      	cbnz	r0, b41d6 <loop+0x7e>
    {
      Serial.println("file.open");
   b41cc:	f002 f986 	bl	b64dc <_Z16_fetch_usbserialv>
   b41d0:	4966      	ldr	r1, [pc, #408]	; (b436c <loop+0x214>)
   b41d2:	f002 fb06 	bl	b67e2 <_ZN5Print7printlnEPKc>
    }
    Serial.printf("Logging to: %s \n", fileName);
   b41d6:	f002 f981 	bl	b64dc <_Z16_fetch_usbserialv>
   b41da:	4a5f      	ldr	r2, [pc, #380]	; (b4358 <loop+0x200>)
   b41dc:	4964      	ldr	r1, [pc, #400]	; (b4370 <loop+0x218>)
   b41de:	f7ff ff83 	bl	b40e8 <_ZN5Print6printfEPKcz>

    float t1 = random(70000, 170000) / 1000.0;
   b41e2:	4964      	ldr	r1, [pc, #400]	; (b4374 <loop+0x21c>)
   b41e4:	4864      	ldr	r0, [pc, #400]	; (b4378 <loop+0x220>)
   b41e6:	f002 f835 	bl	b6254 <_Z6randomii>
    float t2 = random(70000, 170000) / 1000.0;
   b41ea:	4962      	ldr	r1, [pc, #392]	; (b4374 <loop+0x21c>)
    float t1 = random(70000, 170000) / 1000.0;
   b41ec:	4604      	mov	r4, r0
    float t2 = random(70000, 170000) / 1000.0;
   b41ee:	4862      	ldr	r0, [pc, #392]	; (b4378 <loop+0x220>)
   b41f0:	f002 f830 	bl	b6254 <_Z6randomii>
    float t3 = random(70000, 170000) / 1000.0;
   b41f4:	495f      	ldr	r1, [pc, #380]	; (b4374 <loop+0x21c>)
    float t2 = random(70000, 170000) / 1000.0;
   b41f6:	4680      	mov	r8, r0
    float t3 = random(70000, 170000) / 1000.0;
   b41f8:	485f      	ldr	r0, [pc, #380]	; (b4378 <loop+0x220>)
   b41fa:	f002 f82b 	bl	b6254 <_Z6randomii>
    float t4 = random(70000, 170000) / 1000.0;
   b41fe:	495d      	ldr	r1, [pc, #372]	; (b4374 <loop+0x21c>)
    float t3 = random(70000, 170000) / 1000.0;
   b4200:	4681      	mov	r9, r0
    float t4 = random(70000, 170000) / 1000.0;
   b4202:	485d      	ldr	r0, [pc, #372]	; (b4378 <loop+0x220>)
   b4204:	f002 f826 	bl	b6254 <_Z6randomii>
    float t5 = random(70000, 170000) / 1000.0;
   b4208:	495a      	ldr	r1, [pc, #360]	; (b4374 <loop+0x21c>)
    float t4 = random(70000, 170000) / 1000.0;
   b420a:	4682      	mov	sl, r0
    float t5 = random(70000, 170000) / 1000.0;
   b420c:	485a      	ldr	r0, [pc, #360]	; (b4378 <loop+0x220>)
   b420e:	f002 f821 	bl	b6254 <_Z6randomii>
    float t6 = random(70000, 170000) / 1000.0;
   b4212:	4958      	ldr	r1, [pc, #352]	; (b4374 <loop+0x21c>)
    float t5 = random(70000, 170000) / 1000.0;
   b4214:	4683      	mov	fp, r0
    float t6 = random(70000, 170000) / 1000.0;
   b4216:	4858      	ldr	r0, [pc, #352]	; (b4378 <loop+0x220>)
   b4218:	f002 f81c 	bl	b6254 <_Z6randomii>
    float t7 = random(70000, 170000) / 1000.0;
   b421c:	4955      	ldr	r1, [pc, #340]	; (b4374 <loop+0x21c>)
   b421e:	4856      	ldr	r0, [pc, #344]	; (b4378 <loop+0x220>)
   b4220:	f002 f818 	bl	b6254 <_Z6randomii>

    float v1 = random(3000, 4700) / 1000.0;
   b4224:	f241 215c 	movw	r1, #4700	; 0x125c
   b4228:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b422c:	f002 f812 	bl	b6254 <_Z6randomii>
    float v2 = random(3000, 4700) / 1000.0;
   b4230:	f241 215c 	movw	r1, #4700	; 0x125c
   b4234:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4238:	f002 f80c 	bl	b6254 <_Z6randomii>
    float v3 = random(3000, 4700) / 1000.0;
   b423c:	f241 215c 	movw	r1, #4700	; 0x125c
   b4240:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4244:	f002 f806 	bl	b6254 <_Z6randomii>
    float v4 = random(3000, 4700) / 1000.0;
   b4248:	f241 215c 	movw	r1, #4700	; 0x125c
   b424c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4250:	f002 f800 	bl	b6254 <_Z6randomii>
    float v5 = random(3000, 4700) / 1000.0;
   b4254:	f241 215c 	movw	r1, #4700	; 0x125c
   b4258:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b425c:	f001 fffa 	bl	b6254 <_Z6randomii>
    float v6 = random(3000, 4700) / 1000.0;
   b4260:	f241 215c 	movw	r1, #4700	; 0x125c
   b4264:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4268:	f001 fff4 	bl	b6254 <_Z6randomii>
    float v7 = random(3000, 4700) / 1000.0;
   b426c:	f241 215c 	movw	r1, #4700	; 0x125c
   b4270:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4274:	f001 ffee 	bl	b6254 <_Z6randomii>
    float t1 = random(70000, 170000) / 1000.0;
   b4278:	4620      	mov	r0, r4
   b427a:	f002 fd9d 	bl	b6db8 <__aeabi_i2d>
   b427e:	4b3f      	ldr	r3, [pc, #252]	; (b437c <loop+0x224>)

    file.printf("%f, %f, %f, %f, %f\n", t1, t2, t3, t4, t5);
   b4280:	4c3f      	ldr	r4, [pc, #252]	; (b4380 <loop+0x228>)
    float t1 = random(70000, 170000) / 1000.0;
   b4282:	2200      	movs	r2, #0
   b4284:	f002 ff2c 	bl	b70e0 <__aeabi_ddiv>
   b4288:	f003 f812 	bl	b72b0 <__aeabi_d2f>
    file.printf("%f, %f, %f, %f, %f\n", t1, t2, t3, t4, t5);
   b428c:	f002 fda6 	bl	b6ddc <__aeabi_f2d>
   b4290:	4606      	mov	r6, r0
    float t5 = random(70000, 170000) / 1000.0;
   b4292:	4658      	mov	r0, fp
    file.printf("%f, %f, %f, %f, %f\n", t1, t2, t3, t4, t5);
   b4294:	460f      	mov	r7, r1
    float t5 = random(70000, 170000) / 1000.0;
   b4296:	f002 fd8f 	bl	b6db8 <__aeabi_i2d>
   b429a:	4b38      	ldr	r3, [pc, #224]	; (b437c <loop+0x224>)
   b429c:	2200      	movs	r2, #0
   b429e:	f002 ff1f 	bl	b70e0 <__aeabi_ddiv>
   b42a2:	f003 f805 	bl	b72b0 <__aeabi_d2f>
    file.printf("%f, %f, %f, %f, %f\n", t1, t2, t3, t4, t5);
   b42a6:	f002 fd99 	bl	b6ddc <__aeabi_f2d>
   b42aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
    float t4 = random(70000, 170000) / 1000.0;
   b42ae:	4650      	mov	r0, sl
   b42b0:	f002 fd82 	bl	b6db8 <__aeabi_i2d>
   b42b4:	4b31      	ldr	r3, [pc, #196]	; (b437c <loop+0x224>)
   b42b6:	2200      	movs	r2, #0
   b42b8:	f002 ff12 	bl	b70e0 <__aeabi_ddiv>
   b42bc:	f002 fff8 	bl	b72b0 <__aeabi_d2f>
    file.printf("%f, %f, %f, %f, %f\n", t1, t2, t3, t4, t5);
   b42c0:	f002 fd8c 	bl	b6ddc <__aeabi_f2d>
   b42c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    float t3 = random(70000, 170000) / 1000.0;
   b42c8:	4648      	mov	r0, r9
   b42ca:	f002 fd75 	bl	b6db8 <__aeabi_i2d>
   b42ce:	4b2b      	ldr	r3, [pc, #172]	; (b437c <loop+0x224>)
   b42d0:	2200      	movs	r2, #0
   b42d2:	f002 ff05 	bl	b70e0 <__aeabi_ddiv>
   b42d6:	f002 ffeb 	bl	b72b0 <__aeabi_d2f>
    file.printf("%f, %f, %f, %f, %f\n", t1, t2, t3, t4, t5);
   b42da:	f002 fd7f 	bl	b6ddc <__aeabi_f2d>
   b42de:	e9cd 0102 	strd	r0, r1, [sp, #8]
    float t2 = random(70000, 170000) / 1000.0;
   b42e2:	4640      	mov	r0, r8
   b42e4:	f002 fd68 	bl	b6db8 <__aeabi_i2d>
   b42e8:	4b24      	ldr	r3, [pc, #144]	; (b437c <loop+0x224>)
   b42ea:	2200      	movs	r2, #0
   b42ec:	f002 fef8 	bl	b70e0 <__aeabi_ddiv>
   b42f0:	f002 ffde 	bl	b72b0 <__aeabi_d2f>
    file.printf("%f, %f, %f, %f, %f\n", t1, t2, t3, t4, t5);
   b42f4:	f002 fd72 	bl	b6ddc <__aeabi_f2d>
   b42f8:	4632      	mov	r2, r6
   b42fa:	e9cd 0100 	strd	r0, r1, [sp]
   b42fe:	463b      	mov	r3, r7
   b4300:	4920      	ldr	r1, [pc, #128]	; (b4384 <loop+0x22c>)
   b4302:	4620      	mov	r0, r4
   b4304:	f7ff fef0 	bl	b40e8 <_ZN5Print6printfEPKcz>

    if (!file.sync() || file.getWriteError())
   b4308:	f104 0008 	add.w	r0, r4, #8
   b430c:	f000 fe0c 	bl	b4f28 <_ZN7FatFile4syncEv>
   b4310:	b110      	cbz	r0, b4318 <loop+0x1c0>
    return m_error & WRITE_ERROR;
   b4312:	7a63      	ldrb	r3, [r4, #9]
   b4314:	07db      	lsls	r3, r3, #31
   b4316:	d504      	bpl.n	b4322 <loop+0x1ca>
    {
      Serial.printf("write error");
   b4318:	f002 f8e0 	bl	b64dc <_Z16_fetch_usbserialv>
   b431c:	491a      	ldr	r1, [pc, #104]	; (b4388 <loop+0x230>)
   b431e:	f7ff fee3 	bl	b40e8 <_ZN5Print6printfEPKcz>
    }

    file.close();
   b4322:	4811      	ldr	r0, [pc, #68]	; (b4368 <loop+0x210>)
   b4324:	f000 fe36 	bl	b4f94 <_ZN7FatFile5closeEv>
    Serial.printf("Done \n");
   b4328:	f002 f8d8 	bl	b64dc <_Z16_fetch_usbserialv>
   b432c:	4917      	ldr	r1, [pc, #92]	; (b438c <loop+0x234>)
   b432e:	f7ff fedb 	bl	b40e8 <_ZN5Print6printfEPKcz>
    delay(2000);
   b4332:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4336:	f002 fa11 	bl	b675c <delay>
    Serial.printf("Ready for next data log \n");
   b433a:	f002 f8cf 	bl	b64dc <_Z16_fetch_usbserialv>
   b433e:	4914      	ldr	r1, [pc, #80]	; (b4390 <loop+0x238>)
   b4340:	f7ff fed2 	bl	b40e8 <_ZN5Print6printfEPKcz>
   b4344:	f001 fd18 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>

    lastTime = millis();
   b4348:	6028      	str	r0, [r5, #0]
  }
}
   b434a:	b013      	add	sp, #76	; 0x4c
   b434c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4350:	2003e204 	.word	0x2003e204
   b4354:	000b75b4 	.word	0x000b75b4
   b4358:	2003e144 	.word	0x2003e144
   b435c:	2003e644 	.word	0x2003e644
   b4360:	000b75cc 	.word	0x000b75cc
   b4364:	2003e698 	.word	0x2003e698
   b4368:	2003e1e0 	.word	0x2003e1e0
   b436c:	000b75e3 	.word	0x000b75e3
   b4370:	000b75ed 	.word	0x000b75ed
   b4374:	00029810 	.word	0x00029810
   b4378:	00011170 	.word	0x00011170
   b437c:	408f4000 	.word	0x408f4000
   b4380:	2003e1d8 	.word	0x2003e1d8
   b4384:	000b75fe 	.word	0x000b75fe
   b4388:	000b7612 	.word	0x000b7612
   b438c:	000b761e 	.word	0x000b761e
   b4390:	000b7625 	.word	0x000b7625

000b4394 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   b4394:	b508      	push	{r3, lr}
   b4396:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   b4398:	f002 f8a0 	bl	b64dc <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   b439c:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    initErrorHalt(&Serial);
   b43a0:	4605      	mov	r5, r0
    if (cardErrorCode()) {
   b43a2:	b33b      	cbz	r3, b43f4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x60>
      pr->println(F("Can't access SD card. Do not reformat."));
   b43a4:	491a      	ldr	r1, [pc, #104]	; (b4410 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>)
   b43a6:	f002 fa26 	bl	b67f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   b43aa:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   b43ae:	2b20      	cmp	r3, #32
   b43b0:	d103      	bne.n	b43ba <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   b43b2:	4918      	ldr	r1, [pc, #96]	; (b4414 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x80>)
   b43b4:	4628      	mov	r0, r5
   b43b6:	f002 fa1e 	bl	b67f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (!cardErrorCode()) {
   b43ba:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   b43be:	b1b3      	cbz	r3, b43ee <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5a>
    pr->print(F("SD errorCode: 0X"));
   b43c0:	4915      	ldr	r1, [pc, #84]	; (b4418 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   b43c2:	4628      	mov	r0, r5
   b43c4:	f002 f9fd 	bl	b67c2 <_ZN5Print5printEPK19__FlashStringHelper>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b43c8:	2210      	movs	r2, #16
   b43ca:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   b43ce:	4628      	mov	r0, r5
   b43d0:	f002 fa13 	bl	b67fa <_ZN5Print11printNumberEmh>
    pr->print(F(",0X"));
   b43d4:	4911      	ldr	r1, [pc, #68]	; (b441c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   b43d6:	4628      	mov	r0, r5
   b43d8:	f002 f9f3 	bl	b67c2 <_ZN5Print5printEPK19__FlashStringHelper>
   b43dc:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   b43e0:	2210      	movs	r2, #16
   b43e2:	4628      	mov	r0, r5
   b43e4:	f002 fa09 	bl	b67fa <_ZN5Print11printNumberEmh>
        n += println();
   b43e8:	4628      	mov	r0, r5
   b43ea:	f002 f9ee 	bl	b67ca <_ZN5Print7printlnEv>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b43ee:	f001 fca3 	bl	b5d38 <os_thread_yield>
   b43f2:	e7fc      	b.n	b43ee <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5a>
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   b43f4:	79e3      	ldrb	r3, [r4, #7]
   b43f6:	b91b      	cbnz	r3, b4400 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6c>
      pr->println(F("Invalid format, reformat SD."));
   b43f8:	4909      	ldr	r1, [pc, #36]	; (b4420 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
    } else if (!vwd()->isOpen()) {
      pr->println(F("Can't open root directory."));
    } else {
      pr->println(F("No error found."));
   b43fa:	f002 f9fc 	bl	b67f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b43fe:	e7f6      	b.n	b43ee <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5a>
    } else if (!vwd()->isOpen()) {
   b4400:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4404:	b90b      	cbnz	r3, b440a <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x76>
      pr->println(F("Can't open root directory."));
   b4406:	4907      	ldr	r1, [pc, #28]	; (b4424 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x90>)
   b4408:	e7f7      	b.n	b43fa <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x66>
      pr->println(F("No error found."));
   b440a:	4907      	ldr	r1, [pc, #28]	; (b4428 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x94>)
   b440c:	e7f5      	b.n	b43fa <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x66>
   b440e:	bf00      	nop
   b4410:	000b763f 	.word	0x000b763f
   b4414:	000b7666 	.word	0x000b7666
   b4418:	000b7696 	.word	0x000b7696
   b441c:	000b76a7 	.word	0x000b76a7
   b4420:	000b76ab 	.word	0x000b76ab
   b4424:	000b76c8 	.word	0x000b76c8
   b4428:	000b76e3 	.word	0x000b76e3

000b442c <setup>:
{
   b442c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Serial.begin(9600);
   b442e:	f002 f855 	bl	b64dc <_Z16_fetch_usbserialv>
   b4432:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4436:	f002 f845 	bl	b64c4 <_ZN9USBSerial5beginEl>
  delay(2300);
   b443a:	f640 00fc 	movw	r0, #2300	; 0x8fc
   b443e:	f002 f98d 	bl	b675c <delay>
  Serial.printf("Hello\n");
   b4442:	f002 f84b 	bl	b64dc <_Z16_fetch_usbserialv>
   b4446:	491e      	ldr	r1, [pc, #120]	; (b44c0 <setup+0x94>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4448:	4c1e      	ldr	r4, [pc, #120]	; (b44c4 <setup+0x98>)
   b444a:	f7ff fe4d 	bl	b40e8 <_ZN5Print6printfEPKcz>
class SPISettings : public Printable {
   b444e:	4b1e      	ldr	r3, [pc, #120]	; (b44c8 <setup+0x9c>)
   b4450:	9300      	str	r3, [sp, #0]
   b4452:	2300      	movs	r3, #0
   b4454:	f88d 3004 	strb.w	r3, [sp, #4]
   b4458:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b445c:	4b1b      	ldr	r3, [pc, #108]	; (b44cc <setup+0xa0>)
   b445e:	9302      	str	r3, [sp, #8]
   b4460:	2501      	movs	r5, #1
   b4462:	466b      	mov	r3, sp
   b4464:	2208      	movs	r2, #8
   b4466:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b446a:	4630      	mov	r0, r6
   b446c:	f8ad 500c 	strh.w	r5, [sp, #12]
   b4470:	f000 f99c 	bl	b47ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4474:	b300      	cbz	r0, b44b8 <setup+0x8c>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   b4476:	f204 403c 	addw	r0, r4, #1084	; 0x43c
    m_blockDev = blockDev;
   b447a:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b447c:	f000 fd8a 	bl	b4f94 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4480:	4629      	mov	r1, r5
   b4482:	4620      	mov	r0, r4
   b4484:	f000 ffae 	bl	b53e4 <_ZN9FatVolume4initEh>
   b4488:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b448c:	4601      	mov	r1, r0
   b448e:	b170      	cbz	r0, b44ae <setup+0x82>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4490:	490c      	ldr	r1, [pc, #48]	; (b44c4 <setup+0x98>)
   b4492:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b4496:	f000 fbc6 	bl	b4c26 <_ZN7FatFile8openRootEP9FatVolume>
   b449a:	b168      	cbz	r0, b44b8 <setup+0x8c>
    if (!dir->isDir()) {
   b449c:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b44a0:	f013 0f70 	tst.w	r3, #112	; 0x70
   b44a4:	d008      	beq.n	b44b8 <setup+0x8c>
    m_cwd = dir;
   b44a6:	4b0a      	ldr	r3, [pc, #40]	; (b44d0 <setup+0xa4>)
   b44a8:	601d      	str	r5, [r3, #0]
}
   b44aa:	b004      	add	sp, #16
   b44ac:	bd70      	pop	{r4, r5, r6, pc}
    return (part ? init(part) : init(1) || init(0))
   b44ae:	4620      	mov	r0, r4
   b44b0:	f000 ff98 	bl	b53e4 <_ZN9FatVolume4initEh>
   b44b4:	2800      	cmp	r0, #0
   b44b6:	d1eb      	bne.n	b4490 <setup+0x64>
    sd.initErrorHalt();
   b44b8:	4802      	ldr	r0, [pc, #8]	; (b44c4 <setup+0x98>)
   b44ba:	f7ff ff6b 	bl	b4394 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
   b44be:	bf00      	nop
   b44c0:	000b76f3 	.word	0x000b76f3
   b44c4:	2003e208 	.word	0x2003e208
   b44c8:	000b7704 	.word	0x000b7704
   b44cc:	02faf080 	.word	0x02faf080
   b44d0:	2003e698 	.word	0x2003e698

000b44d4 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b44d4:	4b1c      	ldr	r3, [pc, #112]	; (b4548 <_GLOBAL__sub_I_SystemMode+0x74>)
}
   b44d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b44d8:	2500      	movs	r5, #0
    SleepResult() {}
   b44da:	4a1c      	ldr	r2, [pc, #112]	; (b454c <_GLOBAL__sub_I_SystemMode+0x78>)
  SdFat() {
   b44dc:	4c1c      	ldr	r4, [pc, #112]	; (b4550 <_GLOBAL__sub_I_SystemMode+0x7c>)
   b44de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b44e0:	e9c3 5500 	strd	r5, r5, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b44e4:	2002      	movs	r0, #2
   b44e6:	f001 fce7 	bl	b5eb8 <set_system_mode>
   b44ea:	2364      	movs	r3, #100	; 0x64
   b44ec:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b44f0:	4b18      	ldr	r3, [pc, #96]	; (b4554 <_GLOBAL__sub_I_SystemMode+0x80>)
   b44f2:	6065      	str	r5, [r4, #4]
   b44f4:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b44f8:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b44fc:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b4500:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b4504:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
   b4508:	2301      	movs	r3, #1

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b450a:	4d13      	ldr	r5, [pc, #76]	; (b4558 <_GLOBAL__sub_I_SystemMode+0x84>)
   b450c:	f884 3474 	strb.w	r3, [r4, #1140]	; 0x474
   b4510:	7829      	ldrb	r1, [r5, #0]
   b4512:	f3bf 8f5b 	dmb	ish
   b4516:	4019      	ands	r1, r3
   b4518:	d10b      	bne.n	b4532 <_GLOBAL__sub_I_SystemMode+0x5e>
   b451a:	4628      	mov	r0, r5
   b451c:	9101      	str	r1, [sp, #4]
   b451e:	f7ff fdbc 	bl	b409a <__cxa_guard_acquire>
   b4522:	9901      	ldr	r1, [sp, #4]
   b4524:	b128      	cbz	r0, b4532 <_GLOBAL__sub_I_SystemMode+0x5e>
   b4526:	480d      	ldr	r0, [pc, #52]	; (b455c <_GLOBAL__sub_I_SystemMode+0x88>)
   b4528:	f001 fdca 	bl	b60c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b452c:	4628      	mov	r0, r5
   b452e:	f7ff fdb9 	bl	b40a4 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b4532:	4b0a      	ldr	r3, [pc, #40]	; (b455c <_GLOBAL__sub_I_SystemMode+0x88>)
   b4534:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
    Print() : write_error(0) {}
   b4538:	4b09      	ldr	r3, [pc, #36]	; (b4560 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b453a:	2200      	movs	r2, #0
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b453c:	e9c3 2201 	strd	r2, r2, [r3, #4]
  SdFile() {}
   b4540:	4a08      	ldr	r2, [pc, #32]	; (b4564 <_GLOBAL__sub_I_SystemMode+0x90>)
   b4542:	601a      	str	r2, [r3, #0]
   b4544:	b003      	add	sp, #12
   b4546:	bd30      	pop	{r4, r5, pc}
   b4548:	2003e1cc 	.word	0x2003e1cc
   b454c:	ffff0000 	.word	0xffff0000
   b4550:	2003e208 	.word	0x2003e208
   b4554:	000b7704 	.word	0x000b7704
   b4558:	2003e1c0 	.word	0x2003e1c0
   b455c:	2003e1c4 	.word	0x2003e1c4
   b4560:	2003e1d8 	.word	0x2003e1d8
   b4564:	000b7718 	.word	0x000b7718

000b4568 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b4568:	4b01      	ldr	r3, [pc, #4]	; (b4570 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b456a:	2201      	movs	r2, #1
   b456c:	701a      	strb	r2, [r3, #0]
}
   b456e:	4770      	bx	lr
   b4570:	2003e68c 	.word	0x2003e68c

000b4574 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b4574:	1d01      	adds	r1, r0, #4
   b4576:	6800      	ldr	r0, [r0, #0]
   b4578:	f001 bdda 	b.w	b6130 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b457c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b457c:	b510      	push	{r4, lr}
   b457e:	4604      	mov	r4, r0
  m_csPin = csPin;
   b4580:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b4582:	6800      	ldr	r0, [r0, #0]
   b4584:	f001 fda6 	bl	b60d4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b4588:	7d20      	ldrb	r0, [r4, #20]
   b458a:	2101      	movs	r1, #1
   b458c:	f002 fa96 	bl	b6abc <pinMode>
  digitalWrite(m_csPin, HIGH);
   b4590:	7d20      	ldrb	r0, [r4, #20]
   b4592:	2101      	movs	r1, #1
}
   b4594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b4598:	f002 baa1 	b.w	b6ade <digitalWrite>

000b459c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b459c:	6800      	ldr	r0, [r0, #0]
   b459e:	f001 bdad 	b.w	b60fc <_ZN8SPIClass14endTransactionEv>

000b45a2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b45a2:	6800      	ldr	r0, [r0, #0]
   b45a4:	21ff      	movs	r1, #255	; 0xff
   b45a6:	f001 be31 	b.w	b620c <_ZN8SPIClass8transferEh>
	...

000b45ac <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b45ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b45ae:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b45b0:	4a07      	ldr	r2, [pc, #28]	; (b45d0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b45b2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b45b4:	2500      	movs	r5, #0
   b45b6:	4c07      	ldr	r4, [pc, #28]	; (b45d4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b45b8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b45ba:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b45bc:	460a      	mov	r2, r1
   b45be:	4629      	mov	r1, r5
   b45c0:	f001 fe2a 	bl	b6218 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b45c4:	7823      	ldrb	r3, [r4, #0]
   b45c6:	2b00      	cmp	r3, #0
   b45c8:	d0fc      	beq.n	b45c4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b45ca:	2000      	movs	r0, #0
   b45cc:	b003      	add	sp, #12
   b45ce:	bd30      	pop	{r4, r5, pc}
   b45d0:	000b4569 	.word	0x000b4569
   b45d4:	2003e68c 	.word	0x2003e68c

000b45d8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b45d8:	6800      	ldr	r0, [r0, #0]
   b45da:	f001 be17 	b.w	b620c <_ZN8SPIClass8transferEh>
	...

000b45e0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b45e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b45e2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b45e4:	4a06      	ldr	r2, [pc, #24]	; (b4600 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b45e6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b45e8:	2500      	movs	r5, #0
   b45ea:	4c06      	ldr	r4, [pc, #24]	; (b4604 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b45ec:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b45ee:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b45f0:	462a      	mov	r2, r5
   b45f2:	f001 fe11 	bl	b6218 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b45f6:	7823      	ldrb	r3, [r4, #0]
   b45f8:	2b00      	cmp	r3, #0
   b45fa:	d0fc      	beq.n	b45f6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b45fc:	b003      	add	sp, #12
   b45fe:	bd30      	pop	{r4, r5, pc}
   b4600:	000b4569 	.word	0x000b4569
   b4604:	2003e68c 	.word	0x2003e68c

000b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b4608:	f7ff bfe6 	b.w	b45d8 <_ZN14SdSpiAltDriver4sendEh>

000b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b460c:	f7ff bfc9 	b.w	b45a2 <_ZN14SdSpiAltDriver7receiveEv>

000b4610 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b4610:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b4612:	4e0e      	ldr	r6, [pc, #56]	; (b464c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b4614:	460d      	mov	r5, r1
   b4616:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4618:	f001 fba6 	bl	b5d68 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b461c:	6833      	ldr	r3, [r6, #0]
   b461e:	1ac0      	subs	r0, r0, r3
   b4620:	4b0b      	ldr	r3, [pc, #44]	; (b4650 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b4622:	4298      	cmp	r0, r3
   b4624:	d908      	bls.n	b4638 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4626:	f001 fba7 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b462a:	4b0a      	ldr	r3, [pc, #40]	; (b4654 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b462c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b462e:	f001 fbd3 	bl	b5dd8 <spark_process>
   b4632:	f001 fb99 	bl	b5d68 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b4636:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4638:	f001 fb9e 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b463c:	b280      	uxth	r0, r0
   b463e:	1b40      	subs	r0, r0, r5
}
   b4640:	42a0      	cmp	r0, r4
   b4642:	bfd4      	ite	le
   b4644:	2000      	movle	r0, #0
   b4646:	2001      	movgt	r0, #1
   b4648:	bd70      	pop	{r4, r5, r6, pc}
   b464a:	bf00      	nop
   b464c:	2003e690 	.word	0x2003e690
   b4650:	000186a0 	.word	0x000186a0
   b4654:	2003e740 	.word	0x2003e740

000b4658 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b4658:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b465a:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b465c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b465e:	b94d      	cbnz	r5, b4674 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b4660:	6840      	ldr	r0, [r0, #4]
   b4662:	f7ff ff87 	bl	b4574 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b4666:	6863      	ldr	r3, [r4, #4]
   b4668:	4629      	mov	r1, r5
   b466a:	7d18      	ldrb	r0, [r3, #20]
   b466c:	f002 fa37 	bl	b6ade <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b4670:	2301      	movs	r3, #1
   b4672:	7223      	strb	r3, [r4, #8]
  }
}
   b4674:	bd38      	pop	{r3, r4, r5, pc}

000b4676 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b4676:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b4678:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b467a:	4604      	mov	r4, r0
  if (m_spiActive) {
   b467c:	b16b      	cbz	r3, b469a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b467e:	6843      	ldr	r3, [r0, #4]
   b4680:	2101      	movs	r1, #1
   b4682:	7d18      	ldrb	r0, [r3, #20]
   b4684:	f002 fa2b 	bl	b6ade <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b4688:	6860      	ldr	r0, [r4, #4]
   b468a:	21ff      	movs	r1, #255	; 0xff
   b468c:	f7ff ffbc 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b4690:	6860      	ldr	r0, [r4, #4]
   b4692:	f7ff ff83 	bl	b459c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b4696:	2300      	movs	r3, #0
   b4698:	7223      	strb	r3, [r4, #8]
  }
}
   b469a:	bd10      	pop	{r4, pc}

000b469c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b469e:	4604      	mov	r4, r0
   b46a0:	460d      	mov	r5, r1
   b46a2:	4616      	mov	r6, r2
   b46a4:	f001 fb68 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b46a8:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b46aa:	6860      	ldr	r0, [r4, #4]
   b46ac:	f7ff ffae 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b46b0:	28ff      	cmp	r0, #255	; 0xff
   b46b2:	7260      	strb	r0, [r4, #9]
   b46b4:	d10e      	bne.n	b46d4 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b46b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b46ba:	4639      	mov	r1, r7
   b46bc:	4620      	mov	r0, r4
   b46be:	f7ff ffa7 	bl	b4610 <_ZN9SdSpiCard10isTimedOutEtt>
   b46c2:	2800      	cmp	r0, #0
   b46c4:	d0f1      	beq.n	b46aa <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b46c6:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b46c8:	4620      	mov	r0, r4
   b46ca:	7023      	strb	r3, [r4, #0]
   b46cc:	f7ff ffd3 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b46d0:	2000      	movs	r0, #0
}
   b46d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b46d4:	28fe      	cmp	r0, #254	; 0xfe
   b46d6:	d001      	beq.n	b46dc <_ZN9SdSpiCard8readDataEPhj+0x40>
   b46d8:	2350      	movs	r3, #80	; 0x50
   b46da:	e7f5      	b.n	b46c8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b46dc:	6860      	ldr	r0, [r4, #4]
   b46de:	4632      	mov	r2, r6
   b46e0:	4629      	mov	r1, r5
   b46e2:	f7ff ff63 	bl	b45ac <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b46e6:	7260      	strb	r0, [r4, #9]
   b46e8:	b108      	cbz	r0, b46ee <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b46ea:	2360      	movs	r3, #96	; 0x60
   b46ec:	e7ec      	b.n	b46c8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b46ee:	6860      	ldr	r0, [r4, #4]
   b46f0:	f7ff ff8c 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b46f4:	6860      	ldr	r0, [r4, #4]
   b46f6:	f7ff ff89 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b46fa:	2001      	movs	r0, #1
   b46fc:	e7e9      	b.n	b46d2 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b46fe <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b46fe:	b570      	push	{r4, r5, r6, lr}
   b4700:	4604      	mov	r4, r0
   b4702:	460e      	mov	r6, r1
   b4704:	f001 fb38 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>
   b4708:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b470a:	4632      	mov	r2, r6
   b470c:	4629      	mov	r1, r5
   b470e:	4620      	mov	r0, r4
   b4710:	f7ff ff7e 	bl	b4610 <_ZN9SdSpiCard10isTimedOutEtt>
   b4714:	b930      	cbnz	r0, b4724 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b4716:	6860      	ldr	r0, [r4, #4]
   b4718:	f7ff ff78 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b471c:	28ff      	cmp	r0, #255	; 0xff
   b471e:	d1f4      	bne.n	b470a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b4720:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b4722:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b4724:	2000      	movs	r0, #0
   b4726:	e7fc      	b.n	b4722 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b4728 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b4728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b472a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b472c:	9201      	str	r2, [sp, #4]
   b472e:	4604      	mov	r4, r0
   b4730:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b4732:	b90b      	cbnz	r3, b4738 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b4734:	f7ff ff90 	bl	b4658 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b4738:	b125      	cbz	r5, b4744 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b473a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b473e:	4620      	mov	r0, r4
   b4740:	f7ff ffdd 	bl	b46fe <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b4744:	6860      	ldr	r0, [r4, #4]
   b4746:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b474a:	f7ff ff5d 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b474e:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b4750:	af01      	add	r7, sp, #4
   b4752:	5db9      	ldrb	r1, [r7, r6]
   b4754:	6860      	ldr	r0, [r4, #4]
   b4756:	f7ff ff57 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b475a:	3e01      	subs	r6, #1
   b475c:	d2f9      	bcs.n	b4752 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b475e:	2d00      	cmp	r5, #0
   b4760:	6860      	ldr	r0, [r4, #4]
   b4762:	bf0c      	ite	eq
   b4764:	2195      	moveq	r1, #149	; 0x95
   b4766:	2187      	movne	r1, #135	; 0x87
   b4768:	f7ff ff4e 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b476c:	6860      	ldr	r0, [r4, #4]
   b476e:	f7ff ff4d 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b4772:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b4774:	6860      	ldr	r0, [r4, #4]
   b4776:	f7ff ff49 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b477a:	0603      	lsls	r3, r0, #24
   b477c:	7260      	strb	r0, [r4, #9]
   b477e:	d503      	bpl.n	b4788 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b4780:	3d01      	subs	r5, #1
   b4782:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4786:	d1f5      	bne.n	b4774 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b4788:	b003      	add	sp, #12
   b478a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b478c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b478c:	b570      	push	{r4, r5, r6, lr}
   b478e:	4604      	mov	r4, r0
   b4790:	460d      	mov	r5, r1
   b4792:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b4794:	2137      	movs	r1, #55	; 0x37
   b4796:	2200      	movs	r2, #0
   b4798:	f7ff ffc6 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b479c:	4632      	mov	r2, r6
   b479e:	4629      	mov	r1, r5
   b47a0:	4620      	mov	r0, r4
  }
   b47a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b47a6:	f7ff bfbf 	b.w	b4728 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b47ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b47ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b47b0:	2500      	movs	r5, #0
   b47b2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b47b4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b47b6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b47b8:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b47ba:	4604      	mov	r4, r0
   b47bc:	4690      	mov	r8, r2
   b47be:	461e      	mov	r6, r3
   b47c0:	f001 fada 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b47c4:	4641      	mov	r1, r8
   b47c6:	4607      	mov	r7, r0
   b47c8:	6860      	ldr	r0, [r4, #4]
   b47ca:	f7ff fed7 	bl	b457c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b47ce:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b47d0:	4a49      	ldr	r2, [pc, #292]	; (b48f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b47d2:	721d      	strb	r5, [r3, #8]
   b47d4:	2501      	movs	r5, #1
   b47d6:	60da      	str	r2, [r3, #12]
   b47d8:	821d      	strh	r5, [r3, #16]
  spiStart();
   b47da:	4620      	mov	r0, r4
   b47dc:	f7ff ff3c 	bl	b4658 <_ZN9SdSpiCard8spiStartEv>
   b47e0:	6863      	ldr	r3, [r4, #4]
   b47e2:	4629      	mov	r1, r5
   b47e4:	7d18      	ldrb	r0, [r3, #20]
   b47e6:	f002 f97a 	bl	b6ade <digitalWrite>
   b47ea:	250a      	movs	r5, #10
    spiSend(0XFF);
   b47ec:	6860      	ldr	r0, [r4, #4]
   b47ee:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b47f0:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b47f2:	f7ff ff09 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b47f6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b47fa:	d1f7      	bne.n	b47ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b47fc:	6863      	ldr	r3, [r4, #4]
   b47fe:	4629      	mov	r1, r5
   b4800:	7d18      	ldrb	r0, [r3, #20]
   b4802:	f002 f96c 	bl	b6ade <digitalWrite>
  }
   b4806:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b4808:	2200      	movs	r2, #0
   b480a:	4611      	mov	r1, r2
   b480c:	4620      	mov	r0, r4
   b480e:	f7ff ff8b 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4812:	2801      	cmp	r0, #1
   b4814:	4680      	mov	r8, r0
   b4816:	d018      	beq.n	b484a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b4818:	3d01      	subs	r5, #1
   b481a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b481e:	d107      	bne.n	b4830 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b4820:	2320      	movs	r3, #32
  spiStop();
   b4822:	4620      	mov	r0, r4
   b4824:	7023      	strb	r3, [r4, #0]
   b4826:	f7ff ff26 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b482a:	2000      	movs	r0, #0
}
   b482c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b4830:	6860      	ldr	r0, [r4, #4]
   b4832:	21fd      	movs	r1, #253	; 0xfd
   b4834:	f7ff fee8 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b4838:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b483c:	6860      	ldr	r0, [r4, #4]
   b483e:	f7ff fee5 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b4842:	f1b8 0801 	subs.w	r8, r8, #1
   b4846:	d1f9      	bne.n	b483c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b4848:	e7de      	b.n	b4808 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b484a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b484e:	2108      	movs	r1, #8
   b4850:	4620      	mov	r0, r4
   b4852:	f7ff ff69 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4856:	2805      	cmp	r0, #5
   b4858:	d114      	bne.n	b4884 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b485a:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b485e:	2500      	movs	r5, #0
   b4860:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b4862:	462a      	mov	r2, r5
   b4864:	2129      	movs	r1, #41	; 0x29
   b4866:	4620      	mov	r0, r4
   b4868:	f7ff ff90 	bl	b478c <_ZN9SdSpiCard8cardAcmdEhm>
   b486c:	4602      	mov	r2, r0
   b486e:	b1d8      	cbz	r0, b48a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b4870:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b4874:	4639      	mov	r1, r7
   b4876:	4620      	mov	r0, r4
   b4878:	f7ff feca 	bl	b4610 <_ZN9SdSpiCard10isTimedOutEtt>
   b487c:	2800      	cmp	r0, #0
   b487e:	d0f0      	beq.n	b4862 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b4880:	2343      	movs	r3, #67	; 0x43
   b4882:	e7ce      	b.n	b4822 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b4884:	2504      	movs	r5, #4
      m_status = spiReceive();
   b4886:	6860      	ldr	r0, [r4, #4]
   b4888:	f7ff fec0 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b488c:	3d01      	subs	r5, #1
   b488e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b4892:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b4894:	d1f7      	bne.n	b4886 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b4896:	28aa      	cmp	r0, #170	; 0xaa
   b4898:	d104      	bne.n	b48a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b489a:	2302      	movs	r3, #2
   b489c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b489e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b48a2:	e7dd      	b.n	b4860 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b48a4:	2325      	movs	r3, #37	; 0x25
   b48a6:	e7bc      	b.n	b4822 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b48a8:	7aa3      	ldrb	r3, [r4, #10]
   b48aa:	2b02      	cmp	r3, #2
   b48ac:	d118      	bne.n	b48e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b48ae:	213a      	movs	r1, #58	; 0x3a
   b48b0:	4620      	mov	r0, r4
   b48b2:	f7ff ff39 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b48b6:	b108      	cbz	r0, b48bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b48b8:	2337      	movs	r3, #55	; 0x37
   b48ba:	e7b2      	b.n	b4822 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b48bc:	6860      	ldr	r0, [r4, #4]
   b48be:	f7ff fea5 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b48c2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b48c6:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b48c8:	bf04      	itt	eq
   b48ca:	2303      	moveq	r3, #3
   b48cc:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b48ce:	6860      	ldr	r0, [r4, #4]
   b48d0:	f7ff fe9c 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b48d4:	6860      	ldr	r0, [r4, #4]
   b48d6:	f7ff fe99 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b48da:	6860      	ldr	r0, [r4, #4]
   b48dc:	f7ff fe96 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b48e0:	4620      	mov	r0, r4
   b48e2:	f7ff fec8 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b48e6:	6863      	ldr	r3, [r4, #4]
   b48e8:	7930      	ldrb	r0, [r6, #4]
   b48ea:	68b1      	ldr	r1, [r6, #8]
   b48ec:	89b2      	ldrh	r2, [r6, #12]
   b48ee:	821a      	strh	r2, [r3, #16]
   b48f0:	7218      	strb	r0, [r3, #8]
   b48f2:	60d9      	str	r1, [r3, #12]
  return true;
   b48f4:	2001      	movs	r0, #1
   b48f6:	e799      	b.n	b482c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b48f8:	0003d090 	.word	0x0003d090

000b48fc <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b48fc:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b48fe:	7a83      	ldrb	r3, [r0, #10]
   b4900:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b4902:	bf18      	it	ne
   b4904:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b4906:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b4908:	460a      	mov	r2, r1
   b490a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b490c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b490e:	f7ff ff0b 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4912:	b130      	cbz	r0, b4922 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b4914:	2330      	movs	r3, #48	; 0x30
   b4916:	7023      	strb	r3, [r4, #0]
  spiStop();
   b4918:	4620      	mov	r0, r4
   b491a:	f7ff feac 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b491e:	2500      	movs	r5, #0
   b4920:	e00b      	b.n	b493a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b4922:	4629      	mov	r1, r5
   b4924:	f44f 7200 	mov.w	r2, #512	; 0x200
   b4928:	4620      	mov	r0, r4
   b492a:	f7ff feb7 	bl	b469c <_ZN9SdSpiCard8readDataEPhj>
   b492e:	4605      	mov	r5, r0
   b4930:	2800      	cmp	r0, #0
   b4932:	d0f1      	beq.n	b4918 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b4934:	4620      	mov	r0, r4
   b4936:	f7ff fe9e 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
}
   b493a:	4628      	mov	r0, r5
   b493c:	bd38      	pop	{r3, r4, r5, pc}

000b493e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b493e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b4940:	7a83      	ldrb	r3, [r0, #10]
   b4942:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b4944:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b4946:	bf18      	it	ne
   b4948:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b494a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b494c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b494e:	f7ff feeb 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4952:	b130      	cbz	r0, b4962 <_ZN9SdSpiCard9readStartEm+0x24>
   b4954:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b4956:	4620      	mov	r0, r4
   b4958:	7023      	strb	r3, [r4, #0]
   b495a:	f7ff fe8c 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b495e:	2000      	movs	r0, #0
}
   b4960:	bd10      	pop	{r4, pc}
  return true;
   b4962:	2001      	movs	r0, #1
   b4964:	e7fc      	b.n	b4960 <_ZN9SdSpiCard9readStartEm+0x22>

000b4966 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b4966:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b4968:	2200      	movs	r2, #0
   b496a:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b496c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b496e:	f7ff fedb 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4972:	b130      	cbz	r0, b4982 <_ZN9SdSpiCard8readStopEv+0x1c>
   b4974:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b4976:	4620      	mov	r0, r4
   b4978:	7023      	strb	r3, [r4, #0]
   b497a:	f7ff fe7c 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b497e:	2000      	movs	r0, #0
}
   b4980:	bd10      	pop	{r4, pc}
  spiStop();
   b4982:	4620      	mov	r0, r4
   b4984:	f7ff fe77 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b4988:	2001      	movs	r0, #1
   b498a:	e7f9      	b.n	b4980 <_ZN9SdSpiCard8readStopEv+0x1a>

000b498c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b498e:	4604      	mov	r4, r0
   b4990:	4616      	mov	r6, r2
   b4992:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b4994:	f7ff ffd3 	bl	b493e <_ZN9SdSpiCard9readStartEm>
   b4998:	b168      	cbz	r0, b49b6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b499a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b499c:	b2ab      	uxth	r3, r5
   b499e:	429f      	cmp	r7, r3
   b49a0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b49a4:	d909      	bls.n	b49ba <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b49a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b49aa:	4620      	mov	r0, r4
   b49ac:	f7ff fe76 	bl	b469c <_ZN9SdSpiCard8readDataEPhj>
   b49b0:	3501      	adds	r5, #1
   b49b2:	2800      	cmp	r0, #0
   b49b4:	d1f2      	bne.n	b499c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b49b6:	2000      	movs	r0, #0
   b49b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b49ba:	4620      	mov	r0, r4
}
   b49bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b49c0:	f7ff bfd1 	b.w	b4966 <_ZN9SdSpiCard8readStopEv>

000b49c4 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b49c4:	b538      	push	{r3, r4, r5, lr}
   b49c6:	4604      	mov	r4, r0
   b49c8:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b49ca:	6840      	ldr	r0, [r0, #4]
   b49cc:	f7ff fe1c 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b49d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b49d4:	6860      	ldr	r0, [r4, #4]
   b49d6:	4629      	mov	r1, r5
   b49d8:	f7ff fe02 	bl	b45e0 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b49dc:	6860      	ldr	r0, [r4, #4]
   b49de:	21ff      	movs	r1, #255	; 0xff
   b49e0:	f7ff fe12 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b49e4:	6860      	ldr	r0, [r4, #4]
   b49e6:	21ff      	movs	r1, #255	; 0xff
   b49e8:	f7ff fe0e 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b49ec:	6860      	ldr	r0, [r4, #4]
   b49ee:	f7ff fe0d 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b49f2:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b49f4:	f000 001f 	and.w	r0, r0, #31
   b49f8:	2805      	cmp	r0, #5
   b49fa:	d006      	beq.n	b4a0a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b49fc:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b49fe:	4620      	mov	r0, r4
   b4a00:	7023      	strb	r3, [r4, #0]
   b4a02:	f7ff fe38 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b4a06:	2000      	movs	r0, #0
}
   b4a08:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b4a0a:	2001      	movs	r0, #1
   b4a0c:	e7fc      	b.n	b4a08 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b4a0e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b4a0e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b4a10:	7a83      	ldrb	r3, [r0, #10]
   b4a12:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b4a14:	bf18      	it	ne
   b4a16:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b4a18:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b4a1a:	460a      	mov	r2, r1
   b4a1c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b4a1e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b4a20:	f7ff fe82 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4a24:	4606      	mov	r6, r0
   b4a26:	b130      	cbz	r0, b4a36 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b4a28:	2332      	movs	r3, #50	; 0x32
   b4a2a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b4a2c:	4620      	mov	r0, r4
   b4a2e:	f7ff fe22 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b4a32:	2500      	movs	r5, #0
   b4a34:	e01f      	b.n	b4a76 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b4a36:	462a      	mov	r2, r5
   b4a38:	21fe      	movs	r1, #254	; 0xfe
   b4a3a:	4620      	mov	r0, r4
   b4a3c:	f7ff ffc2 	bl	b49c4 <_ZN9SdSpiCard9writeDataEhPKh>
   b4a40:	2800      	cmp	r0, #0
   b4a42:	d0f3      	beq.n	b4a2c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b4a44:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b4a48:	4620      	mov	r0, r4
   b4a4a:	f7ff fe58 	bl	b46fe <_ZN9SdSpiCard11waitNotBusyEt>
   b4a4e:	4605      	mov	r5, r0
   b4a50:	b908      	cbnz	r0, b4a56 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b4a52:	235a      	movs	r3, #90	; 0x5a
   b4a54:	e7e9      	b.n	b4a2a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b4a56:	4632      	mov	r2, r6
   b4a58:	210d      	movs	r1, #13
   b4a5a:	4620      	mov	r0, r4
   b4a5c:	f7ff fe64 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4a60:	b108      	cbz	r0, b4a66 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b4a62:	2329      	movs	r3, #41	; 0x29
   b4a64:	e7e1      	b.n	b4a2a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b4a66:	6860      	ldr	r0, [r4, #4]
   b4a68:	f7ff fdd0 	bl	b460c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b4a6c:	2800      	cmp	r0, #0
   b4a6e:	d1f8      	bne.n	b4a62 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b4a70:	4620      	mov	r0, r4
   b4a72:	f7ff fe00 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
}
   b4a76:	4628      	mov	r0, r5
   b4a78:	bd70      	pop	{r4, r5, r6, pc}

000b4a7a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b4a7a:	b513      	push	{r0, r1, r4, lr}
   b4a7c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b4a7e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b4a82:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b4a84:	f7ff fe3b 	bl	b46fe <_ZN9SdSpiCard11waitNotBusyEt>
   b4a88:	9a01      	ldr	r2, [sp, #4]
   b4a8a:	b930      	cbnz	r0, b4a9a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b4a8c:	235b      	movs	r3, #91	; 0x5b
   b4a8e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b4a90:	4620      	mov	r0, r4
   b4a92:	f7ff fdf0 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b4a96:	2000      	movs	r0, #0
   b4a98:	e005      	b.n	b4aa6 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b4a9a:	21fc      	movs	r1, #252	; 0xfc
   b4a9c:	4620      	mov	r0, r4
   b4a9e:	f7ff ff91 	bl	b49c4 <_ZN9SdSpiCard9writeDataEhPKh>
   b4aa2:	2800      	cmp	r0, #0
   b4aa4:	d0f4      	beq.n	b4a90 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b4aa6:	b002      	add	sp, #8
   b4aa8:	bd10      	pop	{r4, pc}

000b4aaa <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b4aaa:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b4aac:	7a83      	ldrb	r3, [r0, #10]
   b4aae:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b4ab0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b4ab2:	bf18      	it	ne
   b4ab4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b4ab6:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b4ab8:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b4aba:	f7ff fe35 	bl	b4728 <_ZN9SdSpiCard11cardCommandEhm>
   b4abe:	b130      	cbz	r0, b4ace <_ZN9SdSpiCard10writeStartEm+0x24>
   b4ac0:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b4ac2:	4620      	mov	r0, r4
   b4ac4:	7023      	strb	r3, [r4, #0]
   b4ac6:	f7ff fdd6 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b4aca:	2000      	movs	r0, #0
}
   b4acc:	bd10      	pop	{r4, pc}
  return true;
   b4ace:	2001      	movs	r0, #1
   b4ad0:	e7fc      	b.n	b4acc <_ZN9SdSpiCard10writeStartEm+0x22>

000b4ad2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b4ad2:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b4ad4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b4ad8:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b4ada:	f7ff fe10 	bl	b46fe <_ZN9SdSpiCard11waitNotBusyEt>
   b4ade:	4605      	mov	r5, r0
   b4ae0:	b930      	cbnz	r0, b4af0 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b4ae2:	2356      	movs	r3, #86	; 0x56
   b4ae4:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b4ae6:	4620      	mov	r0, r4
   b4ae8:	f7ff fdc5 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b4aec:	4628      	mov	r0, r5
   b4aee:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b4af0:	6860      	ldr	r0, [r4, #4]
   b4af2:	21fd      	movs	r1, #253	; 0xfd
   b4af4:	f7ff fd88 	bl	b4608 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b4af8:	e7f5      	b.n	b4ae6 <_ZN9SdSpiCard9writeStopEv+0x14>

000b4afa <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b4afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4afc:	4604      	mov	r4, r0
   b4afe:	4616      	mov	r6, r2
   b4b00:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b4b02:	f7ff ffd2 	bl	b4aaa <_ZN9SdSpiCard10writeStartEm>
   b4b06:	b170      	cbz	r0, b4b26 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b4b08:	2500      	movs	r5, #0
   b4b0a:	42bd      	cmp	r5, r7
   b4b0c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b4b10:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b4b12:	d004      	beq.n	b4b1e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b4b14:	f7ff ffb1 	bl	b4a7a <_ZN9SdSpiCard9writeDataEPKh>
   b4b18:	b128      	cbz	r0, b4b26 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b4b1a:	3501      	adds	r5, #1
   b4b1c:	e7f5      	b.n	b4b0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b4b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b4b22:	f7ff bfd6 	b.w	b4ad2 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b4b26:	4620      	mov	r0, r4
   b4b28:	f7ff fda5 	bl	b4676 <_ZN9SdSpiCard7spiStopEv>
}
   b4b2c:	2000      	movs	r0, #0
   b4b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b30 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b4b30:	b538      	push	{r3, r4, r5, lr}
   b4b32:	4604      	mov	r4, r0
   b4b34:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b4b36:	2224      	movs	r2, #36	; 0x24
   b4b38:	2100      	movs	r1, #0
   b4b3a:	f002 fc2d 	bl	b7398 <memset>

  m_vol = vol;
   b4b3e:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b4b40:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b4b42:	2b10      	cmp	r3, #16
   b4b44:	d003      	beq.n	b4b4e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b4b46:	2b20      	cmp	r3, #32
   b4b48:	d006      	beq.n	b4b58 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b4b4a:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b4b4c:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b4b4e:	2320      	movs	r3, #32
  m_flags = F_READ;
   b4b50:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b4b52:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b4b54:	70a0      	strb	r0, [r4, #2]
  return true;
   b4b56:	e7f9      	b.n	b4b4c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b4b58:	2340      	movs	r3, #64	; 0x40
   b4b5a:	e7f9      	b.n	b4b50 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b4b5c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b4b5c:	b510      	push	{r4, lr}
   b4b5e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4b60:	3024      	adds	r0, #36	; 0x24
   b4b62:	f000 fb31 	bl	b51c8 <_ZN8FatCache4syncEv>
   b4b66:	b128      	cbz	r0, b4b74 <_ZN9FatVolume9cacheSyncEv+0x18>
   b4b68:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b4b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4b70:	f000 bb2a 	b.w	b51c8 <_ZN8FatCache4syncEv>
  }
   b4b74:	bd10      	pop	{r4, pc}

000b4b76 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b4b76:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4b78:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b4b7a:	f043 0304 	orr.w	r3, r3, #4
   b4b7e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4b80:	f100 0210 	add.w	r2, r0, #16
   b4b84:	6880      	ldr	r0, [r0, #8]
   b4b86:	f000 bbd5 	b.w	b5334 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b4b8c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b4b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b4b90:	7801      	ldrb	r1, [r0, #0]
   b4b92:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b4b96:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b4b98:	d003      	beq.n	b4ba2 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b4b9a:	2600      	movs	r6, #0
}
   b4b9c:	4630      	mov	r0, r6
   b4b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b4ba2:	6942      	ldr	r2, [r0, #20]
   b4ba4:	4b17      	ldr	r3, [pc, #92]	; (b4c04 <_ZN7FatFile13addDirClusterEv+0x78>)
   b4ba6:	429a      	cmp	r2, r3
   b4ba8:	d2f7      	bcs.n	b4b9a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b4baa:	f7ff ffe4 	bl	b4b76 <_ZN7FatFile10addClusterEv>
   b4bae:	4606      	mov	r6, r0
   b4bb0:	2800      	cmp	r0, #0
   b4bb2:	d0f2      	beq.n	b4b9a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b4bb4:	6921      	ldr	r1, [r4, #16]
   b4bb6:	68a0      	ldr	r0, [r4, #8]
   b4bb8:	f000 fb51 	bl	b525e <_ZNK9FatVolume17clusterFirstBlockEm>
   b4bbc:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b4bbe:	68a0      	ldr	r0, [r4, #8]
   b4bc0:	2205      	movs	r2, #5
   b4bc2:	4639      	mov	r1, r7
   b4bc4:	3024      	adds	r0, #36	; 0x24
   b4bc6:	f000 fb27 	bl	b5218 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4bca:	4680      	mov	r8, r0
   b4bcc:	2800      	cmp	r0, #0
   b4bce:	d0e4      	beq.n	b4b9a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b4bd0:	4629      	mov	r1, r5
   b4bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
   b4bd6:	f002 fbdf 	bl	b7398 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4bda:	2501      	movs	r5, #1
   b4bdc:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b4bde:	791a      	ldrb	r2, [r3, #4]
   b4be0:	42aa      	cmp	r2, r5
   b4be2:	d909      	bls.n	b4bf8 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b4be4:	6818      	ldr	r0, [r3, #0]
   b4be6:	4642      	mov	r2, r8
   b4be8:	19e9      	adds	r1, r5, r7
   b4bea:	f7ff ff10 	bl	b4a0e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b4bee:	2800      	cmp	r0, #0
   b4bf0:	d0d3      	beq.n	b4b9a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4bf2:	3501      	adds	r5, #1
   b4bf4:	b2ed      	uxtb	r5, r5
   b4bf6:	e7f1      	b.n	b4bdc <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b4bf8:	6963      	ldr	r3, [r4, #20]
   b4bfa:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b4bfe:	6163      	str	r3, [r4, #20]
  return true;
   b4c00:	e7cc      	b.n	b4b9c <_ZN7FatFile13addDirClusterEv+0x10>
   b4c02:	bf00      	nop
   b4c04:	001ffe00 	.word	0x001ffe00

000b4c08 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b4c08:	b510      	push	{r4, lr}
   b4c0a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b4c0c:	6880      	ldr	r0, [r0, #8]
   b4c0e:	460a      	mov	r2, r1
   b4c10:	3024      	adds	r0, #36	; 0x24
   b4c12:	69a1      	ldr	r1, [r4, #24]
   b4c14:	f000 fb00 	bl	b5218 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4c18:	b120      	cbz	r0, b4c24 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b4c1a:	88a3      	ldrh	r3, [r4, #4]
   b4c1c:	f003 030f 	and.w	r3, r3, #15
   b4c20:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b4c24:	bd10      	pop	{r4, pc}

000b4c26 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b4c26:	7803      	ldrb	r3, [r0, #0]
   b4c28:	b90b      	cbnz	r3, b4c2e <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b4c2a:	f7ff bf81 	b.w	b4b30 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b4c2e:	2000      	movs	r0, #0
   b4c30:	4770      	bx	lr

000b4c32 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b4c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b4c36:	7803      	ldrb	r3, [r0, #0]
   b4c38:	4604      	mov	r4, r0
   b4c3a:	4688      	mov	r8, r1
   b4c3c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b4c3e:	2b00      	cmp	r3, #0
   b4c40:	d05d      	beq.n	b4cfe <_ZN7FatFile4readEPvj+0xcc>
   b4c42:	7882      	ldrb	r2, [r0, #2]
   b4c44:	07d1      	lsls	r1, r2, #31
   b4c46:	d55a      	bpl.n	b4cfe <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b4c48:	071a      	lsls	r2, r3, #28
   b4c4a:	d52d      	bpl.n	b4ca8 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b4c4c:	69c3      	ldr	r3, [r0, #28]
   b4c4e:	6942      	ldr	r2, [r0, #20]
   b4c50:	1a9b      	subs	r3, r3, r2
   b4c52:	429d      	cmp	r5, r3
   b4c54:	bf28      	it	cs
   b4c56:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b4c58:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b4c5a:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4c5e:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b4c62:	2e00      	cmp	r6, #0
   b4c64:	f000 808f 	beq.w	b4d86 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b4c68:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b4c6a:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4c6c:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b4c6e:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b4c70:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4c74:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b4c78:	d51f      	bpl.n	b4cba <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4c7a:	6a00      	ldr	r0, [r0, #32]
   b4c7c:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b4c7e:	68a0      	ldr	r0, [r4, #8]
   b4c80:	f1ba 0f00 	cmp.w	sl, #0
   b4c84:	d142      	bne.n	b4d0c <_ZN7FatFile4readEPvj+0xda>
   b4c86:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4c8a:	d33f      	bcc.n	b4d0c <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b4c8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4c8e:	4299      	cmp	r1, r3
   b4c90:	d03c      	beq.n	b4d0c <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b4c92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4c96:	d252      	bcs.n	b4d3e <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b4c98:	6800      	ldr	r0, [r0, #0]
   b4c9a:	4642      	mov	r2, r8
   b4c9c:	f7ff fe2e 	bl	b48fc <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b4ca0:	b368      	cbz	r0, b4cfe <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b4ca2:	f44f 7700 	mov.w	r7, #512	; 0x200
   b4ca6:	e044      	b.n	b4d32 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b4ca8:	069b      	lsls	r3, r3, #26
   b4caa:	d5d5      	bpl.n	b4c58 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b4cac:	6883      	ldr	r3, [r0, #8]
   b4cae:	891a      	ldrh	r2, [r3, #8]
   b4cb0:	6943      	ldr	r3, [r0, #20]
   b4cb2:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b4cb6:	b29b      	uxth	r3, r3
   b4cb8:	e7cb      	b.n	b4c52 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b4cba:	f890 9005 	ldrb.w	r9, [r0, #5]
   b4cbe:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b4cc2:	f1ba 0f00 	cmp.w	sl, #0
   b4cc6:	d108      	bne.n	b4cda <_ZN7FatFile4readEPvj+0xa8>
   b4cc8:	f1b9 0f00 	cmp.w	r9, #0
   b4ccc:	d105      	bne.n	b4cda <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b4cce:	b95b      	cbnz	r3, b4ce8 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4cd0:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b4cd2:	bf4c      	ite	mi
   b4cd4:	6a03      	ldrmi	r3, [r0, #32]
   b4cd6:	6a23      	ldrpl	r3, [r4, #32]
   b4cd8:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4cda:	6921      	ldr	r1, [r4, #16]
   b4cdc:	68a0      	ldr	r0, [r4, #8]
   b4cde:	f000 fabe 	bl	b525e <_ZNK9FatVolume17clusterFirstBlockEm>
   b4ce2:	eb09 0100 	add.w	r1, r9, r0
   b4ce6:	e7ca      	b.n	b4c7e <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4ce8:	6921      	ldr	r1, [r4, #16]
   b4cea:	465a      	mov	r2, fp
   b4cec:	f000 fabd 	bl	b526a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b4cf0:	2800      	cmp	r0, #0
   b4cf2:	db04      	blt.n	b4cfe <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b4cf4:	d1f1      	bne.n	b4cda <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b4cf6:	7823      	ldrb	r3, [r4, #0]
   b4cf8:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4cfc:	d143      	bne.n	b4d86 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b4cfe:	7863      	ldrb	r3, [r4, #1]
   b4d00:	f043 0302 	orr.w	r3, r3, #2
   b4d04:	7063      	strb	r3, [r4, #1]
  return -1;
   b4d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4d0a:	e03d      	b.n	b4d88 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b4d0c:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b4d10:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b4d12:	f04f 0200 	mov.w	r2, #0
   b4d16:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b4d1a:	bf28      	it	cs
   b4d1c:	4637      	movcs	r7, r6
   b4d1e:	f000 fa7b 	bl	b5218 <_ZN8FatCache4readEmh>
      if (!pc) {
   b4d22:	2800      	cmp	r0, #0
   b4d24:	d0eb      	beq.n	b4cfe <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b4d26:	eb00 010a 	add.w	r1, r0, sl
   b4d2a:	463a      	mov	r2, r7
   b4d2c:	4640      	mov	r0, r8
   b4d2e:	f002 fb25 	bl	b737c <memcpy>
    m_curPosition += n;
   b4d32:	6963      	ldr	r3, [r4, #20]
   b4d34:	443b      	add	r3, r7
    dst += n;
   b4d36:	44b8      	add	r8, r7
    m_curPosition += n;
   b4d38:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b4d3a:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b4d3c:	e791      	b.n	b4c62 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b4d3e:	7822      	ldrb	r2, [r4, #0]
   b4d40:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b4d42:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b4d46:	d406      	bmi.n	b4d56 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b4d48:	7902      	ldrb	r2, [r0, #4]
   b4d4a:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b4d4e:	b2d2      	uxtb	r2, r2
   b4d50:	4592      	cmp	sl, r2
   b4d52:	bf28      	it	cs
   b4d54:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4d56:	4299      	cmp	r1, r3
      n = 512*nb;
   b4d58:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4d5c:	d208      	bcs.n	b4d70 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b4d5e:	68a0      	ldr	r0, [r4, #8]
   b4d60:	4653      	mov	r3, sl
   b4d62:	6800      	ldr	r0, [r0, #0]
   b4d64:	4642      	mov	r2, r8
   b4d66:	f7ff fe11 	bl	b498c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b4d6a:	2800      	cmp	r0, #0
   b4d6c:	d1e1      	bne.n	b4d32 <_ZN7FatFile4readEPvj+0x100>
   b4d6e:	e7c6      	b.n	b4cfe <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4d70:	4453      	add	r3, sl
   b4d72:	428b      	cmp	r3, r1
   b4d74:	d9f3      	bls.n	b4d5e <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b4d76:	3024      	adds	r0, #36	; 0x24
   b4d78:	9101      	str	r1, [sp, #4]
   b4d7a:	f000 fa25 	bl	b51c8 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b4d7e:	9901      	ldr	r1, [sp, #4]
   b4d80:	2800      	cmp	r0, #0
   b4d82:	d1ec      	bne.n	b4d5e <_ZN7FatFile4readEPvj+0x12c>
   b4d84:	e7bb      	b.n	b4cfe <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b4d86:	1ba8      	subs	r0, r5, r6
}
   b4d88:	b003      	add	sp, #12
   b4d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4d8e <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4d8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4d90:	6943      	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
   b4d92:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4d96:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4d98:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b4d9c:	d000      	beq.n	b4da0 <_ZN7FatFile12readDirCacheEb+0x12>
   b4d9e:	b999      	cbnz	r1, b4dc8 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b4da0:	2201      	movs	r2, #1
   b4da2:	f10d 0107 	add.w	r1, sp, #7
   b4da6:	4620      	mov	r0, r4
   b4da8:	f7ff ff43 	bl	b4c32 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b4dac:	b240      	sxtb	r0, r0
   b4dae:	2801      	cmp	r0, #1
   b4db0:	d002      	beq.n	b4db8 <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   b4db2:	2000      	movs	r0, #0
}
   b4db4:	b003      	add	sp, #12
   b4db6:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b4db8:	6963      	ldr	r3, [r4, #20]
   b4dba:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b4dbc:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b4dbe:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b4dc0:	3030      	adds	r0, #48	; 0x30
   b4dc2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b4dc6:	e7f5      	b.n	b4db4 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b4dc8:	3320      	adds	r3, #32
   b4dca:	e7f7      	b.n	b4dbc <_ZN7FatFile12readDirCacheEb+0x2e>

000b4dcc <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   b4dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b4dd0:	7802      	ldrb	r2, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   b4dd2:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b4dd4:	4604      	mov	r4, r0
   b4dd6:	460d      	mov	r5, r1
  // error if file not open
  if (!isOpen()) {
   b4dd8:	b162      	cbz	r2, b4df4 <_ZN7FatFile7seekSetEm+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   b4dda:	6940      	ldr	r0, [r0, #20]
   b4ddc:	4288      	cmp	r0, r1
   b4dde:	d002      	beq.n	b4de6 <_ZN7FatFile7seekSetEm+0x1a>
    return true;
  }
  if (pos == 0) {
   b4de0:	b919      	cbnz	r1, b4dea <_ZN7FatFile7seekSetEm+0x1e>
    // set position to start of file
    m_curCluster = 0;
   b4de2:	6121      	str	r1, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   b4de4:	6165      	str	r5, [r4, #20]
    return true;
   b4de6:	2001      	movs	r0, #1
   b4de8:	e006      	b.n	b4df8 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b4dea:	0716      	lsls	r6, r2, #28
   b4dec:	d506      	bpl.n	b4dfc <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b4dee:	69e3      	ldr	r3, [r4, #28]
   b4df0:	428b      	cmp	r3, r1
   b4df2:	d20b      	bcs.n	b4e0c <_ZN7FatFile7seekSetEm+0x40>
  return true;

fail:
  m_curCluster = tmp;
   b4df4:	6127      	str	r7, [r4, #16]
  return false;
   b4df6:	2000      	movs	r0, #0
}
   b4df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b4dfc:	0691      	lsls	r1, r2, #26
   b4dfe:	d505      	bpl.n	b4e0c <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b4e00:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b4e02:	891b      	ldrh	r3, [r3, #8]
   b4e04:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b4e08:	d9ec      	bls.n	b4de4 <_ZN7FatFile7seekSetEm+0x18>
   b4e0a:	e7f3      	b.n	b4df4 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4e0c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b4e10:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b4e14:	1e43      	subs	r3, r0, #1
   b4e16:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4e1a:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4e1c:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4e1e:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b4e20:	42b3      	cmp	r3, r6
   b4e22:	d800      	bhi.n	b4e26 <_ZN7FatFile7seekSetEm+0x5a>
   b4e24:	b998      	cbnz	r0, b4e4e <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4e26:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b4e28:	bf4c      	ite	mi
   b4e2a:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b4e2e:	6a23      	ldrpl	r3, [r4, #32]
   b4e30:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4e32:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b4e36:	2e00      	cmp	r6, #0
   b4e38:	d0d4      	beq.n	b4de4 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4e3a:	6921      	ldr	r1, [r4, #16]
   b4e3c:	68a0      	ldr	r0, [r4, #8]
   b4e3e:	4642      	mov	r2, r8
   b4e40:	f000 fa13 	bl	b526a <_ZN9FatVolume6fatGetEmPm>
   b4e44:	2800      	cmp	r0, #0
   b4e46:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b4e4a:	dcf4      	bgt.n	b4e36 <_ZN7FatFile7seekSetEm+0x6a>
   b4e4c:	e7d2      	b.n	b4df4 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b4e4e:	1af6      	subs	r6, r6, r3
   b4e50:	e7ef      	b.n	b4e32 <_ZN7FatFile7seekSetEm+0x66>

000b4e52 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b4e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e54:	460f      	mov	r7, r1
   b4e56:	4604      	mov	r4, r0
   b4e58:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b4e5a:	2100      	movs	r1, #0
   b4e5c:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b4e5e:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b4e60:	f002 fa9a 	bl	b7398 <memset>
  m_vol = dirFile->m_vol;
   b4e64:	68b8      	ldr	r0, [r7, #8]
   b4e66:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b4e68:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b4e6a:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b4e6e:	6a3b      	ldr	r3, [r7, #32]
   b4e70:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b4e72:	016a      	lsls	r2, r5, #5
   b4e74:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b4e78:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b4e7c:	071f      	lsls	r7, r3, #28
   b4e7e:	d444      	bmi.n	b4f0a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b4e80:	f003 0317 	and.w	r3, r3, #23
   b4e84:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b4e86:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b4e8a:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b4e8e:	bf04      	itt	eq
   b4e90:	f043 0308 	orreq.w	r3, r3, #8
   b4e94:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b4e96:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b4e9a:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b4e9c:	f006 0303 	and.w	r3, r6, #3
   b4ea0:	2b01      	cmp	r3, #1
   b4ea2:	d02c      	beq.n	b4efe <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b4ea4:	2b02      	cmp	r3, #2
   b4ea6:	d028      	beq.n	b4efa <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b4ea8:	bb7b      	cbnz	r3, b4f0a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b4eaa:	0571      	lsls	r1, r6, #21
   b4eac:	d42d      	bmi.n	b4f0a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b4eae:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b4eb0:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b4eb2:	78a1      	ldrb	r1, [r4, #2]
   b4eb4:	078b      	lsls	r3, r1, #30
   b4eb6:	d504      	bpl.n	b4ec2 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b4eb8:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b4eba:	06df      	lsls	r7, r3, #27
   b4ebc:	d425      	bmi.n	b4f0a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b4ebe:	07dd      	lsls	r5, r3, #31
   b4ec0:	d423      	bmi.n	b4f0a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b4ec2:	11b3      	asrs	r3, r6, #6
   b4ec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b4ec8:	f006 0508 	and.w	r5, r6, #8
   b4ecc:	432b      	orrs	r3, r5
   b4ece:	430b      	orrs	r3, r1
   b4ed0:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b4ed2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b4ed4:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4ed6:	1883      	adds	r3, r0, r2
   b4ed8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b4edc:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b4ee4:	0572      	lsls	r2, r6, #21
   b4ee6:	d513      	bpl.n	b4f10 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4ee8:	b959      	cbnz	r1, b4f02 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b4eea:	78a3      	ldrb	r3, [r4, #2]
   b4eec:	f043 0304 	orr.w	r3, r3, #4
   b4ef0:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4ef2:	0473      	lsls	r3, r6, #17
   b4ef4:	d410      	bmi.n	b4f18 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b4ef6:	2001      	movs	r0, #1
}
   b4ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b4efa:	2303      	movs	r3, #3
   b4efc:	e7d8      	b.n	b4eb0 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b4efe:	2302      	movs	r3, #2
   b4f00:	e7d6      	b.n	b4eb0 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4f02:	f000 fa52 	bl	b53aa <_ZN9FatVolume9freeChainEm>
   b4f06:	2800      	cmp	r0, #0
   b4f08:	d1ef      	bne.n	b4eea <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b4f0a:	2000      	movs	r0, #0
   b4f0c:	7020      	strb	r0, [r4, #0]
  return false;
   b4f0e:	e7f3      	b.n	b4ef8 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b4f10:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b4f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f14:	61e3      	str	r3, [r4, #28]
   b4f16:	e7ec      	b.n	b4ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4f18:	69e1      	ldr	r1, [r4, #28]
   b4f1a:	4620      	mov	r0, r4
   b4f1c:	f7ff ff56 	bl	b4dcc <_ZN7FatFile7seekSetEm>
   b4f20:	2800      	cmp	r0, #0
   b4f22:	d1e8      	bne.n	b4ef6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b4f24:	e7f1      	b.n	b4f0a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
	...

000b4f28 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b4f28:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b4f2a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b4f2c:	4604      	mov	r4, r0
  if (!isOpen()) {
   b4f2e:	b90b      	cbnz	r3, b4f34 <_ZN7FatFile4syncEv+0xc>
    return true;
   b4f30:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b4f32:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b4f34:	7883      	ldrb	r3, [r0, #2]
   b4f36:	075a      	lsls	r2, r3, #29
   b4f38:	d523      	bpl.n	b4f82 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b4f3a:	2101      	movs	r1, #1
   b4f3c:	f7ff fe64 	bl	b4c08 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4f40:	4605      	mov	r5, r0
   b4f42:	b928      	cbnz	r0, b4f50 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b4f44:	7863      	ldrb	r3, [r4, #1]
   b4f46:	f043 0301 	orr.w	r3, r3, #1
   b4f4a:	7063      	strb	r3, [r4, #1]
  return false;
   b4f4c:	2000      	movs	r0, #0
   b4f4e:	e7f0      	b.n	b4f32 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4f50:	7803      	ldrb	r3, [r0, #0]
   b4f52:	2be5      	cmp	r3, #229	; 0xe5
   b4f54:	d0f6      	beq.n	b4f44 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b4f56:	7823      	ldrb	r3, [r4, #0]
   b4f58:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b4f5a:	bf44      	itt	mi
   b4f5c:	69e3      	ldrmi	r3, [r4, #28]
   b4f5e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b4f60:	6a23      	ldr	r3, [r4, #32]
   b4f62:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b4f64:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4f66:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b4f68:	4b09      	ldr	r3, [pc, #36]	; (b4f90 <_ZN7FatFile4syncEv+0x68>)
   b4f6a:	681b      	ldr	r3, [r3, #0]
   b4f6c:	b12b      	cbz	r3, b4f7a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b4f6e:	f100 0116 	add.w	r1, r0, #22
   b4f72:	3018      	adds	r0, #24
   b4f74:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b4f76:	8b2b      	ldrh	r3, [r5, #24]
   b4f78:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b4f7a:	78a3      	ldrb	r3, [r4, #2]
   b4f7c:	f023 0304 	bic.w	r3, r3, #4
   b4f80:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b4f82:	68a0      	ldr	r0, [r4, #8]
   b4f84:	f7ff fdea 	bl	b4b5c <_ZN9FatVolume9cacheSyncEv>
   b4f88:	2800      	cmp	r0, #0
   b4f8a:	d0db      	beq.n	b4f44 <_ZN7FatFile4syncEv+0x1c>
   b4f8c:	e7d0      	b.n	b4f30 <_ZN7FatFile4syncEv+0x8>
   b4f8e:	bf00      	nop
   b4f90:	2003e694 	.word	0x2003e694

000b4f94 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b4f94:	b510      	push	{r4, lr}
   b4f96:	4604      	mov	r4, r0
  bool rtn = sync();
   b4f98:	f7ff ffc6 	bl	b4f28 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b4f9c:	2300      	movs	r3, #0
   b4f9e:	7023      	strb	r3, [r4, #0]
}
   b4fa0:	bd10      	pop	{r4, pc}

000b4fa2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4fa4:	b093      	sub	sp, #76	; 0x4c
   b4fa6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4fa8:	2300      	movs	r3, #0
   b4faa:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b4fac:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4fae:	9201      	str	r2, [sp, #4]
   b4fb0:	4606      	mov	r6, r0
   b4fb2:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b4fb4:	b113      	cbz	r3, b4fbc <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b4fb6:	2000      	movs	r0, #0
}
   b4fb8:	b013      	add	sp, #76	; 0x4c
   b4fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b4fbc:	780b      	ldrb	r3, [r1, #0]
   b4fbe:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4fc2:	d0f8      	beq.n	b4fb6 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b4fc4:	7813      	ldrb	r3, [r2, #0]
   b4fc6:	2b2f      	cmp	r3, #47	; 0x2f
   b4fc8:	d112      	bne.n	b4ff0 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b4fca:	9a01      	ldr	r2, [sp, #4]
   b4fcc:	7813      	ldrb	r3, [r2, #0]
   b4fce:	2b2f      	cmp	r3, #47	; 0x2f
   b4fd0:	d102      	bne.n	b4fd8 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b4fd2:	3201      	adds	r2, #1
   b4fd4:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b4fd6:	e7f8      	b.n	b4fca <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b4fd8:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b4fda:	b91b      	cbnz	r3, b4fe4 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b4fdc:	4630      	mov	r0, r6
   b4fde:	f7ff fe22 	bl	b4c26 <_ZN7FatFile8openRootEP9FatVolume>
   b4fe2:	e7e9      	b.n	b4fb8 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b4fe4:	a809      	add	r0, sp, #36	; 0x24
   b4fe6:	f7ff fda3 	bl	b4b30 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b4fea:	2800      	cmp	r0, #0
   b4fec:	d0e3      	beq.n	b4fb6 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b4fee:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b4ff0:	9801      	ldr	r0, [sp, #4]
   b4ff2:	aa01      	add	r2, sp, #4
   b4ff4:	a903      	add	r1, sp, #12
   b4ff6:	f000 faad 	bl	b5554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b4ffa:	2800      	cmp	r0, #0
   b4ffc:	d0db      	beq.n	b4fb6 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b4ffe:	9b01      	ldr	r3, [sp, #4]
   b5000:	781b      	ldrb	r3, [r3, #0]
   b5002:	b19b      	cbz	r3, b502c <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b5004:	2300      	movs	r3, #0
   b5006:	aa03      	add	r2, sp, #12
   b5008:	4621      	mov	r1, r4
   b500a:	4630      	mov	r0, r6
   b500c:	f000 fbd4 	bl	b57b8 <_ZN7FatFile4openEPS_P7fname_ti>
   b5010:	2800      	cmp	r0, #0
   b5012:	d0d0      	beq.n	b4fb6 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b5014:	4635      	mov	r5, r6
   b5016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5018:	ac09      	add	r4, sp, #36	; 0x24
   b501a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b501c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b501e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5020:	682b      	ldr	r3, [r5, #0]
   b5022:	6023      	str	r3, [r4, #0]
    close();
   b5024:	4630      	mov	r0, r6
   b5026:	f7ff ffb5 	bl	b4f94 <_ZN7FatFile5closeEv>
  while (1) {
   b502a:	e7e0      	b.n	b4fee <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b502c:	463b      	mov	r3, r7
   b502e:	aa03      	add	r2, sp, #12
   b5030:	4621      	mov	r1, r4
   b5032:	4630      	mov	r0, r6
   b5034:	f000 fbc0 	bl	b57b8 <_ZN7FatFile4openEPS_P7fname_ti>
   b5038:	e7be      	b.n	b4fb8 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b503c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b503c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5040:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b5042:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5044:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b5046:	4604      	mov	r4, r0
   b5048:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b504a:	d55b      	bpl.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
   b504c:	7883      	ldrb	r3, [r0, #2]
   b504e:	079a      	lsls	r2, r3, #30
   b5050:	d558      	bpl.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b5052:	071b      	lsls	r3, r3, #28
   b5054:	d451      	bmi.n	b50fa <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b5056:	6963      	ldr	r3, [r4, #20]
   b5058:	43db      	mvns	r3, r3
   b505a:	42bb      	cmp	r3, r7
   b505c:	d352      	bcc.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
   b505e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5060:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5064:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b5066:	f1b8 0f00 	cmp.w	r8, #0
   b506a:	f000 8091 	beq.w	b5190 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b506e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b5070:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b5072:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b5076:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b507a:	d10e      	bne.n	b509a <_ZN7FatFile5writeEPKvj+0x5e>
   b507c:	b96d      	cbnz	r5, b509a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b507e:	6921      	ldr	r1, [r4, #16]
   b5080:	2900      	cmp	r1, #0
   b5082:	d046      	beq.n	b5112 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5084:	4652      	mov	r2, sl
   b5086:	f000 f8f0 	bl	b526a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b508a:	2800      	cmp	r0, #0
   b508c:	db3a      	blt.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b508e:	d104      	bne.n	b509a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b5090:	4620      	mov	r0, r4
   b5092:	f7ff fd70 	bl	b4b76 <_ZN7FatFile10addClusterEv>
   b5096:	2800      	cmp	r0, #0
   b5098:	d034      	beq.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b509a:	6921      	ldr	r1, [r4, #16]
   b509c:	68a0      	ldr	r0, [r4, #8]
   b509e:	f000 f8de 	bl	b525e <_ZNK9FatVolume17clusterFirstBlockEm>
   b50a2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b50a4:	68a0      	ldr	r0, [r4, #8]
   b50a6:	b915      	cbnz	r5, b50ae <_ZN7FatFile5writeEPKvj+0x72>
   b50a8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b50ac:	d23f      	bcs.n	b512e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b50ae:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b50b2:	4546      	cmp	r6, r8
   b50b4:	bf28      	it	cs
   b50b6:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b50b8:	2d00      	cmp	r5, #0
   b50ba:	d136      	bne.n	b512a <_ZN7FatFile5writeEPKvj+0xee>
   b50bc:	6962      	ldr	r2, [r4, #20]
   b50be:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b50c0:	429a      	cmp	r2, r3
   b50c2:	bf34      	ite	cc
   b50c4:	2201      	movcc	r2, #1
   b50c6:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b50c8:	3024      	adds	r0, #36	; 0x24
   b50ca:	f000 f8a5 	bl	b5218 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b50ce:	b1c8      	cbz	r0, b5104 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b50d0:	4428      	add	r0, r5
   b50d2:	4632      	mov	r2, r6
   b50d4:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b50d6:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b50d8:	f002 f950 	bl	b737c <memcpy>
      if (512 == (n + blockOffset)) {
   b50dc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b50e0:	d104      	bne.n	b50ec <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b50e2:	68a0      	ldr	r0, [r4, #8]
   b50e4:	3024      	adds	r0, #36	; 0x24
   b50e6:	f000 f86f 	bl	b51c8 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b50ea:	b158      	cbz	r0, b5104 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b50ec:	6963      	ldr	r3, [r4, #20]
   b50ee:	4433      	add	r3, r6
   b50f0:	6163      	str	r3, [r4, #20]
    src += n;
   b50f2:	44b1      	add	r9, r6
    nToWrite -= n;
   b50f4:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b50f8:	e7b4      	b.n	b5064 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b50fa:	69c1      	ldr	r1, [r0, #28]
   b50fc:	f7ff fe66 	bl	b4dcc <_ZN7FatFile7seekSetEm>
   b5100:	2800      	cmp	r0, #0
   b5102:	d1a8      	bne.n	b5056 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b5104:	7863      	ldrb	r3, [r4, #1]
   b5106:	f043 0301 	orr.w	r3, r3, #1
   b510a:	7063      	strb	r3, [r4, #1]
  return -1;
   b510c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5110:	e050      	b.n	b51b4 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b5112:	6a23      	ldr	r3, [r4, #32]
   b5114:	b93b      	cbnz	r3, b5126 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b5116:	4620      	mov	r0, r4
   b5118:	f7ff fd2d 	bl	b4b76 <_ZN7FatFile10addClusterEv>
   b511c:	2800      	cmp	r0, #0
   b511e:	d0f1      	beq.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b5120:	6923      	ldr	r3, [r4, #16]
   b5122:	6223      	str	r3, [r4, #32]
   b5124:	e7b9      	b.n	b509a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b5126:	6123      	str	r3, [r4, #16]
   b5128:	e7b7      	b.n	b509a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b512a:	2201      	movs	r2, #1
   b512c:	e7cc      	b.n	b50c8 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b512e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b5132:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b5134:	d31b      	bcc.n	b516e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b5136:	f890 c004 	ldrb.w	ip, [r0, #4]
   b513a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b513e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b5140:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b5144:	4573      	cmp	r3, lr
   b5146:	bf28      	it	cs
   b5148:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b514a:	4291      	cmp	r1, r2
      n = 512*nb;
   b514c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5150:	d307      	bcc.n	b5162 <_ZN7FatFile5writeEPKvj+0x126>
   b5152:	441a      	add	r2, r3
   b5154:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b5156:	bf82      	ittt	hi
   b5158:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b515c:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5160:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b5162:	68a5      	ldr	r5, [r4, #8]
   b5164:	464a      	mov	r2, r9
   b5166:	6828      	ldr	r0, [r5, #0]
   b5168:	f7ff fcc7 	bl	b4afa <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b516c:	e7bd      	b.n	b50ea <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b516e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b5170:	bf02      	ittt	eq
   b5172:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b5176:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b517a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b517c:	68a3      	ldr	r3, [r4, #8]
   b517e:	464a      	mov	r2, r9
   b5180:	6818      	ldr	r0, [r3, #0]
   b5182:	f7ff fc44 	bl	b4a0e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b5186:	2800      	cmp	r0, #0
   b5188:	d0bc      	beq.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b518a:	f44f 7600 	mov.w	r6, #512	; 0x200
   b518e:	e7ad      	b.n	b50ec <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b5190:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5192:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b5194:	42b2      	cmp	r2, r6
   b5196:	d204      	bcs.n	b51a2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b5198:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b519a:	f043 0304 	orr.w	r3, r3, #4
   b519e:	70a3      	strb	r3, [r4, #2]
   b51a0:	e003      	b.n	b51aa <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b51a2:	4a08      	ldr	r2, [pc, #32]	; (b51c4 <_ZN7FatFile5writeEPKvj+0x188>)
   b51a4:	6812      	ldr	r2, [r2, #0]
   b51a6:	2a00      	cmp	r2, #0
   b51a8:	d1f7      	bne.n	b519a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b51aa:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b51ae:	2b00      	cmp	r3, #0
   b51b0:	db02      	blt.n	b51b8 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b51b2:	4638      	mov	r0, r7
}
   b51b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b51b8:	4620      	mov	r0, r4
   b51ba:	f7ff feb5 	bl	b4f28 <_ZN7FatFile4syncEv>
   b51be:	2800      	cmp	r0, #0
   b51c0:	d1f7      	bne.n	b51b2 <_ZN7FatFile5writeEPKvj+0x176>
   b51c2:	e79f      	b.n	b5104 <_ZN7FatFile5writeEPKvj+0xc8>
   b51c4:	2003e694 	.word	0x2003e694

000b51c8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b51c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b51ca:	7803      	ldrb	r3, [r0, #0]
   b51cc:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b51ce:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b51d0:	d520      	bpl.n	b5214 <_ZN8FatCache4syncEv+0x4c>
   b51d2:	6843      	ldr	r3, [r0, #4]
   b51d4:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b51d6:	f100 020c 	add.w	r2, r0, #12
   b51da:	6818      	ldr	r0, [r3, #0]
   b51dc:	9201      	str	r2, [sp, #4]
   b51de:	f7ff fc16 	bl	b4a0e <_ZN9SdSpiCard10writeBlockEmPKh>
   b51e2:	9a01      	ldr	r2, [sp, #4]
   b51e4:	4605      	mov	r5, r0
   b51e6:	b918      	cbnz	r0, b51f0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b51e8:	2500      	movs	r5, #0
}
   b51ea:	4628      	mov	r0, r5
   b51ec:	b003      	add	sp, #12
   b51ee:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b51f0:	7823      	ldrb	r3, [r4, #0]
   b51f2:	079b      	lsls	r3, r3, #30
   b51f4:	d404      	bmi.n	b5200 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b51f6:	7823      	ldrb	r3, [r4, #0]
   b51f8:	f023 0301 	bic.w	r3, r3, #1
   b51fc:	7023      	strb	r3, [r4, #0]
   b51fe:	e7f4      	b.n	b51ea <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b5200:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b5204:	6919      	ldr	r1, [r3, #16]
   b5206:	4401      	add	r1, r0
   b5208:	6818      	ldr	r0, [r3, #0]
   b520a:	f7ff fc00 	bl	b4a0e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b520e:	2800      	cmp	r0, #0
   b5210:	d1f1      	bne.n	b51f6 <_ZN8FatCache4syncEv+0x2e>
   b5212:	e7e9      	b.n	b51e8 <_ZN8FatCache4syncEv+0x20>
  return true;
   b5214:	2501      	movs	r5, #1
   b5216:	e7e8      	b.n	b51ea <_ZN8FatCache4syncEv+0x22>

000b5218 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5218:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b521a:	6883      	ldr	r3, [r0, #8]
   b521c:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b521e:	4604      	mov	r4, r0
   b5220:	460e      	mov	r6, r1
   b5222:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b5224:	d009      	beq.n	b523a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b5226:	f7ff ffcf 	bl	b51c8 <_ZN8FatCache4syncEv>
   b522a:	b908      	cbnz	r0, b5230 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b522c:	2000      	movs	r0, #0
}
   b522e:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b5230:	076b      	lsls	r3, r5, #29
   b5232:	d50a      	bpl.n	b524a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b5234:	2300      	movs	r3, #0
   b5236:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b5238:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b523a:	7822      	ldrb	r2, [r4, #0]
   b523c:	f005 0503 	and.w	r5, r5, #3
   b5240:	4620      	mov	r0, r4
   b5242:	4315      	orrs	r5, r2
   b5244:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b5248:	e7f1      	b.n	b522e <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b524a:	6863      	ldr	r3, [r4, #4]
   b524c:	f104 020c 	add.w	r2, r4, #12
   b5250:	6818      	ldr	r0, [r3, #0]
   b5252:	4631      	mov	r1, r6
   b5254:	f7ff fb52 	bl	b48fc <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b5258:	2800      	cmp	r0, #0
   b525a:	d1eb      	bne.n	b5234 <_ZN8FatCache4readEmh+0x1c>
   b525c:	e7e6      	b.n	b522c <_ZN8FatCache4readEmh+0x14>

000b525e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b525e:	7983      	ldrb	r3, [r0, #6]
   b5260:	6940      	ldr	r0, [r0, #20]
   b5262:	3902      	subs	r1, #2
   b5264:	4099      	lsls	r1, r3
}
   b5266:	4408      	add	r0, r1
   b5268:	4770      	bx	lr

000b526a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b526a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b526c:	b570      	push	{r4, r5, r6, lr}
   b526e:	4605      	mov	r5, r0
   b5270:	460c      	mov	r4, r1
   b5272:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5274:	d802      	bhi.n	b527c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b5276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b527a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b527c:	69c3      	ldr	r3, [r0, #28]
   b527e:	428b      	cmp	r3, r1
   b5280:	d3f9      	bcc.n	b5276 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b5282:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5284:	2b20      	cmp	r3, #32
   b5286:	d116      	bne.n	b52b6 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b5288:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b528a:	2202      	movs	r2, #2
   b528c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5290:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5294:	f7ff ffc0 	bl	b5218 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5298:	2800      	cmp	r0, #0
   b529a:	d0ec      	beq.n	b5276 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b529c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b52a0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b52a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b52a8:	69ea      	ldr	r2, [r5, #28]
   b52aa:	429a      	cmp	r2, r3
  *value = next;
   b52ac:	bf26      	itte	cs
   b52ae:	6033      	strcs	r3, [r6, #0]
  return 1;
   b52b0:	2001      	movcs	r0, #1
    return 0;
   b52b2:	2000      	movcc	r0, #0
   b52b4:	e7e1      	b.n	b527a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b52b6:	2b10      	cmp	r3, #16
   b52b8:	d1dd      	bne.n	b5276 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b52ba:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b52be:	6981      	ldr	r1, [r0, #24]
   b52c0:	2202      	movs	r2, #2
   b52c2:	4419      	add	r1, r3
   b52c4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b52c8:	f7ff ffa6 	bl	b5218 <_ZN8FatCache4readEmh>
    if (!pc) {
   b52cc:	2800      	cmp	r0, #0
   b52ce:	d0d2      	beq.n	b5276 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b52d0:	b2e4      	uxtb	r4, r4
   b52d2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b52d6:	e7e7      	b.n	b52a8 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b52d8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b52d8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b52da:	b538      	push	{r3, r4, r5, lr}
   b52dc:	460c      	mov	r4, r1
   b52de:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b52e0:	d801      	bhi.n	b52e6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b52e2:	2000      	movs	r0, #0
}
   b52e4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b52e6:	69c3      	ldr	r3, [r0, #28]
   b52e8:	428b      	cmp	r3, r1
   b52ea:	d3fa      	bcc.n	b52e2 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b52ec:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b52ee:	2b20      	cmp	r3, #32
   b52f0:	d10f      	bne.n	b5312 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b52f2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b52f4:	2203      	movs	r2, #3
   b52f6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b52fa:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b52fe:	f7ff ff8b 	bl	b5218 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5302:	2800      	cmp	r0, #0
   b5304:	d0ed      	beq.n	b52e2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b5306:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b530a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b530e:	2001      	movs	r0, #1
   b5310:	e7e8      	b.n	b52e4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b5312:	2b10      	cmp	r3, #16
   b5314:	d1e5      	bne.n	b52e2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5316:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b531a:	6981      	ldr	r1, [r0, #24]
   b531c:	2203      	movs	r2, #3
   b531e:	4419      	add	r1, r3
   b5320:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5324:	f7ff ff78 	bl	b5218 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5328:	2800      	cmp	r0, #0
   b532a:	d0da      	beq.n	b52e2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b532c:	b2e4      	uxtb	r4, r4
   b532e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b5332:	e7ec      	b.n	b530e <_ZN9FatVolume6fatPutEmm+0x36>

000b5334 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b5334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b5338:	68c4      	ldr	r4, [r0, #12]
   b533a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b533c:	4605      	mov	r5, r0
   b533e:	460e      	mov	r6, r1
   b5340:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b5342:	d301      	bcc.n	b5348 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b5344:	2701      	movs	r7, #1
   b5346:	e001      	b.n	b534c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b5348:	460c      	mov	r4, r1
    setStart = false;
   b534a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b534c:	69eb      	ldr	r3, [r5, #28]
    find++;
   b534e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b5350:	42a3      	cmp	r3, r4
   b5352:	d202      	bcs.n	b535a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b5354:	b9c7      	cbnz	r7, b5388 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b5356:	68ec      	ldr	r4, [r5, #12]
   b5358:	e7f4      	b.n	b5344 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b535a:	42a6      	cmp	r6, r4
   b535c:	d014      	beq.n	b5388 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b535e:	aa01      	add	r2, sp, #4
   b5360:	4621      	mov	r1, r4
   b5362:	4628      	mov	r0, r5
   b5364:	f7ff ff81 	bl	b526a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5368:	2800      	cmp	r0, #0
   b536a:	db0d      	blt.n	b5388 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b536c:	d0ee      	beq.n	b534c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b536e:	9b01      	ldr	r3, [sp, #4]
   b5370:	2b00      	cmp	r3, #0
   b5372:	d1eb      	bne.n	b534c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b5374:	b107      	cbz	r7, b5378 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b5376:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b5378:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b537c:	4621      	mov	r1, r4
   b537e:	4628      	mov	r0, r5
   b5380:	f7ff ffaa 	bl	b52d8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b5384:	4607      	mov	r7, r0
   b5386:	b920      	cbnz	r0, b5392 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b5388:	2700      	movs	r7, #0
}
   b538a:	4638      	mov	r0, r7
   b538c:	b002      	add	sp, #8
   b538e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b5392:	b916      	cbnz	r6, b539a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b5394:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b5398:	e7f7      	b.n	b538a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b539a:	4622      	mov	r2, r4
   b539c:	4631      	mov	r1, r6
   b539e:	4628      	mov	r0, r5
   b53a0:	f7ff ff9a 	bl	b52d8 <_ZN9FatVolume6fatPutEmm>
   b53a4:	2800      	cmp	r0, #0
   b53a6:	d1f5      	bne.n	b5394 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b53a8:	e7ee      	b.n	b5388 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b53aa <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b53aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b53ac:	4605      	mov	r5, r0
   b53ae:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b53b0:	aa01      	add	r2, sp, #4
   b53b2:	4621      	mov	r1, r4
   b53b4:	4628      	mov	r0, r5
   b53b6:	f7ff ff58 	bl	b526a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b53ba:	1e06      	subs	r6, r0, #0
   b53bc:	db10      	blt.n	b53e0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b53be:	2200      	movs	r2, #0
   b53c0:	4621      	mov	r1, r4
   b53c2:	4628      	mov	r0, r5
   b53c4:	f7ff ff88 	bl	b52d8 <_ZN9FatVolume6fatPutEmm>
   b53c8:	b150      	cbz	r0, b53e0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b53ca:	68eb      	ldr	r3, [r5, #12]
   b53cc:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b53ce:	bf24      	itt	cs
   b53d0:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b53d4:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b53d6:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b53d8:	2e00      	cmp	r6, #0
   b53da:	d1e9      	bne.n	b53b0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b53dc:	b002      	add	sp, #8
   b53de:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b53e0:	2000      	movs	r0, #0
   b53e2:	e7fb      	b.n	b53dc <_ZN9FatVolume9freeChainEm+0x32>

000b53e4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b53e4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b53e6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b53e8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b53ea:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b53ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b53f0:	4604      	mov	r4, r0
  m_fatType = 0;
   b53f2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b53f4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b53f8:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b53fa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b53fe:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b5400:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b5404:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b5408:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b540c:	460d      	mov	r5, r1
   b540e:	b1b9      	cbz	r1, b5440 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b5410:	2904      	cmp	r1, #4
   b5412:	d901      	bls.n	b5418 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b5414:	2000      	movs	r0, #0
}
   b5416:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b5418:	4611      	mov	r1, r2
   b541a:	4630      	mov	r0, r6
   b541c:	f7ff fefc 	bl	b5218 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5420:	2800      	cmp	r0, #0
   b5422:	d0f7      	beq.n	b5414 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b5424:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b5428:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b542c:	065b      	lsls	r3, r3, #25
   b542e:	d1f1      	bne.n	b5414 <_ZN9FatVolume4initEh+0x30>
   b5430:	f105 011b 	add.w	r1, r5, #27
   b5434:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b5438:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b543c:	2d00      	cmp	r5, #0
   b543e:	d0e9      	beq.n	b5414 <_ZN9FatVolume4initEh+0x30>
   b5440:	2200      	movs	r2, #0
   b5442:	4629      	mov	r1, r5
   b5444:	4630      	mov	r0, r6
   b5446:	f7ff fee7 	bl	b5218 <_ZN8FatCache4readEmh>
  if (!pc) {
   b544a:	2800      	cmp	r0, #0
   b544c:	d0e2      	beq.n	b5414 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b544e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b5452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b5456:	d1dd      	bne.n	b5414 <_ZN9FatVolume4initEh+0x30>
   b5458:	7c03      	ldrb	r3, [r0, #16]
   b545a:	2b02      	cmp	r3, #2
   b545c:	d1da      	bne.n	b5414 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b545e:	89c3      	ldrh	r3, [r0, #14]
   b5460:	2b00      	cmp	r3, #0
   b5462:	d0d7      	beq.n	b5414 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b5464:	7b41      	ldrb	r1, [r0, #13]
   b5466:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b5468:	1e4b      	subs	r3, r1, #1
   b546a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b546c:	2300      	movs	r3, #0
   b546e:	71a3      	strb	r3, [r4, #6]
   b5470:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b5472:	2301      	movs	r3, #1
   b5474:	4299      	cmp	r1, r3
   b5476:	d007      	beq.n	b5488 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b5478:	3e01      	subs	r6, #1
   b547a:	d0cb      	beq.n	b5414 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b547c:	79a2      	ldrb	r2, [r4, #6]
   b547e:	005b      	lsls	r3, r3, #1
   b5480:	3201      	adds	r2, #1
   b5482:	b2db      	uxtb	r3, r3
   b5484:	71a2      	strb	r2, [r4, #6]
   b5486:	e7f5      	b.n	b5474 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b5488:	8ac1      	ldrh	r1, [r0, #22]
   b548a:	b901      	cbnz	r1, b548e <_ZN9FatVolume4initEh+0xaa>
   b548c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b548e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b5490:	89c3      	ldrh	r3, [r0, #14]
   b5492:	442b      	add	r3, r5
   b5494:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b5496:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b549a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b549c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b54a0:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b54a2:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b54a6:	0149      	lsls	r1, r1, #5
   b54a8:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b54ac:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b54b0:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b54b2:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b54b6:	b902      	cbnz	r2, b54ba <_ZN9FatVolume4initEh+0xd6>
   b54b8:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b54ba:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b54bc:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b54be:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b54c0:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b54c2:	1c4b      	adds	r3, r1, #1
   b54c4:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b54c6:	f640 73f4 	movw	r3, #4084	; 0xff4
   b54ca:	4299      	cmp	r1, r3
   b54cc:	d802      	bhi.n	b54d4 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b54ce:	230c      	movs	r3, #12
   b54d0:	71e3      	strb	r3, [r4, #7]
   b54d2:	e79f      	b.n	b5414 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b54d4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b54d8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b54da:	bf85      	ittet	hi
   b54dc:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b54de:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b54e0:	2310      	movls	r3, #16
    m_fatType = 32;
   b54e2:	2320      	movhi	r3, #32
   b54e4:	71e3      	strb	r3, [r4, #7]
  return true;
   b54e6:	2001      	movs	r0, #1
   b54e8:	e795      	b.n	b5416 <_ZN9FatVolume4initEh+0x32>

000b54ea <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b54ea:	b513      	push	{r0, r1, r4, lr}
   b54ec:	4604      	mov	r4, r0
    }
   b54ee:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b54f0:	b159      	cbz	r1, b550a <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b54f2:	9101      	str	r1, [sp, #4]
   b54f4:	f001 ffc4 	bl	b7480 <strlen>
   b54f8:	6823      	ldr	r3, [r4, #0]
   b54fa:	9901      	ldr	r1, [sp, #4]
   b54fc:	68db      	ldr	r3, [r3, #12]
   b54fe:	4602      	mov	r2, r0
   b5500:	4620      	mov	r0, r4
    }
   b5502:	b002      	add	sp, #8
   b5504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5508:	4718      	bx	r3
    }
   b550a:	b002      	add	sp, #8
   b550c:	bd10      	pop	{r4, pc}

000b550e <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b550e:	2904      	cmp	r1, #4
   b5510:	d804      	bhi.n	b551c <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5512:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5516:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b551a:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b551c:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b551e:	bf9b      	ittet	ls
   b5520:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b5524:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5528:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b552a:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b552c:	bf84      	itt	hi
   b552e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5532:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5534:	4770      	bx	lr

000b5536 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b5536:	1e41      	subs	r1, r0, #1
   b5538:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b553c:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b553e:	0842      	lsrs	r2, r0, #1
   b5540:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b5544:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5548:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b554c:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b554e:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5550:	d1f5      	bne.n	b553e <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5552:	4770      	bx	lr

000b5554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b5554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5558:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b555a:	f810 3b01 	ldrb.w	r3, [r0], #1
   b555e:	2b20      	cmp	r3, #32
   b5560:	d0fa      	beq.n	b5558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5562:	4d6a      	ldr	r5, [pc, #424]	; (b570c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5564:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b5566:	2400      	movs	r4, #0
    c = path[len];
   b5568:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b556a:	b1c3      	cbz	r3, b559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b556c:	2b2f      	cmp	r3, #47	; 0x2f
   b556e:	d016      	beq.n	b559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5570:	2b5c      	cmp	r3, #92	; 0x5c
   b5572:	d102      	bne.n	b557a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5574:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b5576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b557a:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b557e:	b2c0      	uxtb	r0, r0
   b5580:	281d      	cmp	r0, #29
   b5582:	d803      	bhi.n	b558c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5584:	fa25 f000 	lsr.w	r0, r5, r0
   b5588:	07c0      	lsls	r0, r0, #31
   b558a:	d4f3      	bmi.n	b5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b558c:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5590:	283c      	cmp	r0, #60	; 0x3c
   b5592:	d0ef      	beq.n	b5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5594:	3b20      	subs	r3, #32
   b5596:	2b5e      	cmp	r3, #94	; 0x5e
   b5598:	d8ec      	bhi.n	b5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b559a:	3401      	adds	r4, #1
    c = path[len];
   b559c:	e7e4      	b.n	b5568 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b559e:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b55a0:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b55a2:	4607      	mov	r7, r0
   b55a4:	f810 5b01 	ldrb.w	r5, [r0], #1
   b55a8:	2d20      	cmp	r5, #32
   b55aa:	d0fa      	beq.n	b55a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b55ac:	2d2f      	cmp	r5, #47	; 0x2f
   b55ae:	d0f8      	beq.n	b55a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b55b0:	6017      	str	r7, [r2, #0]
  while (len) {
   b55b2:	b14c      	cbz	r4, b55c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b55b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b55b8:	2a2e      	cmp	r2, #46	; 0x2e
   b55ba:	d001      	beq.n	b55c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b55bc:	2a20      	cmp	r2, #32
   b55be:	d101      	bne.n	b55c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b55c0:	3c01      	subs	r4, #1
  while (len) {
   b55c2:	e7f6      	b.n	b55b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b55c4:	2cff      	cmp	r4, #255	; 0xff
   b55c6:	dcd5      	bgt.n	b5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b55c8:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b55cc:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b55d0:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b55d2:	f8c1 300d 	str.w	r3, [r1, #13]
   b55d6:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b55d8:	f04f 0800 	mov.w	r8, #0
   b55dc:	f816 3008 	ldrb.w	r3, [r6, r8]
   b55e0:	2b2e      	cmp	r3, #46	; 0x2e
   b55e2:	d001      	beq.n	b55e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b55e4:	2b20      	cmp	r3, #32
   b55e6:	d102      	bne.n	b55ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b55e8:	f108 0801 	add.w	r8, r8, #1
   b55ec:	e7f6      	b.n	b55dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b55ee:	fab8 f088 	clz	r0, r8
   b55f2:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b55f4:	1e65      	subs	r5, r4, #1
   b55f6:	1c6b      	adds	r3, r5, #1
   b55f8:	d002      	beq.n	b5600 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b55fa:	5d73      	ldrb	r3, [r6, r5]
   b55fc:	2b2e      	cmp	r3, #46	; 0x2e
   b55fe:	d114      	bne.n	b562a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5600:	f04f 0900 	mov.w	r9, #0
   b5604:	2707      	movs	r7, #7
   b5606:	464a      	mov	r2, r9
   b5608:	46ca      	mov	sl, r9
   b560a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b560e:	45a0      	cmp	r8, r4
   b5610:	da68      	bge.n	b56e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b5612:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5616:	2b20      	cmp	r3, #32
   b5618:	d003      	beq.n	b5622 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b561a:	2b2e      	cmp	r3, #46	; 0x2e
   b561c:	d107      	bne.n	b562e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b561e:	45a8      	cmp	r8, r5
   b5620:	d012      	beq.n	b5648 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b5622:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5624:	f108 0801 	add.w	r8, r8, #1
   b5628:	e7f1      	b.n	b560e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b562a:	3d01      	subs	r5, #1
   b562c:	e7e3      	b.n	b55f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b562e:	2b22      	cmp	r3, #34	; 0x22
   b5630:	d008      	beq.n	b5644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b5632:	2b7c      	cmp	r3, #124	; 0x7c
   b5634:	d006      	beq.n	b5644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b5636:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b563a:	f1bc 0f05 	cmp.w	ip, #5
   b563e:	d80a      	bhi.n	b5656 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5640:	2b2d      	cmp	r3, #45	; 0x2d
   b5642:	d012      	beq.n	b566a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b5644:	45a8      	cmp	r8, r5
   b5646:	d15b      	bne.n	b5700 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5648:	2f0a      	cmp	r7, #10
   b564a:	d04a      	beq.n	b56e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b564c:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b564e:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5650:	f04f 0e10 	mov.w	lr, #16
   b5654:	e7e6      	b.n	b5624 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b5656:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b565a:	f1bc 0f05 	cmp.w	ip, #5
   b565e:	d9f1      	bls.n	b5644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5660:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5664:	f1bc 0f02 	cmp.w	ip, #2
   b5668:	d9ec      	bls.n	b5644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b566a:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b566e:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5672:	d8e7      	bhi.n	b5644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5674:	45a8      	cmp	r8, r5
   b5676:	d0e7      	beq.n	b5648 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5678:	42ba      	cmp	r2, r7
   b567a:	d830      	bhi.n	b56de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b567c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5680:	f1bc 0f19 	cmp.w	ip, #25
   b5684:	d81a      	bhi.n	b56bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5686:	3b20      	subs	r3, #32
        lc |= bit;
   b5688:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b568c:	b2db      	uxtb	r3, r3
        lc |= bit;
   b568e:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5692:	f102 0c01 	add.w	ip, r2, #1
   b5696:	fa5f fc8c 	uxtb.w	ip, ip
   b569a:	440a      	add	r2, r1
      if (i < 7) {
   b569c:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b56a0:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b56a2:	d801      	bhi.n	b56a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b56a4:	f881 c00c 	strb.w	ip, [r1, #12]
   b56a8:	4662      	mov	r2, ip
   b56aa:	e7bb      	b.n	b5624 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b56ac:	45a8      	cmp	r8, r5
   b56ae:	dc18      	bgt.n	b56e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b56b0:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b56b2:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b56b4:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b56b6:	f04f 0e10 	mov.w	lr, #16
   b56ba:	e7b2      	b.n	b5622 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b56bc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b56c0:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b56c4:	bf98      	it	ls
   b56c6:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b56ca:	e7e2      	b.n	b5692 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b56cc:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b56ce:	2001      	movs	r0, #1
   b56d0:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b56d2:	4419      	add	r1, r3
   b56d4:	237e      	movs	r3, #126	; 0x7e
   b56d6:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b56d8:	2331      	movs	r3, #49	; 0x31
   b56da:	738b      	strb	r3, [r1, #14]
   b56dc:	e74b      	b.n	b5576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b56de:	2f0a      	cmp	r7, #10
   b56e0:	d1e4      	bne.n	b56ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b56e2:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b56e4:	7b4b      	ldrb	r3, [r1, #13]
   b56e6:	2b20      	cmp	r3, #32
   b56e8:	f43f af44 	beq.w	b5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b56ec:	2800      	cmp	r0, #0
   b56ee:	d0ed      	beq.n	b56cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b56f0:	ea1a 0f09 	tst.w	sl, r9
   b56f4:	bf18      	it	ne
   b56f6:	f04f 0902 	movne.w	r9, #2
   b56fa:	f881 9000 	strb.w	r9, [r1]
   b56fe:	e73a      	b.n	b5576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5700:	42ba      	cmp	r2, r7
   b5702:	d8ec      	bhi.n	b56de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5704:	2000      	movs	r0, #0
      c = '_';
   b5706:	235f      	movs	r3, #95	; 0x5f
   b5708:	e7c3      	b.n	b5692 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b570a:	bf00      	nop
   b570c:	31000101 	.word	0x31000101

000b5710 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5714:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5718:	4606      	mov	r6, r0
   b571a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b571c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b571e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5720:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5724:	6861      	ldr	r1, [r4, #4]
   b5726:	68a2      	ldr	r2, [r4, #8]
   b5728:	186b      	adds	r3, r5, r1
   b572a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b572c:	4411      	add	r1, r2
   b572e:	4291      	cmp	r1, r2
   b5730:	d006      	beq.n	b5740 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b5732:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5736:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b573a:	4043      	eors	r3, r0
   b573c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b573e:	e7f6      	b.n	b572e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5740:	f1b9 0f03 	cmp.w	r9, #3
   b5744:	bf28      	it	cs
   b5746:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b574a:	f109 0204 	add.w	r2, r9, #4
   b574e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5750:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5754:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5756:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5758:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b575a:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b575c:	bf94      	ite	ls
   b575e:	3130      	addls	r1, #48	; 0x30
   b5760:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5762:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5764:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b5766:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b576a:	d1f1      	bne.n	b5750 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b576c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5770:	2100      	movs	r1, #0
   b5772:	735f      	strb	r7, [r3, #13]
   b5774:	4630      	mov	r0, r6
   b5776:	f7ff fb29 	bl	b4dcc <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b577a:	2101      	movs	r1, #1
   b577c:	4630      	mov	r0, r6
   b577e:	f7ff fb06 	bl	b4d8e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b5782:	4601      	mov	r1, r0
   b5784:	b928      	cbnz	r0, b5792 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b5786:	7870      	ldrb	r0, [r6, #1]
   b5788:	fab0 f080 	clz	r0, r0
   b578c:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b578e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b5792:	7803      	ldrb	r3, [r0, #0]
   b5794:	b16b      	cbz	r3, b57b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5796:	7ac3      	ldrb	r3, [r0, #11]
   b5798:	071b      	lsls	r3, r3, #28
   b579a:	d4ee      	bmi.n	b577a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b579c:	220b      	movs	r2, #11
   b579e:	4640      	mov	r0, r8
   b57a0:	f001 fddc 	bl	b735c <memcmp>
   b57a4:	2800      	cmp	r0, #0
   b57a6:	d1e8      	bne.n	b577a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b57a8:	3501      	adds	r5, #1
   b57aa:	b2ad      	uxth	r5, r5
   b57ac:	2d64      	cmp	r5, #100	; 0x64
   b57ae:	d1b9      	bne.n	b5724 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b57b0:	e7ed      	b.n	b578e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b57b2:	2001      	movs	r0, #1
   b57b4:	e7eb      	b.n	b578e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b57b8 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b57b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57bc:	ed2d 8b02 	vpush	{d8}
   b57c0:	b08b      	sub	sp, #44	; 0x2c
   b57c2:	460d      	mov	r5, r1
   b57c4:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b57c6:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b57c8:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b57ca:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b57ce:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b57d0:	d105      	bne.n	b57de <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b57d2:	2000      	movs	r0, #0
}
   b57d4:	b00b      	add	sp, #44	; 0x2c
   b57d6:	ecbd 8b02 	vpop	{d8}
   b57da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b57de:	9b07      	ldr	r3, [sp, #28]
   b57e0:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b57e2:	2b00      	cmp	r3, #0
   b57e4:	d1f5      	bne.n	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b57e6:	6853      	ldr	r3, [r2, #4]
   b57e8:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b57ea:	7813      	ldrb	r3, [r2, #0]
   b57ec:	079c      	lsls	r4, r3, #30
   b57ee:	bf1f      	itttt	ne
   b57f0:	9b05      	ldrne	r3, [sp, #20]
   b57f2:	330c      	addne	r3, #12
   b57f4:	220d      	movne	r2, #13
   b57f6:	fbb3 f3f2 	udivne	r3, r3, r2
   b57fa:	bf1a      	itte	ne
   b57fc:	3301      	addne	r3, #1
   b57fe:	b2db      	uxtbne	r3, r3
   b5800:	2301      	moveq	r3, #1
    seekSet(0);
   b5802:	2100      	movs	r1, #0
   b5804:	4628      	mov	r0, r5
   b5806:	9303      	str	r3, [sp, #12]
   b5808:	f7ff fae0 	bl	b4dcc <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b580c:	f107 030d 	add.w	r3, r7, #13
  }
   b5810:	f04f 0b00 	mov.w	fp, #0
   b5814:	ee08 3a10 	vmov	s16, r3
   b5818:	46da      	mov	sl, fp
   b581a:	465c      	mov	r4, fp
   b581c:	465e      	mov	r6, fp
   b581e:	f8cd b010 	str.w	fp, [sp, #16]
   b5822:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b5824:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b5826:	2101      	movs	r1, #1
   b5828:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b582a:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b582e:	f7ff faae 	bl	b4d8e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5832:	4603      	mov	r3, r0
   b5834:	2800      	cmp	r0, #0
   b5836:	d171      	bne.n	b591c <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5838:	786b      	ldrb	r3, [r5, #1]
   b583a:	2b00      	cmp	r3, #0
   b583c:	d1c9      	bne.n	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b583e:	9b06      	ldr	r3, [sp, #24]
   b5840:	059a      	lsls	r2, r3, #22
   b5842:	d5c6      	bpl.n	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b5844:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b5848:	3b01      	subs	r3, #1
   b584a:	2b01      	cmp	r3, #1
   b584c:	d8c1      	bhi.n	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b584e:	9b04      	ldr	r3, [sp, #16]
   b5850:	2c00      	cmp	r4, #0
   b5852:	bf08      	it	eq
   b5854:	4643      	moveq	r3, r8
   b5856:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5858:	9b03      	ldr	r3, [sp, #12]
   b585a:	429c      	cmp	r4, r3
   b585c:	f0c0 80f1 	bcc.w	b5a42 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5860:	f1b9 0f00 	cmp.w	r9, #0
   b5864:	f040 810a 	bne.w	b5a7c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b5868:	9b04      	ldr	r3, [sp, #16]
   b586a:	4628      	mov	r0, r5
   b586c:	0159      	lsls	r1, r3, #5
   b586e:	f7ff faad 	bl	b4dcc <_ZN7FatFile7seekSetEm>
   b5872:	2800      	cmp	r0, #0
   b5874:	d0ad      	beq.n	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b5876:	9b03      	ldr	r3, [sp, #12]
   b5878:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b587c:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5880:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5882:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b5886:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b588a:	2e00      	cmp	r6, #0
   b588c:	f000 810d 	beq.w	b5aaa <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5890:	2100      	movs	r1, #0
   b5892:	4628      	mov	r0, r5
   b5894:	f7ff fa7b 	bl	b4d8e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5898:	4604      	mov	r4, r0
   b589a:	2800      	cmp	r0, #0
   b589c:	d099      	beq.n	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b589e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b58a0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b58a4:	454e      	cmp	r6, r9
   b58a6:	f043 0301 	orr.w	r3, r3, #1
   b58aa:	bf0c      	ite	eq
   b58ac:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b58b0:	46b3      	movne	fp, r6
   b58b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b58b6:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b58ba:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b58be:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b58c2:	f107 000d 	add.w	r0, r7, #13
   b58c6:	f7ff fe36 	bl	b5536 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b58ca:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b58ce:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b58d0:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b58d4:	f00b 031f 	and.w	r3, fp, #31
   b58d8:	220d      	movs	r2, #13
   b58da:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b58dc:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b58e0:	4353      	muls	r3, r2
   b58e2:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b58e4:	9905      	ldr	r1, [sp, #20]
   b58e6:	4299      	cmp	r1, r3
   b58e8:	f240 80d0 	bls.w	b5a8c <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b58ec:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b58f0:	2a04      	cmp	r2, #4
   b58f2:	fa5f fe82 	uxtb.w	lr, r2
   b58f6:	f102 0001 	add.w	r0, r2, #1
   b58fa:	f200 80cd 	bhi.w	b5a98 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b58fe:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b5902:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b5906:	280d      	cmp	r0, #13
   b5908:	f103 0301 	add.w	r3, r3, #1
   b590c:	4602      	mov	r2, r0
   b590e:	d1e9      	bne.n	b58e4 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5910:	3e01      	subs	r6, #1
   b5912:	b2f6      	uxtb	r6, r6
   b5914:	e7b9      	b.n	b588a <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b5916:	f04f 0901 	mov.w	r9, #1
   b591a:	e783      	b.n	b5824 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b591c:	7802      	ldrb	r2, [r0, #0]
   b591e:	2ae5      	cmp	r2, #229	; 0xe5
   b5920:	d000      	beq.n	b5924 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b5922:	b97a      	cbnz	r2, b5944 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b5924:	9904      	ldr	r1, [sp, #16]
   b5926:	2c00      	cmp	r4, #0
   b5928:	bf08      	it	eq
   b592a:	4641      	moveq	r1, r8
   b592c:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b592e:	9903      	ldr	r1, [sp, #12]
   b5930:	428c      	cmp	r4, r1
        freeFound++;
   b5932:	bf3c      	itt	cc
   b5934:	3401      	addcc	r4, #1
   b5936:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b5938:	2a00      	cmp	r2, #0
   b593a:	d080      	beq.n	b583e <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b593c:	2ae5      	cmp	r2, #229	; 0xe5
   b593e:	d105      	bne.n	b594c <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b5940:	2600      	movs	r6, #0
   b5942:	e76f      	b.n	b5824 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b5944:	9903      	ldr	r1, [sp, #12]
   b5946:	428c      	cmp	r4, r1
   b5948:	bf38      	it	cc
   b594a:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b594c:	2a2e      	cmp	r2, #46	; 0x2e
   b594e:	d0f7      	beq.n	b5940 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b5950:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b5952:	290f      	cmp	r1, #15
   b5954:	d14a      	bne.n	b59ec <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b5956:	bb16      	cbnz	r6, b599e <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b5958:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b595c:	f43f af62 	beq.w	b5824 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b5960:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b5964:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b5968:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b596a:	220d      	movs	r2, #13
   b596c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b5970:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b5974:	9a05      	ldr	r2, [sp, #20]
   b5976:	4542      	cmp	r2, r8
   b5978:	d9e2      	bls.n	b5940 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b597a:	eba2 0208 	sub.w	r2, r2, r8
   b597e:	9208      	str	r2, [sp, #32]
   b5980:	2200      	movs	r2, #0
   b5982:	eb02 0108 	add.w	r1, r2, r8
   b5986:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b5988:	4618      	mov	r0, r3
   b598a:	b2d1      	uxtb	r1, r2
   b598c:	f7ff fdbf 	bl	b550e <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b5990:	9908      	ldr	r1, [sp, #32]
   b5992:	428a      	cmp	r2, r1
   b5994:	d10d      	bne.n	b59b2 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b5996:	2800      	cmp	r0, #0
   b5998:	bf18      	it	ne
   b599a:	2600      	movne	r6, #0
   b599c:	e742      	b.n	b5824 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b599e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b59a2:	fa5f fa8a 	uxtb.w	sl, sl
   b59a6:	4552      	cmp	r2, sl
   b59a8:	d1ca      	bne.n	b5940 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b59aa:	7b5a      	ldrb	r2, [r3, #13]
   b59ac:	455a      	cmp	r2, fp
   b59ae:	d0dc      	beq.n	b596a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b59b0:	e7c6      	b.n	b5940 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b59b2:	28ff      	cmp	r0, #255	; 0xff
   b59b4:	d8c4      	bhi.n	b5940 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b59b6:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b59ba:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b59be:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b59c0:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b59c2:	bf9c      	itt	ls
   b59c4:	f10e 0020 	addls.w	r0, lr, #32
   b59c8:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b59cc:	4608      	mov	r0, r1
   b59ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   b59d0:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b59d2:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b59d6:	f1bc 0f19 	cmp.w	ip, #25
   b59da:	bf9c      	itt	ls
   b59dc:	3120      	addls	r1, #32
   b59de:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b59e0:	4571      	cmp	r1, lr
   b59e2:	d1ad      	bne.n	b5940 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b59e4:	3201      	adds	r2, #1
   b59e6:	2a0d      	cmp	r2, #13
   b59e8:	d1cb      	bne.n	b5982 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b59ea:	e71b      	b.n	b5824 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b59ec:	0708      	lsls	r0, r1, #28
   b59ee:	d4a7      	bmi.n	b5940 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b59f0:	b15e      	cbz	r6, b5a0a <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b59f2:	f1ba 0f01 	cmp.w	sl, #1
   b59f6:	f47f aeec 	bne.w	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b59fa:	4618      	mov	r0, r3
   b59fc:	f7ff fd9b 	bl	b5536 <_ZN7FatFile11lfnChecksumEPh>
   b5a00:	4558      	cmp	r0, fp
   b5a02:	f47f aee6 	bne.w	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5a06:	46b1      	mov	r9, r6
   b5a08:	e00e      	b.n	b5a28 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5a0a:	ee18 1a10 	vmov	r1, s16
   b5a0e:	220b      	movs	r2, #11
   b5a10:	4618      	mov	r0, r3
   b5a12:	f001 fca3 	bl	b735c <memcmp>
   b5a16:	2800      	cmp	r0, #0
   b5a18:	f47f af04 	bne.w	b5824 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5a1c:	f897 9000 	ldrb.w	r9, [r7]
   b5a20:	f019 0901 	ands.w	r9, r9, #1
   b5a24:	f47f af77 	bne.w	b5916 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5a28:	9b06      	ldr	r3, [sp, #24]
   b5a2a:	0519      	lsls	r1, r3, #20
   b5a2c:	f53f aed1 	bmi.w	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b5a30:	9b06      	ldr	r3, [sp, #24]
   b5a32:	9807      	ldr	r0, [sp, #28]
   b5a34:	f8cd 9000 	str.w	r9, [sp]
   b5a38:	4642      	mov	r2, r8
   b5a3a:	4629      	mov	r1, r5
   b5a3c:	f7ff fa09 	bl	b4e52 <_ZN7FatFile15openCachedEntryEPS_tih>
   b5a40:	e6c8      	b.n	b57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b5a42:	2100      	movs	r1, #0
   b5a44:	4628      	mov	r0, r5
   b5a46:	f7ff f9a2 	bl	b4d8e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5a4a:	b9a0      	cbnz	r0, b5a76 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b5a4c:	786b      	ldrb	r3, [r5, #1]
   b5a4e:	2b00      	cmp	r3, #0
   b5a50:	f47f aebf 	bne.w	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b5a54:	4628      	mov	r0, r5
   b5a56:	f7ff f899 	bl	b4b8c <_ZN7FatFile13addDirClusterEv>
   b5a5a:	2800      	cmp	r0, #0
   b5a5c:	f43f aeb9 	beq.w	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b5a60:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b5a62:	791b      	ldrb	r3, [r3, #4]
   b5a64:	2b01      	cmp	r3, #1
   b5a66:	f63f aefb 	bhi.w	b5860 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b5a6a:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b5a6c:	3410      	adds	r4, #16
   b5a6e:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5a70:	42a3      	cmp	r3, r4
   b5a72:	d8ef      	bhi.n	b5a54 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b5a74:	e6f4      	b.n	b5860 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b5a76:	3401      	adds	r4, #1
   b5a78:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5a7a:	e6ed      	b.n	b5858 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5a7c:	4639      	mov	r1, r7
   b5a7e:	4628      	mov	r0, r5
   b5a80:	f7ff fe46 	bl	b5710 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b5a84:	2800      	cmp	r0, #0
   b5a86:	f47f aeef 	bne.w	b5868 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b5a8a:	e6a2      	b.n	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5a8c:	bf14      	ite	ne
   b5a8e:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b5a92:	2100      	moveq	r1, #0
   b5a94:	b289      	uxth	r1, r1
   b5a96:	e72b      	b.n	b58f0 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5a98:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b5a9c:	bf94      	ite	ls
   b5a9e:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b5aa2:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b5aa6:	8091      	strh	r1, [r2, #4]
   b5aa8:	e72d      	b.n	b5906 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b5aaa:	4631      	mov	r1, r6
   b5aac:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b5aae:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b5ab2:	f7ff f96c 	bl	b4d8e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b5ab6:	4604      	mov	r4, r0
   b5ab8:	2800      	cmp	r0, #0
   b5aba:	f43f ae8a 	beq.w	b57d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b5abe:	2220      	movs	r2, #32
   b5ac0:	4631      	mov	r1, r6
   b5ac2:	f001 fc69 	bl	b7398 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b5ac6:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b5aca:	6023      	str	r3, [r4, #0]
   b5acc:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b5ad0:	6063      	str	r3, [r4, #4]
   b5ad2:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b5ad6:	8123      	strh	r3, [r4, #8]
   b5ad8:	7dfb      	ldrb	r3, [r7, #23]
   b5ada:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b5adc:	783b      	ldrb	r3, [r7, #0]
   b5ade:	f003 0318 	and.w	r3, r3, #24
   b5ae2:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b5ae4:	4b0f      	ldr	r3, [pc, #60]	; (b5b24 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b5ae6:	681b      	ldr	r3, [r3, #0]
   b5ae8:	b19b      	cbz	r3, b5b12 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5aea:	f104 010e 	add.w	r1, r4, #14
   b5aee:	f104 0010 	add.w	r0, r4, #16
   b5af2:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b5af4:	8a23      	ldrh	r3, [r4, #16]
   b5af6:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b5af8:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b5afa:	89e3      	ldrh	r3, [r4, #14]
   b5afc:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5afe:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5b00:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b5b04:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5b08:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5b0c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b5b10:	e78e      	b.n	b5a30 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b5b12:	2321      	movs	r3, #33	; 0x21
   b5b14:	7423      	strb	r3, [r4, #16]
   b5b16:	2328      	movs	r3, #40	; 0x28
   b5b18:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5b1a:	2308      	movs	r3, #8
   b5b1c:	73a6      	strb	r6, [r4, #14]
   b5b1e:	73e3      	strb	r3, [r4, #15]
   b5b20:	e7e8      	b.n	b5af4 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b5b22:	bf00      	nop
   b5b24:	2003e694 	.word	0x2003e694

000b5b28 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5b28:	b508      	push	{r3, lr}
   b5b2a:	4b02      	ldr	r3, [pc, #8]	; (b5b34 <HAL_USB_USART_Init+0xc>)
   b5b2c:	681b      	ldr	r3, [r3, #0]
   b5b2e:	681b      	ldr	r3, [r3, #0]
   b5b30:	9301      	str	r3, [sp, #4]
   b5b32:	bd08      	pop	{r3, pc}
   b5b34:	0003024c 	.word	0x0003024c

000b5b38 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <HAL_USB_USART_Begin+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	685b      	ldr	r3, [r3, #4]
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	0003024c 	.word	0x0003024c

000b5b48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <HAL_USB_USART_Available_Data+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	691b      	ldr	r3, [r3, #16]
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	0003024c 	.word	0x0003024c

000b5b58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	695b      	ldr	r3, [r3, #20]
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	0003024c 	.word	0x0003024c

000b5b68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5b68:	b508      	push	{r3, lr}
   b5b6a:	4b02      	ldr	r3, [pc, #8]	; (b5b74 <HAL_USB_USART_Receive_Data+0xc>)
   b5b6c:	681b      	ldr	r3, [r3, #0]
   b5b6e:	699b      	ldr	r3, [r3, #24]
   b5b70:	9301      	str	r3, [sp, #4]
   b5b72:	bd08      	pop	{r3, pc}
   b5b74:	0003024c 	.word	0x0003024c

000b5b78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5b78:	b508      	push	{r3, lr}
   b5b7a:	4b02      	ldr	r3, [pc, #8]	; (b5b84 <HAL_USB_USART_Send_Data+0xc>)
   b5b7c:	681b      	ldr	r3, [r3, #0]
   b5b7e:	69db      	ldr	r3, [r3, #28]
   b5b80:	9301      	str	r3, [sp, #4]
   b5b82:	bd08      	pop	{r3, pc}
   b5b84:	0003024c 	.word	0x0003024c

000b5b88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5b88:	b508      	push	{r3, lr}
   b5b8a:	4b02      	ldr	r3, [pc, #8]	; (b5b94 <HAL_USB_USART_Flush_Data+0xc>)
   b5b8c:	681b      	ldr	r3, [r3, #0]
   b5b8e:	6a1b      	ldr	r3, [r3, #32]
   b5b90:	9301      	str	r3, [sp, #4]
   b5b92:	bd08      	pop	{r3, pc}
   b5b94:	0003024c 	.word	0x0003024c

000b5b98 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5b98:	b508      	push	{r3, lr}
   b5b9a:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <hal_i2c_write+0xc>)
   b5b9c:	681b      	ldr	r3, [r3, #0]
   b5b9e:	6a1b      	ldr	r3, [r3, #32]
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	bd08      	pop	{r3, pc}
   b5ba4:	00030228 	.word	0x00030228

000b5ba8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5ba8:	b508      	push	{r3, lr}
   b5baa:	4b02      	ldr	r3, [pc, #8]	; (b5bb4 <hal_i2c_available+0xc>)
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5bb0:	9301      	str	r3, [sp, #4]
   b5bb2:	bd08      	pop	{r3, pc}
   b5bb4:	00030228 	.word	0x00030228

000b5bb8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <hal_i2c_read+0xc>)
   b5bbc:	681b      	ldr	r3, [r3, #0]
   b5bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5bc0:	9301      	str	r3, [sp, #4]
   b5bc2:	bd08      	pop	{r3, pc}
   b5bc4:	00030228 	.word	0x00030228

000b5bc8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <hal_i2c_peek+0xc>)
   b5bcc:	681b      	ldr	r3, [r3, #0]
   b5bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5bd0:	9301      	str	r3, [sp, #4]
   b5bd2:	bd08      	pop	{r3, pc}
   b5bd4:	00030228 	.word	0x00030228

000b5bd8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5bd8:	b508      	push	{r3, lr}
   b5bda:	4b02      	ldr	r3, [pc, #8]	; (b5be4 <hal_i2c_flush+0xc>)
   b5bdc:	681b      	ldr	r3, [r3, #0]
   b5bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5be0:	9301      	str	r3, [sp, #4]
   b5be2:	bd08      	pop	{r3, pc}
   b5be4:	00030228 	.word	0x00030228

000b5be8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <hal_i2c_is_enabled+0xc>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5bf0:	9301      	str	r3, [sp, #4]
   b5bf2:	bd08      	pop	{r3, pc}
   b5bf4:	00030228 	.word	0x00030228

000b5bf8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5bf8:	b508      	push	{r3, lr}
   b5bfa:	4b02      	ldr	r3, [pc, #8]	; (b5c04 <hal_i2c_init+0xc>)
   b5bfc:	681b      	ldr	r3, [r3, #0]
   b5bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c00:	9301      	str	r3, [sp, #4]
   b5c02:	bd08      	pop	{r3, pc}
   b5c04:	00030228 	.word	0x00030228

000b5c08 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5c08:	b508      	push	{r3, lr}
   b5c0a:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <hal_spi_begin+0xc>)
   b5c0c:	681b      	ldr	r3, [r3, #0]
   b5c0e:	681b      	ldr	r3, [r3, #0]
   b5c10:	9301      	str	r3, [sp, #4]
   b5c12:	bd08      	pop	{r3, pc}
   b5c14:	00030230 	.word	0x00030230

000b5c18 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5c18:	b508      	push	{r3, lr}
   b5c1a:	4b02      	ldr	r3, [pc, #8]	; (b5c24 <hal_spi_transfer+0xc>)
   b5c1c:	681b      	ldr	r3, [r3, #0]
   b5c1e:	695b      	ldr	r3, [r3, #20]
   b5c20:	9301      	str	r3, [sp, #4]
   b5c22:	bd08      	pop	{r3, pc}
   b5c24:	00030230 	.word	0x00030230

000b5c28 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5c28:	b508      	push	{r3, lr}
   b5c2a:	4b02      	ldr	r3, [pc, #8]	; (b5c34 <hal_spi_init+0xc>)
   b5c2c:	681b      	ldr	r3, [r3, #0]
   b5c2e:	69db      	ldr	r3, [r3, #28]
   b5c30:	9301      	str	r3, [sp, #4]
   b5c32:	bd08      	pop	{r3, pc}
   b5c34:	00030230 	.word	0x00030230

000b5c38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5c38:	b508      	push	{r3, lr}
   b5c3a:	4b02      	ldr	r3, [pc, #8]	; (b5c44 <hal_spi_is_enabled+0xc>)
   b5c3c:	681b      	ldr	r3, [r3, #0]
   b5c3e:	6a1b      	ldr	r3, [r3, #32]
   b5c40:	9301      	str	r3, [sp, #4]
   b5c42:	bd08      	pop	{r3, pc}
   b5c44:	00030230 	.word	0x00030230

000b5c48 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5c48:	b508      	push	{r3, lr}
   b5c4a:	4b02      	ldr	r3, [pc, #8]	; (b5c54 <hal_spi_info+0xc>)
   b5c4c:	681b      	ldr	r3, [r3, #0]
   b5c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c50:	9301      	str	r3, [sp, #4]
   b5c52:	bd08      	pop	{r3, pc}
   b5c54:	00030230 	.word	0x00030230

000b5c58 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b5c58:	b508      	push	{r3, lr}
   b5c5a:	4b02      	ldr	r3, [pc, #8]	; (b5c64 <hal_spi_transfer_dma+0xc>)
   b5c5c:	681b      	ldr	r3, [r3, #0]
   b5c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c60:	9301      	str	r3, [sp, #4]
   b5c62:	bd08      	pop	{r3, pc}
   b5c64:	00030230 	.word	0x00030230

000b5c68 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b5c68:	b508      	push	{r3, lr}
   b5c6a:	4b02      	ldr	r3, [pc, #8]	; (b5c74 <hal_spi_transfer_dma_status+0xc>)
   b5c6c:	681b      	ldr	r3, [r3, #0]
   b5c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5c70:	9301      	str	r3, [sp, #4]
   b5c72:	bd08      	pop	{r3, pc}
   b5c74:	00030230 	.word	0x00030230

000b5c78 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5c78:	b508      	push	{r3, lr}
   b5c7a:	4b02      	ldr	r3, [pc, #8]	; (b5c84 <hal_spi_set_settings+0xc>)
   b5c7c:	681b      	ldr	r3, [r3, #0]
   b5c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c80:	9301      	str	r3, [sp, #4]
   b5c82:	bd08      	pop	{r3, pc}
   b5c84:	00030230 	.word	0x00030230

000b5c88 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5c88:	b508      	push	{r3, lr}
   b5c8a:	4b02      	ldr	r3, [pc, #8]	; (b5c94 <hal_spi_acquire+0xc>)
   b5c8c:	681b      	ldr	r3, [r3, #0]
   b5c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c90:	9301      	str	r3, [sp, #4]
   b5c92:	bd08      	pop	{r3, pc}
   b5c94:	00030230 	.word	0x00030230

000b5c98 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5c98:	b508      	push	{r3, lr}
   b5c9a:	4b02      	ldr	r3, [pc, #8]	; (b5ca4 <hal_spi_release+0xc>)
   b5c9c:	681b      	ldr	r3, [r3, #0]
   b5c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ca0:	9301      	str	r3, [sp, #4]
   b5ca2:	bd08      	pop	{r3, pc}
   b5ca4:	00030230 	.word	0x00030230

000b5ca8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5ca8:	b508      	push	{r3, lr}
   b5caa:	4b02      	ldr	r3, [pc, #8]	; (b5cb4 <hal_usart_write+0xc>)
   b5cac:	681b      	ldr	r3, [r3, #0]
   b5cae:	68db      	ldr	r3, [r3, #12]
   b5cb0:	9301      	str	r3, [sp, #4]
   b5cb2:	bd08      	pop	{r3, pc}
   b5cb4:	0003023c 	.word	0x0003023c

000b5cb8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5cb8:	b508      	push	{r3, lr}
   b5cba:	4b02      	ldr	r3, [pc, #8]	; (b5cc4 <hal_usart_available+0xc>)
   b5cbc:	681b      	ldr	r3, [r3, #0]
   b5cbe:	691b      	ldr	r3, [r3, #16]
   b5cc0:	9301      	str	r3, [sp, #4]
   b5cc2:	bd08      	pop	{r3, pc}
   b5cc4:	0003023c 	.word	0x0003023c

000b5cc8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5cc8:	b508      	push	{r3, lr}
   b5cca:	4b02      	ldr	r3, [pc, #8]	; (b5cd4 <hal_usart_read+0xc>)
   b5ccc:	681b      	ldr	r3, [r3, #0]
   b5cce:	695b      	ldr	r3, [r3, #20]
   b5cd0:	9301      	str	r3, [sp, #4]
   b5cd2:	bd08      	pop	{r3, pc}
   b5cd4:	0003023c 	.word	0x0003023c

000b5cd8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5cd8:	b508      	push	{r3, lr}
   b5cda:	4b02      	ldr	r3, [pc, #8]	; (b5ce4 <hal_usart_peek+0xc>)
   b5cdc:	681b      	ldr	r3, [r3, #0]
   b5cde:	699b      	ldr	r3, [r3, #24]
   b5ce0:	9301      	str	r3, [sp, #4]
   b5ce2:	bd08      	pop	{r3, pc}
   b5ce4:	0003023c 	.word	0x0003023c

000b5ce8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5ce8:	b508      	push	{r3, lr}
   b5cea:	4b02      	ldr	r3, [pc, #8]	; (b5cf4 <hal_usart_flush+0xc>)
   b5cec:	681b      	ldr	r3, [r3, #0]
   b5cee:	69db      	ldr	r3, [r3, #28]
   b5cf0:	9301      	str	r3, [sp, #4]
   b5cf2:	bd08      	pop	{r3, pc}
   b5cf4:	0003023c 	.word	0x0003023c

000b5cf8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5cf8:	b508      	push	{r3, lr}
   b5cfa:	4b02      	ldr	r3, [pc, #8]	; (b5d04 <hal_usart_is_enabled+0xc>)
   b5cfc:	681b      	ldr	r3, [r3, #0]
   b5cfe:	6a1b      	ldr	r3, [r3, #32]
   b5d00:	9301      	str	r3, [sp, #4]
   b5d02:	bd08      	pop	{r3, pc}
   b5d04:	0003023c 	.word	0x0003023c

000b5d08 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5d08:	b508      	push	{r3, lr}
   b5d0a:	4b02      	ldr	r3, [pc, #8]	; (b5d14 <hal_usart_available_data_for_write+0xc>)
   b5d0c:	681b      	ldr	r3, [r3, #0]
   b5d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d10:	9301      	str	r3, [sp, #4]
   b5d12:	bd08      	pop	{r3, pc}
   b5d14:	0003023c 	.word	0x0003023c

000b5d18 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5d18:	b508      	push	{r3, lr}
   b5d1a:	4b02      	ldr	r3, [pc, #8]	; (b5d24 <hal_usart_init_ex+0xc>)
   b5d1c:	681b      	ldr	r3, [r3, #0]
   b5d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d20:	9301      	str	r3, [sp, #4]
   b5d22:	bd08      	pop	{r3, pc}
   b5d24:	0003023c 	.word	0x0003023c

000b5d28 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5d28:	b508      	push	{r3, lr}
   b5d2a:	4b02      	ldr	r3, [pc, #8]	; (b5d34 <inet_inet_ntop+0xc>)
   b5d2c:	681b      	ldr	r3, [r3, #0]
   b5d2e:	695b      	ldr	r3, [r3, #20]
   b5d30:	9301      	str	r3, [sp, #4]
   b5d32:	bd08      	pop	{r3, pc}
   b5d34:	00030264 	.word	0x00030264

000b5d38 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5d38:	b508      	push	{r3, lr}
   b5d3a:	4b02      	ldr	r3, [pc, #8]	; (b5d44 <os_thread_yield+0xc>)
   b5d3c:	681b      	ldr	r3, [r3, #0]
   b5d3e:	68db      	ldr	r3, [r3, #12]
   b5d40:	9301      	str	r3, [sp, #4]
   b5d42:	bd08      	pop	{r3, pc}
   b5d44:	00030248 	.word	0x00030248

000b5d48 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5d48:	b508      	push	{r3, lr}
   b5d4a:	4b02      	ldr	r3, [pc, #8]	; (b5d54 <os_mutex_recursive_create+0xc>)
   b5d4c:	681b      	ldr	r3, [r3, #0]
   b5d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d50:	9301      	str	r3, [sp, #4]
   b5d52:	bd08      	pop	{r3, pc}
   b5d54:	00030248 	.word	0x00030248

000b5d58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d58:	b508      	push	{r3, lr}
   b5d5a:	4b02      	ldr	r3, [pc, #8]	; (b5d64 <HAL_RNG_GetRandomNumber+0xc>)
   b5d5c:	681b      	ldr	r3, [r3, #0]
   b5d5e:	685b      	ldr	r3, [r3, #4]
   b5d60:	9301      	str	r3, [sp, #4]
   b5d62:	bd08      	pop	{r3, pc}
   b5d64:	00030218 	.word	0x00030218

000b5d68 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5d68:	b508      	push	{r3, lr}
   b5d6a:	4b02      	ldr	r3, [pc, #8]	; (b5d74 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5d6c:	681b      	ldr	r3, [r3, #0]
   b5d6e:	691b      	ldr	r3, [r3, #16]
   b5d70:	9301      	str	r3, [sp, #4]
   b5d72:	bd08      	pop	{r3, pc}
   b5d74:	00030218 	.word	0x00030218

000b5d78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d78:	b508      	push	{r3, lr}
   b5d7a:	4b02      	ldr	r3, [pc, #8]	; (b5d84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d7c:	681b      	ldr	r3, [r3, #0]
   b5d7e:	695b      	ldr	r3, [r3, #20]
   b5d80:	9301      	str	r3, [sp, #4]
   b5d82:	bd08      	pop	{r3, pc}
   b5d84:	00030218 	.word	0x00030218

000b5d88 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5d88:	b508      	push	{r3, lr}
   b5d8a:	4b02      	ldr	r3, [pc, #8]	; (b5d94 <HAL_Pin_Mode+0xc>)
   b5d8c:	681b      	ldr	r3, [r3, #0]
   b5d8e:	689b      	ldr	r3, [r3, #8]
   b5d90:	9301      	str	r3, [sp, #4]
   b5d92:	bd08      	pop	{r3, pc}
   b5d94:	0003022c 	.word	0x0003022c

000b5d98 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5d98:	b508      	push	{r3, lr}
   b5d9a:	4b02      	ldr	r3, [pc, #8]	; (b5da4 <HAL_Get_Pin_Mode+0xc>)
   b5d9c:	681b      	ldr	r3, [r3, #0]
   b5d9e:	68db      	ldr	r3, [r3, #12]
   b5da0:	9301      	str	r3, [sp, #4]
   b5da2:	bd08      	pop	{r3, pc}
   b5da4:	0003022c 	.word	0x0003022c

000b5da8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5da8:	b508      	push	{r3, lr}
   b5daa:	4b02      	ldr	r3, [pc, #8]	; (b5db4 <HAL_GPIO_Write+0xc>)
   b5dac:	681b      	ldr	r3, [r3, #0]
   b5dae:	691b      	ldr	r3, [r3, #16]
   b5db0:	9301      	str	r3, [sp, #4]
   b5db2:	bd08      	pop	{r3, pc}
   b5db4:	0003022c 	.word	0x0003022c

000b5db8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5db8:	b508      	push	{r3, lr}
   b5dba:	4b02      	ldr	r3, [pc, #8]	; (b5dc4 <netdb_freeaddrinfo+0xc>)
   b5dbc:	681b      	ldr	r3, [r3, #0]
   b5dbe:	689b      	ldr	r3, [r3, #8]
   b5dc0:	9301      	str	r3, [sp, #4]
   b5dc2:	bd08      	pop	{r3, pc}
   b5dc4:	00030268 	.word	0x00030268

000b5dc8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5dc8:	b508      	push	{r3, lr}
   b5dca:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <netdb_getaddrinfo+0xc>)
   b5dcc:	681b      	ldr	r3, [r3, #0]
   b5dce:	68db      	ldr	r3, [r3, #12]
   b5dd0:	9301      	str	r3, [sp, #4]
   b5dd2:	bd08      	pop	{r3, pc}
   b5dd4:	00030268 	.word	0x00030268

000b5dd8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5dd8:	b508      	push	{r3, lr}
   b5dda:	4b02      	ldr	r3, [pc, #8]	; (b5de4 <spark_process+0xc>)
   b5ddc:	681b      	ldr	r3, [r3, #0]
   b5dde:	689b      	ldr	r3, [r3, #8]
   b5de0:	9301      	str	r3, [sp, #4]
   b5de2:	bd08      	pop	{r3, pc}
   b5de4:	00030244 	.word	0x00030244

000b5de8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5de8:	b508      	push	{r3, lr}
   b5dea:	4b02      	ldr	r3, [pc, #8]	; (b5df4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5dec:	681b      	ldr	r3, [r3, #0]
   b5dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5df0:	9301      	str	r3, [sp, #4]
   b5df2:	bd08      	pop	{r3, pc}
   b5df4:	00030244 	.word	0x00030244

000b5df8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5df8:	b508      	push	{r3, lr}
   b5dfa:	4b02      	ldr	r3, [pc, #8]	; (b5e04 <network_connect+0xc>)
   b5dfc:	681b      	ldr	r3, [r3, #0]
   b5dfe:	685b      	ldr	r3, [r3, #4]
   b5e00:	9301      	str	r3, [sp, #4]
   b5e02:	bd08      	pop	{r3, pc}
   b5e04:	00030240 	.word	0x00030240

000b5e08 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5e08:	b508      	push	{r3, lr}
   b5e0a:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <network_connecting+0xc>)
   b5e0c:	681b      	ldr	r3, [r3, #0]
   b5e0e:	689b      	ldr	r3, [r3, #8]
   b5e10:	9301      	str	r3, [sp, #4]
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	00030240 	.word	0x00030240

000b5e18 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <network_disconnect+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	68db      	ldr	r3, [r3, #12]
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	00030240 	.word	0x00030240

000b5e28 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <network_ready+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	691b      	ldr	r3, [r3, #16]
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	00030240 	.word	0x00030240

000b5e38 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <network_on+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	695b      	ldr	r3, [r3, #20]
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	00030240 	.word	0x00030240

000b5e48 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <network_off+0xc>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	699b      	ldr	r3, [r3, #24]
   b5e50:	9301      	str	r3, [sp, #4]
   b5e52:	bd08      	pop	{r3, pc}
   b5e54:	00030240 	.word	0x00030240

000b5e58 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <network_listen+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	69db      	ldr	r3, [r3, #28]
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	00030240 	.word	0x00030240

000b5e68 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <network_listening+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	6a1b      	ldr	r3, [r3, #32]
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	00030240 	.word	0x00030240

000b5e78 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <network_set_listen_timeout+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030240 	.word	0x00030240

000b5e88 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <network_get_listen_timeout+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	00030240 	.word	0x00030240

000b5e98 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <network_is_on+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	00030240 	.word	0x00030240

000b5ea8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <network_is_off+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030240 	.word	0x00030240

000b5eb8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <set_system_mode+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	685b      	ldr	r3, [r3, #4]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030220 	.word	0x00030220

000b5ec8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <system_delay_ms+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	695b      	ldr	r3, [r3, #20]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030220 	.word	0x00030220

000b5ed8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b03      	ldr	r3, [pc, #12]	; (b5ee8 <system_ctrl_set_app_request_handler+0x10>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5ee2:	9301      	str	r3, [sp, #4]
   b5ee4:	bd08      	pop	{r3, pc}
   b5ee6:	0000      	.short	0x0000
   b5ee8:	00030220 	.word	0x00030220

000b5eec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b03      	ldr	r3, [pc, #12]	; (b5efc <system_ctrl_set_result+0x10>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5ef6:	9301      	str	r3, [sp, #4]
   b5ef8:	bd08      	pop	{r3, pc}
   b5efa:	0000      	.short	0x0000
   b5efc:	00030220 	.word	0x00030220

000b5f00 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <malloc+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	681b      	ldr	r3, [r3, #0]
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	0003021c 	.word	0x0003021c

000b5f10 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <free+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	685b      	ldr	r3, [r3, #4]
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	0003021c 	.word	0x0003021c

000b5f20 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <vsnprintf+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	0003021c 	.word	0x0003021c

000b5f30 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <__assert_func+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	0003021c 	.word	0x0003021c

000b5f40 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <newlib_impure_ptr_callback+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	0003021c 	.word	0x0003021c

000b5f50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5f50:	2300      	movs	r3, #0
   b5f52:	6840      	ldr	r0, [r0, #4]
   b5f54:	461a      	mov	r2, r3
   b5f56:	f7ff bf4f 	b.w	b5df8 <network_connect>

000b5f5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5f5a:	6840      	ldr	r0, [r0, #4]
   b5f5c:	2200      	movs	r2, #0
   b5f5e:	2102      	movs	r1, #2
   b5f60:	f7ff bf5a 	b.w	b5e18 <network_disconnect>

000b5f64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5f64:	2200      	movs	r2, #0
   b5f66:	6840      	ldr	r0, [r0, #4]
   b5f68:	4611      	mov	r1, r2
   b5f6a:	f7ff bf4d 	b.w	b5e08 <network_connecting>

000b5f6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5f6e:	2200      	movs	r2, #0
   b5f70:	6840      	ldr	r0, [r0, #4]
   b5f72:	4611      	mov	r1, r2
   b5f74:	f7ff bf58 	b.w	b5e28 <network_ready>

000b5f78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5f78:	2300      	movs	r3, #0
   b5f7a:	6840      	ldr	r0, [r0, #4]
   b5f7c:	461a      	mov	r2, r3
   b5f7e:	4619      	mov	r1, r3
   b5f80:	f7ff bf5a 	b.w	b5e38 <network_on>

000b5f84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5f84:	2300      	movs	r3, #0
   b5f86:	6840      	ldr	r0, [r0, #4]
   b5f88:	461a      	mov	r2, r3
   b5f8a:	4619      	mov	r1, r3
   b5f8c:	f7ff bf5c 	b.w	b5e48 <network_off>

000b5f90 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5f90:	6840      	ldr	r0, [r0, #4]
   b5f92:	2100      	movs	r1, #0
   b5f94:	f7ff bf80 	b.w	b5e98 <network_is_on>

000b5f98 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5f98:	6840      	ldr	r0, [r0, #4]
   b5f9a:	2100      	movs	r1, #0
   b5f9c:	f7ff bf84 	b.w	b5ea8 <network_is_off>

000b5fa0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5fa0:	6840      	ldr	r0, [r0, #4]
   b5fa2:	2200      	movs	r2, #0
   b5fa4:	f081 0101 	eor.w	r1, r1, #1
   b5fa8:	f7ff bf56 	b.w	b5e58 <network_listen>

000b5fac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5fac:	6840      	ldr	r0, [r0, #4]
   b5fae:	2200      	movs	r2, #0
   b5fb0:	f7ff bf62 	b.w	b5e78 <network_set_listen_timeout>

000b5fb4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5fb4:	2200      	movs	r2, #0
   b5fb6:	6840      	ldr	r0, [r0, #4]
   b5fb8:	4611      	mov	r1, r2
   b5fba:	f7ff bf65 	b.w	b5e88 <network_get_listen_timeout>

000b5fbe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5fbe:	2200      	movs	r2, #0
   b5fc0:	6840      	ldr	r0, [r0, #4]
   b5fc2:	4611      	mov	r1, r2
   b5fc4:	f7ff bf50 	b.w	b5e68 <network_listening>

000b5fc8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5fcc:	b095      	sub	sp, #84	; 0x54
   b5fce:	4614      	mov	r4, r2
   b5fd0:	460d      	mov	r5, r1
   b5fd2:	4607      	mov	r7, r0
    IPAddress addr;
   b5fd4:	f000 fae2 	bl	b659c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5fd8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5fda:	221c      	movs	r2, #28
   b5fdc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5fde:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5fe0:	f001 f9da 	bl	b7398 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5fe4:	2340      	movs	r3, #64	; 0x40
   b5fe6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5fe8:	4620      	mov	r0, r4
   b5fea:	466b      	mov	r3, sp
   b5fec:	aa0c      	add	r2, sp, #48	; 0x30
   b5fee:	2100      	movs	r1, #0
   b5ff0:	f7ff feea 	bl	b5dc8 <netdb_getaddrinfo>
    if (!r) {
   b5ff4:	4604      	mov	r4, r0
   b5ff6:	2800      	cmp	r0, #0
   b5ff8:	d14b      	bne.n	b6092 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5ffa:	4602      	mov	r2, r0
   b5ffc:	2101      	movs	r1, #1
   b5ffe:	6868      	ldr	r0, [r5, #4]
   b6000:	f7ff ff12 	bl	b5e28 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6004:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6006:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6008:	4622      	mov	r2, r4
   b600a:	6868      	ldr	r0, [r5, #4]
   b600c:	f7ff ff0c 	bl	b5e28 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6010:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6012:	4681      	mov	r9, r0
        bool ok = false;
   b6014:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6016:	2e00      	cmp	r6, #0
   b6018:	d03b      	beq.n	b6092 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b601a:	2900      	cmp	r1, #0
   b601c:	d139      	bne.n	b6092 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b601e:	6873      	ldr	r3, [r6, #4]
   b6020:	2b02      	cmp	r3, #2
   b6022:	d003      	beq.n	b602c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6024:	2b0a      	cmp	r3, #10
   b6026:	d011      	beq.n	b604c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6028:	69f6      	ldr	r6, [r6, #28]
   b602a:	e7f4      	b.n	b6016 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b602c:	f1b8 0f00 	cmp.w	r8, #0
   b6030:	d0fa      	beq.n	b6028 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6032:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b6034:	a806      	add	r0, sp, #24
   b6036:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6038:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b603a:	f000 fadd 	bl	b65f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b603e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6040:	1d3c      	adds	r4, r7, #4
   b6042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6044:	682b      	ldr	r3, [r5, #0]
   b6046:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6048:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b604a:	e7ed      	b.n	b6028 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b604c:	f1b9 0f00 	cmp.w	r9, #0
   b6050:	d0ea      	beq.n	b6028 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6052:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6054:	2210      	movs	r2, #16
   b6056:	a801      	add	r0, sp, #4
   b6058:	f001 f99e 	bl	b7398 <memset>
                    a.v = 6;
   b605c:	2306      	movs	r3, #6
   b605e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6062:	ad01      	add	r5, sp, #4
   b6064:	f104 0308 	add.w	r3, r4, #8
   b6068:	3418      	adds	r4, #24
   b606a:	6818      	ldr	r0, [r3, #0]
   b606c:	6859      	ldr	r1, [r3, #4]
   b606e:	462a      	mov	r2, r5
   b6070:	c203      	stmia	r2!, {r0, r1}
   b6072:	3308      	adds	r3, #8
   b6074:	42a3      	cmp	r3, r4
   b6076:	4615      	mov	r5, r2
   b6078:	d1f7      	bne.n	b606a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b607a:	a901      	add	r1, sp, #4
   b607c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b607e:	ad07      	add	r5, sp, #28
   b6080:	f000 fa9a 	bl	b65b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6086:	1d3c      	adds	r4, r7, #4
   b6088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b608a:	682b      	ldr	r3, [r5, #0]
   b608c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b608e:	4649      	mov	r1, r9
   b6090:	e7ca      	b.n	b6028 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6092:	9800      	ldr	r0, [sp, #0]
   b6094:	f7ff fe90 	bl	b5db8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6098:	4638      	mov	r0, r7
   b609a:	b015      	add	sp, #84	; 0x54
   b609c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b60a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b60a0:	4b02      	ldr	r3, [pc, #8]	; (b60ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b60a2:	4a03      	ldr	r2, [pc, #12]	; (b60b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b60a4:	601a      	str	r2, [r3, #0]
   b60a6:	2200      	movs	r2, #0
   b60a8:	605a      	str	r2, [r3, #4]

} // spark
   b60aa:	4770      	bx	lr
   b60ac:	2003e69c 	.word	0x2003e69c
   b60b0:	000b7730 	.word	0x000b7730

000b60b4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b60b4:	2100      	movs	r1, #0
   b60b6:	f7ff bdef 	b.w	b5c98 <hal_spi_release>

000b60ba <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b60ba:	2100      	movs	r1, #0
   b60bc:	f7ff bde4 	b.w	b5c88 <hal_spi_acquire>

000b60c0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b60c0:	b510      	push	{r4, lr}
   b60c2:	4604      	mov	r4, r0
   b60c4:	4608      	mov	r0, r1
{
    _spi = spi;
   b60c6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b60c8:	f7ff fdae 	bl	b5c28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b60cc:	2300      	movs	r3, #0
   b60ce:	6063      	str	r3, [r4, #4]
}
   b60d0:	4620      	mov	r0, r4
   b60d2:	bd10      	pop	{r4, pc}

000b60d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b60d4:	b513      	push	{r0, r1, r4, lr}
   b60d6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b60d8:	7800      	ldrb	r0, [r0, #0]
   b60da:	f7ff ffee 	bl	b60ba <_ZN8SPIClass4lockEv.isra.0>
   b60de:	b958      	cbnz	r0, b60f8 <_ZN8SPIClass5beginEv+0x24>
   b60e0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b60e2:	9001      	str	r0, [sp, #4]
   b60e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b60e8:	f7ff fd8e 	bl	b5c08 <hal_spi_begin>
        unlock();
   b60ec:	9801      	ldr	r0, [sp, #4]
    }
}
   b60ee:	b002      	add	sp, #8
   b60f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b60f4:	f7ff bfde 	b.w	b60b4 <_ZN8SPIClass6unlockEv.isra.0>
   b60f8:	b002      	add	sp, #8
   b60fa:	bd10      	pop	{r4, pc}

000b60fc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b60fc:	7800      	ldrb	r0, [r0, #0]
   b60fe:	f7ff bfd9 	b.w	b60b4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6104 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6104:	0840      	lsrs	r0, r0, #1
{
   b6106:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6108:	6018      	str	r0, [r3, #0]
   b610a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b610c:	6818      	ldr	r0, [r3, #0]
   b610e:	4288      	cmp	r0, r1
   b6110:	b2e5      	uxtb	r5, r4
   b6112:	d906      	bls.n	b6122 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6114:	3401      	adds	r4, #1
   b6116:	2c08      	cmp	r4, #8
   b6118:	d002      	beq.n	b6120 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b611a:	0840      	lsrs	r0, r0, #1
   b611c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b611e:	e7f5      	b.n	b610c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6120:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6124:	5d5b      	ldrb	r3, [r3, r5]
   b6126:	7013      	strb	r3, [r2, #0]
}
   b6128:	bd30      	pop	{r4, r5, pc}
   b612a:	bf00      	nop
   b612c:	000b7764 	.word	0x000b7764

000b6130 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6134:	4606      	mov	r6, r0
   b6136:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6138:	7800      	ldrb	r0, [r0, #0]
{
   b613a:	460c      	mov	r4, r1
    CHECK(lock());
   b613c:	f7ff ffbd 	bl	b60ba <_ZN8SPIClass4lockEv.isra.0>
   b6140:	2800      	cmp	r0, #0
   b6142:	db1b      	blt.n	b617c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6144:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6146:	2214      	movs	r2, #20
   b6148:	2100      	movs	r1, #0
   b614a:	a809      	add	r0, sp, #36	; 0x24
   b614c:	f001 f924 	bl	b7398 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6150:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6152:	2200      	movs	r2, #0
   b6154:	a909      	add	r1, sp, #36	; 0x24
   b6156:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6158:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b615c:	f7ff fd74 	bl	b5c48 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6160:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6164:	b113      	cbz	r3, b616c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6166:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b616a:	b155      	cbz	r5, b6182 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b616c:	2700      	movs	r7, #0
   b616e:	46b9      	mov	r9, r7
   b6170:	46b8      	mov	r8, r7
   b6172:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6174:	7923      	ldrb	r3, [r4, #4]
   b6176:	b15d      	cbz	r5, b6190 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6178:	b1c3      	cbz	r3, b61ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b617a:	2000      	movs	r0, #0
}
   b617c:	b00f      	add	sp, #60	; 0x3c
   b617e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6182:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6186:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b618a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b618e:	e7f1      	b.n	b6174 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6190:	2b00      	cmp	r3, #0
   b6192:	d135      	bne.n	b6200 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6194:	68a3      	ldr	r3, [r4, #8]
   b6196:	4543      	cmp	r3, r8
   b6198:	d108      	bne.n	b61ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b619a:	f88d 9020 	strb.w	r9, [sp, #32]
   b619e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b61a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b61a6:	89a3      	ldrh	r3, [r4, #12]
   b61a8:	429a      	cmp	r2, r3
   b61aa:	d0e6      	beq.n	b617a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b61ac:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b61ae:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b61b0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b61b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b61b6:	ab04      	add	r3, sp, #16
   b61b8:	f10d 020f 	add.w	r2, sp, #15
   b61bc:	f7ff ffa2 	bl	b6104 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b61c0:	7921      	ldrb	r1, [r4, #4]
   b61c2:	b985      	cbnz	r5, b61e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b61c4:	b989      	cbnz	r1, b61ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b61c6:	68a3      	ldr	r3, [r4, #8]
   b61c8:	4543      	cmp	r3, r8
   b61ca:	d30e      	bcc.n	b61ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b61cc:	f88d 9020 	strb.w	r9, [sp, #32]
   b61d0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b61d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b61d8:	89a3      	ldrh	r3, [r4, #12]
   b61da:	429a      	cmp	r2, r3
   b61dc:	d105      	bne.n	b61ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b61de:	9b04      	ldr	r3, [sp, #16]
   b61e0:	4543      	cmp	r3, r8
   b61e2:	d102      	bne.n	b61ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b61e4:	e7c9      	b.n	b617a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b61e6:	2900      	cmp	r1, #0
   b61e8:	d1f9      	bne.n	b61de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b61ea:	2300      	movs	r3, #0
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	7b63      	ldrb	r3, [r4, #13]
   b61f0:	9300      	str	r3, [sp, #0]
   b61f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b61f6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b61f8:	7830      	ldrb	r0, [r6, #0]
   b61fa:	f7ff fd3d 	bl	b5c78 <hal_spi_set_settings>
   b61fe:	e7bc      	b.n	b617a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6200:	e9cd 5500 	strd	r5, r5, [sp]
   b6204:	462b      	mov	r3, r5
   b6206:	462a      	mov	r2, r5
   b6208:	2101      	movs	r1, #1
   b620a:	e7f5      	b.n	b61f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b620c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b620c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b620e:	7800      	ldrb	r0, [r0, #0]
   b6210:	f7ff fd02 	bl	b5c18 <hal_spi_transfer>
}
   b6214:	b2c0      	uxtb	r0, r0
   b6216:	bd08      	pop	{r3, pc}

000b6218 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b6218:	b530      	push	{r4, r5, lr}
   b621a:	b087      	sub	sp, #28
   b621c:	4604      	mov	r4, r0
   b621e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b6220:	9500      	str	r5, [sp, #0]
   b6222:	7800      	ldrb	r0, [r0, #0]
   b6224:	f7ff fd18 	bl	b5c58 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b6228:	b93d      	cbnz	r5, b623a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b622a:	7820      	ldrb	r0, [r4, #0]
   b622c:	a902      	add	r1, sp, #8
   b622e:	f7ff fd1b 	bl	b5c68 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b6232:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b6236:	07db      	lsls	r3, r3, #31
   b6238:	d4f7      	bmi.n	b622a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b623a:	b007      	add	sp, #28
   b623c:	bd30      	pop	{r4, r5, pc}

000b623e <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b623e:	b510      	push	{r4, lr}
  if (0 == max) {
   b6240:	4604      	mov	r4, r0
   b6242:	b128      	cbz	r0, b6250 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b6244:	f001 f8de 	bl	b7404 <rand>
   b6248:	fb90 f3f4 	sdiv	r3, r0, r4
   b624c:	fb03 0414 	mls	r4, r3, r4, r0
}
   b6250:	4620      	mov	r0, r4
   b6252:	bd10      	pop	{r4, pc}

000b6254 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   b6254:	4288      	cmp	r0, r1
{
   b6256:	b510      	push	{r4, lr}
   b6258:	4604      	mov	r4, r0
  if (min >= max) {
   b625a:	da03      	bge.n	b6264 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   b625c:	1a08      	subs	r0, r1, r0
   b625e:	f7ff ffee 	bl	b623e <_Z6randomi>
   b6262:	4404      	add	r4, r0
}
   b6264:	4620      	mov	r0, r4
   b6266:	bd10      	pop	{r4, pc}

000b6268 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6268:	4770      	bx	lr

000b626a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b626a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b626c:	4606      	mov	r6, r0
   b626e:	4615      	mov	r5, r2
   b6270:	460c      	mov	r4, r1
   b6272:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6274:	42bc      	cmp	r4, r7
   b6276:	d006      	beq.n	b6286 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6278:	6833      	ldr	r3, [r6, #0]
   b627a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b627e:	689b      	ldr	r3, [r3, #8]
   b6280:	4630      	mov	r0, r6
   b6282:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6284:	e7f6      	b.n	b6274 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6286:	4628      	mov	r0, r5
   b6288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b628a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b628a:	7c00      	ldrb	r0, [r0, #16]
   b628c:	2200      	movs	r2, #0
   b628e:	f7ff bc83 	b.w	b5b98 <hal_i2c_write>

000b6292 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6292:	7c00      	ldrb	r0, [r0, #16]
   b6294:	2100      	movs	r1, #0
   b6296:	f7ff bc87 	b.w	b5ba8 <hal_i2c_available>

000b629a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b629a:	7c00      	ldrb	r0, [r0, #16]
   b629c:	2100      	movs	r1, #0
   b629e:	f7ff bc8b 	b.w	b5bb8 <hal_i2c_read>

000b62a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b62a2:	7c00      	ldrb	r0, [r0, #16]
   b62a4:	2100      	movs	r1, #0
   b62a6:	f7ff bc8f 	b.w	b5bc8 <hal_i2c_peek>

000b62aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b62aa:	7c00      	ldrb	r0, [r0, #16]
   b62ac:	2100      	movs	r1, #0
   b62ae:	f7ff bc93 	b.w	b5bd8 <hal_i2c_flush>

000b62b2 <_ZN7TwoWireD0Ev>:
   b62b2:	b510      	push	{r4, lr}
   b62b4:	2114      	movs	r1, #20
   b62b6:	4604      	mov	r4, r0
   b62b8:	f7fd feed 	bl	b4096 <_ZdlPvj>
   b62bc:	4620      	mov	r0, r4
   b62be:	bd10      	pop	{r4, pc}

000b62c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b62c0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b62c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b62c6:	4604      	mov	r4, r0
   b62c8:	4608      	mov	r0, r1
   b62ca:	2100      	movs	r1, #0
   b62cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b62d0:	4b03      	ldr	r3, [pc, #12]	; (b62e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b62d2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b62d4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b62d6:	4611      	mov	r1, r2
   b62d8:	f7ff fc8e 	bl	b5bf8 <hal_i2c_init>
}
   b62dc:	4620      	mov	r0, r4
   b62de:	bd10      	pop	{r4, pc}
   b62e0:	000b7774 	.word	0x000b7774

000b62e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b62e4:	4770      	bx	lr

000b62e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b62e6:	7441      	strb	r1, [r0, #17]
}
   b62e8:	4770      	bx	lr

000b62ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b62ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b62ec:	7c00      	ldrb	r0, [r0, #16]
   b62ee:	f7ff fd0b 	bl	b5d08 <hal_usart_available_data_for_write>
}
   b62f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b62f6:	bd08      	pop	{r3, pc}

000b62f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b62f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b62fa:	7c00      	ldrb	r0, [r0, #16]
   b62fc:	f7ff fcdc 	bl	b5cb8 <hal_usart_available>
}
   b6300:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6304:	bd08      	pop	{r3, pc}

000b6306 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6306:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6308:	7c00      	ldrb	r0, [r0, #16]
   b630a:	f7ff fce5 	bl	b5cd8 <hal_usart_peek>
}
   b630e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6312:	bd08      	pop	{r3, pc}

000b6314 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6314:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6316:	7c00      	ldrb	r0, [r0, #16]
   b6318:	f7ff fcd6 	bl	b5cc8 <hal_usart_read>
}
   b631c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6320:	bd08      	pop	{r3, pc}

000b6322 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6322:	7c00      	ldrb	r0, [r0, #16]
   b6324:	f7ff bce0 	b.w	b5ce8 <hal_usart_flush>

000b6328 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6328:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b632a:	7c45      	ldrb	r5, [r0, #17]
{
   b632c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b632e:	b12d      	cbz	r5, b633c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6330:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6332:	b003      	add	sp, #12
   b6334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6338:	f7ff bcb6 	b.w	b5ca8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b633c:	7c00      	ldrb	r0, [r0, #16]
   b633e:	9101      	str	r1, [sp, #4]
   b6340:	f7ff fce2 	bl	b5d08 <hal_usart_available_data_for_write>
   b6344:	2800      	cmp	r0, #0
   b6346:	9901      	ldr	r1, [sp, #4]
   b6348:	dcf2      	bgt.n	b6330 <_ZN11USARTSerial5writeEh+0x8>
}
   b634a:	4628      	mov	r0, r5
   b634c:	b003      	add	sp, #12
   b634e:	bd30      	pop	{r4, r5, pc}

000b6350 <_ZN11USARTSerialD0Ev>:
   b6350:	b510      	push	{r4, lr}
   b6352:	2114      	movs	r1, #20
   b6354:	4604      	mov	r4, r0
   b6356:	f7fd fe9e 	bl	b4096 <_ZdlPvj>
   b635a:	4620      	mov	r0, r4
   b635c:	bd10      	pop	{r4, pc}
	...

000b6360 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6360:	b510      	push	{r4, lr}
   b6362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6366:	4604      	mov	r4, r0
   b6368:	4608      	mov	r0, r1
   b636a:	4611      	mov	r1, r2
   b636c:	2200      	movs	r2, #0
   b636e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6372:	4b04      	ldr	r3, [pc, #16]	; (b6384 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6374:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6376:	2301      	movs	r3, #1
  _serial = serial;
   b6378:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b637a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b637c:	f7ff fccc 	bl	b5d18 <hal_usart_init_ex>
}
   b6380:	4620      	mov	r0, r4
   b6382:	bd10      	pop	{r4, pc}
   b6384:	000b779c 	.word	0x000b779c

000b6388 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6388:	2200      	movs	r2, #0
   b638a:	6840      	ldr	r0, [r0, #4]
   b638c:	4611      	mov	r1, r2
   b638e:	f7ff bd4b 	b.w	b5e28 <network_ready>

000b6392 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6392:	2200      	movs	r2, #0
   b6394:	6840      	ldr	r0, [r0, #4]
   b6396:	4611      	mov	r1, r2
   b6398:	f7ff bd66 	b.w	b5e68 <network_listening>

000b639c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b639c:	2200      	movs	r2, #0
   b639e:	6840      	ldr	r0, [r0, #4]
   b63a0:	4611      	mov	r1, r2
   b63a2:	f7ff bd71 	b.w	b5e88 <network_get_listen_timeout>

000b63a6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b63a6:	6840      	ldr	r0, [r0, #4]
   b63a8:	2200      	movs	r2, #0
   b63aa:	f7ff bd65 	b.w	b5e78 <network_set_listen_timeout>

000b63ae <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b63ae:	6840      	ldr	r0, [r0, #4]
   b63b0:	2200      	movs	r2, #0
   b63b2:	f081 0101 	eor.w	r1, r1, #1
   b63b6:	f7ff bd4f 	b.w	b5e58 <network_listen>

000b63ba <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b63ba:	2300      	movs	r3, #0
   b63bc:	6840      	ldr	r0, [r0, #4]
   b63be:	461a      	mov	r2, r3
   b63c0:	4619      	mov	r1, r3
   b63c2:	f7ff bd41 	b.w	b5e48 <network_off>

000b63c6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b63c6:	2300      	movs	r3, #0
   b63c8:	6840      	ldr	r0, [r0, #4]
   b63ca:	461a      	mov	r2, r3
   b63cc:	4619      	mov	r1, r3
   b63ce:	f7ff bd33 	b.w	b5e38 <network_on>

000b63d2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63d2:	2200      	movs	r2, #0
   b63d4:	6840      	ldr	r0, [r0, #4]
   b63d6:	4611      	mov	r1, r2
   b63d8:	f7ff bd16 	b.w	b5e08 <network_connecting>

000b63dc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b63dc:	6840      	ldr	r0, [r0, #4]
   b63de:	2200      	movs	r2, #0
   b63e0:	2102      	movs	r1, #2
   b63e2:	f7ff bd19 	b.w	b5e18 <network_disconnect>

000b63e6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b63e6:	2300      	movs	r3, #0
   b63e8:	6840      	ldr	r0, [r0, #4]
   b63ea:	461a      	mov	r2, r3
   b63ec:	f7ff bd04 	b.w	b5df8 <network_connect>

000b63f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b63f0:	4b08      	ldr	r3, [pc, #32]	; (b6414 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b63f2:	b510      	push	{r4, lr}
   b63f4:	2428      	movs	r4, #40	; 0x28
   b63f6:	4622      	mov	r2, r4
   b63f8:	4618      	mov	r0, r3
   b63fa:	2100      	movs	r1, #0
   b63fc:	f000 ffcc 	bl	b7398 <memset>
   b6400:	4b05      	ldr	r3, [pc, #20]	; (b6418 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6402:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6408:	6042      	str	r2, [r0, #4]
   b640a:	2204      	movs	r2, #4
   b640c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b640e:	4a03      	ldr	r2, [pc, #12]	; (b641c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6410:	601a      	str	r2, [r3, #0]
   b6412:	bd10      	pop	{r4, pc}
   b6414:	2003e6ac 	.word	0x2003e6ac
   b6418:	2003e6a4 	.word	0x2003e6a4
   b641c:	000b77cc 	.word	0x000b77cc

000b6420 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6420:	7441      	strb	r1, [r0, #17]
}
   b6422:	4770      	bx	lr

000b6424 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6424:	4770      	bx	lr

000b6426 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6426:	4770      	bx	lr

000b6428 <_ZN9USBSerial4readEv>:
{
   b6428:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b642a:	2100      	movs	r1, #0
   b642c:	7c00      	ldrb	r0, [r0, #16]
   b642e:	f7ff fb9b 	bl	b5b68 <HAL_USB_USART_Receive_Data>
}
   b6432:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6436:	bd08      	pop	{r3, pc}

000b6438 <_ZN9USBSerial4peekEv>:
{
   b6438:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b643a:	2101      	movs	r1, #1
   b643c:	7c00      	ldrb	r0, [r0, #16]
   b643e:	f7ff fb93 	bl	b5b68 <HAL_USB_USART_Receive_Data>
}
   b6442:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6446:	bd08      	pop	{r3, pc}

000b6448 <_ZN9USBSerial17availableForWriteEv>:
{
   b6448:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b644a:	7c00      	ldrb	r0, [r0, #16]
   b644c:	f7ff fb84 	bl	b5b58 <HAL_USB_USART_Available_Data_For_Write>
}
   b6450:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6454:	bd08      	pop	{r3, pc}

000b6456 <_ZN9USBSerial9availableEv>:
{
   b6456:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6458:	7c00      	ldrb	r0, [r0, #16]
   b645a:	f7ff fb75 	bl	b5b48 <HAL_USB_USART_Available_Data>
}
   b645e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6462:	bd08      	pop	{r3, pc}

000b6464 <_ZN9USBSerial5writeEh>:
{
   b6464:	b513      	push	{r0, r1, r4, lr}
   b6466:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6468:	7c00      	ldrb	r0, [r0, #16]
{
   b646a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b646c:	f7ff fb74 	bl	b5b58 <HAL_USB_USART_Available_Data_For_Write>
   b6470:	2800      	cmp	r0, #0
   b6472:	9901      	ldr	r1, [sp, #4]
   b6474:	dc01      	bgt.n	b647a <_ZN9USBSerial5writeEh+0x16>
   b6476:	7c60      	ldrb	r0, [r4, #17]
   b6478:	b120      	cbz	r0, b6484 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b647a:	7c20      	ldrb	r0, [r4, #16]
   b647c:	f7ff fb7c 	bl	b5b78 <HAL_USB_USART_Send_Data>
   b6480:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6484:	b002      	add	sp, #8
   b6486:	bd10      	pop	{r4, pc}

000b6488 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6488:	7c00      	ldrb	r0, [r0, #16]
   b648a:	f7ff bb7d 	b.w	b5b88 <HAL_USB_USART_Flush_Data>

000b648e <_ZN9USBSerialD0Ev>:
   b648e:	b510      	push	{r4, lr}
   b6490:	2114      	movs	r1, #20
   b6492:	4604      	mov	r4, r0
   b6494:	f7fd fdff 	bl	b4096 <_ZdlPvj>
   b6498:	4620      	mov	r0, r4
   b649a:	bd10      	pop	{r4, pc}

000b649c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b649c:	b510      	push	{r4, lr}
   b649e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b64a2:	4604      	mov	r4, r0
   b64a4:	4608      	mov	r0, r1
   b64a6:	2100      	movs	r1, #0
   b64a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b64ac:	4b04      	ldr	r3, [pc, #16]	; (b64c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b64ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b64b0:	2301      	movs	r3, #1
  _serial = serial;
   b64b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b64b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b64b6:	4611      	mov	r1, r2
   b64b8:	f7ff fb36 	bl	b5b28 <HAL_USB_USART_Init>
}
   b64bc:	4620      	mov	r0, r4
   b64be:	bd10      	pop	{r4, pc}
   b64c0:	000b7808 	.word	0x000b7808

000b64c4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b64c4:	7c00      	ldrb	r0, [r0, #16]
   b64c6:	2200      	movs	r2, #0
   b64c8:	f7ff bb36 	b.w	b5b38 <HAL_USB_USART_Begin>

000b64cc <_Z19acquireSerialBufferv>:
{
   b64cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b64ce:	2214      	movs	r2, #20
{
   b64d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b64d2:	2100      	movs	r1, #0
   b64d4:	f000 ff60 	bl	b7398 <memset>
}
   b64d8:	4620      	mov	r0, r4
   b64da:	bd10      	pop	{r4, pc}

000b64dc <_Z16_fetch_usbserialv>:
{
   b64dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64de:	4c0f      	ldr	r4, [pc, #60]	; (b651c <_Z16_fetch_usbserialv+0x40>)
{
   b64e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b64e2:	a803      	add	r0, sp, #12
   b64e4:	f7ff fff2 	bl	b64cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64e8:	7821      	ldrb	r1, [r4, #0]
   b64ea:	f3bf 8f5b 	dmb	ish
   b64ee:	f011 0101 	ands.w	r1, r1, #1
   b64f2:	d10f      	bne.n	b6514 <_Z16_fetch_usbserialv+0x38>
   b64f4:	4620      	mov	r0, r4
   b64f6:	9101      	str	r1, [sp, #4]
   b64f8:	f7fd fdcf 	bl	b409a <__cxa_guard_acquire>
   b64fc:	9901      	ldr	r1, [sp, #4]
   b64fe:	b148      	cbz	r0, b6514 <_Z16_fetch_usbserialv+0x38>
   b6500:	aa03      	add	r2, sp, #12
   b6502:	4807      	ldr	r0, [pc, #28]	; (b6520 <_Z16_fetch_usbserialv+0x44>)
   b6504:	f7ff ffca 	bl	b649c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6508:	4620      	mov	r0, r4
   b650a:	f7fd fdcb 	bl	b40a4 <__cxa_guard_release>
   b650e:	4805      	ldr	r0, [pc, #20]	; (b6524 <_Z16_fetch_usbserialv+0x48>)
   b6510:	f000 ff1e 	bl	b7350 <atexit>
	return _usbserial;
}
   b6514:	4802      	ldr	r0, [pc, #8]	; (b6520 <_Z16_fetch_usbserialv+0x44>)
   b6516:	b008      	add	sp, #32
   b6518:	bd10      	pop	{r4, pc}
   b651a:	bf00      	nop
   b651c:	2003e6d4 	.word	0x2003e6d4
   b6520:	2003e6d8 	.word	0x2003e6d8
   b6524:	000b6425 	.word	0x000b6425

000b6528 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b6528:	4770      	bx	lr

000b652a <_ZN9IPAddressD0Ev>:
   b652a:	b510      	push	{r4, lr}
   b652c:	2118      	movs	r1, #24
   b652e:	4604      	mov	r4, r0
   b6530:	f7fd fdb1 	bl	b4096 <_ZdlPvj>
   b6534:	4620      	mov	r0, r4
   b6536:	bd10      	pop	{r4, pc}

000b6538 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6538:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b653a:	7d03      	ldrb	r3, [r0, #20]
   b653c:	2b06      	cmp	r3, #6
{
   b653e:	b08d      	sub	sp, #52	; 0x34
   b6540:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6542:	f100 0704 	add.w	r7, r0, #4
   b6546:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b654a:	d012      	beq.n	b6572 <_ZNK9IPAddress7printToER5Print+0x3a>
   b654c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6550:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6554:	220a      	movs	r2, #10
   b6556:	4630      	mov	r0, r6
   b6558:	f000 f94f 	bl	b67fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b655c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b655e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6560:	d019      	beq.n	b6596 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6562:	2c00      	cmp	r4, #0
   b6564:	d0f4      	beq.n	b6550 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6566:	212e      	movs	r1, #46	; 0x2e
   b6568:	4630      	mov	r0, r6
   b656a:	f000 f927 	bl	b67bc <_ZN5Print5printEc>
   b656e:	4404      	add	r4, r0
   b6570:	e7ee      	b.n	b6550 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6572:	232f      	movs	r3, #47	; 0x2f
   b6574:	466a      	mov	r2, sp
   b6576:	4639      	mov	r1, r7
   b6578:	200a      	movs	r0, #10
		buf[0] = 0;
   b657a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b657e:	f7ff fbd3 	bl	b5d28 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6582:	4668      	mov	r0, sp
   b6584:	f000 ff7c 	bl	b7480 <strlen>
   b6588:	6833      	ldr	r3, [r6, #0]
   b658a:	4602      	mov	r2, r0
   b658c:	68db      	ldr	r3, [r3, #12]
   b658e:	4669      	mov	r1, sp
   b6590:	4630      	mov	r0, r6
   b6592:	4798      	blx	r3
   b6594:	4604      	mov	r4, r0
    }
    return n;
}
   b6596:	4620      	mov	r0, r4
   b6598:	b00d      	add	sp, #52	; 0x34
   b659a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b659c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b659c:	b510      	push	{r4, lr}
   b659e:	4b05      	ldr	r3, [pc, #20]	; (b65b4 <_ZN9IPAddressC1Ev+0x18>)
   b65a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b65a2:	2211      	movs	r2, #17
   b65a4:	f840 3b04 	str.w	r3, [r0], #4
   b65a8:	2100      	movs	r1, #0
   b65aa:	f000 fef5 	bl	b7398 <memset>
}
   b65ae:	4620      	mov	r0, r4
   b65b0:	bd10      	pop	{r4, pc}
   b65b2:	bf00      	nop
   b65b4:	000b7838 	.word	0x000b7838

000b65b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b65b8:	4603      	mov	r3, r0
   b65ba:	4a07      	ldr	r2, [pc, #28]	; (b65d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b65bc:	b510      	push	{r4, lr}
   b65be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b65c2:	f101 0210 	add.w	r2, r1, #16
   b65c6:	f851 4b04 	ldr.w	r4, [r1], #4
   b65ca:	f843 4b04 	str.w	r4, [r3], #4
   b65ce:	4291      	cmp	r1, r2
   b65d0:	d1f9      	bne.n	b65c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b65d2:	780a      	ldrb	r2, [r1, #0]
   b65d4:	701a      	strb	r2, [r3, #0]
}
   b65d6:	bd10      	pop	{r4, pc}
   b65d8:	000b7838 	.word	0x000b7838

000b65dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b65dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b65de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b65e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b65e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b65ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b65ee:	2304      	movs	r3, #4
   b65f0:	6041      	str	r1, [r0, #4]
   b65f2:	7503      	strb	r3, [r0, #20]
}
   b65f4:	bd10      	pop	{r4, pc}
	...

000b65f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b65f8:	b507      	push	{r0, r1, r2, lr}
   b65fa:	4b06      	ldr	r3, [pc, #24]	; (b6614 <_ZN9IPAddressC1EPKh+0x1c>)
   b65fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b65fe:	78cb      	ldrb	r3, [r1, #3]
   b6600:	9300      	str	r3, [sp, #0]
   b6602:	788b      	ldrb	r3, [r1, #2]
   b6604:	784a      	ldrb	r2, [r1, #1]
   b6606:	7809      	ldrb	r1, [r1, #0]
   b6608:	f7ff ffe8 	bl	b65dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b660c:	b003      	add	sp, #12
   b660e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6612:	bf00      	nop
   b6614:	000b7838 	.word	0x000b7838

000b6618 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6618:	4b01      	ldr	r3, [pc, #4]	; (b6620 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b661a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b661c:	4770      	bx	lr
   b661e:	bf00      	nop
   b6620:	2003e158 	.word	0x2003e158

000b6624 <serialEventRun>:
{
   b6624:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6626:	4b0b      	ldr	r3, [pc, #44]	; (b6654 <serialEventRun+0x30>)
   b6628:	b143      	cbz	r3, b663c <serialEventRun+0x18>
   b662a:	f7ff ff57 	bl	b64dc <_Z16_fetch_usbserialv>
   b662e:	6803      	ldr	r3, [r0, #0]
   b6630:	691b      	ldr	r3, [r3, #16]
   b6632:	4798      	blx	r3
   b6634:	2800      	cmp	r0, #0
   b6636:	dd01      	ble.n	b663c <serialEventRun+0x18>
        serialEvent();
   b6638:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b663c:	4b06      	ldr	r3, [pc, #24]	; (b6658 <serialEventRun+0x34>)
   b663e:	b143      	cbz	r3, b6652 <serialEventRun+0x2e>
   b6640:	f000 f9da 	bl	b69f8 <_Z22__fetch_global_Serial1v>
   b6644:	6803      	ldr	r3, [r0, #0]
   b6646:	691b      	ldr	r3, [r3, #16]
   b6648:	4798      	blx	r3
   b664a:	2800      	cmp	r0, #0
   b664c:	dd01      	ble.n	b6652 <serialEventRun+0x2e>
        serialEvent1();
   b664e:	f3af 8000 	nop.w
}
   b6652:	bd08      	pop	{r3, pc}
	...

000b665c <_post_loop>:
{
   b665c:	b508      	push	{r3, lr}
	serialEventRun();
   b665e:	f7ff ffe1 	bl	b6624 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6662:	f7ff fb89 	bl	b5d78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6666:	4b01      	ldr	r3, [pc, #4]	; (b666c <_post_loop+0x10>)
   b6668:	6018      	str	r0, [r3, #0]
}
   b666a:	bd08      	pop	{r3, pc}
   b666c:	2003e740 	.word	0x2003e740

000b6670 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6670:	4805      	ldr	r0, [pc, #20]	; (b6688 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6672:	4a06      	ldr	r2, [pc, #24]	; (b668c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6674:	4906      	ldr	r1, [pc, #24]	; (b6690 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6676:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6678:	1a12      	subs	r2, r2, r0
   b667a:	f000 fe7f 	bl	b737c <memcpy>
    __backup_sram_signature = signature;
   b667e:	4b05      	ldr	r3, [pc, #20]	; (b6694 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6680:	4a05      	ldr	r2, [pc, #20]	; (b6698 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6682:	601a      	str	r2, [r3, #0]
}
   b6684:	bd08      	pop	{r3, pc}
   b6686:	bf00      	nop
   b6688:	2003f400 	.word	0x2003f400
   b668c:	2003f404 	.word	0x2003f404
   b6690:	000b7984 	.word	0x000b7984
   b6694:	2003f400 	.word	0x2003f400
   b6698:	9a271c1e 	.word	0x9a271c1e

000b669c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b669c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b669e:	2300      	movs	r3, #0
   b66a0:	9300      	str	r3, [sp, #0]
   b66a2:	461a      	mov	r2, r3
   b66a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b66a8:	f7ff fc20 	bl	b5eec <system_ctrl_set_result>
}
   b66ac:	b003      	add	sp, #12
   b66ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b66b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b66b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b66b6:	8843      	ldrh	r3, [r0, #2]
   b66b8:	2b0a      	cmp	r3, #10
   b66ba:	d008      	beq.n	b66ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b66bc:	2b50      	cmp	r3, #80	; 0x50
   b66be:	d10b      	bne.n	b66d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b66c0:	4b09      	ldr	r3, [pc, #36]	; (b66e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b66c2:	681b      	ldr	r3, [r3, #0]
   b66c4:	b14b      	cbz	r3, b66da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b66c6:	b003      	add	sp, #12
   b66c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b66cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b66ce:	f7ff ffe5 	bl	b669c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b66d2:	b003      	add	sp, #12
   b66d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b66d8:	2300      	movs	r3, #0
   b66da:	9300      	str	r3, [sp, #0]
   b66dc:	461a      	mov	r2, r3
   b66de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b66e2:	f7ff fc03 	bl	b5eec <system_ctrl_set_result>
}
   b66e6:	e7f4      	b.n	b66d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b66e8:	2003e6f0 	.word	0x2003e6f0

000b66ec <module_user_init_hook>:
{
   b66ec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b66ee:	4812      	ldr	r0, [pc, #72]	; (b6738 <module_user_init_hook+0x4c>)
   b66f0:	2100      	movs	r1, #0
   b66f2:	f7ff fc25 	bl	b5f40 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b66f6:	4b11      	ldr	r3, [pc, #68]	; (b673c <module_user_init_hook+0x50>)
   b66f8:	681a      	ldr	r2, [r3, #0]
   b66fa:	4b11      	ldr	r3, [pc, #68]	; (b6740 <module_user_init_hook+0x54>)
   b66fc:	429a      	cmp	r2, r3
   b66fe:	4b11      	ldr	r3, [pc, #68]	; (b6744 <module_user_init_hook+0x58>)
   b6700:	bf0c      	ite	eq
   b6702:	2201      	moveq	r2, #1
   b6704:	2200      	movne	r2, #0
   b6706:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6708:	d001      	beq.n	b670e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b670a:	f7ff ffb1 	bl	b6670 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b670e:	f7ff fb23 	bl	b5d58 <HAL_RNG_GetRandomNumber>
   b6712:	4604      	mov	r4, r0
    srand(seed);
   b6714:	f000 fe48 	bl	b73a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6718:	4b0b      	ldr	r3, [pc, #44]	; (b6748 <module_user_init_hook+0x5c>)
   b671a:	b113      	cbz	r3, b6722 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b671c:	4620      	mov	r0, r4
   b671e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6722:	2100      	movs	r1, #0
   b6724:	4808      	ldr	r0, [pc, #32]	; (b6748 <module_user_init_hook+0x5c>)
   b6726:	f7ff fb5f 	bl	b5de8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b672a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b672e:	4807      	ldr	r0, [pc, #28]	; (b674c <module_user_init_hook+0x60>)
   b6730:	2100      	movs	r1, #0
   b6732:	f7ff bbd1 	b.w	b5ed8 <system_ctrl_set_app_request_handler>
   b6736:	bf00      	nop
   b6738:	000b6619 	.word	0x000b6619
   b673c:	2003f400 	.word	0x2003f400
   b6740:	9a271c1e 	.word	0x9a271c1e
   b6744:	2003e6ec 	.word	0x2003e6ec
   b6748:	00000000 	.word	0x00000000
   b674c:	000b66b5 	.word	0x000b66b5

000b6750 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6750:	4b01      	ldr	r3, [pc, #4]	; (b6758 <_GLOBAL__sub_I_RGB+0x8>)
   b6752:	2200      	movs	r2, #0
   b6754:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6756:	4770      	bx	lr
   b6758:	2003e6f4 	.word	0x2003e6f4

000b675c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b675c:	2100      	movs	r1, #0
   b675e:	f7ff bbb3 	b.w	b5ec8 <system_delay_ms>
	...

000b6764 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6764:	4b02      	ldr	r3, [pc, #8]	; (b6770 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6766:	681a      	ldr	r2, [r3, #0]
   b6768:	4b02      	ldr	r3, [pc, #8]	; (b6774 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b676a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b676c:	4770      	bx	lr
   b676e:	bf00      	nop
   b6770:	2003e154 	.word	0x2003e154
   b6774:	2003e704 	.word	0x2003e704

000b6778 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6778:	4b01      	ldr	r3, [pc, #4]	; (b6780 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b677a:	4a02      	ldr	r2, [pc, #8]	; (b6784 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b677c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b677e:	4770      	bx	lr
   b6780:	2003e708 	.word	0x2003e708
   b6784:	000b7860 	.word	0x000b7860

000b6788 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b678a:	4606      	mov	r6, r0
   b678c:	460d      	mov	r5, r1
  size_t n = 0;
   b678e:	188f      	adds	r7, r1, r2
   b6790:	2400      	movs	r4, #0
  while (size--) {
   b6792:	42bd      	cmp	r5, r7
   b6794:	d00c      	beq.n	b67b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6796:	6833      	ldr	r3, [r6, #0]
   b6798:	f815 1b01 	ldrb.w	r1, [r5], #1
   b679c:	689b      	ldr	r3, [r3, #8]
   b679e:	4630      	mov	r0, r6
   b67a0:	4798      	blx	r3
     if (chunk>=0)
   b67a2:	1e03      	subs	r3, r0, #0
   b67a4:	db01      	blt.n	b67aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b67a6:	441c      	add	r4, r3
  while (size--) {
   b67a8:	e7f3      	b.n	b6792 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b67aa:	2c00      	cmp	r4, #0
   b67ac:	bf08      	it	eq
   b67ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b67b0:	4620      	mov	r0, r4
   b67b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67b4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b67b4:	b508      	push	{r3, lr}
  return write(str);
   b67b6:	f7fe fe98 	bl	b54ea <_ZN5Print5writeEPKc>
}
   b67ba:	bd08      	pop	{r3, pc}

000b67bc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b67bc:	6803      	ldr	r3, [r0, #0]
   b67be:	689b      	ldr	r3, [r3, #8]
   b67c0:	4718      	bx	r3

000b67c2 <_ZN5Print5printEPK19__FlashStringHelper>:
   b67c2:	b508      	push	{r3, lr}
   b67c4:	f7fe fe91 	bl	b54ea <_ZN5Print5writeEPKc>
   b67c8:	bd08      	pop	{r3, pc}

000b67ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b67ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b67cc:	210d      	movs	r1, #13
{
   b67ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   b67d0:	f7ff fff4 	bl	b67bc <_ZN5Print5printEc>
  n += print('\n');
   b67d4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b67d6:	4604      	mov	r4, r0
  n += print('\n');
   b67d8:	4628      	mov	r0, r5
   b67da:	f7ff ffef 	bl	b67bc <_ZN5Print5printEc>
  return n;
}
   b67de:	4420      	add	r0, r4
   b67e0:	bd38      	pop	{r3, r4, r5, pc}

000b67e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b67e2:	b538      	push	{r3, r4, r5, lr}
   b67e4:	4605      	mov	r5, r0
  return write(str);
   b67e6:	f7fe fe80 	bl	b54ea <_ZN5Print5writeEPKc>
   b67ea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b67ec:	4628      	mov	r0, r5
   b67ee:	f7ff ffec 	bl	b67ca <_ZN5Print7printlnEv>
  return n;
}
   b67f2:	4420      	add	r0, r4
   b67f4:	bd38      	pop	{r3, r4, r5, pc}

000b67f6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b67f6:	f7ff bff4 	b.w	b67e2 <_ZN5Print7printlnEPKc>

000b67fa <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b67fa:	b530      	push	{r4, r5, lr}
   b67fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b67fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6800:	2a01      	cmp	r2, #1
  *str = '\0';
   b6802:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6806:	bf98      	it	ls
   b6808:	220a      	movls	r2, #10
   b680a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b680c:	460d      	mov	r5, r1
   b680e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6812:	fb01 5312 	mls	r3, r1, r2, r5
   b6816:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b681a:	2b09      	cmp	r3, #9
   b681c:	bf94      	ite	ls
   b681e:	3330      	addls	r3, #48	; 0x30
   b6820:	3337      	addhi	r3, #55	; 0x37
   b6822:	b2db      	uxtb	r3, r3
  } while(n);
   b6824:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6826:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b682a:	d9ef      	bls.n	b680c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b682c:	4621      	mov	r1, r4
   b682e:	f7fe fe5c 	bl	b54ea <_ZN5Print5writeEPKc>
}
   b6832:	b00b      	add	sp, #44	; 0x2c
   b6834:	bd30      	pop	{r4, r5, pc}

000b6836 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b683a:	b086      	sub	sp, #24
   b683c:	af00      	add	r7, sp, #0
   b683e:	4605      	mov	r5, r0
   b6840:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6842:	1d38      	adds	r0, r7, #4
   b6844:	2114      	movs	r1, #20
{
   b6846:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6848:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b684a:	f7ff fb69 	bl	b5f20 <vsnprintf>

    if (n<bufsize)
   b684e:	2813      	cmp	r0, #19
   b6850:	d80e      	bhi.n	b6870 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6852:	1d39      	adds	r1, r7, #4
   b6854:	4628      	mov	r0, r5
   b6856:	f7fe fe48 	bl	b54ea <_ZN5Print5writeEPKc>
   b685a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b685c:	b11e      	cbz	r6, b6866 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b685e:	4628      	mov	r0, r5
   b6860:	f7ff ffb3 	bl	b67ca <_ZN5Print7printlnEv>
   b6864:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6866:	4620      	mov	r0, r4
   b6868:	3718      	adds	r7, #24
   b686a:	46bd      	mov	sp, r7
   b686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6870:	f100 0308 	add.w	r3, r0, #8
   b6874:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6878:	46e8      	mov	r8, sp
        char bigger[n+1];
   b687a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b687e:	4622      	mov	r2, r4
   b6880:	1c41      	adds	r1, r0, #1
   b6882:	683b      	ldr	r3, [r7, #0]
   b6884:	4668      	mov	r0, sp
   b6886:	f7ff fb4b 	bl	b5f20 <vsnprintf>
  return write(str);
   b688a:	4669      	mov	r1, sp
   b688c:	4628      	mov	r0, r5
   b688e:	f7fe fe2c 	bl	b54ea <_ZN5Print5writeEPKc>
   b6892:	4604      	mov	r4, r0
   b6894:	46c5      	mov	sp, r8
   b6896:	e7e1      	b.n	b685c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6898 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6898:	4802      	ldr	r0, [pc, #8]	; (b68a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b689a:	2300      	movs	r3, #0
   b689c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b689e:	f7ff ba53 	b.w	b5d48 <os_mutex_recursive_create>
   b68a2:	bf00      	nop
   b68a4:	2003e70c 	.word	0x2003e70c

000b68a8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b68a8:	4b05      	ldr	r3, [pc, #20]	; (b68c0 <_GLOBAL__sub_I_System+0x18>)
   b68aa:	2202      	movs	r2, #2
   b68ac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b68ae:	4b05      	ldr	r3, [pc, #20]	; (b68c4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b68b0:	4a05      	ldr	r2, [pc, #20]	; (b68c8 <_GLOBAL__sub_I_System+0x20>)
   b68b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b68b4:	2000      	movs	r0, #0
   b68b6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b68ba:	f7ff bafd 	b.w	b5eb8 <set_system_mode>
   b68be:	bf00      	nop
   b68c0:	2003e71c 	.word	0x2003e71c
   b68c4:	2003e710 	.word	0x2003e710
   b68c8:	ffff0000 	.word	0xffff0000

000b68cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b68cc:	2200      	movs	r2, #0
   b68ce:	6840      	ldr	r0, [r0, #4]
   b68d0:	4611      	mov	r1, r2
   b68d2:	f7ff bac9 	b.w	b5e68 <network_listening>

000b68d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b68d6:	2200      	movs	r2, #0
   b68d8:	6840      	ldr	r0, [r0, #4]
   b68da:	4611      	mov	r1, r2
   b68dc:	f7ff bad4 	b.w	b5e88 <network_get_listen_timeout>

000b68e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b68e0:	6840      	ldr	r0, [r0, #4]
   b68e2:	2200      	movs	r2, #0
   b68e4:	f7ff bac8 	b.w	b5e78 <network_set_listen_timeout>

000b68e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b68e8:	6840      	ldr	r0, [r0, #4]
   b68ea:	2200      	movs	r2, #0
   b68ec:	f081 0101 	eor.w	r1, r1, #1
   b68f0:	f7ff bab2 	b.w	b5e58 <network_listen>

000b68f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b68f4:	2300      	movs	r3, #0
   b68f6:	6840      	ldr	r0, [r0, #4]
   b68f8:	461a      	mov	r2, r3
   b68fa:	4619      	mov	r1, r3
   b68fc:	f7ff baa4 	b.w	b5e48 <network_off>

000b6900 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6900:	2300      	movs	r3, #0
   b6902:	6840      	ldr	r0, [r0, #4]
   b6904:	461a      	mov	r2, r3
   b6906:	4619      	mov	r1, r3
   b6908:	f7ff ba96 	b.w	b5e38 <network_on>

000b690c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b690c:	2200      	movs	r2, #0
   b690e:	6840      	ldr	r0, [r0, #4]
   b6910:	4611      	mov	r1, r2
   b6912:	f7ff ba89 	b.w	b5e28 <network_ready>

000b6916 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6916:	2200      	movs	r2, #0
   b6918:	6840      	ldr	r0, [r0, #4]
   b691a:	4611      	mov	r1, r2
   b691c:	f7ff ba74 	b.w	b5e08 <network_connecting>

000b6920 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6920:	6840      	ldr	r0, [r0, #4]
   b6922:	2200      	movs	r2, #0
   b6924:	2102      	movs	r1, #2
   b6926:	f7ff ba77 	b.w	b5e18 <network_disconnect>

000b692a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b692a:	2300      	movs	r3, #0
   b692c:	6840      	ldr	r0, [r0, #4]
   b692e:	461a      	mov	r2, r3
   b6930:	f7ff ba62 	b.w	b5df8 <network_connect>

000b6934 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6934:	4b02      	ldr	r3, [pc, #8]	; (b6940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6936:	2203      	movs	r2, #3
   b6938:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b693a:	4a02      	ldr	r2, [pc, #8]	; (b6944 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b693c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b693e:	4770      	bx	lr
   b6940:	2003e720 	.word	0x2003e720
   b6944:	000b786c 	.word	0x000b786c

000b6948 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6948:	4770      	bx	lr
	...

000b694c <_Z17acquireWireBufferv>:
{
   b694c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b694e:	2520      	movs	r5, #32
   b6950:	2314      	movs	r3, #20
{
   b6952:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6954:	6003      	str	r3, [r0, #0]
   b6956:	6085      	str	r5, [r0, #8]
   b6958:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b695a:	4906      	ldr	r1, [pc, #24]	; (b6974 <_Z17acquireWireBufferv+0x28>)
   b695c:	4628      	mov	r0, r5
   b695e:	f000 f8d7 	bl	b6b10 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6962:	4904      	ldr	r1, [pc, #16]	; (b6974 <_Z17acquireWireBufferv+0x28>)
	};
   b6964:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6966:	4628      	mov	r0, r5
   b6968:	f000 f8d2 	bl	b6b10 <_ZnajRKSt9nothrow_t>
	};
   b696c:	60e0      	str	r0, [r4, #12]
}
   b696e:	4620      	mov	r0, r4
   b6970:	bd38      	pop	{r3, r4, r5, pc}
   b6972:	bf00      	nop
   b6974:	000b78a0 	.word	0x000b78a0

000b6978 <_Z19__fetch_global_Wirev>:
{
   b6978:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b697a:	4d0e      	ldr	r5, [pc, #56]	; (b69b4 <_Z19__fetch_global_Wirev+0x3c>)
   b697c:	7829      	ldrb	r1, [r5, #0]
   b697e:	f3bf 8f5b 	dmb	ish
   b6982:	f011 0401 	ands.w	r4, r1, #1
{
   b6986:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6988:	d111      	bne.n	b69ae <_Z19__fetch_global_Wirev+0x36>
   b698a:	4628      	mov	r0, r5
   b698c:	f7fd fb85 	bl	b409a <__cxa_guard_acquire>
   b6990:	b168      	cbz	r0, b69ae <_Z19__fetch_global_Wirev+0x36>
   b6992:	a801      	add	r0, sp, #4
   b6994:	f7ff ffda 	bl	b694c <_Z17acquireWireBufferv>
   b6998:	aa01      	add	r2, sp, #4
   b699a:	4621      	mov	r1, r4
   b699c:	4806      	ldr	r0, [pc, #24]	; (b69b8 <_Z19__fetch_global_Wirev+0x40>)
   b699e:	f7ff fc8f 	bl	b62c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b69a2:	4628      	mov	r0, r5
   b69a4:	f7fd fb7e 	bl	b40a4 <__cxa_guard_release>
   b69a8:	4804      	ldr	r0, [pc, #16]	; (b69bc <_Z19__fetch_global_Wirev+0x44>)
   b69aa:	f000 fcd1 	bl	b7350 <atexit>
	return wire;
}
   b69ae:	4802      	ldr	r0, [pc, #8]	; (b69b8 <_Z19__fetch_global_Wirev+0x40>)
   b69b0:	b007      	add	sp, #28
   b69b2:	bd30      	pop	{r4, r5, pc}
   b69b4:	2003e728 	.word	0x2003e728
   b69b8:	2003e72c 	.word	0x2003e72c
   b69bc:	000b6949 	.word	0x000b6949

000b69c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b69c0:	4770      	bx	lr
	...

000b69c4 <_Z20acquireSerial1Bufferv>:
{
   b69c4:	b538      	push	{r3, r4, r5, lr}
   b69c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b69c8:	2514      	movs	r5, #20
   b69ca:	462a      	mov	r2, r5
   b69cc:	2100      	movs	r1, #0
   b69ce:	f000 fce3 	bl	b7398 <memset>
   b69d2:	8025      	strh	r5, [r4, #0]
   b69d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69d6:	4907      	ldr	r1, [pc, #28]	; (b69f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b69d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b69dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69de:	f000 f897 	bl	b6b10 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69e2:	4904      	ldr	r1, [pc, #16]	; (b69f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b69e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69e6:	4628      	mov	r0, r5
   b69e8:	f000 f892 	bl	b6b10 <_ZnajRKSt9nothrow_t>
    };
   b69ec:	60e0      	str	r0, [r4, #12]
}
   b69ee:	4620      	mov	r0, r4
   b69f0:	bd38      	pop	{r3, r4, r5, pc}
   b69f2:	bf00      	nop
   b69f4:	000b78a0 	.word	0x000b78a0

000b69f8 <_Z22__fetch_global_Serial1v>:
{
   b69f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b69fa:	4d0e      	ldr	r5, [pc, #56]	; (b6a34 <_Z22__fetch_global_Serial1v+0x3c>)
   b69fc:	7829      	ldrb	r1, [r5, #0]
   b69fe:	f3bf 8f5b 	dmb	ish
   b6a02:	f011 0401 	ands.w	r4, r1, #1
{
   b6a06:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a08:	d111      	bne.n	b6a2e <_Z22__fetch_global_Serial1v+0x36>
   b6a0a:	4628      	mov	r0, r5
   b6a0c:	f7fd fb45 	bl	b409a <__cxa_guard_acquire>
   b6a10:	b168      	cbz	r0, b6a2e <_Z22__fetch_global_Serial1v+0x36>
   b6a12:	a801      	add	r0, sp, #4
   b6a14:	f7ff ffd6 	bl	b69c4 <_Z20acquireSerial1Bufferv>
   b6a18:	aa01      	add	r2, sp, #4
   b6a1a:	4621      	mov	r1, r4
   b6a1c:	4806      	ldr	r0, [pc, #24]	; (b6a38 <_Z22__fetch_global_Serial1v+0x40>)
   b6a1e:	f7ff fc9f 	bl	b6360 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6a22:	4628      	mov	r0, r5
   b6a24:	f7fd fb3e 	bl	b40a4 <__cxa_guard_release>
   b6a28:	4804      	ldr	r0, [pc, #16]	; (b6a3c <_Z22__fetch_global_Serial1v+0x44>)
   b6a2a:	f000 fc91 	bl	b7350 <atexit>
    return serial1;
}
   b6a2e:	4802      	ldr	r0, [pc, #8]	; (b6a38 <_Z22__fetch_global_Serial1v+0x40>)
   b6a30:	b007      	add	sp, #28
   b6a32:	bd30      	pop	{r4, r5, pc}
   b6a34:	2003e744 	.word	0x2003e744
   b6a38:	2003e748 	.word	0x2003e748
   b6a3c:	000b69c1 	.word	0x000b69c1

000b6a40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6a40:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b6a42:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6a44:	d902      	bls.n	b6a4c <pinAvailable+0xc>
    return false;
   b6a46:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6a48:	b002      	add	sp, #8
   b6a4a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6a4c:	f1a0 030b 	sub.w	r3, r0, #11
   b6a50:	2b02      	cmp	r3, #2
   b6a52:	d81a      	bhi.n	b6a8a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6a54:	4c17      	ldr	r4, [pc, #92]	; (b6ab4 <pinAvailable+0x74>)
   b6a56:	7821      	ldrb	r1, [r4, #0]
   b6a58:	f3bf 8f5b 	dmb	ish
   b6a5c:	f011 0101 	ands.w	r1, r1, #1
   b6a60:	d10b      	bne.n	b6a7a <pinAvailable+0x3a>
   b6a62:	4620      	mov	r0, r4
   b6a64:	9101      	str	r1, [sp, #4]
   b6a66:	f7fd fb18 	bl	b409a <__cxa_guard_acquire>
   b6a6a:	9901      	ldr	r1, [sp, #4]
   b6a6c:	b128      	cbz	r0, b6a7a <pinAvailable+0x3a>
   b6a6e:	4812      	ldr	r0, [pc, #72]	; (b6ab8 <pinAvailable+0x78>)
   b6a70:	f7ff fb26 	bl	b60c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6a74:	4620      	mov	r0, r4
   b6a76:	f7fd fb15 	bl	b40a4 <__cxa_guard_release>
   b6a7a:	4b0f      	ldr	r3, [pc, #60]	; (b6ab8 <pinAvailable+0x78>)
   b6a7c:	7818      	ldrb	r0, [r3, #0]
   b6a7e:	f7ff f8db 	bl	b5c38 <hal_spi_is_enabled>
   b6a82:	2800      	cmp	r0, #0
   b6a84:	d1df      	bne.n	b6a46 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6a86:	2001      	movs	r0, #1
   b6a88:	e7de      	b.n	b6a48 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6a8a:	2801      	cmp	r0, #1
   b6a8c:	d809      	bhi.n	b6aa2 <pinAvailable+0x62>
   b6a8e:	f7ff ff73 	bl	b6978 <_Z19__fetch_global_Wirev>
   b6a92:	2100      	movs	r1, #0
   b6a94:	7c00      	ldrb	r0, [r0, #16]
   b6a96:	f7ff f8a7 	bl	b5be8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6a9a:	f080 0001 	eor.w	r0, r0, #1
   b6a9e:	b2c0      	uxtb	r0, r0
   b6aa0:	e7d2      	b.n	b6a48 <pinAvailable+0x8>
   b6aa2:	3809      	subs	r0, #9
   b6aa4:	2801      	cmp	r0, #1
   b6aa6:	d8ee      	bhi.n	b6a86 <pinAvailable+0x46>
   b6aa8:	f7ff ffa6 	bl	b69f8 <_Z22__fetch_global_Serial1v>
   b6aac:	7c00      	ldrb	r0, [r0, #16]
   b6aae:	f7ff f923 	bl	b5cf8 <hal_usart_is_enabled>
   b6ab2:	e7f2      	b.n	b6a9a <pinAvailable+0x5a>
   b6ab4:	2003e1c0 	.word	0x2003e1c0
   b6ab8:	2003e1c4 	.word	0x2003e1c4

000b6abc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6abc:	2825      	cmp	r0, #37	; 0x25
{
   b6abe:	b538      	push	{r3, r4, r5, lr}
   b6ac0:	4604      	mov	r4, r0
   b6ac2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ac4:	d80a      	bhi.n	b6adc <pinMode+0x20>
   b6ac6:	29ff      	cmp	r1, #255	; 0xff
   b6ac8:	d008      	beq.n	b6adc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6aca:	f7ff ffb9 	bl	b6a40 <pinAvailable>
   b6ace:	b128      	cbz	r0, b6adc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6ad0:	4629      	mov	r1, r5
   b6ad2:	4620      	mov	r0, r4
}
   b6ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6ad8:	f7ff b956 	b.w	b5d88 <HAL_Pin_Mode>
}
   b6adc:	bd38      	pop	{r3, r4, r5, pc}

000b6ade <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6ade:	b538      	push	{r3, r4, r5, lr}
   b6ae0:	4604      	mov	r4, r0
   b6ae2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6ae4:	f7ff f958 	bl	b5d98 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6ae8:	28ff      	cmp	r0, #255	; 0xff
   b6aea:	d010      	beq.n	b6b0e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6aec:	2806      	cmp	r0, #6
   b6aee:	d804      	bhi.n	b6afa <digitalWrite+0x1c>
   b6af0:	234d      	movs	r3, #77	; 0x4d
   b6af2:	fa23 f000 	lsr.w	r0, r3, r0
   b6af6:	07c3      	lsls	r3, r0, #31
   b6af8:	d409      	bmi.n	b6b0e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6afa:	4620      	mov	r0, r4
   b6afc:	f7ff ffa0 	bl	b6a40 <pinAvailable>
   b6b00:	b128      	cbz	r0, b6b0e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6b02:	4629      	mov	r1, r5
   b6b04:	4620      	mov	r0, r4
}
   b6b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6b0a:	f7ff b94d 	b.w	b5da8 <HAL_GPIO_Write>
}
   b6b0e:	bd38      	pop	{r3, r4, r5, pc}

000b6b10 <_ZnajRKSt9nothrow_t>:
   b6b10:	f7fd babf 	b.w	b4092 <_Znaj>

000b6b14 <__aeabi_drsub>:
   b6b14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6b18:	e002      	b.n	b6b20 <__adddf3>
   b6b1a:	bf00      	nop

000b6b1c <__aeabi_dsub>:
   b6b1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6b20 <__adddf3>:
   b6b20:	b530      	push	{r4, r5, lr}
   b6b22:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6b26:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6b2a:	ea94 0f05 	teq	r4, r5
   b6b2e:	bf08      	it	eq
   b6b30:	ea90 0f02 	teqeq	r0, r2
   b6b34:	bf1f      	itttt	ne
   b6b36:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6b3a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6b3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6b42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6b46:	f000 80e2 	beq.w	b6d0e <__adddf3+0x1ee>
   b6b4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6b4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6b52:	bfb8      	it	lt
   b6b54:	426d      	neglt	r5, r5
   b6b56:	dd0c      	ble.n	b6b72 <__adddf3+0x52>
   b6b58:	442c      	add	r4, r5
   b6b5a:	ea80 0202 	eor.w	r2, r0, r2
   b6b5e:	ea81 0303 	eor.w	r3, r1, r3
   b6b62:	ea82 0000 	eor.w	r0, r2, r0
   b6b66:	ea83 0101 	eor.w	r1, r3, r1
   b6b6a:	ea80 0202 	eor.w	r2, r0, r2
   b6b6e:	ea81 0303 	eor.w	r3, r1, r3
   b6b72:	2d36      	cmp	r5, #54	; 0x36
   b6b74:	bf88      	it	hi
   b6b76:	bd30      	pophi	{r4, r5, pc}
   b6b78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6b7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6b80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6b84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6b88:	d002      	beq.n	b6b90 <__adddf3+0x70>
   b6b8a:	4240      	negs	r0, r0
   b6b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6b90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6b94:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6b98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6b9c:	d002      	beq.n	b6ba4 <__adddf3+0x84>
   b6b9e:	4252      	negs	r2, r2
   b6ba0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6ba4:	ea94 0f05 	teq	r4, r5
   b6ba8:	f000 80a7 	beq.w	b6cfa <__adddf3+0x1da>
   b6bac:	f1a4 0401 	sub.w	r4, r4, #1
   b6bb0:	f1d5 0e20 	rsbs	lr, r5, #32
   b6bb4:	db0d      	blt.n	b6bd2 <__adddf3+0xb2>
   b6bb6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6bba:	fa22 f205 	lsr.w	r2, r2, r5
   b6bbe:	1880      	adds	r0, r0, r2
   b6bc0:	f141 0100 	adc.w	r1, r1, #0
   b6bc4:	fa03 f20e 	lsl.w	r2, r3, lr
   b6bc8:	1880      	adds	r0, r0, r2
   b6bca:	fa43 f305 	asr.w	r3, r3, r5
   b6bce:	4159      	adcs	r1, r3
   b6bd0:	e00e      	b.n	b6bf0 <__adddf3+0xd0>
   b6bd2:	f1a5 0520 	sub.w	r5, r5, #32
   b6bd6:	f10e 0e20 	add.w	lr, lr, #32
   b6bda:	2a01      	cmp	r2, #1
   b6bdc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6be0:	bf28      	it	cs
   b6be2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6be6:	fa43 f305 	asr.w	r3, r3, r5
   b6bea:	18c0      	adds	r0, r0, r3
   b6bec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6bf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6bf4:	d507      	bpl.n	b6c06 <__adddf3+0xe6>
   b6bf6:	f04f 0e00 	mov.w	lr, #0
   b6bfa:	f1dc 0c00 	rsbs	ip, ip, #0
   b6bfe:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6c02:	eb6e 0101 	sbc.w	r1, lr, r1
   b6c06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6c0a:	d31b      	bcc.n	b6c44 <__adddf3+0x124>
   b6c0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6c10:	d30c      	bcc.n	b6c2c <__adddf3+0x10c>
   b6c12:	0849      	lsrs	r1, r1, #1
   b6c14:	ea5f 0030 	movs.w	r0, r0, rrx
   b6c18:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6c1c:	f104 0401 	add.w	r4, r4, #1
   b6c20:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6c24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6c28:	f080 809a 	bcs.w	b6d60 <__adddf3+0x240>
   b6c2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6c30:	bf08      	it	eq
   b6c32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6c36:	f150 0000 	adcs.w	r0, r0, #0
   b6c3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6c3e:	ea41 0105 	orr.w	r1, r1, r5
   b6c42:	bd30      	pop	{r4, r5, pc}
   b6c44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6c48:	4140      	adcs	r0, r0
   b6c4a:	eb41 0101 	adc.w	r1, r1, r1
   b6c4e:	3c01      	subs	r4, #1
   b6c50:	bf28      	it	cs
   b6c52:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6c56:	d2e9      	bcs.n	b6c2c <__adddf3+0x10c>
   b6c58:	f091 0f00 	teq	r1, #0
   b6c5c:	bf04      	itt	eq
   b6c5e:	4601      	moveq	r1, r0
   b6c60:	2000      	moveq	r0, #0
   b6c62:	fab1 f381 	clz	r3, r1
   b6c66:	bf08      	it	eq
   b6c68:	3320      	addeq	r3, #32
   b6c6a:	f1a3 030b 	sub.w	r3, r3, #11
   b6c6e:	f1b3 0220 	subs.w	r2, r3, #32
   b6c72:	da0c      	bge.n	b6c8e <__adddf3+0x16e>
   b6c74:	320c      	adds	r2, #12
   b6c76:	dd08      	ble.n	b6c8a <__adddf3+0x16a>
   b6c78:	f102 0c14 	add.w	ip, r2, #20
   b6c7c:	f1c2 020c 	rsb	r2, r2, #12
   b6c80:	fa01 f00c 	lsl.w	r0, r1, ip
   b6c84:	fa21 f102 	lsr.w	r1, r1, r2
   b6c88:	e00c      	b.n	b6ca4 <__adddf3+0x184>
   b6c8a:	f102 0214 	add.w	r2, r2, #20
   b6c8e:	bfd8      	it	le
   b6c90:	f1c2 0c20 	rsble	ip, r2, #32
   b6c94:	fa01 f102 	lsl.w	r1, r1, r2
   b6c98:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6c9c:	bfdc      	itt	le
   b6c9e:	ea41 010c 	orrle.w	r1, r1, ip
   b6ca2:	4090      	lslle	r0, r2
   b6ca4:	1ae4      	subs	r4, r4, r3
   b6ca6:	bfa2      	ittt	ge
   b6ca8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6cac:	4329      	orrge	r1, r5
   b6cae:	bd30      	popge	{r4, r5, pc}
   b6cb0:	ea6f 0404 	mvn.w	r4, r4
   b6cb4:	3c1f      	subs	r4, #31
   b6cb6:	da1c      	bge.n	b6cf2 <__adddf3+0x1d2>
   b6cb8:	340c      	adds	r4, #12
   b6cba:	dc0e      	bgt.n	b6cda <__adddf3+0x1ba>
   b6cbc:	f104 0414 	add.w	r4, r4, #20
   b6cc0:	f1c4 0220 	rsb	r2, r4, #32
   b6cc4:	fa20 f004 	lsr.w	r0, r0, r4
   b6cc8:	fa01 f302 	lsl.w	r3, r1, r2
   b6ccc:	ea40 0003 	orr.w	r0, r0, r3
   b6cd0:	fa21 f304 	lsr.w	r3, r1, r4
   b6cd4:	ea45 0103 	orr.w	r1, r5, r3
   b6cd8:	bd30      	pop	{r4, r5, pc}
   b6cda:	f1c4 040c 	rsb	r4, r4, #12
   b6cde:	f1c4 0220 	rsb	r2, r4, #32
   b6ce2:	fa20 f002 	lsr.w	r0, r0, r2
   b6ce6:	fa01 f304 	lsl.w	r3, r1, r4
   b6cea:	ea40 0003 	orr.w	r0, r0, r3
   b6cee:	4629      	mov	r1, r5
   b6cf0:	bd30      	pop	{r4, r5, pc}
   b6cf2:	fa21 f004 	lsr.w	r0, r1, r4
   b6cf6:	4629      	mov	r1, r5
   b6cf8:	bd30      	pop	{r4, r5, pc}
   b6cfa:	f094 0f00 	teq	r4, #0
   b6cfe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6d02:	bf06      	itte	eq
   b6d04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6d08:	3401      	addeq	r4, #1
   b6d0a:	3d01      	subne	r5, #1
   b6d0c:	e74e      	b.n	b6bac <__adddf3+0x8c>
   b6d0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6d12:	bf18      	it	ne
   b6d14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6d18:	d029      	beq.n	b6d6e <__adddf3+0x24e>
   b6d1a:	ea94 0f05 	teq	r4, r5
   b6d1e:	bf08      	it	eq
   b6d20:	ea90 0f02 	teqeq	r0, r2
   b6d24:	d005      	beq.n	b6d32 <__adddf3+0x212>
   b6d26:	ea54 0c00 	orrs.w	ip, r4, r0
   b6d2a:	bf04      	itt	eq
   b6d2c:	4619      	moveq	r1, r3
   b6d2e:	4610      	moveq	r0, r2
   b6d30:	bd30      	pop	{r4, r5, pc}
   b6d32:	ea91 0f03 	teq	r1, r3
   b6d36:	bf1e      	ittt	ne
   b6d38:	2100      	movne	r1, #0
   b6d3a:	2000      	movne	r0, #0
   b6d3c:	bd30      	popne	{r4, r5, pc}
   b6d3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6d42:	d105      	bne.n	b6d50 <__adddf3+0x230>
   b6d44:	0040      	lsls	r0, r0, #1
   b6d46:	4149      	adcs	r1, r1
   b6d48:	bf28      	it	cs
   b6d4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6d4e:	bd30      	pop	{r4, r5, pc}
   b6d50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6d54:	bf3c      	itt	cc
   b6d56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6d5a:	bd30      	popcc	{r4, r5, pc}
   b6d5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6d60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6d64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6d68:	f04f 0000 	mov.w	r0, #0
   b6d6c:	bd30      	pop	{r4, r5, pc}
   b6d6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6d72:	bf1a      	itte	ne
   b6d74:	4619      	movne	r1, r3
   b6d76:	4610      	movne	r0, r2
   b6d78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6d7c:	bf1c      	itt	ne
   b6d7e:	460b      	movne	r3, r1
   b6d80:	4602      	movne	r2, r0
   b6d82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6d86:	bf06      	itte	eq
   b6d88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6d8c:	ea91 0f03 	teqeq	r1, r3
   b6d90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6d94:	bd30      	pop	{r4, r5, pc}
   b6d96:	bf00      	nop

000b6d98 <__aeabi_ui2d>:
   b6d98:	f090 0f00 	teq	r0, #0
   b6d9c:	bf04      	itt	eq
   b6d9e:	2100      	moveq	r1, #0
   b6da0:	4770      	bxeq	lr
   b6da2:	b530      	push	{r4, r5, lr}
   b6da4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6da8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6dac:	f04f 0500 	mov.w	r5, #0
   b6db0:	f04f 0100 	mov.w	r1, #0
   b6db4:	e750      	b.n	b6c58 <__adddf3+0x138>
   b6db6:	bf00      	nop

000b6db8 <__aeabi_i2d>:
   b6db8:	f090 0f00 	teq	r0, #0
   b6dbc:	bf04      	itt	eq
   b6dbe:	2100      	moveq	r1, #0
   b6dc0:	4770      	bxeq	lr
   b6dc2:	b530      	push	{r4, r5, lr}
   b6dc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6dc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6dcc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6dd0:	bf48      	it	mi
   b6dd2:	4240      	negmi	r0, r0
   b6dd4:	f04f 0100 	mov.w	r1, #0
   b6dd8:	e73e      	b.n	b6c58 <__adddf3+0x138>
   b6dda:	bf00      	nop

000b6ddc <__aeabi_f2d>:
   b6ddc:	0042      	lsls	r2, r0, #1
   b6dde:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6de2:	ea4f 0131 	mov.w	r1, r1, rrx
   b6de6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6dea:	bf1f      	itttt	ne
   b6dec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6df0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6df4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6df8:	4770      	bxne	lr
   b6dfa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6dfe:	bf08      	it	eq
   b6e00:	4770      	bxeq	lr
   b6e02:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6e06:	bf04      	itt	eq
   b6e08:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6e0c:	4770      	bxeq	lr
   b6e0e:	b530      	push	{r4, r5, lr}
   b6e10:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6e14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6e18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6e1c:	e71c      	b.n	b6c58 <__adddf3+0x138>
   b6e1e:	bf00      	nop

000b6e20 <__aeabi_ul2d>:
   b6e20:	ea50 0201 	orrs.w	r2, r0, r1
   b6e24:	bf08      	it	eq
   b6e26:	4770      	bxeq	lr
   b6e28:	b530      	push	{r4, r5, lr}
   b6e2a:	f04f 0500 	mov.w	r5, #0
   b6e2e:	e00a      	b.n	b6e46 <__aeabi_l2d+0x16>

000b6e30 <__aeabi_l2d>:
   b6e30:	ea50 0201 	orrs.w	r2, r0, r1
   b6e34:	bf08      	it	eq
   b6e36:	4770      	bxeq	lr
   b6e38:	b530      	push	{r4, r5, lr}
   b6e3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6e3e:	d502      	bpl.n	b6e46 <__aeabi_l2d+0x16>
   b6e40:	4240      	negs	r0, r0
   b6e42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6e46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6e4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6e4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6e52:	f43f aed8 	beq.w	b6c06 <__adddf3+0xe6>
   b6e56:	f04f 0203 	mov.w	r2, #3
   b6e5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6e5e:	bf18      	it	ne
   b6e60:	3203      	addne	r2, #3
   b6e62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6e66:	bf18      	it	ne
   b6e68:	3203      	addne	r2, #3
   b6e6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6e6e:	f1c2 0320 	rsb	r3, r2, #32
   b6e72:	fa00 fc03 	lsl.w	ip, r0, r3
   b6e76:	fa20 f002 	lsr.w	r0, r0, r2
   b6e7a:	fa01 fe03 	lsl.w	lr, r1, r3
   b6e7e:	ea40 000e 	orr.w	r0, r0, lr
   b6e82:	fa21 f102 	lsr.w	r1, r1, r2
   b6e86:	4414      	add	r4, r2
   b6e88:	e6bd      	b.n	b6c06 <__adddf3+0xe6>
   b6e8a:	bf00      	nop

000b6e8c <__aeabi_dmul>:
   b6e8c:	b570      	push	{r4, r5, r6, lr}
   b6e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6e9a:	bf1d      	ittte	ne
   b6e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6ea0:	ea94 0f0c 	teqne	r4, ip
   b6ea4:	ea95 0f0c 	teqne	r5, ip
   b6ea8:	f000 f8de 	bleq	b7068 <__aeabi_dmul+0x1dc>
   b6eac:	442c      	add	r4, r5
   b6eae:	ea81 0603 	eor.w	r6, r1, r3
   b6eb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6eb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6eba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6ebe:	bf18      	it	ne
   b6ec0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6ec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6ecc:	d038      	beq.n	b6f40 <__aeabi_dmul+0xb4>
   b6ece:	fba0 ce02 	umull	ip, lr, r0, r2
   b6ed2:	f04f 0500 	mov.w	r5, #0
   b6ed6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6eda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6ede:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6ee2:	f04f 0600 	mov.w	r6, #0
   b6ee6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6eea:	f09c 0f00 	teq	ip, #0
   b6eee:	bf18      	it	ne
   b6ef0:	f04e 0e01 	orrne.w	lr, lr, #1
   b6ef4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6ef8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6efc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6f00:	d204      	bcs.n	b6f0c <__aeabi_dmul+0x80>
   b6f02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6f06:	416d      	adcs	r5, r5
   b6f08:	eb46 0606 	adc.w	r6, r6, r6
   b6f0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6f10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6f14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6f18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6f1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6f20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6f24:	bf88      	it	hi
   b6f26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6f2a:	d81e      	bhi.n	b6f6a <__aeabi_dmul+0xde>
   b6f2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6f30:	bf08      	it	eq
   b6f32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6f36:	f150 0000 	adcs.w	r0, r0, #0
   b6f3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6f3e:	bd70      	pop	{r4, r5, r6, pc}
   b6f40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6f44:	ea46 0101 	orr.w	r1, r6, r1
   b6f48:	ea40 0002 	orr.w	r0, r0, r2
   b6f4c:	ea81 0103 	eor.w	r1, r1, r3
   b6f50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6f54:	bfc2      	ittt	gt
   b6f56:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6f5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6f5e:	bd70      	popgt	{r4, r5, r6, pc}
   b6f60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6f64:	f04f 0e00 	mov.w	lr, #0
   b6f68:	3c01      	subs	r4, #1
   b6f6a:	f300 80ab 	bgt.w	b70c4 <__aeabi_dmul+0x238>
   b6f6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6f72:	bfde      	ittt	le
   b6f74:	2000      	movle	r0, #0
   b6f76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6f7a:	bd70      	pople	{r4, r5, r6, pc}
   b6f7c:	f1c4 0400 	rsb	r4, r4, #0
   b6f80:	3c20      	subs	r4, #32
   b6f82:	da35      	bge.n	b6ff0 <__aeabi_dmul+0x164>
   b6f84:	340c      	adds	r4, #12
   b6f86:	dc1b      	bgt.n	b6fc0 <__aeabi_dmul+0x134>
   b6f88:	f104 0414 	add.w	r4, r4, #20
   b6f8c:	f1c4 0520 	rsb	r5, r4, #32
   b6f90:	fa00 f305 	lsl.w	r3, r0, r5
   b6f94:	fa20 f004 	lsr.w	r0, r0, r4
   b6f98:	fa01 f205 	lsl.w	r2, r1, r5
   b6f9c:	ea40 0002 	orr.w	r0, r0, r2
   b6fa0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6fa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6fac:	fa21 f604 	lsr.w	r6, r1, r4
   b6fb0:	eb42 0106 	adc.w	r1, r2, r6
   b6fb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6fb8:	bf08      	it	eq
   b6fba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6fbe:	bd70      	pop	{r4, r5, r6, pc}
   b6fc0:	f1c4 040c 	rsb	r4, r4, #12
   b6fc4:	f1c4 0520 	rsb	r5, r4, #32
   b6fc8:	fa00 f304 	lsl.w	r3, r0, r4
   b6fcc:	fa20 f005 	lsr.w	r0, r0, r5
   b6fd0:	fa01 f204 	lsl.w	r2, r1, r4
   b6fd4:	ea40 0002 	orr.w	r0, r0, r2
   b6fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6fdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6fe0:	f141 0100 	adc.w	r1, r1, #0
   b6fe4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6fe8:	bf08      	it	eq
   b6fea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6fee:	bd70      	pop	{r4, r5, r6, pc}
   b6ff0:	f1c4 0520 	rsb	r5, r4, #32
   b6ff4:	fa00 f205 	lsl.w	r2, r0, r5
   b6ff8:	ea4e 0e02 	orr.w	lr, lr, r2
   b6ffc:	fa20 f304 	lsr.w	r3, r0, r4
   b7000:	fa01 f205 	lsl.w	r2, r1, r5
   b7004:	ea43 0302 	orr.w	r3, r3, r2
   b7008:	fa21 f004 	lsr.w	r0, r1, r4
   b700c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7010:	fa21 f204 	lsr.w	r2, r1, r4
   b7014:	ea20 0002 	bic.w	r0, r0, r2
   b7018:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b701c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7020:	bf08      	it	eq
   b7022:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7026:	bd70      	pop	{r4, r5, r6, pc}
   b7028:	f094 0f00 	teq	r4, #0
   b702c:	d10f      	bne.n	b704e <__aeabi_dmul+0x1c2>
   b702e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7032:	0040      	lsls	r0, r0, #1
   b7034:	eb41 0101 	adc.w	r1, r1, r1
   b7038:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b703c:	bf08      	it	eq
   b703e:	3c01      	subeq	r4, #1
   b7040:	d0f7      	beq.n	b7032 <__aeabi_dmul+0x1a6>
   b7042:	ea41 0106 	orr.w	r1, r1, r6
   b7046:	f095 0f00 	teq	r5, #0
   b704a:	bf18      	it	ne
   b704c:	4770      	bxne	lr
   b704e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7052:	0052      	lsls	r2, r2, #1
   b7054:	eb43 0303 	adc.w	r3, r3, r3
   b7058:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b705c:	bf08      	it	eq
   b705e:	3d01      	subeq	r5, #1
   b7060:	d0f7      	beq.n	b7052 <__aeabi_dmul+0x1c6>
   b7062:	ea43 0306 	orr.w	r3, r3, r6
   b7066:	4770      	bx	lr
   b7068:	ea94 0f0c 	teq	r4, ip
   b706c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7070:	bf18      	it	ne
   b7072:	ea95 0f0c 	teqne	r5, ip
   b7076:	d00c      	beq.n	b7092 <__aeabi_dmul+0x206>
   b7078:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b707c:	bf18      	it	ne
   b707e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7082:	d1d1      	bne.n	b7028 <__aeabi_dmul+0x19c>
   b7084:	ea81 0103 	eor.w	r1, r1, r3
   b7088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b708c:	f04f 0000 	mov.w	r0, #0
   b7090:	bd70      	pop	{r4, r5, r6, pc}
   b7092:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7096:	bf06      	itte	eq
   b7098:	4610      	moveq	r0, r2
   b709a:	4619      	moveq	r1, r3
   b709c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b70a0:	d019      	beq.n	b70d6 <__aeabi_dmul+0x24a>
   b70a2:	ea94 0f0c 	teq	r4, ip
   b70a6:	d102      	bne.n	b70ae <__aeabi_dmul+0x222>
   b70a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b70ac:	d113      	bne.n	b70d6 <__aeabi_dmul+0x24a>
   b70ae:	ea95 0f0c 	teq	r5, ip
   b70b2:	d105      	bne.n	b70c0 <__aeabi_dmul+0x234>
   b70b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b70b8:	bf1c      	itt	ne
   b70ba:	4610      	movne	r0, r2
   b70bc:	4619      	movne	r1, r3
   b70be:	d10a      	bne.n	b70d6 <__aeabi_dmul+0x24a>
   b70c0:	ea81 0103 	eor.w	r1, r1, r3
   b70c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b70c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b70cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b70d0:	f04f 0000 	mov.w	r0, #0
   b70d4:	bd70      	pop	{r4, r5, r6, pc}
   b70d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b70da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b70de:	bd70      	pop	{r4, r5, r6, pc}

000b70e0 <__aeabi_ddiv>:
   b70e0:	b570      	push	{r4, r5, r6, lr}
   b70e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b70e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b70ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b70ee:	bf1d      	ittte	ne
   b70f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b70f4:	ea94 0f0c 	teqne	r4, ip
   b70f8:	ea95 0f0c 	teqne	r5, ip
   b70fc:	f000 f8a7 	bleq	b724e <__aeabi_ddiv+0x16e>
   b7100:	eba4 0405 	sub.w	r4, r4, r5
   b7104:	ea81 0e03 	eor.w	lr, r1, r3
   b7108:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b710c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7110:	f000 8088 	beq.w	b7224 <__aeabi_ddiv+0x144>
   b7114:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7118:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b711c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7120:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7124:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7128:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b712c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7130:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7134:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7138:	429d      	cmp	r5, r3
   b713a:	bf08      	it	eq
   b713c:	4296      	cmpeq	r6, r2
   b713e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7142:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7146:	d202      	bcs.n	b714e <__aeabi_ddiv+0x6e>
   b7148:	085b      	lsrs	r3, r3, #1
   b714a:	ea4f 0232 	mov.w	r2, r2, rrx
   b714e:	1ab6      	subs	r6, r6, r2
   b7150:	eb65 0503 	sbc.w	r5, r5, r3
   b7154:	085b      	lsrs	r3, r3, #1
   b7156:	ea4f 0232 	mov.w	r2, r2, rrx
   b715a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b715e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7162:	ebb6 0e02 	subs.w	lr, r6, r2
   b7166:	eb75 0e03 	sbcs.w	lr, r5, r3
   b716a:	bf22      	ittt	cs
   b716c:	1ab6      	subcs	r6, r6, r2
   b716e:	4675      	movcs	r5, lr
   b7170:	ea40 000c 	orrcs.w	r0, r0, ip
   b7174:	085b      	lsrs	r3, r3, #1
   b7176:	ea4f 0232 	mov.w	r2, r2, rrx
   b717a:	ebb6 0e02 	subs.w	lr, r6, r2
   b717e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7182:	bf22      	ittt	cs
   b7184:	1ab6      	subcs	r6, r6, r2
   b7186:	4675      	movcs	r5, lr
   b7188:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b718c:	085b      	lsrs	r3, r3, #1
   b718e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7192:	ebb6 0e02 	subs.w	lr, r6, r2
   b7196:	eb75 0e03 	sbcs.w	lr, r5, r3
   b719a:	bf22      	ittt	cs
   b719c:	1ab6      	subcs	r6, r6, r2
   b719e:	4675      	movcs	r5, lr
   b71a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b71a4:	085b      	lsrs	r3, r3, #1
   b71a6:	ea4f 0232 	mov.w	r2, r2, rrx
   b71aa:	ebb6 0e02 	subs.w	lr, r6, r2
   b71ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   b71b2:	bf22      	ittt	cs
   b71b4:	1ab6      	subcs	r6, r6, r2
   b71b6:	4675      	movcs	r5, lr
   b71b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b71bc:	ea55 0e06 	orrs.w	lr, r5, r6
   b71c0:	d018      	beq.n	b71f4 <__aeabi_ddiv+0x114>
   b71c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b71c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b71ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b71ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b71d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b71d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b71da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b71de:	d1c0      	bne.n	b7162 <__aeabi_ddiv+0x82>
   b71e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b71e4:	d10b      	bne.n	b71fe <__aeabi_ddiv+0x11e>
   b71e6:	ea41 0100 	orr.w	r1, r1, r0
   b71ea:	f04f 0000 	mov.w	r0, #0
   b71ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b71f2:	e7b6      	b.n	b7162 <__aeabi_ddiv+0x82>
   b71f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b71f8:	bf04      	itt	eq
   b71fa:	4301      	orreq	r1, r0
   b71fc:	2000      	moveq	r0, #0
   b71fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7202:	bf88      	it	hi
   b7204:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7208:	f63f aeaf 	bhi.w	b6f6a <__aeabi_dmul+0xde>
   b720c:	ebb5 0c03 	subs.w	ip, r5, r3
   b7210:	bf04      	itt	eq
   b7212:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7216:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b721a:	f150 0000 	adcs.w	r0, r0, #0
   b721e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7222:	bd70      	pop	{r4, r5, r6, pc}
   b7224:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7228:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b722c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7230:	bfc2      	ittt	gt
   b7232:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7236:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b723a:	bd70      	popgt	{r4, r5, r6, pc}
   b723c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7240:	f04f 0e00 	mov.w	lr, #0
   b7244:	3c01      	subs	r4, #1
   b7246:	e690      	b.n	b6f6a <__aeabi_dmul+0xde>
   b7248:	ea45 0e06 	orr.w	lr, r5, r6
   b724c:	e68d      	b.n	b6f6a <__aeabi_dmul+0xde>
   b724e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7252:	ea94 0f0c 	teq	r4, ip
   b7256:	bf08      	it	eq
   b7258:	ea95 0f0c 	teqeq	r5, ip
   b725c:	f43f af3b 	beq.w	b70d6 <__aeabi_dmul+0x24a>
   b7260:	ea94 0f0c 	teq	r4, ip
   b7264:	d10a      	bne.n	b727c <__aeabi_ddiv+0x19c>
   b7266:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b726a:	f47f af34 	bne.w	b70d6 <__aeabi_dmul+0x24a>
   b726e:	ea95 0f0c 	teq	r5, ip
   b7272:	f47f af25 	bne.w	b70c0 <__aeabi_dmul+0x234>
   b7276:	4610      	mov	r0, r2
   b7278:	4619      	mov	r1, r3
   b727a:	e72c      	b.n	b70d6 <__aeabi_dmul+0x24a>
   b727c:	ea95 0f0c 	teq	r5, ip
   b7280:	d106      	bne.n	b7290 <__aeabi_ddiv+0x1b0>
   b7282:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7286:	f43f aefd 	beq.w	b7084 <__aeabi_dmul+0x1f8>
   b728a:	4610      	mov	r0, r2
   b728c:	4619      	mov	r1, r3
   b728e:	e722      	b.n	b70d6 <__aeabi_dmul+0x24a>
   b7290:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7294:	bf18      	it	ne
   b7296:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b729a:	f47f aec5 	bne.w	b7028 <__aeabi_dmul+0x19c>
   b729e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b72a2:	f47f af0d 	bne.w	b70c0 <__aeabi_dmul+0x234>
   b72a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b72aa:	f47f aeeb 	bne.w	b7084 <__aeabi_dmul+0x1f8>
   b72ae:	e712      	b.n	b70d6 <__aeabi_dmul+0x24a>

000b72b0 <__aeabi_d2f>:
   b72b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b72b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b72b8:	bf24      	itt	cs
   b72ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b72be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b72c2:	d90d      	bls.n	b72e0 <__aeabi_d2f+0x30>
   b72c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b72c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b72cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b72d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b72d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b72d8:	bf08      	it	eq
   b72da:	f020 0001 	biceq.w	r0, r0, #1
   b72de:	4770      	bx	lr
   b72e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b72e4:	d121      	bne.n	b732a <__aeabi_d2f+0x7a>
   b72e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b72ea:	bfbc      	itt	lt
   b72ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b72f0:	4770      	bxlt	lr
   b72f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b72f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b72fa:	f1c2 0218 	rsb	r2, r2, #24
   b72fe:	f1c2 0c20 	rsb	ip, r2, #32
   b7302:	fa10 f30c 	lsls.w	r3, r0, ip
   b7306:	fa20 f002 	lsr.w	r0, r0, r2
   b730a:	bf18      	it	ne
   b730c:	f040 0001 	orrne.w	r0, r0, #1
   b7310:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7314:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7318:	fa03 fc0c 	lsl.w	ip, r3, ip
   b731c:	ea40 000c 	orr.w	r0, r0, ip
   b7320:	fa23 f302 	lsr.w	r3, r3, r2
   b7324:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7328:	e7cc      	b.n	b72c4 <__aeabi_d2f+0x14>
   b732a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b732e:	d107      	bne.n	b7340 <__aeabi_d2f+0x90>
   b7330:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7334:	bf1e      	ittt	ne
   b7336:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b733a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b733e:	4770      	bxne	lr
   b7340:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7344:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b734c:	4770      	bx	lr
   b734e:	bf00      	nop

000b7350 <atexit>:
   b7350:	2300      	movs	r3, #0
   b7352:	4601      	mov	r1, r0
   b7354:	461a      	mov	r2, r3
   b7356:	4618      	mov	r0, r3
   b7358:	f000 b89a 	b.w	b7490 <__register_exitproc>

000b735c <memcmp>:
   b735c:	b510      	push	{r4, lr}
   b735e:	3901      	subs	r1, #1
   b7360:	4402      	add	r2, r0
   b7362:	4290      	cmp	r0, r2
   b7364:	d101      	bne.n	b736a <memcmp+0xe>
   b7366:	2000      	movs	r0, #0
   b7368:	e005      	b.n	b7376 <memcmp+0x1a>
   b736a:	7803      	ldrb	r3, [r0, #0]
   b736c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7370:	42a3      	cmp	r3, r4
   b7372:	d001      	beq.n	b7378 <memcmp+0x1c>
   b7374:	1b18      	subs	r0, r3, r4
   b7376:	bd10      	pop	{r4, pc}
   b7378:	3001      	adds	r0, #1
   b737a:	e7f2      	b.n	b7362 <memcmp+0x6>

000b737c <memcpy>:
   b737c:	440a      	add	r2, r1
   b737e:	4291      	cmp	r1, r2
   b7380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7384:	d100      	bne.n	b7388 <memcpy+0xc>
   b7386:	4770      	bx	lr
   b7388:	b510      	push	{r4, lr}
   b738a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b738e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7392:	4291      	cmp	r1, r2
   b7394:	d1f9      	bne.n	b738a <memcpy+0xe>
   b7396:	bd10      	pop	{r4, pc}

000b7398 <memset>:
   b7398:	4402      	add	r2, r0
   b739a:	4603      	mov	r3, r0
   b739c:	4293      	cmp	r3, r2
   b739e:	d100      	bne.n	b73a2 <memset+0xa>
   b73a0:	4770      	bx	lr
   b73a2:	f803 1b01 	strb.w	r1, [r3], #1
   b73a6:	e7f9      	b.n	b739c <memset+0x4>

000b73a8 <srand>:
   b73a8:	b538      	push	{r3, r4, r5, lr}
   b73aa:	4b10      	ldr	r3, [pc, #64]	; (b73ec <srand+0x44>)
   b73ac:	681d      	ldr	r5, [r3, #0]
   b73ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b73b0:	4604      	mov	r4, r0
   b73b2:	b9b3      	cbnz	r3, b73e2 <srand+0x3a>
   b73b4:	2018      	movs	r0, #24
   b73b6:	f7fe fda3 	bl	b5f00 <malloc>
   b73ba:	4602      	mov	r2, r0
   b73bc:	63a8      	str	r0, [r5, #56]	; 0x38
   b73be:	b920      	cbnz	r0, b73ca <srand+0x22>
   b73c0:	4b0b      	ldr	r3, [pc, #44]	; (b73f0 <srand+0x48>)
   b73c2:	480c      	ldr	r0, [pc, #48]	; (b73f4 <srand+0x4c>)
   b73c4:	2142      	movs	r1, #66	; 0x42
   b73c6:	f7fe fdb3 	bl	b5f30 <__assert_func>
   b73ca:	490b      	ldr	r1, [pc, #44]	; (b73f8 <srand+0x50>)
   b73cc:	4b0b      	ldr	r3, [pc, #44]	; (b73fc <srand+0x54>)
   b73ce:	e9c0 1300 	strd	r1, r3, [r0]
   b73d2:	4b0b      	ldr	r3, [pc, #44]	; (b7400 <srand+0x58>)
   b73d4:	6083      	str	r3, [r0, #8]
   b73d6:	230b      	movs	r3, #11
   b73d8:	8183      	strh	r3, [r0, #12]
   b73da:	2100      	movs	r1, #0
   b73dc:	2001      	movs	r0, #1
   b73de:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b73e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b73e4:	2200      	movs	r2, #0
   b73e6:	611c      	str	r4, [r3, #16]
   b73e8:	615a      	str	r2, [r3, #20]
   b73ea:	bd38      	pop	{r3, r4, r5, pc}
   b73ec:	2003e158 	.word	0x2003e158
   b73f0:	000b78a1 	.word	0x000b78a1
   b73f4:	000b78b8 	.word	0x000b78b8
   b73f8:	abcd330e 	.word	0xabcd330e
   b73fc:	e66d1234 	.word	0xe66d1234
   b7400:	0005deec 	.word	0x0005deec

000b7404 <rand>:
   b7404:	4b16      	ldr	r3, [pc, #88]	; (b7460 <rand+0x5c>)
   b7406:	b510      	push	{r4, lr}
   b7408:	681c      	ldr	r4, [r3, #0]
   b740a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b740c:	b9b3      	cbnz	r3, b743c <rand+0x38>
   b740e:	2018      	movs	r0, #24
   b7410:	f7fe fd76 	bl	b5f00 <malloc>
   b7414:	63a0      	str	r0, [r4, #56]	; 0x38
   b7416:	b928      	cbnz	r0, b7424 <rand+0x20>
   b7418:	4602      	mov	r2, r0
   b741a:	4b12      	ldr	r3, [pc, #72]	; (b7464 <rand+0x60>)
   b741c:	4812      	ldr	r0, [pc, #72]	; (b7468 <rand+0x64>)
   b741e:	214e      	movs	r1, #78	; 0x4e
   b7420:	f7fe fd86 	bl	b5f30 <__assert_func>
   b7424:	4a11      	ldr	r2, [pc, #68]	; (b746c <rand+0x68>)
   b7426:	4b12      	ldr	r3, [pc, #72]	; (b7470 <rand+0x6c>)
   b7428:	e9c0 2300 	strd	r2, r3, [r0]
   b742c:	4b11      	ldr	r3, [pc, #68]	; (b7474 <rand+0x70>)
   b742e:	6083      	str	r3, [r0, #8]
   b7430:	230b      	movs	r3, #11
   b7432:	8183      	strh	r3, [r0, #12]
   b7434:	2201      	movs	r2, #1
   b7436:	2300      	movs	r3, #0
   b7438:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b743c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b743e:	4a0e      	ldr	r2, [pc, #56]	; (b7478 <rand+0x74>)
   b7440:	6920      	ldr	r0, [r4, #16]
   b7442:	6963      	ldr	r3, [r4, #20]
   b7444:	490d      	ldr	r1, [pc, #52]	; (b747c <rand+0x78>)
   b7446:	4342      	muls	r2, r0
   b7448:	fb01 2203 	mla	r2, r1, r3, r2
   b744c:	fba0 0101 	umull	r0, r1, r0, r1
   b7450:	1c43      	adds	r3, r0, #1
   b7452:	eb42 0001 	adc.w	r0, r2, r1
   b7456:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b745a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b745e:	bd10      	pop	{r4, pc}
   b7460:	2003e158 	.word	0x2003e158
   b7464:	000b78a1 	.word	0x000b78a1
   b7468:	000b78b8 	.word	0x000b78b8
   b746c:	abcd330e 	.word	0xabcd330e
   b7470:	e66d1234 	.word	0xe66d1234
   b7474:	0005deec 	.word	0x0005deec
   b7478:	5851f42d 	.word	0x5851f42d
   b747c:	4c957f2d 	.word	0x4c957f2d

000b7480 <strlen>:
   b7480:	4603      	mov	r3, r0
   b7482:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7486:	2a00      	cmp	r2, #0
   b7488:	d1fb      	bne.n	b7482 <strlen+0x2>
   b748a:	1a18      	subs	r0, r3, r0
   b748c:	3801      	subs	r0, #1
   b748e:	4770      	bx	lr

000b7490 <__register_exitproc>:
   b7490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7494:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7550 <__register_exitproc+0xc0>
   b7498:	4606      	mov	r6, r0
   b749a:	f8d8 0000 	ldr.w	r0, [r8]
   b749e:	461f      	mov	r7, r3
   b74a0:	460d      	mov	r5, r1
   b74a2:	4691      	mov	r9, r2
   b74a4:	f000 f856 	bl	b7554 <__retarget_lock_acquire_recursive>
   b74a8:	4b25      	ldr	r3, [pc, #148]	; (b7540 <__register_exitproc+0xb0>)
   b74aa:	681c      	ldr	r4, [r3, #0]
   b74ac:	b934      	cbnz	r4, b74bc <__register_exitproc+0x2c>
   b74ae:	4c25      	ldr	r4, [pc, #148]	; (b7544 <__register_exitproc+0xb4>)
   b74b0:	601c      	str	r4, [r3, #0]
   b74b2:	4b25      	ldr	r3, [pc, #148]	; (b7548 <__register_exitproc+0xb8>)
   b74b4:	b113      	cbz	r3, b74bc <__register_exitproc+0x2c>
   b74b6:	681b      	ldr	r3, [r3, #0]
   b74b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b74bc:	6863      	ldr	r3, [r4, #4]
   b74be:	2b1f      	cmp	r3, #31
   b74c0:	dd07      	ble.n	b74d2 <__register_exitproc+0x42>
   b74c2:	f8d8 0000 	ldr.w	r0, [r8]
   b74c6:	f000 f847 	bl	b7558 <__retarget_lock_release_recursive>
   b74ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b74ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b74d2:	b34e      	cbz	r6, b7528 <__register_exitproc+0x98>
   b74d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b74d8:	b988      	cbnz	r0, b74fe <__register_exitproc+0x6e>
   b74da:	4b1c      	ldr	r3, [pc, #112]	; (b754c <__register_exitproc+0xbc>)
   b74dc:	b923      	cbnz	r3, b74e8 <__register_exitproc+0x58>
   b74de:	f8d8 0000 	ldr.w	r0, [r8]
   b74e2:	f000 f838 	bl	b7556 <__retarget_lock_release>
   b74e6:	e7f0      	b.n	b74ca <__register_exitproc+0x3a>
   b74e8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b74ec:	f7fe fd08 	bl	b5f00 <malloc>
   b74f0:	2800      	cmp	r0, #0
   b74f2:	d0f4      	beq.n	b74de <__register_exitproc+0x4e>
   b74f4:	2300      	movs	r3, #0
   b74f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b74fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b74fe:	6863      	ldr	r3, [r4, #4]
   b7500:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7504:	2201      	movs	r2, #1
   b7506:	409a      	lsls	r2, r3
   b7508:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b750c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7510:	4313      	orrs	r3, r2
   b7512:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7516:	2e02      	cmp	r6, #2
   b7518:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b751c:	bf02      	ittt	eq
   b751e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7522:	4313      	orreq	r3, r2
   b7524:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7528:	6863      	ldr	r3, [r4, #4]
   b752a:	f8d8 0000 	ldr.w	r0, [r8]
   b752e:	1c5a      	adds	r2, r3, #1
   b7530:	3302      	adds	r3, #2
   b7532:	6062      	str	r2, [r4, #4]
   b7534:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7538:	f000 f80e 	bl	b7558 <__retarget_lock_release_recursive>
   b753c:	2000      	movs	r0, #0
   b753e:	e7c6      	b.n	b74ce <__register_exitproc+0x3e>
   b7540:	2003e7e8 	.word	0x2003e7e8
   b7544:	2003e75c 	.word	0x2003e75c
   b7548:	00000000 	.word	0x00000000
   b754c:	000b5f01 	.word	0x000b5f01
   b7550:	2003e1bc 	.word	0x2003e1bc

000b7554 <__retarget_lock_acquire_recursive>:
   b7554:	4770      	bx	lr

000b7556 <__retarget_lock_release>:
   b7556:	4770      	bx	lr

000b7558 <__retarget_lock_release_recursive>:
   b7558:	4770      	bx	lr

000b755a <link_code_end>:
	...

000b755c <dynalib_user>:
   b755c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b756c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b757c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b758c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b759c:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b75ac:	4f4d 4544 7525 003e 7453 7261 6974 676e     MODE%u>.Starting
   b75bc:	4420 7461 2061 6f4c 6767 6e69 2067 000a      Data Logging ..
   b75cc:	6143 276e 2074 7263 6165 6574 6620 6c69     Can't create fil
   b75dc:	2065 616e 656d 6600 6c69 2e65 706f 6e65     e name.file.open
   b75ec:	4c00 676f 6967 676e 7420 3a6f 2520 2073     .Logging to: %s 
   b75fc:	000a 6625 202c 6625 202c 6625 202c 6625     ..%f, %f, %f, %f
   b760c:	202c 6625 000a 7277 7469 2065 7265 6f72     , %f..write erro
   b761c:	0072 6f44 656e 0a20 5200 6165 7964 6620     r.Done ..Ready f
   b762c:	726f 6e20 7865 2074 6164 6174 6c20 676f     or next data log
   b763c:	0a20 4300 6e61 7427 6120 6363 7365 2073      ..Can't access 
   b764c:	4453 6320 7261 2e64 4420 206f 6f6e 2074     SD card. Do not 
   b765c:	6572 6f66 6d72 7461 002e 6f4e 6320 7261     reformat..No car
   b766c:	2c64 7720 6f72 676e 6320 6968 2070 6573     d, wrong chip se
   b767c:	656c 7463 7020 6e69 202c 726f 5320 4950     lect pin, or SPI
   b768c:	7020 6f72 6c62 6d65 003f 4453 6520 7272      problem?.SD err
   b769c:	726f 6f43 6564 203a 5830 2c00 5830 4900     orCode: 0X.,0X.I
   b76ac:	766e 6c61 6469 6620 726f 616d 2c74 7220     nvalid format, r
   b76bc:	6665 726f 616d 2074 4453 002e 6143 276e     eformat SD..Can'
   b76cc:	2074 706f 6e65 7220 6f6f 2074 6964 6572     t open root dire
   b76dc:	7463 726f 2e79 4e00 206f 7265 6f72 2072     ctory..No error 
   b76ec:	6f66 6e75 2e64 4800 6c65 6f6c 000a 0000     found..Hello....

000b76fc <_ZTVN8particle11SPISettingsE>:
	...
   b7704:	4105 000b 40ab 000b 40af 000b               .A...@...@..

000b7710 <_ZTV6SdFile>:
	...
   b7718:	40ad 000b 40bd 000b 40d1 000b 40cb 000b     .@...@...@...@..

000b7728 <_ZTVN5spark12NetworkClassE>:
	...
   b7730:	5f51 000b 5f5b 000b 5f65 000b 5f6f 000b     Q_..[_..e_..o_..
   b7740:	5f79 000b 5f85 000b 5f91 000b 5f99 000b     y_..._..._..._..
   b7750:	5fa1 000b 5fad 000b 5fb5 000b 5fbf 000b     ._..._..._..._..
   b7760:	5fc9 000b                                   ._..

000b7764 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7764:	0800 1810 2820 3830                         .... (08

000b776c <_ZTV7TwoWire>:
	...
   b7774:	6269 000b 62b3 000b 628b 000b 626b 000b     ib...b...b..kb..
   b7784:	6293 000b 629b 000b 62a3 000b 62ab 000b     .b...b...b...b..

000b7794 <_ZTV11USARTSerial>:
	...
   b779c:	62e5 000b 6351 000b 6329 000b 6789 000b     .b..Qc..)c...g..
   b77ac:	62f9 000b 6315 000b 6307 000b 6323 000b     .b...c...c..#c..
   b77bc:	62e7 000b 62eb 000b                         .b...b..

000b77c4 <_ZTVN5spark13CellularClassE>:
	...
   b77cc:	63e7 000b 63dd 000b 63d3 000b 6389 000b     .c...c...c...c..
   b77dc:	63c7 000b 63bb 000b 5f91 000b 5f99 000b     .c...c..._..._..
   b77ec:	63af 000b 63a7 000b 639d 000b 6393 000b     .c...c...c...c..
   b77fc:	5fc9 000b                                   ._..

000b7800 <_ZTV9USBSerial>:
	...
   b7808:	6427 000b 648f 000b 6465 000b 6789 000b     'd...d..ed...g..
   b7818:	6457 000b 6429 000b 6439 000b 6489 000b     Wd..)d..9d...d..
   b7828:	6449 000b 6421 000b                         Id..!d..

000b7830 <_ZTV9IPAddress>:
	...
   b7838:	6539 000b 6529 000b 652b 000b 5925 252d     9e..)e..+e..%Y-%
   b7848:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b7858:	7361 7463 6d69 0065 7061 0070               asctime.app.

000b7864 <_ZTVN5spark13EthernetClassE>:
	...
   b786c:	692b 000b 6921 000b 6917 000b 690d 000b     +i..!i...i...i..
   b787c:	6901 000b 68f5 000b 5f91 000b 5f99 000b     .i...h..._..._..
   b788c:	68e9 000b 68e1 000b 68d7 000b 68cd 000b     .h...h...h...h..
   b789c:	5fc9 000b                                   ._..

000b78a0 <_ZSt7nothrow>:
   b78a0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b78b0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b78c0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b78d0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b78e0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b78f0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b7900:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b7910:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b7920:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b7930:	646e 632e                                    nd.c.

000b7935 <link_const_variable_data_end>:
   b7935:	00          	.byte	0x00
	...

000b7938 <link_constructors_location>:
   b7938:	000b44d5 	.word	0x000b44d5
   b793c:	000b60a1 	.word	0x000b60a1
   b7940:	000b63f1 	.word	0x000b63f1
   b7944:	000b6751 	.word	0x000b6751
   b7948:	000b6765 	.word	0x000b6765
   b794c:	000b6779 	.word	0x000b6779
   b7950:	000b6899 	.word	0x000b6899
   b7954:	000b68a9 	.word	0x000b68a9
   b7958:	000b6935 	.word	0x000b6935

000b795c <link_constructors_end>:
   b795c:	00000000 	.word	0x00000000
