
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/superProbe/target/1.5.2/xenon/superProbe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d83c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e130  000d83c4  0001e130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000634  2003e1bc  2003e1bc  0002e1bc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8450  000d8450  00028450  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8478  000d8478  00028478  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ee843  00000000  00000000  0002847c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000124f9  00000000  00000000  00116cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002a58  00000000  00000000  001291b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000358e8  00000000  00000000  0012bc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002af7c  00000000  00000000  001614f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010f055  00000000  00000000  0018c474  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000223cd  00000000  00000000  0029b4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000050a8  00000000  00000000  002bd896  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000def0  00000000  00000000  002c2940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fd83 	bl	d7b3c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fd88 	bl	d7b52 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e130 	.word	0x2003e130
   d404c:	000d83c4 	.word	0x000d83c4
   d4050:	2003e1bc 	.word	0x2003e1bc
   d4054:	2003e1bc 	.word	0x2003e1bc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f8f7 	bl	d6250 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d83c0 	.word	0x000d83c0
   d4084:	000d838c 	.word	0x000d838c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bf22 	b.w	d4ed0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fad1 	bl	d4634 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b89d 	b.w	d61d4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 ba07 	b.w	d54ac <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 ba0d 	b.w	d54bc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 ba0b 	b.w	d54bc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40b6:	b538      	push	{r3, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40ba:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40bc:	b128      	cbz	r0, d40ca <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40be:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40c0:	210c      	movs	r1, #12
   d40c2:	f002 fc7d 	bl	d69c0 <_ZdlPvj>
            wakeupSource = next;
   d40c6:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40c8:	e7f8      	b.n	d40bc <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40ca:	4620      	mov	r0, r4
   d40cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40d0:	b513      	push	{r0, r1, r4, lr}
   d40d2:	4b05      	ldr	r3, [pc, #20]	; (d40e8 <_ZN10CloudClass7publishEPKcS1_.isra.7+0x18>)
   d40d4:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d6:	f88d 3000 	strb.w	r3, [sp]
   d40da:	233c      	movs	r3, #60	; 0x3c
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40dc:	4604      	mov	r4, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40de:	f001 fed1 	bl	d5e84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
   d40e2:	4620      	mov	r0, r4
   d40e4:	b002      	add	sp, #8
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003e1c4 	.word	0x2003e1c4

000d40ec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ec:	b510      	push	{r4, lr}
   d40ee:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40f0:	6800      	ldr	r0, [r0, #0]
   d40f2:	b108      	cbz	r0, d40f8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40f4:	f001 f9e2 	bl	d54bc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}
   d40fc:	0000      	movs	r0, r0
	...

000d4100 <_Z11takeSamplesv>:
  System.sleep(config);
  System.reset();
}

void takeSamples()
{
   d4100:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4102:	ed2d 8b02 	vpush	{d8}
   d4106:	4c60      	ldr	r4, [pc, #384]	; (d4288 <_Z11takeSamplesv+0x188>)
   d4108:	b08b      	sub	sp, #44	; 0x2c
   d410a:	f504 76c8 	add.w	r6, r4, #400	; 0x190
   d410e:	4625      	mov	r5, r4
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
  {
    samples[i] = analogRead(THERMISTORPIN);
   d4110:	2013      	movs	r0, #19
   d4112:	f002 fc30 	bl	d6976 <analogRead>
   d4116:	ee07 0a90 	vmov	s15, r0
   d411a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    delay(10);
   d411e:	200a      	movs	r0, #10
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
  {
    samples[i] = analogRead(THERMISTORPIN);
   d4120:	ece5 7a01 	vstmia	r5!, {s15}
    delay(10);
   d4124:	f002 f906 	bl	d6334 <delay>
void takeSamples()
{
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
   d4128:	42ae      	cmp	r6, r5
   d412a:	d1f1      	bne.n	d4110 <_Z11takeSamplesv+0x10>
   d412c:	eddf 7a57 	vldr	s15, [pc, #348]	; d428c <_Z11takeSamplesv+0x18c>

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
  {
    average += samples[i];
   d4130:	ecb4 7a01 	vldmia	r4!, {s14}
    delay(10);
  }

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
   d4134:	42a6      	cmp	r6, r4
  {
    average += samples[i];
   d4136:	ee77 7a87 	vadd.f32	s15, s15, s14
    delay(10);
  }

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
   d413a:	d1f9      	bne.n	d4130 <_Z11takeSamplesv+0x30>
  {
    average += samples[i];
  }
  average /= NUMSAMPLES;
   d413c:	eddf 6a54 	vldr	s13, [pc, #336]	; d4290 <_Z11takeSamplesv+0x190>
   d4140:	4b54      	ldr	r3, [pc, #336]	; (d4294 <_Z11takeSamplesv+0x194>)

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d4142:	4c55      	ldr	r4, [pc, #340]	; (d4298 <_Z11takeSamplesv+0x198>)
  tempC /= BCOEFFICIENT;                         // 1/B * ln(R/Ro)
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
  tempC = 1.0 / tempC;                           // Invert
  tempC -= 273.15;                               // convert absolute temp to C

  tempF = tempC * 1.8 + 32;
   d4144:	4d55      	ldr	r5, [pc, #340]	; (d429c <_Z11takeSamplesv+0x19c>)
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
  {
    average += samples[i];
  }
  average /= NUMSAMPLES;
   d4146:	ee87 7aa6 	vdiv.f32	s14, s15, s13

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;
   d414a:	eddf 6a55 	vldr	s13, [pc, #340]	; d42a0 <_Z11takeSamplesv+0x1a0>
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
  {
    average += samples[i];
  }
  average /= NUMSAMPLES;
   d414e:	ed83 7a00 	vstr	s14, [r3]

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;
   d4152:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d4156:	4b53      	ldr	r3, [pc, #332]	; (d42a4 <_Z11takeSamplesv+0x1a4>)
   d4158:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d415c:	ed9f 7a52 	vldr	s14, [pc, #328]	; d42a8 <_Z11takeSamplesv+0x1a8>
   d4160:	ee77 7ac8 	vsub.f32	s15, s15, s16
   d4164:	eec7 6a27 	vdiv.f32	s13, s14, s15

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d4168:	eec6 7a87 	vdiv.f32	s15, s13, s14
  }
  average /= NUMSAMPLES;

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;
   d416c:	edc3 6a00 	vstr	s13, [r3]

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   d4170:	edc4 7a00 	vstr	s15, [r4]
  tempC = log(tempC);                            // ln(R/Ro)
   d4174:	ee17 0a90 	vmov	r0, s15
   d4178:	f003 f97e 	bl	d7478 <__aeabi_f2d>
   d417c:	ec41 0b10 	vmov	d0, r0, r1
   d4180:	f002 fd7c 	bl	d6c7c <log>
  tempC /= BCOEFFICIENT;                         // 1/B * ln(R/Ro)
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
  tempC = 1.0 / tempC;                           // Invert
  tempC -= 273.15;                               // convert absolute temp to C
   d4184:	ec51 0b10 	vmov	r0, r1, d0
   d4188:	f003 fc7a 	bl	d7a80 <__aeabi_d2f>
   d418c:	eddf 7a47 	vldr	s15, [pc, #284]	; d42ac <_Z11takeSamplesv+0x1ac>
   d4190:	ee06 0a90 	vmov	s13, r0
   d4194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4198:	ee17 0a10 	vmov	r0, s14
   d419c:	f003 f96c 	bl	d7478 <__aeabi_f2d>
   d41a0:	a331      	add	r3, pc, #196	; (adr r3, d4268 <_Z11takeSamplesv+0x168>)
   d41a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41a6:	f003 f809 	bl	d71bc <__adddf3>
   d41aa:	f003 fc69 	bl	d7a80 <__aeabi_d2f>
   d41ae:	ee07 0a10 	vmov	s14, r0
   d41b2:	eec8 7a07 	vdiv.f32	s15, s16, s14
   d41b6:	ee17 0a90 	vmov	r0, s15
   d41ba:	f003 f95d 	bl	d7478 <__aeabi_f2d>
   d41be:	a32c      	add	r3, pc, #176	; (adr r3, d4270 <_Z11takeSamplesv+0x170>)
   d41c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41c4:	f002 fff8 	bl	d71b8 <__aeabi_dsub>
   d41c8:	f003 fc5a 	bl	d7a80 <__aeabi_d2f>
   d41cc:	6020      	str	r0, [r4, #0]

  tempF = tempC * 1.8 + 32;
   d41ce:	f003 f953 	bl	d7478 <__aeabi_f2d>
   d41d2:	a329      	add	r3, pc, #164	; (adr r3, d4278 <_Z11takeSamplesv+0x178>)
   d41d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41d8:	f003 f9a2 	bl	d7520 <__aeabi_dmul>
   d41dc:	2200      	movs	r2, #0
   d41de:	4b34      	ldr	r3, [pc, #208]	; (d42b0 <_Z11takeSamplesv+0x1b0>)
   d41e0:	f002 ffec 	bl	d71bc <__adddf3>
   d41e4:	f003 fc4c 	bl	d7a80 <__aeabi_d2f>
   d41e8:	6028      	str	r0, [r5, #0]

  // tempF = random(0,23000)/100.0;

  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   d41ea:	f001 fc61 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d41ee:	682d      	ldr	r5, [r5, #0]
   d41f0:	4b30      	ldr	r3, [pc, #192]	; (d42b4 <_Z11takeSamplesv+0x1b4>)
   d41f2:	6824      	ldr	r4, [r4, #0]
   d41f4:	681f      	ldr	r7, [r3, #0]
   d41f6:	4606      	mov	r6, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d41f8:	a806      	add	r0, sp, #24
   d41fa:	f001 f8b1 	bl	d5360 <spark_deviceID>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41fe:	9b06      	ldr	r3, [sp, #24]
   d4200:	9305      	str	r3, [sp, #20]
   d4202:	4628      	mov	r0, r5
   d4204:	9704      	str	r7, [sp, #16]
   d4206:	f003 f937 	bl	d7478 <__aeabi_f2d>
   d420a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d420e:	4620      	mov	r0, r4
   d4210:	f003 f932 	bl	d7478 <__aeabi_f2d>
   d4214:	4a28      	ldr	r2, [pc, #160]	; (d42b8 <_Z11takeSamplesv+0x1b8>)

  batteryVoltage = analogRead(BATT) * 0.0011224;
   d4216:	4c29      	ldr	r4, [pc, #164]	; (d42bc <_Z11takeSamplesv+0x1bc>)
   d4218:	e9cd 0100 	strd	r0, r1, [sp]
   d421c:	2100      	movs	r1, #0
   d421e:	4630      	mov	r0, r6
   d4220:	f002 f92b 	bl	d647a <_ZN5Print11printf_implEbPKcz>

  tempF = tempC * 1.8 + 32;

  // tempF = random(0,23000)/100.0;

  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   d4224:	a806      	add	r0, sp, #24
   d4226:	f002 f97f 	bl	d6528 <_ZN6StringD1Ev>

  batteryVoltage = analogRead(BATT) * 0.0011224;
   d422a:	2018      	movs	r0, #24
   d422c:	f002 fba3 	bl	d6976 <analogRead>
   d4230:	f003 f910 	bl	d7454 <__aeabi_i2d>
   d4234:	a312      	add	r3, pc, #72	; (adr r3, d4280 <_Z11takeSamplesv+0x180>)
   d4236:	e9d3 2300 	ldrd	r2, r3, [r3]
   d423a:	f003 f971 	bl	d7520 <__aeabi_dmul>
   d423e:	f003 fc1f 	bl	d7a80 <__aeabi_d2f>
   d4242:	6020      	str	r0, [r4, #0]
  Serial.printf("voltage: %f\n", batteryVoltage);
   d4244:	f001 fc34 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4248:	4605      	mov	r5, r0
   d424a:	6820      	ldr	r0, [r4, #0]
   d424c:	f003 f914 	bl	d7478 <__aeabi_f2d>
   d4250:	4a1b      	ldr	r2, [pc, #108]	; (d42c0 <_Z11takeSamplesv+0x1c0>)
   d4252:	e9cd 0100 	strd	r0, r1, [sp]
   d4256:	2100      	movs	r1, #0
   d4258:	4628      	mov	r0, r5
   d425a:	f002 f90e 	bl	d647a <_ZN5Print11printf_implEbPKcz>

  // delay(1000);
}
   d425e:	b00b      	add	sp, #44	; 0x2c
   d4260:	ecbd 8b02 	vpop	{d8}
   d4264:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4266:	bf00      	nop
   d4268:	dcb5db83 	.word	0xdcb5db83
   d426c:	3f6b79e1 	.word	0x3f6b79e1
   d4270:	66666666 	.word	0x66666666
   d4274:	40711266 	.word	0x40711266
   d4278:	cccccccd 	.word	0xcccccccd
   d427c:	3ffccccc 	.word	0x3ffccccc
   d4280:	d2c10294 	.word	0xd2c10294
   d4284:	3f5263af 	.word	0x3f5263af
   d4288:	2003e210 	.word	0x2003e210
   d428c:	00000000 	.word	0x00000000
   d4290:	42c80000 	.word	0x42c80000
   d4294:	2003e1e4 	.word	0x2003e1e4
   d4298:	2003e208 	.word	0x2003e208
   d429c:	2003e204 	.word	0x2003e204
   d42a0:	457ff000 	.word	0x457ff000
   d42a4:	2003e1c0 	.word	0x2003e1c0
   d42a8:	461c4000 	.word	0x461c4000
   d42ac:	4576e000 	.word	0x4576e000
   d42b0:	40400000 	.word	0x40400000
   d42b4:	2003e3a0 	.word	0x2003e3a0
   d42b8:	000d7c20 	.word	0x000d7c20
   d42bc:	2003e1dc 	.word	0x2003e1dc
   d42c0:	000d7c4e 	.word	0x000d7c4e

000d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42c6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42ca:	b17c      	cbz	r4, d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42cc:	6863      	ldr	r3, [r4, #4]
   d42ce:	3b01      	subs	r3, #1
   d42d0:	6063      	str	r3, [r4, #4]
   d42d2:	b95b      	cbnz	r3, d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42d4:	6823      	ldr	r3, [r4, #0]
   d42d6:	4620      	mov	r0, r4
   d42d8:	689b      	ldr	r3, [r3, #8]
   d42da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42dc:	68a3      	ldr	r3, [r4, #8]
   d42de:	3b01      	subs	r3, #1
   d42e0:	60a3      	str	r3, [r4, #8]
   d42e2:	b91b      	cbnz	r3, d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42e4:	6823      	ldr	r3, [r4, #0]
   d42e6:	4620      	mov	r0, r4
   d42e8:	68db      	ldr	r3, [r3, #12]
   d42ea:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42ec:	4628      	mov	r0, r5
   d42ee:	bd38      	pop	{r3, r4, r5, pc}

000d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>:
   d42f0:	4613      	mov	r3, r2
   d42f2:	460a      	mov	r2, r1
   d42f4:	2100      	movs	r1, #0
   d42f6:	f002 b8c0 	b.w	d647a <_ZN5Print11printf_implEbPKcz>
	...

000d42fc <_Z12createBufferiiff>:
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d42fc:	b530      	push	{r4, r5, lr}
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d42fe:	4b19      	ldr	r3, [pc, #100]	; (d4364 <_Z12createBufferiiff+0x68>)
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d4300:	b08b      	sub	sp, #44	; 0x2c
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d4302:	681b      	ldr	r3, [r3, #0]
   d4304:	9304      	str	r3, [sp, #16]
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d4306:	4604      	mov	r4, r0
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d4308:	ee10 0a90 	vmov	r0, s1
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   d430c:	460d      	mov	r5, r1
   d430e:	ed8d 0a07 	vstr	s0, [sp, #28]
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   d4312:	f003 f8b1 	bl	d7478 <__aeabi_f2d>
   d4316:	ed9d 0a07 	vldr	s0, [sp, #28]
   d431a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d431e:	ee10 0a10 	vmov	r0, s0
   d4322:	f003 f8a9 	bl	d7478 <__aeabi_f2d>
   d4326:	462b      	mov	r3, r5
   d4328:	e9cd 0100 	strd	r0, r1, [sp]
   d432c:	4622      	mov	r2, r4
   d432e:	490e      	ldr	r1, [pc, #56]	; (d4368 <_Z12createBufferiiff+0x6c>)
   d4330:	480e      	ldr	r0, [pc, #56]	; (d436c <_Z12createBufferiiff+0x70>)
   d4332:	f001 f8d3 	bl	d54dc <sprintf>
  if (serialPrint)
   d4336:	4b0e      	ldr	r3, [pc, #56]	; (d4370 <_Z12createBufferiiff+0x74>)
   d4338:	781b      	ldrb	r3, [r3, #0]
   d433a:	b12b      	cbz	r3, d4348 <_Z12createBufferiiff+0x4c>
  {
    Serial.printf("createBuffer: %s", buffer);
   d433c:	f001 fbb8 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4340:	4a0a      	ldr	r2, [pc, #40]	; (d436c <_Z12createBufferiiff+0x70>)
   d4342:	490c      	ldr	r1, [pc, #48]	; (d4374 <_Z12createBufferiiff+0x78>)
   d4344:	f7ff ffd4 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
  }
  if (particlePublish)
   d4348:	4b0b      	ldr	r3, [pc, #44]	; (d4378 <_Z12createBufferiiff+0x7c>)
   d434a:	781b      	ldrb	r3, [r3, #0]
   d434c:	b13b      	cbz	r3, d435e <_Z12createBufferiiff+0x62>
  {
    Particle.publish("createBuffer()", buffer);
   d434e:	a808      	add	r0, sp, #32
   d4350:	4a06      	ldr	r2, [pc, #24]	; (d436c <_Z12createBufferiiff+0x70>)
   d4352:	490a      	ldr	r1, [pc, #40]	; (d437c <_Z12createBufferiiff+0x80>)
   d4354:	f7ff febc 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4358:	a809      	add	r0, sp, #36	; 0x24
   d435a:	f7ff ffb3 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d435e:	b00b      	add	sp, #44	; 0x2c
   d4360:	bd30      	pop	{r4, r5, pc}
   d4362:	bf00      	nop
   d4364:	2003e144 	.word	0x2003e144
   d4368:	000d7c5b 	.word	0x000d7c5b
   d436c:	2003e3a4 	.word	0x2003e3a4
   d4370:	2003e1d4 	.word	0x2003e1d4
   d4374:	000d7c7a 	.word	0x000d7c7a
   d4378:	2003e1e0 	.word	0x2003e1e0
   d437c:	000d7c8b 	.word	0x000d7c8b

000d4380 <_Z8sendDatav>:

  // delay(1000);
}

void sendData()
{
   d4380:	b500      	push	{lr}
   d4382:	b089      	sub	sp, #36	; 0x24
  String reply;
   d4384:	4922      	ldr	r1, [pc, #136]	; (d4410 <_Z8sendDatav+0x90>)
   d4386:	4668      	mov	r0, sp
   d4388:	f002 f915 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.println(buffer);
   d438c:	f001 fb00 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4390:	4920      	ldr	r1, [pc, #128]	; (d4414 <_Z8sendDatav+0x94>)
   d4392:	f002 f848 	bl	d6426 <_ZN5Print7printlnEPKc>
  Serial1.flush();
   d4396:	f001 fafb 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d439a:	6803      	ldr	r3, [r0, #0]
   d439c:	69db      	ldr	r3, [r3, #28]
   d439e:	4798      	blx	r3
  delay(2300);
   d43a0:	f640 00fc 	movw	r0, #2300	; 0x8fc
   d43a4:	f001 ffc6 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d43a8:	f001 faf2 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d43ac:	6803      	ldr	r3, [r0, #0]
   d43ae:	691b      	ldr	r3, [r3, #16]
   d43b0:	4798      	blx	r3
   d43b2:	2800      	cmp	r0, #0
   d43b4:	dd26      	ble.n	d4404 <_Z8sendDatav+0x84>
  {
    reply = Serial1.readStringUntil('\n');
   d43b6:	f001 faeb 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d43ba:	220a      	movs	r2, #10
   d43bc:	4601      	mov	r1, r0
   d43be:	a804      	add	r0, sp, #16
   d43c0:	f001 ffe4 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d43c4:	a904      	add	r1, sp, #16
   d43c6:	4668      	mov	r0, sp
   d43c8:	f002 f925 	bl	d6616 <_ZN6StringaSEOS_>
   d43cc:	a804      	add	r0, sp, #16
   d43ce:	f002 f8ab 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint == true)
   d43d2:	4b11      	ldr	r3, [pc, #68]	; (d4418 <_Z8sendDatav+0x98>)
   d43d4:	781b      	ldrb	r3, [r3, #0]
   d43d6:	b153      	cbz	r3, d43ee <_Z8sendDatav+0x6e>
    {
      Serial.printf("send reply: %s\n", reply.c_str()); //+OK
   d43d8:	f001 fb6a 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d43dc:	9a00      	ldr	r2, [sp, #0]
   d43de:	490f      	ldr	r1, [pc, #60]	; (d441c <_Z8sendDatav+0x9c>)
   d43e0:	f7ff ff86 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      Serial.flush();
   d43e4:	f001 fb64 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d43e8:	6803      	ldr	r3, [r0, #0]
   d43ea:	69db      	ldr	r3, [r3, #28]
   d43ec:	4798      	blx	r3
    }
    if (particlePublish)
   d43ee:	4b0c      	ldr	r3, [pc, #48]	; (d4420 <_Z8sendDatav+0xa0>)
   d43f0:	781b      	ldrb	r3, [r3, #0]
   d43f2:	b13b      	cbz	r3, d4404 <_Z8sendDatav+0x84>
    {
      Particle.publish("sendData()", reply);
   d43f4:	a804      	add	r0, sp, #16
   d43f6:	9a00      	ldr	r2, [sp, #0]
   d43f8:	490a      	ldr	r1, [pc, #40]	; (d4424 <_Z8sendDatav+0xa4>)
   d43fa:	f7ff fe69 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d43fe:	a805      	add	r0, sp, #20
   d4400:	f7ff ff60 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  // delay(1000);
}

void sendData()
{
  String reply;
   d4404:	4668      	mov	r0, sp
   d4406:	f002 f88f 	bl	d6528 <_ZN6StringD1Ev>
    if (particlePublish)
    {
      Particle.publish("sendData()", reply);
    }
  }
}
   d440a:	b009      	add	sp, #36	; 0x24
   d440c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4410:	000d7e39 	.word	0x000d7e39
   d4414:	2003e3a4 	.word	0x2003e3a4
   d4418:	2003e1d4 	.word	0x2003e1d4
   d441c:	000d7c9a 	.word	0x000d7c9a
   d4420:	2003e1e0 	.word	0x2003e1e0
   d4424:	000d7caa 	.word	0x000d7caa

000d4428 <_ZN5Print6printfIIEEEjPKcDpT_>:
   d4428:	460a      	mov	r2, r1
   d442a:	2100      	movs	r1, #0
   d442c:	f002 b825 	b.w	d647a <_ZN5Print11printf_implEbPKcz>

000d4430 <_Z6atTestv>:
    Particle.publish("createBuffer()", buffer);
  }
}

void atTest() // 1
{             // test if module responds to commands
   d4430:	b500      	push	{lr}
   d4432:	b089      	sub	sp, #36	; 0x24
  String reply;
   d4434:	491b      	ldr	r1, [pc, #108]	; (d44a4 <_Z6atTestv+0x74>)
   d4436:	4668      	mov	r0, sp
   d4438:	f002 f8bd 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT\r\n");
   d443c:	f001 faa8 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4440:	4919      	ldr	r1, [pc, #100]	; (d44a8 <_Z6atTestv+0x78>)
   d4442:	f7ff fff1 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
  delay(200);
   d4446:	20c8      	movs	r0, #200	; 0xc8
   d4448:	f001 ff74 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d444c:	f001 faa0 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4450:	6803      	ldr	r3, [r0, #0]
   d4452:	691b      	ldr	r3, [r3, #16]
   d4454:	4798      	blx	r3
   d4456:	2800      	cmp	r0, #0
   d4458:	dd1e      	ble.n	d4498 <_Z6atTestv+0x68>
  {
    reply = Serial1.readStringUntil('\n');
   d445a:	f001 fa99 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d445e:	220a      	movs	r2, #10
   d4460:	4601      	mov	r1, r0
   d4462:	a804      	add	r0, sp, #16
   d4464:	f001 ff92 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4468:	a904      	add	r1, sp, #16
   d446a:	4668      	mov	r0, sp
   d446c:	f002 f8d3 	bl	d6616 <_ZN6StringaSEOS_>
   d4470:	a804      	add	r0, sp, #16
   d4472:	f002 f859 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint == true)
   d4476:	4b0d      	ldr	r3, [pc, #52]	; (d44ac <_Z6atTestv+0x7c>)
   d4478:	781b      	ldrb	r3, [r3, #0]
   d447a:	b12b      	cbz	r3, d4488 <_Z6atTestv+0x58>
    {
      Serial.printf("atTest reply: %s\n", reply.c_str()); //+OK
   d447c:	f001 fb18 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4480:	9a00      	ldr	r2, [sp, #0]
   d4482:	490b      	ldr	r1, [pc, #44]	; (d44b0 <_Z6atTestv+0x80>)
   d4484:	f7ff ff34 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish == true)
      ;
    {
      Particle.publish("atTest()", reply);
   d4488:	a804      	add	r0, sp, #16
   d448a:	9a00      	ldr	r2, [sp, #0]
   d448c:	4909      	ldr	r1, [pc, #36]	; (d44b4 <_Z6atTestv+0x84>)
   d448e:	f7ff fe1f 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4492:	a805      	add	r0, sp, #20
   d4494:	f7ff ff16 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void atTest() // 1
{             // test if module responds to commands
  String reply;
   d4498:	4668      	mov	r0, sp
   d449a:	f002 f845 	bl	d6528 <_ZN6StringD1Ev>
      ;
    {
      Particle.publish("atTest()", reply);
    }
  }
}
   d449e:	b009      	add	sp, #36	; 0x24
   d44a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d44a4:	000d7e39 	.word	0x000d7e39
   d44a8:	000d7d2f 	.word	0x000d7d2f
   d44ac:	2003e1d4 	.word	0x2003e1d4
   d44b0:	000d7d34 	.word	0x000d7d34
   d44b4:	000d7d46 	.word	0x000d7d46

000d44b8 <_Z7setModei>:
    }
  }
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
   d44b8:	b510      	push	{r4, lr}
   d44ba:	b08e      	sub	sp, #56	; 0x38
   d44bc:	4604      	mov	r4, r0
  String reply;
   d44be:	4951      	ldr	r1, [pc, #324]	; (d4604 <_Z7setModei+0x14c>)
   d44c0:	a802      	add	r0, sp, #8
   d44c2:	f002 f878 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  String reply2;
   d44c6:	494f      	ldr	r1, [pc, #316]	; (d4604 <_Z7setModei+0x14c>)
   d44c8:	a806      	add	r0, sp, #24
   d44ca:	f002 f874 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  if (modeParameter == 1)
   d44ce:	2c01      	cmp	r4, #1
   d44d0:	d108      	bne.n	d44e4 <_Z7setModei+0x2c>
  {
    Serial1.printf("AT+MODE=1\r\n");
   d44d2:	f001 fa5d 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d44d6:	494c      	ldr	r1, [pc, #304]	; (d4608 <_Z7setModei+0x150>)
   d44d8:	f7ff ffa6 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    Serial.printf("AT+MODE=1\r\n");
   d44dc:	f001 fae8 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d44e0:	4949      	ldr	r1, [pc, #292]	; (d4608 <_Z7setModei+0x150>)
   d44e2:	e007      	b.n	d44f4 <_Z7setModei+0x3c>
    Serial.flush();
    Serial1.flush();
  }
  else
  {
    Serial1.printf("AT+MODE=0\r\n");
   d44e4:	f001 fa54 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d44e8:	4948      	ldr	r1, [pc, #288]	; (d460c <_Z7setModei+0x154>)
   d44ea:	f7ff ff9d 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    Serial.printf("AT+MODE=0\r\n");
   d44ee:	f001 fadf 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d44f2:	4946      	ldr	r1, [pc, #280]	; (d460c <_Z7setModei+0x154>)
   d44f4:	f7ff ff98 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    Serial.flush();
   d44f8:	f001 fada 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d44fc:	6803      	ldr	r3, [r0, #0]
   d44fe:	69db      	ldr	r3, [r3, #28]
   d4500:	4798      	blx	r3
    Serial1.flush();
   d4502:	f001 fa45 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4506:	6803      	ldr	r3, [r0, #0]
   d4508:	69db      	ldr	r3, [r3, #28]
   d450a:	4798      	blx	r3
  }
  delay(200);
   d450c:	20c8      	movs	r0, #200	; 0xc8
   d450e:	f001 ff11 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d4512:	f001 fa3d 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4516:	6803      	ldr	r3, [r0, #0]
   d4518:	691b      	ldr	r3, [r3, #16]
   d451a:	4798      	blx	r3
   d451c:	2800      	cmp	r0, #0
   d451e:	dd32      	ble.n	d4586 <_Z7setModei+0xce>
  {
    reply = Serial1.readStringUntil('\n');
   d4520:	f001 fa36 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4524:	220a      	movs	r2, #10
   d4526:	4601      	mov	r1, r0
   d4528:	a80a      	add	r0, sp, #40	; 0x28
   d452a:	f001 ff2f 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d452e:	a90a      	add	r1, sp, #40	; 0x28
   d4530:	a802      	add	r0, sp, #8
   d4532:	f002 f870 	bl	d6616 <_ZN6StringaSEOS_>
   d4536:	a80a      	add	r0, sp, #40	; 0x28
   d4538:	f001 fff6 	bl	d6528 <_ZN6StringD1Ev>
    reply2 = Serial1.readStringUntil('\n');
   d453c:	f001 fa28 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4540:	220a      	movs	r2, #10
   d4542:	4601      	mov	r1, r0
   d4544:	a80a      	add	r0, sp, #40	; 0x28
   d4546:	f001 ff21 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d454a:	a90a      	add	r1, sp, #40	; 0x28
   d454c:	a806      	add	r0, sp, #24
   d454e:	f002 f862 	bl	d6616 <_ZN6StringaSEOS_>
   d4552:	a80a      	add	r0, sp, #40	; 0x28
   d4554:	f001 ffe8 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d4558:	4b2d      	ldr	r3, [pc, #180]	; (d4610 <_Z7setModei+0x158>)
   d455a:	781b      	ldrb	r3, [r3, #0]
   d455c:	b143      	cbz	r3, d4570 <_Z7setModei+0xb8>
    {
      Serial.printf("atMode reply: %s reply2: %s\n", reply.c_str(), reply2.c_str());
   d455e:	f001 faa7 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4562:	9b06      	ldr	r3, [sp, #24]
   d4564:	9300      	str	r3, [sp, #0]
   d4566:	4a2b      	ldr	r2, [pc, #172]	; (d4614 <_Z7setModei+0x15c>)
   d4568:	9b02      	ldr	r3, [sp, #8]
   d456a:	2100      	movs	r1, #0
   d456c:	f001 ff85 	bl	d647a <_ZN5Print11printf_implEbPKcz>
    }
    if (particlePublish)
   d4570:	4b29      	ldr	r3, [pc, #164]	; (d4618 <_Z7setModei+0x160>)
   d4572:	781b      	ldrb	r3, [r3, #0]
   d4574:	b13b      	cbz	r3, d4586 <_Z7setModei+0xce>
    {
      Particle.publish("atMode()", reply);
   d4576:	a80a      	add	r0, sp, #40	; 0x28
   d4578:	9a02      	ldr	r2, [sp, #8]
   d457a:	4928      	ldr	r1, [pc, #160]	; (d461c <_Z7setModei+0x164>)
   d457c:	f7ff fda8 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4580:	a80b      	add	r0, sp, #44	; 0x2c
   d4582:	f7ff fe9f 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4586:	4b26      	ldr	r3, [pc, #152]	; (d4620 <_Z7setModei+0x168>)
   d4588:	781b      	ldrb	r3, [r3, #0]
   d458a:	2b00      	cmp	r3, #0
   d458c:	d032      	beq.n	d45f4 <_Z7setModei+0x13c>
  {
    Serial1.printf("AT+MODE?\r\n"); // correct
   d458e:	f001 f9ff 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4592:	4924      	ldr	r1, [pc, #144]	; (d4624 <_Z7setModei+0x16c>)
   d4594:	f7ff ff48 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4598:	20c8      	movs	r0, #200	; 0xc8
   d459a:	f001 fecb 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d459e:	f001 f9f7 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d45a2:	6803      	ldr	r3, [r0, #0]
   d45a4:	691b      	ldr	r3, [r3, #16]
   d45a6:	4798      	blx	r3
   d45a8:	2800      	cmp	r0, #0
   d45aa:	dd23      	ble.n	d45f4 <_Z7setModei+0x13c>
    {
      Serial.printf("Awaiting Reply\n");
   d45ac:	f001 fa80 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d45b0:	491d      	ldr	r1, [pc, #116]	; (d4628 <_Z7setModei+0x170>)
   d45b2:	f7ff ff39 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d45b6:	f001 f9eb 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d45ba:	220a      	movs	r2, #10
   d45bc:	4601      	mov	r1, r0
   d45be:	a80a      	add	r0, sp, #40	; 0x28
   d45c0:	f001 fee4 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d45c4:	a90a      	add	r1, sp, #40	; 0x28
   d45c6:	a802      	add	r0, sp, #8
   d45c8:	f002 f825 	bl	d6616 <_ZN6StringaSEOS_>
   d45cc:	a80a      	add	r0, sp, #40	; 0x28
   d45ce:	f001 ffab 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+MODE?: %s\n", reply.c_str());
   d45d2:	f001 fa6d 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d45d6:	9a02      	ldr	r2, [sp, #8]
   d45d8:	4914      	ldr	r1, [pc, #80]	; (d462c <_Z7setModei+0x174>)
   d45da:	f7ff fe89 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d45de:	4b0e      	ldr	r3, [pc, #56]	; (d4618 <_Z7setModei+0x160>)
   d45e0:	781b      	ldrb	r3, [r3, #0]
   d45e2:	b13b      	cbz	r3, d45f4 <_Z7setModei+0x13c>
      {
        Particle.publish("AT+MODE?", reply);
   d45e4:	a80a      	add	r0, sp, #40	; 0x28
   d45e6:	9a02      	ldr	r2, [sp, #8]
   d45e8:	4911      	ldr	r1, [pc, #68]	; (d4630 <_Z7setModei+0x178>)
   d45ea:	f7ff fd71 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d45ee:	a80b      	add	r0, sp, #44	; 0x2c
   d45f0:	f7ff fe68 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
  String reply;
  String reply2;
   d45f4:	a806      	add	r0, sp, #24
   d45f6:	f001 ff97 	bl	d6528 <_ZN6StringD1Ev>
  }
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
  String reply;
   d45fa:	a802      	add	r0, sp, #8
   d45fc:	f001 ff94 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("AT+MODE?", reply);
      }
    }
  }
}
   d4600:	b00e      	add	sp, #56	; 0x38
   d4602:	bd10      	pop	{r4, pc}
   d4604:	000d7e39 	.word	0x000d7e39
   d4608:	000d7d11 	.word	0x000d7d11
   d460c:	000d7cb5 	.word	0x000d7cb5
   d4610:	2003e1d4 	.word	0x2003e1d4
   d4614:	000d7d7b 	.word	0x000d7d7b
   d4618:	2003e1e0 	.word	0x2003e1e0
   d461c:	000d7d98 	.word	0x000d7d98
   d4620:	2003e20c 	.word	0x2003e20c
   d4624:	000d7ceb 	.word	0x000d7ceb
   d4628:	000d7da1 	.word	0x000d7da1
   d462c:	000d7db1 	.word	0x000d7db1
   d4630:	000d7dc5 	.word	0x000d7dc5

000d4634 <loop>:
      .duration(lowPowerTime * 60000); // minutes to milliseconds
  counter = 0;
}

void loop()
{
   d4634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // setMode(0);
  setMode(0);
   d4636:	2000      	movs	r0, #0
   d4638:	f7ff ff3e 	bl	d44b8 <_Z7setModei>
  delay(500);
   d463c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4640:	f001 fe78 	bl	d6334 <delay>
  takeSamples();
   d4644:	f7ff fd5c 	bl	d4100 <_Z11takeSamplesv>
  createBuffer(sendID, bufferLength, tempF, batteryVoltage);
   d4648:	4b12      	ldr	r3, [pc, #72]	; (d4694 <loop+0x60>)
   d464a:	edd3 0a00 	vldr	s1, [r3]
   d464e:	4b12      	ldr	r3, [pc, #72]	; (d4698 <loop+0x64>)
   d4650:	ed93 0a00 	vldr	s0, [r3]
   d4654:	4b11      	ldr	r3, [pc, #68]	; (d469c <loop+0x68>)
   d4656:	6819      	ldr	r1, [r3, #0]
   d4658:	4b11      	ldr	r3, [pc, #68]	; (d46a0 <loop+0x6c>)
   d465a:	6818      	ldr	r0, [r3, #0]
   d465c:	f7ff fe4e 	bl	d42fc <_Z12createBufferiiff>
  sendData();
   d4660:	f7ff fe8e 	bl	d4380 <_Z8sendDatav>
  delay(1000);
   d4664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4668:	f001 fe64 	bl	d6334 <delay>
  setMode(1);
   d466c:	2001      	movs	r0, #1
   d466e:	f7ff ff23 	bl	d44b8 <_Z7setModei>
  delay(500);
   d4672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4676:	f001 fe5d 	bl	d6334 <delay>
  System.sleep(config);
   d467a:	a801      	add	r0, sp, #4
   d467c:	4909      	ldr	r1, [pc, #36]	; (d46a4 <loop+0x70>)
   d467e:	f002 f833 	bl	d66e8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4682:	9801      	ldr	r0, [sp, #4]
   d4684:	b108      	cbz	r0, d468a <loop+0x56>
            free(wakeupSource_);
   d4686:	f000 ff19 	bl	d54bc <free>
  System.reset();
   d468a:	f002 f82a 	bl	d66e2 <_ZN11SystemClass5resetEv>
}
   d468e:	b005      	add	sp, #20
   d4690:	f85d fb04 	ldr.w	pc, [sp], #4
   d4694:	2003e1dc 	.word	0x2003e1dc
   d4698:	2003e204 	.word	0x2003e204
   d469c:	2003e148 	.word	0x2003e148
   d46a0:	2003e130 	.word	0x2003e130
   d46a4:	2003e1ec 	.word	0x2003e1ec

000d46a8 <_Z12setParameteri>:
  }
}

//************************** TEST RADIO PARAMETERS
void setParameter(int radioParameter) // 5
{                                     //  Set the Radio Frequency parameters
   d46a8:	b500      	push	{lr}
   d46aa:	b089      	sub	sp, #36	; 0x24
  String reply;
   d46ac:	4938      	ldr	r1, [pc, #224]	; (d4790 <_Z12setParameteri+0xe8>)
   d46ae:	4668      	mov	r0, sp
   d46b0:	f001 ff81 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  // Serial1.printf("AT+PARAMETER=12,7,1,4\r\n"); // default working with v1 home base
  Serial1.printf("AT+PARAMETER=12,7,1,7\r\n"); // working with v1 home base
   d46b4:	f001 f96c 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d46b8:	4936      	ldr	r1, [pc, #216]	; (d4794 <_Z12setParameteri+0xec>)
   d46ba:	f7ff feb5 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
  // }
  // else if (radioParameter == 1)
  // {
  //     Serial1.printf("AT+PARAMETER=12,4,1,7\r\n"); // more than 3km //not working with v1 home base
  // }
  delay(200);
   d46be:	20c8      	movs	r0, #200	; 0xc8
   d46c0:	f001 fe38 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d46c4:	f001 f964 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d46c8:	6803      	ldr	r3, [r0, #0]
   d46ca:	691b      	ldr	r3, [r3, #16]
   d46cc:	4798      	blx	r3
   d46ce:	2800      	cmp	r0, #0
   d46d0:	dd21      	ble.n	d4716 <_Z12setParameteri+0x6e>
  {
    reply = Serial1.readStringUntil('\n');
   d46d2:	f001 f95d 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d46d6:	220a      	movs	r2, #10
   d46d8:	4601      	mov	r1, r0
   d46da:	a804      	add	r0, sp, #16
   d46dc:	f001 fe56 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d46e0:	a904      	add	r1, sp, #16
   d46e2:	4668      	mov	r0, sp
   d46e4:	f001 ff97 	bl	d6616 <_ZN6StringaSEOS_>
   d46e8:	a804      	add	r0, sp, #16
   d46ea:	f001 ff1d 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d46ee:	4b2a      	ldr	r3, [pc, #168]	; (d4798 <_Z12setParameteri+0xf0>)
   d46f0:	781b      	ldrb	r3, [r3, #0]
   d46f2:	b12b      	cbz	r3, d4700 <_Z12setParameteri+0x58>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   d46f4:	f001 f9dc 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d46f8:	9a00      	ldr	r2, [sp, #0]
   d46fa:	4928      	ldr	r1, [pc, #160]	; (d479c <_Z12setParameteri+0xf4>)
   d46fc:	f7ff fdf8 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish)
   d4700:	4b27      	ldr	r3, [pc, #156]	; (d47a0 <_Z12setParameteri+0xf8>)
   d4702:	781b      	ldrb	r3, [r3, #0]
   d4704:	b13b      	cbz	r3, d4716 <_Z12setParameteri+0x6e>
    {
      Particle.publish("setRadio", reply);
   d4706:	a804      	add	r0, sp, #16
   d4708:	9a00      	ldr	r2, [sp, #0]
   d470a:	4926      	ldr	r1, [pc, #152]	; (d47a4 <_Z12setParameteri+0xfc>)
   d470c:	f7ff fce0 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4710:	a805      	add	r0, sp, #20
   d4712:	f7ff fdd7 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4716:	4b24      	ldr	r3, [pc, #144]	; (d47a8 <_Z12setParameteri+0x100>)
   d4718:	781b      	ldrb	r3, [r3, #0]
   d471a:	2b00      	cmp	r3, #0
   d471c:	d032      	beq.n	d4784 <_Z12setParameteri+0xdc>
  {
    Serial1.printf("AT+PARAMETER?\r\n");
   d471e:	f001 f937 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4722:	4922      	ldr	r1, [pc, #136]	; (d47ac <_Z12setParameteri+0x104>)
   d4724:	f7ff fe80 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4728:	20c8      	movs	r0, #200	; 0xc8
   d472a:	f001 fe03 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d472e:	f001 f92f 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4732:	6803      	ldr	r3, [r0, #0]
   d4734:	691b      	ldr	r3, [r3, #16]
   d4736:	4798      	blx	r3
   d4738:	2800      	cmp	r0, #0
   d473a:	dd23      	ble.n	d4784 <_Z12setParameteri+0xdc>
    {
      Serial.printf("Awaiting Reply\n");
   d473c:	f001 f9b8 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4740:	491b      	ldr	r1, [pc, #108]	; (d47b0 <_Z12setParameteri+0x108>)
   d4742:	f7ff fe71 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4746:	f001 f923 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d474a:	220a      	movs	r2, #10
   d474c:	4601      	mov	r1, r0
   d474e:	a804      	add	r0, sp, #16
   d4750:	f001 fe1c 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4754:	a904      	add	r1, sp, #16
   d4756:	4668      	mov	r0, sp
   d4758:	f001 ff5d 	bl	d6616 <_ZN6StringaSEOS_>
   d475c:	a804      	add	r0, sp, #16
   d475e:	f001 fee3 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+PARAMETER?: %s\n", reply.c_str()); //+PARAMETER=" "
   d4762:	f001 f9a5 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4766:	9a00      	ldr	r2, [sp, #0]
   d4768:	4912      	ldr	r1, [pc, #72]	; (d47b4 <_Z12setParameteri+0x10c>)
   d476a:	f7ff fdc1 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d476e:	4b0c      	ldr	r3, [pc, #48]	; (d47a0 <_Z12setParameteri+0xf8>)
   d4770:	781b      	ldrb	r3, [r3, #0]
   d4772:	b13b      	cbz	r3, d4784 <_Z12setParameteri+0xdc>
      {
        Particle.publish("setParameter?", reply);
   d4774:	a804      	add	r0, sp, #16
   d4776:	9a00      	ldr	r2, [sp, #0]
   d4778:	490f      	ldr	r1, [pc, #60]	; (d47b8 <_Z12setParameteri+0x110>)
   d477a:	f7ff fca9 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d477e:	a805      	add	r0, sp, #20
   d4780:	f7ff fda0 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

//************************** TEST RADIO PARAMETERS
void setParameter(int radioParameter) // 5
{                                     //  Set the Radio Frequency parameters
  String reply;
   d4784:	4668      	mov	r0, sp
   d4786:	f001 fecf 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("setParameter?", reply);
      }
    }
  }
}
   d478a:	b009      	add	sp, #36	; 0x24
   d478c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4790:	000d7e39 	.word	0x000d7e39
   d4794:	000d7dce 	.word	0x000d7dce
   d4798:	2003e1d4 	.word	0x2003e1d4
   d479c:	000d7c9e 	.word	0x000d7c9e
   d47a0:	2003e1e0 	.word	0x2003e1e0
   d47a4:	000d7de6 	.word	0x000d7de6
   d47a8:	2003e20c 	.word	0x2003e20c
   d47ac:	000d7def 	.word	0x000d7def
   d47b0:	000d7da1 	.word	0x000d7da1
   d47b4:	000d7dff 	.word	0x000d7dff
   d47b8:	000d7e18 	.word	0x000d7e18

000d47bc <_Z7setBandi>:

//************************* Check band before sending to england
void setBand(int bandParameter) // 6
{                               //  Set RF Band
   d47bc:	b510      	push	{r4, lr}
   d47be:	b088      	sub	sp, #32
   d47c0:	4604      	mov	r4, r0
  String reply;
   d47c2:	493b      	ldr	r1, [pc, #236]	; (d48b0 <_Z7setBandi+0xf4>)
   d47c4:	4668      	mov	r0, sp
   d47c6:	f001 fef6 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  if (bandParameter == 0)
   d47ca:	b924      	cbnz	r4, d47d6 <_Z7setBandi+0x1a>
  {
    Serial1.printf("AT+BAND=915000000\r\n"); // united states
   d47cc:	f001 f8e0 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d47d0:	4938      	ldr	r1, [pc, #224]	; (d48b4 <_Z7setBandi+0xf8>)
   d47d2:	f7ff fe29 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
  }
  else if (bandParameter == 1)
    ;
  {
    Serial1.printf("AT+BAND=868500000\r\n"); // europe
   d47d6:	f001 f8db 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d47da:	4937      	ldr	r1, [pc, #220]	; (d48b8 <_Z7setBandi+0xfc>)
   d47dc:	f7ff fe24 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
  }

  delay(200);
   d47e0:	20c8      	movs	r0, #200	; 0xc8
   d47e2:	f001 fda7 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d47e6:	f001 f8d3 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d47ea:	6803      	ldr	r3, [r0, #0]
   d47ec:	691b      	ldr	r3, [r3, #16]
   d47ee:	4798      	blx	r3
   d47f0:	2800      	cmp	r0, #0
   d47f2:	dd21      	ble.n	d4838 <_Z7setBandi+0x7c>
  {
    reply = Serial1.readStringUntil('\n');
   d47f4:	f001 f8cc 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d47f8:	220a      	movs	r2, #10
   d47fa:	4601      	mov	r1, r0
   d47fc:	a804      	add	r0, sp, #16
   d47fe:	f001 fdc5 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4802:	a904      	add	r1, sp, #16
   d4804:	4668      	mov	r0, sp
   d4806:	f001 ff06 	bl	d6616 <_ZN6StringaSEOS_>
   d480a:	a804      	add	r0, sp, #16
   d480c:	f001 fe8c 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d4810:	4b2a      	ldr	r3, [pc, #168]	; (d48bc <_Z7setBandi+0x100>)
   d4812:	781b      	ldrb	r3, [r3, #0]
   d4814:	b12b      	cbz	r3, d4822 <_Z7setBandi+0x66>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   d4816:	f001 f94b 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d481a:	9a00      	ldr	r2, [sp, #0]
   d481c:	4928      	ldr	r1, [pc, #160]	; (d48c0 <_Z7setBandi+0x104>)
   d481e:	f7ff fd67 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish)
   d4822:	4b28      	ldr	r3, [pc, #160]	; (d48c4 <_Z7setBandi+0x108>)
   d4824:	781b      	ldrb	r3, [r3, #0]
   d4826:	b13b      	cbz	r3, d4838 <_Z7setBandi+0x7c>
    {
      Particle.publish("setBand", reply);
   d4828:	a804      	add	r0, sp, #16
   d482a:	9a00      	ldr	r2, [sp, #0]
   d482c:	4926      	ldr	r1, [pc, #152]	; (d48c8 <_Z7setBandi+0x10c>)
   d482e:	f7ff fc4f 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4832:	a805      	add	r0, sp, #20
   d4834:	f7ff fd46 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4838:	4b24      	ldr	r3, [pc, #144]	; (d48cc <_Z7setBandi+0x110>)
   d483a:	781b      	ldrb	r3, [r3, #0]
   d483c:	2b00      	cmp	r3, #0
   d483e:	d032      	beq.n	d48a6 <_Z7setBandi+0xea>
  {
    Serial1.printf("AT+BAND?\r\n"); // correct
   d4840:	f001 f8a6 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4844:	4922      	ldr	r1, [pc, #136]	; (d48d0 <_Z7setBandi+0x114>)
   d4846:	f7ff fdef 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d484a:	20c8      	movs	r0, #200	; 0xc8
   d484c:	f001 fd72 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d4850:	f001 f89e 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4854:	6803      	ldr	r3, [r0, #0]
   d4856:	691b      	ldr	r3, [r3, #16]
   d4858:	4798      	blx	r3
   d485a:	2800      	cmp	r0, #0
   d485c:	dd23      	ble.n	d48a6 <_Z7setBandi+0xea>
    {
      Serial.printf("Awaiting Reply\n");
   d485e:	f001 f927 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4862:	491c      	ldr	r1, [pc, #112]	; (d48d4 <_Z7setBandi+0x118>)
   d4864:	f7ff fde0 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4868:	f001 f892 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d486c:	220a      	movs	r2, #10
   d486e:	4601      	mov	r1, r0
   d4870:	a804      	add	r0, sp, #16
   d4872:	f001 fd8b 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4876:	a904      	add	r1, sp, #16
   d4878:	4668      	mov	r0, sp
   d487a:	f001 fecc 	bl	d6616 <_ZN6StringaSEOS_>
   d487e:	a804      	add	r0, sp, #16
   d4880:	f001 fe52 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+BAND?: %s\n", reply.c_str());
   d4884:	f001 f914 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4888:	9a00      	ldr	r2, [sp, #0]
   d488a:	4913      	ldr	r1, [pc, #76]	; (d48d8 <_Z7setBandi+0x11c>)
   d488c:	f7ff fd30 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d4890:	4b0c      	ldr	r3, [pc, #48]	; (d48c4 <_Z7setBandi+0x108>)
   d4892:	781b      	ldrb	r3, [r3, #0]
   d4894:	b13b      	cbz	r3, d48a6 <_Z7setBandi+0xea>
      {
        Particle.publish("AT+BAND?", reply);
   d4896:	a804      	add	r0, sp, #16
   d4898:	9a00      	ldr	r2, [sp, #0]
   d489a:	4910      	ldr	r1, [pc, #64]	; (d48dc <_Z7setBandi+0x120>)
   d489c:	f7ff fc18 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d48a0:	a805      	add	r0, sp, #20
   d48a2:	f7ff fd0f 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

//************************* Check band before sending to england
void setBand(int bandParameter) // 6
{                               //  Set RF Band
  String reply;
   d48a6:	4668      	mov	r0, sp
   d48a8:	f001 fe3e 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("AT+BAND?", reply);
      }
    }
  }
}
   d48ac:	b008      	add	sp, #32
   d48ae:	bd10      	pop	{r4, pc}
   d48b0:	000d7e39 	.word	0x000d7e39
   d48b4:	000d7e26 	.word	0x000d7e26
   d48b8:	000d7e3a 	.word	0x000d7e3a
   d48bc:	2003e1d4 	.word	0x2003e1d4
   d48c0:	000d7c9e 	.word	0x000d7c9e
   d48c4:	2003e1e0 	.word	0x2003e1e0
   d48c8:	000d7e4e 	.word	0x000d7e4e
   d48cc:	2003e20c 	.word	0x2003e20c
   d48d0:	000d7e56 	.word	0x000d7e56
   d48d4:	000d7da1 	.word	0x000d7da1
   d48d8:	000d7e61 	.word	0x000d7e61
   d48dc:	000d7e75 	.word	0x000d7e75

000d48e0 <_Z7setCPINv>:
    }
  }
}

void setCPIN() // 9
{              //  set password
   d48e0:	b500      	push	{lr}
   d48e2:	b08d      	sub	sp, #52	; 0x34
  String CPIN = "BA4104032968BA1114299079021594AA";
   d48e4:	493c      	ldr	r1, [pc, #240]	; (d49d8 <_Z7setCPINv+0xf8>)
   d48e6:	4668      	mov	r0, sp
   d48e8:	f001 fe65 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  String reply;
   d48ec:	493b      	ldr	r1, [pc, #236]	; (d49dc <_Z7setCPINv+0xfc>)
   d48ee:	a804      	add	r0, sp, #16
   d48f0:	f001 fe61 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+CPIN=%s\r\n", CPIN.c_str());
   d48f4:	f001 f84c 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d48f8:	9a00      	ldr	r2, [sp, #0]
   d48fa:	4939      	ldr	r1, [pc, #228]	; (d49e0 <_Z7setCPINv+0x100>)
   d48fc:	f7ff fcf8 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
  delay(200);
   d4900:	20c8      	movs	r0, #200	; 0xc8
   d4902:	f001 fd17 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d4906:	f001 f843 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d490a:	6803      	ldr	r3, [r0, #0]
   d490c:	691b      	ldr	r3, [r3, #16]
   d490e:	4798      	blx	r3
   d4910:	2800      	cmp	r0, #0
   d4912:	dd21      	ble.n	d4958 <_Z7setCPINv+0x78>
  {
    reply = Serial1.readStringUntil('\n');
   d4914:	f001 f83c 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4918:	220a      	movs	r2, #10
   d491a:	4601      	mov	r1, r0
   d491c:	a808      	add	r0, sp, #32
   d491e:	f001 fd35 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4922:	a908      	add	r1, sp, #32
   d4924:	a804      	add	r0, sp, #16
   d4926:	f001 fe76 	bl	d6616 <_ZN6StringaSEOS_>
   d492a:	a808      	add	r0, sp, #32
   d492c:	f001 fdfc 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d4930:	4b2c      	ldr	r3, [pc, #176]	; (d49e4 <_Z7setCPINv+0x104>)
   d4932:	781b      	ldrb	r3, [r3, #0]
   d4934:	b12b      	cbz	r3, d4942 <_Z7setCPINv+0x62>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4936:	f001 f8bb 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d493a:	9a04      	ldr	r2, [sp, #16]
   d493c:	492a      	ldr	r1, [pc, #168]	; (d49e8 <_Z7setCPINv+0x108>)
   d493e:	f7ff fcd7 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish)
   d4942:	4b2a      	ldr	r3, [pc, #168]	; (d49ec <_Z7setCPINv+0x10c>)
   d4944:	781b      	ldrb	r3, [r3, #0]
   d4946:	b13b      	cbz	r3, d4958 <_Z7setCPINv+0x78>
    {
      Particle.publish("setCPIN", reply);
   d4948:	a808      	add	r0, sp, #32
   d494a:	9a04      	ldr	r2, [sp, #16]
   d494c:	4928      	ldr	r1, [pc, #160]	; (d49f0 <_Z7setCPINv+0x110>)
   d494e:	f7ff fbbf 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4952:	a809      	add	r0, sp, #36	; 0x24
   d4954:	f7ff fcb6 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4958:	4b26      	ldr	r3, [pc, #152]	; (d49f4 <_Z7setCPINv+0x114>)
   d495a:	781b      	ldrb	r3, [r3, #0]
   d495c:	2b00      	cmp	r3, #0
   d495e:	d032      	beq.n	d49c6 <_Z7setCPINv+0xe6>
  {
    Serial1.printf("AT+CPIN?\r\n");
   d4960:	f001 f816 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4964:	4924      	ldr	r1, [pc, #144]	; (d49f8 <_Z7setCPINv+0x118>)
   d4966:	f7ff fd5f 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d496a:	20c8      	movs	r0, #200	; 0xc8
   d496c:	f001 fce2 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d4970:	f001 f80e 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4974:	6803      	ldr	r3, [r0, #0]
   d4976:	691b      	ldr	r3, [r3, #16]
   d4978:	4798      	blx	r3
   d497a:	2800      	cmp	r0, #0
   d497c:	dd23      	ble.n	d49c6 <_Z7setCPINv+0xe6>
    {
      Serial.printf("Awaiting Reply\n");
   d497e:	f001 f897 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4982:	491e      	ldr	r1, [pc, #120]	; (d49fc <_Z7setCPINv+0x11c>)
   d4984:	f7ff fd50 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4988:	f001 f802 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d498c:	220a      	movs	r2, #10
   d498e:	4601      	mov	r1, r0
   d4990:	a808      	add	r0, sp, #32
   d4992:	f001 fcfb 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4996:	a908      	add	r1, sp, #32
   d4998:	a804      	add	r0, sp, #16
   d499a:	f001 fe3c 	bl	d6616 <_ZN6StringaSEOS_>
   d499e:	a808      	add	r0, sp, #32
   d49a0:	f001 fdc2 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply CPIN: %s\n", reply.c_str());
   d49a4:	f001 f884 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d49a8:	9a04      	ldr	r2, [sp, #16]
   d49aa:	4915      	ldr	r1, [pc, #84]	; (d4a00 <_Z7setCPINv+0x120>)
   d49ac:	f7ff fca0 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d49b0:	4b0e      	ldr	r3, [pc, #56]	; (d49ec <_Z7setCPINv+0x10c>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	b13b      	cbz	r3, d49c6 <_Z7setCPINv+0xe6>
      {
        Particle.publish("AT+CPIN?", reply);
   d49b6:	a808      	add	r0, sp, #32
   d49b8:	9a04      	ldr	r2, [sp, #16]
   d49ba:	4912      	ldr	r1, [pc, #72]	; (d4a04 <_Z7setCPINv+0x124>)
   d49bc:	f7ff fb88 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d49c0:	a809      	add	r0, sp, #36	; 0x24
   d49c2:	f7ff fc7f 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

void setCPIN() // 9
{              //  set password
  String CPIN = "BA4104032968BA1114299079021594AA";
  String reply;
   d49c6:	a804      	add	r0, sp, #16
   d49c8:	f001 fdae 	bl	d6528 <_ZN6StringD1Ev>
  }
}

void setCPIN() // 9
{              //  set password
  String CPIN = "BA4104032968BA1114299079021594AA";
   d49cc:	4668      	mov	r0, sp
   d49ce:	f001 fdab 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("AT+CPIN?", reply);
      }
    }
  }
}
   d49d2:	b00d      	add	sp, #52	; 0x34
   d49d4:	f85d fb04 	ldr.w	pc, [sp], #4
   d49d8:	000d7e7e 	.word	0x000d7e7e
   d49dc:	000d7e39 	.word	0x000d7e39
   d49e0:	000d7e9f 	.word	0x000d7e9f
   d49e4:	2003e1d4 	.word	0x2003e1d4
   d49e8:	000d7c9e 	.word	0x000d7c9e
   d49ec:	2003e1e0 	.word	0x2003e1e0
   d49f0:	000d7eac 	.word	0x000d7eac
   d49f4:	2003e20c 	.word	0x2003e20c
   d49f8:	000d7eb4 	.word	0x000d7eb4
   d49fc:	000d7da1 	.word	0x000d7da1
   d4a00:	000d7ebf 	.word	0x000d7ebf
   d4a04:	000d7ecf 	.word	0x000d7ecf

000d4a08 <_ZN5Print6printfIIiEEEjPKcDpT_>:
   d4a08:	4613      	mov	r3, r2
   d4a0a:	460a      	mov	r2, r1
   d4a0c:	2100      	movs	r1, #0
   d4a0e:	f001 bd34 	b.w	d647a <_ZN5Print11printf_implEbPKcz>
	...

000d4a14 <_Z6setIPRi>:
    }
  }
}

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
   d4a14:	b510      	push	{r4, lr}
   d4a16:	b088      	sub	sp, #32
  String reply;
   d4a18:	4939      	ldr	r1, [pc, #228]	; (d4b00 <_Z6setIPRi+0xec>)
    }
  }
}

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
   d4a1a:	4604      	mov	r4, r0
  String reply;
   d4a1c:	4668      	mov	r0, sp
   d4a1e:	f001 fdca 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+IPR=%i\r\n", _baudRate);
   d4a22:	f000 ffb5 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4a26:	4622      	mov	r2, r4
   d4a28:	4936      	ldr	r1, [pc, #216]	; (d4b04 <_Z6setIPRi+0xf0>)
   d4a2a:	f7ff ffed 	bl	d4a08 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4a2e:	20c8      	movs	r0, #200	; 0xc8
   d4a30:	f001 fc80 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d4a34:	f000 ffac 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4a38:	6803      	ldr	r3, [r0, #0]
   d4a3a:	691b      	ldr	r3, [r3, #16]
   d4a3c:	4798      	blx	r3
   d4a3e:	2800      	cmp	r0, #0
   d4a40:	dd21      	ble.n	d4a86 <_Z6setIPRi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4a42:	f000 ffa5 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4a46:	220a      	movs	r2, #10
   d4a48:	4601      	mov	r1, r0
   d4a4a:	a804      	add	r0, sp, #16
   d4a4c:	f001 fc9e 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4a50:	a904      	add	r1, sp, #16
   d4a52:	4668      	mov	r0, sp
   d4a54:	f001 fddf 	bl	d6616 <_ZN6StringaSEOS_>
   d4a58:	a804      	add	r0, sp, #16
   d4a5a:	f001 fd65 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d4a5e:	4b2a      	ldr	r3, [pc, #168]	; (d4b08 <_Z6setIPRi+0xf4>)
   d4a60:	781b      	ldrb	r3, [r3, #0]
   d4a62:	b12b      	cbz	r3, d4a70 <_Z6setIPRi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   d4a64:	f001 f824 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4a68:	9a00      	ldr	r2, [sp, #0]
   d4a6a:	4928      	ldr	r1, [pc, #160]	; (d4b0c <_Z6setIPRi+0xf8>)
   d4a6c:	f7ff fc40 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish)
   d4a70:	4b27      	ldr	r3, [pc, #156]	; (d4b10 <_Z6setIPRi+0xfc>)
   d4a72:	781b      	ldrb	r3, [r3, #0]
   d4a74:	b13b      	cbz	r3, d4a86 <_Z6setIPRi+0x72>
    {
      Particle.publish("setIPR", reply);
   d4a76:	a804      	add	r0, sp, #16
   d4a78:	9a00      	ldr	r2, [sp, #0]
   d4a7a:	4926      	ldr	r1, [pc, #152]	; (d4b14 <_Z6setIPRi+0x100>)
   d4a7c:	f7ff fb28 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4a80:	a805      	add	r0, sp, #20
   d4a82:	f7ff fc1f 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4a86:	4b24      	ldr	r3, [pc, #144]	; (d4b18 <_Z6setIPRi+0x104>)
   d4a88:	781b      	ldrb	r3, [r3, #0]
   d4a8a:	2b00      	cmp	r3, #0
   d4a8c:	d032      	beq.n	d4af4 <_Z6setIPRi+0xe0>
  {
    Serial1.printf("AT+IPR?\r\n"); // correct
   d4a8e:	f000 ff7f 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4a92:	4922      	ldr	r1, [pc, #136]	; (d4b1c <_Z6setIPRi+0x108>)
   d4a94:	f7ff fcc8 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4a98:	20c8      	movs	r0, #200	; 0xc8
   d4a9a:	f001 fc4b 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d4a9e:	f000 ff77 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4aa2:	6803      	ldr	r3, [r0, #0]
   d4aa4:	691b      	ldr	r3, [r3, #16]
   d4aa6:	4798      	blx	r3
   d4aa8:	2800      	cmp	r0, #0
   d4aaa:	dd23      	ble.n	d4af4 <_Z6setIPRi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4aac:	f001 f800 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4ab0:	491b      	ldr	r1, [pc, #108]	; (d4b20 <_Z6setIPRi+0x10c>)
   d4ab2:	f7ff fcb9 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4ab6:	f000 ff6b 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4aba:	220a      	movs	r2, #10
   d4abc:	4601      	mov	r1, r0
   d4abe:	a804      	add	r0, sp, #16
   d4ac0:	f001 fc64 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4ac4:	a904      	add	r1, sp, #16
   d4ac6:	4668      	mov	r0, sp
   d4ac8:	f001 fda5 	bl	d6616 <_ZN6StringaSEOS_>
   d4acc:	a804      	add	r0, sp, #16
   d4ace:	f001 fd2b 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+IPR?: %s\n", reply.c_str());
   d4ad2:	f000 ffed 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4ad6:	9a00      	ldr	r2, [sp, #0]
   d4ad8:	4912      	ldr	r1, [pc, #72]	; (d4b24 <_Z6setIPRi+0x110>)
   d4ada:	f7ff fc09 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d4ade:	4b0c      	ldr	r3, [pc, #48]	; (d4b10 <_Z6setIPRi+0xfc>)
   d4ae0:	781b      	ldrb	r3, [r3, #0]
   d4ae2:	b13b      	cbz	r3, d4af4 <_Z6setIPRi+0xe0>
      {
        Particle.publish("AT+IPR?", reply);
   d4ae4:	a804      	add	r0, sp, #16
   d4ae6:	9a00      	ldr	r2, [sp, #0]
   d4ae8:	490f      	ldr	r1, [pc, #60]	; (d4b28 <_Z6setIPRi+0x114>)
   d4aea:	f7ff faf1 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4aee:	a805      	add	r0, sp, #20
   d4af0:	f7ff fbe8 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
  String reply;
   d4af4:	4668      	mov	r0, sp
   d4af6:	f001 fd17 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("AT+IPR?", reply);
      }
    }
  }
}
   d4afa:	b008      	add	sp, #32
   d4afc:	bd10      	pop	{r4, pc}
   d4afe:	bf00      	nop
   d4b00:	000d7e39 	.word	0x000d7e39
   d4b04:	000d7f80 	.word	0x000d7f80
   d4b08:	2003e1d4 	.word	0x2003e1d4
   d4b0c:	000d7c9e 	.word	0x000d7c9e
   d4b10:	2003e1e0 	.word	0x2003e1e0
   d4b14:	000d7f8c 	.word	0x000d7f8c
   d4b18:	2003e20c 	.word	0x2003e20c
   d4b1c:	000d7f93 	.word	0x000d7f93
   d4b20:	000d7da1 	.word	0x000d7da1
   d4b24:	000d7f9d 	.word	0x000d7f9d
   d4b28:	000d7fb0 	.word	0x000d7fb0

000d4b2c <_Z10setAddressi>:
    }
  }
}

void setAddress(int address) // 7
{                            //  Set set module address
   d4b2c:	b510      	push	{r4, lr}
   d4b2e:	b088      	sub	sp, #32
  String reply;
   d4b30:	4939      	ldr	r1, [pc, #228]	; (d4c18 <_Z10setAddressi+0xec>)
    }
  }
}

void setAddress(int address) // 7
{                            //  Set set module address
   d4b32:	4604      	mov	r4, r0
  String reply;
   d4b34:	4668      	mov	r0, sp
   d4b36:	f001 fd3e 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+ADDRESS=%i\r\n", address);
   d4b3a:	f000 ff29 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4b3e:	4622      	mov	r2, r4
   d4b40:	4936      	ldr	r1, [pc, #216]	; (d4c1c <_Z10setAddressi+0xf0>)
   d4b42:	f7ff ff61 	bl	d4a08 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4b46:	20c8      	movs	r0, #200	; 0xc8
   d4b48:	f001 fbf4 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d4b4c:	f000 ff20 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4b50:	6803      	ldr	r3, [r0, #0]
   d4b52:	691b      	ldr	r3, [r3, #16]
   d4b54:	4798      	blx	r3
   d4b56:	2800      	cmp	r0, #0
   d4b58:	dd21      	ble.n	d4b9e <_Z10setAddressi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4b5a:	f000 ff19 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4b5e:	220a      	movs	r2, #10
   d4b60:	4601      	mov	r1, r0
   d4b62:	a804      	add	r0, sp, #16
   d4b64:	f001 fc12 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4b68:	a904      	add	r1, sp, #16
   d4b6a:	4668      	mov	r0, sp
   d4b6c:	f001 fd53 	bl	d6616 <_ZN6StringaSEOS_>
   d4b70:	a804      	add	r0, sp, #16
   d4b72:	f001 fcd9 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d4b76:	4b2a      	ldr	r3, [pc, #168]	; (d4c20 <_Z10setAddressi+0xf4>)
   d4b78:	781b      	ldrb	r3, [r3, #0]
   d4b7a:	b12b      	cbz	r3, d4b88 <_Z10setAddressi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4b7c:	f000 ff98 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4b80:	9a00      	ldr	r2, [sp, #0]
   d4b82:	4928      	ldr	r1, [pc, #160]	; (d4c24 <_Z10setAddressi+0xf8>)
   d4b84:	f7ff fbb4 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish)
   d4b88:	4b27      	ldr	r3, [pc, #156]	; (d4c28 <_Z10setAddressi+0xfc>)
   d4b8a:	781b      	ldrb	r3, [r3, #0]
   d4b8c:	b13b      	cbz	r3, d4b9e <_Z10setAddressi+0x72>
    {
      Particle.publish("setAddress", reply);
   d4b8e:	a804      	add	r0, sp, #16
   d4b90:	9a00      	ldr	r2, [sp, #0]
   d4b92:	4926      	ldr	r1, [pc, #152]	; (d4c2c <_Z10setAddressi+0x100>)
   d4b94:	f7ff fa9c 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4b98:	a805      	add	r0, sp, #20
   d4b9a:	f7ff fb93 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4b9e:	4b24      	ldr	r3, [pc, #144]	; (d4c30 <_Z10setAddressi+0x104>)
   d4ba0:	781b      	ldrb	r3, [r3, #0]
   d4ba2:	2b00      	cmp	r3, #0
   d4ba4:	d032      	beq.n	d4c0c <_Z10setAddressi+0xe0>
  {
    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   d4ba6:	f000 fef3 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4baa:	4922      	ldr	r1, [pc, #136]	; (d4c34 <_Z10setAddressi+0x108>)
   d4bac:	f7ff fc3c 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4bb0:	20c8      	movs	r0, #200	; 0xc8
   d4bb2:	f001 fbbf 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d4bb6:	f000 feeb 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4bba:	6803      	ldr	r3, [r0, #0]
   d4bbc:	691b      	ldr	r3, [r3, #16]
   d4bbe:	4798      	blx	r3
   d4bc0:	2800      	cmp	r0, #0
   d4bc2:	dd23      	ble.n	d4c0c <_Z10setAddressi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4bc4:	f000 ff74 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4bc8:	491b      	ldr	r1, [pc, #108]	; (d4c38 <_Z10setAddressi+0x10c>)
   d4bca:	f7ff fc2d 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4bce:	f000 fedf 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4bd2:	220a      	movs	r2, #10
   d4bd4:	4601      	mov	r1, r0
   d4bd6:	a804      	add	r0, sp, #16
   d4bd8:	f001 fbd8 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4bdc:	a904      	add	r1, sp, #16
   d4bde:	4668      	mov	r0, sp
   d4be0:	f001 fd19 	bl	d6616 <_ZN6StringaSEOS_>
   d4be4:	a804      	add	r0, sp, #16
   d4be6:	f001 fc9f 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply get address: %s\n", reply.c_str());
   d4bea:	f000 ff61 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4bee:	9a00      	ldr	r2, [sp, #0]
   d4bf0:	4912      	ldr	r1, [pc, #72]	; (d4c3c <_Z10setAddressi+0x110>)
   d4bf2:	f7ff fb7d 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d4bf6:	4b0c      	ldr	r3, [pc, #48]	; (d4c28 <_Z10setAddressi+0xfc>)
   d4bf8:	781b      	ldrb	r3, [r3, #0]
   d4bfa:	b13b      	cbz	r3, d4c0c <_Z10setAddressi+0xe0>
      {
        Particle.publish("AT+ADDRESS?", reply);
   d4bfc:	a804      	add	r0, sp, #16
   d4bfe:	9a00      	ldr	r2, [sp, #0]
   d4c00:	490f      	ldr	r1, [pc, #60]	; (d4c40 <_Z10setAddressi+0x114>)
   d4c02:	f7ff fa65 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4c06:	a805      	add	r0, sp, #20
   d4c08:	f7ff fb5c 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setAddress(int address) // 7
{                            //  Set set module address
  String reply;
   d4c0c:	4668      	mov	r0, sp
   d4c0e:	f001 fc8b 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("AT+ADDRESS?", reply);
      }
    }
  }
}
   d4c12:	b008      	add	sp, #32
   d4c14:	bd10      	pop	{r4, pc}
   d4c16:	bf00      	nop
   d4c18:	000d7e39 	.word	0x000d7e39
   d4c1c:	000d7fb8 	.word	0x000d7fb8
   d4c20:	2003e1d4 	.word	0x2003e1d4
   d4c24:	000d7c9e 	.word	0x000d7c9e
   d4c28:	2003e1e0 	.word	0x2003e1e0
   d4c2c:	000d7fc8 	.word	0x000d7fc8
   d4c30:	2003e20c 	.word	0x2003e20c
   d4c34:	000d7fd3 	.word	0x000d7fd3
   d4c38:	000d7da1 	.word	0x000d7da1
   d4c3c:	000d7fe1 	.word	0x000d7fe1
   d4c40:	000d7ff8 	.word	0x000d7ff8

000d4c44 <_Z12setNetworkIDi>:

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
   d4c44:	b510      	push	{r4, lr}
   d4c46:	b088      	sub	sp, #32
  String reply;
   d4c48:	4939      	ldr	r1, [pc, #228]	; (d4d30 <_Z12setNetworkIDi+0xec>)
    }
  }
}

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
   d4c4a:	4604      	mov	r4, r0
  String reply;
   d4c4c:	4668      	mov	r0, sp
   d4c4e:	f001 fcb2 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+NETWORKID=%i\r\n", networkID);
   d4c52:	f000 fe9d 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4c56:	4622      	mov	r2, r4
   d4c58:	4936      	ldr	r1, [pc, #216]	; (d4d34 <_Z12setNetworkIDi+0xf0>)
   d4c5a:	f7ff fed5 	bl	d4a08 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4c5e:	20c8      	movs	r0, #200	; 0xc8
   d4c60:	f001 fb68 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d4c64:	f000 fe94 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4c68:	6803      	ldr	r3, [r0, #0]
   d4c6a:	691b      	ldr	r3, [r3, #16]
   d4c6c:	4798      	blx	r3
   d4c6e:	2800      	cmp	r0, #0
   d4c70:	dd21      	ble.n	d4cb6 <_Z12setNetworkIDi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4c72:	f000 fe8d 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4c76:	220a      	movs	r2, #10
   d4c78:	4601      	mov	r1, r0
   d4c7a:	a804      	add	r0, sp, #16
   d4c7c:	f001 fb86 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4c80:	a904      	add	r1, sp, #16
   d4c82:	4668      	mov	r0, sp
   d4c84:	f001 fcc7 	bl	d6616 <_ZN6StringaSEOS_>
   d4c88:	a804      	add	r0, sp, #16
   d4c8a:	f001 fc4d 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d4c8e:	4b2a      	ldr	r3, [pc, #168]	; (d4d38 <_Z12setNetworkIDi+0xf4>)
   d4c90:	781b      	ldrb	r3, [r3, #0]
   d4c92:	b12b      	cbz	r3, d4ca0 <_Z12setNetworkIDi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   d4c94:	f000 ff0c 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4c98:	9a00      	ldr	r2, [sp, #0]
   d4c9a:	4928      	ldr	r1, [pc, #160]	; (d4d3c <_Z12setNetworkIDi+0xf8>)
   d4c9c:	f7ff fb28 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish)
   d4ca0:	4b27      	ldr	r3, [pc, #156]	; (d4d40 <_Z12setNetworkIDi+0xfc>)
   d4ca2:	781b      	ldrb	r3, [r3, #0]
   d4ca4:	b13b      	cbz	r3, d4cb6 <_Z12setNetworkIDi+0x72>
    {
      Particle.publish("setAddress", reply);
   d4ca6:	a804      	add	r0, sp, #16
   d4ca8:	9a00      	ldr	r2, [sp, #0]
   d4caa:	4926      	ldr	r1, [pc, #152]	; (d4d44 <_Z12setNetworkIDi+0x100>)
   d4cac:	f7ff fa10 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4cb0:	a805      	add	r0, sp, #20
   d4cb2:	f7ff fb07 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4cb6:	4b24      	ldr	r3, [pc, #144]	; (d4d48 <_Z12setNetworkIDi+0x104>)
   d4cb8:	781b      	ldrb	r3, [r3, #0]
   d4cba:	2b00      	cmp	r3, #0
   d4cbc:	d032      	beq.n	d4d24 <_Z12setNetworkIDi+0xe0>
  {
    Serial1.printf("AT+NETWORKID?\r\n");
   d4cbe:	f000 fe67 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4cc2:	4922      	ldr	r1, [pc, #136]	; (d4d4c <_Z12setNetworkIDi+0x108>)
   d4cc4:	f7ff fbb0 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4cc8:	20c8      	movs	r0, #200	; 0xc8
   d4cca:	f001 fb33 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d4cce:	f000 fe5f 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4cd2:	6803      	ldr	r3, [r0, #0]
   d4cd4:	691b      	ldr	r3, [r3, #16]
   d4cd6:	4798      	blx	r3
   d4cd8:	2800      	cmp	r0, #0
   d4cda:	dd23      	ble.n	d4d24 <_Z12setNetworkIDi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4cdc:	f000 fee8 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4ce0:	491b      	ldr	r1, [pc, #108]	; (d4d50 <_Z12setNetworkIDi+0x10c>)
   d4ce2:	f7ff fba1 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4ce6:	f000 fe53 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4cea:	220a      	movs	r2, #10
   d4cec:	4601      	mov	r1, r0
   d4cee:	a804      	add	r0, sp, #16
   d4cf0:	f001 fb4c 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4cf4:	a904      	add	r1, sp, #16
   d4cf6:	4668      	mov	r0, sp
   d4cf8:	f001 fc8d 	bl	d6616 <_ZN6StringaSEOS_>
   d4cfc:	a804      	add	r0, sp, #16
   d4cfe:	f001 fc13 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+NETWORKID? %s\n", reply.c_str());
   d4d02:	f000 fed5 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4d06:	9a00      	ldr	r2, [sp, #0]
   d4d08:	4912      	ldr	r1, [pc, #72]	; (d4d54 <_Z12setNetworkIDi+0x110>)
   d4d0a:	f7ff faf1 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d4d0e:	4b0c      	ldr	r3, [pc, #48]	; (d4d40 <_Z12setNetworkIDi+0xfc>)
   d4d10:	781b      	ldrb	r3, [r3, #0]
   d4d12:	b13b      	cbz	r3, d4d24 <_Z12setNetworkIDi+0xe0>
      {
        Particle.publish("AT+NETWORKID?", reply);
   d4d14:	a804      	add	r0, sp, #16
   d4d16:	9a00      	ldr	r2, [sp, #0]
   d4d18:	490f      	ldr	r1, [pc, #60]	; (d4d58 <_Z12setNetworkIDi+0x114>)
   d4d1a:	f7ff f9d9 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4d1e:	a805      	add	r0, sp, #20
   d4d20:	f7ff fad0 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
  String reply;
   d4d24:	4668      	mov	r0, sp
   d4d26:	f001 fbff 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("AT+NETWORKID?", reply);
      }
    }
  }
}
   d4d2a:	b008      	add	sp, #32
   d4d2c:	bd10      	pop	{r4, pc}
   d4d2e:	bf00      	nop
   d4d30:	000d7e39 	.word	0x000d7e39
   d4d34:	000d8004 	.word	0x000d8004
   d4d38:	2003e1d4 	.word	0x2003e1d4
   d4d3c:	000d7c9e 	.word	0x000d7c9e
   d4d40:	2003e1e0 	.word	0x2003e1e0
   d4d44:	000d7fc8 	.word	0x000d7fc8
   d4d48:	2003e20c 	.word	0x2003e20c
   d4d4c:	000d8016 	.word	0x000d8016
   d4d50:	000d7da1 	.word	0x000d7da1
   d4d54:	000d8026 	.word	0x000d8026
   d4d58:	000d803e 	.word	0x000d803e

000d4d5c <_Z8setCRFOPi>:
    }
  }
}

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
   d4d5c:	b510      	push	{r4, lr}
   d4d5e:	b088      	sub	sp, #32
  String reply;
   d4d60:	4939      	ldr	r1, [pc, #228]	; (d4e48 <_Z8setCRFOPi+0xec>)
    }
  }
}

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
   d4d62:	4604      	mov	r4, r0
  String reply;
   d4d64:	4668      	mov	r0, sp
   d4d66:	f001 fc26 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+CRFOP=%i\r\n", outputPower);
   d4d6a:	f000 fe11 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4d6e:	4622      	mov	r2, r4
   d4d70:	4936      	ldr	r1, [pc, #216]	; (d4e4c <_Z8setCRFOPi+0xf0>)
   d4d72:	f7ff fe49 	bl	d4a08 <_ZN5Print6printfIIiEEEjPKcDpT_>
  delay(200);
   d4d76:	20c8      	movs	r0, #200	; 0xc8
   d4d78:	f001 fadc 	bl	d6334 <delay>
  if (Serial1.available() > 0)
   d4d7c:	f000 fe08 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4d80:	6803      	ldr	r3, [r0, #0]
   d4d82:	691b      	ldr	r3, [r3, #16]
   d4d84:	4798      	blx	r3
   d4d86:	2800      	cmp	r0, #0
   d4d88:	dd21      	ble.n	d4dce <_Z8setCRFOPi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   d4d8a:	f000 fe01 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4d8e:	220a      	movs	r2, #10
   d4d90:	4601      	mov	r1, r0
   d4d92:	a804      	add	r0, sp, #16
   d4d94:	f001 fafa 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4d98:	a904      	add	r1, sp, #16
   d4d9a:	4668      	mov	r0, sp
   d4d9c:	f001 fc3b 	bl	d6616 <_ZN6StringaSEOS_>
   d4da0:	a804      	add	r0, sp, #16
   d4da2:	f001 fbc1 	bl	d6528 <_ZN6StringD1Ev>

    if (serialPrint)
   d4da6:	4b2a      	ldr	r3, [pc, #168]	; (d4e50 <_Z8setCRFOPi+0xf4>)
   d4da8:	781b      	ldrb	r3, [r3, #0]
   d4daa:	b12b      	cbz	r3, d4db8 <_Z8setCRFOPi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   d4dac:	f000 fe80 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4db0:	9a00      	ldr	r2, [sp, #0]
   d4db2:	4928      	ldr	r1, [pc, #160]	; (d4e54 <_Z8setCRFOPi+0xf8>)
   d4db4:	f7ff fa9c 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
    }
    if (particlePublish)
   d4db8:	4b27      	ldr	r3, [pc, #156]	; (d4e58 <_Z8setCRFOPi+0xfc>)
   d4dba:	781b      	ldrb	r3, [r3, #0]
   d4dbc:	b13b      	cbz	r3, d4dce <_Z8setCRFOPi+0x72>
    {
      Particle.publish("AT+CRFOP", reply);
   d4dbe:	a804      	add	r0, sp, #16
   d4dc0:	9a00      	ldr	r2, [sp, #0]
   d4dc2:	4926      	ldr	r1, [pc, #152]	; (d4e5c <_Z8setCRFOPi+0x100>)
   d4dc4:	f7ff f984 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4dc8:	a805      	add	r0, sp, #20
   d4dca:	f7ff fa7b 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   d4dce:	4b24      	ldr	r3, [pc, #144]	; (d4e60 <_Z8setCRFOPi+0x104>)
   d4dd0:	781b      	ldrb	r3, [r3, #0]
   d4dd2:	2b00      	cmp	r3, #0
   d4dd4:	d032      	beq.n	d4e3c <_Z8setCRFOPi+0xe0>
  {
    Serial1.printf("AT+CRFOP?\r\n");
   d4dd6:	f000 fddb 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4dda:	4922      	ldr	r1, [pc, #136]	; (d4e64 <_Z8setCRFOPi+0x108>)
   d4ddc:	f7ff fb24 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
    delay(200);
   d4de0:	20c8      	movs	r0, #200	; 0xc8
   d4de2:	f001 faa7 	bl	d6334 <delay>
    if (Serial1.available() > 0)
   d4de6:	f000 fdd3 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4dea:	6803      	ldr	r3, [r0, #0]
   d4dec:	691b      	ldr	r3, [r3, #16]
   d4dee:	4798      	blx	r3
   d4df0:	2800      	cmp	r0, #0
   d4df2:	dd23      	ble.n	d4e3c <_Z8setCRFOPi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   d4df4:	f000 fe5c 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4df8:	491b      	ldr	r1, [pc, #108]	; (d4e68 <_Z8setCRFOPi+0x10c>)
   d4dfa:	f7ff fb15 	bl	d4428 <_ZN5Print6printfIIEEEjPKcDpT_>
      reply = Serial1.readStringUntil('\n');
   d4dfe:	f000 fdc7 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4e02:	220a      	movs	r2, #10
   d4e04:	4601      	mov	r1, r0
   d4e06:	a804      	add	r0, sp, #16
   d4e08:	f001 fac0 	bl	d638c <_ZN6Stream15readStringUntilEc>
   d4e0c:	a904      	add	r1, sp, #16
   d4e0e:	4668      	mov	r0, sp
   d4e10:	f001 fc01 	bl	d6616 <_ZN6StringaSEOS_>
   d4e14:	a804      	add	r0, sp, #16
   d4e16:	f001 fb87 	bl	d6528 <_ZN6StringD1Ev>
      Serial.printf("Reply AT+CRFOP?: %s\n", reply.c_str());
   d4e1a:	f000 fe49 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4e1e:	9a00      	ldr	r2, [sp, #0]
   d4e20:	4912      	ldr	r1, [pc, #72]	; (d4e6c <_Z8setCRFOPi+0x110>)
   d4e22:	f7ff fa65 	bl	d42f0 <_ZN5Print6printfIIPcEEEjPKcDpT_>
      if (particlePublish)
   d4e26:	4b0c      	ldr	r3, [pc, #48]	; (d4e58 <_Z8setCRFOPi+0xfc>)
   d4e28:	781b      	ldrb	r3, [r3, #0]
   d4e2a:	b13b      	cbz	r3, d4e3c <_Z8setCRFOPi+0xe0>
      {
        Particle.publish("AT+CRFOP?", reply);
   d4e2c:	a804      	add	r0, sp, #16
   d4e2e:	9a00      	ldr	r2, [sp, #0]
   d4e30:	490f      	ldr	r1, [pc, #60]	; (d4e70 <_Z8setCRFOPi+0x114>)
   d4e32:	f7ff f94d 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.7>
   d4e36:	a805      	add	r0, sp, #20
   d4e38:	f7ff fa44 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
  String reply;
   d4e3c:	4668      	mov	r0, sp
   d4e3e:	f001 fb73 	bl	d6528 <_ZN6StringD1Ev>
      {
        Particle.publish("AT+CRFOP?", reply);
      }
    }
  }
}
   d4e42:	b008      	add	sp, #32
   d4e44:	bd10      	pop	{r4, pc}
   d4e46:	bf00      	nop
   d4e48:	000d7e39 	.word	0x000d7e39
   d4e4c:	000d804c 	.word	0x000d804c
   d4e50:	2003e1d4 	.word	0x2003e1d4
   d4e54:	000d7c9e 	.word	0x000d7c9e
   d4e58:	2003e1e0 	.word	0x2003e1e0
   d4e5c:	000d805a 	.word	0x000d805a
   d4e60:	2003e20c 	.word	0x2003e20c
   d4e64:	000d8063 	.word	0x000d8063
   d4e68:	000d7da1 	.word	0x000d7da1
   d4e6c:	000d806f 	.word	0x000d806f
   d4e70:	000d8084 	.word	0x000d8084

000d4e74 <_Z10radioSetupv>:
    }
  }
}

void radioSetup()
{
   d4e74:	b508      	push	{r3, lr}
  setMode(0); // turn on transmit and receive mode
   d4e76:	2000      	movs	r0, #0
   d4e78:	f7ff fb1e 	bl	d44b8 <_Z7setModei>
  atTest();
   d4e7c:	f7ff fad8 	bl	d4430 <_Z6atTestv>
  setAddress(address); // between 0-65535
   d4e80:	4b0d      	ldr	r3, [pc, #52]	; (d4eb8 <_Z10radioSetupv+0x44>)
   d4e82:	6818      	ldr	r0, [r3, #0]
   d4e84:	f7ff fe52 	bl	d4b2c <_Z10setAddressi>
  setNetworkID(networkID);
   d4e88:	4b0c      	ldr	r3, [pc, #48]	; (d4ebc <_Z10radioSetupv+0x48>)
   d4e8a:	6818      	ldr	r0, [r3, #0]
   d4e8c:	f7ff feda 	bl	d4c44 <_Z12setNetworkIDi>
  setBand(bandParameter);
   d4e90:	4b0b      	ldr	r3, [pc, #44]	; (d4ec0 <_Z10radioSetupv+0x4c>)
   d4e92:	6818      	ldr	r0, [r3, #0]
   d4e94:	f7ff fc92 	bl	d47bc <_Z7setBandi>
  setParameter(radioParameter);
   d4e98:	4b0a      	ldr	r3, [pc, #40]	; (d4ec4 <_Z10radioSetupv+0x50>)
   d4e9a:	6818      	ldr	r0, [r3, #0]
   d4e9c:	f7ff fc04 	bl	d46a8 <_Z12setParameteri>
  setIPR(baudRate);
   d4ea0:	4b09      	ldr	r3, [pc, #36]	; (d4ec8 <_Z10radioSetupv+0x54>)
   d4ea2:	6818      	ldr	r0, [r3, #0]
   d4ea4:	f7ff fdb6 	bl	d4a14 <_Z6setIPRi>
  setCRFOP(outputPower);
   d4ea8:	4b08      	ldr	r3, [pc, #32]	; (d4ecc <_Z10radioSetupv+0x58>)
   d4eaa:	6818      	ldr	r0, [r3, #0]
   d4eac:	f7ff ff56 	bl	d4d5c <_Z8setCRFOPi>
  setCPIN();
}
   d4eb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setNetworkID(networkID);
  setBand(bandParameter);
  setParameter(radioParameter);
  setIPR(baudRate);
  setCRFOP(outputPower);
  setCPIN();
   d4eb4:	f7ff bd14 	b.w	d48e0 <_Z7setCPINv>
   d4eb8:	2003e14c 	.word	0x2003e14c
   d4ebc:	2003e13c 	.word	0x2003e13c
   d4ec0:	2003e1e8 	.word	0x2003e1e8
   d4ec4:	2003e1d8 	.word	0x2003e1d8
   d4ec8:	2003e134 	.word	0x2003e134
   d4ecc:	2003e138 	.word	0x2003e138

000d4ed0 <setup>:
int lowPowerTime = 30; // number of minutes

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   d4ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RGB.control(TRUE);
   d4ed2:	2001      	movs	r0, #1
   d4ed4:	f001 f9ee 	bl	d62b4 <_ZN8RGBClass7controlEb>
  RGB.brightness(10);
   d4ed8:	2101      	movs	r1, #1
   d4eda:	200a      	movs	r0, #10
   d4edc:	f001 fa0d 	bl	d62fa <_ZN8RGBClass10brightnessEhb>
  switch (probeNumber)
   d4ee0:	4b3b      	ldr	r3, [pc, #236]	; (d4fd0 <setup+0x100>)
   d4ee2:	681b      	ldr	r3, [r3, #0]
   d4ee4:	3b01      	subs	r3, #1
   d4ee6:	2b06      	cmp	r3, #6
   d4ee8:	d821      	bhi.n	d4f2e <setup+0x5e>
   d4eea:	e8df f003 	tbb	[pc, r3]
   d4eee:	0704      	.short	0x0704
   d4ef0:	1814100d 	.word	0x1814100d
   d4ef4:	1c          	.byte	0x1c
   d4ef5:	00          	.byte	0x00
  {
  case 1:
    RGB.color(0, 0, 255); // blue!
   d4ef6:	22ff      	movs	r2, #255	; 0xff
   d4ef8:	2100      	movs	r1, #0
   d4efa:	e016      	b.n	d4f2a <setup+0x5a>
    break;
  case 2:
    RGB.color(25, 255, 88); // green!
   d4efc:	2258      	movs	r2, #88	; 0x58
   d4efe:	21ff      	movs	r1, #255	; 0xff
   d4f00:	2019      	movs	r0, #25
   d4f02:	f001 f9e7 	bl	d62d4 <_ZN8RGBClass5colorEiii>
    break;
   d4f06:	e015      	b.n	d4f34 <setup+0x64>
  case 3:
    RGB.color(255, 69, 0); // orange!
   d4f08:	2200      	movs	r2, #0
   d4f0a:	2145      	movs	r1, #69	; 0x45
   d4f0c:	e005      	b.n	d4f1a <setup+0x4a>
    break;
  case 4:
    RGB.color(160, 32, 240); // purple!
   d4f0e:	22f0      	movs	r2, #240	; 0xf0
   d4f10:	2120      	movs	r1, #32
   d4f12:	20a0      	movs	r0, #160	; 0xa0
   d4f14:	e7f5      	b.n	d4f02 <setup+0x32>
    break;
  case 5:
    RGB.color(255, 0, 0); // red!
   d4f16:	2200      	movs	r2, #0
   d4f18:	4611      	mov	r1, r2
   d4f1a:	20ff      	movs	r0, #255	; 0xff
   d4f1c:	e7f1      	b.n	d4f02 <setup+0x32>
    break;
  case 6:
    RGB.color(115, 147, 179); // grey!
   d4f1e:	22b3      	movs	r2, #179	; 0xb3
   d4f20:	2193      	movs	r1, #147	; 0x93
   d4f22:	2073      	movs	r0, #115	; 0x73
   d4f24:	e7ed      	b.n	d4f02 <setup+0x32>
    break;
  case 7:
    RGB.color(255, 255, 0); // yellow
   d4f26:	2200      	movs	r2, #0
   d4f28:	21ff      	movs	r1, #255	; 0xff
   d4f2a:	4608      	mov	r0, r1
   d4f2c:	e7e9      	b.n	d4f02 <setup+0x32>
    break;
  default:
    RGB.control(FALSE);
   d4f2e:	2000      	movs	r0, #0
   d4f30:	f001 f9c0 	bl	d62b4 <_ZN8RGBClass7controlEb>
    break;
  }
  Serial.begin(9600);
   d4f34:	f000 fdbc 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d4f38:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4f3c:	f000 fdac 	bl	d5a98 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d4f40:	f000 fd26 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d4f44:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4f48:	f000 fd1c 	bl	d5984 <_ZN11USARTSerial5beginEm>
  delay(1000);
   d4f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f50:	f001 f9f0 	bl	d6334 <delay>
  pinMode(THERMISTORPIN, INPUT);
   d4f54:	2100      	movs	r1, #0
   d4f56:	2013      	movs	r0, #19
   d4f58:	f001 fcfc 	bl	d6954 <pinMode>

  serialPrint = true;     // serial print to screen
   d4f5c:	4b1d      	ldr	r3, [pc, #116]	; (d4fd4 <setup+0x104>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d4f5e:	4c1e      	ldr	r4, [pc, #120]	; (d4fd8 <setup+0x108>)
   d4f60:	2201      	movs	r2, #1
   d4f62:	701a      	strb	r2, [r3, #0]
  particlePublish = false; // publish to particle cloud
   d4f64:	4a1d      	ldr	r2, [pc, #116]	; (d4fdc <setup+0x10c>)
   d4f66:	2300      	movs	r3, #0
   d4f68:	7013      	strb	r3, [r2, #0]
  askSetting = false;      // ask lora setting values
   d4f6a:	4a1d      	ldr	r2, [pc, #116]	; (d4fe0 <setup+0x110>)
   d4f6c:	7013      	strb	r3, [r2, #0]
  // serialPrint = true;     // serial print to screen
  // particlePublish = false; // publish to particle cloud
  // askSetting = true;      // ask lora setting values

  // FACTORY(); // set lora module to factory defaults
  atTest();
   d4f6e:	f7ff fa5f 	bl	d4430 <_Z6atTestv>
  radioSetup(); // start lora module
   d4f72:	f7ff ff7f 	bl	d4e74 <_Z10radioSetupv>
   d4f76:	7d23      	ldrb	r3, [r4, #20]
   d4f78:	b313      	cbz	r3, d4fc0 <setup+0xf0>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4f7a:	2302      	movs	r3, #2
   d4f7c:	7223      	strb	r3, [r4, #8]

  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
      .duration(lowPowerTime * 60000); // minutes to milliseconds
   d4f7e:	4b19      	ldr	r3, [pc, #100]	; (d4fe4 <setup+0x114>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	f64e 2760 	movw	r7, #60000	; 0xea60
   d4f86:	435f      	muls	r7, r3
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4f88:	6823      	ldr	r3, [r4, #0]
   d4f8a:	68db      	ldr	r3, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d4f8c:	b123      	cbz	r3, d4f98 <setup+0xc8>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4f8e:	889a      	ldrh	r2, [r3, #4]
   d4f90:	2a04      	cmp	r2, #4
   d4f92:	d019      	beq.n	d4fc8 <setup+0xf8>
                return start;
            }
            start = start->next;
   d4f94:	689b      	ldr	r3, [r3, #8]
   d4f96:	e7f9      	b.n	d4f8c <setup+0xbc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4f98:	4913      	ldr	r1, [pc, #76]	; (d4fe8 <setup+0x118>)
   d4f9a:	2010      	movs	r0, #16
   d4f9c:	f001 fd14 	bl	d69c8 <_ZnwjRKSt9nothrow_t>
   d4fa0:	4605      	mov	r5, r0
   d4fa2:	b198      	cbz	r0, d4fcc <setup+0xfc>
   d4fa4:	2610      	movs	r6, #16
   d4fa6:	4632      	mov	r2, r6
   d4fa8:	2100      	movs	r1, #0
   d4faa:	f002 fdd2 	bl	d7b52 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4fae:	2302      	movs	r3, #2
   d4fb0:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4fb2:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4fb4:	802e      	strh	r6, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4fb6:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4fb8:	6923      	ldr	r3, [r4, #16]
   d4fba:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4fbc:	60ef      	str	r7, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4fbe:	6125      	str	r5, [r4, #16]
  counter = 0;
   d4fc0:	4b0a      	ldr	r3, [pc, #40]	; (d4fec <setup+0x11c>)
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	601a      	str	r2, [r3, #0]
}
   d4fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4fc8:	60df      	str	r7, [r3, #12]
   d4fca:	e7f9      	b.n	d4fc0 <setup+0xf0>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d4fcc:	7520      	strb	r0, [r4, #20]
   d4fce:	e7f7      	b.n	d4fc0 <setup+0xf0>
   d4fd0:	2003e144 	.word	0x2003e144
   d4fd4:	2003e1d4 	.word	0x2003e1d4
   d4fd8:	2003e1ec 	.word	0x2003e1ec
   d4fdc:	2003e1e0 	.word	0x2003e1e0
   d4fe0:	2003e20c 	.word	0x2003e20c
   d4fe4:	2003e140 	.word	0x2003e140
   d4fe8:	000d831c 	.word	0x000d831c
   d4fec:	2003e3a0 	.word	0x2003e3a0

000d4ff0 <_GLOBAL__sub_I_probeNumber>:
  //   Serial.printf("Awaiting Reply from mode?\n");
  //   reply = Serial1.readStringUntil('\n');
  //   Serial.printf("Reply: %s\n", reply.c_str());
  //   delay(1000);
  // }
   d4ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4ff2:	4c15      	ldr	r4, [pc, #84]	; (d5048 <_GLOBAL__sub_I_probeNumber+0x58>)
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4ff4:	4b15      	ldr	r3, [pc, #84]	; (d504c <_GLOBAL__sub_I_probeNumber+0x5c>)
   d4ff6:	2500      	movs	r5, #0
   d4ff8:	701d      	strb	r5, [r3, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4ffa:	2610      	movs	r6, #16

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4ffc:	f000 f940 	bl	d5280 <HAL_Pin_Map>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5000:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5002:	4632      	mov	r2, r6
   d5004:	4629      	mov	r1, r5
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5006:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5008:	f002 fda3 	bl	d7b52 <memset>
        config_.size = sizeof(hal_sleep_config_t);
   d500c:	80a6      	strh	r6, [r4, #4]
int bandParameter = 0;  // 0 for 915 and 1 for 868
int radioParameter = 0; // 0 for within 3km 1 for over 3km
int baudRate = 115200;
int outputPower = 15; // 0-15

SystemSleepConfiguration config;
   d500e:	4e10      	ldr	r6, [pc, #64]	; (d5050 <_GLOBAL__sub_I_probeNumber+0x60>)
   d5010:	4910      	ldr	r1, [pc, #64]	; (d5054 <_GLOBAL__sub_I_probeNumber+0x64>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5012:	2301      	movs	r3, #1
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5014:	2702      	movs	r7, #2
   d5016:	4632      	mov	r2, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5018:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d501a:	80e7      	strh	r7, [r4, #6]
   d501c:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d501e:	4c0e      	ldr	r4, [pc, #56]	; (d5058 <_GLOBAL__sub_I_probeNumber+0x68>)
   d5020:	f001 fcc0 	bl	d69a4 <__aeabi_atexit>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5024:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5028:	4638      	mov	r0, r7

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d502a:	6025      	str	r5, [r4, #0]
   d502c:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d502e:	71a5      	strb	r5, [r4, #6]
   d5030:	8125      	strh	r5, [r4, #8]
   d5032:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5034:	f000 f9fc 	bl	d5430 <set_system_mode>
int lowPowerTime = 30; // number of minutes

SYSTEM_MODE(SEMI_AUTOMATIC);
   d5038:	4632      	mov	r2, r6
   d503a:	4620      	mov	r0, r4
   d503c:	4907      	ldr	r1, [pc, #28]	; (d505c <_GLOBAL__sub_I_probeNumber+0x6c>)
  //   Serial.printf("Awaiting Reply from mode?\n");
  //   reply = Serial1.readStringUntil('\n');
  //   Serial.printf("Reply: %s\n", reply.c_str());
  //   delay(1000);
  // }
   d503e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int outputPower = 15; // 0-15

SystemSleepConfiguration config;
int lowPowerTime = 30; // number of minutes

SYSTEM_MODE(SEMI_AUTOMATIC);
   d5042:	f001 bcaf 	b.w	d69a4 <__aeabi_atexit>
   d5046:	bf00      	nop
   d5048:	2003e1ec 	.word	0x2003e1ec
   d504c:	2003e1c4 	.word	0x2003e1c4
   d5050:	2003e1bc 	.word	0x2003e1bc
   d5054:	000d40b7 	.word	0x000d40b7
   d5058:	2003e1c8 	.word	0x2003e1c8
   d505c:	000d40ed 	.word	0x000d40ed

000d5060 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <HAL_USB_USART_Init+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	681b      	ldr	r3, [r3, #0]
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	0003024c 	.word	0x0003024c

000d5070 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <HAL_USB_USART_Begin+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	685b      	ldr	r3, [r3, #4]
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	0003024c 	.word	0x0003024c

000d5080 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <HAL_USB_USART_Available_Data+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	691b      	ldr	r3, [r3, #16]
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	0003024c 	.word	0x0003024c

000d5090 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	695b      	ldr	r3, [r3, #20]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	0003024c 	.word	0x0003024c

000d50a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <HAL_USB_USART_Receive_Data+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	699b      	ldr	r3, [r3, #24]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	0003024c 	.word	0x0003024c

000d50b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <HAL_USB_USART_Send_Data+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	69db      	ldr	r3, [r3, #28]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	0003024c 	.word	0x0003024c

000d50c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <HAL_USB_USART_Flush_Data+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	6a1b      	ldr	r3, [r3, #32]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	0003024c 	.word	0x0003024c

000d50d0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <HAL_I2C_Write_Data+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	6a1b      	ldr	r3, [r3, #32]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	00030228 	.word	0x00030228

000d50e0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <HAL_I2C_Available_Data+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	00030228 	.word	0x00030228

000d50f0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <HAL_I2C_Read_Data+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	00030228 	.word	0x00030228

000d5100 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <HAL_I2C_Peek_Data+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030228 	.word	0x00030228

000d5110 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <HAL_I2C_Flush_Data+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030228 	.word	0x00030228

000d5120 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <HAL_I2C_Is_Enabled+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030228 	.word	0x00030228

000d5130 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <HAL_I2C_Init+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030228 	.word	0x00030228

000d5140 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <HAL_USART_Init+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	681b      	ldr	r3, [r3, #0]
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	0003023c 	.word	0x0003023c

000d5150 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <HAL_USART_Write_Data+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	68db      	ldr	r3, [r3, #12]
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	0003023c 	.word	0x0003023c

000d5160 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <HAL_USART_Available_Data+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	691b      	ldr	r3, [r3, #16]
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	0003023c 	.word	0x0003023c

000d5170 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <HAL_USART_Read_Data+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	695b      	ldr	r3, [r3, #20]
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	0003023c 	.word	0x0003023c

000d5180 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <HAL_USART_Peek_Data+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	699b      	ldr	r3, [r3, #24]
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	0003023c 	.word	0x0003023c

000d5190 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <HAL_USART_Flush_Data+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	69db      	ldr	r3, [r3, #28]
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	0003023c 	.word	0x0003023c

000d51a0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <HAL_USART_Is_Enabled+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	6a1b      	ldr	r3, [r3, #32]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	0003023c 	.word	0x0003023c

000d51b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <HAL_USART_Available_Data_For_Write+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	0003023c 	.word	0x0003023c

000d51c0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <HAL_USART_BeginConfig+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	0003023c 	.word	0x0003023c

000d51d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <inet_inet_ntop+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	695b      	ldr	r3, [r3, #20]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	00030264 	.word	0x00030264

000d51e0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <os_thread_is_current+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	689b      	ldr	r3, [r3, #8]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	00030248 	.word	0x00030248

000d51f0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <os_thread_join+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	691b      	ldr	r3, [r3, #16]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	00030248 	.word	0x00030248

000d5200 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <os_thread_cleanup+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	695b      	ldr	r3, [r3, #20]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030248 	.word	0x00030248

000d5210 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <os_mutex_recursive_create+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030248 	.word	0x00030248

000d5220 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <os_mutex_recursive_destroy+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030248 	.word	0x00030248

000d5230 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <HAL_Core_System_Reset_Ex+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030234 	.word	0x00030234

000d5240 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <HAL_RNG_GetRandomNumber+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	685b      	ldr	r3, [r3, #4]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030218 	.word	0x00030218

000d5250 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	695b      	ldr	r3, [r3, #20]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	00030218 	.word	0x00030218

000d5260 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <HAL_SPI_Init+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	69db      	ldr	r3, [r3, #28]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	00030230 	.word	0x00030230

000d5270 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <HAL_SPI_Is_Enabled+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	6a1b      	ldr	r3, [r3, #32]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	00030230 	.word	0x00030230

000d5280 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <HAL_Pin_Map+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	681b      	ldr	r3, [r3, #0]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	0003022c 	.word	0x0003022c

000d5290 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <HAL_Validate_Pin_Function+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	685b      	ldr	r3, [r3, #4]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003022c 	.word	0x0003022c

000d52a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <HAL_Pin_Mode+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	689b      	ldr	r3, [r3, #8]
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	0003022c 	.word	0x0003022c

000d52b0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <HAL_ADC_Read+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003022c 	.word	0x0003022c

000d52c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <netdb_freeaddrinfo+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	689b      	ldr	r3, [r3, #8]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	00030268 	.word	0x00030268

000d52d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <netdb_getaddrinfo+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	68db      	ldr	r3, [r3, #12]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	00030268 	.word	0x00030268

000d52e0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <LED_SetSignalingColor+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	685b      	ldr	r3, [r3, #4]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	00030260 	.word	0x00030260

000d52f0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <LED_Signaling_Start+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	689b      	ldr	r3, [r3, #8]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	00030260 	.word	0x00030260

000d5300 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <LED_Signaling_Stop+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	68db      	ldr	r3, [r3, #12]
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	00030260 	.word	0x00030260

000d5310 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <LED_SetBrightness+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	691b      	ldr	r3, [r3, #16]
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	00030260 	.word	0x00030260

000d5320 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <LED_RGB_IsOverRidden+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	699b      	ldr	r3, [r3, #24]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030260 	.word	0x00030260

000d5330 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <LED_On+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	69db      	ldr	r3, [r3, #28]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030260 	.word	0x00030260

000d5340 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <log_message+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030260 	.word	0x00030260

000d5350 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <spark_cloud_flag_connected+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	695b      	ldr	r3, [r3, #20]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030244 	.word	0x00030244

000d5360 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <spark_deviceID+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	69db      	ldr	r3, [r3, #28]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030244 	.word	0x00030244

000d5370 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <spark_send_event+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	6a1b      	ldr	r3, [r3, #32]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030244 	.word	0x00030244

000d5380 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030244 	.word	0x00030244

000d5390 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <network_connect+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	685b      	ldr	r3, [r3, #4]
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030240 	.word	0x00030240

000d53a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <network_connecting+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	689b      	ldr	r3, [r3, #8]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030240 	.word	0x00030240

000d53b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <network_disconnect+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	68db      	ldr	r3, [r3, #12]
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030240 	.word	0x00030240

000d53c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <network_ready+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	691b      	ldr	r3, [r3, #16]
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	00030240 	.word	0x00030240

000d53d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <network_on+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	695b      	ldr	r3, [r3, #20]
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	00030240 	.word	0x00030240

000d53e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <network_off+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	699b      	ldr	r3, [r3, #24]
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030240 	.word	0x00030240

000d53f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <network_listen+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	69db      	ldr	r3, [r3, #28]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030240 	.word	0x00030240

000d5400 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <network_listening+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	6a1b      	ldr	r3, [r3, #32]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030240 	.word	0x00030240

000d5410 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <network_set_listen_timeout+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	00030240 	.word	0x00030240

000d5420 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <network_get_listen_timeout+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	00030240 	.word	0x00030240

000d5430 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <set_system_mode+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	685b      	ldr	r3, [r3, #4]
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	00030220 	.word	0x00030220

000d5440 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <system_delay_ms+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	695b      	ldr	r3, [r3, #20]
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	00030220 	.word	0x00030220

000d5450 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <application_thread_current+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030220 	.word	0x00030220

000d5460 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <application_thread_invoke+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	00030220 	.word	0x00030220

000d5470 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b03      	ldr	r3, [pc, #12]	; (d5480 <system_ctrl_set_app_request_handler+0x10>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d547a:	9301      	str	r3, [sp, #4]
   d547c:	bd08      	pop	{r3, pc}
   d547e:	0000      	.short	0x0000
   d5480:	00030220 	.word	0x00030220

000d5484 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b03      	ldr	r3, [pc, #12]	; (d5494 <system_ctrl_set_result+0x10>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d548e:	9301      	str	r3, [sp, #4]
   d5490:	bd08      	pop	{r3, pc}
   d5492:	0000      	.short	0x0000
   d5494:	00030220 	.word	0x00030220

000d5498 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b03      	ldr	r3, [pc, #12]	; (d54a8 <system_sleep_ext+0x10>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d54a2:	9301      	str	r3, [sp, #4]
   d54a4:	bd08      	pop	{r3, pc}
   d54a6:	0000      	.short	0x0000
   d54a8:	00030220 	.word	0x00030220

000d54ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <malloc+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	681b      	ldr	r3, [r3, #0]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003021c 	.word	0x0003021c

000d54bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <free+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	685b      	ldr	r3, [r3, #4]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003021c 	.word	0x0003021c

000d54cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <realloc+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	689b      	ldr	r3, [r3, #8]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003021c 	.word	0x0003021c

000d54dc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <sprintf+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	68db      	ldr	r3, [r3, #12]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003021c 	.word	0x0003021c

000d54ec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <vsnprintf+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003021c 	.word	0x0003021c

000d54fc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <abort+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003021c 	.word	0x0003021c

000d550c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <_malloc_r+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003021c 	.word	0x0003021c

000d551c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <__errno+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	0003021c 	.word	0x0003021c

000d552c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d552c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d552e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5530:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5532:	b113      	cbz	r3, d553a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5534:	2203      	movs	r2, #3
   d5536:	4601      	mov	r1, r0
   d5538:	4798      	blx	r3
    }
   d553a:	4620      	mov	r0, r4
   d553c:	bd10      	pop	{r4, pc}

000d553e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d553e:	2300      	movs	r3, #0
   d5540:	461a      	mov	r2, r3
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	f7ff bf24 	b.w	d5390 <network_connect>

000d5548 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5548:	2200      	movs	r2, #0
   d554a:	2102      	movs	r1, #2
   d554c:	6840      	ldr	r0, [r0, #4]
   d554e:	f7ff bf2f 	b.w	d53b0 <network_disconnect>

000d5552 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5552:	2200      	movs	r2, #0
   d5554:	4611      	mov	r1, r2
   d5556:	6840      	ldr	r0, [r0, #4]
   d5558:	f7ff bf22 	b.w	d53a0 <network_connecting>

000d555c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d555c:	2200      	movs	r2, #0
   d555e:	4611      	mov	r1, r2
   d5560:	6840      	ldr	r0, [r0, #4]
   d5562:	f7ff bf2d 	b.w	d53c0 <network_ready>

000d5566 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5566:	2300      	movs	r3, #0
   d5568:	461a      	mov	r2, r3
   d556a:	4619      	mov	r1, r3
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	f7ff bf2f 	b.w	d53d0 <network_on>

000d5572 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5572:	2300      	movs	r3, #0
   d5574:	461a      	mov	r2, r3
   d5576:	4619      	mov	r1, r3
   d5578:	6840      	ldr	r0, [r0, #4]
   d557a:	f7ff bf31 	b.w	d53e0 <network_off>

000d557e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d557e:	2200      	movs	r2, #0
   d5580:	f081 0101 	eor.w	r1, r1, #1
   d5584:	6840      	ldr	r0, [r0, #4]
   d5586:	f7ff bf33 	b.w	d53f0 <network_listen>

000d558a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d558a:	2200      	movs	r2, #0
   d558c:	6840      	ldr	r0, [r0, #4]
   d558e:	f7ff bf3f 	b.w	d5410 <network_set_listen_timeout>

000d5592 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5592:	2200      	movs	r2, #0
   d5594:	4611      	mov	r1, r2
   d5596:	6840      	ldr	r0, [r0, #4]
   d5598:	f7ff bf42 	b.w	d5420 <network_get_listen_timeout>

000d559c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d559c:	2200      	movs	r2, #0
   d559e:	4611      	mov	r1, r2
   d55a0:	6840      	ldr	r0, [r0, #4]
   d55a2:	f7ff bf2d 	b.w	d5400 <network_listening>

000d55a6 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d55a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55aa:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d55ac:	b095      	sub	sp, #84	; 0x54
   d55ae:	4616      	mov	r6, r2
   d55b0:	460d      	mov	r5, r1
   d55b2:	4607      	mov	r7, r0
    IPAddress addr;
   d55b4:	f000 fadc 	bl	d5b70 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d55b8:	4621      	mov	r1, r4
   d55ba:	2220      	movs	r2, #32
   d55bc:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55be:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d55c0:	f002 fac7 	bl	d7b52 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d55c4:	2340      	movs	r3, #64	; 0x40
   d55c6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d55c8:	4621      	mov	r1, r4
   d55ca:	466b      	mov	r3, sp
   d55cc:	aa0c      	add	r2, sp, #48	; 0x30
   d55ce:	4630      	mov	r0, r6
   d55d0:	f7ff fe7e 	bl	d52d0 <netdb_getaddrinfo>
    if (!r) {
   d55d4:	4604      	mov	r4, r0
   d55d6:	2800      	cmp	r0, #0
   d55d8:	d144      	bne.n	d5664 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55da:	4602      	mov	r2, r0
   d55dc:	2101      	movs	r1, #1
   d55de:	6868      	ldr	r0, [r5, #4]
   d55e0:	f7ff feee 	bl	d53c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55e4:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55e8:	4622      	mov	r2, r4
   d55ea:	6868      	ldr	r0, [r5, #4]
   d55ec:	f7ff fee8 	bl	d53c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55f0:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55f2:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d55f4:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55f6:	2e00      	cmp	r6, #0
   d55f8:	d034      	beq.n	d5664 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d55fa:	2900      	cmp	r1, #0
   d55fc:	d132      	bne.n	d5664 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d55fe:	6873      	ldr	r3, [r6, #4]
   d5600:	2b02      	cmp	r3, #2
   d5602:	d002      	beq.n	d560a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5604:	2b0a      	cmp	r3, #10
   d5606:	d009      	beq.n	d561c <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5608:	e02a      	b.n	d5660 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d560a:	f1b8 0f00 	cmp.w	r8, #0
   d560e:	d027      	beq.n	d5660 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5610:	6971      	ldr	r1, [r6, #20]
   d5612:	4638      	mov	r0, r7
   d5614:	3104      	adds	r1, #4
   d5616:	f000 fad8 	bl	d5bca <_ZN9IPAddressaSEPKh>
   d561a:	e020      	b.n	d565e <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d561c:	f1b9 0f00 	cmp.w	r9, #0
   d5620:	d01e      	beq.n	d5660 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5622:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5624:	2211      	movs	r2, #17
   d5626:	a801      	add	r0, sp, #4
   d5628:	f002 fa93 	bl	d7b52 <memset>
                    a.v = 6;
   d562c:	2306      	movs	r3, #6
   d562e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5632:	ad01      	add	r5, sp, #4
   d5634:	f104 0308 	add.w	r3, r4, #8
   d5638:	3418      	adds	r4, #24
   d563a:	6818      	ldr	r0, [r3, #0]
   d563c:	6859      	ldr	r1, [r3, #4]
   d563e:	462a      	mov	r2, r5
   d5640:	c203      	stmia	r2!, {r0, r1}
   d5642:	3308      	adds	r3, #8
   d5644:	42a3      	cmp	r3, r4
   d5646:	4615      	mov	r5, r2
   d5648:	d1f7      	bne.n	d563a <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d564a:	a901      	add	r1, sp, #4
   d564c:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d564e:	ad07      	add	r5, sp, #28
   d5650:	f000 fa9c 	bl	d5b8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5656:	1d3c      	adds	r4, r7, #4
   d5658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d565a:	682b      	ldr	r3, [r5, #0]
   d565c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d565e:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5660:	69f6      	ldr	r6, [r6, #28]
   d5662:	e7c8      	b.n	d55f6 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5664:	9800      	ldr	r0, [sp, #0]
   d5666:	f7ff fe2b 	bl	d52c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d566a:	4638      	mov	r0, r7
   d566c:	b015      	add	sp, #84	; 0x54
   d566e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5674 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5674:	4b02      	ldr	r3, [pc, #8]	; (d5680 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5676:	4a03      	ldr	r2, [pc, #12]	; (d5684 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5678:	601a      	str	r2, [r3, #0]
   d567a:	2200      	movs	r2, #0
   d567c:	605a      	str	r2, [r3, #4]
   d567e:	4770      	bx	lr
   d5680:	2003e3d8 	.word	0x2003e3d8
   d5684:	000d8098 	.word	0x000d8098

000d5688 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5688:	2200      	movs	r2, #0
   d568a:	4611      	mov	r1, r2
   d568c:	6840      	ldr	r0, [r0, #4]
   d568e:	f7ff beb7 	b.w	d5400 <network_listening>

000d5692 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5692:	2200      	movs	r2, #0
   d5694:	4611      	mov	r1, r2
   d5696:	6840      	ldr	r0, [r0, #4]
   d5698:	f7ff bec2 	b.w	d5420 <network_get_listen_timeout>

000d569c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d569c:	2200      	movs	r2, #0
   d569e:	6840      	ldr	r0, [r0, #4]
   d56a0:	f7ff beb6 	b.w	d5410 <network_set_listen_timeout>

000d56a4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56a4:	2200      	movs	r2, #0
   d56a6:	f081 0101 	eor.w	r1, r1, #1
   d56aa:	6840      	ldr	r0, [r0, #4]
   d56ac:	f7ff bea0 	b.w	d53f0 <network_listen>

000d56b0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d56b0:	2300      	movs	r3, #0
   d56b2:	461a      	mov	r2, r3
   d56b4:	2101      	movs	r1, #1
   d56b6:	6840      	ldr	r0, [r0, #4]
   d56b8:	f7ff be92 	b.w	d53e0 <network_off>

000d56bc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56bc:	2300      	movs	r3, #0
   d56be:	461a      	mov	r2, r3
   d56c0:	4619      	mov	r1, r3
   d56c2:	6840      	ldr	r0, [r0, #4]
   d56c4:	f7ff be84 	b.w	d53d0 <network_on>

000d56c8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56c8:	2200      	movs	r2, #0
   d56ca:	4611      	mov	r1, r2
   d56cc:	6840      	ldr	r0, [r0, #4]
   d56ce:	f7ff be77 	b.w	d53c0 <network_ready>

000d56d2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56d2:	2200      	movs	r2, #0
   d56d4:	4611      	mov	r1, r2
   d56d6:	6840      	ldr	r0, [r0, #4]
   d56d8:	f7ff be62 	b.w	d53a0 <network_connecting>

000d56dc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56dc:	2200      	movs	r2, #0
   d56de:	2102      	movs	r1, #2
   d56e0:	6840      	ldr	r0, [r0, #4]
   d56e2:	f7ff be65 	b.w	d53b0 <network_disconnect>

000d56e6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56e6:	2300      	movs	r3, #0
   d56e8:	461a      	mov	r2, r3
   d56ea:	6840      	ldr	r0, [r0, #4]
   d56ec:	f7ff be50 	b.w	d5390 <network_connect>

000d56f0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d56f0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56f2:	4605      	mov	r5, r0
   d56f4:	b188      	cbz	r0, d571a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56f6:	6804      	ldr	r4, [r0, #0]
   d56f8:	b14c      	cbz	r4, d570e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d56fa:	68a3      	ldr	r3, [r4, #8]
   d56fc:	b11b      	cbz	r3, d5706 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56fe:	2203      	movs	r2, #3
   d5700:	4621      	mov	r1, r4
   d5702:	4620      	mov	r0, r4
   d5704:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5706:	2110      	movs	r1, #16
   d5708:	4620      	mov	r0, r4
   d570a:	f001 f959 	bl	d69c0 <_ZdlPvj>
   d570e:	4628      	mov	r0, r5
   d5710:	2114      	movs	r1, #20
      }
   d5712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5716:	f001 b953 	b.w	d69c0 <_ZdlPvj>
   d571a:	bd38      	pop	{r3, r4, r5, pc}

000d571c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d571c:	b110      	cbz	r0, d5724 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d571e:	6803      	ldr	r3, [r0, #0]
   d5720:	685b      	ldr	r3, [r3, #4]
   d5722:	4718      	bx	r3
   d5724:	4770      	bx	lr

000d5726 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5726:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5728:	6803      	ldr	r3, [r0, #0]
   d572a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d572c:	b1bb      	cbz	r3, d575e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d572e:	6858      	ldr	r0, [r3, #4]
   d5730:	f7ff fd56 	bl	d51e0 <os_thread_is_current>
   d5734:	b978      	cbnz	r0, d5756 <_ZN6ThreadD1Ev+0x30>
   d5736:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5738:	7c5a      	ldrb	r2, [r3, #17]
   d573a:	b912      	cbnz	r2, d5742 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d573c:	6858      	ldr	r0, [r3, #4]
   d573e:	f7ff fd57 	bl	d51f0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5742:	6823      	ldr	r3, [r4, #0]
   d5744:	6858      	ldr	r0, [r3, #4]
   d5746:	f7ff fd5b 	bl	d5200 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d574a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d574c:	2300      	movs	r3, #0
   d574e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5750:	b128      	cbz	r0, d575e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5752:	f7ff ffcd 	bl	d56f0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5756:	6820      	ldr	r0, [r4, #0]
   d5758:	b108      	cbz	r0, d575e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d575a:	f7ff ffc9 	bl	d56f0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d575e:	4620      	mov	r0, r4
   d5760:	bd10      	pop	{r4, pc}

000d5762 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5762:	b538      	push	{r3, r4, r5, lr}
   d5764:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5766:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d576a:	b108      	cbz	r0, d5770 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d576c:	f7fe fc99 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5770:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5774:	b108      	cbz	r0, d577a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5776:	f7ff fd53 	bl	d5220 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d577a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d577e:	b135      	cbz	r5, d578e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5780:	4628      	mov	r0, r5
   d5782:	f7ff ffd0 	bl	d5726 <_ZN6ThreadD1Ev>
   d5786:	2104      	movs	r1, #4
   d5788:	4628      	mov	r0, r5
   d578a:	f001 f919 	bl	d69c0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d578e:	6820      	ldr	r0, [r4, #0]
   d5790:	b108      	cbz	r0, d5796 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5792:	f7ff ffc3 	bl	d571c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5796:	4620      	mov	r0, r4
   d5798:	bd38      	pop	{r3, r4, r5, pc}
	...

000d579c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d579c:	b510      	push	{r4, lr}
   d579e:	4b04      	ldr	r3, [pc, #16]	; (d57b0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d57a0:	4604      	mov	r4, r0
   d57a2:	f840 3b08 	str.w	r3, [r0], #8
   d57a6:	f7ff ffdc 	bl	d5762 <_ZN5spark11MeshPublishD1Ev>
   d57aa:	4620      	mov	r0, r4
   d57ac:	bd10      	pop	{r4, pc}
   d57ae:	bf00      	nop
   d57b0:	000d80cc 	.word	0x000d80cc

000d57b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d57b4:	b538      	push	{r3, r4, r5, lr}
   d57b6:	4c0e      	ldr	r4, [pc, #56]	; (d57f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d57b8:	4b0e      	ldr	r3, [pc, #56]	; (d57f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d57ba:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d57bc:	2500      	movs	r5, #0
   d57be:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d57c0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d57c4:	6063      	str	r3, [r4, #4]
   d57c6:	60a5      	str	r5, [r4, #8]
   d57c8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57cc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d57d0:	f7ff fd1e 	bl	d5210 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d57d4:	4b08      	ldr	r3, [pc, #32]	; (d57f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d57d6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57da:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d57de:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d57e0:	4620      	mov	r0, r4
   d57e2:	4a06      	ldr	r2, [pc, #24]	; (d57fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d57e4:	4906      	ldr	r1, [pc, #24]	; (d5800 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d57e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d57ea:	f001 b8db 	b.w	d69a4 <__aeabi_atexit>
   d57ee:	bf00      	nop
   d57f0:	2003e3e0 	.word	0x2003e3e0
   d57f4:	000d8098 	.word	0x000d8098
   d57f8:	000d80cc 	.word	0x000d80cc
   d57fc:	2003e1bc 	.word	0x2003e1bc
   d5800:	000d579d 	.word	0x000d579d

000d5804 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5804:	b510      	push	{r4, lr}
   d5806:	4604      	mov	r4, r0
{
    _spi = spi;
   d5808:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d580a:	4608      	mov	r0, r1
   d580c:	f7ff fd28 	bl	d5260 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5810:	2300      	movs	r3, #0
   d5812:	6063      	str	r3, [r4, #4]
}
   d5814:	4620      	mov	r0, r4
   d5816:	bd10      	pop	{r4, pc}

000d5818 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5818:	7800      	ldrb	r0, [r0, #0]
   d581a:	f7ff bd29 	b.w	d5270 <HAL_SPI_Is_Enabled>

000d581e <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d581e:	4770      	bx	lr

000d5820 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5822:	4606      	mov	r6, r0
   d5824:	4615      	mov	r5, r2
   d5826:	460c      	mov	r4, r1
   d5828:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d582a:	42bc      	cmp	r4, r7
   d582c:	d006      	beq.n	d583c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d582e:	6833      	ldr	r3, [r6, #0]
   d5830:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5834:	689b      	ldr	r3, [r3, #8]
   d5836:	4630      	mov	r0, r6
   d5838:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d583a:	e7f6      	b.n	d582a <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d583c:	4628      	mov	r0, r5
   d583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5840 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5840:	2200      	movs	r2, #0
   d5842:	7c00      	ldrb	r0, [r0, #16]
   d5844:	f7ff bc44 	b.w	d50d0 <HAL_I2C_Write_Data>

000d5848 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5848:	2100      	movs	r1, #0
   d584a:	7c00      	ldrb	r0, [r0, #16]
   d584c:	f7ff bc48 	b.w	d50e0 <HAL_I2C_Available_Data>

000d5850 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5850:	2100      	movs	r1, #0
   d5852:	7c00      	ldrb	r0, [r0, #16]
   d5854:	f7ff bc4c 	b.w	d50f0 <HAL_I2C_Read_Data>

000d5858 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5858:	2100      	movs	r1, #0
   d585a:	7c00      	ldrb	r0, [r0, #16]
   d585c:	f7ff bc50 	b.w	d5100 <HAL_I2C_Peek_Data>

000d5860 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5860:	2100      	movs	r1, #0
   d5862:	7c00      	ldrb	r0, [r0, #16]
   d5864:	f7ff bc54 	b.w	d5110 <HAL_I2C_Flush_Data>

000d5868 <_ZN7TwoWireD0Ev>:
   d5868:	b510      	push	{r4, lr}
   d586a:	2114      	movs	r1, #20
   d586c:	4604      	mov	r4, r0
   d586e:	f001 f8a7 	bl	d69c0 <_ZdlPvj>
   d5872:	4620      	mov	r0, r4
   d5874:	bd10      	pop	{r4, pc}
	...

000d5878 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5878:	b510      	push	{r4, lr}
   d587a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d587c:	2300      	movs	r3, #0
   d587e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5884:	60a3      	str	r3, [r4, #8]
   d5886:	4b04      	ldr	r3, [pc, #16]	; (d5898 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5888:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d588a:	4608      	mov	r0, r1
   d588c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d588e:	4611      	mov	r1, r2
   d5890:	f7ff fc4e 	bl	d5130 <HAL_I2C_Init>
}
   d5894:	4620      	mov	r0, r4
   d5896:	bd10      	pop	{r4, pc}
   d5898:	000d8100 	.word	0x000d8100

000d589c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d589c:	2100      	movs	r1, #0
   d589e:	7c00      	ldrb	r0, [r0, #16]
   d58a0:	f7ff bc3e 	b.w	d5120 <HAL_I2C_Is_Enabled>

000d58a4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d58a4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d58a6:	6883      	ldr	r3, [r0, #8]
   d58a8:	4604      	mov	r4, r0
   d58aa:	b90b      	cbnz	r3, d58b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d58ac:	f001 f89b 	bl	d69e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58b0:	68c3      	ldr	r3, [r0, #12]
   d58b2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d58b4:	68a3      	ldr	r3, [r4, #8]
   d58b6:	b11b      	cbz	r3, d58c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58b8:	2203      	movs	r2, #3
   d58ba:	4621      	mov	r1, r4
   d58bc:	4620      	mov	r0, r4
   d58be:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d58c0:	4620      	mov	r0, r4
   d58c2:	2110      	movs	r1, #16
}
   d58c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d58c8:	f001 b87a 	b.w	d69c0 <_ZdlPvj>

000d58cc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d58cc:	4770      	bx	lr

000d58ce <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58ce:	7441      	strb	r1, [r0, #17]
   d58d0:	4770      	bx	lr

000d58d2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d58d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d58d4:	7c00      	ldrb	r0, [r0, #16]
   d58d6:	f7ff fc6b 	bl	d51b0 <HAL_USART_Available_Data_For_Write>
}
   d58da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58de:	bd08      	pop	{r3, pc}

000d58e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d58e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d58e2:	7c00      	ldrb	r0, [r0, #16]
   d58e4:	f7ff fc3c 	bl	d5160 <HAL_USART_Available_Data>
}
   d58e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58ec:	bd08      	pop	{r3, pc}

000d58ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d58ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d58f0:	7c00      	ldrb	r0, [r0, #16]
   d58f2:	f7ff fc45 	bl	d5180 <HAL_USART_Peek_Data>
}
   d58f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58fa:	bf28      	it	cs
   d58fc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5900:	bd08      	pop	{r3, pc}

000d5902 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5902:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5904:	7c00      	ldrb	r0, [r0, #16]
   d5906:	f7ff fc33 	bl	d5170 <HAL_USART_Read_Data>
}
   d590a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d590e:	bf28      	it	cs
   d5910:	f04f 30ff 	movcs.w	r0, #4294967295
   d5914:	bd08      	pop	{r3, pc}

000d5916 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5916:	7c00      	ldrb	r0, [r0, #16]
   d5918:	f7ff bc3a 	b.w	d5190 <HAL_USART_Flush_Data>

000d591c <_ZN11USARTSerialD0Ev>:
   d591c:	b510      	push	{r4, lr}
   d591e:	2114      	movs	r1, #20
   d5920:	4604      	mov	r4, r0
   d5922:	f001 f84d 	bl	d69c0 <_ZdlPvj>
   d5926:	4620      	mov	r0, r4
   d5928:	bd10      	pop	{r4, pc}

000d592a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d592a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d592c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d592e:	4604      	mov	r4, r0
   d5930:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5932:	b925      	cbnz	r5, d593e <_ZN11USARTSerial5writeEh+0x14>
   d5934:	7c00      	ldrb	r0, [r0, #16]
   d5936:	f7ff fc3b 	bl	d51b0 <HAL_USART_Available_Data_For_Write>
   d593a:	2800      	cmp	r0, #0
   d593c:	dd05      	ble.n	d594a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d593e:	4631      	mov	r1, r6
   d5940:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5946:	f7ff bc03 	b.w	d5150 <HAL_USART_Write_Data>
  }
  return 0;
}
   d594a:	4628      	mov	r0, r5
   d594c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5950 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5950:	b510      	push	{r4, lr}
   d5952:	4604      	mov	r4, r0
   d5954:	4608      	mov	r0, r1
   d5956:	4611      	mov	r1, r2
   d5958:	2200      	movs	r2, #0
   d595a:	6062      	str	r2, [r4, #4]
   d595c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5960:	60a2      	str	r2, [r4, #8]
   d5962:	4a05      	ldr	r2, [pc, #20]	; (d5978 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5964:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5966:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5968:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d596a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d596c:	461a      	mov	r2, r3
   d596e:	f7ff fbe7 	bl	d5140 <HAL_USART_Init>
}
   d5972:	4620      	mov	r0, r4
   d5974:	bd10      	pop	{r4, pc}
   d5976:	bf00      	nop
   d5978:	000d8128 	.word	0x000d8128

000d597c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d597c:	2300      	movs	r3, #0
   d597e:	7c00      	ldrb	r0, [r0, #16]
   d5980:	f7ff bc1e 	b.w	d51c0 <HAL_USART_BeginConfig>

000d5984 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d5984:	2200      	movs	r2, #0
   d5986:	f7ff bff9 	b.w	d597c <_ZN11USARTSerial5beginEmm>

000d598a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d598a:	7c00      	ldrb	r0, [r0, #16]
   d598c:	f7ff bc08 	b.w	d51a0 <HAL_USART_Is_Enabled>

000d5990 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5990:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5992:	4d0c      	ldr	r5, [pc, #48]	; (d59c4 <_Z22__fetch_global_Serial1v+0x34>)
   d5994:	6829      	ldr	r1, [r5, #0]
   d5996:	f011 0401 	ands.w	r4, r1, #1
   d599a:	d111      	bne.n	d59c0 <_Z22__fetch_global_Serial1v+0x30>
   d599c:	4628      	mov	r0, r5
   d599e:	f7fe fb82 	bl	d40a6 <__cxa_guard_acquire>
   d59a2:	b168      	cbz	r0, d59c0 <_Z22__fetch_global_Serial1v+0x30>
   d59a4:	4a08      	ldr	r2, [pc, #32]	; (d59c8 <_Z22__fetch_global_Serial1v+0x38>)
   d59a6:	4b09      	ldr	r3, [pc, #36]	; (d59cc <_Z22__fetch_global_Serial1v+0x3c>)
   d59a8:	4809      	ldr	r0, [pc, #36]	; (d59d0 <_Z22__fetch_global_Serial1v+0x40>)
   d59aa:	4621      	mov	r1, r4
   d59ac:	f7ff ffd0 	bl	d5950 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d59b0:	4628      	mov	r0, r5
   d59b2:	f7fe fb7d 	bl	d40b0 <__cxa_guard_release>
   d59b6:	4a07      	ldr	r2, [pc, #28]	; (d59d4 <_Z22__fetch_global_Serial1v+0x44>)
   d59b8:	4907      	ldr	r1, [pc, #28]	; (d59d8 <_Z22__fetch_global_Serial1v+0x48>)
   d59ba:	4805      	ldr	r0, [pc, #20]	; (d59d0 <_Z22__fetch_global_Serial1v+0x40>)
   d59bc:	f000 fff2 	bl	d69a4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d59c0:	4803      	ldr	r0, [pc, #12]	; (d59d0 <_Z22__fetch_global_Serial1v+0x40>)
   d59c2:	bd38      	pop	{r3, r4, r5, pc}
   d59c4:	2003e64c 	.word	0x2003e64c
   d59c8:	2003e650 	.word	0x2003e650
   d59cc:	2003e5c8 	.word	0x2003e5c8
   d59d0:	2003e5b4 	.word	0x2003e5b4
   d59d4:	2003e1bc 	.word	0x2003e1bc
   d59d8:	000d58cd 	.word	0x000d58cd

000d59dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d59dc:	680b      	ldr	r3, [r1, #0]
   d59de:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d59e0:	b113      	cbz	r3, d59e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d59e2:	685a      	ldr	r2, [r3, #4]
   d59e4:	3201      	adds	r2, #1
   d59e6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d59e8:	4770      	bx	lr

000d59ea <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d59ea:	7441      	strb	r1, [r0, #17]
   d59ec:	4770      	bx	lr

000d59ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d59ee:	4770      	bx	lr

000d59f0 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d59f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d59f2:	2100      	movs	r1, #0
   d59f4:	7c00      	ldrb	r0, [r0, #16]
   d59f6:	f7ff fb53 	bl	d50a0 <HAL_USB_USART_Receive_Data>
}
   d59fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59fe:	bf28      	it	cs
   d5a00:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a04:	bd08      	pop	{r3, pc}

000d5a06 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5a06:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5a08:	2101      	movs	r1, #1
   d5a0a:	7c00      	ldrb	r0, [r0, #16]
   d5a0c:	f7ff fb48 	bl	d50a0 <HAL_USB_USART_Receive_Data>
}
   d5a10:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a14:	bf28      	it	cs
   d5a16:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a1a:	bd08      	pop	{r3, pc}

000d5a1c <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5a1c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a1e:	7c00      	ldrb	r0, [r0, #16]
   d5a20:	f7ff fb36 	bl	d5090 <HAL_USB_USART_Available_Data_For_Write>
}
   d5a24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a28:	bd08      	pop	{r3, pc}

000d5a2a <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5a2a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a2c:	7c00      	ldrb	r0, [r0, #16]
   d5a2e:	f7ff fb27 	bl	d5080 <HAL_USB_USART_Available_Data>
}
   d5a32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a36:	bd08      	pop	{r3, pc}

000d5a38 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5a38:	7c00      	ldrb	r0, [r0, #16]
   d5a3a:	f7ff bb41 	b.w	d50c0 <HAL_USB_USART_Flush_Data>

000d5a3e <_ZN9USBSerialD0Ev>:
   d5a3e:	b510      	push	{r4, lr}
   d5a40:	2114      	movs	r1, #20
   d5a42:	4604      	mov	r4, r0
   d5a44:	f000 ffbc 	bl	d69c0 <_ZdlPvj>
   d5a48:	4620      	mov	r0, r4
   d5a4a:	bd10      	pop	{r4, pc}

000d5a4c <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a4c:	b538      	push	{r3, r4, r5, lr}
   d5a4e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a50:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a52:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a54:	f7ff fb1c 	bl	d5090 <HAL_USB_USART_Available_Data_For_Write>
   d5a58:	2800      	cmp	r0, #0
   d5a5a:	dc01      	bgt.n	d5a60 <_ZN9USBSerial5writeEh+0x14>
   d5a5c:	7c60      	ldrb	r0, [r4, #17]
   d5a5e:	b128      	cbz	r0, d5a6c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5a60:	4629      	mov	r1, r5
   d5a62:	7c20      	ldrb	r0, [r4, #16]
   d5a64:	f7ff fb24 	bl	d50b0 <HAL_USB_USART_Send_Data>
   d5a68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5a6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5a70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a70:	b510      	push	{r4, lr}
   d5a72:	4604      	mov	r4, r0
   d5a74:	2300      	movs	r3, #0
   d5a76:	6063      	str	r3, [r4, #4]
   d5a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a7c:	60a3      	str	r3, [r4, #8]
   d5a7e:	4b05      	ldr	r3, [pc, #20]	; (d5a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5a80:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5a82:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a84:	4608      	mov	r0, r1
{
  _serial = serial;
   d5a86:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5a88:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5a8a:	4611      	mov	r1, r2
   d5a8c:	f7ff fae8 	bl	d5060 <HAL_USB_USART_Init>
}
   d5a90:	4620      	mov	r0, r4
   d5a92:	bd10      	pop	{r4, pc}
   d5a94:	000d8158 	.word	0x000d8158

000d5a98 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a98:	2200      	movs	r2, #0
   d5a9a:	7c00      	ldrb	r0, [r0, #16]
   d5a9c:	f7ff bae8 	b.w	d5070 <HAL_USB_USART_Begin>

000d5aa0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5aa0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5aa2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5aa4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5aa6:	2100      	movs	r1, #0
   d5aa8:	f002 f853 	bl	d7b52 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5aac:	4620      	mov	r0, r4
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5ab0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ab2:	4d0e      	ldr	r5, [pc, #56]	; (d5aec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5ab4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5ab6:	a801      	add	r0, sp, #4
   d5ab8:	f7ff fff2 	bl	d5aa0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5abc:	6829      	ldr	r1, [r5, #0]
   d5abe:	f011 0401 	ands.w	r4, r1, #1
   d5ac2:	d110      	bne.n	d5ae6 <_Z16_fetch_usbserialv+0x36>
   d5ac4:	4628      	mov	r0, r5
   d5ac6:	f7fe faee 	bl	d40a6 <__cxa_guard_acquire>
   d5aca:	b160      	cbz	r0, d5ae6 <_Z16_fetch_usbserialv+0x36>
   d5acc:	aa01      	add	r2, sp, #4
   d5ace:	4621      	mov	r1, r4
   d5ad0:	4807      	ldr	r0, [pc, #28]	; (d5af0 <_Z16_fetch_usbserialv+0x40>)
   d5ad2:	f7ff ffcd 	bl	d5a70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ad6:	4628      	mov	r0, r5
   d5ad8:	f7fe faea 	bl	d40b0 <__cxa_guard_release>
   d5adc:	4a05      	ldr	r2, [pc, #20]	; (d5af4 <_Z16_fetch_usbserialv+0x44>)
   d5ade:	4906      	ldr	r1, [pc, #24]	; (d5af8 <_Z16_fetch_usbserialv+0x48>)
   d5ae0:	4803      	ldr	r0, [pc, #12]	; (d5af0 <_Z16_fetch_usbserialv+0x40>)
   d5ae2:	f000 ff5f 	bl	d69a4 <__aeabi_atexit>
	return _usbserial;
}
   d5ae6:	4802      	ldr	r0, [pc, #8]	; (d5af0 <_Z16_fetch_usbserialv+0x40>)
   d5ae8:	b007      	add	sp, #28
   d5aea:	bd30      	pop	{r4, r5, pc}
   d5aec:	2003e6d4 	.word	0x2003e6d4
   d5af0:	2003e6d8 	.word	0x2003e6d8
   d5af4:	2003e1bc 	.word	0x2003e1bc
   d5af8:	000d59ef 	.word	0x000d59ef

000d5afc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5afc:	4770      	bx	lr

000d5afe <_ZN9IPAddressD0Ev>:
   d5afe:	b510      	push	{r4, lr}
   d5b00:	2118      	movs	r1, #24
   d5b02:	4604      	mov	r4, r0
   d5b04:	f000 ff5c 	bl	d69c0 <_ZdlPvj>
   d5b08:	4620      	mov	r0, r4
   d5b0a:	bd10      	pop	{r4, pc}

000d5b0c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b0e:	7d03      	ldrb	r3, [r0, #20]
   d5b10:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b12:	b08d      	sub	sp, #52	; 0x34
   d5b14:	460e      	mov	r6, r1
   d5b16:	f100 0704 	add.w	r7, r0, #4
   d5b1a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b1e:	d002      	beq.n	d5b26 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5b20:	f100 0508 	add.w	r5, r0, #8
   d5b24:	e018      	b.n	d5b58 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b26:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b28:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b2a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b2e:	232f      	movs	r3, #47	; 0x2f
   d5b30:	462a      	mov	r2, r5
   d5b32:	200a      	movs	r0, #10
   d5b34:	f7ff fb4c 	bl	d51d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5b38:	4628      	mov	r0, r5
   d5b3a:	f002 f85e 	bl	d7bfa <strlen>
   d5b3e:	6833      	ldr	r3, [r6, #0]
   d5b40:	4602      	mov	r2, r0
   d5b42:	68db      	ldr	r3, [r3, #12]
   d5b44:	4629      	mov	r1, r5
   d5b46:	4630      	mov	r0, r6
   d5b48:	4798      	blx	r3
   d5b4a:	e00f      	b.n	d5b6c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5b4c:	b124      	cbz	r4, d5b58 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5b4e:	212e      	movs	r1, #46	; 0x2e
   d5b50:	4630      	mov	r0, r6
   d5b52:	f000 fc59 	bl	d6408 <_ZN5Print5printEc>
   d5b56:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5b58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b5c:	220a      	movs	r2, #10
   d5b5e:	4630      	mov	r0, r6
   d5b60:	f000 fc6b 	bl	d643a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b64:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b66:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b68:	d1f0      	bne.n	d5b4c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b6a:	4620      	mov	r0, r4
    }
    return n;
}
   d5b6c:	b00d      	add	sp, #52	; 0x34
   d5b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b70 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5b70:	b510      	push	{r4, lr}
   d5b72:	4b05      	ldr	r3, [pc, #20]	; (d5b88 <_ZN9IPAddressC1Ev+0x18>)
   d5b74:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b76:	2211      	movs	r2, #17
   d5b78:	f840 3b04 	str.w	r3, [r0], #4
   d5b7c:	2100      	movs	r1, #0
   d5b7e:	f001 ffe8 	bl	d7b52 <memset>
{
    clear();
}
   d5b82:	4620      	mov	r0, r4
   d5b84:	bd10      	pop	{r4, pc}
   d5b86:	bf00      	nop
   d5b88:	000d8188 	.word	0x000d8188

000d5b8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b8c:	4603      	mov	r3, r0
   d5b8e:	4a07      	ldr	r2, [pc, #28]	; (d5bac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5b90:	b510      	push	{r4, lr}
   d5b92:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5b96:	f101 0210 	add.w	r2, r1, #16
   d5b9a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b9e:	f843 4b04 	str.w	r4, [r3], #4
   d5ba2:	4291      	cmp	r1, r2
   d5ba4:	d1f9      	bne.n	d5b9a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5ba6:	780a      	ldrb	r2, [r1, #0]
   d5ba8:	701a      	strb	r2, [r3, #0]
}
   d5baa:	bd10      	pop	{r4, pc}
   d5bac:	000d8188 	.word	0x000d8188

000d5bb0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5bb0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5bb2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5bb6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5bba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5bbe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5bc2:	2304      	movs	r3, #4
   d5bc4:	6041      	str	r1, [r0, #4]
   d5bc6:	7503      	strb	r3, [r0, #20]
   d5bc8:	bd10      	pop	{r4, pc}

000d5bca <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5bca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5bcc:	780d      	ldrb	r5, [r1, #0]
   d5bce:	788b      	ldrb	r3, [r1, #2]
   d5bd0:	784a      	ldrb	r2, [r1, #1]
   d5bd2:	78c9      	ldrb	r1, [r1, #3]
   d5bd4:	9100      	str	r1, [sp, #0]
   d5bd6:	4629      	mov	r1, r5
   d5bd8:	f7ff ffea 	bl	d5bb0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5bdc:	b003      	add	sp, #12
   d5bde:	bd30      	pop	{r4, r5, pc}

000d5be0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5be0:	4770      	bx	lr

000d5be2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5be2:	2000      	movs	r0, #0
   d5be4:	4770      	bx	lr

000d5be6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5be6:	b510      	push	{r4, lr}
   d5be8:	2110      	movs	r1, #16
   d5bea:	4604      	mov	r4, r0
   d5bec:	f000 fee8 	bl	d69c0 <_ZdlPvj>
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5bf4:	b508      	push	{r3, lr}
      { delete this; }
   d5bf6:	b108      	cbz	r0, d5bfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5bf8:	f7ff fff5 	bl	d5be6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5bfc:	bd08      	pop	{r3, pc}

000d5bfe <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5bfe:	2200      	movs	r2, #0
   d5c00:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5c02:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5c04:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5c08:	8082      	strh	r2, [r0, #4]
   d5c0a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5c0e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c10:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c12:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5c14:	680c      	ldr	r4, [r1, #0]
   d5c16:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c18:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5c1a:	bd10      	pop	{r4, pc}

000d5c1c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	4604      	mov	r4, r0
    free((void*)msg_);
   d5c20:	6800      	ldr	r0, [r0, #0]
   d5c22:	f7ff fc4b 	bl	d54bc <free>
}
   d5c26:	4620      	mov	r0, r4
   d5c28:	bd10      	pop	{r4, pc}

000d5c2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5c2a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5c2c:	68c4      	ldr	r4, [r0, #12]
   d5c2e:	b1f4      	cbz	r4, d5c6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5c30:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5c32:	2b02      	cmp	r3, #2
   d5c34:	d103      	bne.n	d5c3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5c36:	f104 000c 	add.w	r0, r4, #12
   d5c3a:	f7ff ffef 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5c3e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5c40:	b135      	cbz	r5, d5c50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c42:	4628      	mov	r0, r5
   d5c44:	f7ff fc72 	bl	d552c <_ZNSt14_Function_baseD1Ev>
   d5c48:	2110      	movs	r1, #16
   d5c4a:	4628      	mov	r0, r5
   d5c4c:	f000 feb8 	bl	d69c0 <_ZdlPvj>
   d5c50:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5c52:	b135      	cbz	r5, d5c62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5c54:	4628      	mov	r0, r5
   d5c56:	f7ff fc69 	bl	d552c <_ZNSt14_Function_baseD1Ev>
   d5c5a:	2110      	movs	r1, #16
   d5c5c:	4628      	mov	r0, r5
   d5c5e:	f000 feaf 	bl	d69c0 <_ZdlPvj>
   d5c62:	4620      	mov	r0, r4
   d5c64:	2114      	movs	r1, #20
   d5c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5c6a:	f000 bea9 	b.w	d69c0 <_ZdlPvj>
   d5c6e:	bd38      	pop	{r3, r4, r5, pc}

000d5c70 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5c70:	b513      	push	{r0, r1, r4, lr}
   d5c72:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5c74:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5c78:	2300      	movs	r3, #0
   d5c7a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5c7c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5c7e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5c80:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c82:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5c84:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5c86:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c88:	f7fe fb1c 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c8c:	4620      	mov	r0, r4
   d5c8e:	b002      	add	sp, #8
   d5c90:	bd10      	pop	{r4, pc}

000d5c92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c94:	460c      	mov	r4, r1
   d5c96:	ad02      	add	r5, sp, #8
   d5c98:	f854 3b04 	ldr.w	r3, [r4], #4
   d5c9c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5ca0:	4606      	mov	r6, r0
   d5ca2:	460f      	mov	r7, r1
   d5ca4:	a801      	add	r0, sp, #4
   d5ca6:	4621      	mov	r1, r4
   d5ca8:	f7ff fe98 	bl	d59dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5cac:	4629      	mov	r1, r5
   d5cae:	4630      	mov	r0, r6
   d5cb0:	f7ff ffde 	bl	d5c70 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5cb4:	a801      	add	r0, sp, #4
   d5cb6:	f7fe fb05 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cba:	4620      	mov	r0, r4
   d5cbc:	f7fe fb02 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5cc0:	4638      	mov	r0, r7
   d5cc2:	2108      	movs	r1, #8
   d5cc4:	f000 fe7c 	bl	d69c0 <_ZdlPvj>
        return p;
    }
   d5cc8:	4630      	mov	r0, r6
   d5cca:	b003      	add	sp, #12
   d5ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cce <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5cce:	b513      	push	{r0, r1, r4, lr}
   d5cd0:	460b      	mov	r3, r1
   d5cd2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cd4:	c803      	ldmia	r0, {r0, r1}
   d5cd6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5cda:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5cde:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5ce2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5ce6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5cea:	b002      	add	sp, #8
   d5cec:	bd10      	pop	{r4, pc}
	...

000d5cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5cf0:	b538      	push	{r3, r4, r5, lr}
   d5cf2:	2300      	movs	r3, #0
   d5cf4:	4604      	mov	r4, r0
   d5cf6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5cf8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5cfa:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5cfc:	f7fe f9cd 	bl	d409a <_Znwj>
   d5d00:	b128      	cbz	r0, d5d0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d02:	2301      	movs	r3, #1
   d5d04:	6043      	str	r3, [r0, #4]
   d5d06:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5d08:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5d0a:	6003      	str	r3, [r0, #0]
   d5d0c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d0e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5d10:	4620      	mov	r0, r4
   d5d12:	bd38      	pop	{r3, r4, r5, pc}
   d5d14:	000d819c 	.word	0x000d819c

000d5d18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d18:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5d1a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d1c:	b90a      	cbnz	r2, d5d22 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5d1e:	f000 fe62 	bl	d69e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d22:	68c3      	ldr	r3, [r0, #12]
    }
   d5d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d28:	4718      	bx	r3

000d5d2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5d2a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5d2c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5d2e:	f100 0110 	add.w	r1, r0, #16
   d5d32:	f7ff fff1 	bl	d5d18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5d36:	bd08      	pop	{r3, pc}

000d5d38 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d38:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5d3a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d3c:	b90a      	cbnz	r2, d5d42 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5d3e:	f000 fe52 	bl	d69e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d42:	68c3      	ldr	r3, [r0, #12]
    }
   d5d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d48:	4718      	bx	r3

000d5d4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5d4a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5d4c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5d4e:	f100 0110 	add.w	r1, r0, #16
   d5d52:	f7ff fff1 	bl	d5d38 <_ZNKSt8functionIFvRKbEEclES1_>
   d5d56:	bd08      	pop	{r3, pc}

000d5d58 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5d58:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d5a:	2300      	movs	r3, #0
   d5d5c:	6083      	str	r3, [r0, #8]
   d5d5e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5d60:	4604      	mov	r4, r0
   d5d62:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5d64:	b12b      	cbz	r3, d5d72 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5d66:	2202      	movs	r2, #2
   d5d68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5d6a:	68eb      	ldr	r3, [r5, #12]
   d5d6c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5d6e:	68ab      	ldr	r3, [r5, #8]
   d5d70:	60a3      	str	r3, [r4, #8]
	}
    }
   d5d72:	4620      	mov	r0, r4
   d5d74:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d7a:	b089      	sub	sp, #36	; 0x24
   d5d7c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5d7e:	4668      	mov	r0, sp
   d5d80:	f7ff ff3d 	bl	d5bfe <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5d84:	2300      	movs	r3, #0
   d5d86:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5d8a:	f04f 0202 	mov.w	r2, #2
   d5d8e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5d92:	2b00      	cmp	r3, #0
   d5d94:	d103      	bne.n	d5d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5d96:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5d9a:	2900      	cmp	r1, #0
   d5d9c:	d1f7      	bne.n	d5d8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5d9e:	d002      	beq.n	d5da6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5da0:	f88d 3008 	strb.w	r3, [sp, #8]
   d5da4:	e063      	b.n	d5e6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5da6:	f114 050c 	adds.w	r5, r4, #12
   d5daa:	d003      	beq.n	d5db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5dac:	4669      	mov	r1, sp
   d5dae:	4628      	mov	r0, r5
   d5db0:	f7ff ff25 	bl	d5bfe <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5db4:	f3bf 8f5f 	dmb	sy
   d5db8:	2301      	movs	r3, #1
   d5dba:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5dbc:	2000      	movs	r0, #0
   d5dbe:	f104 0308 	add.w	r3, r4, #8
   d5dc2:	f3bf 8f5f 	dmb	sy
   d5dc6:	e853 6f00 	ldrex	r6, [r3]
   d5dca:	e843 0200 	strex	r2, r0, [r3]
   d5dce:	2a00      	cmp	r2, #0
   d5dd0:	d1f9      	bne.n	d5dc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5dd2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5dd6:	2e00      	cmp	r6, #0
   d5dd8:	d049      	beq.n	d5e6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5dda:	f7ff fb39 	bl	d5450 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5dde:	b120      	cbz	r0, d5dea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5de0:	4629      	mov	r1, r5
   d5de2:	4630      	mov	r0, r6
   d5de4:	f7ff ff98 	bl	d5d18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5de8:	e03a      	b.n	d5e60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5dea:	4631      	mov	r1, r6
   d5dec:	a802      	add	r0, sp, #8
   d5dee:	f7ff ffb3 	bl	d5d58 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5df2:	68e0      	ldr	r0, [r4, #12]
   d5df4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5df8:	b108      	cbz	r0, d5dfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5dfa:	f001 fee3 	bl	d7bc4 <strdup>
   d5dfe:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5e00:	2010      	movs	r0, #16
   d5e02:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5e06:	f7fe f948 	bl	d409a <_Znwj>
   d5e0a:	4605      	mov	r5, r0
   d5e0c:	b1e8      	cbz	r0, d5e4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e0e:	2700      	movs	r7, #0
   d5e10:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5e12:	2018      	movs	r0, #24
   d5e14:	f7fe f941 	bl	d409a <_Znwj>
   d5e18:	4604      	mov	r4, r0
   d5e1a:	b188      	cbz	r0, d5e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5e1c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e1e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5e20:	a802      	add	r0, sp, #8
   d5e22:	f7ff ff54 	bl	d5cce <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e26:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5e28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e2a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e2c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5e2e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5e30:	a906      	add	r1, sp, #24
   d5e32:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e34:	60e3      	str	r3, [r4, #12]
   d5e36:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5e3a:	9205      	str	r2, [sp, #20]
   d5e3c:	f7ff fedf 	bl	d5bfe <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5e40:	4b0d      	ldr	r3, [pc, #52]	; (d5e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5e42:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5e44:	4b0d      	ldr	r3, [pc, #52]	; (d5e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5e46:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5e48:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5e4a:	a806      	add	r0, sp, #24
   d5e4c:	f7ff fee6 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e50:	a802      	add	r0, sp, #8
   d5e52:	f7ff fb6b 	bl	d552c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5e56:	2200      	movs	r2, #0
   d5e58:	4629      	mov	r1, r5
   d5e5a:	4809      	ldr	r0, [pc, #36]	; (d5e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5e5c:	f7ff fb00 	bl	d5460 <application_thread_invoke>
   d5e60:	4630      	mov	r0, r6
   d5e62:	f7ff fb63 	bl	d552c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5e66:	2110      	movs	r1, #16
   d5e68:	4630      	mov	r0, r6
   d5e6a:	f000 fda9 	bl	d69c0 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5e6e:	4668      	mov	r0, sp
   d5e70:	f7ff fed4 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
    }
   d5e74:	b009      	add	sp, #36	; 0x24
   d5e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e78:	000d5d2b 	.word	0x000d5d2b
   d5e7c:	000d5fa1 	.word	0x000d5fa1
   d5e80:	000d58a5 	.word	0x000d58a5

000d5e84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e88:	b08b      	sub	sp, #44	; 0x2c
   d5e8a:	4606      	mov	r6, r0
   d5e8c:	460f      	mov	r7, r1
   d5e8e:	4690      	mov	r8, r2
   d5e90:	4699      	mov	r9, r3
   d5e92:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e96:	f7ff fa5b 	bl	d5350 <spark_cloud_flag_connected>
   d5e9a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5e9c:	4683      	mov	fp, r0
   d5e9e:	bb30      	cbnz	r0, d5eee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5ea0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5ea4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ea6:	a905      	add	r1, sp, #20
   d5ea8:	4628      	mov	r0, r5
   d5eaa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5eae:	f7ff fea6 	bl	d5bfe <_ZN8particle5ErrorC1EOS0_>
   d5eb2:	2014      	movs	r0, #20
   d5eb4:	f7fe f8f1 	bl	d409a <_Znwj>
   d5eb8:	4604      	mov	r4, r0
   d5eba:	b158      	cbz	r0, d5ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5ebc:	2302      	movs	r3, #2
   d5ebe:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ec0:	2301      	movs	r3, #1
   d5ec2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5ec4:	f8c0 b004 	str.w	fp, [r0, #4]
   d5ec8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5ecc:	4629      	mov	r1, r5
   d5ece:	300c      	adds	r0, #12
   d5ed0:	f7ff fe95 	bl	d5bfe <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5ed4:	4630      	mov	r0, r6
   d5ed6:	4621      	mov	r1, r4
   d5ed8:	f840 4b04 	str.w	r4, [r0], #4
   d5edc:	f7ff ff08 	bl	d5cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ee0:	4628      	mov	r0, r5
   d5ee2:	f7ff fe9b 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5ee6:	a805      	add	r0, sp, #20
   d5ee8:	f7ff fe98 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
   d5eec:	e052      	b.n	d5f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5eee:	2400      	movs	r4, #0
   d5ef0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5ef2:	2014      	movs	r0, #20
   d5ef4:	606c      	str	r4, [r5, #4]
   d5ef6:	60ac      	str	r4, [r5, #8]
   d5ef8:	9307      	str	r3, [sp, #28]
   d5efa:	f7fe f8ce 	bl	d409a <_Znwj>
   d5efe:	4601      	mov	r1, r0
   d5f00:	b118      	cbz	r0, d5f0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5f02:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5f04:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5f06:	6044      	str	r4, [r0, #4]
   d5f08:	6084      	str	r4, [r0, #8]
   d5f0a:	a804      	add	r0, sp, #16
   d5f0c:	9103      	str	r1, [sp, #12]
   d5f0e:	f7ff feef 	bl	d5cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5f12:	4b22      	ldr	r3, [pc, #136]	; (d5f9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5f14:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5f16:	2008      	movs	r0, #8
   d5f18:	f7fe f8bf 	bl	d409a <_Znwj>
   d5f1c:	4604      	mov	r4, r0
   d5f1e:	b128      	cbz	r0, d5f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f20:	9b03      	ldr	r3, [sp, #12]
   d5f22:	f840 3b04 	str.w	r3, [r0], #4
   d5f26:	a904      	add	r1, sp, #16
   d5f28:	f7ff fd58 	bl	d59dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5f2c:	9500      	str	r5, [sp, #0]
   d5f2e:	fa5f f38a 	uxtb.w	r3, sl
   d5f32:	464a      	mov	r2, r9
   d5f34:	4641      	mov	r1, r8
   d5f36:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5f38:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5f3a:	f7ff fa19 	bl	d5370 <spark_send_event>
   d5f3e:	b920      	cbnz	r0, d5f4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5f40:	9b03      	ldr	r3, [sp, #12]
   d5f42:	785b      	ldrb	r3, [r3, #1]
   d5f44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5f48:	b183      	cbz	r3, d5f6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5f4a:	9b03      	ldr	r3, [sp, #12]
   d5f4c:	9305      	str	r3, [sp, #20]
   d5f4e:	a904      	add	r1, sp, #16
   d5f50:	a806      	add	r0, sp, #24
   d5f52:	f7ff fd43 	bl	d59dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5f56:	a905      	add	r1, sp, #20
   d5f58:	4630      	mov	r0, r6
   d5f5a:	f7ff fe89 	bl	d5c70 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f5e:	a806      	add	r0, sp, #24
   d5f60:	f7fe f9b0 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f64:	a804      	add	r0, sp, #16
   d5f66:	f7fe f9ad 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f6a:	e013      	b.n	d5f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5f6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5f70:	a905      	add	r1, sp, #20
   d5f72:	a803      	add	r0, sp, #12
   d5f74:	9205      	str	r2, [sp, #20]
   d5f76:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5f7a:	f7ff fefd 	bl	d5d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5f7e:	a805      	add	r0, sp, #20
   d5f80:	f7ff fe4c 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5f84:	a805      	add	r0, sp, #20
   d5f86:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5f88:	f7ff fe83 	bl	d5c92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5f8c:	a806      	add	r0, sp, #24
   d5f8e:	f7fe f999 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f92:	e7da      	b.n	d5f4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5f94:	4630      	mov	r0, r6
   d5f96:	b00b      	add	sp, #44	; 0x2c
   d5f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f9c:	000d6111 	.word	0x000d6111

000d5fa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5fa0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fa4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5fa6:	d006      	beq.n	d5fb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5fa8:	2a03      	cmp	r2, #3
   d5faa:	d017      	beq.n	d5fdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5fac:	2a01      	cmp	r2, #1
   d5fae:	d122      	bne.n	d5ff6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5fb0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5fb2:	6003      	str	r3, [r0, #0]
	      break;
   d5fb4:	e01f      	b.n	d5ff6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5fb6:	2018      	movs	r0, #24
   d5fb8:	680e      	ldr	r6, [r1, #0]
   d5fba:	f7fe f86e 	bl	d409a <_Znwj>
   d5fbe:	4605      	mov	r5, r0
   d5fc0:	b150      	cbz	r0, d5fd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5fc2:	4631      	mov	r1, r6
   d5fc4:	f7ff fec8 	bl	d5d58 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5fc8:	6930      	ldr	r0, [r6, #16]
   d5fca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5fce:	b108      	cbz	r0, d5fd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5fd0:	f001 fdf8 	bl	d7bc4 <strdup>
   d5fd4:	6128      	str	r0, [r5, #16]
   d5fd6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5fd8:	6025      	str	r5, [r4, #0]
   d5fda:	e00c      	b.n	d5ff6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5fdc:	6804      	ldr	r4, [r0, #0]
   d5fde:	b154      	cbz	r4, d5ff6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5fe0:	f104 0010 	add.w	r0, r4, #16
   d5fe4:	f7ff fe1a 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f7ff fa9f 	bl	d552c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5fee:	2118      	movs	r1, #24
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	f000 fce5 	bl	d69c0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5ff6:	2000      	movs	r0, #0
   d5ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ffa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5ffa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ffc:	2300      	movs	r3, #0
   d5ffe:	6083      	str	r3, [r0, #8]
   d6000:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6002:	4604      	mov	r4, r0
   d6004:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6006:	b12b      	cbz	r3, d6014 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6008:	2202      	movs	r2, #2
   d600a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d600c:	68eb      	ldr	r3, [r5, #12]
   d600e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6010:	68ab      	ldr	r3, [r5, #8]
   d6012:	60a3      	str	r3, [r4, #8]
	}
    }
   d6014:	4620      	mov	r0, r4
   d6016:	bd38      	pop	{r3, r4, r5, pc}

000d6018 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6018:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d601a:	b570      	push	{r4, r5, r6, lr}
   d601c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d601e:	d006      	beq.n	d602e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6020:	2a03      	cmp	r2, #3
   d6022:	d011      	beq.n	d6048 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6024:	2a01      	cmp	r2, #1
   d6026:	d118      	bne.n	d605a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6028:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d602a:	6003      	str	r3, [r0, #0]
	      break;
   d602c:	e015      	b.n	d605a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d602e:	2014      	movs	r0, #20
   d6030:	680e      	ldr	r6, [r1, #0]
   d6032:	f7fe f832 	bl	d409a <_Znwj>
   d6036:	4605      	mov	r5, r0
   d6038:	b120      	cbz	r0, d6044 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d603a:	4631      	mov	r1, r6
   d603c:	f7ff ffdd 	bl	d5ffa <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6040:	7c33      	ldrb	r3, [r6, #16]
   d6042:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6044:	6025      	str	r5, [r4, #0]
   d6046:	e008      	b.n	d605a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6048:	6804      	ldr	r4, [r0, #0]
   d604a:	b134      	cbz	r4, d605a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d604c:	4620      	mov	r0, r4
   d604e:	f7ff fa6d 	bl	d552c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6052:	2114      	movs	r1, #20
   d6054:	4620      	mov	r0, r4
   d6056:	f000 fcb3 	bl	d69c0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d605a:	2000      	movs	r0, #0
   d605c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6060 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6060:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6062:	2300      	movs	r3, #0
   d6064:	b087      	sub	sp, #28
   d6066:	460c      	mov	r4, r1
   d6068:	f3bf 8f5f 	dmb	sy
   d606c:	e850 6f00 	ldrex	r6, [r0]
   d6070:	e840 3200 	strex	r2, r3, [r0]
   d6074:	2a00      	cmp	r2, #0
   d6076:	d1f9      	bne.n	d606c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6078:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d607c:	2e00      	cmp	r6, #0
   d607e:	d03f      	beq.n	d6100 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6080:	4618      	mov	r0, r3
   d6082:	f7ff f9e5 	bl	d5450 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6086:	4607      	mov	r7, r0
   d6088:	b120      	cbz	r0, d6094 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d608a:	4621      	mov	r1, r4
   d608c:	4630      	mov	r0, r6
   d608e:	f7ff fe53 	bl	d5d38 <_ZNKSt8functionIFvRKbEEclES1_>
   d6092:	e02e      	b.n	d60f2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6094:	4631      	mov	r1, r6
   d6096:	a801      	add	r0, sp, #4
   d6098:	f7ff ffaf 	bl	d5ffa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d609c:	7823      	ldrb	r3, [r4, #0]
   d609e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d60a2:	2010      	movs	r0, #16
   d60a4:	f7fd fff9 	bl	d409a <_Znwj>
   d60a8:	4605      	mov	r5, r0
   d60aa:	b1d0      	cbz	r0, d60e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d60ac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60ae:	2014      	movs	r0, #20
   d60b0:	f7fd fff3 	bl	d409a <_Znwj>
   d60b4:	4604      	mov	r4, r0
   d60b6:	b178      	cbz	r0, d60d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d60b8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d60ba:	4601      	mov	r1, r0
   d60bc:	a801      	add	r0, sp, #4
   d60be:	f7ff fe06 	bl	d5cce <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60c2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d60c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d60c6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60c8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d60ca:	9203      	str	r2, [sp, #12]
   d60cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d60ce:	60e3      	str	r3, [r4, #12]
   d60d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d60d4:	9204      	str	r2, [sp, #16]
   d60d6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d60d8:	4b0a      	ldr	r3, [pc, #40]	; (d6104 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d60da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d60dc:	4b0a      	ldr	r3, [pc, #40]	; (d6108 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60de:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d60e0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d60e2:	a801      	add	r0, sp, #4
   d60e4:	f7ff fa22 	bl	d552c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d60e8:	2200      	movs	r2, #0
   d60ea:	4629      	mov	r1, r5
   d60ec:	4807      	ldr	r0, [pc, #28]	; (d610c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d60ee:	f7ff f9b7 	bl	d5460 <application_thread_invoke>
   d60f2:	4630      	mov	r0, r6
   d60f4:	f7ff fa1a 	bl	d552c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d60f8:	2110      	movs	r1, #16
   d60fa:	4630      	mov	r0, r6
   d60fc:	f000 fc60 	bl	d69c0 <_ZdlPvj>
        }
    }
   d6100:	b007      	add	sp, #28
   d6102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6104:	000d5d4b 	.word	0x000d5d4b
   d6108:	000d6019 	.word	0x000d6019
   d610c:	000d58a5 	.word	0x000d58a5

000d6110 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6110:	b530      	push	{r4, r5, lr}
   d6112:	b085      	sub	sp, #20
   d6114:	4604      	mov	r4, r0
   d6116:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6118:	4668      	mov	r0, sp
   d611a:	4611      	mov	r1, r2
   d611c:	f7ff fdb9 	bl	d5c92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6120:	b17c      	cbz	r4, d6142 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6122:	b224      	sxth	r4, r4
   d6124:	4628      	mov	r0, r5
   d6126:	b10d      	cbz	r5, d612c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6128:	f001 fd4c 	bl	d7bc4 <strdup>
   d612c:	9002      	str	r0, [sp, #8]
   d612e:	a902      	add	r1, sp, #8
   d6130:	4668      	mov	r0, sp
   d6132:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6136:	f7ff fe1f 	bl	d5d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d613a:	a802      	add	r0, sp, #8
   d613c:	f7ff fd6e 	bl	d5c1c <_ZN8particle5ErrorD1Ev>
   d6140:	e01d      	b.n	d617e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6142:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6144:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6148:	f04f 0201 	mov.w	r2, #1
   d614c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6150:	42a3      	cmp	r3, r4
   d6152:	d103      	bne.n	d615c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6154:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6158:	2900      	cmp	r1, #0
   d615a:	d1f7      	bne.n	d614c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d615c:	d002      	beq.n	d6164 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d615e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6162:	e00c      	b.n	d617e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6164:	f110 010c 	adds.w	r1, r0, #12
   d6168:	f04f 0301 	mov.w	r3, #1
   d616c:	bf18      	it	ne
   d616e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6170:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6174:	3004      	adds	r0, #4
   d6176:	f800 3c03 	strb.w	r3, [r0, #-3]
   d617a:	f7ff ff71 	bl	d6060 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d617e:	a801      	add	r0, sp, #4
   d6180:	f7fe f8a0 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6184:	b005      	add	sp, #20
   d6186:	bd30      	pop	{r4, r5, pc}

000d6188 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6188:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d618a:	4b0f      	ldr	r3, [pc, #60]	; (d61c8 <serialEventRun+0x40>)
   d618c:	b133      	cbz	r3, d619c <serialEventRun+0x14>
   d618e:	f7ff fc8f 	bl	d5ab0 <_Z16_fetch_usbserialv>
   d6192:	6803      	ldr	r3, [r0, #0]
   d6194:	691b      	ldr	r3, [r3, #16]
   d6196:	4798      	blx	r3
   d6198:	2800      	cmp	r0, #0
   d619a:	dc0d      	bgt.n	d61b8 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d619c:	4b0b      	ldr	r3, [pc, #44]	; (d61cc <serialEventRun+0x44>)
   d619e:	b133      	cbz	r3, d61ae <serialEventRun+0x26>
   d61a0:	f7ff fbf6 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d61a4:	6803      	ldr	r3, [r0, #0]
   d61a6:	691b      	ldr	r3, [r3, #16]
   d61a8:	4798      	blx	r3
   d61aa:	2800      	cmp	r0, #0
   d61ac:	dc07      	bgt.n	d61be <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d61ae:	4b08      	ldr	r3, [pc, #32]	; (d61d0 <serialEventRun+0x48>)
   d61b0:	b143      	cbz	r3, d61c4 <serialEventRun+0x3c>
   d61b2:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d61b6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d61b8:	f3af 8000 	nop.w
   d61bc:	e7ee      	b.n	d619c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d61be:	f3af 8000 	nop.w
   d61c2:	e7f4      	b.n	d61ae <serialEventRun+0x26>
   d61c4:	bd08      	pop	{r3, pc}
   d61c6:	bf00      	nop
	...

000d61d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d61d4:	b508      	push	{r3, lr}
	serialEventRun();
   d61d6:	f7ff ffd7 	bl	d6188 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d61da:	f7ff f839 	bl	d5250 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d61de:	4b01      	ldr	r3, [pc, #4]	; (d61e4 <_post_loop+0x10>)
   d61e0:	6018      	str	r0, [r3, #0]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	2003e73c 	.word	0x2003e73c

000d61e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d61e8:	4802      	ldr	r0, [pc, #8]	; (d61f4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d61ea:	4a03      	ldr	r2, [pc, #12]	; (d61f8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d61ec:	4903      	ldr	r1, [pc, #12]	; (d61fc <_Z33system_initialize_user_backup_ramv+0x14>)
   d61ee:	1a12      	subs	r2, r2, r0
   d61f0:	f001 bca4 	b.w	d7b3c <memcpy>
   d61f4:	2003f400 	.word	0x2003f400
   d61f8:	2003f404 	.word	0x2003f404
   d61fc:	000d83c0 	.word	0x000d83c0

000d6200 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6200:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6202:	2300      	movs	r3, #0
   d6204:	9300      	str	r3, [sp, #0]
   d6206:	461a      	mov	r2, r3
   d6208:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d620c:	f7ff f93a 	bl	d5484 <system_ctrl_set_result>
}
   d6210:	b003      	add	sp, #12
   d6212:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6218 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6218:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d621a:	8843      	ldrh	r3, [r0, #2]
   d621c:	2b0a      	cmp	r3, #10
   d621e:	d008      	beq.n	d6232 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6220:	2b50      	cmp	r3, #80	; 0x50
   d6222:	d109      	bne.n	d6238 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6224:	4b09      	ldr	r3, [pc, #36]	; (d624c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6226:	681b      	ldr	r3, [r3, #0]
   d6228:	b13b      	cbz	r3, d623a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d622a:	b003      	add	sp, #12
   d622c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6230:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6232:	f7ff ffe5 	bl	d6200 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6236:	e006      	b.n	d6246 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6238:	2300      	movs	r3, #0
   d623a:	9300      	str	r3, [sp, #0]
   d623c:	461a      	mov	r2, r3
   d623e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6242:	f7ff f91f 	bl	d5484 <system_ctrl_set_result>
        break;
    }
}
   d6246:	b003      	add	sp, #12
   d6248:	f85d fb04 	ldr.w	pc, [sp], #4
   d624c:	2003e6ec 	.word	0x2003e6ec

000d6250 <module_user_init_hook>:

void module_user_init_hook()
{
   d6250:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6252:	4c10      	ldr	r4, [pc, #64]	; (d6294 <module_user_init_hook+0x44>)
   d6254:	4d10      	ldr	r5, [pc, #64]	; (d6298 <module_user_init_hook+0x48>)
   d6256:	6823      	ldr	r3, [r4, #0]
   d6258:	42ab      	cmp	r3, r5
   d625a:	4b10      	ldr	r3, [pc, #64]	; (d629c <module_user_init_hook+0x4c>)
   d625c:	bf0c      	ite	eq
   d625e:	2201      	moveq	r2, #1
   d6260:	2200      	movne	r2, #0
   d6262:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6264:	d002      	beq.n	d626c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6266:	f7ff ffbf 	bl	d61e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d626a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d626c:	f7fe ffe8 	bl	d5240 <HAL_RNG_GetRandomNumber>
   d6270:	4604      	mov	r4, r0
    srand(seed);
   d6272:	f001 fc77 	bl	d7b64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6276:	4b0a      	ldr	r3, [pc, #40]	; (d62a0 <module_user_init_hook+0x50>)
   d6278:	b113      	cbz	r3, d6280 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d627a:	4620      	mov	r0, r4
   d627c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6280:	2100      	movs	r1, #0
   d6282:	4807      	ldr	r0, [pc, #28]	; (d62a0 <module_user_init_hook+0x50>)
   d6284:	f7ff f87c 	bl	d5380 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6288:	2100      	movs	r1, #0
   d628a:	4806      	ldr	r0, [pc, #24]	; (d62a4 <module_user_init_hook+0x54>)
}
   d628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6290:	f7ff b8ee 	b.w	d5470 <system_ctrl_set_app_request_handler>
   d6294:	2003f400 	.word	0x2003f400
   d6298:	9a271c1e 	.word	0x9a271c1e
   d629c:	2003e6f0 	.word	0x2003e6f0
   d62a0:	00000000 	.word	0x00000000
   d62a4:	000d6219 	.word	0x000d6219

000d62a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d62a8:	b510      	push	{r4, lr}
   d62aa:	4604      	mov	r4, r0
   d62ac:	f7ff f93e 	bl	d552c <_ZNSt14_Function_baseD1Ev>
   d62b0:	4620      	mov	r0, r4
   d62b2:	bd10      	pop	{r4, pc}

000d62b4 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d62b4:	b510      	push	{r4, lr}
   d62b6:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d62b8:	f7ff f832 	bl	d5320 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d62bc:	4284      	cmp	r4, r0
   d62be:	d008      	beq.n	d62d2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d62c0:	b11c      	cbz	r4, d62ca <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d62c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d62c6:	f7ff b813 	b.w	d52f0 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d62ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d62ce:	f7ff b817 	b.w	d5300 <LED_Signaling_Stop>
   d62d2:	bd10      	pop	{r4, pc}

000d62d4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d62d4:	b570      	push	{r4, r5, r6, lr}
   d62d6:	4605      	mov	r5, r0
   d62d8:	460e      	mov	r6, r1
   d62da:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d62dc:	f7ff f820 	bl	d5320 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d62e0:	b150      	cbz	r0, d62f8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d62e2:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d62e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d62ea:	f7fe fff9 	bl	d52e0 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d62ee:	20e7      	movs	r0, #231	; 0xe7
}
   d62f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d62f4:	f7ff b81c 	b.w	d5330 <LED_On>
   d62f8:	bd70      	pop	{r4, r5, r6, pc}

000d62fa <_ZN8RGBClass10brightnessEhb>:
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d62fa:	b510      	push	{r4, lr}
   d62fc:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d62fe:	f7ff f807 	bl	d5310 <LED_SetBrightness>

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d6302:	f7ff f80d 	bl	d5320 <LED_RGB_IsOverRidden>
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
   d6306:	b128      	cbz	r0, d6314 <_ZN8RGBClass10brightnessEhb+0x1a>
   d6308:	b124      	cbz	r4, d6314 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
   d630a:	20e7      	movs	r0, #231	; 0xe7
    }
}
   d630c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
        LED_On(LED_RGB);
   d6310:	f7ff b80e 	b.w	d5330 <LED_On>
   d6314:	bd10      	pop	{r4, pc}
	...

000d6318 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6318:	4803      	ldr	r0, [pc, #12]	; (d6328 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d631a:	4a04      	ldr	r2, [pc, #16]	; (d632c <_GLOBAL__sub_I_RGB+0x14>)
   d631c:	4904      	ldr	r1, [pc, #16]	; (d6330 <_GLOBAL__sub_I_RGB+0x18>)
   d631e:	2300      	movs	r3, #0
   d6320:	6083      	str	r3, [r0, #8]
   d6322:	f000 bb3f 	b.w	d69a4 <__aeabi_atexit>
   d6326:	bf00      	nop
   d6328:	2003e6f4 	.word	0x2003e6f4
   d632c:	2003e1bc 	.word	0x2003e1bc
   d6330:	000d62a9 	.word	0x000d62a9

000d6334 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6334:	2100      	movs	r1, #0
   d6336:	f7ff b883 	b.w	d5440 <system_delay_ms>
	...

000d633c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d633c:	4b02      	ldr	r3, [pc, #8]	; (d6348 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d633e:	681a      	ldr	r2, [r3, #0]
   d6340:	4b02      	ldr	r3, [pc, #8]	; (d634c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6342:	601a      	str	r2, [r3, #0]
   d6344:	4770      	bx	lr
   d6346:	bf00      	nop
   d6348:	2003e150 	.word	0x2003e150
   d634c:	2003e704 	.word	0x2003e704

000d6350 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6350:	4b01      	ldr	r3, [pc, #4]	; (d6358 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6352:	4a02      	ldr	r2, [pc, #8]	; (d635c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6354:	601a      	str	r2, [r3, #0]
   d6356:	4770      	bx	lr
   d6358:	2003e708 	.word	0x2003e708
   d635c:	000d824c 	.word	0x000d824c

000d6360 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6360:	b510      	push	{r4, lr}
   d6362:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6364:	f7fe ff74 	bl	d5250 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6368:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d636a:	6823      	ldr	r3, [r4, #0]
   d636c:	4620      	mov	r0, r4
   d636e:	695b      	ldr	r3, [r3, #20]
   d6370:	4798      	blx	r3
    if (c >= 0) return c;
   d6372:	2800      	cmp	r0, #0
   d6374:	da08      	bge.n	d6388 <_ZN6Stream9timedReadEv+0x28>
   d6376:	f7fe ff6b 	bl	d5250 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d637a:	68e3      	ldr	r3, [r4, #12]
   d637c:	1ac0      	subs	r0, r0, r3
   d637e:	68a3      	ldr	r3, [r4, #8]
   d6380:	4298      	cmp	r0, r3
   d6382:	d3f2      	bcc.n	d636a <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d6384:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6388:	bd10      	pop	{r4, pc}
	...

000d638c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d638c:	b570      	push	{r4, r5, r6, lr}
   d638e:	460d      	mov	r5, r1
  String ret;
   d6390:	4909      	ldr	r1, [pc, #36]	; (d63b8 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d6392:	4604      	mov	r4, r0
   d6394:	4616      	mov	r6, r2
  String ret;
   d6396:	f000 f90e 	bl	d65b6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d639a:	4628      	mov	r0, r5
   d639c:	f7ff ffe0 	bl	d6360 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d63a0:	2800      	cmp	r0, #0
   d63a2:	db06      	blt.n	d63b2 <_ZN6Stream15readStringUntilEc+0x26>
   d63a4:	42b0      	cmp	r0, r6
   d63a6:	d004      	beq.n	d63b2 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d63a8:	b2c1      	uxtb	r1, r0
   d63aa:	4620      	mov	r0, r4
   d63ac:	f000 f952 	bl	d6654 <_ZN6String6concatEc>
   d63b0:	e7f3      	b.n	d639a <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d63b2:	4620      	mov	r0, r4
   d63b4:	bd70      	pop	{r4, r5, r6, pc}
   d63b6:	bf00      	nop
   d63b8:	000d7e39 	.word	0x000d7e39

000d63bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d63bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63be:	4606      	mov	r6, r0
   d63c0:	460d      	mov	r5, r1
   d63c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d63c4:	2400      	movs	r4, #0
  while (size--) {
   d63c6:	42bd      	cmp	r5, r7
   d63c8:	d00c      	beq.n	d63e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d63ca:	6833      	ldr	r3, [r6, #0]
   d63cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d63d0:	689b      	ldr	r3, [r3, #8]
   d63d2:	4630      	mov	r0, r6
   d63d4:	4798      	blx	r3
     if (chunk>=0)
   d63d6:	2800      	cmp	r0, #0
   d63d8:	db01      	blt.n	d63de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d63da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d63dc:	e7f3      	b.n	d63c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d63de:	2c00      	cmp	r4, #0
   d63e0:	bf08      	it	eq
   d63e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d63e4:	4620      	mov	r0, r4
   d63e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d63e8:	b570      	push	{r4, r5, r6, lr}
   d63ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d63ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d63ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d63f0:	b149      	cbz	r1, d6406 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d63f2:	f001 fc02 	bl	d7bfa <strlen>
   d63f6:	682b      	ldr	r3, [r5, #0]
   d63f8:	4602      	mov	r2, r0
   d63fa:	4621      	mov	r1, r4
   d63fc:	4628      	mov	r0, r5
   d63fe:	68db      	ldr	r3, [r3, #12]
    }
   d6400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6404:	4718      	bx	r3
    }
   d6406:	bd70      	pop	{r4, r5, r6, pc}

000d6408 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6408:	6803      	ldr	r3, [r0, #0]
   d640a:	689b      	ldr	r3, [r3, #8]
   d640c:	4718      	bx	r3

000d640e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d640e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6410:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6412:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6414:	f7ff fff8 	bl	d6408 <_ZN5Print5printEc>
  n += print('\n');
   d6418:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d641a:	4604      	mov	r4, r0
  n += print('\n');
   d641c:	4628      	mov	r0, r5
   d641e:	f7ff fff3 	bl	d6408 <_ZN5Print5printEc>
  return n;
}
   d6422:	4420      	add	r0, r4
   d6424:	bd38      	pop	{r3, r4, r5, pc}

000d6426 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6426:	b538      	push	{r3, r4, r5, lr}
   d6428:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d642a:	f7ff ffdd 	bl	d63e8 <_ZN5Print5writeEPKc>
   d642e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6430:	4628      	mov	r0, r5
   d6432:	f7ff ffec 	bl	d640e <_ZN5Print7printlnEv>
  return n;
}
   d6436:	4420      	add	r0, r4
   d6438:	bd38      	pop	{r3, r4, r5, pc}

000d643a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d643a:	b530      	push	{r4, r5, lr}
   d643c:	b08b      	sub	sp, #44	; 0x2c
   d643e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6440:	2100      	movs	r1, #0
   d6442:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6446:	2a01      	cmp	r2, #1
   d6448:	bf98      	it	ls
   d644a:	220a      	movls	r2, #10
   d644c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6450:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6454:	fb05 3312 	mls	r3, r5, r2, r3
   d6458:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d645c:	2b09      	cmp	r3, #9
   d645e:	bf94      	ite	ls
   d6460:	3330      	addls	r3, #48	; 0x30
   d6462:	3337      	addhi	r3, #55	; 0x37
   d6464:	b2db      	uxtb	r3, r3
   d6466:	4621      	mov	r1, r4
   d6468:	f804 3901 	strb.w	r3, [r4], #-1
   d646c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d646e:	2d00      	cmp	r5, #0
   d6470:	d1ee      	bne.n	d6450 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6472:	f7ff ffb9 	bl	d63e8 <_ZN5Print5writeEPKc>
}
   d6476:	b00b      	add	sp, #44	; 0x2c
   d6478:	bd30      	pop	{r4, r5, pc}

000d647a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d647a:	b40c      	push	{r2, r3}
   d647c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6480:	b087      	sub	sp, #28
   d6482:	af00      	add	r7, sp, #0
   d6484:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6488:	4605      	mov	r5, r0
   d648a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d648e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6490:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6492:	4623      	mov	r3, r4
   d6494:	464a      	mov	r2, r9
   d6496:	2114      	movs	r1, #20
   d6498:	1d38      	adds	r0, r7, #4
   d649a:	f7ff f827 	bl	d54ec <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d649e:	2813      	cmp	r0, #19
   d64a0:	d805      	bhi.n	d64ae <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64a2:	1d39      	adds	r1, r7, #4
   d64a4:	4628      	mov	r0, r5
   d64a6:	f7ff ff9f 	bl	d63e8 <_ZN5Print5writeEPKc>
   d64aa:	4604      	mov	r4, r0
   d64ac:	e013      	b.n	d64d6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d64ae:	f100 0308 	add.w	r3, r0, #8
   d64b2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d64b6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d64b8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d64bc:	1c41      	adds	r1, r0, #1
   d64be:	4623      	mov	r3, r4
   d64c0:	464a      	mov	r2, r9
   d64c2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d64c4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d64c6:	f7ff f811 	bl	d54ec <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64ca:	4669      	mov	r1, sp
   d64cc:	4628      	mov	r0, r5
   d64ce:	f7ff ff8b 	bl	d63e8 <_ZN5Print5writeEPKc>
   d64d2:	4604      	mov	r4, r0
   d64d4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d64d6:	b11e      	cbz	r6, d64e0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d64d8:	4628      	mov	r0, r5
   d64da:	f7ff ff98 	bl	d640e <_ZN5Print7printlnEv>
   d64de:	4404      	add	r4, r0
    return n;
}
   d64e0:	4620      	mov	r0, r4
   d64e2:	371c      	adds	r7, #28
   d64e4:	46bd      	mov	sp, r7
   d64e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d64ea:	b002      	add	sp, #8
   d64ec:	4770      	bx	lr

000d64ee <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d64ee:	b510      	push	{r4, lr}
   d64f0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d64f2:	6800      	ldr	r0, [r0, #0]
   d64f4:	b108      	cbz	r0, d64fa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d64f6:	f7fe fe93 	bl	d5220 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d64fa:	4620      	mov	r0, r4
   d64fc:	bd10      	pop	{r4, pc}
	...

000d6500 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6500:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6502:	4c06      	ldr	r4, [pc, #24]	; (d651c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6504:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6506:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6508:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d650a:	f7fe fe81 	bl	d5210 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d650e:	4620      	mov	r0, r4
   d6510:	4a03      	ldr	r2, [pc, #12]	; (d6520 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6512:	4904      	ldr	r1, [pc, #16]	; (d6524 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6518:	f000 ba44 	b.w	d69a4 <__aeabi_atexit>
   d651c:	2003e70c 	.word	0x2003e70c
   d6520:	2003e1bc 	.word	0x2003e1bc
   d6524:	000d64ef 	.word	0x000d64ef

000d6528 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6528:	b510      	push	{r4, lr}
   d652a:	4604      	mov	r4, r0
{
	free(buffer);
   d652c:	6800      	ldr	r0, [r0, #0]
   d652e:	f7fe ffc5 	bl	d54bc <free>
}
   d6532:	4620      	mov	r0, r4
   d6534:	bd10      	pop	{r4, pc}

000d6536 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6536:	b510      	push	{r4, lr}
   d6538:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d653a:	6800      	ldr	r0, [r0, #0]
   d653c:	b108      	cbz	r0, d6542 <_ZN6String10invalidateEv+0xc>
   d653e:	f7fe ffbd 	bl	d54bc <free>
	buffer = NULL;
   d6542:	2300      	movs	r3, #0
   d6544:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6546:	60a3      	str	r3, [r4, #8]
   d6548:	6063      	str	r3, [r4, #4]
   d654a:	bd10      	pop	{r4, pc}

000d654c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d654c:	b538      	push	{r3, r4, r5, lr}
   d654e:	4604      	mov	r4, r0
   d6550:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6552:	6800      	ldr	r0, [r0, #0]
   d6554:	3101      	adds	r1, #1
   d6556:	f7fe ffb9 	bl	d54cc <realloc>
	if (newbuffer) {
   d655a:	b110      	cbz	r0, d6562 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d655c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6560:	2001      	movs	r0, #1
	}
	return 0;
}
   d6562:	bd38      	pop	{r3, r4, r5, pc}

000d6564 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6564:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6566:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6568:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d656a:	b113      	cbz	r3, d6572 <_ZN6String7reserveEj+0xe>
   d656c:	6843      	ldr	r3, [r0, #4]
   d656e:	428b      	cmp	r3, r1
   d6570:	d207      	bcs.n	d6582 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6572:	4620      	mov	r0, r4
   d6574:	f7ff ffea 	bl	d654c <_ZN6String12changeBufferEj>
   d6578:	b120      	cbz	r0, d6584 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d657a:	68a3      	ldr	r3, [r4, #8]
   d657c:	b90b      	cbnz	r3, d6582 <_ZN6String7reserveEj+0x1e>
   d657e:	6822      	ldr	r2, [r4, #0]
   d6580:	7013      	strb	r3, [r2, #0]
   d6582:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6584:	bd10      	pop	{r4, pc}

000d6586 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6586:	b570      	push	{r4, r5, r6, lr}
   d6588:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d658a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d658c:	4604      	mov	r4, r0
   d658e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6590:	f7ff ffe8 	bl	d6564 <_ZN6String7reserveEj>
   d6594:	b918      	cbnz	r0, d659e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6596:	4620      	mov	r0, r4
   d6598:	f7ff ffcd 	bl	d6536 <_ZN6String10invalidateEv>
		return *this;
   d659c:	e009      	b.n	d65b2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d659e:	462a      	mov	r2, r5
   d65a0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d65a2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d65a4:	6820      	ldr	r0, [r4, #0]
   d65a6:	f001 fac9 	bl	d7b3c <memcpy>
	buffer[len] = 0;
   d65aa:	6822      	ldr	r2, [r4, #0]
   d65ac:	68a3      	ldr	r3, [r4, #8]
   d65ae:	2100      	movs	r1, #0
   d65b0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d65b2:	4620      	mov	r0, r4
   d65b4:	bd70      	pop	{r4, r5, r6, pc}

000d65b6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d65b6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65b8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d65ba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65bc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d65be:	6043      	str	r3, [r0, #4]
	len = 0;
   d65c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d65c2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d65c4:	460d      	mov	r5, r1
   d65c6:	b139      	cbz	r1, d65d8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d65c8:	4608      	mov	r0, r1
   d65ca:	f001 fb16 	bl	d7bfa <strlen>
   d65ce:	4629      	mov	r1, r5
   d65d0:	4602      	mov	r2, r0
   d65d2:	4620      	mov	r0, r4
   d65d4:	f7ff ffd7 	bl	d6586 <_ZN6String4copyEPKcj>
}
   d65d8:	4620      	mov	r0, r4
   d65da:	bd38      	pop	{r3, r4, r5, pc}

000d65dc <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d65dc:	b538      	push	{r3, r4, r5, lr}
   d65de:	4605      	mov	r5, r0
	if (buffer) {
   d65e0:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d65e2:	460c      	mov	r4, r1
	if (buffer) {
   d65e4:	b160      	cbz	r0, d6600 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d65e6:	686a      	ldr	r2, [r5, #4]
   d65e8:	688b      	ldr	r3, [r1, #8]
   d65ea:	429a      	cmp	r2, r3
   d65ec:	d306      	bcc.n	d65fc <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d65ee:	6809      	ldr	r1, [r1, #0]
   d65f0:	f001 fae0 	bl	d7bb4 <strcpy>
			len = rhs.len;
   d65f4:	68a3      	ldr	r3, [r4, #8]
   d65f6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d65f8:	2300      	movs	r3, #0
   d65fa:	e00a      	b.n	d6612 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d65fc:	f7fe ff5e 	bl	d54bc <free>
		}
	}
	buffer = rhs.buffer;
   d6600:	6823      	ldr	r3, [r4, #0]
   d6602:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6604:	6863      	ldr	r3, [r4, #4]
   d6606:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6608:	68a3      	ldr	r3, [r4, #8]
   d660a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d660c:	2300      	movs	r3, #0
   d660e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d6610:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d6612:	60a3      	str	r3, [r4, #8]
   d6614:	bd38      	pop	{r3, r4, r5, pc}

000d6616 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d6616:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d6618:	b510      	push	{r4, lr}
   d661a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d661c:	d001      	beq.n	d6622 <_ZN6StringaSEOS_+0xc>
   d661e:	f7ff ffdd 	bl	d65dc <_ZN6String4moveERS_>
	return *this;
}
   d6622:	4620      	mov	r0, r4
   d6624:	bd10      	pop	{r4, pc}

000d6626 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6626:	b570      	push	{r4, r5, r6, lr}
   d6628:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d662a:	460e      	mov	r6, r1
   d662c:	b909      	cbnz	r1, d6632 <_ZN6String6concatEPKcj+0xc>
   d662e:	2000      	movs	r0, #0
   d6630:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6632:	b16a      	cbz	r2, d6650 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6634:	6883      	ldr	r3, [r0, #8]
   d6636:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6638:	4629      	mov	r1, r5
   d663a:	f7ff ff93 	bl	d6564 <_ZN6String7reserveEj>
   d663e:	2800      	cmp	r0, #0
   d6640:	d0f5      	beq.n	d662e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6642:	6820      	ldr	r0, [r4, #0]
   d6644:	68a3      	ldr	r3, [r4, #8]
   d6646:	4631      	mov	r1, r6
   d6648:	4418      	add	r0, r3
   d664a:	f001 fab3 	bl	d7bb4 <strcpy>
	len = newlen;
   d664e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6650:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6652:	bd70      	pop	{r4, r5, r6, pc}

000d6654 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6654:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6656:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d6658:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d665c:	2201      	movs	r2, #1
   d665e:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6660:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6664:	f7ff ffdf 	bl	d6626 <_ZN6String6concatEPKcj>
}
   d6668:	b003      	add	sp, #12
   d666a:	f85d fb04 	ldr.w	pc, [sp], #4

000d666e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d666e:	b510      	push	{r4, lr}
   d6670:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6672:	6800      	ldr	r0, [r0, #0]
   d6674:	b118      	cbz	r0, d667e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6676:	f7fe ff21 	bl	d54bc <free>
            wakeupSource_ = nullptr;
   d667a:	2300      	movs	r3, #0
   d667c:	6023      	str	r3, [r4, #0]
   d667e:	bd10      	pop	{r4, pc}

000d6680 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6680:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d6682:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d6686:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d6688:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d668a:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d668c:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d6690:	f8c0 2006 	str.w	r2, [r0, #6]
   d6694:	889b      	ldrh	r3, [r3, #4]
   d6696:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6698:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d669a:	f7ff ffe8 	bl	d666e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d669e:	682b      	ldr	r3, [r5, #0]
   d66a0:	b113      	cbz	r3, d66a8 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d66a2:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d66a4:	2300      	movs	r3, #0
   d66a6:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d66a8:	4620      	mov	r0, r4
   d66aa:	bd38      	pop	{r3, r4, r5, pc}

000d66ac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d66ac:	b538      	push	{r3, r4, r5, lr}
   d66ae:	460c      	mov	r4, r1
   d66b0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d66b2:	f7ff ffdc 	bl	d666e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d66b6:	b144      	cbz	r4, d66ca <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d66b8:	8820      	ldrh	r0, [r4, #0]
   d66ba:	f7fe fef7 	bl	d54ac <malloc>
   d66be:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d66c0:	b128      	cbz	r0, d66ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d66c2:	8822      	ldrh	r2, [r4, #0]
   d66c4:	4621      	mov	r1, r4
   d66c6:	f001 fa39 	bl	d7b3c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d66ca:	2000      	movs	r0, #0
   d66cc:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d66ce:	4801      	ldr	r0, [pc, #4]	; (d66d4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d66d0:	bd38      	pop	{r3, r4, r5, pc}
   d66d2:	bf00      	nop
   d66d4:	fffffefc 	.word	0xfffffefc

000d66d8 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d66d8:	4601      	mov	r1, r0
   d66da:	2200      	movs	r2, #0
   d66dc:	208c      	movs	r0, #140	; 0x8c
   d66de:	f7fe bda7 	b.w	d5230 <HAL_Core_System_Reset_Ex>

000d66e2 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d66e2:	2000      	movs	r0, #0
   d66e4:	f7ff bff8 	b.w	d66d8 <_ZN11SystemClass5resetEm>

000d66e8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d66e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66ea:	4d30      	ldr	r5, [pc, #192]	; (d67ac <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d66ec:	7d0b      	ldrb	r3, [r1, #20]
   d66ee:	4604      	mov	r4, r0
   d66f0:	b08b      	sub	sp, #44	; 0x2c
   d66f2:	4608      	mov	r0, r1
   d66f4:	1daf      	adds	r7, r5, #6
   d66f6:	b313      	cbz	r3, d673e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d66f8:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d66fa:	791b      	ldrb	r3, [r3, #4]
   d66fc:	b1fb      	cbz	r3, d673e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d66fe:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6700:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d6704:	a902      	add	r1, sp, #8
   d6706:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6708:	9202      	str	r2, [sp, #8]
   d670a:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d670e:	f88d 200e 	strb.w	r2, [sp, #14]
   d6712:	f8ad 2010 	strh.w	r2, [sp, #16]
   d6716:	f8ad 3012 	strh.w	r3, [sp, #18]
   d671a:	f7fe febd 	bl	d5498 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d671e:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d6720:	b200      	sxth	r0, r0
   d6722:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d6726:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d672a:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d672c:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d672e:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d6732:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d6734:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d6736:	4628      	mov	r0, r5
   d6738:	f7ff ffb8 	bl	d66ac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d673c:	e01c      	b.n	d6778 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d673e:	2320      	movs	r3, #32
   d6740:	2600      	movs	r6, #0
   d6742:	9302      	str	r3, [sp, #8]
   d6744:	4b1a      	ldr	r3, [pc, #104]	; (d67b0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d6746:	9300      	str	r3, [sp, #0]
   d6748:	491a      	ldr	r1, [pc, #104]	; (d67b4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d674a:	9603      	str	r6, [sp, #12]
   d674c:	4633      	mov	r3, r6
   d674e:	2032      	movs	r0, #50	; 0x32
   d6750:	aa02      	add	r2, sp, #8
   d6752:	f7fe fdf5 	bl	d5340 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6756:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d675a:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d675e:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d6760:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d6764:	4811      	ldr	r0, [pc, #68]	; (d67ac <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6766:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6768:	f88d 600e 	strb.w	r6, [sp, #14]
   d676c:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d6770:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6774:	f7ff ff84 	bl	d6680 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6778:	a802      	add	r0, sp, #8
   d677a:	f7ff ff78 	bl	d666e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d677e:	2300      	movs	r3, #0
   d6780:	6023      	str	r3, [r4, #0]
   d6782:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6784:	71a3      	strb	r3, [r4, #6]
   d6786:	8123      	strh	r3, [r4, #8]
   d6788:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d678c:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d678e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d6792:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d6794:	683b      	ldr	r3, [r7, #0]
   d6796:	f8c4 3006 	str.w	r3, [r4, #6]
   d679a:	88bb      	ldrh	r3, [r7, #4]
   d679c:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d679e:	6829      	ldr	r1, [r5, #0]
   d67a0:	4620      	mov	r0, r4
   d67a2:	f7ff ff83 	bl	d66ac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d67a6:	4620      	mov	r0, r4
   d67a8:	b00b      	add	sp, #44	; 0x2c
   d67aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d67ac:	2003e710 	.word	0x2003e710
   d67b0:	000d82be 	.word	0x000d82be
   d67b4:	000d82b7 	.word	0x000d82b7

000d67b8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d67b8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d67ba:	4c09      	ldr	r4, [pc, #36]	; (d67e0 <_GLOBAL__sub_I_System+0x28>)
   d67bc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d67be:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d67c2:	6020      	str	r0, [r4, #0]
   d67c4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d67c6:	71a0      	strb	r0, [r4, #6]
   d67c8:	8120      	strh	r0, [r4, #8]
   d67ca:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d67cc:	f7fe fe30 	bl	d5430 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d67d0:	4620      	mov	r0, r4
   d67d2:	4a04      	ldr	r2, [pc, #16]	; (d67e4 <_GLOBAL__sub_I_System+0x2c>)
   d67d4:	4904      	ldr	r1, [pc, #16]	; (d67e8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d67d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d67da:	f000 b8e3 	b.w	d69a4 <__aeabi_atexit>
   d67de:	bf00      	nop
   d67e0:	2003e710 	.word	0x2003e710
   d67e4:	2003e1bc 	.word	0x2003e1bc
   d67e8:	000d40ed 	.word	0x000d40ed

000d67ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d67ec:	2200      	movs	r2, #0
   d67ee:	4611      	mov	r1, r2
   d67f0:	6840      	ldr	r0, [r0, #4]
   d67f2:	f7fe be05 	b.w	d5400 <network_listening>

000d67f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d67f6:	2200      	movs	r2, #0
   d67f8:	4611      	mov	r1, r2
   d67fa:	6840      	ldr	r0, [r0, #4]
   d67fc:	f7fe be10 	b.w	d5420 <network_get_listen_timeout>

000d6800 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6800:	2200      	movs	r2, #0
   d6802:	6840      	ldr	r0, [r0, #4]
   d6804:	f7fe be04 	b.w	d5410 <network_set_listen_timeout>

000d6808 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6808:	2200      	movs	r2, #0
   d680a:	f081 0101 	eor.w	r1, r1, #1
   d680e:	6840      	ldr	r0, [r0, #4]
   d6810:	f7fe bdee 	b.w	d53f0 <network_listen>

000d6814 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6814:	2300      	movs	r3, #0
   d6816:	461a      	mov	r2, r3
   d6818:	4619      	mov	r1, r3
   d681a:	6840      	ldr	r0, [r0, #4]
   d681c:	f7fe bde0 	b.w	d53e0 <network_off>

000d6820 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6820:	2300      	movs	r3, #0
   d6822:	461a      	mov	r2, r3
   d6824:	4619      	mov	r1, r3
   d6826:	6840      	ldr	r0, [r0, #4]
   d6828:	f7fe bdd2 	b.w	d53d0 <network_on>

000d682c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d682c:	2200      	movs	r2, #0
   d682e:	4611      	mov	r1, r2
   d6830:	6840      	ldr	r0, [r0, #4]
   d6832:	f7fe bdc5 	b.w	d53c0 <network_ready>

000d6836 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6836:	2200      	movs	r2, #0
   d6838:	4611      	mov	r1, r2
   d683a:	6840      	ldr	r0, [r0, #4]
   d683c:	f7fe bdb0 	b.w	d53a0 <network_connecting>

000d6840 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6840:	2200      	movs	r2, #0
   d6842:	2102      	movs	r1, #2
   d6844:	6840      	ldr	r0, [r0, #4]
   d6846:	f7fe bdb3 	b.w	d53b0 <network_disconnect>

000d684a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d684a:	2300      	movs	r3, #0
   d684c:	461a      	mov	r2, r3
   d684e:	6840      	ldr	r0, [r0, #4]
   d6850:	f7fe bd9e 	b.w	d5390 <network_connect>

000d6854 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6854:	4b02      	ldr	r3, [pc, #8]	; (d6860 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6856:	2203      	movs	r2, #3
   d6858:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d685a:	4a02      	ldr	r2, [pc, #8]	; (d6864 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d685c:	601a      	str	r2, [r3, #0]
   d685e:	4770      	bx	lr
   d6860:	2003e71c 	.word	0x2003e71c
   d6864:	000d82f0 	.word	0x000d82f0

000d6868 <_Z17acquireWireBufferv>:
   d6868:	b570      	push	{r4, r5, r6, lr}
   d686a:	4604      	mov	r4, r0
   d686c:	2514      	movs	r5, #20
   d686e:	462a      	mov	r2, r5
   d6870:	4e09      	ldr	r6, [pc, #36]	; (d6898 <_Z17acquireWireBufferv+0x30>)
   d6872:	2100      	movs	r1, #0
   d6874:	f001 f96d 	bl	d7b52 <memset>
   d6878:	8025      	strh	r5, [r4, #0]
   d687a:	2520      	movs	r5, #32
   d687c:	4631      	mov	r1, r6
   d687e:	60a5      	str	r5, [r4, #8]
   d6880:	6125      	str	r5, [r4, #16]
   d6882:	4628      	mov	r0, r5
   d6884:	f000 f89e 	bl	d69c4 <_ZnajRKSt9nothrow_t>
   d6888:	4631      	mov	r1, r6
   d688a:	6060      	str	r0, [r4, #4]
   d688c:	4628      	mov	r0, r5
   d688e:	f000 f899 	bl	d69c4 <_ZnajRKSt9nothrow_t>
   d6892:	60e0      	str	r0, [r4, #12]
   d6894:	4620      	mov	r0, r4
   d6896:	bd70      	pop	{r4, r5, r6, pc}
   d6898:	000d831c 	.word	0x000d831c

000d689c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d689c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d689e:	4d0e      	ldr	r5, [pc, #56]	; (d68d8 <_Z19__fetch_global_Wirev+0x3c>)
   d68a0:	6829      	ldr	r1, [r5, #0]
   d68a2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d68a6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d68a8:	d113      	bne.n	d68d2 <_Z19__fetch_global_Wirev+0x36>
   d68aa:	4628      	mov	r0, r5
   d68ac:	f7fd fbfb 	bl	d40a6 <__cxa_guard_acquire>
   d68b0:	b178      	cbz	r0, d68d2 <_Z19__fetch_global_Wirev+0x36>
   d68b2:	a801      	add	r0, sp, #4
   d68b4:	f7ff ffd8 	bl	d6868 <_Z17acquireWireBufferv>
   d68b8:	aa01      	add	r2, sp, #4
   d68ba:	4621      	mov	r1, r4
   d68bc:	4807      	ldr	r0, [pc, #28]	; (d68dc <_Z19__fetch_global_Wirev+0x40>)
   d68be:	f7fe ffdb 	bl	d5878 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d68c2:	4628      	mov	r0, r5
   d68c4:	f7fd fbf4 	bl	d40b0 <__cxa_guard_release>
   d68c8:	4a05      	ldr	r2, [pc, #20]	; (d68e0 <_Z19__fetch_global_Wirev+0x44>)
   d68ca:	4906      	ldr	r1, [pc, #24]	; (d68e4 <_Z19__fetch_global_Wirev+0x48>)
   d68cc:	4803      	ldr	r0, [pc, #12]	; (d68dc <_Z19__fetch_global_Wirev+0x40>)
   d68ce:	f000 f869 	bl	d69a4 <__aeabi_atexit>
	return wire;
}
   d68d2:	4802      	ldr	r0, [pc, #8]	; (d68dc <_Z19__fetch_global_Wirev+0x40>)
   d68d4:	b007      	add	sp, #28
   d68d6:	bd30      	pop	{r4, r5, pc}
   d68d8:	2003e724 	.word	0x2003e724
   d68dc:	2003e728 	.word	0x2003e728
   d68e0:	2003e1bc 	.word	0x2003e1bc
   d68e4:	000d581f 	.word	0x000d581f

000d68e8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d68e8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d68ea:	4e18      	ldr	r6, [pc, #96]	; (d694c <pinAvailable+0x64>)
   d68ec:	6831      	ldr	r1, [r6, #0]
   d68ee:	f011 0501 	ands.w	r5, r1, #1
   d68f2:	4604      	mov	r4, r0
   d68f4:	d10a      	bne.n	d690c <pinAvailable+0x24>
   d68f6:	4630      	mov	r0, r6
   d68f8:	f7fd fbd5 	bl	d40a6 <__cxa_guard_acquire>
   d68fc:	b130      	cbz	r0, d690c <pinAvailable+0x24>
   d68fe:	4629      	mov	r1, r5
   d6900:	4813      	ldr	r0, [pc, #76]	; (d6950 <pinAvailable+0x68>)
   d6902:	f7fe ff7f 	bl	d5804 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6906:	4630      	mov	r0, r6
   d6908:	f7fd fbd2 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d690c:	4810      	ldr	r0, [pc, #64]	; (d6950 <pinAvailable+0x68>)
   d690e:	f7fe ff83 	bl	d5818 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6912:	b128      	cbz	r0, d6920 <pinAvailable+0x38>
   d6914:	f1a4 030b 	sub.w	r3, r4, #11
   d6918:	2b02      	cmp	r3, #2
   d691a:	d801      	bhi.n	d6920 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d691c:	2000      	movs	r0, #0
   d691e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6920:	f7ff ffbc 	bl	d689c <_Z19__fetch_global_Wirev>
   d6924:	f7fe ffba 	bl	d589c <_ZN7TwoWire9isEnabledEv>
   d6928:	b108      	cbz	r0, d692e <pinAvailable+0x46>
   d692a:	2c01      	cmp	r4, #1
   d692c:	d9f6      	bls.n	d691c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d692e:	f7ff f82f 	bl	d5990 <_Z22__fetch_global_Serial1v>
   d6932:	f7ff f82a 	bl	d598a <_ZN11USARTSerial9isEnabledEv>
   d6936:	b118      	cbz	r0, d6940 <pinAvailable+0x58>
   d6938:	f1a4 0309 	sub.w	r3, r4, #9
   d693c:	2b01      	cmp	r3, #1
   d693e:	d9ed      	bls.n	d691c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6940:	2c1e      	cmp	r4, #30
   d6942:	bf8c      	ite	hi
   d6944:	2000      	movhi	r0, #0
   d6946:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6948:	bd70      	pop	{r4, r5, r6, pc}
   d694a:	bf00      	nop
   d694c:	2003e740 	.word	0x2003e740
   d6950:	2003e744 	.word	0x2003e744

000d6954 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6954:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6956:	b538      	push	{r3, r4, r5, lr}
   d6958:	4604      	mov	r4, r0
   d695a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d695c:	d80a      	bhi.n	d6974 <pinMode+0x20>
   d695e:	29ff      	cmp	r1, #255	; 0xff
   d6960:	d008      	beq.n	d6974 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6962:	f7ff ffc1 	bl	d68e8 <pinAvailable>
   d6966:	b128      	cbz	r0, d6974 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6968:	4629      	mov	r1, r5
   d696a:	4620      	mov	r0, r4
}
   d696c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6970:	f7fe bc96 	b.w	d52a0 <HAL_Pin_Mode>
   d6974:	bd38      	pop	{r3, r4, r5, pc}

000d6976 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6976:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6978:	b510      	push	{r4, lr}
   d697a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d697c:	bf9c      	itt	ls
   d697e:	340e      	addls	r4, #14
   d6980:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6982:	4620      	mov	r0, r4
   d6984:	f7ff ffb0 	bl	d68e8 <pinAvailable>
   d6988:	b150      	cbz	r0, d69a0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d698a:	2103      	movs	r1, #3
   d698c:	4620      	mov	r0, r4
   d698e:	f7fe fc7f 	bl	d5290 <HAL_Validate_Pin_Function>
   d6992:	2803      	cmp	r0, #3
   d6994:	d104      	bne.n	d69a0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6996:	4620      	mov	r0, r4
}
   d6998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d699c:	f7fe bc88 	b.w	d52b0 <HAL_ADC_Read>
}
   d69a0:	2000      	movs	r0, #0
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <__aeabi_atexit>:
   d69a4:	460b      	mov	r3, r1
   d69a6:	4601      	mov	r1, r0
   d69a8:	4618      	mov	r0, r3
   d69aa:	f001 b8b9 	b.w	d7b20 <__cxa_atexit>
	...

000d69b0 <_ZSt15get_new_handlerv>:
   d69b0:	4b02      	ldr	r3, [pc, #8]	; (d69bc <_ZSt15get_new_handlerv+0xc>)
   d69b2:	6818      	ldr	r0, [r3, #0]
   d69b4:	f3bf 8f5f 	dmb	sy
   d69b8:	4770      	bx	lr
   d69ba:	bf00      	nop
   d69bc:	2003e74c 	.word	0x2003e74c

000d69c0 <_ZdlPvj>:
   d69c0:	f7fd bb6d 	b.w	d409e <_ZdlPv>

000d69c4 <_ZnajRKSt9nothrow_t>:
   d69c4:	f000 b800 	b.w	d69c8 <_ZnwjRKSt9nothrow_t>

000d69c8 <_ZnwjRKSt9nothrow_t>:
   d69c8:	b510      	push	{r4, lr}
   d69ca:	2800      	cmp	r0, #0
   d69cc:	bf14      	ite	ne
   d69ce:	4604      	movne	r4, r0
   d69d0:	2401      	moveq	r4, #1
   d69d2:	4620      	mov	r0, r4
   d69d4:	f7fe fd6a 	bl	d54ac <malloc>
   d69d8:	b920      	cbnz	r0, d69e4 <_ZnwjRKSt9nothrow_t+0x1c>
   d69da:	f7ff ffe9 	bl	d69b0 <_ZSt15get_new_handlerv>
   d69de:	b108      	cbz	r0, d69e4 <_ZnwjRKSt9nothrow_t+0x1c>
   d69e0:	4780      	blx	r0
   d69e2:	e7f6      	b.n	d69d2 <_ZnwjRKSt9nothrow_t+0xa>
   d69e4:	bd10      	pop	{r4, pc}

000d69e6 <_ZSt25__throw_bad_function_callv>:
   d69e6:	b508      	push	{r3, lr}
   d69e8:	f7fe fd88 	bl	d54fc <abort>

000d69ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d69ec:	4b18      	ldr	r3, [pc, #96]	; (d6a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d69ee:	681a      	ldr	r2, [r3, #0]
   d69f0:	07d1      	lsls	r1, r2, #31
   d69f2:	bf5c      	itt	pl
   d69f4:	2201      	movpl	r2, #1
   d69f6:	601a      	strpl	r2, [r3, #0]
   d69f8:	4b16      	ldr	r3, [pc, #88]	; (d6a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d69fa:	681a      	ldr	r2, [r3, #0]
   d69fc:	07d2      	lsls	r2, r2, #31
   d69fe:	bf5c      	itt	pl
   d6a00:	2201      	movpl	r2, #1
   d6a02:	601a      	strpl	r2, [r3, #0]
   d6a04:	4b14      	ldr	r3, [pc, #80]	; (d6a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a06:	681a      	ldr	r2, [r3, #0]
   d6a08:	07d0      	lsls	r0, r2, #31
   d6a0a:	bf5c      	itt	pl
   d6a0c:	2201      	movpl	r2, #1
   d6a0e:	601a      	strpl	r2, [r3, #0]
   d6a10:	4b12      	ldr	r3, [pc, #72]	; (d6a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a12:	681a      	ldr	r2, [r3, #0]
   d6a14:	07d1      	lsls	r1, r2, #31
   d6a16:	bf5c      	itt	pl
   d6a18:	2201      	movpl	r2, #1
   d6a1a:	601a      	strpl	r2, [r3, #0]
   d6a1c:	4b10      	ldr	r3, [pc, #64]	; (d6a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a1e:	681a      	ldr	r2, [r3, #0]
   d6a20:	07d2      	lsls	r2, r2, #31
   d6a22:	bf5c      	itt	pl
   d6a24:	2201      	movpl	r2, #1
   d6a26:	601a      	strpl	r2, [r3, #0]
   d6a28:	4b0e      	ldr	r3, [pc, #56]	; (d6a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a2a:	681a      	ldr	r2, [r3, #0]
   d6a2c:	07d0      	lsls	r0, r2, #31
   d6a2e:	bf5c      	itt	pl
   d6a30:	2201      	movpl	r2, #1
   d6a32:	601a      	strpl	r2, [r3, #0]
   d6a34:	4b0c      	ldr	r3, [pc, #48]	; (d6a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a36:	681a      	ldr	r2, [r3, #0]
   d6a38:	07d1      	lsls	r1, r2, #31
   d6a3a:	bf5c      	itt	pl
   d6a3c:	2201      	movpl	r2, #1
   d6a3e:	601a      	strpl	r2, [r3, #0]
   d6a40:	4b0a      	ldr	r3, [pc, #40]	; (d6a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6a42:	681a      	ldr	r2, [r3, #0]
   d6a44:	07d2      	lsls	r2, r2, #31
   d6a46:	bf5c      	itt	pl
   d6a48:	2201      	movpl	r2, #1
   d6a4a:	601a      	strpl	r2, [r3, #0]
   d6a4c:	4770      	bx	lr
   d6a4e:	bf00      	nop
   d6a50:	2003e76c 	.word	0x2003e76c
   d6a54:	2003e768 	.word	0x2003e768
   d6a58:	2003e764 	.word	0x2003e764
   d6a5c:	2003e760 	.word	0x2003e760
   d6a60:	2003e75c 	.word	0x2003e75c
   d6a64:	2003e758 	.word	0x2003e758
   d6a68:	2003e754 	.word	0x2003e754
   d6a6c:	2003e750 	.word	0x2003e750

000d6a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6a70:	4b24      	ldr	r3, [pc, #144]	; (d6b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	07d0      	lsls	r0, r2, #31
   d6a76:	bf5c      	itt	pl
   d6a78:	2201      	movpl	r2, #1
   d6a7a:	601a      	strpl	r2, [r3, #0]
   d6a7c:	4b22      	ldr	r3, [pc, #136]	; (d6b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6a7e:	681a      	ldr	r2, [r3, #0]
   d6a80:	07d1      	lsls	r1, r2, #31
   d6a82:	bf5c      	itt	pl
   d6a84:	2201      	movpl	r2, #1
   d6a86:	601a      	strpl	r2, [r3, #0]
   d6a88:	4b20      	ldr	r3, [pc, #128]	; (d6b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d2      	lsls	r2, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b1e      	ldr	r3, [pc, #120]	; (d6b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d0      	lsls	r0, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b1c      	ldr	r3, [pc, #112]	; (d6b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d1      	lsls	r1, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b1a      	ldr	r3, [pc, #104]	; (d6b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d2      	lsls	r2, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4b18      	ldr	r3, [pc, #96]	; (d6b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d0      	lsls	r0, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b16      	ldr	r3, [pc, #88]	; (d6b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d1      	lsls	r1, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4b14      	ldr	r3, [pc, #80]	; (d6b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d2      	lsls	r2, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4b12      	ldr	r3, [pc, #72]	; (d6b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d0      	lsls	r0, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4b10      	ldr	r3, [pc, #64]	; (d6b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6aea:	681a      	ldr	r2, [r3, #0]
   d6aec:	07d1      	lsls	r1, r2, #31
   d6aee:	bf5c      	itt	pl
   d6af0:	2201      	movpl	r2, #1
   d6af2:	601a      	strpl	r2, [r3, #0]
   d6af4:	4b0e      	ldr	r3, [pc, #56]	; (d6b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d2      	lsls	r2, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4770      	bx	lr
   d6b02:	bf00      	nop
   d6b04:	2003e79c 	.word	0x2003e79c
   d6b08:	2003e798 	.word	0x2003e798
   d6b0c:	2003e794 	.word	0x2003e794
   d6b10:	2003e790 	.word	0x2003e790
   d6b14:	2003e78c 	.word	0x2003e78c
   d6b18:	2003e788 	.word	0x2003e788
   d6b1c:	2003e784 	.word	0x2003e784
   d6b20:	2003e780 	.word	0x2003e780
   d6b24:	2003e77c 	.word	0x2003e77c
   d6b28:	2003e778 	.word	0x2003e778
   d6b2c:	2003e774 	.word	0x2003e774
   d6b30:	2003e770 	.word	0x2003e770

000d6b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6b34:	4b24      	ldr	r3, [pc, #144]	; (d6bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6b36:	681a      	ldr	r2, [r3, #0]
   d6b38:	07d0      	lsls	r0, r2, #31
   d6b3a:	bf5c      	itt	pl
   d6b3c:	2201      	movpl	r2, #1
   d6b3e:	601a      	strpl	r2, [r3, #0]
   d6b40:	4b22      	ldr	r3, [pc, #136]	; (d6bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6b42:	681a      	ldr	r2, [r3, #0]
   d6b44:	07d1      	lsls	r1, r2, #31
   d6b46:	bf5c      	itt	pl
   d6b48:	2201      	movpl	r2, #1
   d6b4a:	601a      	strpl	r2, [r3, #0]
   d6b4c:	4b20      	ldr	r3, [pc, #128]	; (d6bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6b4e:	681a      	ldr	r2, [r3, #0]
   d6b50:	07d2      	lsls	r2, r2, #31
   d6b52:	bf5c      	itt	pl
   d6b54:	2201      	movpl	r2, #1
   d6b56:	601a      	strpl	r2, [r3, #0]
   d6b58:	4b1e      	ldr	r3, [pc, #120]	; (d6bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6b5a:	681a      	ldr	r2, [r3, #0]
   d6b5c:	07d0      	lsls	r0, r2, #31
   d6b5e:	bf5c      	itt	pl
   d6b60:	2201      	movpl	r2, #1
   d6b62:	601a      	strpl	r2, [r3, #0]
   d6b64:	4b1c      	ldr	r3, [pc, #112]	; (d6bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6b66:	681a      	ldr	r2, [r3, #0]
   d6b68:	07d1      	lsls	r1, r2, #31
   d6b6a:	bf5c      	itt	pl
   d6b6c:	2201      	movpl	r2, #1
   d6b6e:	601a      	strpl	r2, [r3, #0]
   d6b70:	4b1a      	ldr	r3, [pc, #104]	; (d6bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6b72:	681a      	ldr	r2, [r3, #0]
   d6b74:	07d2      	lsls	r2, r2, #31
   d6b76:	bf5c      	itt	pl
   d6b78:	2201      	movpl	r2, #1
   d6b7a:	601a      	strpl	r2, [r3, #0]
   d6b7c:	4b18      	ldr	r3, [pc, #96]	; (d6be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6b7e:	681a      	ldr	r2, [r3, #0]
   d6b80:	07d0      	lsls	r0, r2, #31
   d6b82:	bf5c      	itt	pl
   d6b84:	2201      	movpl	r2, #1
   d6b86:	601a      	strpl	r2, [r3, #0]
   d6b88:	4b16      	ldr	r3, [pc, #88]	; (d6be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6b8a:	681a      	ldr	r2, [r3, #0]
   d6b8c:	07d1      	lsls	r1, r2, #31
   d6b8e:	bf5c      	itt	pl
   d6b90:	2201      	movpl	r2, #1
   d6b92:	601a      	strpl	r2, [r3, #0]
   d6b94:	4b14      	ldr	r3, [pc, #80]	; (d6be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6b96:	681a      	ldr	r2, [r3, #0]
   d6b98:	07d2      	lsls	r2, r2, #31
   d6b9a:	bf5c      	itt	pl
   d6b9c:	2201      	movpl	r2, #1
   d6b9e:	601a      	strpl	r2, [r3, #0]
   d6ba0:	4b12      	ldr	r3, [pc, #72]	; (d6bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6ba2:	681a      	ldr	r2, [r3, #0]
   d6ba4:	07d0      	lsls	r0, r2, #31
   d6ba6:	bf5c      	itt	pl
   d6ba8:	2201      	movpl	r2, #1
   d6baa:	601a      	strpl	r2, [r3, #0]
   d6bac:	4b10      	ldr	r3, [pc, #64]	; (d6bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6bae:	681a      	ldr	r2, [r3, #0]
   d6bb0:	07d1      	lsls	r1, r2, #31
   d6bb2:	bf5c      	itt	pl
   d6bb4:	2201      	movpl	r2, #1
   d6bb6:	601a      	strpl	r2, [r3, #0]
   d6bb8:	4b0e      	ldr	r3, [pc, #56]	; (d6bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6bba:	681a      	ldr	r2, [r3, #0]
   d6bbc:	07d2      	lsls	r2, r2, #31
   d6bbe:	bf5c      	itt	pl
   d6bc0:	2201      	movpl	r2, #1
   d6bc2:	601a      	strpl	r2, [r3, #0]
   d6bc4:	4770      	bx	lr
   d6bc6:	bf00      	nop
   d6bc8:	2003e7cc 	.word	0x2003e7cc
   d6bcc:	2003e7c8 	.word	0x2003e7c8
   d6bd0:	2003e7c4 	.word	0x2003e7c4
   d6bd4:	2003e7c0 	.word	0x2003e7c0
   d6bd8:	2003e7bc 	.word	0x2003e7bc
   d6bdc:	2003e7b8 	.word	0x2003e7b8
   d6be0:	2003e7b4 	.word	0x2003e7b4
   d6be4:	2003e7b0 	.word	0x2003e7b0
   d6be8:	2003e7ac 	.word	0x2003e7ac
   d6bec:	2003e7a8 	.word	0x2003e7a8
   d6bf0:	2003e7a4 	.word	0x2003e7a4
   d6bf4:	2003e7a0 	.word	0x2003e7a0

000d6bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6bf8:	4b18      	ldr	r3, [pc, #96]	; (d6c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6bfa:	681a      	ldr	r2, [r3, #0]
   d6bfc:	07d1      	lsls	r1, r2, #31
   d6bfe:	bf5c      	itt	pl
   d6c00:	2201      	movpl	r2, #1
   d6c02:	601a      	strpl	r2, [r3, #0]
   d6c04:	4b16      	ldr	r3, [pc, #88]	; (d6c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6c06:	681a      	ldr	r2, [r3, #0]
   d6c08:	07d2      	lsls	r2, r2, #31
   d6c0a:	bf5c      	itt	pl
   d6c0c:	2201      	movpl	r2, #1
   d6c0e:	601a      	strpl	r2, [r3, #0]
   d6c10:	4b14      	ldr	r3, [pc, #80]	; (d6c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6c12:	681a      	ldr	r2, [r3, #0]
   d6c14:	07d0      	lsls	r0, r2, #31
   d6c16:	bf5c      	itt	pl
   d6c18:	2201      	movpl	r2, #1
   d6c1a:	601a      	strpl	r2, [r3, #0]
   d6c1c:	4b12      	ldr	r3, [pc, #72]	; (d6c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6c1e:	681a      	ldr	r2, [r3, #0]
   d6c20:	07d1      	lsls	r1, r2, #31
   d6c22:	bf5c      	itt	pl
   d6c24:	2201      	movpl	r2, #1
   d6c26:	601a      	strpl	r2, [r3, #0]
   d6c28:	4b10      	ldr	r3, [pc, #64]	; (d6c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6c2a:	681a      	ldr	r2, [r3, #0]
   d6c2c:	07d2      	lsls	r2, r2, #31
   d6c2e:	bf5c      	itt	pl
   d6c30:	2201      	movpl	r2, #1
   d6c32:	601a      	strpl	r2, [r3, #0]
   d6c34:	4b0e      	ldr	r3, [pc, #56]	; (d6c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6c36:	681a      	ldr	r2, [r3, #0]
   d6c38:	07d0      	lsls	r0, r2, #31
   d6c3a:	bf5c      	itt	pl
   d6c3c:	2201      	movpl	r2, #1
   d6c3e:	601a      	strpl	r2, [r3, #0]
   d6c40:	4b0c      	ldr	r3, [pc, #48]	; (d6c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6c42:	681a      	ldr	r2, [r3, #0]
   d6c44:	07d1      	lsls	r1, r2, #31
   d6c46:	bf5c      	itt	pl
   d6c48:	2201      	movpl	r2, #1
   d6c4a:	601a      	strpl	r2, [r3, #0]
   d6c4c:	4b0a      	ldr	r3, [pc, #40]	; (d6c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6c4e:	681a      	ldr	r2, [r3, #0]
   d6c50:	07d2      	lsls	r2, r2, #31
   d6c52:	bf5c      	itt	pl
   d6c54:	2201      	movpl	r2, #1
   d6c56:	601a      	strpl	r2, [r3, #0]
   d6c58:	4770      	bx	lr
   d6c5a:	bf00      	nop
   d6c5c:	2003e7ec 	.word	0x2003e7ec
   d6c60:	2003e7e8 	.word	0x2003e7e8
   d6c64:	2003e7e4 	.word	0x2003e7e4
   d6c68:	2003e7e0 	.word	0x2003e7e0
   d6c6c:	2003e7dc 	.word	0x2003e7dc
   d6c70:	2003e7d8 	.word	0x2003e7d8
   d6c74:	2003e7d4 	.word	0x2003e7d4
   d6c78:	2003e7d0 	.word	0x2003e7d0

000d6c7c <log>:
   d6c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c80:	ed2d 8b02 	vpush	{d8}
   d6c84:	b08b      	sub	sp, #44	; 0x2c
   d6c86:	ec55 4b10 	vmov	r4, r5, d0
   d6c8a:	f000 f881 	bl	d6d90 <__ieee754_log>
   d6c8e:	4b3a      	ldr	r3, [pc, #232]	; (d6d78 <log+0xfc>)
   d6c90:	eeb0 8a40 	vmov.f32	s16, s0
   d6c94:	eef0 8a60 	vmov.f32	s17, s1
   d6c98:	f993 6000 	ldrsb.w	r6, [r3]
   d6c9c:	1c73      	adds	r3, r6, #1
   d6c9e:	d00d      	beq.n	d6cbc <log+0x40>
   d6ca0:	4622      	mov	r2, r4
   d6ca2:	462b      	mov	r3, r5
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	4629      	mov	r1, r5
   d6ca8:	f000 fed4 	bl	d7a54 <__aeabi_dcmpun>
   d6cac:	b930      	cbnz	r0, d6cbc <log+0x40>
   d6cae:	2200      	movs	r2, #0
   d6cb0:	2300      	movs	r3, #0
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	4629      	mov	r1, r5
   d6cb6:	f000 fec3 	bl	d7a40 <__aeabi_dcmpgt>
   d6cba:	b140      	cbz	r0, d6cce <log+0x52>
   d6cbc:	eeb0 0a48 	vmov.f32	s0, s16
   d6cc0:	eef0 0a68 	vmov.f32	s1, s17
   d6cc4:	b00b      	add	sp, #44	; 0x2c
   d6cc6:	ecbd 8b02 	vpop	{d8}
   d6cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6cce:	4b2b      	ldr	r3, [pc, #172]	; (d6d7c <log+0x100>)
   d6cd0:	9008      	str	r0, [sp, #32]
   d6cd2:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d6cd6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6cda:	9301      	str	r3, [sp, #4]
   d6cdc:	b9de      	cbnz	r6, d6d16 <log+0x9a>
   d6cde:	4f28      	ldr	r7, [pc, #160]	; (d6d80 <log+0x104>)
   d6ce0:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	4629      	mov	r1, r5
   d6ce8:	2200      	movs	r2, #0
   d6cea:	2300      	movs	r3, #0
   d6cec:	e9cd 6706 	strd	r6, r7, [sp, #24]
   d6cf0:	f000 fe7e 	bl	d79f0 <__aeabi_dcmpeq>
   d6cf4:	2800      	cmp	r0, #0
   d6cf6:	d037      	beq.n	d6d68 <log+0xec>
   d6cf8:	2302      	movs	r3, #2
   d6cfa:	9300      	str	r3, [sp, #0]
   d6cfc:	4668      	mov	r0, sp
   d6cfe:	f000 fa4b 	bl	d7198 <matherr>
   d6d02:	b1c8      	cbz	r0, d6d38 <log+0xbc>
   d6d04:	9b08      	ldr	r3, [sp, #32]
   d6d06:	b9e3      	cbnz	r3, d6d42 <log+0xc6>
   d6d08:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6d0c:	b00b      	add	sp, #44	; 0x2c
   d6d0e:	ecbd 8b02 	vpop	{d8}
   d6d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6d16:	f8df 9070 	ldr.w	r9, [pc, #112]	; d6d88 <log+0x10c>
   d6d1a:	f04f 0800 	mov.w	r8, #0
   d6d1e:	4620      	mov	r0, r4
   d6d20:	4629      	mov	r1, r5
   d6d22:	2200      	movs	r2, #0
   d6d24:	2300      	movs	r3, #0
   d6d26:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d6d2a:	f000 fe61 	bl	d79f0 <__aeabi_dcmpeq>
   d6d2e:	b168      	cbz	r0, d6d4c <log+0xd0>
   d6d30:	2302      	movs	r3, #2
   d6d32:	429e      	cmp	r6, r3
   d6d34:	9300      	str	r3, [sp, #0]
   d6d36:	d1e1      	bne.n	d6cfc <log+0x80>
   d6d38:	f7fe fbf0 	bl	d551c <__errno>
   d6d3c:	2322      	movs	r3, #34	; 0x22
   d6d3e:	6003      	str	r3, [r0, #0]
   d6d40:	e7e0      	b.n	d6d04 <log+0x88>
   d6d42:	f7fe fbeb 	bl	d551c <__errno>
   d6d46:	9b08      	ldr	r3, [sp, #32]
   d6d48:	6003      	str	r3, [r0, #0]
   d6d4a:	e7dd      	b.n	d6d08 <log+0x8c>
   d6d4c:	2301      	movs	r3, #1
   d6d4e:	2e02      	cmp	r6, #2
   d6d50:	9300      	str	r3, [sp, #0]
   d6d52:	d10b      	bne.n	d6d6c <log+0xf0>
   d6d54:	f7fe fbe2 	bl	d551c <__errno>
   d6d58:	2321      	movs	r3, #33	; 0x21
   d6d5a:	6003      	str	r3, [r0, #0]
   d6d5c:	4809      	ldr	r0, [pc, #36]	; (d6d84 <log+0x108>)
   d6d5e:	f000 fa1f 	bl	d71a0 <nan>
   d6d62:	ed8d 0b06 	vstr	d0, [sp, #24]
   d6d66:	e7cd      	b.n	d6d04 <log+0x88>
   d6d68:	2301      	movs	r3, #1
   d6d6a:	9300      	str	r3, [sp, #0]
   d6d6c:	4668      	mov	r0, sp
   d6d6e:	f000 fa13 	bl	d7198 <matherr>
   d6d72:	2800      	cmp	r0, #0
   d6d74:	d1f2      	bne.n	d6d5c <log+0xe0>
   d6d76:	e7ed      	b.n	d6d54 <log+0xd8>
   d6d78:	2003e154 	.word	0x2003e154
   d6d7c:	000d8320 	.word	0x000d8320
   d6d80:	c7efffff 	.word	0xc7efffff
   d6d84:	000d8324 	.word	0x000d8324
   d6d88:	fff00000 	.word	0xfff00000
   d6d8c:	00000000 	.word	0x00000000

000d6d90 <__ieee754_log>:
   d6d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d94:	ec51 0b10 	vmov	r0, r1, d0
   d6d98:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6d9c:	b085      	sub	sp, #20
   d6d9e:	460b      	mov	r3, r1
   d6da0:	da59      	bge.n	d6e56 <__ieee754_log+0xc6>
   d6da2:	ee10 2a10 	vmov	r2, s0
   d6da6:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   d6daa:	4322      	orrs	r2, r4
   d6dac:	f000 80f8 	beq.w	d6fa0 <__ieee754_log+0x210>
   d6db0:	2900      	cmp	r1, #0
   d6db2:	f2c0 8180 	blt.w	d70b6 <__ieee754_log+0x326>
   d6db6:	2200      	movs	r2, #0
   d6db8:	4bdd      	ldr	r3, [pc, #884]	; (d7130 <__ieee754_log+0x3a0>)
   d6dba:	4cde      	ldr	r4, [pc, #888]	; (d7134 <__ieee754_log+0x3a4>)
   d6dbc:	f000 fbb0 	bl	d7520 <__aeabi_dmul>
   d6dc0:	460b      	mov	r3, r1
   d6dc2:	42a3      	cmp	r3, r4
   d6dc4:	f06f 0235 	mvn.w	r2, #53	; 0x35
   d6dc8:	dc4a      	bgt.n	d6e60 <__ieee754_log+0xd0>
   d6dca:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d6dce:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   d6dd2:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   d6dd6:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   d6dda:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   d6dde:	151b      	asrs	r3, r3, #20
   d6de0:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   d6de4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d6de8:	ea44 0105 	orr.w	r1, r4, r5
   d6dec:	189c      	adds	r4, r3, r2
   d6dee:	2200      	movs	r2, #0
   d6df0:	4bd1      	ldr	r3, [pc, #836]	; (d7138 <__ieee754_log+0x3a8>)
   d6df2:	f000 f9e1 	bl	d71b8 <__aeabi_dsub>
   d6df6:	1cab      	adds	r3, r5, #2
   d6df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d6dfc:	2b02      	cmp	r3, #2
   d6dfe:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   d6e02:	4682      	mov	sl, r0
   d6e04:	468b      	mov	fp, r1
   d6e06:	f04f 0200 	mov.w	r2, #0
   d6e0a:	dc32      	bgt.n	d6e72 <__ieee754_log+0xe2>
   d6e0c:	2300      	movs	r3, #0
   d6e0e:	f000 fdef 	bl	d79f0 <__aeabi_dcmpeq>
   d6e12:	2800      	cmp	r0, #0
   d6e14:	f000 80cf 	beq.w	d6fb6 <__ieee754_log+0x226>
   d6e18:	2c00      	cmp	r4, #0
   d6e1a:	f000 8158 	beq.w	d70ce <__ieee754_log+0x33e>
   d6e1e:	4620      	mov	r0, r4
   d6e20:	f000 fb18 	bl	d7454 <__aeabi_i2d>
   d6e24:	a3ac      	add	r3, pc, #688	; (adr r3, d70d8 <__ieee754_log+0x348>)
   d6e26:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e2a:	4606      	mov	r6, r0
   d6e2c:	460f      	mov	r7, r1
   d6e2e:	f000 fb77 	bl	d7520 <__aeabi_dmul>
   d6e32:	a3ab      	add	r3, pc, #684	; (adr r3, d70e0 <__ieee754_log+0x350>)
   d6e34:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e38:	4604      	mov	r4, r0
   d6e3a:	460d      	mov	r5, r1
   d6e3c:	4630      	mov	r0, r6
   d6e3e:	4639      	mov	r1, r7
   d6e40:	f000 fb6e 	bl	d7520 <__aeabi_dmul>
   d6e44:	4602      	mov	r2, r0
   d6e46:	460b      	mov	r3, r1
   d6e48:	4620      	mov	r0, r4
   d6e4a:	4629      	mov	r1, r5
   d6e4c:	f000 f9b6 	bl	d71bc <__adddf3>
   d6e50:	ec41 0b10 	vmov	d0, r0, r1
   d6e54:	e00a      	b.n	d6e6c <__ieee754_log+0xdc>
   d6e56:	4cb7      	ldr	r4, [pc, #732]	; (d7134 <__ieee754_log+0x3a4>)
   d6e58:	42a3      	cmp	r3, r4
   d6e5a:	f04f 0200 	mov.w	r2, #0
   d6e5e:	ddb4      	ble.n	d6dca <__ieee754_log+0x3a>
   d6e60:	4602      	mov	r2, r0
   d6e62:	460b      	mov	r3, r1
   d6e64:	f000 f9aa 	bl	d71bc <__adddf3>
   d6e68:	ec41 0b10 	vmov	d0, r0, r1
   d6e6c:	b005      	add	sp, #20
   d6e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6e76:	f000 f9a1 	bl	d71bc <__adddf3>
   d6e7a:	4602      	mov	r2, r0
   d6e7c:	460b      	mov	r3, r1
   d6e7e:	4650      	mov	r0, sl
   d6e80:	4659      	mov	r1, fp
   d6e82:	f000 fc77 	bl	d7774 <__aeabi_ddiv>
   d6e86:	4606      	mov	r6, r0
   d6e88:	4620      	mov	r0, r4
   d6e8a:	460f      	mov	r7, r1
   d6e8c:	f000 fae2 	bl	d7454 <__aeabi_i2d>
   d6e90:	4632      	mov	r2, r6
   d6e92:	e9cd 0100 	strd	r0, r1, [sp]
   d6e96:	463b      	mov	r3, r7
   d6e98:	4630      	mov	r0, r6
   d6e9a:	4639      	mov	r1, r7
   d6e9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6ea0:	f000 fb3e 	bl	d7520 <__aeabi_dmul>
   d6ea4:	4602      	mov	r2, r0
   d6ea6:	460b      	mov	r3, r1
   d6ea8:	4680      	mov	r8, r0
   d6eaa:	4689      	mov	r9, r1
   d6eac:	f000 fb38 	bl	d7520 <__aeabi_dmul>
   d6eb0:	a38d      	add	r3, pc, #564	; (adr r3, d70e8 <__ieee754_log+0x358>)
   d6eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6eb6:	4606      	mov	r6, r0
   d6eb8:	460f      	mov	r7, r1
   d6eba:	f000 fb31 	bl	d7520 <__aeabi_dmul>
   d6ebe:	a38c      	add	r3, pc, #560	; (adr r3, d70f0 <__ieee754_log+0x360>)
   d6ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ec4:	f000 f97a 	bl	d71bc <__adddf3>
   d6ec8:	4632      	mov	r2, r6
   d6eca:	463b      	mov	r3, r7
   d6ecc:	f000 fb28 	bl	d7520 <__aeabi_dmul>
   d6ed0:	a389      	add	r3, pc, #548	; (adr r3, d70f8 <__ieee754_log+0x368>)
   d6ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ed6:	f000 f971 	bl	d71bc <__adddf3>
   d6eda:	4632      	mov	r2, r6
   d6edc:	463b      	mov	r3, r7
   d6ede:	f000 fb1f 	bl	d7520 <__aeabi_dmul>
   d6ee2:	a387      	add	r3, pc, #540	; (adr r3, d7100 <__ieee754_log+0x370>)
   d6ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ee8:	f000 f968 	bl	d71bc <__adddf3>
   d6eec:	4642      	mov	r2, r8
   d6eee:	464b      	mov	r3, r9
   d6ef0:	f000 fb16 	bl	d7520 <__aeabi_dmul>
   d6ef4:	a384      	add	r3, pc, #528	; (adr r3, d7108 <__ieee754_log+0x378>)
   d6ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6efa:	4680      	mov	r8, r0
   d6efc:	4689      	mov	r9, r1
   d6efe:	4630      	mov	r0, r6
   d6f00:	4639      	mov	r1, r7
   d6f02:	f000 fb0d 	bl	d7520 <__aeabi_dmul>
   d6f06:	a382      	add	r3, pc, #520	; (adr r3, d7110 <__ieee754_log+0x380>)
   d6f08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f0c:	f000 f956 	bl	d71bc <__adddf3>
   d6f10:	4632      	mov	r2, r6
   d6f12:	463b      	mov	r3, r7
   d6f14:	f000 fb04 	bl	d7520 <__aeabi_dmul>
   d6f18:	a37f      	add	r3, pc, #508	; (adr r3, d7118 <__ieee754_log+0x388>)
   d6f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f1e:	f000 f94d 	bl	d71bc <__adddf3>
   d6f22:	4632      	mov	r2, r6
   d6f24:	463b      	mov	r3, r7
   d6f26:	f000 fafb 	bl	d7520 <__aeabi_dmul>
   d6f2a:	460b      	mov	r3, r1
   d6f2c:	4602      	mov	r2, r0
   d6f2e:	4649      	mov	r1, r9
   d6f30:	4640      	mov	r0, r8
   d6f32:	f000 f943 	bl	d71bc <__adddf3>
   d6f36:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   d6f3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   d6f3e:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   d6f42:	3551      	adds	r5, #81	; 0x51
   d6f44:	431d      	orrs	r5, r3
   d6f46:	2d00      	cmp	r5, #0
   d6f48:	4680      	mov	r8, r0
   d6f4a:	4689      	mov	r9, r1
   d6f4c:	dd5c      	ble.n	d7008 <__ieee754_log+0x278>
   d6f4e:	2200      	movs	r2, #0
   d6f50:	4b7a      	ldr	r3, [pc, #488]	; (d713c <__ieee754_log+0x3ac>)
   d6f52:	4650      	mov	r0, sl
   d6f54:	4659      	mov	r1, fp
   d6f56:	f000 fae3 	bl	d7520 <__aeabi_dmul>
   d6f5a:	4652      	mov	r2, sl
   d6f5c:	465b      	mov	r3, fp
   d6f5e:	f000 fadf 	bl	d7520 <__aeabi_dmul>
   d6f62:	4606      	mov	r6, r0
   d6f64:	460f      	mov	r7, r1
   d6f66:	2c00      	cmp	r4, #0
   d6f68:	d16e      	bne.n	d7048 <__ieee754_log+0x2b8>
   d6f6a:	4632      	mov	r2, r6
   d6f6c:	463b      	mov	r3, r7
   d6f6e:	4640      	mov	r0, r8
   d6f70:	4649      	mov	r1, r9
   d6f72:	f000 f923 	bl	d71bc <__adddf3>
   d6f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6f7a:	f000 fad1 	bl	d7520 <__aeabi_dmul>
   d6f7e:	4602      	mov	r2, r0
   d6f80:	460b      	mov	r3, r1
   d6f82:	4630      	mov	r0, r6
   d6f84:	4639      	mov	r1, r7
   d6f86:	f000 f917 	bl	d71b8 <__aeabi_dsub>
   d6f8a:	4602      	mov	r2, r0
   d6f8c:	460b      	mov	r3, r1
   d6f8e:	4650      	mov	r0, sl
   d6f90:	4659      	mov	r1, fp
   d6f92:	f000 f911 	bl	d71b8 <__aeabi_dsub>
   d6f96:	ec41 0b10 	vmov	d0, r0, r1
   d6f9a:	b005      	add	sp, #20
   d6f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fa0:	2200      	movs	r2, #0
   d6fa2:	2300      	movs	r3, #0
   d6fa4:	2000      	movs	r0, #0
   d6fa6:	4966      	ldr	r1, [pc, #408]	; (d7140 <__ieee754_log+0x3b0>)
   d6fa8:	f000 fbe4 	bl	d7774 <__aeabi_ddiv>
   d6fac:	ec41 0b10 	vmov	d0, r0, r1
   d6fb0:	b005      	add	sp, #20
   d6fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fb6:	a35a      	add	r3, pc, #360	; (adr r3, d7120 <__ieee754_log+0x390>)
   d6fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6fbc:	4650      	mov	r0, sl
   d6fbe:	4659      	mov	r1, fp
   d6fc0:	f000 faae 	bl	d7520 <__aeabi_dmul>
   d6fc4:	4602      	mov	r2, r0
   d6fc6:	460b      	mov	r3, r1
   d6fc8:	2000      	movs	r0, #0
   d6fca:	495c      	ldr	r1, [pc, #368]	; (d713c <__ieee754_log+0x3ac>)
   d6fcc:	f000 f8f4 	bl	d71b8 <__aeabi_dsub>
   d6fd0:	4652      	mov	r2, sl
   d6fd2:	4606      	mov	r6, r0
   d6fd4:	460f      	mov	r7, r1
   d6fd6:	465b      	mov	r3, fp
   d6fd8:	4650      	mov	r0, sl
   d6fda:	4659      	mov	r1, fp
   d6fdc:	f000 faa0 	bl	d7520 <__aeabi_dmul>
   d6fe0:	4602      	mov	r2, r0
   d6fe2:	460b      	mov	r3, r1
   d6fe4:	4630      	mov	r0, r6
   d6fe6:	4639      	mov	r1, r7
   d6fe8:	f000 fa9a 	bl	d7520 <__aeabi_dmul>
   d6fec:	4606      	mov	r6, r0
   d6fee:	460f      	mov	r7, r1
   d6ff0:	2c00      	cmp	r4, #0
   d6ff2:	f040 80a7 	bne.w	d7144 <__ieee754_log+0x3b4>
   d6ff6:	4602      	mov	r2, r0
   d6ff8:	460b      	mov	r3, r1
   d6ffa:	4650      	mov	r0, sl
   d6ffc:	4659      	mov	r1, fp
   d6ffe:	f000 f8db 	bl	d71b8 <__aeabi_dsub>
   d7002:	ec41 0b10 	vmov	d0, r0, r1
   d7006:	e731      	b.n	d6e6c <__ieee754_log+0xdc>
   d7008:	2c00      	cmp	r4, #0
   d700a:	f000 80af 	beq.w	d716c <__ieee754_log+0x3dc>
   d700e:	a332      	add	r3, pc, #200	; (adr r3, d70d8 <__ieee754_log+0x348>)
   d7010:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7014:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7018:	f000 fa82 	bl	d7520 <__aeabi_dmul>
   d701c:	4642      	mov	r2, r8
   d701e:	464b      	mov	r3, r9
   d7020:	4604      	mov	r4, r0
   d7022:	460d      	mov	r5, r1
   d7024:	4650      	mov	r0, sl
   d7026:	4659      	mov	r1, fp
   d7028:	f000 f8c6 	bl	d71b8 <__aeabi_dsub>
   d702c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7030:	f000 fa76 	bl	d7520 <__aeabi_dmul>
   d7034:	a32a      	add	r3, pc, #168	; (adr r3, d70e0 <__ieee754_log+0x350>)
   d7036:	e9d3 2300 	ldrd	r2, r3, [r3]
   d703a:	4606      	mov	r6, r0
   d703c:	460f      	mov	r7, r1
   d703e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7042:	f000 fa6d 	bl	d7520 <__aeabi_dmul>
   d7046:	e021      	b.n	d708c <__ieee754_log+0x2fc>
   d7048:	a323      	add	r3, pc, #140	; (adr r3, d70d8 <__ieee754_log+0x348>)
   d704a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d704e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7052:	f000 fa65 	bl	d7520 <__aeabi_dmul>
   d7056:	4632      	mov	r2, r6
   d7058:	463b      	mov	r3, r7
   d705a:	4604      	mov	r4, r0
   d705c:	460d      	mov	r5, r1
   d705e:	4640      	mov	r0, r8
   d7060:	4649      	mov	r1, r9
   d7062:	f000 f8ab 	bl	d71bc <__adddf3>
   d7066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d706a:	f000 fa59 	bl	d7520 <__aeabi_dmul>
   d706e:	a31c      	add	r3, pc, #112	; (adr r3, d70e0 <__ieee754_log+0x350>)
   d7070:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7074:	4680      	mov	r8, r0
   d7076:	4689      	mov	r9, r1
   d7078:	e9dd 0100 	ldrd	r0, r1, [sp]
   d707c:	f000 fa50 	bl	d7520 <__aeabi_dmul>
   d7080:	4602      	mov	r2, r0
   d7082:	460b      	mov	r3, r1
   d7084:	4640      	mov	r0, r8
   d7086:	4649      	mov	r1, r9
   d7088:	f000 f898 	bl	d71bc <__adddf3>
   d708c:	4602      	mov	r2, r0
   d708e:	460b      	mov	r3, r1
   d7090:	4630      	mov	r0, r6
   d7092:	4639      	mov	r1, r7
   d7094:	f000 f890 	bl	d71b8 <__aeabi_dsub>
   d7098:	4652      	mov	r2, sl
   d709a:	465b      	mov	r3, fp
   d709c:	f000 f88c 	bl	d71b8 <__aeabi_dsub>
   d70a0:	4602      	mov	r2, r0
   d70a2:	460b      	mov	r3, r1
   d70a4:	4620      	mov	r0, r4
   d70a6:	4629      	mov	r1, r5
   d70a8:	f000 f886 	bl	d71b8 <__aeabi_dsub>
   d70ac:	ec41 0b10 	vmov	d0, r0, r1
   d70b0:	b005      	add	sp, #20
   d70b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d70b6:	ee10 2a10 	vmov	r2, s0
   d70ba:	460b      	mov	r3, r1
   d70bc:	f000 f87c 	bl	d71b8 <__aeabi_dsub>
   d70c0:	2200      	movs	r2, #0
   d70c2:	2300      	movs	r3, #0
   d70c4:	f000 fb56 	bl	d7774 <__aeabi_ddiv>
   d70c8:	ec41 0b10 	vmov	d0, r0, r1
   d70cc:	e6ce      	b.n	d6e6c <__ieee754_log+0xdc>
   d70ce:	ed9f 0b16 	vldr	d0, [pc, #88]	; d7128 <__ieee754_log+0x398>
   d70d2:	e6cb      	b.n	d6e6c <__ieee754_log+0xdc>
   d70d4:	f3af 8000 	nop.w
   d70d8:	fee00000 	.word	0xfee00000
   d70dc:	3fe62e42 	.word	0x3fe62e42
   d70e0:	35793c76 	.word	0x35793c76
   d70e4:	3dea39ef 	.word	0x3dea39ef
   d70e8:	df3e5244 	.word	0xdf3e5244
   d70ec:	3fc2f112 	.word	0x3fc2f112
   d70f0:	96cb03de 	.word	0x96cb03de
   d70f4:	3fc74664 	.word	0x3fc74664
   d70f8:	94229359 	.word	0x94229359
   d70fc:	3fd24924 	.word	0x3fd24924
   d7100:	55555593 	.word	0x55555593
   d7104:	3fe55555 	.word	0x3fe55555
   d7108:	d078c69f 	.word	0xd078c69f
   d710c:	3fc39a09 	.word	0x3fc39a09
   d7110:	1d8e78af 	.word	0x1d8e78af
   d7114:	3fcc71c5 	.word	0x3fcc71c5
   d7118:	9997fa04 	.word	0x9997fa04
   d711c:	3fd99999 	.word	0x3fd99999
   d7120:	55555555 	.word	0x55555555
   d7124:	3fd55555 	.word	0x3fd55555
	...
   d7130:	43500000 	.word	0x43500000
   d7134:	7fefffff 	.word	0x7fefffff
   d7138:	3ff00000 	.word	0x3ff00000
   d713c:	3fe00000 	.word	0x3fe00000
   d7140:	c3500000 	.word	0xc3500000
   d7144:	4620      	mov	r0, r4
   d7146:	f000 f985 	bl	d7454 <__aeabi_i2d>
   d714a:	a30f      	add	r3, pc, #60	; (adr r3, d7188 <__ieee754_log+0x3f8>)
   d714c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7150:	4680      	mov	r8, r0
   d7152:	4689      	mov	r9, r1
   d7154:	f000 f9e4 	bl	d7520 <__aeabi_dmul>
   d7158:	a30d      	add	r3, pc, #52	; (adr r3, d7190 <__ieee754_log+0x400>)
   d715a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d715e:	4604      	mov	r4, r0
   d7160:	460d      	mov	r5, r1
   d7162:	4640      	mov	r0, r8
   d7164:	4649      	mov	r1, r9
   d7166:	f000 f9db 	bl	d7520 <__aeabi_dmul>
   d716a:	e78f      	b.n	d708c <__ieee754_log+0x2fc>
   d716c:	4602      	mov	r2, r0
   d716e:	460b      	mov	r3, r1
   d7170:	4650      	mov	r0, sl
   d7172:	4659      	mov	r1, fp
   d7174:	f000 f820 	bl	d71b8 <__aeabi_dsub>
   d7178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d717c:	f000 f9d0 	bl	d7520 <__aeabi_dmul>
   d7180:	e703      	b.n	d6f8a <__ieee754_log+0x1fa>
   d7182:	bf00      	nop
   d7184:	f3af 8000 	nop.w
   d7188:	fee00000 	.word	0xfee00000
   d718c:	3fe62e42 	.word	0x3fe62e42
   d7190:	35793c76 	.word	0x35793c76
   d7194:	3dea39ef 	.word	0x3dea39ef

000d7198 <matherr>:
   d7198:	2000      	movs	r0, #0
   d719a:	4770      	bx	lr
   d719c:	0000      	movs	r0, r0
	...

000d71a0 <nan>:
   d71a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d71a8 <nan+0x8>
   d71a4:	4770      	bx	lr
   d71a6:	bf00      	nop
   d71a8:	00000000 	.word	0x00000000
   d71ac:	7ff80000 	.word	0x7ff80000

000d71b0 <__aeabi_drsub>:
   d71b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d71b4:	e002      	b.n	d71bc <__adddf3>
   d71b6:	bf00      	nop

000d71b8 <__aeabi_dsub>:
   d71b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d71bc <__adddf3>:
   d71bc:	b530      	push	{r4, r5, lr}
   d71be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d71c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d71c6:	ea94 0f05 	teq	r4, r5
   d71ca:	bf08      	it	eq
   d71cc:	ea90 0f02 	teqeq	r0, r2
   d71d0:	bf1f      	itttt	ne
   d71d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d71d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d71da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d71de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d71e2:	f000 80e2 	beq.w	d73aa <__adddf3+0x1ee>
   d71e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d71ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d71ee:	bfb8      	it	lt
   d71f0:	426d      	neglt	r5, r5
   d71f2:	dd0c      	ble.n	d720e <__adddf3+0x52>
   d71f4:	442c      	add	r4, r5
   d71f6:	ea80 0202 	eor.w	r2, r0, r2
   d71fa:	ea81 0303 	eor.w	r3, r1, r3
   d71fe:	ea82 0000 	eor.w	r0, r2, r0
   d7202:	ea83 0101 	eor.w	r1, r3, r1
   d7206:	ea80 0202 	eor.w	r2, r0, r2
   d720a:	ea81 0303 	eor.w	r3, r1, r3
   d720e:	2d36      	cmp	r5, #54	; 0x36
   d7210:	bf88      	it	hi
   d7212:	bd30      	pophi	{r4, r5, pc}
   d7214:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7218:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d721c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7220:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7224:	d002      	beq.n	d722c <__adddf3+0x70>
   d7226:	4240      	negs	r0, r0
   d7228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d722c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7230:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7234:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7238:	d002      	beq.n	d7240 <__adddf3+0x84>
   d723a:	4252      	negs	r2, r2
   d723c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7240:	ea94 0f05 	teq	r4, r5
   d7244:	f000 80a7 	beq.w	d7396 <__adddf3+0x1da>
   d7248:	f1a4 0401 	sub.w	r4, r4, #1
   d724c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7250:	db0d      	blt.n	d726e <__adddf3+0xb2>
   d7252:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7256:	fa22 f205 	lsr.w	r2, r2, r5
   d725a:	1880      	adds	r0, r0, r2
   d725c:	f141 0100 	adc.w	r1, r1, #0
   d7260:	fa03 f20e 	lsl.w	r2, r3, lr
   d7264:	1880      	adds	r0, r0, r2
   d7266:	fa43 f305 	asr.w	r3, r3, r5
   d726a:	4159      	adcs	r1, r3
   d726c:	e00e      	b.n	d728c <__adddf3+0xd0>
   d726e:	f1a5 0520 	sub.w	r5, r5, #32
   d7272:	f10e 0e20 	add.w	lr, lr, #32
   d7276:	2a01      	cmp	r2, #1
   d7278:	fa03 fc0e 	lsl.w	ip, r3, lr
   d727c:	bf28      	it	cs
   d727e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7282:	fa43 f305 	asr.w	r3, r3, r5
   d7286:	18c0      	adds	r0, r0, r3
   d7288:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d728c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7290:	d507      	bpl.n	d72a2 <__adddf3+0xe6>
   d7292:	f04f 0e00 	mov.w	lr, #0
   d7296:	f1dc 0c00 	rsbs	ip, ip, #0
   d729a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d729e:	eb6e 0101 	sbc.w	r1, lr, r1
   d72a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d72a6:	d31b      	bcc.n	d72e0 <__adddf3+0x124>
   d72a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d72ac:	d30c      	bcc.n	d72c8 <__adddf3+0x10c>
   d72ae:	0849      	lsrs	r1, r1, #1
   d72b0:	ea5f 0030 	movs.w	r0, r0, rrx
   d72b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d72b8:	f104 0401 	add.w	r4, r4, #1
   d72bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d72c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d72c4:	f080 809a 	bcs.w	d73fc <__adddf3+0x240>
   d72c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d72cc:	bf08      	it	eq
   d72ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d72d2:	f150 0000 	adcs.w	r0, r0, #0
   d72d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d72da:	ea41 0105 	orr.w	r1, r1, r5
   d72de:	bd30      	pop	{r4, r5, pc}
   d72e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d72e4:	4140      	adcs	r0, r0
   d72e6:	eb41 0101 	adc.w	r1, r1, r1
   d72ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72ee:	f1a4 0401 	sub.w	r4, r4, #1
   d72f2:	d1e9      	bne.n	d72c8 <__adddf3+0x10c>
   d72f4:	f091 0f00 	teq	r1, #0
   d72f8:	bf04      	itt	eq
   d72fa:	4601      	moveq	r1, r0
   d72fc:	2000      	moveq	r0, #0
   d72fe:	fab1 f381 	clz	r3, r1
   d7302:	bf08      	it	eq
   d7304:	3320      	addeq	r3, #32
   d7306:	f1a3 030b 	sub.w	r3, r3, #11
   d730a:	f1b3 0220 	subs.w	r2, r3, #32
   d730e:	da0c      	bge.n	d732a <__adddf3+0x16e>
   d7310:	320c      	adds	r2, #12
   d7312:	dd08      	ble.n	d7326 <__adddf3+0x16a>
   d7314:	f102 0c14 	add.w	ip, r2, #20
   d7318:	f1c2 020c 	rsb	r2, r2, #12
   d731c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7320:	fa21 f102 	lsr.w	r1, r1, r2
   d7324:	e00c      	b.n	d7340 <__adddf3+0x184>
   d7326:	f102 0214 	add.w	r2, r2, #20
   d732a:	bfd8      	it	le
   d732c:	f1c2 0c20 	rsble	ip, r2, #32
   d7330:	fa01 f102 	lsl.w	r1, r1, r2
   d7334:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7338:	bfdc      	itt	le
   d733a:	ea41 010c 	orrle.w	r1, r1, ip
   d733e:	4090      	lslle	r0, r2
   d7340:	1ae4      	subs	r4, r4, r3
   d7342:	bfa2      	ittt	ge
   d7344:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7348:	4329      	orrge	r1, r5
   d734a:	bd30      	popge	{r4, r5, pc}
   d734c:	ea6f 0404 	mvn.w	r4, r4
   d7350:	3c1f      	subs	r4, #31
   d7352:	da1c      	bge.n	d738e <__adddf3+0x1d2>
   d7354:	340c      	adds	r4, #12
   d7356:	dc0e      	bgt.n	d7376 <__adddf3+0x1ba>
   d7358:	f104 0414 	add.w	r4, r4, #20
   d735c:	f1c4 0220 	rsb	r2, r4, #32
   d7360:	fa20 f004 	lsr.w	r0, r0, r4
   d7364:	fa01 f302 	lsl.w	r3, r1, r2
   d7368:	ea40 0003 	orr.w	r0, r0, r3
   d736c:	fa21 f304 	lsr.w	r3, r1, r4
   d7370:	ea45 0103 	orr.w	r1, r5, r3
   d7374:	bd30      	pop	{r4, r5, pc}
   d7376:	f1c4 040c 	rsb	r4, r4, #12
   d737a:	f1c4 0220 	rsb	r2, r4, #32
   d737e:	fa20 f002 	lsr.w	r0, r0, r2
   d7382:	fa01 f304 	lsl.w	r3, r1, r4
   d7386:	ea40 0003 	orr.w	r0, r0, r3
   d738a:	4629      	mov	r1, r5
   d738c:	bd30      	pop	{r4, r5, pc}
   d738e:	fa21 f004 	lsr.w	r0, r1, r4
   d7392:	4629      	mov	r1, r5
   d7394:	bd30      	pop	{r4, r5, pc}
   d7396:	f094 0f00 	teq	r4, #0
   d739a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d739e:	bf06      	itte	eq
   d73a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d73a4:	3401      	addeq	r4, #1
   d73a6:	3d01      	subne	r5, #1
   d73a8:	e74e      	b.n	d7248 <__adddf3+0x8c>
   d73aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d73ae:	bf18      	it	ne
   d73b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d73b4:	d029      	beq.n	d740a <__adddf3+0x24e>
   d73b6:	ea94 0f05 	teq	r4, r5
   d73ba:	bf08      	it	eq
   d73bc:	ea90 0f02 	teqeq	r0, r2
   d73c0:	d005      	beq.n	d73ce <__adddf3+0x212>
   d73c2:	ea54 0c00 	orrs.w	ip, r4, r0
   d73c6:	bf04      	itt	eq
   d73c8:	4619      	moveq	r1, r3
   d73ca:	4610      	moveq	r0, r2
   d73cc:	bd30      	pop	{r4, r5, pc}
   d73ce:	ea91 0f03 	teq	r1, r3
   d73d2:	bf1e      	ittt	ne
   d73d4:	2100      	movne	r1, #0
   d73d6:	2000      	movne	r0, #0
   d73d8:	bd30      	popne	{r4, r5, pc}
   d73da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d73de:	d105      	bne.n	d73ec <__adddf3+0x230>
   d73e0:	0040      	lsls	r0, r0, #1
   d73e2:	4149      	adcs	r1, r1
   d73e4:	bf28      	it	cs
   d73e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d73ea:	bd30      	pop	{r4, r5, pc}
   d73ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d73f0:	bf3c      	itt	cc
   d73f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d73f6:	bd30      	popcc	{r4, r5, pc}
   d73f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d73fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7400:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7404:	f04f 0000 	mov.w	r0, #0
   d7408:	bd30      	pop	{r4, r5, pc}
   d740a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d740e:	bf1a      	itte	ne
   d7410:	4619      	movne	r1, r3
   d7412:	4610      	movne	r0, r2
   d7414:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7418:	bf1c      	itt	ne
   d741a:	460b      	movne	r3, r1
   d741c:	4602      	movne	r2, r0
   d741e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7422:	bf06      	itte	eq
   d7424:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7428:	ea91 0f03 	teqeq	r1, r3
   d742c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7430:	bd30      	pop	{r4, r5, pc}
   d7432:	bf00      	nop

000d7434 <__aeabi_ui2d>:
   d7434:	f090 0f00 	teq	r0, #0
   d7438:	bf04      	itt	eq
   d743a:	2100      	moveq	r1, #0
   d743c:	4770      	bxeq	lr
   d743e:	b530      	push	{r4, r5, lr}
   d7440:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7444:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7448:	f04f 0500 	mov.w	r5, #0
   d744c:	f04f 0100 	mov.w	r1, #0
   d7450:	e750      	b.n	d72f4 <__adddf3+0x138>
   d7452:	bf00      	nop

000d7454 <__aeabi_i2d>:
   d7454:	f090 0f00 	teq	r0, #0
   d7458:	bf04      	itt	eq
   d745a:	2100      	moveq	r1, #0
   d745c:	4770      	bxeq	lr
   d745e:	b530      	push	{r4, r5, lr}
   d7460:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7464:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7468:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d746c:	bf48      	it	mi
   d746e:	4240      	negmi	r0, r0
   d7470:	f04f 0100 	mov.w	r1, #0
   d7474:	e73e      	b.n	d72f4 <__adddf3+0x138>
   d7476:	bf00      	nop

000d7478 <__aeabi_f2d>:
   d7478:	0042      	lsls	r2, r0, #1
   d747a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d747e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7482:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7486:	bf1f      	itttt	ne
   d7488:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d748c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7490:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7494:	4770      	bxne	lr
   d7496:	f092 0f00 	teq	r2, #0
   d749a:	bf14      	ite	ne
   d749c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d74a0:	4770      	bxeq	lr
   d74a2:	b530      	push	{r4, r5, lr}
   d74a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d74a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d74ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d74b0:	e720      	b.n	d72f4 <__adddf3+0x138>
   d74b2:	bf00      	nop

000d74b4 <__aeabi_ul2d>:
   d74b4:	ea50 0201 	orrs.w	r2, r0, r1
   d74b8:	bf08      	it	eq
   d74ba:	4770      	bxeq	lr
   d74bc:	b530      	push	{r4, r5, lr}
   d74be:	f04f 0500 	mov.w	r5, #0
   d74c2:	e00a      	b.n	d74da <__aeabi_l2d+0x16>

000d74c4 <__aeabi_l2d>:
   d74c4:	ea50 0201 	orrs.w	r2, r0, r1
   d74c8:	bf08      	it	eq
   d74ca:	4770      	bxeq	lr
   d74cc:	b530      	push	{r4, r5, lr}
   d74ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d74d2:	d502      	bpl.n	d74da <__aeabi_l2d+0x16>
   d74d4:	4240      	negs	r0, r0
   d74d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d74da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d74de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d74e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d74e6:	f43f aedc 	beq.w	d72a2 <__adddf3+0xe6>
   d74ea:	f04f 0203 	mov.w	r2, #3
   d74ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d74f2:	bf18      	it	ne
   d74f4:	3203      	addne	r2, #3
   d74f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d74fa:	bf18      	it	ne
   d74fc:	3203      	addne	r2, #3
   d74fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7502:	f1c2 0320 	rsb	r3, r2, #32
   d7506:	fa00 fc03 	lsl.w	ip, r0, r3
   d750a:	fa20 f002 	lsr.w	r0, r0, r2
   d750e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7512:	ea40 000e 	orr.w	r0, r0, lr
   d7516:	fa21 f102 	lsr.w	r1, r1, r2
   d751a:	4414      	add	r4, r2
   d751c:	e6c1      	b.n	d72a2 <__adddf3+0xe6>
   d751e:	bf00      	nop

000d7520 <__aeabi_dmul>:
   d7520:	b570      	push	{r4, r5, r6, lr}
   d7522:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7526:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d752a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d752e:	bf1d      	ittte	ne
   d7530:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7534:	ea94 0f0c 	teqne	r4, ip
   d7538:	ea95 0f0c 	teqne	r5, ip
   d753c:	f000 f8de 	bleq	d76fc <__aeabi_dmul+0x1dc>
   d7540:	442c      	add	r4, r5
   d7542:	ea81 0603 	eor.w	r6, r1, r3
   d7546:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d754a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d754e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7552:	bf18      	it	ne
   d7554:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d755c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7560:	d038      	beq.n	d75d4 <__aeabi_dmul+0xb4>
   d7562:	fba0 ce02 	umull	ip, lr, r0, r2
   d7566:	f04f 0500 	mov.w	r5, #0
   d756a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d756e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7572:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7576:	f04f 0600 	mov.w	r6, #0
   d757a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d757e:	f09c 0f00 	teq	ip, #0
   d7582:	bf18      	it	ne
   d7584:	f04e 0e01 	orrne.w	lr, lr, #1
   d7588:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d758c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7590:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7594:	d204      	bcs.n	d75a0 <__aeabi_dmul+0x80>
   d7596:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d759a:	416d      	adcs	r5, r5
   d759c:	eb46 0606 	adc.w	r6, r6, r6
   d75a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d75a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d75a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d75ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d75b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d75b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d75b8:	bf88      	it	hi
   d75ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d75be:	d81e      	bhi.n	d75fe <__aeabi_dmul+0xde>
   d75c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d75c4:	bf08      	it	eq
   d75c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d75ca:	f150 0000 	adcs.w	r0, r0, #0
   d75ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d75d2:	bd70      	pop	{r4, r5, r6, pc}
   d75d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d75d8:	ea46 0101 	orr.w	r1, r6, r1
   d75dc:	ea40 0002 	orr.w	r0, r0, r2
   d75e0:	ea81 0103 	eor.w	r1, r1, r3
   d75e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d75e8:	bfc2      	ittt	gt
   d75ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d75ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d75f2:	bd70      	popgt	{r4, r5, r6, pc}
   d75f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d75f8:	f04f 0e00 	mov.w	lr, #0
   d75fc:	3c01      	subs	r4, #1
   d75fe:	f300 80ab 	bgt.w	d7758 <__aeabi_dmul+0x238>
   d7602:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7606:	bfde      	ittt	le
   d7608:	2000      	movle	r0, #0
   d760a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d760e:	bd70      	pople	{r4, r5, r6, pc}
   d7610:	f1c4 0400 	rsb	r4, r4, #0
   d7614:	3c20      	subs	r4, #32
   d7616:	da35      	bge.n	d7684 <__aeabi_dmul+0x164>
   d7618:	340c      	adds	r4, #12
   d761a:	dc1b      	bgt.n	d7654 <__aeabi_dmul+0x134>
   d761c:	f104 0414 	add.w	r4, r4, #20
   d7620:	f1c4 0520 	rsb	r5, r4, #32
   d7624:	fa00 f305 	lsl.w	r3, r0, r5
   d7628:	fa20 f004 	lsr.w	r0, r0, r4
   d762c:	fa01 f205 	lsl.w	r2, r1, r5
   d7630:	ea40 0002 	orr.w	r0, r0, r2
   d7634:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7638:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d763c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7640:	fa21 f604 	lsr.w	r6, r1, r4
   d7644:	eb42 0106 	adc.w	r1, r2, r6
   d7648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d764c:	bf08      	it	eq
   d764e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7652:	bd70      	pop	{r4, r5, r6, pc}
   d7654:	f1c4 040c 	rsb	r4, r4, #12
   d7658:	f1c4 0520 	rsb	r5, r4, #32
   d765c:	fa00 f304 	lsl.w	r3, r0, r4
   d7660:	fa20 f005 	lsr.w	r0, r0, r5
   d7664:	fa01 f204 	lsl.w	r2, r1, r4
   d7668:	ea40 0002 	orr.w	r0, r0, r2
   d766c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7674:	f141 0100 	adc.w	r1, r1, #0
   d7678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d767c:	bf08      	it	eq
   d767e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7682:	bd70      	pop	{r4, r5, r6, pc}
   d7684:	f1c4 0520 	rsb	r5, r4, #32
   d7688:	fa00 f205 	lsl.w	r2, r0, r5
   d768c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7690:	fa20 f304 	lsr.w	r3, r0, r4
   d7694:	fa01 f205 	lsl.w	r2, r1, r5
   d7698:	ea43 0302 	orr.w	r3, r3, r2
   d769c:	fa21 f004 	lsr.w	r0, r1, r4
   d76a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d76a4:	fa21 f204 	lsr.w	r2, r1, r4
   d76a8:	ea20 0002 	bic.w	r0, r0, r2
   d76ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d76b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d76b4:	bf08      	it	eq
   d76b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d76ba:	bd70      	pop	{r4, r5, r6, pc}
   d76bc:	f094 0f00 	teq	r4, #0
   d76c0:	d10f      	bne.n	d76e2 <__aeabi_dmul+0x1c2>
   d76c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d76c6:	0040      	lsls	r0, r0, #1
   d76c8:	eb41 0101 	adc.w	r1, r1, r1
   d76cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76d0:	bf08      	it	eq
   d76d2:	3c01      	subeq	r4, #1
   d76d4:	d0f7      	beq.n	d76c6 <__aeabi_dmul+0x1a6>
   d76d6:	ea41 0106 	orr.w	r1, r1, r6
   d76da:	f095 0f00 	teq	r5, #0
   d76de:	bf18      	it	ne
   d76e0:	4770      	bxne	lr
   d76e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d76e6:	0052      	lsls	r2, r2, #1
   d76e8:	eb43 0303 	adc.w	r3, r3, r3
   d76ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d76f0:	bf08      	it	eq
   d76f2:	3d01      	subeq	r5, #1
   d76f4:	d0f7      	beq.n	d76e6 <__aeabi_dmul+0x1c6>
   d76f6:	ea43 0306 	orr.w	r3, r3, r6
   d76fa:	4770      	bx	lr
   d76fc:	ea94 0f0c 	teq	r4, ip
   d7700:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7704:	bf18      	it	ne
   d7706:	ea95 0f0c 	teqne	r5, ip
   d770a:	d00c      	beq.n	d7726 <__aeabi_dmul+0x206>
   d770c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7710:	bf18      	it	ne
   d7712:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7716:	d1d1      	bne.n	d76bc <__aeabi_dmul+0x19c>
   d7718:	ea81 0103 	eor.w	r1, r1, r3
   d771c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7720:	f04f 0000 	mov.w	r0, #0
   d7724:	bd70      	pop	{r4, r5, r6, pc}
   d7726:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d772a:	bf06      	itte	eq
   d772c:	4610      	moveq	r0, r2
   d772e:	4619      	moveq	r1, r3
   d7730:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7734:	d019      	beq.n	d776a <__aeabi_dmul+0x24a>
   d7736:	ea94 0f0c 	teq	r4, ip
   d773a:	d102      	bne.n	d7742 <__aeabi_dmul+0x222>
   d773c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7740:	d113      	bne.n	d776a <__aeabi_dmul+0x24a>
   d7742:	ea95 0f0c 	teq	r5, ip
   d7746:	d105      	bne.n	d7754 <__aeabi_dmul+0x234>
   d7748:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d774c:	bf1c      	itt	ne
   d774e:	4610      	movne	r0, r2
   d7750:	4619      	movne	r1, r3
   d7752:	d10a      	bne.n	d776a <__aeabi_dmul+0x24a>
   d7754:	ea81 0103 	eor.w	r1, r1, r3
   d7758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d775c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7760:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7764:	f04f 0000 	mov.w	r0, #0
   d7768:	bd70      	pop	{r4, r5, r6, pc}
   d776a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d776e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7772:	bd70      	pop	{r4, r5, r6, pc}

000d7774 <__aeabi_ddiv>:
   d7774:	b570      	push	{r4, r5, r6, lr}
   d7776:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d777a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d777e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7782:	bf1d      	ittte	ne
   d7784:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7788:	ea94 0f0c 	teqne	r4, ip
   d778c:	ea95 0f0c 	teqne	r5, ip
   d7790:	f000 f8a7 	bleq	d78e2 <__aeabi_ddiv+0x16e>
   d7794:	eba4 0405 	sub.w	r4, r4, r5
   d7798:	ea81 0e03 	eor.w	lr, r1, r3
   d779c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d77a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d77a4:	f000 8088 	beq.w	d78b8 <__aeabi_ddiv+0x144>
   d77a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d77ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d77b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d77b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d77b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d77bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d77c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d77c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d77c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d77cc:	429d      	cmp	r5, r3
   d77ce:	bf08      	it	eq
   d77d0:	4296      	cmpeq	r6, r2
   d77d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d77d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d77da:	d202      	bcs.n	d77e2 <__aeabi_ddiv+0x6e>
   d77dc:	085b      	lsrs	r3, r3, #1
   d77de:	ea4f 0232 	mov.w	r2, r2, rrx
   d77e2:	1ab6      	subs	r6, r6, r2
   d77e4:	eb65 0503 	sbc.w	r5, r5, r3
   d77e8:	085b      	lsrs	r3, r3, #1
   d77ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d77ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d77f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d77f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d77fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d77fe:	bf22      	ittt	cs
   d7800:	1ab6      	subcs	r6, r6, r2
   d7802:	4675      	movcs	r5, lr
   d7804:	ea40 000c 	orrcs.w	r0, r0, ip
   d7808:	085b      	lsrs	r3, r3, #1
   d780a:	ea4f 0232 	mov.w	r2, r2, rrx
   d780e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7812:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7816:	bf22      	ittt	cs
   d7818:	1ab6      	subcs	r6, r6, r2
   d781a:	4675      	movcs	r5, lr
   d781c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7820:	085b      	lsrs	r3, r3, #1
   d7822:	ea4f 0232 	mov.w	r2, r2, rrx
   d7826:	ebb6 0e02 	subs.w	lr, r6, r2
   d782a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d782e:	bf22      	ittt	cs
   d7830:	1ab6      	subcs	r6, r6, r2
   d7832:	4675      	movcs	r5, lr
   d7834:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7838:	085b      	lsrs	r3, r3, #1
   d783a:	ea4f 0232 	mov.w	r2, r2, rrx
   d783e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7842:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7846:	bf22      	ittt	cs
   d7848:	1ab6      	subcs	r6, r6, r2
   d784a:	4675      	movcs	r5, lr
   d784c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7850:	ea55 0e06 	orrs.w	lr, r5, r6
   d7854:	d018      	beq.n	d7888 <__aeabi_ddiv+0x114>
   d7856:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d785a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d785e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7862:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7866:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d786a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d786e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7872:	d1c0      	bne.n	d77f6 <__aeabi_ddiv+0x82>
   d7874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7878:	d10b      	bne.n	d7892 <__aeabi_ddiv+0x11e>
   d787a:	ea41 0100 	orr.w	r1, r1, r0
   d787e:	f04f 0000 	mov.w	r0, #0
   d7882:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7886:	e7b6      	b.n	d77f6 <__aeabi_ddiv+0x82>
   d7888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d788c:	bf04      	itt	eq
   d788e:	4301      	orreq	r1, r0
   d7890:	2000      	moveq	r0, #0
   d7892:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7896:	bf88      	it	hi
   d7898:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d789c:	f63f aeaf 	bhi.w	d75fe <__aeabi_dmul+0xde>
   d78a0:	ebb5 0c03 	subs.w	ip, r5, r3
   d78a4:	bf04      	itt	eq
   d78a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d78aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d78ae:	f150 0000 	adcs.w	r0, r0, #0
   d78b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d78b6:	bd70      	pop	{r4, r5, r6, pc}
   d78b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d78bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d78c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d78c4:	bfc2      	ittt	gt
   d78c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d78ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d78ce:	bd70      	popgt	{r4, r5, r6, pc}
   d78d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d78d4:	f04f 0e00 	mov.w	lr, #0
   d78d8:	3c01      	subs	r4, #1
   d78da:	e690      	b.n	d75fe <__aeabi_dmul+0xde>
   d78dc:	ea45 0e06 	orr.w	lr, r5, r6
   d78e0:	e68d      	b.n	d75fe <__aeabi_dmul+0xde>
   d78e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d78e6:	ea94 0f0c 	teq	r4, ip
   d78ea:	bf08      	it	eq
   d78ec:	ea95 0f0c 	teqeq	r5, ip
   d78f0:	f43f af3b 	beq.w	d776a <__aeabi_dmul+0x24a>
   d78f4:	ea94 0f0c 	teq	r4, ip
   d78f8:	d10a      	bne.n	d7910 <__aeabi_ddiv+0x19c>
   d78fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d78fe:	f47f af34 	bne.w	d776a <__aeabi_dmul+0x24a>
   d7902:	ea95 0f0c 	teq	r5, ip
   d7906:	f47f af25 	bne.w	d7754 <__aeabi_dmul+0x234>
   d790a:	4610      	mov	r0, r2
   d790c:	4619      	mov	r1, r3
   d790e:	e72c      	b.n	d776a <__aeabi_dmul+0x24a>
   d7910:	ea95 0f0c 	teq	r5, ip
   d7914:	d106      	bne.n	d7924 <__aeabi_ddiv+0x1b0>
   d7916:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d791a:	f43f aefd 	beq.w	d7718 <__aeabi_dmul+0x1f8>
   d791e:	4610      	mov	r0, r2
   d7920:	4619      	mov	r1, r3
   d7922:	e722      	b.n	d776a <__aeabi_dmul+0x24a>
   d7924:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7928:	bf18      	it	ne
   d792a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d792e:	f47f aec5 	bne.w	d76bc <__aeabi_dmul+0x19c>
   d7932:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7936:	f47f af0d 	bne.w	d7754 <__aeabi_dmul+0x234>
   d793a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d793e:	f47f aeeb 	bne.w	d7718 <__aeabi_dmul+0x1f8>
   d7942:	e712      	b.n	d776a <__aeabi_dmul+0x24a>

000d7944 <__gedf2>:
   d7944:	f04f 3cff 	mov.w	ip, #4294967295
   d7948:	e006      	b.n	d7958 <__cmpdf2+0x4>
   d794a:	bf00      	nop

000d794c <__ledf2>:
   d794c:	f04f 0c01 	mov.w	ip, #1
   d7950:	e002      	b.n	d7958 <__cmpdf2+0x4>
   d7952:	bf00      	nop

000d7954 <__cmpdf2>:
   d7954:	f04f 0c01 	mov.w	ip, #1
   d7958:	f84d cd04 	str.w	ip, [sp, #-4]!
   d795c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7968:	bf18      	it	ne
   d796a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d796e:	d01b      	beq.n	d79a8 <__cmpdf2+0x54>
   d7970:	b001      	add	sp, #4
   d7972:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7976:	bf0c      	ite	eq
   d7978:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d797c:	ea91 0f03 	teqne	r1, r3
   d7980:	bf02      	ittt	eq
   d7982:	ea90 0f02 	teqeq	r0, r2
   d7986:	2000      	moveq	r0, #0
   d7988:	4770      	bxeq	lr
   d798a:	f110 0f00 	cmn.w	r0, #0
   d798e:	ea91 0f03 	teq	r1, r3
   d7992:	bf58      	it	pl
   d7994:	4299      	cmppl	r1, r3
   d7996:	bf08      	it	eq
   d7998:	4290      	cmpeq	r0, r2
   d799a:	bf2c      	ite	cs
   d799c:	17d8      	asrcs	r0, r3, #31
   d799e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d79a2:	f040 0001 	orr.w	r0, r0, #1
   d79a6:	4770      	bx	lr
   d79a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d79ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d79b0:	d102      	bne.n	d79b8 <__cmpdf2+0x64>
   d79b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d79b6:	d107      	bne.n	d79c8 <__cmpdf2+0x74>
   d79b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d79bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d79c0:	d1d6      	bne.n	d7970 <__cmpdf2+0x1c>
   d79c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d79c6:	d0d3      	beq.n	d7970 <__cmpdf2+0x1c>
   d79c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d79cc:	4770      	bx	lr
   d79ce:	bf00      	nop

000d79d0 <__aeabi_cdrcmple>:
   d79d0:	4684      	mov	ip, r0
   d79d2:	4610      	mov	r0, r2
   d79d4:	4662      	mov	r2, ip
   d79d6:	468c      	mov	ip, r1
   d79d8:	4619      	mov	r1, r3
   d79da:	4663      	mov	r3, ip
   d79dc:	e000      	b.n	d79e0 <__aeabi_cdcmpeq>
   d79de:	bf00      	nop

000d79e0 <__aeabi_cdcmpeq>:
   d79e0:	b501      	push	{r0, lr}
   d79e2:	f7ff ffb7 	bl	d7954 <__cmpdf2>
   d79e6:	2800      	cmp	r0, #0
   d79e8:	bf48      	it	mi
   d79ea:	f110 0f00 	cmnmi.w	r0, #0
   d79ee:	bd01      	pop	{r0, pc}

000d79f0 <__aeabi_dcmpeq>:
   d79f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d79f4:	f7ff fff4 	bl	d79e0 <__aeabi_cdcmpeq>
   d79f8:	bf0c      	ite	eq
   d79fa:	2001      	moveq	r0, #1
   d79fc:	2000      	movne	r0, #0
   d79fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a02:	bf00      	nop

000d7a04 <__aeabi_dcmplt>:
   d7a04:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a08:	f7ff ffea 	bl	d79e0 <__aeabi_cdcmpeq>
   d7a0c:	bf34      	ite	cc
   d7a0e:	2001      	movcc	r0, #1
   d7a10:	2000      	movcs	r0, #0
   d7a12:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a16:	bf00      	nop

000d7a18 <__aeabi_dcmple>:
   d7a18:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a1c:	f7ff ffe0 	bl	d79e0 <__aeabi_cdcmpeq>
   d7a20:	bf94      	ite	ls
   d7a22:	2001      	movls	r0, #1
   d7a24:	2000      	movhi	r0, #0
   d7a26:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a2a:	bf00      	nop

000d7a2c <__aeabi_dcmpge>:
   d7a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a30:	f7ff ffce 	bl	d79d0 <__aeabi_cdrcmple>
   d7a34:	bf94      	ite	ls
   d7a36:	2001      	movls	r0, #1
   d7a38:	2000      	movhi	r0, #0
   d7a3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a3e:	bf00      	nop

000d7a40 <__aeabi_dcmpgt>:
   d7a40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a44:	f7ff ffc4 	bl	d79d0 <__aeabi_cdrcmple>
   d7a48:	bf34      	ite	cc
   d7a4a:	2001      	movcc	r0, #1
   d7a4c:	2000      	movcs	r0, #0
   d7a4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a52:	bf00      	nop

000d7a54 <__aeabi_dcmpun>:
   d7a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7a5c:	d102      	bne.n	d7a64 <__aeabi_dcmpun+0x10>
   d7a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7a62:	d10a      	bne.n	d7a7a <__aeabi_dcmpun+0x26>
   d7a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7a6c:	d102      	bne.n	d7a74 <__aeabi_dcmpun+0x20>
   d7a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7a72:	d102      	bne.n	d7a7a <__aeabi_dcmpun+0x26>
   d7a74:	f04f 0000 	mov.w	r0, #0
   d7a78:	4770      	bx	lr
   d7a7a:	f04f 0001 	mov.w	r0, #1
   d7a7e:	4770      	bx	lr

000d7a80 <__aeabi_d2f>:
   d7a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7a88:	bf24      	itt	cs
   d7a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7a92:	d90d      	bls.n	d7ab0 <__aeabi_d2f+0x30>
   d7a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7aa8:	bf08      	it	eq
   d7aaa:	f020 0001 	biceq.w	r0, r0, #1
   d7aae:	4770      	bx	lr
   d7ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7ab4:	d121      	bne.n	d7afa <__aeabi_d2f+0x7a>
   d7ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7aba:	bfbc      	itt	lt
   d7abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7ac0:	4770      	bxlt	lr
   d7ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7aca:	f1c2 0218 	rsb	r2, r2, #24
   d7ace:	f1c2 0c20 	rsb	ip, r2, #32
   d7ad2:	fa10 f30c 	lsls.w	r3, r0, ip
   d7ad6:	fa20 f002 	lsr.w	r0, r0, r2
   d7ada:	bf18      	it	ne
   d7adc:	f040 0001 	orrne.w	r0, r0, #1
   d7ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7aec:	ea40 000c 	orr.w	r0, r0, ip
   d7af0:	fa23 f302 	lsr.w	r3, r3, r2
   d7af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7af8:	e7cc      	b.n	d7a94 <__aeabi_d2f+0x14>
   d7afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7afe:	d107      	bne.n	d7b10 <__aeabi_d2f+0x90>
   d7b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7b04:	bf1e      	ittt	ne
   d7b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7b0e:	4770      	bxne	lr
   d7b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7b1c:	4770      	bx	lr
   d7b1e:	bf00      	nop

000d7b20 <__cxa_atexit>:
   d7b20:	b510      	push	{r4, lr}
   d7b22:	4c05      	ldr	r4, [pc, #20]	; (d7b38 <__cxa_atexit+0x18>)
   d7b24:	4613      	mov	r3, r2
   d7b26:	b12c      	cbz	r4, d7b34 <__cxa_atexit+0x14>
   d7b28:	460a      	mov	r2, r1
   d7b2a:	4601      	mov	r1, r0
   d7b2c:	2002      	movs	r0, #2
   d7b2e:	f3af 8000 	nop.w
   d7b32:	bd10      	pop	{r4, pc}
   d7b34:	4620      	mov	r0, r4
   d7b36:	bd10      	pop	{r4, pc}
   d7b38:	00000000 	.word	0x00000000

000d7b3c <memcpy>:
   d7b3c:	b510      	push	{r4, lr}
   d7b3e:	1e43      	subs	r3, r0, #1
   d7b40:	440a      	add	r2, r1
   d7b42:	4291      	cmp	r1, r2
   d7b44:	d004      	beq.n	d7b50 <memcpy+0x14>
   d7b46:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b4e:	e7f8      	b.n	d7b42 <memcpy+0x6>
   d7b50:	bd10      	pop	{r4, pc}

000d7b52 <memset>:
   d7b52:	4402      	add	r2, r0
   d7b54:	4603      	mov	r3, r0
   d7b56:	4293      	cmp	r3, r2
   d7b58:	d002      	beq.n	d7b60 <memset+0xe>
   d7b5a:	f803 1b01 	strb.w	r1, [r3], #1
   d7b5e:	e7fa      	b.n	d7b56 <memset+0x4>
   d7b60:	4770      	bx	lr
	...

000d7b64 <srand>:
   d7b64:	b538      	push	{r3, r4, r5, lr}
   d7b66:	4b12      	ldr	r3, [pc, #72]	; (d7bb0 <srand+0x4c>)
   d7b68:	681c      	ldr	r4, [r3, #0]
   d7b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b6c:	4605      	mov	r5, r0
   d7b6e:	b9d3      	cbnz	r3, d7ba6 <srand+0x42>
   d7b70:	2018      	movs	r0, #24
   d7b72:	f7fd fc9b 	bl	d54ac <malloc>
   d7b76:	f243 330e 	movw	r3, #13070	; 0x330e
   d7b7a:	63a0      	str	r0, [r4, #56]	; 0x38
   d7b7c:	8003      	strh	r3, [r0, #0]
   d7b7e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7b82:	8043      	strh	r3, [r0, #2]
   d7b84:	f241 2334 	movw	r3, #4660	; 0x1234
   d7b88:	8083      	strh	r3, [r0, #4]
   d7b8a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7b8e:	80c3      	strh	r3, [r0, #6]
   d7b90:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7b94:	8103      	strh	r3, [r0, #8]
   d7b96:	2305      	movs	r3, #5
   d7b98:	8143      	strh	r3, [r0, #10]
   d7b9a:	230b      	movs	r3, #11
   d7b9c:	8183      	strh	r3, [r0, #12]
   d7b9e:	2201      	movs	r2, #1
   d7ba0:	2300      	movs	r3, #0
   d7ba2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ba8:	2200      	movs	r2, #0
   d7baa:	611d      	str	r5, [r3, #16]
   d7bac:	615a      	str	r2, [r3, #20]
   d7bae:	bd38      	pop	{r3, r4, r5, pc}
   d7bb0:	2003e1b8 	.word	0x2003e1b8

000d7bb4 <strcpy>:
   d7bb4:	4603      	mov	r3, r0
   d7bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7bba:	f803 2b01 	strb.w	r2, [r3], #1
   d7bbe:	2a00      	cmp	r2, #0
   d7bc0:	d1f9      	bne.n	d7bb6 <strcpy+0x2>
   d7bc2:	4770      	bx	lr

000d7bc4 <strdup>:
   d7bc4:	4b02      	ldr	r3, [pc, #8]	; (d7bd0 <strdup+0xc>)
   d7bc6:	4601      	mov	r1, r0
   d7bc8:	6818      	ldr	r0, [r3, #0]
   d7bca:	f000 b803 	b.w	d7bd4 <_strdup_r>
   d7bce:	bf00      	nop
   d7bd0:	2003e1b8 	.word	0x2003e1b8

000d7bd4 <_strdup_r>:
   d7bd4:	b570      	push	{r4, r5, r6, lr}
   d7bd6:	4606      	mov	r6, r0
   d7bd8:	4608      	mov	r0, r1
   d7bda:	460c      	mov	r4, r1
   d7bdc:	f000 f80d 	bl	d7bfa <strlen>
   d7be0:	1c45      	adds	r5, r0, #1
   d7be2:	4629      	mov	r1, r5
   d7be4:	4630      	mov	r0, r6
   d7be6:	f7fd fc91 	bl	d550c <_malloc_r>
   d7bea:	4606      	mov	r6, r0
   d7bec:	b118      	cbz	r0, d7bf6 <_strdup_r+0x22>
   d7bee:	462a      	mov	r2, r5
   d7bf0:	4621      	mov	r1, r4
   d7bf2:	f7ff ffa3 	bl	d7b3c <memcpy>
   d7bf6:	4630      	mov	r0, r6
   d7bf8:	bd70      	pop	{r4, r5, r6, pc}

000d7bfa <strlen>:
   d7bfa:	4603      	mov	r3, r0
   d7bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7c00:	2a00      	cmp	r2, #0
   d7c02:	d1fb      	bne.n	d7bfc <strlen+0x2>
   d7c04:	1a18      	subs	r0, r3, r0
   d7c06:	3801      	subs	r0, #1
   d7c08:	4770      	bx	lr

000d7c0a <link_code_end>:
	...

000d7c0c <dynalib_user>:
   d7c0c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7c1c:	0000 0000 6574 706d 3a43 2520 2066 6574     ....tempC: %f te
   d7c2c:	706d 3a46 2520 2066 6f63 6e75 6574 3a72     mpF: %f counter:
   d7c3c:	2520 2069 6564 6976 6563 4449 203a 7325      %i deviceID: %s
   d7c4c:	000a 6f76 746c 6761 3a65 2520 0a66 4100     ..voltage: %f..A
   d7c5c:	2b54 4553 444e 253d 2c69 6925 252c 2e30     T+SEND=%i,%i,%0.
   d7c6c:	6632 252c 2e30 6632 252c 0d69 000a 7263     2f,%0.2f,%i...cr
   d7c7c:	6165 6574 7542 6666 7265 203a 7325 6300     eateBuffer: %s.c
   d7c8c:	6572 7461 4265 6675 6566 2872 0029 6573     reateBuffer().se
   d7c9c:	646e 7220 7065 796c 203a 7325 000a 6573     nd reply: %s..se
   d7cac:	646e 6144 6174 2928 4100 2b54 4f4d 4544     ndData().AT+MODE
   d7cbc:	303d 0a0d 4100 6177 7469 6e69 2067 6552     =0...Awaiting Re
   d7ccc:	6c70 2079 7266 6d6f 7220 7965 7861 6e4f     ply from reyaxOn
   d7cdc:	2928 000a 6552 6c70 3a79 2520 0a73 4100     ()..Reply: %s..A
   d7cec:	2b54 4f4d 4544 0d3f 000a 7741 6961 6974     T+MODE?...Awaiti
   d7cfc:	676e 5220 7065 796c 6620 6f72 206d 6f6d     ng Reply from mo
   d7d0c:	6564 0a3f 4100 2b54 4f4d 4544 313d 0a0d     de?..AT+MODE=1..
   d7d1c:	5000 776f 7265 6e69 2067 6f64 6e77 2e2e     .Powering down..
   d7d2c:	0a2e 4100 0d54 000a 7461 6554 7473 7220     ...AT...atTest r
   d7d3c:	7065 796c 203a 7325 000a 7461 6554 7473     eply: %s..atTest
   d7d4c:	2928 4100 2b54 4552 4553 0d54 000a 6f73     ().AT+RESET...so
   d7d5c:	7466 6177 6572 6552 6573 2874 0029 6f73     ftwareReset().so
   d7d6c:	7466 6177 6572 6552 6573 2874 3229 6100     ftwareReset()2.a
   d7d7c:	4d74 646f 2065 6572 6c70 3a79 2520 2073     tMode reply: %s 
   d7d8c:	6572 6c70 3279 203a 7325 000a 7461 6f4d     reply2: %s..atMo
   d7d9c:	6564 2928 4100 6177 7469 6e69 2067 6552     de().Awaiting Re
   d7dac:	6c70 0a79 5200 7065 796c 4120 2b54 4f4d     ply..Reply AT+MO
   d7dbc:	4544 3a3f 2520 0a73 4100 2b54 4f4d 4544     DE?: %s..AT+MODE
   d7dcc:	003f 5441 502b 5241 4d41 5445 5245 313d     ?.AT+PARAMETER=1
   d7ddc:	2c32 2c37 2c31 0d37 000a 6573 5274 6461     2,7,1,7...setRad
   d7dec:	6f69 4100 2b54 4150 4152 454d 4554 3f52     io.AT+PARAMETER?
   d7dfc:	0a0d 5200 7065 796c 4120 2b54 4150 4152     ...Reply AT+PARA
   d7e0c:	454d 4554 3f52 203a 7325 000a 6573 5074     METER?: %s..setP
   d7e1c:	7261 6d61 7465 7265 003f 5441 422b 4e41     arameter?.AT+BAN
   d7e2c:	3d44 3139 3035 3030 3030 0d30 000a 5441     D=915000000...AT
   d7e3c:	422b 4e41 3d44 3638 3538 3030 3030 0d30     +BAND=868500000.
   d7e4c:	000a 6573 4274 6e61 0064 5441 422b 4e41     ..setBand.AT+BAN
   d7e5c:	3f44 0a0d 5200 7065 796c 4120 2b54 4142     D?...Reply AT+BA
   d7e6c:	444e 3a3f 2520 0a73 4100 2b54 4142 444e     ND?: %s..AT+BAND
   d7e7c:	003f 4142 3134 3430 3330 3932 3836 4142     ?.BA4104032968BA
   d7e8c:	3131 3431 3932 3039 3937 3230 3531 3439     1114299079021594
   d7e9c:	4141 4100 2b54 5043 4e49 253d 0d73 000a     AA.AT+CPIN=%s...
   d7eac:	6573 4374 4950 004e 5441 432b 4950 3f4e     setCPIN.AT+CPIN?
   d7ebc:	0a0d 5200 7065 796c 4320 4950 3a4e 2520     ...Reply CPIN: %
   d7ecc:	0a73 4100 2b54 5043 4e49 003f 5441 532b     s..AT+CPIN?.AT+S
   d7edc:	4e45 0044 5441 532b 4e45 3f44 0a0d 5200     END.AT+SEND?...R
   d7eec:	7065 796c 4120 2b54 4553 444e 3a3f 2520     eply AT+SEND?: %
   d7efc:	0a73 4100 2b54 4553 444e 003f 7441 562b     s..AT+SEND?.At+V
   d7f0c:	5245 0d3f 000a 6572 6c70 2079 7361 566b     ER?...reply askV
   d7f1c:	5245 2928 203a 7325 000a 7361 566b 5245     ER(): %s..askVER
   d7f2c:	4100 2b74 4955 3f44 0a0d 7200 7065 796c     .At+UID?...reply
   d7f3c:	6120 6b73 4955 2844 3a29 2520 0a73 6100      askUID(): %s..a
   d7f4c:	6b73 4955 0044 5441 462b 4341 4f54 5952     skUID.AT+FACTORY
   d7f5c:	0a0d 7200 7065 796c 4120 2b54 4146 5443     ...reply AT+FACT
   d7f6c:	524f 3a59 2520 0a73 4100 2b54 4146 5443     ORY: %s..AT+FACT
   d7f7c:	524f 0059 5441 492b 5250 253d 0d69 000a     ORY.AT+IPR=%i...
   d7f8c:	6573 4974 5250 4100 2b54 5049 3f52 0a0d     setIPR.AT+IPR?..
   d7f9c:	5200 7065 796c 4120 2b54 5049 3f52 203a     .Reply AT+IPR?: 
   d7fac:	7325 000a 5441 492b 5250 003f 5441 412b     %s..AT+IPR?.AT+A
   d7fbc:	4444 4552 5353 253d 0d69 000a 6573 4174     DDRESS=%i...setA
   d7fcc:	6464 6572 7373 4100 2b54 4441 5244 5345     ddress.AT+ADDRES
   d7fdc:	3f53 0a0d 5200 7065 796c 6720 7465 6120     S?...Reply get a
   d7fec:	6464 6572 7373 203a 7325 000a 5441 412b     ddress: %s..AT+A
   d7ffc:	4444 4552 5353 003f 5441 4e2b 5445 4f57     DDRESS?.AT+NETWO
   d800c:	4b52 4449 253d 0d69 000a 5441 4e2b 5445     RKID=%i...AT+NET
   d801c:	4f57 4b52 4449 0d3f 000a 6552 6c70 2079     WORKID?...Reply 
   d802c:	5441 4e2b 5445 4f57 4b52 4449 203f 7325     AT+NETWORKID? %s
   d803c:	000a 5441 4e2b 5445 4f57 4b52 4449 003f     ..AT+NETWORKID?.
   d804c:	5441 432b 4652 504f 253d 0d69 000a 5441     AT+CRFOP=%i...AT
   d805c:	432b 4652 504f 4100 2b54 5243 4f46 3f50     +CRFOP.AT+CRFOP?
   d806c:	0a0d 5200 7065 796c 4120 2b54 5243 4f46     ...Reply AT+CRFO
   d807c:	3f50 203a 7325 000a 5441 432b 4652 504f     P?: %s..AT+CRFOP
   d808c:	003f 0000                                   ?...

000d8090 <_ZTVN5spark12NetworkClassE>:
	...
   d8098:	553f 000d 5549 000d 5553 000d 555d 000d     ?U..IU..SU..]U..
   d80a8:	5567 000d 5573 000d 557f 000d 558b 000d     gU..sU...U...U..
   d80b8:	5593 000d 559d 000d 55a7 000d               .U...U...U..

000d80c4 <_ZTVN5spark9MeshClassE>:
	...
   d80cc:	56e7 000d 56dd 000d 56d3 000d 56c9 000d     .V...V...V...V..
   d80dc:	56bd 000d 56b1 000d 56a5 000d 569d 000d     .V...V...V...V..
   d80ec:	5693 000d 5689 000d 55a7 000d               .V...V...U..

000d80f8 <_ZTV7TwoWire>:
	...
   d8100:	581f 000d 5869 000d 5841 000d 5821 000d     .X..iX..AX..!X..
   d8110:	5849 000d 5851 000d 5859 000d 5861 000d     IX..QX..YX..aX..

000d8120 <_ZTV11USARTSerial>:
	...
   d8128:	58cd 000d 591d 000d 592b 000d 63bd 000d     .X...Y..+Y...c..
   d8138:	58e1 000d 5903 000d 58ef 000d 5917 000d     .X...Y...X...Y..
   d8148:	58cf 000d 58d3 000d                         .X...X..

000d8150 <_ZTV9USBSerial>:
	...
   d8158:	59ef 000d 5a3f 000d 5a4d 000d 63bd 000d     .Y..?Z..MZ...c..
   d8168:	5a2b 000d 59f1 000d 5a07 000d 5a39 000d     +Z...Y...Z..9Z..
   d8178:	5a1d 000d 59eb 000d                         .Z...Y..

000d8180 <_ZTV9IPAddress>:
	...
   d8188:	5b0d 000d 5afd 000d 5aff 000d               .[...Z...Z..

000d8194 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d819c:	5be1 000d 5be7 000d 5c2b 000d 5bf5 000d     .[...[..+\...[..
   d81ac:	5be3 000d 005a 2b25 3330 3a64 3025 7532     .[..Z.%+03d:%02u
   d81bc:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d81cc:	5325 7a25 6100 6373 6974 656d 6200 7561     %S%z.asctime.bau
   d81dc:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d81ec:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d81fc:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d820c:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d821c:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d822c:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d823c:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d824c:	7061 0070 3025 3031 2075 5d00 0020 6425     app.%010u .] .%d
   d825c:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   d826c:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   d827c:	0020 0066 6e6c 6600 006e 6f63 6564 6400      .f.ln.fn.code.d
   d828c:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d829c:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d82ac:	7000 6e61 6369 6100 6c6c 7700 7269 6e69     .panic.all.wirin
   d82bc:	0067 7953 7473 6d65 7320 656c 7065 6320     g.System sleep c
   d82cc:	6e6f 6966 7567 6172 6974 6e6f 6920 2073     onfiguration is 
   d82dc:	6e69 6176 696c 2e64 0000 0000               invalid.....

000d82e8 <_ZTVN5spark13EthernetClassE>:
	...
   d82f0:	684b 000d 6841 000d 6837 000d 682d 000d     Kh..Ah..7h..-h..
   d8300:	6821 000d 6815 000d 6809 000d 6801 000d     !h...h...h...h..
   d8310:	67f7 000d 67ed 000d 55a7 000d               .g...g...U..

000d831c <_ZSt7nothrow>:
   d831c:	0000 0000 6f6c 0067 0000 0000               ....log.....

000d8328 <__sf_fake_stdin>:
	...

000d8348 <__sf_fake_stdout>:
	...

000d8368 <__sf_fake_stderr>:
	...
   d8388:	0043                                        C.

000d838a <link_const_variable_data_end>:
	...

000d838c <link_constructors_location>:
   d838c:	000d4ff1 	.word	0x000d4ff1
   d8390:	000d5675 	.word	0x000d5675
   d8394:	000d57b5 	.word	0x000d57b5
   d8398:	000d6319 	.word	0x000d6319
   d839c:	000d633d 	.word	0x000d633d
   d83a0:	000d6351 	.word	0x000d6351
   d83a4:	000d6501 	.word	0x000d6501
   d83a8:	000d67b9 	.word	0x000d67b9
   d83ac:	000d6855 	.word	0x000d6855
   d83b0:	000d69ed 	.word	0x000d69ed
   d83b4:	000d6a71 	.word	0x000d6a71
   d83b8:	000d6b35 	.word	0x000d6b35
   d83bc:	000d6bf9 	.word	0x000d6bf9
