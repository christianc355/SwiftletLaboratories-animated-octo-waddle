
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/superProbe/target/3.2.0/argon/superProbe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a40  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7a60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  2003e414  000b7a64  0001e414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000034c  2003e4a4  2003e4a4  0002e4a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b7af4  000b7af4  00027af4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7b1c  000b7b1c  00027b1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00117720  00000000  00000000  00027b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001302d  00000000  00000000  0013f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00002ca0  00000000  00000000  0015226d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00037f58  00000000  00000000  00154f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0003d74a  00000000  00000000  0018ce65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0012b7e9  00000000  00000000  001ca5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00039ead  00000000  00000000  002f5d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000a530  00000000  00000000  0032fc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007e80  00000000  00000000  0033a178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f927 	bl	b7284 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f92f 	bl	b72a0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e414 	.word	0x2003e414
   b404c:	000b7a64 	.word	0x000b7a64
   b4050:	2003e4a4 	.word	0x2003e4a4
   b4054:	2003e4a4 	.word	0x2003e4a4
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 ffe5 	bl	b6030 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7a3c 	.word	0x000b7a3c
   b4080:	000b7a60 	.word	0x000b7a60

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bf04 	b.w	b4e90 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fab9 	bl	b4600 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bf85 	b.w	b5fa0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 b9bb 	b.w	b5410 <malloc>

000b409a <_Znaj>:
   b409a:	f001 b9b9 	b.w	b5410 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 b9bf 	b.w	b5420 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40b4:	b513      	push	{r0, r1, r4, lr}
   b40b6:	4b05      	ldr	r3, [pc, #20]	; (b40cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b40b8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40ba:	f88d 3000 	strb.w	r3, [sp]
   b40be:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40c0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40c2:	f001 fddf 	bl	b5c84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b40c6:	4620      	mov	r0, r4
   b40c8:	b002      	add	sp, #8
   b40ca:	bd10      	pop	{r4, pc}
   b40cc:	2003e4b0 	.word	0x2003e4b0

000b40d0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	b40e      	push	{r1, r2, r3}
   b40d2:	b503      	push	{r0, r1, lr}
   b40d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40de:	f002 f8b4 	bl	b624a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40e2:	b002      	add	sp, #8
   b40e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e8:	b003      	add	sp, #12
   b40ea:	4770      	bx	lr
   b40ec:	0000      	movs	r0, r0
	...

000b40f0 <_Z11takeSamplesv>:
  System.sleep(config);
  System.reset();
}

void takeSamples()
{
   b40f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b40f2:	ed2d 8b02 	vpush	{d8}
   b40f6:	4d5e      	ldr	r5, [pc, #376]	; (b4270 <_Z11takeSamplesv+0x180>)
   b40f8:	b08b      	sub	sp, #44	; 0x2c
   b40fa:	462e      	mov	r6, r5
  uint8_t i;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
   b40fc:	2400      	movs	r4, #0
  {
    samples[i] = analogRead(THERMISTORPIN);
   b40fe:	2013      	movs	r0, #19
   b4100:	f002 fb41 	bl	b6786 <analogRead>
   b4104:	ee07 0a90 	vmov	s15, r0
   b4108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (i = 0; i < NUMSAMPLES; i++)
   b410c:	3401      	adds	r4, #1
    samples[i] = analogRead(THERMISTORPIN);
   b410e:	ece6 7a01 	vstmia	r6!, {s15}
    delay(10);
   b4112:	200a      	movs	r0, #10
  for (i = 0; i < NUMSAMPLES; i++)
   b4114:	b2e4      	uxtb	r4, r4
    delay(10);
   b4116:	f001 fff5 	bl	b6104 <delay>
  for (i = 0; i < NUMSAMPLES; i++)
   b411a:	2c64      	cmp	r4, #100	; 0x64
   b411c:	d1ef      	bne.n	b40fe <_Z11takeSamplesv+0xe>
   b411e:	eddf 7a55 	vldr	s15, [pc, #340]	; b4274 <_Z11takeSamplesv+0x184>
  }

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
   b4122:	2300      	movs	r3, #0
   b4124:	3301      	adds	r3, #1
  {
    average += samples[i];
   b4126:	ecb5 7a01 	vldmia	r5!, {s14}
  for (i = 0; i < NUMSAMPLES; i++)
   b412a:	b2db      	uxtb	r3, r3
   b412c:	2b64      	cmp	r3, #100	; 0x64
    average += samples[i];
   b412e:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (i = 0; i < NUMSAMPLES; i++)
   b4132:	d1f7      	bne.n	b4124 <_Z11takeSamplesv+0x34>
  }
  average /= NUMSAMPLES;
   b4134:	eddf 6a50 	vldr	s13, [pc, #320]	; b4278 <_Z11takeSamplesv+0x188>
   b4138:	4b50      	ldr	r3, [pc, #320]	; (b427c <_Z11takeSamplesv+0x18c>)

  // convert the value to resistance
  averageResistance = 4095 / average - 1;
  averageResistance = SERIESRESISTOR / averageResistance;

  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   b413a:	4d51      	ldr	r5, [pc, #324]	; (b4280 <_Z11takeSamplesv+0x190>)
  tempC /= BCOEFFICIENT;                         // 1/B * ln(R/Ro)
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
  tempC = 1.0 / tempC;                           // Invert
  tempC -= 273.15;                               // convert absolute temp to C

  tempF = tempC * 1.8 + 32;
   b413c:	4e51      	ldr	r6, [pc, #324]	; (b4284 <_Z11takeSamplesv+0x194>)
  average /= NUMSAMPLES;
   b413e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  averageResistance = 4095 / average - 1;
   b4142:	eddf 6a51 	vldr	s13, [pc, #324]	; b4288 <_Z11takeSamplesv+0x198>
  average /= NUMSAMPLES;
   b4146:	ed83 7a00 	vstr	s14, [r3]
  averageResistance = 4095 / average - 1;
   b414a:	eec6 7a87 	vdiv.f32	s15, s13, s14
  averageResistance = SERIESRESISTOR / averageResistance;
   b414e:	4b4f      	ldr	r3, [pc, #316]	; (b428c <_Z11takeSamplesv+0x19c>)
  averageResistance = 4095 / average - 1;
   b4150:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  averageResistance = SERIESRESISTOR / averageResistance;
   b4154:	ed9f 7a4e 	vldr	s14, [pc, #312]	; b4290 <_Z11takeSamplesv+0x1a0>
  averageResistance = 4095 / average - 1;
   b4158:	ee77 7ac8 	vsub.f32	s15, s15, s16
  averageResistance = SERIESRESISTOR / averageResistance;
   b415c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   b4160:	ee86 0a87 	vdiv.f32	s0, s13, s14
  averageResistance = SERIESRESISTOR / averageResistance;
   b4164:	edc3 6a00 	vstr	s13, [r3]
  tempC = averageResistance / THERMISTORNOMINAL; // (R/Ro)
   b4168:	ed85 0a00 	vstr	s0, [r5]
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
   b416c:	f002 fb2a 	bl	b67c4 <logf>
  tempC += 1.0 / (TEMPERATURENOMINAL + 273.15);  // + (1/To)
   b4170:	eddf 7a48 	vldr	s15, [pc, #288]	; b4294 <_Z11takeSamplesv+0x1a4>
   b4174:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b4178:	ee17 0a90 	vmov	r0, s15
   b417c:	f002 fdc2 	bl	b6d04 <__aeabi_f2d>
   b4180:	a333      	add	r3, pc, #204	; (adr r3, b4250 <_Z11takeSamplesv+0x160>)
   b4182:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4186:	f002 fc5f 	bl	b6a48 <__adddf3>
   b418a:	f003 f825 	bl	b71d8 <__aeabi_d2f>
  tempC -= 273.15;                               // convert absolute temp to C
   b418e:	ee07 0a90 	vmov	s15, r0
   b4192:	eec8 7a27 	vdiv.f32	s15, s16, s15
   b4196:	ee17 0a90 	vmov	r0, s15
   b419a:	f002 fdb3 	bl	b6d04 <__aeabi_f2d>
   b419e:	a32e      	add	r3, pc, #184	; (adr r3, b4258 <_Z11takeSamplesv+0x168>)
   b41a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41a4:	f002 fc4e 	bl	b6a44 <__aeabi_dsub>
   b41a8:	f003 f816 	bl	b71d8 <__aeabi_d2f>
   b41ac:	6028      	str	r0, [r5, #0]
  tempF = tempC * 1.8 + 32;
   b41ae:	f002 fda9 	bl	b6d04 <__aeabi_f2d>
   b41b2:	a32b      	add	r3, pc, #172	; (adr r3, b4260 <_Z11takeSamplesv+0x170>)
   b41b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41b8:	f002 fdfc 	bl	b6db4 <__aeabi_dmul>
   b41bc:	4b36      	ldr	r3, [pc, #216]	; (b4298 <_Z11takeSamplesv+0x1a8>)
   b41be:	2200      	movs	r2, #0
   b41c0:	f002 fc42 	bl	b6a48 <__adddf3>
   b41c4:	f003 f808 	bl	b71d8 <__aeabi_d2f>
   b41c8:	6030      	str	r0, [r6, #0]

  // tempF = random(0,23000)/100.0;

  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   b41ca:	f001 fb7f 	bl	b58cc <_Z16_fetch_usbserialv>
   b41ce:	4604      	mov	r4, r0
   b41d0:	6828      	ldr	r0, [r5, #0]
   b41d2:	f002 fd97 	bl	b6d04 <__aeabi_f2d>
   b41d6:	4602      	mov	r2, r0
   b41d8:	460b      	mov	r3, r1
   b41da:	6830      	ldr	r0, [r6, #0]
   b41dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b41e0:	f002 fd90 	bl	b6d04 <__aeabi_f2d>
   b41e4:	460f      	mov	r7, r1
   b41e6:	492d      	ldr	r1, [pc, #180]	; (b429c <_Z11takeSamplesv+0x1ac>)
   b41e8:	4606      	mov	r6, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b41ea:	a806      	add	r0, sp, #24
   b41ec:	680d      	ldr	r5, [r1, #0]
   b41ee:	f001 f84f 	bl	b5290 <spark_deviceID>
   b41f2:	9906      	ldr	r1, [sp, #24]
   b41f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b41f8:	e9cd 5102 	strd	r5, r1, [sp, #8]
   b41fc:	e9cd 6700 	strd	r6, r7, [sp]
   b4200:	4927      	ldr	r1, [pc, #156]	; (b42a0 <_Z11takeSamplesv+0x1b0>)

  batteryVoltage = analogRead(BATT) * 0.0011224;
   b4202:	4d28      	ldr	r5, [pc, #160]	; (b42a4 <_Z11takeSamplesv+0x1b4>)
  Serial.printf("tempC: %f tempF: %f counter: %i deviceID: %s\n", tempC, tempF, counter, System.deviceID().c_str());
   b4204:	4620      	mov	r0, r4
   b4206:	f7ff ff63 	bl	b40d0 <_ZN5Print6printfEPKcz>
   b420a:	a806      	add	r0, sp, #24
   b420c:	f002 f856 	bl	b62bc <_ZN6StringD1Ev>
  batteryVoltage = analogRead(BATT) * 0.0011224;
   b4210:	2021      	movs	r0, #33	; 0x21
   b4212:	f002 fab8 	bl	b6786 <analogRead>
   b4216:	f002 fd63 	bl	b6ce0 <__aeabi_i2d>
   b421a:	a313      	add	r3, pc, #76	; (adr r3, b4268 <_Z11takeSamplesv+0x178>)
   b421c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4220:	f002 fdc8 	bl	b6db4 <__aeabi_dmul>
   b4224:	f002 ffd8 	bl	b71d8 <__aeabi_d2f>
   b4228:	6028      	str	r0, [r5, #0]
  Serial.printf("voltage: %f\n", batteryVoltage);
   b422a:	f001 fb4f 	bl	b58cc <_Z16_fetch_usbserialv>
   b422e:	4604      	mov	r4, r0
   b4230:	6828      	ldr	r0, [r5, #0]
   b4232:	f002 fd67 	bl	b6d04 <__aeabi_f2d>
   b4236:	4602      	mov	r2, r0
   b4238:	460b      	mov	r3, r1
   b423a:	4620      	mov	r0, r4
   b423c:	491a      	ldr	r1, [pc, #104]	; (b42a8 <_Z11takeSamplesv+0x1b8>)
   b423e:	f7ff ff47 	bl	b40d0 <_ZN5Print6printfEPKcz>

  // delay(1000);
}
   b4242:	b00b      	add	sp, #44	; 0x2c
   b4244:	ecbd 8b02 	vpop	{d8}
   b4248:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b424a:	bf00      	nop
   b424c:	f3af 8000 	nop.w
   b4250:	dcb5db83 	.word	0xdcb5db83
   b4254:	3f6b79e1 	.word	0x3f6b79e1
   b4258:	66666666 	.word	0x66666666
   b425c:	40711266 	.word	0x40711266
   b4260:	cccccccd 	.word	0xcccccccd
   b4264:	3ffccccc 	.word	0x3ffccccc
   b4268:	d2c10294 	.word	0xd2c10294
   b426c:	3f5263af 	.word	0x3f5263af
   b4270:	2003e51c 	.word	0x2003e51c
   b4274:	00000000 	.word	0x00000000
   b4278:	42c80000 	.word	0x42c80000
   b427c:	2003e4b4 	.word	0x2003e4b4
   b4280:	2003e6b0 	.word	0x2003e6b0
   b4284:	2003e6b4 	.word	0x2003e6b4
   b4288:	457ff000 	.word	0x457ff000
   b428c:	2003e4b8 	.word	0x2003e4b8
   b4290:	461c4000 	.word	0x461c4000
   b4294:	4576e000 	.word	0x4576e000
   b4298:	40400000 	.word	0x40400000
   b429c:	2003e510 	.word	0x2003e510
   b42a0:	000b7448 	.word	0x000b7448
   b42a4:	2003e4c0 	.word	0x2003e4c0
   b42a8:	000b7476 	.word	0x000b7476

000b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b42ac:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b42ae:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b42b0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b42b2:	b17c      	cbz	r4, b42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b42b4:	6863      	ldr	r3, [r4, #4]
   b42b6:	3b01      	subs	r3, #1
   b42b8:	6063      	str	r3, [r4, #4]
   b42ba:	b95b      	cbnz	r3, b42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b42bc:	6823      	ldr	r3, [r4, #0]
   b42be:	4620      	mov	r0, r4
   b42c0:	689b      	ldr	r3, [r3, #8]
   b42c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b42c4:	68a3      	ldr	r3, [r4, #8]
   b42c6:	3b01      	subs	r3, #1
   b42c8:	60a3      	str	r3, [r4, #8]
   b42ca:	b91b      	cbnz	r3, b42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b42cc:	6823      	ldr	r3, [r4, #0]
   b42ce:	4620      	mov	r0, r4
   b42d0:	68db      	ldr	r3, [r3, #12]
   b42d2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b42d4:	4628      	mov	r0, r5
   b42d6:	bd38      	pop	{r3, r4, r5, pc}

000b42d8 <_Z8sendDatav>:

void sendData()
{
   b42d8:	b500      	push	{lr}
   b42da:	b089      	sub	sp, #36	; 0x24
  String reply;
   b42dc:	4922      	ldr	r1, [pc, #136]	; (b4368 <_Z8sendDatav+0x90>)
   b42de:	4668      	mov	r0, sp
   b42e0:	f002 f837 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.println(buffer);
   b42e4:	f002 f9dc 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b42e8:	4920      	ldr	r1, [pc, #128]	; (b436c <_Z8sendDatav+0x94>)
   b42ea:	f001 ff86 	bl	b61fa <_ZN5Print7printlnEPKc>
  Serial1.flush();
   b42ee:	f002 f9d7 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b42f2:	6803      	ldr	r3, [r0, #0]
   b42f4:	69db      	ldr	r3, [r3, #28]
   b42f6:	4798      	blx	r3
  delay(2300);
   b42f8:	f640 00fc 	movw	r0, #2300	; 0x8fc
   b42fc:	f001 ff02 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b4300:	f002 f9ce 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4304:	6803      	ldr	r3, [r0, #0]
   b4306:	691b      	ldr	r3, [r3, #16]
   b4308:	4798      	blx	r3
   b430a:	2800      	cmp	r0, #0
   b430c:	dd26      	ble.n	b435c <_Z8sendDatav+0x84>
  {
    reply = Serial1.readStringUntil('\n');
   b430e:	f002 f9c7 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4312:	220a      	movs	r2, #10
   b4314:	4601      	mov	r1, r0
   b4316:	a804      	add	r0, sp, #16
   b4318:	f001 ff20 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b431c:	a904      	add	r1, sp, #16
   b431e:	4668      	mov	r0, sp
   b4320:	f002 f848 	bl	b63b4 <_ZN6StringaSEOS_>
   b4324:	a804      	add	r0, sp, #16
   b4326:	f001 ffc9 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint == true)
   b432a:	4b11      	ldr	r3, [pc, #68]	; (b4370 <_Z8sendDatav+0x98>)
   b432c:	781b      	ldrb	r3, [r3, #0]
   b432e:	b153      	cbz	r3, b4346 <_Z8sendDatav+0x6e>
    {
      Serial.printf("send reply: %s\n", reply.c_str()); //+OK
   b4330:	f001 facc 	bl	b58cc <_Z16_fetch_usbserialv>
   b4334:	9a00      	ldr	r2, [sp, #0]
   b4336:	490f      	ldr	r1, [pc, #60]	; (b4374 <_Z8sendDatav+0x9c>)
   b4338:	f7ff feca 	bl	b40d0 <_ZN5Print6printfEPKcz>
      Serial.flush();
   b433c:	f001 fac6 	bl	b58cc <_Z16_fetch_usbserialv>
   b4340:	6803      	ldr	r3, [r0, #0]
   b4342:	69db      	ldr	r3, [r3, #28]
   b4344:	4798      	blx	r3
    }
    if (particlePublish)
   b4346:	4b0c      	ldr	r3, [pc, #48]	; (b4378 <_Z8sendDatav+0xa0>)
   b4348:	781b      	ldrb	r3, [r3, #0]
   b434a:	b13b      	cbz	r3, b435c <_Z8sendDatav+0x84>
    {
      Particle.publish("sendData()", reply);
   b434c:	a804      	add	r0, sp, #16
   b434e:	9a00      	ldr	r2, [sp, #0]
   b4350:	490a      	ldr	r1, [pc, #40]	; (b437c <_Z8sendDatav+0xa4>)
   b4352:	f7ff feaf 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4356:	a805      	add	r0, sp, #20
   b4358:	f7ff ffa8 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b435c:	4668      	mov	r0, sp
   b435e:	f001 ffad 	bl	b62bc <_ZN6StringD1Ev>
    }
  }
}
   b4362:	b009      	add	sp, #36	; 0x24
   b4364:	f85d fb04 	ldr.w	pc, [sp], #4
   b4368:	000b766d 	.word	0x000b766d
   b436c:	2003e4c4 	.word	0x2003e4c4
   b4370:	2003e6ac 	.word	0x2003e6ac
   b4374:	000b74fd 	.word	0x000b74fd
   b4378:	2003e514 	.word	0x2003e514
   b437c:	000b750d 	.word	0x000b750d

000b4380 <_Z12createBufferiiff>:
  setCRFOP(outputPower);
  setCPIN();
}

void createBuffer(int _sendID, int _bufferLength, float _tempF, float _batteryVoltage)
{
   b4380:	b510      	push	{r4, lr}
   b4382:	b08a      	sub	sp, #40	; 0x28
   b4384:	ee10 4a10 	vmov	r4, s0
   b4388:	9106      	str	r1, [sp, #24]
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   b438a:	4915      	ldr	r1, [pc, #84]	; (b43e0 <_Z12createBufferiiff+0x60>)
{
   b438c:	9007      	str	r0, [sp, #28]
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   b438e:	6809      	ldr	r1, [r1, #0]
   b4390:	9104      	str	r1, [sp, #16]
{
   b4392:	ee10 0a90 	vmov	r0, s1
  sprintf(buffer, "AT+SEND=%i,%i,%0.2f,%0.2f,%i\r\n", _sendID, _bufferLength, _tempF, _batteryVoltage, probeNumber);
   b4396:	f002 fcb5 	bl	b6d04 <__aeabi_f2d>
   b439a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b439e:	4620      	mov	r0, r4
   b43a0:	f002 fcb0 	bl	b6d04 <__aeabi_f2d>
   b43a4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b43a8:	e9cd 0100 	strd	r0, r1, [sp]
   b43ac:	490d      	ldr	r1, [pc, #52]	; (b43e4 <_Z12createBufferiiff+0x64>)
   b43ae:	480e      	ldr	r0, [pc, #56]	; (b43e8 <_Z12createBufferiiff+0x68>)
   b43b0:	f001 f846 	bl	b5440 <sprintf>
  if (serialPrint)
   b43b4:	4b0d      	ldr	r3, [pc, #52]	; (b43ec <_Z12createBufferiiff+0x6c>)
   b43b6:	781b      	ldrb	r3, [r3, #0]
   b43b8:	b12b      	cbz	r3, b43c6 <_Z12createBufferiiff+0x46>
  {
    Serial.printf("createBuffer: %s", buffer);
   b43ba:	f001 fa87 	bl	b58cc <_Z16_fetch_usbserialv>
   b43be:	4a0a      	ldr	r2, [pc, #40]	; (b43e8 <_Z12createBufferiiff+0x68>)
   b43c0:	490b      	ldr	r1, [pc, #44]	; (b43f0 <_Z12createBufferiiff+0x70>)
   b43c2:	f7ff fe85 	bl	b40d0 <_ZN5Print6printfEPKcz>
  }
  if (particlePublish)
   b43c6:	4b0b      	ldr	r3, [pc, #44]	; (b43f4 <_Z12createBufferiiff+0x74>)
   b43c8:	781b      	ldrb	r3, [r3, #0]
   b43ca:	b13b      	cbz	r3, b43dc <_Z12createBufferiiff+0x5c>
  {
    Particle.publish("createBuffer()", buffer);
   b43cc:	a808      	add	r0, sp, #32
   b43ce:	4a06      	ldr	r2, [pc, #24]	; (b43e8 <_Z12createBufferiiff+0x68>)
   b43d0:	4909      	ldr	r1, [pc, #36]	; (b43f8 <_Z12createBufferiiff+0x78>)
   b43d2:	f7ff fe6f 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b43d6:	a809      	add	r0, sp, #36	; 0x24
   b43d8:	f7ff ff68 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   b43dc:	b00a      	add	sp, #40	; 0x28
   b43de:	bd10      	pop	{r4, pc}
   b43e0:	2003e42c 	.word	0x2003e42c
   b43e4:	000b7518 	.word	0x000b7518
   b43e8:	2003e4c4 	.word	0x2003e4c4
   b43ec:	2003e6ac 	.word	0x2003e6ac
   b43f0:	000b7537 	.word	0x000b7537
   b43f4:	2003e514 	.word	0x2003e514
   b43f8:	000b7548 	.word	0x000b7548

000b43fc <_Z6atTestv>:

void atTest() // 1
{             // test if module responds to commands
   b43fc:	b500      	push	{lr}
   b43fe:	b089      	sub	sp, #36	; 0x24
  String reply;
   b4400:	491b      	ldr	r1, [pc, #108]	; (b4470 <_Z6atTestv+0x74>)
   b4402:	4668      	mov	r0, sp
   b4404:	f001 ffa5 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT\r\n");
   b4408:	f002 f94a 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b440c:	4919      	ldr	r1, [pc, #100]	; (b4474 <_Z6atTestv+0x78>)
   b440e:	f7ff fe5f 	bl	b40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   b4412:	20c8      	movs	r0, #200	; 0xc8
   b4414:	f001 fe76 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b4418:	f002 f942 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b441c:	6803      	ldr	r3, [r0, #0]
   b441e:	691b      	ldr	r3, [r3, #16]
   b4420:	4798      	blx	r3
   b4422:	2800      	cmp	r0, #0
   b4424:	dd1e      	ble.n	b4464 <_Z6atTestv+0x68>
  {
    reply = Serial1.readStringUntil('\n');
   b4426:	f002 f93b 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b442a:	220a      	movs	r2, #10
   b442c:	4601      	mov	r1, r0
   b442e:	a804      	add	r0, sp, #16
   b4430:	f001 fe94 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4434:	a904      	add	r1, sp, #16
   b4436:	4668      	mov	r0, sp
   b4438:	f001 ffbc 	bl	b63b4 <_ZN6StringaSEOS_>
   b443c:	a804      	add	r0, sp, #16
   b443e:	f001 ff3d 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint == true)
   b4442:	4b0d      	ldr	r3, [pc, #52]	; (b4478 <_Z6atTestv+0x7c>)
   b4444:	781b      	ldrb	r3, [r3, #0]
   b4446:	b12b      	cbz	r3, b4454 <_Z6atTestv+0x58>
    {
      Serial.printf("atTest reply: %s\n", reply.c_str()); //+OK
   b4448:	f001 fa40 	bl	b58cc <_Z16_fetch_usbserialv>
   b444c:	9a00      	ldr	r2, [sp, #0]
   b444e:	490b      	ldr	r1, [pc, #44]	; (b447c <_Z6atTestv+0x80>)
   b4450:	f7ff fe3e 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish == true)
      ;
    {
      Particle.publish("atTest()", reply);
   b4454:	a804      	add	r0, sp, #16
   b4456:	9a00      	ldr	r2, [sp, #0]
   b4458:	4909      	ldr	r1, [pc, #36]	; (b4480 <_Z6atTestv+0x84>)
   b445a:	f7ff fe2b 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b445e:	a805      	add	r0, sp, #20
   b4460:	f7ff ff24 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b4464:	4668      	mov	r0, sp
   b4466:	f001 ff29 	bl	b62bc <_ZN6StringD1Ev>
    }
  }
}
   b446a:	b009      	add	sp, #36	; 0x24
   b446c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4470:	000b766d 	.word	0x000b766d
   b4474:	000b7557 	.word	0x000b7557
   b4478:	2003e6ac 	.word	0x2003e6ac
   b447c:	000b755c 	.word	0x000b755c
   b4480:	000b756e 	.word	0x000b756e

000b4484 <_Z7setModei>:
    }
  }
}
//************************** TEST SLEEP MODE AND WAKE
void setMode(int modeParameter) // 3
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
   b4484:	b510      	push	{r4, lr}
   b4486:	b08c      	sub	sp, #48	; 0x30
  String reply;
   b4488:	4951      	ldr	r1, [pc, #324]	; (b45d0 <_Z7setModei+0x14c>)
{                               // Set the work mode between Transmit and Receive mode or Sleep mode
   b448a:	4604      	mov	r4, r0
  String reply;
   b448c:	4668      	mov	r0, sp
   b448e:	f001 ff60 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  String reply2;
   b4492:	494f      	ldr	r1, [pc, #316]	; (b45d0 <_Z7setModei+0x14c>)
   b4494:	a804      	add	r0, sp, #16
   b4496:	f001 ff5c 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  if (modeParameter == 1)
   b449a:	2c01      	cmp	r4, #1
   b449c:	f040 808e 	bne.w	b45bc <_Z7setModei+0x138>
  {
    Serial1.printf("AT+MODE=1\r\n");
   b44a0:	f002 f8fe 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b44a4:	494b      	ldr	r1, [pc, #300]	; (b45d4 <_Z7setModei+0x150>)
   b44a6:	f7ff fe13 	bl	b40d0 <_ZN5Print6printfEPKcz>
    Serial.printf("AT+MODE=1\r\n");
   b44aa:	f001 fa0f 	bl	b58cc <_Z16_fetch_usbserialv>
   b44ae:	4949      	ldr	r1, [pc, #292]	; (b45d4 <_Z7setModei+0x150>)
    Serial1.flush();
  }
  else
  {
    Serial1.printf("AT+MODE=0\r\n");
    Serial.printf("AT+MODE=0\r\n");
   b44b0:	f7ff fe0e 	bl	b40d0 <_ZN5Print6printfEPKcz>
    Serial.flush();
   b44b4:	f001 fa0a 	bl	b58cc <_Z16_fetch_usbserialv>
   b44b8:	6803      	ldr	r3, [r0, #0]
   b44ba:	69db      	ldr	r3, [r3, #28]
   b44bc:	4798      	blx	r3
    Serial1.flush();
   b44be:	f002 f8ef 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b44c2:	6803      	ldr	r3, [r0, #0]
   b44c4:	69db      	ldr	r3, [r3, #28]
   b44c6:	4798      	blx	r3
  }
  delay(200);
   b44c8:	20c8      	movs	r0, #200	; 0xc8
   b44ca:	f001 fe1b 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b44ce:	f002 f8e7 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b44d2:	6803      	ldr	r3, [r0, #0]
   b44d4:	691b      	ldr	r3, [r3, #16]
   b44d6:	4798      	blx	r3
   b44d8:	2800      	cmp	r0, #0
   b44da:	dd30      	ble.n	b453e <_Z7setModei+0xba>
  {
    reply = Serial1.readStringUntil('\n');
   b44dc:	f002 f8e0 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b44e0:	220a      	movs	r2, #10
   b44e2:	4601      	mov	r1, r0
   b44e4:	a808      	add	r0, sp, #32
   b44e6:	f001 fe39 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b44ea:	a908      	add	r1, sp, #32
   b44ec:	4668      	mov	r0, sp
   b44ee:	f001 ff61 	bl	b63b4 <_ZN6StringaSEOS_>
   b44f2:	a808      	add	r0, sp, #32
   b44f4:	f001 fee2 	bl	b62bc <_ZN6StringD1Ev>
    reply2 = Serial1.readStringUntil('\n');
   b44f8:	f002 f8d2 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b44fc:	220a      	movs	r2, #10
   b44fe:	4601      	mov	r1, r0
   b4500:	a808      	add	r0, sp, #32
   b4502:	f001 fe2b 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4506:	a908      	add	r1, sp, #32
   b4508:	a804      	add	r0, sp, #16
   b450a:	f001 ff53 	bl	b63b4 <_ZN6StringaSEOS_>
   b450e:	a808      	add	r0, sp, #32
   b4510:	f001 fed4 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b4514:	4b30      	ldr	r3, [pc, #192]	; (b45d8 <_Z7setModei+0x154>)
   b4516:	781b      	ldrb	r3, [r3, #0]
   b4518:	b133      	cbz	r3, b4528 <_Z7setModei+0xa4>
    {
      Serial.printf("atMode reply: %s reply2: %s\n", reply.c_str(), reply2.c_str());
   b451a:	f001 f9d7 	bl	b58cc <_Z16_fetch_usbserialv>
   b451e:	9b04      	ldr	r3, [sp, #16]
   b4520:	9a00      	ldr	r2, [sp, #0]
   b4522:	492e      	ldr	r1, [pc, #184]	; (b45dc <_Z7setModei+0x158>)
   b4524:	f7ff fdd4 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b4528:	4b2d      	ldr	r3, [pc, #180]	; (b45e0 <_Z7setModei+0x15c>)
   b452a:	781b      	ldrb	r3, [r3, #0]
   b452c:	b13b      	cbz	r3, b453e <_Z7setModei+0xba>
    {
      Particle.publish("atMode()", reply);
   b452e:	a808      	add	r0, sp, #32
   b4530:	9a00      	ldr	r2, [sp, #0]
   b4532:	492c      	ldr	r1, [pc, #176]	; (b45e4 <_Z7setModei+0x160>)
   b4534:	f7ff fdbe 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4538:	a809      	add	r0, sp, #36	; 0x24
   b453a:	f7ff feb7 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b453e:	4b2a      	ldr	r3, [pc, #168]	; (b45e8 <_Z7setModei+0x164>)
   b4540:	781b      	ldrb	r3, [r3, #0]
   b4542:	2b00      	cmp	r3, #0
   b4544:	d032      	beq.n	b45ac <_Z7setModei+0x128>
  {
    Serial1.printf("AT+MODE?\r\n"); // correct
   b4546:	f002 f8ab 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b454a:	4928      	ldr	r1, [pc, #160]	; (b45ec <_Z7setModei+0x168>)
   b454c:	f7ff fdc0 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b4550:	20c8      	movs	r0, #200	; 0xc8
   b4552:	f001 fdd7 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b4556:	f002 f8a3 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b455a:	6803      	ldr	r3, [r0, #0]
   b455c:	691b      	ldr	r3, [r3, #16]
   b455e:	4798      	blx	r3
   b4560:	2800      	cmp	r0, #0
   b4562:	dd23      	ble.n	b45ac <_Z7setModei+0x128>
    {
      Serial.printf("Awaiting Reply\n");
   b4564:	f001 f9b2 	bl	b58cc <_Z16_fetch_usbserialv>
   b4568:	4921      	ldr	r1, [pc, #132]	; (b45f0 <_Z7setModei+0x16c>)
   b456a:	f7ff fdb1 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b456e:	f002 f897 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4572:	220a      	movs	r2, #10
   b4574:	4601      	mov	r1, r0
   b4576:	a808      	add	r0, sp, #32
   b4578:	f001 fdf0 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b457c:	a908      	add	r1, sp, #32
   b457e:	4668      	mov	r0, sp
   b4580:	f001 ff18 	bl	b63b4 <_ZN6StringaSEOS_>
   b4584:	a808      	add	r0, sp, #32
   b4586:	f001 fe99 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+MODE?: %s\n", reply.c_str());
   b458a:	f001 f99f 	bl	b58cc <_Z16_fetch_usbserialv>
   b458e:	9a00      	ldr	r2, [sp, #0]
   b4590:	4918      	ldr	r1, [pc, #96]	; (b45f4 <_Z7setModei+0x170>)
   b4592:	f7ff fd9d 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b4596:	4b12      	ldr	r3, [pc, #72]	; (b45e0 <_Z7setModei+0x15c>)
   b4598:	781b      	ldrb	r3, [r3, #0]
   b459a:	b13b      	cbz	r3, b45ac <_Z7setModei+0x128>
      {
        Particle.publish("AT+MODE?", reply);
   b459c:	a808      	add	r0, sp, #32
   b459e:	9a00      	ldr	r2, [sp, #0]
   b45a0:	4915      	ldr	r1, [pc, #84]	; (b45f8 <_Z7setModei+0x174>)
   b45a2:	f7ff fd87 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b45a6:	a809      	add	r0, sp, #36	; 0x24
   b45a8:	f7ff fe80 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply2;
   b45ac:	a804      	add	r0, sp, #16
   b45ae:	f001 fe85 	bl	b62bc <_ZN6StringD1Ev>
  String reply;
   b45b2:	4668      	mov	r0, sp
   b45b4:	f001 fe82 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b45b8:	b00c      	add	sp, #48	; 0x30
   b45ba:	bd10      	pop	{r4, pc}
    Serial1.printf("AT+MODE=0\r\n");
   b45bc:	f002 f870 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b45c0:	490e      	ldr	r1, [pc, #56]	; (b45fc <_Z7setModei+0x178>)
   b45c2:	f7ff fd85 	bl	b40d0 <_ZN5Print6printfEPKcz>
    Serial.printf("AT+MODE=0\r\n");
   b45c6:	f001 f981 	bl	b58cc <_Z16_fetch_usbserialv>
   b45ca:	490c      	ldr	r1, [pc, #48]	; (b45fc <_Z7setModei+0x178>)
   b45cc:	e770      	b.n	b44b0 <_Z7setModei+0x2c>
   b45ce:	bf00      	nop
   b45d0:	000b766d 	.word	0x000b766d
   b45d4:	000b74df 	.word	0x000b74df
   b45d8:	2003e6ac 	.word	0x2003e6ac
   b45dc:	000b7577 	.word	0x000b7577
   b45e0:	2003e514 	.word	0x2003e514
   b45e4:	000b7594 	.word	0x000b7594
   b45e8:	2003e4b1 	.word	0x2003e4b1
   b45ec:	000b74b9 	.word	0x000b74b9
   b45f0:	000b759d 	.word	0x000b759d
   b45f4:	000b75ad 	.word	0x000b75ad
   b45f8:	000b75c1 	.word	0x000b75c1
   b45fc:	000b7483 	.word	0x000b7483

000b4600 <loop>:
{
   b4600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  setMode(0);
   b4602:	2000      	movs	r0, #0
   b4604:	f7ff ff3e 	bl	b4484 <_Z7setModei>
  delay(500);
   b4608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b460c:	f001 fd7a 	bl	b6104 <delay>
  takeSamples();
   b4610:	f7ff fd6e 	bl	b40f0 <_Z11takeSamplesv>
  createBuffer(sendID, bufferLength, tempF, batteryVoltage);
   b4614:	4b12      	ldr	r3, [pc, #72]	; (b4660 <loop+0x60>)
   b4616:	edd3 0a00 	vldr	s1, [r3]
   b461a:	4b12      	ldr	r3, [pc, #72]	; (b4664 <loop+0x64>)
   b461c:	ed93 0a00 	vldr	s0, [r3]
   b4620:	4b11      	ldr	r3, [pc, #68]	; (b4668 <loop+0x68>)
   b4622:	6819      	ldr	r1, [r3, #0]
   b4624:	4b11      	ldr	r3, [pc, #68]	; (b466c <loop+0x6c>)
   b4626:	6818      	ldr	r0, [r3, #0]
   b4628:	f7ff feaa 	bl	b4380 <_Z12createBufferiiff>
  sendData();
   b462c:	f7ff fe54 	bl	b42d8 <_Z8sendDatav>
  delay(1000);
   b4630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4634:	f001 fd66 	bl	b6104 <delay>
  setMode(1);
   b4638:	2001      	movs	r0, #1
   b463a:	f7ff ff23 	bl	b4484 <_Z7setModei>
  delay(500);
   b463e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4642:	f001 fd5f 	bl	b6104 <delay>
  System.sleep(config);
   b4646:	a801      	add	r0, sp, #4
   b4648:	4909      	ldr	r1, [pc, #36]	; (b4670 <loop+0x70>)
   b464a:	f001 ff21 	bl	b6490 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   b464e:	9801      	ldr	r0, [sp, #4]
   b4650:	b108      	cbz	r0, b4656 <loop+0x56>
            free(wakeupSource_);
   b4652:	f000 fee5 	bl	b5420 <free>
}
   b4656:	b005      	add	sp, #20
   b4658:	f85d eb04 	ldr.w	lr, [sp], #4
  System.reset();
   b465c:	f001 bf15 	b.w	b648a <_ZN11SystemClass5resetEv>
   b4660:	2003e4c0 	.word	0x2003e4c0
   b4664:	2003e6b4 	.word	0x2003e6b4
   b4668:	2003e41c 	.word	0x2003e41c
   b466c:	2003e430 	.word	0x2003e430
   b4670:	2003e4f8 	.word	0x2003e4f8

000b4674 <_Z6setIPRi>:

void setIPR(int _baudRate) // 4
{                          //  Set UART Baud rate
   b4674:	b500      	push	{lr}
   b4676:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   b4678:	4939      	ldr	r1, [pc, #228]	; (b4760 <_Z6setIPRi+0xec>)
{                          //  Set UART Baud rate
   b467a:	9001      	str	r0, [sp, #4]
  String reply;
   b467c:	a802      	add	r0, sp, #8
   b467e:	f001 fe68 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+IPR=%i\r\n", _baudRate);
   b4682:	f002 f80d 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4686:	9a01      	ldr	r2, [sp, #4]
   b4688:	4936      	ldr	r1, [pc, #216]	; (b4764 <_Z6setIPRi+0xf0>)
   b468a:	f7ff fd21 	bl	b40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   b468e:	20c8      	movs	r0, #200	; 0xc8
   b4690:	f001 fd38 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b4694:	f002 f804 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4698:	6803      	ldr	r3, [r0, #0]
   b469a:	691b      	ldr	r3, [r3, #16]
   b469c:	4798      	blx	r3
   b469e:	2800      	cmp	r0, #0
   b46a0:	dd21      	ble.n	b46e6 <_Z6setIPRi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   b46a2:	f001 fffd 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b46a6:	220a      	movs	r2, #10
   b46a8:	4601      	mov	r1, r0
   b46aa:	a806      	add	r0, sp, #24
   b46ac:	f001 fd56 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b46b0:	a906      	add	r1, sp, #24
   b46b2:	a802      	add	r0, sp, #8
   b46b4:	f001 fe7e 	bl	b63b4 <_ZN6StringaSEOS_>
   b46b8:	a806      	add	r0, sp, #24
   b46ba:	f001 fdff 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b46be:	4b2a      	ldr	r3, [pc, #168]	; (b4768 <_Z6setIPRi+0xf4>)
   b46c0:	781b      	ldrb	r3, [r3, #0]
   b46c2:	b12b      	cbz	r3, b46d0 <_Z6setIPRi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   b46c4:	f001 f902 	bl	b58cc <_Z16_fetch_usbserialv>
   b46c8:	9a02      	ldr	r2, [sp, #8]
   b46ca:	4928      	ldr	r1, [pc, #160]	; (b476c <_Z6setIPRi+0xf8>)
   b46cc:	f7ff fd00 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b46d0:	4b27      	ldr	r3, [pc, #156]	; (b4770 <_Z6setIPRi+0xfc>)
   b46d2:	781b      	ldrb	r3, [r3, #0]
   b46d4:	b13b      	cbz	r3, b46e6 <_Z6setIPRi+0x72>
    {
      Particle.publish("setIPR", reply);
   b46d6:	a806      	add	r0, sp, #24
   b46d8:	9a02      	ldr	r2, [sp, #8]
   b46da:	4926      	ldr	r1, [pc, #152]	; (b4774 <_Z6setIPRi+0x100>)
   b46dc:	f7ff fcea 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b46e0:	a807      	add	r0, sp, #28
   b46e2:	f7ff fde3 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b46e6:	4b24      	ldr	r3, [pc, #144]	; (b4778 <_Z6setIPRi+0x104>)
   b46e8:	781b      	ldrb	r3, [r3, #0]
   b46ea:	2b00      	cmp	r3, #0
   b46ec:	d032      	beq.n	b4754 <_Z6setIPRi+0xe0>
  {
    Serial1.printf("AT+IPR?\r\n"); // correct
   b46ee:	f001 ffd7 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b46f2:	4922      	ldr	r1, [pc, #136]	; (b477c <_Z6setIPRi+0x108>)
   b46f4:	f7ff fcec 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b46f8:	20c8      	movs	r0, #200	; 0xc8
   b46fa:	f001 fd03 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b46fe:	f001 ffcf 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4702:	6803      	ldr	r3, [r0, #0]
   b4704:	691b      	ldr	r3, [r3, #16]
   b4706:	4798      	blx	r3
   b4708:	2800      	cmp	r0, #0
   b470a:	dd23      	ble.n	b4754 <_Z6setIPRi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   b470c:	f001 f8de 	bl	b58cc <_Z16_fetch_usbserialv>
   b4710:	491b      	ldr	r1, [pc, #108]	; (b4780 <_Z6setIPRi+0x10c>)
   b4712:	f7ff fcdd 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b4716:	f001 ffc3 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b471a:	220a      	movs	r2, #10
   b471c:	4601      	mov	r1, r0
   b471e:	a806      	add	r0, sp, #24
   b4720:	f001 fd1c 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4724:	a906      	add	r1, sp, #24
   b4726:	a802      	add	r0, sp, #8
   b4728:	f001 fe44 	bl	b63b4 <_ZN6StringaSEOS_>
   b472c:	a806      	add	r0, sp, #24
   b472e:	f001 fdc5 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+IPR?: %s\n", reply.c_str());
   b4732:	f001 f8cb 	bl	b58cc <_Z16_fetch_usbserialv>
   b4736:	9a02      	ldr	r2, [sp, #8]
   b4738:	4912      	ldr	r1, [pc, #72]	; (b4784 <_Z6setIPRi+0x110>)
   b473a:	f7ff fcc9 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b473e:	4b0c      	ldr	r3, [pc, #48]	; (b4770 <_Z6setIPRi+0xfc>)
   b4740:	781b      	ldrb	r3, [r3, #0]
   b4742:	b13b      	cbz	r3, b4754 <_Z6setIPRi+0xe0>
      {
        Particle.publish("AT+IPR?", reply);
   b4744:	a806      	add	r0, sp, #24
   b4746:	9a02      	ldr	r2, [sp, #8]
   b4748:	490f      	ldr	r1, [pc, #60]	; (b4788 <_Z6setIPRi+0x114>)
   b474a:	f7ff fcb3 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b474e:	a807      	add	r0, sp, #28
   b4750:	f7ff fdac 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b4754:	a802      	add	r0, sp, #8
   b4756:	f001 fdb1 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b475a:	b00b      	add	sp, #44	; 0x2c
   b475c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4760:	000b766d 	.word	0x000b766d
   b4764:	000b75ca 	.word	0x000b75ca
   b4768:	2003e6ac 	.word	0x2003e6ac
   b476c:	000b7501 	.word	0x000b7501
   b4770:	2003e514 	.word	0x2003e514
   b4774:	000b75d6 	.word	0x000b75d6
   b4778:	2003e4b1 	.word	0x2003e4b1
   b477c:	000b75dd 	.word	0x000b75dd
   b4780:	000b759d 	.word	0x000b759d
   b4784:	000b75e7 	.word	0x000b75e7
   b4788:	000b75fa 	.word	0x000b75fa

000b478c <_Z12setParameteri>:

//************************** TEST RADIO PARAMETERS
void setParameter(int radioParameter) // 5
{                                     //  Set the Radio Frequency parameters
   b478c:	b500      	push	{lr}
   b478e:	b089      	sub	sp, #36	; 0x24
  String reply;
   b4790:	4938      	ldr	r1, [pc, #224]	; (b4874 <_Z12setParameteri+0xe8>)
   b4792:	4668      	mov	r0, sp
   b4794:	f001 fddd 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  // Serial1.printf("AT+PARAMETER=12,7,1,4\r\n"); // default working with v1 home base
  Serial1.printf("AT+PARAMETER=12,7,1,7\r\n"); // working with v1 home base
   b4798:	f001 ff82 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b479c:	4936      	ldr	r1, [pc, #216]	; (b4878 <_Z12setParameteri+0xec>)
   b479e:	f7ff fc97 	bl	b40d0 <_ZN5Print6printfEPKcz>
  // }
  // else if (radioParameter == 1)
  // {
  //     Serial1.printf("AT+PARAMETER=12,4,1,7\r\n"); // more than 3km //not working with v1 home base
  // }
  delay(200);
   b47a2:	20c8      	movs	r0, #200	; 0xc8
   b47a4:	f001 fcae 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b47a8:	f001 ff7a 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b47ac:	6803      	ldr	r3, [r0, #0]
   b47ae:	691b      	ldr	r3, [r3, #16]
   b47b0:	4798      	blx	r3
   b47b2:	2800      	cmp	r0, #0
   b47b4:	dd21      	ble.n	b47fa <_Z12setParameteri+0x6e>
  {
    reply = Serial1.readStringUntil('\n');
   b47b6:	f001 ff73 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b47ba:	220a      	movs	r2, #10
   b47bc:	4601      	mov	r1, r0
   b47be:	a804      	add	r0, sp, #16
   b47c0:	f001 fccc 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b47c4:	a904      	add	r1, sp, #16
   b47c6:	4668      	mov	r0, sp
   b47c8:	f001 fdf4 	bl	b63b4 <_ZN6StringaSEOS_>
   b47cc:	a804      	add	r0, sp, #16
   b47ce:	f001 fd75 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b47d2:	4b2a      	ldr	r3, [pc, #168]	; (b487c <_Z12setParameteri+0xf0>)
   b47d4:	781b      	ldrb	r3, [r3, #0]
   b47d6:	b12b      	cbz	r3, b47e4 <_Z12setParameteri+0x58>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+OK
   b47d8:	f001 f878 	bl	b58cc <_Z16_fetch_usbserialv>
   b47dc:	9a00      	ldr	r2, [sp, #0]
   b47de:	4928      	ldr	r1, [pc, #160]	; (b4880 <_Z12setParameteri+0xf4>)
   b47e0:	f7ff fc76 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b47e4:	4b27      	ldr	r3, [pc, #156]	; (b4884 <_Z12setParameteri+0xf8>)
   b47e6:	781b      	ldrb	r3, [r3, #0]
   b47e8:	b13b      	cbz	r3, b47fa <_Z12setParameteri+0x6e>
    {
      Particle.publish("setRadio", reply);
   b47ea:	a804      	add	r0, sp, #16
   b47ec:	9a00      	ldr	r2, [sp, #0]
   b47ee:	4926      	ldr	r1, [pc, #152]	; (b4888 <_Z12setParameteri+0xfc>)
   b47f0:	f7ff fc60 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b47f4:	a805      	add	r0, sp, #20
   b47f6:	f7ff fd59 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b47fa:	4b24      	ldr	r3, [pc, #144]	; (b488c <_Z12setParameteri+0x100>)
   b47fc:	781b      	ldrb	r3, [r3, #0]
   b47fe:	2b00      	cmp	r3, #0
   b4800:	d032      	beq.n	b4868 <_Z12setParameteri+0xdc>
  {
    Serial1.printf("AT+PARAMETER?\r\n");
   b4802:	f001 ff4d 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4806:	4922      	ldr	r1, [pc, #136]	; (b4890 <_Z12setParameteri+0x104>)
   b4808:	f7ff fc62 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b480c:	20c8      	movs	r0, #200	; 0xc8
   b480e:	f001 fc79 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b4812:	f001 ff45 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4816:	6803      	ldr	r3, [r0, #0]
   b4818:	691b      	ldr	r3, [r3, #16]
   b481a:	4798      	blx	r3
   b481c:	2800      	cmp	r0, #0
   b481e:	dd23      	ble.n	b4868 <_Z12setParameteri+0xdc>
    {
      Serial.printf("Awaiting Reply\n");
   b4820:	f001 f854 	bl	b58cc <_Z16_fetch_usbserialv>
   b4824:	491b      	ldr	r1, [pc, #108]	; (b4894 <_Z12setParameteri+0x108>)
   b4826:	f7ff fc53 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b482a:	f001 ff39 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b482e:	220a      	movs	r2, #10
   b4830:	4601      	mov	r1, r0
   b4832:	a804      	add	r0, sp, #16
   b4834:	f001 fc92 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4838:	a904      	add	r1, sp, #16
   b483a:	4668      	mov	r0, sp
   b483c:	f001 fdba 	bl	b63b4 <_ZN6StringaSEOS_>
   b4840:	a804      	add	r0, sp, #16
   b4842:	f001 fd3b 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+PARAMETER?: %s\n", reply.c_str()); //+PARAMETER=" "
   b4846:	f001 f841 	bl	b58cc <_Z16_fetch_usbserialv>
   b484a:	9a00      	ldr	r2, [sp, #0]
   b484c:	4912      	ldr	r1, [pc, #72]	; (b4898 <_Z12setParameteri+0x10c>)
   b484e:	f7ff fc3f 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b4852:	4b0c      	ldr	r3, [pc, #48]	; (b4884 <_Z12setParameteri+0xf8>)
   b4854:	781b      	ldrb	r3, [r3, #0]
   b4856:	b13b      	cbz	r3, b4868 <_Z12setParameteri+0xdc>
      {
        Particle.publish("setParameter?", reply);
   b4858:	a804      	add	r0, sp, #16
   b485a:	9a00      	ldr	r2, [sp, #0]
   b485c:	490f      	ldr	r1, [pc, #60]	; (b489c <_Z12setParameteri+0x110>)
   b485e:	f7ff fc29 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4862:	a805      	add	r0, sp, #20
   b4864:	f7ff fd22 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b4868:	4668      	mov	r0, sp
   b486a:	f001 fd27 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b486e:	b009      	add	sp, #36	; 0x24
   b4870:	f85d fb04 	ldr.w	pc, [sp], #4
   b4874:	000b766d 	.word	0x000b766d
   b4878:	000b7602 	.word	0x000b7602
   b487c:	2003e6ac 	.word	0x2003e6ac
   b4880:	000b7501 	.word	0x000b7501
   b4884:	2003e514 	.word	0x2003e514
   b4888:	000b761a 	.word	0x000b761a
   b488c:	2003e4b1 	.word	0x2003e4b1
   b4890:	000b7623 	.word	0x000b7623
   b4894:	000b759d 	.word	0x000b759d
   b4898:	000b7633 	.word	0x000b7633
   b489c:	000b764c 	.word	0x000b764c

000b48a0 <_Z7setBandi>:

//************************* Check band before sending to england
void setBand(int bandParameter) // 6
{                               //  Set RF Band
   b48a0:	b510      	push	{r4, lr}
   b48a2:	b088      	sub	sp, #32
   b48a4:	4604      	mov	r4, r0
  String reply;
   b48a6:	493b      	ldr	r1, [pc, #236]	; (b4994 <_Z7setBandi+0xf4>)
   b48a8:	4668      	mov	r0, sp
   b48aa:	f001 fd52 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  if (bandParameter == 0)
   b48ae:	b924      	cbnz	r4, b48ba <_Z7setBandi+0x1a>
  {
    Serial1.printf("AT+BAND=915000000\r\n"); // united states
   b48b0:	f001 fef6 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b48b4:	4938      	ldr	r1, [pc, #224]	; (b4998 <_Z7setBandi+0xf8>)
   b48b6:	f7ff fc0b 	bl	b40d0 <_ZN5Print6printfEPKcz>
  }
  else if (bandParameter == 1)
    ;
  {
    Serial1.printf("AT+BAND=868500000\r\n"); // europe
   b48ba:	f001 fef1 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b48be:	4937      	ldr	r1, [pc, #220]	; (b499c <_Z7setBandi+0xfc>)
   b48c0:	f7ff fc06 	bl	b40d0 <_ZN5Print6printfEPKcz>
  }

  delay(200);
   b48c4:	20c8      	movs	r0, #200	; 0xc8
   b48c6:	f001 fc1d 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b48ca:	f001 fee9 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b48ce:	6803      	ldr	r3, [r0, #0]
   b48d0:	691b      	ldr	r3, [r3, #16]
   b48d2:	4798      	blx	r3
   b48d4:	2800      	cmp	r0, #0
   b48d6:	dd21      	ble.n	b491c <_Z7setBandi+0x7c>
  {
    reply = Serial1.readStringUntil('\n');
   b48d8:	f001 fee2 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b48dc:	220a      	movs	r2, #10
   b48de:	4601      	mov	r1, r0
   b48e0:	a804      	add	r0, sp, #16
   b48e2:	f001 fc3b 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b48e6:	a904      	add	r1, sp, #16
   b48e8:	4668      	mov	r0, sp
   b48ea:	f001 fd63 	bl	b63b4 <_ZN6StringaSEOS_>
   b48ee:	a804      	add	r0, sp, #16
   b48f0:	f001 fce4 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b48f4:	4b2a      	ldr	r3, [pc, #168]	; (b49a0 <_Z7setBandi+0x100>)
   b48f6:	781b      	ldrb	r3, [r3, #0]
   b48f8:	b12b      	cbz	r3, b4906 <_Z7setBandi+0x66>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   b48fa:	f000 ffe7 	bl	b58cc <_Z16_fetch_usbserialv>
   b48fe:	9a00      	ldr	r2, [sp, #0]
   b4900:	4928      	ldr	r1, [pc, #160]	; (b49a4 <_Z7setBandi+0x104>)
   b4902:	f7ff fbe5 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b4906:	4b28      	ldr	r3, [pc, #160]	; (b49a8 <_Z7setBandi+0x108>)
   b4908:	781b      	ldrb	r3, [r3, #0]
   b490a:	b13b      	cbz	r3, b491c <_Z7setBandi+0x7c>
    {
      Particle.publish("setBand", reply);
   b490c:	a804      	add	r0, sp, #16
   b490e:	9a00      	ldr	r2, [sp, #0]
   b4910:	4926      	ldr	r1, [pc, #152]	; (b49ac <_Z7setBandi+0x10c>)
   b4912:	f7ff fbcf 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4916:	a805      	add	r0, sp, #20
   b4918:	f7ff fcc8 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b491c:	4b24      	ldr	r3, [pc, #144]	; (b49b0 <_Z7setBandi+0x110>)
   b491e:	781b      	ldrb	r3, [r3, #0]
   b4920:	2b00      	cmp	r3, #0
   b4922:	d032      	beq.n	b498a <_Z7setBandi+0xea>
  {
    Serial1.printf("AT+BAND?\r\n"); // correct
   b4924:	f001 febc 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4928:	4922      	ldr	r1, [pc, #136]	; (b49b4 <_Z7setBandi+0x114>)
   b492a:	f7ff fbd1 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b492e:	20c8      	movs	r0, #200	; 0xc8
   b4930:	f001 fbe8 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b4934:	f001 feb4 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4938:	6803      	ldr	r3, [r0, #0]
   b493a:	691b      	ldr	r3, [r3, #16]
   b493c:	4798      	blx	r3
   b493e:	2800      	cmp	r0, #0
   b4940:	dd23      	ble.n	b498a <_Z7setBandi+0xea>
    {
      Serial.printf("Awaiting Reply\n");
   b4942:	f000 ffc3 	bl	b58cc <_Z16_fetch_usbserialv>
   b4946:	491c      	ldr	r1, [pc, #112]	; (b49b8 <_Z7setBandi+0x118>)
   b4948:	f7ff fbc2 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b494c:	f001 fea8 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4950:	220a      	movs	r2, #10
   b4952:	4601      	mov	r1, r0
   b4954:	a804      	add	r0, sp, #16
   b4956:	f001 fc01 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b495a:	a904      	add	r1, sp, #16
   b495c:	4668      	mov	r0, sp
   b495e:	f001 fd29 	bl	b63b4 <_ZN6StringaSEOS_>
   b4962:	a804      	add	r0, sp, #16
   b4964:	f001 fcaa 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+BAND?: %s\n", reply.c_str());
   b4968:	f000 ffb0 	bl	b58cc <_Z16_fetch_usbserialv>
   b496c:	9a00      	ldr	r2, [sp, #0]
   b496e:	4913      	ldr	r1, [pc, #76]	; (b49bc <_Z7setBandi+0x11c>)
   b4970:	f7ff fbae 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b4974:	4b0c      	ldr	r3, [pc, #48]	; (b49a8 <_Z7setBandi+0x108>)
   b4976:	781b      	ldrb	r3, [r3, #0]
   b4978:	b13b      	cbz	r3, b498a <_Z7setBandi+0xea>
      {
        Particle.publish("AT+BAND?", reply);
   b497a:	a804      	add	r0, sp, #16
   b497c:	9a00      	ldr	r2, [sp, #0]
   b497e:	4910      	ldr	r1, [pc, #64]	; (b49c0 <_Z7setBandi+0x120>)
   b4980:	f7ff fb98 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4984:	a805      	add	r0, sp, #20
   b4986:	f7ff fc91 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b498a:	4668      	mov	r0, sp
   b498c:	f001 fc96 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b4990:	b008      	add	sp, #32
   b4992:	bd10      	pop	{r4, pc}
   b4994:	000b766d 	.word	0x000b766d
   b4998:	000b765a 	.word	0x000b765a
   b499c:	000b766e 	.word	0x000b766e
   b49a0:	2003e6ac 	.word	0x2003e6ac
   b49a4:	000b7501 	.word	0x000b7501
   b49a8:	2003e514 	.word	0x2003e514
   b49ac:	000b7682 	.word	0x000b7682
   b49b0:	2003e4b1 	.word	0x2003e4b1
   b49b4:	000b768a 	.word	0x000b768a
   b49b8:	000b759d 	.word	0x000b759d
   b49bc:	000b7695 	.word	0x000b7695
   b49c0:	000b76a9 	.word	0x000b76a9

000b49c4 <_Z10setAddressi>:

void setAddress(int address) // 7
{                            //  Set set module address
   b49c4:	b500      	push	{lr}
   b49c6:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   b49c8:	4939      	ldr	r1, [pc, #228]	; (b4ab0 <_Z10setAddressi+0xec>)
{                            //  Set set module address
   b49ca:	9001      	str	r0, [sp, #4]
  String reply;
   b49cc:	a802      	add	r0, sp, #8
   b49ce:	f001 fcc0 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+ADDRESS=%i\r\n", address);
   b49d2:	f001 fe65 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b49d6:	9a01      	ldr	r2, [sp, #4]
   b49d8:	4936      	ldr	r1, [pc, #216]	; (b4ab4 <_Z10setAddressi+0xf0>)
   b49da:	f7ff fb79 	bl	b40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   b49de:	20c8      	movs	r0, #200	; 0xc8
   b49e0:	f001 fb90 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b49e4:	f001 fe5c 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b49e8:	6803      	ldr	r3, [r0, #0]
   b49ea:	691b      	ldr	r3, [r3, #16]
   b49ec:	4798      	blx	r3
   b49ee:	2800      	cmp	r0, #0
   b49f0:	dd21      	ble.n	b4a36 <_Z10setAddressi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   b49f2:	f001 fe55 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b49f6:	220a      	movs	r2, #10
   b49f8:	4601      	mov	r1, r0
   b49fa:	a806      	add	r0, sp, #24
   b49fc:	f001 fbae 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4a00:	a906      	add	r1, sp, #24
   b4a02:	a802      	add	r0, sp, #8
   b4a04:	f001 fcd6 	bl	b63b4 <_ZN6StringaSEOS_>
   b4a08:	a806      	add	r0, sp, #24
   b4a0a:	f001 fc57 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b4a0e:	4b2a      	ldr	r3, [pc, #168]	; (b4ab8 <_Z10setAddressi+0xf4>)
   b4a10:	781b      	ldrb	r3, [r3, #0]
   b4a12:	b12b      	cbz	r3, b4a20 <_Z10setAddressi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   b4a14:	f000 ff5a 	bl	b58cc <_Z16_fetch_usbserialv>
   b4a18:	9a02      	ldr	r2, [sp, #8]
   b4a1a:	4928      	ldr	r1, [pc, #160]	; (b4abc <_Z10setAddressi+0xf8>)
   b4a1c:	f7ff fb58 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b4a20:	4b27      	ldr	r3, [pc, #156]	; (b4ac0 <_Z10setAddressi+0xfc>)
   b4a22:	781b      	ldrb	r3, [r3, #0]
   b4a24:	b13b      	cbz	r3, b4a36 <_Z10setAddressi+0x72>
    {
      Particle.publish("setAddress", reply);
   b4a26:	a806      	add	r0, sp, #24
   b4a28:	9a02      	ldr	r2, [sp, #8]
   b4a2a:	4926      	ldr	r1, [pc, #152]	; (b4ac4 <_Z10setAddressi+0x100>)
   b4a2c:	f7ff fb42 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4a30:	a807      	add	r0, sp, #28
   b4a32:	f7ff fc3b 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b4a36:	4b24      	ldr	r3, [pc, #144]	; (b4ac8 <_Z10setAddressi+0x104>)
   b4a38:	781b      	ldrb	r3, [r3, #0]
   b4a3a:	2b00      	cmp	r3, #0
   b4a3c:	d032      	beq.n	b4aa4 <_Z10setAddressi+0xe0>
  {
    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b4a3e:	f001 fe2f 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4a42:	4922      	ldr	r1, [pc, #136]	; (b4acc <_Z10setAddressi+0x108>)
   b4a44:	f7ff fb44 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b4a48:	20c8      	movs	r0, #200	; 0xc8
   b4a4a:	f001 fb5b 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b4a4e:	f001 fe27 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4a52:	6803      	ldr	r3, [r0, #0]
   b4a54:	691b      	ldr	r3, [r3, #16]
   b4a56:	4798      	blx	r3
   b4a58:	2800      	cmp	r0, #0
   b4a5a:	dd23      	ble.n	b4aa4 <_Z10setAddressi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   b4a5c:	f000 ff36 	bl	b58cc <_Z16_fetch_usbserialv>
   b4a60:	491b      	ldr	r1, [pc, #108]	; (b4ad0 <_Z10setAddressi+0x10c>)
   b4a62:	f7ff fb35 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b4a66:	f001 fe1b 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4a6a:	220a      	movs	r2, #10
   b4a6c:	4601      	mov	r1, r0
   b4a6e:	a806      	add	r0, sp, #24
   b4a70:	f001 fb74 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4a74:	a906      	add	r1, sp, #24
   b4a76:	a802      	add	r0, sp, #8
   b4a78:	f001 fc9c 	bl	b63b4 <_ZN6StringaSEOS_>
   b4a7c:	a806      	add	r0, sp, #24
   b4a7e:	f001 fc1d 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply get address: %s\n", reply.c_str());
   b4a82:	f000 ff23 	bl	b58cc <_Z16_fetch_usbserialv>
   b4a86:	9a02      	ldr	r2, [sp, #8]
   b4a88:	4912      	ldr	r1, [pc, #72]	; (b4ad4 <_Z10setAddressi+0x110>)
   b4a8a:	f7ff fb21 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b4a8e:	4b0c      	ldr	r3, [pc, #48]	; (b4ac0 <_Z10setAddressi+0xfc>)
   b4a90:	781b      	ldrb	r3, [r3, #0]
   b4a92:	b13b      	cbz	r3, b4aa4 <_Z10setAddressi+0xe0>
      {
        Particle.publish("AT+ADDRESS?", reply);
   b4a94:	a806      	add	r0, sp, #24
   b4a96:	9a02      	ldr	r2, [sp, #8]
   b4a98:	490f      	ldr	r1, [pc, #60]	; (b4ad8 <_Z10setAddressi+0x114>)
   b4a9a:	f7ff fb0b 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4a9e:	a807      	add	r0, sp, #28
   b4aa0:	f7ff fc04 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b4aa4:	a802      	add	r0, sp, #8
   b4aa6:	f001 fc09 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b4aaa:	b00b      	add	sp, #44	; 0x2c
   b4aac:	f85d fb04 	ldr.w	pc, [sp], #4
   b4ab0:	000b766d 	.word	0x000b766d
   b4ab4:	000b76b2 	.word	0x000b76b2
   b4ab8:	2003e6ac 	.word	0x2003e6ac
   b4abc:	000b7501 	.word	0x000b7501
   b4ac0:	2003e514 	.word	0x2003e514
   b4ac4:	000b76c2 	.word	0x000b76c2
   b4ac8:	2003e4b1 	.word	0x2003e4b1
   b4acc:	000b76cd 	.word	0x000b76cd
   b4ad0:	000b759d 	.word	0x000b759d
   b4ad4:	000b76db 	.word	0x000b76db
   b4ad8:	000b76f2 	.word	0x000b76f2

000b4adc <_Z12setNetworkIDi>:

void setNetworkID(int networkID) // 8
{                                //  Set set module network ID
   b4adc:	b500      	push	{lr}
   b4ade:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   b4ae0:	4939      	ldr	r1, [pc, #228]	; (b4bc8 <_Z12setNetworkIDi+0xec>)
{                                //  Set set module network ID
   b4ae2:	9001      	str	r0, [sp, #4]
  String reply;
   b4ae4:	a802      	add	r0, sp, #8
   b4ae6:	f001 fc34 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+NETWORKID=%i\r\n", networkID);
   b4aea:	f001 fdd9 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4aee:	9a01      	ldr	r2, [sp, #4]
   b4af0:	4936      	ldr	r1, [pc, #216]	; (b4bcc <_Z12setNetworkIDi+0xf0>)
   b4af2:	f7ff faed 	bl	b40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   b4af6:	20c8      	movs	r0, #200	; 0xc8
   b4af8:	f001 fb04 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b4afc:	f001 fdd0 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4b00:	6803      	ldr	r3, [r0, #0]
   b4b02:	691b      	ldr	r3, [r3, #16]
   b4b04:	4798      	blx	r3
   b4b06:	2800      	cmp	r0, #0
   b4b08:	dd21      	ble.n	b4b4e <_Z12setNetworkIDi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   b4b0a:	f001 fdc9 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4b0e:	220a      	movs	r2, #10
   b4b10:	4601      	mov	r1, r0
   b4b12:	a806      	add	r0, sp, #24
   b4b14:	f001 fb22 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4b18:	a906      	add	r1, sp, #24
   b4b1a:	a802      	add	r0, sp, #8
   b4b1c:	f001 fc4a 	bl	b63b4 <_ZN6StringaSEOS_>
   b4b20:	a806      	add	r0, sp, #24
   b4b22:	f001 fbcb 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b4b26:	4b2a      	ldr	r3, [pc, #168]	; (b4bd0 <_Z12setNetworkIDi+0xf4>)
   b4b28:	781b      	ldrb	r3, [r3, #0]
   b4b2a:	b12b      	cbz	r3, b4b38 <_Z12setNetworkIDi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str()); //+BAND=" "
   b4b2c:	f000 fece 	bl	b58cc <_Z16_fetch_usbserialv>
   b4b30:	9a02      	ldr	r2, [sp, #8]
   b4b32:	4928      	ldr	r1, [pc, #160]	; (b4bd4 <_Z12setNetworkIDi+0xf8>)
   b4b34:	f7ff facc 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b4b38:	4b27      	ldr	r3, [pc, #156]	; (b4bd8 <_Z12setNetworkIDi+0xfc>)
   b4b3a:	781b      	ldrb	r3, [r3, #0]
   b4b3c:	b13b      	cbz	r3, b4b4e <_Z12setNetworkIDi+0x72>
    {
      Particle.publish("setAddress", reply);
   b4b3e:	a806      	add	r0, sp, #24
   b4b40:	9a02      	ldr	r2, [sp, #8]
   b4b42:	4926      	ldr	r1, [pc, #152]	; (b4bdc <_Z12setNetworkIDi+0x100>)
   b4b44:	f7ff fab6 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4b48:	a807      	add	r0, sp, #28
   b4b4a:	f7ff fbaf 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b4b4e:	4b24      	ldr	r3, [pc, #144]	; (b4be0 <_Z12setNetworkIDi+0x104>)
   b4b50:	781b      	ldrb	r3, [r3, #0]
   b4b52:	2b00      	cmp	r3, #0
   b4b54:	d032      	beq.n	b4bbc <_Z12setNetworkIDi+0xe0>
  {
    Serial1.printf("AT+NETWORKID?\r\n");
   b4b56:	f001 fda3 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4b5a:	4922      	ldr	r1, [pc, #136]	; (b4be4 <_Z12setNetworkIDi+0x108>)
   b4b5c:	f7ff fab8 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b4b60:	20c8      	movs	r0, #200	; 0xc8
   b4b62:	f001 facf 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b4b66:	f001 fd9b 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4b6a:	6803      	ldr	r3, [r0, #0]
   b4b6c:	691b      	ldr	r3, [r3, #16]
   b4b6e:	4798      	blx	r3
   b4b70:	2800      	cmp	r0, #0
   b4b72:	dd23      	ble.n	b4bbc <_Z12setNetworkIDi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   b4b74:	f000 feaa 	bl	b58cc <_Z16_fetch_usbserialv>
   b4b78:	491b      	ldr	r1, [pc, #108]	; (b4be8 <_Z12setNetworkIDi+0x10c>)
   b4b7a:	f7ff faa9 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b4b7e:	f001 fd8f 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4b82:	220a      	movs	r2, #10
   b4b84:	4601      	mov	r1, r0
   b4b86:	a806      	add	r0, sp, #24
   b4b88:	f001 fae8 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4b8c:	a906      	add	r1, sp, #24
   b4b8e:	a802      	add	r0, sp, #8
   b4b90:	f001 fc10 	bl	b63b4 <_ZN6StringaSEOS_>
   b4b94:	a806      	add	r0, sp, #24
   b4b96:	f001 fb91 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+NETWORKID? %s\n", reply.c_str());
   b4b9a:	f000 fe97 	bl	b58cc <_Z16_fetch_usbserialv>
   b4b9e:	9a02      	ldr	r2, [sp, #8]
   b4ba0:	4912      	ldr	r1, [pc, #72]	; (b4bec <_Z12setNetworkIDi+0x110>)
   b4ba2:	f7ff fa95 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b4ba6:	4b0c      	ldr	r3, [pc, #48]	; (b4bd8 <_Z12setNetworkIDi+0xfc>)
   b4ba8:	781b      	ldrb	r3, [r3, #0]
   b4baa:	b13b      	cbz	r3, b4bbc <_Z12setNetworkIDi+0xe0>
      {
        Particle.publish("AT+NETWORKID?", reply);
   b4bac:	a806      	add	r0, sp, #24
   b4bae:	9a02      	ldr	r2, [sp, #8]
   b4bb0:	490f      	ldr	r1, [pc, #60]	; (b4bf0 <_Z12setNetworkIDi+0x114>)
   b4bb2:	f7ff fa7f 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4bb6:	a807      	add	r0, sp, #28
   b4bb8:	f7ff fb78 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b4bbc:	a802      	add	r0, sp, #8
   b4bbe:	f001 fb7d 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b4bc2:	b00b      	add	sp, #44	; 0x2c
   b4bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   b4bc8:	000b766d 	.word	0x000b766d
   b4bcc:	000b76fe 	.word	0x000b76fe
   b4bd0:	2003e6ac 	.word	0x2003e6ac
   b4bd4:	000b7501 	.word	0x000b7501
   b4bd8:	2003e514 	.word	0x2003e514
   b4bdc:	000b76c2 	.word	0x000b76c2
   b4be0:	2003e4b1 	.word	0x2003e4b1
   b4be4:	000b7710 	.word	0x000b7710
   b4be8:	000b759d 	.word	0x000b759d
   b4bec:	000b7720 	.word	0x000b7720
   b4bf0:	000b7738 	.word	0x000b7738

000b4bf4 <_Z7setCPINv>:

void setCPIN() // 9
{              //  set password
   b4bf4:	b500      	push	{lr}
   b4bf6:	b08d      	sub	sp, #52	; 0x34
  String CPIN = "BA4104032968BA1114299079021594AA";
   b4bf8:	493c      	ldr	r1, [pc, #240]	; (b4cec <_Z7setCPINv+0xf8>)
   b4bfa:	4668      	mov	r0, sp
   b4bfc:	f001 fba9 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  String reply;
   b4c00:	493b      	ldr	r1, [pc, #236]	; (b4cf0 <_Z7setCPINv+0xfc>)
   b4c02:	a804      	add	r0, sp, #16
   b4c04:	f001 fba5 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+CPIN=%s\r\n", CPIN.c_str());
   b4c08:	f001 fd4a 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4c0c:	9a00      	ldr	r2, [sp, #0]
   b4c0e:	4939      	ldr	r1, [pc, #228]	; (b4cf4 <_Z7setCPINv+0x100>)
   b4c10:	f7ff fa5e 	bl	b40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   b4c14:	20c8      	movs	r0, #200	; 0xc8
   b4c16:	f001 fa75 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b4c1a:	f001 fd41 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4c1e:	6803      	ldr	r3, [r0, #0]
   b4c20:	691b      	ldr	r3, [r3, #16]
   b4c22:	4798      	blx	r3
   b4c24:	2800      	cmp	r0, #0
   b4c26:	dd21      	ble.n	b4c6c <_Z7setCPINv+0x78>
  {
    reply = Serial1.readStringUntil('\n');
   b4c28:	f001 fd3a 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4c2c:	220a      	movs	r2, #10
   b4c2e:	4601      	mov	r1, r0
   b4c30:	a808      	add	r0, sp, #32
   b4c32:	f001 fa93 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4c36:	a908      	add	r1, sp, #32
   b4c38:	a804      	add	r0, sp, #16
   b4c3a:	f001 fbbb 	bl	b63b4 <_ZN6StringaSEOS_>
   b4c3e:	a808      	add	r0, sp, #32
   b4c40:	f001 fb3c 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b4c44:	4b2c      	ldr	r3, [pc, #176]	; (b4cf8 <_Z7setCPINv+0x104>)
   b4c46:	781b      	ldrb	r3, [r3, #0]
   b4c48:	b12b      	cbz	r3, b4c56 <_Z7setCPINv+0x62>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   b4c4a:	f000 fe3f 	bl	b58cc <_Z16_fetch_usbserialv>
   b4c4e:	9a04      	ldr	r2, [sp, #16]
   b4c50:	492a      	ldr	r1, [pc, #168]	; (b4cfc <_Z7setCPINv+0x108>)
   b4c52:	f7ff fa3d 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b4c56:	4b2a      	ldr	r3, [pc, #168]	; (b4d00 <_Z7setCPINv+0x10c>)
   b4c58:	781b      	ldrb	r3, [r3, #0]
   b4c5a:	b13b      	cbz	r3, b4c6c <_Z7setCPINv+0x78>
    {
      Particle.publish("setCPIN", reply);
   b4c5c:	a808      	add	r0, sp, #32
   b4c5e:	9a04      	ldr	r2, [sp, #16]
   b4c60:	4928      	ldr	r1, [pc, #160]	; (b4d04 <_Z7setCPINv+0x110>)
   b4c62:	f7ff fa27 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4c66:	a809      	add	r0, sp, #36	; 0x24
   b4c68:	f7ff fb20 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b4c6c:	4b26      	ldr	r3, [pc, #152]	; (b4d08 <_Z7setCPINv+0x114>)
   b4c6e:	781b      	ldrb	r3, [r3, #0]
   b4c70:	2b00      	cmp	r3, #0
   b4c72:	d032      	beq.n	b4cda <_Z7setCPINv+0xe6>
  {
    Serial1.printf("AT+CPIN?\r\n");
   b4c74:	f001 fd14 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4c78:	4924      	ldr	r1, [pc, #144]	; (b4d0c <_Z7setCPINv+0x118>)
   b4c7a:	f7ff fa29 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b4c7e:	20c8      	movs	r0, #200	; 0xc8
   b4c80:	f001 fa40 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b4c84:	f001 fd0c 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4c88:	6803      	ldr	r3, [r0, #0]
   b4c8a:	691b      	ldr	r3, [r3, #16]
   b4c8c:	4798      	blx	r3
   b4c8e:	2800      	cmp	r0, #0
   b4c90:	dd23      	ble.n	b4cda <_Z7setCPINv+0xe6>
    {
      Serial.printf("Awaiting Reply\n");
   b4c92:	f000 fe1b 	bl	b58cc <_Z16_fetch_usbserialv>
   b4c96:	491e      	ldr	r1, [pc, #120]	; (b4d10 <_Z7setCPINv+0x11c>)
   b4c98:	f7ff fa1a 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b4c9c:	f001 fd00 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4ca0:	220a      	movs	r2, #10
   b4ca2:	4601      	mov	r1, r0
   b4ca4:	a808      	add	r0, sp, #32
   b4ca6:	f001 fa59 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4caa:	a908      	add	r1, sp, #32
   b4cac:	a804      	add	r0, sp, #16
   b4cae:	f001 fb81 	bl	b63b4 <_ZN6StringaSEOS_>
   b4cb2:	a808      	add	r0, sp, #32
   b4cb4:	f001 fb02 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply CPIN: %s\n", reply.c_str());
   b4cb8:	f000 fe08 	bl	b58cc <_Z16_fetch_usbserialv>
   b4cbc:	9a04      	ldr	r2, [sp, #16]
   b4cbe:	4915      	ldr	r1, [pc, #84]	; (b4d14 <_Z7setCPINv+0x120>)
   b4cc0:	f7ff fa06 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b4cc4:	4b0e      	ldr	r3, [pc, #56]	; (b4d00 <_Z7setCPINv+0x10c>)
   b4cc6:	781b      	ldrb	r3, [r3, #0]
   b4cc8:	b13b      	cbz	r3, b4cda <_Z7setCPINv+0xe6>
      {
        Particle.publish("AT+CPIN?", reply);
   b4cca:	a808      	add	r0, sp, #32
   b4ccc:	9a04      	ldr	r2, [sp, #16]
   b4cce:	4912      	ldr	r1, [pc, #72]	; (b4d18 <_Z7setCPINv+0x124>)
   b4cd0:	f7ff f9f0 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4cd4:	a809      	add	r0, sp, #36	; 0x24
   b4cd6:	f7ff fae9 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b4cda:	a804      	add	r0, sp, #16
   b4cdc:	f001 faee 	bl	b62bc <_ZN6StringD1Ev>
  String CPIN = "BA4104032968BA1114299079021594AA";
   b4ce0:	4668      	mov	r0, sp
   b4ce2:	f001 faeb 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b4ce6:	b00d      	add	sp, #52	; 0x34
   b4ce8:	f85d fb04 	ldr.w	pc, [sp], #4
   b4cec:	000b7746 	.word	0x000b7746
   b4cf0:	000b766d 	.word	0x000b766d
   b4cf4:	000b7767 	.word	0x000b7767
   b4cf8:	2003e6ac 	.word	0x2003e6ac
   b4cfc:	000b7501 	.word	0x000b7501
   b4d00:	2003e514 	.word	0x2003e514
   b4d04:	000b7774 	.word	0x000b7774
   b4d08:	2003e4b1 	.word	0x2003e4b1
   b4d0c:	000b777c 	.word	0x000b777c
   b4d10:	000b759d 	.word	0x000b759d
   b4d14:	000b7787 	.word	0x000b7787
   b4d18:	000b7797 	.word	0x000b7797

000b4d1c <_Z8setCRFOPi>:

void setCRFOP(int outputPower) // 10
{                              //  set RF output power
   b4d1c:	b500      	push	{lr}
   b4d1e:	b08b      	sub	sp, #44	; 0x2c
  String reply;
   b4d20:	4939      	ldr	r1, [pc, #228]	; (b4e08 <_Z8setCRFOPi+0xec>)
{                              //  set RF output power
   b4d22:	9001      	str	r0, [sp, #4]
  String reply;
   b4d24:	a802      	add	r0, sp, #8
   b4d26:	f001 fb14 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial1.printf("AT+CRFOP=%i\r\n", outputPower);
   b4d2a:	f001 fcb9 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4d2e:	9a01      	ldr	r2, [sp, #4]
   b4d30:	4936      	ldr	r1, [pc, #216]	; (b4e0c <_Z8setCRFOPi+0xf0>)
   b4d32:	f7ff f9cd 	bl	b40d0 <_ZN5Print6printfEPKcz>
  delay(200);
   b4d36:	20c8      	movs	r0, #200	; 0xc8
   b4d38:	f001 f9e4 	bl	b6104 <delay>
  if (Serial1.available() > 0)
   b4d3c:	f001 fcb0 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4d40:	6803      	ldr	r3, [r0, #0]
   b4d42:	691b      	ldr	r3, [r3, #16]
   b4d44:	4798      	blx	r3
   b4d46:	2800      	cmp	r0, #0
   b4d48:	dd21      	ble.n	b4d8e <_Z8setCRFOPi+0x72>
  {
    reply = Serial1.readStringUntil('\n');
   b4d4a:	f001 fca9 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4d4e:	220a      	movs	r2, #10
   b4d50:	4601      	mov	r1, r0
   b4d52:	a806      	add	r0, sp, #24
   b4d54:	f001 fa02 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4d58:	a906      	add	r1, sp, #24
   b4d5a:	a802      	add	r0, sp, #8
   b4d5c:	f001 fb2a 	bl	b63b4 <_ZN6StringaSEOS_>
   b4d60:	a806      	add	r0, sp, #24
   b4d62:	f001 faab 	bl	b62bc <_ZN6StringD1Ev>

    if (serialPrint)
   b4d66:	4b2a      	ldr	r3, [pc, #168]	; (b4e10 <_Z8setCRFOPi+0xf4>)
   b4d68:	781b      	ldrb	r3, [r3, #0]
   b4d6a:	b12b      	cbz	r3, b4d78 <_Z8setCRFOPi+0x5c>
    {
      Serial.printf(" reply: %s\n", reply.c_str());
   b4d6c:	f000 fdae 	bl	b58cc <_Z16_fetch_usbserialv>
   b4d70:	9a02      	ldr	r2, [sp, #8]
   b4d72:	4928      	ldr	r1, [pc, #160]	; (b4e14 <_Z8setCRFOPi+0xf8>)
   b4d74:	f7ff f9ac 	bl	b40d0 <_ZN5Print6printfEPKcz>
    }
    if (particlePublish)
   b4d78:	4b27      	ldr	r3, [pc, #156]	; (b4e18 <_Z8setCRFOPi+0xfc>)
   b4d7a:	781b      	ldrb	r3, [r3, #0]
   b4d7c:	b13b      	cbz	r3, b4d8e <_Z8setCRFOPi+0x72>
    {
      Particle.publish("AT+CRFOP", reply);
   b4d7e:	a806      	add	r0, sp, #24
   b4d80:	9a02      	ldr	r2, [sp, #8]
   b4d82:	4926      	ldr	r1, [pc, #152]	; (b4e1c <_Z8setCRFOPi+0x100>)
   b4d84:	f7ff f996 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4d88:	a807      	add	r0, sp, #28
   b4d8a:	f7ff fa8f 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (askSetting)
   b4d8e:	4b24      	ldr	r3, [pc, #144]	; (b4e20 <_Z8setCRFOPi+0x104>)
   b4d90:	781b      	ldrb	r3, [r3, #0]
   b4d92:	2b00      	cmp	r3, #0
   b4d94:	d032      	beq.n	b4dfc <_Z8setCRFOPi+0xe0>
  {
    Serial1.printf("AT+CRFOP?\r\n");
   b4d96:	f001 fc83 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4d9a:	4922      	ldr	r1, [pc, #136]	; (b4e24 <_Z8setCRFOPi+0x108>)
   b4d9c:	f7ff f998 	bl	b40d0 <_ZN5Print6printfEPKcz>
    delay(200);
   b4da0:	20c8      	movs	r0, #200	; 0xc8
   b4da2:	f001 f9af 	bl	b6104 <delay>
    if (Serial1.available() > 0)
   b4da6:	f001 fc7b 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4daa:	6803      	ldr	r3, [r0, #0]
   b4dac:	691b      	ldr	r3, [r3, #16]
   b4dae:	4798      	blx	r3
   b4db0:	2800      	cmp	r0, #0
   b4db2:	dd23      	ble.n	b4dfc <_Z8setCRFOPi+0xe0>
    {
      Serial.printf("Awaiting Reply\n");
   b4db4:	f000 fd8a 	bl	b58cc <_Z16_fetch_usbserialv>
   b4db8:	491b      	ldr	r1, [pc, #108]	; (b4e28 <_Z8setCRFOPi+0x10c>)
   b4dba:	f7ff f989 	bl	b40d0 <_ZN5Print6printfEPKcz>
      reply = Serial1.readStringUntil('\n');
   b4dbe:	f001 fc6f 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4dc2:	220a      	movs	r2, #10
   b4dc4:	4601      	mov	r1, r0
   b4dc6:	a806      	add	r0, sp, #24
   b4dc8:	f001 f9c8 	bl	b615c <_ZN6Stream15readStringUntilEc>
   b4dcc:	a906      	add	r1, sp, #24
   b4dce:	a802      	add	r0, sp, #8
   b4dd0:	f001 faf0 	bl	b63b4 <_ZN6StringaSEOS_>
   b4dd4:	a806      	add	r0, sp, #24
   b4dd6:	f001 fa71 	bl	b62bc <_ZN6StringD1Ev>
      Serial.printf("Reply AT+CRFOP?: %s\n", reply.c_str());
   b4dda:	f000 fd77 	bl	b58cc <_Z16_fetch_usbserialv>
   b4dde:	9a02      	ldr	r2, [sp, #8]
   b4de0:	4912      	ldr	r1, [pc, #72]	; (b4e2c <_Z8setCRFOPi+0x110>)
   b4de2:	f7ff f975 	bl	b40d0 <_ZN5Print6printfEPKcz>
      if (particlePublish)
   b4de6:	4b0c      	ldr	r3, [pc, #48]	; (b4e18 <_Z8setCRFOPi+0xfc>)
   b4de8:	781b      	ldrb	r3, [r3, #0]
   b4dea:	b13b      	cbz	r3, b4dfc <_Z8setCRFOPi+0xe0>
      {
        Particle.publish("AT+CRFOP?", reply);
   b4dec:	a806      	add	r0, sp, #24
   b4dee:	9a02      	ldr	r2, [sp, #8]
   b4df0:	490f      	ldr	r1, [pc, #60]	; (b4e30 <_Z8setCRFOPi+0x114>)
   b4df2:	f7ff f95f 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4df6:	a807      	add	r0, sp, #28
   b4df8:	f7ff fa58 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String reply;
   b4dfc:	a802      	add	r0, sp, #8
   b4dfe:	f001 fa5d 	bl	b62bc <_ZN6StringD1Ev>
      }
    }
  }
}
   b4e02:	b00b      	add	sp, #44	; 0x2c
   b4e04:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e08:	000b766d 	.word	0x000b766d
   b4e0c:	000b77a0 	.word	0x000b77a0
   b4e10:	2003e6ac 	.word	0x2003e6ac
   b4e14:	000b7501 	.word	0x000b7501
   b4e18:	2003e514 	.word	0x2003e514
   b4e1c:	000b77ae 	.word	0x000b77ae
   b4e20:	2003e4b1 	.word	0x2003e4b1
   b4e24:	000b77b7 	.word	0x000b77b7
   b4e28:	000b759d 	.word	0x000b759d
   b4e2c:	000b77c3 	.word	0x000b77c3
   b4e30:	000b77d8 	.word	0x000b77d8

000b4e34 <_Z10radioSetupv>:
{
   b4e34:	b508      	push	{r3, lr}
  setMode(0); // turn on transmit and receive mode
   b4e36:	2000      	movs	r0, #0
   b4e38:	f7ff fb24 	bl	b4484 <_Z7setModei>
  atTest();
   b4e3c:	f7ff fade 	bl	b43fc <_Z6atTestv>
  setAddress(address); // between 0-65535
   b4e40:	4b0d      	ldr	r3, [pc, #52]	; (b4e78 <_Z10radioSetupv+0x44>)
   b4e42:	6818      	ldr	r0, [r3, #0]
   b4e44:	f7ff fdbe 	bl	b49c4 <_Z10setAddressi>
  setNetworkID(networkID);
   b4e48:	4b0c      	ldr	r3, [pc, #48]	; (b4e7c <_Z10radioSetupv+0x48>)
   b4e4a:	6818      	ldr	r0, [r3, #0]
   b4e4c:	f7ff fe46 	bl	b4adc <_Z12setNetworkIDi>
  setBand(bandParameter);
   b4e50:	4b0b      	ldr	r3, [pc, #44]	; (b4e80 <_Z10radioSetupv+0x4c>)
   b4e52:	6818      	ldr	r0, [r3, #0]
   b4e54:	f7ff fd24 	bl	b48a0 <_Z7setBandi>
  setParameter(radioParameter);
   b4e58:	4b0a      	ldr	r3, [pc, #40]	; (b4e84 <_Z10radioSetupv+0x50>)
   b4e5a:	6818      	ldr	r0, [r3, #0]
   b4e5c:	f7ff fc96 	bl	b478c <_Z12setParameteri>
  setIPR(baudRate);
   b4e60:	4b09      	ldr	r3, [pc, #36]	; (b4e88 <_Z10radioSetupv+0x54>)
   b4e62:	6818      	ldr	r0, [r3, #0]
   b4e64:	f7ff fc06 	bl	b4674 <_Z6setIPRi>
  setCRFOP(outputPower);
   b4e68:	4b08      	ldr	r3, [pc, #32]	; (b4e8c <_Z10radioSetupv+0x58>)
   b4e6a:	6818      	ldr	r0, [r3, #0]
   b4e6c:	f7ff ff56 	bl	b4d1c <_Z8setCRFOPi>
}
   b4e70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setCPIN();
   b4e74:	f7ff bebe 	b.w	b4bf4 <_Z7setCPINv>
   b4e78:	2003e414 	.word	0x2003e414
   b4e7c:	2003e424 	.word	0x2003e424
   b4e80:	2003e4bc 	.word	0x2003e4bc
   b4e84:	2003e518 	.word	0x2003e518
   b4e88:	2003e418 	.word	0x2003e418
   b4e8c:	2003e428 	.word	0x2003e428

000b4e90 <setup>:
{
   b4e90:	b570      	push	{r4, r5, r6, lr}
  RGB.control(TRUE);
   b4e92:	2001      	movs	r0, #1
   b4e94:	f001 f8fe 	bl	b6094 <_ZN8RGBClass7controlEb>
  RGB.brightness(10);
   b4e98:	2101      	movs	r1, #1
   b4e9a:	200a      	movs	r0, #10
   b4e9c:	f001 f91d 	bl	b60da <_ZN8RGBClass10brightnessEhb>
  switch (probeNumber)
   b4ea0:	4b3b      	ldr	r3, [pc, #236]	; (b4f90 <setup+0x100>)
   b4ea2:	681b      	ldr	r3, [r3, #0]
   b4ea4:	3b01      	subs	r3, #1
   b4ea6:	2b06      	cmp	r3, #6
   b4ea8:	d853      	bhi.n	b4f52 <setup+0xc2>
   b4eaa:	e8df f003 	tbb	[pc, r3]
   b4eae:	0804      	.short	0x0804
   b4eb0:	4b484440 	.word	0x4b484440
   b4eb4:	4f          	.byte	0x4f
   b4eb5:	00          	.byte	0x00
    RGB.color(0, 0, 255); // blue!
   b4eb6:	22ff      	movs	r2, #255	; 0xff
   b4eb8:	2100      	movs	r1, #0
    RGB.color(255, 255, 0); // yellow
   b4eba:	4608      	mov	r0, r1
   b4ebc:	e002      	b.n	b4ec4 <setup+0x34>
    RGB.color(25, 255, 88); // green!
   b4ebe:	2258      	movs	r2, #88	; 0x58
   b4ec0:	21ff      	movs	r1, #255	; 0xff
   b4ec2:	2019      	movs	r0, #25
   b4ec4:	f001 f8f6 	bl	b60b4 <_ZN8RGBClass5colorEiii>
  Serial.begin(9600);
   b4ec8:	f000 fd00 	bl	b58cc <_Z16_fetch_usbserialv>
   b4ecc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4ed0:	f000 fcf0 	bl	b58b4 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   b4ed4:	f001 fbe4 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b4ed8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4edc:	f000 fc94 	bl	b5808 <_ZN11USARTSerial5beginEm>
  delay(1000);
   b4ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4ee4:	f001 f90e 	bl	b6104 <delay>
  pinMode(THERMISTORPIN, INPUT);
   b4ee8:	2100      	movs	r1, #0
   b4eea:	2013      	movs	r0, #19
   b4eec:	f001 fc3a 	bl	b6764 <pinMode>
  serialPrint = true;     // serial print to screen
   b4ef0:	4b28      	ldr	r3, [pc, #160]	; (b4f94 <setup+0x104>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4ef2:	4d29      	ldr	r5, [pc, #164]	; (b4f98 <setup+0x108>)
   b4ef4:	2201      	movs	r2, #1
   b4ef6:	701a      	strb	r2, [r3, #0]
  particlePublish = false; // publish to particle cloud
   b4ef8:	4a28      	ldr	r2, [pc, #160]	; (b4f9c <setup+0x10c>)
   b4efa:	2300      	movs	r3, #0
   b4efc:	7013      	strb	r3, [r2, #0]
  askSetting = false;      // ask lora setting values
   b4efe:	4a28      	ldr	r2, [pc, #160]	; (b4fa0 <setup+0x110>)
   b4f00:	7013      	strb	r3, [r2, #0]
  atTest();
   b4f02:	f7ff fa7b 	bl	b43fc <_Z6atTestv>
  radioSetup(); // start lora module
   b4f06:	f7ff ff95 	bl	b4e34 <_Z10radioSetupv>
   b4f0a:	7d2b      	ldrb	r3, [r5, #20]
   b4f0c:	2b00      	cmp	r3, #0
   b4f0e:	d036      	beq.n	b4f7e <setup+0xee>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4f10:	2302      	movs	r3, #2
   b4f12:	722b      	strb	r3, [r5, #8]
      .duration(lowPowerTime * 60000); // minutes to milliseconds
   b4f14:	4b23      	ldr	r3, [pc, #140]	; (b4fa4 <setup+0x114>)
   b4f16:	681e      	ldr	r6, [r3, #0]
   b4f18:	f64e 2360 	movw	r3, #60000	; 0xea60
   b4f1c:	435e      	muls	r6, r3
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4f1e:	682b      	ldr	r3, [r5, #0]
   b4f20:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4f22:	b1d3      	cbz	r3, b4f5a <setup+0xca>
            if (start->type == type) {
   b4f24:	889a      	ldrh	r2, [r3, #4]
   b4f26:	2a04      	cmp	r2, #4
   b4f28:	d02f      	beq.n	b4f8a <setup+0xfa>
            start = start->next;
   b4f2a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4f2c:	e7f9      	b.n	b4f22 <setup+0x92>
    RGB.color(255, 69, 0); // orange!
   b4f2e:	2200      	movs	r2, #0
   b4f30:	2145      	movs	r1, #69	; 0x45
    RGB.color(255, 0, 0); // red!
   b4f32:	20ff      	movs	r0, #255	; 0xff
   b4f34:	e7c6      	b.n	b4ec4 <setup+0x34>
    RGB.color(160, 32, 240); // purple!
   b4f36:	22f0      	movs	r2, #240	; 0xf0
   b4f38:	2120      	movs	r1, #32
   b4f3a:	20a0      	movs	r0, #160	; 0xa0
   b4f3c:	e7c2      	b.n	b4ec4 <setup+0x34>
    RGB.color(255, 0, 0); // red!
   b4f3e:	2200      	movs	r2, #0
   b4f40:	4611      	mov	r1, r2
   b4f42:	e7f6      	b.n	b4f32 <setup+0xa2>
    RGB.color(115, 147, 179); // grey!
   b4f44:	22b3      	movs	r2, #179	; 0xb3
   b4f46:	2193      	movs	r1, #147	; 0x93
   b4f48:	2073      	movs	r0, #115	; 0x73
   b4f4a:	e7bb      	b.n	b4ec4 <setup+0x34>
    RGB.color(255, 255, 0); // yellow
   b4f4c:	2200      	movs	r2, #0
   b4f4e:	21ff      	movs	r1, #255	; 0xff
   b4f50:	e7b3      	b.n	b4eba <setup+0x2a>
    RGB.control(FALSE);
   b4f52:	2000      	movs	r0, #0
   b4f54:	f001 f89e 	bl	b6094 <_ZN8RGBClass7controlEb>
    break;
   b4f58:	e7b6      	b.n	b4ec8 <setup+0x38>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4f5a:	4913      	ldr	r1, [pc, #76]	; (b4fa8 <setup+0x118>)
   b4f5c:	2010      	movs	r0, #16
   b4f5e:	f001 fc29 	bl	b67b4 <_ZnwjRKSt9nothrow_t>
   b4f62:	4604      	mov	r4, r0
   b4f64:	b178      	cbz	r0, b4f86 <setup+0xf6>
   b4f66:	2210      	movs	r2, #16
   b4f68:	2100      	movs	r1, #0
   b4f6a:	f002 f999 	bl	b72a0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4f6e:	4b0f      	ldr	r3, [pc, #60]	; (b4fac <setup+0x11c>)
   b4f70:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4f72:	2304      	movs	r3, #4
   b4f74:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4f76:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4f78:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   b4f7a:	e9c4 3602 	strd	r3, r6, [r4, #8]
  counter = 0;
   b4f7e:	4b0c      	ldr	r3, [pc, #48]	; (b4fb0 <setup+0x120>)
   b4f80:	2200      	movs	r2, #0
   b4f82:	601a      	str	r2, [r3, #0]
}
   b4f84:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   b4f86:	7528      	strb	r0, [r5, #20]
                return *this;
   b4f88:	e7f9      	b.n	b4f7e <setup+0xee>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4f8a:	60de      	str	r6, [r3, #12]
                return *this;
   b4f8c:	e7f7      	b.n	b4f7e <setup+0xee>
   b4f8e:	bf00      	nop
   b4f90:	2003e42c 	.word	0x2003e42c
   b4f94:	2003e6ac 	.word	0x2003e6ac
   b4f98:	2003e4f8 	.word	0x2003e4f8
   b4f9c:	2003e514 	.word	0x2003e514
   b4fa0:	2003e4b1 	.word	0x2003e4b1
   b4fa4:	2003e420 	.word	0x2003e420
   b4fa8:	000b79a0 	.word	0x000b79a0
   b4fac:	00030010 	.word	0x00030010
   b4fb0:	2003e510 	.word	0x2003e510

000b4fb4 <_GLOBAL__sub_I_probeNumber>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4fb4:	4a0a      	ldr	r2, [pc, #40]	; (b4fe0 <_GLOBAL__sub_I_probeNumber+0x2c>)
   b4fb6:	2300      	movs	r3, #0
   b4fb8:	7013      	strb	r3, [r2, #0]
        : config_(config) {
   b4fba:	4a0a      	ldr	r2, [pc, #40]	; (b4fe4 <_GLOBAL__sub_I_probeNumber+0x30>)
   b4fbc:	1d11      	adds	r1, r2, #4
   b4fbe:	6011      	str	r1, [r2, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4fc0:	4909      	ldr	r1, [pc, #36]	; (b4fe8 <_GLOBAL__sub_I_probeNumber+0x34>)
   b4fc2:	6051      	str	r1, [r2, #4]
              valid_(true) {
   b4fc4:	2101      	movs	r1, #1
   b4fc6:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b4fca:	6113      	str	r3, [r2, #16]
   b4fcc:	7511      	strb	r1, [r2, #20]
              error_(SYSTEM_ERROR_NONE) {
   b4fce:	4a07      	ldr	r2, [pc, #28]	; (b4fec <_GLOBAL__sub_I_probeNumber+0x38>)
   b4fd0:	e9c2 3300 	strd	r3, r3, [r2]
    SleepResult() {}
   b4fd4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   b4fd8:	6093      	str	r3, [r2, #8]
        set_system_mode(mode);
   b4fda:	2002      	movs	r0, #2
   b4fdc:	f000 b9d0 	b.w	b5380 <set_system_mode>
   b4fe0:	2003e4b0 	.word	0x2003e4b0
   b4fe4:	2003e4f8 	.word	0x2003e4f8
   b4fe8:	00030010 	.word	0x00030010
   b4fec:	2003e4a4 	.word	0x2003e4a4

000b4ff0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <HAL_USB_USART_Init+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	681b      	ldr	r3, [r3, #0]
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	0003024c 	.word	0x0003024c

000b5000 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <HAL_USB_USART_Begin+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	685b      	ldr	r3, [r3, #4]
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	0003024c 	.word	0x0003024c

000b5010 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <HAL_USB_USART_Available_Data+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	691b      	ldr	r3, [r3, #16]
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	0003024c 	.word	0x0003024c

000b5020 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	695b      	ldr	r3, [r3, #20]
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	0003024c 	.word	0x0003024c

000b5030 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <HAL_USB_USART_Receive_Data+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	699b      	ldr	r3, [r3, #24]
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	0003024c 	.word	0x0003024c

000b5040 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <HAL_USB_USART_Send_Data+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	69db      	ldr	r3, [r3, #28]
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	0003024c 	.word	0x0003024c

000b5050 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <HAL_USB_USART_Flush_Data+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	6a1b      	ldr	r3, [r3, #32]
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	0003024c 	.word	0x0003024c

000b5060 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <hal_i2c_write+0xc>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	6a1b      	ldr	r3, [r3, #32]
   b5068:	9301      	str	r3, [sp, #4]
   b506a:	bd08      	pop	{r3, pc}
   b506c:	00030228 	.word	0x00030228

000b5070 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b02      	ldr	r3, [pc, #8]	; (b507c <hal_i2c_available+0xc>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5078:	9301      	str	r3, [sp, #4]
   b507a:	bd08      	pop	{r3, pc}
   b507c:	00030228 	.word	0x00030228

000b5080 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5080:	b508      	push	{r3, lr}
   b5082:	4b02      	ldr	r3, [pc, #8]	; (b508c <hal_i2c_read+0xc>)
   b5084:	681b      	ldr	r3, [r3, #0]
   b5086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5088:	9301      	str	r3, [sp, #4]
   b508a:	bd08      	pop	{r3, pc}
   b508c:	00030228 	.word	0x00030228

000b5090 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <hal_i2c_peek+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	00030228 	.word	0x00030228

000b50a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <hal_i2c_flush+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	00030228 	.word	0x00030228

000b50b0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <hal_i2c_is_enabled+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	00030228 	.word	0x00030228

000b50c0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <hal_i2c_init+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	00030228 	.word	0x00030228

000b50d0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <hal_spi_init+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	69db      	ldr	r3, [r3, #28]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	00030230 	.word	0x00030230

000b50e0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <hal_spi_is_enabled+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	6a1b      	ldr	r3, [r3, #32]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	00030230 	.word	0x00030230

000b50f0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <hal_usart_write+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	68db      	ldr	r3, [r3, #12]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003023c 	.word	0x0003023c

000b5100 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <hal_usart_available+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	691b      	ldr	r3, [r3, #16]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003023c 	.word	0x0003023c

000b5110 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <hal_usart_read+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	695b      	ldr	r3, [r3, #20]
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003023c 	.word	0x0003023c

000b5120 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <hal_usart_peek+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	699b      	ldr	r3, [r3, #24]
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	0003023c 	.word	0x0003023c

000b5130 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <hal_usart_flush+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	69db      	ldr	r3, [r3, #28]
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	0003023c 	.word	0x0003023c

000b5140 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <hal_usart_is_enabled+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	6a1b      	ldr	r3, [r3, #32]
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	0003023c 	.word	0x0003023c

000b5150 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <hal_usart_available_data_for_write+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	0003023c 	.word	0x0003023c

000b5160 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <hal_usart_begin_config+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	0003023c 	.word	0x0003023c

000b5170 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b02      	ldr	r3, [pc, #8]	; (b517c <hal_usart_init_ex+0xc>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5178:	9301      	str	r3, [sp, #4]
   b517a:	bd08      	pop	{r3, pc}
   b517c:	0003023c 	.word	0x0003023c

000b5180 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5180:	b508      	push	{r3, lr}
   b5182:	4b02      	ldr	r3, [pc, #8]	; (b518c <inet_inet_ntop+0xc>)
   b5184:	681b      	ldr	r3, [r3, #0]
   b5186:	695b      	ldr	r3, [r3, #20]
   b5188:	9301      	str	r3, [sp, #4]
   b518a:	bd08      	pop	{r3, pc}
   b518c:	00030264 	.word	0x00030264

000b5190 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5190:	b508      	push	{r3, lr}
   b5192:	4b02      	ldr	r3, [pc, #8]	; (b519c <os_mutex_recursive_create+0xc>)
   b5194:	681b      	ldr	r3, [r3, #0]
   b5196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	bd08      	pop	{r3, pc}
   b519c:	00030248 	.word	0x00030248

000b51a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b51a0:	b508      	push	{r3, lr}
   b51a2:	4b02      	ldr	r3, [pc, #8]	; (b51ac <HAL_RNG_GetRandomNumber+0xc>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	685b      	ldr	r3, [r3, #4]
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	bd08      	pop	{r3, pc}
   b51ac:	00030218 	.word	0x00030218

000b51b0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b02      	ldr	r3, [pc, #8]	; (b51bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	695b      	ldr	r3, [r3, #20]
   b51b8:	9301      	str	r3, [sp, #4]
   b51ba:	bd08      	pop	{r3, pc}
   b51bc:	00030218 	.word	0x00030218

000b51c0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b51c0:	b508      	push	{r3, lr}
   b51c2:	4b02      	ldr	r3, [pc, #8]	; (b51cc <HAL_Validate_Pin_Function+0xc>)
   b51c4:	681b      	ldr	r3, [r3, #0]
   b51c6:	685b      	ldr	r3, [r3, #4]
   b51c8:	9301      	str	r3, [sp, #4]
   b51ca:	bd08      	pop	{r3, pc}
   b51cc:	0003022c 	.word	0x0003022c

000b51d0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b51d0:	b508      	push	{r3, lr}
   b51d2:	4b02      	ldr	r3, [pc, #8]	; (b51dc <HAL_Pin_Mode+0xc>)
   b51d4:	681b      	ldr	r3, [r3, #0]
   b51d6:	689b      	ldr	r3, [r3, #8]
   b51d8:	9301      	str	r3, [sp, #4]
   b51da:	bd08      	pop	{r3, pc}
   b51dc:	0003022c 	.word	0x0003022c

000b51e0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b51e0:	b508      	push	{r3, lr}
   b51e2:	4b02      	ldr	r3, [pc, #8]	; (b51ec <hal_adc_read+0xc>)
   b51e4:	681b      	ldr	r3, [r3, #0]
   b51e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b51e8:	9301      	str	r3, [sp, #4]
   b51ea:	bd08      	pop	{r3, pc}
   b51ec:	0003022c 	.word	0x0003022c

000b51f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b02      	ldr	r3, [pc, #8]	; (b51fc <netdb_freeaddrinfo+0xc>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	689b      	ldr	r3, [r3, #8]
   b51f8:	9301      	str	r3, [sp, #4]
   b51fa:	bd08      	pop	{r3, pc}
   b51fc:	00030268 	.word	0x00030268

000b5200 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <netdb_getaddrinfo+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	68db      	ldr	r3, [r3, #12]
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	00030268 	.word	0x00030268

000b5210 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <LED_SetSignalingColor+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	685b      	ldr	r3, [r3, #4]
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	00030260 	.word	0x00030260

000b5220 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <LED_Signaling_Start+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	689b      	ldr	r3, [r3, #8]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	00030260 	.word	0x00030260

000b5230 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <LED_Signaling_Stop+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	68db      	ldr	r3, [r3, #12]
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	00030260 	.word	0x00030260

000b5240 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <LED_SetBrightness+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	691b      	ldr	r3, [r3, #16]
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	00030260 	.word	0x00030260

000b5250 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <LED_RGB_IsOverRidden+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	699b      	ldr	r3, [r3, #24]
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	00030260 	.word	0x00030260

000b5260 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <LED_On+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	69db      	ldr	r3, [r3, #28]
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	00030260 	.word	0x00030260

000b5270 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <log_message+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	00030260 	.word	0x00030260

000b5280 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <spark_cloud_flag_connected+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	695b      	ldr	r3, [r3, #20]
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	00030244 	.word	0x00030244

000b5290 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <spark_deviceID+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	69db      	ldr	r3, [r3, #28]
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	00030244 	.word	0x00030244

000b52a0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <spark_send_event+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	6a1b      	ldr	r3, [r3, #32]
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	00030244 	.word	0x00030244

000b52b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <spark_set_random_seed_from_cloud_handler+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	00030244 	.word	0x00030244

000b52c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <network_connect+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	685b      	ldr	r3, [r3, #4]
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	00030240 	.word	0x00030240

000b52d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <network_connecting+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	689b      	ldr	r3, [r3, #8]
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	00030240 	.word	0x00030240

000b52e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <network_disconnect+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	68db      	ldr	r3, [r3, #12]
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	00030240 	.word	0x00030240

000b52f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <network_ready+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	691b      	ldr	r3, [r3, #16]
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	00030240 	.word	0x00030240

000b5300 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <network_on+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	695b      	ldr	r3, [r3, #20]
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	00030240 	.word	0x00030240

000b5310 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b02      	ldr	r3, [pc, #8]	; (b531c <network_off+0xc>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	699b      	ldr	r3, [r3, #24]
   b5318:	9301      	str	r3, [sp, #4]
   b531a:	bd08      	pop	{r3, pc}
   b531c:	00030240 	.word	0x00030240

000b5320 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5320:	b508      	push	{r3, lr}
   b5322:	4b02      	ldr	r3, [pc, #8]	; (b532c <network_listen+0xc>)
   b5324:	681b      	ldr	r3, [r3, #0]
   b5326:	69db      	ldr	r3, [r3, #28]
   b5328:	9301      	str	r3, [sp, #4]
   b532a:	bd08      	pop	{r3, pc}
   b532c:	00030240 	.word	0x00030240

000b5330 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b02      	ldr	r3, [pc, #8]	; (b533c <network_listening+0xc>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	6a1b      	ldr	r3, [r3, #32]
   b5338:	9301      	str	r3, [sp, #4]
   b533a:	bd08      	pop	{r3, pc}
   b533c:	00030240 	.word	0x00030240

000b5340 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <network_set_listen_timeout+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	00030240 	.word	0x00030240

000b5350 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <network_get_listen_timeout+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	00030240 	.word	0x00030240

000b5360 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <network_is_on+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	00030240 	.word	0x00030240

000b5370 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <network_is_off+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	00030240 	.word	0x00030240

000b5380 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <set_system_mode+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	685b      	ldr	r3, [r3, #4]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	00030220 	.word	0x00030220

000b5390 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <system_delay_ms+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	695b      	ldr	r3, [r3, #20]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030220 	.word	0x00030220

000b53a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <application_thread_current+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030220 	.word	0x00030220

000b53b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <application_thread_invoke+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030220 	.word	0x00030220

000b53c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b03      	ldr	r3, [pc, #12]	; (b53d0 <system_ctrl_set_app_request_handler+0x10>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b53ca:	9301      	str	r3, [sp, #4]
   b53cc:	bd08      	pop	{r3, pc}
   b53ce:	0000      	.short	0x0000
   b53d0:	00030220 	.word	0x00030220

000b53d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b03      	ldr	r3, [pc, #12]	; (b53e4 <system_ctrl_set_result+0x10>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b53de:	9301      	str	r3, [sp, #4]
   b53e0:	bd08      	pop	{r3, pc}
   b53e2:	0000      	.short	0x0000
   b53e4:	00030220 	.word	0x00030220

000b53e8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b53e8:	b508      	push	{r3, lr}
   b53ea:	4b03      	ldr	r3, [pc, #12]	; (b53f8 <system_sleep_ext+0x10>)
   b53ec:	681b      	ldr	r3, [r3, #0]
   b53ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b53f2:	9301      	str	r3, [sp, #4]
   b53f4:	bd08      	pop	{r3, pc}
   b53f6:	0000      	.short	0x0000
   b53f8:	00030220 	.word	0x00030220

000b53fc <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b53fc:	b508      	push	{r3, lr}
   b53fe:	4b03      	ldr	r3, [pc, #12]	; (b540c <system_reset+0x10>)
   b5400:	681b      	ldr	r3, [r3, #0]
   b5402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b5406:	9301      	str	r3, [sp, #4]
   b5408:	bd08      	pop	{r3, pc}
   b540a:	0000      	.short	0x0000
   b540c:	00030220 	.word	0x00030220

000b5410 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <malloc+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	681b      	ldr	r3, [r3, #0]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	0003021c 	.word	0x0003021c

000b5420 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <free+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	685b      	ldr	r3, [r3, #4]
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	0003021c 	.word	0x0003021c

000b5430 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <realloc+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	689b      	ldr	r3, [r3, #8]
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	0003021c 	.word	0x0003021c

000b5440 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <sprintf+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	68db      	ldr	r3, [r3, #12]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	0003021c 	.word	0x0003021c

000b5450 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <vsnprintf+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	0003021c 	.word	0x0003021c

000b5460 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <abort+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	0003021c 	.word	0x0003021c

000b5470 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <_malloc_r+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	0003021c 	.word	0x0003021c

000b5480 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <__errno+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	0003021c 	.word	0x0003021c

000b5490 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <__assert_func+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003021c 	.word	0x0003021c

000b54a0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <newlib_impure_ptr_callback+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003021c 	.word	0x0003021c

000b54b0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b54b0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b54b2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b54b4:	4604      	mov	r4, r0
      if (_M_manager)
   b54b6:	b113      	cbz	r3, b54be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b54b8:	2203      	movs	r2, #3
   b54ba:	4601      	mov	r1, r0
   b54bc:	4798      	blx	r3
    }
   b54be:	4620      	mov	r0, r4
   b54c0:	bd10      	pop	{r4, pc}

000b54c2 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b54c2:	2300      	movs	r3, #0
   b54c4:	6840      	ldr	r0, [r0, #4]
   b54c6:	461a      	mov	r2, r3
   b54c8:	f7ff befa 	b.w	b52c0 <network_connect>

000b54cc <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b54cc:	6840      	ldr	r0, [r0, #4]
   b54ce:	2200      	movs	r2, #0
   b54d0:	2102      	movs	r1, #2
   b54d2:	f7ff bf05 	b.w	b52e0 <network_disconnect>

000b54d6 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b54d6:	2200      	movs	r2, #0
   b54d8:	6840      	ldr	r0, [r0, #4]
   b54da:	4611      	mov	r1, r2
   b54dc:	f7ff bef8 	b.w	b52d0 <network_connecting>

000b54e0 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b54e0:	2200      	movs	r2, #0
   b54e2:	6840      	ldr	r0, [r0, #4]
   b54e4:	4611      	mov	r1, r2
   b54e6:	f7ff bf03 	b.w	b52f0 <network_ready>

000b54ea <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b54ea:	2300      	movs	r3, #0
   b54ec:	6840      	ldr	r0, [r0, #4]
   b54ee:	461a      	mov	r2, r3
   b54f0:	4619      	mov	r1, r3
   b54f2:	f7ff bf05 	b.w	b5300 <network_on>

000b54f6 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b54f6:	2300      	movs	r3, #0
   b54f8:	6840      	ldr	r0, [r0, #4]
   b54fa:	461a      	mov	r2, r3
   b54fc:	4619      	mov	r1, r3
   b54fe:	f7ff bf07 	b.w	b5310 <network_off>

000b5502 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5502:	6840      	ldr	r0, [r0, #4]
   b5504:	2100      	movs	r1, #0
   b5506:	f7ff bf2b 	b.w	b5360 <network_is_on>

000b550a <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b550a:	6840      	ldr	r0, [r0, #4]
   b550c:	2100      	movs	r1, #0
   b550e:	f7ff bf2f 	b.w	b5370 <network_is_off>

000b5512 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5512:	6840      	ldr	r0, [r0, #4]
   b5514:	2200      	movs	r2, #0
   b5516:	f081 0101 	eor.w	r1, r1, #1
   b551a:	f7ff bf01 	b.w	b5320 <network_listen>

000b551e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b551e:	6840      	ldr	r0, [r0, #4]
   b5520:	2200      	movs	r2, #0
   b5522:	f7ff bf0d 	b.w	b5340 <network_set_listen_timeout>

000b5526 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5526:	2200      	movs	r2, #0
   b5528:	6840      	ldr	r0, [r0, #4]
   b552a:	4611      	mov	r1, r2
   b552c:	f7ff bf10 	b.w	b5350 <network_get_listen_timeout>

000b5530 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5530:	2200      	movs	r2, #0
   b5532:	6840      	ldr	r0, [r0, #4]
   b5534:	4611      	mov	r1, r2
   b5536:	f7ff befb 	b.w	b5330 <network_listening>

000b553a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b553a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b553e:	b095      	sub	sp, #84	; 0x54
   b5540:	4614      	mov	r4, r2
   b5542:	460d      	mov	r5, r1
   b5544:	4607      	mov	r7, r0
    IPAddress addr;
   b5546:	f000 fa21 	bl	b598c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b554a:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b554c:	221c      	movs	r2, #28
   b554e:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5550:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5552:	f001 fea5 	bl	b72a0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5556:	2340      	movs	r3, #64	; 0x40
   b5558:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b555a:	4620      	mov	r0, r4
   b555c:	466b      	mov	r3, sp
   b555e:	aa0c      	add	r2, sp, #48	; 0x30
   b5560:	2100      	movs	r1, #0
   b5562:	f7ff fe4d 	bl	b5200 <netdb_getaddrinfo>
    if (!r) {
   b5566:	4604      	mov	r4, r0
   b5568:	2800      	cmp	r0, #0
   b556a:	d14b      	bne.n	b5604 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b556c:	4602      	mov	r2, r0
   b556e:	2101      	movs	r1, #1
   b5570:	6868      	ldr	r0, [r5, #4]
   b5572:	f7ff febd 	bl	b52f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5576:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5578:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b557a:	4622      	mov	r2, r4
   b557c:	6868      	ldr	r0, [r5, #4]
   b557e:	f7ff feb7 	bl	b52f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5582:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5584:	4681      	mov	r9, r0
        bool ok = false;
   b5586:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5588:	2e00      	cmp	r6, #0
   b558a:	d03b      	beq.n	b5604 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b558c:	2900      	cmp	r1, #0
   b558e:	d139      	bne.n	b5604 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5590:	6873      	ldr	r3, [r6, #4]
   b5592:	2b02      	cmp	r3, #2
   b5594:	d003      	beq.n	b559e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5596:	2b0a      	cmp	r3, #10
   b5598:	d011      	beq.n	b55be <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b559a:	69f6      	ldr	r6, [r6, #28]
   b559c:	e7f4      	b.n	b5588 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b559e:	f1b8 0f00 	cmp.w	r8, #0
   b55a2:	d0fa      	beq.n	b559a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b55a4:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b55a6:	a806      	add	r0, sp, #24
   b55a8:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b55aa:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b55ac:	f000 fa1c 	bl	b59e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55b2:	1d3c      	adds	r4, r7, #4
   b55b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55b6:	682b      	ldr	r3, [r5, #0]
   b55b8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b55ba:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b55bc:	e7ed      	b.n	b559a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b55be:	f1b9 0f00 	cmp.w	r9, #0
   b55c2:	d0ea      	beq.n	b559a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b55c4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b55c6:	2210      	movs	r2, #16
   b55c8:	a801      	add	r0, sp, #4
   b55ca:	f001 fe69 	bl	b72a0 <memset>
                    a.v = 6;
   b55ce:	2306      	movs	r3, #6
   b55d0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b55d4:	ad01      	add	r5, sp, #4
   b55d6:	f104 0308 	add.w	r3, r4, #8
   b55da:	3418      	adds	r4, #24
   b55dc:	6818      	ldr	r0, [r3, #0]
   b55de:	6859      	ldr	r1, [r3, #4]
   b55e0:	462a      	mov	r2, r5
   b55e2:	c203      	stmia	r2!, {r0, r1}
   b55e4:	3308      	adds	r3, #8
   b55e6:	42a3      	cmp	r3, r4
   b55e8:	4615      	mov	r5, r2
   b55ea:	d1f7      	bne.n	b55dc <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b55ec:	a901      	add	r1, sp, #4
   b55ee:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b55f0:	ad07      	add	r5, sp, #28
   b55f2:	f000 f9d9 	bl	b59a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b55f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55f8:	1d3c      	adds	r4, r7, #4
   b55fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55fc:	682b      	ldr	r3, [r5, #0]
   b55fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5600:	4649      	mov	r1, r9
   b5602:	e7ca      	b.n	b559a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5604:	9800      	ldr	r0, [sp, #0]
   b5606:	f7ff fdf3 	bl	b51f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b560a:	4638      	mov	r0, r7
   b560c:	b015      	add	sp, #84	; 0x54
   b560e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b5614 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5614:	4b02      	ldr	r3, [pc, #8]	; (b5620 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5616:	4a03      	ldr	r2, [pc, #12]	; (b5624 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5618:	601a      	str	r2, [r3, #0]
   b561a:	2200      	movs	r2, #0
   b561c:	605a      	str	r2, [r3, #4]

} // spark
   b561e:	4770      	bx	lr
   b5620:	2003e6b8 	.word	0x2003e6b8
   b5624:	000b77ec 	.word	0x000b77ec

000b5628 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5628:	2200      	movs	r2, #0
   b562a:	6840      	ldr	r0, [r0, #4]
   b562c:	4611      	mov	r1, r2
   b562e:	f7ff be5f 	b.w	b52f0 <network_ready>

000b5632 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5632:	2200      	movs	r2, #0
   b5634:	6840      	ldr	r0, [r0, #4]
   b5636:	4611      	mov	r1, r2
   b5638:	f7ff be7a 	b.w	b5330 <network_listening>

000b563c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b563c:	2200      	movs	r2, #0
   b563e:	6840      	ldr	r0, [r0, #4]
   b5640:	4611      	mov	r1, r2
   b5642:	f7ff be85 	b.w	b5350 <network_get_listen_timeout>

000b5646 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5646:	6840      	ldr	r0, [r0, #4]
   b5648:	2200      	movs	r2, #0
   b564a:	f7ff be79 	b.w	b5340 <network_set_listen_timeout>

000b564e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b564e:	6840      	ldr	r0, [r0, #4]
   b5650:	2200      	movs	r2, #0
   b5652:	f081 0101 	eor.w	r1, r1, #1
   b5656:	f7ff be63 	b.w	b5320 <network_listen>

000b565a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b565a:	2300      	movs	r3, #0
   b565c:	6840      	ldr	r0, [r0, #4]
   b565e:	461a      	mov	r2, r3
   b5660:	4619      	mov	r1, r3
   b5662:	f7ff be55 	b.w	b5310 <network_off>

000b5666 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5666:	2300      	movs	r3, #0
   b5668:	6840      	ldr	r0, [r0, #4]
   b566a:	461a      	mov	r2, r3
   b566c:	4619      	mov	r1, r3
   b566e:	f7ff be47 	b.w	b5300 <network_on>

000b5672 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5672:	2200      	movs	r2, #0
   b5674:	6840      	ldr	r0, [r0, #4]
   b5676:	4611      	mov	r1, r2
   b5678:	f7ff be2a 	b.w	b52d0 <network_connecting>

000b567c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b567c:	6840      	ldr	r0, [r0, #4]
   b567e:	2200      	movs	r2, #0
   b5680:	2102      	movs	r1, #2
   b5682:	f7ff be2d 	b.w	b52e0 <network_disconnect>

000b5686 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5686:	2300      	movs	r3, #0
   b5688:	6840      	ldr	r0, [r0, #4]
   b568a:	461a      	mov	r2, r3
   b568c:	f7ff be18 	b.w	b52c0 <network_connect>

000b5690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5690:	4b02      	ldr	r3, [pc, #8]	; (b569c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5692:	2204      	movs	r2, #4
   b5694:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5696:	4a02      	ldr	r2, [pc, #8]	; (b56a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5698:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b569a:	4770      	bx	lr
   b569c:	2003e6c0 	.word	0x2003e6c0
   b56a0:	000b7828 	.word	0x000b7828

000b56a4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b56a4:	b510      	push	{r4, lr}
   b56a6:	4604      	mov	r4, r0
   b56a8:	4608      	mov	r0, r1
{
    _spi = spi;
   b56aa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b56ac:	f7ff fd10 	bl	b50d0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b56b0:	2300      	movs	r3, #0
   b56b2:	6063      	str	r3, [r4, #4]
}
   b56b4:	4620      	mov	r0, r4
   b56b6:	bd10      	pop	{r4, pc}

000b56b8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b56b8:	4770      	bx	lr

000b56ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b56ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56bc:	4606      	mov	r6, r0
   b56be:	4615      	mov	r5, r2
   b56c0:	460c      	mov	r4, r1
   b56c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b56c4:	42bc      	cmp	r4, r7
   b56c6:	d006      	beq.n	b56d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b56c8:	6833      	ldr	r3, [r6, #0]
   b56ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   b56ce:	689b      	ldr	r3, [r3, #8]
   b56d0:	4630      	mov	r0, r6
   b56d2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b56d4:	e7f6      	b.n	b56c4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b56d6:	4628      	mov	r0, r5
   b56d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b56da <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b56da:	7c00      	ldrb	r0, [r0, #16]
   b56dc:	2200      	movs	r2, #0
   b56de:	f7ff bcbf 	b.w	b5060 <hal_i2c_write>

000b56e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b56e2:	7c00      	ldrb	r0, [r0, #16]
   b56e4:	2100      	movs	r1, #0
   b56e6:	f7ff bcc3 	b.w	b5070 <hal_i2c_available>

000b56ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b56ea:	7c00      	ldrb	r0, [r0, #16]
   b56ec:	2100      	movs	r1, #0
   b56ee:	f7ff bcc7 	b.w	b5080 <hal_i2c_read>

000b56f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b56f2:	7c00      	ldrb	r0, [r0, #16]
   b56f4:	2100      	movs	r1, #0
   b56f6:	f7ff bccb 	b.w	b5090 <hal_i2c_peek>

000b56fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b56fa:	7c00      	ldrb	r0, [r0, #16]
   b56fc:	2100      	movs	r1, #0
   b56fe:	f7ff bccf 	b.w	b50a0 <hal_i2c_flush>

000b5702 <_ZN7TwoWireD0Ev>:
   b5702:	b510      	push	{r4, lr}
   b5704:	2114      	movs	r1, #20
   b5706:	4604      	mov	r4, r0
   b5708:	f7fe fcc9 	bl	b409e <_ZdlPvj>
   b570c:	4620      	mov	r0, r4
   b570e:	bd10      	pop	{r4, pc}

000b5710 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5710:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5716:	4604      	mov	r4, r0
   b5718:	4608      	mov	r0, r1
   b571a:	2100      	movs	r1, #0
   b571c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5720:	4b03      	ldr	r3, [pc, #12]	; (b5730 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5722:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5724:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5726:	4611      	mov	r1, r2
   b5728:	f7ff fcca 	bl	b50c0 <hal_i2c_init>
}
   b572c:	4620      	mov	r0, r4
   b572e:	bd10      	pop	{r4, pc}
   b5730:	000b7864 	.word	0x000b7864

000b5734 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5734:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5736:	6883      	ldr	r3, [r0, #8]
   b5738:	4604      	mov	r4, r0
   b573a:	b90b      	cbnz	r3, b5740 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b573c:	f001 f83e 	bl	b67bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5740:	68c3      	ldr	r3, [r0, #12]
   b5742:	4798      	blx	r3
      if (_M_manager)
   b5744:	68a3      	ldr	r3, [r4, #8]
   b5746:	b11b      	cbz	r3, b5750 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5748:	2203      	movs	r2, #3
   b574a:	4621      	mov	r1, r4
   b574c:	4620      	mov	r0, r4
   b574e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5750:	4620      	mov	r0, r4
   b5752:	2110      	movs	r1, #16
}
   b5754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5758:	f7fe bca1 	b.w	b409e <_ZdlPvj>

000b575c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b575c:	4770      	bx	lr

000b575e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b575e:	7441      	strb	r1, [r0, #17]
}
   b5760:	4770      	bx	lr

000b5762 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5762:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5764:	7c00      	ldrb	r0, [r0, #16]
   b5766:	f7ff fcf3 	bl	b5150 <hal_usart_available_data_for_write>
}
   b576a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b576e:	bd08      	pop	{r3, pc}

000b5770 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5770:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5772:	7c00      	ldrb	r0, [r0, #16]
   b5774:	f7ff fcc4 	bl	b5100 <hal_usart_available>
}
   b5778:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b577c:	bd08      	pop	{r3, pc}

000b577e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b577e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5780:	7c00      	ldrb	r0, [r0, #16]
   b5782:	f7ff fccd 	bl	b5120 <hal_usart_peek>
}
   b5786:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b578a:	bd08      	pop	{r3, pc}

000b578c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b578c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b578e:	7c00      	ldrb	r0, [r0, #16]
   b5790:	f7ff fcbe 	bl	b5110 <hal_usart_read>
}
   b5794:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5798:	bd08      	pop	{r3, pc}

000b579a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b579a:	7c00      	ldrb	r0, [r0, #16]
   b579c:	f7ff bcc8 	b.w	b5130 <hal_usart_flush>

000b57a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b57a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b57a2:	7c45      	ldrb	r5, [r0, #17]
{
   b57a4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b57a6:	b12d      	cbz	r5, b57b4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b57a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b57aa:	b003      	add	sp, #12
   b57ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b57b0:	f7ff bc9e 	b.w	b50f0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b57b4:	7c00      	ldrb	r0, [r0, #16]
   b57b6:	9101      	str	r1, [sp, #4]
   b57b8:	f7ff fcca 	bl	b5150 <hal_usart_available_data_for_write>
   b57bc:	2800      	cmp	r0, #0
   b57be:	9901      	ldr	r1, [sp, #4]
   b57c0:	dcf2      	bgt.n	b57a8 <_ZN11USARTSerial5writeEh+0x8>
}
   b57c2:	4628      	mov	r0, r5
   b57c4:	b003      	add	sp, #12
   b57c6:	bd30      	pop	{r4, r5, pc}

000b57c8 <_ZN11USARTSerialD0Ev>:
   b57c8:	b510      	push	{r4, lr}
   b57ca:	2114      	movs	r1, #20
   b57cc:	4604      	mov	r4, r0
   b57ce:	f7fe fc66 	bl	b409e <_ZdlPvj>
   b57d2:	4620      	mov	r0, r4
   b57d4:	bd10      	pop	{r4, pc}
	...

000b57d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b57d8:	b510      	push	{r4, lr}
   b57da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57de:	4604      	mov	r4, r0
   b57e0:	4608      	mov	r0, r1
   b57e2:	4611      	mov	r1, r2
   b57e4:	2200      	movs	r2, #0
   b57e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b57ea:	4b04      	ldr	r3, [pc, #16]	; (b57fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b57ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57ee:	2301      	movs	r3, #1
  _serial = serial;
   b57f0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57f2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b57f4:	f7ff fcbc 	bl	b5170 <hal_usart_init_ex>
}
   b57f8:	4620      	mov	r0, r4
   b57fa:	bd10      	pop	{r4, pc}
   b57fc:	000b788c 	.word	0x000b788c

000b5800 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5800:	7c00      	ldrb	r0, [r0, #16]
   b5802:	2300      	movs	r3, #0
   b5804:	f7ff bcac 	b.w	b5160 <hal_usart_begin_config>

000b5808 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5808:	2200      	movs	r2, #0
   b580a:	f7ff bff9 	b.w	b5800 <_ZN11USARTSerial5beginEmm>

000b580e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b580e:	7441      	strb	r1, [r0, #17]
}
   b5810:	4770      	bx	lr

000b5812 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5812:	4770      	bx	lr

000b5814 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5814:	4770      	bx	lr

000b5816 <_ZN9USBSerial4readEv>:
{
   b5816:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5818:	2100      	movs	r1, #0
   b581a:	7c00      	ldrb	r0, [r0, #16]
   b581c:	f7ff fc08 	bl	b5030 <HAL_USB_USART_Receive_Data>
}
   b5820:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5824:	bd08      	pop	{r3, pc}

000b5826 <_ZN9USBSerial4peekEv>:
{
   b5826:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5828:	2101      	movs	r1, #1
   b582a:	7c00      	ldrb	r0, [r0, #16]
   b582c:	f7ff fc00 	bl	b5030 <HAL_USB_USART_Receive_Data>
}
   b5830:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5834:	bd08      	pop	{r3, pc}

000b5836 <_ZN9USBSerial17availableForWriteEv>:
{
   b5836:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5838:	7c00      	ldrb	r0, [r0, #16]
   b583a:	f7ff fbf1 	bl	b5020 <HAL_USB_USART_Available_Data_For_Write>
}
   b583e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5842:	bd08      	pop	{r3, pc}

000b5844 <_ZN9USBSerial9availableEv>:
{
   b5844:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5846:	7c00      	ldrb	r0, [r0, #16]
   b5848:	f7ff fbe2 	bl	b5010 <HAL_USB_USART_Available_Data>
}
   b584c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5850:	bd08      	pop	{r3, pc}

000b5852 <_ZN9USBSerial5writeEh>:
{
   b5852:	b513      	push	{r0, r1, r4, lr}
   b5854:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5856:	7c00      	ldrb	r0, [r0, #16]
{
   b5858:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b585a:	f7ff fbe1 	bl	b5020 <HAL_USB_USART_Available_Data_For_Write>
   b585e:	2800      	cmp	r0, #0
   b5860:	9901      	ldr	r1, [sp, #4]
   b5862:	dc01      	bgt.n	b5868 <_ZN9USBSerial5writeEh+0x16>
   b5864:	7c60      	ldrb	r0, [r4, #17]
   b5866:	b120      	cbz	r0, b5872 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5868:	7c20      	ldrb	r0, [r4, #16]
   b586a:	f7ff fbe9 	bl	b5040 <HAL_USB_USART_Send_Data>
   b586e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5872:	b002      	add	sp, #8
   b5874:	bd10      	pop	{r4, pc}

000b5876 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5876:	7c00      	ldrb	r0, [r0, #16]
   b5878:	f7ff bbea 	b.w	b5050 <HAL_USB_USART_Flush_Data>

000b587c <_ZN9USBSerialD0Ev>:
   b587c:	b510      	push	{r4, lr}
   b587e:	2114      	movs	r1, #20
   b5880:	4604      	mov	r4, r0
   b5882:	f7fe fc0c 	bl	b409e <_ZdlPvj>
   b5886:	4620      	mov	r0, r4
   b5888:	bd10      	pop	{r4, pc}
	...

000b588c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b588c:	b510      	push	{r4, lr}
   b588e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5892:	4604      	mov	r4, r0
   b5894:	4608      	mov	r0, r1
   b5896:	2100      	movs	r1, #0
   b5898:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b589c:	4b04      	ldr	r3, [pc, #16]	; (b58b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b589e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b58a0:	2301      	movs	r3, #1
  _serial = serial;
   b58a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b58a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b58a6:	4611      	mov	r1, r2
   b58a8:	f7ff fba2 	bl	b4ff0 <HAL_USB_USART_Init>
}
   b58ac:	4620      	mov	r0, r4
   b58ae:	bd10      	pop	{r4, pc}
   b58b0:	000b78bc 	.word	0x000b78bc

000b58b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b58b4:	7c00      	ldrb	r0, [r0, #16]
   b58b6:	2200      	movs	r2, #0
   b58b8:	f7ff bba2 	b.w	b5000 <HAL_USB_USART_Begin>

000b58bc <_Z19acquireSerialBufferv>:
{
   b58bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b58be:	2214      	movs	r2, #20
{
   b58c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b58c2:	2100      	movs	r1, #0
   b58c4:	f001 fcec 	bl	b72a0 <memset>
}
   b58c8:	4620      	mov	r0, r4
   b58ca:	bd10      	pop	{r4, pc}

000b58cc <_Z16_fetch_usbserialv>:
{
   b58cc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b58ce:	4c0f      	ldr	r4, [pc, #60]	; (b590c <_Z16_fetch_usbserialv+0x40>)
{
   b58d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b58d2:	a803      	add	r0, sp, #12
   b58d4:	f7ff fff2 	bl	b58bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b58d8:	7821      	ldrb	r1, [r4, #0]
   b58da:	f3bf 8f5b 	dmb	ish
   b58de:	f011 0101 	ands.w	r1, r1, #1
   b58e2:	d10f      	bne.n	b5904 <_Z16_fetch_usbserialv+0x38>
   b58e4:	4620      	mov	r0, r4
   b58e6:	9101      	str	r1, [sp, #4]
   b58e8:	f7fe fbdb 	bl	b40a2 <__cxa_guard_acquire>
   b58ec:	9901      	ldr	r1, [sp, #4]
   b58ee:	b148      	cbz	r0, b5904 <_Z16_fetch_usbserialv+0x38>
   b58f0:	aa03      	add	r2, sp, #12
   b58f2:	4807      	ldr	r0, [pc, #28]	; (b5910 <_Z16_fetch_usbserialv+0x44>)
   b58f4:	f7ff ffca 	bl	b588c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b58f8:	4620      	mov	r0, r4
   b58fa:	f7fe fbd7 	bl	b40ac <__cxa_guard_release>
   b58fe:	4805      	ldr	r0, [pc, #20]	; (b5914 <_Z16_fetch_usbserialv+0x48>)
   b5900:	f001 fcba 	bl	b7278 <atexit>
	return _usbserial;
}
   b5904:	4802      	ldr	r0, [pc, #8]	; (b5910 <_Z16_fetch_usbserialv+0x44>)
   b5906:	b008      	add	sp, #32
   b5908:	bd10      	pop	{r4, pc}
   b590a:	bf00      	nop
   b590c:	2003e6c8 	.word	0x2003e6c8
   b5910:	2003e6cc 	.word	0x2003e6cc
   b5914:	000b5813 	.word	0x000b5813

000b5918 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b5918:	4770      	bx	lr

000b591a <_ZN9IPAddressD0Ev>:
   b591a:	b510      	push	{r4, lr}
   b591c:	2118      	movs	r1, #24
   b591e:	4604      	mov	r4, r0
   b5920:	f7fe fbbd 	bl	b409e <_ZdlPvj>
   b5924:	4620      	mov	r0, r4
   b5926:	bd10      	pop	{r4, pc}

000b5928 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5928:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b592a:	7d03      	ldrb	r3, [r0, #20]
   b592c:	2b06      	cmp	r3, #6
{
   b592e:	b08d      	sub	sp, #52	; 0x34
   b5930:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5932:	f100 0704 	add.w	r7, r0, #4
   b5936:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b593a:	d012      	beq.n	b5962 <_ZNK9IPAddress7printToER5Print+0x3a>
   b593c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5940:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5944:	220a      	movs	r2, #10
   b5946:	4630      	mov	r0, r6
   b5948:	f000 fc61 	bl	b620e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b594c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b594e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5950:	d019      	beq.n	b5986 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5952:	2c00      	cmp	r4, #0
   b5954:	d0f4      	beq.n	b5940 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5956:	212e      	movs	r1, #46	; 0x2e
   b5958:	4630      	mov	r0, r6
   b595a:	f000 fc3f 	bl	b61dc <_ZN5Print5printEc>
   b595e:	4404      	add	r4, r0
   b5960:	e7ee      	b.n	b5940 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5962:	232f      	movs	r3, #47	; 0x2f
   b5964:	466a      	mov	r2, sp
   b5966:	4639      	mov	r1, r7
   b5968:	200a      	movs	r0, #10
		buf[0] = 0;
   b596a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b596e:	f7ff fc07 	bl	b5180 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5972:	4668      	mov	r0, sp
   b5974:	f001 fcef 	bl	b7356 <strlen>
   b5978:	6833      	ldr	r3, [r6, #0]
   b597a:	4602      	mov	r2, r0
   b597c:	68db      	ldr	r3, [r3, #12]
   b597e:	4669      	mov	r1, sp
   b5980:	4630      	mov	r0, r6
   b5982:	4798      	blx	r3
   b5984:	4604      	mov	r4, r0
    }
    return n;
}
   b5986:	4620      	mov	r0, r4
   b5988:	b00d      	add	sp, #52	; 0x34
   b598a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b598c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b598c:	b510      	push	{r4, lr}
   b598e:	4b05      	ldr	r3, [pc, #20]	; (b59a4 <_ZN9IPAddressC1Ev+0x18>)
   b5990:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5992:	2211      	movs	r2, #17
   b5994:	f840 3b04 	str.w	r3, [r0], #4
   b5998:	2100      	movs	r1, #0
   b599a:	f001 fc81 	bl	b72a0 <memset>
}
   b599e:	4620      	mov	r0, r4
   b59a0:	bd10      	pop	{r4, pc}
   b59a2:	bf00      	nop
   b59a4:	000b78ec 	.word	0x000b78ec

000b59a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b59a8:	4603      	mov	r3, r0
   b59aa:	4a07      	ldr	r2, [pc, #28]	; (b59c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b59ac:	b510      	push	{r4, lr}
   b59ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b59b2:	f101 0210 	add.w	r2, r1, #16
   b59b6:	f851 4b04 	ldr.w	r4, [r1], #4
   b59ba:	f843 4b04 	str.w	r4, [r3], #4
   b59be:	4291      	cmp	r1, r2
   b59c0:	d1f9      	bne.n	b59b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b59c2:	780a      	ldrb	r2, [r1, #0]
   b59c4:	701a      	strb	r2, [r3, #0]
}
   b59c6:	bd10      	pop	{r4, pc}
   b59c8:	000b78ec 	.word	0x000b78ec

000b59cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b59cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b59ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b59d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b59d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b59da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b59de:	2304      	movs	r3, #4
   b59e0:	6041      	str	r1, [r0, #4]
   b59e2:	7503      	strb	r3, [r0, #20]
}
   b59e4:	bd10      	pop	{r4, pc}
	...

000b59e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b59e8:	b507      	push	{r0, r1, r2, lr}
   b59ea:	4b06      	ldr	r3, [pc, #24]	; (b5a04 <_ZN9IPAddressC1EPKh+0x1c>)
   b59ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b59ee:	78cb      	ldrb	r3, [r1, #3]
   b59f0:	9300      	str	r3, [sp, #0]
   b59f2:	788b      	ldrb	r3, [r1, #2]
   b59f4:	784a      	ldrb	r2, [r1, #1]
   b59f6:	7809      	ldrb	r1, [r1, #0]
   b59f8:	f7ff ffe8 	bl	b59cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b59fc:	b003      	add	sp, #12
   b59fe:	f85d fb04 	ldr.w	pc, [sp], #4
   b5a02:	bf00      	nop
   b5a04:	000b78ec 	.word	0x000b78ec

000b5a08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5a08:	4770      	bx	lr

000b5a0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5a0a:	2000      	movs	r0, #0
   b5a0c:	4770      	bx	lr

000b5a0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5a0e:	b510      	push	{r4, lr}
   b5a10:	2110      	movs	r1, #16
   b5a12:	4604      	mov	r4, r0
   b5a14:	f7fe fb43 	bl	b409e <_ZdlPvj>
   b5a18:	4620      	mov	r0, r4
   b5a1a:	bd10      	pop	{r4, pc}

000b5a1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5a1c:	b508      	push	{r3, lr}
      { delete this; }
   b5a1e:	f7ff fff6 	bl	b5a0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5a22:	bd08      	pop	{r3, pc}

000b5a24 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5a24:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5a26:	2200      	movs	r2, #0
   b5a28:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5a2c:	6002      	str	r2, [r0, #0]
   b5a2e:	8084      	strh	r4, [r0, #4]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5a30:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a32:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5a34:	680c      	ldr	r4, [r1, #0]
   b5a36:	8085      	strh	r5, [r0, #4]
   b5a38:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a3a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5a3c:	bd30      	pop	{r4, r5, pc}

000b5a3e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5a3e:	b510      	push	{r4, lr}
   b5a40:	4604      	mov	r4, r0
    free((void*)msg_);
   b5a42:	6800      	ldr	r0, [r0, #0]
   b5a44:	f7ff fcec 	bl	b5420 <free>
}
   b5a48:	4620      	mov	r0, r4
   b5a4a:	bd10      	pop	{r4, pc}

000b5a4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5a4c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5a4e:	68c4      	ldr	r4, [r0, #12]
   b5a50:	b1f4      	cbz	r4, b5a90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5a52:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5a54:	2b02      	cmp	r3, #2
   b5a56:	d103      	bne.n	b5a60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5a58:	f104 000c 	add.w	r0, r4, #12
   b5a5c:	f7ff ffef 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5a60:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5a62:	b135      	cbz	r5, b5a72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b5a64:	4628      	mov	r0, r5
   b5a66:	f7ff fd23 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
   b5a6a:	2110      	movs	r1, #16
   b5a6c:	4628      	mov	r0, r5
   b5a6e:	f7fe fb16 	bl	b409e <_ZdlPvj>
   b5a72:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5a74:	b135      	cbz	r5, b5a84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5a76:	4628      	mov	r0, r5
   b5a78:	f7ff fd1a 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
   b5a7c:	2110      	movs	r1, #16
   b5a7e:	4628      	mov	r0, r5
   b5a80:	f7fe fb0d 	bl	b409e <_ZdlPvj>
   b5a84:	4620      	mov	r0, r4
   b5a86:	2114      	movs	r1, #20
   b5a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a8c:	f7fe bb07 	b.w	b409e <_ZdlPvj>
   b5a90:	bd38      	pop	{r3, r4, r5, pc}

000b5a92 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5a92:	680b      	ldr	r3, [r1, #0]
   b5a94:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5a96:	684b      	ldr	r3, [r1, #4]
   b5a98:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5a9a:	b113      	cbz	r3, b5aa2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5a9c:	685a      	ldr	r2, [r3, #4]
   b5a9e:	3201      	adds	r2, #1
   b5aa0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5aa2:	4770      	bx	lr

000b5aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5aa6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5aa8:	4668      	mov	r0, sp
   b5aaa:	460d      	mov	r5, r1
   b5aac:	f7ff fff1 	bl	b5a92 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ab0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5ab2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ab4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5ab6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5ab8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5aba:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5abc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5abe:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5ac0:	f7fe fbf4 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5ac4:	b135      	cbz	r5, b5ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5ac6:	1d28      	adds	r0, r5, #4
   b5ac8:	f7fe fbf0 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5acc:	2108      	movs	r1, #8
   b5ace:	4628      	mov	r0, r5
   b5ad0:	f7fe fae5 	bl	b409e <_ZdlPvj>
        return p;
    }
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	b003      	add	sp, #12
   b5ad8:	bd30      	pop	{r4, r5, pc}

000b5ada <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5ada:	b513      	push	{r0, r1, r4, lr}
   b5adc:	460b      	mov	r3, r1
   b5ade:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ae0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5ae4:	466c      	mov	r4, sp
   b5ae6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5aea:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5aee:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5af2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5af6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5afa:	b002      	add	sp, #8
   b5afc:	bd10      	pop	{r4, pc}

000b5afe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b5afe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5b00:	b510      	push	{r4, lr}
      if (_M_empty())
   b5b02:	b90a      	cbnz	r2, b5b08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5b04:	f000 fe5a 	bl	b67bc <_ZSt25__throw_bad_function_callv>
    }
   b5b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b0c:	68c3      	ldr	r3, [r0, #12]
   b5b0e:	4718      	bx	r3

000b5b10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5b10:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5b12:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5b14:	f100 0110 	add.w	r1, r0, #16
   b5b18:	f7ff fff1 	bl	b5afe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5b1c:	bd08      	pop	{r3, pc}

000b5b1e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5b1e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5b20:	b510      	push	{r4, lr}
      if (_M_empty())
   b5b22:	b90a      	cbnz	r2, b5b28 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5b24:	f000 fe4a 	bl	b67bc <_ZSt25__throw_bad_function_callv>
    }
   b5b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b2c:	68c3      	ldr	r3, [r0, #12]
   b5b2e:	4718      	bx	r3

000b5b30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5b30:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5b32:	6800      	ldr	r0, [r0, #0]
   b5b34:	f100 0110 	add.w	r1, r0, #16
   b5b38:	f7ff fff1 	bl	b5b1e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5b3c:	bd08      	pop	{r3, pc}
	...

000b5b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5b40:	b538      	push	{r3, r4, r5, lr}
   b5b42:	2300      	movs	r3, #0
   b5b44:	4604      	mov	r4, r0
   b5b46:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b48:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5b4a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b4c:	f7fe faa3 	bl	b4096 <_Znwj>
   b5b50:	b128      	cbz	r0, b5b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5b52:	2301      	movs	r3, #1
   b5b54:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5b58:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5b5a:	6003      	str	r3, [r0, #0]
   b5b5c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b5e:	6020      	str	r0, [r4, #0]
	}
   b5b60:	4620      	mov	r0, r4
   b5b62:	bd38      	pop	{r3, r4, r5, pc}
   b5b64:	000b7900 	.word	0x000b7900

000b5b68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5b68:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5b6a:	2300      	movs	r3, #0
   b5b6c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5b6e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5b70:	4604      	mov	r4, r0
   b5b72:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5b74:	b12b      	cbz	r3, b5b82 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5b76:	2202      	movs	r2, #2
   b5b78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5b7a:	68eb      	ldr	r3, [r5, #12]
   b5b7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5b7e:	68ab      	ldr	r3, [r5, #8]
   b5b80:	60a3      	str	r3, [r4, #8]
    }
   b5b82:	4620      	mov	r0, r4
   b5b84:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5b88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5b88:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b8a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5b8c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5b8e:	4668      	mov	r0, sp
   b5b90:	f7ff ff48 	bl	b5a24 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5b94:	f04f 0302 	mov.w	r3, #2
   b5b98:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5b9c:	2a00      	cmp	r2, #0
   b5b9e:	d103      	bne.n	b5ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5ba0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5ba4:	2900      	cmp	r1, #0
   b5ba6:	d1f7      	bne.n	b5b98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5ba8:	d125      	bne.n	b5bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5baa:	f104 050c 	add.w	r5, r4, #12
   b5bae:	4669      	mov	r1, sp
   b5bb0:	4628      	mov	r0, r5
   b5bb2:	f7ff ff37 	bl	b5a24 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5bb6:	f3bf 8f5b 	dmb	ish
   b5bba:	2301      	movs	r3, #1
   b5bbc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5bbe:	2000      	movs	r0, #0
   b5bc0:	f104 0308 	add.w	r3, r4, #8
   b5bc4:	f3bf 8f5b 	dmb	ish
   b5bc8:	e853 6f00 	ldrex	r6, [r3]
   b5bcc:	e843 0200 	strex	r2, r0, [r3]
   b5bd0:	2a00      	cmp	r2, #0
   b5bd2:	d1f9      	bne.n	b5bc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5bd4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5bd8:	b16e      	cbz	r6, b5bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5bda:	f7ff fbe1 	bl	b53a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5bde:	b178      	cbz	r0, b5c00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5be0:	4629      	mov	r1, r5
   b5be2:	4630      	mov	r0, r6
   b5be4:	f7ff ff8b 	bl	b5afe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5be8:	4630      	mov	r0, r6
   b5bea:	f7ff fc61 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5bee:	2110      	movs	r1, #16
   b5bf0:	4630      	mov	r0, r6
   b5bf2:	f7fe fa54 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b5bf6:	4668      	mov	r0, sp
   b5bf8:	f7ff ff21 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
    }
   b5bfc:	b009      	add	sp, #36	; 0x24
   b5bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5c00:	4631      	mov	r1, r6
   b5c02:	a802      	add	r0, sp, #8
   b5c04:	f7ff ffb0 	bl	b5b68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5c08:	68e0      	ldr	r0, [r4, #12]
   b5c0a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5c0e:	b108      	cbz	r0, b5c14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5c10:	f001 fb84 	bl	b731c <strdup>
        type_(type) {
   b5c14:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5c16:	2010      	movs	r0, #16
   b5c18:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5c1c:	f7fe fa3b 	bl	b4096 <_Znwj>
   b5c20:	4605      	mov	r5, r0
   b5c22:	b1e8      	cbz	r0, b5c60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5c24:	2700      	movs	r7, #0
   b5c26:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c28:	2018      	movs	r0, #24
   b5c2a:	f7fe fa34 	bl	b4096 <_Znwj>
   b5c2e:	4604      	mov	r4, r0
   b5c30:	b188      	cbz	r0, b5c56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5c32:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5c34:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5c36:	a802      	add	r0, sp, #8
   b5c38:	f7ff ff4f 	bl	b5ada <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c3c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5c3e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c40:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c42:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5c44:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5c46:	a906      	add	r1, sp, #24
   b5c48:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c4a:	60e3      	str	r3, [r4, #12]
   b5c4c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5c50:	9205      	str	r2, [sp, #20]
   b5c52:	f7ff fee7 	bl	b5a24 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5c56:	4b08      	ldr	r3, [pc, #32]	; (b5c78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5c58:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5c5a:	4b08      	ldr	r3, [pc, #32]	; (b5c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c5c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5c5e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5c60:	a806      	add	r0, sp, #24
   b5c62:	f7ff feec 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5c66:	a802      	add	r0, sp, #8
   b5c68:	f7ff fc22 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5c6c:	2200      	movs	r2, #0
   b5c6e:	4629      	mov	r1, r5
   b5c70:	4803      	ldr	r0, [pc, #12]	; (b5c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5c72:	f7ff fb9d 	bl	b53b0 <application_thread_invoke>
   b5c76:	e7b7      	b.n	b5be8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5c78:	000b5b11 	.word	0x000b5b11
   b5c7c:	000b5d95 	.word	0x000b5d95
   b5c80:	000b5735 	.word	0x000b5735

000b5c84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c88:	b08b      	sub	sp, #44	; 0x2c
   b5c8a:	4605      	mov	r5, r0
   b5c8c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5c90:	460f      	mov	r7, r1
   b5c92:	4690      	mov	r8, r2
   b5c94:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c96:	f7ff faf3 	bl	b5280 <spark_cloud_flag_connected>
   b5c9a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5c9c:	4683      	mov	fp, r0
   b5c9e:	bb38      	cbnz	r0, b5cf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5ca0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5ca4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5ca6:	a905      	add	r1, sp, #20
   b5ca8:	4630      	mov	r0, r6
   b5caa:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5cae:	f7ff feb9 	bl	b5a24 <_ZN8particle5ErrorC1EOS0_>
   b5cb2:	2014      	movs	r0, #20
   b5cb4:	f7fe f9ef 	bl	b4096 <_Znwj>
   b5cb8:	4604      	mov	r4, r0
   b5cba:	b148      	cbz	r0, b5cd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5cbc:	2302      	movs	r3, #2
   b5cbe:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5cc0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5cc2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5cc6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5cc8:	4631      	mov	r1, r6
   b5cca:	300c      	adds	r0, #12
   b5ccc:	f7ff feaa 	bl	b5a24 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5cd0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5cd2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5cd4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5cd8:	f7ff ff32 	bl	b5b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5cdc:	4630      	mov	r0, r6
   b5cde:	f7ff feae 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5ce2:	a805      	add	r0, sp, #20
   b5ce4:	f7ff feab 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5ce8:	4628      	mov	r0, r5
   b5cea:	b00b      	add	sp, #44	; 0x2c
   b5cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5cf0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5cf2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5cf4:	2014      	movs	r0, #20
   b5cf6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5cfa:	9307      	str	r3, [sp, #28]
   b5cfc:	f7fe f9cb 	bl	b4096 <_Znwj>
   b5d00:	4601      	mov	r1, r0
   b5d02:	b118      	cbz	r0, b5d0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5d08:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5d0a:	7044      	strb	r4, [r0, #1]
   b5d0c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5d0e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5d10:	f7ff ff16 	bl	b5b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5d14:	4b1e      	ldr	r3, [pc, #120]	; (b5d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5d16:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5d18:	2008      	movs	r0, #8
   b5d1a:	f7fe f9bc 	bl	b4096 <_Znwj>
   b5d1e:	4604      	mov	r4, r0
   b5d20:	b110      	cbz	r0, b5d28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5d22:	a903      	add	r1, sp, #12
   b5d24:	f7ff feb5 	bl	b5a92 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5d28:	9600      	str	r6, [sp, #0]
   b5d2a:	fa5f f38a 	uxtb.w	r3, sl
   b5d2e:	464a      	mov	r2, r9
   b5d30:	4641      	mov	r1, r8
   b5d32:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5d34:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5d36:	f7ff fab3 	bl	b52a0 <spark_send_event>
   b5d3a:	b9b8      	cbnz	r0, b5d6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5d3c:	9b03      	ldr	r3, [sp, #12]
   b5d3e:	785b      	ldrb	r3, [r3, #1]
   b5d40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5d44:	b993      	cbnz	r3, b5d6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5d46:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5d4a:	a905      	add	r1, sp, #20
   b5d4c:	a803      	add	r0, sp, #12
   b5d4e:	9205      	str	r2, [sp, #20]
   b5d50:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5d54:	f7ff ff18 	bl	b5b88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5d58:	a805      	add	r0, sp, #20
   b5d5a:	f7ff fe70 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5d5e:	a805      	add	r0, sp, #20
   b5d60:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5d62:	f7ff fe9f 	bl	b5aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5d66:	a806      	add	r0, sp, #24
   b5d68:	f7fe faa0 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d6c:	a903      	add	r1, sp, #12
   b5d6e:	a805      	add	r0, sp, #20
   b5d70:	f7ff fe8f 	bl	b5a92 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d74:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5d76:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d78:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5d7a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5d7c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5d7e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5d80:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5d82:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5d84:	f7fe fa92 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d88:	a804      	add	r0, sp, #16
   b5d8a:	f7fe fa8f 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5d8e:	e7ab      	b.n	b5ce8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5d90:	000b5e11 	.word	0x000b5e11

000b5d94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5d94:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d98:	4605      	mov	r5, r0
	switch (__op)
   b5d9a:	d103      	bne.n	b5da4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5d9c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5d9e:	6003      	str	r3, [r0, #0]
      }
   b5da0:	2000      	movs	r0, #0
   b5da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5da4:	2a02      	cmp	r2, #2
   b5da6:	d010      	beq.n	b5dca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5da8:	2a03      	cmp	r2, #3
   b5daa:	d1f9      	bne.n	b5da0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5dac:	6804      	ldr	r4, [r0, #0]
   b5dae:	2c00      	cmp	r4, #0
   b5db0:	d0f6      	beq.n	b5da0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5db2:	f104 0010 	add.w	r0, r4, #16
   b5db6:	f7ff fe42 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5dba:	4620      	mov	r0, r4
   b5dbc:	f7ff fb78 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5dc0:	2118      	movs	r1, #24
   b5dc2:	4620      	mov	r0, r4
   b5dc4:	f7fe f96b 	bl	b409e <_ZdlPvj>
   b5dc8:	e7ea      	b.n	b5da0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5dca:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5dcc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5dce:	f7fe f962 	bl	b4096 <_Znwj>
   b5dd2:	4604      	mov	r4, r0
   b5dd4:	b150      	cbz	r0, b5dec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5dd6:	4631      	mov	r1, r6
   b5dd8:	f7ff fec6 	bl	b5b68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5ddc:	6930      	ldr	r0, [r6, #16]
   b5dde:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5de2:	b108      	cbz	r0, b5de8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5de4:	f001 fa9a 	bl	b731c <strdup>
        type_(type) {
   b5de8:	6120      	str	r0, [r4, #16]
   b5dea:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5dec:	602c      	str	r4, [r5, #0]
	}
   b5dee:	e7d7      	b.n	b5da0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5df0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5df0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5df2:	2300      	movs	r3, #0
   b5df4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5df6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5df8:	4604      	mov	r4, r0
   b5dfa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5dfc:	b12b      	cbz	r3, b5e0a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5dfe:	2202      	movs	r2, #2
   b5e00:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5e02:	68eb      	ldr	r3, [r5, #12]
   b5e04:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5e06:	68ab      	ldr	r3, [r5, #8]
   b5e08:	60a3      	str	r3, [r4, #8]
    }
   b5e0a:	4620      	mov	r0, r4
   b5e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e12:	b089      	sub	sp, #36	; 0x24
   b5e14:	4604      	mov	r4, r0
   b5e16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5e18:	a801      	add	r0, sp, #4
   b5e1a:	4611      	mov	r1, r2
   b5e1c:	f7ff fe42 	bl	b5aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5e20:	b1a4      	cbz	r4, b5e4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5e22:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5e24:	b11d      	cbz	r5, b5e2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5e26:	4628      	mov	r0, r5
   b5e28:	f001 fa78 	bl	b731c <strdup>
   b5e2c:	4605      	mov	r5, r0
   b5e2e:	a801      	add	r0, sp, #4
   b5e30:	a903      	add	r1, sp, #12
        type_(type) {
   b5e32:	9503      	str	r5, [sp, #12]
   b5e34:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5e38:	f7ff fea6 	bl	b5b88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5e3c:	a803      	add	r0, sp, #12
   b5e3e:	f7ff fdfe 	bl	b5a3e <_ZN8particle5ErrorD1Ev>
   b5e42:	a802      	add	r0, sp, #8
   b5e44:	f7fe fa32 	bl	b42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5e48:	b009      	add	sp, #36	; 0x24
   b5e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5e4c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5e4e:	2301      	movs	r3, #1
   b5e50:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5e54:	2a00      	cmp	r2, #0
   b5e56:	d103      	bne.n	b5e60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5e58:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5e5c:	2900      	cmp	r1, #0
   b5e5e:	d1f7      	bne.n	b5e50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5e60:	d1ef      	bne.n	b5e42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5e62:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5e64:	f3bf 8f5b 	dmb	ish
   b5e68:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5e6a:	1d2b      	adds	r3, r5, #4
   b5e6c:	f3bf 8f5b 	dmb	ish
   b5e70:	e853 6f00 	ldrex	r6, [r3]
   b5e74:	e843 4200 	strex	r2, r4, [r3]
   b5e78:	2a00      	cmp	r2, #0
   b5e7a:	d1f9      	bne.n	b5e70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5e7c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5e80:	2e00      	cmp	r6, #0
   b5e82:	d0de      	beq.n	b5e42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5e84:	4620      	mov	r0, r4
   b5e86:	f7ff fa8b 	bl	b53a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5e8a:	4607      	mov	r7, r0
   b5e8c:	b160      	cbz	r0, b5ea8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5e8e:	f105 010c 	add.w	r1, r5, #12
   b5e92:	4630      	mov	r0, r6
   b5e94:	f7ff fe43 	bl	b5b1e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5e98:	4630      	mov	r0, r6
   b5e9a:	f7ff fb09 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5e9e:	2110      	movs	r1, #16
   b5ea0:	4630      	mov	r0, r6
   b5ea2:	f7fe f8fc 	bl	b409e <_ZdlPvj>
   b5ea6:	e7cc      	b.n	b5e42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5ea8:	4631      	mov	r1, r6
   b5eaa:	a803      	add	r0, sp, #12
   b5eac:	f7ff ffa0 	bl	b5df0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5eb0:	7b2b      	ldrb	r3, [r5, #12]
   b5eb2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5eb6:	2010      	movs	r0, #16
   b5eb8:	f7fe f8ed 	bl	b4096 <_Znwj>
   b5ebc:	4605      	mov	r5, r0
   b5ebe:	b1d0      	cbz	r0, b5ef6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5ec0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ec2:	2014      	movs	r0, #20
   b5ec4:	f7fe f8e7 	bl	b4096 <_Znwj>
   b5ec8:	4604      	mov	r4, r0
   b5eca:	b178      	cbz	r0, b5eec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5ecc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5ece:	4601      	mov	r1, r0
   b5ed0:	a803      	add	r0, sp, #12
   b5ed2:	f7ff fe02 	bl	b5ada <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ed6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5ed8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5eda:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5edc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5ede:	9205      	str	r2, [sp, #20]
   b5ee0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ee2:	60e3      	str	r3, [r4, #12]
   b5ee4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5ee8:	9206      	str	r2, [sp, #24]
   b5eea:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5eec:	4b06      	ldr	r3, [pc, #24]	; (b5f08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5eee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5ef0:	4b06      	ldr	r3, [pc, #24]	; (b5f0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ef2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5ef4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5ef6:	a803      	add	r0, sp, #12
   b5ef8:	f7ff fada 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5efc:	2200      	movs	r2, #0
   b5efe:	4629      	mov	r1, r5
   b5f00:	4803      	ldr	r0, [pc, #12]	; (b5f10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5f02:	f7ff fa55 	bl	b53b0 <application_thread_invoke>
   b5f06:	e7c7      	b.n	b5e98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5f08:	000b5b31 	.word	0x000b5b31
   b5f0c:	000b5f15 	.word	0x000b5f15
   b5f10:	000b5735 	.word	0x000b5735

000b5f14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5f14:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5f16:	b570      	push	{r4, r5, r6, lr}
   b5f18:	4604      	mov	r4, r0
	switch (__op)
   b5f1a:	d103      	bne.n	b5f24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5f1c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5f1e:	6003      	str	r3, [r0, #0]
      }
   b5f20:	2000      	movs	r0, #0
   b5f22:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5f24:	2a02      	cmp	r2, #2
   b5f26:	d00c      	beq.n	b5f42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5f28:	2a03      	cmp	r2, #3
   b5f2a:	d1f9      	bne.n	b5f20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5f2c:	6804      	ldr	r4, [r0, #0]
   b5f2e:	2c00      	cmp	r4, #0
   b5f30:	d0f6      	beq.n	b5f20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5f32:	4620      	mov	r0, r4
   b5f34:	f7ff fabc 	bl	b54b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5f38:	2114      	movs	r1, #20
   b5f3a:	4620      	mov	r0, r4
   b5f3c:	f7fe f8af 	bl	b409e <_ZdlPvj>
   b5f40:	e7ee      	b.n	b5f20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5f42:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5f44:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5f46:	f7fe f8a6 	bl	b4096 <_Znwj>
   b5f4a:	4605      	mov	r5, r0
   b5f4c:	b120      	cbz	r0, b5f58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5f4e:	4631      	mov	r1, r6
   b5f50:	f7ff ff4e 	bl	b5df0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5f54:	7c33      	ldrb	r3, [r6, #16]
   b5f56:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5f58:	6025      	str	r5, [r4, #0]
	}
   b5f5a:	e7e1      	b.n	b5f20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5f5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5f5c:	4b01      	ldr	r3, [pc, #4]	; (b5f64 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5f5e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5f60:	4770      	bx	lr
   b5f62:	bf00      	nop
   b5f64:	2003e43c 	.word	0x2003e43c

000b5f68 <serialEventRun>:
{
   b5f68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5f6a:	4b0b      	ldr	r3, [pc, #44]	; (b5f98 <serialEventRun+0x30>)
   b5f6c:	b143      	cbz	r3, b5f80 <serialEventRun+0x18>
   b5f6e:	f7ff fcad 	bl	b58cc <_Z16_fetch_usbserialv>
   b5f72:	6803      	ldr	r3, [r0, #0]
   b5f74:	691b      	ldr	r3, [r3, #16]
   b5f76:	4798      	blx	r3
   b5f78:	2800      	cmp	r0, #0
   b5f7a:	dd01      	ble.n	b5f80 <serialEventRun+0x18>
        serialEvent();
   b5f7c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5f80:	4b06      	ldr	r3, [pc, #24]	; (b5f9c <serialEventRun+0x34>)
   b5f82:	b143      	cbz	r3, b5f96 <serialEventRun+0x2e>
   b5f84:	f000 fb8c 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b5f88:	6803      	ldr	r3, [r0, #0]
   b5f8a:	691b      	ldr	r3, [r3, #16]
   b5f8c:	4798      	blx	r3
   b5f8e:	2800      	cmp	r0, #0
   b5f90:	dd01      	ble.n	b5f96 <serialEventRun+0x2e>
        serialEvent1();
   b5f92:	f3af 8000 	nop.w
}
   b5f96:	bd08      	pop	{r3, pc}
	...

000b5fa0 <_post_loop>:
{
   b5fa0:	b508      	push	{r3, lr}
	serialEventRun();
   b5fa2:	f7ff ffe1 	bl	b5f68 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5fa6:	f7ff f903 	bl	b51b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5faa:	4b01      	ldr	r3, [pc, #4]	; (b5fb0 <_post_loop+0x10>)
   b5fac:	6018      	str	r0, [r3, #0]
}
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	2003e734 	.word	0x2003e734

000b5fb4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5fb4:	4805      	ldr	r0, [pc, #20]	; (b5fcc <_Z33system_initialize_user_backup_ramv+0x18>)
   b5fb6:	4a06      	ldr	r2, [pc, #24]	; (b5fd0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5fb8:	4906      	ldr	r1, [pc, #24]	; (b5fd4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5fba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5fbc:	1a12      	subs	r2, r2, r0
   b5fbe:	f001 f961 	bl	b7284 <memcpy>
    __backup_sram_signature = signature;
   b5fc2:	4b05      	ldr	r3, [pc, #20]	; (b5fd8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5fc4:	4a05      	ldr	r2, [pc, #20]	; (b5fdc <_Z33system_initialize_user_backup_ramv+0x28>)
   b5fc6:	601a      	str	r2, [r3, #0]
}
   b5fc8:	bd08      	pop	{r3, pc}
   b5fca:	bf00      	nop
   b5fcc:	2003f400 	.word	0x2003f400
   b5fd0:	2003f404 	.word	0x2003f404
   b5fd4:	000b7a60 	.word	0x000b7a60
   b5fd8:	2003f400 	.word	0x2003f400
   b5fdc:	9a271c1e 	.word	0x9a271c1e

000b5fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5fe0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5fe2:	2300      	movs	r3, #0
   b5fe4:	9300      	str	r3, [sp, #0]
   b5fe6:	461a      	mov	r2, r3
   b5fe8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5fec:	f7ff f9f2 	bl	b53d4 <system_ctrl_set_result>
}
   b5ff0:	b003      	add	sp, #12
   b5ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5ff8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5ff8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5ffa:	8843      	ldrh	r3, [r0, #2]
   b5ffc:	2b0a      	cmp	r3, #10
   b5ffe:	d008      	beq.n	b6012 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6000:	2b50      	cmp	r3, #80	; 0x50
   b6002:	d10b      	bne.n	b601c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6004:	4b09      	ldr	r3, [pc, #36]	; (b602c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6006:	681b      	ldr	r3, [r3, #0]
   b6008:	b14b      	cbz	r3, b601e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b600a:	b003      	add	sp, #12
   b600c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6010:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6012:	f7ff ffe5 	bl	b5fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6016:	b003      	add	sp, #12
   b6018:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b601c:	2300      	movs	r3, #0
   b601e:	9300      	str	r3, [sp, #0]
   b6020:	461a      	mov	r2, r3
   b6022:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6026:	f7ff f9d5 	bl	b53d4 <system_ctrl_set_result>
}
   b602a:	e7f4      	b.n	b6016 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b602c:	2003e6e4 	.word	0x2003e6e4

000b6030 <module_user_init_hook>:
{
   b6030:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6032:	4812      	ldr	r0, [pc, #72]	; (b607c <module_user_init_hook+0x4c>)
   b6034:	2100      	movs	r1, #0
   b6036:	f7ff fa33 	bl	b54a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b603a:	4b11      	ldr	r3, [pc, #68]	; (b6080 <module_user_init_hook+0x50>)
   b603c:	681a      	ldr	r2, [r3, #0]
   b603e:	4b11      	ldr	r3, [pc, #68]	; (b6084 <module_user_init_hook+0x54>)
   b6040:	429a      	cmp	r2, r3
   b6042:	4b11      	ldr	r3, [pc, #68]	; (b6088 <module_user_init_hook+0x58>)
   b6044:	bf0c      	ite	eq
   b6046:	2201      	moveq	r2, #1
   b6048:	2200      	movne	r2, #0
   b604a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b604c:	d001      	beq.n	b6052 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b604e:	f7ff ffb1 	bl	b5fb4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6052:	f7ff f8a5 	bl	b51a0 <HAL_RNG_GetRandomNumber>
   b6056:	4604      	mov	r4, r0
    srand(seed);
   b6058:	f001 f92a 	bl	b72b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b605c:	4b0b      	ldr	r3, [pc, #44]	; (b608c <module_user_init_hook+0x5c>)
   b605e:	b113      	cbz	r3, b6066 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6060:	4620      	mov	r0, r4
   b6062:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6066:	2100      	movs	r1, #0
   b6068:	4808      	ldr	r0, [pc, #32]	; (b608c <module_user_init_hook+0x5c>)
   b606a:	f7ff f921 	bl	b52b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b606e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6072:	4807      	ldr	r0, [pc, #28]	; (b6090 <module_user_init_hook+0x60>)
   b6074:	2100      	movs	r1, #0
   b6076:	f7ff b9a3 	b.w	b53c0 <system_ctrl_set_app_request_handler>
   b607a:	bf00      	nop
   b607c:	000b5f5d 	.word	0x000b5f5d
   b6080:	2003f400 	.word	0x2003f400
   b6084:	9a271c1e 	.word	0x9a271c1e
   b6088:	2003e6e0 	.word	0x2003e6e0
   b608c:	00000000 	.word	0x00000000
   b6090:	000b5ff9 	.word	0x000b5ff9

000b6094 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b6094:	b510      	push	{r4, lr}
   b6096:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b6098:	f7ff f8da 	bl	b5250 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b609c:	4284      	cmp	r4, r0
   b609e:	d008      	beq.n	b60b2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b60a0:	b11c      	cbz	r4, b60aa <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b60a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b60a6:	f7ff b8bb 	b.w	b5220 <LED_Signaling_Start>
}
   b60aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b60ae:	f7ff b8bf 	b.w	b5230 <LED_Signaling_Stop>
}
   b60b2:	bd10      	pop	{r4, pc}

000b60b4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b60b4:	b570      	push	{r4, r5, r6, lr}
   b60b6:	4605      	mov	r5, r0
   b60b8:	460e      	mov	r6, r1
   b60ba:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b60bc:	f7ff f8c8 	bl	b5250 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b60c0:	b150      	cbz	r0, b60d8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b60c2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b60c6:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b60ca:	f7ff f8a1 	bl	b5210 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b60ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b60d2:	20e7      	movs	r0, #231	; 0xe7
   b60d4:	f7ff b8c4 	b.w	b5260 <LED_On>
}
   b60d8:	bd70      	pop	{r4, r5, r6, pc}

000b60da <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   b60da:	b510      	push	{r4, lr}
   b60dc:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   b60de:	f7ff f8af 	bl	b5240 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   b60e2:	f7ff f8b5 	bl	b5250 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   b60e6:	b128      	cbz	r0, b60f4 <_ZN8RGBClass10brightnessEhb+0x1a>
   b60e8:	b124      	cbz	r4, b60f4 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   b60ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   b60ee:	20e7      	movs	r0, #231	; 0xe7
   b60f0:	f7ff b8b6 	b.w	b5260 <LED_On>
}
   b60f4:	bd10      	pop	{r4, pc}
	...

000b60f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b60f8:	4b01      	ldr	r3, [pc, #4]	; (b6100 <_GLOBAL__sub_I_RGB+0x8>)
   b60fa:	2200      	movs	r2, #0
   b60fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b60fe:	4770      	bx	lr
   b6100:	2003e6e8 	.word	0x2003e6e8

000b6104 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6104:	2100      	movs	r1, #0
   b6106:	f7ff b943 	b.w	b5390 <system_delay_ms>
	...

000b610c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b610c:	4b02      	ldr	r3, [pc, #8]	; (b6118 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b610e:	681a      	ldr	r2, [r3, #0]
   b6110:	4b02      	ldr	r3, [pc, #8]	; (b611c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6112:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6114:	4770      	bx	lr
   b6116:	bf00      	nop
   b6118:	2003e434 	.word	0x2003e434
   b611c:	2003e6f8 	.word	0x2003e6f8

000b6120 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6120:	4b01      	ldr	r3, [pc, #4]	; (b6128 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6122:	4a02      	ldr	r2, [pc, #8]	; (b612c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6124:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6126:	4770      	bx	lr
   b6128:	2003e6fc 	.word	0x2003e6fc
   b612c:	000b7930 	.word	0x000b7930

000b6130 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6130:	b510      	push	{r4, lr}
   b6132:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6134:	f7ff f83c 	bl	b51b0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6138:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b613a:	6823      	ldr	r3, [r4, #0]
   b613c:	4620      	mov	r0, r4
   b613e:	695b      	ldr	r3, [r3, #20]
   b6140:	4798      	blx	r3
    if (c >= 0) return c;
   b6142:	2800      	cmp	r0, #0
   b6144:	da08      	bge.n	b6158 <_ZN6Stream9timedReadEv+0x28>
   b6146:	f7ff f833 	bl	b51b0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b614a:	68e3      	ldr	r3, [r4, #12]
   b614c:	1ac0      	subs	r0, r0, r3
   b614e:	68a3      	ldr	r3, [r4, #8]
   b6150:	4298      	cmp	r0, r3
   b6152:	d3f2      	bcc.n	b613a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6158:	bd10      	pop	{r4, pc}
	...

000b615c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b615c:	b570      	push	{r4, r5, r6, lr}
   b615e:	460d      	mov	r5, r1
  String ret;
   b6160:	4909      	ldr	r1, [pc, #36]	; (b6188 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b6162:	4604      	mov	r4, r0
   b6164:	4616      	mov	r6, r2
  String ret;
   b6166:	f000 f8f4 	bl	b6352 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b616a:	4628      	mov	r0, r5
   b616c:	f7ff ffe0 	bl	b6130 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b6170:	2800      	cmp	r0, #0
   b6172:	db06      	blt.n	b6182 <_ZN6Stream15readStringUntilEc+0x26>
   b6174:	4286      	cmp	r6, r0
   b6176:	d004      	beq.n	b6182 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6178:	b2c1      	uxtb	r1, r0
   b617a:	4620      	mov	r0, r4
   b617c:	f000 f939 	bl	b63f2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6180:	e7f3      	b.n	b616a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b6182:	4620      	mov	r0, r4
   b6184:	bd70      	pop	{r4, r5, r6, pc}
   b6186:	bf00      	nop
   b6188:	000b766d 	.word	0x000b766d

000b618c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b618e:	4606      	mov	r6, r0
   b6190:	460d      	mov	r5, r1
  size_t n = 0;
   b6192:	188f      	adds	r7, r1, r2
   b6194:	2400      	movs	r4, #0
  while (size--) {
   b6196:	42bd      	cmp	r5, r7
   b6198:	d00c      	beq.n	b61b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b619a:	6833      	ldr	r3, [r6, #0]
   b619c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b61a0:	689b      	ldr	r3, [r3, #8]
   b61a2:	4630      	mov	r0, r6
   b61a4:	4798      	blx	r3
     if (chunk>=0)
   b61a6:	1e03      	subs	r3, r0, #0
   b61a8:	db01      	blt.n	b61ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b61aa:	441c      	add	r4, r3
  while (size--) {
   b61ac:	e7f3      	b.n	b6196 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b61ae:	2c00      	cmp	r4, #0
   b61b0:	bf08      	it	eq
   b61b2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b61b4:	4620      	mov	r0, r4
   b61b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61b8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b61b8:	b513      	push	{r0, r1, r4, lr}
   b61ba:	4604      	mov	r4, r0
    }
   b61bc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b61be:	b159      	cbz	r1, b61d8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b61c0:	9101      	str	r1, [sp, #4]
   b61c2:	f001 f8c8 	bl	b7356 <strlen>
   b61c6:	6823      	ldr	r3, [r4, #0]
   b61c8:	9901      	ldr	r1, [sp, #4]
   b61ca:	68db      	ldr	r3, [r3, #12]
   b61cc:	4602      	mov	r2, r0
   b61ce:	4620      	mov	r0, r4
    }
   b61d0:	b002      	add	sp, #8
   b61d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b61d6:	4718      	bx	r3
    }
   b61d8:	b002      	add	sp, #8
   b61da:	bd10      	pop	{r4, pc}

000b61dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b61dc:	6803      	ldr	r3, [r0, #0]
   b61de:	689b      	ldr	r3, [r3, #8]
   b61e0:	4718      	bx	r3

000b61e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b61e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b61e4:	210d      	movs	r1, #13
{
   b61e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b61e8:	f7ff fff8 	bl	b61dc <_ZN5Print5printEc>
  n += print('\n');
   b61ec:	210a      	movs	r1, #10
  size_t n = print('\r');
   b61ee:	4604      	mov	r4, r0
  n += print('\n');
   b61f0:	4628      	mov	r0, r5
   b61f2:	f7ff fff3 	bl	b61dc <_ZN5Print5printEc>
  return n;
}
   b61f6:	4420      	add	r0, r4
   b61f8:	bd38      	pop	{r3, r4, r5, pc}

000b61fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b61fa:	b538      	push	{r3, r4, r5, lr}
   b61fc:	4605      	mov	r5, r0
  return write(str);
   b61fe:	f7ff ffdb 	bl	b61b8 <_ZN5Print5writeEPKc>
   b6202:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6204:	4628      	mov	r0, r5
   b6206:	f7ff ffec 	bl	b61e2 <_ZN5Print7printlnEv>
  return n;
}
   b620a:	4420      	add	r0, r4
   b620c:	bd38      	pop	{r3, r4, r5, pc}

000b620e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b620e:	b530      	push	{r4, r5, lr}
   b6210:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6212:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6214:	2a01      	cmp	r2, #1
  *str = '\0';
   b6216:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b621a:	bf98      	it	ls
   b621c:	220a      	movls	r2, #10
   b621e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6220:	460d      	mov	r5, r1
   b6222:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6226:	fb01 5312 	mls	r3, r1, r2, r5
   b622a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b622e:	2b09      	cmp	r3, #9
   b6230:	bf94      	ite	ls
   b6232:	3330      	addls	r3, #48	; 0x30
   b6234:	3337      	addhi	r3, #55	; 0x37
   b6236:	b2db      	uxtb	r3, r3
  } while(n);
   b6238:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b623a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b623e:	d9ef      	bls.n	b6220 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6240:	4621      	mov	r1, r4
   b6242:	f7ff ffb9 	bl	b61b8 <_ZN5Print5writeEPKc>
}
   b6246:	b00b      	add	sp, #44	; 0x2c
   b6248:	bd30      	pop	{r4, r5, pc}

000b624a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b624a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b624e:	b086      	sub	sp, #24
   b6250:	af00      	add	r7, sp, #0
   b6252:	4605      	mov	r5, r0
   b6254:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6256:	1d38      	adds	r0, r7, #4
   b6258:	2114      	movs	r1, #20
{
   b625a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b625c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b625e:	f7ff f8f7 	bl	b5450 <vsnprintf>

    if (n<bufsize)
   b6262:	2813      	cmp	r0, #19
   b6264:	d80e      	bhi.n	b6284 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6266:	1d39      	adds	r1, r7, #4
   b6268:	4628      	mov	r0, r5
   b626a:	f7ff ffa5 	bl	b61b8 <_ZN5Print5writeEPKc>
   b626e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6270:	b11e      	cbz	r6, b627a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6272:	4628      	mov	r0, r5
   b6274:	f7ff ffb5 	bl	b61e2 <_ZN5Print7printlnEv>
   b6278:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b627a:	4620      	mov	r0, r4
   b627c:	3718      	adds	r7, #24
   b627e:	46bd      	mov	sp, r7
   b6280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6284:	f100 0308 	add.w	r3, r0, #8
   b6288:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b628c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b628e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6292:	4622      	mov	r2, r4
   b6294:	1c41      	adds	r1, r0, #1
   b6296:	683b      	ldr	r3, [r7, #0]
   b6298:	4668      	mov	r0, sp
   b629a:	f7ff f8d9 	bl	b5450 <vsnprintf>
  return write(str);
   b629e:	4669      	mov	r1, sp
   b62a0:	4628      	mov	r0, r5
   b62a2:	f7ff ff89 	bl	b61b8 <_ZN5Print5writeEPKc>
   b62a6:	4604      	mov	r4, r0
   b62a8:	46c5      	mov	sp, r8
   b62aa:	e7e1      	b.n	b6270 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b62ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b62ac:	4802      	ldr	r0, [pc, #8]	; (b62b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b62ae:	2300      	movs	r3, #0
   b62b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b62b2:	f7fe bf6d 	b.w	b5190 <os_mutex_recursive_create>
   b62b6:	bf00      	nop
   b62b8:	2003e700 	.word	0x2003e700

000b62bc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b62bc:	b510      	push	{r4, lr}
   b62be:	4604      	mov	r4, r0
{
	free(buffer);
   b62c0:	6800      	ldr	r0, [r0, #0]
   b62c2:	f7ff f8ad 	bl	b5420 <free>
}
   b62c6:	4620      	mov	r0, r4
   b62c8:	bd10      	pop	{r4, pc}

000b62ca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b62ca:	b510      	push	{r4, lr}
   b62cc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b62ce:	6800      	ldr	r0, [r0, #0]
   b62d0:	b108      	cbz	r0, b62d6 <_ZN6String10invalidateEv+0xc>
   b62d2:	f7ff f8a5 	bl	b5420 <free>
	buffer = NULL;
   b62d6:	2300      	movs	r3, #0
	capacity = len = 0;
   b62d8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b62dc:	6023      	str	r3, [r4, #0]
}
   b62de:	bd10      	pop	{r4, pc}

000b62e0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b62e0:	b538      	push	{r3, r4, r5, lr}
   b62e2:	4604      	mov	r4, r0
   b62e4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b62e6:	6800      	ldr	r0, [r0, #0]
   b62e8:	3101      	adds	r1, #1
   b62ea:	f7ff f8a1 	bl	b5430 <realloc>
	if (newbuffer) {
   b62ee:	b110      	cbz	r0, b62f6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b62f0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b62f4:	2001      	movs	r0, #1
	}
	return 0;
}
   b62f6:	bd38      	pop	{r3, r4, r5, pc}

000b62f8 <_ZN6String7reserveEj>:
{
   b62f8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b62fa:	6803      	ldr	r3, [r0, #0]
{
   b62fc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b62fe:	b123      	cbz	r3, b630a <_ZN6String7reserveEj+0x12>
   b6300:	6843      	ldr	r3, [r0, #4]
   b6302:	428b      	cmp	r3, r1
   b6304:	d301      	bcc.n	b630a <_ZN6String7reserveEj+0x12>
   b6306:	2001      	movs	r0, #1
}
   b6308:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b630a:	4620      	mov	r0, r4
   b630c:	f7ff ffe8 	bl	b62e0 <_ZN6String12changeBufferEj>
   b6310:	2800      	cmp	r0, #0
   b6312:	d0f9      	beq.n	b6308 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6314:	68a3      	ldr	r3, [r4, #8]
   b6316:	2b00      	cmp	r3, #0
   b6318:	d1f5      	bne.n	b6306 <_ZN6String7reserveEj+0xe>
   b631a:	6822      	ldr	r2, [r4, #0]
   b631c:	7013      	strb	r3, [r2, #0]
   b631e:	e7f2      	b.n	b6306 <_ZN6String7reserveEj+0xe>

000b6320 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6320:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6322:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6324:	4611      	mov	r1, r2
   b6326:	9201      	str	r2, [sp, #4]
{
   b6328:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b632a:	f7ff ffe5 	bl	b62f8 <_ZN6String7reserveEj>
   b632e:	9a01      	ldr	r2, [sp, #4]
   b6330:	b928      	cbnz	r0, b633e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6332:	4620      	mov	r0, r4
   b6334:	f7ff ffc9 	bl	b62ca <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6338:	4620      	mov	r0, r4
   b633a:	b003      	add	sp, #12
   b633c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b633e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6340:	4629      	mov	r1, r5
   b6342:	6820      	ldr	r0, [r4, #0]
   b6344:	f000 ff9e 	bl	b7284 <memcpy>
	buffer[len] = 0;
   b6348:	6822      	ldr	r2, [r4, #0]
   b634a:	68a3      	ldr	r3, [r4, #8]
   b634c:	2100      	movs	r1, #0
   b634e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6350:	e7f2      	b.n	b6338 <_ZN6String4copyEPKcj+0x18>

000b6352 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6352:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6354:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6356:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b635a:	4604      	mov	r4, r0
	len = 0;
   b635c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b635e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6360:	b141      	cbz	r1, b6374 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6362:	4608      	mov	r0, r1
   b6364:	9101      	str	r1, [sp, #4]
   b6366:	f000 fff6 	bl	b7356 <strlen>
   b636a:	9901      	ldr	r1, [sp, #4]
   b636c:	4602      	mov	r2, r0
   b636e:	4620      	mov	r0, r4
   b6370:	f7ff ffd6 	bl	b6320 <_ZN6String4copyEPKcj>
}
   b6374:	4620      	mov	r0, r4
   b6376:	b002      	add	sp, #8
   b6378:	bd10      	pop	{r4, pc}

000b637a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b637a:	b538      	push	{r3, r4, r5, lr}
   b637c:	4605      	mov	r5, r0
	if (buffer) {
   b637e:	6800      	ldr	r0, [r0, #0]
{
   b6380:	460c      	mov	r4, r1
	if (buffer) {
   b6382:	b168      	cbz	r0, b63a0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6384:	686a      	ldr	r2, [r5, #4]
   b6386:	688b      	ldr	r3, [r1, #8]
   b6388:	429a      	cmp	r2, r3
   b638a:	d307      	bcc.n	b639c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b638c:	6809      	ldr	r1, [r1, #0]
   b638e:	f000 ffbd 	bl	b730c <strcpy>
			len = rhs.len;
   b6392:	68a3      	ldr	r3, [r4, #8]
   b6394:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6396:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6398:	60a3      	str	r3, [r4, #8]
}
   b639a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b639c:	f7ff f840 	bl	b5420 <free>
	buffer = rhs.buffer;
   b63a0:	6823      	ldr	r3, [r4, #0]
   b63a2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b63a4:	6863      	ldr	r3, [r4, #4]
   b63a6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b63a8:	68a3      	ldr	r3, [r4, #8]
   b63aa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b63ac:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b63ae:	e9c4 3300 	strd	r3, r3, [r4]
   b63b2:	e7f1      	b.n	b6398 <_ZN6String4moveERS_+0x1e>

000b63b4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b63b4:	4288      	cmp	r0, r1
{
   b63b6:	b510      	push	{r4, lr}
   b63b8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b63ba:	d001      	beq.n	b63c0 <_ZN6StringaSEOS_+0xc>
   b63bc:	f7ff ffdd 	bl	b637a <_ZN6String4moveERS_>
	return *this;
}
   b63c0:	4620      	mov	r0, r4
   b63c2:	bd10      	pop	{r4, pc}

000b63c4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b63c4:	b570      	push	{r4, r5, r6, lr}
   b63c6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b63c8:	460e      	mov	r6, r1
   b63ca:	b909      	cbnz	r1, b63d0 <_ZN6String6concatEPKcj+0xc>
   b63cc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b63ce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b63d0:	b16a      	cbz	r2, b63ee <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b63d2:	6884      	ldr	r4, [r0, #8]
   b63d4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b63d6:	4621      	mov	r1, r4
   b63d8:	f7ff ff8e 	bl	b62f8 <_ZN6String7reserveEj>
   b63dc:	2800      	cmp	r0, #0
   b63de:	d0f5      	beq.n	b63cc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b63e0:	6828      	ldr	r0, [r5, #0]
   b63e2:	68ab      	ldr	r3, [r5, #8]
   b63e4:	4631      	mov	r1, r6
   b63e6:	4418      	add	r0, r3
   b63e8:	f000 ff90 	bl	b730c <strcpy>
	len = newlen;
   b63ec:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b63ee:	2001      	movs	r0, #1
   b63f0:	e7ed      	b.n	b63ce <_ZN6String6concatEPKcj+0xa>

000b63f2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b63f2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b63f4:	2300      	movs	r3, #0
	buf[0] = c;
   b63f6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b63fa:	2201      	movs	r2, #1
   b63fc:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b63fe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6402:	f7ff ffdf 	bl	b63c4 <_ZN6String6concatEPKcj>
}
   b6406:	b003      	add	sp, #12
   b6408:	f85d fb04 	ldr.w	pc, [sp], #4

000b640c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b640c:	b510      	push	{r4, lr}
   b640e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b6410:	6800      	ldr	r0, [r0, #0]
   b6412:	b118      	cbz	r0, b641c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b6414:	f7ff f804 	bl	b5420 <free>
            wakeupSource_ = nullptr;
   b6418:	2300      	movs	r3, #0
   b641a:	6023      	str	r3, [r4, #0]
        }
    }
   b641c:	bd10      	pop	{r4, pc}

000b641e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b641e:	b538      	push	{r3, r4, r5, lr}
   b6420:	460c      	mov	r4, r1
   b6422:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b6424:	f7ff fff2 	bl	b640c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b6428:	b154      	cbz	r4, b6440 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b642a:	8820      	ldrh	r0, [r4, #0]
   b642c:	f7fe fff0 	bl	b5410 <malloc>
   b6430:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b6432:	b128      	cbz	r0, b6440 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b6434:	8822      	ldrh	r2, [r4, #0]
   b6436:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b6438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b643c:	f000 bf22 	b.w	b7284 <memcpy>
    }
   b6440:	bd38      	pop	{r3, r4, r5, pc}

000b6442 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b6442:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b6444:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b6448:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b644a:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b644e:	f8c0 3006 	str.w	r3, [r0, #6]
   b6452:	894b      	ldrh	r3, [r1, #10]
   b6454:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b6456:	460c      	mov	r4, r1
   b6458:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b645a:	f7ff ffd7 	bl	b640c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b645e:	6823      	ldr	r3, [r4, #0]
   b6460:	b113      	cbz	r3, b6468 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b6462:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b6464:	2300      	movs	r3, #0
   b6466:	6023      	str	r3, [r4, #0]
    }
   b6468:	bd38      	pop	{r3, r4, r5, pc}

000b646a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b646a:	b507      	push	{r0, r1, r2, lr}
   b646c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b646e:	2100      	movs	r1, #0
{
   b6470:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b6472:	9100      	str	r1, [sp, #0]
   b6474:	2001      	movs	r0, #1
   b6476:	218c      	movs	r1, #140	; 0x8c
   b6478:	f7fe ffc0 	bl	b53fc <system_reset>
}
   b647c:	b003      	add	sp, #12
   b647e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6482 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b6482:	4601      	mov	r1, r0
    reset(0, flags);
   b6484:	2000      	movs	r0, #0
   b6486:	f7ff bff0 	b.w	b646a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b648a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b648a:	2000      	movs	r0, #0
   b648c:	f7ff bff9 	b.w	b6482 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b6490 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b6490:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6492:	4d2b      	ldr	r5, [pc, #172]	; (b6540 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b6494:	7d0b      	ldrb	r3, [r1, #20]
   b6496:	4604      	mov	r4, r0
   b6498:	b08b      	sub	sp, #44	; 0x2c
   b649a:	4608      	mov	r0, r1
   b649c:	1daf      	adds	r7, r5, #6
   b649e:	2b00      	cmp	r3, #0
   b64a0:	d036      	beq.n	b6510 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b64a2:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b64a4:	791b      	ldrb	r3, [r3, #4]
   b64a6:	2b00      	cmp	r3, #0
   b64a8:	d032      	beq.n	b6510 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b64aa:	4b26      	ldr	r3, [pc, #152]	; (b6544 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b64ac:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b64ae:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b64b0:	a902      	add	r1, sp, #8
   b64b2:	3004      	adds	r0, #4
   b64b4:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b64b8:	f7fe ff96 	bl	b53e8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b64bc:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b64c0:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b64c4:	b200      	sxth	r0, r0
   b64c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b64ca:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b64ce:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b64d0:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b64d2:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b64d4:	4628      	mov	r0, r5
   b64d6:	f7ff ffa2 	bl	b641e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b64da:	a802      	add	r0, sp, #8
   b64dc:	f7ff ff96 	bl	b640c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b64e0:	2300      	movs	r3, #0
   b64e2:	6023      	str	r3, [r4, #0]
   b64e4:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b64e6:	71a3      	strb	r3, [r4, #6]
   b64e8:	8123      	strh	r3, [r4, #8]
   b64ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b64ee:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b64f0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b64f4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b64f6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b64fa:	f8c4 3006 	str.w	r3, [r4, #6]
   b64fe:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b6500:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b6502:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b6504:	4620      	mov	r0, r4
   b6506:	f7ff ff8a 	bl	b641e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b650a:	4620      	mov	r0, r4
   b650c:	b00b      	add	sp, #44	; 0x2c
   b650e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b6510:	2600      	movs	r6, #0
   b6512:	2320      	movs	r3, #32
   b6514:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b6518:	4b0b      	ldr	r3, [pc, #44]	; (b6548 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b651a:	9300      	str	r3, [sp, #0]
   b651c:	aa02      	add	r2, sp, #8
   b651e:	4633      	mov	r3, r6
   b6520:	490a      	ldr	r1, [pc, #40]	; (b654c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b6522:	2032      	movs	r0, #50	; 0x32
   b6524:	f7fe fea4 	bl	b5270 <log_message>
            : wakeupSource_(nullptr),
   b6528:	4b06      	ldr	r3, [pc, #24]	; (b6544 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b652a:	4805      	ldr	r0, [pc, #20]	; (b6540 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b652c:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b652e:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b6532:	a902      	add	r1, sp, #8
   b6534:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b6538:	f7ff ff83 	bl	b6442 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b653c:	e7cd      	b.n	b64da <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b653e:	bf00      	nop
   b6540:	2003e704 	.word	0x2003e704
   b6544:	ffff0000 	.word	0xffff0000
   b6548:	000b793b 	.word	0x000b793b
   b654c:	000b7934 	.word	0x000b7934

000b6550 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6550:	4b05      	ldr	r3, [pc, #20]	; (b6568 <_GLOBAL__sub_I_System+0x18>)
   b6552:	2202      	movs	r2, #2
   b6554:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b6556:	4b05      	ldr	r3, [pc, #20]	; (b656c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6558:	4a05      	ldr	r2, [pc, #20]	; (b6570 <_GLOBAL__sub_I_System+0x20>)
   b655a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b655c:	2000      	movs	r0, #0
   b655e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6562:	f7fe bf0d 	b.w	b5380 <set_system_mode>
   b6566:	bf00      	nop
   b6568:	2003e710 	.word	0x2003e710
   b656c:	2003e704 	.word	0x2003e704
   b6570:	ffff0000 	.word	0xffff0000

000b6574 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6574:	2200      	movs	r2, #0
   b6576:	6840      	ldr	r0, [r0, #4]
   b6578:	4611      	mov	r1, r2
   b657a:	f7fe bed9 	b.w	b5330 <network_listening>

000b657e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b657e:	2200      	movs	r2, #0
   b6580:	6840      	ldr	r0, [r0, #4]
   b6582:	4611      	mov	r1, r2
   b6584:	f7fe bee4 	b.w	b5350 <network_get_listen_timeout>

000b6588 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6588:	6840      	ldr	r0, [r0, #4]
   b658a:	2200      	movs	r2, #0
   b658c:	f7fe bed8 	b.w	b5340 <network_set_listen_timeout>

000b6590 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6590:	6840      	ldr	r0, [r0, #4]
   b6592:	2200      	movs	r2, #0
   b6594:	f081 0101 	eor.w	r1, r1, #1
   b6598:	f7fe bec2 	b.w	b5320 <network_listen>

000b659c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b659c:	2300      	movs	r3, #0
   b659e:	6840      	ldr	r0, [r0, #4]
   b65a0:	461a      	mov	r2, r3
   b65a2:	4619      	mov	r1, r3
   b65a4:	f7fe beb4 	b.w	b5310 <network_off>

000b65a8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b65a8:	2300      	movs	r3, #0
   b65aa:	6840      	ldr	r0, [r0, #4]
   b65ac:	461a      	mov	r2, r3
   b65ae:	4619      	mov	r1, r3
   b65b0:	f7fe bea6 	b.w	b5300 <network_on>

000b65b4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b65b4:	2200      	movs	r2, #0
   b65b6:	6840      	ldr	r0, [r0, #4]
   b65b8:	4611      	mov	r1, r2
   b65ba:	f7fe be99 	b.w	b52f0 <network_ready>

000b65be <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b65be:	2200      	movs	r2, #0
   b65c0:	6840      	ldr	r0, [r0, #4]
   b65c2:	4611      	mov	r1, r2
   b65c4:	f7fe be84 	b.w	b52d0 <network_connecting>

000b65c8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b65c8:	6840      	ldr	r0, [r0, #4]
   b65ca:	2200      	movs	r2, #0
   b65cc:	2102      	movs	r1, #2
   b65ce:	f7fe be87 	b.w	b52e0 <network_disconnect>

000b65d2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b65d2:	2300      	movs	r3, #0
   b65d4:	6840      	ldr	r0, [r0, #4]
   b65d6:	461a      	mov	r2, r3
   b65d8:	f7fe be72 	b.w	b52c0 <network_connect>

000b65dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b65dc:	4b02      	ldr	r3, [pc, #8]	; (b65e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b65de:	2203      	movs	r2, #3
   b65e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b65e2:	4a02      	ldr	r2, [pc, #8]	; (b65ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b65e4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b65e6:	4770      	bx	lr
   b65e8:	2003e714 	.word	0x2003e714
   b65ec:	000b796c 	.word	0x000b796c

000b65f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b65f0:	4770      	bx	lr
	...

000b65f4 <_Z17acquireWireBufferv>:
{
   b65f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b65f6:	2520      	movs	r5, #32
   b65f8:	2314      	movs	r3, #20
{
   b65fa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b65fc:	6003      	str	r3, [r0, #0]
   b65fe:	6085      	str	r5, [r0, #8]
   b6600:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6602:	4906      	ldr	r1, [pc, #24]	; (b661c <_Z17acquireWireBufferv+0x28>)
   b6604:	4628      	mov	r0, r5
   b6606:	f000 f8d7 	bl	b67b8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b660a:	4904      	ldr	r1, [pc, #16]	; (b661c <_Z17acquireWireBufferv+0x28>)
	};
   b660c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b660e:	4628      	mov	r0, r5
   b6610:	f000 f8d2 	bl	b67b8 <_ZnajRKSt9nothrow_t>
	};
   b6614:	60e0      	str	r0, [r4, #12]
}
   b6616:	4620      	mov	r0, r4
   b6618:	bd38      	pop	{r3, r4, r5, pc}
   b661a:	bf00      	nop
   b661c:	000b79a0 	.word	0x000b79a0

000b6620 <_Z19__fetch_global_Wirev>:
{
   b6620:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6622:	4d0e      	ldr	r5, [pc, #56]	; (b665c <_Z19__fetch_global_Wirev+0x3c>)
   b6624:	7829      	ldrb	r1, [r5, #0]
   b6626:	f3bf 8f5b 	dmb	ish
   b662a:	f011 0401 	ands.w	r4, r1, #1
{
   b662e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6630:	d111      	bne.n	b6656 <_Z19__fetch_global_Wirev+0x36>
   b6632:	4628      	mov	r0, r5
   b6634:	f7fd fd35 	bl	b40a2 <__cxa_guard_acquire>
   b6638:	b168      	cbz	r0, b6656 <_Z19__fetch_global_Wirev+0x36>
   b663a:	a801      	add	r0, sp, #4
   b663c:	f7ff ffda 	bl	b65f4 <_Z17acquireWireBufferv>
   b6640:	aa01      	add	r2, sp, #4
   b6642:	4621      	mov	r1, r4
   b6644:	4806      	ldr	r0, [pc, #24]	; (b6660 <_Z19__fetch_global_Wirev+0x40>)
   b6646:	f7ff f863 	bl	b5710 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b664a:	4628      	mov	r0, r5
   b664c:	f7fd fd2e 	bl	b40ac <__cxa_guard_release>
   b6650:	4804      	ldr	r0, [pc, #16]	; (b6664 <_Z19__fetch_global_Wirev+0x44>)
   b6652:	f000 fe11 	bl	b7278 <atexit>
	return wire;
}
   b6656:	4802      	ldr	r0, [pc, #8]	; (b6660 <_Z19__fetch_global_Wirev+0x40>)
   b6658:	b007      	add	sp, #28
   b665a:	bd30      	pop	{r4, r5, pc}
   b665c:	2003e71c 	.word	0x2003e71c
   b6660:	2003e720 	.word	0x2003e720
   b6664:	000b65f1 	.word	0x000b65f1

000b6668 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6668:	4770      	bx	lr
	...

000b666c <_Z20acquireSerial1Bufferv>:
{
   b666c:	b538      	push	{r3, r4, r5, lr}
   b666e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6670:	2514      	movs	r5, #20
   b6672:	462a      	mov	r2, r5
   b6674:	2100      	movs	r1, #0
   b6676:	f000 fe13 	bl	b72a0 <memset>
   b667a:	8025      	strh	r5, [r4, #0]
   b667c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b667e:	4907      	ldr	r1, [pc, #28]	; (b669c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6680:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6682:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6684:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6686:	f000 f897 	bl	b67b8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b668a:	4904      	ldr	r1, [pc, #16]	; (b669c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b668c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b668e:	4628      	mov	r0, r5
   b6690:	f000 f892 	bl	b67b8 <_ZnajRKSt9nothrow_t>
    };
   b6694:	60e0      	str	r0, [r4, #12]
}
   b6696:	4620      	mov	r0, r4
   b6698:	bd38      	pop	{r3, r4, r5, pc}
   b669a:	bf00      	nop
   b669c:	000b79a0 	.word	0x000b79a0

000b66a0 <_Z22__fetch_global_Serial1v>:
{
   b66a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b66a2:	4d0e      	ldr	r5, [pc, #56]	; (b66dc <_Z22__fetch_global_Serial1v+0x3c>)
   b66a4:	7829      	ldrb	r1, [r5, #0]
   b66a6:	f3bf 8f5b 	dmb	ish
   b66aa:	f011 0401 	ands.w	r4, r1, #1
{
   b66ae:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b66b0:	d111      	bne.n	b66d6 <_Z22__fetch_global_Serial1v+0x36>
   b66b2:	4628      	mov	r0, r5
   b66b4:	f7fd fcf5 	bl	b40a2 <__cxa_guard_acquire>
   b66b8:	b168      	cbz	r0, b66d6 <_Z22__fetch_global_Serial1v+0x36>
   b66ba:	a801      	add	r0, sp, #4
   b66bc:	f7ff ffd6 	bl	b666c <_Z20acquireSerial1Bufferv>
   b66c0:	aa01      	add	r2, sp, #4
   b66c2:	4621      	mov	r1, r4
   b66c4:	4806      	ldr	r0, [pc, #24]	; (b66e0 <_Z22__fetch_global_Serial1v+0x40>)
   b66c6:	f7ff f887 	bl	b57d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b66ca:	4628      	mov	r0, r5
   b66cc:	f7fd fcee 	bl	b40ac <__cxa_guard_release>
   b66d0:	4804      	ldr	r0, [pc, #16]	; (b66e4 <_Z22__fetch_global_Serial1v+0x44>)
   b66d2:	f000 fdd1 	bl	b7278 <atexit>
    return serial1;
}
   b66d6:	4802      	ldr	r0, [pc, #8]	; (b66e0 <_Z22__fetch_global_Serial1v+0x40>)
   b66d8:	b007      	add	sp, #28
   b66da:	bd30      	pop	{r4, r5, pc}
   b66dc:	2003e738 	.word	0x2003e738
   b66e0:	2003e73c 	.word	0x2003e73c
   b66e4:	000b6669 	.word	0x000b6669

000b66e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b66e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b66ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b66ec:	d902      	bls.n	b66f4 <pinAvailable+0xc>
    return false;
   b66ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b66f0:	b002      	add	sp, #8
   b66f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b66f4:	f1a0 030b 	sub.w	r3, r0, #11
   b66f8:	2b02      	cmp	r3, #2
   b66fa:	d81a      	bhi.n	b6732 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b66fc:	4c17      	ldr	r4, [pc, #92]	; (b675c <pinAvailable+0x74>)
   b66fe:	7821      	ldrb	r1, [r4, #0]
   b6700:	f3bf 8f5b 	dmb	ish
   b6704:	f011 0101 	ands.w	r1, r1, #1
   b6708:	d10b      	bne.n	b6722 <pinAvailable+0x3a>
   b670a:	4620      	mov	r0, r4
   b670c:	9101      	str	r1, [sp, #4]
   b670e:	f7fd fcc8 	bl	b40a2 <__cxa_guard_acquire>
   b6712:	9901      	ldr	r1, [sp, #4]
   b6714:	b128      	cbz	r0, b6722 <pinAvailable+0x3a>
   b6716:	4812      	ldr	r0, [pc, #72]	; (b6760 <pinAvailable+0x78>)
   b6718:	f7fe ffc4 	bl	b56a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b671c:	4620      	mov	r0, r4
   b671e:	f7fd fcc5 	bl	b40ac <__cxa_guard_release>
   b6722:	4b0f      	ldr	r3, [pc, #60]	; (b6760 <pinAvailable+0x78>)
   b6724:	7818      	ldrb	r0, [r3, #0]
   b6726:	f7fe fcdb 	bl	b50e0 <hal_spi_is_enabled>
   b672a:	2800      	cmp	r0, #0
   b672c:	d1df      	bne.n	b66ee <pinAvailable+0x6>
  return true; // 'pin' is available
   b672e:	2001      	movs	r0, #1
   b6730:	e7de      	b.n	b66f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6732:	2801      	cmp	r0, #1
   b6734:	d809      	bhi.n	b674a <pinAvailable+0x62>
   b6736:	f7ff ff73 	bl	b6620 <_Z19__fetch_global_Wirev>
   b673a:	2100      	movs	r1, #0
   b673c:	7c00      	ldrb	r0, [r0, #16]
   b673e:	f7fe fcb7 	bl	b50b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6742:	f080 0001 	eor.w	r0, r0, #1
   b6746:	b2c0      	uxtb	r0, r0
   b6748:	e7d2      	b.n	b66f0 <pinAvailable+0x8>
   b674a:	3809      	subs	r0, #9
   b674c:	2801      	cmp	r0, #1
   b674e:	d8ee      	bhi.n	b672e <pinAvailable+0x46>
   b6750:	f7ff ffa6 	bl	b66a0 <_Z22__fetch_global_Serial1v>
   b6754:	7c00      	ldrb	r0, [r0, #16]
   b6756:	f7fe fcf3 	bl	b5140 <hal_usart_is_enabled>
   b675a:	e7f2      	b.n	b6742 <pinAvailable+0x5a>
   b675c:	2003e750 	.word	0x2003e750
   b6760:	2003e754 	.word	0x2003e754

000b6764 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6764:	2823      	cmp	r0, #35	; 0x23
{
   b6766:	b538      	push	{r3, r4, r5, lr}
   b6768:	4604      	mov	r4, r0
   b676a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b676c:	d80a      	bhi.n	b6784 <pinMode+0x20>
   b676e:	29ff      	cmp	r1, #255	; 0xff
   b6770:	d008      	beq.n	b6784 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6772:	f7ff ffb9 	bl	b66e8 <pinAvailable>
   b6776:	b128      	cbz	r0, b6784 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6778:	4629      	mov	r1, r5
   b677a:	4620      	mov	r0, r4
}
   b677c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6780:	f7fe bd26 	b.w	b51d0 <HAL_Pin_Mode>
}
   b6784:	bd38      	pop	{r3, r4, r5, pc}

000b6786 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6786:	280d      	cmp	r0, #13
{
   b6788:	b510      	push	{r4, lr}
   b678a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b678c:	bf9c      	itt	ls
   b678e:	340e      	addls	r4, #14
   b6790:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6792:	4620      	mov	r0, r4
   b6794:	f7ff ffa8 	bl	b66e8 <pinAvailable>
   b6798:	b150      	cbz	r0, b67b0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b679a:	2103      	movs	r1, #3
   b679c:	4620      	mov	r0, r4
   b679e:	f7fe fd0f 	bl	b51c0 <HAL_Validate_Pin_Function>
   b67a2:	2803      	cmp	r0, #3
   b67a4:	d104      	bne.n	b67b0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b67a6:	4620      	mov	r0, r4
}
   b67a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b67ac:	f7fe bd18 	b.w	b51e0 <hal_adc_read>
}
   b67b0:	2000      	movs	r0, #0
   b67b2:	bd10      	pop	{r4, pc}

000b67b4 <_ZnwjRKSt9nothrow_t>:
   b67b4:	f7fd bc6f 	b.w	b4096 <_Znwj>

000b67b8 <_ZnajRKSt9nothrow_t>:
   b67b8:	f7fd bc6f 	b.w	b409a <_Znaj>

000b67bc <_ZSt25__throw_bad_function_callv>:
   b67bc:	b508      	push	{r3, lr}
   b67be:	f7fe fe4f 	bl	b5460 <abort>
	...

000b67c4 <logf>:
   b67c4:	b508      	push	{r3, lr}
   b67c6:	ed2d 8b02 	vpush	{d8}
   b67ca:	eeb0 8a40 	vmov.f32	s16, s0
   b67ce:	f000 f82f 	bl	b6830 <__ieee754_logf>
   b67d2:	4b14      	ldr	r3, [pc, #80]	; (b6824 <logf+0x60>)
   b67d4:	f993 3000 	ldrsb.w	r3, [r3]
   b67d8:	3301      	adds	r3, #1
   b67da:	d014      	beq.n	b6806 <logf+0x42>
   b67dc:	eeb4 8a48 	vcmp.f32	s16, s16
   b67e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b67e4:	d60f      	bvs.n	b6806 <logf+0x42>
   b67e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b67ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b67ee:	dc0a      	bgt.n	b6806 <logf+0x42>
   b67f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
   b67f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b67f8:	d108      	bne.n	b680c <logf+0x48>
   b67fa:	f7fe fe41 	bl	b5480 <__errno>
   b67fe:	2322      	movs	r3, #34	; 0x22
   b6800:	ed9f 0a09 	vldr	s0, [pc, #36]	; b6828 <logf+0x64>
   b6804:	6003      	str	r3, [r0, #0]
   b6806:	ecbd 8b02 	vpop	{d8}
   b680a:	bd08      	pop	{r3, pc}
   b680c:	f7fe fe38 	bl	b5480 <__errno>
   b6810:	ecbd 8b02 	vpop	{d8}
   b6814:	4603      	mov	r3, r0
   b6816:	2221      	movs	r2, #33	; 0x21
   b6818:	601a      	str	r2, [r3, #0]
   b681a:	4804      	ldr	r0, [pc, #16]	; (b682c <logf+0x68>)
   b681c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6820:	f000 b906 	b.w	b6a30 <nanf>
   b6824:	2003e438 	.word	0x2003e438
   b6828:	ff800000 	.word	0xff800000
   b682c:	000b79a4 	.word	0x000b79a4

000b6830 <__ieee754_logf>:
   b6830:	ee10 3a10 	vmov	r3, s0
   b6834:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   b6838:	d02e      	beq.n	b6898 <__ieee754_logf+0x68>
   b683a:	2b00      	cmp	r3, #0
   b683c:	db33      	blt.n	b68a6 <__ieee754_logf+0x76>
   b683e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b6842:	da40      	bge.n	b68c6 <__ieee754_logf+0x96>
   b6844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   b6848:	db34      	blt.n	b68b4 <__ieee754_logf+0x84>
   b684a:	f04f 0c00 	mov.w	ip, #0
   b684e:	4868      	ldr	r0, [pc, #416]	; (b69f0 <__ieee754_logf+0x1c0>)
   b6850:	f3c3 0116 	ubfx	r1, r3, #0, #23
   b6854:	4408      	add	r0, r1
   b6856:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   b685a:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   b685e:	430a      	orrs	r2, r1
   b6860:	15db      	asrs	r3, r3, #23
   b6862:	ee00 2a10 	vmov	s0, r2
   b6866:	3b7f      	subs	r3, #127	; 0x7f
   b6868:	4a62      	ldr	r2, [pc, #392]	; (b69f4 <__ieee754_logf+0x1c4>)
   b686a:	4463      	add	r3, ip
   b686c:	f101 0c0f 	add.w	ip, r1, #15
   b6870:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6874:	ea0c 0202 	and.w	r2, ip, r2
   b6878:	ee30 0a67 	vsub.f32	s0, s0, s15
   b687c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   b6880:	bb22      	cbnz	r2, b68cc <__ieee754_logf+0x9c>
   b6882:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b6886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b688a:	d160      	bne.n	b694e <__ieee754_logf+0x11e>
   b688c:	2b00      	cmp	r3, #0
   b688e:	f040 8092 	bne.w	b69b6 <__ieee754_logf+0x186>
   b6892:	ed9f 0a59 	vldr	s0, [pc, #356]	; b69f8 <__ieee754_logf+0x1c8>
   b6896:	4770      	bx	lr
   b6898:	ed9f 7a58 	vldr	s14, [pc, #352]	; b69fc <__ieee754_logf+0x1cc>
   b689c:	eddf 7a56 	vldr	s15, [pc, #344]	; b69f8 <__ieee754_logf+0x1c8>
   b68a0:	ee87 0a27 	vdiv.f32	s0, s14, s15
   b68a4:	4770      	bx	lr
   b68a6:	ee70 7a40 	vsub.f32	s15, s0, s0
   b68aa:	ed9f 7a53 	vldr	s14, [pc, #332]	; b69f8 <__ieee754_logf+0x1c8>
   b68ae:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b68b2:	4770      	bx	lr
   b68b4:	eddf 7a52 	vldr	s15, [pc, #328]	; b6a00 <__ieee754_logf+0x1d0>
   b68b8:	ee60 7a27 	vmul.f32	s15, s0, s15
   b68bc:	f06f 0c18 	mvn.w	ip, #24
   b68c0:	ee17 3a90 	vmov	r3, s15
   b68c4:	e7c3      	b.n	b684e <__ieee754_logf+0x1e>
   b68c6:	ee30 0a00 	vadd.f32	s0, s0, s0
   b68ca:	4770      	bx	lr
   b68cc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b68d0:	ee70 7a27 	vadd.f32	s15, s0, s15
   b68d4:	ee07 3a10 	vmov	s14, r3
   b68d8:	ee80 4a27 	vdiv.f32	s8, s0, s15
   b68dc:	4849      	ldr	r0, [pc, #292]	; (b6a04 <__ieee754_logf+0x1d4>)
   b68de:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   b68e2:	4408      	add	r0, r1
   b68e4:	f502 7222 	add.w	r2, r2, #648	; 0x288
   b68e8:	4302      	orrs	r2, r0
   b68ea:	2a00      	cmp	r2, #0
   b68ec:	ed9f 3a46 	vldr	s6, [pc, #280]	; b6a08 <__ieee754_logf+0x1d8>
   b68f0:	eddf 4a46 	vldr	s9, [pc, #280]	; b6a0c <__ieee754_logf+0x1dc>
   b68f4:	eddf 5a46 	vldr	s11, [pc, #280]	; b6a10 <__ieee754_logf+0x1e0>
   b68f8:	eddf 3a46 	vldr	s7, [pc, #280]	; b6a14 <__ieee754_logf+0x1e4>
   b68fc:	ed9f 5a46 	vldr	s10, [pc, #280]	; b6a18 <__ieee754_logf+0x1e8>
   b6900:	eddf 7a46 	vldr	s15, [pc, #280]	; b6a1c <__ieee754_logf+0x1ec>
   b6904:	eddf 6a46 	vldr	s13, [pc, #280]	; b6a20 <__ieee754_logf+0x1f0>
   b6908:	ee24 6a04 	vmul.f32	s12, s8, s8
   b690c:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   b6910:	ee26 7a06 	vmul.f32	s14, s12, s12
   b6914:	eee7 4a03 	vfma.f32	s9, s14, s6
   b6918:	eea7 5a23 	vfma.f32	s10, s14, s7
   b691c:	eee4 5a87 	vfma.f32	s11, s9, s14
   b6920:	eee5 6a07 	vfma.f32	s13, s10, s14
   b6924:	eee5 7a87 	vfma.f32	s15, s11, s14
   b6928:	ee67 7a86 	vmul.f32	s15, s15, s12
   b692c:	eee6 7a87 	vfma.f32	s15, s13, s14
   b6930:	dd2a      	ble.n	b6988 <__ieee754_logf+0x158>
   b6932:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b6936:	ee20 7a07 	vmul.f32	s14, s0, s14
   b693a:	ee27 7a00 	vmul.f32	s14, s14, s0
   b693e:	bb4b      	cbnz	r3, b6994 <__ieee754_logf+0x164>
   b6940:	ee77 7a87 	vadd.f32	s15, s15, s14
   b6944:	eea7 7ac4 	vfms.f32	s14, s15, s8
   b6948:	ee30 0a47 	vsub.f32	s0, s0, s14
   b694c:	4770      	bx	lr
   b694e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b6952:	eddf 6a34 	vldr	s13, [pc, #208]	; b6a24 <__ieee754_logf+0x1f4>
   b6956:	eef0 7a47 	vmov.f32	s15, s14
   b695a:	eee0 7a66 	vfms.f32	s15, s0, s13
   b695e:	ee20 7a00 	vmul.f32	s14, s0, s0
   b6962:	ee27 7a27 	vmul.f32	s14, s14, s15
   b6966:	2b00      	cmp	r3, #0
   b6968:	d0ee      	beq.n	b6948 <__ieee754_logf+0x118>
   b696a:	ee07 3a90 	vmov	s15, r3
   b696e:	ed9f 6a2e 	vldr	s12, [pc, #184]	; b6a28 <__ieee754_logf+0x1f8>
   b6972:	eddf 6a2e 	vldr	s13, [pc, #184]	; b6a2c <__ieee754_logf+0x1fc>
   b6976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b697a:	eea7 7ac6 	vfms.f32	s14, s15, s12
   b697e:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6982:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   b6986:	4770      	bx	lr
   b6988:	bb13      	cbnz	r3, b69d0 <__ieee754_logf+0x1a0>
   b698a:	ee70 7a67 	vsub.f32	s15, s0, s15
   b698e:	eea7 0ac4 	vfms.f32	s0, s15, s8
   b6992:	4770      	bx	lr
   b6994:	eddf 6a24 	vldr	s13, [pc, #144]	; b6a28 <__ieee754_logf+0x1f8>
   b6998:	ed9f 6a24 	vldr	s12, [pc, #144]	; b6a2c <__ieee754_logf+0x1fc>
   b699c:	ee77 7a87 	vadd.f32	s15, s15, s14
   b69a0:	ee62 6aa6 	vmul.f32	s13, s5, s13
   b69a4:	eee7 6a84 	vfma.f32	s13, s15, s8
   b69a8:	ee37 7a66 	vsub.f32	s14, s14, s13
   b69ac:	ee37 0a40 	vsub.f32	s0, s14, s0
   b69b0:	ee92 0a86 	vfnms.f32	s0, s5, s12
   b69b4:	4770      	bx	lr
   b69b6:	ee07 3a90 	vmov	s15, r3
   b69ba:	ed9f 0a1b 	vldr	s0, [pc, #108]	; b6a28 <__ieee754_logf+0x1f8>
   b69be:	ed9f 7a1b 	vldr	s14, [pc, #108]	; b6a2c <__ieee754_logf+0x1fc>
   b69c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b69c6:	ee27 0a80 	vmul.f32	s0, s15, s0
   b69ca:	eea7 0a87 	vfma.f32	s0, s15, s14
   b69ce:	4770      	bx	lr
   b69d0:	ed9f 7a15 	vldr	s14, [pc, #84]	; b6a28 <__ieee754_logf+0x1f8>
   b69d4:	eddf 6a15 	vldr	s13, [pc, #84]	; b6a2c <__ieee754_logf+0x1fc>
   b69d8:	ee70 7a67 	vsub.f32	s15, s0, s15
   b69dc:	ee27 7a62 	vnmul.f32	s14, s14, s5
   b69e0:	eea7 7a84 	vfma.f32	s14, s15, s8
   b69e4:	ee37 0a40 	vsub.f32	s0, s14, s0
   b69e8:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   b69ec:	4770      	bx	lr
   b69ee:	bf00      	nop
   b69f0:	004afb20 	.word	0x004afb20
   b69f4:	007ffff0 	.word	0x007ffff0
   b69f8:	00000000 	.word	0x00000000
   b69fc:	cc000000 	.word	0xcc000000
   b6a00:	4c000000 	.word	0x4c000000
   b6a04:	ffcf5c30 	.word	0xffcf5c30
   b6a08:	3e178897 	.word	0x3e178897
   b6a0c:	3e3a3325 	.word	0x3e3a3325
   b6a10:	3e924925 	.word	0x3e924925
   b6a14:	3e1cd04f 	.word	0x3e1cd04f
   b6a18:	3e638e29 	.word	0x3e638e29
   b6a1c:	3f2aaaab 	.word	0x3f2aaaab
   b6a20:	3ecccccd 	.word	0x3ecccccd
   b6a24:	3eaaaaab 	.word	0x3eaaaaab
   b6a28:	3717f7d1 	.word	0x3717f7d1
   b6a2c:	3f317180 	.word	0x3f317180

000b6a30 <nanf>:
   b6a30:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6a38 <nanf+0x8>
   b6a34:	4770      	bx	lr
   b6a36:	bf00      	nop
   b6a38:	7fc00000 	.word	0x7fc00000

000b6a3c <__aeabi_drsub>:
   b6a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6a40:	e002      	b.n	b6a48 <__adddf3>
   b6a42:	bf00      	nop

000b6a44 <__aeabi_dsub>:
   b6a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6a48 <__adddf3>:
   b6a48:	b530      	push	{r4, r5, lr}
   b6a4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6a4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6a52:	ea94 0f05 	teq	r4, r5
   b6a56:	bf08      	it	eq
   b6a58:	ea90 0f02 	teqeq	r0, r2
   b6a5c:	bf1f      	itttt	ne
   b6a5e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6a62:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6a66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6a6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6a6e:	f000 80e2 	beq.w	b6c36 <__adddf3+0x1ee>
   b6a72:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6a76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6a7a:	bfb8      	it	lt
   b6a7c:	426d      	neglt	r5, r5
   b6a7e:	dd0c      	ble.n	b6a9a <__adddf3+0x52>
   b6a80:	442c      	add	r4, r5
   b6a82:	ea80 0202 	eor.w	r2, r0, r2
   b6a86:	ea81 0303 	eor.w	r3, r1, r3
   b6a8a:	ea82 0000 	eor.w	r0, r2, r0
   b6a8e:	ea83 0101 	eor.w	r1, r3, r1
   b6a92:	ea80 0202 	eor.w	r2, r0, r2
   b6a96:	ea81 0303 	eor.w	r3, r1, r3
   b6a9a:	2d36      	cmp	r5, #54	; 0x36
   b6a9c:	bf88      	it	hi
   b6a9e:	bd30      	pophi	{r4, r5, pc}
   b6aa0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6aa4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6aa8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6aac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6ab0:	d002      	beq.n	b6ab8 <__adddf3+0x70>
   b6ab2:	4240      	negs	r0, r0
   b6ab4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6ab8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6abc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ac0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6ac4:	d002      	beq.n	b6acc <__adddf3+0x84>
   b6ac6:	4252      	negs	r2, r2
   b6ac8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6acc:	ea94 0f05 	teq	r4, r5
   b6ad0:	f000 80a7 	beq.w	b6c22 <__adddf3+0x1da>
   b6ad4:	f1a4 0401 	sub.w	r4, r4, #1
   b6ad8:	f1d5 0e20 	rsbs	lr, r5, #32
   b6adc:	db0d      	blt.n	b6afa <__adddf3+0xb2>
   b6ade:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6ae2:	fa22 f205 	lsr.w	r2, r2, r5
   b6ae6:	1880      	adds	r0, r0, r2
   b6ae8:	f141 0100 	adc.w	r1, r1, #0
   b6aec:	fa03 f20e 	lsl.w	r2, r3, lr
   b6af0:	1880      	adds	r0, r0, r2
   b6af2:	fa43 f305 	asr.w	r3, r3, r5
   b6af6:	4159      	adcs	r1, r3
   b6af8:	e00e      	b.n	b6b18 <__adddf3+0xd0>
   b6afa:	f1a5 0520 	sub.w	r5, r5, #32
   b6afe:	f10e 0e20 	add.w	lr, lr, #32
   b6b02:	2a01      	cmp	r2, #1
   b6b04:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6b08:	bf28      	it	cs
   b6b0a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6b0e:	fa43 f305 	asr.w	r3, r3, r5
   b6b12:	18c0      	adds	r0, r0, r3
   b6b14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6b18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6b1c:	d507      	bpl.n	b6b2e <__adddf3+0xe6>
   b6b1e:	f04f 0e00 	mov.w	lr, #0
   b6b22:	f1dc 0c00 	rsbs	ip, ip, #0
   b6b26:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6b2a:	eb6e 0101 	sbc.w	r1, lr, r1
   b6b2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6b32:	d31b      	bcc.n	b6b6c <__adddf3+0x124>
   b6b34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6b38:	d30c      	bcc.n	b6b54 <__adddf3+0x10c>
   b6b3a:	0849      	lsrs	r1, r1, #1
   b6b3c:	ea5f 0030 	movs.w	r0, r0, rrx
   b6b40:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6b44:	f104 0401 	add.w	r4, r4, #1
   b6b48:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6b4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6b50:	f080 809a 	bcs.w	b6c88 <__adddf3+0x240>
   b6b54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6b58:	bf08      	it	eq
   b6b5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b5e:	f150 0000 	adcs.w	r0, r0, #0
   b6b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b66:	ea41 0105 	orr.w	r1, r1, r5
   b6b6a:	bd30      	pop	{r4, r5, pc}
   b6b6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6b70:	4140      	adcs	r0, r0
   b6b72:	eb41 0101 	adc.w	r1, r1, r1
   b6b76:	3c01      	subs	r4, #1
   b6b78:	bf28      	it	cs
   b6b7a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6b7e:	d2e9      	bcs.n	b6b54 <__adddf3+0x10c>
   b6b80:	f091 0f00 	teq	r1, #0
   b6b84:	bf04      	itt	eq
   b6b86:	4601      	moveq	r1, r0
   b6b88:	2000      	moveq	r0, #0
   b6b8a:	fab1 f381 	clz	r3, r1
   b6b8e:	bf08      	it	eq
   b6b90:	3320      	addeq	r3, #32
   b6b92:	f1a3 030b 	sub.w	r3, r3, #11
   b6b96:	f1b3 0220 	subs.w	r2, r3, #32
   b6b9a:	da0c      	bge.n	b6bb6 <__adddf3+0x16e>
   b6b9c:	320c      	adds	r2, #12
   b6b9e:	dd08      	ble.n	b6bb2 <__adddf3+0x16a>
   b6ba0:	f102 0c14 	add.w	ip, r2, #20
   b6ba4:	f1c2 020c 	rsb	r2, r2, #12
   b6ba8:	fa01 f00c 	lsl.w	r0, r1, ip
   b6bac:	fa21 f102 	lsr.w	r1, r1, r2
   b6bb0:	e00c      	b.n	b6bcc <__adddf3+0x184>
   b6bb2:	f102 0214 	add.w	r2, r2, #20
   b6bb6:	bfd8      	it	le
   b6bb8:	f1c2 0c20 	rsble	ip, r2, #32
   b6bbc:	fa01 f102 	lsl.w	r1, r1, r2
   b6bc0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6bc4:	bfdc      	itt	le
   b6bc6:	ea41 010c 	orrle.w	r1, r1, ip
   b6bca:	4090      	lslle	r0, r2
   b6bcc:	1ae4      	subs	r4, r4, r3
   b6bce:	bfa2      	ittt	ge
   b6bd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6bd4:	4329      	orrge	r1, r5
   b6bd6:	bd30      	popge	{r4, r5, pc}
   b6bd8:	ea6f 0404 	mvn.w	r4, r4
   b6bdc:	3c1f      	subs	r4, #31
   b6bde:	da1c      	bge.n	b6c1a <__adddf3+0x1d2>
   b6be0:	340c      	adds	r4, #12
   b6be2:	dc0e      	bgt.n	b6c02 <__adddf3+0x1ba>
   b6be4:	f104 0414 	add.w	r4, r4, #20
   b6be8:	f1c4 0220 	rsb	r2, r4, #32
   b6bec:	fa20 f004 	lsr.w	r0, r0, r4
   b6bf0:	fa01 f302 	lsl.w	r3, r1, r2
   b6bf4:	ea40 0003 	orr.w	r0, r0, r3
   b6bf8:	fa21 f304 	lsr.w	r3, r1, r4
   b6bfc:	ea45 0103 	orr.w	r1, r5, r3
   b6c00:	bd30      	pop	{r4, r5, pc}
   b6c02:	f1c4 040c 	rsb	r4, r4, #12
   b6c06:	f1c4 0220 	rsb	r2, r4, #32
   b6c0a:	fa20 f002 	lsr.w	r0, r0, r2
   b6c0e:	fa01 f304 	lsl.w	r3, r1, r4
   b6c12:	ea40 0003 	orr.w	r0, r0, r3
   b6c16:	4629      	mov	r1, r5
   b6c18:	bd30      	pop	{r4, r5, pc}
   b6c1a:	fa21 f004 	lsr.w	r0, r1, r4
   b6c1e:	4629      	mov	r1, r5
   b6c20:	bd30      	pop	{r4, r5, pc}
   b6c22:	f094 0f00 	teq	r4, #0
   b6c26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6c2a:	bf06      	itte	eq
   b6c2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6c30:	3401      	addeq	r4, #1
   b6c32:	3d01      	subne	r5, #1
   b6c34:	e74e      	b.n	b6ad4 <__adddf3+0x8c>
   b6c36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6c3a:	bf18      	it	ne
   b6c3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6c40:	d029      	beq.n	b6c96 <__adddf3+0x24e>
   b6c42:	ea94 0f05 	teq	r4, r5
   b6c46:	bf08      	it	eq
   b6c48:	ea90 0f02 	teqeq	r0, r2
   b6c4c:	d005      	beq.n	b6c5a <__adddf3+0x212>
   b6c4e:	ea54 0c00 	orrs.w	ip, r4, r0
   b6c52:	bf04      	itt	eq
   b6c54:	4619      	moveq	r1, r3
   b6c56:	4610      	moveq	r0, r2
   b6c58:	bd30      	pop	{r4, r5, pc}
   b6c5a:	ea91 0f03 	teq	r1, r3
   b6c5e:	bf1e      	ittt	ne
   b6c60:	2100      	movne	r1, #0
   b6c62:	2000      	movne	r0, #0
   b6c64:	bd30      	popne	{r4, r5, pc}
   b6c66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6c6a:	d105      	bne.n	b6c78 <__adddf3+0x230>
   b6c6c:	0040      	lsls	r0, r0, #1
   b6c6e:	4149      	adcs	r1, r1
   b6c70:	bf28      	it	cs
   b6c72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6c76:	bd30      	pop	{r4, r5, pc}
   b6c78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6c7c:	bf3c      	itt	cc
   b6c7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6c82:	bd30      	popcc	{r4, r5, pc}
   b6c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6c88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6c8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6c90:	f04f 0000 	mov.w	r0, #0
   b6c94:	bd30      	pop	{r4, r5, pc}
   b6c96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6c9a:	bf1a      	itte	ne
   b6c9c:	4619      	movne	r1, r3
   b6c9e:	4610      	movne	r0, r2
   b6ca0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6ca4:	bf1c      	itt	ne
   b6ca6:	460b      	movne	r3, r1
   b6ca8:	4602      	movne	r2, r0
   b6caa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6cae:	bf06      	itte	eq
   b6cb0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6cb4:	ea91 0f03 	teqeq	r1, r3
   b6cb8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6cbc:	bd30      	pop	{r4, r5, pc}
   b6cbe:	bf00      	nop

000b6cc0 <__aeabi_ui2d>:
   b6cc0:	f090 0f00 	teq	r0, #0
   b6cc4:	bf04      	itt	eq
   b6cc6:	2100      	moveq	r1, #0
   b6cc8:	4770      	bxeq	lr
   b6cca:	b530      	push	{r4, r5, lr}
   b6ccc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6cd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6cd4:	f04f 0500 	mov.w	r5, #0
   b6cd8:	f04f 0100 	mov.w	r1, #0
   b6cdc:	e750      	b.n	b6b80 <__adddf3+0x138>
   b6cde:	bf00      	nop

000b6ce0 <__aeabi_i2d>:
   b6ce0:	f090 0f00 	teq	r0, #0
   b6ce4:	bf04      	itt	eq
   b6ce6:	2100      	moveq	r1, #0
   b6ce8:	4770      	bxeq	lr
   b6cea:	b530      	push	{r4, r5, lr}
   b6cec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6cf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6cf4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6cf8:	bf48      	it	mi
   b6cfa:	4240      	negmi	r0, r0
   b6cfc:	f04f 0100 	mov.w	r1, #0
   b6d00:	e73e      	b.n	b6b80 <__adddf3+0x138>
   b6d02:	bf00      	nop

000b6d04 <__aeabi_f2d>:
   b6d04:	0042      	lsls	r2, r0, #1
   b6d06:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6d0a:	ea4f 0131 	mov.w	r1, r1, rrx
   b6d0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6d12:	bf1f      	itttt	ne
   b6d14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6d18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6d1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6d20:	4770      	bxne	lr
   b6d22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6d26:	bf08      	it	eq
   b6d28:	4770      	bxeq	lr
   b6d2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6d2e:	bf04      	itt	eq
   b6d30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6d34:	4770      	bxeq	lr
   b6d36:	b530      	push	{r4, r5, lr}
   b6d38:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6d3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6d40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6d44:	e71c      	b.n	b6b80 <__adddf3+0x138>
   b6d46:	bf00      	nop

000b6d48 <__aeabi_ul2d>:
   b6d48:	ea50 0201 	orrs.w	r2, r0, r1
   b6d4c:	bf08      	it	eq
   b6d4e:	4770      	bxeq	lr
   b6d50:	b530      	push	{r4, r5, lr}
   b6d52:	f04f 0500 	mov.w	r5, #0
   b6d56:	e00a      	b.n	b6d6e <__aeabi_l2d+0x16>

000b6d58 <__aeabi_l2d>:
   b6d58:	ea50 0201 	orrs.w	r2, r0, r1
   b6d5c:	bf08      	it	eq
   b6d5e:	4770      	bxeq	lr
   b6d60:	b530      	push	{r4, r5, lr}
   b6d62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6d66:	d502      	bpl.n	b6d6e <__aeabi_l2d+0x16>
   b6d68:	4240      	negs	r0, r0
   b6d6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6d6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6d72:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6d76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6d7a:	f43f aed8 	beq.w	b6b2e <__adddf3+0xe6>
   b6d7e:	f04f 0203 	mov.w	r2, #3
   b6d82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d86:	bf18      	it	ne
   b6d88:	3203      	addne	r2, #3
   b6d8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d8e:	bf18      	it	ne
   b6d90:	3203      	addne	r2, #3
   b6d92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6d96:	f1c2 0320 	rsb	r3, r2, #32
   b6d9a:	fa00 fc03 	lsl.w	ip, r0, r3
   b6d9e:	fa20 f002 	lsr.w	r0, r0, r2
   b6da2:	fa01 fe03 	lsl.w	lr, r1, r3
   b6da6:	ea40 000e 	orr.w	r0, r0, lr
   b6daa:	fa21 f102 	lsr.w	r1, r1, r2
   b6dae:	4414      	add	r4, r2
   b6db0:	e6bd      	b.n	b6b2e <__adddf3+0xe6>
   b6db2:	bf00      	nop

000b6db4 <__aeabi_dmul>:
   b6db4:	b570      	push	{r4, r5, r6, lr}
   b6db6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6dba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6dbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6dc2:	bf1d      	ittte	ne
   b6dc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6dc8:	ea94 0f0c 	teqne	r4, ip
   b6dcc:	ea95 0f0c 	teqne	r5, ip
   b6dd0:	f000 f8de 	bleq	b6f90 <__aeabi_dmul+0x1dc>
   b6dd4:	442c      	add	r4, r5
   b6dd6:	ea81 0603 	eor.w	r6, r1, r3
   b6dda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6dde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6de2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6de6:	bf18      	it	ne
   b6de8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6df4:	d038      	beq.n	b6e68 <__aeabi_dmul+0xb4>
   b6df6:	fba0 ce02 	umull	ip, lr, r0, r2
   b6dfa:	f04f 0500 	mov.w	r5, #0
   b6dfe:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6e02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6e06:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6e0a:	f04f 0600 	mov.w	r6, #0
   b6e0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6e12:	f09c 0f00 	teq	ip, #0
   b6e16:	bf18      	it	ne
   b6e18:	f04e 0e01 	orrne.w	lr, lr, #1
   b6e1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6e20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6e24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6e28:	d204      	bcs.n	b6e34 <__aeabi_dmul+0x80>
   b6e2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6e2e:	416d      	adcs	r5, r5
   b6e30:	eb46 0606 	adc.w	r6, r6, r6
   b6e34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6e38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6e3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6e40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6e44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6e48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6e4c:	bf88      	it	hi
   b6e4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e52:	d81e      	bhi.n	b6e92 <__aeabi_dmul+0xde>
   b6e54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6e58:	bf08      	it	eq
   b6e5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6e5e:	f150 0000 	adcs.w	r0, r0, #0
   b6e62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6e66:	bd70      	pop	{r4, r5, r6, pc}
   b6e68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6e6c:	ea46 0101 	orr.w	r1, r6, r1
   b6e70:	ea40 0002 	orr.w	r0, r0, r2
   b6e74:	ea81 0103 	eor.w	r1, r1, r3
   b6e78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6e7c:	bfc2      	ittt	gt
   b6e7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6e82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6e86:	bd70      	popgt	{r4, r5, r6, pc}
   b6e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e8c:	f04f 0e00 	mov.w	lr, #0
   b6e90:	3c01      	subs	r4, #1
   b6e92:	f300 80ab 	bgt.w	b6fec <__aeabi_dmul+0x238>
   b6e96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6e9a:	bfde      	ittt	le
   b6e9c:	2000      	movle	r0, #0
   b6e9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6ea2:	bd70      	pople	{r4, r5, r6, pc}
   b6ea4:	f1c4 0400 	rsb	r4, r4, #0
   b6ea8:	3c20      	subs	r4, #32
   b6eaa:	da35      	bge.n	b6f18 <__aeabi_dmul+0x164>
   b6eac:	340c      	adds	r4, #12
   b6eae:	dc1b      	bgt.n	b6ee8 <__aeabi_dmul+0x134>
   b6eb0:	f104 0414 	add.w	r4, r4, #20
   b6eb4:	f1c4 0520 	rsb	r5, r4, #32
   b6eb8:	fa00 f305 	lsl.w	r3, r0, r5
   b6ebc:	fa20 f004 	lsr.w	r0, r0, r4
   b6ec0:	fa01 f205 	lsl.w	r2, r1, r5
   b6ec4:	ea40 0002 	orr.w	r0, r0, r2
   b6ec8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6ed0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6ed4:	fa21 f604 	lsr.w	r6, r1, r4
   b6ed8:	eb42 0106 	adc.w	r1, r2, r6
   b6edc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6ee0:	bf08      	it	eq
   b6ee2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6ee6:	bd70      	pop	{r4, r5, r6, pc}
   b6ee8:	f1c4 040c 	rsb	r4, r4, #12
   b6eec:	f1c4 0520 	rsb	r5, r4, #32
   b6ef0:	fa00 f304 	lsl.w	r3, r0, r4
   b6ef4:	fa20 f005 	lsr.w	r0, r0, r5
   b6ef8:	fa01 f204 	lsl.w	r2, r1, r4
   b6efc:	ea40 0002 	orr.w	r0, r0, r2
   b6f00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6f08:	f141 0100 	adc.w	r1, r1, #0
   b6f0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6f10:	bf08      	it	eq
   b6f12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f16:	bd70      	pop	{r4, r5, r6, pc}
   b6f18:	f1c4 0520 	rsb	r5, r4, #32
   b6f1c:	fa00 f205 	lsl.w	r2, r0, r5
   b6f20:	ea4e 0e02 	orr.w	lr, lr, r2
   b6f24:	fa20 f304 	lsr.w	r3, r0, r4
   b6f28:	fa01 f205 	lsl.w	r2, r1, r5
   b6f2c:	ea43 0302 	orr.w	r3, r3, r2
   b6f30:	fa21 f004 	lsr.w	r0, r1, r4
   b6f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f38:	fa21 f204 	lsr.w	r2, r1, r4
   b6f3c:	ea20 0002 	bic.w	r0, r0, r2
   b6f40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6f44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6f48:	bf08      	it	eq
   b6f4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f4e:	bd70      	pop	{r4, r5, r6, pc}
   b6f50:	f094 0f00 	teq	r4, #0
   b6f54:	d10f      	bne.n	b6f76 <__aeabi_dmul+0x1c2>
   b6f56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6f5a:	0040      	lsls	r0, r0, #1
   b6f5c:	eb41 0101 	adc.w	r1, r1, r1
   b6f60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6f64:	bf08      	it	eq
   b6f66:	3c01      	subeq	r4, #1
   b6f68:	d0f7      	beq.n	b6f5a <__aeabi_dmul+0x1a6>
   b6f6a:	ea41 0106 	orr.w	r1, r1, r6
   b6f6e:	f095 0f00 	teq	r5, #0
   b6f72:	bf18      	it	ne
   b6f74:	4770      	bxne	lr
   b6f76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6f7a:	0052      	lsls	r2, r2, #1
   b6f7c:	eb43 0303 	adc.w	r3, r3, r3
   b6f80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6f84:	bf08      	it	eq
   b6f86:	3d01      	subeq	r5, #1
   b6f88:	d0f7      	beq.n	b6f7a <__aeabi_dmul+0x1c6>
   b6f8a:	ea43 0306 	orr.w	r3, r3, r6
   b6f8e:	4770      	bx	lr
   b6f90:	ea94 0f0c 	teq	r4, ip
   b6f94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6f98:	bf18      	it	ne
   b6f9a:	ea95 0f0c 	teqne	r5, ip
   b6f9e:	d00c      	beq.n	b6fba <__aeabi_dmul+0x206>
   b6fa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6fa4:	bf18      	it	ne
   b6fa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6faa:	d1d1      	bne.n	b6f50 <__aeabi_dmul+0x19c>
   b6fac:	ea81 0103 	eor.w	r1, r1, r3
   b6fb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6fb4:	f04f 0000 	mov.w	r0, #0
   b6fb8:	bd70      	pop	{r4, r5, r6, pc}
   b6fba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6fbe:	bf06      	itte	eq
   b6fc0:	4610      	moveq	r0, r2
   b6fc2:	4619      	moveq	r1, r3
   b6fc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6fc8:	d019      	beq.n	b6ffe <__aeabi_dmul+0x24a>
   b6fca:	ea94 0f0c 	teq	r4, ip
   b6fce:	d102      	bne.n	b6fd6 <__aeabi_dmul+0x222>
   b6fd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6fd4:	d113      	bne.n	b6ffe <__aeabi_dmul+0x24a>
   b6fd6:	ea95 0f0c 	teq	r5, ip
   b6fda:	d105      	bne.n	b6fe8 <__aeabi_dmul+0x234>
   b6fdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6fe0:	bf1c      	itt	ne
   b6fe2:	4610      	movne	r0, r2
   b6fe4:	4619      	movne	r1, r3
   b6fe6:	d10a      	bne.n	b6ffe <__aeabi_dmul+0x24a>
   b6fe8:	ea81 0103 	eor.w	r1, r1, r3
   b6fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6ff0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6ff4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6ff8:	f04f 0000 	mov.w	r0, #0
   b6ffc:	bd70      	pop	{r4, r5, r6, pc}
   b6ffe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7002:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7006:	bd70      	pop	{r4, r5, r6, pc}

000b7008 <__aeabi_ddiv>:
   b7008:	b570      	push	{r4, r5, r6, lr}
   b700a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b700e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7012:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7016:	bf1d      	ittte	ne
   b7018:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b701c:	ea94 0f0c 	teqne	r4, ip
   b7020:	ea95 0f0c 	teqne	r5, ip
   b7024:	f000 f8a7 	bleq	b7176 <__aeabi_ddiv+0x16e>
   b7028:	eba4 0405 	sub.w	r4, r4, r5
   b702c:	ea81 0e03 	eor.w	lr, r1, r3
   b7030:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7034:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7038:	f000 8088 	beq.w	b714c <__aeabi_ddiv+0x144>
   b703c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7040:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7044:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7048:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b704c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7050:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7054:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7058:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b705c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7060:	429d      	cmp	r5, r3
   b7062:	bf08      	it	eq
   b7064:	4296      	cmpeq	r6, r2
   b7066:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b706a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b706e:	d202      	bcs.n	b7076 <__aeabi_ddiv+0x6e>
   b7070:	085b      	lsrs	r3, r3, #1
   b7072:	ea4f 0232 	mov.w	r2, r2, rrx
   b7076:	1ab6      	subs	r6, r6, r2
   b7078:	eb65 0503 	sbc.w	r5, r5, r3
   b707c:	085b      	lsrs	r3, r3, #1
   b707e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7082:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7086:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b708a:	ebb6 0e02 	subs.w	lr, r6, r2
   b708e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7092:	bf22      	ittt	cs
   b7094:	1ab6      	subcs	r6, r6, r2
   b7096:	4675      	movcs	r5, lr
   b7098:	ea40 000c 	orrcs.w	r0, r0, ip
   b709c:	085b      	lsrs	r3, r3, #1
   b709e:	ea4f 0232 	mov.w	r2, r2, rrx
   b70a2:	ebb6 0e02 	subs.w	lr, r6, r2
   b70a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b70aa:	bf22      	ittt	cs
   b70ac:	1ab6      	subcs	r6, r6, r2
   b70ae:	4675      	movcs	r5, lr
   b70b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b70b4:	085b      	lsrs	r3, r3, #1
   b70b6:	ea4f 0232 	mov.w	r2, r2, rrx
   b70ba:	ebb6 0e02 	subs.w	lr, r6, r2
   b70be:	eb75 0e03 	sbcs.w	lr, r5, r3
   b70c2:	bf22      	ittt	cs
   b70c4:	1ab6      	subcs	r6, r6, r2
   b70c6:	4675      	movcs	r5, lr
   b70c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b70cc:	085b      	lsrs	r3, r3, #1
   b70ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b70d2:	ebb6 0e02 	subs.w	lr, r6, r2
   b70d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b70da:	bf22      	ittt	cs
   b70dc:	1ab6      	subcs	r6, r6, r2
   b70de:	4675      	movcs	r5, lr
   b70e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b70e4:	ea55 0e06 	orrs.w	lr, r5, r6
   b70e8:	d018      	beq.n	b711c <__aeabi_ddiv+0x114>
   b70ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b70ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b70f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b70f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b70fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b70fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7102:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7106:	d1c0      	bne.n	b708a <__aeabi_ddiv+0x82>
   b7108:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b710c:	d10b      	bne.n	b7126 <__aeabi_ddiv+0x11e>
   b710e:	ea41 0100 	orr.w	r1, r1, r0
   b7112:	f04f 0000 	mov.w	r0, #0
   b7116:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b711a:	e7b6      	b.n	b708a <__aeabi_ddiv+0x82>
   b711c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7120:	bf04      	itt	eq
   b7122:	4301      	orreq	r1, r0
   b7124:	2000      	moveq	r0, #0
   b7126:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b712a:	bf88      	it	hi
   b712c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7130:	f63f aeaf 	bhi.w	b6e92 <__aeabi_dmul+0xde>
   b7134:	ebb5 0c03 	subs.w	ip, r5, r3
   b7138:	bf04      	itt	eq
   b713a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b713e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7142:	f150 0000 	adcs.w	r0, r0, #0
   b7146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b714a:	bd70      	pop	{r4, r5, r6, pc}
   b714c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7150:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7154:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7158:	bfc2      	ittt	gt
   b715a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b715e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7162:	bd70      	popgt	{r4, r5, r6, pc}
   b7164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7168:	f04f 0e00 	mov.w	lr, #0
   b716c:	3c01      	subs	r4, #1
   b716e:	e690      	b.n	b6e92 <__aeabi_dmul+0xde>
   b7170:	ea45 0e06 	orr.w	lr, r5, r6
   b7174:	e68d      	b.n	b6e92 <__aeabi_dmul+0xde>
   b7176:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b717a:	ea94 0f0c 	teq	r4, ip
   b717e:	bf08      	it	eq
   b7180:	ea95 0f0c 	teqeq	r5, ip
   b7184:	f43f af3b 	beq.w	b6ffe <__aeabi_dmul+0x24a>
   b7188:	ea94 0f0c 	teq	r4, ip
   b718c:	d10a      	bne.n	b71a4 <__aeabi_ddiv+0x19c>
   b718e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7192:	f47f af34 	bne.w	b6ffe <__aeabi_dmul+0x24a>
   b7196:	ea95 0f0c 	teq	r5, ip
   b719a:	f47f af25 	bne.w	b6fe8 <__aeabi_dmul+0x234>
   b719e:	4610      	mov	r0, r2
   b71a0:	4619      	mov	r1, r3
   b71a2:	e72c      	b.n	b6ffe <__aeabi_dmul+0x24a>
   b71a4:	ea95 0f0c 	teq	r5, ip
   b71a8:	d106      	bne.n	b71b8 <__aeabi_ddiv+0x1b0>
   b71aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b71ae:	f43f aefd 	beq.w	b6fac <__aeabi_dmul+0x1f8>
   b71b2:	4610      	mov	r0, r2
   b71b4:	4619      	mov	r1, r3
   b71b6:	e722      	b.n	b6ffe <__aeabi_dmul+0x24a>
   b71b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b71bc:	bf18      	it	ne
   b71be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b71c2:	f47f aec5 	bne.w	b6f50 <__aeabi_dmul+0x19c>
   b71c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b71ca:	f47f af0d 	bne.w	b6fe8 <__aeabi_dmul+0x234>
   b71ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b71d2:	f47f aeeb 	bne.w	b6fac <__aeabi_dmul+0x1f8>
   b71d6:	e712      	b.n	b6ffe <__aeabi_dmul+0x24a>

000b71d8 <__aeabi_d2f>:
   b71d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b71dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b71e0:	bf24      	itt	cs
   b71e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b71e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b71ea:	d90d      	bls.n	b7208 <__aeabi_d2f+0x30>
   b71ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b71f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b71f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b71f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b71fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7200:	bf08      	it	eq
   b7202:	f020 0001 	biceq.w	r0, r0, #1
   b7206:	4770      	bx	lr
   b7208:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b720c:	d121      	bne.n	b7252 <__aeabi_d2f+0x7a>
   b720e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7212:	bfbc      	itt	lt
   b7214:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7218:	4770      	bxlt	lr
   b721a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b721e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7222:	f1c2 0218 	rsb	r2, r2, #24
   b7226:	f1c2 0c20 	rsb	ip, r2, #32
   b722a:	fa10 f30c 	lsls.w	r3, r0, ip
   b722e:	fa20 f002 	lsr.w	r0, r0, r2
   b7232:	bf18      	it	ne
   b7234:	f040 0001 	orrne.w	r0, r0, #1
   b7238:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b723c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7240:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7244:	ea40 000c 	orr.w	r0, r0, ip
   b7248:	fa23 f302 	lsr.w	r3, r3, r2
   b724c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7250:	e7cc      	b.n	b71ec <__aeabi_d2f+0x14>
   b7252:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7256:	d107      	bne.n	b7268 <__aeabi_d2f+0x90>
   b7258:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b725c:	bf1e      	ittt	ne
   b725e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7262:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7266:	4770      	bxne	lr
   b7268:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b726c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7270:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7274:	4770      	bx	lr
   b7276:	bf00      	nop

000b7278 <atexit>:
   b7278:	2300      	movs	r3, #0
   b727a:	4601      	mov	r1, r0
   b727c:	461a      	mov	r2, r3
   b727e:	4618      	mov	r0, r3
   b7280:	f000 b872 	b.w	b7368 <__register_exitproc>

000b7284 <memcpy>:
   b7284:	440a      	add	r2, r1
   b7286:	4291      	cmp	r1, r2
   b7288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b728c:	d100      	bne.n	b7290 <memcpy+0xc>
   b728e:	4770      	bx	lr
   b7290:	b510      	push	{r4, lr}
   b7292:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7296:	f803 4f01 	strb.w	r4, [r3, #1]!
   b729a:	4291      	cmp	r1, r2
   b729c:	d1f9      	bne.n	b7292 <memcpy+0xe>
   b729e:	bd10      	pop	{r4, pc}

000b72a0 <memset>:
   b72a0:	4402      	add	r2, r0
   b72a2:	4603      	mov	r3, r0
   b72a4:	4293      	cmp	r3, r2
   b72a6:	d100      	bne.n	b72aa <memset+0xa>
   b72a8:	4770      	bx	lr
   b72aa:	f803 1b01 	strb.w	r1, [r3], #1
   b72ae:	e7f9      	b.n	b72a4 <memset+0x4>

000b72b0 <srand>:
   b72b0:	b538      	push	{r3, r4, r5, lr}
   b72b2:	4b10      	ldr	r3, [pc, #64]	; (b72f4 <srand+0x44>)
   b72b4:	681d      	ldr	r5, [r3, #0]
   b72b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72b8:	4604      	mov	r4, r0
   b72ba:	b9b3      	cbnz	r3, b72ea <srand+0x3a>
   b72bc:	2018      	movs	r0, #24
   b72be:	f7fe f8a7 	bl	b5410 <malloc>
   b72c2:	4602      	mov	r2, r0
   b72c4:	63a8      	str	r0, [r5, #56]	; 0x38
   b72c6:	b920      	cbnz	r0, b72d2 <srand+0x22>
   b72c8:	4b0b      	ldr	r3, [pc, #44]	; (b72f8 <srand+0x48>)
   b72ca:	480c      	ldr	r0, [pc, #48]	; (b72fc <srand+0x4c>)
   b72cc:	2142      	movs	r1, #66	; 0x42
   b72ce:	f7fe f8df 	bl	b5490 <__assert_func>
   b72d2:	490b      	ldr	r1, [pc, #44]	; (b7300 <srand+0x50>)
   b72d4:	4b0b      	ldr	r3, [pc, #44]	; (b7304 <srand+0x54>)
   b72d6:	e9c0 1300 	strd	r1, r3, [r0]
   b72da:	4b0b      	ldr	r3, [pc, #44]	; (b7308 <srand+0x58>)
   b72dc:	6083      	str	r3, [r0, #8]
   b72de:	230b      	movs	r3, #11
   b72e0:	8183      	strh	r3, [r0, #12]
   b72e2:	2100      	movs	r1, #0
   b72e4:	2001      	movs	r0, #1
   b72e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b72ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72ec:	2200      	movs	r2, #0
   b72ee:	611c      	str	r4, [r3, #16]
   b72f0:	615a      	str	r2, [r3, #20]
   b72f2:	bd38      	pop	{r3, r4, r5, pc}
   b72f4:	2003e43c 	.word	0x2003e43c
   b72f8:	000b79a5 	.word	0x000b79a5
   b72fc:	000b79bc 	.word	0x000b79bc
   b7300:	abcd330e 	.word	0xabcd330e
   b7304:	e66d1234 	.word	0xe66d1234
   b7308:	0005deec 	.word	0x0005deec

000b730c <strcpy>:
   b730c:	4603      	mov	r3, r0
   b730e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7312:	f803 2b01 	strb.w	r2, [r3], #1
   b7316:	2a00      	cmp	r2, #0
   b7318:	d1f9      	bne.n	b730e <strcpy+0x2>
   b731a:	4770      	bx	lr

000b731c <strdup>:
   b731c:	4b02      	ldr	r3, [pc, #8]	; (b7328 <strdup+0xc>)
   b731e:	4601      	mov	r1, r0
   b7320:	6818      	ldr	r0, [r3, #0]
   b7322:	f000 b803 	b.w	b732c <_strdup_r>
   b7326:	bf00      	nop
   b7328:	2003e43c 	.word	0x2003e43c

000b732c <_strdup_r>:
   b732c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b732e:	4604      	mov	r4, r0
   b7330:	4608      	mov	r0, r1
   b7332:	460d      	mov	r5, r1
   b7334:	f000 f80f 	bl	b7356 <strlen>
   b7338:	1c42      	adds	r2, r0, #1
   b733a:	4611      	mov	r1, r2
   b733c:	4620      	mov	r0, r4
   b733e:	9201      	str	r2, [sp, #4]
   b7340:	f7fe f896 	bl	b5470 <_malloc_r>
   b7344:	4604      	mov	r4, r0
   b7346:	b118      	cbz	r0, b7350 <_strdup_r+0x24>
   b7348:	9a01      	ldr	r2, [sp, #4]
   b734a:	4629      	mov	r1, r5
   b734c:	f7ff ff9a 	bl	b7284 <memcpy>
   b7350:	4620      	mov	r0, r4
   b7352:	b003      	add	sp, #12
   b7354:	bd30      	pop	{r4, r5, pc}

000b7356 <strlen>:
   b7356:	4603      	mov	r3, r0
   b7358:	f813 2b01 	ldrb.w	r2, [r3], #1
   b735c:	2a00      	cmp	r2, #0
   b735e:	d1fb      	bne.n	b7358 <strlen+0x2>
   b7360:	1a18      	subs	r0, r3, r0
   b7362:	3801      	subs	r0, #1
   b7364:	4770      	bx	lr
	...

000b7368 <__register_exitproc>:
   b7368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b736c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7428 <__register_exitproc+0xc0>
   b7370:	4606      	mov	r6, r0
   b7372:	f8d8 0000 	ldr.w	r0, [r8]
   b7376:	461f      	mov	r7, r3
   b7378:	460d      	mov	r5, r1
   b737a:	4691      	mov	r9, r2
   b737c:	f000 f856 	bl	b742c <__retarget_lock_acquire_recursive>
   b7380:	4b25      	ldr	r3, [pc, #148]	; (b7418 <__register_exitproc+0xb0>)
   b7382:	681c      	ldr	r4, [r3, #0]
   b7384:	b934      	cbnz	r4, b7394 <__register_exitproc+0x2c>
   b7386:	4c25      	ldr	r4, [pc, #148]	; (b741c <__register_exitproc+0xb4>)
   b7388:	601c      	str	r4, [r3, #0]
   b738a:	4b25      	ldr	r3, [pc, #148]	; (b7420 <__register_exitproc+0xb8>)
   b738c:	b113      	cbz	r3, b7394 <__register_exitproc+0x2c>
   b738e:	681b      	ldr	r3, [r3, #0]
   b7390:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7394:	6863      	ldr	r3, [r4, #4]
   b7396:	2b1f      	cmp	r3, #31
   b7398:	dd07      	ble.n	b73aa <__register_exitproc+0x42>
   b739a:	f8d8 0000 	ldr.w	r0, [r8]
   b739e:	f000 f847 	bl	b7430 <__retarget_lock_release_recursive>
   b73a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b73a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b73aa:	b34e      	cbz	r6, b7400 <__register_exitproc+0x98>
   b73ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b73b0:	b988      	cbnz	r0, b73d6 <__register_exitproc+0x6e>
   b73b2:	4b1c      	ldr	r3, [pc, #112]	; (b7424 <__register_exitproc+0xbc>)
   b73b4:	b923      	cbnz	r3, b73c0 <__register_exitproc+0x58>
   b73b6:	f8d8 0000 	ldr.w	r0, [r8]
   b73ba:	f000 f838 	bl	b742e <__retarget_lock_release>
   b73be:	e7f0      	b.n	b73a2 <__register_exitproc+0x3a>
   b73c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b73c4:	f7fe f824 	bl	b5410 <malloc>
   b73c8:	2800      	cmp	r0, #0
   b73ca:	d0f4      	beq.n	b73b6 <__register_exitproc+0x4e>
   b73cc:	2300      	movs	r3, #0
   b73ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b73d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b73d6:	6863      	ldr	r3, [r4, #4]
   b73d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b73dc:	2201      	movs	r2, #1
   b73de:	409a      	lsls	r2, r3
   b73e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b73e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b73e8:	4313      	orrs	r3, r2
   b73ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b73ee:	2e02      	cmp	r6, #2
   b73f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b73f4:	bf02      	ittt	eq
   b73f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b73fa:	4313      	orreq	r3, r2
   b73fc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7400:	6863      	ldr	r3, [r4, #4]
   b7402:	f8d8 0000 	ldr.w	r0, [r8]
   b7406:	1c5a      	adds	r2, r3, #1
   b7408:	3302      	adds	r3, #2
   b740a:	6062      	str	r2, [r4, #4]
   b740c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7410:	f000 f80e 	bl	b7430 <__retarget_lock_release_recursive>
   b7414:	2000      	movs	r0, #0
   b7416:	e7c6      	b.n	b73a6 <__register_exitproc+0x3e>
   b7418:	2003e7e8 	.word	0x2003e7e8
   b741c:	2003e75c 	.word	0x2003e75c
   b7420:	00000000 	.word	0x00000000
   b7424:	000b5411 	.word	0x000b5411
   b7428:	2003e4a0 	.word	0x2003e4a0

000b742c <__retarget_lock_acquire_recursive>:
   b742c:	4770      	bx	lr

000b742e <__retarget_lock_release>:
   b742e:	4770      	bx	lr

000b7430 <__retarget_lock_release_recursive>:
   b7430:	4770      	bx	lr

000b7432 <link_code_end>:
	...

000b7434 <dynalib_user>:
   b7434:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7444:	0000 0000 6574 706d 3a43 2520 2066 6574     ....tempC: %f te
   b7454:	706d 3a46 2520 2066 6f63 6e75 6574 3a72     mpF: %f counter:
   b7464:	2520 2069 6564 6976 6563 4449 203a 7325      %i deviceID: %s
   b7474:	000a 6f76 746c 6761 3a65 2520 0a66 4100     ..voltage: %f..A
   b7484:	2b54 4f4d 4544 303d 0a0d 4100 6177 7469     T+MODE=0...Await
   b7494:	6e69 2067 6552 6c70 2079 7266 6d6f 7220     ing Reply from r
   b74a4:	7965 7861 6e4f 2928 000a 6552 6c70 3a79     eyaxOn()..Reply:
   b74b4:	2520 0a73 4100 2b54 4f4d 4544 0d3f 000a      %s..AT+MODE?...
   b74c4:	7741 6961 6974 676e 5220 7065 796c 6620     Awaiting Reply f
   b74d4:	6f72 206d 6f6d 6564 0a3f 4100 2b54 4f4d     rom mode?..AT+MO
   b74e4:	4544 313d 0a0d 5000 776f 7265 6e69 2067     DE=1...Powering 
   b74f4:	6f64 6e77 2e2e 0a2e 7300 6e65 2064 6572     down.....send re
   b7504:	6c70 3a79 2520 0a73 7300 6e65 4464 7461     ply: %s..sendDat
   b7514:	2861 0029 5441 532b 4e45 3d44 6925 252c     a().AT+SEND=%i,%
   b7524:	2c69 3025 322e 2c66 3025 322e 2c66 6925     i,%0.2f,%0.2f,%i
   b7534:	0a0d 6300 6572 7461 4265 6675 6566 3a72     ...createBuffer:
   b7544:	2520 0073 7263 6165 6574 7542 6666 7265      %s.createBuffer
   b7554:	2928 4100 0d54 000a 7461 6554 7473 7220     ().AT...atTest r
   b7564:	7065 796c 203a 7325 000a 7461 6554 7473     eply: %s..atTest
   b7574:	2928 6100 4d74 646f 2065 6572 6c70 3a79     ().atMode reply:
   b7584:	2520 2073 6572 6c70 3279 203a 7325 000a      %s reply2: %s..
   b7594:	7461 6f4d 6564 2928 4100 6177 7469 6e69     atMode().Awaitin
   b75a4:	2067 6552 6c70 0a79 5200 7065 796c 4120     g Reply..Reply A
   b75b4:	2b54 4f4d 4544 3a3f 2520 0a73 4100 2b54     T+MODE?: %s..AT+
   b75c4:	4f4d 4544 003f 5441 492b 5250 253d 0d69     MODE?.AT+IPR=%i.
   b75d4:	000a 6573 4974 5250 4100 2b54 5049 3f52     ..setIPR.AT+IPR?
   b75e4:	0a0d 5200 7065 796c 4120 2b54 5049 3f52     ...Reply AT+IPR?
   b75f4:	203a 7325 000a 5441 492b 5250 003f 5441     : %s..AT+IPR?.AT
   b7604:	502b 5241 4d41 5445 5245 313d 2c32 2c37     +PARAMETER=12,7,
   b7614:	2c31 0d37 000a 6573 5274 6461 6f69 4100     1,7...setRadio.A
   b7624:	2b54 4150 4152 454d 4554 3f52 0a0d 5200     T+PARAMETER?...R
   b7634:	7065 796c 4120 2b54 4150 4152 454d 4554     eply AT+PARAMETE
   b7644:	3f52 203a 7325 000a 6573 5074 7261 6d61     R?: %s..setParam
   b7654:	7465 7265 003f 5441 422b 4e41 3d44 3139     eter?.AT+BAND=91
   b7664:	3035 3030 3030 0d30 000a 5441 422b 4e41     5000000...AT+BAN
   b7674:	3d44 3638 3538 3030 3030 0d30 000a 6573     D=868500000...se
   b7684:	4274 6e61 0064 5441 422b 4e41 3f44 0a0d     tBand.AT+BAND?..
   b7694:	5200 7065 796c 4120 2b54 4142 444e 3a3f     .Reply AT+BAND?:
   b76a4:	2520 0a73 4100 2b54 4142 444e 003f 5441      %s..AT+BAND?.AT
   b76b4:	412b 4444 4552 5353 253d 0d69 000a 6573     +ADDRESS=%i...se
   b76c4:	4174 6464 6572 7373 4100 2b54 4441 5244     tAddress.AT+ADDR
   b76d4:	5345 3f53 0a0d 5200 7065 796c 6720 7465     ESS?...Reply get
   b76e4:	6120 6464 6572 7373 203a 7325 000a 5441      address: %s..AT
   b76f4:	412b 4444 4552 5353 003f 5441 4e2b 5445     +ADDRESS?.AT+NET
   b7704:	4f57 4b52 4449 253d 0d69 000a 5441 4e2b     WORKID=%i...AT+N
   b7714:	5445 4f57 4b52 4449 0d3f 000a 6552 6c70     ETWORKID?...Repl
   b7724:	2079 5441 4e2b 5445 4f57 4b52 4449 203f     y AT+NETWORKID? 
   b7734:	7325 000a 5441 4e2b 5445 4f57 4b52 4449     %s..AT+NETWORKID
   b7744:	003f 4142 3134 3430 3330 3932 3836 4142     ?.BA4104032968BA
   b7754:	3131 3431 3932 3039 3937 3230 3531 3439     1114299079021594
   b7764:	4141 4100 2b54 5043 4e49 253d 0d73 000a     AA.AT+CPIN=%s...
   b7774:	6573 4374 4950 004e 5441 432b 4950 3f4e     setCPIN.AT+CPIN?
   b7784:	0a0d 5200 7065 796c 4320 4950 3a4e 2520     ...Reply CPIN: %
   b7794:	0a73 4100 2b54 5043 4e49 003f 5441 432b     s..AT+CPIN?.AT+C
   b77a4:	4652 504f 253d 0d69 000a 5441 432b 4652     RFOP=%i...AT+CRF
   b77b4:	504f 4100 2b54 5243 4f46 3f50 0a0d 5200     OP.AT+CRFOP?...R
   b77c4:	7065 796c 4120 2b54 5243 4f46 3f50 203a     eply AT+CRFOP?: 
   b77d4:	7325 000a 5441 432b 4652 504f 003f 0000     %s..AT+CRFOP?...

000b77e4 <_ZTVN5spark12NetworkClassE>:
	...
   b77ec:	54c3 000b 54cd 000b 54d7 000b 54e1 000b     .T...T...T...T..
   b77fc:	54eb 000b 54f7 000b 5503 000b 550b 000b     .T...T...U...U..
   b780c:	5513 000b 551f 000b 5527 000b 5531 000b     .U...U..'U..1U..
   b781c:	553b 000b                                   ;U..

000b7820 <_ZTVN5spark9WiFiClassE>:
	...
   b7828:	5687 000b 567d 000b 5673 000b 5629 000b     .V..}V..sV..)V..
   b7838:	5667 000b 565b 000b 5503 000b 550b 000b     gV..[V...U...U..
   b7848:	564f 000b 5647 000b 563d 000b 5633 000b     OV..GV..=V..3V..
   b7858:	553b 000b                                   ;U..

000b785c <_ZTV7TwoWire>:
	...
   b7864:	56b9 000b 5703 000b 56db 000b 56bb 000b     .V...W...V...V..
   b7874:	56e3 000b 56eb 000b 56f3 000b 56fb 000b     .V...V...V...V..

000b7884 <_ZTV11USARTSerial>:
	...
   b788c:	575d 000b 57c9 000b 57a1 000b 618d 000b     ]W...W...W...a..
   b789c:	5771 000b 578d 000b 577f 000b 579b 000b     qW...W...W...W..
   b78ac:	575f 000b 5763 000b                         _W..cW..

000b78b4 <_ZTV9USBSerial>:
	...
   b78bc:	5815 000b 587d 000b 5853 000b 618d 000b     .X..}X..SX...a..
   b78cc:	5845 000b 5817 000b 5827 000b 5877 000b     EX...X..'X..wX..
   b78dc:	5837 000b 580f 000b                         7X...X..

000b78e4 <_ZTV9IPAddress>:
	...
   b78ec:	5929 000b 5919 000b 591b 000b               )Y...Y...Y..

000b78f8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7900:	5a09 000b 5a0f 000b 5a4d 000b 5a1d 000b     .Z...Z..MZ...Z..
   b7910:	5a0b 000b 5925 252d 2d6d 6425 2554 3a48     .Z..%Y-%m-%dT%H:
   b7920:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   b7930:	7061 0070 6977 6972 676e 5300 7379 6574     app.wiring.Syste
   b7940:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   b7950:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   b7960:	002e 0000                                   ....

000b7964 <_ZTVN5spark13EthernetClassE>:
	...
   b796c:	65d3 000b 65c9 000b 65bf 000b 65b5 000b     .e...e...e...e..
   b797c:	65a9 000b 659d 000b 5503 000b 550b 000b     .e...e...U...U..
   b798c:	6591 000b 6589 000b 657f 000b 6575 000b     .e...e...e..ue..
   b799c:	553b 000b                                   ;U..

000b79a0 <_ZSt7nothrow>:
   b79a0:	0000 0000 5200 4545 544e 6d20 6c61 6f6c     .....REENT mallo
   b79b0:	2063 7573 6363 6565 6564 0064 6d2f 746e     c succeeded./mnt
   b79c0:	772f 726f 736b 6170 6563 772f 726f 736b     /workspace/works
   b79d0:	6170 6563 472f 4343 312d 2d30 6970 6570     pace/GCC-10-pipe
   b79e0:	696c 656e 6a2f 6e65 696b 736e 472d 4343     line/jenkins-GCC
   b79f0:	312d 2d30 6970 6570 696c 656e 342d 5f38     -10-pipeline-48_
   b7a00:	3032 3032 3131 3432 315f 3036 3136 3038     20201124_1606180
   b7a10:	3436 2f31 7273 2f63 656e 6c77 6269 6e2f     641/src/newlib/n
   b7a20:	7765 696c 2f62 696c 6362 732f 6474 696c     ewlib/libc/stdli
   b7a30:	2f62 6172 646e 632e                          b/rand.c.

000b7a39 <link_const_variable_data_end>:
   b7a39:	00          	.byte	0x00
	...

000b7a3c <link_constructors_location>:
   b7a3c:	000b4fb5 	.word	0x000b4fb5
   b7a40:	000b5615 	.word	0x000b5615
   b7a44:	000b5691 	.word	0x000b5691
   b7a48:	000b60f9 	.word	0x000b60f9
   b7a4c:	000b610d 	.word	0x000b610d
   b7a50:	000b6121 	.word	0x000b6121
   b7a54:	000b62ad 	.word	0x000b62ad
   b7a58:	000b6551 	.word	0x000b6551
   b7a5c:	000b65dd 	.word	0x000b65dd
