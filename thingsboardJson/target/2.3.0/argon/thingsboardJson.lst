
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/thingsboardJson/target/2.3.0/argon/thingsboardJson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002714  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6730  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  2003e448  000d6734  0001e448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000328  2003e4c8  2003e4c8  0002e4c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d67b4  000d67b4  000267b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d67dc  000d67dc  000267dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001475a0  00000000  00000000  000267e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015dcd  00000000  00000000  0016dd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000029d8  00000000  00000000  00183b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003771b  00000000  00000000  00186525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00037c64  00000000  00000000  001bdc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00108de3  00000000  00000000  001f58a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002a8ac  00000000  00000000  002fe687  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00007930  00000000  00000000  00328f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007278  00000000  00000000  00330864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f87f 	bl	d6130 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f887 	bl	d614c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e448 	.word	0x2003e448
   d4048:	000d6734 	.word	0x000d6734
   d404c:	2003e4c8 	.word	0x2003e4c8
   d4050:	2003e4c8 	.word	0x2003e4c8
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fd9f 	bl	d5ba0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6704 	.word	0x000d6704
   d407c:	000d6728 	.word	0x000d6728

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8ae 	b.w	d41e0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c9 	bl	d421c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bd3f 	b.w	d5b10 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bf3f 	b.w	d4f14 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bf3d 	b.w	d4f14 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bf43 	b.w	d4f24 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40b0:	b510      	push	{r4, lr}
   d40b2:	4b03      	ldr	r3, [pc, #12]	; (d40c0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40b4:	6003      	str	r3, [r0, #0]
   d40b6:	4604      	mov	r4, r0
   d40b8:	f000 f8f6 	bl	d42a8 <_ZN10JsonWriterD1Ev>
   d40bc:	4620      	mov	r0, r4
   d40be:	bd10      	pop	{r4, pc}
   d40c0:	000d63dc 	.word	0x000d63dc

000d40c4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40c4:	b510      	push	{r4, lr}
   d40c6:	4604      	mov	r4, r0
   d40c8:	f7ff fff2 	bl	d40b0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40cc:	4620      	mov	r0, r4
   d40ce:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40d2:	f001 ff11 	bl	d5ef8 <_ZdlPvj>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}
	...

000d40dc <_Z17createJsonPayloadv>:
  }
  plume.loop();
}

void createJsonPayload()
{
   d40dc:	b510      	push	{r4, lr}
   d40de:	b0cc      	sub	sp, #304	; 0x130
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d40e0:	a90c      	add	r1, sp, #48	; 0x30
   d40e2:	f44f 7280 	mov.w	r2, #256	; 0x100
   d40e6:	4668      	mov	r0, sp
   d40e8:	f000 f8fa 	bl	d42e0 <_ZN10JsonWriterC1EPcj>
   d40ec:	4b1a      	ldr	r3, [pc, #104]	; (d4158 <_Z17createJsonPayloadv+0x7c>)
   d40ee:	9300      	str	r3, [sp, #0]
	bool startObject() { return startObjectOrArray('{', '}'); };
   d40f0:	227d      	movs	r2, #125	; 0x7d
   d40f2:	217b      	movs	r1, #123	; 0x7b
   d40f4:	4668      	mov	r0, sp
   d40f6:	f000 f9ee 	bl	d44d6 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);
    jw.insertKeyValue("t1", random(75000, 175000) / 1000);
   d40fa:	4918      	ldr	r1, [pc, #96]	; (d415c <_Z17createJsonPayloadv+0x80>)
   d40fc:	4818      	ldr	r0, [pc, #96]	; (d4160 <_Z17createJsonPayloadv+0x84>)
   d40fe:	f001 fb16 	bl	d572e <_Z6randomii>
   d4102:	4604      	mov	r4, r0
		insertCheckSeparator();
   d4104:	4668      	mov	r0, sp
   d4106:	f000 f9db 	bl	d44c0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   d410a:	2201      	movs	r2, #1
   d410c:	4668      	mov	r0, sp
   d410e:	4915      	ldr	r1, [pc, #84]	; (d4164 <_Z17createJsonPayloadv+0x88>)
   d4110:	f000 f944 	bl	d439c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   d4114:	4668      	mov	r0, sp
   d4116:	213a      	movs	r1, #58	; 0x3a
   d4118:	f000 f8f4 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   d411c:	4668      	mov	r0, sp
   d411e:	4912      	ldr	r1, [pc, #72]	; (d4168 <_Z17createJsonPayloadv+0x8c>)
   d4120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4124:	fb94 f2f2 	sdiv	r2, r4, r2
    // jw.insertKeyValue("t3", random(75000, 175000) / 1000);
    // jw.insertKeyValue("t4", random(75000, 175000) / 1000);
    // jw.insertKeyValue("t5", random(75000, 175000) / 1000);
    plume.publish("v1/devices/me/telemetry", jw.getBuffer());
    static bool onOff = true;
    digitalWrite(LEDPIN, onOff);
   d4128:	4c10      	ldr	r4, [pc, #64]	; (d416c <_Z17createJsonPayloadv+0x90>)
   d412a:	f000 f92a 	bl	d4382 <_ZN10JsonWriter13insertsprintfEPKcz>
    plume.publish("v1/devices/me/telemetry", jw.getBuffer());
   d412e:	9a01      	ldr	r2, [sp, #4]
   d4130:	490f      	ldr	r1, [pc, #60]	; (d4170 <_Z17createJsonPayloadv+0x94>)
   d4132:	4810      	ldr	r0, [pc, #64]	; (d4174 <_Z17createJsonPayloadv+0x98>)
   d4134:	f000 fcf4 	bl	d4b20 <_ZN12PubSubClient7publishEPKcS1_>
    digitalWrite(LEDPIN, onOff);
   d4138:	7821      	ldrb	r1, [r4, #0]
   d413a:	2007      	movs	r0, #7
   d413c:	f001 fec3 	bl	d5ec6 <digitalWrite>
    onOff = !onOff;
   d4140:	7823      	ldrb	r3, [r4, #0]

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4142:	4668      	mov	r0, sp
   d4144:	f083 0301 	eor.w	r3, r3, #1
   d4148:	7023      	strb	r3, [r4, #0]
   d414a:	f000 f8e9 	bl	d4320 <_ZN10JsonWriter19finishObjectOrArrayEv>
  JsonWriterStatic<256> jw;
   d414e:	4668      	mov	r0, sp
   d4150:	f7ff ffae 	bl	d40b0 <_ZN16JsonWriterStaticILj256EED1Ev>
  }
}
   d4154:	b04c      	add	sp, #304	; 0x130
   d4156:	bd10      	pop	{r4, pc}
   d4158:	000d63dc 	.word	0x000d63dc
   d415c:	0002ab98 	.word	0x0002ab98
   d4160:	000124f8 	.word	0x000124f8
   d4164:	000d6310 	.word	0x000d6310
   d4168:	000d64a0 	.word	0x000d64a0
   d416c:	2003e448 	.word	0x2003e448
   d4170:	000d6313 	.word	0x000d6313
   d4174:	2003e4cc 	.word	0x2003e4cc

000d4178 <_Z12plumeConnectv>:

void plumeConnect()
{
   d4178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!plume.connected())
   d417a:	4d13      	ldr	r5, [pc, #76]	; (d41c8 <_Z12plumeConnectv+0x50>)
  {
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   d417c:	4e13      	ldr	r6, [pc, #76]	; (d41cc <_Z12plumeConnectv+0x54>)
    if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   d417e:	4f14      	ldr	r7, [pc, #80]	; (d41d0 <_Z12plumeConnectv+0x58>)
  while (!plume.connected())
   d4180:	4811      	ldr	r0, [pc, #68]	; (d41c8 <_Z12plumeConnectv+0x50>)
   d4182:	f000 faf0 	bl	d4766 <_ZN12PubSubClient9connectedEv>
   d4186:	4604      	mov	r4, r0
   d4188:	b9e0      	cbnz	r0, d41c4 <_Z12plumeConnectv+0x4c>
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   d418a:	f001 fbf1 	bl	d5970 <_Z16_fetch_usbserialv>
   d418e:	4631      	mov	r1, r6
   d4190:	f001 fd8b 	bl	d5caa <_ZN5Print7printlnEPKc>
    if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   d4194:	490f      	ldr	r1, [pc, #60]	; (d41d4 <_Z12plumeConnectv+0x5c>)
   d4196:	4623      	mov	r3, r4
   d4198:	463a      	mov	r2, r7
   d419a:	4628      	mov	r0, r5
   d419c:	f000 fbc6 	bl	d492c <_ZN12PubSubClient7connectEPKcS1_S1_>
   d41a0:	b130      	cbz	r0, d41b0 <_Z12plumeConnectv+0x38>
    {
      Serial.println("plumeConnect(): Connected");
   d41a2:	f001 fbe5 	bl	d5970 <_Z16_fetch_usbserialv>
    }
    else
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
    delay(3000);
  }
   d41a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      Serial.println("plumeConnect(): Connected");
   d41aa:	490b      	ldr	r1, [pc, #44]	; (d41d8 <_Z12plumeConnectv+0x60>)
   d41ac:	f001 bd7d 	b.w	d5caa <_ZN5Print7printlnEPKc>
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   d41b0:	f001 fbde 	bl	d5970 <_Z16_fetch_usbserialv>
   d41b4:	4909      	ldr	r1, [pc, #36]	; (d41dc <_Z12plumeConnectv+0x64>)
   d41b6:	f001 fd78 	bl	d5caa <_ZN5Print7printlnEPKc>
    delay(3000);
   d41ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d41be:	f001 fd27 	bl	d5c10 <delay>
  while (!plume.connected())
   d41c2:	e7dd      	b.n	d4180 <_Z12plumeConnectv+0x8>
   d41c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d41c6:	bf00      	nop
   d41c8:	2003e4cc 	.word	0x2003e4cc
   d41cc:	000d632b 	.word	0x000d632b
   d41d0:	000d6367 	.word	0x000d6367
   d41d4:	000d637c 	.word	0x000d637c
   d41d8:	000d6382 	.word	0x000d6382
   d41dc:	000d639c 	.word	0x000d639c

000d41e0 <setup>:
{
   d41e0:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d41e2:	f001 fbc5 	bl	d5970 <_Z16_fetch_usbserialv>
   d41e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41ea:	f001 fbb5 	bl	d5958 <_ZN9USBSerial5beginEl>
  pinMode(D7, OUTPUT);
   d41ee:	2101      	movs	r1, #1
   d41f0:	2007      	movs	r0, #7
   d41f2:	f001 fe57 	bl	d5ea4 <pinMode>
  plume.setServer(thingsboardServer, MQTTPORT);
   d41f6:	f240 725b 	movw	r2, #1883	; 0x75b
   d41fa:	4905      	ldr	r1, [pc, #20]	; (d4210 <setup+0x30>)
   d41fc:	4805      	ldr	r0, [pc, #20]	; (d4214 <setup+0x34>)
   d41fe:	f000 fca0 	bl	d4b42 <_ZN12PubSubClient9setServerEPKct>
  plumeConnect();
   d4202:	f7ff ffb9 	bl	d4178 <_Z12plumeConnectv>
  lastTime = 5000;
   d4206:	4b04      	ldr	r3, [pc, #16]	; (d4218 <setup+0x38>)
   d4208:	f241 3288 	movw	r2, #5000	; 0x1388
   d420c:	601a      	str	r2, [r3, #0]
}
   d420e:	bd08      	pop	{r3, pc}
   d4210:	2003e449 	.word	0x2003e449
   d4214:	2003e4cc 	.word	0x2003e4cc
   d4218:	2003e4c8 	.word	0x2003e4c8

000d421c <loop>:
{
   d421c:	b510      	push	{r4, lr}
  if (!plume.connected())
   d421e:	480c      	ldr	r0, [pc, #48]	; (d4250 <loop+0x34>)
   d4220:	f000 faa1 	bl	d4766 <_ZN12PubSubClient9connectedEv>
   d4224:	b908      	cbnz	r0, d422a <loop+0xe>
    plumeConnect();
   d4226:	f7ff ffa7 	bl	d4178 <_Z12plumeConnectv>
  if (millis() - lastTime > 5000)
   d422a:	4c0a      	ldr	r4, [pc, #40]	; (d4254 <loop+0x38>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d422c:	f000 fda6 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
   d4230:	6823      	ldr	r3, [r4, #0]
   d4232:	1ac0      	subs	r0, r0, r3
   d4234:	f241 3388 	movw	r3, #5000	; 0x1388
   d4238:	4298      	cmp	r0, r3
   d423a:	d904      	bls.n	d4246 <loop+0x2a>
    createJsonPayload();
   d423c:	f7ff ff4e 	bl	d40dc <_Z17createJsonPayloadv>
   d4240:	f000 fd9c 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   d4244:	6020      	str	r0, [r4, #0]
}
   d4246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  plume.loop();
   d424a:	4801      	ldr	r0, [pc, #4]	; (d4250 <loop+0x34>)
   d424c:	f000 bb78 	b.w	d4940 <_ZN12PubSubClient4loopEv>
   d4250:	2003e4cc 	.word	0x2003e4cc
   d4254:	2003e4c8 	.word	0x2003e4c8

000d4258 <_GLOBAL__sub_I_thingsboardServer>:
   d4258:	b508      	push	{r3, lr}
TCPClient pubsub;
   d425a:	4905      	ldr	r1, [pc, #20]	; (d4270 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   d425c:	4608      	mov	r0, r1
   d425e:	f001 fa3d 	bl	d56dc <_ZN9TCPClientC1Ev>
   d4262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   d4266:	4902      	ldr	r1, [pc, #8]	; (d4270 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   d4268:	4802      	ldr	r0, [pc, #8]	; (d4274 <_GLOBAL__sub_I_thingsboardServer+0x1c>)
   d426a:	f000 b95d 	b.w	d4528 <_ZN12PubSubClientC1ER6Client>
   d426e:	bf00      	nop
   d4270:	2003e58c 	.word	0x2003e58c
   d4274:	2003e4cc 	.word	0x2003e4cc

000d4278 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4278:	b510      	push	{r4, lr}
   d427a:	4b05      	ldr	r3, [pc, #20]	; (d4290 <_ZN10JsonBufferD1Ev+0x18>)
   d427c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d427e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d4280:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4282:	b91b      	cbnz	r3, d428c <_ZN10JsonBufferD1Ev+0x14>
   d4284:	6840      	ldr	r0, [r0, #4]
   d4286:	b108      	cbz	r0, d428c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4288:	f000 fe4c 	bl	d4f24 <free>
	}
}
   d428c:	4620      	mov	r0, r4
   d428e:	bd10      	pop	{r4, pc}
   d4290:	000d63f4 	.word	0x000d63f4

000d4294 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d4294:	b510      	push	{r4, lr}
   d4296:	4604      	mov	r4, r0
}
   d4298:	f7ff ffee 	bl	d4278 <_ZN10JsonBufferD1Ev>
   d429c:	4620      	mov	r0, r4
   d429e:	2114      	movs	r1, #20
   d42a0:	f001 fe2a 	bl	d5ef8 <_ZdlPvj>
   d42a4:	4620      	mov	r0, r4
   d42a6:	bd10      	pop	{r4, pc}

000d42a8 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d42a8:	b510      	push	{r4, lr}
   d42aa:	4b03      	ldr	r3, [pc, #12]	; (d42b8 <_ZN10JsonWriterD1Ev+0x10>)
   d42ac:	6003      	str	r3, [r0, #0]
   d42ae:	4604      	mov	r4, r0
   d42b0:	f7ff ffe2 	bl	d4278 <_ZN10JsonBufferD1Ev>

}
   d42b4:	4620      	mov	r0, r4
   d42b6:	bd10      	pop	{r4, pc}
   d42b8:	000d6404 	.word	0x000d6404

000d42bc <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   d42bc:	b510      	push	{r4, lr}
   d42be:	4604      	mov	r4, r0
}
   d42c0:	f7ff fff2 	bl	d42a8 <_ZN10JsonWriterD1Ev>
   d42c4:	4620      	mov	r0, r4
   d42c6:	2130      	movs	r1, #48	; 0x30
   d42c8:	f001 fe16 	bl	d5ef8 <_ZdlPvj>
   d42cc:	4620      	mov	r0, r4
   d42ce:	bd10      	pop	{r4, pc}

000d42d0 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d42d0:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d42d2:	2201      	movs	r2, #1
	offset = 0;
   d42d4:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   d42d6:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d42d8:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   d42da:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   d42de:	4770      	bx	lr

000d42e0 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d42e0:	2300      	movs	r3, #0
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d42e2:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d42e4:	60c3      	str	r3, [r0, #12]
   d42e6:	2301      	movs	r3, #1
   d42e8:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d42ea:	4b05      	ldr	r3, [pc, #20]	; (d4300 <_ZN10JsonWriterC1EPcj+0x20>)
   d42ec:	6003      	str	r3, [r0, #0]
   d42ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d42f2:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d42f6:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d42f8:	f7ff ffea 	bl	d42d0 <_ZN10JsonWriter4initEv>
}
   d42fc:	bd10      	pop	{r4, pc}
   d42fe:	bf00      	nop
   d4300:	000d6404 	.word	0x000d6404

000d4304 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4304:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   d4308:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d430a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d430c:	bf3f      	itttt	cc
   d430e:	6842      	ldrcc	r2, [r0, #4]
   d4310:	1c5c      	addcc	r4, r3, #1
   d4312:	60c4      	strcc	r4, [r0, #12]
   d4314:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d4316:	bf24      	itt	cs
   d4318:	2301      	movcs	r3, #1
   d431a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   d431e:	bd10      	pop	{r4, pc}

000d4320 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   d4320:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d4322:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   d4324:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d4326:	b143      	cbz	r3, d433a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d4328:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d432c:	7e59      	ldrb	r1, [r3, #25]
   d432e:	b109      	cbz	r1, d4334 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d4330:	f7ff ffe8 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   d4334:	6963      	ldr	r3, [r4, #20]
   d4336:	3b01      	subs	r3, #1
   d4338:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   d433a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   d433e:	6863      	ldr	r3, [r4, #4]
   d4340:	4288      	cmp	r0, r1
   d4342:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   d4346:	bf2a      	itet	cs
   d4348:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   d434a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   d434c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   d4350:	bd10      	pop	{r4, pc}

000d4352 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d4352:	b570      	push	{r4, r5, r6, lr}
   d4354:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d4356:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d435a:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   d435c:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d435e:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4360:	4430      	add	r0, r6
   d4362:	460a      	mov	r2, r1
   d4364:	4629      	mov	r1, r5
   d4366:	f000 fde5 	bl	d4f34 <vsnprintf>
	if (count <= spaceAvailable) {
   d436a:	4285      	cmp	r5, r0
		offset += count;
   d436c:	bf2d      	iteet	cs
   d436e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4370:	68a3      	ldrcc	r3, [r4, #8]
   d4372:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   d4374:	18c0      	addcs	r0, r0, r3
		truncated = true;
   d4376:	bf36      	itet	cc
   d4378:	2301      	movcc	r3, #1
		offset += count;
   d437a:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   d437c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   d4380:	bd70      	pop	{r4, r5, r6, pc}

000d4382 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   d4382:	b40e      	push	{r1, r2, r3}
   d4384:	b503      	push	{r0, r1, lr}
   d4386:	aa03      	add	r2, sp, #12
   d4388:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   d438c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d438e:	f7ff ffe0 	bl	d4352 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   d4392:	b002      	add	sp, #8
   d4394:	f85d eb04 	ldr.w	lr, [sp], #4
   d4398:	b003      	add	sp, #12
   d439a:	4770      	bx	lr

000d439c <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   d439c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d43a0:	4604      	mov	r4, r0
   d43a2:	460e      	mov	r6, r1
	if (quoted) {
   d43a4:	4617      	mov	r7, r2
   d43a6:	b112      	cbz	r2, d43ae <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d43a8:	2122      	movs	r1, #34	; 0x22
   d43aa:	f7ff ffab 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   d43ae:	f8df 810c 	ldr.w	r8, [pc, #268]	; d44bc <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   d43b2:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d43b4:	5d71      	ldrb	r1, [r6, r5]
   d43b6:	eb06 0905 	add.w	r9, r6, r5
   d43ba:	2900      	cmp	r1, #0
   d43bc:	d074      	beq.n	d44a8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   d43be:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d43c2:	429a      	cmp	r2, r3
   d43c4:	d270      	bcs.n	d44a8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   d43c6:	060b      	lsls	r3, r1, #24
   d43c8:	d534      	bpl.n	d4434 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d43ca:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d43ce:	2be0      	cmp	r3, #224	; 0xe0
   d43d0:	f105 0901 	add.w	r9, r5, #1
   d43d4:	d11d      	bne.n	d4412 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   d43d6:	f816 2009 	ldrb.w	r2, [r6, r9]
   d43da:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   d43de:	2b80      	cmp	r3, #128	; 0x80
   d43e0:	d139      	bne.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d43e2:	f105 0902 	add.w	r9, r5, #2
   d43e6:	f816 3009 	ldrb.w	r3, [r6, r9]
   d43ea:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   d43ee:	2880      	cmp	r0, #128	; 0x80
   d43f0:	d131      	bne.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   d43f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d43f6:	0192      	lsls	r2, r2, #6
   d43f8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   d43fc:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   d4400:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   d4402:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   d4404:	4641      	mov	r1, r8
   d4406:	4620      	mov	r0, r4
   d4408:	f7ff ffbb 	bl	d4382 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d440c:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d440e:	3501      	adds	r5, #1
   d4410:	e7d0      	b.n	d43b4 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d4412:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d4416:	2bc0      	cmp	r3, #192	; 0xc0
   d4418:	d11d      	bne.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d441a:	f816 3009 	ldrb.w	r3, [r6, r9]
   d441e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4422:	2a80      	cmp	r2, #128	; 0x80
   d4424:	d117      	bne.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   d4426:	0189      	lsls	r1, r1, #6
   d4428:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d442c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   d4430:	431a      	orrs	r2, r3
   d4432:	e7e7      	b.n	d4404 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   d4434:	290d      	cmp	r1, #13
   d4436:	d80a      	bhi.n	d444e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   d4438:	2907      	cmp	r1, #7
   d443a:	d90c      	bls.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d443c:	f1a1 0308 	sub.w	r3, r1, #8
   d4440:	2b05      	cmp	r3, #5
   d4442:	d808      	bhi.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d4444:	e8df f003 	tbb	[pc, r3]
   d4448:	0717230b 	.word	0x0717230b
   d444c:	1d11      	.short	0x1d11
   d444e:	2922      	cmp	r1, #34	; 0x22
   d4450:	d023      	beq.n	d449a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   d4452:	295c      	cmp	r1, #92	; 0x5c
   d4454:	d021      	beq.n	d449a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   d4456:	4620      	mov	r0, r4
   d4458:	f7ff ff54 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				break;
   d445c:	e7d7      	b.n	d440e <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   d445e:	215c      	movs	r1, #92	; 0x5c
   d4460:	4620      	mov	r0, r4
   d4462:	f7ff ff4f 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d4466:	2162      	movs	r1, #98	; 0x62
   d4468:	e7f5      	b.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d446a:	215c      	movs	r1, #92	; 0x5c
   d446c:	4620      	mov	r0, r4
   d446e:	f7ff ff49 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d4472:	2166      	movs	r1, #102	; 0x66
   d4474:	e7ef      	b.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d4476:	215c      	movs	r1, #92	; 0x5c
   d4478:	4620      	mov	r0, r4
   d447a:	f7ff ff43 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d447e:	216e      	movs	r1, #110	; 0x6e
   d4480:	e7e9      	b.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d4482:	215c      	movs	r1, #92	; 0x5c
   d4484:	4620      	mov	r0, r4
   d4486:	f7ff ff3d 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d448a:	2172      	movs	r1, #114	; 0x72
   d448c:	e7e3      	b.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d448e:	215c      	movs	r1, #92	; 0x5c
   d4490:	4620      	mov	r0, r4
   d4492:	f7ff ff37 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d4496:	2174      	movs	r1, #116	; 0x74
   d4498:	e7dd      	b.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d449a:	215c      	movs	r1, #92	; 0x5c
   d449c:	4620      	mov	r0, r4
   d449e:	f7ff ff31 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d44a2:	f899 1000 	ldrb.w	r1, [r9]
   d44a6:	e7d6      	b.n	d4456 <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
   d44a8:	b12f      	cbz	r7, d44b6 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   d44aa:	4620      	mov	r0, r4
   d44ac:	2122      	movs	r1, #34	; 0x22
}
   d44ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   d44b2:	f7ff bf27 	b.w	d4304 <_ZN10JsonWriter10insertCharEc>
}
   d44b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d44ba:	bf00      	nop
   d44bc:	000d63e4 	.word	0x000d63e4

000d44c0 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   d44c0:	6942      	ldr	r2, [r0, #20]
   d44c2:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   d44c6:	7e1a      	ldrb	r2, [r3, #24]
   d44c8:	b112      	cbz	r2, d44d0 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d44ca:	2200      	movs	r2, #0
   d44cc:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   d44ce:	4770      	bx	lr
		insertChar(',');
   d44d0:	212c      	movs	r1, #44	; 0x2c
   d44d2:	f7ff bf17 	b.w	d4304 <_ZN10JsonWriter10insertCharEc>

000d44d6 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d44d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d44d8:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d44da:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d44dc:	3301      	adds	r3, #1
   d44de:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d44e0:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d44e2:	d80f      	bhi.n	d4504 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   d44e4:	f7ff ffec 	bl	d44c0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   d44e8:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   d44ea:	9901      	ldr	r1, [sp, #4]
	contextIndex++;
   d44ec:	1c5a      	adds	r2, r3, #1
   d44ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
	context[contextIndex].isFirst = true;
   d44f2:	2501      	movs	r5, #1
	contextIndex++;
   d44f4:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   d44f6:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
   d44f8:	76de      	strb	r6, [r3, #27]
	insertChar(startChar);
   d44fa:	f7ff ff03 	bl	d4304 <_ZN10JsonWriter10insertCharEc>
   d44fe:	4628      	mov	r0, r5
}
   d4500:	b002      	add	sp, #8
   d4502:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   d4504:	2000      	movs	r0, #0
   d4506:	e7fb      	b.n	d4500 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000d4508 <_ZN9IPAddressC1ERKS_>:

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4508:	b570      	push	{r4, r5, r6, lr}
   d450a:	4604      	mov	r4, r0
   d450c:	4b05      	ldr	r3, [pc, #20]	; (d4524 <_ZN9IPAddressC1ERKS_+0x1c>)
   d450e:	f844 3b04 	str.w	r3, [r4], #4
   d4512:	1d0d      	adds	r5, r1, #4
   d4514:	4606      	mov	r6, r0
   d4516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d451a:	682b      	ldr	r3, [r5, #0]
   d451c:	7023      	strb	r3, [r4, #0]
   d451e:	4630      	mov	r0, r6
   d4520:	bd70      	pop	{r4, r5, r6, pc}
   d4522:	bf00      	nop
   d4524:	000d65a4 	.word	0x000d65a4

000d4528 <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   d4528:	b538      	push	{r3, r4, r5, lr}
   d452a:	4604      	mov	r4, r0
   d452c:	3098      	adds	r0, #152	; 0x98
   d452e:	460d      	mov	r5, r1
   d4530:	f001 fa7e 	bl	d5a30 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   d4534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4538:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   d453c:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   d453e:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   d4540:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   d4544:	4620      	mov	r0, r4
   d4546:	bd38      	pop	{r3, r4, r5, pc}

000d4548 <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   d4548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d454c:	4605      	mov	r5, r0
   d454e:	460e      	mov	r6, r1
   d4550:	f000 fc14 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   d4554:	f643 2897 	movw	r8, #14999	; 0x3a97
   d4558:	4607      	mov	r7, r0
   while(!_client->available()) {
   d455a:	6828      	ldr	r0, [r5, #0]
   d455c:	6803      	ldr	r3, [r0, #0]
   d455e:	691b      	ldr	r3, [r3, #16]
   d4560:	4798      	blx	r3
   d4562:	4604      	mov	r4, r0
   d4564:	b930      	cbnz	r0, d4574 <_ZN12PubSubClient8readByteEPh+0x2c>
   d4566:	f000 fc09 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   d456a:	1bc3      	subs	r3, r0, r7
   d456c:	4543      	cmp	r3, r8
   d456e:	d9f4      	bls.n	d455a <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   d4570:	4620      	mov	r0, r4
   d4572:	e005      	b.n	d4580 <_ZN12PubSubClient8readByteEPh+0x38>
   *result = _client->read();
   d4574:	6828      	ldr	r0, [r5, #0]
   d4576:	6803      	ldr	r3, [r0, #0]
   d4578:	695b      	ldr	r3, [r3, #20]
   d457a:	4798      	blx	r3
   d457c:	7030      	strb	r0, [r6, #0]
   d457e:	2001      	movs	r0, #1
}
   d4580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4584 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   d4584:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   d4586:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   d4588:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   d458a:	4614      	mov	r4, r2
  if(readByte(write_address)){
   d458c:	f7ff ffdc 	bl	d4548 <_ZN12PubSubClient8readByteEPh>
   d4590:	b108      	cbz	r0, d4596 <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   d4592:	3501      	adds	r5, #1
   d4594:	8025      	strh	r5, [r4, #0]
}
   d4596:	bd38      	pop	{r3, r4, r5, pc}

000d4598 <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d4598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   d459c:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d459e:	4688      	mov	r8, r1
    uint16_t len = 0;
   d45a0:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   d45a2:	f10d 0206 	add.w	r2, sp, #6
   d45a6:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   d45a8:	4604      	mov	r4, r0
    uint16_t len = 0;
   d45aa:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   d45ae:	f7ff ffe9 	bl	d4584 <_ZN12PubSubClient8readByteEPhPt>
   d45b2:	b918      	cbnz	r0, d45bc <_ZN12PubSubClient10readPacketEPh+0x24>
   d45b4:	2000      	movs	r0, #0
}
   d45b6:	b003      	add	sp, #12
   d45b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d45bc:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   d45c0:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   d45c4:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   d45c6:	f10d 0105 	add.w	r1, sp, #5
   d45ca:	4620      	mov	r0, r4
   d45cc:	f7ff ffbc 	bl	d4548 <_ZN12PubSubClient8readByteEPh>
   d45d0:	2800      	cmp	r0, #0
   d45d2:	d0ef      	beq.n	d45b4 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   d45d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d45d8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d45dc:	1c53      	adds	r3, r2, #1
   d45de:	4422      	add	r2, r4
   d45e0:	b29b      	uxth	r3, r3
   d45e2:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   d45e4:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   d45e8:	fb12 f206 	smulbb	r2, r2, r6
   d45ec:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   d45ee:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   d45f0:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   d45f4:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d45f6:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   d45fa:	d4e4      	bmi.n	d45c6 <_ZN12PubSubClient10readPacketEPh+0x2e>
   d45fc:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   d4600:	3b01      	subs	r3, #1
    if (isPublish) {
   d4602:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   d4606:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   d460a:	d11e      	bne.n	d464a <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   d460c:	f10d 0206 	add.w	r2, sp, #6
   d4610:	4629      	mov	r1, r5
   d4612:	4620      	mov	r0, r4
   d4614:	f7ff ffb6 	bl	d4584 <_ZN12PubSubClient8readByteEPhPt>
   d4618:	2800      	cmp	r0, #0
   d461a:	d0cb      	beq.n	d45b4 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   d461c:	f10d 0206 	add.w	r2, sp, #6
   d4620:	4629      	mov	r1, r5
   d4622:	4620      	mov	r0, r4
   d4624:	f7ff ffae 	bl	d4584 <_ZN12PubSubClient8readByteEPhPt>
   d4628:	2800      	cmp	r0, #0
   d462a:	d0c3      	beq.n	d45b4 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d462c:	f898 3000 	ldrb.w	r3, [r8]
   d4630:	4423      	add	r3, r4
   d4632:	795a      	ldrb	r2, [r3, #5]
   d4634:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   d4636:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d4638:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   d463c:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   d463e:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   d4640:	d501      	bpl.n	d4646 <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   d4642:	3602      	adds	r6, #2
   d4644:	b2b6      	uxth	r6, r6
        start = 2;
   d4646:	2502      	movs	r5, #2
   d4648:	e001      	b.n	d464e <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   d464a:	2500      	movs	r5, #0
    uint16_t skip = 0;
   d464c:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   d464e:	b2ad      	uxth	r5, r5
   d4650:	42bd      	cmp	r5, r7
   d4652:	d226      	bcs.n	d46a2 <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   d4654:	f10d 0105 	add.w	r1, sp, #5
   d4658:	4620      	mov	r0, r4
   d465a:	f7ff ff75 	bl	d4548 <_ZN12PubSubClient8readByteEPh>
   d465e:	2800      	cmp	r0, #0
   d4660:	d0a8      	beq.n	d45b4 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   d4662:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   d4666:	b178      	cbz	r0, d4688 <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   d4668:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   d466c:	d10c      	bne.n	d4688 <_ZN12PubSubClient10readPacketEPh+0xf0>
   d466e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4672:	f898 2000 	ldrb.w	r2, [r8]
   d4676:	1a9b      	subs	r3, r3, r2
   d4678:	3b02      	subs	r3, #2
   d467a:	42b3      	cmp	r3, r6
   d467c:	dd04      	ble.n	d4688 <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   d467e:	6803      	ldr	r3, [r0, #0]
   d4680:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4684:	689b      	ldr	r3, [r3, #8]
   d4686:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   d4688:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d468c:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   d468e:	bf9e      	ittt	ls
   d4690:	18e2      	addls	r2, r4, r3
   d4692:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   d4696:	7111      	strbls	r1, [r2, #4]
        len++;
   d4698:	3301      	adds	r3, #1
   d469a:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   d469e:	3501      	adds	r5, #1
   d46a0:	e7d5      	b.n	d464e <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   d46a2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d46a6:	b92b      	cbnz	r3, d46b4 <_ZN12PubSubClient10readPacketEPh+0x11c>
   d46a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d46ac:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   d46ae:	bf88      	it	hi
   d46b0:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   d46b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d46b8:	e77d      	b.n	d45b6 <_ZN12PubSubClient10readPacketEPh+0x1e>

000d46ba <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d46ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d46bc:	468c      	mov	ip, r1
   d46be:	461e      	mov	r6, r3
    uint16_t len = length;
   d46c0:	461d      	mov	r5, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d46c2:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d46c4:	2300      	movs	r3, #0
        digit = len % 128;
   d46c6:	46ae      	mov	lr, r5
        lenBuf[pos++] = digit;
   d46c8:	a802      	add	r0, sp, #8
        digit = len % 128;
   d46ca:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d46ce:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d46d2:	f103 0401 	add.w	r4, r3, #1
   d46d6:	4403      	add	r3, r0
            digit |= 0x80;
   d46d8:	bf88      	it	hi
   d46da:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
    } while(len>0);
   d46de:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d46e2:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d46e6:	b2e4      	uxtb	r4, r4
   d46e8:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len>0);
   d46ec:	d810      	bhi.n	d4710 <_ZN12PubSubClient5writeEhPht+0x56>
    buf[4-llen] = header;
   d46ee:	f1c4 0304 	rsb	r3, r4, #4
   d46f2:	18d1      	adds	r1, r2, r3
   d46f4:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i=0;i<llen;i++) {
   d46f8:	f1c4 0305 	rsb	r3, r4, #5
   d46fc:	4413      	add	r3, r2
   d46fe:	a801      	add	r0, sp, #4
   d4700:	3205      	adds	r2, #5
   d4702:	429a      	cmp	r2, r3
   d4704:	d006      	beq.n	d4714 <_ZN12PubSubClient5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d4706:	f810 5b01 	ldrb.w	r5, [r0], #1
   d470a:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i=0;i<llen;i++) {
   d470e:	e7f8      	b.n	d4702 <_ZN12PubSubClient5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d4710:	4623      	mov	r3, r4
   d4712:	e7d8      	b.n	d46c6 <_ZN12PubSubClient5writeEhPht+0xc>
    rc = _client->write(buf+(4-llen),length+1+llen);
   d4714:	6838      	ldr	r0, [r7, #0]
   d4716:	6803      	ldr	r3, [r0, #0]
   d4718:	1c72      	adds	r2, r6, #1
   d471a:	4422      	add	r2, r4
   d471c:	68db      	ldr	r3, [r3, #12]
   d471e:	4798      	blx	r3
   d4720:	4605      	mov	r5, r0
   d4722:	f000 fb2b 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   d4726:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d4728:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   d472c:	4432      	add	r2, r6
   d472e:	b2a8      	uxth	r0, r5
}
   d4730:	1a13      	subs	r3, r2, r0
   d4732:	4258      	negs	r0, r3
   d4734:	4158      	adcs	r0, r3
   d4736:	b003      	add	sp, #12
   d4738:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d473a <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   d473a:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d473c:	b570      	push	{r4, r5, r6, lr}
    pos += 2;
   d473e:	b29b      	uxth	r3, r3
   d4740:	2400      	movs	r4, #0
    while (*idp) {
   d4742:	3901      	subs	r1, #1
   d4744:	1c65      	adds	r5, r4, #1
   d4746:	1918      	adds	r0, r3, r4
   d4748:	5d4e      	ldrb	r6, [r1, r5]
   d474a:	b280      	uxth	r0, r0
   d474c:	b116      	cbz	r6, d4754 <_ZN12PubSubClient11writeStringEPKcPht+0x1a>
        buf[pos++] = *idp++;
   d474e:	5416      	strb	r6, [r2, r0]
    while (*idp) {
   d4750:	462c      	mov	r4, r5
   d4752:	e7f7      	b.n	d4744 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   d4754:	b2a3      	uxth	r3, r4
   d4756:	1ac1      	subs	r1, r0, r3
   d4758:	440a      	add	r2, r1
   d475a:	121b      	asrs	r3, r3, #8
   d475c:	f802 3c02 	strb.w	r3, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4760:	f802 4c01 	strb.w	r4, [r2, #-1]
}
   d4764:	bd70      	pop	{r4, r5, r6, pc}

000d4766 <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   d4766:	b538      	push	{r3, r4, r5, lr}
   d4768:	4604      	mov	r4, r0
    if (_client == NULL ) {
   d476a:	6800      	ldr	r0, [r0, #0]
   d476c:	b908      	cbnz	r0, d4772 <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   d476e:	2000      	movs	r0, #0
}
   d4770:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   d4772:	6803      	ldr	r3, [r0, #0]
   d4774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4776:	4798      	blx	r3
        if (!rc) {
   d4778:	b980      	cbnz	r0, d479c <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   d477a:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   d477e:	2d00      	cmp	r5, #0
   d4780:	d1f5      	bne.n	d476e <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   d4782:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   d4784:	f06f 0302 	mvn.w	r3, #2
   d4788:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   d478c:	6803      	ldr	r3, [r0, #0]
   d478e:	69db      	ldr	r3, [r3, #28]
   d4790:	4798      	blx	r3
                _client->stop();
   d4792:	6820      	ldr	r0, [r4, #0]
   d4794:	6803      	ldr	r3, [r0, #0]
   d4796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4798:	4798      	blx	r3
   d479a:	e7e8      	b.n	d476e <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   d479c:	2001      	movs	r0, #1
   d479e:	e7e7      	b.n	d4770 <_ZN12PubSubClient9connectedEv+0xa>

000d47a0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   d47a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47a4:	b08b      	sub	sp, #44	; 0x2c
   d47a6:	4604      	mov	r4, r0
   d47a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   d47ac:	4689      	mov	r9, r1
   d47ae:	4617      	mov	r7, r2
   d47b0:	461e      	mov	r6, r3
    if (!connected()) {
   d47b2:	f7ff ffd8 	bl	d4766 <_ZN12PubSubClient9connectedEv>
   d47b6:	4605      	mov	r5, r0
   d47b8:	2800      	cmp	r0, #0
   d47ba:	f040 80a9 	bne.w	d4910 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
        if (domain != NULL) {
   d47be:	f8d4 a000 	ldr.w	sl, [r4]
   d47c2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
   d47c6:	f8da 3000 	ldr.w	r3, [sl]
   d47ca:	2900      	cmp	r1, #0
   d47cc:	d07d      	beq.n	d48ca <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x12a>
            result = _client->connect(this->domain, this->port);
   d47ce:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   d47d2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d47d6:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   d47d8:	4650      	mov	r0, sl
   d47da:	47d8      	blx	fp
        if (result == 1) {
   d47dc:	2801      	cmp	r0, #1
   d47de:	f040 809e 	bne.w	d491e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x17e>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   d47e2:	4b51      	ldr	r3, [pc, #324]	; (d4928 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x188>)
            nextMsgId = 1;
   d47e4:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   d47e8:	889a      	ldrh	r2, [r3, #4]
   d47ea:	6818      	ldr	r0, [r3, #0]
   d47ec:	799b      	ldrb	r3, [r3, #6]
   d47ee:	f8ad 2014 	strh.w	r2, [sp, #20]
   d47f2:	f88d 3016 	strb.w	r3, [sp, #22]
   d47f6:	9004      	str	r0, [sp, #16]
   d47f8:	ab04      	add	r3, sp, #16
   d47fa:	f104 0209 	add.w	r2, r4, #9
   d47fe:	f104 0110 	add.w	r1, r4, #16
                buffer[length++] = d[j];
   d4802:	f813 0b01 	ldrb.w	r0, [r3], #1
   d4806:	f802 0b01 	strb.w	r0, [r2], #1
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
   d480a:	428a      	cmp	r2, r1
   d480c:	d1f9      	bne.n	d4802 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x62>
            if (willTopic) {
   d480e:	f1b8 0f00 	cmp.w	r8, #0
   d4812:	d066      	beq.n	d48e2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x142>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4814:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   d4818:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   d481c:	015b      	lsls	r3, r3, #5
   d481e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   d4822:	f043 0306 	orr.w	r3, r3, #6
   d4826:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   d4828:	b11f      	cbz	r7, d4832 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x92>
                if(pass != NULL) {
   d482a:	2e00      	cmp	r6, #0
   d482c:	d15b      	bne.n	d48e6 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x146>
                v = v|0x80;
   d482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   d4832:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   d4834:	2300      	movs	r3, #0
   d4836:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   d4838:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   d483a:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   d483c:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   d483e:	4649      	mov	r1, r9
   d4840:	4620      	mov	r0, r4
   d4842:	9201      	str	r2, [sp, #4]
   d4844:	f7ff ff79 	bl	d473a <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   d4848:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   d484a:	4603      	mov	r3, r0
            if (willTopic) {
   d484c:	f1b8 0f00 	cmp.w	r8, #0
   d4850:	d00b      	beq.n	d486a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xca>
                length = writeString(willTopic,buffer,length);
   d4852:	4641      	mov	r1, r8
   d4854:	4620      	mov	r0, r4
   d4856:	f7ff ff70 	bl	d473a <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   d485a:	9a01      	ldr	r2, [sp, #4]
   d485c:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   d485e:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   d4860:	4620      	mov	r0, r4
   d4862:	f7ff ff6a 	bl	d473a <_ZN12PubSubClient11writeStringEPKcPht>
   d4866:	9a01      	ldr	r2, [sp, #4]
   d4868:	4603      	mov	r3, r0
            if(user != NULL) {
   d486a:	b16f      	cbz	r7, d4888 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe8>
                length = writeString(user,buffer,length);
   d486c:	4639      	mov	r1, r7
   d486e:	4620      	mov	r0, r4
   d4870:	9201      	str	r2, [sp, #4]
   d4872:	f7ff ff62 	bl	d473a <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   d4876:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   d4878:	4603      	mov	r3, r0
                if(pass != NULL) {
   d487a:	b12e      	cbz	r6, d4888 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe8>
                    length = writeString(pass,buffer,length);
   d487c:	4631      	mov	r1, r6
   d487e:	4620      	mov	r0, r4
   d4880:	f7ff ff5b 	bl	d473a <_ZN12PubSubClient11writeStringEPKcPht>
   d4884:	9a01      	ldr	r2, [sp, #4]
   d4886:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   d4888:	3b05      	subs	r3, #5
   d488a:	b29b      	uxth	r3, r3
   d488c:	2110      	movs	r1, #16
   d488e:	4620      	mov	r0, r4
   d4890:	f7ff ff13 	bl	d46ba <_ZN12PubSubClient5writeEhPht>
   d4894:	f000 fa72 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d4898:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   d489c:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   d48a0:	6820      	ldr	r0, [r4, #0]
   d48a2:	6803      	ldr	r3, [r0, #0]
   d48a4:	691b      	ldr	r3, [r3, #16]
   d48a6:	4798      	blx	r3
   d48a8:	bb00      	cbnz	r0, d48ec <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x14c>
   d48aa:	f000 fa67 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   d48ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d48b2:	1ac0      	subs	r0, r0, r3
   d48b4:	42b0      	cmp	r0, r6
   d48b6:	d9f3      	bls.n	d48a0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x100>
                    _state = MQTT_CONNECTION_TIMEOUT;
   d48b8:	f06f 0303 	mvn.w	r3, #3
   d48bc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   d48c0:	6820      	ldr	r0, [r4, #0]
   d48c2:	6803      	ldr	r3, [r0, #0]
   d48c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48c6:	4798      	blx	r3
   d48c8:	e022      	b.n	d4910 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
            result = _client->connect(this->ip, this->port);
   d48ca:	f104 0198 	add.w	r1, r4, #152	; 0x98
   d48ce:	a804      	add	r0, sp, #16
   d48d0:	f8d3 b020 	ldr.w	fp, [r3, #32]
   d48d4:	f7ff fe18 	bl	d4508 <_ZN9IPAddressC1ERKS_>
   d48d8:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   d48dc:	462b      	mov	r3, r5
   d48de:	a904      	add	r1, sp, #16
   d48e0:	e77a      	b.n	d47d8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   d48e2:	2302      	movs	r3, #2
   d48e4:	e7a0      	b.n	d4828 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x88>
                    v = v|(0x80>>1);
   d48e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   d48ea:	e7a2      	b.n	d4832 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x92>
            uint16_t len = readPacket(&llen);
   d48ec:	f10d 010f 	add.w	r1, sp, #15
   d48f0:	4620      	mov	r0, r4
   d48f2:	f7ff fe51 	bl	d4598 <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   d48f6:	2804      	cmp	r0, #4
   d48f8:	d1e2      	bne.n	d48c0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x120>
                if (buffer[3] == 0) {
   d48fa:	79e6      	ldrb	r6, [r4, #7]
   d48fc:	b966      	cbnz	r6, d4918 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x178>
   d48fe:	f000 fa3d 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d4902:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d4904:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   d4908:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   d490c:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   d4910:	4628      	mov	r0, r5
   d4912:	b00b      	add	sp, #44	; 0x2c
   d4914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   d4918:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   d491c:	e7d0      	b.n	d48c0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x120>
            _state = MQTT_CONNECT_FAILED;
   d491e:	f06f 0301 	mvn.w	r3, #1
   d4922:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   d4926:	e7f3      	b.n	d4910 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   d4928:	000d640c 	.word	0x000d640c

000d492c <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   d492c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   d492e:	2400      	movs	r4, #0
   d4930:	e9cd 4402 	strd	r4, r4, [sp, #8]
   d4934:	e9cd 4400 	strd	r4, r4, [sp]
   d4938:	f7ff ff32 	bl	d47a0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   d493c:	b004      	add	sp, #16
   d493e:	bd10      	pop	{r4, pc}

000d4940 <_ZN12PubSubClient4loopEv>:
boolean PubSubClient::loop() {
   d4940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4944:	b085      	sub	sp, #20
   d4946:	af00      	add	r7, sp, #0
   d4948:	4604      	mov	r4, r0
    if (connected()) {
   d494a:	f7ff ff0c 	bl	d4766 <_ZN12PubSubClient9connectedEv>
   d494e:	4606      	mov	r6, r0
   d4950:	b1d0      	cbz	r0, d4988 <_ZN12PubSubClient4loopEv+0x48>
   d4952:	f000 fa13 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   d4956:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d495a:	f643 2298 	movw	r2, #15000	; 0x3a98
   d495e:	1ac3      	subs	r3, r0, r3
   d4960:	4293      	cmp	r3, r2
   d4962:	4605      	mov	r5, r0
   d4964:	d804      	bhi.n	d4970 <_ZN12PubSubClient4loopEv+0x30>
   d4966:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   d496a:	1ac3      	subs	r3, r0, r3
   d496c:	4293      	cmp	r3, r2
   d496e:	d91d      	bls.n	d49ac <_ZN12PubSubClient4loopEv+0x6c>
            if (pingOutstanding) {
   d4970:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   d4974:	6820      	ldr	r0, [r4, #0]
   d4976:	b163      	cbz	r3, d4992 <_ZN12PubSubClient4loopEv+0x52>
                this->_state = MQTT_CONNECTION_TIMEOUT;
   d4978:	f06f 0303 	mvn.w	r3, #3
   d497c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->stop();
   d4980:	6803      	ldr	r3, [r0, #0]
   d4982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4984:	4798      	blx	r3
                return false;
   d4986:	2600      	movs	r6, #0
}
   d4988:	4630      	mov	r0, r6
   d498a:	3714      	adds	r7, #20
   d498c:	46bd      	mov	sp, r7
   d498e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d4992:	4621      	mov	r1, r4
   d4994:	23c0      	movs	r3, #192	; 0xc0
   d4996:	f821 3f04 	strh.w	r3, [r1, #4]!
                _client->write(buffer,2);
   d499a:	6803      	ldr	r3, [r0, #0]
   d499c:	2202      	movs	r2, #2
   d499e:	68db      	ldr	r3, [r3, #12]
   d49a0:	4798      	blx	r3
                lastInActivity = t;
   d49a2:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
                pingOutstanding = true;
   d49a6:	2301      	movs	r3, #1
   d49a8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        if (_client->available()) {
   d49ac:	6820      	ldr	r0, [r4, #0]
   d49ae:	6803      	ldr	r3, [r0, #0]
   d49b0:	691b      	ldr	r3, [r3, #16]
   d49b2:	4798      	blx	r3
   d49b4:	2800      	cmp	r0, #0
   d49b6:	d0e7      	beq.n	d4988 <_ZN12PubSubClient4loopEv+0x48>
            uint16_t len = readPacket(&llen);
   d49b8:	f107 010f 	add.w	r1, r7, #15
   d49bc:	4620      	mov	r0, r4
   d49be:	f7ff fdeb 	bl	d4598 <_ZN12PubSubClient10readPacketEPh>
            if (len > 0) {
   d49c2:	6078      	str	r0, [r7, #4]
   d49c4:	2800      	cmp	r0, #0
   d49c6:	d0df      	beq.n	d4988 <_ZN12PubSubClient4loopEv+0x48>
                uint8_t type = buffer[0]&0xF0;
   d49c8:	f894 a004 	ldrb.w	sl, [r4, #4]
                lastInActivity = t;
   d49cc:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
                uint8_t type = buffer[0]&0xF0;
   d49d0:	f00a 03f0 	and.w	r3, sl, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d49d4:	2b30      	cmp	r3, #48	; 0x30
   d49d6:	d15a      	bne.n	d4a8e <_ZN12PubSubClient4loopEv+0x14e>
                    if (callback) {
   d49d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   d49dc:	2b00      	cmp	r3, #0
   d49de:	d0d3      	beq.n	d4988 <_ZN12PubSubClient4loopEv+0x48>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d49e0:	f897 c00f 	ldrb.w	ip, [r7, #15]
   d49e4:	eb04 000c 	add.w	r0, r4, ip
                        }
   d49e8:	46e8      	mov	r8, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d49ea:	f890 e005 	ldrb.w	lr, [r0, #5]
   d49ee:	7981      	ldrb	r1, [r0, #6]
   d49f0:	eb01 210e 	add.w	r1, r1, lr, lsl #8
   d49f4:	b289      	uxth	r1, r1
                        char topic[tl+1];
   d49f6:	f101 0008 	add.w	r0, r1, #8
   d49fa:	08c0      	lsrs	r0, r0, #3
   d49fc:	eba8 02c0 	sub.w	r2, r8, r0, lsl #3
   d4a00:	4695      	mov	sp, r2
   d4a02:	f10c 0e07 	add.w	lr, ip, #7
   d4a06:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d4a08:	44a6      	add	lr, r4
   d4a0a:	46e9      	mov	r9, sp
   d4a0c:	eb0d 0b01 	add.w	fp, sp, r1
   d4a10:	45cb      	cmp	fp, r9
   d4a12:	d004      	beq.n	d4a1e <_ZN12PubSubClient4loopEv+0xde>
                            topic[i] = buffer[llen+3+i];
   d4a14:	f81e 2b01 	ldrb.w	r2, [lr], #1
   d4a18:	f809 2b01 	strb.w	r2, [r9], #1
                        for (uint16_t i=0;i<tl;i++) {
   d4a1c:	e7f8      	b.n	d4a10 <_ZN12PubSubClient4loopEv+0xd0>
                        topic[tl] = 0;
   d4a1e:	687a      	ldr	r2, [r7, #4]
   d4a20:	f04f 0e00 	mov.w	lr, #0
   d4a24:	f800 e001 	strb.w	lr, [r0, r1]
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   d4a28:	eba2 020c 	sub.w	r2, r2, ip
   d4a2c:	f00a 0e06 	and.w	lr, sl, #6
   d4a30:	3a03      	subs	r2, #3
   d4a32:	f1be 0f02 	cmp.w	lr, #2
   d4a36:	f104 0904 	add.w	r9, r4, #4
   d4a3a:	eba2 0201 	sub.w	r2, r2, r1
   d4a3e:	f10c 0e03 	add.w	lr, ip, #3
   d4a42:	d120      	bne.n	d4a86 <_ZN12PubSubClient4loopEv+0x146>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4a44:	448e      	add	lr, r1
   d4a46:	44a6      	add	lr, r4
                            payload = buffer+llen+3+tl+2;
   d4a48:	f10c 0c05 	add.w	ip, ip, #5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4a4c:	f89e b004 	ldrb.w	fp, [lr, #4]
   d4a50:	f89e a005 	ldrb.w	sl, [lr, #5]
                            payload = buffer+llen+3+tl+2;
   d4a54:	4461      	add	r1, ip
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4a56:	eb0a 2a0b 	add.w	sl, sl, fp, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d4a5a:	3a02      	subs	r2, #2
   d4a5c:	4449      	add	r1, r9
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4a5e:	fa1f fa8a 	uxth.w	sl, sl
                            callback(topic,payload,len-llen-3-tl-2);
   d4a62:	4798      	blx	r3
                            buffer[2] = (msgId >> 8);
   d4a64:	fa9a fa9a 	rev16.w	sl, sl
                            _client->write(buffer,4);
   d4a68:	6820      	ldr	r0, [r4, #0]
                            buffer[2] = (msgId >> 8);
   d4a6a:	f8a4 a006 	strh.w	sl, [r4, #6]
                            buffer[0] = MQTTPUBACK;
   d4a6e:	f44f 7310 	mov.w	r3, #576	; 0x240
   d4a72:	80a3      	strh	r3, [r4, #4]
                            _client->write(buffer,4);
   d4a74:	6803      	ldr	r3, [r0, #0]
   d4a76:	2204      	movs	r2, #4
   d4a78:	68db      	ldr	r3, [r3, #12]
   d4a7a:	4649      	mov	r1, r9
   d4a7c:	4798      	blx	r3
                            lastOutActivity = t;
   d4a7e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
   d4a82:	46c5      	mov	sp, r8
   d4a84:	e780      	b.n	d4988 <_ZN12PubSubClient4loopEv+0x48>
                            payload = buffer+llen+3+tl;
   d4a86:	4471      	add	r1, lr
                            callback(topic,payload,len-llen-3-tl);
   d4a88:	4449      	add	r1, r9
   d4a8a:	4798      	blx	r3
   d4a8c:	e7f9      	b.n	d4a82 <_ZN12PubSubClient4loopEv+0x142>
                } else if (type == MQTTPINGREQ) {
   d4a8e:	2bc0      	cmp	r3, #192	; 0xc0
   d4a90:	d109      	bne.n	d4aa6 <_ZN12PubSubClient4loopEv+0x166>
                    buffer[0] = MQTTPINGRESP;
   d4a92:	23d0      	movs	r3, #208	; 0xd0
                    _client->write(buffer,2);
   d4a94:	4621      	mov	r1, r4
                    buffer[0] = MQTTPINGRESP;
   d4a96:	80a3      	strh	r3, [r4, #4]
                    _client->write(buffer,2);
   d4a98:	f851 0b04 	ldr.w	r0, [r1], #4
   d4a9c:	6803      	ldr	r3, [r0, #0]
   d4a9e:	2202      	movs	r2, #2
   d4aa0:	68db      	ldr	r3, [r3, #12]
   d4aa2:	4798      	blx	r3
   d4aa4:	e770      	b.n	d4988 <_ZN12PubSubClient4loopEv+0x48>
                } else if (type == MQTTPINGRESP) {
   d4aa6:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
   d4aa8:	bf04      	itt	eq
   d4aaa:	2300      	moveq	r3, #0
   d4aac:	f884 3090 	strbeq.w	r3, [r4, #144]	; 0x90
   d4ab0:	e76a      	b.n	d4988 <_ZN12PubSubClient4loopEv+0x48>

000d4ab2 <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   d4ab2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4ab6:	4604      	mov	r4, r0
   d4ab8:	f89d 7020 	ldrb.w	r7, [sp, #32]
   d4abc:	4688      	mov	r8, r1
   d4abe:	4616      	mov	r6, r2
   d4ac0:	461d      	mov	r5, r3
    if (connected()) {
   d4ac2:	f7ff fe50 	bl	d4766 <_ZN12PubSubClient9connectedEv>
   d4ac6:	b338      	cbz	r0, d4b18 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   d4ac8:	4640      	mov	r0, r8
   d4aca:	f001 fba9 	bl	d6220 <strlen>
   d4ace:	1deb      	adds	r3, r5, #7
   d4ad0:	4418      	add	r0, r3
   d4ad2:	2880      	cmp	r0, #128	; 0x80
   d4ad4:	d820      	bhi.n	d4b18 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   d4ad6:	1d22      	adds	r2, r4, #4
   d4ad8:	2305      	movs	r3, #5
   d4ada:	4641      	mov	r1, r8
   d4adc:	4620      	mov	r0, r4
   d4ade:	9201      	str	r2, [sp, #4]
   d4ae0:	f7ff fe2b 	bl	d473a <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   d4ae4:	9a01      	ldr	r2, [sp, #4]
   d4ae6:	2300      	movs	r3, #0
   d4ae8:	18c1      	adds	r1, r0, r3
   d4aea:	429d      	cmp	r5, r3
   d4aec:	b289      	uxth	r1, r1
   d4aee:	d907      	bls.n	d4b00 <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   d4af0:	4421      	add	r1, r4
   d4af2:	f816 c003 	ldrb.w	ip, [r6, r3]
   d4af6:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   d4afa:	3301      	adds	r3, #1
   d4afc:	b29b      	uxth	r3, r3
   d4afe:	e7f3      	b.n	d4ae8 <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   d4b00:	1f4b      	subs	r3, r1, #5
            header |= 1;
   d4b02:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   d4b04:	b29b      	uxth	r3, r3
   d4b06:	bf0c      	ite	eq
   d4b08:	2130      	moveq	r1, #48	; 0x30
   d4b0a:	2131      	movne	r1, #49	; 0x31
   d4b0c:	4620      	mov	r0, r4
}
   d4b0e:	b002      	add	sp, #8
   d4b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   d4b14:	f7ff bdd1 	b.w	d46ba <_ZN12PubSubClient5writeEhPht>
}
   d4b18:	2000      	movs	r0, #0
   d4b1a:	b002      	add	sp, #8
   d4b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4b20 <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   d4b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4b22:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   d4b24:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   d4b26:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   d4b28:	9202      	str	r2, [sp, #8]
   d4b2a:	f001 fb79 	bl	d6220 <strlen>
   d4b2e:	4603      	mov	r3, r0
   d4b30:	2000      	movs	r0, #0
   d4b32:	9000      	str	r0, [sp, #0]
   d4b34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f7ff ffba 	bl	d4ab2 <_ZN12PubSubClient7publishEPKcPKhjb>
}
   d4b3e:	b004      	add	sp, #16
   d4b40:	bd10      	pop	{r4, pc}

000d4b42 <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   d4b42:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   d4b46:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   d4b4a:	4770      	bx	lr

000d4b4c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <HAL_USB_USART_Init+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	681b      	ldr	r3, [r3, #0]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	0003024c 	.word	0x0003024c

000d4b5c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <HAL_USB_USART_Begin+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	685b      	ldr	r3, [r3, #4]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	0003024c 	.word	0x0003024c

000d4b6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <HAL_USB_USART_Available_Data+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	691b      	ldr	r3, [r3, #16]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	0003024c 	.word	0x0003024c

000d4b7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	695b      	ldr	r3, [r3, #20]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	0003024c 	.word	0x0003024c

000d4b8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <HAL_USB_USART_Receive_Data+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	699b      	ldr	r3, [r3, #24]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003024c 	.word	0x0003024c

000d4b9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_USB_USART_Send_Data+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	69db      	ldr	r3, [r3, #28]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	0003024c 	.word	0x0003024c

000d4bac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_USB_USART_Flush_Data+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	6a1b      	ldr	r3, [r3, #32]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	0003024c 	.word	0x0003024c

000d4bbc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <hal_i2c_write+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	6a1b      	ldr	r3, [r3, #32]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030228 	.word	0x00030228

000d4bcc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <hal_i2c_available+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030228 	.word	0x00030228

000d4bdc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <hal_i2c_read+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030228 	.word	0x00030228

000d4bec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <hal_i2c_peek+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030228 	.word	0x00030228

000d4bfc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <hal_i2c_flush+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030228 	.word	0x00030228

000d4c0c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <hal_i2c_is_enabled+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030228 	.word	0x00030228

000d4c1c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <hal_i2c_init+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030228 	.word	0x00030228

000d4c2c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <hal_spi_init+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	69db      	ldr	r3, [r3, #28]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030230 	.word	0x00030230

000d4c3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <hal_spi_is_enabled+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6a1b      	ldr	r3, [r3, #32]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030230 	.word	0x00030230

000d4c4c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <sock_setsockopt+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	699b      	ldr	r3, [r3, #24]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030238 	.word	0x00030238

000d4c5c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <sock_close+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	69db      	ldr	r3, [r3, #28]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030238 	.word	0x00030238

000d4c6c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <sock_connect+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6a1b      	ldr	r3, [r3, #32]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030238 	.word	0x00030238

000d4c7c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <sock_recv+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030238 	.word	0x00030238

000d4c8c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <sock_send+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030238 	.word	0x00030238

000d4c9c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <sock_socket+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030238 	.word	0x00030238

000d4cac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <hal_usart_init+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	681b      	ldr	r3, [r3, #0]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003023c 	.word	0x0003023c

000d4cbc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <hal_usart_write+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	68db      	ldr	r3, [r3, #12]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	0003023c 	.word	0x0003023c

000d4ccc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <hal_usart_available+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	691b      	ldr	r3, [r3, #16]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	0003023c 	.word	0x0003023c

000d4cdc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <hal_usart_read+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	695b      	ldr	r3, [r3, #20]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	0003023c 	.word	0x0003023c

000d4cec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <hal_usart_peek+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	699b      	ldr	r3, [r3, #24]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	0003023c 	.word	0x0003023c

000d4cfc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <hal_usart_flush+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	69db      	ldr	r3, [r3, #28]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	0003023c 	.word	0x0003023c

000d4d0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <hal_usart_is_enabled+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6a1b      	ldr	r3, [r3, #32]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003023c 	.word	0x0003023c

000d4d1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <hal_usart_available_data_for_write+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003023c 	.word	0x0003023c

000d4d2c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <inet_inet_ntop+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	695b      	ldr	r3, [r3, #20]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030264 	.word	0x00030264

000d4d3c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <inet_htonl+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6a1b      	ldr	r3, [r3, #32]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030264 	.word	0x00030264

000d4d4c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <inet_htons+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030264 	.word	0x00030264

000d4d5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <os_mutex_recursive_create+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030248 	.word	0x00030248

000d4d6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_RNG_GetRandomNumber+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	685b      	ldr	r3, [r3, #4]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030218 	.word	0x00030218

000d4d7c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	695b      	ldr	r3, [r3, #20]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030218 	.word	0x00030218

000d4d8c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <if_index_to_name+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	695b      	ldr	r3, [r3, #20]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003026c 	.word	0x0003026c

000d4d9c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <HAL_Pin_Mode+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	689b      	ldr	r3, [r3, #8]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	0003022c 	.word	0x0003022c

000d4dac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <HAL_Get_Pin_Mode+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	68db      	ldr	r3, [r3, #12]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	0003022c 	.word	0x0003022c

000d4dbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <HAL_GPIO_Write+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	691b      	ldr	r3, [r3, #16]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	0003022c 	.word	0x0003022c

000d4dcc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <netdb_freeaddrinfo+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	689b      	ldr	r3, [r3, #8]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030268 	.word	0x00030268

000d4ddc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <netdb_getaddrinfo+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	68db      	ldr	r3, [r3, #12]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030268 	.word	0x00030268

000d4dec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <log_message+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030260 	.word	0x00030260

000d4dfc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030244 	.word	0x00030244

000d4e0c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <network_connect+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	685b      	ldr	r3, [r3, #4]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030240 	.word	0x00030240

000d4e1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <network_connecting+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	689b      	ldr	r3, [r3, #8]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030240 	.word	0x00030240

000d4e2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <network_disconnect+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	68db      	ldr	r3, [r3, #12]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030240 	.word	0x00030240

000d4e3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <network_ready+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	691b      	ldr	r3, [r3, #16]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030240 	.word	0x00030240

000d4e4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <network_on+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	695b      	ldr	r3, [r3, #20]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030240 	.word	0x00030240

000d4e5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <network_off+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	699b      	ldr	r3, [r3, #24]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030240 	.word	0x00030240

000d4e6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <network_listen+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	69db      	ldr	r3, [r3, #28]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030240 	.word	0x00030240

000d4e7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <network_listening+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	6a1b      	ldr	r3, [r3, #32]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030240 	.word	0x00030240

000d4e8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <network_set_listen_timeout+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030240 	.word	0x00030240

000d4e9c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <network_get_listen_timeout+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030240 	.word	0x00030240

000d4eac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <network_is_on+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030240 	.word	0x00030240

000d4ebc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <network_is_off+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030240 	.word	0x00030240

000d4ecc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <set_system_mode+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	685b      	ldr	r3, [r3, #4]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030220 	.word	0x00030220

000d4edc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <system_delay_ms+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	695b      	ldr	r3, [r3, #20]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030220 	.word	0x00030220

000d4eec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b03      	ldr	r3, [pc, #12]	; (d4efc <system_ctrl_set_app_request_handler+0x10>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ef6:	9301      	str	r3, [sp, #4]
   d4ef8:	bd08      	pop	{r3, pc}
   d4efa:	0000      	.short	0x0000
   d4efc:	00030220 	.word	0x00030220

000d4f00 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b03      	ldr	r3, [pc, #12]	; (d4f10 <system_ctrl_set_result+0x10>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f0a:	9301      	str	r3, [sp, #4]
   d4f0c:	bd08      	pop	{r3, pc}
   d4f0e:	0000      	.short	0x0000
   d4f10:	00030220 	.word	0x00030220

000d4f14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <malloc+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	681b      	ldr	r3, [r3, #0]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003021c 	.word	0x0003021c

000d4f24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <free+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	685b      	ldr	r3, [r3, #4]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003021c 	.word	0x0003021c

000d4f34 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <vsnprintf+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003021c 	.word	0x0003021c

000d4f44 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <__errno+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	0003021c 	.word	0x0003021c

000d4f54 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <newlib_impure_ptr_callback+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	0003021c 	.word	0x0003021c

000d4f64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f64:	2300      	movs	r3, #0
   d4f66:	6840      	ldr	r0, [r0, #4]
   d4f68:	461a      	mov	r2, r3
   d4f6a:	f7ff bf4f 	b.w	d4e0c <network_connect>

000d4f6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f6e:	6840      	ldr	r0, [r0, #4]
   d4f70:	2200      	movs	r2, #0
   d4f72:	2102      	movs	r1, #2
   d4f74:	f7ff bf5a 	b.w	d4e2c <network_disconnect>

000d4f78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4f78:	2200      	movs	r2, #0
   d4f7a:	6840      	ldr	r0, [r0, #4]
   d4f7c:	4611      	mov	r1, r2
   d4f7e:	f7ff bf4d 	b.w	d4e1c <network_connecting>

000d4f82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4f82:	2200      	movs	r2, #0
   d4f84:	6840      	ldr	r0, [r0, #4]
   d4f86:	4611      	mov	r1, r2
   d4f88:	f7ff bf58 	b.w	d4e3c <network_ready>

000d4f8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4f8c:	2300      	movs	r3, #0
   d4f8e:	6840      	ldr	r0, [r0, #4]
   d4f90:	461a      	mov	r2, r3
   d4f92:	4619      	mov	r1, r3
   d4f94:	f7ff bf5a 	b.w	d4e4c <network_on>

000d4f98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f98:	2300      	movs	r3, #0
   d4f9a:	6840      	ldr	r0, [r0, #4]
   d4f9c:	461a      	mov	r2, r3
   d4f9e:	4619      	mov	r1, r3
   d4fa0:	f7ff bf5c 	b.w	d4e5c <network_off>

000d4fa4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4fa4:	6840      	ldr	r0, [r0, #4]
   d4fa6:	2100      	movs	r1, #0
   d4fa8:	f7ff bf80 	b.w	d4eac <network_is_on>

000d4fac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4fac:	6840      	ldr	r0, [r0, #4]
   d4fae:	2100      	movs	r1, #0
   d4fb0:	f7ff bf84 	b.w	d4ebc <network_is_off>

000d4fb4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	2200      	movs	r2, #0
   d4fb8:	f081 0101 	eor.w	r1, r1, #1
   d4fbc:	f7ff bf56 	b.w	d4e6c <network_listen>

000d4fc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4fc0:	6840      	ldr	r0, [r0, #4]
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	f7ff bf62 	b.w	d4e8c <network_set_listen_timeout>

000d4fc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4fc8:	2200      	movs	r2, #0
   d4fca:	6840      	ldr	r0, [r0, #4]
   d4fcc:	4611      	mov	r1, r2
   d4fce:	f7ff bf65 	b.w	d4e9c <network_get_listen_timeout>

000d4fd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4fd2:	2200      	movs	r2, #0
   d4fd4:	6840      	ldr	r0, [r0, #4]
   d4fd6:	4611      	mov	r1, r2
   d4fd8:	f7ff bf50 	b.w	d4e7c <network_listening>

000d4fdc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4fe0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4fe2:	b095      	sub	sp, #84	; 0x54
   d4fe4:	4616      	mov	r6, r2
   d4fe6:	460d      	mov	r5, r1
   d4fe8:	4607      	mov	r7, r0
    IPAddress addr;
   d4fea:	f000 fd21 	bl	d5a30 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4fee:	4621      	mov	r1, r4
   d4ff0:	2218      	movs	r2, #24
   d4ff2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4ff4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4ff6:	f001 f8a9 	bl	d614c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4ffa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4ffc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5000:	4621      	mov	r1, r4
   d5002:	466b      	mov	r3, sp
   d5004:	aa0c      	add	r2, sp, #48	; 0x30
   d5006:	4630      	mov	r0, r6
   d5008:	f7ff fee8 	bl	d4ddc <netdb_getaddrinfo>
    if (!r) {
   d500c:	4604      	mov	r4, r0
   d500e:	2800      	cmp	r0, #0
   d5010:	d146      	bne.n	d50a0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5012:	4602      	mov	r2, r0
   d5014:	2101      	movs	r1, #1
   d5016:	6868      	ldr	r0, [r5, #4]
   d5018:	f7ff ff10 	bl	d4e3c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d501c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d501e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5020:	4622      	mov	r2, r4
   d5022:	6868      	ldr	r0, [r5, #4]
   d5024:	f7ff ff0a 	bl	d4e3c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5028:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d502a:	4681      	mov	r9, r0
        bool ok = false;
   d502c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d502e:	2e00      	cmp	r6, #0
   d5030:	d036      	beq.n	d50a0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5032:	2900      	cmp	r1, #0
   d5034:	d134      	bne.n	d50a0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5036:	6873      	ldr	r3, [r6, #4]
   d5038:	2b02      	cmp	r3, #2
   d503a:	d003      	beq.n	d5044 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d503c:	2b0a      	cmp	r3, #10
   d503e:	d00b      	beq.n	d5058 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5040:	69f6      	ldr	r6, [r6, #28]
   d5042:	e7f4      	b.n	d502e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5044:	f1b8 0f00 	cmp.w	r8, #0
   d5048:	d004      	beq.n	d5054 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d504a:	6971      	ldr	r1, [r6, #20]
   d504c:	4638      	mov	r0, r7
   d504e:	3104      	adds	r1, #4
   d5050:	f000 fd31 	bl	d5ab6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5054:	4641      	mov	r1, r8
   d5056:	e7f3      	b.n	d5040 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5058:	f1b9 0f00 	cmp.w	r9, #0
   d505c:	d101      	bne.n	d5062 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d505e:	4649      	mov	r1, r9
   d5060:	e7ee      	b.n	d5040 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5062:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5064:	2210      	movs	r2, #16
   d5066:	a801      	add	r0, sp, #4
   d5068:	f001 f870 	bl	d614c <memset>
                    a.v = 6;
   d506c:	2306      	movs	r3, #6
   d506e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5072:	ad01      	add	r5, sp, #4
   d5074:	f104 0308 	add.w	r3, r4, #8
   d5078:	3418      	adds	r4, #24
   d507a:	6818      	ldr	r0, [r3, #0]
   d507c:	6859      	ldr	r1, [r3, #4]
   d507e:	462a      	mov	r2, r5
   d5080:	c203      	stmia	r2!, {r0, r1}
   d5082:	3308      	adds	r3, #8
   d5084:	42a3      	cmp	r3, r4
   d5086:	4615      	mov	r5, r2
   d5088:	d1f7      	bne.n	d507a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d508a:	a901      	add	r1, sp, #4
   d508c:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d508e:	ad07      	add	r5, sp, #28
   d5090:	f000 fcdc 	bl	d5a4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5096:	1d3c      	adds	r4, r7, #4
   d5098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d509a:	682b      	ldr	r3, [r5, #0]
   d509c:	7023      	strb	r3, [r4, #0]
   d509e:	e7de      	b.n	d505e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50a0:	9800      	ldr	r0, [sp, #0]
   d50a2:	f7ff fe93 	bl	d4dcc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50a6:	4638      	mov	r0, r7
   d50a8:	b015      	add	sp, #84	; 0x54
   d50aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d50b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50b0:	4b02      	ldr	r3, [pc, #8]	; (d50bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50b2:	4a03      	ldr	r2, [pc, #12]	; (d50c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50b4:	601a      	str	r2, [r3, #0]
   d50b6:	2200      	movs	r2, #0
   d50b8:	605a      	str	r2, [r3, #4]

} // spark
   d50ba:	4770      	bx	lr
   d50bc:	2003e5a8 	.word	0x2003e5a8
   d50c0:	000d641c 	.word	0x000d641c

000d50c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d50c4:	2200      	movs	r2, #0
   d50c6:	6840      	ldr	r0, [r0, #4]
   d50c8:	4611      	mov	r1, r2
   d50ca:	f7ff beb7 	b.w	d4e3c <network_ready>

000d50ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50ce:	2200      	movs	r2, #0
   d50d0:	6840      	ldr	r0, [r0, #4]
   d50d2:	4611      	mov	r1, r2
   d50d4:	f7ff bed2 	b.w	d4e7c <network_listening>

000d50d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d50d8:	2200      	movs	r2, #0
   d50da:	6840      	ldr	r0, [r0, #4]
   d50dc:	4611      	mov	r1, r2
   d50de:	f7ff bedd 	b.w	d4e9c <network_get_listen_timeout>

000d50e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d50e2:	6840      	ldr	r0, [r0, #4]
   d50e4:	2200      	movs	r2, #0
   d50e6:	f7ff bed1 	b.w	d4e8c <network_set_listen_timeout>

000d50ea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d50ea:	6840      	ldr	r0, [r0, #4]
   d50ec:	2200      	movs	r2, #0
   d50ee:	f081 0101 	eor.w	r1, r1, #1
   d50f2:	f7ff bebb 	b.w	d4e6c <network_listen>

000d50f6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d50f6:	2300      	movs	r3, #0
   d50f8:	6840      	ldr	r0, [r0, #4]
   d50fa:	461a      	mov	r2, r3
   d50fc:	4619      	mov	r1, r3
   d50fe:	f7ff bead 	b.w	d4e5c <network_off>

000d5102 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5102:	2300      	movs	r3, #0
   d5104:	6840      	ldr	r0, [r0, #4]
   d5106:	461a      	mov	r2, r3
   d5108:	4619      	mov	r1, r3
   d510a:	f7ff be9f 	b.w	d4e4c <network_on>

000d510e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d510e:	2200      	movs	r2, #0
   d5110:	6840      	ldr	r0, [r0, #4]
   d5112:	4611      	mov	r1, r2
   d5114:	f7ff be82 	b.w	d4e1c <network_connecting>

000d5118 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5118:	6840      	ldr	r0, [r0, #4]
   d511a:	2200      	movs	r2, #0
   d511c:	2102      	movs	r1, #2
   d511e:	f7ff be85 	b.w	d4e2c <network_disconnect>

000d5122 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5122:	2300      	movs	r3, #0
   d5124:	6840      	ldr	r0, [r0, #4]
   d5126:	461a      	mov	r2, r3
   d5128:	f7ff be70 	b.w	d4e0c <network_connect>

000d512c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d512c:	4b02      	ldr	r3, [pc, #8]	; (d5138 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d512e:	2204      	movs	r2, #4
   d5130:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5132:	4a02      	ldr	r2, [pc, #8]	; (d513c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5134:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5136:	4770      	bx	lr
   d5138:	2003e5b0 	.word	0x2003e5b0
   d513c:	000d6458 	.word	0x000d6458

000d5140 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5140:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5142:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d5144:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5148:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d514a:	2201      	movs	r2, #1
   d514c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5150:	f10d 0107 	add.w	r1, sp, #7
   d5154:	47a0      	blx	r4
}
   d5156:	b002      	add	sp, #8
   d5158:	bd10      	pop	{r4, pc}

000d515a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d515a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d515c:	6803      	ldr	r3, [r0, #0]
   d515e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5164:	46a4      	mov	ip, r4
}
   d5166:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d516a:	4760      	bx	ip

000d516c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d516c:	b513      	push	{r0, r1, r4, lr}
   d516e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d5170:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5172:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d5176:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5178:	f10d 0107 	add.w	r1, sp, #7
   d517c:	2201      	movs	r2, #1
   d517e:	47a0      	blx	r4
}
   d5180:	b002      	add	sp, #8
   d5182:	bd10      	pop	{r4, pc}

000d5184 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d5184:	4770      	bx	lr

000d5186 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5186:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5188:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d518a:	681a      	ldr	r2, [r3, #0]
   d518c:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d518e:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d5190:	da10      	bge.n	d51b4 <_ZN9TCPClient9connectedEv+0x2e>
   d5192:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5196:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d519a:	429a      	cmp	r2, r3
   d519c:	d10a      	bne.n	d51b4 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d519e:	6803      	ldr	r3, [r0, #0]
   d51a0:	691b      	ldr	r3, [r3, #16]
   d51a2:	4798      	blx	r3
        if (!rv) {
   d51a4:	4604      	mov	r4, r0
   d51a6:	b928      	cbnz	r0, d51b4 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d51a8:	682b      	ldr	r3, [r5, #0]
   d51aa:	4628      	mov	r0, r5
   d51ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51ae:	4798      	blx	r3
        rv = available();
   d51b0:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d51b2:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d51b4:	2001      	movs	r0, #1
   d51b6:	e7fc      	b.n	d51b2 <_ZN9TCPClient9connectedEv+0x2c>

000d51b8 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d51b8:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d51ba:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d51bc:	43c0      	mvns	r0, r0
   d51be:	0fc0      	lsrs	r0, r0, #31
   d51c0:	4770      	bx	lr

000d51c2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d51c2:	4770      	bx	lr

000d51c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d51c4:	4b06      	ldr	r3, [pc, #24]	; (d51e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d51c6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d51c8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d51ca:	f100 040c 	add.w	r4, r0, #12
	    ||
   d51ce:	d005      	beq.n	d51dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d51d0:	4608      	mov	r0, r1
   d51d2:	f000 fe95 	bl	d5f00 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d51d6:	2800      	cmp	r0, #0
	return nullptr;
   d51d8:	bf08      	it	eq
   d51da:	2400      	moveq	r4, #0
      }
   d51dc:	4620      	mov	r0, r4
   d51de:	bd10      	pop	{r4, pc}
   d51e0:	000d64c0 	.word	0x000d64c0

000d51e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d51e4:	b510      	push	{r4, lr}
   d51e6:	21ac      	movs	r1, #172	; 0xac
   d51e8:	4604      	mov	r4, r0
   d51ea:	f000 fe85 	bl	d5ef8 <_ZdlPvj>
   d51ee:	4620      	mov	r0, r4
   d51f0:	bd10      	pop	{r4, pc}

000d51f2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d51f2:	f7fe bf52 	b.w	d409a <_ZdlPv>

000d51f6 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d51f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d51fa:	f04f 0800 	mov.w	r8, #0
   d51fe:	b086      	sub	sp, #24
   d5200:	461d      	mov	r5, r3
   d5202:	f8c0 8004 	str.w	r8, [r0, #4]
   d5206:	4604      	mov	r4, r0
   d5208:	460e      	mov	r6, r1
   d520a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d520c:	4641      	mov	r1, r8
   d520e:	2210      	movs	r2, #16
   d5210:	a802      	add	r0, sp, #8
   d5212:	f000 ff9b 	bl	d614c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5216:	1c6b      	adds	r3, r5, #1
   d5218:	d009      	beq.n	d522e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d521a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d521e:	fbb5 f3f0 	udiv	r3, r5, r0
   d5222:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5226:	fb00 5313 	mls	r3, r0, r3, r5
   d522a:	4358      	muls	r0, r3
   d522c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d522e:	6960      	ldr	r0, [r4, #20]
   d5230:	2310      	movs	r3, #16
   d5232:	9300      	str	r3, [sp, #0]
   d5234:	6800      	ldr	r0, [r0, #0]
   d5236:	ab02      	add	r3, sp, #8
   d5238:	f241 0205 	movw	r2, #4101	; 0x1005
   d523c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5240:	f7ff fd04 	bl	d4c4c <sock_setsockopt>
    if (ret < 0) {
   d5244:	2800      	cmp	r0, #0
   d5246:	da07      	bge.n	d5258 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d5248:	f7ff fe7c 	bl	d4f44 <__errno>
   d524c:	6803      	ldr	r3, [r0, #0]
   d524e:	6063      	str	r3, [r4, #4]
        return 0;
   d5250:	2000      	movs	r0, #0
}
   d5252:	b006      	add	sp, #24
   d5254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d5258:	6960      	ldr	r0, [r4, #20]
   d525a:	2300      	movs	r3, #0
   d525c:	6800      	ldr	r0, [r0, #0]
   d525e:	463a      	mov	r2, r7
   d5260:	4631      	mov	r1, r6
   d5262:	f7ff fd13 	bl	d4c8c <sock_send>
    if (ret < 0) {
   d5266:	1e03      	subs	r3, r0, #0
   d5268:	dbee      	blt.n	d5248 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d526a:	4618      	mov	r0, r3
   d526c:	e7f1      	b.n	d5252 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d5270 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5270:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5272:	6984      	ldr	r4, [r0, #24]
   d5274:	4b0a      	ldr	r3, [pc, #40]	; (d52a0 <_ZN9TCPClientD1Ev+0x30>)
   d5276:	6003      	str	r3, [r0, #0]
   d5278:	4605      	mov	r5, r0
   d527a:	b17c      	cbz	r4, d529c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d527c:	6863      	ldr	r3, [r4, #4]
   d527e:	3b01      	subs	r3, #1
   d5280:	6063      	str	r3, [r4, #4]
   d5282:	b95b      	cbnz	r3, d529c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5284:	6823      	ldr	r3, [r4, #0]
   d5286:	4620      	mov	r0, r4
   d5288:	689b      	ldr	r3, [r3, #8]
   d528a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d528c:	68a3      	ldr	r3, [r4, #8]
   d528e:	3b01      	subs	r3, #1
   d5290:	60a3      	str	r3, [r4, #8]
   d5292:	b91b      	cbnz	r3, d529c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5294:	6823      	ldr	r3, [r4, #0]
   d5296:	4620      	mov	r0, r4
   d5298:	68db      	ldr	r3, [r3, #12]
   d529a:	4798      	blx	r3
   d529c:	4628      	mov	r0, r5
   d529e:	bd38      	pop	{r3, r4, r5, pc}
   d52a0:	000d64d0 	.word	0x000d64d0

000d52a4 <_ZN9TCPClientD0Ev>:
   d52a4:	b510      	push	{r4, lr}
   d52a6:	4604      	mov	r4, r0
   d52a8:	f7ff ffe2 	bl	d5270 <_ZN9TCPClientD1Ev>
   d52ac:	4620      	mov	r0, r4
   d52ae:	211c      	movs	r1, #28
   d52b0:	f000 fe22 	bl	d5ef8 <_ZdlPvj>
   d52b4:	4620      	mov	r0, r4
   d52b6:	bd10      	pop	{r4, pc}

000d52b8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d52b8:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d52ba:	694d      	ldr	r5, [r1, #20]
   d52bc:	4b05      	ldr	r3, [pc, #20]	; (d52d4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d52be:	4604      	mov	r4, r0
   d52c0:	358c      	adds	r5, #140	; 0x8c
   d52c2:	f844 3b04 	str.w	r3, [r4], #4
   d52c6:	4606      	mov	r6, r0
   d52c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d52ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d52cc:	682b      	ldr	r3, [r5, #0]
   d52ce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d52d0:	4630      	mov	r0, r6
   d52d2:	bd70      	pop	{r4, r5, r6, pc}
   d52d4:	000d65a4 	.word	0x000d65a4

000d52d8 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d52d8:	b510      	push	{r4, lr}
   d52da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d52dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d52e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d52e4:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d52e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d52e8:	d005      	beq.n	d52f6 <_ZN9TCPClient4peekEv+0x1e>
   d52ea:	6963      	ldr	r3, [r4, #20]
   d52ec:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d52f0:	4413      	add	r3, r2
   d52f2:	7918      	ldrb	r0, [r3, #4]
}
   d52f4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d52f6:	6803      	ldr	r3, [r0, #0]
   d52f8:	691b      	ldr	r3, [r3, #16]
   d52fa:	4798      	blx	r3
   d52fc:	2800      	cmp	r0, #0
   d52fe:	d1f4      	bne.n	d52ea <_ZN9TCPClient4peekEv+0x12>
   d5300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5304:	e7f6      	b.n	d52f4 <_ZN9TCPClient4peekEv+0x1c>

000d5306 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d5306:	b510      	push	{r4, lr}
   d5308:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d530a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d530e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5312:	429a      	cmp	r2, r3
int TCPClient::read() {
   d5314:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5316:	d008      	beq.n	d532a <_ZN9TCPClient4readEv+0x24>
   d5318:	6963      	ldr	r3, [r4, #20]
   d531a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d531e:	1c51      	adds	r1, r2, #1
   d5320:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d5324:	4413      	add	r3, r2
   d5326:	7918      	ldrb	r0, [r3, #4]
}
   d5328:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d532a:	6803      	ldr	r3, [r0, #0]
   d532c:	691b      	ldr	r3, [r3, #16]
   d532e:	4798      	blx	r3
   d5330:	2800      	cmp	r0, #0
   d5332:	d1f1      	bne.n	d5318 <_ZN9TCPClient4readEv+0x12>
   d5334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5338:	e7f6      	b.n	d5328 <_ZN9TCPClient4readEv+0x22>

000d533a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d533a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d533c:	6943      	ldr	r3, [r0, #20]
   d533e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d5340:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5344:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5348:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d534a:	4605      	mov	r5, r0
   d534c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d534e:	d016      	beq.n	d537e <_ZN9TCPClient4readEPhj+0x44>
   d5350:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d5352:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5356:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d535a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d535c:	42bc      	cmp	r4, r7
   d535e:	bf28      	it	cs
   d5360:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5362:	3304      	adds	r3, #4
   d5364:	4622      	mov	r2, r4
   d5366:	4419      	add	r1, r3
   d5368:	4630      	mov	r0, r6
   d536a:	f000 fee1 	bl	d6130 <memcpy>
   d536e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5370:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5374:	4423      	add	r3, r4
   d5376:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d537a:	4620      	mov	r0, r4
   d537c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d537e:	6803      	ldr	r3, [r0, #0]
   d5380:	691b      	ldr	r3, [r3, #16]
   d5382:	4798      	blx	r3
   d5384:	2800      	cmp	r0, #0
   d5386:	d1e3      	bne.n	d5350 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d5388:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d538c:	e7f5      	b.n	d537a <_ZN9TCPClient4readEPhj+0x40>
	...

000d5390 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5394:	4698      	mov	r8, r3
    stop();
   d5396:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5398:	b093      	sub	sp, #76	; 0x4c
   d539a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d539c:	2400      	movs	r4, #0
    stop();
   d539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d53a0:	4606      	mov	r6, r0
   d53a2:	4617      	mov	r7, r2
    stop();
   d53a4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d53a6:	4628      	mov	r0, r5
   d53a8:	466b      	mov	r3, sp
   d53aa:	4622      	mov	r2, r4
   d53ac:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d53ae:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d53b0:	f7ff fd14 	bl	d4ddc <netdb_getaddrinfo>
   d53b4:	4605      	mov	r5, r0
   d53b6:	2800      	cmp	r0, #0
   d53b8:	d163      	bne.n	d5482 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d53ba:	9b00      	ldr	r3, [sp, #0]
   d53bc:	2b00      	cmp	r3, #0
   d53be:	d04b      	beq.n	d5458 <_ZN9TCPClient7connectEPKctm+0xc8>
   d53c0:	695b      	ldr	r3, [r3, #20]
   d53c2:	2b00      	cmp	r3, #0
   d53c4:	d048      	beq.n	d5458 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d53c6:	a806      	add	r0, sp, #24
   d53c8:	f000 fb32 	bl	d5a30 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d53cc:	9b00      	ldr	r3, [sp, #0]
   d53ce:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d53d0:	7863      	ldrb	r3, [r4, #1]
   d53d2:	2b02      	cmp	r3, #2
   d53d4:	d104      	bne.n	d53e0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d53d6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d53d8:	a806      	add	r0, sp, #24
   d53da:	f000 fb6c 	bl	d5ab6 <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d53de:	e026      	b.n	d542e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d53e0:	2b0a      	cmp	r3, #10
   d53e2:	d124      	bne.n	d542e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d53e4:	2211      	movs	r2, #17
   d53e6:	4629      	mov	r1, r5
   d53e8:	a801      	add	r0, sp, #4
   d53ea:	f000 feaf 	bl	d614c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d53ee:	68a3      	ldr	r3, [r4, #8]
   d53f0:	2b00      	cmp	r3, #0
   d53f2:	d038      	beq.n	d5466 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d53f4:	f104 0308 	add.w	r3, r4, #8
   d53f8:	f10d 0c04 	add.w	ip, sp, #4
   d53fc:	3418      	adds	r4, #24
   d53fe:	6818      	ldr	r0, [r3, #0]
   d5400:	6859      	ldr	r1, [r3, #4]
   d5402:	4662      	mov	r2, ip
   d5404:	c203      	stmia	r2!, {r0, r1}
   d5406:	3308      	adds	r3, #8
   d5408:	42a3      	cmp	r3, r4
   d540a:	4694      	mov	ip, r2
   d540c:	d1f7      	bne.n	d53fe <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d540e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5410:	a901      	add	r1, sp, #4
   d5412:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d5414:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5418:	f000 fb18 	bl	d5a4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d541c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d5420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5424:	ac07      	add	r4, sp, #28
   d5426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5428:	f8dc 3000 	ldr.w	r3, [ip]
   d542c:	7023      	strb	r3, [r4, #0]
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d542e:	a806      	add	r0, sp, #24
   d5430:	f000 fb1e 	bl	d5a70 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5434:	b180      	cbz	r0, d5458 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d5436:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d5438:	ad07      	add	r5, sp, #28
   d543a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d543e:	4b12      	ldr	r3, [pc, #72]	; (d5488 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d5440:	930c      	str	r3, [sp, #48]	; 0x30
   d5442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5444:	ac0d      	add	r4, sp, #52	; 0x34
   d5446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5448:	682b      	ldr	r3, [r5, #0]
   d544a:	7023      	strb	r3, [r4, #0]
   d544c:	463a      	mov	r2, r7
   d544e:	4643      	mov	r3, r8
   d5450:	a90c      	add	r1, sp, #48	; 0x30
   d5452:	4630      	mov	r0, r6
   d5454:	47c8      	blx	r9
   d5456:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d5458:	9800      	ldr	r0, [sp, #0]
   d545a:	f7ff fcb7 	bl	d4dcc <netdb_freeaddrinfo>
}
   d545e:	4628      	mov	r0, r5
   d5460:	b013      	add	sp, #76	; 0x4c
   d5462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5466:	68e3      	ldr	r3, [r4, #12]
   d5468:	2b00      	cmp	r3, #0
   d546a:	d1c3      	bne.n	d53f4 <_ZN9TCPClient7connectEPKctm+0x64>
   d546c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5470:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d5474:	f7ff fc62 	bl	d4d3c <inet_htonl>
   d5478:	4581      	cmp	r9, r0
   d547a:	d1bb      	bne.n	d53f4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d547c:	f104 0114 	add.w	r1, r4, #20
   d5480:	e7aa      	b.n	d53d8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5482:	4625      	mov	r5, r4
   d5484:	e7e8      	b.n	d5458 <_ZN9TCPClient7connectEPKctm+0xc8>
   d5486:	bf00      	nop
   d5488:	000d65a4 	.word	0x000d65a4

000d548c <_ZN9TCPClient12flush_bufferEv>:
   d548c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d548e:	2300      	movs	r3, #0
   d5490:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5494:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5496:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d549a:	4770      	bx	lr

000d549c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d54a0:	461f      	mov	r7, r3
    stop();
   d54a2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d54a4:	460c      	mov	r4, r1
    stop();
   d54a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d54a8:	b08a      	sub	sp, #40	; 0x28
   d54aa:	4605      	mov	r5, r0
   d54ac:	4616      	mov	r6, r2
    stop();
   d54ae:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d54b0:	7d23      	ldrb	r3, [r4, #20]
   d54b2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d54b6:	2b04      	cmp	r3, #4
   d54b8:	bf0c      	ite	eq
   d54ba:	2002      	moveq	r0, #2
   d54bc:	200a      	movne	r0, #10
   d54be:	2206      	movs	r2, #6
   d54c0:	2101      	movs	r1, #1
   d54c2:	f7ff fbeb 	bl	d4c9c <sock_socket>
   d54c6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d54ca:	696b      	ldr	r3, [r5, #20]
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	2b00      	cmp	r3, #0
   d54d0:	da08      	bge.n	d54e4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d54d2:	682b      	ldr	r3, [r5, #0]
   d54d4:	4628      	mov	r0, r5
   d54d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d54d8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d54da:	4798      	blx	r3
}
   d54dc:	4620      	mov	r0, r4
   d54de:	b00a      	add	sp, #40	; 0x28
   d54e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d54e4:	4628      	mov	r0, r5
   d54e6:	f7ff ffd1 	bl	d548c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d54ea:	b1b7      	cbz	r7, d551a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d54ec:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d54ee:	a903      	add	r1, sp, #12
   d54f0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d54f2:	9303      	str	r3, [sp, #12]
   d54f4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d54f8:	f7ff fc48 	bl	d4d8c <if_index_to_name>
   d54fc:	2800      	cmp	r0, #0
   d54fe:	d1e8      	bne.n	d54d2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5500:	6968      	ldr	r0, [r5, #20]
   d5502:	2306      	movs	r3, #6
   d5504:	9300      	str	r3, [sp, #0]
   d5506:	6800      	ldr	r0, [r0, #0]
   d5508:	ab03      	add	r3, sp, #12
   d550a:	f241 020b 	movw	r2, #4107	; 0x100b
   d550e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5512:	f7ff fb9b 	bl	d4c4c <sock_setsockopt>
   d5516:	2800      	cmp	r0, #0
   d5518:	d1db      	bne.n	d54d2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d551a:	221c      	movs	r2, #28
   d551c:	2100      	movs	r1, #0
   d551e:	a803      	add	r0, sp, #12
   d5520:	f000 fe14 	bl	d614c <memset>
    if (ip.version() == 4) {
   d5524:	7d23      	ldrb	r3, [r4, #20]
   d5526:	2b04      	cmp	r3, #4
   d5528:	d11d      	bne.n	d5566 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d552a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d552e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5530:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5534:	f7ff fc0a 	bl	d4d4c <inet_htons>
   d5538:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d553c:	6860      	ldr	r0, [r4, #4]
   d553e:	f7ff fbfd 	bl	d4d3c <inet_htonl>
   d5542:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5544:	696b      	ldr	r3, [r5, #20]
   d5546:	221c      	movs	r2, #28
   d5548:	6818      	ldr	r0, [r3, #0]
   d554a:	a903      	add	r1, sp, #12
   d554c:	f7ff fb8e 	bl	d4c6c <sock_connect>
   d5550:	2800      	cmp	r0, #0
   d5552:	d1be      	bne.n	d54d2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d5554:	3404      	adds	r4, #4
   d5556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5558:	696d      	ldr	r5, [r5, #20]
   d555a:	358c      	adds	r5, #140	; 0x8c
   d555c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d555e:	6823      	ldr	r3, [r4, #0]
   d5560:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d5562:	2401      	movs	r4, #1
   d5564:	e7ba      	b.n	d54dc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d5566:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d556a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d556c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d5570:	f7ff fbec 	bl	d4d4c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5574:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d5576:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d557a:	1d23      	adds	r3, r4, #4
   d557c:	f104 0714 	add.w	r7, r4, #20
   d5580:	6818      	ldr	r0, [r3, #0]
   d5582:	6859      	ldr	r1, [r3, #4]
   d5584:	4632      	mov	r2, r6
   d5586:	c203      	stmia	r2!, {r0, r1}
   d5588:	3308      	adds	r3, #8
   d558a:	42bb      	cmp	r3, r7
   d558c:	4616      	mov	r6, r2
   d558e:	d1f7      	bne.n	d5580 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d5590:	e7d8      	b.n	d5544 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d5594 <_ZN9TCPClient9availableEv>:
{
   d5594:	b530      	push	{r4, r5, lr}
   d5596:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d5598:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d559c:	b08b      	sub	sp, #44	; 0x2c
   d559e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d55a0:	b12b      	cbz	r3, d55ae <_ZN9TCPClient9availableEv+0x1a>
   d55a2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d55a6:	429a      	cmp	r2, r3
   d55a8:	d101      	bne.n	d55ae <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d55aa:	f7ff ff6f 	bl	d548c <_ZN9TCPClient12flush_bufferEv>
   d55ae:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d55b0:	6808      	ldr	r0, [r1, #0]
   d55b2:	2800      	cmp	r0, #0
   d55b4:	db18      	blt.n	d55e8 <_ZN9TCPClient9availableEv+0x54>
   d55b6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d55ba:	2d7f      	cmp	r5, #127	; 0x7f
   d55bc:	d814      	bhi.n	d55e8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d55be:	3104      	adds	r1, #4
   d55c0:	2308      	movs	r3, #8
   d55c2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d55c6:	4429      	add	r1, r5
   d55c8:	f7ff fb58 	bl	d4c7c <sock_recv>
            if (ret > 0) {
   d55cc:	2800      	cmp	r0, #0
   d55ce:	dd13      	ble.n	d55f8 <_ZN9TCPClient9availableEv+0x64>
   d55d0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d55d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d55d6:	b90a      	cbnz	r2, d55dc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d55d8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d55dc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d55de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d55e2:	4410      	add	r0, r2
   d55e4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d55e8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d55ea:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d55ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d55f2:	1ac0      	subs	r0, r0, r3
   d55f4:	b00b      	add	sp, #44	; 0x2c
   d55f6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d55f8:	f7ff fca4 	bl	d4f44 <__errno>
   d55fc:	6803      	ldr	r3, [r0, #0]
   d55fe:	2b0b      	cmp	r3, #11
   d5600:	d0f2      	beq.n	d55e8 <_ZN9TCPClient9availableEv+0x54>
   d5602:	f7ff fc9f 	bl	d4f44 <__errno>
   d5606:	6803      	ldr	r3, [r0, #0]
   d5608:	2b0b      	cmp	r3, #11
   d560a:	d0ed      	beq.n	d55e8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d560c:	2320      	movs	r3, #32
   d560e:	2500      	movs	r5, #0
   d5610:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d5614:	f7ff fc96 	bl	d4f44 <__errno>
   d5618:	6803      	ldr	r3, [r0, #0]
   d561a:	9301      	str	r3, [sp, #4]
   d561c:	4b08      	ldr	r3, [pc, #32]	; (d5640 <_ZN9TCPClient9availableEv+0xac>)
   d561e:	4909      	ldr	r1, [pc, #36]	; (d5644 <_ZN9TCPClient9availableEv+0xb0>)
   d5620:	9300      	str	r3, [sp, #0]
   d5622:	aa02      	add	r2, sp, #8
   d5624:	462b      	mov	r3, r5
   d5626:	2032      	movs	r0, #50	; 0x32
   d5628:	f7ff fbe0 	bl	d4dec <log_message>
                    sock_close(d_->sock);
   d562c:	6963      	ldr	r3, [r4, #20]
   d562e:	6818      	ldr	r0, [r3, #0]
   d5630:	f7ff fb14 	bl	d4c5c <sock_close>
   d5634:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d563a:	601a      	str	r2, [r3, #0]
   d563c:	e7d4      	b.n	d55e8 <_ZN9TCPClient9availableEv+0x54>
   d563e:	bf00      	nop
   d5640:	000d6493 	.word	0x000d6493
   d5644:	000d648c 	.word	0x000d648c

000d5648 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d5648:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d564a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d564c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d564e:	6818      	ldr	r0, [r3, #0]
   d5650:	2800      	cmp	r0, #0
   d5652:	db01      	blt.n	d5658 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5654:	f7ff fb02 	bl	d4c5c <sock_close>
   d5658:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d565a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d565e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5660:	6960      	ldr	r0, [r4, #20]
   d5662:	2211      	movs	r2, #17
   d5664:	2100      	movs	r1, #0
   d5666:	308c      	adds	r0, #140	; 0x8c
   d5668:	f000 fd70 	bl	d614c <memset>
    flush_buffer();
   d566c:	4620      	mov	r0, r4
}
   d566e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d5672:	f7ff bf0b 	b.w	d548c <_ZN9TCPClient12flush_bufferEv>

000d5676 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d5676:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5678:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d567a:	4604      	mov	r4, r0
          total(0) {
   d567c:	6001      	str	r1, [r0, #0]
   d567e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d5682:	3088      	adds	r0, #136	; 0x88
   d5684:	f000 f9d4 	bl	d5a30 <_ZN9IPAddressC1Ev>
}
   d5688:	4620      	mov	r0, r4
   d568a:	bd10      	pop	{r4, pc}

000d568c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d568c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d568e:	2300      	movs	r3, #0
   d5690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5694:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d5698:	4a0e      	ldr	r2, [pc, #56]	; (d56d4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d569a:	6103      	str	r3, [r0, #16]
   d569c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d569e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d56a0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d56a2:	20ac      	movs	r0, #172	; 0xac
   d56a4:	9101      	str	r1, [sp, #4]
   d56a6:	f7fe fcf4 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d56aa:	1e05      	subs	r5, r0, #0
   d56ac:	f105 060c 	add.w	r6, r5, #12
   d56b0:	d008      	beq.n	d56c4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d56b2:	2301      	movs	r3, #1
   d56b4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d56b8:	4b07      	ldr	r3, [pc, #28]	; (d56d8 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d56ba:	9901      	ldr	r1, [sp, #4]
   d56bc:	602b      	str	r3, [r5, #0]
   d56be:	4630      	mov	r0, r6
   d56c0:	f7ff ffd9 	bl	d5676 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d56c4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d56c6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d56ca:	f7ff fedf 	bl	d548c <_ZN9TCPClient12flush_bufferEv>
}
   d56ce:	b002      	add	sp, #8
   d56d0:	bd70      	pop	{r4, r5, r6, pc}
   d56d2:	bf00      	nop
   d56d4:	000d64d0 	.word	0x000d64d0
   d56d8:	000d64ac 	.word	0x000d64ac

000d56dc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d56dc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d56de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d56e2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d56e4:	f7ff ffd2 	bl	d568c <_ZN9TCPClientC1Ei>
}
   d56e8:	4620      	mov	r0, r4
   d56ea:	bd10      	pop	{r4, pc}

000d56ec <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d56ec:	b510      	push	{r4, lr}
   d56ee:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d56f0:	6800      	ldr	r0, [r0, #0]
   d56f2:	2800      	cmp	r0, #0
   d56f4:	db01      	blt.n	d56fa <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d56f6:	f7ff fab1 	bl	d4c5c <sock_close>
    }
}
   d56fa:	4620      	mov	r0, r4
   d56fc:	bd10      	pop	{r4, pc}

000d56fe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d56fe:	300c      	adds	r0, #12
   d5700:	f7ff bff4 	b.w	d56ec <_ZN9TCPClient4DataD1Ev>

000d5704 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5704:	b510      	push	{r4, lr}
   d5706:	4604      	mov	r4, r0
   d5708:	4608      	mov	r0, r1
{
    _spi = spi;
   d570a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d570c:	f7ff fa8e 	bl	d4c2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5710:	2300      	movs	r3, #0
   d5712:	6063      	str	r3, [r4, #4]
}
   d5714:	4620      	mov	r0, r4
   d5716:	bd10      	pop	{r4, pc}

000d5718 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5718:	b510      	push	{r4, lr}
  if (0 == max) {
   d571a:	4604      	mov	r4, r0
   d571c:	b128      	cbz	r0, d572a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d571e:	f000 fd41 	bl	d61a4 <rand>
   d5722:	fb90 f3f4 	sdiv	r3, r0, r4
   d5726:	fb03 0414 	mls	r4, r3, r4, r0
}
   d572a:	4620      	mov	r0, r4
   d572c:	bd10      	pop	{r4, pc}

000d572e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d572e:	4288      	cmp	r0, r1
{
   d5730:	b510      	push	{r4, lr}
   d5732:	4604      	mov	r4, r0
  if (min >= max) {
   d5734:	da03      	bge.n	d573e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d5736:	1a08      	subs	r0, r1, r0
   d5738:	f7ff ffee 	bl	d5718 <_Z6randomi>
   d573c:	4404      	add	r4, r0
}
   d573e:	4620      	mov	r0, r4
   d5740:	bd10      	pop	{r4, pc}

000d5742 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5742:	4770      	bx	lr

000d5744 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5746:	4606      	mov	r6, r0
   d5748:	4615      	mov	r5, r2
   d574a:	460c      	mov	r4, r1
   d574c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d574e:	42bc      	cmp	r4, r7
   d5750:	d006      	beq.n	d5760 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5752:	6833      	ldr	r3, [r6, #0]
   d5754:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5758:	689b      	ldr	r3, [r3, #8]
   d575a:	4630      	mov	r0, r6
   d575c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d575e:	e7f6      	b.n	d574e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5760:	4628      	mov	r0, r5
   d5762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5764 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5764:	7c00      	ldrb	r0, [r0, #16]
   d5766:	2200      	movs	r2, #0
   d5768:	f7ff ba28 	b.w	d4bbc <hal_i2c_write>

000d576c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d576c:	7c00      	ldrb	r0, [r0, #16]
   d576e:	2100      	movs	r1, #0
   d5770:	f7ff ba2c 	b.w	d4bcc <hal_i2c_available>

000d5774 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5774:	7c00      	ldrb	r0, [r0, #16]
   d5776:	2100      	movs	r1, #0
   d5778:	f7ff ba30 	b.w	d4bdc <hal_i2c_read>

000d577c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d577c:	7c00      	ldrb	r0, [r0, #16]
   d577e:	2100      	movs	r1, #0
   d5780:	f7ff ba34 	b.w	d4bec <hal_i2c_peek>

000d5784 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5784:	7c00      	ldrb	r0, [r0, #16]
   d5786:	2100      	movs	r1, #0
   d5788:	f7ff ba38 	b.w	d4bfc <hal_i2c_flush>

000d578c <_ZN7TwoWireD0Ev>:
   d578c:	b510      	push	{r4, lr}
   d578e:	2114      	movs	r1, #20
   d5790:	4604      	mov	r4, r0
   d5792:	f000 fbb1 	bl	d5ef8 <_ZdlPvj>
   d5796:	4620      	mov	r0, r4
   d5798:	bd10      	pop	{r4, pc}
	...

000d579c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d579c:	b510      	push	{r4, lr}
   d579e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57a2:	4604      	mov	r4, r0
   d57a4:	4608      	mov	r0, r1
   d57a6:	2100      	movs	r1, #0
   d57a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d57ac:	4b03      	ldr	r3, [pc, #12]	; (d57bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d57ae:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d57b0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d57b2:	4611      	mov	r1, r2
   d57b4:	f7ff fa32 	bl	d4c1c <hal_i2c_init>
}
   d57b8:	4620      	mov	r0, r4
   d57ba:	bd10      	pop	{r4, pc}
   d57bc:	000d651c 	.word	0x000d651c

000d57c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d57c0:	4770      	bx	lr

000d57c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57c2:	7441      	strb	r1, [r0, #17]
}
   d57c4:	4770      	bx	lr

000d57c6 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d57c6:	4770      	bx	lr

000d57c8 <_ZN11USARTSerial17availableForWriteEv>:
{
   d57c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d57ca:	7c00      	ldrb	r0, [r0, #16]
   d57cc:	f7ff faa6 	bl	d4d1c <hal_usart_available_data_for_write>
}
   d57d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57d4:	bd08      	pop	{r3, pc}

000d57d6 <_ZN11USARTSerial9availableEv>:
{
   d57d6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d57d8:	7c00      	ldrb	r0, [r0, #16]
   d57da:	f7ff fa77 	bl	d4ccc <hal_usart_available>
}
   d57de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57e2:	bd08      	pop	{r3, pc}

000d57e4 <_ZN11USARTSerial4peekEv>:
{
   d57e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d57e6:	7c00      	ldrb	r0, [r0, #16]
   d57e8:	f7ff fa80 	bl	d4cec <hal_usart_peek>
}
   d57ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d57f0:	bd08      	pop	{r3, pc}

000d57f2 <_ZN11USARTSerial4readEv>:
{
   d57f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d57f4:	7c00      	ldrb	r0, [r0, #16]
   d57f6:	f7ff fa71 	bl	d4cdc <hal_usart_read>
}
   d57fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d57fe:	bd08      	pop	{r3, pc}

000d5800 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5800:	7c00      	ldrb	r0, [r0, #16]
   d5802:	f7ff ba7b 	b.w	d4cfc <hal_usart_flush>

000d5806 <_ZN11USARTSerial5writeEh>:
{
   d5806:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5808:	7c45      	ldrb	r5, [r0, #17]
{
   d580a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d580c:	b12d      	cbz	r5, d581a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d580e:	7c20      	ldrb	r0, [r4, #16]
}
   d5810:	b003      	add	sp, #12
   d5812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5816:	f7ff ba51 	b.w	d4cbc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d581a:	7c00      	ldrb	r0, [r0, #16]
   d581c:	9101      	str	r1, [sp, #4]
   d581e:	f7ff fa7d 	bl	d4d1c <hal_usart_available_data_for_write>
   d5822:	2800      	cmp	r0, #0
   d5824:	9901      	ldr	r1, [sp, #4]
   d5826:	dcf2      	bgt.n	d580e <_ZN11USARTSerial5writeEh+0x8>
}
   d5828:	4628      	mov	r0, r5
   d582a:	b003      	add	sp, #12
   d582c:	bd30      	pop	{r4, r5, pc}

000d582e <_ZN11USARTSerialD0Ev>:
   d582e:	b510      	push	{r4, lr}
   d5830:	2114      	movs	r1, #20
   d5832:	4604      	mov	r4, r0
   d5834:	f000 fb60 	bl	d5ef8 <_ZdlPvj>
   d5838:	4620      	mov	r0, r4
   d583a:	bd10      	pop	{r4, pc}

000d583c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d583c:	b510      	push	{r4, lr}
   d583e:	f04f 0c00 	mov.w	ip, #0
   d5842:	4604      	mov	r4, r0
   d5844:	4608      	mov	r0, r1
   d5846:	4611      	mov	r1, r2
   d5848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d584c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5850:	4a04      	ldr	r2, [pc, #16]	; (d5864 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5852:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5854:	2201      	movs	r2, #1
  _serial = serial;
   d5856:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5858:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d585a:	461a      	mov	r2, r3
   d585c:	f7ff fa26 	bl	d4cac <hal_usart_init>
}
   d5860:	4620      	mov	r0, r4
   d5862:	bd10      	pop	{r4, pc}
   d5864:	000d6544 	.word	0x000d6544

000d5868 <_Z22__fetch_global_Serial1v>:
{
   d5868:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d586a:	4c0d      	ldr	r4, [pc, #52]	; (d58a0 <_Z22__fetch_global_Serial1v+0x38>)
   d586c:	7821      	ldrb	r1, [r4, #0]
   d586e:	f3bf 8f5b 	dmb	ish
   d5872:	f011 0101 	ands.w	r1, r1, #1
   d5876:	d110      	bne.n	d589a <_Z22__fetch_global_Serial1v+0x32>
   d5878:	4620      	mov	r0, r4
   d587a:	9101      	str	r1, [sp, #4]
   d587c:	f7fe fc0f 	bl	d409e <__cxa_guard_acquire>
   d5880:	9901      	ldr	r1, [sp, #4]
   d5882:	b150      	cbz	r0, d589a <_Z22__fetch_global_Serial1v+0x32>
   d5884:	4b07      	ldr	r3, [pc, #28]	; (d58a4 <_Z22__fetch_global_Serial1v+0x3c>)
   d5886:	4a08      	ldr	r2, [pc, #32]	; (d58a8 <_Z22__fetch_global_Serial1v+0x40>)
   d5888:	4808      	ldr	r0, [pc, #32]	; (d58ac <_Z22__fetch_global_Serial1v+0x44>)
   d588a:	f7ff ffd7 	bl	d583c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d588e:	4620      	mov	r0, r4
   d5890:	f7fe fc0a 	bl	d40a8 <__cxa_guard_release>
   d5894:	4806      	ldr	r0, [pc, #24]	; (d58b0 <_Z22__fetch_global_Serial1v+0x48>)
   d5896:	f000 fc45 	bl	d6124 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d589a:	4804      	ldr	r0, [pc, #16]	; (d58ac <_Z22__fetch_global_Serial1v+0x44>)
   d589c:	b002      	add	sp, #8
   d589e:	bd10      	pop	{r4, pc}
   d58a0:	2003e5b8 	.word	0x2003e5b8
   d58a4:	2003e640 	.word	0x2003e640
   d58a8:	2003e5bc 	.word	0x2003e5bc
   d58ac:	2003e6c4 	.word	0x2003e6c4
   d58b0:	000d57c7 	.word	0x000d57c7

000d58b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58b4:	7441      	strb	r1, [r0, #17]
}
   d58b6:	4770      	bx	lr

000d58b8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58b8:	4770      	bx	lr

000d58ba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d58ba:	4770      	bx	lr

000d58bc <_ZN9USBSerial4readEv>:
{
   d58bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d58be:	2100      	movs	r1, #0
   d58c0:	7c00      	ldrb	r0, [r0, #16]
   d58c2:	f7ff f963 	bl	d4b8c <HAL_USB_USART_Receive_Data>
}
   d58c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d58ca:	bd08      	pop	{r3, pc}

000d58cc <_ZN9USBSerial4peekEv>:
{
   d58cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d58ce:	2101      	movs	r1, #1
   d58d0:	7c00      	ldrb	r0, [r0, #16]
   d58d2:	f7ff f95b 	bl	d4b8c <HAL_USB_USART_Receive_Data>
}
   d58d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d58da:	bd08      	pop	{r3, pc}

000d58dc <_ZN9USBSerial17availableForWriteEv>:
{
   d58dc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d58de:	7c00      	ldrb	r0, [r0, #16]
   d58e0:	f7ff f94c 	bl	d4b7c <HAL_USB_USART_Available_Data_For_Write>
}
   d58e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58e8:	bd08      	pop	{r3, pc}

000d58ea <_ZN9USBSerial9availableEv>:
{
   d58ea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d58ec:	7c00      	ldrb	r0, [r0, #16]
   d58ee:	f7ff f93d 	bl	d4b6c <HAL_USB_USART_Available_Data>
}
   d58f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58f6:	bd08      	pop	{r3, pc}

000d58f8 <_ZN9USBSerial5writeEh>:
{
   d58f8:	b513      	push	{r0, r1, r4, lr}
   d58fa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58fc:	7c00      	ldrb	r0, [r0, #16]
{
   d58fe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5900:	f7ff f93c 	bl	d4b7c <HAL_USB_USART_Available_Data_For_Write>
   d5904:	2800      	cmp	r0, #0
   d5906:	9901      	ldr	r1, [sp, #4]
   d5908:	dc01      	bgt.n	d590e <_ZN9USBSerial5writeEh+0x16>
   d590a:	7c60      	ldrb	r0, [r4, #17]
   d590c:	b120      	cbz	r0, d5918 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d590e:	7c20      	ldrb	r0, [r4, #16]
   d5910:	f7ff f944 	bl	d4b9c <HAL_USB_USART_Send_Data>
   d5914:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5918:	b002      	add	sp, #8
   d591a:	bd10      	pop	{r4, pc}

000d591c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d591c:	7c00      	ldrb	r0, [r0, #16]
   d591e:	f7ff b945 	b.w	d4bac <HAL_USB_USART_Flush_Data>

000d5922 <_ZN9USBSerialD0Ev>:
   d5922:	b510      	push	{r4, lr}
   d5924:	2114      	movs	r1, #20
   d5926:	4604      	mov	r4, r0
   d5928:	f000 fae6 	bl	d5ef8 <_ZdlPvj>
   d592c:	4620      	mov	r0, r4
   d592e:	bd10      	pop	{r4, pc}

000d5930 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5930:	b510      	push	{r4, lr}
   d5932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5936:	4604      	mov	r4, r0
   d5938:	4608      	mov	r0, r1
   d593a:	2100      	movs	r1, #0
   d593c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5940:	4b04      	ldr	r3, [pc, #16]	; (d5954 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5942:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5944:	2301      	movs	r3, #1
  _serial = serial;
   d5946:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5948:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d594a:	4611      	mov	r1, r2
   d594c:	f7ff f8fe 	bl	d4b4c <HAL_USB_USART_Init>
}
   d5950:	4620      	mov	r0, r4
   d5952:	bd10      	pop	{r4, pc}
   d5954:	000d6574 	.word	0x000d6574

000d5958 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5958:	7c00      	ldrb	r0, [r0, #16]
   d595a:	2200      	movs	r2, #0
   d595c:	f7ff b8fe 	b.w	d4b5c <HAL_USB_USART_Begin>

000d5960 <_Z19acquireSerialBufferv>:
{
   d5960:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5962:	2214      	movs	r2, #20
{
   d5964:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5966:	2100      	movs	r1, #0
   d5968:	f000 fbf0 	bl	d614c <memset>
}
   d596c:	4620      	mov	r0, r4
   d596e:	bd10      	pop	{r4, pc}

000d5970 <_Z16_fetch_usbserialv>:
{
   d5970:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5972:	4c0f      	ldr	r4, [pc, #60]	; (d59b0 <_Z16_fetch_usbserialv+0x40>)
{
   d5974:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5976:	a803      	add	r0, sp, #12
   d5978:	f7ff fff2 	bl	d5960 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d597c:	7821      	ldrb	r1, [r4, #0]
   d597e:	f3bf 8f5b 	dmb	ish
   d5982:	f011 0101 	ands.w	r1, r1, #1
   d5986:	d10f      	bne.n	d59a8 <_Z16_fetch_usbserialv+0x38>
   d5988:	4620      	mov	r0, r4
   d598a:	9101      	str	r1, [sp, #4]
   d598c:	f7fe fb87 	bl	d409e <__cxa_guard_acquire>
   d5990:	9901      	ldr	r1, [sp, #4]
   d5992:	b148      	cbz	r0, d59a8 <_Z16_fetch_usbserialv+0x38>
   d5994:	aa03      	add	r2, sp, #12
   d5996:	4807      	ldr	r0, [pc, #28]	; (d59b4 <_Z16_fetch_usbserialv+0x44>)
   d5998:	f7ff ffca 	bl	d5930 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d599c:	4620      	mov	r0, r4
   d599e:	f7fe fb83 	bl	d40a8 <__cxa_guard_release>
   d59a2:	4805      	ldr	r0, [pc, #20]	; (d59b8 <_Z16_fetch_usbserialv+0x48>)
   d59a4:	f000 fbbe 	bl	d6124 <atexit>
	return _usbserial;
}
   d59a8:	4802      	ldr	r0, [pc, #8]	; (d59b4 <_Z16_fetch_usbserialv+0x44>)
   d59aa:	b008      	add	sp, #32
   d59ac:	bd10      	pop	{r4, pc}
   d59ae:	bf00      	nop
   d59b0:	2003e6d8 	.word	0x2003e6d8
   d59b4:	2003e6dc 	.word	0x2003e6dc
   d59b8:	000d58b9 	.word	0x000d58b9

000d59bc <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d59bc:	4770      	bx	lr

000d59be <_ZN9IPAddressD0Ev>:
   d59be:	b510      	push	{r4, lr}
   d59c0:	2118      	movs	r1, #24
   d59c2:	4604      	mov	r4, r0
   d59c4:	f000 fa98 	bl	d5ef8 <_ZdlPvj>
   d59c8:	4620      	mov	r0, r4
   d59ca:	bd10      	pop	{r4, pc}

000d59cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59ce:	7d03      	ldrb	r3, [r0, #20]
   d59d0:	2b06      	cmp	r3, #6
{
   d59d2:	b08d      	sub	sp, #52	; 0x34
   d59d4:	460e      	mov	r6, r1
   d59d6:	f100 0704 	add.w	r7, r0, #4
   d59da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d59de:	d012      	beq.n	d5a06 <_ZNK9IPAddress7printToER5Print+0x3a>
   d59e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d59e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d59e8:	220a      	movs	r2, #10
   d59ea:	4630      	mov	r0, r6
   d59ec:	f000 f967 	bl	d5cbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d59f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d59f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d59f4:	d019      	beq.n	d5a2a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d59f6:	2c00      	cmp	r4, #0
   d59f8:	d0f4      	beq.n	d59e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d59fa:	212e      	movs	r1, #46	; 0x2e
   d59fc:	4630      	mov	r0, r6
   d59fe:	f000 f945 	bl	d5c8c <_ZN5Print5printEc>
   d5a02:	4404      	add	r4, r0
   d5a04:	e7ee      	b.n	d59e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a06:	232f      	movs	r3, #47	; 0x2f
   d5a08:	466a      	mov	r2, sp
   d5a0a:	4639      	mov	r1, r7
   d5a0c:	200a      	movs	r0, #10
		buf[0] = 0;
   d5a0e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a12:	f7ff f98b 	bl	d4d2c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5a16:	4668      	mov	r0, sp
   d5a18:	f000 fc02 	bl	d6220 <strlen>
   d5a1c:	6833      	ldr	r3, [r6, #0]
   d5a1e:	4602      	mov	r2, r0
   d5a20:	68db      	ldr	r3, [r3, #12]
   d5a22:	4669      	mov	r1, sp
   d5a24:	4630      	mov	r0, r6
   d5a26:	4798      	blx	r3
   d5a28:	4604      	mov	r4, r0
    }
    return n;
}
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	b00d      	add	sp, #52	; 0x34
   d5a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a30 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5a30:	b510      	push	{r4, lr}
   d5a32:	4b05      	ldr	r3, [pc, #20]	; (d5a48 <_ZN9IPAddressC1Ev+0x18>)
   d5a34:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   d5a36:	2211      	movs	r2, #17
   d5a38:	f840 3b04 	str.w	r3, [r0], #4
   d5a3c:	2100      	movs	r1, #0
   d5a3e:	f000 fb85 	bl	d614c <memset>
}
   d5a42:	4620      	mov	r0, r4
   d5a44:	bd10      	pop	{r4, pc}
   d5a46:	bf00      	nop
   d5a48:	000d65a4 	.word	0x000d65a4

000d5a4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a4c:	4603      	mov	r3, r0
   d5a4e:	4a07      	ldr	r2, [pc, #28]	; (d5a6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a50:	b510      	push	{r4, lr}
   d5a52:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5a56:	f101 0210 	add.w	r2, r1, #16
   d5a5a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a5e:	f843 4b04 	str.w	r4, [r3], #4
   d5a62:	4291      	cmp	r1, r2
   d5a64:	d1f9      	bne.n	d5a5a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a66:	780a      	ldrb	r2, [r1, #0]
   d5a68:	701a      	strb	r2, [r3, #0]
}
   d5a6a:	bd10      	pop	{r4, pc}
   d5a6c:	000d65a4 	.word	0x000d65a4

000d5a70 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5a70:	7d03      	ldrb	r3, [r0, #20]
   d5a72:	2b04      	cmp	r3, #4
   d5a74:	d104      	bne.n	d5a80 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d5a76:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5a78:	3800      	subs	r0, #0
   d5a7a:	bf18      	it	ne
   d5a7c:	2001      	movne	r0, #1
   d5a7e:	4770      	bx	lr
    } else if (version() == 6) {
   d5a80:	2b06      	cmp	r3, #6
   d5a82:	d107      	bne.n	d5a94 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5a84:	6843      	ldr	r3, [r0, #4]
   d5a86:	b93b      	cbnz	r3, d5a98 <_ZNK9IPAddresscvbEv+0x28>
   d5a88:	6883      	ldr	r3, [r0, #8]
   d5a8a:	b92b      	cbnz	r3, d5a98 <_ZNK9IPAddresscvbEv+0x28>
   d5a8c:	68c3      	ldr	r3, [r0, #12]
   d5a8e:	b91b      	cbnz	r3, d5a98 <_ZNK9IPAddresscvbEv+0x28>
   d5a90:	6900      	ldr	r0, [r0, #16]
   d5a92:	e7f1      	b.n	d5a78 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d5a94:	2000      	movs	r0, #0
   d5a96:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5a98:	2001      	movs	r0, #1
}
   d5a9a:	4770      	bx	lr

000d5a9c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5a9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5a9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5aa2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5aa6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5aaa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5aae:	2304      	movs	r3, #4
   d5ab0:	6041      	str	r1, [r0, #4]
   d5ab2:	7503      	strb	r3, [r0, #20]
}
   d5ab4:	bd10      	pop	{r4, pc}

000d5ab6 <_ZN9IPAddressaSEPKh>:
{
   d5ab6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5ab8:	78cb      	ldrb	r3, [r1, #3]
   d5aba:	9300      	str	r3, [sp, #0]
   d5abc:	788b      	ldrb	r3, [r1, #2]
   d5abe:	784a      	ldrb	r2, [r1, #1]
   d5ac0:	7809      	ldrb	r1, [r1, #0]
   d5ac2:	f7ff ffeb 	bl	d5a9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5ac6:	b002      	add	sp, #8
   d5ac8:	bd10      	pop	{r4, pc}
	...

000d5acc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5acc:	4b01      	ldr	r3, [pc, #4]	; (d5ad4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5ace:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5ad0:	4770      	bx	lr
   d5ad2:	bf00      	nop
   d5ad4:	2003e460 	.word	0x2003e460

000d5ad8 <serialEventRun>:
{
   d5ad8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ada:	4b0b      	ldr	r3, [pc, #44]	; (d5b08 <serialEventRun+0x30>)
   d5adc:	b143      	cbz	r3, d5af0 <serialEventRun+0x18>
   d5ade:	f7ff ff47 	bl	d5970 <_Z16_fetch_usbserialv>
   d5ae2:	6803      	ldr	r3, [r0, #0]
   d5ae4:	691b      	ldr	r3, [r3, #16]
   d5ae6:	4798      	blx	r3
   d5ae8:	2800      	cmp	r0, #0
   d5aea:	dd01      	ble.n	d5af0 <serialEventRun+0x18>
        serialEvent();
   d5aec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5af0:	4b06      	ldr	r3, [pc, #24]	; (d5b0c <serialEventRun+0x34>)
   d5af2:	b143      	cbz	r3, d5b06 <serialEventRun+0x2e>
   d5af4:	f7ff feb8 	bl	d5868 <_Z22__fetch_global_Serial1v>
   d5af8:	6803      	ldr	r3, [r0, #0]
   d5afa:	691b      	ldr	r3, [r3, #16]
   d5afc:	4798      	blx	r3
   d5afe:	2800      	cmp	r0, #0
   d5b00:	dd01      	ble.n	d5b06 <serialEventRun+0x2e>
        serialEvent1();
   d5b02:	f3af 8000 	nop.w
}
   d5b06:	bd08      	pop	{r3, pc}
	...

000d5b10 <_post_loop>:
{
   d5b10:	b508      	push	{r3, lr}
	serialEventRun();
   d5b12:	f7ff ffe1 	bl	d5ad8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5b16:	f7ff f931 	bl	d4d7c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5b1a:	4b01      	ldr	r3, [pc, #4]	; (d5b20 <_post_loop+0x10>)
   d5b1c:	6018      	str	r0, [r3, #0]
}
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	2003e744 	.word	0x2003e744

000d5b24 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5b24:	4805      	ldr	r0, [pc, #20]	; (d5b3c <_Z33system_initialize_user_backup_ramv+0x18>)
   d5b26:	4a06      	ldr	r2, [pc, #24]	; (d5b40 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5b28:	4906      	ldr	r1, [pc, #24]	; (d5b44 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5b2a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5b2c:	1a12      	subs	r2, r2, r0
   d5b2e:	f000 faff 	bl	d6130 <memcpy>
    __backup_sram_signature = signature;
   d5b32:	4b05      	ldr	r3, [pc, #20]	; (d5b48 <_Z33system_initialize_user_backup_ramv+0x24>)
   d5b34:	4a05      	ldr	r2, [pc, #20]	; (d5b4c <_Z33system_initialize_user_backup_ramv+0x28>)
   d5b36:	601a      	str	r2, [r3, #0]
}
   d5b38:	bd08      	pop	{r3, pc}
   d5b3a:	bf00      	nop
   d5b3c:	2003f400 	.word	0x2003f400
   d5b40:	2003f404 	.word	0x2003f404
   d5b44:	000d6730 	.word	0x000d6730
   d5b48:	2003f400 	.word	0x2003f400
   d5b4c:	9a271c1e 	.word	0x9a271c1e

000d5b50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5b50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b52:	2300      	movs	r3, #0
   d5b54:	9300      	str	r3, [sp, #0]
   d5b56:	461a      	mov	r2, r3
   d5b58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b5c:	f7ff f9d0 	bl	d4f00 <system_ctrl_set_result>
}
   d5b60:	b003      	add	sp, #12
   d5b62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b68 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5b68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5b6a:	8843      	ldrh	r3, [r0, #2]
   d5b6c:	2b0a      	cmp	r3, #10
   d5b6e:	d008      	beq.n	d5b82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b70:	2b50      	cmp	r3, #80	; 0x50
   d5b72:	d10b      	bne.n	d5b8c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5b74:	4b09      	ldr	r3, [pc, #36]	; (d5b9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b76:	681b      	ldr	r3, [r3, #0]
   d5b78:	b14b      	cbz	r3, d5b8e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5b7a:	b003      	add	sp, #12
   d5b7c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5b80:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5b82:	f7ff ffe5 	bl	d5b50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5b86:	b003      	add	sp, #12
   d5b88:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b8c:	2300      	movs	r3, #0
   d5b8e:	9300      	str	r3, [sp, #0]
   d5b90:	461a      	mov	r2, r3
   d5b92:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b96:	f7ff f9b3 	bl	d4f00 <system_ctrl_set_result>
}
   d5b9a:	e7f4      	b.n	d5b86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5b9c:	2003e6f4 	.word	0x2003e6f4

000d5ba0 <module_user_init_hook>:
{
   d5ba0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5ba2:	4812      	ldr	r0, [pc, #72]	; (d5bec <module_user_init_hook+0x4c>)
   d5ba4:	2100      	movs	r1, #0
   d5ba6:	f7ff f9d5 	bl	d4f54 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5baa:	4b11      	ldr	r3, [pc, #68]	; (d5bf0 <module_user_init_hook+0x50>)
   d5bac:	681a      	ldr	r2, [r3, #0]
   d5bae:	4b11      	ldr	r3, [pc, #68]	; (d5bf4 <module_user_init_hook+0x54>)
   d5bb0:	429a      	cmp	r2, r3
   d5bb2:	4b11      	ldr	r3, [pc, #68]	; (d5bf8 <module_user_init_hook+0x58>)
   d5bb4:	bf0c      	ite	eq
   d5bb6:	2201      	moveq	r2, #1
   d5bb8:	2200      	movne	r2, #0
   d5bba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5bbc:	d001      	beq.n	d5bc2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5bbe:	f7ff ffb1 	bl	d5b24 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5bc2:	f7ff f8d3 	bl	d4d6c <HAL_RNG_GetRandomNumber>
   d5bc6:	4604      	mov	r4, r0
    srand(seed);
   d5bc8:	f000 fac8 	bl	d615c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5bcc:	4b0b      	ldr	r3, [pc, #44]	; (d5bfc <module_user_init_hook+0x5c>)
   d5bce:	b113      	cbz	r3, d5bd6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5bd6:	2100      	movs	r1, #0
   d5bd8:	4808      	ldr	r0, [pc, #32]	; (d5bfc <module_user_init_hook+0x5c>)
   d5bda:	f7ff f90f 	bl	d4dfc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5be2:	4807      	ldr	r0, [pc, #28]	; (d5c00 <module_user_init_hook+0x60>)
   d5be4:	2100      	movs	r1, #0
   d5be6:	f7ff b981 	b.w	d4eec <system_ctrl_set_app_request_handler>
   d5bea:	bf00      	nop
   d5bec:	000d5acd 	.word	0x000d5acd
   d5bf0:	2003f400 	.word	0x2003f400
   d5bf4:	9a271c1e 	.word	0x9a271c1e
   d5bf8:	2003e6f0 	.word	0x2003e6f0
   d5bfc:	00000000 	.word	0x00000000
   d5c00:	000d5b69 	.word	0x000d5b69

000d5c04 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c04:	4b01      	ldr	r3, [pc, #4]	; (d5c0c <_GLOBAL__sub_I_RGB+0x8>)
   d5c06:	2200      	movs	r2, #0
   d5c08:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5c0a:	4770      	bx	lr
   d5c0c:	2003e6f8 	.word	0x2003e6f8

000d5c10 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5c10:	2100      	movs	r1, #0
   d5c12:	f7ff b963 	b.w	d4edc <system_delay_ms>
	...

000d5c18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c18:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c1a:	681a      	ldr	r2, [r3, #0]
   d5c1c:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5c20:	4770      	bx	lr
   d5c22:	bf00      	nop
   d5c24:	2003e45c 	.word	0x2003e45c
   d5c28:	2003e708 	.word	0x2003e708

000d5c2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c2c:	4b01      	ldr	r3, [pc, #4]	; (d5c34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c2e:	4a02      	ldr	r2, [pc, #8]	; (d5c38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c30:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5c32:	4770      	bx	lr
   d5c34:	2003e70c 	.word	0x2003e70c
   d5c38:	000d65cc 	.word	0x000d65cc

000d5c3c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c3e:	4606      	mov	r6, r0
   d5c40:	460d      	mov	r5, r1
  size_t n = 0;
   d5c42:	188f      	adds	r7, r1, r2
   d5c44:	2400      	movs	r4, #0
  while (size--) {
   d5c46:	42bd      	cmp	r5, r7
   d5c48:	d00c      	beq.n	d5c64 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c4a:	6833      	ldr	r3, [r6, #0]
   d5c4c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c50:	689b      	ldr	r3, [r3, #8]
   d5c52:	4630      	mov	r0, r6
   d5c54:	4798      	blx	r3
     if (chunk>=0)
   d5c56:	1e03      	subs	r3, r0, #0
   d5c58:	db01      	blt.n	d5c5e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c5a:	441c      	add	r4, r3
  while (size--) {
   d5c5c:	e7f3      	b.n	d5c46 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c5e:	2c00      	cmp	r4, #0
   d5c60:	bf08      	it	eq
   d5c62:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c64:	4620      	mov	r0, r4
   d5c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c68 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5c68:	b513      	push	{r0, r1, r4, lr}
   d5c6a:	4604      	mov	r4, r0
    }
   d5c6c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5c6e:	b159      	cbz	r1, d5c88 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5c70:	9101      	str	r1, [sp, #4]
   d5c72:	f000 fad5 	bl	d6220 <strlen>
   d5c76:	6823      	ldr	r3, [r4, #0]
   d5c78:	9901      	ldr	r1, [sp, #4]
   d5c7a:	68db      	ldr	r3, [r3, #12]
   d5c7c:	4602      	mov	r2, r0
   d5c7e:	4620      	mov	r0, r4
    }
   d5c80:	b002      	add	sp, #8
   d5c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5c86:	4718      	bx	r3
    }
   d5c88:	b002      	add	sp, #8
   d5c8a:	bd10      	pop	{r4, pc}

000d5c8c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c8c:	6803      	ldr	r3, [r0, #0]
   d5c8e:	689b      	ldr	r3, [r3, #8]
   d5c90:	4718      	bx	r3

000d5c92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c94:	210d      	movs	r1, #13
{
   d5c96:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c98:	f7ff fff8 	bl	d5c8c <_ZN5Print5printEc>
  n += print('\n');
   d5c9c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5c9e:	4604      	mov	r4, r0
  n += print('\n');
   d5ca0:	4628      	mov	r0, r5
   d5ca2:	f7ff fff3 	bl	d5c8c <_ZN5Print5printEc>
  return n;
}
   d5ca6:	4420      	add	r0, r4
   d5ca8:	bd38      	pop	{r3, r4, r5, pc}

000d5caa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5caa:	b538      	push	{r3, r4, r5, lr}
   d5cac:	4605      	mov	r5, r0
  return write(str);
   d5cae:	f7ff ffdb 	bl	d5c68 <_ZN5Print5writeEPKc>
   d5cb2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5cb4:	4628      	mov	r0, r5
   d5cb6:	f7ff ffec 	bl	d5c92 <_ZN5Print7printlnEv>
  return n;
}
   d5cba:	4420      	add	r0, r4
   d5cbc:	bd38      	pop	{r3, r4, r5, pc}

000d5cbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cbe:	b530      	push	{r4, r5, lr}
   d5cc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cc2:	2300      	movs	r3, #0
   d5cc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cc8:	2a01      	cmp	r2, #1
   d5cca:	bf98      	it	ls
   d5ccc:	220a      	movls	r2, #10
   d5cce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5cd0:	460d      	mov	r5, r1
   d5cd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5cd6:	fb01 5312 	mls	r3, r1, r2, r5
   d5cda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cde:	2b09      	cmp	r3, #9
   d5ce0:	bf94      	ite	ls
   d5ce2:	3330      	addls	r3, #48	; 0x30
   d5ce4:	3337      	addhi	r3, #55	; 0x37
   d5ce6:	b2db      	uxtb	r3, r3
  } while(n);
   d5ce8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5cee:	d9ef      	bls.n	d5cd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5cf0:	4621      	mov	r1, r4
   d5cf2:	f7ff ffb9 	bl	d5c68 <_ZN5Print5writeEPKc>
}
   d5cf6:	b00b      	add	sp, #44	; 0x2c
   d5cf8:	bd30      	pop	{r4, r5, pc}
	...

000d5cfc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5cfc:	4802      	ldr	r0, [pc, #8]	; (d5d08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5cfe:	2300      	movs	r3, #0
   d5d00:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5d02:	f7ff b82b 	b.w	d4d5c <os_mutex_recursive_create>
   d5d06:	bf00      	nop
   d5d08:	2003e710 	.word	0x2003e710

000d5d0c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5d0c:	4b05      	ldr	r3, [pc, #20]	; (d5d24 <_GLOBAL__sub_I_System+0x18>)
   d5d0e:	2202      	movs	r2, #2
   d5d10:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d12:	4b05      	ldr	r3, [pc, #20]	; (d5d28 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5d14:	4a05      	ldr	r2, [pc, #20]	; (d5d2c <_GLOBAL__sub_I_System+0x20>)
   d5d16:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5d18:	2000      	movs	r0, #0
   d5d1a:	6018      	str	r0, [r3, #0]
   d5d1c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d5d1e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5d20:	f7ff b8d4 	b.w	d4ecc <set_system_mode>
   d5d24:	2003e720 	.word	0x2003e720
   d5d28:	2003e714 	.word	0x2003e714
   d5d2c:	ffff0000 	.word	0xffff0000

000d5d30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d30:	2200      	movs	r2, #0
   d5d32:	6840      	ldr	r0, [r0, #4]
   d5d34:	4611      	mov	r1, r2
   d5d36:	f7ff b8a1 	b.w	d4e7c <network_listening>

000d5d3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d3a:	2200      	movs	r2, #0
   d5d3c:	6840      	ldr	r0, [r0, #4]
   d5d3e:	4611      	mov	r1, r2
   d5d40:	f7ff b8ac 	b.w	d4e9c <network_get_listen_timeout>

000d5d44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d44:	6840      	ldr	r0, [r0, #4]
   d5d46:	2200      	movs	r2, #0
   d5d48:	f7ff b8a0 	b.w	d4e8c <network_set_listen_timeout>

000d5d4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d4c:	6840      	ldr	r0, [r0, #4]
   d5d4e:	2200      	movs	r2, #0
   d5d50:	f081 0101 	eor.w	r1, r1, #1
   d5d54:	f7ff b88a 	b.w	d4e6c <network_listen>

000d5d58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d58:	2300      	movs	r3, #0
   d5d5a:	6840      	ldr	r0, [r0, #4]
   d5d5c:	461a      	mov	r2, r3
   d5d5e:	4619      	mov	r1, r3
   d5d60:	f7ff b87c 	b.w	d4e5c <network_off>

000d5d64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d64:	2300      	movs	r3, #0
   d5d66:	6840      	ldr	r0, [r0, #4]
   d5d68:	461a      	mov	r2, r3
   d5d6a:	4619      	mov	r1, r3
   d5d6c:	f7ff b86e 	b.w	d4e4c <network_on>

000d5d70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d70:	2200      	movs	r2, #0
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	4611      	mov	r1, r2
   d5d76:	f7ff b861 	b.w	d4e3c <network_ready>

000d5d7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	6840      	ldr	r0, [r0, #4]
   d5d7e:	4611      	mov	r1, r2
   d5d80:	f7ff b84c 	b.w	d4e1c <network_connecting>

000d5d84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d84:	6840      	ldr	r0, [r0, #4]
   d5d86:	2200      	movs	r2, #0
   d5d88:	2102      	movs	r1, #2
   d5d8a:	f7ff b84f 	b.w	d4e2c <network_disconnect>

000d5d8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d8e:	2300      	movs	r3, #0
   d5d90:	6840      	ldr	r0, [r0, #4]
   d5d92:	461a      	mov	r2, r3
   d5d94:	f7ff b83a 	b.w	d4e0c <network_connect>

000d5d98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5d98:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d9a:	2203      	movs	r2, #3
   d5d9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d9e:	4a02      	ldr	r2, [pc, #8]	; (d5da8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5da0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5da2:	4770      	bx	lr
   d5da4:	2003e724 	.word	0x2003e724
   d5da8:	000d65d8 	.word	0x000d65d8

000d5dac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5dac:	4770      	bx	lr
	...

000d5db0 <_Z17acquireWireBufferv>:
{
   d5db0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5db2:	2300      	movs	r3, #0
   d5db4:	2520      	movs	r5, #32
   d5db6:	8043      	strh	r3, [r0, #2]
   d5db8:	2314      	movs	r3, #20
{
   d5dba:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5dbc:	8003      	strh	r3, [r0, #0]
   d5dbe:	6085      	str	r5, [r0, #8]
   d5dc0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5dc2:	4906      	ldr	r1, [pc, #24]	; (d5ddc <_Z17acquireWireBufferv+0x2c>)
   d5dc4:	4628      	mov	r0, r5
   d5dc6:	f000 f899 	bl	d5efc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5dca:	4904      	ldr	r1, [pc, #16]	; (d5ddc <_Z17acquireWireBufferv+0x2c>)
	};
   d5dcc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5dce:	4628      	mov	r0, r5
   d5dd0:	f000 f894 	bl	d5efc <_ZnajRKSt9nothrow_t>
	};
   d5dd4:	60e0      	str	r0, [r4, #12]
}
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	bd38      	pop	{r3, r4, r5, pc}
   d5dda:	bf00      	nop
   d5ddc:	000d660c 	.word	0x000d660c

000d5de0 <_Z19__fetch_global_Wirev>:
{
   d5de0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5de2:	4d0e      	ldr	r5, [pc, #56]	; (d5e1c <_Z19__fetch_global_Wirev+0x3c>)
   d5de4:	7829      	ldrb	r1, [r5, #0]
   d5de6:	f3bf 8f5b 	dmb	ish
   d5dea:	f011 0401 	ands.w	r4, r1, #1
{
   d5dee:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5df0:	d111      	bne.n	d5e16 <_Z19__fetch_global_Wirev+0x36>
   d5df2:	4628      	mov	r0, r5
   d5df4:	f7fe f953 	bl	d409e <__cxa_guard_acquire>
   d5df8:	b168      	cbz	r0, d5e16 <_Z19__fetch_global_Wirev+0x36>
   d5dfa:	a801      	add	r0, sp, #4
   d5dfc:	f7ff ffd8 	bl	d5db0 <_Z17acquireWireBufferv>
   d5e00:	aa01      	add	r2, sp, #4
   d5e02:	4621      	mov	r1, r4
   d5e04:	4806      	ldr	r0, [pc, #24]	; (d5e20 <_Z19__fetch_global_Wirev+0x40>)
   d5e06:	f7ff fcc9 	bl	d579c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5e0a:	4628      	mov	r0, r5
   d5e0c:	f7fe f94c 	bl	d40a8 <__cxa_guard_release>
   d5e10:	4804      	ldr	r0, [pc, #16]	; (d5e24 <_Z19__fetch_global_Wirev+0x44>)
   d5e12:	f000 f987 	bl	d6124 <atexit>
	return wire;
}
   d5e16:	4802      	ldr	r0, [pc, #8]	; (d5e20 <_Z19__fetch_global_Wirev+0x40>)
   d5e18:	b007      	add	sp, #28
   d5e1a:	bd30      	pop	{r4, r5, pc}
   d5e1c:	2003e72c 	.word	0x2003e72c
   d5e20:	2003e730 	.word	0x2003e730
   d5e24:	000d5dad 	.word	0x000d5dad

000d5e28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5e28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5e2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5e2c:	d902      	bls.n	d5e34 <pinAvailable+0xc>
    return false;
   d5e2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5e30:	b002      	add	sp, #8
   d5e32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5e34:	f1a0 030b 	sub.w	r3, r0, #11
   d5e38:	2b02      	cmp	r3, #2
   d5e3a:	d81a      	bhi.n	d5e72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5e3c:	4c17      	ldr	r4, [pc, #92]	; (d5e9c <pinAvailable+0x74>)
   d5e3e:	7821      	ldrb	r1, [r4, #0]
   d5e40:	f3bf 8f5b 	dmb	ish
   d5e44:	f011 0101 	ands.w	r1, r1, #1
   d5e48:	d10b      	bne.n	d5e62 <pinAvailable+0x3a>
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	9101      	str	r1, [sp, #4]
   d5e4e:	f7fe f926 	bl	d409e <__cxa_guard_acquire>
   d5e52:	9901      	ldr	r1, [sp, #4]
   d5e54:	b128      	cbz	r0, d5e62 <pinAvailable+0x3a>
   d5e56:	4812      	ldr	r0, [pc, #72]	; (d5ea0 <pinAvailable+0x78>)
   d5e58:	f7ff fc54 	bl	d5704 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	f7fe f923 	bl	d40a8 <__cxa_guard_release>
   d5e62:	4b0f      	ldr	r3, [pc, #60]	; (d5ea0 <pinAvailable+0x78>)
   d5e64:	7818      	ldrb	r0, [r3, #0]
   d5e66:	f7fe fee9 	bl	d4c3c <hal_spi_is_enabled>
   d5e6a:	2800      	cmp	r0, #0
   d5e6c:	d1df      	bne.n	d5e2e <pinAvailable+0x6>
  return true; // 'pin' is available
   d5e6e:	2001      	movs	r0, #1
   d5e70:	e7de      	b.n	d5e30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5e72:	2801      	cmp	r0, #1
   d5e74:	d809      	bhi.n	d5e8a <pinAvailable+0x62>
   d5e76:	f7ff ffb3 	bl	d5de0 <_Z19__fetch_global_Wirev>
   d5e7a:	2100      	movs	r1, #0
   d5e7c:	7c00      	ldrb	r0, [r0, #16]
   d5e7e:	f7fe fec5 	bl	d4c0c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5e82:	f080 0001 	eor.w	r0, r0, #1
   d5e86:	b2c0      	uxtb	r0, r0
   d5e88:	e7d2      	b.n	d5e30 <pinAvailable+0x8>
   d5e8a:	3809      	subs	r0, #9
   d5e8c:	2801      	cmp	r0, #1
   d5e8e:	d8ee      	bhi.n	d5e6e <pinAvailable+0x46>
   d5e90:	f7ff fcea 	bl	d5868 <_Z22__fetch_global_Serial1v>
   d5e94:	7c00      	ldrb	r0, [r0, #16]
   d5e96:	f7fe ff39 	bl	d4d0c <hal_usart_is_enabled>
   d5e9a:	e7f2      	b.n	d5e82 <pinAvailable+0x5a>
   d5e9c:	2003e748 	.word	0x2003e748
   d5ea0:	2003e74c 	.word	0x2003e74c

000d5ea4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ea4:	2823      	cmp	r0, #35	; 0x23
{
   d5ea6:	b538      	push	{r3, r4, r5, lr}
   d5ea8:	4604      	mov	r4, r0
   d5eaa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5eac:	d80a      	bhi.n	d5ec4 <pinMode+0x20>
   d5eae:	29ff      	cmp	r1, #255	; 0xff
   d5eb0:	d008      	beq.n	d5ec4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5eb2:	f7ff ffb9 	bl	d5e28 <pinAvailable>
   d5eb6:	b128      	cbz	r0, d5ec4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5eb8:	4629      	mov	r1, r5
   d5eba:	4620      	mov	r0, r4
}
   d5ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5ec0:	f7fe bf6c 	b.w	d4d9c <HAL_Pin_Mode>
}
   d5ec4:	bd38      	pop	{r3, r4, r5, pc}

000d5ec6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5ec6:	b538      	push	{r3, r4, r5, lr}
   d5ec8:	4604      	mov	r4, r0
   d5eca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ecc:	f7fe ff6e 	bl	d4dac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ed0:	28ff      	cmp	r0, #255	; 0xff
   d5ed2:	d010      	beq.n	d5ef6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5ed4:	2806      	cmp	r0, #6
   d5ed6:	d804      	bhi.n	d5ee2 <digitalWrite+0x1c>
   d5ed8:	234d      	movs	r3, #77	; 0x4d
   d5eda:	fa23 f000 	lsr.w	r0, r3, r0
   d5ede:	07c3      	lsls	r3, r0, #31
   d5ee0:	d409      	bmi.n	d5ef6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	f7ff ffa0 	bl	d5e28 <pinAvailable>
   d5ee8:	b128      	cbz	r0, d5ef6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5eea:	4629      	mov	r1, r5
   d5eec:	4620      	mov	r0, r4
}
   d5eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5ef2:	f7fe bf63 	b.w	d4dbc <HAL_GPIO_Write>
}
   d5ef6:	bd38      	pop	{r3, r4, r5, pc}

000d5ef8 <_ZdlPvj>:
   d5ef8:	f7fe b8cf 	b.w	d409a <_ZdlPv>

000d5efc <_ZnajRKSt9nothrow_t>:
   d5efc:	f7fe b8cb 	b.w	d4096 <_Znaj>

000d5f00 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d5f00:	4901      	ldr	r1, [pc, #4]	; (d5f08 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d5f02:	f000 b8f9 	b.w	d60f8 <_ZNKSt9type_infoeqERKS_>
   d5f06:	bf00      	nop
   d5f08:	000d6628 	.word	0x000d6628

000d5f0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d5f0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5f0e:	2400      	movs	r4, #0
   d5f10:	2310      	movs	r3, #16
   d5f12:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d5f16:	6803      	ldr	r3, [r0, #0]
   d5f18:	9400      	str	r4, [sp, #0]
   d5f1a:	699e      	ldr	r6, [r3, #24]
   d5f1c:	f88d 4004 	strb.w	r4, [sp, #4]
   d5f20:	4615      	mov	r5, r2
   d5f22:	466b      	mov	r3, sp
   d5f24:	6812      	ldr	r2, [r2, #0]
   d5f26:	47b0      	blx	r6
   d5f28:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5f2c:	f003 0306 	and.w	r3, r3, #6
   d5f30:	2b06      	cmp	r3, #6
   d5f32:	bf03      	ittte	eq
   d5f34:	9b00      	ldreq	r3, [sp, #0]
   d5f36:	602b      	streq	r3, [r5, #0]
   d5f38:	2001      	moveq	r0, #1
   d5f3a:	4620      	movne	r0, r4
   d5f3c:	b004      	add	sp, #16
   d5f3e:	bd70      	pop	{r4, r5, r6, pc}

000d5f40 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d5f40:	9800      	ldr	r0, [sp, #0]
   d5f42:	4290      	cmp	r0, r2
   d5f44:	bf14      	ite	ne
   d5f46:	2001      	movne	r0, #1
   d5f48:	2006      	moveq	r0, #6
   d5f4a:	4770      	bx	lr

000d5f4c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d5f4c:	b510      	push	{r4, lr}
   d5f4e:	4b03      	ldr	r3, [pc, #12]	; (d5f5c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d5f50:	6003      	str	r3, [r0, #0]
   d5f52:	4604      	mov	r4, r0
   d5f54:	f000 f8cd 	bl	d60f2 <_ZNSt9type_infoD1Ev>
   d5f58:	4620      	mov	r0, r4
   d5f5a:	bd10      	pop	{r4, pc}
   d5f5c:	000d6668 	.word	0x000d6668

000d5f60 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d5f60:	b510      	push	{r4, lr}
   d5f62:	4604      	mov	r4, r0
   d5f64:	f7ff fff2 	bl	d5f4c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d5f68:	4620      	mov	r0, r4
   d5f6a:	2108      	movs	r1, #8
   d5f6c:	f7ff ffc4 	bl	d5ef8 <_ZdlPvj>
   d5f70:	4620      	mov	r0, r4
   d5f72:	bd10      	pop	{r4, pc}

000d5f74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d5f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f78:	461f      	mov	r7, r3
   d5f7a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d5f7e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d5f82:	4598      	cmp	r8, r3
   d5f84:	4606      	mov	r6, r0
   d5f86:	4615      	mov	r5, r2
   d5f88:	d107      	bne.n	d5f9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5f8a:	9907      	ldr	r1, [sp, #28]
   d5f8c:	f000 f8b4 	bl	d60f8 <_ZNKSt9type_infoeqERKS_>
   d5f90:	b118      	cbz	r0, d5f9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5f92:	7165      	strb	r5, [r4, #5]
   d5f94:	2000      	movs	r0, #0
   d5f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f9a:	4639      	mov	r1, r7
   d5f9c:	4630      	mov	r0, r6
   d5f9e:	f000 f8ab 	bl	d60f8 <_ZNKSt9type_infoeqERKS_>
   d5fa2:	2800      	cmp	r0, #0
   d5fa4:	d0f6      	beq.n	d5f94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d5fa6:	2301      	movs	r3, #1
   d5fa8:	f8c4 8000 	str.w	r8, [r4]
   d5fac:	7125      	strb	r5, [r4, #4]
   d5fae:	71a3      	strb	r3, [r4, #6]
   d5fb0:	e7f0      	b.n	d5f94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d5fb2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d5fb2:	b538      	push	{r3, r4, r5, lr}
   d5fb4:	4615      	mov	r5, r2
   d5fb6:	461c      	mov	r4, r3
   d5fb8:	f000 f89e 	bl	d60f8 <_ZNKSt9type_infoeqERKS_>
   d5fbc:	b120      	cbz	r0, d5fc8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d5fbe:	2308      	movs	r3, #8
   d5fc0:	60e3      	str	r3, [r4, #12]
   d5fc2:	2306      	movs	r3, #6
   d5fc4:	6025      	str	r5, [r4, #0]
   d5fc6:	7123      	strb	r3, [r4, #4]
   d5fc8:	bd38      	pop	{r3, r4, r5, pc}

000d5fca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d5fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5fcc:	4605      	mov	r5, r0
   d5fce:	460c      	mov	r4, r1
   d5fd0:	9201      	str	r2, [sp, #4]
   d5fd2:	461e      	mov	r6, r3
   d5fd4:	f000 f890 	bl	d60f8 <_ZNKSt9type_infoeqERKS_>
   d5fd8:	b950      	cbnz	r0, d5ff0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5fda:	2e03      	cmp	r6, #3
   d5fdc:	d808      	bhi.n	d5ff0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5fde:	6823      	ldr	r3, [r4, #0]
   d5fe0:	9a01      	ldr	r2, [sp, #4]
   d5fe2:	695b      	ldr	r3, [r3, #20]
   d5fe4:	4629      	mov	r1, r5
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	b002      	add	sp, #8
   d5fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5fee:	4718      	bx	r3
   d5ff0:	b002      	add	sp, #8
   d5ff2:	bd70      	pop	{r4, r5, r6, pc}

000d5ff4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d5ff4:	b510      	push	{r4, lr}
   d5ff6:	4b03      	ldr	r3, [pc, #12]	; (d6004 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d5ff8:	6003      	str	r3, [r0, #0]
   d5ffa:	4604      	mov	r4, r0
   d5ffc:	f7ff ffa6 	bl	d5f4c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6000:	4620      	mov	r0, r4
   d6002:	bd10      	pop	{r4, pc}
   d6004:	000d66c8 	.word	0x000d66c8

000d6008 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6008:	b510      	push	{r4, lr}
   d600a:	4604      	mov	r4, r0
   d600c:	f7ff fff2 	bl	d5ff4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6010:	4620      	mov	r0, r4
   d6012:	210c      	movs	r1, #12
   d6014:	f7ff ff70 	bl	d5ef8 <_ZdlPvj>
   d6018:	4620      	mov	r0, r4
   d601a:	bd10      	pop	{r4, pc}

000d601c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d601c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d601e:	9f08      	ldr	r7, [sp, #32]
   d6020:	4297      	cmp	r7, r2
   d6022:	4605      	mov	r5, r0
   d6024:	460e      	mov	r6, r1
   d6026:	4614      	mov	r4, r2
   d6028:	d00a      	beq.n	d6040 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d602a:	68a8      	ldr	r0, [r5, #8]
   d602c:	6802      	ldr	r2, [r0, #0]
   d602e:	9708      	str	r7, [sp, #32]
   d6030:	6a15      	ldr	r5, [r2, #32]
   d6032:	4631      	mov	r1, r6
   d6034:	4622      	mov	r2, r4
   d6036:	46ac      	mov	ip, r5
   d6038:	b003      	add	sp, #12
   d603a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d603e:	4760      	bx	ip
   d6040:	4619      	mov	r1, r3
   d6042:	9301      	str	r3, [sp, #4]
   d6044:	f000 f858 	bl	d60f8 <_ZNKSt9type_infoeqERKS_>
   d6048:	9b01      	ldr	r3, [sp, #4]
   d604a:	2800      	cmp	r0, #0
   d604c:	d0ed      	beq.n	d602a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d604e:	2006      	movs	r0, #6
   d6050:	b003      	add	sp, #12
   d6052:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6054 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6054:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6058:	460d      	mov	r5, r1
   d605a:	4619      	mov	r1, r3
   d605c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6060:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6064:	4681      	mov	r9, r0
   d6066:	4617      	mov	r7, r2
   d6068:	4698      	mov	r8, r3
   d606a:	f000 f845 	bl	d60f8 <_ZNKSt9type_infoeqERKS_>
   d606e:	b190      	cbz	r0, d6096 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6070:	2d00      	cmp	r5, #0
   d6072:	6034      	str	r4, [r6, #0]
   d6074:	7137      	strb	r7, [r6, #4]
   d6076:	db09      	blt.n	d608c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6078:	1961      	adds	r1, r4, r5
   d607a:	458a      	cmp	sl, r1
   d607c:	bf0c      	ite	eq
   d607e:	2106      	moveq	r1, #6
   d6080:	2101      	movne	r1, #1
   d6082:	71b1      	strb	r1, [r6, #6]
   d6084:	2000      	movs	r0, #0
   d6086:	b001      	add	sp, #4
   d6088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d608c:	3502      	adds	r5, #2
   d608e:	d1f9      	bne.n	d6084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6090:	2301      	movs	r3, #1
   d6092:	71b3      	strb	r3, [r6, #6]
   d6094:	e7f6      	b.n	d6084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6096:	4554      	cmp	r4, sl
   d6098:	d106      	bne.n	d60a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d609a:	4659      	mov	r1, fp
   d609c:	4648      	mov	r0, r9
   d609e:	f000 f82b 	bl	d60f8 <_ZNKSt9type_infoeqERKS_>
   d60a2:	b108      	cbz	r0, d60a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d60a4:	7177      	strb	r7, [r6, #5]
   d60a6:	e7ed      	b.n	d6084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d60a8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d60ac:	6803      	ldr	r3, [r0, #0]
   d60ae:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d60b2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d60b6:	69dc      	ldr	r4, [r3, #28]
   d60b8:	463a      	mov	r2, r7
   d60ba:	4643      	mov	r3, r8
   d60bc:	4629      	mov	r1, r5
   d60be:	46a4      	mov	ip, r4
   d60c0:	b001      	add	sp, #4
   d60c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60c6:	4760      	bx	ip

000d60c8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d60c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60cc:	4607      	mov	r7, r0
   d60ce:	460c      	mov	r4, r1
   d60d0:	4615      	mov	r5, r2
   d60d2:	461e      	mov	r6, r3
   d60d4:	f7ff ff6d 	bl	d5fb2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d60d8:	b948      	cbnz	r0, d60ee <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d60da:	68b8      	ldr	r0, [r7, #8]
   d60dc:	6803      	ldr	r3, [r0, #0]
   d60de:	699f      	ldr	r7, [r3, #24]
   d60e0:	462a      	mov	r2, r5
   d60e2:	4633      	mov	r3, r6
   d60e4:	4621      	mov	r1, r4
   d60e6:	46bc      	mov	ip, r7
   d60e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d60ec:	4760      	bx	ip
   d60ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60f2 <_ZNSt9type_infoD1Ev>:
   d60f2:	4770      	bx	lr

000d60f4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d60f4:	2000      	movs	r0, #0
   d60f6:	4770      	bx	lr

000d60f8 <_ZNKSt9type_infoeqERKS_>:
   d60f8:	4281      	cmp	r1, r0
   d60fa:	b508      	push	{r3, lr}
   d60fc:	d00e      	beq.n	d611c <_ZNKSt9type_infoeqERKS_+0x24>
   d60fe:	6840      	ldr	r0, [r0, #4]
   d6100:	7803      	ldrb	r3, [r0, #0]
   d6102:	2b2a      	cmp	r3, #42	; 0x2a
   d6104:	d00c      	beq.n	d6120 <_ZNKSt9type_infoeqERKS_+0x28>
   d6106:	6849      	ldr	r1, [r1, #4]
   d6108:	780b      	ldrb	r3, [r1, #0]
   d610a:	2b2a      	cmp	r3, #42	; 0x2a
   d610c:	bf08      	it	eq
   d610e:	3101      	addeq	r1, #1
   d6110:	f000 f87c 	bl	d620c <strcmp>
   d6114:	fab0 f080 	clz	r0, r0
   d6118:	0940      	lsrs	r0, r0, #5
   d611a:	bd08      	pop	{r3, pc}
   d611c:	2001      	movs	r0, #1
   d611e:	e7fc      	b.n	d611a <_ZNKSt9type_infoeqERKS_+0x22>
   d6120:	2000      	movs	r0, #0
   d6122:	e7fa      	b.n	d611a <_ZNKSt9type_infoeqERKS_+0x22>

000d6124 <atexit>:
   d6124:	2300      	movs	r3, #0
   d6126:	4601      	mov	r1, r0
   d6128:	461a      	mov	r2, r3
   d612a:	4618      	mov	r0, r3
   d612c:	f000 b880 	b.w	d6230 <__register_exitproc>

000d6130 <memcpy>:
   d6130:	440a      	add	r2, r1
   d6132:	4291      	cmp	r1, r2
   d6134:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6138:	d100      	bne.n	d613c <memcpy+0xc>
   d613a:	4770      	bx	lr
   d613c:	b510      	push	{r4, lr}
   d613e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6142:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6146:	4291      	cmp	r1, r2
   d6148:	d1f9      	bne.n	d613e <memcpy+0xe>
   d614a:	bd10      	pop	{r4, pc}

000d614c <memset>:
   d614c:	4402      	add	r2, r0
   d614e:	4603      	mov	r3, r0
   d6150:	4293      	cmp	r3, r2
   d6152:	d100      	bne.n	d6156 <memset+0xa>
   d6154:	4770      	bx	lr
   d6156:	f803 1b01 	strb.w	r1, [r3], #1
   d615a:	e7f9      	b.n	d6150 <memset+0x4>

000d615c <srand>:
   d615c:	b538      	push	{r3, r4, r5, lr}
   d615e:	4b0d      	ldr	r3, [pc, #52]	; (d6194 <srand+0x38>)
   d6160:	681d      	ldr	r5, [r3, #0]
   d6162:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6164:	4604      	mov	r4, r0
   d6166:	b97b      	cbnz	r3, d6188 <srand+0x2c>
   d6168:	2018      	movs	r0, #24
   d616a:	f7fe fed3 	bl	d4f14 <malloc>
   d616e:	4a0a      	ldr	r2, [pc, #40]	; (d6198 <srand+0x3c>)
   d6170:	4b0a      	ldr	r3, [pc, #40]	; (d619c <srand+0x40>)
   d6172:	63a8      	str	r0, [r5, #56]	; 0x38
   d6174:	e9c0 2300 	strd	r2, r3, [r0]
   d6178:	4b09      	ldr	r3, [pc, #36]	; (d61a0 <srand+0x44>)
   d617a:	6083      	str	r3, [r0, #8]
   d617c:	230b      	movs	r3, #11
   d617e:	8183      	strh	r3, [r0, #12]
   d6180:	2201      	movs	r2, #1
   d6182:	2300      	movs	r3, #0
   d6184:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6188:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d618a:	2200      	movs	r2, #0
   d618c:	611c      	str	r4, [r3, #16]
   d618e:	615a      	str	r2, [r3, #20]
   d6190:	bd38      	pop	{r3, r4, r5, pc}
   d6192:	bf00      	nop
   d6194:	2003e460 	.word	0x2003e460
   d6198:	abcd330e 	.word	0xabcd330e
   d619c:	e66d1234 	.word	0xe66d1234
   d61a0:	0005deec 	.word	0x0005deec

000d61a4 <rand>:
   d61a4:	4b13      	ldr	r3, [pc, #76]	; (d61f4 <rand+0x50>)
   d61a6:	b510      	push	{r4, lr}
   d61a8:	681c      	ldr	r4, [r3, #0]
   d61aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d61ac:	b97b      	cbnz	r3, d61ce <rand+0x2a>
   d61ae:	2018      	movs	r0, #24
   d61b0:	f7fe feb0 	bl	d4f14 <malloc>
   d61b4:	4a10      	ldr	r2, [pc, #64]	; (d61f8 <rand+0x54>)
   d61b6:	4b11      	ldr	r3, [pc, #68]	; (d61fc <rand+0x58>)
   d61b8:	63a0      	str	r0, [r4, #56]	; 0x38
   d61ba:	e9c0 2300 	strd	r2, r3, [r0]
   d61be:	4b10      	ldr	r3, [pc, #64]	; (d6200 <rand+0x5c>)
   d61c0:	6083      	str	r3, [r0, #8]
   d61c2:	230b      	movs	r3, #11
   d61c4:	8183      	strh	r3, [r0, #12]
   d61c6:	2201      	movs	r2, #1
   d61c8:	2300      	movs	r3, #0
   d61ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d61ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d61d0:	480c      	ldr	r0, [pc, #48]	; (d6204 <rand+0x60>)
   d61d2:	690a      	ldr	r2, [r1, #16]
   d61d4:	694b      	ldr	r3, [r1, #20]
   d61d6:	4c0c      	ldr	r4, [pc, #48]	; (d6208 <rand+0x64>)
   d61d8:	4350      	muls	r0, r2
   d61da:	fb04 0003 	mla	r0, r4, r3, r0
   d61de:	fba2 3404 	umull	r3, r4, r2, r4
   d61e2:	1c5a      	adds	r2, r3, #1
   d61e4:	4404      	add	r4, r0
   d61e6:	f144 0000 	adc.w	r0, r4, #0
   d61ea:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d61ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d61f2:	bd10      	pop	{r4, pc}
   d61f4:	2003e460 	.word	0x2003e460
   d61f8:	abcd330e 	.word	0xabcd330e
   d61fc:	e66d1234 	.word	0xe66d1234
   d6200:	0005deec 	.word	0x0005deec
   d6204:	5851f42d 	.word	0x5851f42d
   d6208:	4c957f2d 	.word	0x4c957f2d

000d620c <strcmp>:
   d620c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6210:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6214:	2a01      	cmp	r2, #1
   d6216:	bf28      	it	cs
   d6218:	429a      	cmpcs	r2, r3
   d621a:	d0f7      	beq.n	d620c <strcmp>
   d621c:	1ad0      	subs	r0, r2, r3
   d621e:	4770      	bx	lr

000d6220 <strlen>:
   d6220:	4603      	mov	r3, r0
   d6222:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6226:	2a00      	cmp	r2, #0
   d6228:	d1fb      	bne.n	d6222 <strlen+0x2>
   d622a:	1a18      	subs	r0, r3, r0
   d622c:	3801      	subs	r0, #1
   d622e:	4770      	bx	lr

000d6230 <__register_exitproc>:
   d6230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6234:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d62f0 <__register_exitproc+0xc0>
   d6238:	4606      	mov	r6, r0
   d623a:	f8d8 0000 	ldr.w	r0, [r8]
   d623e:	461f      	mov	r7, r3
   d6240:	460d      	mov	r5, r1
   d6242:	4691      	mov	r9, r2
   d6244:	f000 f856 	bl	d62f4 <__retarget_lock_acquire_recursive>
   d6248:	4b25      	ldr	r3, [pc, #148]	; (d62e0 <__register_exitproc+0xb0>)
   d624a:	681c      	ldr	r4, [r3, #0]
   d624c:	b934      	cbnz	r4, d625c <__register_exitproc+0x2c>
   d624e:	4c25      	ldr	r4, [pc, #148]	; (d62e4 <__register_exitproc+0xb4>)
   d6250:	601c      	str	r4, [r3, #0]
   d6252:	4b25      	ldr	r3, [pc, #148]	; (d62e8 <__register_exitproc+0xb8>)
   d6254:	b113      	cbz	r3, d625c <__register_exitproc+0x2c>
   d6256:	681b      	ldr	r3, [r3, #0]
   d6258:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d625c:	6863      	ldr	r3, [r4, #4]
   d625e:	2b1f      	cmp	r3, #31
   d6260:	dd07      	ble.n	d6272 <__register_exitproc+0x42>
   d6262:	f8d8 0000 	ldr.w	r0, [r8]
   d6266:	f000 f847 	bl	d62f8 <__retarget_lock_release_recursive>
   d626a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d626e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6272:	b34e      	cbz	r6, d62c8 <__register_exitproc+0x98>
   d6274:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6278:	b988      	cbnz	r0, d629e <__register_exitproc+0x6e>
   d627a:	4b1c      	ldr	r3, [pc, #112]	; (d62ec <__register_exitproc+0xbc>)
   d627c:	b923      	cbnz	r3, d6288 <__register_exitproc+0x58>
   d627e:	f8d8 0000 	ldr.w	r0, [r8]
   d6282:	f000 f838 	bl	d62f6 <__retarget_lock_release>
   d6286:	e7f0      	b.n	d626a <__register_exitproc+0x3a>
   d6288:	f44f 7084 	mov.w	r0, #264	; 0x108
   d628c:	f7fe fe42 	bl	d4f14 <malloc>
   d6290:	2800      	cmp	r0, #0
   d6292:	d0f4      	beq.n	d627e <__register_exitproc+0x4e>
   d6294:	2300      	movs	r3, #0
   d6296:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d629a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d629e:	6863      	ldr	r3, [r4, #4]
   d62a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d62a4:	2201      	movs	r2, #1
   d62a6:	409a      	lsls	r2, r3
   d62a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d62ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d62b0:	4313      	orrs	r3, r2
   d62b2:	2e02      	cmp	r6, #2
   d62b4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d62b8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d62bc:	bf02      	ittt	eq
   d62be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d62c2:	431a      	orreq	r2, r3
   d62c4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d62c8:	6863      	ldr	r3, [r4, #4]
   d62ca:	f8d8 0000 	ldr.w	r0, [r8]
   d62ce:	1c5a      	adds	r2, r3, #1
   d62d0:	3302      	adds	r3, #2
   d62d2:	6062      	str	r2, [r4, #4]
   d62d4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d62d8:	f000 f80e 	bl	d62f8 <__retarget_lock_release_recursive>
   d62dc:	2000      	movs	r0, #0
   d62de:	e7c6      	b.n	d626e <__register_exitproc+0x3e>
   d62e0:	2003e7e0 	.word	0x2003e7e0
   d62e4:	2003e754 	.word	0x2003e754
   d62e8:	00000000 	.word	0x00000000
   d62ec:	000d4f15 	.word	0x000d4f15
   d62f0:	2003e4c4 	.word	0x2003e4c4

000d62f4 <__retarget_lock_acquire_recursive>:
   d62f4:	4770      	bx	lr

000d62f6 <__retarget_lock_release>:
   d62f6:	4770      	bx	lr

000d62f8 <__retarget_lock_release_recursive>:
   d62f8:	4770      	bx	lr

000d62fa <link_code_end>:
	...

000d62fc <dynalib_user>:
   d62fc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d630c:	0000 0000 3174 7600 2f31 6564 6976 6563     ....t1.v1/device
   d631c:	2f73 656d 742f 6c65 6d65 7465 7972 7000     s/me/telemetry.p
   d632c:	756c 656d 6f43 6e6e 6365 2874 3a29 4120     lumeConnect(): A
   d633c:	7474 6d65 7470 6e69 2067 6f74 6320 6e6f     ttempting to con
   d634c:	656e 7463 7420 206f 6854 6e69 7367 6f62     nect to Thingsbo
   d635c:	7261 2064 6573 7672 7265 6a00 7877 3874     ard server.jwxt8
   d636c:	3576 5373 384f 3133 7350 3755 3042 0056     v5sSO831PsU7B0V.
   d637c:	7241 6f67 006e 6c70 6d75 4365 6e6f 656e     Argon.plumeConne
   d638c:	7463 2928 203a 6f43 6e6e 6365 6574 0064     ct(): Connected.
   d639c:	6c70 6d75 4365 6e6f 656e 7463 2928 203a     plumeConnect(): 
   d63ac:	6f43 6e6e 6365 6974 6e6f 6620 6961 656c     Connection faile
   d63bc:	2c64 7220 7465 7972 6920 206e 2033 6573     d, retry in 3 se
   d63cc:	6f63 646e 0073 0000                         conds...

000d63d4 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d63dc:	40b1 000d 40c5 000d 755c 3025 5834 0000     .@...@..\u%04X..

000d63ec <_ZTV10JsonBuffer>:
	...
   d63f4:	4279 000d 4295 000d                         yB...B..

000d63fc <_ZTV10JsonWriter>:
	...
   d6404:	42a9 000d 42bd 000d 0400 514d 5454 0004     .B...B....MQTT..

000d6414 <_ZTVN5spark12NetworkClassE>:
	...
   d641c:	4f65 000d 4f6f 000d 4f79 000d 4f83 000d     eO..oO..yO...O..
   d642c:	4f8d 000d 4f99 000d 4fa5 000d 4fad 000d     .O...O...O...O..
   d643c:	4fb5 000d 4fc1 000d 4fc9 000d 4fd3 000d     .O...O...O...O..
   d644c:	4fdd 000d                                   .O..

000d6450 <_ZTVN5spark9WiFiClassE>:
	...
   d6458:	5123 000d 5119 000d 510f 000d 50c5 000d     #Q...Q...Q...P..
   d6468:	5103 000d 50f7 000d 4fa5 000d 4fad 000d     .Q...P...O...O..
   d6478:	50eb 000d 50e3 000d 50d9 000d 50cf 000d     .P...P...P...P..
   d6488:	4fdd 000d 6977 6972 676e 7200 6365 2076     .O..wiring.recv 
   d6498:	7265 6f72 2072 203d 6425 0000               error = %d..

000d64a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d64ac:	51c3 000d 51e5 000d 56ff 000d 51f3 000d     .Q...Q...V...Q..
   d64bc:	51c5 000d                                   .Q..

000d64c0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000d64c8 <_ZTV9TCPClient>:
	...
   d64d0:	5271 000d 52a5 000d 5141 000d 515b 000d     qR...R..AQ..[Q..
   d64e0:	5595 000d 5307 000d 52d9 000d 5185 000d     .U...S...R...Q..
   d64f0:	549d 000d 5391 000d 533b 000d 5649 000d     .T...S..;S..IV..
   d6500:	5187 000d 51b9 000d 516d 000d 51f7 000d     .Q...Q..mQ...Q..
   d6510:	52b9 000d                                   .R..

000d6514 <_ZTV7TwoWire>:
	...
   d651c:	5743 000d 578d 000d 5765 000d 5745 000d     CW...W..eW..EW..
   d652c:	576d 000d 5775 000d 577d 000d 5785 000d     mW..uW..}W...W..

000d653c <_ZTV11USARTSerial>:
	...
   d6544:	57c1 000d 582f 000d 5807 000d 5c3d 000d     .W../X...X..=\..
   d6554:	57d7 000d 57f3 000d 57e5 000d 5801 000d     .W...W...W...X..
   d6564:	57c3 000d 57c9 000d                         .W...W..

000d656c <_ZTV9USBSerial>:
	...
   d6574:	58bb 000d 5923 000d 58f9 000d 5c3d 000d     .X..#Y...X..=\..
   d6584:	58eb 000d 58bd 000d 58cd 000d 591d 000d     .X...X...X...Y..
   d6594:	58dd 000d 58b5 000d                         .X...X..

000d659c <_ZTV9IPAddress>:
	...
   d65a4:	59cd 000d 59bd 000d 59bf 000d 5925 252d     .Y...Y...Y..%Y-%
   d65b4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d65c4:	7361 7463 6d69 0065 7061 0070               asctime.app.

000d65d0 <_ZTVN5spark13EthernetClassE>:
	...
   d65d8:	5d8f 000d 5d85 000d 5d7b 000d 5d71 000d     .]...]..{]..q]..
   d65e8:	5d65 000d 5d59 000d 4fa5 000d 4fad 000d     e]..Y]...O...O..
   d65f8:	5d4d 000d 5d45 000d 5d3b 000d 5d31 000d     M]..E]..;]..1]..
   d6608:	4fdd 000d                                   .O..

000d660c <_ZSt7nothrow>:
	...

000d660d <_ZTSSt19_Sp_make_shared_tag>:
   d660d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d661d:	6572 5f64 6174 0067 0000                     red_tag....

000d6628 <_ZTISt19_Sp_make_shared_tag>:
   d6628:	6668 000d 660d 000d                         hf...f..

000d6630 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d6630:	66c8 000d 663c 000d 66ec 000d               .f..<f...f..

000d663c <_ZTSN10__cxxabiv117__class_type_infoE>:
   d663c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d664c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d665c:	0045 0000                                   E...

000d6660 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d6660:	0000 0000 6630 000d 5f4d 000d 5f61 000d     ....0f..M_..a_..
   d6670:	60f5 000d 60f5 000d 5fcb 000d 5f0d 000d     .`...`..._..._..
   d6680:	5fb3 000d 5f75 000d 5f41 000d               ._..u_..A_..

000d668c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d668c:	66c8 000d 6698 000d 6630 000d               .f...f..0f..

000d6698 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d6698:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d66a8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d66b8:	666e 456f 0000 0000                         nfoE....

000d66c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d66c0:	0000 0000 668c 000d 5ff5 000d 6009 000d     .....f..._...`..
   d66d0:	60f5 000d 60f5 000d 5fcb 000d 5f0d 000d     .`...`..._..._..
   d66e0:	60c9 000d 6055 000d 601d 000d               .`..U`...`..

000d66ec <_ZTISt9type_info>:
   d66ec:	6668 000d 66f4 000d                         hf...f..

000d66f4 <_ZTSSt9type_info>:
   d66f4:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d6701 <link_const_variable_data_end>:
   d6701:	00          	.byte	0x00
	...

000d6704 <link_constructors_location>:
   d6704:	000d4259 	.word	0x000d4259
   d6708:	000d50b1 	.word	0x000d50b1
   d670c:	000d512d 	.word	0x000d512d
   d6710:	000d5c05 	.word	0x000d5c05
   d6714:	000d5c19 	.word	0x000d5c19
   d6718:	000d5c2d 	.word	0x000d5c2d
   d671c:	000d5cfd 	.word	0x000d5cfd
   d6720:	000d5d0d 	.word	0x000d5d0d
   d6724:	000d5d99 	.word	0x000d5d99

000d6728 <link_constructors_end>:
	...
