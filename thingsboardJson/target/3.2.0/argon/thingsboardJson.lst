
/home/sun/Documents/SwiftletLaboratories-animated-octo-waddle/thingsboardJson/target/3.2.0/argon/thingsboardJson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002894  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b68b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  2003e558  000b68b4  0001e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000218  2003e5d8  2003e5d8  0002e5d8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b6934  000b6934  00026934  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b695c  000b695c  0002695c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010637f  00000000  00000000  00026960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000127e4  00000000  00000000  0012ccdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00002e08  00000000  00000000  0013f4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00037b70  00000000  00000000  001422cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0003dab3  00000000  00000000  00179e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0012b213  00000000  00000000  001b78ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00038eec  00000000  00000000  002e2b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000a5e8  00000000  00000000  0031b9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000817c  00000000  00000000  00325fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 f8d9 	bl	b61e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 f8e1 	bl	b6200 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e558 	.word	0x2003e558
   b4048:	000b68b4 	.word	0x000b68b4
   b404c:	2003e5d8 	.word	0x2003e5d8
   b4050:	2003e5d8 	.word	0x2003e5d8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fdbd 	bl	b5bdc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6880 	.word	0x000b6880
   b407c:	000b68a4 	.word	0x000b68a4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b860 	b.w	b4144 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f907 	bl	b4298 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bd5d 	b.w	b5b4c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bf67 	b.w	b4f64 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bf65 	b.w	b4f64 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bf6b 	b.w	b4f74 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   b40b0:	b510      	push	{r4, lr}
   b40b2:	4b03      	ldr	r3, [pc, #12]	; (b40c0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   b40b4:	6003      	str	r3, [r0, #0]
   b40b6:	4604      	mov	r4, r0
   b40b8:	f000 f92e 	bl	b4318 <_ZN10JsonWriterD1Ev>
   b40bc:	4620      	mov	r0, r4
   b40be:	bd10      	pop	{r4, pc}
   b40c0:	000b64c4 	.word	0x000b64c4

000b40c4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   b40c4:	b510      	push	{r4, lr}
   b40c6:	4604      	mov	r4, r0
   b40c8:	f7ff fff2 	bl	b40b0 <_ZN16JsonWriterStaticILj256EED1Ev>
   b40cc:	4620      	mov	r0, r4
   b40ce:	f44f 7198 	mov.w	r1, #304	; 0x130
   b40d2:	f7ff ffe2 	bl	b409a <_ZdlPvj>
   b40d6:	4620      	mov	r0, r4
   b40d8:	bd10      	pop	{r4, pc}
	...

000b40dc <_Z12plumeConnectv>:
    onOff = !onOff;
  }
}

void plumeConnect()
{
   b40dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!plume.connected())
   b40de:	4d13      	ldr	r5, [pc, #76]	; (b412c <_Z12plumeConnectv+0x50>)
  {
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b40e0:	4e13      	ldr	r6, [pc, #76]	; (b4130 <_Z12plumeConnectv+0x54>)
    if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b40e2:	4f14      	ldr	r7, [pc, #80]	; (b4134 <_Z12plumeConnectv+0x58>)
  while (!plume.connected())
   b40e4:	4811      	ldr	r0, [pc, #68]	; (b412c <_Z12plumeConnectv+0x50>)
   b40e6:	f000 fb76 	bl	b47d6 <_ZN12PubSubClient9connectedEv>
   b40ea:	4604      	mov	r4, r0
   b40ec:	b9e0      	cbnz	r0, b4128 <_Z12plumeConnectv+0x4c>
    Serial.println("plumeConnect(): Attempting to connect to Thingsboard server");
   b40ee:	f001 fc57 	bl	b59a0 <_Z16_fetch_usbserialv>
   b40f2:	4631      	mov	r1, r6
   b40f4:	f001 fdf7 	bl	b5ce6 <_ZN5Print7printlnEPKc>
    if (plume.connect("Argon", TOKEN, NULL)) // ClientID, User, PW
   b40f8:	490f      	ldr	r1, [pc, #60]	; (b4138 <_Z12plumeConnectv+0x5c>)
   b40fa:	4623      	mov	r3, r4
   b40fc:	463a      	mov	r2, r7
   b40fe:	4628      	mov	r0, r5
   b4100:	f000 fc48 	bl	b4994 <_ZN12PubSubClient7connectEPKcS1_S1_>
   b4104:	b130      	cbz	r0, b4114 <_Z12plumeConnectv+0x38>
    {
      Serial.println("plumeConnect(): Connected");
   b4106:	f001 fc4b 	bl	b59a0 <_Z16_fetch_usbserialv>
    }
    else
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
    delay(3000);
  }
   b410a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      Serial.println("plumeConnect(): Connected");
   b410e:	490b      	ldr	r1, [pc, #44]	; (b413c <_Z12plumeConnectv+0x60>)
   b4110:	f001 bde9 	b.w	b5ce6 <_ZN5Print7printlnEPKc>
      Serial.println("plumeConnect(): Connection failed, retry in 3 seconds");
   b4114:	f001 fc44 	bl	b59a0 <_Z16_fetch_usbserialv>
   b4118:	4909      	ldr	r1, [pc, #36]	; (b4140 <_Z12plumeConnectv+0x64>)
   b411a:	f001 fde4 	bl	b5ce6 <_ZN5Print7printlnEPKc>
    delay(3000);
   b411e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4122:	f001 fd93 	bl	b5c4c <delay>
  while (!plume.connected())
   b4126:	e7dd      	b.n	b40e4 <_Z12plumeConnectv+0x8>
   b4128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b412a:	bf00      	nop
   b412c:	2003e5dc 	.word	0x2003e5dc
   b4130:	000b63ec 	.word	0x000b63ec
   b4134:	000b6428 	.word	0x000b6428
   b4138:	000b643d 	.word	0x000b643d
   b413c:	000b6443 	.word	0x000b6443
   b4140:	000b645d 	.word	0x000b645d

000b4144 <setup>:
{
   b4144:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b4146:	f001 fc2b 	bl	b59a0 <_Z16_fetch_usbserialv>
   b414a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b414e:	f001 fc1b 	bl	b5988 <_ZN9USBSerial5beginEl>
  pinMode(D7, OUTPUT);
   b4152:	2101      	movs	r1, #1
   b4154:	2007      	movs	r0, #7
   b4156:	f001 ff01 	bl	b5f5c <pinMode>
  plume.setServer(thingsboardServer, MQTTPORT);
   b415a:	f240 725b 	movw	r2, #1883	; 0x75b
   b415e:	4905      	ldr	r1, [pc, #20]	; (b4174 <setup+0x30>)
   b4160:	4805      	ldr	r0, [pc, #20]	; (b4178 <setup+0x34>)
   b4162:	f000 fd16 	bl	b4b92 <_ZN12PubSubClient9setServerEPKct>
  plumeConnect();
   b4166:	f7ff ffb9 	bl	b40dc <_Z12plumeConnectv>
  lastTime = 5000;
   b416a:	4b04      	ldr	r3, [pc, #16]	; (b417c <setup+0x38>)
   b416c:	f241 3288 	movw	r2, #5000	; 0x1388
   b4170:	601a      	str	r2, [r3, #0]
}
   b4172:	bd08      	pop	{r3, pc}
   b4174:	2003e559 	.word	0x2003e559
   b4178:	2003e5dc 	.word	0x2003e5dc
   b417c:	2003e5d8 	.word	0x2003e5d8

000b4180 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b4180:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4182:	4604      	mov	r4, r0
   b4184:	4615      	mov	r5, r2
   b4186:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4188:	f000 f9d2 	bl	b4530 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b418c:	9901      	ldr	r1, [sp, #4]
   b418e:	2201      	movs	r2, #1
   b4190:	4620      	mov	r0, r4
   b4192:	f000 f93b 	bl	b440c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4196:	4620      	mov	r0, r4
   b4198:	213a      	movs	r1, #58	; 0x3a
   b419a:	f000 f8eb 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b419e:	4904      	ldr	r1, [pc, #16]	; (b41b0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b41a0:	462a      	mov	r2, r5
   b41a2:	4620      	mov	r0, r4
	}
   b41a4:	b003      	add	sp, #12
   b41a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b41aa:	f000 b922 	b.w	b43f2 <_ZN10JsonWriter13insertsprintfEPKcz>
   b41ae:	bf00      	nop
   b41b0:	000b6588 	.word	0x000b6588

000b41b4 <_Z17createJsonPayloadv>:
{
   b41b4:	b570      	push	{r4, r5, r6, lr}
   b41b6:	b0cc      	sub	sp, #304	; 0x130
    jw.insertKeyValue("t1", random(75000, 175000) / 1000);
   b41b8:	4e2c      	ldr	r6, [pc, #176]	; (b426c <_Z17createJsonPayloadv+0xb8>)
   b41ba:	4d2d      	ldr	r5, [pc, #180]	; (b4270 <_Z17createJsonPayloadv+0xbc>)
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   b41bc:	a90c      	add	r1, sp, #48	; 0x30
   b41be:	f44f 7280 	mov.w	r2, #256	; 0x100
   b41c2:	4668      	mov	r0, sp
   b41c4:	f000 f8c4 	bl	b4350 <_ZN10JsonWriterC1EPcj>
   b41c8:	4b2a      	ldr	r3, [pc, #168]	; (b4274 <_Z17createJsonPayloadv+0xc0>)
   b41ca:	9300      	str	r3, [sp, #0]
	bool startObject() { return startObjectOrArray('{', '}'); };
   b41cc:	227d      	movs	r2, #125	; 0x7d
   b41ce:	217b      	movs	r1, #123	; 0x7b
   b41d0:	4668      	mov	r0, sp
   b41d2:	f000 f9b8 	bl	b4546 <_ZN10JsonWriter18startObjectOrArrayEcc>
   b41d6:	4631      	mov	r1, r6
   b41d8:	4628      	mov	r0, r5
   b41da:	f001 fae8 	bl	b57ae <_Z6randomii>
   b41de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   b41e2:	4925      	ldr	r1, [pc, #148]	; (b4278 <_Z17createJsonPayloadv+0xc4>)
   b41e4:	fb90 f2f4 	sdiv	r2, r0, r4
   b41e8:	4668      	mov	r0, sp
   b41ea:	f7ff ffc9 	bl	b4180 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("t2", random(75000, 175000) / 1000);
   b41ee:	4631      	mov	r1, r6
   b41f0:	4628      	mov	r0, r5
   b41f2:	f001 fadc 	bl	b57ae <_Z6randomii>
   b41f6:	4921      	ldr	r1, [pc, #132]	; (b427c <_Z17createJsonPayloadv+0xc8>)
   b41f8:	fb90 f2f4 	sdiv	r2, r0, r4
   b41fc:	4668      	mov	r0, sp
   b41fe:	f7ff ffbf 	bl	b4180 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("t3", random(75000, 175000) / 1000);
   b4202:	4631      	mov	r1, r6
   b4204:	4628      	mov	r0, r5
   b4206:	f001 fad2 	bl	b57ae <_Z6randomii>
   b420a:	491d      	ldr	r1, [pc, #116]	; (b4280 <_Z17createJsonPayloadv+0xcc>)
   b420c:	fb90 f2f4 	sdiv	r2, r0, r4
   b4210:	4668      	mov	r0, sp
   b4212:	f7ff ffb5 	bl	b4180 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("t4", random(75000, 175000) / 1000);
   b4216:	4631      	mov	r1, r6
   b4218:	4628      	mov	r0, r5
   b421a:	f001 fac8 	bl	b57ae <_Z6randomii>
   b421e:	4919      	ldr	r1, [pc, #100]	; (b4284 <_Z17createJsonPayloadv+0xd0>)
   b4220:	fb90 f2f4 	sdiv	r2, r0, r4
   b4224:	4668      	mov	r0, sp
   b4226:	f7ff ffab 	bl	b4180 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("t5", random(75000, 175000) / 1000);
   b422a:	4631      	mov	r1, r6
   b422c:	4628      	mov	r0, r5
   b422e:	f001 fabe 	bl	b57ae <_Z6randomii>
   b4232:	4915      	ldr	r1, [pc, #84]	; (b4288 <_Z17createJsonPayloadv+0xd4>)
   b4234:	fb90 f2f4 	sdiv	r2, r0, r4
    digitalWrite(LEDPIN, onOff);
   b4238:	4c14      	ldr	r4, [pc, #80]	; (b428c <_Z17createJsonPayloadv+0xd8>)
    jw.insertKeyValue("t5", random(75000, 175000) / 1000);
   b423a:	4668      	mov	r0, sp
   b423c:	f7ff ffa0 	bl	b4180 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    plume.publish("v1/devices/me/telemetry", jw.getBuffer());
   b4240:	9a01      	ldr	r2, [sp, #4]
   b4242:	4913      	ldr	r1, [pc, #76]	; (b4290 <_Z17createJsonPayloadv+0xdc>)
   b4244:	4813      	ldr	r0, [pc, #76]	; (b4294 <_Z17createJsonPayloadv+0xe0>)
   b4246:	f000 fc93 	bl	b4b70 <_ZN12PubSubClient7publishEPKcS1_>
    digitalWrite(LEDPIN, onOff);
   b424a:	7821      	ldrb	r1, [r4, #0]
   b424c:	2007      	movs	r0, #7
   b424e:	f001 fe96 	bl	b5f7e <digitalWrite>
    onOff = !onOff;
   b4252:	7823      	ldrb	r3, [r4, #0]

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   b4254:	4668      	mov	r0, sp
   b4256:	f083 0301 	eor.w	r3, r3, #1
   b425a:	7023      	strb	r3, [r4, #0]
   b425c:	f000 f898 	bl	b4390 <_ZN10JsonWriter19finishObjectOrArrayEv>
  JsonWriterStatic<256> jw;
   b4260:	4668      	mov	r0, sp
   b4262:	f7ff ff25 	bl	b40b0 <_ZN16JsonWriterStaticILj256EED1Ev>
}
   b4266:	b04c      	add	sp, #304	; 0x130
   b4268:	bd70      	pop	{r4, r5, r6, pc}
   b426a:	bf00      	nop
   b426c:	0002ab98 	.word	0x0002ab98
   b4270:	000124f8 	.word	0x000124f8
   b4274:	000b64c4 	.word	0x000b64c4
   b4278:	000b6493 	.word	0x000b6493
   b427c:	000b6496 	.word	0x000b6496
   b4280:	000b6499 	.word	0x000b6499
   b4284:	000b649c 	.word	0x000b649c
   b4288:	000b649f 	.word	0x000b649f
   b428c:	2003e558 	.word	0x2003e558
   b4290:	000b64a2 	.word	0x000b64a2
   b4294:	2003e5dc 	.word	0x2003e5dc

000b4298 <loop>:
{
   b4298:	b510      	push	{r4, lr}
  if (millis() - lastTime > 5000)
   b429a:	4c09      	ldr	r4, [pc, #36]	; (b42c0 <loop+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b429c:	f000 fd96 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
   b42a0:	6823      	ldr	r3, [r4, #0]
   b42a2:	1ac0      	subs	r0, r0, r3
   b42a4:	f241 3388 	movw	r3, #5000	; 0x1388
   b42a8:	4298      	cmp	r0, r3
   b42aa:	d904      	bls.n	b42b6 <loop+0x1e>
    createJsonPayload();
   b42ac:	f7ff ff82 	bl	b41b4 <_Z17createJsonPayloadv>
   b42b0:	f000 fd8c 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   b42b4:	6020      	str	r0, [r4, #0]
}
   b42b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  plume.loop();
   b42ba:	4802      	ldr	r0, [pc, #8]	; (b42c4 <loop+0x2c>)
   b42bc:	f000 bb74 	b.w	b49a8 <_ZN12PubSubClient4loopEv>
   b42c0:	2003e5d8 	.word	0x2003e5d8
   b42c4:	2003e5dc 	.word	0x2003e5dc

000b42c8 <_GLOBAL__sub_I_thingsboardServer>:
   b42c8:	b508      	push	{r3, lr}
TCPClient pubsub;
   b42ca:	4905      	ldr	r1, [pc, #20]	; (b42e0 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   b42cc:	4608      	mov	r0, r1
   b42ce:	f001 fa45 	bl	b575c <_ZN9TCPClientC1Ev>
   b42d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
PubSubClient plume((Client &)pubsub); // mqtt server named after plume-toed swiftlet
   b42d6:	4902      	ldr	r1, [pc, #8]	; (b42e0 <_GLOBAL__sub_I_thingsboardServer+0x18>)
   b42d8:	4802      	ldr	r0, [pc, #8]	; (b42e4 <_GLOBAL__sub_I_thingsboardServer+0x1c>)
   b42da:	f000 b95d 	b.w	b4598 <_ZN12PubSubClientC1ER6Client>
   b42de:	bf00      	nop
   b42e0:	2003e69c 	.word	0x2003e69c
   b42e4:	2003e5dc 	.word	0x2003e5dc

000b42e8 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b42e8:	b510      	push	{r4, lr}
   b42ea:	4b05      	ldr	r3, [pc, #20]	; (b4300 <_ZN10JsonBufferD1Ev+0x18>)
   b42ec:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b42ee:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b42f0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b42f2:	b91b      	cbnz	r3, b42fc <_ZN10JsonBufferD1Ev+0x14>
   b42f4:	6840      	ldr	r0, [r0, #4]
   b42f6:	b108      	cbz	r0, b42fc <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b42f8:	f000 fe3c 	bl	b4f74 <free>
	}
}
   b42fc:	4620      	mov	r0, r4
   b42fe:	bd10      	pop	{r4, pc}
   b4300:	000b64dc 	.word	0x000b64dc

000b4304 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b4304:	b510      	push	{r4, lr}
   b4306:	4604      	mov	r4, r0
}
   b4308:	f7ff ffee 	bl	b42e8 <_ZN10JsonBufferD1Ev>
   b430c:	4620      	mov	r0, r4
   b430e:	2114      	movs	r1, #20
   b4310:	f7ff fec3 	bl	b409a <_ZdlPvj>
   b4314:	4620      	mov	r0, r4
   b4316:	bd10      	pop	{r4, pc}

000b4318 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b4318:	b510      	push	{r4, lr}
   b431a:	4b03      	ldr	r3, [pc, #12]	; (b4328 <_ZN10JsonWriterD1Ev+0x10>)
   b431c:	6003      	str	r3, [r0, #0]
   b431e:	4604      	mov	r4, r0
   b4320:	f7ff ffe2 	bl	b42e8 <_ZN10JsonBufferD1Ev>

}
   b4324:	4620      	mov	r0, r4
   b4326:	bd10      	pop	{r4, pc}
   b4328:	000b64ec 	.word	0x000b64ec

000b432c <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b432c:	b510      	push	{r4, lr}
   b432e:	4604      	mov	r4, r0
}
   b4330:	f7ff fff2 	bl	b4318 <_ZN10JsonWriterD1Ev>
   b4334:	4620      	mov	r0, r4
   b4336:	2130      	movs	r1, #48	; 0x30
   b4338:	f7ff feaf 	bl	b409a <_ZdlPvj>
   b433c:	4620      	mov	r0, r4
   b433e:	bd10      	pop	{r4, pc}

000b4340 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   b4340:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   b4342:	2201      	movs	r2, #1
	offset = 0;
   b4344:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b4346:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b4348:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   b434a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   b434e:	4770      	bx	lr

000b4350 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b4350:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b4354:	b508      	push	{r3, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b4356:	2200      	movs	r2, #0
   b4358:	60c2      	str	r2, [r0, #12]
   b435a:	2201      	movs	r2, #1
   b435c:	7402      	strb	r2, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b435e:	4a04      	ldr	r2, [pc, #16]	; (b4370 <_ZN10JsonWriterC1EPcj+0x20>)
   b4360:	6002      	str	r2, [r0, #0]
   b4362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4366:	62c2      	str	r2, [r0, #44]	; 0x2c
	init();
   b4368:	f7ff ffea 	bl	b4340 <_ZN10JsonWriter4initEv>
}
   b436c:	bd08      	pop	{r3, pc}
   b436e:	bf00      	nop
   b4370:	000b64ec 	.word	0x000b64ec

000b4374 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   b4374:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b4378:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b437a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b437c:	bf3f      	itttt	cc
   b437e:	6842      	ldrcc	r2, [r0, #4]
   b4380:	1c5c      	addcc	r4, r3, #1
   b4382:	60c4      	strcc	r4, [r0, #12]
   b4384:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   b4386:	bf24      	itt	cs
   b4388:	2301      	movcs	r3, #1
   b438a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   b438e:	bd10      	pop	{r4, pc}

000b4390 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b4390:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b4392:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b4394:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b4396:	b143      	cbz	r3, b43aa <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b4398:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b439c:	7e59      	ldrb	r1, [r3, #25]
   b439e:	b109      	cbz	r1, b43a4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b43a0:	f7ff ffe8 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b43a4:	6963      	ldr	r3, [r4, #20]
   b43a6:	3b01      	subs	r3, #1
   b43a8:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b43aa:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b43ae:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b43b0:	4288      	cmp	r0, r1
   b43b2:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b43b6:	bf2a      	itet	cs
   b43b8:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b43ba:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b43bc:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b43c0:	bd10      	pop	{r4, pc}

000b43c2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b43c2:	b570      	push	{r4, r5, r6, lr}
   b43c4:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b43c6:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b43ca:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b43cc:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b43ce:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b43d0:	4430      	add	r0, r6
   b43d2:	460a      	mov	r2, r1
   b43d4:	4629      	mov	r1, r5
   b43d6:	f000 fdd5 	bl	b4f84 <vsnprintf>
	if (count <= spaceAvailable) {
   b43da:	4285      	cmp	r5, r0
		offset += count;
   b43dc:	bf2d      	iteet	cs
   b43de:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   b43e0:	68a3      	ldrcc	r3, [r4, #8]
   b43e2:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b43e4:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b43e6:	bf36      	itet	cc
   b43e8:	2301      	movcc	r3, #1
		offset += count;
   b43ea:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b43ec:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   b43f0:	bd70      	pop	{r4, r5, r6, pc}

000b43f2 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b43f2:	b40e      	push	{r1, r2, r3}
   b43f4:	b503      	push	{r0, r1, lr}
   b43f6:	aa03      	add	r2, sp, #12
   b43f8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b43fc:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b43fe:	f7ff ffe0 	bl	b43c2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b4402:	b002      	add	sp, #8
   b4404:	f85d eb04 	ldr.w	lr, [sp], #4
   b4408:	b003      	add	sp, #12
   b440a:	4770      	bx	lr

000b440c <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4410:	4604      	mov	r4, r0
   b4412:	460e      	mov	r6, r1
	if (quoted) {
   b4414:	4617      	mov	r7, r2
   b4416:	b112      	cbz	r2, b441e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b4418:	2122      	movs	r1, #34	; 0x22
   b441a:	f7ff ffab 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b441e:	f8df 810c 	ldr.w	r8, [pc, #268]	; b452c <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b4422:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b4424:	5d71      	ldrb	r1, [r6, r5]
   b4426:	eb06 0905 	add.w	r9, r6, r5
   b442a:	2900      	cmp	r1, #0
   b442c:	d074      	beq.n	b4518 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b442e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b4432:	429a      	cmp	r2, r3
   b4434:	d270      	bcs.n	b4518 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b4436:	060b      	lsls	r3, r1, #24
   b4438:	d534      	bpl.n	b44a4 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b443a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b443e:	2be0      	cmp	r3, #224	; 0xe0
   b4440:	f105 0901 	add.w	r9, r5, #1
   b4444:	d11d      	bne.n	b4482 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b4446:	f816 2009 	ldrb.w	r2, [r6, r9]
   b444a:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b444e:	2b80      	cmp	r3, #128	; 0x80
   b4450:	d139      	bne.n	b44c6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b4452:	f105 0902 	add.w	r9, r5, #2
   b4456:	f816 3009 	ldrb.w	r3, [r6, r9]
   b445a:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b445e:	2880      	cmp	r0, #128	; 0x80
   b4460:	d131      	bne.n	b44c6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b4462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b4466:	0192      	lsls	r2, r2, #6
   b4468:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b446c:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b4470:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b4472:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b4474:	4641      	mov	r1, r8
   b4476:	4620      	mov	r0, r4
   b4478:	f7ff ffbb 	bl	b43f2 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b447c:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b447e:	3501      	adds	r5, #1
   b4480:	e7d0      	b.n	b4424 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b4482:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b4486:	2bc0      	cmp	r3, #192	; 0xc0
   b4488:	d11d      	bne.n	b44c6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b448a:	f816 3009 	ldrb.w	r3, [r6, r9]
   b448e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b4492:	2a80      	cmp	r2, #128	; 0x80
   b4494:	d117      	bne.n	b44c6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b4496:	0189      	lsls	r1, r1, #6
   b4498:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b44a0:	431a      	orrs	r2, r3
   b44a2:	e7e7      	b.n	b4474 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b44a4:	290d      	cmp	r1, #13
   b44a6:	d80a      	bhi.n	b44be <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b44a8:	2907      	cmp	r1, #7
   b44aa:	d90c      	bls.n	b44c6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b44ac:	f1a1 0308 	sub.w	r3, r1, #8
   b44b0:	2b05      	cmp	r3, #5
   b44b2:	d808      	bhi.n	b44c6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b44b4:	e8df f003 	tbb	[pc, r3]
   b44b8:	07172309 	.word	0x07172309
   b44bc:	1d11      	.short	0x1d11
   b44be:	2922      	cmp	r1, #34	; 0x22
   b44c0:	d023      	beq.n	b450a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b44c2:	295c      	cmp	r1, #92	; 0x5c
   b44c4:	d021      	beq.n	b450a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b44c6:	4620      	mov	r0, r4
   b44c8:	e004      	b.n	b44d4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b44ca:	215c      	movs	r1, #92	; 0x5c
   b44cc:	4620      	mov	r0, r4
   b44ce:	f7ff ff51 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b44d2:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b44d4:	f7ff ff4e 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				break;
   b44d8:	e7d1      	b.n	b447e <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b44da:	215c      	movs	r1, #92	; 0x5c
   b44dc:	4620      	mov	r0, r4
   b44de:	f7ff ff49 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b44e2:	2166      	movs	r1, #102	; 0x66
   b44e4:	e7f6      	b.n	b44d4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b44e6:	215c      	movs	r1, #92	; 0x5c
   b44e8:	4620      	mov	r0, r4
   b44ea:	f7ff ff43 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b44ee:	216e      	movs	r1, #110	; 0x6e
   b44f0:	e7f0      	b.n	b44d4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b44f2:	215c      	movs	r1, #92	; 0x5c
   b44f4:	4620      	mov	r0, r4
   b44f6:	f7ff ff3d 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b44fa:	2172      	movs	r1, #114	; 0x72
   b44fc:	e7ea      	b.n	b44d4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b44fe:	215c      	movs	r1, #92	; 0x5c
   b4500:	4620      	mov	r0, r4
   b4502:	f7ff ff37 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b4506:	2174      	movs	r1, #116	; 0x74
   b4508:	e7e4      	b.n	b44d4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b450a:	215c      	movs	r1, #92	; 0x5c
   b450c:	4620      	mov	r0, r4
   b450e:	f7ff ff31 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b4512:	f899 1000 	ldrb.w	r1, [r9]
   b4516:	e7dd      	b.n	b44d4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b4518:	b12f      	cbz	r7, b4526 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b451a:	4620      	mov	r0, r4
   b451c:	2122      	movs	r1, #34	; 0x22
}
   b451e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b4522:	f7ff bf27 	b.w	b4374 <_ZN10JsonWriter10insertCharEc>
}
   b4526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b452a:	bf00      	nop
   b452c:	000b64cc 	.word	0x000b64cc

000b4530 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   b4530:	6942      	ldr	r2, [r0, #20]
   b4532:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b4536:	7e1a      	ldrb	r2, [r3, #24]
   b4538:	b112      	cbz	r2, b4540 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b453a:	2200      	movs	r2, #0
   b453c:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   b453e:	4770      	bx	lr
		insertChar(',');
   b4540:	212c      	movs	r1, #44	; 0x2c
   b4542:	f7ff bf17 	b.w	b4374 <_ZN10JsonWriter10insertCharEc>

000b4546 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b4546:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b4548:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b454a:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b454c:	3301      	adds	r3, #1
   b454e:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b4550:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b4552:	d80f      	bhi.n	b4574 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b4554:	f7ff ffec 	bl	b4530 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b4558:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b455a:	9901      	ldr	r1, [sp, #4]
   b455c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b4560:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b4562:	2501      	movs	r5, #1
	contextIndex++;
   b4564:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b4566:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b4568:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b456a:	f7ff ff03 	bl	b4374 <_ZN10JsonWriter10insertCharEc>
   b456e:	4628      	mov	r0, r5
}
   b4570:	b002      	add	sp, #8
   b4572:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b4574:	2000      	movs	r0, #0
   b4576:	e7fb      	b.n	b4570 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b4578 <_ZN9IPAddressC1ERKS_>:

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4578:	b570      	push	{r4, r5, r6, lr}
   b457a:	4604      	mov	r4, r0
   b457c:	4b05      	ldr	r3, [pc, #20]	; (b4594 <_ZN9IPAddressC1ERKS_+0x1c>)
   b457e:	f844 3b04 	str.w	r3, [r4], #4
   b4582:	1d0d      	adds	r5, r1, #4
   b4584:	4606      	mov	r6, r0
   b4586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b458a:	682b      	ldr	r3, [r5, #0]
   b458c:	7023      	strb	r3, [r4, #0]
   b458e:	4630      	mov	r0, r6
   b4590:	bd70      	pop	{r4, r5, r6, pc}
   b4592:	bf00      	nop
   b4594:	000b668c 	.word	0x000b668c

000b4598 <_ZN12PubSubClientC1ER6Client>:
    this->_client = NULL;
    this->stream = NULL;
    setCallback(NULL);
}

PubSubClient::PubSubClient(Client& client) {
   b4598:	b538      	push	{r3, r4, r5, lr}
   b459a:	4604      	mov	r4, r0
   b459c:	3098      	adds	r0, #152	; 0x98
   b459e:	460d      	mov	r5, r1
   b45a0:	f001 fa5e 	bl	b5a60 <_ZN9IPAddressC1Ev>
    this->_state = MQTT_DISCONNECTED;
   b45a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b45a8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    setClient(client);
    this->stream = NULL;
   b45ac:	2300      	movs	r3, #0
    this->callback = callback;
    return *this;
}

PubSubClient& PubSubClient::setClient(Client& client){
    this->_client = &client;
   b45ae:	6025      	str	r5, [r4, #0]
    this->stream = NULL;
   b45b0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
   b45b4:	4620      	mov	r0, r4
   b45b6:	bd38      	pop	{r3, r4, r5, pc}

000b45b8 <_ZN12PubSubClient8readByteEPh>:
boolean PubSubClient::readByte(uint8_t * result) {
   b45b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b45bc:	4605      	mov	r5, r0
   b45be:	460e      	mov	r6, r1
   b45c0:	f000 fc04 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b45c4:	f643 2897 	movw	r8, #14999	; 0x3a97
   b45c8:	4607      	mov	r7, r0
   while(!_client->available()) {
   b45ca:	6828      	ldr	r0, [r5, #0]
   b45cc:	6803      	ldr	r3, [r0, #0]
   b45ce:	691b      	ldr	r3, [r3, #16]
   b45d0:	4798      	blx	r3
   b45d2:	4604      	mov	r4, r0
   b45d4:	b930      	cbnz	r0, b45e4 <_ZN12PubSubClient8readByteEPh+0x2c>
   b45d6:	f000 fbf9 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 1000)){
   b45da:	1bc3      	subs	r3, r0, r7
   b45dc:	4543      	cmp	r3, r8
   b45de:	d9f4      	bls.n	b45ca <_ZN12PubSubClient8readByteEPh+0x12>
       return false;
   b45e0:	4620      	mov	r0, r4
   b45e2:	e005      	b.n	b45f0 <_ZN12PubSubClient8readByteEPh+0x38>
   b45e4:	6828      	ldr	r0, [r5, #0]
   *result = _client->read();
   b45e6:	6803      	ldr	r3, [r0, #0]
   b45e8:	695b      	ldr	r3, [r3, #20]
   b45ea:	4798      	blx	r3
   b45ec:	7030      	strb	r0, [r6, #0]
   b45ee:	2001      	movs	r0, #1
}
   b45f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b45f4 <_ZN12PubSubClient8readByteEPhPt>:
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b45f4:	b538      	push	{r3, r4, r5, lr}
  uint16_t current_index = *index;
   b45f6:	8815      	ldrh	r5, [r2, #0]
  if(readByte(write_address)){
   b45f8:	4429      	add	r1, r5
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
   b45fa:	4614      	mov	r4, r2
  if(readByte(write_address)){
   b45fc:	f7ff ffdc 	bl	b45b8 <_ZN12PubSubClient8readByteEPh>
   b4600:	b108      	cbz	r0, b4606 <_ZN12PubSubClient8readByteEPhPt+0x12>
    *index = current_index + 1;
   b4602:	3501      	adds	r5, #1
   b4604:	8025      	strh	r5, [r4, #0]
}
   b4606:	bd38      	pop	{r3, r4, r5, pc}

000b4608 <_ZN12PubSubClient10readPacketEPh>:
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b4608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(!readByte(buffer, &len)) return 0;
   b460c:	1d05      	adds	r5, r0, #4
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b460e:	4688      	mov	r8, r1
    uint16_t len = 0;
   b4610:	2700      	movs	r7, #0
    if(!readByte(buffer, &len)) return 0;
   b4612:	f10d 0206 	add.w	r2, sp, #6
   b4616:	4629      	mov	r1, r5
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   b4618:	4604      	mov	r4, r0
    uint16_t len = 0;
   b461a:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(!readByte(buffer, &len)) return 0;
   b461e:	f7ff ffe9 	bl	b45f4 <_ZN12PubSubClient8readByteEPhPt>
   b4622:	b918      	cbnz	r0, b462c <_ZN12PubSubClient10readPacketEPh+0x24>
   b4624:	2000      	movs	r0, #0
}
   b4626:	b003      	add	sp, #12
   b4628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b462c:	f894 9004 	ldrb.w	r9, [r4, #4]
    uint8_t digit = 0;
   b4630:	f88d 7005 	strb.w	r7, [sp, #5]
    uint32_t multiplier = 1;
   b4634:	2601      	movs	r6, #1
        if(!readByte(&digit)) return 0;
   b4636:	f10d 0105 	add.w	r1, sp, #5
   b463a:	4620      	mov	r0, r4
   b463c:	f7ff ffbc 	bl	b45b8 <_ZN12PubSubClient8readByteEPh>
   b4640:	2800      	cmp	r0, #0
   b4642:	d0ef      	beq.n	b4624 <_ZN12PubSubClient10readPacketEPh+0x1c>
        buffer[len++] = digit;
   b4644:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b4648:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b464c:	1c53      	adds	r3, r2, #1
   b464e:	4422      	add	r2, r4
   b4650:	b29b      	uxth	r3, r3
   b4652:	7111      	strb	r1, [r2, #4]
        length += (digit & 127) * multiplier;
   b4654:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   b4658:	fb12 f206 	smulbb	r2, r2, r6
   b465c:	4417      	add	r7, r2
    } while ((digit & 128) != 0);
   b465e:	060a      	lsls	r2, r1, #24
        buffer[len++] = digit;
   b4660:	f8ad 3006 	strh.w	r3, [sp, #6]
        length += (digit & 127) * multiplier;
   b4664:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4666:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((digit & 128) != 0);
   b466a:	d4e4      	bmi.n	b4636 <_ZN12PubSubClient10readPacketEPh+0x2e>
   b466c:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    *lengthLength = len-1;
   b4670:	3b01      	subs	r3, #1
    if (isPublish) {
   b4672:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    *lengthLength = len-1;
   b4676:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b467a:	d11e      	bne.n	b46ba <_ZN12PubSubClient10readPacketEPh+0xb2>
        if(!readByte(buffer, &len)) return 0;
   b467c:	f10d 0206 	add.w	r2, sp, #6
   b4680:	4629      	mov	r1, r5
   b4682:	4620      	mov	r0, r4
   b4684:	f7ff ffb6 	bl	b45f4 <_ZN12PubSubClient8readByteEPhPt>
   b4688:	2800      	cmp	r0, #0
   b468a:	d0cb      	beq.n	b4624 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if(!readByte(buffer, &len)) return 0;
   b468c:	f10d 0206 	add.w	r2, sp, #6
   b4690:	4629      	mov	r1, r5
   b4692:	4620      	mov	r0, r4
   b4694:	f7ff ffae 	bl	b45f4 <_ZN12PubSubClient8readByteEPhPt>
   b4698:	2800      	cmp	r0, #0
   b469a:	d0c3      	beq.n	b4624 <_ZN12PubSubClient10readPacketEPh+0x1c>
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b469c:	f898 3000 	ldrb.w	r3, [r8]
   b46a0:	4423      	add	r3, r4
   b46a2:	795a      	ldrb	r2, [r3, #5]
   b46a4:	799e      	ldrb	r6, [r3, #6]
        if (buffer[0]&MQTTQOS1) {
   b46a6:	7923      	ldrb	r3, [r4, #4]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b46a8:	eb06 2602 	add.w	r6, r6, r2, lsl #8
        if (buffer[0]&MQTTQOS1) {
   b46ac:	079b      	lsls	r3, r3, #30
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   b46ae:	b2b6      	uxth	r6, r6
        if (buffer[0]&MQTTQOS1) {
   b46b0:	d501      	bpl.n	b46b6 <_ZN12PubSubClient10readPacketEPh+0xae>
            skip += 2;
   b46b2:	3602      	adds	r6, #2
   b46b4:	b2b6      	uxth	r6, r6
        start = 2;
   b46b6:	2502      	movs	r5, #2
   b46b8:	e001      	b.n	b46be <_ZN12PubSubClient10readPacketEPh+0xb6>
    uint8_t start = 0;
   b46ba:	2500      	movs	r5, #0
    uint16_t skip = 0;
   b46bc:	462e      	mov	r6, r5
    for (uint16_t i = start;i<length;i++) {
   b46be:	b2ad      	uxth	r5, r5
   b46c0:	42bd      	cmp	r5, r7
   b46c2:	d226      	bcs.n	b4712 <_ZN12PubSubClient10readPacketEPh+0x10a>
        if(!readByte(&digit)) return 0;
   b46c4:	f10d 0105 	add.w	r1, sp, #5
   b46c8:	4620      	mov	r0, r4
   b46ca:	f7ff ff75 	bl	b45b8 <_ZN12PubSubClient8readByteEPh>
   b46ce:	2800      	cmp	r0, #0
   b46d0:	d0a8      	beq.n	b4624 <_ZN12PubSubClient10readPacketEPh+0x1c>
        if (this->stream) {
   b46d2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b46d6:	b178      	cbz	r0, b46f8 <_ZN12PubSubClient10readPacketEPh+0xf0>
            if (isPublish && len-*lengthLength-2>skip) {
   b46d8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   b46dc:	d10c      	bne.n	b46f8 <_ZN12PubSubClient10readPacketEPh+0xf0>
   b46de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b46e2:	f898 2000 	ldrb.w	r2, [r8]
   b46e6:	1a9b      	subs	r3, r3, r2
   b46e8:	3b02      	subs	r3, #2
   b46ea:	42b3      	cmp	r3, r6
   b46ec:	dd04      	ble.n	b46f8 <_ZN12PubSubClient10readPacketEPh+0xf0>
                this->stream->write(digit);
   b46ee:	6803      	ldr	r3, [r0, #0]
   b46f0:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b46f4:	689b      	ldr	r3, [r3, #8]
   b46f6:	4798      	blx	r3
        if (len < MQTT_MAX_PACKET_SIZE) {
   b46f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b46fc:	2b7f      	cmp	r3, #127	; 0x7f
            buffer[len] = digit;
   b46fe:	bf9e      	ittt	ls
   b4700:	18e2      	addls	r2, r4, r3
   b4702:	f89d 1005 	ldrbls.w	r1, [sp, #5]
   b4706:	7111      	strbls	r1, [r2, #4]
        len++;
   b4708:	3301      	adds	r3, #1
   b470a:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (uint16_t i = start;i<length;i++) {
   b470e:	3501      	adds	r5, #1
   b4710:	e7d5      	b.n	b46be <_ZN12PubSubClient10readPacketEPh+0xb6>
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   b4712:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b4716:	b92b      	cbnz	r3, b4724 <_ZN12PubSubClient10readPacketEPh+0x11c>
   b4718:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b471c:	2a80      	cmp	r2, #128	; 0x80
        len = 0; // This will cause the packet to be ignored.
   b471e:	bf88      	it	hi
   b4720:	f8ad 3006 	strhhi.w	r3, [sp, #6]
    return len;
   b4724:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b4728:	e77d      	b.n	b4626 <_ZN12PubSubClient10readPacketEPh+0x1e>

000b472a <_ZN12PubSubClient5writeEhPht>:
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b472a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b472e:	4615      	mov	r5, r2
   b4730:	461e      	mov	r6, r3
    uint16_t len = length;
   b4732:	461a      	mov	r2, r3
boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4734:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4736:	2300      	movs	r3, #0
        digit = len % 128;
   b4738:	4696      	mov	lr, r2
        lenBuf[pos++] = digit;
   b473a:	a802      	add	r0, sp, #8
        digit = len % 128;
   b473c:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4740:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4744:	f103 0401 	add.w	r4, r3, #1
   b4748:	4403      	add	r3, r0
            digit |= 0x80;
   b474a:	bf88      	it	hi
   b474c:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
    } while(len>0);
   b4750:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4754:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4758:	b2e4      	uxtb	r4, r4
   b475a:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len>0);
   b475e:	d820      	bhi.n	b47a2 <_ZN12PubSubClient5writeEhPht+0x78>
    buf[4-llen] = header;
   b4760:	f1c4 0304 	rsb	r3, r4, #4
        buf[5-llen+i] = lenBuf[i];
   b4764:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4768:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b476a:	4622      	mov	r2, r4
   b476c:	a901      	add	r1, sp, #4
   b476e:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4770:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4774:	f001 fd36 	bl	b61e4 <memcpy>
    rc = _client->write(buf+(4-llen),length+1+llen);
   b4778:	6838      	ldr	r0, [r7, #0]
   b477a:	6803      	ldr	r3, [r0, #0]
   b477c:	1c72      	adds	r2, r6, #1
   b477e:	4422      	add	r2, r4
   b4780:	68db      	ldr	r3, [r3, #12]
   b4782:	4641      	mov	r1, r8
   b4784:	4798      	blx	r3
   b4786:	4605      	mov	r5, r0
   b4788:	f000 fb20 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
    return (rc == 1+llen+length);
   b478c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b478e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    return (rc == 1+llen+length);
   b4792:	4432      	add	r2, r6
   b4794:	b2a8      	uxth	r0, r5
}
   b4796:	1a13      	subs	r3, r2, r0
   b4798:	4258      	negs	r0, r3
   b479a:	4158      	adcs	r0, r3
   b479c:	b002      	add	sp, #8
   b479e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b47a2:	4623      	mov	r3, r4
   b47a4:	e7c8      	b.n	b4738 <_ZN12PubSubClient5writeEhPht+0xe>

000b47a6 <_ZN12PubSubClient11writeStringEPKcPht>:
    pos += 2;
   b47a6:	3302      	adds	r3, #2
uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b47a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    while (*idp) {
   b47aa:	3901      	subs	r1, #1
    pos += 2;
   b47ac:	b29c      	uxth	r4, r3
   b47ae:	2300      	movs	r3, #0
    while (*idp) {
   b47b0:	1c5e      	adds	r6, r3, #1
   b47b2:	fa14 f083 	uxtah	r0, r4, r3
   b47b6:	5d8f      	ldrb	r7, [r1, r6]
   b47b8:	b29d      	uxth	r5, r3
   b47ba:	b280      	uxth	r0, r0
   b47bc:	b117      	cbz	r7, b47c4 <_ZN12PubSubClient11writeStringEPKcPht+0x1e>
        buf[pos++] = *idp++;
   b47be:	5417      	strb	r7, [r2, r0]
    while (*idp) {
   b47c0:	4633      	mov	r3, r6
   b47c2:	e7f5      	b.n	b47b0 <_ZN12PubSubClient11writeStringEPKcPht+0xa>
    buf[pos-i-2] = (i >> 8);
   b47c4:	b299      	uxth	r1, r3
   b47c6:	1a41      	subs	r1, r0, r1
   b47c8:	440a      	add	r2, r1
   b47ca:	0a29      	lsrs	r1, r5, #8
   b47cc:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b47d0:	f802 3c01 	strb.w	r3, [r2, #-1]
}
   b47d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b47d6 <_ZN12PubSubClient9connectedEv>:
boolean PubSubClient::connected() {
   b47d6:	b538      	push	{r3, r4, r5, lr}
   b47d8:	4604      	mov	r4, r0
    if (_client == NULL ) {
   b47da:	6800      	ldr	r0, [r0, #0]
   b47dc:	b908      	cbnz	r0, b47e2 <_ZN12PubSubClient9connectedEv+0xc>
        rc = false;
   b47de:	2000      	movs	r0, #0
}
   b47e0:	bd38      	pop	{r3, r4, r5, pc}
        rc = (int)_client->connected();
   b47e2:	6803      	ldr	r3, [r0, #0]
   b47e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47e6:	4798      	blx	r3
        if (!rc) {
   b47e8:	b980      	cbnz	r0, b480c <_ZN12PubSubClient9connectedEv+0x36>
            if (this->_state == MQTT_CONNECTED) {
   b47ea:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   b47ee:	2d00      	cmp	r5, #0
   b47f0:	d1f5      	bne.n	b47de <_ZN12PubSubClient9connectedEv+0x8>
                _client->flush();
   b47f2:	6820      	ldr	r0, [r4, #0]
                this->_state = MQTT_CONNECTION_LOST;
   b47f4:	f06f 0302 	mvn.w	r3, #2
   b47f8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->flush();
   b47fc:	6803      	ldr	r3, [r0, #0]
   b47fe:	69db      	ldr	r3, [r3, #28]
   b4800:	4798      	blx	r3
                _client->stop();
   b4802:	6820      	ldr	r0, [r4, #0]
   b4804:	6803      	ldr	r3, [r0, #0]
   b4806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4808:	4798      	blx	r3
   b480a:	e7e8      	b.n	b47de <_ZN12PubSubClient9connectedEv+0x8>
        rc = (int)_client->connected();
   b480c:	2001      	movs	r0, #1
   b480e:	e7e7      	b.n	b47e0 <_ZN12PubSubClient9connectedEv+0xa>

000b4810 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
   b4810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4814:	b08b      	sub	sp, #44	; 0x2c
   b4816:	4604      	mov	r4, r0
   b4818:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   b481c:	4689      	mov	r9, r1
   b481e:	4617      	mov	r7, r2
   b4820:	461e      	mov	r6, r3
    if (!connected()) {
   b4822:	f7ff ffd8 	bl	b47d6 <_ZN12PubSubClient9connectedEv>
   b4826:	4605      	mov	r5, r0
   b4828:	2800      	cmp	r0, #0
   b482a:	f040 80a5 	bne.w	b4978 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->domain, this->port);
   b482e:	f8d4 a000 	ldr.w	sl, [r4]
        if (domain != NULL) {
   b4832:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
            result = _client->connect(this->domain, this->port);
   b4836:	f8da 3000 	ldr.w	r3, [sl]
        if (domain != NULL) {
   b483a:	2900      	cmp	r1, #0
   b483c:	d079      	beq.n	b4932 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x122>
            result = _client->connect(this->domain, this->port);
   b483e:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b4842:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4846:	4603      	mov	r3, r0
            result = _client->connect(this->ip, this->port);
   b4848:	4650      	mov	r0, sl
   b484a:	47d8      	blx	fp
        if (result == 1) {
   b484c:	2801      	cmp	r0, #1
   b484e:	f040 809a 	bne.w	b4986 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x176>
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4852:	4b4f      	ldr	r3, [pc, #316]	; (b4990 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x180>)
            nextMsgId = 1;
   b4854:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4858:	889a      	ldrh	r2, [r3, #4]
   b485a:	f8ad 2014 	strh.w	r2, [sp, #20]
   b485e:	6818      	ldr	r0, [r3, #0]
                buffer[length++] = d[j];
   b4860:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   b4864:	799b      	ldrb	r3, [r3, #6]
   b4866:	9004      	str	r0, [sp, #16]
   b4868:	f88d 3016 	strb.w	r3, [sp, #22]
                buffer[length++] = d[j];
   b486c:	f8c4 0009 	str.w	r0, [r4, #9]
   b4870:	f8a4 200d 	strh.w	r2, [r4, #13]
   b4874:	73e3      	strb	r3, [r4, #15]
            if (willTopic) {
   b4876:	f1b8 0f00 	cmp.w	r8, #0
   b487a:	d066      	beq.n	b494a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13a>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b487c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b4880:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b4884:	015b      	lsls	r3, r3, #5
   b4886:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   b488a:	f043 0306 	orr.w	r3, r3, #6
   b488e:	b2db      	uxtb	r3, r3
            if(user != NULL) {
   b4890:	b11f      	cbz	r7, b489a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
                if(pass != NULL) {
   b4892:	2e00      	cmp	r6, #0
   b4894:	d15b      	bne.n	b494e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x13e>
                v = v|0x80;
   b4896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            buffer[length++] = v;
   b489a:	7423      	strb	r3, [r4, #16]
            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   b489c:	2300      	movs	r3, #0
   b489e:	7463      	strb	r3, [r4, #17]
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b48a0:	230f      	movs	r3, #15
            length = writeString(id,buffer,length);
   b48a2:	1d22      	adds	r2, r4, #4
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   b48a4:	74a3      	strb	r3, [r4, #18]
            length = writeString(id,buffer,length);
   b48a6:	4649      	mov	r1, r9
   b48a8:	4620      	mov	r0, r4
   b48aa:	9201      	str	r2, [sp, #4]
   b48ac:	f7ff ff7b 	bl	b47a6 <_ZN12PubSubClient11writeStringEPKcPht>
            if (willTopic) {
   b48b0:	9a01      	ldr	r2, [sp, #4]
            length = writeString(id,buffer,length);
   b48b2:	4603      	mov	r3, r0
            if (willTopic) {
   b48b4:	f1b8 0f00 	cmp.w	r8, #0
   b48b8:	d00b      	beq.n	b48d2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xc2>
                length = writeString(willTopic,buffer,length);
   b48ba:	4641      	mov	r1, r8
   b48bc:	4620      	mov	r0, r4
   b48be:	f7ff ff72 	bl	b47a6 <_ZN12PubSubClient11writeStringEPKcPht>
                length = writeString(willMessage,buffer,length);
   b48c2:	9a01      	ldr	r2, [sp, #4]
   b48c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
                length = writeString(willTopic,buffer,length);
   b48c6:	4603      	mov	r3, r0
                length = writeString(willMessage,buffer,length);
   b48c8:	4620      	mov	r0, r4
   b48ca:	f7ff ff6c 	bl	b47a6 <_ZN12PubSubClient11writeStringEPKcPht>
   b48ce:	9a01      	ldr	r2, [sp, #4]
   b48d0:	4603      	mov	r3, r0
            if(user != NULL) {
   b48d2:	b16f      	cbz	r7, b48f0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                length = writeString(user,buffer,length);
   b48d4:	4639      	mov	r1, r7
   b48d6:	4620      	mov	r0, r4
   b48d8:	9201      	str	r2, [sp, #4]
   b48da:	f7ff ff64 	bl	b47a6 <_ZN12PubSubClient11writeStringEPKcPht>
                if(pass != NULL) {
   b48de:	9a01      	ldr	r2, [sp, #4]
                length = writeString(user,buffer,length);
   b48e0:	4603      	mov	r3, r0
                if(pass != NULL) {
   b48e2:	b12e      	cbz	r6, b48f0 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xe0>
                    length = writeString(pass,buffer,length);
   b48e4:	4631      	mov	r1, r6
   b48e6:	4620      	mov	r0, r4
   b48e8:	f7ff ff5d 	bl	b47a6 <_ZN12PubSubClient11writeStringEPKcPht>
   b48ec:	9a01      	ldr	r2, [sp, #4]
   b48ee:	4603      	mov	r3, r0
            write(MQTTCONNECT,buffer,length-5);
   b48f0:	3b05      	subs	r3, #5
   b48f2:	b29b      	uxth	r3, r3
   b48f4:	2110      	movs	r1, #16
   b48f6:	4620      	mov	r0, r4
   b48f8:	f7ff ff17 	bl	b472a <_ZN12PubSubClient5writeEhPht>
   b48fc:	f000 fa66 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4900:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b4904:	f643 2697 	movw	r6, #14999	; 0x3a97
            while (!_client->available()) {
   b4908:	6820      	ldr	r0, [r4, #0]
   b490a:	6803      	ldr	r3, [r0, #0]
   b490c:	691b      	ldr	r3, [r3, #16]
   b490e:	4798      	blx	r3
   b4910:	bb00      	cbnz	r0, b4954 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x144>
   b4912:	f000 fa5b 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*1000UL)) {
   b4916:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b491a:	1ac0      	subs	r0, r0, r3
   b491c:	42b0      	cmp	r0, r6
   b491e:	d9f3      	bls.n	b4908 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0xf8>
                    _state = MQTT_CONNECTION_TIMEOUT;
   b4920:	f06f 0303 	mvn.w	r3, #3
   b4924:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
            _client->stop();
   b4928:	6820      	ldr	r0, [r4, #0]
   b492a:	6803      	ldr	r3, [r0, #0]
   b492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b492e:	4798      	blx	r3
   b4930:	e022      	b.n	b4978 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
            result = _client->connect(this->ip, this->port);
   b4932:	f104 0198 	add.w	r1, r4, #152	; 0x98
   b4936:	a804      	add	r0, sp, #16
   b4938:	f8d3 b020 	ldr.w	fp, [r3, #32]
   b493c:	f7ff fe1c 	bl	b4578 <_ZN9IPAddressC1ERKS_>
   b4940:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
   b4944:	462b      	mov	r3, r5
   b4946:	a904      	add	r1, sp, #16
   b4948:	e77e      	b.n	b4848 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x38>
                v = 0x02;
   b494a:	2302      	movs	r3, #2
   b494c:	e7a0      	b.n	b4890 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x80>
                    v = v|(0x80>>1);
   b494e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   b4952:	e7a2      	b.n	b489a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x8a>
            uint16_t len = readPacket(&llen);
   b4954:	f10d 010f 	add.w	r1, sp, #15
   b4958:	4620      	mov	r0, r4
   b495a:	f7ff fe55 	bl	b4608 <_ZN12PubSubClient10readPacketEPh>
            if (len == 4) {
   b495e:	2804      	cmp	r0, #4
   b4960:	d1e2      	bne.n	b4928 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
                if (buffer[3] == 0) {
   b4962:	79e6      	ldrb	r6, [r4, #7]
   b4964:	b966      	cbnz	r6, b4980 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x170>
   b4966:	f000 fa31 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b496a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b496c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                    pingOutstanding = false;
   b4970:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
                    _state = MQTT_CONNECTED;
   b4974:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
}
   b4978:	4628      	mov	r0, r5
   b497a:	b00b      	add	sp, #44	; 0x2c
   b497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    _state = buffer[3];
   b4980:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
   b4984:	e7d0      	b.n	b4928 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x118>
            _state = MQTT_CONNECT_FAILED;
   b4986:	f06f 0301 	mvn.w	r3, #1
   b498a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   b498e:	e7f3      	b.n	b4978 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_+0x168>
   b4990:	000b64f4 	.word	0x000b64f4

000b4994 <_ZN12PubSubClient7connectEPKcS1_S1_>:
boolean PubSubClient::connect(const char *id, const char *user, const char *pass) {
   b4994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return connect(id,user,pass,0,0,0,0);
   b4996:	2400      	movs	r4, #0
   b4998:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b499c:	e9cd 4400 	strd	r4, r4, [sp]
   b49a0:	f7ff ff36 	bl	b4810 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_>
}
   b49a4:	b004      	add	sp, #16
   b49a6:	bd10      	pop	{r4, pc}

000b49a8 <_ZN12PubSubClient4loopEv>:
boolean PubSubClient::loop() {
   b49a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49ac:	b085      	sub	sp, #20
   b49ae:	af00      	add	r7, sp, #0
   b49b0:	4604      	mov	r4, r0
    if (connected()) {
   b49b2:	f7ff ff10 	bl	b47d6 <_ZN12PubSubClient9connectedEv>
   b49b6:	4681      	mov	r9, r0
   b49b8:	b1d8      	cbz	r0, b49f2 <_ZN12PubSubClient4loopEv+0x4a>
   b49ba:	f000 fa07 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   b49be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b49c2:	f643 2298 	movw	r2, #15000	; 0x3a98
   b49c6:	1ac3      	subs	r3, r0, r3
   b49c8:	4293      	cmp	r3, r2
   b49ca:	4680      	mov	r8, r0
   b49cc:	d804      	bhi.n	b49d8 <_ZN12PubSubClient4loopEv+0x30>
   b49ce:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   b49d2:	1ac3      	subs	r3, r0, r3
   b49d4:	4293      	cmp	r3, r2
   b49d6:	d91e      	bls.n	b4a16 <_ZN12PubSubClient4loopEv+0x6e>
            if (pingOutstanding) {
   b49d8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
                _client->stop();
   b49dc:	6820      	ldr	r0, [r4, #0]
            if (pingOutstanding) {
   b49de:	b16b      	cbz	r3, b49fc <_ZN12PubSubClient4loopEv+0x54>
                this->_state = MQTT_CONNECTION_TIMEOUT;
   b49e0:	f06f 0303 	mvn.w	r3, #3
   b49e4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
                _client->stop();
   b49e8:	6803      	ldr	r3, [r0, #0]
   b49ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49ec:	4798      	blx	r3
                return false;
   b49ee:	f04f 0900 	mov.w	r9, #0
}
   b49f2:	4648      	mov	r0, r9
   b49f4:	3714      	adds	r7, #20
   b49f6:	46bd      	mov	sp, r7
   b49f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b49fc:	4621      	mov	r1, r4
   b49fe:	23c0      	movs	r3, #192	; 0xc0
   b4a00:	f821 3f04 	strh.w	r3, [r1, #4]!
                _client->write(buffer,2);
   b4a04:	6803      	ldr	r3, [r0, #0]
   b4a06:	2202      	movs	r2, #2
   b4a08:	68db      	ldr	r3, [r3, #12]
   b4a0a:	4798      	blx	r3
                lastInActivity = t;
   b4a0c:	e9c4 8822 	strd	r8, r8, [r4, #136]	; 0x88
                pingOutstanding = true;
   b4a10:	2301      	movs	r3, #1
   b4a12:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        if (_client->available()) {
   b4a16:	6820      	ldr	r0, [r4, #0]
   b4a18:	6803      	ldr	r3, [r0, #0]
   b4a1a:	691b      	ldr	r3, [r3, #16]
   b4a1c:	4798      	blx	r3
   b4a1e:	2800      	cmp	r0, #0
   b4a20:	d0e7      	beq.n	b49f2 <_ZN12PubSubClient4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
   b4a22:	f107 010f 	add.w	r1, r7, #15
   b4a26:	4620      	mov	r0, r4
   b4a28:	f7ff fdee 	bl	b4608 <_ZN12PubSubClient10readPacketEPh>
            if (len > 0) {
   b4a2c:	4605      	mov	r5, r0
   b4a2e:	2800      	cmp	r0, #0
   b4a30:	d0df      	beq.n	b49f2 <_ZN12PubSubClient4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
   b4a32:	7923      	ldrb	r3, [r4, #4]
   b4a34:	607b      	str	r3, [r7, #4]
   b4a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4a3a:	2b30      	cmp	r3, #48	; 0x30
                lastInActivity = t;
   b4a3c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
                if (type == MQTTPUBLISH) {
   b4a40:	d14d      	bne.n	b4ade <_ZN12PubSubClient4loopEv+0x136>
                    if (callback) {
   b4a42:	f8d4 a094 	ldr.w	sl, [r4, #148]	; 0x94
   b4a46:	f1ba 0f00 	cmp.w	sl, #0
   b4a4a:	d0d2      	beq.n	b49f2 <_ZN12PubSubClient4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b4a4c:	7bfe      	ldrb	r6, [r7, #15]
   b4a4e:	19a3      	adds	r3, r4, r6
                        }
   b4a50:	46eb      	mov	fp, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   b4a52:	7959      	ldrb	r1, [r3, #5]
   b4a54:	799a      	ldrb	r2, [r3, #6]
   b4a56:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   b4a5a:	b292      	uxth	r2, r2
                        char topic[tl+1];
   b4a5c:	f102 0308 	add.w	r3, r2, #8
   b4a60:	08db      	lsrs	r3, r3, #3
   b4a62:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
   b4a66:	469d      	mov	sp, r3
                            topic[i] = buffer[llen+3+i];
   b4a68:	1df1      	adds	r1, r6, #7
   b4a6a:	4421      	add	r1, r4
   b4a6c:	4668      	mov	r0, sp
   b4a6e:	603a      	str	r2, [r7, #0]
   b4a70:	f001 fbb8 	bl	b61e4 <memcpy>
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b4a74:	6879      	ldr	r1, [r7, #4]
                        topic[tl] = 0;
   b4a76:	683a      	ldr	r2, [r7, #0]
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b4a78:	f001 0106 	and.w	r1, r1, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4a7c:	1ba8      	subs	r0, r5, r6
                        topic[tl] = 0;
   b4a7e:	2300      	movs	r3, #0
                            callback(topic,payload,len-llen-3-tl-2);
   b4a80:	3803      	subs	r0, #3
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b4a82:	2902      	cmp	r1, #2
   b4a84:	f106 0103 	add.w	r1, r6, #3
                        topic[tl] = 0;
   b4a88:	f80d 3002 	strb.w	r3, [sp, r2]
                            callback(topic,payload,len-llen-3-tl-2);
   b4a8c:	eba0 0002 	sub.w	r0, r0, r2
                _client->write(buffer,2);
   b4a90:	f104 0304 	add.w	r3, r4, #4
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4a94:	4411      	add	r1, r2
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   b4a96:	d11d      	bne.n	b4ad4 <_ZN12PubSubClient4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4a98:	4421      	add	r1, r4
                            callback(topic,payload,len-llen-3-tl-2);
   b4a9a:	607b      	str	r3, [r7, #4]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4a9c:	f891 c004 	ldrb.w	ip, [r1, #4]
   b4aa0:	794d      	ldrb	r5, [r1, #5]
                            payload = buffer+llen+3+tl+2;
   b4aa2:	1d71      	adds	r1, r6, #5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4aa4:	eb05 250c 	add.w	r5, r5, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
   b4aa8:	4411      	add	r1, r2
                            callback(topic,payload,len-llen-3-tl-2);
   b4aaa:	4419      	add	r1, r3
   b4aac:	1e82      	subs	r2, r0, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4aae:	b2ad      	uxth	r5, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4ab0:	4668      	mov	r0, sp
   b4ab2:	47d0      	blx	sl
                            buffer[2] = (msgId >> 8);
   b4ab4:	ba6d      	rev16	r5, r5
                            _client->write(buffer,4);
   b4ab6:	6820      	ldr	r0, [r4, #0]
                            buffer[2] = (msgId >> 8);
   b4ab8:	80e5      	strh	r5, [r4, #6]
                            buffer[0] = MQTTPUBACK;
   b4aba:	f44f 7210 	mov.w	r2, #576	; 0x240
   b4abe:	80a2      	strh	r2, [r4, #4]
                            _client->write(buffer,4);
   b4ac0:	6802      	ldr	r2, [r0, #0]
   b4ac2:	687b      	ldr	r3, [r7, #4]
   b4ac4:	68d5      	ldr	r5, [r2, #12]
   b4ac6:	4619      	mov	r1, r3
   b4ac8:	2204      	movs	r2, #4
   b4aca:	47a8      	blx	r5
                            lastOutActivity = t;
   b4acc:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
   b4ad0:	46dd      	mov	sp, fp
   b4ad2:	e78e      	b.n	b49f2 <_ZN12PubSubClient4loopEv+0x4a>
                            callback(topic,payload,len-llen-3-tl);
   b4ad4:	4602      	mov	r2, r0
   b4ad6:	4419      	add	r1, r3
   b4ad8:	4668      	mov	r0, sp
   b4ada:	47d0      	blx	sl
   b4adc:	e7f8      	b.n	b4ad0 <_ZN12PubSubClient4loopEv+0x128>
                } else if (type == MQTTPINGREQ) {
   b4ade:	2bc0      	cmp	r3, #192	; 0xc0
   b4ae0:	d109      	bne.n	b4af6 <_ZN12PubSubClient4loopEv+0x14e>
                    buffer[0] = MQTTPINGRESP;
   b4ae2:	23d0      	movs	r3, #208	; 0xd0
                    _client->write(buffer,2);
   b4ae4:	4621      	mov	r1, r4
                    buffer[0] = MQTTPINGRESP;
   b4ae6:	80a3      	strh	r3, [r4, #4]
                    _client->write(buffer,2);
   b4ae8:	f851 0b04 	ldr.w	r0, [r1], #4
   b4aec:	6803      	ldr	r3, [r0, #0]
   b4aee:	2202      	movs	r2, #2
   b4af0:	68db      	ldr	r3, [r3, #12]
   b4af2:	4798      	blx	r3
   b4af4:	e77d      	b.n	b49f2 <_ZN12PubSubClient4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
   b4af6:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
   b4af8:	bf04      	itt	eq
   b4afa:	2300      	moveq	r3, #0
   b4afc:	f884 3090 	strbeq.w	r3, [r4, #144]	; 0x90
   b4b00:	e777      	b.n	b49f2 <_ZN12PubSubClient4loopEv+0x4a>

000b4b02 <_ZN12PubSubClient7publishEPKcPKhjb>:
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retain) {
   b4b02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4b06:	4604      	mov	r4, r0
   b4b08:	f89d 7020 	ldrb.w	r7, [sp, #32]
   b4b0c:	4688      	mov	r8, r1
   b4b0e:	4616      	mov	r6, r2
   b4b10:	461d      	mov	r5, r3
    if (connected()) {
   b4b12:	f7ff fe60 	bl	b47d6 <_ZN12PubSubClient9connectedEv>
   b4b16:	b338      	cbz	r0, b4b68 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   b4b18:	4640      	mov	r0, r8
   b4b1a:	f001 fbef 	bl	b62fc <strlen>
   b4b1e:	1deb      	adds	r3, r5, #7
   b4b20:	4418      	add	r0, r3
   b4b22:	2880      	cmp	r0, #128	; 0x80
   b4b24:	d820      	bhi.n	b4b68 <_ZN12PubSubClient7publishEPKcPKhjb+0x66>
        length = writeString(topic,buffer,length);
   b4b26:	1d22      	adds	r2, r4, #4
   b4b28:	2305      	movs	r3, #5
   b4b2a:	4641      	mov	r1, r8
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	9201      	str	r2, [sp, #4]
   b4b30:	f7ff fe39 	bl	b47a6 <_ZN12PubSubClient11writeStringEPKcPht>
        for (i=0;i<plength;i++) {
   b4b34:	9a01      	ldr	r2, [sp, #4]
   b4b36:	2300      	movs	r3, #0
   b4b38:	18c1      	adds	r1, r0, r3
   b4b3a:	429d      	cmp	r5, r3
   b4b3c:	b289      	uxth	r1, r1
   b4b3e:	d907      	bls.n	b4b50 <_ZN12PubSubClient7publishEPKcPKhjb+0x4e>
            buffer[length++] = payload[i];
   b4b40:	4421      	add	r1, r4
   b4b42:	f816 c003 	ldrb.w	ip, [r6, r3]
   b4b46:	f881 c004 	strb.w	ip, [r1, #4]
        for (i=0;i<plength;i++) {
   b4b4a:	3301      	adds	r3, #1
   b4b4c:	b29b      	uxth	r3, r3
   b4b4e:	e7f3      	b.n	b4b38 <_ZN12PubSubClient7publishEPKcPKhjb+0x36>
        return write(header,buffer,length-5);
   b4b50:	1f4b      	subs	r3, r1, #5
            header |= 1;
   b4b52:	2f00      	cmp	r7, #0
        return write(header,buffer,length-5);
   b4b54:	b29b      	uxth	r3, r3
   b4b56:	bf0c      	ite	eq
   b4b58:	2130      	moveq	r1, #48	; 0x30
   b4b5a:	2131      	movne	r1, #49	; 0x31
   b4b5c:	4620      	mov	r0, r4
}
   b4b5e:	b002      	add	sp, #8
   b4b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(header,buffer,length-5);
   b4b64:	f7ff bde1 	b.w	b472a <_ZN12PubSubClient5writeEhPht>
}
   b4b68:	2000      	movs	r0, #0
   b4b6a:	b002      	add	sp, #8
   b4b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4b70 <_ZN12PubSubClient7publishEPKcS1_>:
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b4b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4b72:	4604      	mov	r4, r0
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b4b74:	4610      	mov	r0, r2
boolean PubSubClient::publish(const char* topic, const char* payload) {
   b4b76:	9103      	str	r1, [sp, #12]
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   b4b78:	9202      	str	r2, [sp, #8]
   b4b7a:	f001 fbbf 	bl	b62fc <strlen>
   b4b7e:	4603      	mov	r3, r0
   b4b80:	2000      	movs	r0, #0
   b4b82:	9000      	str	r0, [sp, #0]
   b4b84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b4b88:	4620      	mov	r0, r4
   b4b8a:	f7ff ffba 	bl	b4b02 <_ZN12PubSubClient7publishEPKcPKhjb>
}
   b4b8e:	b004      	add	sp, #16
   b4b90:	bd10      	pop	{r4, pc}

000b4b92 <_ZN12PubSubClient9setServerEPKct>:
    this->domain = domain;
   b4b92:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    this->port = port;
   b4b96:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
}
   b4b9a:	4770      	bx	lr

000b4b9c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <HAL_USB_USART_Init+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	681b      	ldr	r3, [r3, #0]
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	0003024c 	.word	0x0003024c

000b4bac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <HAL_USB_USART_Begin+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	685b      	ldr	r3, [r3, #4]
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	0003024c 	.word	0x0003024c

000b4bbc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <HAL_USB_USART_Available_Data+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	691b      	ldr	r3, [r3, #16]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	0003024c 	.word	0x0003024c

000b4bcc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	695b      	ldr	r3, [r3, #20]
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	0003024c 	.word	0x0003024c

000b4bdc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <HAL_USB_USART_Receive_Data+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	699b      	ldr	r3, [r3, #24]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	0003024c 	.word	0x0003024c

000b4bec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <HAL_USB_USART_Send_Data+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	69db      	ldr	r3, [r3, #28]
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	0003024c 	.word	0x0003024c

000b4bfc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <HAL_USB_USART_Flush_Data+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	6a1b      	ldr	r3, [r3, #32]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	0003024c 	.word	0x0003024c

000b4c0c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <hal_i2c_write+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6a1b      	ldr	r3, [r3, #32]
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030228 	.word	0x00030228

000b4c1c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <hal_i2c_available+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030228 	.word	0x00030228

000b4c2c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <hal_i2c_read+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	00030228 	.word	0x00030228

000b4c3c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <hal_i2c_peek+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	00030228 	.word	0x00030228

000b4c4c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <hal_i2c_flush+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	00030228 	.word	0x00030228

000b4c5c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <hal_i2c_is_enabled+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	00030228 	.word	0x00030228

000b4c6c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <hal_i2c_init+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	00030228 	.word	0x00030228

000b4c7c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <hal_spi_init+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	69db      	ldr	r3, [r3, #28]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030230 	.word	0x00030230

000b4c8c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <hal_spi_is_enabled+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	6a1b      	ldr	r3, [r3, #32]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030230 	.word	0x00030230

000b4c9c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <sock_setsockopt+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	699b      	ldr	r3, [r3, #24]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030238 	.word	0x00030238

000b4cac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <sock_close+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	69db      	ldr	r3, [r3, #28]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030238 	.word	0x00030238

000b4cbc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <sock_connect+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	6a1b      	ldr	r3, [r3, #32]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030238 	.word	0x00030238

000b4ccc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <sock_recv+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030238 	.word	0x00030238

000b4cdc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <sock_send+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030238 	.word	0x00030238

000b4cec <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <sock_socket+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030238 	.word	0x00030238

000b4cfc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <hal_usart_write+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	68db      	ldr	r3, [r3, #12]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	0003023c 	.word	0x0003023c

000b4d0c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <hal_usart_available+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	691b      	ldr	r3, [r3, #16]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	0003023c 	.word	0x0003023c

000b4d1c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <hal_usart_read+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	695b      	ldr	r3, [r3, #20]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	0003023c 	.word	0x0003023c

000b4d2c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <hal_usart_peek+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	699b      	ldr	r3, [r3, #24]
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	0003023c 	.word	0x0003023c

000b4d3c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <hal_usart_flush+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	69db      	ldr	r3, [r3, #28]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	0003023c 	.word	0x0003023c

000b4d4c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <hal_usart_is_enabled+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	6a1b      	ldr	r3, [r3, #32]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	0003023c 	.word	0x0003023c

000b4d5c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <hal_usart_available_data_for_write+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	0003023c 	.word	0x0003023c

000b4d6c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <hal_usart_init_ex+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	0003023c 	.word	0x0003023c

000b4d7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <inet_inet_ntop+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	695b      	ldr	r3, [r3, #20]
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030264 	.word	0x00030264

000b4d8c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <inet_htonl+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6a1b      	ldr	r3, [r3, #32]
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030264 	.word	0x00030264

000b4d9c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <inet_htons+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030264 	.word	0x00030264

000b4dac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <os_mutex_recursive_create+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030248 	.word	0x00030248

000b4dbc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <HAL_RNG_GetRandomNumber+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	685b      	ldr	r3, [r3, #4]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030218 	.word	0x00030218

000b4dcc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	695b      	ldr	r3, [r3, #20]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030218 	.word	0x00030218

000b4ddc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <if_index_to_name+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	695b      	ldr	r3, [r3, #20]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	0003026c 	.word	0x0003026c

000b4dec <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <HAL_Pin_Mode+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	689b      	ldr	r3, [r3, #8]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	0003022c 	.word	0x0003022c

000b4dfc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <HAL_Get_Pin_Mode+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	68db      	ldr	r3, [r3, #12]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	0003022c 	.word	0x0003022c

000b4e0c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <HAL_GPIO_Write+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	691b      	ldr	r3, [r3, #16]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	0003022c 	.word	0x0003022c

000b4e1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <netdb_freeaddrinfo+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	689b      	ldr	r3, [r3, #8]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	00030268 	.word	0x00030268

000b4e2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <netdb_getaddrinfo+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	68db      	ldr	r3, [r3, #12]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	00030268 	.word	0x00030268

000b4e3c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <log_message+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	00030260 	.word	0x00030260

000b4e4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	00030244 	.word	0x00030244

000b4e5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <network_connect+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	685b      	ldr	r3, [r3, #4]
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	00030240 	.word	0x00030240

000b4e6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <network_connecting+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	689b      	ldr	r3, [r3, #8]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	00030240 	.word	0x00030240

000b4e7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <network_disconnect+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	68db      	ldr	r3, [r3, #12]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	00030240 	.word	0x00030240

000b4e8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <network_ready+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	691b      	ldr	r3, [r3, #16]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	00030240 	.word	0x00030240

000b4e9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <network_on+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	695b      	ldr	r3, [r3, #20]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030240 	.word	0x00030240

000b4eac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <network_off+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	699b      	ldr	r3, [r3, #24]
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030240 	.word	0x00030240

000b4ebc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <network_listen+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	69db      	ldr	r3, [r3, #28]
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030240 	.word	0x00030240

000b4ecc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <network_listening+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6a1b      	ldr	r3, [r3, #32]
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030240 	.word	0x00030240

000b4edc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <network_set_listen_timeout+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030240 	.word	0x00030240

000b4eec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <network_get_listen_timeout+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030240 	.word	0x00030240

000b4efc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <network_is_on+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030240 	.word	0x00030240

000b4f0c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <network_is_off+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030240 	.word	0x00030240

000b4f1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <set_system_mode+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	685b      	ldr	r3, [r3, #4]
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030220 	.word	0x00030220

000b4f2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <system_delay_ms+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	695b      	ldr	r3, [r3, #20]
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030220 	.word	0x00030220

000b4f3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b03      	ldr	r3, [pc, #12]	; (b4f4c <system_ctrl_set_app_request_handler+0x10>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f46:	9301      	str	r3, [sp, #4]
   b4f48:	bd08      	pop	{r3, pc}
   b4f4a:	0000      	.short	0x0000
   b4f4c:	00030220 	.word	0x00030220

000b4f50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b03      	ldr	r3, [pc, #12]	; (b4f60 <system_ctrl_set_result+0x10>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f5a:	9301      	str	r3, [sp, #4]
   b4f5c:	bd08      	pop	{r3, pc}
   b4f5e:	0000      	.short	0x0000
   b4f60:	00030220 	.word	0x00030220

000b4f64 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <malloc+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	681b      	ldr	r3, [r3, #0]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003021c 	.word	0x0003021c

000b4f74 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <free+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	685b      	ldr	r3, [r3, #4]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003021c 	.word	0x0003021c

000b4f84 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <vsnprintf+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	0003021c 	.word	0x0003021c

000b4f94 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <__errno+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	0003021c 	.word	0x0003021c

000b4fa4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <__assert_func+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	0003021c 	.word	0x0003021c

000b4fb4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <newlib_impure_ptr_callback+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	0003021c 	.word	0x0003021c

000b4fc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4fc4:	2300      	movs	r3, #0
   b4fc6:	6840      	ldr	r0, [r0, #4]
   b4fc8:	461a      	mov	r2, r3
   b4fca:	f7ff bf47 	b.w	b4e5c <network_connect>

000b4fce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4fce:	6840      	ldr	r0, [r0, #4]
   b4fd0:	2200      	movs	r2, #0
   b4fd2:	2102      	movs	r1, #2
   b4fd4:	f7ff bf52 	b.w	b4e7c <network_disconnect>

000b4fd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4fd8:	2200      	movs	r2, #0
   b4fda:	6840      	ldr	r0, [r0, #4]
   b4fdc:	4611      	mov	r1, r2
   b4fde:	f7ff bf45 	b.w	b4e6c <network_connecting>

000b4fe2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4fe2:	2200      	movs	r2, #0
   b4fe4:	6840      	ldr	r0, [r0, #4]
   b4fe6:	4611      	mov	r1, r2
   b4fe8:	f7ff bf50 	b.w	b4e8c <network_ready>

000b4fec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4fec:	2300      	movs	r3, #0
   b4fee:	6840      	ldr	r0, [r0, #4]
   b4ff0:	461a      	mov	r2, r3
   b4ff2:	4619      	mov	r1, r3
   b4ff4:	f7ff bf52 	b.w	b4e9c <network_on>

000b4ff8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4ff8:	2300      	movs	r3, #0
   b4ffa:	6840      	ldr	r0, [r0, #4]
   b4ffc:	461a      	mov	r2, r3
   b4ffe:	4619      	mov	r1, r3
   b5000:	f7ff bf54 	b.w	b4eac <network_off>

000b5004 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5004:	6840      	ldr	r0, [r0, #4]
   b5006:	2100      	movs	r1, #0
   b5008:	f7ff bf78 	b.w	b4efc <network_is_on>

000b500c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b500c:	6840      	ldr	r0, [r0, #4]
   b500e:	2100      	movs	r1, #0
   b5010:	f7ff bf7c 	b.w	b4f0c <network_is_off>

000b5014 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5014:	6840      	ldr	r0, [r0, #4]
   b5016:	2200      	movs	r2, #0
   b5018:	f081 0101 	eor.w	r1, r1, #1
   b501c:	f7ff bf4e 	b.w	b4ebc <network_listen>

000b5020 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5020:	6840      	ldr	r0, [r0, #4]
   b5022:	2200      	movs	r2, #0
   b5024:	f7ff bf5a 	b.w	b4edc <network_set_listen_timeout>

000b5028 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5028:	2200      	movs	r2, #0
   b502a:	6840      	ldr	r0, [r0, #4]
   b502c:	4611      	mov	r1, r2
   b502e:	f7ff bf5d 	b.w	b4eec <network_get_listen_timeout>

000b5032 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5032:	2200      	movs	r2, #0
   b5034:	6840      	ldr	r0, [r0, #4]
   b5036:	4611      	mov	r1, r2
   b5038:	f7ff bf48 	b.w	b4ecc <network_listening>

000b503c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b503c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5040:	b095      	sub	sp, #84	; 0x54
   b5042:	4614      	mov	r4, r2
   b5044:	460d      	mov	r5, r1
   b5046:	4607      	mov	r7, r0
    IPAddress addr;
   b5048:	f000 fd0a 	bl	b5a60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b504c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b504e:	221c      	movs	r2, #28
   b5050:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5052:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5054:	f001 f8d4 	bl	b6200 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5058:	2340      	movs	r3, #64	; 0x40
   b505a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b505c:	4620      	mov	r0, r4
   b505e:	466b      	mov	r3, sp
   b5060:	aa0c      	add	r2, sp, #48	; 0x30
   b5062:	2100      	movs	r1, #0
   b5064:	f7ff fee2 	bl	b4e2c <netdb_getaddrinfo>
    if (!r) {
   b5068:	4604      	mov	r4, r0
   b506a:	2800      	cmp	r0, #0
   b506c:	d14b      	bne.n	b5106 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b506e:	4602      	mov	r2, r0
   b5070:	2101      	movs	r1, #1
   b5072:	6868      	ldr	r0, [r5, #4]
   b5074:	f7ff ff0a 	bl	b4e8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5078:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b507a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b507c:	4622      	mov	r2, r4
   b507e:	6868      	ldr	r0, [r5, #4]
   b5080:	f7ff ff04 	bl	b4e8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5084:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5086:	4681      	mov	r9, r0
        bool ok = false;
   b5088:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b508a:	2e00      	cmp	r6, #0
   b508c:	d03b      	beq.n	b5106 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b508e:	2900      	cmp	r1, #0
   b5090:	d139      	bne.n	b5106 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5092:	6873      	ldr	r3, [r6, #4]
   b5094:	2b02      	cmp	r3, #2
   b5096:	d003      	beq.n	b50a0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5098:	2b0a      	cmp	r3, #10
   b509a:	d011      	beq.n	b50c0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b509c:	69f6      	ldr	r6, [r6, #28]
   b509e:	e7f4      	b.n	b508a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b50a0:	f1b8 0f00 	cmp.w	r8, #0
   b50a4:	d0fa      	beq.n	b509c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b50a6:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b50a8:	a806      	add	r0, sp, #24
   b50aa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b50ac:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b50ae:	f000 fd1b 	bl	b5ae8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b50b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50b4:	1d3c      	adds	r4, r7, #4
   b50b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50b8:	682b      	ldr	r3, [r5, #0]
   b50ba:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50bc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b50be:	e7ed      	b.n	b509c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b50c0:	f1b9 0f00 	cmp.w	r9, #0
   b50c4:	d0ea      	beq.n	b509c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b50c6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b50c8:	2210      	movs	r2, #16
   b50ca:	a801      	add	r0, sp, #4
   b50cc:	f001 f898 	bl	b6200 <memset>
                    a.v = 6;
   b50d0:	2306      	movs	r3, #6
   b50d2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b50d6:	ad01      	add	r5, sp, #4
   b50d8:	f104 0308 	add.w	r3, r4, #8
   b50dc:	3418      	adds	r4, #24
   b50de:	6818      	ldr	r0, [r3, #0]
   b50e0:	6859      	ldr	r1, [r3, #4]
   b50e2:	462a      	mov	r2, r5
   b50e4:	c203      	stmia	r2!, {r0, r1}
   b50e6:	3308      	adds	r3, #8
   b50e8:	42a3      	cmp	r3, r4
   b50ea:	4615      	mov	r5, r2
   b50ec:	d1f7      	bne.n	b50de <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b50ee:	a901      	add	r1, sp, #4
   b50f0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b50f2:	ad07      	add	r5, sp, #28
   b50f4:	f000 fcc2 	bl	b5a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b50f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50fa:	1d3c      	adds	r4, r7, #4
   b50fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50fe:	682b      	ldr	r3, [r5, #0]
   b5100:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5102:	4649      	mov	r1, r9
   b5104:	e7ca      	b.n	b509c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5106:	9800      	ldr	r0, [sp, #0]
   b5108:	f7ff fe88 	bl	b4e1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b510c:	4638      	mov	r0, r7
   b510e:	b015      	add	sp, #84	; 0x54
   b5110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5114 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5114:	4b02      	ldr	r3, [pc, #8]	; (b5120 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5116:	4a03      	ldr	r2, [pc, #12]	; (b5124 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5118:	601a      	str	r2, [r3, #0]
   b511a:	2200      	movs	r2, #0
   b511c:	605a      	str	r2, [r3, #4]

} // spark
   b511e:	4770      	bx	lr
   b5120:	2003e6b8 	.word	0x2003e6b8
   b5124:	000b6504 	.word	0x000b6504

000b5128 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5128:	2200      	movs	r2, #0
   b512a:	6840      	ldr	r0, [r0, #4]
   b512c:	4611      	mov	r1, r2
   b512e:	f7ff bead 	b.w	b4e8c <network_ready>

000b5132 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5132:	2200      	movs	r2, #0
   b5134:	6840      	ldr	r0, [r0, #4]
   b5136:	4611      	mov	r1, r2
   b5138:	f7ff bec8 	b.w	b4ecc <network_listening>

000b513c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b513c:	2200      	movs	r2, #0
   b513e:	6840      	ldr	r0, [r0, #4]
   b5140:	4611      	mov	r1, r2
   b5142:	f7ff bed3 	b.w	b4eec <network_get_listen_timeout>

000b5146 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5146:	6840      	ldr	r0, [r0, #4]
   b5148:	2200      	movs	r2, #0
   b514a:	f7ff bec7 	b.w	b4edc <network_set_listen_timeout>

000b514e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b514e:	6840      	ldr	r0, [r0, #4]
   b5150:	2200      	movs	r2, #0
   b5152:	f081 0101 	eor.w	r1, r1, #1
   b5156:	f7ff beb1 	b.w	b4ebc <network_listen>

000b515a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b515a:	2300      	movs	r3, #0
   b515c:	6840      	ldr	r0, [r0, #4]
   b515e:	461a      	mov	r2, r3
   b5160:	4619      	mov	r1, r3
   b5162:	f7ff bea3 	b.w	b4eac <network_off>

000b5166 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5166:	2300      	movs	r3, #0
   b5168:	6840      	ldr	r0, [r0, #4]
   b516a:	461a      	mov	r2, r3
   b516c:	4619      	mov	r1, r3
   b516e:	f7ff be95 	b.w	b4e9c <network_on>

000b5172 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5172:	2200      	movs	r2, #0
   b5174:	6840      	ldr	r0, [r0, #4]
   b5176:	4611      	mov	r1, r2
   b5178:	f7ff be78 	b.w	b4e6c <network_connecting>

000b517c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b517c:	6840      	ldr	r0, [r0, #4]
   b517e:	2200      	movs	r2, #0
   b5180:	2102      	movs	r1, #2
   b5182:	f7ff be7b 	b.w	b4e7c <network_disconnect>

000b5186 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5186:	2300      	movs	r3, #0
   b5188:	6840      	ldr	r0, [r0, #4]
   b518a:	461a      	mov	r2, r3
   b518c:	f7ff be66 	b.w	b4e5c <network_connect>

000b5190 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5190:	4b02      	ldr	r3, [pc, #8]	; (b519c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5192:	2204      	movs	r2, #4
   b5194:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5196:	4a02      	ldr	r2, [pc, #8]	; (b51a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5198:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b519a:	4770      	bx	lr
   b519c:	2003e6c0 	.word	0x2003e6c0
   b51a0:	000b6540 	.word	0x000b6540

000b51a4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b51a4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b51a6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b51a8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b51ac:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b51ae:	2201      	movs	r2, #1
   b51b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b51b4:	f10d 0107 	add.w	r1, sp, #7
   b51b8:	47a0      	blx	r4
}
   b51ba:	b002      	add	sp, #8
   b51bc:	bd10      	pop	{r4, pc}

000b51be <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b51be:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51c0:	6803      	ldr	r3, [r0, #0]
   b51c2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b51c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b51c8:	46a4      	mov	ip, r4
}
   b51ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51ce:	4760      	bx	ip

000b51d0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51d0:	b513      	push	{r0, r1, r4, lr}
   b51d2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b51d4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51d6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b51da:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b51dc:	f10d 0107 	add.w	r1, sp, #7
   b51e0:	2201      	movs	r2, #1
   b51e2:	47a0      	blx	r4
}
   b51e4:	b002      	add	sp, #8
   b51e6:	bd10      	pop	{r4, pc}

000b51e8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b51e8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b51ea:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b51f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b51f4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b51f6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51f8:	d008      	beq.n	b520c <_ZN9TCPClient4readEv+0x24>
   b51fa:	6963      	ldr	r3, [r4, #20]
   b51fc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5200:	1c51      	adds	r1, r2, #1
   b5202:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5206:	4413      	add	r3, r2
   b5208:	7918      	ldrb	r0, [r3, #4]
}
   b520a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b520c:	6803      	ldr	r3, [r0, #0]
   b520e:	691b      	ldr	r3, [r3, #16]
   b5210:	4798      	blx	r3
   b5212:	2800      	cmp	r0, #0
   b5214:	d1f1      	bne.n	b51fa <_ZN9TCPClient4readEv+0x12>
   b5216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b521a:	e7f6      	b.n	b520a <_ZN9TCPClient4readEv+0x22>

000b521c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b521c:	4770      	bx	lr

000b521e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b521e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5220:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5222:	43c0      	mvns	r0, r0
   b5224:	0fc0      	lsrs	r0, r0, #31
   b5226:	4770      	bx	lr

000b5228 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5228:	4770      	bx	lr
	...

000b522c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b522c:	4b06      	ldr	r3, [pc, #24]	; (b5248 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b522e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5230:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5232:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5236:	d005      	beq.n	b5244 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5238:	4608      	mov	r0, r1
   b523a:	f000 febb 	bl	b5fb4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b523e:	2800      	cmp	r0, #0
   b5240:	bf08      	it	eq
   b5242:	2400      	moveq	r4, #0
      }
   b5244:	4620      	mov	r0, r4
   b5246:	bd10      	pop	{r4, pc}
   b5248:	000b65a8 	.word	0x000b65a8

000b524c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b524c:	b510      	push	{r4, lr}
   b524e:	21ac      	movs	r1, #172	; 0xac
   b5250:	4604      	mov	r4, r0
   b5252:	f7fe ff22 	bl	b409a <_ZdlPvj>
   b5256:	4620      	mov	r0, r4
   b5258:	bd10      	pop	{r4, pc}

000b525a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b525a:	21ac      	movs	r1, #172	; 0xac
   b525c:	f7fe bf1d 	b.w	b409a <_ZdlPvj>

000b5260 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b5264:	f04f 0800 	mov.w	r8, #0
   b5268:	b086      	sub	sp, #24
   b526a:	461c      	mov	r4, r3
   b526c:	f8c0 8004 	str.w	r8, [r0, #4]
   b5270:	4605      	mov	r5, r0
   b5272:	460e      	mov	r6, r1
   b5274:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5276:	4641      	mov	r1, r8
   b5278:	2210      	movs	r2, #16
   b527a:	a802      	add	r0, sp, #8
   b527c:	f000 ffc0 	bl	b6200 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5280:	1c63      	adds	r3, r4, #1
   b5282:	d009      	beq.n	b5298 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5288:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b528c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5290:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5294:	435c      	muls	r4, r3
   b5296:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5298:	6968      	ldr	r0, [r5, #20]
   b529a:	2310      	movs	r3, #16
   b529c:	9300      	str	r3, [sp, #0]
   b529e:	6800      	ldr	r0, [r0, #0]
   b52a0:	ab02      	add	r3, sp, #8
   b52a2:	f241 0205 	movw	r2, #4101	; 0x1005
   b52a6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b52aa:	f7ff fcf7 	bl	b4c9c <sock_setsockopt>
    if (ret < 0) {
   b52ae:	2800      	cmp	r0, #0
   b52b0:	da07      	bge.n	b52c2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b52b2:	f7ff fe6f 	bl	b4f94 <__errno>
   b52b6:	6803      	ldr	r3, [r0, #0]
   b52b8:	606b      	str	r3, [r5, #4]
        return 0;
   b52ba:	2000      	movs	r0, #0
}
   b52bc:	b006      	add	sp, #24
   b52be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b52c2:	6968      	ldr	r0, [r5, #20]
   b52c4:	2300      	movs	r3, #0
   b52c6:	6800      	ldr	r0, [r0, #0]
   b52c8:	463a      	mov	r2, r7
   b52ca:	4631      	mov	r1, r6
   b52cc:	f7ff fd06 	bl	b4cdc <sock_send>
    if (ret < 0) {
   b52d0:	1e03      	subs	r3, r0, #0
   b52d2:	dbee      	blt.n	b52b2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b52d4:	4618      	mov	r0, r3
   b52d6:	e7f1      	b.n	b52bc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b52d8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b52d8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b52da:	6984      	ldr	r4, [r0, #24]
   b52dc:	4b0a      	ldr	r3, [pc, #40]	; (b5308 <_ZN9TCPClientD1Ev+0x30>)
   b52de:	6003      	str	r3, [r0, #0]
   b52e0:	4605      	mov	r5, r0
   b52e2:	b17c      	cbz	r4, b5304 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b52e4:	6863      	ldr	r3, [r4, #4]
   b52e6:	3b01      	subs	r3, #1
   b52e8:	6063      	str	r3, [r4, #4]
   b52ea:	b95b      	cbnz	r3, b5304 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b52ec:	6823      	ldr	r3, [r4, #0]
   b52ee:	4620      	mov	r0, r4
   b52f0:	689b      	ldr	r3, [r3, #8]
   b52f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b52f4:	68a3      	ldr	r3, [r4, #8]
   b52f6:	3b01      	subs	r3, #1
   b52f8:	60a3      	str	r3, [r4, #8]
   b52fa:	b91b      	cbnz	r3, b5304 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b52fc:	6823      	ldr	r3, [r4, #0]
   b52fe:	4620      	mov	r0, r4
   b5300:	68db      	ldr	r3, [r3, #12]
   b5302:	4798      	blx	r3
   b5304:	4628      	mov	r0, r5
   b5306:	bd38      	pop	{r3, r4, r5, pc}
   b5308:	000b65b8 	.word	0x000b65b8

000b530c <_ZN9TCPClientD0Ev>:
   b530c:	b510      	push	{r4, lr}
   b530e:	4604      	mov	r4, r0
   b5310:	f7ff ffe2 	bl	b52d8 <_ZN9TCPClientD1Ev>
   b5314:	4620      	mov	r0, r4
   b5316:	211c      	movs	r1, #28
   b5318:	f7fe febf 	bl	b409a <_ZdlPvj>
   b531c:	4620      	mov	r0, r4
   b531e:	bd10      	pop	{r4, pc}

000b5320 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5320:	b530      	push	{r4, r5, lr}
   b5322:	b087      	sub	sp, #28
   b5324:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5326:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5328:	4668      	mov	r0, sp
   b532a:	f000 fbdd 	bl	b5ae8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b532e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5330:	3404      	adds	r4, #4
   b5332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5334:	682b      	ldr	r3, [r5, #0]
   b5336:	7023      	strb	r3, [r4, #0]
    }
   b5338:	b007      	add	sp, #28
   b533a:	bd30      	pop	{r4, r5, pc}

000b533c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b533c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b533e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5340:	4b05      	ldr	r3, [pc, #20]	; (b5358 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5342:	4604      	mov	r4, r0
   b5344:	358c      	adds	r5, #140	; 0x8c
   b5346:	f844 3b04 	str.w	r3, [r4], #4
   b534a:	4606      	mov	r6, r0
   b534c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b534e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5350:	682b      	ldr	r3, [r5, #0]
   b5352:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5354:	4630      	mov	r0, r6
   b5356:	bd70      	pop	{r4, r5, r6, pc}
   b5358:	000b668c 	.word	0x000b668c

000b535c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b535c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5360:	4698      	mov	r8, r3
    stop();
   b5362:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5364:	b093      	sub	sp, #76	; 0x4c
   b5366:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5368:	2400      	movs	r4, #0
    stop();
   b536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b536c:	4606      	mov	r6, r0
   b536e:	4617      	mov	r7, r2
    stop();
   b5370:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5372:	4628      	mov	r0, r5
   b5374:	466b      	mov	r3, sp
   b5376:	4622      	mov	r2, r4
   b5378:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b537a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b537c:	f7ff fd56 	bl	b4e2c <netdb_getaddrinfo>
   b5380:	4605      	mov	r5, r0
   b5382:	2800      	cmp	r0, #0
   b5384:	d163      	bne.n	b544e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5386:	9b00      	ldr	r3, [sp, #0]
   b5388:	2b00      	cmp	r3, #0
   b538a:	d04b      	beq.n	b5424 <_ZN9TCPClient7connectEPKctm+0xc8>
   b538c:	695b      	ldr	r3, [r3, #20]
   b538e:	2b00      	cmp	r3, #0
   b5390:	d048      	beq.n	b5424 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5392:	a806      	add	r0, sp, #24
   b5394:	f000 fb64 	bl	b5a60 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5398:	9b00      	ldr	r3, [sp, #0]
   b539a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b539c:	7863      	ldrb	r3, [r4, #1]
   b539e:	2b02      	cmp	r3, #2
   b53a0:	d104      	bne.n	b53ac <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b53a2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b53a4:	a806      	add	r0, sp, #24
   b53a6:	f7ff ffbb 	bl	b5320 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b53aa:	e026      	b.n	b53fa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b53ac:	2b0a      	cmp	r3, #10
   b53ae:	d124      	bne.n	b53fa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b53b0:	2211      	movs	r2, #17
   b53b2:	4629      	mov	r1, r5
   b53b4:	a801      	add	r0, sp, #4
   b53b6:	f000 ff23 	bl	b6200 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b53ba:	68a3      	ldr	r3, [r4, #8]
   b53bc:	2b00      	cmp	r3, #0
   b53be:	d038      	beq.n	b5432 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b53c0:	f104 0308 	add.w	r3, r4, #8
   b53c4:	f10d 0c04 	add.w	ip, sp, #4
   b53c8:	3418      	adds	r4, #24
   b53ca:	6818      	ldr	r0, [r3, #0]
   b53cc:	6859      	ldr	r1, [r3, #4]
   b53ce:	4662      	mov	r2, ip
   b53d0:	c203      	stmia	r2!, {r0, r1}
   b53d2:	3308      	adds	r3, #8
   b53d4:	42a3      	cmp	r3, r4
   b53d6:	4694      	mov	ip, r2
   b53d8:	d1f7      	bne.n	b53ca <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b53da:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b53dc:	a901      	add	r1, sp, #4
   b53de:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b53e0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b53e4:	f000 fb4a 	bl	b5a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b53e8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b53ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b53f0:	ac07      	add	r4, sp, #28
   b53f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53f4:	f8dc 3000 	ldr.w	r3, [ip]
   b53f8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b53fa:	a806      	add	r0, sp, #24
   b53fc:	f000 fb50 	bl	b5aa0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5400:	b180      	cbz	r0, b5424 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5402:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5404:	ad07      	add	r5, sp, #28
   b5406:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b540a:	4b12      	ldr	r3, [pc, #72]	; (b5454 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b540c:	930c      	str	r3, [sp, #48]	; 0x30
   b540e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5410:	ac0d      	add	r4, sp, #52	; 0x34
   b5412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5414:	682b      	ldr	r3, [r5, #0]
   b5416:	7023      	strb	r3, [r4, #0]
   b5418:	463a      	mov	r2, r7
   b541a:	4643      	mov	r3, r8
   b541c:	a90c      	add	r1, sp, #48	; 0x30
   b541e:	4630      	mov	r0, r6
   b5420:	47c8      	blx	r9
   b5422:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5424:	9800      	ldr	r0, [sp, #0]
   b5426:	f7ff fcf9 	bl	b4e1c <netdb_freeaddrinfo>
}
   b542a:	4628      	mov	r0, r5
   b542c:	b013      	add	sp, #76	; 0x4c
   b542e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5432:	68e3      	ldr	r3, [r4, #12]
   b5434:	2b00      	cmp	r3, #0
   b5436:	d1c3      	bne.n	b53c0 <_ZN9TCPClient7connectEPKctm+0x64>
   b5438:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b543c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5440:	f7ff fca4 	bl	b4d8c <inet_htonl>
   b5444:	4581      	cmp	r9, r0
   b5446:	d1bb      	bne.n	b53c0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5448:	f104 0114 	add.w	r1, r4, #20
   b544c:	e7aa      	b.n	b53a4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b544e:	4625      	mov	r5, r4
   b5450:	e7e8      	b.n	b5424 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5452:	bf00      	nop
   b5454:	000b668c 	.word	0x000b668c

000b5458 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5458:	b538      	push	{r3, r4, r5, lr}
   b545a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b545c:	681a      	ldr	r2, [r3, #0]
   b545e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5460:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5462:	da10      	bge.n	b5486 <_ZN9TCPClient9connectedEv+0x2e>
   b5464:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5468:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b546c:	429a      	cmp	r2, r3
   b546e:	d10a      	bne.n	b5486 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5470:	6803      	ldr	r3, [r0, #0]
   b5472:	691b      	ldr	r3, [r3, #16]
   b5474:	4798      	blx	r3
        if (!rv) {
   b5476:	4604      	mov	r4, r0
   b5478:	b928      	cbnz	r0, b5486 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b547a:	682b      	ldr	r3, [r5, #0]
   b547c:	4628      	mov	r0, r5
   b547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5480:	4798      	blx	r3
        rv = available();
   b5482:	4620      	mov	r0, r4
}
   b5484:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5486:	2001      	movs	r0, #1
   b5488:	e7fc      	b.n	b5484 <_ZN9TCPClient9connectedEv+0x2c>

000b548a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b548a:	b510      	push	{r4, lr}
   b548c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b548e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5492:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5496:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5498:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b549a:	d005      	beq.n	b54a8 <_ZN9TCPClient4peekEv+0x1e>
   b549c:	6963      	ldr	r3, [r4, #20]
   b549e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b54a2:	4413      	add	r3, r2
   b54a4:	7918      	ldrb	r0, [r3, #4]
}
   b54a6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b54a8:	6803      	ldr	r3, [r0, #0]
   b54aa:	691b      	ldr	r3, [r3, #16]
   b54ac:	4798      	blx	r3
   b54ae:	2800      	cmp	r0, #0
   b54b0:	d1f4      	bne.n	b549c <_ZN9TCPClient4peekEv+0x12>
   b54b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b54b6:	e7f6      	b.n	b54a6 <_ZN9TCPClient4peekEv+0x1c>

000b54b8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b54b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54ba:	6943      	ldr	r3, [r0, #20]
   b54bc:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b54be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b54c2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b54c6:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b54c8:	4605      	mov	r5, r0
   b54ca:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b54cc:	d016      	beq.n	b54fc <_ZN9TCPClient4readEPhj+0x44>
   b54ce:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b54d0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b54d4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b54d8:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b54da:	42bc      	cmp	r4, r7
   b54dc:	bf28      	it	cs
   b54de:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b54e0:	3304      	adds	r3, #4
   b54e2:	4622      	mov	r2, r4
   b54e4:	4419      	add	r1, r3
   b54e6:	4630      	mov	r0, r6
   b54e8:	f000 fe7c 	bl	b61e4 <memcpy>
   b54ec:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b54ee:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b54f2:	4423      	add	r3, r4
   b54f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b54f8:	4620      	mov	r0, r4
   b54fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b54fc:	6803      	ldr	r3, [r0, #0]
   b54fe:	691b      	ldr	r3, [r3, #16]
   b5500:	4798      	blx	r3
   b5502:	2800      	cmp	r0, #0
   b5504:	d1e3      	bne.n	b54ce <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5506:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b550a:	e7f5      	b.n	b54f8 <_ZN9TCPClient4readEPhj+0x40>

000b550c <_ZN9TCPClient12flush_bufferEv>:
   b550c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b550e:	2300      	movs	r3, #0
   b5510:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5514:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5516:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b551a:	4770      	bx	lr

000b551c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5520:	461f      	mov	r7, r3
    stop();
   b5522:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5524:	460c      	mov	r4, r1
    stop();
   b5526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5528:	b08a      	sub	sp, #40	; 0x28
   b552a:	4605      	mov	r5, r0
   b552c:	4616      	mov	r6, r2
    stop();
   b552e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5530:	7d23      	ldrb	r3, [r4, #20]
   b5532:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5536:	2b04      	cmp	r3, #4
   b5538:	bf0c      	ite	eq
   b553a:	2002      	moveq	r0, #2
   b553c:	200a      	movne	r0, #10
   b553e:	2206      	movs	r2, #6
   b5540:	2101      	movs	r1, #1
   b5542:	f7ff fbd3 	bl	b4cec <sock_socket>
   b5546:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b554a:	696b      	ldr	r3, [r5, #20]
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	2b00      	cmp	r3, #0
   b5550:	da08      	bge.n	b5564 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5552:	682b      	ldr	r3, [r5, #0]
   b5554:	4628      	mov	r0, r5
   b5556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5558:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b555a:	4798      	blx	r3
}
   b555c:	4620      	mov	r0, r4
   b555e:	b00a      	add	sp, #40	; 0x28
   b5560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5564:	4628      	mov	r0, r5
   b5566:	f7ff ffd1 	bl	b550c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b556a:	b1b7      	cbz	r7, b559a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b556c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b556e:	a903      	add	r1, sp, #12
   b5570:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5572:	9303      	str	r3, [sp, #12]
   b5574:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5578:	f7ff fc30 	bl	b4ddc <if_index_to_name>
   b557c:	2800      	cmp	r0, #0
   b557e:	d1e8      	bne.n	b5552 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5580:	6968      	ldr	r0, [r5, #20]
   b5582:	2306      	movs	r3, #6
   b5584:	9300      	str	r3, [sp, #0]
   b5586:	6800      	ldr	r0, [r0, #0]
   b5588:	ab03      	add	r3, sp, #12
   b558a:	f241 020b 	movw	r2, #4107	; 0x100b
   b558e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5592:	f7ff fb83 	bl	b4c9c <sock_setsockopt>
   b5596:	2800      	cmp	r0, #0
   b5598:	d1db      	bne.n	b5552 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b559a:	221c      	movs	r2, #28
   b559c:	2100      	movs	r1, #0
   b559e:	a803      	add	r0, sp, #12
   b55a0:	f000 fe2e 	bl	b6200 <memset>
    if (ip.version() == 4) {
   b55a4:	7d23      	ldrb	r3, [r4, #20]
   b55a6:	2b04      	cmp	r3, #4
   b55a8:	d11d      	bne.n	b55e6 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b55aa:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b55ae:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b55b0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b55b4:	f7ff fbf2 	bl	b4d9c <inet_htons>
   b55b8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b55bc:	6860      	ldr	r0, [r4, #4]
   b55be:	f7ff fbe5 	bl	b4d8c <inet_htonl>
   b55c2:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b55c4:	696b      	ldr	r3, [r5, #20]
   b55c6:	221c      	movs	r2, #28
   b55c8:	6818      	ldr	r0, [r3, #0]
   b55ca:	a903      	add	r1, sp, #12
   b55cc:	f7ff fb76 	bl	b4cbc <sock_connect>
   b55d0:	2800      	cmp	r0, #0
   b55d2:	d1be      	bne.n	b5552 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b55d4:	3404      	adds	r4, #4
   b55d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b55d8:	696d      	ldr	r5, [r5, #20]
   b55da:	358c      	adds	r5, #140	; 0x8c
   b55dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b55de:	6823      	ldr	r3, [r4, #0]
   b55e0:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b55e2:	2401      	movs	r4, #1
   b55e4:	e7ba      	b.n	b555c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b55e6:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b55ea:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b55ec:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b55f0:	f7ff fbd4 	bl	b4d9c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b55f4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b55f6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b55fa:	1d23      	adds	r3, r4, #4
   b55fc:	f104 0714 	add.w	r7, r4, #20
   b5600:	6818      	ldr	r0, [r3, #0]
   b5602:	6859      	ldr	r1, [r3, #4]
   b5604:	4632      	mov	r2, r6
   b5606:	c203      	stmia	r2!, {r0, r1}
   b5608:	3308      	adds	r3, #8
   b560a:	42bb      	cmp	r3, r7
   b560c:	4616      	mov	r6, r2
   b560e:	d1f7      	bne.n	b5600 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5610:	e7d8      	b.n	b55c4 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5614 <_ZN9TCPClient9availableEv>:
{
   b5614:	b530      	push	{r4, r5, lr}
   b5616:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5618:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b561c:	b08b      	sub	sp, #44	; 0x2c
   b561e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5620:	b12b      	cbz	r3, b562e <_ZN9TCPClient9availableEv+0x1a>
   b5622:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5626:	429a      	cmp	r2, r3
   b5628:	d101      	bne.n	b562e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b562a:	f7ff ff6f 	bl	b550c <_ZN9TCPClient12flush_bufferEv>
   b562e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5630:	6808      	ldr	r0, [r1, #0]
   b5632:	2800      	cmp	r0, #0
   b5634:	db18      	blt.n	b5668 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5636:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b563a:	2d7f      	cmp	r5, #127	; 0x7f
   b563c:	d814      	bhi.n	b5668 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b563e:	3104      	adds	r1, #4
   b5640:	2308      	movs	r3, #8
   b5642:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5646:	4429      	add	r1, r5
   b5648:	f7ff fb40 	bl	b4ccc <sock_recv>
            if (ret > 0) {
   b564c:	2800      	cmp	r0, #0
   b564e:	dd13      	ble.n	b5678 <_ZN9TCPClient9availableEv+0x64>
   b5650:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5652:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5656:	b90a      	cbnz	r2, b565c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5658:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b565c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b565e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5662:	4410      	add	r0, r2
   b5664:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5668:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b566a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b566e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5672:	1ac0      	subs	r0, r0, r3
   b5674:	b00b      	add	sp, #44	; 0x2c
   b5676:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5678:	f7ff fc8c 	bl	b4f94 <__errno>
   b567c:	6803      	ldr	r3, [r0, #0]
   b567e:	2b0b      	cmp	r3, #11
   b5680:	d0f2      	beq.n	b5668 <_ZN9TCPClient9availableEv+0x54>
   b5682:	f7ff fc87 	bl	b4f94 <__errno>
   b5686:	6803      	ldr	r3, [r0, #0]
   b5688:	2b0b      	cmp	r3, #11
   b568a:	d0ed      	beq.n	b5668 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b568c:	2320      	movs	r3, #32
   b568e:	2500      	movs	r5, #0
   b5690:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5694:	f7ff fc7e 	bl	b4f94 <__errno>
   b5698:	6803      	ldr	r3, [r0, #0]
   b569a:	9301      	str	r3, [sp, #4]
   b569c:	4b08      	ldr	r3, [pc, #32]	; (b56c0 <_ZN9TCPClient9availableEv+0xac>)
   b569e:	4909      	ldr	r1, [pc, #36]	; (b56c4 <_ZN9TCPClient9availableEv+0xb0>)
   b56a0:	9300      	str	r3, [sp, #0]
   b56a2:	aa02      	add	r2, sp, #8
   b56a4:	462b      	mov	r3, r5
   b56a6:	2032      	movs	r0, #50	; 0x32
   b56a8:	f7ff fbc8 	bl	b4e3c <log_message>
                    sock_close(d_->sock);
   b56ac:	6963      	ldr	r3, [r4, #20]
   b56ae:	6818      	ldr	r0, [r3, #0]
   b56b0:	f7ff fafc 	bl	b4cac <sock_close>
   b56b4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b56b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b56ba:	601a      	str	r2, [r3, #0]
   b56bc:	e7d4      	b.n	b5668 <_ZN9TCPClient9availableEv+0x54>
   b56be:	bf00      	nop
   b56c0:	000b657b 	.word	0x000b657b
   b56c4:	000b6574 	.word	0x000b6574

000b56c8 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b56c8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b56ca:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b56cc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b56ce:	6818      	ldr	r0, [r3, #0]
   b56d0:	2800      	cmp	r0, #0
   b56d2:	db01      	blt.n	b56d8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b56d4:	f7ff faea 	bl	b4cac <sock_close>
   b56d8:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b56da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b56de:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b56e0:	6960      	ldr	r0, [r4, #20]
   b56e2:	2211      	movs	r2, #17
   b56e4:	2100      	movs	r1, #0
   b56e6:	308c      	adds	r0, #140	; 0x8c
   b56e8:	f000 fd8a 	bl	b6200 <memset>
    flush_buffer();
   b56ec:	4620      	mov	r0, r4
}
   b56ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b56f2:	f7ff bf0b 	b.w	b550c <_ZN9TCPClient12flush_bufferEv>

000b56f6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b56f6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b56f8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b56fa:	4604      	mov	r4, r0
          total(0) {
   b56fc:	6001      	str	r1, [r0, #0]
   b56fe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5702:	3088      	adds	r0, #136	; 0x88
   b5704:	f000 f9ac 	bl	b5a60 <_ZN9IPAddressC1Ev>
}
   b5708:	4620      	mov	r0, r4
   b570a:	bd10      	pop	{r4, pc}

000b570c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b570c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b570e:	2300      	movs	r3, #0
   b5710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5714:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5718:	4a0e      	ldr	r2, [pc, #56]	; (b5754 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b571a:	6103      	str	r3, [r0, #16]
   b571c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b571e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5720:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5722:	20ac      	movs	r0, #172	; 0xac
   b5724:	9101      	str	r1, [sp, #4]
   b5726:	f7fe fcb4 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b572a:	1e05      	subs	r5, r0, #0
   b572c:	f105 060c 	add.w	r6, r5, #12
   b5730:	d008      	beq.n	b5744 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5732:	2301      	movs	r3, #1
   b5734:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5738:	4b07      	ldr	r3, [pc, #28]	; (b5758 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b573a:	9901      	ldr	r1, [sp, #4]
   b573c:	602b      	str	r3, [r5, #0]
   b573e:	4630      	mov	r0, r6
   b5740:	f7ff ffd9 	bl	b56f6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5744:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5746:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b574a:	f7ff fedf 	bl	b550c <_ZN9TCPClient12flush_bufferEv>
}
   b574e:	b002      	add	sp, #8
   b5750:	bd70      	pop	{r4, r5, r6, pc}
   b5752:	bf00      	nop
   b5754:	000b65b8 	.word	0x000b65b8
   b5758:	000b6594 	.word	0x000b6594

000b575c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b575c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b575e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5762:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5764:	f7ff ffd2 	bl	b570c <_ZN9TCPClientC1Ei>
}
   b5768:	4620      	mov	r0, r4
   b576a:	bd10      	pop	{r4, pc}

000b576c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b576c:	b510      	push	{r4, lr}
   b576e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5770:	6800      	ldr	r0, [r0, #0]
   b5772:	2800      	cmp	r0, #0
   b5774:	db01      	blt.n	b577a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5776:	f7ff fa99 	bl	b4cac <sock_close>
    }
}
   b577a:	4620      	mov	r0, r4
   b577c:	bd10      	pop	{r4, pc}

000b577e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b577e:	300c      	adds	r0, #12
   b5780:	f7ff bff4 	b.w	b576c <_ZN9TCPClient4DataD1Ev>

000b5784 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5784:	b510      	push	{r4, lr}
   b5786:	4604      	mov	r4, r0
   b5788:	4608      	mov	r0, r1
{
    _spi = spi;
   b578a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b578c:	f7ff fa76 	bl	b4c7c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5790:	2300      	movs	r3, #0
   b5792:	6063      	str	r3, [r4, #4]
}
   b5794:	4620      	mov	r0, r4
   b5796:	bd10      	pop	{r4, pc}

000b5798 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b5798:	b510      	push	{r4, lr}
  if (0 == max) {
   b579a:	4604      	mov	r4, r0
   b579c:	b128      	cbz	r0, b57aa <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b579e:	f000 fd65 	bl	b626c <rand>
   b57a2:	fb90 f3f4 	sdiv	r3, r0, r4
   b57a6:	fb03 0414 	mls	r4, r3, r4, r0
}
   b57aa:	4620      	mov	r0, r4
   b57ac:	bd10      	pop	{r4, pc}

000b57ae <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   b57ae:	4288      	cmp	r0, r1
{
   b57b0:	b510      	push	{r4, lr}
   b57b2:	4604      	mov	r4, r0
  if (min >= max) {
   b57b4:	da03      	bge.n	b57be <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   b57b6:	1a08      	subs	r0, r1, r0
   b57b8:	f7ff ffee 	bl	b5798 <_Z6randomi>
   b57bc:	4404      	add	r4, r0
}
   b57be:	4620      	mov	r0, r4
   b57c0:	bd10      	pop	{r4, pc}

000b57c2 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b57c2:	4770      	bx	lr

000b57c4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b57c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57c6:	4606      	mov	r6, r0
   b57c8:	4615      	mov	r5, r2
   b57ca:	460c      	mov	r4, r1
   b57cc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b57ce:	42bc      	cmp	r4, r7
   b57d0:	d006      	beq.n	b57e0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b57d2:	6833      	ldr	r3, [r6, #0]
   b57d4:	f814 1b01 	ldrb.w	r1, [r4], #1
   b57d8:	689b      	ldr	r3, [r3, #8]
   b57da:	4630      	mov	r0, r6
   b57dc:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b57de:	e7f6      	b.n	b57ce <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b57e0:	4628      	mov	r0, r5
   b57e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57e4 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b57e4:	7c00      	ldrb	r0, [r0, #16]
   b57e6:	2200      	movs	r2, #0
   b57e8:	f7ff ba10 	b.w	b4c0c <hal_i2c_write>

000b57ec <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b57ec:	7c00      	ldrb	r0, [r0, #16]
   b57ee:	2100      	movs	r1, #0
   b57f0:	f7ff ba14 	b.w	b4c1c <hal_i2c_available>

000b57f4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b57f4:	7c00      	ldrb	r0, [r0, #16]
   b57f6:	2100      	movs	r1, #0
   b57f8:	f7ff ba18 	b.w	b4c2c <hal_i2c_read>

000b57fc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b57fc:	7c00      	ldrb	r0, [r0, #16]
   b57fe:	2100      	movs	r1, #0
   b5800:	f7ff ba1c 	b.w	b4c3c <hal_i2c_peek>

000b5804 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5804:	7c00      	ldrb	r0, [r0, #16]
   b5806:	2100      	movs	r1, #0
   b5808:	f7ff ba20 	b.w	b4c4c <hal_i2c_flush>

000b580c <_ZN7TwoWireD0Ev>:
   b580c:	b510      	push	{r4, lr}
   b580e:	2114      	movs	r1, #20
   b5810:	4604      	mov	r4, r0
   b5812:	f7fe fc42 	bl	b409a <_ZdlPvj>
   b5816:	4620      	mov	r0, r4
   b5818:	bd10      	pop	{r4, pc}
	...

000b581c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b581c:	b510      	push	{r4, lr}
   b581e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5822:	4604      	mov	r4, r0
   b5824:	4608      	mov	r0, r1
   b5826:	2100      	movs	r1, #0
   b5828:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b582c:	4b03      	ldr	r3, [pc, #12]	; (b583c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b582e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5830:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5832:	4611      	mov	r1, r2
   b5834:	f7ff fa1a 	bl	b4c6c <hal_i2c_init>
}
   b5838:	4620      	mov	r0, r4
   b583a:	bd10      	pop	{r4, pc}
   b583c:	000b6604 	.word	0x000b6604

000b5840 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5840:	4770      	bx	lr

000b5842 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5842:	7441      	strb	r1, [r0, #17]
}
   b5844:	4770      	bx	lr

000b5846 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5846:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5848:	7c00      	ldrb	r0, [r0, #16]
   b584a:	f7ff fa87 	bl	b4d5c <hal_usart_available_data_for_write>
}
   b584e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5852:	bd08      	pop	{r3, pc}

000b5854 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5854:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5856:	7c00      	ldrb	r0, [r0, #16]
   b5858:	f7ff fa58 	bl	b4d0c <hal_usart_available>
}
   b585c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5860:	bd08      	pop	{r3, pc}

000b5862 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5862:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5864:	7c00      	ldrb	r0, [r0, #16]
   b5866:	f7ff fa61 	bl	b4d2c <hal_usart_peek>
}
   b586a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b586e:	bd08      	pop	{r3, pc}

000b5870 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5870:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5872:	7c00      	ldrb	r0, [r0, #16]
   b5874:	f7ff fa52 	bl	b4d1c <hal_usart_read>
}
   b5878:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b587c:	bd08      	pop	{r3, pc}

000b587e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b587e:	7c00      	ldrb	r0, [r0, #16]
   b5880:	f7ff ba5c 	b.w	b4d3c <hal_usart_flush>

000b5884 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5884:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5886:	7c45      	ldrb	r5, [r0, #17]
{
   b5888:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b588a:	b12d      	cbz	r5, b5898 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b588c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b588e:	b003      	add	sp, #12
   b5890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5894:	f7ff ba32 	b.w	b4cfc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5898:	7c00      	ldrb	r0, [r0, #16]
   b589a:	9101      	str	r1, [sp, #4]
   b589c:	f7ff fa5e 	bl	b4d5c <hal_usart_available_data_for_write>
   b58a0:	2800      	cmp	r0, #0
   b58a2:	9901      	ldr	r1, [sp, #4]
   b58a4:	dcf2      	bgt.n	b588c <_ZN11USARTSerial5writeEh+0x8>
}
   b58a6:	4628      	mov	r0, r5
   b58a8:	b003      	add	sp, #12
   b58aa:	bd30      	pop	{r4, r5, pc}

000b58ac <_ZN11USARTSerialD0Ev>:
   b58ac:	b510      	push	{r4, lr}
   b58ae:	2114      	movs	r1, #20
   b58b0:	4604      	mov	r4, r0
   b58b2:	f7fe fbf2 	bl	b409a <_ZdlPvj>
   b58b6:	4620      	mov	r0, r4
   b58b8:	bd10      	pop	{r4, pc}
	...

000b58bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b58bc:	b510      	push	{r4, lr}
   b58be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58c2:	4604      	mov	r4, r0
   b58c4:	4608      	mov	r0, r1
   b58c6:	4611      	mov	r1, r2
   b58c8:	2200      	movs	r2, #0
   b58ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b58ce:	4b04      	ldr	r3, [pc, #16]	; (b58e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b58d0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b58d2:	2301      	movs	r3, #1
  _serial = serial;
   b58d4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b58d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b58d8:	f7ff fa48 	bl	b4d6c <hal_usart_init_ex>
}
   b58dc:	4620      	mov	r0, r4
   b58de:	bd10      	pop	{r4, pc}
   b58e0:	000b662c 	.word	0x000b662c

000b58e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b58e4:	7441      	strb	r1, [r0, #17]
}
   b58e6:	4770      	bx	lr

000b58e8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b58e8:	4770      	bx	lr

000b58ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b58ea:	4770      	bx	lr

000b58ec <_ZN9USBSerial4readEv>:
{
   b58ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b58ee:	2100      	movs	r1, #0
   b58f0:	7c00      	ldrb	r0, [r0, #16]
   b58f2:	f7ff f973 	bl	b4bdc <HAL_USB_USART_Receive_Data>
}
   b58f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b58fa:	bd08      	pop	{r3, pc}

000b58fc <_ZN9USBSerial4peekEv>:
{
   b58fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b58fe:	2101      	movs	r1, #1
   b5900:	7c00      	ldrb	r0, [r0, #16]
   b5902:	f7ff f96b 	bl	b4bdc <HAL_USB_USART_Receive_Data>
}
   b5906:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b590a:	bd08      	pop	{r3, pc}

000b590c <_ZN9USBSerial17availableForWriteEv>:
{
   b590c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b590e:	7c00      	ldrb	r0, [r0, #16]
   b5910:	f7ff f95c 	bl	b4bcc <HAL_USB_USART_Available_Data_For_Write>
}
   b5914:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5918:	bd08      	pop	{r3, pc}

000b591a <_ZN9USBSerial9availableEv>:
{
   b591a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b591c:	7c00      	ldrb	r0, [r0, #16]
   b591e:	f7ff f94d 	bl	b4bbc <HAL_USB_USART_Available_Data>
}
   b5922:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5926:	bd08      	pop	{r3, pc}

000b5928 <_ZN9USBSerial5writeEh>:
{
   b5928:	b513      	push	{r0, r1, r4, lr}
   b592a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b592c:	7c00      	ldrb	r0, [r0, #16]
{
   b592e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5930:	f7ff f94c 	bl	b4bcc <HAL_USB_USART_Available_Data_For_Write>
   b5934:	2800      	cmp	r0, #0
   b5936:	9901      	ldr	r1, [sp, #4]
   b5938:	dc01      	bgt.n	b593e <_ZN9USBSerial5writeEh+0x16>
   b593a:	7c60      	ldrb	r0, [r4, #17]
   b593c:	b120      	cbz	r0, b5948 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b593e:	7c20      	ldrb	r0, [r4, #16]
   b5940:	f7ff f954 	bl	b4bec <HAL_USB_USART_Send_Data>
   b5944:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5948:	b002      	add	sp, #8
   b594a:	bd10      	pop	{r4, pc}

000b594c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b594c:	7c00      	ldrb	r0, [r0, #16]
   b594e:	f7ff b955 	b.w	b4bfc <HAL_USB_USART_Flush_Data>

000b5952 <_ZN9USBSerialD0Ev>:
   b5952:	b510      	push	{r4, lr}
   b5954:	2114      	movs	r1, #20
   b5956:	4604      	mov	r4, r0
   b5958:	f7fe fb9f 	bl	b409a <_ZdlPvj>
   b595c:	4620      	mov	r0, r4
   b595e:	bd10      	pop	{r4, pc}

000b5960 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5960:	b510      	push	{r4, lr}
   b5962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5966:	4604      	mov	r4, r0
   b5968:	4608      	mov	r0, r1
   b596a:	2100      	movs	r1, #0
   b596c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5970:	4b04      	ldr	r3, [pc, #16]	; (b5984 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5972:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5974:	2301      	movs	r3, #1
  _serial = serial;
   b5976:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5978:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b597a:	4611      	mov	r1, r2
   b597c:	f7ff f90e 	bl	b4b9c <HAL_USB_USART_Init>
}
   b5980:	4620      	mov	r0, r4
   b5982:	bd10      	pop	{r4, pc}
   b5984:	000b665c 	.word	0x000b665c

000b5988 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5988:	7c00      	ldrb	r0, [r0, #16]
   b598a:	2200      	movs	r2, #0
   b598c:	f7ff b90e 	b.w	b4bac <HAL_USB_USART_Begin>

000b5990 <_Z19acquireSerialBufferv>:
{
   b5990:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5992:	2214      	movs	r2, #20
{
   b5994:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5996:	2100      	movs	r1, #0
   b5998:	f000 fc32 	bl	b6200 <memset>
}
   b599c:	4620      	mov	r0, r4
   b599e:	bd10      	pop	{r4, pc}

000b59a0 <_Z16_fetch_usbserialv>:
{
   b59a0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b59a2:	4c0f      	ldr	r4, [pc, #60]	; (b59e0 <_Z16_fetch_usbserialv+0x40>)
{
   b59a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b59a6:	a803      	add	r0, sp, #12
   b59a8:	f7ff fff2 	bl	b5990 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b59ac:	7821      	ldrb	r1, [r4, #0]
   b59ae:	f3bf 8f5b 	dmb	ish
   b59b2:	f011 0101 	ands.w	r1, r1, #1
   b59b6:	d10f      	bne.n	b59d8 <_Z16_fetch_usbserialv+0x38>
   b59b8:	4620      	mov	r0, r4
   b59ba:	9101      	str	r1, [sp, #4]
   b59bc:	f7fe fb6f 	bl	b409e <__cxa_guard_acquire>
   b59c0:	9901      	ldr	r1, [sp, #4]
   b59c2:	b148      	cbz	r0, b59d8 <_Z16_fetch_usbserialv+0x38>
   b59c4:	aa03      	add	r2, sp, #12
   b59c6:	4807      	ldr	r0, [pc, #28]	; (b59e4 <_Z16_fetch_usbserialv+0x44>)
   b59c8:	f7ff ffca 	bl	b5960 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b59cc:	4620      	mov	r0, r4
   b59ce:	f7fe fb6b 	bl	b40a8 <__cxa_guard_release>
   b59d2:	4805      	ldr	r0, [pc, #20]	; (b59e8 <_Z16_fetch_usbserialv+0x48>)
   b59d4:	f000 fc00 	bl	b61d8 <atexit>
	return _usbserial;
}
   b59d8:	4802      	ldr	r0, [pc, #8]	; (b59e4 <_Z16_fetch_usbserialv+0x44>)
   b59da:	b008      	add	sp, #32
   b59dc:	bd10      	pop	{r4, pc}
   b59de:	bf00      	nop
   b59e0:	2003e6c8 	.word	0x2003e6c8
   b59e4:	2003e6cc 	.word	0x2003e6cc
   b59e8:	000b58e9 	.word	0x000b58e9

000b59ec <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b59ec:	4770      	bx	lr

000b59ee <_ZN9IPAddressD0Ev>:
   b59ee:	b510      	push	{r4, lr}
   b59f0:	2118      	movs	r1, #24
   b59f2:	4604      	mov	r4, r0
   b59f4:	f7fe fb51 	bl	b409a <_ZdlPvj>
   b59f8:	4620      	mov	r0, r4
   b59fa:	bd10      	pop	{r4, pc}

000b59fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b59fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b59fe:	7d03      	ldrb	r3, [r0, #20]
   b5a00:	2b06      	cmp	r3, #6
{
   b5a02:	b08d      	sub	sp, #52	; 0x34
   b5a04:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5a06:	f100 0704 	add.w	r7, r0, #4
   b5a0a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5a0e:	d012      	beq.n	b5a36 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5a10:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5a14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5a18:	220a      	movs	r2, #10
   b5a1a:	4630      	mov	r0, r6
   b5a1c:	f000 f96d 	bl	b5cfa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5a20:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5a22:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5a24:	d019      	beq.n	b5a5a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5a26:	2c00      	cmp	r4, #0
   b5a28:	d0f4      	beq.n	b5a14 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5a2a:	212e      	movs	r1, #46	; 0x2e
   b5a2c:	4630      	mov	r0, r6
   b5a2e:	f000 f94b 	bl	b5cc8 <_ZN5Print5printEc>
   b5a32:	4404      	add	r4, r0
   b5a34:	e7ee      	b.n	b5a14 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5a36:	232f      	movs	r3, #47	; 0x2f
   b5a38:	466a      	mov	r2, sp
   b5a3a:	4639      	mov	r1, r7
   b5a3c:	200a      	movs	r0, #10
		buf[0] = 0;
   b5a3e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5a42:	f7ff f99b 	bl	b4d7c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5a46:	4668      	mov	r0, sp
   b5a48:	f000 fc58 	bl	b62fc <strlen>
   b5a4c:	6833      	ldr	r3, [r6, #0]
   b5a4e:	4602      	mov	r2, r0
   b5a50:	68db      	ldr	r3, [r3, #12]
   b5a52:	4669      	mov	r1, sp
   b5a54:	4630      	mov	r0, r6
   b5a56:	4798      	blx	r3
   b5a58:	4604      	mov	r4, r0
    }
    return n;
}
   b5a5a:	4620      	mov	r0, r4
   b5a5c:	b00d      	add	sp, #52	; 0x34
   b5a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5a60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5a60:	b510      	push	{r4, lr}
   b5a62:	4b05      	ldr	r3, [pc, #20]	; (b5a78 <_ZN9IPAddressC1Ev+0x18>)
   b5a64:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b5a66:	2211      	movs	r2, #17
   b5a68:	f840 3b04 	str.w	r3, [r0], #4
   b5a6c:	2100      	movs	r1, #0
   b5a6e:	f000 fbc7 	bl	b6200 <memset>
}
   b5a72:	4620      	mov	r0, r4
   b5a74:	bd10      	pop	{r4, pc}
   b5a76:	bf00      	nop
   b5a78:	000b668c 	.word	0x000b668c

000b5a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5a7c:	4603      	mov	r3, r0
   b5a7e:	4a07      	ldr	r2, [pc, #28]	; (b5a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5a80:	b510      	push	{r4, lr}
   b5a82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5a86:	f101 0210 	add.w	r2, r1, #16
   b5a8a:	f851 4b04 	ldr.w	r4, [r1], #4
   b5a8e:	f843 4b04 	str.w	r4, [r3], #4
   b5a92:	4291      	cmp	r1, r2
   b5a94:	d1f9      	bne.n	b5a8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5a96:	780a      	ldrb	r2, [r1, #0]
   b5a98:	701a      	strb	r2, [r3, #0]
}
   b5a9a:	bd10      	pop	{r4, pc}
   b5a9c:	000b668c 	.word	0x000b668c

000b5aa0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5aa0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5aa2:	2b04      	cmp	r3, #4
   b5aa4:	d104      	bne.n	b5ab0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5aa6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5aa8:	3800      	subs	r0, #0
   b5aaa:	bf18      	it	ne
   b5aac:	2001      	movne	r0, #1
   b5aae:	4770      	bx	lr
    } else if (version() == 6) {
   b5ab0:	2b06      	cmp	r3, #6
   b5ab2:	d107      	bne.n	b5ac4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5ab4:	6843      	ldr	r3, [r0, #4]
   b5ab6:	b93b      	cbnz	r3, b5ac8 <_ZNK9IPAddresscvbEv+0x28>
   b5ab8:	6883      	ldr	r3, [r0, #8]
   b5aba:	b92b      	cbnz	r3, b5ac8 <_ZNK9IPAddresscvbEv+0x28>
   b5abc:	68c3      	ldr	r3, [r0, #12]
   b5abe:	b91b      	cbnz	r3, b5ac8 <_ZNK9IPAddresscvbEv+0x28>
   b5ac0:	6900      	ldr	r0, [r0, #16]
   b5ac2:	e7f1      	b.n	b5aa8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5ac4:	2000      	movs	r0, #0
   b5ac6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5ac8:	2001      	movs	r0, #1
}
   b5aca:	4770      	bx	lr

000b5acc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5acc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5ace:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5ad2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5ad6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5ada:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5ade:	2304      	movs	r3, #4
   b5ae0:	6041      	str	r1, [r0, #4]
   b5ae2:	7503      	strb	r3, [r0, #20]
}
   b5ae4:	bd10      	pop	{r4, pc}
	...

000b5ae8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5ae8:	b507      	push	{r0, r1, r2, lr}
   b5aea:	4b06      	ldr	r3, [pc, #24]	; (b5b04 <_ZN9IPAddressC1EPKh+0x1c>)
   b5aec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5aee:	78cb      	ldrb	r3, [r1, #3]
   b5af0:	9300      	str	r3, [sp, #0]
   b5af2:	788b      	ldrb	r3, [r1, #2]
   b5af4:	784a      	ldrb	r2, [r1, #1]
   b5af6:	7809      	ldrb	r1, [r1, #0]
   b5af8:	f7ff ffe8 	bl	b5acc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5afc:	b003      	add	sp, #12
   b5afe:	f85d fb04 	ldr.w	pc, [sp], #4
   b5b02:	bf00      	nop
   b5b04:	000b668c 	.word	0x000b668c

000b5b08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5b08:	4b01      	ldr	r3, [pc, #4]	; (b5b10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5b0a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5b0c:	4770      	bx	lr
   b5b0e:	bf00      	nop
   b5b10:	2003e570 	.word	0x2003e570

000b5b14 <serialEventRun>:
{
   b5b14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5b16:	4b0b      	ldr	r3, [pc, #44]	; (b5b44 <serialEventRun+0x30>)
   b5b18:	b143      	cbz	r3, b5b2c <serialEventRun+0x18>
   b5b1a:	f7ff ff41 	bl	b59a0 <_Z16_fetch_usbserialv>
   b5b1e:	6803      	ldr	r3, [r0, #0]
   b5b20:	691b      	ldr	r3, [r3, #16]
   b5b22:	4798      	blx	r3
   b5b24:	2800      	cmp	r0, #0
   b5b26:	dd01      	ble.n	b5b2c <serialEventRun+0x18>
        serialEvent();
   b5b28:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5b2c:	4b06      	ldr	r3, [pc, #24]	; (b5b48 <serialEventRun+0x34>)
   b5b2e:	b143      	cbz	r3, b5b42 <serialEventRun+0x2e>
   b5b30:	f000 f9b2 	bl	b5e98 <_Z22__fetch_global_Serial1v>
   b5b34:	6803      	ldr	r3, [r0, #0]
   b5b36:	691b      	ldr	r3, [r3, #16]
   b5b38:	4798      	blx	r3
   b5b3a:	2800      	cmp	r0, #0
   b5b3c:	dd01      	ble.n	b5b42 <serialEventRun+0x2e>
        serialEvent1();
   b5b3e:	f3af 8000 	nop.w
}
   b5b42:	bd08      	pop	{r3, pc}
	...

000b5b4c <_post_loop>:
{
   b5b4c:	b508      	push	{r3, lr}
	serialEventRun();
   b5b4e:	f7ff ffe1 	bl	b5b14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5b52:	f7ff f93b 	bl	b4dcc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5b56:	4b01      	ldr	r3, [pc, #4]	; (b5b5c <_post_loop+0x10>)
   b5b58:	6018      	str	r0, [r3, #0]
}
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	2003e734 	.word	0x2003e734

000b5b60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5b60:	4805      	ldr	r0, [pc, #20]	; (b5b78 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5b62:	4a06      	ldr	r2, [pc, #24]	; (b5b7c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5b64:	4906      	ldr	r1, [pc, #24]	; (b5b80 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5b66:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5b68:	1a12      	subs	r2, r2, r0
   b5b6a:	f000 fb3b 	bl	b61e4 <memcpy>
    __backup_sram_signature = signature;
   b5b6e:	4b05      	ldr	r3, [pc, #20]	; (b5b84 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5b70:	4a05      	ldr	r2, [pc, #20]	; (b5b88 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5b72:	601a      	str	r2, [r3, #0]
}
   b5b74:	bd08      	pop	{r3, pc}
   b5b76:	bf00      	nop
   b5b78:	2003f400 	.word	0x2003f400
   b5b7c:	2003f404 	.word	0x2003f404
   b5b80:	000b68b0 	.word	0x000b68b0
   b5b84:	2003f400 	.word	0x2003f400
   b5b88:	9a271c1e 	.word	0x9a271c1e

000b5b8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5b8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5b8e:	2300      	movs	r3, #0
   b5b90:	9300      	str	r3, [sp, #0]
   b5b92:	461a      	mov	r2, r3
   b5b94:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5b98:	f7ff f9da 	bl	b4f50 <system_ctrl_set_result>
}
   b5b9c:	b003      	add	sp, #12
   b5b9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5ba4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5ba4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5ba6:	8843      	ldrh	r3, [r0, #2]
   b5ba8:	2b0a      	cmp	r3, #10
   b5baa:	d008      	beq.n	b5bbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5bac:	2b50      	cmp	r3, #80	; 0x50
   b5bae:	d10b      	bne.n	b5bc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5bb0:	4b09      	ldr	r3, [pc, #36]	; (b5bd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5bb2:	681b      	ldr	r3, [r3, #0]
   b5bb4:	b14b      	cbz	r3, b5bca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5bb6:	b003      	add	sp, #12
   b5bb8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5bbc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5bbe:	f7ff ffe5 	bl	b5b8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5bc2:	b003      	add	sp, #12
   b5bc4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5bc8:	2300      	movs	r3, #0
   b5bca:	9300      	str	r3, [sp, #0]
   b5bcc:	461a      	mov	r2, r3
   b5bce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5bd2:	f7ff f9bd 	bl	b4f50 <system_ctrl_set_result>
}
   b5bd6:	e7f4      	b.n	b5bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5bd8:	2003e6e4 	.word	0x2003e6e4

000b5bdc <module_user_init_hook>:
{
   b5bdc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5bde:	4812      	ldr	r0, [pc, #72]	; (b5c28 <module_user_init_hook+0x4c>)
   b5be0:	2100      	movs	r1, #0
   b5be2:	f7ff f9e7 	bl	b4fb4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5be6:	4b11      	ldr	r3, [pc, #68]	; (b5c2c <module_user_init_hook+0x50>)
   b5be8:	681a      	ldr	r2, [r3, #0]
   b5bea:	4b11      	ldr	r3, [pc, #68]	; (b5c30 <module_user_init_hook+0x54>)
   b5bec:	429a      	cmp	r2, r3
   b5bee:	4b11      	ldr	r3, [pc, #68]	; (b5c34 <module_user_init_hook+0x58>)
   b5bf0:	bf0c      	ite	eq
   b5bf2:	2201      	moveq	r2, #1
   b5bf4:	2200      	movne	r2, #0
   b5bf6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5bf8:	d001      	beq.n	b5bfe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5bfa:	f7ff ffb1 	bl	b5b60 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5bfe:	f7ff f8dd 	bl	b4dbc <HAL_RNG_GetRandomNumber>
   b5c02:	4604      	mov	r4, r0
    srand(seed);
   b5c04:	f000 fb04 	bl	b6210 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5c08:	4b0b      	ldr	r3, [pc, #44]	; (b5c38 <module_user_init_hook+0x5c>)
   b5c0a:	b113      	cbz	r3, b5c12 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5c12:	2100      	movs	r1, #0
   b5c14:	4808      	ldr	r0, [pc, #32]	; (b5c38 <module_user_init_hook+0x5c>)
   b5c16:	f7ff f919 	bl	b4e4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5c1e:	4807      	ldr	r0, [pc, #28]	; (b5c3c <module_user_init_hook+0x60>)
   b5c20:	2100      	movs	r1, #0
   b5c22:	f7ff b98b 	b.w	b4f3c <system_ctrl_set_app_request_handler>
   b5c26:	bf00      	nop
   b5c28:	000b5b09 	.word	0x000b5b09
   b5c2c:	2003f400 	.word	0x2003f400
   b5c30:	9a271c1e 	.word	0x9a271c1e
   b5c34:	2003e6e0 	.word	0x2003e6e0
   b5c38:	00000000 	.word	0x00000000
   b5c3c:	000b5ba5 	.word	0x000b5ba5

000b5c40 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5c40:	4b01      	ldr	r3, [pc, #4]	; (b5c48 <_GLOBAL__sub_I_RGB+0x8>)
   b5c42:	2200      	movs	r2, #0
   b5c44:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5c46:	4770      	bx	lr
   b5c48:	2003e6e8 	.word	0x2003e6e8

000b5c4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5c4c:	2100      	movs	r1, #0
   b5c4e:	f7ff b96d 	b.w	b4f2c <system_delay_ms>
	...

000b5c54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5c54:	4b02      	ldr	r3, [pc, #8]	; (b5c60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5c56:	681a      	ldr	r2, [r3, #0]
   b5c58:	4b02      	ldr	r3, [pc, #8]	; (b5c64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5c5a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5c5c:	4770      	bx	lr
   b5c5e:	bf00      	nop
   b5c60:	2003e56c 	.word	0x2003e56c
   b5c64:	2003e6f8 	.word	0x2003e6f8

000b5c68 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5c68:	4b01      	ldr	r3, [pc, #4]	; (b5c70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5c6a:	4a02      	ldr	r2, [pc, #8]	; (b5c74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5c6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5c6e:	4770      	bx	lr
   b5c70:	2003e6fc 	.word	0x2003e6fc
   b5c74:	000b66b4 	.word	0x000b66b4

000b5c78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c7a:	4606      	mov	r6, r0
   b5c7c:	460d      	mov	r5, r1
  size_t n = 0;
   b5c7e:	188f      	adds	r7, r1, r2
   b5c80:	2400      	movs	r4, #0
  while (size--) {
   b5c82:	42bd      	cmp	r5, r7
   b5c84:	d00c      	beq.n	b5ca0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5c86:	6833      	ldr	r3, [r6, #0]
   b5c88:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5c8c:	689b      	ldr	r3, [r3, #8]
   b5c8e:	4630      	mov	r0, r6
   b5c90:	4798      	blx	r3
     if (chunk>=0)
   b5c92:	1e03      	subs	r3, r0, #0
   b5c94:	db01      	blt.n	b5c9a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5c96:	441c      	add	r4, r3
  while (size--) {
   b5c98:	e7f3      	b.n	b5c82 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5c9a:	2c00      	cmp	r4, #0
   b5c9c:	bf08      	it	eq
   b5c9e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ca4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5ca4:	b513      	push	{r0, r1, r4, lr}
   b5ca6:	4604      	mov	r4, r0
    }
   b5ca8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5caa:	b159      	cbz	r1, b5cc4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5cac:	9101      	str	r1, [sp, #4]
   b5cae:	f000 fb25 	bl	b62fc <strlen>
   b5cb2:	6823      	ldr	r3, [r4, #0]
   b5cb4:	9901      	ldr	r1, [sp, #4]
   b5cb6:	68db      	ldr	r3, [r3, #12]
   b5cb8:	4602      	mov	r2, r0
   b5cba:	4620      	mov	r0, r4
    }
   b5cbc:	b002      	add	sp, #8
   b5cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5cc2:	4718      	bx	r3
    }
   b5cc4:	b002      	add	sp, #8
   b5cc6:	bd10      	pop	{r4, pc}

000b5cc8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5cc8:	6803      	ldr	r3, [r0, #0]
   b5cca:	689b      	ldr	r3, [r3, #8]
   b5ccc:	4718      	bx	r3

000b5cce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5cce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5cd0:	210d      	movs	r1, #13
{
   b5cd2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5cd4:	f7ff fff8 	bl	b5cc8 <_ZN5Print5printEc>
  n += print('\n');
   b5cd8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5cda:	4604      	mov	r4, r0
  n += print('\n');
   b5cdc:	4628      	mov	r0, r5
   b5cde:	f7ff fff3 	bl	b5cc8 <_ZN5Print5printEc>
  return n;
}
   b5ce2:	4420      	add	r0, r4
   b5ce4:	bd38      	pop	{r3, r4, r5, pc}

000b5ce6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5ce6:	b538      	push	{r3, r4, r5, lr}
   b5ce8:	4605      	mov	r5, r0
  return write(str);
   b5cea:	f7ff ffdb 	bl	b5ca4 <_ZN5Print5writeEPKc>
   b5cee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5cf0:	4628      	mov	r0, r5
   b5cf2:	f7ff ffec 	bl	b5cce <_ZN5Print7printlnEv>
  return n;
}
   b5cf6:	4420      	add	r0, r4
   b5cf8:	bd38      	pop	{r3, r4, r5, pc}

000b5cfa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5cfa:	b530      	push	{r4, r5, lr}
   b5cfc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5cfe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5d00:	2a01      	cmp	r2, #1
  *str = '\0';
   b5d02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5d06:	bf98      	it	ls
   b5d08:	220a      	movls	r2, #10
   b5d0a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5d0c:	460d      	mov	r5, r1
   b5d0e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5d12:	fb01 5312 	mls	r3, r1, r2, r5
   b5d16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5d1a:	2b09      	cmp	r3, #9
   b5d1c:	bf94      	ite	ls
   b5d1e:	3330      	addls	r3, #48	; 0x30
   b5d20:	3337      	addhi	r3, #55	; 0x37
   b5d22:	b2db      	uxtb	r3, r3
  } while(n);
   b5d24:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5d26:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5d2a:	d9ef      	bls.n	b5d0c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5d2c:	4621      	mov	r1, r4
   b5d2e:	f7ff ffb9 	bl	b5ca4 <_ZN5Print5writeEPKc>
}
   b5d32:	b00b      	add	sp, #44	; 0x2c
   b5d34:	bd30      	pop	{r4, r5, pc}
	...

000b5d38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5d38:	4802      	ldr	r0, [pc, #8]	; (b5d44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5d3a:	2300      	movs	r3, #0
   b5d3c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5d3e:	f7ff b835 	b.w	b4dac <os_mutex_recursive_create>
   b5d42:	bf00      	nop
   b5d44:	2003e700 	.word	0x2003e700

000b5d48 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5d48:	4b05      	ldr	r3, [pc, #20]	; (b5d60 <_GLOBAL__sub_I_System+0x18>)
   b5d4a:	2202      	movs	r2, #2
   b5d4c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5d4e:	4b05      	ldr	r3, [pc, #20]	; (b5d64 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5d50:	4a05      	ldr	r2, [pc, #20]	; (b5d68 <_GLOBAL__sub_I_System+0x20>)
   b5d52:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5d54:	2000      	movs	r0, #0
   b5d56:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5d5a:	f7ff b8df 	b.w	b4f1c <set_system_mode>
   b5d5e:	bf00      	nop
   b5d60:	2003e710 	.word	0x2003e710
   b5d64:	2003e704 	.word	0x2003e704
   b5d68:	ffff0000 	.word	0xffff0000

000b5d6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5d6c:	2200      	movs	r2, #0
   b5d6e:	6840      	ldr	r0, [r0, #4]
   b5d70:	4611      	mov	r1, r2
   b5d72:	f7ff b8ab 	b.w	b4ecc <network_listening>

000b5d76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d76:	2200      	movs	r2, #0
   b5d78:	6840      	ldr	r0, [r0, #4]
   b5d7a:	4611      	mov	r1, r2
   b5d7c:	f7ff b8b6 	b.w	b4eec <network_get_listen_timeout>

000b5d80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d80:	6840      	ldr	r0, [r0, #4]
   b5d82:	2200      	movs	r2, #0
   b5d84:	f7ff b8aa 	b.w	b4edc <network_set_listen_timeout>

000b5d88 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d88:	6840      	ldr	r0, [r0, #4]
   b5d8a:	2200      	movs	r2, #0
   b5d8c:	f081 0101 	eor.w	r1, r1, #1
   b5d90:	f7ff b894 	b.w	b4ebc <network_listen>

000b5d94 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5d94:	2300      	movs	r3, #0
   b5d96:	6840      	ldr	r0, [r0, #4]
   b5d98:	461a      	mov	r2, r3
   b5d9a:	4619      	mov	r1, r3
   b5d9c:	f7ff b886 	b.w	b4eac <network_off>

000b5da0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5da0:	2300      	movs	r3, #0
   b5da2:	6840      	ldr	r0, [r0, #4]
   b5da4:	461a      	mov	r2, r3
   b5da6:	4619      	mov	r1, r3
   b5da8:	f7ff b878 	b.w	b4e9c <network_on>

000b5dac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5dac:	2200      	movs	r2, #0
   b5dae:	6840      	ldr	r0, [r0, #4]
   b5db0:	4611      	mov	r1, r2
   b5db2:	f7ff b86b 	b.w	b4e8c <network_ready>

000b5db6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5db6:	2200      	movs	r2, #0
   b5db8:	6840      	ldr	r0, [r0, #4]
   b5dba:	4611      	mov	r1, r2
   b5dbc:	f7ff b856 	b.w	b4e6c <network_connecting>

000b5dc0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5dc0:	6840      	ldr	r0, [r0, #4]
   b5dc2:	2200      	movs	r2, #0
   b5dc4:	2102      	movs	r1, #2
   b5dc6:	f7ff b859 	b.w	b4e7c <network_disconnect>

000b5dca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5dca:	2300      	movs	r3, #0
   b5dcc:	6840      	ldr	r0, [r0, #4]
   b5dce:	461a      	mov	r2, r3
   b5dd0:	f7ff b844 	b.w	b4e5c <network_connect>

000b5dd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5dd4:	4b02      	ldr	r3, [pc, #8]	; (b5de0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5dd6:	2203      	movs	r2, #3
   b5dd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5dda:	4a02      	ldr	r2, [pc, #8]	; (b5de4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5ddc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5dde:	4770      	bx	lr
   b5de0:	2003e714 	.word	0x2003e714
   b5de4:	000b66c0 	.word	0x000b66c0

000b5de8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5de8:	4770      	bx	lr
	...

000b5dec <_Z17acquireWireBufferv>:
{
   b5dec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5dee:	2520      	movs	r5, #32
   b5df0:	2314      	movs	r3, #20
{
   b5df2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5df4:	6003      	str	r3, [r0, #0]
   b5df6:	6085      	str	r5, [r0, #8]
   b5df8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5dfa:	4906      	ldr	r1, [pc, #24]	; (b5e14 <_Z17acquireWireBufferv+0x28>)
   b5dfc:	4628      	mov	r0, r5
   b5dfe:	f000 f8d7 	bl	b5fb0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5e02:	4904      	ldr	r1, [pc, #16]	; (b5e14 <_Z17acquireWireBufferv+0x28>)
	};
   b5e04:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5e06:	4628      	mov	r0, r5
   b5e08:	f000 f8d2 	bl	b5fb0 <_ZnajRKSt9nothrow_t>
	};
   b5e0c:	60e0      	str	r0, [r4, #12]
}
   b5e0e:	4620      	mov	r0, r4
   b5e10:	bd38      	pop	{r3, r4, r5, pc}
   b5e12:	bf00      	nop
   b5e14:	000b66f4 	.word	0x000b66f4

000b5e18 <_Z19__fetch_global_Wirev>:
{
   b5e18:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5e1a:	4d0e      	ldr	r5, [pc, #56]	; (b5e54 <_Z19__fetch_global_Wirev+0x3c>)
   b5e1c:	7829      	ldrb	r1, [r5, #0]
   b5e1e:	f3bf 8f5b 	dmb	ish
   b5e22:	f011 0401 	ands.w	r4, r1, #1
{
   b5e26:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5e28:	d111      	bne.n	b5e4e <_Z19__fetch_global_Wirev+0x36>
   b5e2a:	4628      	mov	r0, r5
   b5e2c:	f7fe f937 	bl	b409e <__cxa_guard_acquire>
   b5e30:	b168      	cbz	r0, b5e4e <_Z19__fetch_global_Wirev+0x36>
   b5e32:	a801      	add	r0, sp, #4
   b5e34:	f7ff ffda 	bl	b5dec <_Z17acquireWireBufferv>
   b5e38:	aa01      	add	r2, sp, #4
   b5e3a:	4621      	mov	r1, r4
   b5e3c:	4806      	ldr	r0, [pc, #24]	; (b5e58 <_Z19__fetch_global_Wirev+0x40>)
   b5e3e:	f7ff fced 	bl	b581c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5e42:	4628      	mov	r0, r5
   b5e44:	f7fe f930 	bl	b40a8 <__cxa_guard_release>
   b5e48:	4804      	ldr	r0, [pc, #16]	; (b5e5c <_Z19__fetch_global_Wirev+0x44>)
   b5e4a:	f000 f9c5 	bl	b61d8 <atexit>
	return wire;
}
   b5e4e:	4802      	ldr	r0, [pc, #8]	; (b5e58 <_Z19__fetch_global_Wirev+0x40>)
   b5e50:	b007      	add	sp, #28
   b5e52:	bd30      	pop	{r4, r5, pc}
   b5e54:	2003e71c 	.word	0x2003e71c
   b5e58:	2003e720 	.word	0x2003e720
   b5e5c:	000b5de9 	.word	0x000b5de9

000b5e60 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5e60:	4770      	bx	lr
	...

000b5e64 <_Z20acquireSerial1Bufferv>:
{
   b5e64:	b538      	push	{r3, r4, r5, lr}
   b5e66:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5e68:	2514      	movs	r5, #20
   b5e6a:	462a      	mov	r2, r5
   b5e6c:	2100      	movs	r1, #0
   b5e6e:	f000 f9c7 	bl	b6200 <memset>
   b5e72:	8025      	strh	r5, [r4, #0]
   b5e74:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e76:	4907      	ldr	r1, [pc, #28]	; (b5e94 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5e78:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e7a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5e7c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e7e:	f000 f897 	bl	b5fb0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e82:	4904      	ldr	r1, [pc, #16]	; (b5e94 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5e84:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e86:	4628      	mov	r0, r5
   b5e88:	f000 f892 	bl	b5fb0 <_ZnajRKSt9nothrow_t>
    };
   b5e8c:	60e0      	str	r0, [r4, #12]
}
   b5e8e:	4620      	mov	r0, r4
   b5e90:	bd38      	pop	{r3, r4, r5, pc}
   b5e92:	bf00      	nop
   b5e94:	000b66f4 	.word	0x000b66f4

000b5e98 <_Z22__fetch_global_Serial1v>:
{
   b5e98:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5e9a:	4d0e      	ldr	r5, [pc, #56]	; (b5ed4 <_Z22__fetch_global_Serial1v+0x3c>)
   b5e9c:	7829      	ldrb	r1, [r5, #0]
   b5e9e:	f3bf 8f5b 	dmb	ish
   b5ea2:	f011 0401 	ands.w	r4, r1, #1
{
   b5ea6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ea8:	d111      	bne.n	b5ece <_Z22__fetch_global_Serial1v+0x36>
   b5eaa:	4628      	mov	r0, r5
   b5eac:	f7fe f8f7 	bl	b409e <__cxa_guard_acquire>
   b5eb0:	b168      	cbz	r0, b5ece <_Z22__fetch_global_Serial1v+0x36>
   b5eb2:	a801      	add	r0, sp, #4
   b5eb4:	f7ff ffd6 	bl	b5e64 <_Z20acquireSerial1Bufferv>
   b5eb8:	aa01      	add	r2, sp, #4
   b5eba:	4621      	mov	r1, r4
   b5ebc:	4806      	ldr	r0, [pc, #24]	; (b5ed8 <_Z22__fetch_global_Serial1v+0x40>)
   b5ebe:	f7ff fcfd 	bl	b58bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5ec2:	4628      	mov	r0, r5
   b5ec4:	f7fe f8f0 	bl	b40a8 <__cxa_guard_release>
   b5ec8:	4804      	ldr	r0, [pc, #16]	; (b5edc <_Z22__fetch_global_Serial1v+0x44>)
   b5eca:	f000 f985 	bl	b61d8 <atexit>
    return serial1;
}
   b5ece:	4802      	ldr	r0, [pc, #8]	; (b5ed8 <_Z22__fetch_global_Serial1v+0x40>)
   b5ed0:	b007      	add	sp, #28
   b5ed2:	bd30      	pop	{r4, r5, pc}
   b5ed4:	2003e738 	.word	0x2003e738
   b5ed8:	2003e73c 	.word	0x2003e73c
   b5edc:	000b5e61 	.word	0x000b5e61

000b5ee0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5ee0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5ee2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5ee4:	d902      	bls.n	b5eec <pinAvailable+0xc>
    return false;
   b5ee6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5ee8:	b002      	add	sp, #8
   b5eea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5eec:	f1a0 030b 	sub.w	r3, r0, #11
   b5ef0:	2b02      	cmp	r3, #2
   b5ef2:	d81a      	bhi.n	b5f2a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5ef4:	4c17      	ldr	r4, [pc, #92]	; (b5f54 <pinAvailable+0x74>)
   b5ef6:	7821      	ldrb	r1, [r4, #0]
   b5ef8:	f3bf 8f5b 	dmb	ish
   b5efc:	f011 0101 	ands.w	r1, r1, #1
   b5f00:	d10b      	bne.n	b5f1a <pinAvailable+0x3a>
   b5f02:	4620      	mov	r0, r4
   b5f04:	9101      	str	r1, [sp, #4]
   b5f06:	f7fe f8ca 	bl	b409e <__cxa_guard_acquire>
   b5f0a:	9901      	ldr	r1, [sp, #4]
   b5f0c:	b128      	cbz	r0, b5f1a <pinAvailable+0x3a>
   b5f0e:	4812      	ldr	r0, [pc, #72]	; (b5f58 <pinAvailable+0x78>)
   b5f10:	f7ff fc38 	bl	b5784 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f14:	4620      	mov	r0, r4
   b5f16:	f7fe f8c7 	bl	b40a8 <__cxa_guard_release>
   b5f1a:	4b0f      	ldr	r3, [pc, #60]	; (b5f58 <pinAvailable+0x78>)
   b5f1c:	7818      	ldrb	r0, [r3, #0]
   b5f1e:	f7fe feb5 	bl	b4c8c <hal_spi_is_enabled>
   b5f22:	2800      	cmp	r0, #0
   b5f24:	d1df      	bne.n	b5ee6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5f26:	2001      	movs	r0, #1
   b5f28:	e7de      	b.n	b5ee8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5f2a:	2801      	cmp	r0, #1
   b5f2c:	d809      	bhi.n	b5f42 <pinAvailable+0x62>
   b5f2e:	f7ff ff73 	bl	b5e18 <_Z19__fetch_global_Wirev>
   b5f32:	2100      	movs	r1, #0
   b5f34:	7c00      	ldrb	r0, [r0, #16]
   b5f36:	f7fe fe91 	bl	b4c5c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5f3a:	f080 0001 	eor.w	r0, r0, #1
   b5f3e:	b2c0      	uxtb	r0, r0
   b5f40:	e7d2      	b.n	b5ee8 <pinAvailable+0x8>
   b5f42:	3809      	subs	r0, #9
   b5f44:	2801      	cmp	r0, #1
   b5f46:	d8ee      	bhi.n	b5f26 <pinAvailable+0x46>
   b5f48:	f7ff ffa6 	bl	b5e98 <_Z22__fetch_global_Serial1v>
   b5f4c:	7c00      	ldrb	r0, [r0, #16]
   b5f4e:	f7fe fefd 	bl	b4d4c <hal_usart_is_enabled>
   b5f52:	e7f2      	b.n	b5f3a <pinAvailable+0x5a>
   b5f54:	2003e750 	.word	0x2003e750
   b5f58:	2003e754 	.word	0x2003e754

000b5f5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f5c:	2823      	cmp	r0, #35	; 0x23
{
   b5f5e:	b538      	push	{r3, r4, r5, lr}
   b5f60:	4604      	mov	r4, r0
   b5f62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f64:	d80a      	bhi.n	b5f7c <pinMode+0x20>
   b5f66:	29ff      	cmp	r1, #255	; 0xff
   b5f68:	d008      	beq.n	b5f7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5f6a:	f7ff ffb9 	bl	b5ee0 <pinAvailable>
   b5f6e:	b128      	cbz	r0, b5f7c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5f70:	4629      	mov	r1, r5
   b5f72:	4620      	mov	r0, r4
}
   b5f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5f78:	f7fe bf38 	b.w	b4dec <HAL_Pin_Mode>
}
   b5f7c:	bd38      	pop	{r3, r4, r5, pc}

000b5f7e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5f7e:	b538      	push	{r3, r4, r5, lr}
   b5f80:	4604      	mov	r4, r0
   b5f82:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5f84:	f7fe ff3a 	bl	b4dfc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5f88:	28ff      	cmp	r0, #255	; 0xff
   b5f8a:	d010      	beq.n	b5fae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5f8c:	2806      	cmp	r0, #6
   b5f8e:	d804      	bhi.n	b5f9a <digitalWrite+0x1c>
   b5f90:	234d      	movs	r3, #77	; 0x4d
   b5f92:	fa23 f000 	lsr.w	r0, r3, r0
   b5f96:	07c3      	lsls	r3, r0, #31
   b5f98:	d409      	bmi.n	b5fae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	f7ff ffa0 	bl	b5ee0 <pinAvailable>
   b5fa0:	b128      	cbz	r0, b5fae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5fa2:	4629      	mov	r1, r5
   b5fa4:	4620      	mov	r0, r4
}
   b5fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5faa:	f7fe bf2f 	b.w	b4e0c <HAL_GPIO_Write>
}
   b5fae:	bd38      	pop	{r3, r4, r5, pc}

000b5fb0 <_ZnajRKSt9nothrow_t>:
   b5fb0:	f7fe b871 	b.w	b4096 <_Znaj>

000b5fb4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5fb4:	4901      	ldr	r1, [pc, #4]	; (b5fbc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5fb6:	f000 b8f9 	b.w	b61ac <_ZNKSt9type_infoeqERKS_>
   b5fba:	bf00      	nop
   b5fbc:	000b6710 	.word	0x000b6710

000b5fc0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5fc2:	2400      	movs	r4, #0
   b5fc4:	2310      	movs	r3, #16
   b5fc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5fca:	6803      	ldr	r3, [r0, #0]
   b5fcc:	4615      	mov	r5, r2
   b5fce:	699e      	ldr	r6, [r3, #24]
   b5fd0:	6812      	ldr	r2, [r2, #0]
   b5fd2:	466b      	mov	r3, sp
   b5fd4:	e9cd 4400 	strd	r4, r4, [sp]
   b5fd8:	47b0      	blx	r6
   b5fda:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5fde:	f003 0306 	and.w	r3, r3, #6
   b5fe2:	2b06      	cmp	r3, #6
   b5fe4:	bf03      	ittte	eq
   b5fe6:	9b00      	ldreq	r3, [sp, #0]
   b5fe8:	602b      	streq	r3, [r5, #0]
   b5fea:	2001      	moveq	r0, #1
   b5fec:	4620      	movne	r0, r4
   b5fee:	b004      	add	sp, #16
   b5ff0:	bd70      	pop	{r4, r5, r6, pc}

000b5ff2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5ff2:	9800      	ldr	r0, [sp, #0]
   b5ff4:	4290      	cmp	r0, r2
   b5ff6:	bf14      	ite	ne
   b5ff8:	2001      	movne	r0, #1
   b5ffa:	2006      	moveq	r0, #6
   b5ffc:	4770      	bx	lr
	...

000b6000 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6000:	b510      	push	{r4, lr}
   b6002:	4b03      	ldr	r3, [pc, #12]	; (b6010 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6004:	6003      	str	r3, [r0, #0]
   b6006:	4604      	mov	r4, r0
   b6008:	f000 f8cd 	bl	b61a6 <_ZNSt9type_infoD1Ev>
   b600c:	4620      	mov	r0, r4
   b600e:	bd10      	pop	{r4, pc}
   b6010:	000b6750 	.word	0x000b6750

000b6014 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6014:	b510      	push	{r4, lr}
   b6016:	4604      	mov	r4, r0
   b6018:	f7ff fff2 	bl	b6000 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b601c:	4620      	mov	r0, r4
   b601e:	2108      	movs	r1, #8
   b6020:	f7fe f83b 	bl	b409a <_ZdlPvj>
   b6024:	4620      	mov	r0, r4
   b6026:	bd10      	pop	{r4, pc}

000b6028 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b602c:	461f      	mov	r7, r3
   b602e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6032:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6036:	4598      	cmp	r8, r3
   b6038:	4606      	mov	r6, r0
   b603a:	4615      	mov	r5, r2
   b603c:	d107      	bne.n	b604e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b603e:	9907      	ldr	r1, [sp, #28]
   b6040:	f000 f8b4 	bl	b61ac <_ZNKSt9type_infoeqERKS_>
   b6044:	b118      	cbz	r0, b604e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6046:	7165      	strb	r5, [r4, #5]
   b6048:	2000      	movs	r0, #0
   b604a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b604e:	4639      	mov	r1, r7
   b6050:	4630      	mov	r0, r6
   b6052:	f000 f8ab 	bl	b61ac <_ZNKSt9type_infoeqERKS_>
   b6056:	2800      	cmp	r0, #0
   b6058:	d0f6      	beq.n	b6048 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b605a:	2301      	movs	r3, #1
   b605c:	f8c4 8000 	str.w	r8, [r4]
   b6060:	7125      	strb	r5, [r4, #4]
   b6062:	71a3      	strb	r3, [r4, #6]
   b6064:	e7f0      	b.n	b6048 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6066 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6066:	b538      	push	{r3, r4, r5, lr}
   b6068:	4615      	mov	r5, r2
   b606a:	461c      	mov	r4, r3
   b606c:	f000 f89e 	bl	b61ac <_ZNKSt9type_infoeqERKS_>
   b6070:	b120      	cbz	r0, b607c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6072:	2308      	movs	r3, #8
   b6074:	60e3      	str	r3, [r4, #12]
   b6076:	2306      	movs	r3, #6
   b6078:	6025      	str	r5, [r4, #0]
   b607a:	7123      	strb	r3, [r4, #4]
   b607c:	bd38      	pop	{r3, r4, r5, pc}

000b607e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b607e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6080:	4605      	mov	r5, r0
   b6082:	460c      	mov	r4, r1
   b6084:	9201      	str	r2, [sp, #4]
   b6086:	461e      	mov	r6, r3
   b6088:	f000 f890 	bl	b61ac <_ZNKSt9type_infoeqERKS_>
   b608c:	b950      	cbnz	r0, b60a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b608e:	2e03      	cmp	r6, #3
   b6090:	d808      	bhi.n	b60a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6092:	6823      	ldr	r3, [r4, #0]
   b6094:	9a01      	ldr	r2, [sp, #4]
   b6096:	695b      	ldr	r3, [r3, #20]
   b6098:	4629      	mov	r1, r5
   b609a:	4620      	mov	r0, r4
   b609c:	b002      	add	sp, #8
   b609e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b60a2:	4718      	bx	r3
   b60a4:	b002      	add	sp, #8
   b60a6:	bd70      	pop	{r4, r5, r6, pc}

000b60a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b60a8:	b510      	push	{r4, lr}
   b60aa:	4b03      	ldr	r3, [pc, #12]	; (b60b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b60ac:	6003      	str	r3, [r0, #0]
   b60ae:	4604      	mov	r4, r0
   b60b0:	f7ff ffa6 	bl	b6000 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b60b4:	4620      	mov	r0, r4
   b60b6:	bd10      	pop	{r4, pc}
   b60b8:	000b67b0 	.word	0x000b67b0

000b60bc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b60bc:	b510      	push	{r4, lr}
   b60be:	4604      	mov	r4, r0
   b60c0:	f7ff fff2 	bl	b60a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b60c4:	4620      	mov	r0, r4
   b60c6:	210c      	movs	r1, #12
   b60c8:	f7fd ffe7 	bl	b409a <_ZdlPvj>
   b60cc:	4620      	mov	r0, r4
   b60ce:	bd10      	pop	{r4, pc}

000b60d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b60d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b60d2:	9f08      	ldr	r7, [sp, #32]
   b60d4:	4297      	cmp	r7, r2
   b60d6:	4605      	mov	r5, r0
   b60d8:	460e      	mov	r6, r1
   b60da:	4614      	mov	r4, r2
   b60dc:	d00a      	beq.n	b60f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b60de:	68a8      	ldr	r0, [r5, #8]
   b60e0:	6802      	ldr	r2, [r0, #0]
   b60e2:	9708      	str	r7, [sp, #32]
   b60e4:	6a15      	ldr	r5, [r2, #32]
   b60e6:	4631      	mov	r1, r6
   b60e8:	4622      	mov	r2, r4
   b60ea:	46ac      	mov	ip, r5
   b60ec:	b003      	add	sp, #12
   b60ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b60f2:	4760      	bx	ip
   b60f4:	4619      	mov	r1, r3
   b60f6:	9301      	str	r3, [sp, #4]
   b60f8:	f000 f858 	bl	b61ac <_ZNKSt9type_infoeqERKS_>
   b60fc:	9b01      	ldr	r3, [sp, #4]
   b60fe:	2800      	cmp	r0, #0
   b6100:	d0ed      	beq.n	b60de <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6102:	2006      	movs	r0, #6
   b6104:	b003      	add	sp, #12
   b6106:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6108 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6108:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b610c:	460d      	mov	r5, r1
   b610e:	4619      	mov	r1, r3
   b6110:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6114:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6118:	4681      	mov	r9, r0
   b611a:	4617      	mov	r7, r2
   b611c:	4698      	mov	r8, r3
   b611e:	f000 f845 	bl	b61ac <_ZNKSt9type_infoeqERKS_>
   b6122:	b190      	cbz	r0, b614a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6124:	2d00      	cmp	r5, #0
   b6126:	6034      	str	r4, [r6, #0]
   b6128:	7137      	strb	r7, [r6, #4]
   b612a:	db09      	blt.n	b6140 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b612c:	1961      	adds	r1, r4, r5
   b612e:	458a      	cmp	sl, r1
   b6130:	bf0c      	ite	eq
   b6132:	2106      	moveq	r1, #6
   b6134:	2101      	movne	r1, #1
   b6136:	71b1      	strb	r1, [r6, #6]
   b6138:	2000      	movs	r0, #0
   b613a:	b001      	add	sp, #4
   b613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6140:	3502      	adds	r5, #2
   b6142:	d1f9      	bne.n	b6138 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6144:	2301      	movs	r3, #1
   b6146:	71b3      	strb	r3, [r6, #6]
   b6148:	e7f6      	b.n	b6138 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b614a:	4554      	cmp	r4, sl
   b614c:	d106      	bne.n	b615c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b614e:	4659      	mov	r1, fp
   b6150:	4648      	mov	r0, r9
   b6152:	f000 f82b 	bl	b61ac <_ZNKSt9type_infoeqERKS_>
   b6156:	b108      	cbz	r0, b615c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6158:	7177      	strb	r7, [r6, #5]
   b615a:	e7ed      	b.n	b6138 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b615c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6160:	6803      	ldr	r3, [r0, #0]
   b6162:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6166:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b616a:	69dc      	ldr	r4, [r3, #28]
   b616c:	463a      	mov	r2, r7
   b616e:	4643      	mov	r3, r8
   b6170:	4629      	mov	r1, r5
   b6172:	46a4      	mov	ip, r4
   b6174:	b001      	add	sp, #4
   b6176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b617a:	4760      	bx	ip

000b617c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6180:	4607      	mov	r7, r0
   b6182:	460c      	mov	r4, r1
   b6184:	4615      	mov	r5, r2
   b6186:	461e      	mov	r6, r3
   b6188:	f7ff ff6d 	bl	b6066 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b618c:	b948      	cbnz	r0, b61a2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b618e:	68b8      	ldr	r0, [r7, #8]
   b6190:	6803      	ldr	r3, [r0, #0]
   b6192:	699f      	ldr	r7, [r3, #24]
   b6194:	462a      	mov	r2, r5
   b6196:	4633      	mov	r3, r6
   b6198:	4621      	mov	r1, r4
   b619a:	46bc      	mov	ip, r7
   b619c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b61a0:	4760      	bx	ip
   b61a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b61a6 <_ZNSt9type_infoD1Ev>:
   b61a6:	4770      	bx	lr

000b61a8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b61a8:	2000      	movs	r0, #0
   b61aa:	4770      	bx	lr

000b61ac <_ZNKSt9type_infoeqERKS_>:
   b61ac:	4281      	cmp	r1, r0
   b61ae:	b508      	push	{r3, lr}
   b61b0:	d00e      	beq.n	b61d0 <_ZNKSt9type_infoeqERKS_+0x24>
   b61b2:	6840      	ldr	r0, [r0, #4]
   b61b4:	7803      	ldrb	r3, [r0, #0]
   b61b6:	2b2a      	cmp	r3, #42	; 0x2a
   b61b8:	d00c      	beq.n	b61d4 <_ZNKSt9type_infoeqERKS_+0x28>
   b61ba:	6849      	ldr	r1, [r1, #4]
   b61bc:	780b      	ldrb	r3, [r1, #0]
   b61be:	2b2a      	cmp	r3, #42	; 0x2a
   b61c0:	bf08      	it	eq
   b61c2:	3101      	addeq	r1, #1
   b61c4:	f000 f890 	bl	b62e8 <strcmp>
   b61c8:	fab0 f080 	clz	r0, r0
   b61cc:	0940      	lsrs	r0, r0, #5
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	2001      	movs	r0, #1
   b61d2:	e7fc      	b.n	b61ce <_ZNKSt9type_infoeqERKS_+0x22>
   b61d4:	2000      	movs	r0, #0
   b61d6:	e7fa      	b.n	b61ce <_ZNKSt9type_infoeqERKS_+0x22>

000b61d8 <atexit>:
   b61d8:	2300      	movs	r3, #0
   b61da:	4601      	mov	r1, r0
   b61dc:	461a      	mov	r2, r3
   b61de:	4618      	mov	r0, r3
   b61e0:	f000 b894 	b.w	b630c <__register_exitproc>

000b61e4 <memcpy>:
   b61e4:	440a      	add	r2, r1
   b61e6:	4291      	cmp	r1, r2
   b61e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b61ec:	d100      	bne.n	b61f0 <memcpy+0xc>
   b61ee:	4770      	bx	lr
   b61f0:	b510      	push	{r4, lr}
   b61f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b61f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b61fa:	4291      	cmp	r1, r2
   b61fc:	d1f9      	bne.n	b61f2 <memcpy+0xe>
   b61fe:	bd10      	pop	{r4, pc}

000b6200 <memset>:
   b6200:	4402      	add	r2, r0
   b6202:	4603      	mov	r3, r0
   b6204:	4293      	cmp	r3, r2
   b6206:	d100      	bne.n	b620a <memset+0xa>
   b6208:	4770      	bx	lr
   b620a:	f803 1b01 	strb.w	r1, [r3], #1
   b620e:	e7f9      	b.n	b6204 <memset+0x4>

000b6210 <srand>:
   b6210:	b538      	push	{r3, r4, r5, lr}
   b6212:	4b10      	ldr	r3, [pc, #64]	; (b6254 <srand+0x44>)
   b6214:	681d      	ldr	r5, [r3, #0]
   b6216:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6218:	4604      	mov	r4, r0
   b621a:	b9b3      	cbnz	r3, b624a <srand+0x3a>
   b621c:	2018      	movs	r0, #24
   b621e:	f7fe fea1 	bl	b4f64 <malloc>
   b6222:	4602      	mov	r2, r0
   b6224:	63a8      	str	r0, [r5, #56]	; 0x38
   b6226:	b920      	cbnz	r0, b6232 <srand+0x22>
   b6228:	4b0b      	ldr	r3, [pc, #44]	; (b6258 <srand+0x48>)
   b622a:	480c      	ldr	r0, [pc, #48]	; (b625c <srand+0x4c>)
   b622c:	2142      	movs	r1, #66	; 0x42
   b622e:	f7fe feb9 	bl	b4fa4 <__assert_func>
   b6232:	490b      	ldr	r1, [pc, #44]	; (b6260 <srand+0x50>)
   b6234:	4b0b      	ldr	r3, [pc, #44]	; (b6264 <srand+0x54>)
   b6236:	e9c0 1300 	strd	r1, r3, [r0]
   b623a:	4b0b      	ldr	r3, [pc, #44]	; (b6268 <srand+0x58>)
   b623c:	6083      	str	r3, [r0, #8]
   b623e:	230b      	movs	r3, #11
   b6240:	8183      	strh	r3, [r0, #12]
   b6242:	2100      	movs	r1, #0
   b6244:	2001      	movs	r0, #1
   b6246:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b624a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b624c:	2200      	movs	r2, #0
   b624e:	611c      	str	r4, [r3, #16]
   b6250:	615a      	str	r2, [r3, #20]
   b6252:	bd38      	pop	{r3, r4, r5, pc}
   b6254:	2003e570 	.word	0x2003e570
   b6258:	000b67e9 	.word	0x000b67e9
   b625c:	000b6800 	.word	0x000b6800
   b6260:	abcd330e 	.word	0xabcd330e
   b6264:	e66d1234 	.word	0xe66d1234
   b6268:	0005deec 	.word	0x0005deec

000b626c <rand>:
   b626c:	4b16      	ldr	r3, [pc, #88]	; (b62c8 <rand+0x5c>)
   b626e:	b510      	push	{r4, lr}
   b6270:	681c      	ldr	r4, [r3, #0]
   b6272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b6274:	b9b3      	cbnz	r3, b62a4 <rand+0x38>
   b6276:	2018      	movs	r0, #24
   b6278:	f7fe fe74 	bl	b4f64 <malloc>
   b627c:	63a0      	str	r0, [r4, #56]	; 0x38
   b627e:	b928      	cbnz	r0, b628c <rand+0x20>
   b6280:	4602      	mov	r2, r0
   b6282:	4b12      	ldr	r3, [pc, #72]	; (b62cc <rand+0x60>)
   b6284:	4812      	ldr	r0, [pc, #72]	; (b62d0 <rand+0x64>)
   b6286:	214e      	movs	r1, #78	; 0x4e
   b6288:	f7fe fe8c 	bl	b4fa4 <__assert_func>
   b628c:	4a11      	ldr	r2, [pc, #68]	; (b62d4 <rand+0x68>)
   b628e:	4b12      	ldr	r3, [pc, #72]	; (b62d8 <rand+0x6c>)
   b6290:	e9c0 2300 	strd	r2, r3, [r0]
   b6294:	4b11      	ldr	r3, [pc, #68]	; (b62dc <rand+0x70>)
   b6296:	6083      	str	r3, [r0, #8]
   b6298:	230b      	movs	r3, #11
   b629a:	8183      	strh	r3, [r0, #12]
   b629c:	2201      	movs	r2, #1
   b629e:	2300      	movs	r3, #0
   b62a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b62a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b62a6:	4a0e      	ldr	r2, [pc, #56]	; (b62e0 <rand+0x74>)
   b62a8:	6920      	ldr	r0, [r4, #16]
   b62aa:	6963      	ldr	r3, [r4, #20]
   b62ac:	490d      	ldr	r1, [pc, #52]	; (b62e4 <rand+0x78>)
   b62ae:	4342      	muls	r2, r0
   b62b0:	fb01 2203 	mla	r2, r1, r3, r2
   b62b4:	fba0 0101 	umull	r0, r1, r0, r1
   b62b8:	1c43      	adds	r3, r0, #1
   b62ba:	eb42 0001 	adc.w	r0, r2, r1
   b62be:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b62c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b62c6:	bd10      	pop	{r4, pc}
   b62c8:	2003e570 	.word	0x2003e570
   b62cc:	000b67e9 	.word	0x000b67e9
   b62d0:	000b6800 	.word	0x000b6800
   b62d4:	abcd330e 	.word	0xabcd330e
   b62d8:	e66d1234 	.word	0xe66d1234
   b62dc:	0005deec 	.word	0x0005deec
   b62e0:	5851f42d 	.word	0x5851f42d
   b62e4:	4c957f2d 	.word	0x4c957f2d

000b62e8 <strcmp>:
   b62e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b62ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b62f0:	2a01      	cmp	r2, #1
   b62f2:	bf28      	it	cs
   b62f4:	429a      	cmpcs	r2, r3
   b62f6:	d0f7      	beq.n	b62e8 <strcmp>
   b62f8:	1ad0      	subs	r0, r2, r3
   b62fa:	4770      	bx	lr

000b62fc <strlen>:
   b62fc:	4603      	mov	r3, r0
   b62fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6302:	2a00      	cmp	r2, #0
   b6304:	d1fb      	bne.n	b62fe <strlen+0x2>
   b6306:	1a18      	subs	r0, r3, r0
   b6308:	3801      	subs	r0, #1
   b630a:	4770      	bx	lr

000b630c <__register_exitproc>:
   b630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6310:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b63cc <__register_exitproc+0xc0>
   b6314:	4606      	mov	r6, r0
   b6316:	f8d8 0000 	ldr.w	r0, [r8]
   b631a:	461f      	mov	r7, r3
   b631c:	460d      	mov	r5, r1
   b631e:	4691      	mov	r9, r2
   b6320:	f000 f856 	bl	b63d0 <__retarget_lock_acquire_recursive>
   b6324:	4b25      	ldr	r3, [pc, #148]	; (b63bc <__register_exitproc+0xb0>)
   b6326:	681c      	ldr	r4, [r3, #0]
   b6328:	b934      	cbnz	r4, b6338 <__register_exitproc+0x2c>
   b632a:	4c25      	ldr	r4, [pc, #148]	; (b63c0 <__register_exitproc+0xb4>)
   b632c:	601c      	str	r4, [r3, #0]
   b632e:	4b25      	ldr	r3, [pc, #148]	; (b63c4 <__register_exitproc+0xb8>)
   b6330:	b113      	cbz	r3, b6338 <__register_exitproc+0x2c>
   b6332:	681b      	ldr	r3, [r3, #0]
   b6334:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6338:	6863      	ldr	r3, [r4, #4]
   b633a:	2b1f      	cmp	r3, #31
   b633c:	dd07      	ble.n	b634e <__register_exitproc+0x42>
   b633e:	f8d8 0000 	ldr.w	r0, [r8]
   b6342:	f000 f847 	bl	b63d4 <__retarget_lock_release_recursive>
   b6346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b634a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b634e:	b34e      	cbz	r6, b63a4 <__register_exitproc+0x98>
   b6350:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6354:	b988      	cbnz	r0, b637a <__register_exitproc+0x6e>
   b6356:	4b1c      	ldr	r3, [pc, #112]	; (b63c8 <__register_exitproc+0xbc>)
   b6358:	b923      	cbnz	r3, b6364 <__register_exitproc+0x58>
   b635a:	f8d8 0000 	ldr.w	r0, [r8]
   b635e:	f000 f838 	bl	b63d2 <__retarget_lock_release>
   b6362:	e7f0      	b.n	b6346 <__register_exitproc+0x3a>
   b6364:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6368:	f7fe fdfc 	bl	b4f64 <malloc>
   b636c:	2800      	cmp	r0, #0
   b636e:	d0f4      	beq.n	b635a <__register_exitproc+0x4e>
   b6370:	2300      	movs	r3, #0
   b6372:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6376:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b637a:	6863      	ldr	r3, [r4, #4]
   b637c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6380:	2201      	movs	r2, #1
   b6382:	409a      	lsls	r2, r3
   b6384:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6388:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b638c:	4313      	orrs	r3, r2
   b638e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6392:	2e02      	cmp	r6, #2
   b6394:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6398:	bf02      	ittt	eq
   b639a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b639e:	4313      	orreq	r3, r2
   b63a0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b63a4:	6863      	ldr	r3, [r4, #4]
   b63a6:	f8d8 0000 	ldr.w	r0, [r8]
   b63aa:	1c5a      	adds	r2, r3, #1
   b63ac:	3302      	adds	r3, #2
   b63ae:	6062      	str	r2, [r4, #4]
   b63b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b63b4:	f000 f80e 	bl	b63d4 <__retarget_lock_release_recursive>
   b63b8:	2000      	movs	r0, #0
   b63ba:	e7c6      	b.n	b634a <__register_exitproc+0x3e>
   b63bc:	2003e7e8 	.word	0x2003e7e8
   b63c0:	2003e75c 	.word	0x2003e75c
   b63c4:	00000000 	.word	0x00000000
   b63c8:	000b4f65 	.word	0x000b4f65
   b63cc:	2003e5d4 	.word	0x2003e5d4

000b63d0 <__retarget_lock_acquire_recursive>:
   b63d0:	4770      	bx	lr

000b63d2 <__retarget_lock_release>:
   b63d2:	4770      	bx	lr

000b63d4 <__retarget_lock_release_recursive>:
   b63d4:	4770      	bx	lr

000b63d6 <link_code_end>:
	...

000b63d8 <dynalib_user>:
   b63d8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b63e8:	0000 0000 6c70 6d75 4365 6e6f 656e 7463     ....plumeConnect
   b63f8:	2928 203a 7441 6574 706d 6974 676e 7420     (): Attempting t
   b6408:	206f 6f63 6e6e 6365 2074 6f74 5420 6968     o connect to Thi
   b6418:	676e 6273 616f 6472 7320 7265 6576 0072     ngsboard server.
   b6428:	6d79 5a56 716b 6c63 6a55 3650 7962 5633     ymVZkqclUjP6by3V
   b6438:	5a70 4365 4100 6772 6e6f 7000 756c 656d     pZeC.Argon.plume
   b6448:	6f43 6e6e 6365 2874 3a29 4320 6e6f 656e     Connect(): Conne
   b6458:	7463 6465 7000 756c 656d 6f43 6e6e 6365     cted.plumeConnec
   b6468:	2874 3a29 4320 6e6f 656e 7463 6f69 206e     t(): Connection 
   b6478:	6166 6c69 6465 202c 6572 7274 2079 6e69     failed, retry in
   b6488:	3320 7320 6365 6e6f 7364 7400 0031 3274      3 seconds.t1.t2
   b6498:	7400 0033 3474 7400 0035 3176 642f 7665     .t3.t4.t5.v1/dev
   b64a8:	6369 7365 6d2f 2f65 6574 656c 656d 7274     ices/me/telemetr
   b64b8:	0079 0000                                   y...

000b64bc <_ZTV16JsonWriterStaticILj256EE>:
	...
   b64c4:	40b1 000b 40c5 000b 755c 3025 5834 0000     .@...@..\u%04X..

000b64d4 <_ZTV10JsonBuffer>:
	...
   b64dc:	42e9 000b 4305 000b                         .B...C..

000b64e4 <_ZTV10JsonWriter>:
	...
   b64ec:	4319 000b 432d 000b 0400 514d 5454 0004     .C..-C....MQTT..

000b64fc <_ZTVN5spark12NetworkClassE>:
	...
   b6504:	4fc5 000b 4fcf 000b 4fd9 000b 4fe3 000b     .O...O...O...O..
   b6514:	4fed 000b 4ff9 000b 5005 000b 500d 000b     .O...O...P...P..
   b6524:	5015 000b 5021 000b 5029 000b 5033 000b     .P..!P..)P..3P..
   b6534:	503d 000b                                   =P..

000b6538 <_ZTVN5spark9WiFiClassE>:
	...
   b6540:	5187 000b 517d 000b 5173 000b 5129 000b     .Q..}Q..sQ..)Q..
   b6550:	5167 000b 515b 000b 5005 000b 500d 000b     gQ..[Q...P...P..
   b6560:	514f 000b 5147 000b 513d 000b 5133 000b     OQ..GQ..=Q..3Q..
   b6570:	503d 000b 6977 6972 676e 7200 6365 2076     =P..wiring.recv 
   b6580:	7265 6f72 2072 203d 6425 0000               error = %d..

000b658c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6594:	5229 000b 524d 000b 577f 000b 525b 000b     )R..MR...W..[R..
   b65a4:	522d 000b                                   -R..

000b65a8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b65b0 <_ZTV9TCPClient>:
	...
   b65b8:	52d9 000b 530d 000b 51a5 000b 51bf 000b     .R...S...Q...Q..
   b65c8:	5615 000b 51e9 000b 548b 000b 521d 000b     .V...Q...T...R..
   b65d8:	551d 000b 535d 000b 54b9 000b 56c9 000b     .U..]S...T...V..
   b65e8:	5459 000b 521f 000b 51d1 000b 5261 000b     YT...R...Q..aR..
   b65f8:	533d 000b                                   =S..

000b65fc <_ZTV7TwoWire>:
	...
   b6604:	57c3 000b 580d 000b 57e5 000b 57c5 000b     .W...X...W...W..
   b6614:	57ed 000b 57f5 000b 57fd 000b 5805 000b     .W...W...W...X..

000b6624 <_ZTV11USARTSerial>:
	...
   b662c:	5841 000b 58ad 000b 5885 000b 5c79 000b     AX...X...X..y\..
   b663c:	5855 000b 5871 000b 5863 000b 587f 000b     UX..qX..cX...X..
   b664c:	5843 000b 5847 000b                         CX..GX..

000b6654 <_ZTV9USBSerial>:
	...
   b665c:	58eb 000b 5953 000b 5929 000b 5c79 000b     .X..SY..)Y..y\..
   b666c:	591b 000b 58ed 000b 58fd 000b 594d 000b     .Y...X...X..MY..
   b667c:	590d 000b 58e5 000b                         .Y...X..

000b6684 <_ZTV9IPAddress>:
	...
   b668c:	59fd 000b 59ed 000b 59ef 000b 5925 252d     .Y...Y...Y..%Y-%
   b669c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b66ac:	7361 7463 6d69 0065 7061 0070               asctime.app.

000b66b8 <_ZTVN5spark13EthernetClassE>:
	...
   b66c0:	5dcb 000b 5dc1 000b 5db7 000b 5dad 000b     .]...]...]...]..
   b66d0:	5da1 000b 5d95 000b 5005 000b 500d 000b     .]...]...P...P..
   b66e0:	5d89 000b 5d81 000b 5d77 000b 5d6d 000b     .]...]..w]..m]..
   b66f0:	503d 000b                                   =P..

000b66f4 <_ZSt7nothrow>:
	...

000b66f5 <_ZTSSt19_Sp_make_shared_tag>:
   b66f5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6705:	6572 5f64 6174 0067 0000                     red_tag....

000b6710 <_ZTISt19_Sp_make_shared_tag>:
   b6710:	6750 000b 66f5 000b                         Pg...f..

000b6718 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6718:	67b0 000b 6724 000b 67d4 000b               .g..$g...g..

000b6724 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6724:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6734:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6744:	0045 0000                                   E...

000b6748 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6748:	0000 0000 6718 000b 6001 000b 6015 000b     .....g...`...`..
   b6758:	61a9 000b 61a9 000b 607f 000b 5fc1 000b     .a...a...`..._..
   b6768:	6067 000b 6029 000b 5ff3 000b               g`..)`..._..

000b6774 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6774:	67b0 000b 6780 000b 6718 000b               .g...g...g..

000b6780 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6780:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6790:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b67a0:	666e 456f 0000 0000                         nfoE....

000b67a8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b67a8:	0000 0000 6774 000b 60a9 000b 60bd 000b     ....tg...`...`..
   b67b8:	61a9 000b 61a9 000b 607f 000b 5fc1 000b     .a...a...`..._..
   b67c8:	617d 000b 6109 000b 60d1 000b               }a...a...`..

000b67d4 <_ZTISt9type_info>:
   b67d4:	6750 000b 67dc 000b                         Pg...g..

000b67dc <_ZTSSt9type_info>:
   b67dc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b67ec:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b67fc:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b680c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b681c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b682c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b683c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b684c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b685c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b686c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b687d <link_const_variable_data_end>:
   b687d:	00          	.byte	0x00
	...

000b6880 <link_constructors_location>:
   b6880:	000b42c9 	.word	0x000b42c9
   b6884:	000b5115 	.word	0x000b5115
   b6888:	000b5191 	.word	0x000b5191
   b688c:	000b5c41 	.word	0x000b5c41
   b6890:	000b5c55 	.word	0x000b5c55
   b6894:	000b5c69 	.word	0x000b5c69
   b6898:	000b5d39 	.word	0x000b5d39
   b689c:	000b5d49 	.word	0x000b5d49
   b68a0:	000b5dd5 	.word	0x000b5dd5

000b68a4 <link_constructors_end>:
	...
